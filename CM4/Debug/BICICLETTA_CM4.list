
BICICLETTA_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011630  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf8  081118d0  081118d0  000128d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  081124c8  081124c8  000134c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  081124d0  081124d0  000134d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  081124d4  081124d4  000134d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000250  10000000  081124d8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000548  10000250  08112728  00014250  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000798  08112728  00014798  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00014250  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026d04  00000000  00000000  00014280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000046c0  00000000  00000000  0003af84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c40  00000000  00000000  0003f648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000157f  00000000  00000000  00041288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f55c  00000000  00000000  00042807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024426  00000000  00000000  00081d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a2a4b  00000000  00000000  000a6189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  00248bd4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008fb4  00000000  00000000  00248c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  00251c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000016fd  00000000  00000000  00251caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000060  00000000  00000000  002533a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000250 	.word	0x10000250
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081118b8 	.word	0x081118b8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000254 	.word	0x10000254
 81002dc:	081118b8 	.word	0x081118b8

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a0 	b.w	81010f0 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	@ (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	460c      	mov	r4, r1
 8100e3c:	2b00      	cmp	r3, #0
 8100e3e:	d14e      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e40:	4694      	mov	ip, r2
 8100e42:	458c      	cmp	ip, r1
 8100e44:	4686      	mov	lr, r0
 8100e46:	fab2 f282 	clz	r2, r2
 8100e4a:	d962      	bls.n	8100f12 <__udivmoddi4+0xde>
 8100e4c:	b14a      	cbz	r2, 8100e62 <__udivmoddi4+0x2e>
 8100e4e:	f1c2 0320 	rsb	r3, r2, #32
 8100e52:	4091      	lsls	r1, r2
 8100e54:	fa20 f303 	lsr.w	r3, r0, r3
 8100e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5c:	4319      	orrs	r1, r3
 8100e5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8100e62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100e66:	fa1f f68c 	uxth.w	r6, ip
 8100e6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8100e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100e72:	fb07 1114 	mls	r1, r7, r4, r1
 8100e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e7a:	fb04 f106 	mul.w	r1, r4, r6
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f104 30ff 	add.w	r0, r4, #4294967295
 8100e8a:	f080 8112 	bcs.w	81010b2 <__udivmoddi4+0x27e>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 810f 	bls.w	81010b2 <__udivmoddi4+0x27e>
 8100e94:	3c02      	subs	r4, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a59      	subs	r1, r3, r1
 8100e9a:	fa1f f38e 	uxth.w	r3, lr
 8100e9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8100ea2:	fb07 1110 	mls	r1, r7, r0, r1
 8100ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100eaa:	fb00 f606 	mul.w	r6, r0, r6
 8100eae:	429e      	cmp	r6, r3
 8100eb0:	d90a      	bls.n	8100ec8 <__udivmoddi4+0x94>
 8100eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8100eb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8100eba:	f080 80fc 	bcs.w	81010b6 <__udivmoddi4+0x282>
 8100ebe:	429e      	cmp	r6, r3
 8100ec0:	f240 80f9 	bls.w	81010b6 <__udivmoddi4+0x282>
 8100ec4:	4463      	add	r3, ip
 8100ec6:	3802      	subs	r0, #2
 8100ec8:	1b9b      	subs	r3, r3, r6
 8100eca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100ece:	2100      	movs	r1, #0
 8100ed0:	b11d      	cbz	r5, 8100eda <__udivmoddi4+0xa6>
 8100ed2:	40d3      	lsrs	r3, r2
 8100ed4:	2200      	movs	r2, #0
 8100ed6:	e9c5 3200 	strd	r3, r2, [r5]
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d905      	bls.n	8100eee <__udivmoddi4+0xba>
 8100ee2:	b10d      	cbz	r5, 8100ee8 <__udivmoddi4+0xb4>
 8100ee4:	e9c5 0100 	strd	r0, r1, [r5]
 8100ee8:	2100      	movs	r1, #0
 8100eea:	4608      	mov	r0, r1
 8100eec:	e7f5      	b.n	8100eda <__udivmoddi4+0xa6>
 8100eee:	fab3 f183 	clz	r1, r3
 8100ef2:	2900      	cmp	r1, #0
 8100ef4:	d146      	bne.n	8100f84 <__udivmoddi4+0x150>
 8100ef6:	42a3      	cmp	r3, r4
 8100ef8:	d302      	bcc.n	8100f00 <__udivmoddi4+0xcc>
 8100efa:	4290      	cmp	r0, r2
 8100efc:	f0c0 80f0 	bcc.w	81010e0 <__udivmoddi4+0x2ac>
 8100f00:	1a86      	subs	r6, r0, r2
 8100f02:	eb64 0303 	sbc.w	r3, r4, r3
 8100f06:	2001      	movs	r0, #1
 8100f08:	2d00      	cmp	r5, #0
 8100f0a:	d0e6      	beq.n	8100eda <__udivmoddi4+0xa6>
 8100f0c:	e9c5 6300 	strd	r6, r3, [r5]
 8100f10:	e7e3      	b.n	8100eda <__udivmoddi4+0xa6>
 8100f12:	2a00      	cmp	r2, #0
 8100f14:	f040 8090 	bne.w	8101038 <__udivmoddi4+0x204>
 8100f18:	eba1 040c 	sub.w	r4, r1, ip
 8100f1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100f20:	fa1f f78c 	uxth.w	r7, ip
 8100f24:	2101      	movs	r1, #1
 8100f26:	fbb4 f6f8 	udiv	r6, r4, r8
 8100f2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100f2e:	fb08 4416 	mls	r4, r8, r6, r4
 8100f32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f36:	fb07 f006 	mul.w	r0, r7, r6
 8100f3a:	4298      	cmp	r0, r3
 8100f3c:	d908      	bls.n	8100f50 <__udivmoddi4+0x11c>
 8100f3e:	eb1c 0303 	adds.w	r3, ip, r3
 8100f42:	f106 34ff 	add.w	r4, r6, #4294967295
 8100f46:	d202      	bcs.n	8100f4e <__udivmoddi4+0x11a>
 8100f48:	4298      	cmp	r0, r3
 8100f4a:	f200 80cd 	bhi.w	81010e8 <__udivmoddi4+0x2b4>
 8100f4e:	4626      	mov	r6, r4
 8100f50:	1a1c      	subs	r4, r3, r0
 8100f52:	fa1f f38e 	uxth.w	r3, lr
 8100f56:	fbb4 f0f8 	udiv	r0, r4, r8
 8100f5a:	fb08 4410 	mls	r4, r8, r0, r4
 8100f5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f62:	fb00 f707 	mul.w	r7, r0, r7
 8100f66:	429f      	cmp	r7, r3
 8100f68:	d908      	bls.n	8100f7c <__udivmoddi4+0x148>
 8100f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8100f6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8100f72:	d202      	bcs.n	8100f7a <__udivmoddi4+0x146>
 8100f74:	429f      	cmp	r7, r3
 8100f76:	f200 80b0 	bhi.w	81010da <__udivmoddi4+0x2a6>
 8100f7a:	4620      	mov	r0, r4
 8100f7c:	1bdb      	subs	r3, r3, r7
 8100f7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100f82:	e7a5      	b.n	8100ed0 <__udivmoddi4+0x9c>
 8100f84:	f1c1 0620 	rsb	r6, r1, #32
 8100f88:	408b      	lsls	r3, r1
 8100f8a:	fa22 f706 	lsr.w	r7, r2, r6
 8100f8e:	431f      	orrs	r7, r3
 8100f90:	fa20 fc06 	lsr.w	ip, r0, r6
 8100f94:	fa04 f301 	lsl.w	r3, r4, r1
 8100f98:	ea43 030c 	orr.w	r3, r3, ip
 8100f9c:	40f4      	lsrs	r4, r6
 8100f9e:	fa00 f801 	lsl.w	r8, r0, r1
 8100fa2:	0c38      	lsrs	r0, r7, #16
 8100fa4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100fa8:	fbb4 fef0 	udiv	lr, r4, r0
 8100fac:	fa1f fc87 	uxth.w	ip, r7
 8100fb0:	fb00 441e 	mls	r4, r0, lr, r4
 8100fb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fb8:	fb0e f90c 	mul.w	r9, lr, ip
 8100fbc:	45a1      	cmp	r9, r4
 8100fbe:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc2:	d90a      	bls.n	8100fda <__udivmoddi4+0x1a6>
 8100fc4:	193c      	adds	r4, r7, r4
 8100fc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100fca:	f080 8084 	bcs.w	81010d6 <__udivmoddi4+0x2a2>
 8100fce:	45a1      	cmp	r9, r4
 8100fd0:	f240 8081 	bls.w	81010d6 <__udivmoddi4+0x2a2>
 8100fd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8100fd8:	443c      	add	r4, r7
 8100fda:	eba4 0409 	sub.w	r4, r4, r9
 8100fde:	fa1f f983 	uxth.w	r9, r3
 8100fe2:	fbb4 f3f0 	udiv	r3, r4, r0
 8100fe6:	fb00 4413 	mls	r4, r0, r3, r4
 8100fea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fee:	fb03 fc0c 	mul.w	ip, r3, ip
 8100ff2:	45a4      	cmp	ip, r4
 8100ff4:	d907      	bls.n	8101006 <__udivmoddi4+0x1d2>
 8100ff6:	193c      	adds	r4, r7, r4
 8100ff8:	f103 30ff 	add.w	r0, r3, #4294967295
 8100ffc:	d267      	bcs.n	81010ce <__udivmoddi4+0x29a>
 8100ffe:	45a4      	cmp	ip, r4
 8101000:	d965      	bls.n	81010ce <__udivmoddi4+0x29a>
 8101002:	3b02      	subs	r3, #2
 8101004:	443c      	add	r4, r7
 8101006:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 810100a:	fba0 9302 	umull	r9, r3, r0, r2
 810100e:	eba4 040c 	sub.w	r4, r4, ip
 8101012:	429c      	cmp	r4, r3
 8101014:	46ce      	mov	lr, r9
 8101016:	469c      	mov	ip, r3
 8101018:	d351      	bcc.n	81010be <__udivmoddi4+0x28a>
 810101a:	d04e      	beq.n	81010ba <__udivmoddi4+0x286>
 810101c:	b155      	cbz	r5, 8101034 <__udivmoddi4+0x200>
 810101e:	ebb8 030e 	subs.w	r3, r8, lr
 8101022:	eb64 040c 	sbc.w	r4, r4, ip
 8101026:	fa04 f606 	lsl.w	r6, r4, r6
 810102a:	40cb      	lsrs	r3, r1
 810102c:	431e      	orrs	r6, r3
 810102e:	40cc      	lsrs	r4, r1
 8101030:	e9c5 6400 	strd	r6, r4, [r5]
 8101034:	2100      	movs	r1, #0
 8101036:	e750      	b.n	8100eda <__udivmoddi4+0xa6>
 8101038:	f1c2 0320 	rsb	r3, r2, #32
 810103c:	fa20 f103 	lsr.w	r1, r0, r3
 8101040:	fa0c fc02 	lsl.w	ip, ip, r2
 8101044:	fa24 f303 	lsr.w	r3, r4, r3
 8101048:	4094      	lsls	r4, r2
 810104a:	430c      	orrs	r4, r1
 810104c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8101050:	fa00 fe02 	lsl.w	lr, r0, r2
 8101054:	fa1f f78c 	uxth.w	r7, ip
 8101058:	fbb3 f0f8 	udiv	r0, r3, r8
 810105c:	fb08 3110 	mls	r1, r8, r0, r3
 8101060:	0c23      	lsrs	r3, r4, #16
 8101062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8101066:	fb00 f107 	mul.w	r1, r0, r7
 810106a:	4299      	cmp	r1, r3
 810106c:	d908      	bls.n	8101080 <__udivmoddi4+0x24c>
 810106e:	eb1c 0303 	adds.w	r3, ip, r3
 8101072:	f100 36ff 	add.w	r6, r0, #4294967295
 8101076:	d22c      	bcs.n	81010d2 <__udivmoddi4+0x29e>
 8101078:	4299      	cmp	r1, r3
 810107a:	d92a      	bls.n	81010d2 <__udivmoddi4+0x29e>
 810107c:	3802      	subs	r0, #2
 810107e:	4463      	add	r3, ip
 8101080:	1a5b      	subs	r3, r3, r1
 8101082:	b2a4      	uxth	r4, r4
 8101084:	fbb3 f1f8 	udiv	r1, r3, r8
 8101088:	fb08 3311 	mls	r3, r8, r1, r3
 810108c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8101090:	fb01 f307 	mul.w	r3, r1, r7
 8101094:	42a3      	cmp	r3, r4
 8101096:	d908      	bls.n	81010aa <__udivmoddi4+0x276>
 8101098:	eb1c 0404 	adds.w	r4, ip, r4
 810109c:	f101 36ff 	add.w	r6, r1, #4294967295
 81010a0:	d213      	bcs.n	81010ca <__udivmoddi4+0x296>
 81010a2:	42a3      	cmp	r3, r4
 81010a4:	d911      	bls.n	81010ca <__udivmoddi4+0x296>
 81010a6:	3902      	subs	r1, #2
 81010a8:	4464      	add	r4, ip
 81010aa:	1ae4      	subs	r4, r4, r3
 81010ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 81010b0:	e739      	b.n	8100f26 <__udivmoddi4+0xf2>
 81010b2:	4604      	mov	r4, r0
 81010b4:	e6f0      	b.n	8100e98 <__udivmoddi4+0x64>
 81010b6:	4608      	mov	r0, r1
 81010b8:	e706      	b.n	8100ec8 <__udivmoddi4+0x94>
 81010ba:	45c8      	cmp	r8, r9
 81010bc:	d2ae      	bcs.n	810101c <__udivmoddi4+0x1e8>
 81010be:	ebb9 0e02 	subs.w	lr, r9, r2
 81010c2:	eb63 0c07 	sbc.w	ip, r3, r7
 81010c6:	3801      	subs	r0, #1
 81010c8:	e7a8      	b.n	810101c <__udivmoddi4+0x1e8>
 81010ca:	4631      	mov	r1, r6
 81010cc:	e7ed      	b.n	81010aa <__udivmoddi4+0x276>
 81010ce:	4603      	mov	r3, r0
 81010d0:	e799      	b.n	8101006 <__udivmoddi4+0x1d2>
 81010d2:	4630      	mov	r0, r6
 81010d4:	e7d4      	b.n	8101080 <__udivmoddi4+0x24c>
 81010d6:	46d6      	mov	lr, sl
 81010d8:	e77f      	b.n	8100fda <__udivmoddi4+0x1a6>
 81010da:	4463      	add	r3, ip
 81010dc:	3802      	subs	r0, #2
 81010de:	e74d      	b.n	8100f7c <__udivmoddi4+0x148>
 81010e0:	4606      	mov	r6, r0
 81010e2:	4623      	mov	r3, r4
 81010e4:	4608      	mov	r0, r1
 81010e6:	e70f      	b.n	8100f08 <__udivmoddi4+0xd4>
 81010e8:	3e02      	subs	r6, #2
 81010ea:	4463      	add	r3, ip
 81010ec:	e730      	b.n	8100f50 <__udivmoddi4+0x11c>
 81010ee:	bf00      	nop

081010f0 <__aeabi_idiv0>:
 81010f0:	4770      	bx	lr
 81010f2:	bf00      	nop

081010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81010f4:	b480      	push	{r7}
 81010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81010f8:	4b09      	ldr	r3, [pc, #36]	@ (8101120 <SystemInit+0x2c>)
 81010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81010fe:	4a08      	ldr	r2, [pc, #32]	@ (8101120 <SystemInit+0x2c>)
 8101100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101108:	4b05      	ldr	r3, [pc, #20]	@ (8101120 <SystemInit+0x2c>)
 810110a:	691b      	ldr	r3, [r3, #16]
 810110c:	4a04      	ldr	r2, [pc, #16]	@ (8101120 <SystemInit+0x2c>)
 810110e:	f043 0310 	orr.w	r3, r3, #16
 8101112:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101114:	bf00      	nop
 8101116:	46bd      	mov	sp, r7
 8101118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810111c:	4770      	bx	lr
 810111e:	bf00      	nop
 8101120:	e000ed00 	.word	0xe000ed00

08101124 <DegreeSec2RPM>:
 */
#include "DC_motor.h"
#include "main.h"
#include "stdint.h"

float DegreeSec2RPM(float speed_degsec){
 8101124:	b480      	push	{r7}
 8101126:	b085      	sub	sp, #20
 8101128:	af00      	add	r7, sp, #0
 810112a:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed_rpm = (speed_degsec * 60)/360;
 810112e:	edd7 7a01 	vldr	s15, [r7, #4]
 8101132:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 810115c <DegreeSec2RPM+0x38>
 8101136:	ee27 7a87 	vmul.f32	s14, s15, s14
 810113a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8101160 <DegreeSec2RPM+0x3c>
 810113e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101142:	edc7 7a03 	vstr	s15, [r7, #12]
	return speed_rpm;
 8101146:	68fb      	ldr	r3, [r7, #12]
 8101148:	ee07 3a90 	vmov	s15, r3
}
 810114c:	eeb0 0a67 	vmov.f32	s0, s15
 8101150:	3714      	adds	r7, #20
 8101152:	46bd      	mov	sp, r7
 8101154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101158:	4770      	bx	lr
 810115a:	bf00      	nop
 810115c:	42700000 	.word	0x42700000
 8101160:	43b40000 	.word	0x43b40000

08101164 <Voltage2Duty>:

float Voltage2Duty(float u){
 8101164:	b480      	push	{r7}
 8101166:	b085      	sub	sp, #20
 8101168:	af00      	add	r7, sp, #0
 810116a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0){
 810116e:	edd7 7a01 	vldr	s15, [r7, #4]
 8101172:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8101176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810117a:	d805      	bhi.n	8101188 <Voltage2Duty+0x24>
		u = -u;
 810117c:	edd7 7a01 	vldr	s15, [r7, #4]
 8101180:	eef1 7a67 	vneg.f32	s15, s15
 8101184:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	float duty = 100 * u/V_MAX;
 8101188:	edd7 7a01 	vldr	s15, [r7, #4]
 810118c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 81011e0 <Voltage2Duty+0x7c>
 8101190:	ee27 7a87 	vmul.f32	s14, s15, s14
 8101194:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8101198:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810119c:	edc7 7a03 	vstr	s15, [r7, #12]

	if (duty > 100){
 81011a0:	edd7 7a03 	vldr	s15, [r7, #12]
 81011a4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 81011e0 <Voltage2Duty+0x7c>
 81011a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 81011ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011b0:	dd02      	ble.n	81011b8 <Voltage2Duty+0x54>
		duty = 100;
 81011b2:	4b0c      	ldr	r3, [pc, #48]	@ (81011e4 <Voltage2Duty+0x80>)
 81011b4:	60fb      	str	r3, [r7, #12]
 81011b6:	e009      	b.n	81011cc <Voltage2Duty+0x68>
	}else if(duty < 0){
 81011b8:	edd7 7a03 	vldr	s15, [r7, #12]
 81011bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81011c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011c4:	d502      	bpl.n	81011cc <Voltage2Duty+0x68>
		duty = 0;
 81011c6:	f04f 0300 	mov.w	r3, #0
 81011ca:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 81011cc:	68fb      	ldr	r3, [r7, #12]
 81011ce:	ee07 3a90 	vmov	s15, r3
}
 81011d2:	eeb0 0a67 	vmov.f32	s0, s15
 81011d6:	3714      	adds	r7, #20
 81011d8:	46bd      	mov	sp, r7
 81011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011de:	4770      	bx	lr
 81011e0:	42c80000 	.word	0x42c80000
 81011e4:	42c80000 	.word	0x42c80000

081011e8 <Ref2Direction>:

uint8_t Ref2Direction(float y_ref){
 81011e8:	b480      	push	{r7}
 81011ea:	b085      	sub	sp, #20
 81011ec:	af00      	add	r7, sp, #0
 81011ee:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t direction;
	if(y_ref >= 0){
 81011f2:	edd7 7a01 	vldr	s15, [r7, #4]
 81011f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011fe:	db02      	blt.n	8101206 <Ref2Direction+0x1e>
		direction = 0;
 8101200:	2300      	movs	r3, #0
 8101202:	73fb      	strb	r3, [r7, #15]
 8101204:	e001      	b.n	810120a <Ref2Direction+0x22>
	} else {
		direction = 1;
 8101206:	2301      	movs	r3, #1
 8101208:	73fb      	strb	r3, [r7, #15]
	}
	return direction;
 810120a:	7bfb      	ldrb	r3, [r7, #15]
}
 810120c:	4618      	mov	r0, r3
 810120e:	3714      	adds	r7, #20
 8101210:	46bd      	mov	sp, r7
 8101212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101216:	4770      	bx	lr

08101218 <set_PWM_and_dir_back_wheel>:

void set_PWM_and_dir_back_wheel(float duty, uint8_t direction){
 8101218:	b5b0      	push	{r4, r5, r7, lr}
 810121a:	b082      	sub	sp, #8
 810121c:	af00      	add	r7, sp, #0
 810121e:	ed87 0a01 	vstr	s0, [r7, #4]
 8101222:	4603      	mov	r3, r0
 8101224:	70fb      	strb	r3, [r7, #3]
	TIM1 ->CCR1 = (duty/100.0)*TIM1->ARR;
 8101226:	6878      	ldr	r0, [r7, #4]
 8101228:	f7ff fa16 	bl	8100658 <__aeabi_f2d>
 810122c:	f04f 0200 	mov.w	r2, #0
 8101230:	4b17      	ldr	r3, [pc, #92]	@ (8101290 <set_PWM_and_dir_back_wheel+0x78>)
 8101232:	f7ff fb93 	bl	810095c <__aeabi_ddiv>
 8101236:	4602      	mov	r2, r0
 8101238:	460b      	mov	r3, r1
 810123a:	4614      	mov	r4, r2
 810123c:	461d      	mov	r5, r3
 810123e:	4b15      	ldr	r3, [pc, #84]	@ (8101294 <set_PWM_and_dir_back_wheel+0x7c>)
 8101240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101242:	4618      	mov	r0, r3
 8101244:	f7ff f9e6 	bl	8100614 <__aeabi_ui2d>
 8101248:	4602      	mov	r2, r0
 810124a:	460b      	mov	r3, r1
 810124c:	4620      	mov	r0, r4
 810124e:	4629      	mov	r1, r5
 8101250:	f7ff fa5a 	bl	8100708 <__aeabi_dmul>
 8101254:	4602      	mov	r2, r0
 8101256:	460b      	mov	r3, r1
 8101258:	4c0e      	ldr	r4, [pc, #56]	@ (8101294 <set_PWM_and_dir_back_wheel+0x7c>)
 810125a:	4610      	mov	r0, r2
 810125c:	4619      	mov	r1, r3
 810125e:	f7ff fd2b 	bl	8100cb8 <__aeabi_d2uiz>
 8101262:	4603      	mov	r3, r0
 8101264:	6363      	str	r3, [r4, #52]	@ 0x34

	//ARR:valore massimo che il contatore può raggiungere


	//Qui non ho capito a che serve
	if(direction == 0){
 8101266:	78fb      	ldrb	r3, [r7, #3]
 8101268:	2b00      	cmp	r3, #0
 810126a:	d105      	bne.n	8101278 <set_PWM_and_dir_back_wheel+0x60>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810126c:	2200      	movs	r2, #0
 810126e:	2110      	movs	r1, #16
 8101270:	4809      	ldr	r0, [pc, #36]	@ (8101298 <set_PWM_and_dir_back_wheel+0x80>)
 8101272:	f004 f8db 	bl	810542c <HAL_GPIO_WritePin>
	}else if(direction == 1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	}
}
 8101276:	e007      	b.n	8101288 <set_PWM_and_dir_back_wheel+0x70>
	}else if(direction == 1){
 8101278:	78fb      	ldrb	r3, [r7, #3]
 810127a:	2b01      	cmp	r3, #1
 810127c:	d104      	bne.n	8101288 <set_PWM_and_dir_back_wheel+0x70>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810127e:	2201      	movs	r2, #1
 8101280:	2110      	movs	r1, #16
 8101282:	4805      	ldr	r0, [pc, #20]	@ (8101298 <set_PWM_and_dir_back_wheel+0x80>)
 8101284:	f004 f8d2 	bl	810542c <HAL_GPIO_WritePin>
}
 8101288:	bf00      	nop
 810128a:	3708      	adds	r7, #8
 810128c:	46bd      	mov	sp, r7
 810128e:	bdb0      	pop	{r4, r5, r7, pc}
 8101290:	40590000 	.word	0x40590000
 8101294:	40010000 	.word	0x40010000
 8101298:	58020000 	.word	0x58020000

0810129c <set_PWM_and_dir_front_wheel>:

void set_PWM_and_dir_front_wheel (float duty, uint8_t dir){
 810129c:	b580      	push	{r7, lr}
 810129e:	b082      	sub	sp, #8
 81012a0:	af00      	add	r7, sp, #0
 81012a2:	ed87 0a01 	vstr	s0, [r7, #4]
 81012a6:	4603      	mov	r3, r0
 81012a8:	70fb      	strb	r3, [r7, #3]
	TIM3 -> CCR1 = (duty/100)*TIM3->ARR;
 81012aa:	edd7 7a01 	vldr	s15, [r7, #4]
 81012ae:	eddf 6a13 	vldr	s13, [pc, #76]	@ 81012fc <set_PWM_and_dir_front_wheel+0x60>
 81012b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81012b6:	4b12      	ldr	r3, [pc, #72]	@ (8101300 <set_PWM_and_dir_front_wheel+0x64>)
 81012b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81012ba:	ee07 3a90 	vmov	s15, r3
 81012be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81012c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8101300 <set_PWM_and_dir_front_wheel+0x64>)
 81012c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81012cc:	ee17 2a90 	vmov	r2, s15
 81012d0:	635a      	str	r2, [r3, #52]	@ 0x34

	if (dir == 0){
 81012d2:	78fb      	ldrb	r3, [r7, #3]
 81012d4:	2b00      	cmp	r3, #0
 81012d6:	d105      	bne.n	81012e4 <set_PWM_and_dir_front_wheel+0x48>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //da rimettere il 5
 81012d8:	2200      	movs	r2, #0
 81012da:	2110      	movs	r1, #16
 81012dc:	4809      	ldr	r0, [pc, #36]	@ (8101304 <set_PWM_and_dir_front_wheel+0x68>)
 81012de:	f004 f8a5 	bl	810542c <HAL_GPIO_WritePin>

	}else if (dir == 1){
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	}
}
 81012e2:	e007      	b.n	81012f4 <set_PWM_and_dir_front_wheel+0x58>
	}else if (dir == 1){
 81012e4:	78fb      	ldrb	r3, [r7, #3]
 81012e6:	2b01      	cmp	r3, #1
 81012e8:	d104      	bne.n	81012f4 <set_PWM_and_dir_front_wheel+0x58>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81012ea:	2201      	movs	r2, #1
 81012ec:	2110      	movs	r1, #16
 81012ee:	4805      	ldr	r0, [pc, #20]	@ (8101304 <set_PWM_and_dir_front_wheel+0x68>)
 81012f0:	f004 f89c 	bl	810542c <HAL_GPIO_WritePin>
}
 81012f4:	bf00      	nop
 81012f6:	3708      	adds	r7, #8
 81012f8:	46bd      	mov	sp, r7
 81012fa:	bd80      	pop	{r7, pc}
 81012fc:	42c80000 	.word	0x42c80000
 8101300:	40000400 	.word	0x40000400
 8101304:	58020000 	.word	0x58020000

08101308 <init_PID>:
 *      Author: andre
 */

#include <PID.h>

void init_PID (PID* p, float Tc, float u_max, float u_min){
 8101308:	b480      	push	{r7}
 810130a:	b085      	sub	sp, #20
 810130c:	af00      	add	r7, sp, #0
 810130e:	60f8      	str	r0, [r7, #12]
 8101310:	ed87 0a02 	vstr	s0, [r7, #8]
 8101314:	edc7 0a01 	vstr	s1, [r7, #4]
 8101318:	ed87 1a00 	vstr	s2, [r7]

	p->Tc = Tc;
 810131c:	68fb      	ldr	r3, [r7, #12]
 810131e:	68ba      	ldr	r2, [r7, #8]
 8101320:	60da      	str	r2, [r3, #12]
	p->u_max = u_max;
 8101322:	68fb      	ldr	r3, [r7, #12]
 8101324:	687a      	ldr	r2, [r7, #4]
 8101326:	611a      	str	r2, [r3, #16]
	p->u_min = u_min;
 8101328:	68fb      	ldr	r3, [r7, #12]
 810132a:	683a      	ldr	r2, [r7, #0]
 810132c:	615a      	str	r2, [r3, #20]
	p->e_old=0;
 810132e:	68fb      	ldr	r3, [r7, #12]
 8101330:	f04f 0200 	mov.w	r2, #0
 8101334:	619a      	str	r2, [r3, #24]
	p->Iterm=0;
 8101336:	68fb      	ldr	r3, [r7, #12]
 8101338:	f04f 0200 	mov.w	r2, #0
 810133c:	61da      	str	r2, [r3, #28]

}
 810133e:	bf00      	nop
 8101340:	3714      	adds	r7, #20
 8101342:	46bd      	mov	sp, r7
 8101344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101348:	4770      	bx	lr

0810134a <tune_PID>:


void tune_PID (PID* p, float Kp, float Ki, float Kd){
 810134a:	b480      	push	{r7}
 810134c:	b085      	sub	sp, #20
 810134e:	af00      	add	r7, sp, #0
 8101350:	60f8      	str	r0, [r7, #12]
 8101352:	ed87 0a02 	vstr	s0, [r7, #8]
 8101356:	edc7 0a01 	vstr	s1, [r7, #4]
 810135a:	ed87 1a00 	vstr	s2, [r7]

	p->Kp = Kp;
 810135e:	68fb      	ldr	r3, [r7, #12]
 8101360:	68ba      	ldr	r2, [r7, #8]
 8101362:	601a      	str	r2, [r3, #0]
	p->Kd = Kd;
 8101364:	68fb      	ldr	r3, [r7, #12]
 8101366:	683a      	ldr	r2, [r7, #0]
 8101368:	609a      	str	r2, [r3, #8]
	p->Ki = Ki;
 810136a:	68fb      	ldr	r3, [r7, #12]
 810136c:	687a      	ldr	r2, [r7, #4]
 810136e:	605a      	str	r2, [r3, #4]
}
 8101370:	bf00      	nop
 8101372:	3714      	adds	r7, #20
 8101374:	46bd      	mov	sp, r7
 8101376:	f85d 7b04 	ldr.w	r7, [sp], #4
 810137a:	4770      	bx	lr

0810137c <PID_controller>:

float PID_controller (PID* p, float y, float r){
 810137c:	b480      	push	{r7}
 810137e:	b089      	sub	sp, #36	@ 0x24
 8101380:	af00      	add	r7, sp, #0
 8101382:	60f8      	str	r0, [r7, #12]
 8101384:	ed87 0a02 	vstr	s0, [r7, #8]
 8101388:	edc7 0a01 	vstr	s1, [r7, #4]

	float u;
	float newIterm;
	float e = r-y;
 810138c:	ed97 7a01 	vldr	s14, [r7, #4]
 8101390:	edd7 7a02 	vldr	s15, [r7, #8]
 8101394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101398:	edc7 7a06 	vstr	s15, [r7, #24]
	float Pterm = p-> Kp * e;
 810139c:	68fb      	ldr	r3, [r7, #12]
 810139e:	edd3 7a00 	vldr	s15, [r3]
 81013a2:	ed97 7a06 	vldr	s14, [r7, #24]
 81013a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81013aa:	edc7 7a05 	vstr	s15, [r7, #20]

	newIterm = p->Iterm + (p->Ki)* p->Tc * p->e_old;
 81013ae:	68fb      	ldr	r3, [r7, #12]
 81013b0:	ed93 7a07 	vldr	s14, [r3, #28]
 81013b4:	68fb      	ldr	r3, [r7, #12]
 81013b6:	edd3 6a01 	vldr	s13, [r3, #4]
 81013ba:	68fb      	ldr	r3, [r7, #12]
 81013bc:	edd3 7a03 	vldr	s15, [r3, #12]
 81013c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 81013c4:	68fb      	ldr	r3, [r7, #12]
 81013c6:	edd3 7a06 	vldr	s15, [r3, #24]
 81013ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81013ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 81013d2:	edc7 7a04 	vstr	s15, [r7, #16]
	p->e_old = e;
 81013d6:	68fb      	ldr	r3, [r7, #12]
 81013d8:	69ba      	ldr	r2, [r7, #24]
 81013da:	619a      	str	r2, [r3, #24]
	u = Pterm + newIterm;
 81013dc:	ed97 7a05 	vldr	s14, [r7, #20]
 81013e0:	edd7 7a04 	vldr	s15, [r7, #16]
 81013e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 81013e8:	edc7 7a07 	vstr	s15, [r7, #28]




	if (u > p->u_max){
 81013ec:	68fb      	ldr	r3, [r7, #12]
 81013ee:	edd3 7a04 	vldr	s15, [r3, #16]
 81013f2:	ed97 7a07 	vldr	s14, [r7, #28]
 81013f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81013fe:	dd03      	ble.n	8101408 <PID_controller+0x8c>
		u = p->u_max;
 8101400:	68fb      	ldr	r3, [r7, #12]
 8101402:	691b      	ldr	r3, [r3, #16]
 8101404:	61fb      	str	r3, [r7, #28]
 8101406:	e010      	b.n	810142a <PID_controller+0xae>
	}else if(u<p->u_min){
 8101408:	68fb      	ldr	r3, [r7, #12]
 810140a:	edd3 7a05 	vldr	s15, [r3, #20]
 810140e:	ed97 7a07 	vldr	s14, [r7, #28]
 8101412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810141a:	d503      	bpl.n	8101424 <PID_controller+0xa8>
		u = p->u_min;
 810141c:	68fb      	ldr	r3, [r7, #12]
 810141e:	695b      	ldr	r3, [r3, #20]
 8101420:	61fb      	str	r3, [r7, #28]
 8101422:	e002      	b.n	810142a <PID_controller+0xae>
	}else
	{
		p->Iterm = newIterm;
 8101424:	68fb      	ldr	r3, [r7, #12]
 8101426:	693a      	ldr	r2, [r7, #16]
 8101428:	61da      	str	r2, [r3, #28]
	}

	return u;
 810142a:	69fb      	ldr	r3, [r7, #28]
 810142c:	ee07 3a90 	vmov	s15, r3

}
 8101430:	eeb0 0a67 	vmov.f32	s0, s15
 8101434:	3724      	adds	r7, #36	@ 0x24
 8101436:	46bd      	mov	sp, r7
 8101438:	f85d 7b04 	ldr.w	r7, [sp], #4
 810143c:	4770      	bx	lr

0810143e <bno055_setPage>:
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

// Imposta la pagina di registro del sensore BNO055
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 810143e:	b580      	push	{r7, lr}
 8101440:	b082      	sub	sp, #8
 8101442:	af00      	add	r7, sp, #0
 8101444:	4603      	mov	r3, r0
 8101446:	71fb      	strb	r3, [r7, #7]
 8101448:	79fb      	ldrb	r3, [r7, #7]
 810144a:	4619      	mov	r1, r3
 810144c:	2007      	movs	r0, #7
 810144e:	f000 f8b5 	bl	81015bc <bno055_writeData>
 8101452:	bf00      	nop
 8101454:	3708      	adds	r7, #8
 8101456:	46bd      	mov	sp, r7
 8101458:	bd80      	pop	{r7, pc}

0810145a <bno055_setOperationMode>:
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

// Imposta la modalità operativa del sensore BNO055 e attende un ritardo in base alla modalità
void bno055_setOperationMode(bno055_opmode_t mode) {
 810145a:	b580      	push	{r7, lr}
 810145c:	b082      	sub	sp, #8
 810145e:	af00      	add	r7, sp, #0
 8101460:	4603      	mov	r3, r0
 8101462:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8101464:	79fb      	ldrb	r3, [r7, #7]
 8101466:	4619      	mov	r1, r3
 8101468:	203d      	movs	r0, #61	@ 0x3d
 810146a:	f000 f8a7 	bl	81015bc <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 810146e:	79fb      	ldrb	r3, [r7, #7]
 8101470:	2b00      	cmp	r3, #0
 8101472:	d103      	bne.n	810147c <bno055_setOperationMode+0x22>
    bno055_delay(100);
 8101474:	2064      	movs	r0, #100	@ 0x64
 8101476:	f000 f895 	bl	81015a4 <bno055_delay>
  } else {
    bno055_delay(80);
  }
}
 810147a:	e002      	b.n	8101482 <bno055_setOperationMode+0x28>
    bno055_delay(80);
 810147c:	2050      	movs	r0, #80	@ 0x50
 810147e:	f000 f891 	bl	81015a4 <bno055_delay>
}
 8101482:	bf00      	nop
 8101484:	3708      	adds	r7, #8
 8101486:	46bd      	mov	sp, r7
 8101488:	bd80      	pop	{r7, pc}

0810148a <bno055_setOperationModeConfig>:

// NON FUSION MODE

// Imposta la modalità operativa del sensore BNO055 su configurazione
void bno055_setOperationModeConfig() {
 810148a:	b580      	push	{r7, lr}
 810148c:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 810148e:	2000      	movs	r0, #0
 8101490:	f7ff ffe3 	bl	810145a <bno055_setOperationMode>
}
 8101494:	bf00      	nop
 8101496:	bd80      	pop	{r7, pc}

08101498 <bno055_setOperationModeNDOF>:
void bno055_setOperationModeNDOF_FMC_OFF(){
	bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF_FMC_OFF);
}

// Imposta la modalità operativa del sensore BNO055 su NDOF (Nine Degrees of Freedom)
void bno055_setOperationModeNDOF() {
 8101498:	b580      	push	{r7, lr}
 810149a:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 810149c:	200c      	movs	r0, #12
 810149e:	f7ff ffdc 	bl	810145a <bno055_setOperationMode>
}
 81014a2:	bf00      	nop
 81014a4:	bd80      	pop	{r7, pc}

081014a6 <bno055_reset>:
void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
// Disabilita l'uso di un cristallo esterno per il sensore BNO055
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

// Esegue una procedura di reset per il sensore BNO055
void bno055_reset() {
 81014a6:	b580      	push	{r7, lr}
 81014a8:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 81014aa:	2120      	movs	r1, #32
 81014ac:	203f      	movs	r0, #63	@ 0x3f
 81014ae:	f000 f885 	bl	81015bc <bno055_writeData>
  bno055_delay(700);
 81014b2:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 81014b6:	f000 f875 	bl	81015a4 <bno055_delay>
}
 81014ba:	bf00      	nop
 81014bc:	bd80      	pop	{r7, pc}
	...

081014c0 <bno055_setup>:
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

// Inizializza il sensore BNO055 eseguendo una procedura di reset e configurazione iniziale
void bno055_setup() {
 81014c0:	b580      	push	{r7, lr}
 81014c2:	b082      	sub	sp, #8
 81014c4:	af00      	add	r7, sp, #0
  bno055_reset();
 81014c6:	f7ff ffee 	bl	81014a6 <bno055_reset>

  uint8_t id = 0;
 81014ca:	2300      	movs	r3, #0
 81014cc:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 81014ce:	1dfb      	adds	r3, r7, #7
 81014d0:	2201      	movs	r2, #1
 81014d2:	4619      	mov	r1, r3
 81014d4:	2000      	movs	r0, #0
 81014d6:	f000 f94b 	bl	8101770 <bno055_readData>
  if (id != BNO055_ID) {
 81014da:	79fb      	ldrb	r3, [r7, #7]
 81014dc:	2ba0      	cmp	r3, #160	@ 0xa0
 81014de:	d004      	beq.n	81014ea <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 81014e0:	79fb      	ldrb	r3, [r7, #7]
 81014e2:	4619      	mov	r1, r3
 81014e4:	4809      	ldr	r0, [pc, #36]	@ (810150c <bno055_setup+0x4c>)
 81014e6:	f00b fd09 	bl	810cefc <iprintf>
  }
  bno055_setPage(0);
 81014ea:	2000      	movs	r0, #0
 81014ec:	f7ff ffa7 	bl	810143e <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 81014f0:	2100      	movs	r1, #0
 81014f2:	203f      	movs	r0, #63	@ 0x3f
 81014f4:	f000 f862 	bl	81015bc <bno055_writeData>

  // Seleziona la modalità di configurazione del BNO055
  bno055_setOperationModeConfig();
 81014f8:	f7ff ffc7 	bl	810148a <bno055_setOperationModeConfig>
  bno055_delay(10);
 81014fc:	200a      	movs	r0, #10
 81014fe:	f000 f851 	bl	81015a4 <bno055_delay>
}
 8101502:	bf00      	nop
 8101504:	3708      	adds	r7, #8
 8101506:	46bd      	mov	sp, r7
 8101508:	bd80      	pop	{r7, pc}
 810150a:	bf00      	nop
 810150c:	081118d0 	.word	0x081118d0

08101510 <bno055_getCalibrationState>:
  bno055_readData(BNO055_SYS_ERR, &tmp, 1);
  return tmp;
}

// Ottiene lo stato di calibrazione del sensore BNO055
bno055_calibration_state_t bno055_getCalibrationState() {
 8101510:	b580      	push	{r7, lr}
 8101512:	b084      	sub	sp, #16
 8101514:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 8101516:	2000      	movs	r0, #0
 8101518:	f7ff ff91 	bl	810143e <bno055_setPage>
  bno055_calibration_state_t cal = {.sys = 0, .gyro = 0, .mag = 0, .accel = 0};
 810151c:	2300      	movs	r3, #0
 810151e:	60bb      	str	r3, [r7, #8]
  uint8_t calState = 0;
 8101520:	2300      	movs	r3, #0
 8101522:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CALIB_STAT, &calState, 1);
 8101524:	1dfb      	adds	r3, r7, #7
 8101526:	2201      	movs	r2, #1
 8101528:	4619      	mov	r1, r3
 810152a:	2035      	movs	r0, #53	@ 0x35
 810152c:	f000 f920 	bl	8101770 <bno055_readData>
  cal.sys = (calState >> 6) & 0x03;
 8101530:	79fb      	ldrb	r3, [r7, #7]
 8101532:	099b      	lsrs	r3, r3, #6
 8101534:	b2db      	uxtb	r3, r3
 8101536:	723b      	strb	r3, [r7, #8]
  cal.gyro = (calState >> 4) & 0x03;
 8101538:	79fb      	ldrb	r3, [r7, #7]
 810153a:	091b      	lsrs	r3, r3, #4
 810153c:	b2db      	uxtb	r3, r3
 810153e:	f003 0303 	and.w	r3, r3, #3
 8101542:	b2db      	uxtb	r3, r3
 8101544:	727b      	strb	r3, [r7, #9]
  cal.accel = (calState >> 2) & 0x03;
 8101546:	79fb      	ldrb	r3, [r7, #7]
 8101548:	089b      	lsrs	r3, r3, #2
 810154a:	b2db      	uxtb	r3, r3
 810154c:	f003 0303 	and.w	r3, r3, #3
 8101550:	b2db      	uxtb	r3, r3
 8101552:	72fb      	strb	r3, [r7, #11]
  cal.mag = calState & 0x03;
 8101554:	79fb      	ldrb	r3, [r7, #7]
 8101556:	f003 0303 	and.w	r3, r3, #3
 810155a:	b2db      	uxtb	r3, r3
 810155c:	72bb      	strb	r3, [r7, #10]
  return cal;
 810155e:	68bb      	ldr	r3, [r7, #8]
 8101560:	60fb      	str	r3, [r7, #12]
 8101562:	2300      	movs	r3, #0
 8101564:	7b3a      	ldrb	r2, [r7, #12]
 8101566:	f362 0307 	bfi	r3, r2, #0, #8
 810156a:	7b7a      	ldrb	r2, [r7, #13]
 810156c:	f362 230f 	bfi	r3, r2, #8, #8
 8101570:	7bba      	ldrb	r2, [r7, #14]
 8101572:	f362 4317 	bfi	r3, r2, #16, #8
 8101576:	7bfa      	ldrb	r2, [r7, #15]
 8101578:	f362 631f 	bfi	r3, r2, #24, #8
}
 810157c:	4618      	mov	r0, r3
 810157e:	3710      	adds	r7, #16
 8101580:	46bd      	mov	sp, r7
 8101582:	bd80      	pop	{r7, pc}

08101584 <bno055_assignI2C>:
  uint8_t axisMapSign = (axis.x_sign << 2) | (axis.y_sign << 1) | (axis.z_sign);
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
}

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8101584:	b480      	push	{r7}
 8101586:	b083      	sub	sp, #12
 8101588:	af00      	add	r7, sp, #0
 810158a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 810158c:	4a04      	ldr	r2, [pc, #16]	@ (81015a0 <bno055_assignI2C+0x1c>)
 810158e:	687b      	ldr	r3, [r7, #4]
 8101590:	6013      	str	r3, [r2, #0]
}
 8101592:	bf00      	nop
 8101594:	370c      	adds	r7, #12
 8101596:	46bd      	mov	sp, r7
 8101598:	f85d 7b04 	ldr.w	r7, [sp], #4
 810159c:	4770      	bx	lr
 810159e:	bf00      	nop
 81015a0:	1000026c 	.word	0x1000026c

081015a4 <bno055_delay>:

void bno055_delay(int time) {
 81015a4:	b580      	push	{r7, lr}
 81015a6:	b082      	sub	sp, #8
 81015a8:	af00      	add	r7, sp, #0
 81015aa:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 81015ac:	687b      	ldr	r3, [r7, #4]
 81015ae:	4618      	mov	r0, r3
 81015b0:	f001 ff50 	bl	8103454 <HAL_Delay>
#endif
}
 81015b4:	bf00      	nop
 81015b6:	3708      	adds	r7, #8
 81015b8:	46bd      	mov	sp, r7
 81015ba:	bd80      	pop	{r7, pc}

081015bc <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 81015bc:	b580      	push	{r7, lr}
 81015be:	b088      	sub	sp, #32
 81015c0:	af02      	add	r7, sp, #8
 81015c2:	4603      	mov	r3, r0
 81015c4:	460a      	mov	r2, r1
 81015c6:	71fb      	strb	r3, [r7, #7]
 81015c8:	4613      	mov	r3, r2
 81015ca:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 81015cc:	79fb      	ldrb	r3, [r7, #7]
 81015ce:	733b      	strb	r3, [r7, #12]
 81015d0:	79bb      	ldrb	r3, [r7, #6]
 81015d2:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 81015d4:	4b53      	ldr	r3, [pc, #332]	@ (8101724 <bno055_writeData+0x168>)
 81015d6:	6818      	ldr	r0, [r3, #0]
 81015d8:	f107 020c 	add.w	r2, r7, #12
 81015dc:	230a      	movs	r3, #10
 81015de:	9300      	str	r3, [sp, #0]
 81015e0:	2302      	movs	r3, #2
 81015e2:	2150      	movs	r1, #80	@ 0x50
 81015e4:	f004 f804 	bl	81055f0 <HAL_I2C_Master_Transmit>
 81015e8:	4603      	mov	r3, r0
 81015ea:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);

  if (status == HAL_OK) {
 81015ec:	7dfb      	ldrb	r3, [r7, #23]
 81015ee:	2b00      	cmp	r3, #0
 81015f0:	f000 8092 	beq.w	8101718 <bno055_writeData+0x15c>
    return;
  }

  if (status == HAL_ERROR) {
 81015f4:	7dfb      	ldrb	r3, [r7, #23]
 81015f6:	2b01      	cmp	r3, #1
 81015f8:	d103      	bne.n	8101602 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 81015fa:	484b      	ldr	r0, [pc, #300]	@ (8101728 <bno055_writeData+0x16c>)
 81015fc:	f00b fce6 	bl	810cfcc <puts>
 8101600:	e012      	b.n	8101628 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8101602:	7dfb      	ldrb	r3, [r7, #23]
 8101604:	2b03      	cmp	r3, #3
 8101606:	d103      	bne.n	8101610 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8101608:	4848      	ldr	r0, [pc, #288]	@ (810172c <bno055_writeData+0x170>)
 810160a:	f00b fcdf 	bl	810cfcc <puts>
 810160e:	e00b      	b.n	8101628 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8101610:	7dfb      	ldrb	r3, [r7, #23]
 8101612:	2b02      	cmp	r3, #2
 8101614:	d103      	bne.n	810161e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8101616:	4846      	ldr	r0, [pc, #280]	@ (8101730 <bno055_writeData+0x174>)
 8101618:	f00b fcd8 	bl	810cfcc <puts>
 810161c:	e004      	b.n	8101628 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 810161e:	7dfb      	ldrb	r3, [r7, #23]
 8101620:	4619      	mov	r1, r3
 8101622:	4844      	ldr	r0, [pc, #272]	@ (8101734 <bno055_writeData+0x178>)
 8101624:	f00b fc6a 	bl	810cefc <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8101628:	4b3e      	ldr	r3, [pc, #248]	@ (8101724 <bno055_writeData+0x168>)
 810162a:	681b      	ldr	r3, [r3, #0]
 810162c:	4618      	mov	r0, r3
 810162e:	f004 f9fb 	bl	8105a28 <HAL_I2C_GetError>
 8101632:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8101634:	693b      	ldr	r3, [r7, #16]
 8101636:	2b00      	cmp	r3, #0
 8101638:	d070      	beq.n	810171c <bno055_writeData+0x160>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 810163a:	693b      	ldr	r3, [r7, #16]
 810163c:	2b01      	cmp	r3, #1
 810163e:	d103      	bne.n	8101648 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8101640:	483d      	ldr	r0, [pc, #244]	@ (8101738 <bno055_writeData+0x17c>)
 8101642:	f00b fcc3 	bl	810cfcc <puts>
 8101646:	e021      	b.n	810168c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8101648:	693b      	ldr	r3, [r7, #16]
 810164a:	2b02      	cmp	r3, #2
 810164c:	d103      	bne.n	8101656 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 810164e:	483b      	ldr	r0, [pc, #236]	@ (810173c <bno055_writeData+0x180>)
 8101650:	f00b fcbc 	bl	810cfcc <puts>
 8101654:	e01a      	b.n	810168c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8101656:	693b      	ldr	r3, [r7, #16]
 8101658:	2b04      	cmp	r3, #4
 810165a:	d103      	bne.n	8101664 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 810165c:	4838      	ldr	r0, [pc, #224]	@ (8101740 <bno055_writeData+0x184>)
 810165e:	f00b fcb5 	bl	810cfcc <puts>
 8101662:	e013      	b.n	810168c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8101664:	693b      	ldr	r3, [r7, #16]
 8101666:	2b08      	cmp	r3, #8
 8101668:	d103      	bne.n	8101672 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 810166a:	4836      	ldr	r0, [pc, #216]	@ (8101744 <bno055_writeData+0x188>)
 810166c:	f00b fcae 	bl	810cfcc <puts>
 8101670:	e00c      	b.n	810168c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8101672:	693b      	ldr	r3, [r7, #16]
 8101674:	2b10      	cmp	r3, #16
 8101676:	d103      	bne.n	8101680 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8101678:	4833      	ldr	r0, [pc, #204]	@ (8101748 <bno055_writeData+0x18c>)
 810167a:	f00b fca7 	bl	810cfcc <puts>
 810167e:	e005      	b.n	810168c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8101680:	693b      	ldr	r3, [r7, #16]
 8101682:	2b20      	cmp	r3, #32
 8101684:	d102      	bne.n	810168c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8101686:	4831      	ldr	r0, [pc, #196]	@ (810174c <bno055_writeData+0x190>)
 8101688:	f00b fca0 	bl	810cfcc <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 810168c:	4b25      	ldr	r3, [pc, #148]	@ (8101724 <bno055_writeData+0x168>)
 810168e:	681b      	ldr	r3, [r3, #0]
 8101690:	4618      	mov	r0, r3
 8101692:	f004 f9bb 	bl	8105a0c <HAL_I2C_GetState>
 8101696:	4603      	mov	r3, r0
 8101698:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 810169a:	7bfb      	ldrb	r3, [r7, #15]
 810169c:	2b00      	cmp	r3, #0
 810169e:	d103      	bne.n	81016a8 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 81016a0:	482b      	ldr	r0, [pc, #172]	@ (8101750 <bno055_writeData+0x194>)
 81016a2:	f00b fc93 	bl	810cfcc <puts>
 81016a6:	e03a      	b.n	810171e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_READY) {
 81016a8:	7bfb      	ldrb	r3, [r7, #15]
 81016aa:	2b20      	cmp	r3, #32
 81016ac:	d103      	bne.n	81016b6 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 81016ae:	4828      	ldr	r0, [pc, #160]	@ (8101750 <bno055_writeData+0x194>)
 81016b0:	f00b fc8c 	bl	810cfcc <puts>
 81016b4:	e033      	b.n	810171e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY) {
 81016b6:	7bfb      	ldrb	r3, [r7, #15]
 81016b8:	2b24      	cmp	r3, #36	@ 0x24
 81016ba:	d103      	bne.n	81016c4 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 81016bc:	4825      	ldr	r0, [pc, #148]	@ (8101754 <bno055_writeData+0x198>)
 81016be:	f00b fc85 	bl	810cfcc <puts>
 81016c2:	e02c      	b.n	810171e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 81016c4:	7bfb      	ldrb	r3, [r7, #15]
 81016c6:	2b21      	cmp	r3, #33	@ 0x21
 81016c8:	d103      	bne.n	81016d2 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 81016ca:	4823      	ldr	r0, [pc, #140]	@ (8101758 <bno055_writeData+0x19c>)
 81016cc:	f00b fc7e 	bl	810cfcc <puts>
 81016d0:	e025      	b.n	810171e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 81016d2:	7bfb      	ldrb	r3, [r7, #15]
 81016d4:	2b22      	cmp	r3, #34	@ 0x22
 81016d6:	d103      	bne.n	81016e0 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 81016d8:	4820      	ldr	r0, [pc, #128]	@ (810175c <bno055_writeData+0x1a0>)
 81016da:	f00b fc77 	bl	810cfcc <puts>
 81016de:	e01e      	b.n	810171e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 81016e0:	7bfb      	ldrb	r3, [r7, #15]
 81016e2:	2b28      	cmp	r3, #40	@ 0x28
 81016e4:	d103      	bne.n	81016ee <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 81016e6:	481e      	ldr	r0, [pc, #120]	@ (8101760 <bno055_writeData+0x1a4>)
 81016e8:	f00b fc70 	bl	810cfcc <puts>
 81016ec:	e017      	b.n	810171e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 81016ee:	7bfb      	ldrb	r3, [r7, #15]
 81016f0:	2b29      	cmp	r3, #41	@ 0x29
 81016f2:	d103      	bne.n	81016fc <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 81016f4:	481b      	ldr	r0, [pc, #108]	@ (8101764 <bno055_writeData+0x1a8>)
 81016f6:	f00b fc69 	bl	810cfcc <puts>
 81016fa:	e010      	b.n	810171e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 81016fc:	7bfb      	ldrb	r3, [r7, #15]
 81016fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8101700:	d103      	bne.n	810170a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8101702:	4819      	ldr	r0, [pc, #100]	@ (8101768 <bno055_writeData+0x1ac>)
 8101704:	f00b fc62 	bl	810cfcc <puts>
 8101708:	e009      	b.n	810171e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_ABORT) {
 810170a:	7bfb      	ldrb	r3, [r7, #15]
 810170c:	2b60      	cmp	r3, #96	@ 0x60
 810170e:	d106      	bne.n	810171e <bno055_writeData+0x162>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8101710:	4816      	ldr	r0, [pc, #88]	@ (810176c <bno055_writeData+0x1b0>)
 8101712:	f00b fc5b 	bl	810cfcc <puts>
 8101716:	e002      	b.n	810171e <bno055_writeData+0x162>
    return;
 8101718:	bf00      	nop
 810171a:	e000      	b.n	810171e <bno055_writeData+0x162>
    return;
 810171c:	bf00      	nop



  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 810171e:	3718      	adds	r7, #24
 8101720:	46bd      	mov	sp, r7
 8101722:	bd80      	pop	{r7, pc}
 8101724:	1000026c 	.word	0x1000026c
 8101728:	08111970 	.word	0x08111970
 810172c:	08111994 	.word	0x08111994
 8101730:	081119bc 	.word	0x081119bc
 8101734:	081119e0 	.word	0x081119e0
 8101738:	081119f8 	.word	0x081119f8
 810173c:	08111a0c 	.word	0x08111a0c
 8101740:	08111a20 	.word	0x08111a20
 8101744:	08111a34 	.word	0x08111a34
 8101748:	08111a48 	.word	0x08111a48
 810174c:	08111a5c 	.word	0x08111a5c
 8101750:	08111a74 	.word	0x08111a74
 8101754:	08111a8c 	.word	0x08111a8c
 8101758:	08111aa0 	.word	0x08111aa0
 810175c:	08111ab8 	.word	0x08111ab8
 8101760:	08111ad0 	.word	0x08111ad0
 8101764:	08111ae8 	.word	0x08111ae8
 8101768:	08111b08 	.word	0x08111b08
 810176c:	08111b28 	.word	0x08111b28

08101770 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8101770:	b580      	push	{r7, lr}
 8101772:	b086      	sub	sp, #24
 8101774:	af02      	add	r7, sp, #8
 8101776:	4603      	mov	r3, r0
 8101778:	6039      	str	r1, [r7, #0]
 810177a:	71fb      	strb	r3, [r7, #7]
 810177c:	4613      	mov	r3, r2
 810177e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8101780:	4b1c      	ldr	r3, [pc, #112]	@ (81017f4 <bno055_readData+0x84>)
 8101782:	6818      	ldr	r0, [r3, #0]
 8101784:	1dfa      	adds	r2, r7, #7
 8101786:	2364      	movs	r3, #100	@ 0x64
 8101788:	9300      	str	r3, [sp, #0]
 810178a:	2301      	movs	r3, #1
 810178c:	2150      	movs	r1, #80	@ 0x50
 810178e:	f003 ff2f 	bl	81055f0 <HAL_I2C_Master_Transmit>
 8101792:	4603      	mov	r3, r0
 8101794:	73fb      	strb	r3, [r7, #15]
                          100);
	ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8101796:	4b17      	ldr	r3, [pc, #92]	@ (81017f4 <bno055_readData+0x84>)
 8101798:	6818      	ldr	r0, [r3, #0]
 810179a:	79bb      	ldrb	r3, [r7, #6]
 810179c:	b29b      	uxth	r3, r3
 810179e:	2264      	movs	r2, #100	@ 0x64
 81017a0:	9200      	str	r2, [sp, #0]
 81017a2:	683a      	ldr	r2, [r7, #0]
 81017a4:	2150      	movs	r1, #80	@ 0x50
 81017a6:	f004 f83b 	bl	8105820 <HAL_I2C_Master_Receive>
 81017aa:	4603      	mov	r3, r0
 81017ac:	73fb      	strb	r3, [r7, #15]
                         100);
	  if (ret == HAL_OK) {
 81017ae:	7bfb      	ldrb	r3, [r7, #15]
 81017b0:	2b00      	cmp	r3, #0
 81017b2:	d01a      	beq.n	81017ea <bno055_readData+0x7a>
	    return;
	  }

	  if (ret == HAL_ERROR) {
 81017b4:	7bfb      	ldrb	r3, [r7, #15]
 81017b6:	2b01      	cmp	r3, #1
 81017b8:	d103      	bne.n	81017c2 <bno055_readData+0x52>
	    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 81017ba:	480f      	ldr	r0, [pc, #60]	@ (81017f8 <bno055_readData+0x88>)
 81017bc:	f00b fc06 	bl	810cfcc <puts>
 81017c0:	e014      	b.n	81017ec <bno055_readData+0x7c>
	  } else if (ret == HAL_TIMEOUT) {
 81017c2:	7bfb      	ldrb	r3, [r7, #15]
 81017c4:	2b03      	cmp	r3, #3
 81017c6:	d103      	bne.n	81017d0 <bno055_readData+0x60>
	    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 81017c8:	480c      	ldr	r0, [pc, #48]	@ (81017fc <bno055_readData+0x8c>)
 81017ca:	f00b fbff 	bl	810cfcc <puts>
 81017ce:	e00d      	b.n	81017ec <bno055_readData+0x7c>
	  } else if (ret == HAL_BUSY) {
 81017d0:	7bfb      	ldrb	r3, [r7, #15]
 81017d2:	2b02      	cmp	r3, #2
 81017d4:	d103      	bne.n	81017de <bno055_readData+0x6e>
	    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 81017d6:	480a      	ldr	r0, [pc, #40]	@ (8101800 <bno055_readData+0x90>)
 81017d8:	f00b fbf8 	bl	810cfcc <puts>
 81017dc:	e006      	b.n	81017ec <bno055_readData+0x7c>
	  } else {
	    printf("Unknown status data %d", ret);
 81017de:	7bfb      	ldrb	r3, [r7, #15]
 81017e0:	4619      	mov	r1, r3
 81017e2:	4808      	ldr	r0, [pc, #32]	@ (8101804 <bno055_readData+0x94>)
 81017e4:	f00b fb8a 	bl	810cefc <iprintf>
 81017e8:	e000      	b.n	81017ec <bno055_readData+0x7c>
	    return;
 81017ea:	bf00      	nop
	  }
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 81017ec:	3710      	adds	r7, #16
 81017ee:	46bd      	mov	sp, r7
 81017f0:	bd80      	pop	{r7, pc}
 81017f2:	bf00      	nop
 81017f4:	1000026c 	.word	0x1000026c
 81017f8:	08111970 	.word	0x08111970
 81017fc:	08111994 	.word	0x08111994
 8101800:	081119bc 	.word	0x081119bc
 8101804:	081119e0 	.word	0x081119e0

08101808 <bno055_setPowerMode>:
    bno055_writeData(BNO055_MAG_CONFIG, magConfigReg);
    bno055_setPage(0); //tornare in page 0
}

// Funzione per impostare la modalità energetica
void bno055_setPowerMode(PowerMode mode) {
 8101808:	b580      	push	{r7, lr}
 810180a:	b084      	sub	sp, #16
 810180c:	af00      	add	r7, sp, #0
 810180e:	4603      	mov	r3, r0
 8101810:	71fb      	strb	r3, [r7, #7]
    // Leggi il valore corrente di PWR_MODE
    uint8_t currentMode;
    bno055_readData(BNO055_PWR_MODE, &currentMode, 1);
 8101812:	f107 030f 	add.w	r3, r7, #15
 8101816:	2201      	movs	r2, #1
 8101818:	4619      	mov	r1, r3
 810181a:	203e      	movs	r0, #62	@ 0x3e
 810181c:	f7ff ffa8 	bl	8101770 <bno055_readData>

    // Modifica solo i bit relativi alla modalità energetica
    currentMode &= 0xFC; // Azzera i primi due bit
 8101820:	7bfb      	ldrb	r3, [r7, #15]
 8101822:	f023 0303 	bic.w	r3, r3, #3
 8101826:	b2db      	uxtb	r3, r3
 8101828:	73fb      	strb	r3, [r7, #15]
    currentMode |= mode; // Imposta la nuova modalità energetica
 810182a:	7bfa      	ldrb	r2, [r7, #15]
 810182c:	79fb      	ldrb	r3, [r7, #7]
 810182e:	4313      	orrs	r3, r2
 8101830:	b2db      	uxtb	r3, r3
 8101832:	73fb      	strb	r3, [r7, #15]

    // Scrivi il nuovo valore in PWR_MODE
    bno055_writeData(BNO055_PWR_MODE, currentMode);
 8101834:	7bfb      	ldrb	r3, [r7, #15]
 8101836:	4619      	mov	r1, r3
 8101838:	203e      	movs	r0, #62	@ 0x3e
 810183a:	f7ff febf 	bl	81015bc <bno055_writeData>
}
 810183e:	bf00      	nop
 8101840:	3710      	adds	r7, #16
 8101842:	46bd      	mov	sp, r7
 8101844:	bd80      	pop	{r7, pc}

08101846 <bno055_getPowerMode>:

// Funzione per ottenere la modalità energetica attuale
PowerMode bno055_getPowerMode() {
 8101846:	b580      	push	{r7, lr}
 8101848:	b082      	sub	sp, #8
 810184a:	af00      	add	r7, sp, #0
    // Leggi il valore corrente di PWR_MODE
    uint8_t currentMode;
    bno055_readData(BNO055_PWR_MODE, &currentMode, 1);
 810184c:	1dfb      	adds	r3, r7, #7
 810184e:	2201      	movs	r2, #1
 8101850:	4619      	mov	r1, r3
 8101852:	203e      	movs	r0, #62	@ 0x3e
 8101854:	f7ff ff8c 	bl	8101770 <bno055_readData>

    // Estrai la modalità energetica dai primi due bit
    currentMode &= 0x03;
 8101858:	79fb      	ldrb	r3, [r7, #7]
 810185a:	f003 0303 	and.w	r3, r3, #3
 810185e:	b2db      	uxtb	r3, r3
 8101860:	71fb      	strb	r3, [r7, #7]

    // Restituisci la modalità energetica come enumerazione PowerMode
    return (PowerMode)currentMode;
 8101862:	79fb      	ldrb	r3, [r7, #7]
}
 8101864:	4618      	mov	r0, r3
 8101866:	3708      	adds	r7, #8
 8101868:	46bd      	mov	sp, r7
 810186a:	bd80      	pop	{r7, pc}

0810186c <kalman_filter_init>:
//dimensioni del sistema


void kalman_filter_init(KalmanFilter* kf, float32_t* A_data,float32_t* B_data,
		float32_t* H_data, float32_t* Q_data,float32_t* R_data,float32_t* P_data,
		float32_t* K_data, float32_t* x_data) {
 810186c:	b580      	push	{r7, lr}
 810186e:	b084      	sub	sp, #16
 8101870:	af00      	add	r7, sp, #0
 8101872:	60f8      	str	r0, [r7, #12]
 8101874:	60b9      	str	r1, [r7, #8]
 8101876:	607a      	str	r2, [r7, #4]
 8101878:	603b      	str	r3, [r7, #0]


    arm_mat_init_f32(&kf->A, state_dim, state_dim, (float32_t *)A_data);
 810187a:	68f8      	ldr	r0, [r7, #12]
 810187c:	68bb      	ldr	r3, [r7, #8]
 810187e:	2202      	movs	r2, #2
 8101880:	2102      	movs	r1, #2
 8101882:	f00a fb9f 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, state_dim, control_dim, (float32_t *)B_data);
 8101886:	68fb      	ldr	r3, [r7, #12]
 8101888:	f103 0008 	add.w	r0, r3, #8
 810188c:	687b      	ldr	r3, [r7, #4]
 810188e:	2201      	movs	r2, #1
 8101890:	2102      	movs	r1, #2
 8101892:	f00a fb97 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, measure_dim, state_dim, (float32_t *)H_data);
 8101896:	68fb      	ldr	r3, [r7, #12]
 8101898:	f103 0010 	add.w	r0, r3, #16
 810189c:	683b      	ldr	r3, [r7, #0]
 810189e:	2202      	movs	r2, #2
 81018a0:	2102      	movs	r1, #2
 81018a2:	f00a fb8f 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, state_dim, state_dim, (float32_t *)Q_data);
 81018a6:	68fb      	ldr	r3, [r7, #12]
 81018a8:	f103 0018 	add.w	r0, r3, #24
 81018ac:	69bb      	ldr	r3, [r7, #24]
 81018ae:	2202      	movs	r2, #2
 81018b0:	2102      	movs	r1, #2
 81018b2:	f00a fb87 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, measure_dim, measure_dim, (float32_t *)R_data);
 81018b6:	68fb      	ldr	r3, [r7, #12]
 81018b8:	f103 0020 	add.w	r0, r3, #32
 81018bc:	69fb      	ldr	r3, [r7, #28]
 81018be:	2202      	movs	r2, #2
 81018c0:	2102      	movs	r1, #2
 81018c2:	f00a fb7f 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, state_dim, state_dim, (float32_t *)P_data);
 81018c6:	68fb      	ldr	r3, [r7, #12]
 81018c8:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 81018cc:	6a3b      	ldr	r3, [r7, #32]
 81018ce:	2202      	movs	r2, #2
 81018d0:	2102      	movs	r1, #2
 81018d2:	f00a fb77 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->x, state_dim, 1, (float32_t *)x_data);
 81018d6:	68fb      	ldr	r3, [r7, #12]
 81018d8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 81018dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81018de:	2201      	movs	r2, #1
 81018e0:	2102      	movs	r1, #2
 81018e2:	f00a fb6f 	bl	810bfc4 <arm_mat_init_f32>

    arm_mat_init_f32(&kf->K, state_dim, measure_dim, (float32_t *)&x_data);
 81018e6:	68fb      	ldr	r3, [r7, #12]
 81018e8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 81018ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81018f0:	2202      	movs	r2, #2
 81018f2:	2102      	movs	r1, #2
 81018f4:	f00a fb66 	bl	810bfc4 <arm_mat_init_f32>

}
 81018f8:	bf00      	nop
 81018fa:	3710      	adds	r7, #16
 81018fc:	46bd      	mov	sp, r7
 81018fe:	bd80      	pop	{r7, pc}

08101900 <kalman_predict>:
    }
}



void kalman_predict(KalmanFilter* kf, const arm_matrix_instance_f32* u) {
 8101900:	b580      	push	{r7, lr}
 8101902:	b09c      	sub	sp, #112	@ 0x70
 8101904:	af00      	add	r7, sp, #0
 8101906:	6078      	str	r0, [r7, #4]
 8101908:	6039      	str	r1, [r7, #0]
	float32_t temp1_data[state_dim];
	float32_t temp2_data[state_dim];
	float32_t temp3_data[state_dim*state_dim];
	float32_t temp4_data[state_dim*state_dim];
	float32_t temp5_data[state_dim*state_dim];
    arm_mat_init_f32(&temp1, state_dim, 1, (float32_t *)&temp1_data);
 810190a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 810190e:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8101912:	2201      	movs	r2, #1
 8101914:	2102      	movs	r1, #2
 8101916:	f00a fb55 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, state_dim, 1, (float32_t *)&temp2_data);
 810191a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 810191e:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8101922:	2201      	movs	r2, #1
 8101924:	2102      	movs	r1, #2
 8101926:	f00a fb4d 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&temp3, state_dim, state_dim, (float32_t *)&temp3_data);
 810192a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810192e:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8101932:	2202      	movs	r2, #2
 8101934:	2102      	movs	r1, #2
 8101936:	f00a fb45 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&temp4, state_dim, state_dim, (float32_t *)&temp4_data);
 810193a:	f107 0318 	add.w	r3, r7, #24
 810193e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8101942:	2202      	movs	r2, #2
 8101944:	2102      	movs	r1, #2
 8101946:	f00a fb3d 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&temp5, state_dim, state_dim, (float32_t *)&temp5_data);
 810194a:	f107 0308 	add.w	r3, r7, #8
 810194e:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8101952:	2202      	movs	r2, #2
 8101954:	2102      	movs	r1, #2
 8101956:	f00a fb35 	bl	810bfc4 <arm_mat_init_f32>

    // x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &temp1);
 810195a:	6878      	ldr	r0, [r7, #4]
 810195c:	687b      	ldr	r3, [r7, #4]
 810195e:	3338      	adds	r3, #56	@ 0x38
 8101960:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8101964:	4619      	mov	r1, r3
 8101966:	f00a f987 	bl	810bc78 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, u, &temp2);
 810196a:	687b      	ldr	r3, [r7, #4]
 810196c:	3308      	adds	r3, #8
 810196e:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8101972:	6839      	ldr	r1, [r7, #0]
 8101974:	4618      	mov	r0, r3
 8101976:	f00a f97f 	bl	810bc78 <arm_mat_mult_f32>
	arm_mat_add_f32(&temp1, &temp2,  &kf->x);
 810197a:	687b      	ldr	r3, [r7, #4]
 810197c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8101980:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8101984:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8101988:	4618      	mov	r0, r3
 810198a:	f00a fb1f 	bl	810bfcc <arm_mat_add_f32>


    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &temp4);
 810198e:	6878      	ldr	r0, [r7, #4]
 8101990:	687b      	ldr	r3, [r7, #4]
 8101992:	3328      	adds	r3, #40	@ 0x28
 8101994:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8101998:	4619      	mov	r1, r3
 810199a:	f00a f96d 	bl	810bc78 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &temp5);
 810199e:	687b      	ldr	r3, [r7, #4]
 81019a0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 81019a4:	4611      	mov	r1, r2
 81019a6:	4618      	mov	r0, r3
 81019a8:	f00a f8a0 	bl	810baec <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp4, &temp5, &temp3);
 81019ac:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 81019b0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 81019b4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 81019b8:	4618      	mov	r0, r3
 81019ba:	f00a f95d 	bl	810bc78 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->Q, &kf->P);
 81019be:	687b      	ldr	r3, [r7, #4]
 81019c0:	f103 0118 	add.w	r1, r3, #24
 81019c4:	687b      	ldr	r3, [r7, #4]
 81019c6:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 81019ca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 81019ce:	4618      	mov	r0, r3
 81019d0:	f00a fafc 	bl	810bfcc <arm_mat_add_f32>


}
 81019d4:	bf00      	nop
 81019d6:	3770      	adds	r7, #112	@ 0x70
 81019d8:	46bd      	mov	sp, r7
 81019da:	bd80      	pop	{r7, pc}

081019dc <kalman_update>:


void kalman_update(KalmanFilter* kf, const arm_matrix_instance_f32* z)
{
 81019dc:	b580      	push	{r7, lr}
 81019de:	b0dc      	sub	sp, #368	@ 0x170
 81019e0:	af00      	add	r7, sp, #0
 81019e2:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 81019e6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 81019ea:	6018      	str	r0, [r3, #0]
 81019ec:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 81019f0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 81019f4:	6019      	str	r1, [r3, #0]
    float32_t temp12_data[measure_dim * state_dim];
    float32_t temp13_data[state_dim * measure_dim];
    float32_t temp14_data[measure_dim];
    float32_t temp15_data[measure_dim];
    float32_t temp16_data[state_dim];
    arm_mat_init_f32(&temp1, state_dim, measure_dim, temp1_data);
 81019f6:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 81019fa:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 81019fe:	2202      	movs	r2, #2
 8101a00:	2102      	movs	r1, #2
 8101a02:	f00a fadf 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, state_dim, measure_dim, temp2_data);
 8101a06:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8101a0a:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8101a0e:	2202      	movs	r2, #2
 8101a10:	2102      	movs	r1, #2
 8101a12:	f00a fad7 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&temp3, measure_dim, measure_dim, temp3_data);
 8101a16:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8101a1a:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8101a1e:	2202      	movs	r2, #2
 8101a20:	2102      	movs	r1, #2
 8101a22:	f00a facf 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&temp4, measure_dim, measure_dim, temp4_data);
 8101a26:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8101a2a:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8101a2e:	2202      	movs	r2, #2
 8101a30:	2102      	movs	r1, #2
 8101a32:	f00a fac7 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&temp5, measure_dim, measure_dim, temp5_data);
 8101a36:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8101a3a:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8101a3e:	2202      	movs	r2, #2
 8101a40:	2102      	movs	r1, #2
 8101a42:	f00a fabf 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&temp6, state_dim, state_dim, temp6_data);
 8101a46:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8101a4a:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8101a4e:	2202      	movs	r2, #2
 8101a50:	2102      	movs	r1, #2
 8101a52:	f00a fab7 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&temp7, state_dim, state_dim, temp7_data);
 8101a56:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8101a5a:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8101a5e:	2202      	movs	r2, #2
 8101a60:	2102      	movs	r1, #2
 8101a62:	f00a faaf 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&temp8, state_dim, state_dim, temp8_data);
 8101a66:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8101a6a:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8101a6e:	2202      	movs	r2, #2
 8101a70:	2102      	movs	r1, #2
 8101a72:	f00a faa7 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&temp9, state_dim, measure_dim, temp9_data);
 8101a76:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8101a7a:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8101a7e:	2202      	movs	r2, #2
 8101a80:	2102      	movs	r1, #2
 8101a82:	f00a fa9f 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&temp10, state_dim, measure_dim, temp10_data);
 8101a86:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8101a8a:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8101a8e:	2202      	movs	r2, #2
 8101a90:	2102      	movs	r1, #2
 8101a92:	f00a fa97 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&temp11, measure_dim,state_dim, temp11_data);
 8101a96:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8101a9a:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8101a9e:	2202      	movs	r2, #2
 8101aa0:	2102      	movs	r1, #2
 8101aa2:	f00a fa8f 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&temp12, measure_dim, state_dim, temp12_data);
 8101aa6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101aaa:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8101aae:	2202      	movs	r2, #2
 8101ab0:	2102      	movs	r1, #2
 8101ab2:	f00a fa87 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&temp13, state_dim, measure_dim, temp13_data);
 8101ab6:	f107 0320 	add.w	r3, r7, #32
 8101aba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8101abe:	2202      	movs	r2, #2
 8101ac0:	2102      	movs	r1, #2
 8101ac2:	f00a fa7f 	bl	810bfc4 <arm_mat_init_f32>
    arm_mat_init_f32(&temp14, measure_dim, 1, temp14_data);
 8101ac6:	f107 0318 	add.w	r3, r7, #24
 8101aca:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8101ace:	2201      	movs	r2, #1
 8101ad0:	2102      	movs	r1, #2
 8101ad2:	f00a fa77 	bl	810bfc4 <arm_mat_init_f32>
	arm_mat_init_f32(&temp15, measure_dim, 1, temp15_data);
 8101ad6:	f107 0310 	add.w	r3, r7, #16
 8101ada:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 8101ade:	2201      	movs	r2, #1
 8101ae0:	2102      	movs	r1, #2
 8101ae2:	f00a fa6f 	bl	810bfc4 <arm_mat_init_f32>
	arm_mat_init_f32(&temp16, state_dim, 1, temp16_data);
 8101ae6:	f107 0308 	add.w	r3, r7, #8
 8101aea:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 8101aee:	2201      	movs	r2, #1
 8101af0:	2102      	movs	r1, #2
 8101af2:	f00a fa67 	bl	810bfc4 <arm_mat_init_f32>

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &temp1);
 8101af6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101afa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101afe:	681b      	ldr	r3, [r3, #0]
 8101b00:	3310      	adds	r3, #16
 8101b02:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8101b06:	4611      	mov	r1, r2
 8101b08:	4618      	mov	r0, r3
 8101b0a:	f009 ffef 	bl	810baec <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &temp1, &temp2);
 8101b0e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b12:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101b16:	681b      	ldr	r3, [r3, #0]
 8101b18:	3328      	adds	r3, #40	@ 0x28
 8101b1a:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8101b1e:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8101b22:	4618      	mov	r0, r3
 8101b24:	f00a f8a8 	bl	810bc78 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &temp2, &temp3);
 8101b28:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b2c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101b30:	681b      	ldr	r3, [r3, #0]
 8101b32:	3310      	adds	r3, #16
 8101b34:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8101b38:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8101b3c:	4618      	mov	r0, r3
 8101b3e:	f00a f89b 	bl	810bc78 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->R, &temp4);
 8101b42:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b46:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101b4a:	681b      	ldr	r3, [r3, #0]
 8101b4c:	f103 0120 	add.w	r1, r3, #32
 8101b50:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8101b54:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8101b58:	4618      	mov	r0, r3
 8101b5a:	f00a fa37 	bl	810bfcc <arm_mat_add_f32>
    arm_mat_inverse_f32(&temp4, &temp5);
 8101b5e:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8101b62:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8101b66:	4611      	mov	r1, r2
 8101b68:	4618      	mov	r0, r3
 8101b6a:	f00a f925 	bl	810bdb8 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&temp2, &temp5, &kf->K);
 8101b6e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b72:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101b76:	681b      	ldr	r3, [r3, #0]
 8101b78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8101b7c:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8101b80:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8101b84:	4618      	mov	r0, r3
 8101b86:	f00a f877 	bl	810bc78 <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &temp14);
 8101b8a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b8e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101b92:	681b      	ldr	r3, [r3, #0]
 8101b94:	f103 0010 	add.w	r0, r3, #16
 8101b98:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b9c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101ba0:	681b      	ldr	r3, [r3, #0]
 8101ba2:	3338      	adds	r3, #56	@ 0x38
 8101ba4:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8101ba8:	4619      	mov	r1, r3
 8101baa:	f00a f865 	bl	810bc78 <arm_mat_mult_f32>
    arm_mat_sub_f32(z, &temp14, &temp15);
 8101bae:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8101bb2:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8101bb6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101bba:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8101bbe:	6818      	ldr	r0, [r3, #0]
 8101bc0:	f009 fff0 	bl	810bba4 <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->K, &temp15, &temp16);
 8101bc4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101bc8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101bcc:	681b      	ldr	r3, [r3, #0]
 8101bce:	3330      	adds	r3, #48	@ 0x30
 8101bd0:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 8101bd4:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 8101bd8:	4618      	mov	r0, r3
 8101bda:	f00a f84d 	bl	810bc78 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->x, &temp16, &kf->x);
 8101bde:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101be2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101be6:	681b      	ldr	r3, [r3, #0]
 8101be8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8101bec:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101bf0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101bf4:	681b      	ldr	r3, [r3, #0]
 8101bf6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8101bfa:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8101bfe:	4619      	mov	r1, r3
 8101c00:	f00a f9e4 	bl	810bfcc <arm_mat_add_f32>

    // Aggiornamento di P
    // P = P - P*H'*K' - K*H*P + K*(H*P*H' + R)*K'

    // Prima parte: P * H'
    arm_mat_trans_f32(&kf->H, &temp9);
 8101c04:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c08:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c0c:	681b      	ldr	r3, [r3, #0]
 8101c0e:	3310      	adds	r3, #16
 8101c10:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8101c14:	4611      	mov	r1, r2
 8101c16:	4618      	mov	r0, r3
 8101c18:	f009 ff68 	bl	810baec <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &temp9, &temp10);
 8101c1c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c20:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c24:	681b      	ldr	r3, [r3, #0]
 8101c26:	3328      	adds	r3, #40	@ 0x28
 8101c28:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8101c2c:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8101c30:	4618      	mov	r0, r3
 8101c32:	f00a f821 	bl	810bc78 <arm_mat_mult_f32>
    // Seconda parte: P * H' * K'
    arm_mat_trans_f32(&kf->K, &temp11);
 8101c36:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c3a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c3e:	681b      	ldr	r3, [r3, #0]
 8101c40:	3330      	adds	r3, #48	@ 0x30
 8101c42:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8101c46:	4611      	mov	r1, r2
 8101c48:	4618      	mov	r0, r3
 8101c4a:	f009 ff4f 	bl	810baec <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp10, &temp11, &temp6);
 8101c4e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8101c52:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8101c56:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8101c5a:	4618      	mov	r0, r3
 8101c5c:	f00a f80c 	bl	810bc78 <arm_mat_mult_f32>
    // Terza parte: K * H * P
    arm_mat_mult_f32(&kf->H, &kf->P, &temp12);
 8101c60:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c64:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c68:	681b      	ldr	r3, [r3, #0]
 8101c6a:	f103 0010 	add.w	r0, r3, #16
 8101c6e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c72:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c76:	681b      	ldr	r3, [r3, #0]
 8101c78:	3328      	adds	r3, #40	@ 0x28
 8101c7a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8101c7e:	4619      	mov	r1, r3
 8101c80:	f009 fffa 	bl	810bc78 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->K, &temp12, &temp7);
 8101c84:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c88:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c8c:	681b      	ldr	r3, [r3, #0]
 8101c8e:	3330      	adds	r3, #48	@ 0x30
 8101c90:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8101c94:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8101c98:	4618      	mov	r0, r3
 8101c9a:	f009 ffed 	bl	810bc78 <arm_mat_mult_f32>
    // Quarta parte: K * (H * P * H' + R) * K'
    arm_mat_mult_f32(&kf->H, &kf->P, &temp8);
 8101c9e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101ca2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101ca6:	681b      	ldr	r3, [r3, #0]
 8101ca8:	f103 0010 	add.w	r0, r3, #16
 8101cac:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cb0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cb4:	681b      	ldr	r3, [r3, #0]
 8101cb6:	3328      	adds	r3, #40	@ 0x28
 8101cb8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8101cbc:	4619      	mov	r1, r3
 8101cbe:	f009 ffdb 	bl	810bc78 <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp8, &temp9, &temp3);
 8101cc2:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8101cc6:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8101cca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8101cce:	4618      	mov	r0, r3
 8101cd0:	f009 ffd2 	bl	810bc78 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->R, &temp4);
 8101cd4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cd8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cdc:	681b      	ldr	r3, [r3, #0]
 8101cde:	f103 0120 	add.w	r1, r3, #32
 8101ce2:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8101ce6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8101cea:	4618      	mov	r0, r3
 8101cec:	f00a f96e 	bl	810bfcc <arm_mat_add_f32>
    arm_mat_mult_f32(&kf->K, &temp4, &temp13);
 8101cf0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cf4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cf8:	681b      	ldr	r3, [r3, #0]
 8101cfa:	3330      	adds	r3, #48	@ 0x30
 8101cfc:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8101d00:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8101d04:	4618      	mov	r0, r3
 8101d06:	f009 ffb7 	bl	810bc78 <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp13, &temp11, &temp8);
 8101d0a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8101d0e:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8101d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8101d16:	4618      	mov	r0, r3
 8101d18:	f009 ffae 	bl	810bc78 <arm_mat_mult_f32>
    // Risultato finale: P = P - temp6 - temp7 + temp8
    arm_mat_sub_f32(&kf->P, &temp6, &temp12);
 8101d1c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d20:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d24:	681b      	ldr	r3, [r3, #0]
 8101d26:	3328      	adds	r3, #40	@ 0x28
 8101d28:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8101d2c:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8101d30:	4618      	mov	r0, r3
 8101d32:	f009 ff37 	bl	810bba4 <arm_mat_sub_f32>
    arm_mat_sub_f32(&temp12, &temp7, &temp6);
 8101d36:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8101d3a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8101d3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8101d42:	4618      	mov	r0, r3
 8101d44:	f009 ff2e 	bl	810bba4 <arm_mat_sub_f32>
    arm_mat_add_f32(&temp6, &temp8, &kf->P);
 8101d48:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d4c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d50:	681b      	ldr	r3, [r3, #0]
 8101d52:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8101d56:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8101d5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8101d5e:	4618      	mov	r0, r3
 8101d60:	f00a f934 	bl	810bfcc <arm_mat_add_f32>


}
 8101d64:	bf00      	nop
 8101d66:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8101d6a:	46bd      	mov	sp, r7
 8101d6c:	bd80      	pop	{r7, pc}
	...

08101d70 <getSpeed>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//******************
//FUNZIONE PER VELOCITA DESIDERATA DELLA RUOTA DIETRO, INIZIALMENTE A RAMPA E POI COSTANTE
float getSpeed(float actual_speed) {
 8101d70:	b480      	push	{r7}
 8101d72:	b085      	sub	sp, #20
 8101d74:	af00      	add	r7, sp, #0
 8101d76:	ed87 0a01 	vstr	s0, [r7, #4]
	float ramp_time = 6; //secondi di rampa
 8101d7a:	4b13      	ldr	r3, [pc, #76]	@ (8101dc8 <getSpeed+0x58>)
 8101d7c:	60fb      	str	r3, [r7, #12]

	//speed è la velocita di regime (costante)
	if (actual_speed < speed) {
 8101d7e:	4b13      	ldr	r3, [pc, #76]	@ (8101dcc <getSpeed+0x5c>)
 8101d80:	edd3 7a00 	vldr	s15, [r3]
 8101d84:	ed97 7a01 	vldr	s14, [r7, #4]
 8101d88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101d90:	d50f      	bpl.n	8101db2 <getSpeed+0x42>
		return actual_speed + speed * dt / ramp_time;
 8101d92:	4b0e      	ldr	r3, [pc, #56]	@ (8101dcc <getSpeed+0x5c>)
 8101d94:	edd3 7a00 	vldr	s15, [r3]
 8101d98:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8101dd0 <getSpeed+0x60>
 8101d9c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8101da0:	edd7 7a03 	vldr	s15, [r7, #12]
 8101da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101da8:	edd7 7a01 	vldr	s15, [r7, #4]
 8101dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101db0:	e002      	b.n	8101db8 <getSpeed+0x48>
	} else
		return speed;
 8101db2:	4b06      	ldr	r3, [pc, #24]	@ (8101dcc <getSpeed+0x5c>)
 8101db4:	edd3 7a00 	vldr	s15, [r3]
}
 8101db8:	eeb0 0a67 	vmov.f32	s0, s15
 8101dbc:	3714      	adds	r7, #20
 8101dbe:	46bd      	mov	sp, r7
 8101dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dc4:	4770      	bx	lr
 8101dc6:	bf00      	nop
 8101dc8:	40c00000 	.word	0x40c00000
 8101dcc:	10000008 	.word	0x10000008
 8101dd0:	3c23d70a 	.word	0x3c23d70a
 8101dd4:	00000000 	.word	0x00000000

08101dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101dd8:	b5b0      	push	{r4, r5, r7, lr}
 8101dda:	b094      	sub	sp, #80	@ 0x50
 8101ddc:	af06      	add	r7, sp, #24

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8101dde:	4b14      	ldr	r3, [pc, #80]	@ (8101e30 <main+0x58>)
 8101de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101de4:	4a12      	ldr	r2, [pc, #72]	@ (8101e30 <main+0x58>)
 8101de6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101dea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101dee:	4b10      	ldr	r3, [pc, #64]	@ (8101e30 <main+0x58>)
 8101df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101df8:	60bb      	str	r3, [r7, #8]
 8101dfa:	68bb      	ldr	r3, [r7, #8]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101dfc:	2001      	movs	r0, #1
 8101dfe:	f003 fb49 	bl	8105494 <HAL_HSEM_ActivateNotification>
	/*
	 Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	 perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 8101e02:	f004 f9d5 	bl	81061b0 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE,
 8101e06:	2201      	movs	r2, #1
 8101e08:	2102      	movs	r1, #2
 8101e0a:	2000      	movs	r0, #0
 8101e0c:	f004 f956 	bl	81060bc <HAL_PWREx_EnterSTOPMode>
	PWR_D2_DOMAIN);
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101e10:	4b08      	ldr	r3, [pc, #32]	@ (8101e34 <main+0x5c>)
 8101e12:	681b      	ldr	r3, [r3, #0]
 8101e14:	091b      	lsrs	r3, r3, #4
 8101e16:	f003 030f 	and.w	r3, r3, #15
 8101e1a:	2b07      	cmp	r3, #7
 8101e1c:	d10e      	bne.n	8101e3c <main+0x64>
 8101e1e:	4b06      	ldr	r3, [pc, #24]	@ (8101e38 <main+0x60>)
 8101e20:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8101e24:	4a04      	ldr	r2, [pc, #16]	@ (8101e38 <main+0x60>)
 8101e26:	f043 0301 	orr.w	r3, r3, #1
 8101e2a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8101e2e:	e00d      	b.n	8101e4c <main+0x74>
 8101e30:	58024400 	.word	0x58024400
 8101e34:	e000ed00 	.word	0xe000ed00
 8101e38:	58026400 	.word	0x58026400
 8101e3c:	4bc9      	ldr	r3, [pc, #804]	@ (8102164 <main+0x38c>)
 8101e3e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8101e42:	4ac8      	ldr	r2, [pc, #800]	@ (8102164 <main+0x38c>)
 8101e44:	f043 0301 	orr.w	r3, r3, #1
 8101e48:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101e4c:	f001 fa4e 	bl	81032ec <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_USART3_UART_Init();
 8101e50:	f000 fdfe 	bl	8102a50 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8101e54:	f000 fbf4 	bl	8102640 <MX_I2C1_Init>
  MX_TIM1_Init();
 8101e58:	f000 fc32 	bl	81026c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8101e5c:	f000 fcdc 	bl	8102818 <MX_TIM2_Init>
  MX_TIM4_Init();
 8101e60:	f000 fda0 	bl	81029a4 <MX_TIM4_Init>
  MX_ADC1_Init();
 8101e64:	f000 fb74 	bl	8102550 <MX_ADC1_Init>
  MX_TIM3_Init();
 8101e68:	f000 fd24 	bl	81028b4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8101e6c:	48be      	ldr	r0, [pc, #760]	@ (8102168 <main+0x390>)
 8101e6e:	f007 f8db 	bl	8109028 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8101e72:	2100      	movs	r1, #0
 8101e74:	48bd      	ldr	r0, [pc, #756]	@ (810216c <main+0x394>)
 8101e76:	f007 f9b1 	bl	81091dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8101e7a:	2100      	movs	r1, #0
 8101e7c:	48bc      	ldr	r0, [pc, #752]	@ (8102170 <main+0x398>)
 8101e7e:	f007 f9ad 	bl	81091dc <HAL_TIM_PWM_Start>

	//*************************
	//BNO055
	bno055_assignI2C(&hi2c1);
 8101e82:	48bc      	ldr	r0, [pc, #752]	@ (8102174 <main+0x39c>)
 8101e84:	f7ff fb7e 	bl	8101584 <bno055_assignI2C>
	bno055_setup(); //il BNO055 viene inizializzato con questa funzione
 8101e88:	f7ff fb1a 	bl	81014c0 <bno055_setup>

	bno055_setPowerMode(NORMAL_MODE); //Inserire la modalita da impostare
 8101e8c:	2000      	movs	r0, #0
 8101e8e:	f7ff fcbb 	bl	8101808 <bno055_setPowerMode>
	PowerMode currentMode = bno055_getPowerMode(); //Metodo per ottenere la modalita impostata
 8101e92:	f7ff fcd8 	bl	8101846 <bno055_getPowerMode>
 8101e96:	4603      	mov	r3, r0
 8101e98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	printf("Modalita energetica attuale: %d\r\n", currentMode);
 8101e9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8101ea0:	4619      	mov	r1, r3
 8101ea2:	48b5      	ldr	r0, [pc, #724]	@ (8102178 <main+0x3a0>)
 8101ea4:	f00b f82a 	bl	810cefc <iprintf>

	//Per angoli di Eulero
	bno055_vector_t eul;
	bno055_setOperationModeNDOF();
 8101ea8:	f7ff faf6 	bl	8101498 <bno055_setOperationModeNDOF>

	//calibrazione sensore???
	bno055_calibration_state_t cal = bno055_getCalibrationState();
 8101eac:	f7ff fb30 	bl	8101510 <bno055_getCalibrationState>
 8101eb0:	4603      	mov	r3, r0
 8101eb2:	60fb      	str	r3, [r7, #12]
	printf("GYR : %+2.2d | ACC : %+2.2d | MAG : %+2.2d | %+2.2d\r\n", //questo andrebbe nel while per vedere se ha calibrato
			cal.gyro, cal.accel, cal.mag, cal.sys);
 8101eb4:	7b7b      	ldrb	r3, [r7, #13]
	printf("GYR : %+2.2d | ACC : %+2.2d | MAG : %+2.2d | %+2.2d\r\n", //questo andrebbe nel while per vedere se ha calibrato
 8101eb6:	4619      	mov	r1, r3
			cal.gyro, cal.accel, cal.mag, cal.sys);
 8101eb8:	7bfb      	ldrb	r3, [r7, #15]
	printf("GYR : %+2.2d | ACC : %+2.2d | MAG : %+2.2d | %+2.2d\r\n", //questo andrebbe nel while per vedere se ha calibrato
 8101eba:	461a      	mov	r2, r3
			cal.gyro, cal.accel, cal.mag, cal.sys);
 8101ebc:	7bbb      	ldrb	r3, [r7, #14]
	printf("GYR : %+2.2d | ACC : %+2.2d | MAG : %+2.2d | %+2.2d\r\n", //questo andrebbe nel while per vedere se ha calibrato
 8101ebe:	4618      	mov	r0, r3
			cal.gyro, cal.accel, cal.mag, cal.sys);
 8101ec0:	7b3b      	ldrb	r3, [r7, #12]
	printf("GYR : %+2.2d | ACC : %+2.2d | MAG : %+2.2d | %+2.2d\r\n", //questo andrebbe nel while per vedere se ha calibrato
 8101ec2:	9300      	str	r3, [sp, #0]
 8101ec4:	4603      	mov	r3, r0
 8101ec6:	48ad      	ldr	r0, [pc, #692]	@ (810217c <main+0x3a4>)
 8101ec8:	f00b f818 	bl	810cefc <iprintf>
	//*************************

	//*************************
	//PID motore ruota dietro
	init_PID(&pid_speed, dt, V_MAX, -V_MAX);
 8101ecc:	eddf 7aac 	vldr	s15, [pc, #688]	@ 8102180 <main+0x3a8>
 8101ed0:	eeba 1a04 	vmov.f32	s2, #164	@ 0xc1200000 -10.0
 8101ed4:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8101ed8:	eeb0 0a67 	vmov.f32	s0, s15
 8101edc:	48a9      	ldr	r0, [pc, #676]	@ (8102184 <main+0x3ac>)
 8101ede:	f7ff fa13 	bl	8101308 <init_PID>
	tune_PID(&pid_speed, 0.001, 0.05, 0);
 8101ee2:	ed9f 1aa9 	vldr	s2, [pc, #676]	@ 8102188 <main+0x3b0>
 8101ee6:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 810218c <main+0x3b4>
 8101eea:	ed9f 0aa9 	vldr	s0, [pc, #676]	@ 8102190 <main+0x3b8>
 8101eee:	48a5      	ldr	r0, [pc, #660]	@ (8102184 <main+0x3ac>)
 8101ef0:	f7ff fa2b 	bl	810134a <tune_PID>
	//*************************

	//*************************
	//PID angolo roll
	init_PID(&pid_roll, dt, 90, -90);
 8101ef4:	eddf 7aa2 	vldr	s15, [pc, #648]	@ 8102180 <main+0x3a8>
 8101ef8:	ed9f 1aa6 	vldr	s2, [pc, #664]	@ 8102194 <main+0x3bc>
 8101efc:	eddf 0aa6 	vldr	s1, [pc, #664]	@ 8102198 <main+0x3c0>
 8101f00:	eeb0 0a67 	vmov.f32	s0, s15
 8101f04:	48a5      	ldr	r0, [pc, #660]	@ (810219c <main+0x3c4>)
 8101f06:	f7ff f9ff 	bl	8101308 <init_PID>
	tune_PID(&pid_roll, 18, 6, 0.5);
 8101f0a:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8101f0e:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 8101f12:	eeb3 0a02 	vmov.f32	s0, #50	@ 0x41900000  18.0
 8101f16:	48a1      	ldr	r0, [pc, #644]	@ (810219c <main+0x3c4>)
 8101f18:	f7ff fa17 	bl	810134a <tune_PID>
	//*************************

	//*************************
	//PID coppia manubrio
	init_PID(&pid_steering_torque, dt, V_MAX, -V_MAX);
 8101f1c:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8102180 <main+0x3a8>
 8101f20:	eeba 1a04 	vmov.f32	s2, #164	@ 0xc1200000 -10.0
 8101f24:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8101f28:	eeb0 0a67 	vmov.f32	s0, s15
 8101f2c:	489c      	ldr	r0, [pc, #624]	@ (81021a0 <main+0x3c8>)
 8101f2e:	f7ff f9eb 	bl	8101308 <init_PID>
	tune_PID(&pid_steering_torque, 67, 34, 0);
 8101f32:	ed9f 1a95 	vldr	s2, [pc, #596]	@ 8102188 <main+0x3b0>
 8101f36:	eddf 0a9b 	vldr	s1, [pc, #620]	@ 81021a4 <main+0x3cc>
 8101f3a:	ed9f 0a9b 	vldr	s0, [pc, #620]	@ 81021a8 <main+0x3d0>
 8101f3e:	4898      	ldr	r0, [pc, #608]	@ (81021a0 <main+0x3c8>)
 8101f40:	f7ff fa03 	bl	810134a <tune_PID>
	//*************************

	//*************************
	//Filtro di Kalman per corrente
	arm_mat_init_f32(&u, control_dim, 1, (float32_t*) &u_data); // Input di controllo
 8101f44:	4b99      	ldr	r3, [pc, #612]	@ (81021ac <main+0x3d4>)
 8101f46:	2201      	movs	r2, #1
 8101f48:	2101      	movs	r1, #1
 8101f4a:	4899      	ldr	r0, [pc, #612]	@ (81021b0 <main+0x3d8>)
 8101f4c:	f00a f83a 	bl	810bfc4 <arm_mat_init_f32>
	arm_mat_init_f32(&z, measure_dim, 1, (float32_t*) &z_data);  // Misurazione
 8101f50:	4b98      	ldr	r3, [pc, #608]	@ (81021b4 <main+0x3dc>)
 8101f52:	2201      	movs	r2, #1
 8101f54:	2102      	movs	r1, #2
 8101f56:	4898      	ldr	r0, [pc, #608]	@ (81021b8 <main+0x3e0>)
 8101f58:	f00a f834 	bl	810bfc4 <arm_mat_init_f32>
	kalman_filter_init(&kf, &A_data, &B_data, &H_data, &Q_data, &R_data,
 8101f5c:	4b97      	ldr	r3, [pc, #604]	@ (81021bc <main+0x3e4>)
 8101f5e:	9304      	str	r3, [sp, #16]
 8101f60:	4b97      	ldr	r3, [pc, #604]	@ (81021c0 <main+0x3e8>)
 8101f62:	9303      	str	r3, [sp, #12]
 8101f64:	4b97      	ldr	r3, [pc, #604]	@ (81021c4 <main+0x3ec>)
 8101f66:	9302      	str	r3, [sp, #8]
 8101f68:	4b97      	ldr	r3, [pc, #604]	@ (81021c8 <main+0x3f0>)
 8101f6a:	9301      	str	r3, [sp, #4]
 8101f6c:	4b97      	ldr	r3, [pc, #604]	@ (81021cc <main+0x3f4>)
 8101f6e:	9300      	str	r3, [sp, #0]
 8101f70:	4b97      	ldr	r3, [pc, #604]	@ (81021d0 <main+0x3f8>)
 8101f72:	4a98      	ldr	r2, [pc, #608]	@ (81021d4 <main+0x3fc>)
 8101f74:	4998      	ldr	r1, [pc, #608]	@ (81021d8 <main+0x400>)
 8101f76:	4899      	ldr	r0, [pc, #612]	@ (81021dc <main+0x404>)
 8101f78:	f7ff fc78 	bl	810186c <kalman_filter_init>
			&P_data, &K_data, &x_data);
	u_data[0] = -dt * lambda * b / (1 - dt * lambda);
 8101f7c:	eddf 7a80 	vldr	s15, [pc, #512]	@ 8102180 <main+0x3a8>
 8101f80:	eef1 7a67 	vneg.f32	s15, s15
 8101f84:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 81021e0 <main+0x408>
 8101f88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101f8c:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 81021e4 <main+0x40c>
 8101f90:	ee67 6a87 	vmul.f32	s13, s15, s14
 8101f94:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8102180 <main+0x3a8>
 8101f98:	eddf 7a91 	vldr	s15, [pc, #580]	@ 81021e0 <main+0x408>
 8101f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101fa0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8101fa4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8101fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101fac:	4b7f      	ldr	r3, [pc, #508]	@ (81021ac <main+0x3d4>)
 8101fae:	edc3 7a00 	vstr	s15, [r3]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (flag_Tc == 1) {
 8101fb2:	4b8d      	ldr	r3, [pc, #564]	@ (81021e8 <main+0x410>)
 8101fb4:	edd3 7a00 	vldr	s15, [r3]
 8101fb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8101fbc:	eef4 7a47 	vcmp.f32	s15, s14
 8101fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101fc4:	d1f5      	bne.n	8101fb2 <main+0x1da>
			flag_Tc = 0;
 8101fc6:	4b88      	ldr	r3, [pc, #544]	@ (81021e8 <main+0x410>)
 8101fc8:	f04f 0200 	mov.w	r2, #0
 8101fcc:	601a      	str	r2, [r3, #0]
			//#####################################
			//##             BNO055			   ##
			//#####################################
			//*******************************

			flag_BNO055_Data_Ready = 1; //perche non va mai a 1 non ho capito perche
 8101fce:	4b87      	ldr	r3, [pc, #540]	@ (81021ec <main+0x414>)
 8101fd0:	2201      	movs	r2, #1
 8101fd2:	601a      	str	r2, [r3, #0]
			if (flag_BNO055_Data_Ready == 1) {
 8101fd4:	4b85      	ldr	r3, [pc, #532]	@ (81021ec <main+0x414>)
 8101fd6:	681b      	ldr	r3, [r3, #0]
 8101fd8:	2b01      	cmp	r3, #1
 8101fda:	d1ea      	bne.n	8101fb2 <main+0x1da>
				flag_BNO055_Data_Ready = 1; //da mettere poi a 0 appena funziona
 8101fdc:	4b83      	ldr	r3, [pc, #524]	@ (81021ec <main+0x414>)
 8101fde:	2201      	movs	r2, #1
 8101fe0:	601a      	str	r2, [r3, #0]

				//	bno055_writeData(BNO055_SYS_TRIGGER, 0x40); //reset int
				//	bno055_calibration_state_t cal = bno055_getCalibrationState();
				if (cal.sys == 3)
 8101fe2:	7b3b      	ldrb	r3, [r7, #12]
 8101fe4:	2b03      	cmp	r3, #3
 8101fe6:	d102      	bne.n	8101fee <main+0x216>
					bno055_calibrated = 1;
 8101fe8:	4b81      	ldr	r3, [pc, #516]	@ (81021f0 <main+0x418>)
 8101fea:	2201      	movs	r2, #1
 8101fec:	601a      	str	r2, [r3, #0]

				bno055_calibrated = 1; //da togliere
 8101fee:	4b80      	ldr	r3, [pc, #512]	@ (81021f0 <main+0x418>)
 8101ff0:	2201      	movs	r2, #1
 8101ff2:	601a      	str	r2, [r3, #0]
				if (bno055_calibrated) {
 8101ff4:	4b7e      	ldr	r3, [pc, #504]	@ (81021f0 <main+0x418>)
 8101ff6:	681b      	ldr	r3, [r3, #0]
 8101ff8:	2b00      	cmp	r3, #0
 8101ffa:	d0da      	beq.n	8101fb2 <main+0x1da>
					//#####################################
					//##          RUOTA DIETRO		   ##
					//#####################################
					//*******************************
					//Ottengo velocita ruota dietro
					counts = (double) TIM4->CNT - (TIM4->ARR) / 2;
 8101ffc:	4b7d      	ldr	r3, [pc, #500]	@ (81021f4 <main+0x41c>)
 8101ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102000:	4618      	mov	r0, r3
 8102002:	f7fe fb07 	bl	8100614 <__aeabi_ui2d>
 8102006:	4604      	mov	r4, r0
 8102008:	460d      	mov	r5, r1
 810200a:	4b7a      	ldr	r3, [pc, #488]	@ (81021f4 <main+0x41c>)
 810200c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810200e:	085b      	lsrs	r3, r3, #1
 8102010:	4618      	mov	r0, r3
 8102012:	f7fe faff 	bl	8100614 <__aeabi_ui2d>
 8102016:	4602      	mov	r2, r0
 8102018:	460b      	mov	r3, r1
 810201a:	4620      	mov	r0, r4
 810201c:	4629      	mov	r1, r5
 810201e:	f7fe f9bb 	bl	8100398 <__aeabi_dsub>
 8102022:	4602      	mov	r2, r0
 8102024:	460b      	mov	r3, r1
 8102026:	4610      	mov	r0, r2
 8102028:	4619      	mov	r1, r3
 810202a:	f7fe fe65 	bl	8100cf8 <__aeabi_d2f>
 810202e:	4603      	mov	r3, r0
 8102030:	4a71      	ldr	r2, [pc, #452]	@ (81021f8 <main+0x420>)
 8102032:	6013      	str	r3, [r2, #0]
					TIM4->CNT = (TIM4->ARR) / 2;
 8102034:	4b6f      	ldr	r3, [pc, #444]	@ (81021f4 <main+0x41c>)
 8102036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102038:	4a6e      	ldr	r2, [pc, #440]	@ (81021f4 <main+0x41c>)
 810203a:	085b      	lsrs	r3, r3, #1
 810203c:	6253      	str	r3, [r2, #36]	@ 0x24

					delta_angle_degree = (counts * 360) / (13 * 4 * 66);
 810203e:	4b6e      	ldr	r3, [pc, #440]	@ (81021f8 <main+0x420>)
 8102040:	edd3 7a00 	vldr	s15, [r3]
 8102044:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 81021fc <main+0x424>
 8102048:	ee27 7a87 	vmul.f32	s14, s15, s14
 810204c:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 8102200 <main+0x428>
 8102050:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102054:	4b6b      	ldr	r3, [pc, #428]	@ (8102204 <main+0x42c>)
 8102056:	edc3 7a00 	vstr	s15, [r3]
					speed_degsec = delta_angle_degree / dt;
 810205a:	4b6a      	ldr	r3, [pc, #424]	@ (8102204 <main+0x42c>)
 810205c:	ed93 7a00 	vldr	s14, [r3]
 8102060:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8102180 <main+0x3a8>
 8102064:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102068:	4b67      	ldr	r3, [pc, #412]	@ (8102208 <main+0x430>)
 810206a:	edc3 7a00 	vstr	s15, [r3]
					speed_rpm = -(DegreeSec2RPM(speed_degsec) / 28 * 18); //wtf perche il meno???
 810206e:	4b66      	ldr	r3, [pc, #408]	@ (8102208 <main+0x430>)
 8102070:	edd3 7a00 	vldr	s15, [r3]
 8102074:	eeb0 0a67 	vmov.f32	s0, s15
 8102078:	f7ff f854 	bl	8101124 <DegreeSec2RPM>
 810207c:	eeb0 7a40 	vmov.f32	s14, s0
 8102080:	eef3 6a0c 	vmov.f32	s13, #60	@ 0x41e00000  28.0
 8102084:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102088:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 810208c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102090:	eef1 7a67 	vneg.f32	s15, s15
 8102094:	4b5d      	ldr	r3, [pc, #372]	@ (810220c <main+0x434>)
 8102096:	edc3 7a00 	vstr	s15, [r3]
					//*******************************

					//******************************+
					//PID ruota dietro
					desired_speed_metsec = getSpeed(desired_speed_metsec); //funzione che crea un riferimento a rampa e poi costante per la velocita della ruota dietro
 810209a:	4b5d      	ldr	r3, [pc, #372]	@ (8102210 <main+0x438>)
 810209c:	edd3 7a00 	vldr	s15, [r3]
 81020a0:	eeb0 0a67 	vmov.f32	s0, s15
 81020a4:	f7ff fe64 	bl	8101d70 <getSpeed>
 81020a8:	eef0 7a40 	vmov.f32	s15, s0
 81020ac:	4b58      	ldr	r3, [pc, #352]	@ (8102210 <main+0x438>)
 81020ae:	edc3 7a00 	vstr	s15, [r3]
					desired_speed_rpm = DegreeSec2RPM(
 81020b2:	4b57      	ldr	r3, [pc, #348]	@ (8102210 <main+0x438>)
 81020b4:	edd3 7a00 	vldr	s15, [r3]
 81020b8:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 81020bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81020c0:	eeb0 0a47 	vmov.f32	s0, s14
 81020c4:	f7ff f82e 	bl	8101124 <DegreeSec2RPM>
 81020c8:	eef0 7a40 	vmov.f32	s15, s0
 81020cc:	4b51      	ldr	r3, [pc, #324]	@ (8102214 <main+0x43c>)
 81020ce:	edc3 7a00 	vstr	s15, [r3]
							desired_speed_metsec / radius);

					u_back_wheel = PID_controller(&pid_speed, speed_rpm,
 81020d2:	4b4e      	ldr	r3, [pc, #312]	@ (810220c <main+0x434>)
 81020d4:	edd3 7a00 	vldr	s15, [r3]
 81020d8:	4b4e      	ldr	r3, [pc, #312]	@ (8102214 <main+0x43c>)
 81020da:	ed93 7a00 	vldr	s14, [r3]
 81020de:	eef0 0a47 	vmov.f32	s1, s14
 81020e2:	eeb0 0a67 	vmov.f32	s0, s15
 81020e6:	4827      	ldr	r0, [pc, #156]	@ (8102184 <main+0x3ac>)
 81020e8:	f7ff f948 	bl	810137c <PID_controller>
 81020ec:	eef0 7a40 	vmov.f32	s15, s0
 81020f0:	4b49      	ldr	r3, [pc, #292]	@ (8102218 <main+0x440>)
 81020f2:	edc3 7a00 	vstr	s15, [r3]
							desired_speed_rpm);
					duty_back_wheel = Voltage2Duty(u_back_wheel);
 81020f6:	4b48      	ldr	r3, [pc, #288]	@ (8102218 <main+0x440>)
 81020f8:	edd3 7a00 	vldr	s15, [r3]
 81020fc:	eeb0 0a67 	vmov.f32	s0, s15
 8102100:	f7ff f830 	bl	8101164 <Voltage2Duty>
 8102104:	eef0 7a40 	vmov.f32	s15, s0
 8102108:	4b44      	ldr	r3, [pc, #272]	@ (810221c <main+0x444>)
 810210a:	edc3 7a00 	vstr	s15, [r3]
					direction_back_wheel = Ref2Direction(desired_speed_rpm); //in teoria non serve perche la direzione è sempre in avanti
 810210e:	4b41      	ldr	r3, [pc, #260]	@ (8102214 <main+0x43c>)
 8102110:	edd3 7a00 	vldr	s15, [r3]
 8102114:	eeb0 0a67 	vmov.f32	s0, s15
 8102118:	f7ff f866 	bl	81011e8 <Ref2Direction>
 810211c:	4603      	mov	r3, r0
 810211e:	461a      	mov	r2, r3
 8102120:	4b3f      	ldr	r3, [pc, #252]	@ (8102220 <main+0x448>)
 8102122:	601a      	str	r2, [r3, #0]
					set_PWM_and_dir_back_wheel(duty_back_wheel,
 8102124:	4b3d      	ldr	r3, [pc, #244]	@ (810221c <main+0x444>)
 8102126:	edd3 7a00 	vldr	s15, [r3]
 810212a:	4b3d      	ldr	r3, [pc, #244]	@ (8102220 <main+0x448>)
 810212c:	681b      	ldr	r3, [r3, #0]
 810212e:	b2db      	uxtb	r3, r3
 8102130:	4618      	mov	r0, r3
 8102132:	eeb0 0a67 	vmov.f32	s0, s15
 8102136:	f7ff f86f 	bl	8101218 <set_PWM_and_dir_back_wheel>

					//#####################################
					//##          PID YAW RATE		   ##
					//#####################################
					//******************************
					desired_yaw_rate = 0;
 810213a:	4b3a      	ldr	r3, [pc, #232]	@ (8102224 <main+0x44c>)
 810213c:	f04f 0200 	mov.w	r2, #0
 8102140:	601a      	str	r2, [r3, #0]
					desired_roll = PID_controller(&pid_yaw_rate, yaw_rate,
 8102142:	4b39      	ldr	r3, [pc, #228]	@ (8102228 <main+0x450>)
 8102144:	edd3 7a00 	vldr	s15, [r3]
 8102148:	4b36      	ldr	r3, [pc, #216]	@ (8102224 <main+0x44c>)
 810214a:	ed93 7a00 	vldr	s14, [r3]
 810214e:	eef0 0a47 	vmov.f32	s1, s14
 8102152:	eeb0 0a67 	vmov.f32	s0, s15
 8102156:	4835      	ldr	r0, [pc, #212]	@ (810222c <main+0x454>)
 8102158:	f7ff f910 	bl	810137c <PID_controller>
 810215c:	eef0 7a40 	vmov.f32	s15, s0
 8102160:	e066      	b.n	8102230 <main+0x458>
 8102162:	bf00      	nop
 8102164:	58026400 	.word	0x58026400
 8102168:	10000374 	.word	0x10000374
 810216c:	10000328 	.word	0x10000328
 8102170:	100003c0 	.word	0x100003c0
 8102174:	100002d4 	.word	0x100002d4
 8102178:	08111e24 	.word	0x08111e24
 810217c:	08111e48 	.word	0x08111e48
 8102180:	3c23d70a 	.word	0x3c23d70a
 8102184:	100004ec 	.word	0x100004ec
 8102188:	00000000 	.word	0x00000000
 810218c:	3d4ccccd 	.word	0x3d4ccccd
 8102190:	3a83126f 	.word	0x3a83126f
 8102194:	c2b40000 	.word	0xc2b40000
 8102198:	42b40000 	.word	0x42b40000
 810219c:	1000052c 	.word	0x1000052c
 81021a0:	1000054c 	.word	0x1000054c
 81021a4:	42080000 	.word	0x42080000
 81021a8:	42860000 	.word	0x42860000
 81021ac:	10000638 	.word	0x10000638
 81021b0:	10000628 	.word	0x10000628
 81021b4:	1000063c 	.word	0x1000063c
 81021b8:	10000630 	.word	0x10000630
 81021bc:	10000620 	.word	0x10000620
 81021c0:	10000070 	.word	0x10000070
 81021c4:	10000060 	.word	0x10000060
 81021c8:	10000050 	.word	0x10000050
 81021cc:	10000040 	.word	0x10000040
 81021d0:	10000030 	.word	0x10000030
 81021d4:	10000028 	.word	0x10000028
 81021d8:	10000018 	.word	0x10000018
 81021dc:	100005e0 	.word	0x100005e0
 81021e0:	c93b6280 	.word	0xc93b6280
 81021e4:	401ef4f1 	.word	0x401ef4f1
 81021e8:	10000570 	.word	0x10000570
 81021ec:	1000056c 	.word	0x1000056c
 81021f0:	10000598 	.word	0x10000598
 81021f4:	40000800 	.word	0x40000800
 81021f8:	10000574 	.word	0x10000574
 81021fc:	43b40000 	.word	0x43b40000
 8102200:	45568000 	.word	0x45568000
 8102204:	10000578 	.word	0x10000578
 8102208:	1000057c 	.word	0x1000057c
 810220c:	10000580 	.word	0x10000580
 8102210:	10000584 	.word	0x10000584
 8102214:	10000588 	.word	0x10000588
 8102218:	1000058c 	.word	0x1000058c
 810221c:	10000590 	.word	0x10000590
 8102220:	10000594 	.word	0x10000594
 8102224:	1000059c 	.word	0x1000059c
 8102228:	100005bc 	.word	0x100005bc
 810222c:	1000050c 	.word	0x1000050c
 8102230:	4ba9      	ldr	r3, [pc, #676]	@ (81024d8 <main+0x700>)
 8102232:	edc3 7a00 	vstr	s15, [r3]

					//#####################################
					//##            PID ROLL			   ##
					//#####################################
					//******************************
					desired_torque = PID_controller(&pid_roll, roll,
 8102236:	4ba9      	ldr	r3, [pc, #676]	@ (81024dc <main+0x704>)
 8102238:	edd3 7a00 	vldr	s15, [r3]
 810223c:	4ba6      	ldr	r3, [pc, #664]	@ (81024d8 <main+0x700>)
 810223e:	ed93 7a00 	vldr	s14, [r3]
 8102242:	eef0 0a47 	vmov.f32	s1, s14
 8102246:	eeb0 0a67 	vmov.f32	s0, s15
 810224a:	48a5      	ldr	r0, [pc, #660]	@ (81024e0 <main+0x708>)
 810224c:	f7ff f896 	bl	810137c <PID_controller>
 8102250:	eef0 7a40 	vmov.f32	s15, s0
 8102254:	4ba3      	ldr	r3, [pc, #652]	@ (81024e4 <main+0x70c>)
 8102256:	edc3 7a00 	vstr	s15, [r3]
					//#####################################
					//##         LOW-PASS FILTER	   	   ##
					//#####################################
					//******************************
					//filtro passa basso 1/s+1 discretizzato con Matlab
					desired_filtered_torque = 0.99 * old_desired_filtered_torque
 810225a:	4ba3      	ldr	r3, [pc, #652]	@ (81024e8 <main+0x710>)
 810225c:	681b      	ldr	r3, [r3, #0]
 810225e:	4618      	mov	r0, r3
 8102260:	f7fe f9fa 	bl	8100658 <__aeabi_f2d>
 8102264:	a392      	add	r3, pc, #584	@ (adr r3, 81024b0 <main+0x6d8>)
 8102266:	e9d3 2300 	ldrd	r2, r3, [r3]
 810226a:	f7fe fa4d 	bl	8100708 <__aeabi_dmul>
 810226e:	4602      	mov	r2, r0
 8102270:	460b      	mov	r3, r1
 8102272:	4614      	mov	r4, r2
 8102274:	461d      	mov	r5, r3
							+ 0.00995 * old_desired_torque;
 8102276:	4b9d      	ldr	r3, [pc, #628]	@ (81024ec <main+0x714>)
 8102278:	681b      	ldr	r3, [r3, #0]
 810227a:	4618      	mov	r0, r3
 810227c:	f7fe f9ec 	bl	8100658 <__aeabi_f2d>
 8102280:	a38d      	add	r3, pc, #564	@ (adr r3, 81024b8 <main+0x6e0>)
 8102282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102286:	f7fe fa3f 	bl	8100708 <__aeabi_dmul>
 810228a:	4602      	mov	r2, r0
 810228c:	460b      	mov	r3, r1
 810228e:	4620      	mov	r0, r4
 8102290:	4629      	mov	r1, r5
 8102292:	f7fe f883 	bl	810039c <__adddf3>
 8102296:	4602      	mov	r2, r0
 8102298:	460b      	mov	r3, r1
 810229a:	4610      	mov	r0, r2
 810229c:	4619      	mov	r1, r3
 810229e:	f7fe fd2b 	bl	8100cf8 <__aeabi_d2f>
 81022a2:	4603      	mov	r3, r0
					desired_filtered_torque = 0.99 * old_desired_filtered_torque
 81022a4:	4a92      	ldr	r2, [pc, #584]	@ (81024f0 <main+0x718>)
 81022a6:	6013      	str	r3, [r2, #0]
					old_desired_torque = desired_torque;
 81022a8:	4b8e      	ldr	r3, [pc, #568]	@ (81024e4 <main+0x70c>)
 81022aa:	681b      	ldr	r3, [r3, #0]
 81022ac:	4a8f      	ldr	r2, [pc, #572]	@ (81024ec <main+0x714>)
 81022ae:	6013      	str	r3, [r2, #0]
					old_desired_filtered_torque = desired_filtered_torque;
 81022b0:	4b8f      	ldr	r3, [pc, #572]	@ (81024f0 <main+0x718>)
 81022b2:	681b      	ldr	r3, [r3, #0]
 81022b4:	4a8c      	ldr	r2, [pc, #560]	@ (81024e8 <main+0x710>)
 81022b6:	6013      	str	r3, [r2, #0]
					//#####################################
					//##            STERZO			   ##
					//#####################################
					//******************************
					//Calcolo valore corrente
					HAL_ADC_Start(&hadc1);
 81022b8:	488e      	ldr	r0, [pc, #568]	@ (81024f4 <main+0x71c>)
 81022ba:	f001 fccd 	bl	8103c58 <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc1, timeout);
 81022be:	4b8e      	ldr	r3, [pc, #568]	@ (81024f8 <main+0x720>)
 81022c0:	681b      	ldr	r3, [r3, #0]
 81022c2:	4619      	mov	r1, r3
 81022c4:	488b      	ldr	r0, [pc, #556]	@ (81024f4 <main+0x71c>)
 81022c6:	f001 fdc5 	bl	8103e54 <HAL_ADC_PollForConversion>
					CountValue = HAL_ADC_GetValue(&hadc1);
 81022ca:	488a      	ldr	r0, [pc, #552]	@ (81024f4 <main+0x71c>)
 81022cc:	f001 feb6 	bl	810403c <HAL_ADC_GetValue>
 81022d0:	ee07 0a90 	vmov	s15, r0
 81022d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81022d8:	4b88      	ldr	r3, [pc, #544]	@ (81024fc <main+0x724>)
 81022da:	edc3 7a00 	vstr	s15, [r3]
					volt = ((float) CountValue) * Vref / (resolution);
 81022de:	4b87      	ldr	r3, [pc, #540]	@ (81024fc <main+0x724>)
 81022e0:	ed93 7a00 	vldr	s14, [r3]
 81022e4:	4b86      	ldr	r3, [pc, #536]	@ (8102500 <main+0x728>)
 81022e6:	edd3 7a00 	vldr	s15, [r3]
 81022ea:	ee67 6a27 	vmul.f32	s13, s14, s15
 81022ee:	4b85      	ldr	r3, [pc, #532]	@ (8102504 <main+0x72c>)
 81022f0:	ed93 7a00 	vldr	s14, [r3]
 81022f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81022f8:	4b83      	ldr	r3, [pc, #524]	@ (8102508 <main+0x730>)
 81022fa:	edc3 7a00 	vstr	s15, [r3]
					HAL_ADC_Stop(&hadc1);
 81022fe:	487d      	ldr	r0, [pc, #500]	@ (81024f4 <main+0x71c>)
 8102300:	f001 fd74 	bl	8103dec <HAL_ADC_Stop>
					VoltSens = volt * 1.524 - 0.1018;
 8102304:	4b80      	ldr	r3, [pc, #512]	@ (8102508 <main+0x730>)
 8102306:	681b      	ldr	r3, [r3, #0]
 8102308:	4618      	mov	r0, r3
 810230a:	f7fe f9a5 	bl	8100658 <__aeabi_f2d>
 810230e:	a36c      	add	r3, pc, #432	@ (adr r3, 81024c0 <main+0x6e8>)
 8102310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102314:	f7fe f9f8 	bl	8100708 <__aeabi_dmul>
 8102318:	4602      	mov	r2, r0
 810231a:	460b      	mov	r3, r1
 810231c:	4610      	mov	r0, r2
 810231e:	4619      	mov	r1, r3
 8102320:	a369      	add	r3, pc, #420	@ (adr r3, 81024c8 <main+0x6f0>)
 8102322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102326:	f7fe f837 	bl	8100398 <__aeabi_dsub>
 810232a:	4602      	mov	r2, r0
 810232c:	460b      	mov	r3, r1
 810232e:	4610      	mov	r0, r2
 8102330:	4619      	mov	r1, r3
 8102332:	f7fe fce1 	bl	8100cf8 <__aeabi_d2f>
 8102336:	4603      	mov	r3, r0
 8102338:	4a74      	ldr	r2, [pc, #464]	@ (810250c <main+0x734>)
 810233a:	6013      	str	r3, [r2, #0]

					//Filtro di Kalman per corrente
					//setta i valori di input e di misura per il filtro di kalman
					z_data[0] = VoltSens; //misura del voltaggio del sensore di corrente
 810233c:	4b73      	ldr	r3, [pc, #460]	@ (810250c <main+0x734>)
 810233e:	681b      	ldr	r3, [r3, #0]
 8102340:	4a73      	ldr	r2, [pc, #460]	@ (8102510 <main+0x738>)
 8102342:	6013      	str	r3, [r2, #0]
					z_data[1] = x_data[1]; //per non usare la misura I aggiuntiva, volendo si puo usare la formula V=IR del motore, adesso vedo come metterla
 8102344:	4b73      	ldr	r3, [pc, #460]	@ (8102514 <main+0x73c>)
 8102346:	685b      	ldr	r3, [r3, #4]
 8102348:	4a71      	ldr	r2, [pc, #452]	@ (8102510 <main+0x738>)
 810234a:	6053      	str	r3, [r2, #4]
					//z_data[1] = misuracorrente; //qua ci va la misura della corrente. scelta grazie al pwm dalla formula I = V/R
					kalman_predict(&kf, &u);
 810234c:	4972      	ldr	r1, [pc, #456]	@ (8102518 <main+0x740>)
 810234e:	4873      	ldr	r0, [pc, #460]	@ (810251c <main+0x744>)
 8102350:	f7ff fad6 	bl	8101900 <kalman_predict>
					kalman_update(&kf, &z);
 8102354:	4972      	ldr	r1, [pc, #456]	@ (8102520 <main+0x748>)
 8102356:	4871      	ldr	r0, [pc, #452]	@ (810251c <main+0x744>)
 8102358:	f7ff fb40 	bl	81019dc <kalman_update>
					filtered_current = x_data[1];
 810235c:	4b6d      	ldr	r3, [pc, #436]	@ (8102514 <main+0x73c>)
 810235e:	685b      	ldr	r3, [r3, #4]
 8102360:	4a70      	ldr	r2, [pc, #448]	@ (8102524 <main+0x74c>)
 8102362:	6013      	str	r3, [r2, #0]

					//calcolo coppia
					torque = filtered_current * K;
 8102364:	4b6f      	ldr	r3, [pc, #444]	@ (8102524 <main+0x74c>)
 8102366:	edd3 7a00 	vldr	s15, [r3]
 810236a:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8102528 <main+0x750>
 810236e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102372:	4b6e      	ldr	r3, [pc, #440]	@ (810252c <main+0x754>)
 8102374:	edc3 7a00 	vstr	s15, [r3]

					//PID
					//test

					desired_torque = 2 * K * sin((n_ref / 1000.0) * 2 * 3.14);
 8102378:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8102528 <main+0x750>
 810237c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8102380:	ee17 0a90 	vmov	r0, s15
 8102384:	f7fe f968 	bl	8100658 <__aeabi_f2d>
 8102388:	4604      	mov	r4, r0
 810238a:	460d      	mov	r5, r1
 810238c:	4b68      	ldr	r3, [pc, #416]	@ (8102530 <main+0x758>)
 810238e:	681b      	ldr	r3, [r3, #0]
 8102390:	4618      	mov	r0, r3
 8102392:	f7fe f94f 	bl	8100634 <__aeabi_i2d>
 8102396:	f04f 0200 	mov.w	r2, #0
 810239a:	4b66      	ldr	r3, [pc, #408]	@ (8102534 <main+0x75c>)
 810239c:	f7fe fade 	bl	810095c <__aeabi_ddiv>
 81023a0:	4602      	mov	r2, r0
 81023a2:	460b      	mov	r3, r1
 81023a4:	4610      	mov	r0, r2
 81023a6:	4619      	mov	r1, r3
 81023a8:	4602      	mov	r2, r0
 81023aa:	460b      	mov	r3, r1
 81023ac:	f7fd fff6 	bl	810039c <__adddf3>
 81023b0:	4602      	mov	r2, r0
 81023b2:	460b      	mov	r3, r1
 81023b4:	4610      	mov	r0, r2
 81023b6:	4619      	mov	r1, r3
 81023b8:	a345      	add	r3, pc, #276	@ (adr r3, 81024d0 <main+0x6f8>)
 81023ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81023be:	f7fe f9a3 	bl	8100708 <__aeabi_dmul>
 81023c2:	4602      	mov	r2, r0
 81023c4:	460b      	mov	r3, r1
 81023c6:	ec43 2b17 	vmov	d7, r2, r3
 81023ca:	eeb0 0a47 	vmov.f32	s0, s14
 81023ce:	eef0 0a67 	vmov.f32	s1, s15
 81023d2:	f00e fa41 	bl	8110858 <sin>
 81023d6:	ec53 2b10 	vmov	r2, r3, d0
 81023da:	4620      	mov	r0, r4
 81023dc:	4629      	mov	r1, r5
 81023de:	f7fe f993 	bl	8100708 <__aeabi_dmul>
 81023e2:	4602      	mov	r2, r0
 81023e4:	460b      	mov	r3, r1
 81023e6:	4610      	mov	r0, r2
 81023e8:	4619      	mov	r1, r3
 81023ea:	f7fe fc85 	bl	8100cf8 <__aeabi_d2f>
 81023ee:	4603      	mov	r3, r0
 81023f0:	4a3c      	ldr	r2, [pc, #240]	@ (81024e4 <main+0x70c>)
 81023f2:	6013      	str	r3, [r2, #0]
					printf("coppia des: %.3f", desired_torque);
					printf("coppia: %.3f \r\n", torque);
					*/


					u_front_wheel = PID_controller(&pid_steering_torque, torque,
 81023f4:	4b4d      	ldr	r3, [pc, #308]	@ (810252c <main+0x754>)
 81023f6:	edd3 7a00 	vldr	s15, [r3]
 81023fa:	4b3a      	ldr	r3, [pc, #232]	@ (81024e4 <main+0x70c>)
 81023fc:	ed93 7a00 	vldr	s14, [r3]
 8102400:	eef0 0a47 	vmov.f32	s1, s14
 8102404:	eeb0 0a67 	vmov.f32	s0, s15
 8102408:	484b      	ldr	r0, [pc, #300]	@ (8102538 <main+0x760>)
 810240a:	f7fe ffb7 	bl	810137c <PID_controller>
 810240e:	eef0 7a40 	vmov.f32	s15, s0
 8102412:	4b4a      	ldr	r3, [pc, #296]	@ (810253c <main+0x764>)
 8102414:	edc3 7a00 	vstr	s15, [r3]
							desired_torque);



					duty_front_wheel = Voltage2Duty(u_front_wheel);
 8102418:	4b48      	ldr	r3, [pc, #288]	@ (810253c <main+0x764>)
 810241a:	edd3 7a00 	vldr	s15, [r3]
 810241e:	eeb0 0a67 	vmov.f32	s0, s15
 8102422:	f7fe fe9f 	bl	8101164 <Voltage2Duty>
 8102426:	eef0 7a40 	vmov.f32	s15, s0
 810242a:	4b45      	ldr	r3, [pc, #276]	@ (8102540 <main+0x768>)
 810242c:	edc3 7a00 	vstr	s15, [r3]
					dir_front_wheel = Ref2Direction(u_front_wheel);
 8102430:	4b42      	ldr	r3, [pc, #264]	@ (810253c <main+0x764>)
 8102432:	edd3 7a00 	vldr	s15, [r3]
 8102436:	eeb0 0a67 	vmov.f32	s0, s15
 810243a:	f7fe fed5 	bl	81011e8 <Ref2Direction>
 810243e:	4603      	mov	r3, r0
 8102440:	ee07 3a90 	vmov	s15, r3
 8102444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102448:	4b3e      	ldr	r3, [pc, #248]	@ (8102544 <main+0x76c>)
 810244a:	edc3 7a00 	vstr	s15, [r3]
					printf("dir: %.3f\r\n", dir_front_wheel);
 810244e:	4b3d      	ldr	r3, [pc, #244]	@ (8102544 <main+0x76c>)
 8102450:	681b      	ldr	r3, [r3, #0]
 8102452:	4618      	mov	r0, r3
 8102454:	f7fe f900 	bl	8100658 <__aeabi_f2d>
 8102458:	4602      	mov	r2, r0
 810245a:	460b      	mov	r3, r1
 810245c:	483a      	ldr	r0, [pc, #232]	@ (8102548 <main+0x770>)
 810245e:	f00a fd4d 	bl	810cefc <iprintf>
					set_PWM_and_dir_front_wheel(duty_front_wheel,
 8102462:	4b37      	ldr	r3, [pc, #220]	@ (8102540 <main+0x768>)
 8102464:	ed93 7a00 	vldr	s14, [r3]
 8102468:	4b36      	ldr	r3, [pc, #216]	@ (8102544 <main+0x76c>)
 810246a:	edd3 7a00 	vldr	s15, [r3]
 810246e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102472:	edc7 7a01 	vstr	s15, [r7, #4]
 8102476:	793b      	ldrb	r3, [r7, #4]
 8102478:	b2db      	uxtb	r3, r3
 810247a:	4618      	mov	r0, r3
 810247c:	eeb0 0a47 	vmov.f32	s0, s14
 8102480:	f7fe ff0c 	bl	810129c <set_PWM_and_dir_front_wheel>
							dir_front_wheel);
					HAL_GPIO_WritePin (GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8102484:	2201      	movs	r2, #1
 8102486:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 810248a:	4830      	ldr	r0, [pc, #192]	@ (810254c <main+0x774>)
 810248c:	f002 ffce 	bl	810542c <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 8102490:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8102494:	f000 ffde 	bl	8103454 <HAL_Delay>
					HAL_GPIO_WritePin (GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8102498:	2200      	movs	r2, #0
 810249a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 810249e:	482b      	ldr	r0, [pc, #172]	@ (810254c <main+0x774>)
 81024a0:	f002 ffc4 	bl	810542c <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 81024a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 81024a8:	f000 ffd4 	bl	8103454 <HAL_Delay>
		if (flag_Tc == 1) {
 81024ac:	e581      	b.n	8101fb2 <main+0x1da>
 81024ae:	bf00      	nop
 81024b0:	7ae147ae 	.word	0x7ae147ae
 81024b4:	3fefae14 	.word	0x3fefae14
 81024b8:	64c2f838 	.word	0x64c2f838
 81024bc:	3f8460aa 	.word	0x3f8460aa
 81024c0:	d2f1a9fc 	.word	0xd2f1a9fc
 81024c4:	3ff8624d 	.word	0x3ff8624d
 81024c8:	96bb98c8 	.word	0x96bb98c8
 81024cc:	3fba0f90 	.word	0x3fba0f90
 81024d0:	51eb851f 	.word	0x51eb851f
 81024d4:	40091eb8 	.word	0x40091eb8
 81024d8:	100005a0 	.word	0x100005a0
 81024dc:	100005c0 	.word	0x100005c0
 81024e0:	1000052c 	.word	0x1000052c
 81024e4:	100005a4 	.word	0x100005a4
 81024e8:	100005ac 	.word	0x100005ac
 81024ec:	100005b0 	.word	0x100005b0
 81024f0:	100005a8 	.word	0x100005a8
 81024f4:	10000270 	.word	0x10000270
 81024f8:	1000000c 	.word	0x1000000c
 81024fc:	100005b4 	.word	0x100005b4
 8102500:	10000014 	.word	0x10000014
 8102504:	10000010 	.word	0x10000010
 8102508:	100005b8 	.word	0x100005b8
 810250c:	100005dc 	.word	0x100005dc
 8102510:	1000063c 	.word	0x1000063c
 8102514:	10000620 	.word	0x10000620
 8102518:	10000628 	.word	0x10000628
 810251c:	100005e0 	.word	0x100005e0
 8102520:	10000630 	.word	0x10000630
 8102524:	100005d0 	.word	0x100005d0
 8102528:	3cbfb15b 	.word	0x3cbfb15b
 810252c:	100005d4 	.word	0x100005d4
 8102530:	100005d8 	.word	0x100005d8
 8102534:	408f4000 	.word	0x408f4000
 8102538:	1000054c 	.word	0x1000054c
 810253c:	100005c4 	.word	0x100005c4
 8102540:	100005cc 	.word	0x100005cc
 8102544:	100005c8 	.word	0x100005c8
 8102548:	08111e80 	.word	0x08111e80
 810254c:	58020400 	.word	0x58020400

08102550 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8102550:	b580      	push	{r7, lr}
 8102552:	b08a      	sub	sp, #40	@ 0x28
 8102554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8102556:	f107 031c 	add.w	r3, r7, #28
 810255a:	2200      	movs	r2, #0
 810255c:	601a      	str	r2, [r3, #0]
 810255e:	605a      	str	r2, [r3, #4]
 8102560:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8102562:	463b      	mov	r3, r7
 8102564:	2200      	movs	r2, #0
 8102566:	601a      	str	r2, [r3, #0]
 8102568:	605a      	str	r2, [r3, #4]
 810256a:	609a      	str	r2, [r3, #8]
 810256c:	60da      	str	r2, [r3, #12]
 810256e:	611a      	str	r2, [r3, #16]
 8102570:	615a      	str	r2, [r3, #20]
 8102572:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8102574:	4b2f      	ldr	r3, [pc, #188]	@ (8102634 <MX_ADC1_Init+0xe4>)
 8102576:	4a30      	ldr	r2, [pc, #192]	@ (8102638 <MX_ADC1_Init+0xe8>)
 8102578:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 810257a:	4b2e      	ldr	r3, [pc, #184]	@ (8102634 <MX_ADC1_Init+0xe4>)
 810257c:	2200      	movs	r2, #0
 810257e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8102580:	4b2c      	ldr	r3, [pc, #176]	@ (8102634 <MX_ADC1_Init+0xe4>)
 8102582:	2200      	movs	r2, #0
 8102584:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8102586:	4b2b      	ldr	r3, [pc, #172]	@ (8102634 <MX_ADC1_Init+0xe4>)
 8102588:	2200      	movs	r2, #0
 810258a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 810258c:	4b29      	ldr	r3, [pc, #164]	@ (8102634 <MX_ADC1_Init+0xe4>)
 810258e:	2204      	movs	r2, #4
 8102590:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8102592:	4b28      	ldr	r3, [pc, #160]	@ (8102634 <MX_ADC1_Init+0xe4>)
 8102594:	2200      	movs	r2, #0
 8102596:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8102598:	4b26      	ldr	r3, [pc, #152]	@ (8102634 <MX_ADC1_Init+0xe4>)
 810259a:	2200      	movs	r2, #0
 810259c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 810259e:	4b25      	ldr	r3, [pc, #148]	@ (8102634 <MX_ADC1_Init+0xe4>)
 81025a0:	2201      	movs	r2, #1
 81025a2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 81025a4:	4b23      	ldr	r3, [pc, #140]	@ (8102634 <MX_ADC1_Init+0xe4>)
 81025a6:	2200      	movs	r2, #0
 81025a8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 81025aa:	4b22      	ldr	r3, [pc, #136]	@ (8102634 <MX_ADC1_Init+0xe4>)
 81025ac:	2200      	movs	r2, #0
 81025ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 81025b0:	4b20      	ldr	r3, [pc, #128]	@ (8102634 <MX_ADC1_Init+0xe4>)
 81025b2:	2200      	movs	r2, #0
 81025b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81025b6:	4b1f      	ldr	r3, [pc, #124]	@ (8102634 <MX_ADC1_Init+0xe4>)
 81025b8:	2200      	movs	r2, #0
 81025ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81025bc:	4b1d      	ldr	r3, [pc, #116]	@ (8102634 <MX_ADC1_Init+0xe4>)
 81025be:	2200      	movs	r2, #0
 81025c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81025c2:	4b1c      	ldr	r3, [pc, #112]	@ (8102634 <MX_ADC1_Init+0xe4>)
 81025c4:	2200      	movs	r2, #0
 81025c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 81025c8:	4b1a      	ldr	r3, [pc, #104]	@ (8102634 <MX_ADC1_Init+0xe4>)
 81025ca:	2200      	movs	r2, #0
 81025cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 81025d0:	4818      	ldr	r0, [pc, #96]	@ (8102634 <MX_ADC1_Init+0xe4>)
 81025d2:	f001 f99f 	bl	8103914 <HAL_ADC_Init>
 81025d6:	4603      	mov	r3, r0
 81025d8:	2b00      	cmp	r3, #0
 81025da:	d001      	beq.n	81025e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 81025dc:	f000 faec 	bl	8102bb8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 81025e0:	2300      	movs	r3, #0
 81025e2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 81025e4:	f107 031c 	add.w	r3, r7, #28
 81025e8:	4619      	mov	r1, r3
 81025ea:	4812      	ldr	r0, [pc, #72]	@ (8102634 <MX_ADC1_Init+0xe4>)
 81025ec:	f002 fb68 	bl	8104cc0 <HAL_ADCEx_MultiModeConfigChannel>
 81025f0:	4603      	mov	r3, r0
 81025f2:	2b00      	cmp	r3, #0
 81025f4:	d001      	beq.n	81025fa <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 81025f6:	f000 fadf 	bl	8102bb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 81025fa:	4b10      	ldr	r3, [pc, #64]	@ (810263c <MX_ADC1_Init+0xec>)
 81025fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81025fe:	2306      	movs	r3, #6
 8102600:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8102602:	2300      	movs	r3, #0
 8102604:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8102606:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 810260a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 810260c:	2304      	movs	r3, #4
 810260e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8102610:	2300      	movs	r3, #0
 8102612:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8102614:	2300      	movs	r3, #0
 8102616:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8102618:	463b      	mov	r3, r7
 810261a:	4619      	mov	r1, r3
 810261c:	4805      	ldr	r0, [pc, #20]	@ (8102634 <MX_ADC1_Init+0xe4>)
 810261e:	f001 fd1b 	bl	8104058 <HAL_ADC_ConfigChannel>
 8102622:	4603      	mov	r3, r0
 8102624:	2b00      	cmp	r3, #0
 8102626:	d001      	beq.n	810262c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8102628:	f000 fac6 	bl	8102bb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 810262c:	bf00      	nop
 810262e:	3728      	adds	r7, #40	@ 0x28
 8102630:	46bd      	mov	sp, r7
 8102632:	bd80      	pop	{r7, pc}
 8102634:	10000270 	.word	0x10000270
 8102638:	40022000 	.word	0x40022000
 810263c:	08600004 	.word	0x08600004

08102640 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8102640:	b580      	push	{r7, lr}
 8102642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8102644:	4b1b      	ldr	r3, [pc, #108]	@ (81026b4 <MX_I2C1_Init+0x74>)
 8102646:	4a1c      	ldr	r2, [pc, #112]	@ (81026b8 <MX_I2C1_Init+0x78>)
 8102648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 810264a:	4b1a      	ldr	r3, [pc, #104]	@ (81026b4 <MX_I2C1_Init+0x74>)
 810264c:	4a1b      	ldr	r2, [pc, #108]	@ (81026bc <MX_I2C1_Init+0x7c>)
 810264e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8102650:	4b18      	ldr	r3, [pc, #96]	@ (81026b4 <MX_I2C1_Init+0x74>)
 8102652:	2200      	movs	r2, #0
 8102654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8102656:	4b17      	ldr	r3, [pc, #92]	@ (81026b4 <MX_I2C1_Init+0x74>)
 8102658:	2201      	movs	r2, #1
 810265a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810265c:	4b15      	ldr	r3, [pc, #84]	@ (81026b4 <MX_I2C1_Init+0x74>)
 810265e:	2200      	movs	r2, #0
 8102660:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8102662:	4b14      	ldr	r3, [pc, #80]	@ (81026b4 <MX_I2C1_Init+0x74>)
 8102664:	2200      	movs	r2, #0
 8102666:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8102668:	4b12      	ldr	r3, [pc, #72]	@ (81026b4 <MX_I2C1_Init+0x74>)
 810266a:	2200      	movs	r2, #0
 810266c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810266e:	4b11      	ldr	r3, [pc, #68]	@ (81026b4 <MX_I2C1_Init+0x74>)
 8102670:	2200      	movs	r2, #0
 8102672:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8102674:	4b0f      	ldr	r3, [pc, #60]	@ (81026b4 <MX_I2C1_Init+0x74>)
 8102676:	2200      	movs	r2, #0
 8102678:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 810267a:	480e      	ldr	r0, [pc, #56]	@ (81026b4 <MX_I2C1_Init+0x74>)
 810267c:	f002 ff1c 	bl	81054b8 <HAL_I2C_Init>
 8102680:	4603      	mov	r3, r0
 8102682:	2b00      	cmp	r3, #0
 8102684:	d001      	beq.n	810268a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8102686:	f000 fa97 	bl	8102bb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810268a:	2100      	movs	r1, #0
 810268c:	4809      	ldr	r0, [pc, #36]	@ (81026b4 <MX_I2C1_Init+0x74>)
 810268e:	f003 fc7d 	bl	8105f8c <HAL_I2CEx_ConfigAnalogFilter>
 8102692:	4603      	mov	r3, r0
 8102694:	2b00      	cmp	r3, #0
 8102696:	d001      	beq.n	810269c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8102698:	f000 fa8e 	bl	8102bb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 810269c:	2100      	movs	r1, #0
 810269e:	4805      	ldr	r0, [pc, #20]	@ (81026b4 <MX_I2C1_Init+0x74>)
 81026a0:	f003 fcbf 	bl	8106022 <HAL_I2CEx_ConfigDigitalFilter>
 81026a4:	4603      	mov	r3, r0
 81026a6:	2b00      	cmp	r3, #0
 81026a8:	d001      	beq.n	81026ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 81026aa:	f000 fa85 	bl	8102bb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 81026ae:	bf00      	nop
 81026b0:	bd80      	pop	{r7, pc}
 81026b2:	bf00      	nop
 81026b4:	100002d4 	.word	0x100002d4
 81026b8:	40005400 	.word	0x40005400
 81026bc:	10c0ecff 	.word	0x10c0ecff

081026c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 81026c0:	b580      	push	{r7, lr}
 81026c2:	b09a      	sub	sp, #104	@ 0x68
 81026c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81026c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 81026ca:	2200      	movs	r2, #0
 81026cc:	601a      	str	r2, [r3, #0]
 81026ce:	605a      	str	r2, [r3, #4]
 81026d0:	609a      	str	r2, [r3, #8]
 81026d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81026d4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 81026d8:	2200      	movs	r2, #0
 81026da:	601a      	str	r2, [r3, #0]
 81026dc:	605a      	str	r2, [r3, #4]
 81026de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81026e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81026e4:	2200      	movs	r2, #0
 81026e6:	601a      	str	r2, [r3, #0]
 81026e8:	605a      	str	r2, [r3, #4]
 81026ea:	609a      	str	r2, [r3, #8]
 81026ec:	60da      	str	r2, [r3, #12]
 81026ee:	611a      	str	r2, [r3, #16]
 81026f0:	615a      	str	r2, [r3, #20]
 81026f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 81026f4:	1d3b      	adds	r3, r7, #4
 81026f6:	222c      	movs	r2, #44	@ 0x2c
 81026f8:	2100      	movs	r1, #0
 81026fa:	4618      	mov	r0, r3
 81026fc:	f00a fd66 	bl	810d1cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8102700:	4b43      	ldr	r3, [pc, #268]	@ (8102810 <MX_TIM1_Init+0x150>)
 8102702:	4a44      	ldr	r2, [pc, #272]	@ (8102814 <MX_TIM1_Init+0x154>)
 8102704:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8102706:	4b42      	ldr	r3, [pc, #264]	@ (8102810 <MX_TIM1_Init+0x150>)
 8102708:	22c7      	movs	r2, #199	@ 0xc7
 810270a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 810270c:	4b40      	ldr	r3, [pc, #256]	@ (8102810 <MX_TIM1_Init+0x150>)
 810270e:	2200      	movs	r2, #0
 8102710:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8102712:	4b3f      	ldr	r3, [pc, #252]	@ (8102810 <MX_TIM1_Init+0x150>)
 8102714:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8102718:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810271a:	4b3d      	ldr	r3, [pc, #244]	@ (8102810 <MX_TIM1_Init+0x150>)
 810271c:	2200      	movs	r2, #0
 810271e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8102720:	4b3b      	ldr	r3, [pc, #236]	@ (8102810 <MX_TIM1_Init+0x150>)
 8102722:	2200      	movs	r2, #0
 8102724:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102726:	4b3a      	ldr	r3, [pc, #232]	@ (8102810 <MX_TIM1_Init+0x150>)
 8102728:	2200      	movs	r2, #0
 810272a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 810272c:	4838      	ldr	r0, [pc, #224]	@ (8102810 <MX_TIM1_Init+0x150>)
 810272e:	f006 fc23 	bl	8108f78 <HAL_TIM_Base_Init>
 8102732:	4603      	mov	r3, r0
 8102734:	2b00      	cmp	r3, #0
 8102736:	d001      	beq.n	810273c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8102738:	f000 fa3e 	bl	8102bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810273c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8102740:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8102742:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8102746:	4619      	mov	r1, r3
 8102748:	4831      	ldr	r0, [pc, #196]	@ (8102810 <MX_TIM1_Init+0x150>)
 810274a:	f007 f917 	bl	810997c <HAL_TIM_ConfigClockSource>
 810274e:	4603      	mov	r3, r0
 8102750:	2b00      	cmp	r3, #0
 8102752:	d001      	beq.n	8102758 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8102754:	f000 fa30 	bl	8102bb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8102758:	482d      	ldr	r0, [pc, #180]	@ (8102810 <MX_TIM1_Init+0x150>)
 810275a:	f006 fcdd 	bl	8109118 <HAL_TIM_PWM_Init>
 810275e:	4603      	mov	r3, r0
 8102760:	2b00      	cmp	r3, #0
 8102762:	d001      	beq.n	8102768 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8102764:	f000 fa28 	bl	8102bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102768:	2300      	movs	r3, #0
 810276a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 810276c:	2300      	movs	r3, #0
 810276e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102770:	2300      	movs	r3, #0
 8102772:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8102774:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8102778:	4619      	mov	r1, r3
 810277a:	4825      	ldr	r0, [pc, #148]	@ (8102810 <MX_TIM1_Init+0x150>)
 810277c:	f007 fe5c 	bl	810a438 <HAL_TIMEx_MasterConfigSynchronization>
 8102780:	4603      	mov	r3, r0
 8102782:	2b00      	cmp	r3, #0
 8102784:	d001      	beq.n	810278a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8102786:	f000 fa17 	bl	8102bb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 810278a:	2360      	movs	r3, #96	@ 0x60
 810278c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 810278e:	2300      	movs	r3, #0
 8102790:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102792:	2300      	movs	r3, #0
 8102794:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8102796:	2300      	movs	r3, #0
 8102798:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810279a:	2300      	movs	r3, #0
 810279c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 810279e:	2300      	movs	r3, #0
 81027a0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 81027a2:	2300      	movs	r3, #0
 81027a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81027a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81027aa:	2200      	movs	r2, #0
 81027ac:	4619      	mov	r1, r3
 81027ae:	4818      	ldr	r0, [pc, #96]	@ (8102810 <MX_TIM1_Init+0x150>)
 81027b0:	f006 ffd0 	bl	8109754 <HAL_TIM_PWM_ConfigChannel>
 81027b4:	4603      	mov	r3, r0
 81027b6:	2b00      	cmp	r3, #0
 81027b8:	d001      	beq.n	81027be <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 81027ba:	f000 f9fd 	bl	8102bb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 81027be:	2300      	movs	r3, #0
 81027c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 81027c2:	2300      	movs	r3, #0
 81027c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 81027c6:	2300      	movs	r3, #0
 81027c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 81027ca:	2300      	movs	r3, #0
 81027cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 81027ce:	2300      	movs	r3, #0
 81027d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 81027d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81027d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 81027d8:	2300      	movs	r3, #0
 81027da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 81027dc:	2300      	movs	r3, #0
 81027de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 81027e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81027e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 81027e6:	2300      	movs	r3, #0
 81027e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 81027ea:	2300      	movs	r3, #0
 81027ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 81027ee:	1d3b      	adds	r3, r7, #4
 81027f0:	4619      	mov	r1, r3
 81027f2:	4807      	ldr	r0, [pc, #28]	@ (8102810 <MX_TIM1_Init+0x150>)
 81027f4:	f007 feae 	bl	810a554 <HAL_TIMEx_ConfigBreakDeadTime>
 81027f8:	4603      	mov	r3, r0
 81027fa:	2b00      	cmp	r3, #0
 81027fc:	d001      	beq.n	8102802 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 81027fe:	f000 f9db 	bl	8102bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8102802:	4803      	ldr	r0, [pc, #12]	@ (8102810 <MX_TIM1_Init+0x150>)
 8102804:	f000 fb72 	bl	8102eec <HAL_TIM_MspPostInit>

}
 8102808:	bf00      	nop
 810280a:	3768      	adds	r7, #104	@ 0x68
 810280c:	46bd      	mov	sp, r7
 810280e:	bd80      	pop	{r7, pc}
 8102810:	10000328 	.word	0x10000328
 8102814:	40010000 	.word	0x40010000

08102818 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8102818:	b580      	push	{r7, lr}
 810281a:	b088      	sub	sp, #32
 810281c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810281e:	f107 0310 	add.w	r3, r7, #16
 8102822:	2200      	movs	r2, #0
 8102824:	601a      	str	r2, [r3, #0]
 8102826:	605a      	str	r2, [r3, #4]
 8102828:	609a      	str	r2, [r3, #8]
 810282a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810282c:	1d3b      	adds	r3, r7, #4
 810282e:	2200      	movs	r2, #0
 8102830:	601a      	str	r2, [r3, #0]
 8102832:	605a      	str	r2, [r3, #4]
 8102834:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8102836:	4b1e      	ldr	r3, [pc, #120]	@ (81028b0 <MX_TIM2_Init+0x98>)
 8102838:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 810283c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 810283e:	4b1c      	ldr	r3, [pc, #112]	@ (81028b0 <MX_TIM2_Init+0x98>)
 8102840:	22c7      	movs	r2, #199	@ 0xc7
 8102842:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102844:	4b1a      	ldr	r3, [pc, #104]	@ (81028b0 <MX_TIM2_Init+0x98>)
 8102846:	2200      	movs	r2, #0
 8102848:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 810284a:	4b19      	ldr	r3, [pc, #100]	@ (81028b0 <MX_TIM2_Init+0x98>)
 810284c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8102850:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102852:	4b17      	ldr	r3, [pc, #92]	@ (81028b0 <MX_TIM2_Init+0x98>)
 8102854:	2200      	movs	r2, #0
 8102856:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102858:	4b15      	ldr	r3, [pc, #84]	@ (81028b0 <MX_TIM2_Init+0x98>)
 810285a:	2200      	movs	r2, #0
 810285c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 810285e:	4814      	ldr	r0, [pc, #80]	@ (81028b0 <MX_TIM2_Init+0x98>)
 8102860:	f006 fb8a 	bl	8108f78 <HAL_TIM_Base_Init>
 8102864:	4603      	mov	r3, r0
 8102866:	2b00      	cmp	r3, #0
 8102868:	d001      	beq.n	810286e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 810286a:	f000 f9a5 	bl	8102bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810286e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8102872:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8102874:	f107 0310 	add.w	r3, r7, #16
 8102878:	4619      	mov	r1, r3
 810287a:	480d      	ldr	r0, [pc, #52]	@ (81028b0 <MX_TIM2_Init+0x98>)
 810287c:	f007 f87e 	bl	810997c <HAL_TIM_ConfigClockSource>
 8102880:	4603      	mov	r3, r0
 8102882:	2b00      	cmp	r3, #0
 8102884:	d001      	beq.n	810288a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8102886:	f000 f997 	bl	8102bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810288a:	2300      	movs	r3, #0
 810288c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810288e:	2300      	movs	r3, #0
 8102890:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8102892:	1d3b      	adds	r3, r7, #4
 8102894:	4619      	mov	r1, r3
 8102896:	4806      	ldr	r0, [pc, #24]	@ (81028b0 <MX_TIM2_Init+0x98>)
 8102898:	f007 fdce 	bl	810a438 <HAL_TIMEx_MasterConfigSynchronization>
 810289c:	4603      	mov	r3, r0
 810289e:	2b00      	cmp	r3, #0
 81028a0:	d001      	beq.n	81028a6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 81028a2:	f000 f989 	bl	8102bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 81028a6:	bf00      	nop
 81028a8:	3720      	adds	r7, #32
 81028aa:	46bd      	mov	sp, r7
 81028ac:	bd80      	pop	{r7, pc}
 81028ae:	bf00      	nop
 81028b0:	10000374 	.word	0x10000374

081028b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 81028b4:	b580      	push	{r7, lr}
 81028b6:	b08e      	sub	sp, #56	@ 0x38
 81028b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81028ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81028be:	2200      	movs	r2, #0
 81028c0:	601a      	str	r2, [r3, #0]
 81028c2:	605a      	str	r2, [r3, #4]
 81028c4:	609a      	str	r2, [r3, #8]
 81028c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81028c8:	f107 031c 	add.w	r3, r7, #28
 81028cc:	2200      	movs	r2, #0
 81028ce:	601a      	str	r2, [r3, #0]
 81028d0:	605a      	str	r2, [r3, #4]
 81028d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81028d4:	463b      	mov	r3, r7
 81028d6:	2200      	movs	r2, #0
 81028d8:	601a      	str	r2, [r3, #0]
 81028da:	605a      	str	r2, [r3, #4]
 81028dc:	609a      	str	r2, [r3, #8]
 81028de:	60da      	str	r2, [r3, #12]
 81028e0:	611a      	str	r2, [r3, #16]
 81028e2:	615a      	str	r2, [r3, #20]
 81028e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 81028e6:	4b2d      	ldr	r3, [pc, #180]	@ (810299c <MX_TIM3_Init+0xe8>)
 81028e8:	4a2d      	ldr	r2, [pc, #180]	@ (81029a0 <MX_TIM3_Init+0xec>)
 81028ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 81028ec:	4b2b      	ldr	r3, [pc, #172]	@ (810299c <MX_TIM3_Init+0xe8>)
 81028ee:	22c7      	movs	r2, #199	@ 0xc7
 81028f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81028f2:	4b2a      	ldr	r3, [pc, #168]	@ (810299c <MX_TIM3_Init+0xe8>)
 81028f4:	2200      	movs	r2, #0
 81028f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 81028f8:	4b28      	ldr	r3, [pc, #160]	@ (810299c <MX_TIM3_Init+0xe8>)
 81028fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 81028fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102900:	4b26      	ldr	r3, [pc, #152]	@ (810299c <MX_TIM3_Init+0xe8>)
 8102902:	2200      	movs	r2, #0
 8102904:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102906:	4b25      	ldr	r3, [pc, #148]	@ (810299c <MX_TIM3_Init+0xe8>)
 8102908:	2200      	movs	r2, #0
 810290a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 810290c:	4823      	ldr	r0, [pc, #140]	@ (810299c <MX_TIM3_Init+0xe8>)
 810290e:	f006 fb33 	bl	8108f78 <HAL_TIM_Base_Init>
 8102912:	4603      	mov	r3, r0
 8102914:	2b00      	cmp	r3, #0
 8102916:	d001      	beq.n	810291c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8102918:	f000 f94e 	bl	8102bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810291c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8102920:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8102922:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8102926:	4619      	mov	r1, r3
 8102928:	481c      	ldr	r0, [pc, #112]	@ (810299c <MX_TIM3_Init+0xe8>)
 810292a:	f007 f827 	bl	810997c <HAL_TIM_ConfigClockSource>
 810292e:	4603      	mov	r3, r0
 8102930:	2b00      	cmp	r3, #0
 8102932:	d001      	beq.n	8102938 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8102934:	f000 f940 	bl	8102bb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8102938:	4818      	ldr	r0, [pc, #96]	@ (810299c <MX_TIM3_Init+0xe8>)
 810293a:	f006 fbed 	bl	8109118 <HAL_TIM_PWM_Init>
 810293e:	4603      	mov	r3, r0
 8102940:	2b00      	cmp	r3, #0
 8102942:	d001      	beq.n	8102948 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8102944:	f000 f938 	bl	8102bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102948:	2300      	movs	r3, #0
 810294a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810294c:	2300      	movs	r3, #0
 810294e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8102950:	f107 031c 	add.w	r3, r7, #28
 8102954:	4619      	mov	r1, r3
 8102956:	4811      	ldr	r0, [pc, #68]	@ (810299c <MX_TIM3_Init+0xe8>)
 8102958:	f007 fd6e 	bl	810a438 <HAL_TIMEx_MasterConfigSynchronization>
 810295c:	4603      	mov	r3, r0
 810295e:	2b00      	cmp	r3, #0
 8102960:	d001      	beq.n	8102966 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8102962:	f000 f929 	bl	8102bb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8102966:	2360      	movs	r3, #96	@ 0x60
 8102968:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 810296a:	2300      	movs	r3, #0
 810296c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 810296e:	2300      	movs	r3, #0
 8102970:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8102972:	2300      	movs	r3, #0
 8102974:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8102976:	463b      	mov	r3, r7
 8102978:	2200      	movs	r2, #0
 810297a:	4619      	mov	r1, r3
 810297c:	4807      	ldr	r0, [pc, #28]	@ (810299c <MX_TIM3_Init+0xe8>)
 810297e:	f006 fee9 	bl	8109754 <HAL_TIM_PWM_ConfigChannel>
 8102982:	4603      	mov	r3, r0
 8102984:	2b00      	cmp	r3, #0
 8102986:	d001      	beq.n	810298c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8102988:	f000 f916 	bl	8102bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 810298c:	4803      	ldr	r0, [pc, #12]	@ (810299c <MX_TIM3_Init+0xe8>)
 810298e:	f000 faad 	bl	8102eec <HAL_TIM_MspPostInit>

}
 8102992:	bf00      	nop
 8102994:	3738      	adds	r7, #56	@ 0x38
 8102996:	46bd      	mov	sp, r7
 8102998:	bd80      	pop	{r7, pc}
 810299a:	bf00      	nop
 810299c:	100003c0 	.word	0x100003c0
 81029a0:	40000400 	.word	0x40000400

081029a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 81029a4:	b580      	push	{r7, lr}
 81029a6:	b08c      	sub	sp, #48	@ 0x30
 81029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 81029aa:	f107 030c 	add.w	r3, r7, #12
 81029ae:	2224      	movs	r2, #36	@ 0x24
 81029b0:	2100      	movs	r1, #0
 81029b2:	4618      	mov	r0, r3
 81029b4:	f00a fc0a 	bl	810d1cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81029b8:	463b      	mov	r3, r7
 81029ba:	2200      	movs	r2, #0
 81029bc:	601a      	str	r2, [r3, #0]
 81029be:	605a      	str	r2, [r3, #4]
 81029c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 81029c2:	4b21      	ldr	r3, [pc, #132]	@ (8102a48 <MX_TIM4_Init+0xa4>)
 81029c4:	4a21      	ldr	r2, [pc, #132]	@ (8102a4c <MX_TIM4_Init+0xa8>)
 81029c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 81029c8:	4b1f      	ldr	r3, [pc, #124]	@ (8102a48 <MX_TIM4_Init+0xa4>)
 81029ca:	2200      	movs	r2, #0
 81029cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 81029ce:	4b1e      	ldr	r3, [pc, #120]	@ (8102a48 <MX_TIM4_Init+0xa4>)
 81029d0:	2200      	movs	r2, #0
 81029d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3423-1;
 81029d4:	4b1c      	ldr	r3, [pc, #112]	@ (8102a48 <MX_TIM4_Init+0xa4>)
 81029d6:	f640 525e 	movw	r2, #3422	@ 0xd5e
 81029da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81029dc:	4b1a      	ldr	r3, [pc, #104]	@ (8102a48 <MX_TIM4_Init+0xa4>)
 81029de:	2200      	movs	r2, #0
 81029e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81029e2:	4b19      	ldr	r3, [pc, #100]	@ (8102a48 <MX_TIM4_Init+0xa4>)
 81029e4:	2200      	movs	r2, #0
 81029e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 81029e8:	2301      	movs	r3, #1
 81029ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 81029ec:	2300      	movs	r3, #0
 81029ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 81029f0:	2301      	movs	r3, #1
 81029f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 81029f4:	2300      	movs	r3, #0
 81029f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 81029f8:	2300      	movs	r3, #0
 81029fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 81029fc:	2300      	movs	r3, #0
 81029fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8102a00:	2301      	movs	r3, #1
 8102a02:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8102a04:	2300      	movs	r3, #0
 8102a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8102a08:	2300      	movs	r3, #0
 8102a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8102a0c:	f107 030c 	add.w	r3, r7, #12
 8102a10:	4619      	mov	r1, r3
 8102a12:	480d      	ldr	r0, [pc, #52]	@ (8102a48 <MX_TIM4_Init+0xa4>)
 8102a14:	f006 fcf0 	bl	81093f8 <HAL_TIM_Encoder_Init>
 8102a18:	4603      	mov	r3, r0
 8102a1a:	2b00      	cmp	r3, #0
 8102a1c:	d001      	beq.n	8102a22 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8102a1e:	f000 f8cb 	bl	8102bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102a22:	2300      	movs	r3, #0
 8102a24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102a26:	2300      	movs	r3, #0
 8102a28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8102a2a:	463b      	mov	r3, r7
 8102a2c:	4619      	mov	r1, r3
 8102a2e:	4806      	ldr	r0, [pc, #24]	@ (8102a48 <MX_TIM4_Init+0xa4>)
 8102a30:	f007 fd02 	bl	810a438 <HAL_TIMEx_MasterConfigSynchronization>
 8102a34:	4603      	mov	r3, r0
 8102a36:	2b00      	cmp	r3, #0
 8102a38:	d001      	beq.n	8102a3e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8102a3a:	f000 f8bd 	bl	8102bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8102a3e:	bf00      	nop
 8102a40:	3730      	adds	r7, #48	@ 0x30
 8102a42:	46bd      	mov	sp, r7
 8102a44:	bd80      	pop	{r7, pc}
 8102a46:	bf00      	nop
 8102a48:	1000040c 	.word	0x1000040c
 8102a4c:	40000800 	.word	0x40000800

08102a50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8102a50:	b580      	push	{r7, lr}
 8102a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8102a54:	4b22      	ldr	r3, [pc, #136]	@ (8102ae0 <MX_USART3_UART_Init+0x90>)
 8102a56:	4a23      	ldr	r2, [pc, #140]	@ (8102ae4 <MX_USART3_UART_Init+0x94>)
 8102a58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8102a5a:	4b21      	ldr	r3, [pc, #132]	@ (8102ae0 <MX_USART3_UART_Init+0x90>)
 8102a5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8102a60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8102a62:	4b1f      	ldr	r3, [pc, #124]	@ (8102ae0 <MX_USART3_UART_Init+0x90>)
 8102a64:	2200      	movs	r2, #0
 8102a66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8102a68:	4b1d      	ldr	r3, [pc, #116]	@ (8102ae0 <MX_USART3_UART_Init+0x90>)
 8102a6a:	2200      	movs	r2, #0
 8102a6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8102a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8102ae0 <MX_USART3_UART_Init+0x90>)
 8102a70:	2200      	movs	r2, #0
 8102a72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8102a74:	4b1a      	ldr	r3, [pc, #104]	@ (8102ae0 <MX_USART3_UART_Init+0x90>)
 8102a76:	220c      	movs	r2, #12
 8102a78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8102a7a:	4b19      	ldr	r3, [pc, #100]	@ (8102ae0 <MX_USART3_UART_Init+0x90>)
 8102a7c:	2200      	movs	r2, #0
 8102a7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8102a80:	4b17      	ldr	r3, [pc, #92]	@ (8102ae0 <MX_USART3_UART_Init+0x90>)
 8102a82:	2200      	movs	r2, #0
 8102a84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8102a86:	4b16      	ldr	r3, [pc, #88]	@ (8102ae0 <MX_USART3_UART_Init+0x90>)
 8102a88:	2200      	movs	r2, #0
 8102a8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8102a8c:	4b14      	ldr	r3, [pc, #80]	@ (8102ae0 <MX_USART3_UART_Init+0x90>)
 8102a8e:	2200      	movs	r2, #0
 8102a90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8102a92:	4b13      	ldr	r3, [pc, #76]	@ (8102ae0 <MX_USART3_UART_Init+0x90>)
 8102a94:	2200      	movs	r2, #0
 8102a96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8102a98:	4811      	ldr	r0, [pc, #68]	@ (8102ae0 <MX_USART3_UART_Init+0x90>)
 8102a9a:	f007 fdf7 	bl	810a68c <HAL_UART_Init>
 8102a9e:	4603      	mov	r3, r0
 8102aa0:	2b00      	cmp	r3, #0
 8102aa2:	d001      	beq.n	8102aa8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8102aa4:	f000 f888 	bl	8102bb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102aa8:	2100      	movs	r1, #0
 8102aaa:	480d      	ldr	r0, [pc, #52]	@ (8102ae0 <MX_USART3_UART_Init+0x90>)
 8102aac:	f008 ff54 	bl	810b958 <HAL_UARTEx_SetTxFifoThreshold>
 8102ab0:	4603      	mov	r3, r0
 8102ab2:	2b00      	cmp	r3, #0
 8102ab4:	d001      	beq.n	8102aba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8102ab6:	f000 f87f 	bl	8102bb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102aba:	2100      	movs	r1, #0
 8102abc:	4808      	ldr	r0, [pc, #32]	@ (8102ae0 <MX_USART3_UART_Init+0x90>)
 8102abe:	f008 ff89 	bl	810b9d4 <HAL_UARTEx_SetRxFifoThreshold>
 8102ac2:	4603      	mov	r3, r0
 8102ac4:	2b00      	cmp	r3, #0
 8102ac6:	d001      	beq.n	8102acc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8102ac8:	f000 f876 	bl	8102bb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102acc:	4804      	ldr	r0, [pc, #16]	@ (8102ae0 <MX_USART3_UART_Init+0x90>)
 8102ace:	f008 ff0a 	bl	810b8e6 <HAL_UARTEx_DisableFifoMode>
 8102ad2:	4603      	mov	r3, r0
 8102ad4:	2b00      	cmp	r3, #0
 8102ad6:	d001      	beq.n	8102adc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8102ad8:	f000 f86e 	bl	8102bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102adc:	bf00      	nop
 8102ade:	bd80      	pop	{r7, pc}
 8102ae0:	10000458 	.word	0x10000458
 8102ae4:	40004800 	.word	0x40004800

08102ae8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//******************
//INTERRUPT PA3 SENSORE DATA READY
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8102ae8:	b480      	push	{r7}
 8102aea:	b083      	sub	sp, #12
 8102aec:	af00      	add	r7, sp, #0
 8102aee:	4603      	mov	r3, r0
 8102af0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 8102af2:	88fb      	ldrh	r3, [r7, #6]
 8102af4:	2b08      	cmp	r3, #8
 8102af6:	d102      	bne.n	8102afe <HAL_GPIO_EXTI_Callback+0x16>
		flag_BNO055_Data_Ready = 1;
 8102af8:	4b04      	ldr	r3, [pc, #16]	@ (8102b0c <HAL_GPIO_EXTI_Callback+0x24>)
 8102afa:	2201      	movs	r2, #1
 8102afc:	601a      	str	r2, [r3, #0]
	}
}
 8102afe:	bf00      	nop
 8102b00:	370c      	adds	r7, #12
 8102b02:	46bd      	mov	sp, r7
 8102b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b08:	4770      	bx	lr
 8102b0a:	bf00      	nop
 8102b0c:	1000056c 	.word	0x1000056c

08102b10 <HAL_TIM_PeriodElapsedCallback>:
//******************

//******************
//FUNZIONE DI CALLBACK PER IL TIMER 2
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8102b10:	b480      	push	{r7}
 8102b12:	b083      	sub	sp, #12
 8102b14:	af00      	add	r7, sp, #0
 8102b16:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8102b18:	687b      	ldr	r3, [r7, #4]
 8102b1a:	4a0d      	ldr	r2, [pc, #52]	@ (8102b50 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8102b1c:	4293      	cmp	r3, r2
 8102b1e:	d111      	bne.n	8102b44 <HAL_TIM_PeriodElapsedCallback+0x34>
		flag_Tc = 1; //Flag che permette di entrare nel ciclo del while ogni 0.01 secondi
 8102b20:	4b0c      	ldr	r3, [pc, #48]	@ (8102b54 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8102b22:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8102b26:	601a      	str	r2, [r3, #0]
		n_ref++;
 8102b28:	4b0b      	ldr	r3, [pc, #44]	@ (8102b58 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8102b2a:	681b      	ldr	r3, [r3, #0]
 8102b2c:	3301      	adds	r3, #1
 8102b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8102b58 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8102b30:	6013      	str	r3, [r2, #0]

		if (n_ref > 100 * 50)
 8102b32:	4b09      	ldr	r3, [pc, #36]	@ (8102b58 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8102b34:	681b      	ldr	r3, [r3, #0]
 8102b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8102b3a:	4293      	cmp	r3, r2
 8102b3c:	dd02      	ble.n	8102b44 <HAL_TIM_PeriodElapsedCallback+0x34>
			n_ref = 0;
 8102b3e:	4b06      	ldr	r3, [pc, #24]	@ (8102b58 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8102b40:	2200      	movs	r2, #0
 8102b42:	601a      	str	r2, [r3, #0]

	}
}
 8102b44:	bf00      	nop
 8102b46:	370c      	adds	r7, #12
 8102b48:	46bd      	mov	sp, r7
 8102b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b4e:	4770      	bx	lr
 8102b50:	10000374 	.word	0x10000374
 8102b54:	10000570 	.word	0x10000570
 8102b58:	100005d8 	.word	0x100005d8

08102b5c <__io_putchar>:
//*******************

//******************
//INPUT E OUTPUT USART
int __io_putchar(int ch) {
 8102b5c:	b580      	push	{r7, lr}
 8102b5e:	b082      	sub	sp, #8
 8102b60:	af00      	add	r7, sp, #0
 8102b62:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8102b64:	1d39      	adds	r1, r7, #4
 8102b66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8102b6a:	2201      	movs	r2, #1
 8102b6c:	4803      	ldr	r0, [pc, #12]	@ (8102b7c <__io_putchar+0x20>)
 8102b6e:	f007 fddd 	bl	810a72c <HAL_UART_Transmit>
	return ch;
 8102b72:	687b      	ldr	r3, [r7, #4]
}
 8102b74:	4618      	mov	r0, r3
 8102b76:	3708      	adds	r7, #8
 8102b78:	46bd      	mov	sp, r7
 8102b7a:	bd80      	pop	{r7, pc}
 8102b7c:	10000458 	.word	0x10000458

08102b80 <__io_getchar>:
int __io_getchar(void) {
 8102b80:	b580      	push	{r7, lr}
 8102b82:	b082      	sub	sp, #8
 8102b84:	af00      	add	r7, sp, #0
	uint8_t ch;
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8102b86:	4b0b      	ldr	r3, [pc, #44]	@ (8102bb4 <__io_getchar+0x34>)
 8102b88:	681b      	ldr	r3, [r3, #0]
 8102b8a:	2208      	movs	r2, #8
 8102b8c:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8102b8e:	1df9      	adds	r1, r7, #7
 8102b90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8102b94:	2201      	movs	r2, #1
 8102b96:	4807      	ldr	r0, [pc, #28]	@ (8102bb4 <__io_getchar+0x34>)
 8102b98:	f007 fe56 	bl	810a848 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8102b9c:	1df9      	adds	r1, r7, #7
 8102b9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8102ba2:	2201      	movs	r2, #1
 8102ba4:	4803      	ldr	r0, [pc, #12]	@ (8102bb4 <__io_getchar+0x34>)
 8102ba6:	f007 fdc1 	bl	810a72c <HAL_UART_Transmit>
	return ch;
 8102baa:	79fb      	ldrb	r3, [r7, #7]
}
 8102bac:	4618      	mov	r0, r3
 8102bae:	3708      	adds	r7, #8
 8102bb0:	46bd      	mov	sp, r7
 8102bb2:	bd80      	pop	{r7, pc}
 8102bb4:	10000458 	.word	0x10000458

08102bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102bb8:	b480      	push	{r7}
 8102bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102bbc:	b672      	cpsid	i
}
 8102bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8102bc0:	bf00      	nop
 8102bc2:	e7fd      	b.n	8102bc0 <Error_Handler+0x8>

08102bc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102bc4:	b480      	push	{r7}
 8102bc6:	b083      	sub	sp, #12
 8102bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102bca:	4b0a      	ldr	r3, [pc, #40]	@ (8102bf4 <HAL_MspInit+0x30>)
 8102bcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102bd0:	4a08      	ldr	r2, [pc, #32]	@ (8102bf4 <HAL_MspInit+0x30>)
 8102bd2:	f043 0302 	orr.w	r3, r3, #2
 8102bd6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102bda:	4b06      	ldr	r3, [pc, #24]	@ (8102bf4 <HAL_MspInit+0x30>)
 8102bdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102be0:	f003 0302 	and.w	r3, r3, #2
 8102be4:	607b      	str	r3, [r7, #4]
 8102be6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102be8:	bf00      	nop
 8102bea:	370c      	adds	r7, #12
 8102bec:	46bd      	mov	sp, r7
 8102bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bf2:	4770      	bx	lr
 8102bf4:	58024400 	.word	0x58024400

08102bf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8102bf8:	b580      	push	{r7, lr}
 8102bfa:	b0ba      	sub	sp, #232	@ 0xe8
 8102bfc:	af00      	add	r7, sp, #0
 8102bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102c00:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102c04:	2200      	movs	r2, #0
 8102c06:	601a      	str	r2, [r3, #0]
 8102c08:	605a      	str	r2, [r3, #4]
 8102c0a:	609a      	str	r2, [r3, #8]
 8102c0c:	60da      	str	r2, [r3, #12]
 8102c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102c10:	f107 0310 	add.w	r3, r7, #16
 8102c14:	22c0      	movs	r2, #192	@ 0xc0
 8102c16:	2100      	movs	r1, #0
 8102c18:	4618      	mov	r0, r3
 8102c1a:	f00a fad7 	bl	810d1cc <memset>
  if(hadc->Instance==ADC1)
 8102c1e:	687b      	ldr	r3, [r7, #4]
 8102c20:	681b      	ldr	r3, [r3, #0]
 8102c22:	4a2c      	ldr	r2, [pc, #176]	@ (8102cd4 <HAL_ADC_MspInit+0xdc>)
 8102c24:	4293      	cmp	r3, r2
 8102c26:	d151      	bne.n	8102ccc <HAL_ADC_MspInit+0xd4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8102c28:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8102c2c:	f04f 0300 	mov.w	r3, #0
 8102c30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8102c34:	2301      	movs	r3, #1
 8102c36:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8102c38:	2312      	movs	r3, #18
 8102c3a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8102c3c:	2302      	movs	r3, #2
 8102c3e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8102c40:	2302      	movs	r3, #2
 8102c42:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8102c44:	2302      	movs	r3, #2
 8102c46:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8102c48:	23c0      	movs	r3, #192	@ 0xc0
 8102c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8102c4c:	2320      	movs	r3, #32
 8102c4e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144.0;
 8102c50:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8102c54:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8102c56:	2300      	movs	r3, #0
 8102c58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102c5c:	f107 0310 	add.w	r3, r7, #16
 8102c60:	4618      	mov	r0, r3
 8102c62:	f003 fc8b 	bl	810657c <HAL_RCCEx_PeriphCLKConfig>
 8102c66:	4603      	mov	r3, r0
 8102c68:	2b00      	cmp	r3, #0
 8102c6a:	d001      	beq.n	8102c70 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8102c6c:	f7ff ffa4 	bl	8102bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8102c70:	4b19      	ldr	r3, [pc, #100]	@ (8102cd8 <HAL_ADC_MspInit+0xe0>)
 8102c72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102c76:	4a18      	ldr	r2, [pc, #96]	@ (8102cd8 <HAL_ADC_MspInit+0xe0>)
 8102c78:	f043 0320 	orr.w	r3, r3, #32
 8102c7c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102c80:	4b15      	ldr	r3, [pc, #84]	@ (8102cd8 <HAL_ADC_MspInit+0xe0>)
 8102c82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102c86:	f003 0320 	and.w	r3, r3, #32
 8102c8a:	60fb      	str	r3, [r7, #12]
 8102c8c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8102c8e:	4b12      	ldr	r3, [pc, #72]	@ (8102cd8 <HAL_ADC_MspInit+0xe0>)
 8102c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102c94:	4a10      	ldr	r2, [pc, #64]	@ (8102cd8 <HAL_ADC_MspInit+0xe0>)
 8102c96:	f043 0320 	orr.w	r3, r3, #32
 8102c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8102cd8 <HAL_ADC_MspInit+0xe0>)
 8102ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102ca4:	f003 0320 	and.w	r3, r3, #32
 8102ca8:	60bb      	str	r3, [r7, #8]
 8102caa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8102cac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8102cb0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8102cb4:	2303      	movs	r3, #3
 8102cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102cba:	2300      	movs	r3, #0
 8102cbc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8102cc0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102cc4:	4619      	mov	r1, r3
 8102cc6:	4805      	ldr	r0, [pc, #20]	@ (8102cdc <HAL_ADC_MspInit+0xe4>)
 8102cc8:	f002 fa00 	bl	81050cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8102ccc:	bf00      	nop
 8102cce:	37e8      	adds	r7, #232	@ 0xe8
 8102cd0:	46bd      	mov	sp, r7
 8102cd2:	bd80      	pop	{r7, pc}
 8102cd4:	40022000 	.word	0x40022000
 8102cd8:	58024400 	.word	0x58024400
 8102cdc:	58021400 	.word	0x58021400

08102ce0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8102ce0:	b580      	push	{r7, lr}
 8102ce2:	b0ba      	sub	sp, #232	@ 0xe8
 8102ce4:	af00      	add	r7, sp, #0
 8102ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102ce8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102cec:	2200      	movs	r2, #0
 8102cee:	601a      	str	r2, [r3, #0]
 8102cf0:	605a      	str	r2, [r3, #4]
 8102cf2:	609a      	str	r2, [r3, #8]
 8102cf4:	60da      	str	r2, [r3, #12]
 8102cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102cf8:	f107 0310 	add.w	r3, r7, #16
 8102cfc:	22c0      	movs	r2, #192	@ 0xc0
 8102cfe:	2100      	movs	r1, #0
 8102d00:	4618      	mov	r0, r3
 8102d02:	f00a fa63 	bl	810d1cc <memset>
  if(hi2c->Instance==I2C1)
 8102d06:	687b      	ldr	r3, [r7, #4]
 8102d08:	681b      	ldr	r3, [r3, #0]
 8102d0a:	4a26      	ldr	r2, [pc, #152]	@ (8102da4 <HAL_I2C_MspInit+0xc4>)
 8102d0c:	4293      	cmp	r3, r2
 8102d0e:	d145      	bne.n	8102d9c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8102d10:	f04f 0208 	mov.w	r2, #8
 8102d14:	f04f 0300 	mov.w	r3, #0
 8102d18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8102d1c:	2300      	movs	r3, #0
 8102d1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102d22:	f107 0310 	add.w	r3, r7, #16
 8102d26:	4618      	mov	r0, r3
 8102d28:	f003 fc28 	bl	810657c <HAL_RCCEx_PeriphCLKConfig>
 8102d2c:	4603      	mov	r3, r0
 8102d2e:	2b00      	cmp	r3, #0
 8102d30:	d001      	beq.n	8102d36 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8102d32:	f7ff ff41 	bl	8102bb8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102d36:	4b1c      	ldr	r3, [pc, #112]	@ (8102da8 <HAL_I2C_MspInit+0xc8>)
 8102d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102d3c:	4a1a      	ldr	r2, [pc, #104]	@ (8102da8 <HAL_I2C_MspInit+0xc8>)
 8102d3e:	f043 0302 	orr.w	r3, r3, #2
 8102d42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102d46:	4b18      	ldr	r3, [pc, #96]	@ (8102da8 <HAL_I2C_MspInit+0xc8>)
 8102d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102d4c:	f003 0302 	and.w	r3, r3, #2
 8102d50:	60fb      	str	r3, [r7, #12]
 8102d52:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8102d54:	23c0      	movs	r3, #192	@ 0xc0
 8102d56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8102d5a:	2312      	movs	r3, #18
 8102d5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102d60:	2300      	movs	r3, #0
 8102d62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102d66:	2300      	movs	r3, #0
 8102d68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8102d6c:	2304      	movs	r3, #4
 8102d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102d72:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102d76:	4619      	mov	r1, r3
 8102d78:	480c      	ldr	r0, [pc, #48]	@ (8102dac <HAL_I2C_MspInit+0xcc>)
 8102d7a:	f002 f9a7 	bl	81050cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8102d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8102da8 <HAL_I2C_MspInit+0xc8>)
 8102d80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102d84:	4a08      	ldr	r2, [pc, #32]	@ (8102da8 <HAL_I2C_MspInit+0xc8>)
 8102d86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8102d8a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102d8e:	4b06      	ldr	r3, [pc, #24]	@ (8102da8 <HAL_I2C_MspInit+0xc8>)
 8102d90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102d94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8102d98:	60bb      	str	r3, [r7, #8]
 8102d9a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8102d9c:	bf00      	nop
 8102d9e:	37e8      	adds	r7, #232	@ 0xe8
 8102da0:	46bd      	mov	sp, r7
 8102da2:	bd80      	pop	{r7, pc}
 8102da4:	40005400 	.word	0x40005400
 8102da8:	58024400 	.word	0x58024400
 8102dac:	58020400 	.word	0x58020400

08102db0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8102db0:	b580      	push	{r7, lr}
 8102db2:	b086      	sub	sp, #24
 8102db4:	af00      	add	r7, sp, #0
 8102db6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8102db8:	687b      	ldr	r3, [r7, #4]
 8102dba:	681b      	ldr	r3, [r3, #0]
 8102dbc:	4a23      	ldr	r2, [pc, #140]	@ (8102e4c <HAL_TIM_Base_MspInit+0x9c>)
 8102dbe:	4293      	cmp	r3, r2
 8102dc0:	d10f      	bne.n	8102de2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8102dc2:	4b23      	ldr	r3, [pc, #140]	@ (8102e50 <HAL_TIM_Base_MspInit+0xa0>)
 8102dc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102dc8:	4a21      	ldr	r2, [pc, #132]	@ (8102e50 <HAL_TIM_Base_MspInit+0xa0>)
 8102dca:	f043 0301 	orr.w	r3, r3, #1
 8102dce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8102dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8102e50 <HAL_TIM_Base_MspInit+0xa0>)
 8102dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102dd8:	f003 0301 	and.w	r3, r3, #1
 8102ddc:	617b      	str	r3, [r7, #20]
 8102dde:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8102de0:	e030      	b.n	8102e44 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 8102de2:	687b      	ldr	r3, [r7, #4]
 8102de4:	681b      	ldr	r3, [r3, #0]
 8102de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102dea:	d117      	bne.n	8102e1c <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8102dec:	4b18      	ldr	r3, [pc, #96]	@ (8102e50 <HAL_TIM_Base_MspInit+0xa0>)
 8102dee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102df2:	4a17      	ldr	r2, [pc, #92]	@ (8102e50 <HAL_TIM_Base_MspInit+0xa0>)
 8102df4:	f043 0301 	orr.w	r3, r3, #1
 8102df8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102dfc:	4b14      	ldr	r3, [pc, #80]	@ (8102e50 <HAL_TIM_Base_MspInit+0xa0>)
 8102dfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102e02:	f003 0301 	and.w	r3, r3, #1
 8102e06:	613b      	str	r3, [r7, #16]
 8102e08:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8102e0a:	2200      	movs	r2, #0
 8102e0c:	2100      	movs	r1, #0
 8102e0e:	201c      	movs	r0, #28
 8102e10:	f002 f913 	bl	810503a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8102e14:	201c      	movs	r0, #28
 8102e16:	f002 f92a 	bl	810506e <HAL_NVIC_EnableIRQ>
}
 8102e1a:	e013      	b.n	8102e44 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM3)
 8102e1c:	687b      	ldr	r3, [r7, #4]
 8102e1e:	681b      	ldr	r3, [r3, #0]
 8102e20:	4a0c      	ldr	r2, [pc, #48]	@ (8102e54 <HAL_TIM_Base_MspInit+0xa4>)
 8102e22:	4293      	cmp	r3, r2
 8102e24:	d10e      	bne.n	8102e44 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8102e26:	4b0a      	ldr	r3, [pc, #40]	@ (8102e50 <HAL_TIM_Base_MspInit+0xa0>)
 8102e28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102e2c:	4a08      	ldr	r2, [pc, #32]	@ (8102e50 <HAL_TIM_Base_MspInit+0xa0>)
 8102e2e:	f043 0302 	orr.w	r3, r3, #2
 8102e32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102e36:	4b06      	ldr	r3, [pc, #24]	@ (8102e50 <HAL_TIM_Base_MspInit+0xa0>)
 8102e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102e3c:	f003 0302 	and.w	r3, r3, #2
 8102e40:	60fb      	str	r3, [r7, #12]
 8102e42:	68fb      	ldr	r3, [r7, #12]
}
 8102e44:	bf00      	nop
 8102e46:	3718      	adds	r7, #24
 8102e48:	46bd      	mov	sp, r7
 8102e4a:	bd80      	pop	{r7, pc}
 8102e4c:	40010000 	.word	0x40010000
 8102e50:	58024400 	.word	0x58024400
 8102e54:	40000400 	.word	0x40000400

08102e58 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8102e58:	b580      	push	{r7, lr}
 8102e5a:	b08a      	sub	sp, #40	@ 0x28
 8102e5c:	af00      	add	r7, sp, #0
 8102e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102e60:	f107 0314 	add.w	r3, r7, #20
 8102e64:	2200      	movs	r2, #0
 8102e66:	601a      	str	r2, [r3, #0]
 8102e68:	605a      	str	r2, [r3, #4]
 8102e6a:	609a      	str	r2, [r3, #8]
 8102e6c:	60da      	str	r2, [r3, #12]
 8102e6e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8102e70:	687b      	ldr	r3, [r7, #4]
 8102e72:	681b      	ldr	r3, [r3, #0]
 8102e74:	4a1a      	ldr	r2, [pc, #104]	@ (8102ee0 <HAL_TIM_Encoder_MspInit+0x88>)
 8102e76:	4293      	cmp	r3, r2
 8102e78:	d12e      	bne.n	8102ed8 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8102e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8102ee4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102e7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102e80:	4a18      	ldr	r2, [pc, #96]	@ (8102ee4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102e82:	f043 0304 	orr.w	r3, r3, #4
 8102e86:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102e8a:	4b16      	ldr	r3, [pc, #88]	@ (8102ee4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102e8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102e90:	f003 0304 	and.w	r3, r3, #4
 8102e94:	613b      	str	r3, [r7, #16]
 8102e96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102e98:	4b12      	ldr	r3, [pc, #72]	@ (8102ee4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102e9e:	4a11      	ldr	r2, [pc, #68]	@ (8102ee4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102ea0:	f043 0308 	orr.w	r3, r3, #8
 8102ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8102ee4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102eae:	f003 0308 	and.w	r3, r3, #8
 8102eb2:	60fb      	str	r3, [r7, #12]
 8102eb4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8102eb6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8102eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102ebc:	2302      	movs	r3, #2
 8102ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102ec0:	2300      	movs	r3, #0
 8102ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102ec4:	2300      	movs	r3, #0
 8102ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8102ec8:	2302      	movs	r3, #2
 8102eca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102ecc:	f107 0314 	add.w	r3, r7, #20
 8102ed0:	4619      	mov	r1, r3
 8102ed2:	4805      	ldr	r0, [pc, #20]	@ (8102ee8 <HAL_TIM_Encoder_MspInit+0x90>)
 8102ed4:	f002 f8fa 	bl	81050cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8102ed8:	bf00      	nop
 8102eda:	3728      	adds	r7, #40	@ 0x28
 8102edc:	46bd      	mov	sp, r7
 8102ede:	bd80      	pop	{r7, pc}
 8102ee0:	40000800 	.word	0x40000800
 8102ee4:	58024400 	.word	0x58024400
 8102ee8:	58020c00 	.word	0x58020c00

08102eec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8102eec:	b580      	push	{r7, lr}
 8102eee:	b08a      	sub	sp, #40	@ 0x28
 8102ef0:	af00      	add	r7, sp, #0
 8102ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102ef4:	f107 0314 	add.w	r3, r7, #20
 8102ef8:	2200      	movs	r2, #0
 8102efa:	601a      	str	r2, [r3, #0]
 8102efc:	605a      	str	r2, [r3, #4]
 8102efe:	609a      	str	r2, [r3, #8]
 8102f00:	60da      	str	r2, [r3, #12]
 8102f02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8102f04:	687b      	ldr	r3, [r7, #4]
 8102f06:	681b      	ldr	r3, [r3, #0]
 8102f08:	4a25      	ldr	r2, [pc, #148]	@ (8102fa0 <HAL_TIM_MspPostInit+0xb4>)
 8102f0a:	4293      	cmp	r3, r2
 8102f0c:	d120      	bne.n	8102f50 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8102f0e:	4b25      	ldr	r3, [pc, #148]	@ (8102fa4 <HAL_TIM_MspPostInit+0xb8>)
 8102f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102f14:	4a23      	ldr	r2, [pc, #140]	@ (8102fa4 <HAL_TIM_MspPostInit+0xb8>)
 8102f16:	f043 0310 	orr.w	r3, r3, #16
 8102f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102f1e:	4b21      	ldr	r3, [pc, #132]	@ (8102fa4 <HAL_TIM_MspPostInit+0xb8>)
 8102f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102f24:	f003 0310 	and.w	r3, r3, #16
 8102f28:	613b      	str	r3, [r7, #16]
 8102f2a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8102f2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8102f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102f32:	2302      	movs	r3, #2
 8102f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102f36:	2300      	movs	r3, #0
 8102f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102f3a:	2300      	movs	r3, #0
 8102f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8102f3e:	2301      	movs	r3, #1
 8102f40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8102f42:	f107 0314 	add.w	r3, r7, #20
 8102f46:	4619      	mov	r1, r3
 8102f48:	4817      	ldr	r0, [pc, #92]	@ (8102fa8 <HAL_TIM_MspPostInit+0xbc>)
 8102f4a:	f002 f8bf 	bl	81050cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8102f4e:	e023      	b.n	8102f98 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 8102f50:	687b      	ldr	r3, [r7, #4]
 8102f52:	681b      	ldr	r3, [r3, #0]
 8102f54:	4a15      	ldr	r2, [pc, #84]	@ (8102fac <HAL_TIM_MspPostInit+0xc0>)
 8102f56:	4293      	cmp	r3, r2
 8102f58:	d11e      	bne.n	8102f98 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102f5a:	4b12      	ldr	r3, [pc, #72]	@ (8102fa4 <HAL_TIM_MspPostInit+0xb8>)
 8102f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102f60:	4a10      	ldr	r2, [pc, #64]	@ (8102fa4 <HAL_TIM_MspPostInit+0xb8>)
 8102f62:	f043 0301 	orr.w	r3, r3, #1
 8102f66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8102fa4 <HAL_TIM_MspPostInit+0xb8>)
 8102f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102f70:	f003 0301 	and.w	r3, r3, #1
 8102f74:	60fb      	str	r3, [r7, #12]
 8102f76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8102f78:	2340      	movs	r3, #64	@ 0x40
 8102f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102f7c:	2302      	movs	r3, #2
 8102f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102f80:	2300      	movs	r3, #0
 8102f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102f84:	2300      	movs	r3, #0
 8102f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8102f88:	2302      	movs	r3, #2
 8102f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102f8c:	f107 0314 	add.w	r3, r7, #20
 8102f90:	4619      	mov	r1, r3
 8102f92:	4807      	ldr	r0, [pc, #28]	@ (8102fb0 <HAL_TIM_MspPostInit+0xc4>)
 8102f94:	f002 f89a 	bl	81050cc <HAL_GPIO_Init>
}
 8102f98:	bf00      	nop
 8102f9a:	3728      	adds	r7, #40	@ 0x28
 8102f9c:	46bd      	mov	sp, r7
 8102f9e:	bd80      	pop	{r7, pc}
 8102fa0:	40010000 	.word	0x40010000
 8102fa4:	58024400 	.word	0x58024400
 8102fa8:	58021000 	.word	0x58021000
 8102fac:	40000400 	.word	0x40000400
 8102fb0:	58020000 	.word	0x58020000

08102fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8102fb4:	b580      	push	{r7, lr}
 8102fb6:	b0ba      	sub	sp, #232	@ 0xe8
 8102fb8:	af00      	add	r7, sp, #0
 8102fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102fbc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102fc0:	2200      	movs	r2, #0
 8102fc2:	601a      	str	r2, [r3, #0]
 8102fc4:	605a      	str	r2, [r3, #4]
 8102fc6:	609a      	str	r2, [r3, #8]
 8102fc8:	60da      	str	r2, [r3, #12]
 8102fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102fcc:	f107 0310 	add.w	r3, r7, #16
 8102fd0:	22c0      	movs	r2, #192	@ 0xc0
 8102fd2:	2100      	movs	r1, #0
 8102fd4:	4618      	mov	r0, r3
 8102fd6:	f00a f8f9 	bl	810d1cc <memset>
  if(huart->Instance==USART3)
 8102fda:	687b      	ldr	r3, [r7, #4]
 8102fdc:	681b      	ldr	r3, [r3, #0]
 8102fde:	4a27      	ldr	r2, [pc, #156]	@ (810307c <HAL_UART_MspInit+0xc8>)
 8102fe0:	4293      	cmp	r3, r2
 8102fe2:	d146      	bne.n	8103072 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102fe4:	f04f 0202 	mov.w	r2, #2
 8102fe8:	f04f 0300 	mov.w	r3, #0
 8102fec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102ff0:	2300      	movs	r3, #0
 8102ff2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102ff6:	f107 0310 	add.w	r3, r7, #16
 8102ffa:	4618      	mov	r0, r3
 8102ffc:	f003 fabe 	bl	810657c <HAL_RCCEx_PeriphCLKConfig>
 8103000:	4603      	mov	r3, r0
 8103002:	2b00      	cmp	r3, #0
 8103004:	d001      	beq.n	810300a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8103006:	f7ff fdd7 	bl	8102bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 810300a:	4b1d      	ldr	r3, [pc, #116]	@ (8103080 <HAL_UART_MspInit+0xcc>)
 810300c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103010:	4a1b      	ldr	r2, [pc, #108]	@ (8103080 <HAL_UART_MspInit+0xcc>)
 8103012:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8103016:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810301a:	4b19      	ldr	r3, [pc, #100]	@ (8103080 <HAL_UART_MspInit+0xcc>)
 810301c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103020:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8103024:	60fb      	str	r3, [r7, #12]
 8103026:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8103028:	4b15      	ldr	r3, [pc, #84]	@ (8103080 <HAL_UART_MspInit+0xcc>)
 810302a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810302e:	4a14      	ldr	r2, [pc, #80]	@ (8103080 <HAL_UART_MspInit+0xcc>)
 8103030:	f043 0308 	orr.w	r3, r3, #8
 8103034:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103038:	4b11      	ldr	r3, [pc, #68]	@ (8103080 <HAL_UART_MspInit+0xcc>)
 810303a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810303e:	f003 0308 	and.w	r3, r3, #8
 8103042:	60bb      	str	r3, [r7, #8]
 8103044:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8103046:	f44f 7340 	mov.w	r3, #768	@ 0x300
 810304a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810304e:	2302      	movs	r3, #2
 8103050:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103054:	2300      	movs	r3, #0
 8103056:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810305a:	2300      	movs	r3, #0
 810305c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8103060:	2307      	movs	r3, #7
 8103062:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8103066:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810306a:	4619      	mov	r1, r3
 810306c:	4805      	ldr	r0, [pc, #20]	@ (8103084 <HAL_UART_MspInit+0xd0>)
 810306e:	f002 f82d 	bl	81050cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8103072:	bf00      	nop
 8103074:	37e8      	adds	r7, #232	@ 0xe8
 8103076:	46bd      	mov	sp, r7
 8103078:	bd80      	pop	{r7, pc}
 810307a:	bf00      	nop
 810307c:	40004800 	.word	0x40004800
 8103080:	58024400 	.word	0x58024400
 8103084:	58020c00 	.word	0x58020c00

08103088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8103088:	b480      	push	{r7}
 810308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 810308c:	bf00      	nop
 810308e:	e7fd      	b.n	810308c <NMI_Handler+0x4>

08103090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8103090:	b480      	push	{r7}
 8103092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8103094:	bf00      	nop
 8103096:	e7fd      	b.n	8103094 <HardFault_Handler+0x4>

08103098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8103098:	b480      	push	{r7}
 810309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810309c:	bf00      	nop
 810309e:	e7fd      	b.n	810309c <MemManage_Handler+0x4>

081030a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81030a0:	b480      	push	{r7}
 81030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81030a4:	bf00      	nop
 81030a6:	e7fd      	b.n	81030a4 <BusFault_Handler+0x4>

081030a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81030a8:	b480      	push	{r7}
 81030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81030ac:	bf00      	nop
 81030ae:	e7fd      	b.n	81030ac <UsageFault_Handler+0x4>

081030b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81030b0:	b480      	push	{r7}
 81030b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81030b4:	bf00      	nop
 81030b6:	46bd      	mov	sp, r7
 81030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030bc:	4770      	bx	lr

081030be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81030be:	b480      	push	{r7}
 81030c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81030c2:	bf00      	nop
 81030c4:	46bd      	mov	sp, r7
 81030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030ca:	4770      	bx	lr

081030cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81030cc:	b480      	push	{r7}
 81030ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81030d0:	bf00      	nop
 81030d2:	46bd      	mov	sp, r7
 81030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030d8:	4770      	bx	lr

081030da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81030da:	b580      	push	{r7, lr}
 81030dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81030de:	f000 f999 	bl	8103414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81030e2:	bf00      	nop
 81030e4:	bd80      	pop	{r7, pc}

081030e6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 81030e6:	b580      	push	{r7, lr}
 81030e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 81030ea:	2008      	movs	r0, #8
 81030ec:	f002 f9b7 	bl	810545e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 81030f0:	bf00      	nop
 81030f2:	bd80      	pop	{r7, pc}

081030f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 81030f4:	b580      	push	{r7, lr}
 81030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 81030f8:	4802      	ldr	r0, [pc, #8]	@ (8103104 <TIM2_IRQHandler+0x10>)
 81030fa:	f006 fa23 	bl	8109544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 81030fe:	bf00      	nop
 8103100:	bd80      	pop	{r7, pc}
 8103102:	bf00      	nop
 8103104:	10000374 	.word	0x10000374

08103108 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8103108:	b480      	push	{r7}
 810310a:	af00      	add	r7, sp, #0
  return 1;
 810310c:	2301      	movs	r3, #1
}
 810310e:	4618      	mov	r0, r3
 8103110:	46bd      	mov	sp, r7
 8103112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103116:	4770      	bx	lr

08103118 <_kill>:

int _kill(int pid, int sig)
{
 8103118:	b580      	push	{r7, lr}
 810311a:	b082      	sub	sp, #8
 810311c:	af00      	add	r7, sp, #0
 810311e:	6078      	str	r0, [r7, #4]
 8103120:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8103122:	f00a f8a5 	bl	810d270 <__errno>
 8103126:	4603      	mov	r3, r0
 8103128:	2216      	movs	r2, #22
 810312a:	601a      	str	r2, [r3, #0]
  return -1;
 810312c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8103130:	4618      	mov	r0, r3
 8103132:	3708      	adds	r7, #8
 8103134:	46bd      	mov	sp, r7
 8103136:	bd80      	pop	{r7, pc}

08103138 <_exit>:

void _exit (int status)
{
 8103138:	b580      	push	{r7, lr}
 810313a:	b082      	sub	sp, #8
 810313c:	af00      	add	r7, sp, #0
 810313e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8103140:	f04f 31ff 	mov.w	r1, #4294967295
 8103144:	6878      	ldr	r0, [r7, #4]
 8103146:	f7ff ffe7 	bl	8103118 <_kill>
  while (1) {}    /* Make sure we hang here */
 810314a:	bf00      	nop
 810314c:	e7fd      	b.n	810314a <_exit+0x12>

0810314e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 810314e:	b580      	push	{r7, lr}
 8103150:	b086      	sub	sp, #24
 8103152:	af00      	add	r7, sp, #0
 8103154:	60f8      	str	r0, [r7, #12]
 8103156:	60b9      	str	r1, [r7, #8]
 8103158:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  len=1;
 810315a:	2301      	movs	r3, #1
 810315c:	607b      	str	r3, [r7, #4]

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810315e:	2300      	movs	r3, #0
 8103160:	617b      	str	r3, [r7, #20]
 8103162:	e00a      	b.n	810317a <_read+0x2c>
  {
    *ptr++ = __io_getchar();
 8103164:	f7ff fd0c 	bl	8102b80 <__io_getchar>
 8103168:	4601      	mov	r1, r0
 810316a:	68bb      	ldr	r3, [r7, #8]
 810316c:	1c5a      	adds	r2, r3, #1
 810316e:	60ba      	str	r2, [r7, #8]
 8103170:	b2ca      	uxtb	r2, r1
 8103172:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103174:	697b      	ldr	r3, [r7, #20]
 8103176:	3301      	adds	r3, #1
 8103178:	617b      	str	r3, [r7, #20]
 810317a:	697a      	ldr	r2, [r7, #20]
 810317c:	687b      	ldr	r3, [r7, #4]
 810317e:	429a      	cmp	r2, r3
 8103180:	dbf0      	blt.n	8103164 <_read+0x16>
  }

  return len;
 8103182:	687b      	ldr	r3, [r7, #4]
}
 8103184:	4618      	mov	r0, r3
 8103186:	3718      	adds	r7, #24
 8103188:	46bd      	mov	sp, r7
 810318a:	bd80      	pop	{r7, pc}

0810318c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 810318c:	b580      	push	{r7, lr}
 810318e:	b086      	sub	sp, #24
 8103190:	af00      	add	r7, sp, #0
 8103192:	60f8      	str	r0, [r7, #12]
 8103194:	60b9      	str	r1, [r7, #8]
 8103196:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103198:	2300      	movs	r3, #0
 810319a:	617b      	str	r3, [r7, #20]
 810319c:	e009      	b.n	81031b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 810319e:	68bb      	ldr	r3, [r7, #8]
 81031a0:	1c5a      	adds	r2, r3, #1
 81031a2:	60ba      	str	r2, [r7, #8]
 81031a4:	781b      	ldrb	r3, [r3, #0]
 81031a6:	4618      	mov	r0, r3
 81031a8:	f7ff fcd8 	bl	8102b5c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81031ac:	697b      	ldr	r3, [r7, #20]
 81031ae:	3301      	adds	r3, #1
 81031b0:	617b      	str	r3, [r7, #20]
 81031b2:	697a      	ldr	r2, [r7, #20]
 81031b4:	687b      	ldr	r3, [r7, #4]
 81031b6:	429a      	cmp	r2, r3
 81031b8:	dbf1      	blt.n	810319e <_write+0x12>
  }
  return len;
 81031ba:	687b      	ldr	r3, [r7, #4]
}
 81031bc:	4618      	mov	r0, r3
 81031be:	3718      	adds	r7, #24
 81031c0:	46bd      	mov	sp, r7
 81031c2:	bd80      	pop	{r7, pc}

081031c4 <_close>:

int _close(int file)
{
 81031c4:	b480      	push	{r7}
 81031c6:	b083      	sub	sp, #12
 81031c8:	af00      	add	r7, sp, #0
 81031ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 81031cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 81031d0:	4618      	mov	r0, r3
 81031d2:	370c      	adds	r7, #12
 81031d4:	46bd      	mov	sp, r7
 81031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031da:	4770      	bx	lr

081031dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 81031dc:	b480      	push	{r7}
 81031de:	b083      	sub	sp, #12
 81031e0:	af00      	add	r7, sp, #0
 81031e2:	6078      	str	r0, [r7, #4]
 81031e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 81031e6:	683b      	ldr	r3, [r7, #0]
 81031e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 81031ec:	605a      	str	r2, [r3, #4]
  return 0;
 81031ee:	2300      	movs	r3, #0
}
 81031f0:	4618      	mov	r0, r3
 81031f2:	370c      	adds	r7, #12
 81031f4:	46bd      	mov	sp, r7
 81031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031fa:	4770      	bx	lr

081031fc <_isatty>:

int _isatty(int file)
{
 81031fc:	b480      	push	{r7}
 81031fe:	b083      	sub	sp, #12
 8103200:	af00      	add	r7, sp, #0
 8103202:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8103204:	2301      	movs	r3, #1
}
 8103206:	4618      	mov	r0, r3
 8103208:	370c      	adds	r7, #12
 810320a:	46bd      	mov	sp, r7
 810320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103210:	4770      	bx	lr

08103212 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8103212:	b480      	push	{r7}
 8103214:	b085      	sub	sp, #20
 8103216:	af00      	add	r7, sp, #0
 8103218:	60f8      	str	r0, [r7, #12]
 810321a:	60b9      	str	r1, [r7, #8]
 810321c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 810321e:	2300      	movs	r3, #0
}
 8103220:	4618      	mov	r0, r3
 8103222:	3714      	adds	r7, #20
 8103224:	46bd      	mov	sp, r7
 8103226:	f85d 7b04 	ldr.w	r7, [sp], #4
 810322a:	4770      	bx	lr

0810322c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 810322c:	b580      	push	{r7, lr}
 810322e:	b086      	sub	sp, #24
 8103230:	af00      	add	r7, sp, #0
 8103232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8103234:	4a14      	ldr	r2, [pc, #80]	@ (8103288 <_sbrk+0x5c>)
 8103236:	4b15      	ldr	r3, [pc, #84]	@ (810328c <_sbrk+0x60>)
 8103238:	1ad3      	subs	r3, r2, r3
 810323a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 810323c:	697b      	ldr	r3, [r7, #20]
 810323e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8103240:	4b13      	ldr	r3, [pc, #76]	@ (8103290 <_sbrk+0x64>)
 8103242:	681b      	ldr	r3, [r3, #0]
 8103244:	2b00      	cmp	r3, #0
 8103246:	d102      	bne.n	810324e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8103248:	4b11      	ldr	r3, [pc, #68]	@ (8103290 <_sbrk+0x64>)
 810324a:	4a12      	ldr	r2, [pc, #72]	@ (8103294 <_sbrk+0x68>)
 810324c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810324e:	4b10      	ldr	r3, [pc, #64]	@ (8103290 <_sbrk+0x64>)
 8103250:	681a      	ldr	r2, [r3, #0]
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	4413      	add	r3, r2
 8103256:	693a      	ldr	r2, [r7, #16]
 8103258:	429a      	cmp	r2, r3
 810325a:	d207      	bcs.n	810326c <_sbrk+0x40>
  {
    errno = ENOMEM;
 810325c:	f00a f808 	bl	810d270 <__errno>
 8103260:	4603      	mov	r3, r0
 8103262:	220c      	movs	r2, #12
 8103264:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8103266:	f04f 33ff 	mov.w	r3, #4294967295
 810326a:	e009      	b.n	8103280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 810326c:	4b08      	ldr	r3, [pc, #32]	@ (8103290 <_sbrk+0x64>)
 810326e:	681b      	ldr	r3, [r3, #0]
 8103270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8103272:	4b07      	ldr	r3, [pc, #28]	@ (8103290 <_sbrk+0x64>)
 8103274:	681a      	ldr	r2, [r3, #0]
 8103276:	687b      	ldr	r3, [r7, #4]
 8103278:	4413      	add	r3, r2
 810327a:	4a05      	ldr	r2, [pc, #20]	@ (8103290 <_sbrk+0x64>)
 810327c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810327e:	68fb      	ldr	r3, [r7, #12]
}
 8103280:	4618      	mov	r0, r3
 8103282:	3718      	adds	r7, #24
 8103284:	46bd      	mov	sp, r7
 8103286:	bd80      	pop	{r7, pc}
 8103288:	10048000 	.word	0x10048000
 810328c:	00000400 	.word	0x00000400
 8103290:	10000644 	.word	0x10000644
 8103294:	10000798 	.word	0x10000798

08103298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8103298:	f8df d034 	ldr.w	sp, [pc, #52]	@ 81032d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810329c:	f7fd ff2a 	bl	81010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81032a0:	480c      	ldr	r0, [pc, #48]	@ (81032d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81032a2:	490d      	ldr	r1, [pc, #52]	@ (81032d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81032a4:	4a0d      	ldr	r2, [pc, #52]	@ (81032dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 81032a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81032a8:	e002      	b.n	81032b0 <LoopCopyDataInit>

081032aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81032aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81032ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81032ae:	3304      	adds	r3, #4

081032b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81032b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81032b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81032b4:	d3f9      	bcc.n	81032aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81032b6:	4a0a      	ldr	r2, [pc, #40]	@ (81032e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81032b8:	4c0a      	ldr	r4, [pc, #40]	@ (81032e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 81032ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 81032bc:	e001      	b.n	81032c2 <LoopFillZerobss>

081032be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81032be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81032c0:	3204      	adds	r2, #4

081032c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81032c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81032c4:	d3fb      	bcc.n	81032be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81032c6:	f009 ffd9 	bl	810d27c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81032ca:	f7fe fd85 	bl	8101dd8 <main>
  bx  lr
 81032ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81032d0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81032d4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81032d8:	10000250 	.word	0x10000250
  ldr r2, =_sidata
 81032dc:	081124d8 	.word	0x081124d8
  ldr r2, =_sbss
 81032e0:	10000250 	.word	0x10000250
  ldr r4, =_ebss
 81032e4:	10000798 	.word	0x10000798

081032e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81032e8:	e7fe      	b.n	81032e8 <ADC3_IRQHandler>
	...

081032ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81032ec:	b580      	push	{r7, lr}
 81032ee:	b082      	sub	sp, #8
 81032f0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81032f2:	4b28      	ldr	r3, [pc, #160]	@ (8103394 <HAL_Init+0xa8>)
 81032f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81032f8:	4a26      	ldr	r2, [pc, #152]	@ (8103394 <HAL_Init+0xa8>)
 81032fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81032fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8103302:	4b24      	ldr	r3, [pc, #144]	@ (8103394 <HAL_Init+0xa8>)
 8103304:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103308:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810330c:	603b      	str	r3, [r7, #0]
 810330e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8103310:	4b21      	ldr	r3, [pc, #132]	@ (8103398 <HAL_Init+0xac>)
 8103312:	681b      	ldr	r3, [r3, #0]
 8103314:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8103318:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810331c:	4a1e      	ldr	r2, [pc, #120]	@ (8103398 <HAL_Init+0xac>)
 810331e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8103322:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8103324:	4b1c      	ldr	r3, [pc, #112]	@ (8103398 <HAL_Init+0xac>)
 8103326:	681b      	ldr	r3, [r3, #0]
 8103328:	4a1b      	ldr	r2, [pc, #108]	@ (8103398 <HAL_Init+0xac>)
 810332a:	f043 0301 	orr.w	r3, r3, #1
 810332e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8103330:	2003      	movs	r0, #3
 8103332:	f001 fe77 	bl	8105024 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8103336:	f002 ff49 	bl	81061cc <HAL_RCC_GetSysClockFreq>
 810333a:	4602      	mov	r2, r0
 810333c:	4b15      	ldr	r3, [pc, #84]	@ (8103394 <HAL_Init+0xa8>)
 810333e:	699b      	ldr	r3, [r3, #24]
 8103340:	0a1b      	lsrs	r3, r3, #8
 8103342:	f003 030f 	and.w	r3, r3, #15
 8103346:	4915      	ldr	r1, [pc, #84]	@ (810339c <HAL_Init+0xb0>)
 8103348:	5ccb      	ldrb	r3, [r1, r3]
 810334a:	f003 031f 	and.w	r3, r3, #31
 810334e:	fa22 f303 	lsr.w	r3, r2, r3
 8103352:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103354:	4b0f      	ldr	r3, [pc, #60]	@ (8103394 <HAL_Init+0xa8>)
 8103356:	699b      	ldr	r3, [r3, #24]
 8103358:	f003 030f 	and.w	r3, r3, #15
 810335c:	4a0f      	ldr	r2, [pc, #60]	@ (810339c <HAL_Init+0xb0>)
 810335e:	5cd3      	ldrb	r3, [r2, r3]
 8103360:	f003 031f 	and.w	r3, r3, #31
 8103364:	687a      	ldr	r2, [r7, #4]
 8103366:	fa22 f303 	lsr.w	r3, r2, r3
 810336a:	4a0d      	ldr	r2, [pc, #52]	@ (81033a0 <HAL_Init+0xb4>)
 810336c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810336e:	4b0c      	ldr	r3, [pc, #48]	@ (81033a0 <HAL_Init+0xb4>)
 8103370:	681b      	ldr	r3, [r3, #0]
 8103372:	4a0c      	ldr	r2, [pc, #48]	@ (81033a4 <HAL_Init+0xb8>)
 8103374:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8103376:	2000      	movs	r0, #0
 8103378:	f000 f816 	bl	81033a8 <HAL_InitTick>
 810337c:	4603      	mov	r3, r0
 810337e:	2b00      	cmp	r3, #0
 8103380:	d001      	beq.n	8103386 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8103382:	2301      	movs	r3, #1
 8103384:	e002      	b.n	810338c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8103386:	f7ff fc1d 	bl	8102bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810338a:	2300      	movs	r3, #0
}
 810338c:	4618      	mov	r0, r3
 810338e:	3708      	adds	r7, #8
 8103390:	46bd      	mov	sp, r7
 8103392:	bd80      	pop	{r7, pc}
 8103394:	58024400 	.word	0x58024400
 8103398:	40024400 	.word	0x40024400
 810339c:	08111e8c 	.word	0x08111e8c
 81033a0:	10000004 	.word	0x10000004
 81033a4:	10000000 	.word	0x10000000

081033a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81033a8:	b580      	push	{r7, lr}
 81033aa:	b082      	sub	sp, #8
 81033ac:	af00      	add	r7, sp, #0
 81033ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81033b0:	4b15      	ldr	r3, [pc, #84]	@ (8103408 <HAL_InitTick+0x60>)
 81033b2:	781b      	ldrb	r3, [r3, #0]
 81033b4:	2b00      	cmp	r3, #0
 81033b6:	d101      	bne.n	81033bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81033b8:	2301      	movs	r3, #1
 81033ba:	e021      	b.n	8103400 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81033bc:	4b13      	ldr	r3, [pc, #76]	@ (810340c <HAL_InitTick+0x64>)
 81033be:	681a      	ldr	r2, [r3, #0]
 81033c0:	4b11      	ldr	r3, [pc, #68]	@ (8103408 <HAL_InitTick+0x60>)
 81033c2:	781b      	ldrb	r3, [r3, #0]
 81033c4:	4619      	mov	r1, r3
 81033c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 81033ca:	fbb3 f3f1 	udiv	r3, r3, r1
 81033ce:	fbb2 f3f3 	udiv	r3, r2, r3
 81033d2:	4618      	mov	r0, r3
 81033d4:	f001 fe59 	bl	810508a <HAL_SYSTICK_Config>
 81033d8:	4603      	mov	r3, r0
 81033da:	2b00      	cmp	r3, #0
 81033dc:	d001      	beq.n	81033e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81033de:	2301      	movs	r3, #1
 81033e0:	e00e      	b.n	8103400 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81033e2:	687b      	ldr	r3, [r7, #4]
 81033e4:	2b0f      	cmp	r3, #15
 81033e6:	d80a      	bhi.n	81033fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81033e8:	2200      	movs	r2, #0
 81033ea:	6879      	ldr	r1, [r7, #4]
 81033ec:	f04f 30ff 	mov.w	r0, #4294967295
 81033f0:	f001 fe23 	bl	810503a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81033f4:	4a06      	ldr	r2, [pc, #24]	@ (8103410 <HAL_InitTick+0x68>)
 81033f6:	687b      	ldr	r3, [r7, #4]
 81033f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81033fa:	2300      	movs	r3, #0
 81033fc:	e000      	b.n	8103400 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81033fe:	2301      	movs	r3, #1
}
 8103400:	4618      	mov	r0, r3
 8103402:	3708      	adds	r7, #8
 8103404:	46bd      	mov	sp, r7
 8103406:	bd80      	pop	{r7, pc}
 8103408:	10000084 	.word	0x10000084
 810340c:	10000000 	.word	0x10000000
 8103410:	10000080 	.word	0x10000080

08103414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8103414:	b480      	push	{r7}
 8103416:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8103418:	4b06      	ldr	r3, [pc, #24]	@ (8103434 <HAL_IncTick+0x20>)
 810341a:	781b      	ldrb	r3, [r3, #0]
 810341c:	461a      	mov	r2, r3
 810341e:	4b06      	ldr	r3, [pc, #24]	@ (8103438 <HAL_IncTick+0x24>)
 8103420:	681b      	ldr	r3, [r3, #0]
 8103422:	4413      	add	r3, r2
 8103424:	4a04      	ldr	r2, [pc, #16]	@ (8103438 <HAL_IncTick+0x24>)
 8103426:	6013      	str	r3, [r2, #0]
}
 8103428:	bf00      	nop
 810342a:	46bd      	mov	sp, r7
 810342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103430:	4770      	bx	lr
 8103432:	bf00      	nop
 8103434:	10000084 	.word	0x10000084
 8103438:	10000648 	.word	0x10000648

0810343c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810343c:	b480      	push	{r7}
 810343e:	af00      	add	r7, sp, #0
  return uwTick;
 8103440:	4b03      	ldr	r3, [pc, #12]	@ (8103450 <HAL_GetTick+0x14>)
 8103442:	681b      	ldr	r3, [r3, #0]
}
 8103444:	4618      	mov	r0, r3
 8103446:	46bd      	mov	sp, r7
 8103448:	f85d 7b04 	ldr.w	r7, [sp], #4
 810344c:	4770      	bx	lr
 810344e:	bf00      	nop
 8103450:	10000648 	.word	0x10000648

08103454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8103454:	b580      	push	{r7, lr}
 8103456:	b084      	sub	sp, #16
 8103458:	af00      	add	r7, sp, #0
 810345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810345c:	f7ff ffee 	bl	810343c <HAL_GetTick>
 8103460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8103462:	687b      	ldr	r3, [r7, #4]
 8103464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8103466:	68fb      	ldr	r3, [r7, #12]
 8103468:	f1b3 3fff 	cmp.w	r3, #4294967295
 810346c:	d005      	beq.n	810347a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810346e:	4b0a      	ldr	r3, [pc, #40]	@ (8103498 <HAL_Delay+0x44>)
 8103470:	781b      	ldrb	r3, [r3, #0]
 8103472:	461a      	mov	r2, r3
 8103474:	68fb      	ldr	r3, [r7, #12]
 8103476:	4413      	add	r3, r2
 8103478:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810347a:	bf00      	nop
 810347c:	f7ff ffde 	bl	810343c <HAL_GetTick>
 8103480:	4602      	mov	r2, r0
 8103482:	68bb      	ldr	r3, [r7, #8]
 8103484:	1ad3      	subs	r3, r2, r3
 8103486:	68fa      	ldr	r2, [r7, #12]
 8103488:	429a      	cmp	r2, r3
 810348a:	d8f7      	bhi.n	810347c <HAL_Delay+0x28>
  {
  }
}
 810348c:	bf00      	nop
 810348e:	bf00      	nop
 8103490:	3710      	adds	r7, #16
 8103492:	46bd      	mov	sp, r7
 8103494:	bd80      	pop	{r7, pc}
 8103496:	bf00      	nop
 8103498:	10000084 	.word	0x10000084

0810349c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 810349c:	b480      	push	{r7}
 810349e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 81034a0:	4b03      	ldr	r3, [pc, #12]	@ (81034b0 <HAL_GetREVID+0x14>)
 81034a2:	681b      	ldr	r3, [r3, #0]
 81034a4:	0c1b      	lsrs	r3, r3, #16
}
 81034a6:	4618      	mov	r0, r3
 81034a8:	46bd      	mov	sp, r7
 81034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034ae:	4770      	bx	lr
 81034b0:	5c001000 	.word	0x5c001000

081034b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 81034b4:	b480      	push	{r7}
 81034b6:	b083      	sub	sp, #12
 81034b8:	af00      	add	r7, sp, #0
 81034ba:	6078      	str	r0, [r7, #4]
 81034bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81034be:	687b      	ldr	r3, [r7, #4]
 81034c0:	689b      	ldr	r3, [r3, #8]
 81034c2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 81034c6:	683b      	ldr	r3, [r7, #0]
 81034c8:	431a      	orrs	r2, r3
 81034ca:	687b      	ldr	r3, [r7, #4]
 81034cc:	609a      	str	r2, [r3, #8]
}
 81034ce:	bf00      	nop
 81034d0:	370c      	adds	r7, #12
 81034d2:	46bd      	mov	sp, r7
 81034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034d8:	4770      	bx	lr

081034da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 81034da:	b480      	push	{r7}
 81034dc:	b083      	sub	sp, #12
 81034de:	af00      	add	r7, sp, #0
 81034e0:	6078      	str	r0, [r7, #4]
 81034e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81034e4:	687b      	ldr	r3, [r7, #4]
 81034e6:	689b      	ldr	r3, [r3, #8]
 81034e8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 81034ec:	683b      	ldr	r3, [r7, #0]
 81034ee:	431a      	orrs	r2, r3
 81034f0:	687b      	ldr	r3, [r7, #4]
 81034f2:	609a      	str	r2, [r3, #8]
}
 81034f4:	bf00      	nop
 81034f6:	370c      	adds	r7, #12
 81034f8:	46bd      	mov	sp, r7
 81034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034fe:	4770      	bx	lr

08103500 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8103500:	b480      	push	{r7}
 8103502:	b083      	sub	sp, #12
 8103504:	af00      	add	r7, sp, #0
 8103506:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8103508:	687b      	ldr	r3, [r7, #4]
 810350a:	689b      	ldr	r3, [r3, #8]
 810350c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8103510:	4618      	mov	r0, r3
 8103512:	370c      	adds	r7, #12
 8103514:	46bd      	mov	sp, r7
 8103516:	f85d 7b04 	ldr.w	r7, [sp], #4
 810351a:	4770      	bx	lr

0810351c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 810351c:	b480      	push	{r7}
 810351e:	b087      	sub	sp, #28
 8103520:	af00      	add	r7, sp, #0
 8103522:	60f8      	str	r0, [r7, #12]
 8103524:	60b9      	str	r1, [r7, #8]
 8103526:	607a      	str	r2, [r7, #4]
 8103528:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810352a:	68fb      	ldr	r3, [r7, #12]
 810352c:	3360      	adds	r3, #96	@ 0x60
 810352e:	461a      	mov	r2, r3
 8103530:	68bb      	ldr	r3, [r7, #8]
 8103532:	009b      	lsls	r3, r3, #2
 8103534:	4413      	add	r3, r2
 8103536:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8103538:	697b      	ldr	r3, [r7, #20]
 810353a:	681b      	ldr	r3, [r3, #0]
 810353c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8103546:	683b      	ldr	r3, [r7, #0]
 8103548:	430b      	orrs	r3, r1
 810354a:	431a      	orrs	r2, r3
 810354c:	697b      	ldr	r3, [r7, #20]
 810354e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8103550:	bf00      	nop
 8103552:	371c      	adds	r7, #28
 8103554:	46bd      	mov	sp, r7
 8103556:	f85d 7b04 	ldr.w	r7, [sp], #4
 810355a:	4770      	bx	lr

0810355c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 810355c:	b480      	push	{r7}
 810355e:	b085      	sub	sp, #20
 8103560:	af00      	add	r7, sp, #0
 8103562:	60f8      	str	r0, [r7, #12]
 8103564:	60b9      	str	r1, [r7, #8]
 8103566:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8103568:	68fb      	ldr	r3, [r7, #12]
 810356a:	691b      	ldr	r3, [r3, #16]
 810356c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8103570:	68bb      	ldr	r3, [r7, #8]
 8103572:	f003 031f 	and.w	r3, r3, #31
 8103576:	6879      	ldr	r1, [r7, #4]
 8103578:	fa01 f303 	lsl.w	r3, r1, r3
 810357c:	431a      	orrs	r2, r3
 810357e:	68fb      	ldr	r3, [r7, #12]
 8103580:	611a      	str	r2, [r3, #16]
}
 8103582:	bf00      	nop
 8103584:	3714      	adds	r7, #20
 8103586:	46bd      	mov	sp, r7
 8103588:	f85d 7b04 	ldr.w	r7, [sp], #4
 810358c:	4770      	bx	lr

0810358e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 810358e:	b480      	push	{r7}
 8103590:	b087      	sub	sp, #28
 8103592:	af00      	add	r7, sp, #0
 8103594:	60f8      	str	r0, [r7, #12]
 8103596:	60b9      	str	r1, [r7, #8]
 8103598:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810359a:	68fb      	ldr	r3, [r7, #12]
 810359c:	3360      	adds	r3, #96	@ 0x60
 810359e:	461a      	mov	r2, r3
 81035a0:	68bb      	ldr	r3, [r7, #8]
 81035a2:	009b      	lsls	r3, r3, #2
 81035a4:	4413      	add	r3, r2
 81035a6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 81035a8:	697b      	ldr	r3, [r7, #20]
 81035aa:	681b      	ldr	r3, [r3, #0]
 81035ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 81035b0:	687b      	ldr	r3, [r7, #4]
 81035b2:	431a      	orrs	r2, r3
 81035b4:	697b      	ldr	r3, [r7, #20]
 81035b6:	601a      	str	r2, [r3, #0]
  }
}
 81035b8:	bf00      	nop
 81035ba:	371c      	adds	r7, #28
 81035bc:	46bd      	mov	sp, r7
 81035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035c2:	4770      	bx	lr

081035c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 81035c4:	b480      	push	{r7}
 81035c6:	b083      	sub	sp, #12
 81035c8:	af00      	add	r7, sp, #0
 81035ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 81035cc:	687b      	ldr	r3, [r7, #4]
 81035ce:	68db      	ldr	r3, [r3, #12]
 81035d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 81035d4:	2b00      	cmp	r3, #0
 81035d6:	d101      	bne.n	81035dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 81035d8:	2301      	movs	r3, #1
 81035da:	e000      	b.n	81035de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 81035dc:	2300      	movs	r3, #0
}
 81035de:	4618      	mov	r0, r3
 81035e0:	370c      	adds	r7, #12
 81035e2:	46bd      	mov	sp, r7
 81035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035e8:	4770      	bx	lr

081035ea <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 81035ea:	b480      	push	{r7}
 81035ec:	b087      	sub	sp, #28
 81035ee:	af00      	add	r7, sp, #0
 81035f0:	60f8      	str	r0, [r7, #12]
 81035f2:	60b9      	str	r1, [r7, #8]
 81035f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 81035f6:	68fb      	ldr	r3, [r7, #12]
 81035f8:	3330      	adds	r3, #48	@ 0x30
 81035fa:	461a      	mov	r2, r3
 81035fc:	68bb      	ldr	r3, [r7, #8]
 81035fe:	0a1b      	lsrs	r3, r3, #8
 8103600:	009b      	lsls	r3, r3, #2
 8103602:	f003 030c 	and.w	r3, r3, #12
 8103606:	4413      	add	r3, r2
 8103608:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 810360a:	697b      	ldr	r3, [r7, #20]
 810360c:	681a      	ldr	r2, [r3, #0]
 810360e:	68bb      	ldr	r3, [r7, #8]
 8103610:	f003 031f 	and.w	r3, r3, #31
 8103614:	211f      	movs	r1, #31
 8103616:	fa01 f303 	lsl.w	r3, r1, r3
 810361a:	43db      	mvns	r3, r3
 810361c:	401a      	ands	r2, r3
 810361e:	687b      	ldr	r3, [r7, #4]
 8103620:	0e9b      	lsrs	r3, r3, #26
 8103622:	f003 011f 	and.w	r1, r3, #31
 8103626:	68bb      	ldr	r3, [r7, #8]
 8103628:	f003 031f 	and.w	r3, r3, #31
 810362c:	fa01 f303 	lsl.w	r3, r1, r3
 8103630:	431a      	orrs	r2, r3
 8103632:	697b      	ldr	r3, [r7, #20]
 8103634:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8103636:	bf00      	nop
 8103638:	371c      	adds	r7, #28
 810363a:	46bd      	mov	sp, r7
 810363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103640:	4770      	bx	lr

08103642 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8103642:	b480      	push	{r7}
 8103644:	b087      	sub	sp, #28
 8103646:	af00      	add	r7, sp, #0
 8103648:	60f8      	str	r0, [r7, #12]
 810364a:	60b9      	str	r1, [r7, #8]
 810364c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 810364e:	68fb      	ldr	r3, [r7, #12]
 8103650:	3314      	adds	r3, #20
 8103652:	461a      	mov	r2, r3
 8103654:	68bb      	ldr	r3, [r7, #8]
 8103656:	0e5b      	lsrs	r3, r3, #25
 8103658:	009b      	lsls	r3, r3, #2
 810365a:	f003 0304 	and.w	r3, r3, #4
 810365e:	4413      	add	r3, r2
 8103660:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8103662:	697b      	ldr	r3, [r7, #20]
 8103664:	681a      	ldr	r2, [r3, #0]
 8103666:	68bb      	ldr	r3, [r7, #8]
 8103668:	0d1b      	lsrs	r3, r3, #20
 810366a:	f003 031f 	and.w	r3, r3, #31
 810366e:	2107      	movs	r1, #7
 8103670:	fa01 f303 	lsl.w	r3, r1, r3
 8103674:	43db      	mvns	r3, r3
 8103676:	401a      	ands	r2, r3
 8103678:	68bb      	ldr	r3, [r7, #8]
 810367a:	0d1b      	lsrs	r3, r3, #20
 810367c:	f003 031f 	and.w	r3, r3, #31
 8103680:	6879      	ldr	r1, [r7, #4]
 8103682:	fa01 f303 	lsl.w	r3, r1, r3
 8103686:	431a      	orrs	r2, r3
 8103688:	697b      	ldr	r3, [r7, #20]
 810368a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 810368c:	bf00      	nop
 810368e:	371c      	adds	r7, #28
 8103690:	46bd      	mov	sp, r7
 8103692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103696:	4770      	bx	lr

08103698 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8103698:	b480      	push	{r7}
 810369a:	b085      	sub	sp, #20
 810369c:	af00      	add	r7, sp, #0
 810369e:	60f8      	str	r0, [r7, #12]
 81036a0:	60b9      	str	r1, [r7, #8]
 81036a2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 81036a4:	68fb      	ldr	r3, [r7, #12]
 81036a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 81036aa:	68bb      	ldr	r3, [r7, #8]
 81036ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81036b0:	43db      	mvns	r3, r3
 81036b2:	401a      	ands	r2, r3
 81036b4:	687b      	ldr	r3, [r7, #4]
 81036b6:	f003 0318 	and.w	r3, r3, #24
 81036ba:	4908      	ldr	r1, [pc, #32]	@ (81036dc <LL_ADC_SetChannelSingleDiff+0x44>)
 81036bc:	40d9      	lsrs	r1, r3
 81036be:	68bb      	ldr	r3, [r7, #8]
 81036c0:	400b      	ands	r3, r1
 81036c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81036c6:	431a      	orrs	r2, r3
 81036c8:	68fb      	ldr	r3, [r7, #12]
 81036ca:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 81036ce:	bf00      	nop
 81036d0:	3714      	adds	r7, #20
 81036d2:	46bd      	mov	sp, r7
 81036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036d8:	4770      	bx	lr
 81036da:	bf00      	nop
 81036dc:	000fffff 	.word	0x000fffff

081036e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81036e0:	b480      	push	{r7}
 81036e2:	b083      	sub	sp, #12
 81036e4:	af00      	add	r7, sp, #0
 81036e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 81036e8:	687b      	ldr	r3, [r7, #4]
 81036ea:	689b      	ldr	r3, [r3, #8]
 81036ec:	f003 031f 	and.w	r3, r3, #31
}
 81036f0:	4618      	mov	r0, r3
 81036f2:	370c      	adds	r7, #12
 81036f4:	46bd      	mov	sp, r7
 81036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036fa:	4770      	bx	lr

081036fc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81036fc:	b480      	push	{r7}
 81036fe:	b083      	sub	sp, #12
 8103700:	af00      	add	r7, sp, #0
 8103702:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8103704:	687b      	ldr	r3, [r7, #4]
 8103706:	689b      	ldr	r3, [r3, #8]
 8103708:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 810370c:	4618      	mov	r0, r3
 810370e:	370c      	adds	r7, #12
 8103710:	46bd      	mov	sp, r7
 8103712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103716:	4770      	bx	lr

08103718 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8103718:	b480      	push	{r7}
 810371a:	b083      	sub	sp, #12
 810371c:	af00      	add	r7, sp, #0
 810371e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8103720:	687b      	ldr	r3, [r7, #4]
 8103722:	689b      	ldr	r3, [r3, #8]
 8103724:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8103728:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810372c:	687a      	ldr	r2, [r7, #4]
 810372e:	6093      	str	r3, [r2, #8]
}
 8103730:	bf00      	nop
 8103732:	370c      	adds	r7, #12
 8103734:	46bd      	mov	sp, r7
 8103736:	f85d 7b04 	ldr.w	r7, [sp], #4
 810373a:	4770      	bx	lr

0810373c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 810373c:	b480      	push	{r7}
 810373e:	b083      	sub	sp, #12
 8103740:	af00      	add	r7, sp, #0
 8103742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8103744:	687b      	ldr	r3, [r7, #4]
 8103746:	689b      	ldr	r3, [r3, #8]
 8103748:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810374c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103750:	d101      	bne.n	8103756 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8103752:	2301      	movs	r3, #1
 8103754:	e000      	b.n	8103758 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8103756:	2300      	movs	r3, #0
}
 8103758:	4618      	mov	r0, r3
 810375a:	370c      	adds	r7, #12
 810375c:	46bd      	mov	sp, r7
 810375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103762:	4770      	bx	lr

08103764 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8103764:	b480      	push	{r7}
 8103766:	b083      	sub	sp, #12
 8103768:	af00      	add	r7, sp, #0
 810376a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 810376c:	687b      	ldr	r3, [r7, #4]
 810376e:	689b      	ldr	r3, [r3, #8]
 8103770:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8103774:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8103778:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 810377c:	687b      	ldr	r3, [r7, #4]
 810377e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8103780:	bf00      	nop
 8103782:	370c      	adds	r7, #12
 8103784:	46bd      	mov	sp, r7
 8103786:	f85d 7b04 	ldr.w	r7, [sp], #4
 810378a:	4770      	bx	lr

0810378c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 810378c:	b480      	push	{r7}
 810378e:	b083      	sub	sp, #12
 8103790:	af00      	add	r7, sp, #0
 8103792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8103794:	687b      	ldr	r3, [r7, #4]
 8103796:	689b      	ldr	r3, [r3, #8]
 8103798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810379c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81037a0:	d101      	bne.n	81037a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 81037a2:	2301      	movs	r3, #1
 81037a4:	e000      	b.n	81037a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 81037a6:	2300      	movs	r3, #0
}
 81037a8:	4618      	mov	r0, r3
 81037aa:	370c      	adds	r7, #12
 81037ac:	46bd      	mov	sp, r7
 81037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037b2:	4770      	bx	lr

081037b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 81037b4:	b480      	push	{r7}
 81037b6:	b083      	sub	sp, #12
 81037b8:	af00      	add	r7, sp, #0
 81037ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81037bc:	687b      	ldr	r3, [r7, #4]
 81037be:	689b      	ldr	r3, [r3, #8]
 81037c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81037c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81037c8:	f043 0201 	orr.w	r2, r3, #1
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 81037d0:	bf00      	nop
 81037d2:	370c      	adds	r7, #12
 81037d4:	46bd      	mov	sp, r7
 81037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037da:	4770      	bx	lr

081037dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 81037dc:	b480      	push	{r7}
 81037de:	b083      	sub	sp, #12
 81037e0:	af00      	add	r7, sp, #0
 81037e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81037e4:	687b      	ldr	r3, [r7, #4]
 81037e6:	689b      	ldr	r3, [r3, #8]
 81037e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81037ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81037f0:	f043 0202 	orr.w	r2, r3, #2
 81037f4:	687b      	ldr	r3, [r7, #4]
 81037f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 81037f8:	bf00      	nop
 81037fa:	370c      	adds	r7, #12
 81037fc:	46bd      	mov	sp, r7
 81037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103802:	4770      	bx	lr

08103804 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8103804:	b480      	push	{r7}
 8103806:	b083      	sub	sp, #12
 8103808:	af00      	add	r7, sp, #0
 810380a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 810380c:	687b      	ldr	r3, [r7, #4]
 810380e:	689b      	ldr	r3, [r3, #8]
 8103810:	f003 0301 	and.w	r3, r3, #1
 8103814:	2b01      	cmp	r3, #1
 8103816:	d101      	bne.n	810381c <LL_ADC_IsEnabled+0x18>
 8103818:	2301      	movs	r3, #1
 810381a:	e000      	b.n	810381e <LL_ADC_IsEnabled+0x1a>
 810381c:	2300      	movs	r3, #0
}
 810381e:	4618      	mov	r0, r3
 8103820:	370c      	adds	r7, #12
 8103822:	46bd      	mov	sp, r7
 8103824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103828:	4770      	bx	lr

0810382a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 810382a:	b480      	push	{r7}
 810382c:	b083      	sub	sp, #12
 810382e:	af00      	add	r7, sp, #0
 8103830:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8103832:	687b      	ldr	r3, [r7, #4]
 8103834:	689b      	ldr	r3, [r3, #8]
 8103836:	f003 0302 	and.w	r3, r3, #2
 810383a:	2b02      	cmp	r3, #2
 810383c:	d101      	bne.n	8103842 <LL_ADC_IsDisableOngoing+0x18>
 810383e:	2301      	movs	r3, #1
 8103840:	e000      	b.n	8103844 <LL_ADC_IsDisableOngoing+0x1a>
 8103842:	2300      	movs	r3, #0
}
 8103844:	4618      	mov	r0, r3
 8103846:	370c      	adds	r7, #12
 8103848:	46bd      	mov	sp, r7
 810384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810384e:	4770      	bx	lr

08103850 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8103850:	b480      	push	{r7}
 8103852:	b083      	sub	sp, #12
 8103854:	af00      	add	r7, sp, #0
 8103856:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8103858:	687b      	ldr	r3, [r7, #4]
 810385a:	689b      	ldr	r3, [r3, #8]
 810385c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8103860:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8103864:	f043 0204 	orr.w	r2, r3, #4
 8103868:	687b      	ldr	r3, [r7, #4]
 810386a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 810386c:	bf00      	nop
 810386e:	370c      	adds	r7, #12
 8103870:	46bd      	mov	sp, r7
 8103872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103876:	4770      	bx	lr

08103878 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8103878:	b480      	push	{r7}
 810387a:	b083      	sub	sp, #12
 810387c:	af00      	add	r7, sp, #0
 810387e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8103880:	687b      	ldr	r3, [r7, #4]
 8103882:	689b      	ldr	r3, [r3, #8]
 8103884:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8103888:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810388c:	f043 0210 	orr.w	r2, r3, #16
 8103890:	687b      	ldr	r3, [r7, #4]
 8103892:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8103894:	bf00      	nop
 8103896:	370c      	adds	r7, #12
 8103898:	46bd      	mov	sp, r7
 810389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810389e:	4770      	bx	lr

081038a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81038a0:	b480      	push	{r7}
 81038a2:	b083      	sub	sp, #12
 81038a4:	af00      	add	r7, sp, #0
 81038a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	689b      	ldr	r3, [r3, #8]
 81038ac:	f003 0304 	and.w	r3, r3, #4
 81038b0:	2b04      	cmp	r3, #4
 81038b2:	d101      	bne.n	81038b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 81038b4:	2301      	movs	r3, #1
 81038b6:	e000      	b.n	81038ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 81038b8:	2300      	movs	r3, #0
}
 81038ba:	4618      	mov	r0, r3
 81038bc:	370c      	adds	r7, #12
 81038be:	46bd      	mov	sp, r7
 81038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038c4:	4770      	bx	lr

081038c6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 81038c6:	b480      	push	{r7}
 81038c8:	b083      	sub	sp, #12
 81038ca:	af00      	add	r7, sp, #0
 81038cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81038ce:	687b      	ldr	r3, [r7, #4]
 81038d0:	689b      	ldr	r3, [r3, #8]
 81038d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81038d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81038da:	f043 0220 	orr.w	r2, r3, #32
 81038de:	687b      	ldr	r3, [r7, #4]
 81038e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 81038e2:	bf00      	nop
 81038e4:	370c      	adds	r7, #12
 81038e6:	46bd      	mov	sp, r7
 81038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038ec:	4770      	bx	lr

081038ee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81038ee:	b480      	push	{r7}
 81038f0:	b083      	sub	sp, #12
 81038f2:	af00      	add	r7, sp, #0
 81038f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 81038f6:	687b      	ldr	r3, [r7, #4]
 81038f8:	689b      	ldr	r3, [r3, #8]
 81038fa:	f003 0308 	and.w	r3, r3, #8
 81038fe:	2b08      	cmp	r3, #8
 8103900:	d101      	bne.n	8103906 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8103902:	2301      	movs	r3, #1
 8103904:	e000      	b.n	8103908 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8103906:	2300      	movs	r3, #0
}
 8103908:	4618      	mov	r0, r3
 810390a:	370c      	adds	r7, #12
 810390c:	46bd      	mov	sp, r7
 810390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103912:	4770      	bx	lr

08103914 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8103914:	b590      	push	{r4, r7, lr}
 8103916:	b089      	sub	sp, #36	@ 0x24
 8103918:	af00      	add	r7, sp, #0
 810391a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810391c:	2300      	movs	r3, #0
 810391e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8103920:	2300      	movs	r3, #0
 8103922:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8103924:	687b      	ldr	r3, [r7, #4]
 8103926:	2b00      	cmp	r3, #0
 8103928:	d101      	bne.n	810392e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 810392a:	2301      	movs	r3, #1
 810392c:	e18f      	b.n	8103c4e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	68db      	ldr	r3, [r3, #12]
 8103932:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8103934:	687b      	ldr	r3, [r7, #4]
 8103936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103938:	2b00      	cmp	r3, #0
 810393a:	d109      	bne.n	8103950 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 810393c:	6878      	ldr	r0, [r7, #4]
 810393e:	f7ff f95b 	bl	8102bf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8103942:	687b      	ldr	r3, [r7, #4]
 8103944:	2200      	movs	r2, #0
 8103946:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8103948:	687b      	ldr	r3, [r7, #4]
 810394a:	2200      	movs	r2, #0
 810394c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8103950:	687b      	ldr	r3, [r7, #4]
 8103952:	681b      	ldr	r3, [r3, #0]
 8103954:	4618      	mov	r0, r3
 8103956:	f7ff fef1 	bl	810373c <LL_ADC_IsDeepPowerDownEnabled>
 810395a:	4603      	mov	r3, r0
 810395c:	2b00      	cmp	r3, #0
 810395e:	d004      	beq.n	810396a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8103960:	687b      	ldr	r3, [r7, #4]
 8103962:	681b      	ldr	r3, [r3, #0]
 8103964:	4618      	mov	r0, r3
 8103966:	f7ff fed7 	bl	8103718 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810396a:	687b      	ldr	r3, [r7, #4]
 810396c:	681b      	ldr	r3, [r3, #0]
 810396e:	4618      	mov	r0, r3
 8103970:	f7ff ff0c 	bl	810378c <LL_ADC_IsInternalRegulatorEnabled>
 8103974:	4603      	mov	r3, r0
 8103976:	2b00      	cmp	r3, #0
 8103978:	d114      	bne.n	81039a4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 810397a:	687b      	ldr	r3, [r7, #4]
 810397c:	681b      	ldr	r3, [r3, #0]
 810397e:	4618      	mov	r0, r3
 8103980:	f7ff fef0 	bl	8103764 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103984:	4b88      	ldr	r3, [pc, #544]	@ (8103ba8 <HAL_ADC_Init+0x294>)
 8103986:	681b      	ldr	r3, [r3, #0]
 8103988:	099b      	lsrs	r3, r3, #6
 810398a:	4a88      	ldr	r2, [pc, #544]	@ (8103bac <HAL_ADC_Init+0x298>)
 810398c:	fba2 2303 	umull	r2, r3, r2, r3
 8103990:	099b      	lsrs	r3, r3, #6
 8103992:	3301      	adds	r3, #1
 8103994:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8103996:	e002      	b.n	810399e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8103998:	68bb      	ldr	r3, [r7, #8]
 810399a:	3b01      	subs	r3, #1
 810399c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810399e:	68bb      	ldr	r3, [r7, #8]
 81039a0:	2b00      	cmp	r3, #0
 81039a2:	d1f9      	bne.n	8103998 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 81039a4:	687b      	ldr	r3, [r7, #4]
 81039a6:	681b      	ldr	r3, [r3, #0]
 81039a8:	4618      	mov	r0, r3
 81039aa:	f7ff feef 	bl	810378c <LL_ADC_IsInternalRegulatorEnabled>
 81039ae:	4603      	mov	r3, r0
 81039b0:	2b00      	cmp	r3, #0
 81039b2:	d10d      	bne.n	81039d0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81039b4:	687b      	ldr	r3, [r7, #4]
 81039b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81039b8:	f043 0210 	orr.w	r2, r3, #16
 81039bc:	687b      	ldr	r3, [r7, #4]
 81039be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81039c0:	687b      	ldr	r3, [r7, #4]
 81039c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81039c4:	f043 0201 	orr.w	r2, r3, #1
 81039c8:	687b      	ldr	r3, [r7, #4]
 81039ca:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 81039cc:	2301      	movs	r3, #1
 81039ce:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81039d0:	687b      	ldr	r3, [r7, #4]
 81039d2:	681b      	ldr	r3, [r3, #0]
 81039d4:	4618      	mov	r0, r3
 81039d6:	f7ff ff63 	bl	81038a0 <LL_ADC_REG_IsConversionOngoing>
 81039da:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81039dc:	687b      	ldr	r3, [r7, #4]
 81039de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81039e0:	f003 0310 	and.w	r3, r3, #16
 81039e4:	2b00      	cmp	r3, #0
 81039e6:	f040 8129 	bne.w	8103c3c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 81039ea:	697b      	ldr	r3, [r7, #20]
 81039ec:	2b00      	cmp	r3, #0
 81039ee:	f040 8125 	bne.w	8103c3c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 81039f2:	687b      	ldr	r3, [r7, #4]
 81039f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81039f6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 81039fa:	f043 0202 	orr.w	r2, r3, #2
 81039fe:	687b      	ldr	r3, [r7, #4]
 8103a00:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103a02:	687b      	ldr	r3, [r7, #4]
 8103a04:	681b      	ldr	r3, [r3, #0]
 8103a06:	4618      	mov	r0, r3
 8103a08:	f7ff fefc 	bl	8103804 <LL_ADC_IsEnabled>
 8103a0c:	4603      	mov	r3, r0
 8103a0e:	2b00      	cmp	r3, #0
 8103a10:	d136      	bne.n	8103a80 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103a12:	687b      	ldr	r3, [r7, #4]
 8103a14:	681b      	ldr	r3, [r3, #0]
 8103a16:	4a66      	ldr	r2, [pc, #408]	@ (8103bb0 <HAL_ADC_Init+0x29c>)
 8103a18:	4293      	cmp	r3, r2
 8103a1a:	d004      	beq.n	8103a26 <HAL_ADC_Init+0x112>
 8103a1c:	687b      	ldr	r3, [r7, #4]
 8103a1e:	681b      	ldr	r3, [r3, #0]
 8103a20:	4a64      	ldr	r2, [pc, #400]	@ (8103bb4 <HAL_ADC_Init+0x2a0>)
 8103a22:	4293      	cmp	r3, r2
 8103a24:	d10e      	bne.n	8103a44 <HAL_ADC_Init+0x130>
 8103a26:	4862      	ldr	r0, [pc, #392]	@ (8103bb0 <HAL_ADC_Init+0x29c>)
 8103a28:	f7ff feec 	bl	8103804 <LL_ADC_IsEnabled>
 8103a2c:	4604      	mov	r4, r0
 8103a2e:	4861      	ldr	r0, [pc, #388]	@ (8103bb4 <HAL_ADC_Init+0x2a0>)
 8103a30:	f7ff fee8 	bl	8103804 <LL_ADC_IsEnabled>
 8103a34:	4603      	mov	r3, r0
 8103a36:	4323      	orrs	r3, r4
 8103a38:	2b00      	cmp	r3, #0
 8103a3a:	bf0c      	ite	eq
 8103a3c:	2301      	moveq	r3, #1
 8103a3e:	2300      	movne	r3, #0
 8103a40:	b2db      	uxtb	r3, r3
 8103a42:	e008      	b.n	8103a56 <HAL_ADC_Init+0x142>
 8103a44:	485c      	ldr	r0, [pc, #368]	@ (8103bb8 <HAL_ADC_Init+0x2a4>)
 8103a46:	f7ff fedd 	bl	8103804 <LL_ADC_IsEnabled>
 8103a4a:	4603      	mov	r3, r0
 8103a4c:	2b00      	cmp	r3, #0
 8103a4e:	bf0c      	ite	eq
 8103a50:	2301      	moveq	r3, #1
 8103a52:	2300      	movne	r3, #0
 8103a54:	b2db      	uxtb	r3, r3
 8103a56:	2b00      	cmp	r3, #0
 8103a58:	d012      	beq.n	8103a80 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8103a5a:	687b      	ldr	r3, [r7, #4]
 8103a5c:	681b      	ldr	r3, [r3, #0]
 8103a5e:	4a54      	ldr	r2, [pc, #336]	@ (8103bb0 <HAL_ADC_Init+0x29c>)
 8103a60:	4293      	cmp	r3, r2
 8103a62:	d004      	beq.n	8103a6e <HAL_ADC_Init+0x15a>
 8103a64:	687b      	ldr	r3, [r7, #4]
 8103a66:	681b      	ldr	r3, [r3, #0]
 8103a68:	4a52      	ldr	r2, [pc, #328]	@ (8103bb4 <HAL_ADC_Init+0x2a0>)
 8103a6a:	4293      	cmp	r3, r2
 8103a6c:	d101      	bne.n	8103a72 <HAL_ADC_Init+0x15e>
 8103a6e:	4a53      	ldr	r2, [pc, #332]	@ (8103bbc <HAL_ADC_Init+0x2a8>)
 8103a70:	e000      	b.n	8103a74 <HAL_ADC_Init+0x160>
 8103a72:	4a53      	ldr	r2, [pc, #332]	@ (8103bc0 <HAL_ADC_Init+0x2ac>)
 8103a74:	687b      	ldr	r3, [r7, #4]
 8103a76:	685b      	ldr	r3, [r3, #4]
 8103a78:	4619      	mov	r1, r3
 8103a7a:	4610      	mov	r0, r2
 8103a7c:	f7ff fd1a 	bl	81034b4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8103a80:	f7ff fd0c 	bl	810349c <HAL_GetREVID>
 8103a84:	4603      	mov	r3, r0
 8103a86:	f241 0203 	movw	r2, #4099	@ 0x1003
 8103a8a:	4293      	cmp	r3, r2
 8103a8c:	d914      	bls.n	8103ab8 <HAL_ADC_Init+0x1a4>
 8103a8e:	687b      	ldr	r3, [r7, #4]
 8103a90:	689b      	ldr	r3, [r3, #8]
 8103a92:	2b10      	cmp	r3, #16
 8103a94:	d110      	bne.n	8103ab8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	7d5b      	ldrb	r3, [r3, #21]
 8103a9a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8103a9c:	687b      	ldr	r3, [r7, #4]
 8103a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103aa0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8103aa2:	687b      	ldr	r3, [r7, #4]
 8103aa4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8103aa6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8103aa8:	687b      	ldr	r3, [r7, #4]
 8103aaa:	7f1b      	ldrb	r3, [r3, #28]
 8103aac:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8103aae:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103ab0:	f043 030c 	orr.w	r3, r3, #12
 8103ab4:	61bb      	str	r3, [r7, #24]
 8103ab6:	e00d      	b.n	8103ad4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103ab8:	687b      	ldr	r3, [r7, #4]
 8103aba:	7d5b      	ldrb	r3, [r3, #21]
 8103abc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103ac2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8103ac4:	687b      	ldr	r3, [r7, #4]
 8103ac6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8103ac8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8103aca:	687b      	ldr	r3, [r7, #4]
 8103acc:	7f1b      	ldrb	r3, [r3, #28]
 8103ace:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103ad0:	4313      	orrs	r3, r2
 8103ad2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8103ad4:	687b      	ldr	r3, [r7, #4]
 8103ad6:	7f1b      	ldrb	r3, [r3, #28]
 8103ad8:	2b01      	cmp	r3, #1
 8103ada:	d106      	bne.n	8103aea <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8103adc:	687b      	ldr	r3, [r7, #4]
 8103ade:	6a1b      	ldr	r3, [r3, #32]
 8103ae0:	3b01      	subs	r3, #1
 8103ae2:	045b      	lsls	r3, r3, #17
 8103ae4:	69ba      	ldr	r2, [r7, #24]
 8103ae6:	4313      	orrs	r3, r2
 8103ae8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8103aea:	687b      	ldr	r3, [r7, #4]
 8103aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103aee:	2b00      	cmp	r3, #0
 8103af0:	d009      	beq.n	8103b06 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8103af2:	687b      	ldr	r3, [r7, #4]
 8103af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103af6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8103afa:	687b      	ldr	r3, [r7, #4]
 8103afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103afe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8103b00:	69ba      	ldr	r2, [r7, #24]
 8103b02:	4313      	orrs	r3, r2
 8103b04:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8103b06:	687b      	ldr	r3, [r7, #4]
 8103b08:	681b      	ldr	r3, [r3, #0]
 8103b0a:	68da      	ldr	r2, [r3, #12]
 8103b0c:	4b2d      	ldr	r3, [pc, #180]	@ (8103bc4 <HAL_ADC_Init+0x2b0>)
 8103b0e:	4013      	ands	r3, r2
 8103b10:	687a      	ldr	r2, [r7, #4]
 8103b12:	6812      	ldr	r2, [r2, #0]
 8103b14:	69b9      	ldr	r1, [r7, #24]
 8103b16:	430b      	orrs	r3, r1
 8103b18:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103b1a:	687b      	ldr	r3, [r7, #4]
 8103b1c:	681b      	ldr	r3, [r3, #0]
 8103b1e:	4618      	mov	r0, r3
 8103b20:	f7ff febe 	bl	81038a0 <LL_ADC_REG_IsConversionOngoing>
 8103b24:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8103b26:	687b      	ldr	r3, [r7, #4]
 8103b28:	681b      	ldr	r3, [r3, #0]
 8103b2a:	4618      	mov	r0, r3
 8103b2c:	f7ff fedf 	bl	81038ee <LL_ADC_INJ_IsConversionOngoing>
 8103b30:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8103b32:	693b      	ldr	r3, [r7, #16]
 8103b34:	2b00      	cmp	r3, #0
 8103b36:	d15f      	bne.n	8103bf8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8103b38:	68fb      	ldr	r3, [r7, #12]
 8103b3a:	2b00      	cmp	r3, #0
 8103b3c:	d15c      	bne.n	8103bf8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8103b3e:	687b      	ldr	r3, [r7, #4]
 8103b40:	7d1b      	ldrb	r3, [r3, #20]
 8103b42:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8103b44:	687b      	ldr	r3, [r7, #4]
 8103b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8103b48:	4313      	orrs	r3, r2
 8103b4a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8103b4c:	687b      	ldr	r3, [r7, #4]
 8103b4e:	681b      	ldr	r3, [r3, #0]
 8103b50:	68db      	ldr	r3, [r3, #12]
 8103b52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8103b56:	f023 0303 	bic.w	r3, r3, #3
 8103b5a:	687a      	ldr	r2, [r7, #4]
 8103b5c:	6812      	ldr	r2, [r2, #0]
 8103b5e:	69b9      	ldr	r1, [r7, #24]
 8103b60:	430b      	orrs	r3, r1
 8103b62:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8103b64:	687b      	ldr	r3, [r7, #4]
 8103b66:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8103b6a:	2b01      	cmp	r3, #1
 8103b6c:	d12e      	bne.n	8103bcc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8103b6e:	687b      	ldr	r3, [r7, #4]
 8103b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103b72:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8103b74:	687b      	ldr	r3, [r7, #4]
 8103b76:	681b      	ldr	r3, [r3, #0]
 8103b78:	691a      	ldr	r2, [r3, #16]
 8103b7a:	4b13      	ldr	r3, [pc, #76]	@ (8103bc8 <HAL_ADC_Init+0x2b4>)
 8103b7c:	4013      	ands	r3, r2
 8103b7e:	687a      	ldr	r2, [r7, #4]
 8103b80:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8103b82:	3a01      	subs	r2, #1
 8103b84:	0411      	lsls	r1, r2, #16
 8103b86:	687a      	ldr	r2, [r7, #4]
 8103b88:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8103b8a:	4311      	orrs	r1, r2
 8103b8c:	687a      	ldr	r2, [r7, #4]
 8103b8e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8103b90:	4311      	orrs	r1, r2
 8103b92:	687a      	ldr	r2, [r7, #4]
 8103b94:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8103b96:	430a      	orrs	r2, r1
 8103b98:	431a      	orrs	r2, r3
 8103b9a:	687b      	ldr	r3, [r7, #4]
 8103b9c:	681b      	ldr	r3, [r3, #0]
 8103b9e:	f042 0201 	orr.w	r2, r2, #1
 8103ba2:	611a      	str	r2, [r3, #16]
 8103ba4:	e01a      	b.n	8103bdc <HAL_ADC_Init+0x2c8>
 8103ba6:	bf00      	nop
 8103ba8:	10000000 	.word	0x10000000
 8103bac:	053e2d63 	.word	0x053e2d63
 8103bb0:	40022000 	.word	0x40022000
 8103bb4:	40022100 	.word	0x40022100
 8103bb8:	58026000 	.word	0x58026000
 8103bbc:	40022300 	.word	0x40022300
 8103bc0:	58026300 	.word	0x58026300
 8103bc4:	fff0c003 	.word	0xfff0c003
 8103bc8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8103bcc:	687b      	ldr	r3, [r7, #4]
 8103bce:	681b      	ldr	r3, [r3, #0]
 8103bd0:	691a      	ldr	r2, [r3, #16]
 8103bd2:	687b      	ldr	r3, [r7, #4]
 8103bd4:	681b      	ldr	r3, [r3, #0]
 8103bd6:	f022 0201 	bic.w	r2, r2, #1
 8103bda:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8103bdc:	687b      	ldr	r3, [r7, #4]
 8103bde:	681b      	ldr	r3, [r3, #0]
 8103be0:	691b      	ldr	r3, [r3, #16]
 8103be2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8103be6:	687b      	ldr	r3, [r7, #4]
 8103be8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103bea:	687b      	ldr	r3, [r7, #4]
 8103bec:	681b      	ldr	r3, [r3, #0]
 8103bee:	430a      	orrs	r2, r1
 8103bf0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8103bf2:	6878      	ldr	r0, [r7, #4]
 8103bf4:	f000 ff32 	bl	8104a5c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8103bf8:	687b      	ldr	r3, [r7, #4]
 8103bfa:	68db      	ldr	r3, [r3, #12]
 8103bfc:	2b01      	cmp	r3, #1
 8103bfe:	d10c      	bne.n	8103c1a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8103c00:	687b      	ldr	r3, [r7, #4]
 8103c02:	681b      	ldr	r3, [r3, #0]
 8103c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103c06:	f023 010f 	bic.w	r1, r3, #15
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	699b      	ldr	r3, [r3, #24]
 8103c0e:	1e5a      	subs	r2, r3, #1
 8103c10:	687b      	ldr	r3, [r7, #4]
 8103c12:	681b      	ldr	r3, [r3, #0]
 8103c14:	430a      	orrs	r2, r1
 8103c16:	631a      	str	r2, [r3, #48]	@ 0x30
 8103c18:	e007      	b.n	8103c2a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8103c1a:	687b      	ldr	r3, [r7, #4]
 8103c1c:	681b      	ldr	r3, [r3, #0]
 8103c1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8103c20:	687b      	ldr	r3, [r7, #4]
 8103c22:	681b      	ldr	r3, [r3, #0]
 8103c24:	f022 020f 	bic.w	r2, r2, #15
 8103c28:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8103c2a:	687b      	ldr	r3, [r7, #4]
 8103c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103c2e:	f023 0303 	bic.w	r3, r3, #3
 8103c32:	f043 0201 	orr.w	r2, r3, #1
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	655a      	str	r2, [r3, #84]	@ 0x54
 8103c3a:	e007      	b.n	8103c4c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103c3c:	687b      	ldr	r3, [r7, #4]
 8103c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103c40:	f043 0210 	orr.w	r2, r3, #16
 8103c44:	687b      	ldr	r3, [r7, #4]
 8103c46:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8103c48:	2301      	movs	r3, #1
 8103c4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8103c4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8103c4e:	4618      	mov	r0, r3
 8103c50:	3724      	adds	r7, #36	@ 0x24
 8103c52:	46bd      	mov	sp, r7
 8103c54:	bd90      	pop	{r4, r7, pc}
 8103c56:	bf00      	nop

08103c58 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8103c58:	b580      	push	{r7, lr}
 8103c5a:	b086      	sub	sp, #24
 8103c5c:	af00      	add	r7, sp, #0
 8103c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103c60:	687b      	ldr	r3, [r7, #4]
 8103c62:	681b      	ldr	r3, [r3, #0]
 8103c64:	4a5d      	ldr	r2, [pc, #372]	@ (8103ddc <HAL_ADC_Start+0x184>)
 8103c66:	4293      	cmp	r3, r2
 8103c68:	d004      	beq.n	8103c74 <HAL_ADC_Start+0x1c>
 8103c6a:	687b      	ldr	r3, [r7, #4]
 8103c6c:	681b      	ldr	r3, [r3, #0]
 8103c6e:	4a5c      	ldr	r2, [pc, #368]	@ (8103de0 <HAL_ADC_Start+0x188>)
 8103c70:	4293      	cmp	r3, r2
 8103c72:	d101      	bne.n	8103c78 <HAL_ADC_Start+0x20>
 8103c74:	4b5b      	ldr	r3, [pc, #364]	@ (8103de4 <HAL_ADC_Start+0x18c>)
 8103c76:	e000      	b.n	8103c7a <HAL_ADC_Start+0x22>
 8103c78:	4b5b      	ldr	r3, [pc, #364]	@ (8103de8 <HAL_ADC_Start+0x190>)
 8103c7a:	4618      	mov	r0, r3
 8103c7c:	f7ff fd30 	bl	81036e0 <LL_ADC_GetMultimode>
 8103c80:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103c82:	687b      	ldr	r3, [r7, #4]
 8103c84:	681b      	ldr	r3, [r3, #0]
 8103c86:	4618      	mov	r0, r3
 8103c88:	f7ff fe0a 	bl	81038a0 <LL_ADC_REG_IsConversionOngoing>
 8103c8c:	4603      	mov	r3, r0
 8103c8e:	2b00      	cmp	r3, #0
 8103c90:	f040 809c 	bne.w	8103dcc <HAL_ADC_Start+0x174>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8103c94:	687b      	ldr	r3, [r7, #4]
 8103c96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8103c9a:	2b01      	cmp	r3, #1
 8103c9c:	d101      	bne.n	8103ca2 <HAL_ADC_Start+0x4a>
 8103c9e:	2302      	movs	r3, #2
 8103ca0:	e097      	b.n	8103dd2 <HAL_ADC_Start+0x17a>
 8103ca2:	687b      	ldr	r3, [r7, #4]
 8103ca4:	2201      	movs	r2, #1
 8103ca6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8103caa:	6878      	ldr	r0, [r7, #4]
 8103cac:	f000 fdec 	bl	8104888 <ADC_Enable>
 8103cb0:	4603      	mov	r3, r0
 8103cb2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8103cb4:	7dfb      	ldrb	r3, [r7, #23]
 8103cb6:	2b00      	cmp	r3, #0
 8103cb8:	f040 8083 	bne.w	8103dc2 <HAL_ADC_Start+0x16a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103cc0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8103cc4:	f023 0301 	bic.w	r3, r3, #1
 8103cc8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8103ccc:	687b      	ldr	r3, [r7, #4]
 8103cce:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8103cd0:	687b      	ldr	r3, [r7, #4]
 8103cd2:	681b      	ldr	r3, [r3, #0]
 8103cd4:	4a42      	ldr	r2, [pc, #264]	@ (8103de0 <HAL_ADC_Start+0x188>)
 8103cd6:	4293      	cmp	r3, r2
 8103cd8:	d002      	beq.n	8103ce0 <HAL_ADC_Start+0x88>
 8103cda:	687b      	ldr	r3, [r7, #4]
 8103cdc:	681b      	ldr	r3, [r3, #0]
 8103cde:	e000      	b.n	8103ce2 <HAL_ADC_Start+0x8a>
 8103ce0:	4b3e      	ldr	r3, [pc, #248]	@ (8103ddc <HAL_ADC_Start+0x184>)
 8103ce2:	687a      	ldr	r2, [r7, #4]
 8103ce4:	6812      	ldr	r2, [r2, #0]
 8103ce6:	4293      	cmp	r3, r2
 8103ce8:	d002      	beq.n	8103cf0 <HAL_ADC_Start+0x98>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103cea:	693b      	ldr	r3, [r7, #16]
 8103cec:	2b00      	cmp	r3, #0
 8103cee:	d105      	bne.n	8103cfc <HAL_ADC_Start+0xa4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8103cf0:	687b      	ldr	r3, [r7, #4]
 8103cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103cf4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8103cf8:	687b      	ldr	r3, [r7, #4]
 8103cfa:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8103cfc:	687b      	ldr	r3, [r7, #4]
 8103cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103d00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8103d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103d08:	d106      	bne.n	8103d18 <HAL_ADC_Start+0xc0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8103d0a:	687b      	ldr	r3, [r7, #4]
 8103d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103d0e:	f023 0206 	bic.w	r2, r3, #6
 8103d12:	687b      	ldr	r3, [r7, #4]
 8103d14:	659a      	str	r2, [r3, #88]	@ 0x58
 8103d16:	e002      	b.n	8103d1e <HAL_ADC_Start+0xc6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	2200      	movs	r2, #0
 8103d1c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8103d1e:	687b      	ldr	r3, [r7, #4]
 8103d20:	681b      	ldr	r3, [r3, #0]
 8103d22:	221c      	movs	r2, #28
 8103d24:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8103d26:	687b      	ldr	r3, [r7, #4]
 8103d28:	2200      	movs	r2, #0
 8103d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8103d2e:	687b      	ldr	r3, [r7, #4]
 8103d30:	681b      	ldr	r3, [r3, #0]
 8103d32:	4a2b      	ldr	r2, [pc, #172]	@ (8103de0 <HAL_ADC_Start+0x188>)
 8103d34:	4293      	cmp	r3, r2
 8103d36:	d002      	beq.n	8103d3e <HAL_ADC_Start+0xe6>
 8103d38:	687b      	ldr	r3, [r7, #4]
 8103d3a:	681b      	ldr	r3, [r3, #0]
 8103d3c:	e000      	b.n	8103d40 <HAL_ADC_Start+0xe8>
 8103d3e:	4b27      	ldr	r3, [pc, #156]	@ (8103ddc <HAL_ADC_Start+0x184>)
 8103d40:	687a      	ldr	r2, [r7, #4]
 8103d42:	6812      	ldr	r2, [r2, #0]
 8103d44:	4293      	cmp	r3, r2
 8103d46:	d008      	beq.n	8103d5a <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103d48:	693b      	ldr	r3, [r7, #16]
 8103d4a:	2b00      	cmp	r3, #0
 8103d4c:	d005      	beq.n	8103d5a <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8103d4e:	693b      	ldr	r3, [r7, #16]
 8103d50:	2b05      	cmp	r3, #5
 8103d52:	d002      	beq.n	8103d5a <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8103d54:	693b      	ldr	r3, [r7, #16]
 8103d56:	2b09      	cmp	r3, #9
 8103d58:	d114      	bne.n	8103d84 <HAL_ADC_Start+0x12c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8103d5a:	687b      	ldr	r3, [r7, #4]
 8103d5c:	681b      	ldr	r3, [r3, #0]
 8103d5e:	68db      	ldr	r3, [r3, #12]
 8103d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103d64:	2b00      	cmp	r3, #0
 8103d66:	d007      	beq.n	8103d78 <HAL_ADC_Start+0x120>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8103d68:	687b      	ldr	r3, [r7, #4]
 8103d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103d6c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8103d70:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8103d74:	687b      	ldr	r3, [r7, #4]
 8103d76:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8103d78:	687b      	ldr	r3, [r7, #4]
 8103d7a:	681b      	ldr	r3, [r3, #0]
 8103d7c:	4618      	mov	r0, r3
 8103d7e:	f7ff fd67 	bl	8103850 <LL_ADC_REG_StartConversion>
 8103d82:	e025      	b.n	8103dd0 <HAL_ADC_Start+0x178>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8103d84:	687b      	ldr	r3, [r7, #4]
 8103d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103d88:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8103d8c:	687b      	ldr	r3, [r7, #4]
 8103d8e:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8103d90:	687b      	ldr	r3, [r7, #4]
 8103d92:	681b      	ldr	r3, [r3, #0]
 8103d94:	4a12      	ldr	r2, [pc, #72]	@ (8103de0 <HAL_ADC_Start+0x188>)
 8103d96:	4293      	cmp	r3, r2
 8103d98:	d002      	beq.n	8103da0 <HAL_ADC_Start+0x148>
 8103d9a:	687b      	ldr	r3, [r7, #4]
 8103d9c:	681b      	ldr	r3, [r3, #0]
 8103d9e:	e000      	b.n	8103da2 <HAL_ADC_Start+0x14a>
 8103da0:	4b0e      	ldr	r3, [pc, #56]	@ (8103ddc <HAL_ADC_Start+0x184>)
 8103da2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8103da4:	68fb      	ldr	r3, [r7, #12]
 8103da6:	68db      	ldr	r3, [r3, #12]
 8103da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103dac:	2b00      	cmp	r3, #0
 8103dae:	d00f      	beq.n	8103dd0 <HAL_ADC_Start+0x178>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8103db0:	687b      	ldr	r3, [r7, #4]
 8103db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103db4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8103db8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8103dbc:	687b      	ldr	r3, [r7, #4]
 8103dbe:	655a      	str	r2, [r3, #84]	@ 0x54
 8103dc0:	e006      	b.n	8103dd0 <HAL_ADC_Start+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8103dc2:	687b      	ldr	r3, [r7, #4]
 8103dc4:	2200      	movs	r2, #0
 8103dc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8103dca:	e001      	b.n	8103dd0 <HAL_ADC_Start+0x178>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8103dcc:	2302      	movs	r3, #2
 8103dce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8103dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8103dd2:	4618      	mov	r0, r3
 8103dd4:	3718      	adds	r7, #24
 8103dd6:	46bd      	mov	sp, r7
 8103dd8:	bd80      	pop	{r7, pc}
 8103dda:	bf00      	nop
 8103ddc:	40022000 	.word	0x40022000
 8103de0:	40022100 	.word	0x40022100
 8103de4:	40022300 	.word	0x40022300
 8103de8:	58026300 	.word	0x58026300

08103dec <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8103dec:	b580      	push	{r7, lr}
 8103dee:	b084      	sub	sp, #16
 8103df0:	af00      	add	r7, sp, #0
 8103df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8103df4:	687b      	ldr	r3, [r7, #4]
 8103df6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8103dfa:	2b01      	cmp	r3, #1
 8103dfc:	d101      	bne.n	8103e02 <HAL_ADC_Stop+0x16>
 8103dfe:	2302      	movs	r3, #2
 8103e00:	e023      	b.n	8103e4a <HAL_ADC_Stop+0x5e>
 8103e02:	687b      	ldr	r3, [r7, #4]
 8103e04:	2201      	movs	r2, #1
 8103e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8103e0a:	2103      	movs	r1, #3
 8103e0c:	6878      	ldr	r0, [r7, #4]
 8103e0e:	f000 fc7f 	bl	8104710 <ADC_ConversionStop>
 8103e12:	4603      	mov	r3, r0
 8103e14:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8103e16:	7bfb      	ldrb	r3, [r7, #15]
 8103e18:	2b00      	cmp	r3, #0
 8103e1a:	d111      	bne.n	8103e40 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8103e1c:	6878      	ldr	r0, [r7, #4]
 8103e1e:	f000 fdbd 	bl	810499c <ADC_Disable>
 8103e22:	4603      	mov	r3, r0
 8103e24:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8103e26:	7bfb      	ldrb	r3, [r7, #15]
 8103e28:	2b00      	cmp	r3, #0
 8103e2a:	d109      	bne.n	8103e40 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8103e2c:	687b      	ldr	r3, [r7, #4]
 8103e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103e30:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8103e34:	f023 0301 	bic.w	r3, r3, #1
 8103e38:	f043 0201 	orr.w	r2, r3, #1
 8103e3c:	687b      	ldr	r3, [r7, #4]
 8103e3e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103e40:	687b      	ldr	r3, [r7, #4]
 8103e42:	2200      	movs	r2, #0
 8103e44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8103e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8103e4a:	4618      	mov	r0, r3
 8103e4c:	3710      	adds	r7, #16
 8103e4e:	46bd      	mov	sp, r7
 8103e50:	bd80      	pop	{r7, pc}
	...

08103e54 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8103e54:	b580      	push	{r7, lr}
 8103e56:	b088      	sub	sp, #32
 8103e58:	af00      	add	r7, sp, #0
 8103e5a:	6078      	str	r0, [r7, #4]
 8103e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103e5e:	687b      	ldr	r3, [r7, #4]
 8103e60:	681b      	ldr	r3, [r3, #0]
 8103e62:	4a72      	ldr	r2, [pc, #456]	@ (810402c <HAL_ADC_PollForConversion+0x1d8>)
 8103e64:	4293      	cmp	r3, r2
 8103e66:	d004      	beq.n	8103e72 <HAL_ADC_PollForConversion+0x1e>
 8103e68:	687b      	ldr	r3, [r7, #4]
 8103e6a:	681b      	ldr	r3, [r3, #0]
 8103e6c:	4a70      	ldr	r2, [pc, #448]	@ (8104030 <HAL_ADC_PollForConversion+0x1dc>)
 8103e6e:	4293      	cmp	r3, r2
 8103e70:	d101      	bne.n	8103e76 <HAL_ADC_PollForConversion+0x22>
 8103e72:	4b70      	ldr	r3, [pc, #448]	@ (8104034 <HAL_ADC_PollForConversion+0x1e0>)
 8103e74:	e000      	b.n	8103e78 <HAL_ADC_PollForConversion+0x24>
 8103e76:	4b70      	ldr	r3, [pc, #448]	@ (8104038 <HAL_ADC_PollForConversion+0x1e4>)
 8103e78:	4618      	mov	r0, r3
 8103e7a:	f7ff fc31 	bl	81036e0 <LL_ADC_GetMultimode>
 8103e7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8103e80:	687b      	ldr	r3, [r7, #4]
 8103e82:	691b      	ldr	r3, [r3, #16]
 8103e84:	2b08      	cmp	r3, #8
 8103e86:	d102      	bne.n	8103e8e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8103e88:	2308      	movs	r3, #8
 8103e8a:	61fb      	str	r3, [r7, #28]
 8103e8c:	e037      	b.n	8103efe <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103e8e:	697b      	ldr	r3, [r7, #20]
 8103e90:	2b00      	cmp	r3, #0
 8103e92:	d005      	beq.n	8103ea0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8103e94:	697b      	ldr	r3, [r7, #20]
 8103e96:	2b05      	cmp	r3, #5
 8103e98:	d002      	beq.n	8103ea0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8103e9a:	697b      	ldr	r3, [r7, #20]
 8103e9c:	2b09      	cmp	r3, #9
 8103e9e:	d111      	bne.n	8103ec4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8103ea0:	687b      	ldr	r3, [r7, #4]
 8103ea2:	681b      	ldr	r3, [r3, #0]
 8103ea4:	68db      	ldr	r3, [r3, #12]
 8103ea6:	f003 0301 	and.w	r3, r3, #1
 8103eaa:	2b00      	cmp	r3, #0
 8103eac:	d007      	beq.n	8103ebe <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103eae:	687b      	ldr	r3, [r7, #4]
 8103eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103eb2:	f043 0220 	orr.w	r2, r3, #32
 8103eb6:	687b      	ldr	r3, [r7, #4]
 8103eb8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8103eba:	2301      	movs	r3, #1
 8103ebc:	e0b1      	b.n	8104022 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8103ebe:	2304      	movs	r3, #4
 8103ec0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8103ec2:	e01c      	b.n	8103efe <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8103ec4:	687b      	ldr	r3, [r7, #4]
 8103ec6:	681b      	ldr	r3, [r3, #0]
 8103ec8:	4a58      	ldr	r2, [pc, #352]	@ (810402c <HAL_ADC_PollForConversion+0x1d8>)
 8103eca:	4293      	cmp	r3, r2
 8103ecc:	d004      	beq.n	8103ed8 <HAL_ADC_PollForConversion+0x84>
 8103ece:	687b      	ldr	r3, [r7, #4]
 8103ed0:	681b      	ldr	r3, [r3, #0]
 8103ed2:	4a57      	ldr	r2, [pc, #348]	@ (8104030 <HAL_ADC_PollForConversion+0x1dc>)
 8103ed4:	4293      	cmp	r3, r2
 8103ed6:	d101      	bne.n	8103edc <HAL_ADC_PollForConversion+0x88>
 8103ed8:	4b56      	ldr	r3, [pc, #344]	@ (8104034 <HAL_ADC_PollForConversion+0x1e0>)
 8103eda:	e000      	b.n	8103ede <HAL_ADC_PollForConversion+0x8a>
 8103edc:	4b56      	ldr	r3, [pc, #344]	@ (8104038 <HAL_ADC_PollForConversion+0x1e4>)
 8103ede:	4618      	mov	r0, r3
 8103ee0:	f7ff fc0c 	bl	81036fc <LL_ADC_GetMultiDMATransfer>
 8103ee4:	4603      	mov	r3, r0
 8103ee6:	2b00      	cmp	r3, #0
 8103ee8:	d007      	beq.n	8103efa <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103eea:	687b      	ldr	r3, [r7, #4]
 8103eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103eee:	f043 0220 	orr.w	r2, r3, #32
 8103ef2:	687b      	ldr	r3, [r7, #4]
 8103ef4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8103ef6:	2301      	movs	r3, #1
 8103ef8:	e093      	b.n	8104022 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8103efa:	2304      	movs	r3, #4
 8103efc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8103efe:	f7ff fa9d 	bl	810343c <HAL_GetTick>
 8103f02:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8103f04:	e021      	b.n	8103f4a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8103f06:	683b      	ldr	r3, [r7, #0]
 8103f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103f0c:	d01d      	beq.n	8103f4a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8103f0e:	f7ff fa95 	bl	810343c <HAL_GetTick>
 8103f12:	4602      	mov	r2, r0
 8103f14:	693b      	ldr	r3, [r7, #16]
 8103f16:	1ad3      	subs	r3, r2, r3
 8103f18:	683a      	ldr	r2, [r7, #0]
 8103f1a:	429a      	cmp	r2, r3
 8103f1c:	d302      	bcc.n	8103f24 <HAL_ADC_PollForConversion+0xd0>
 8103f1e:	683b      	ldr	r3, [r7, #0]
 8103f20:	2b00      	cmp	r3, #0
 8103f22:	d112      	bne.n	8103f4a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8103f24:	687b      	ldr	r3, [r7, #4]
 8103f26:	681b      	ldr	r3, [r3, #0]
 8103f28:	681a      	ldr	r2, [r3, #0]
 8103f2a:	69fb      	ldr	r3, [r7, #28]
 8103f2c:	4013      	ands	r3, r2
 8103f2e:	2b00      	cmp	r3, #0
 8103f30:	d10b      	bne.n	8103f4a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8103f32:	687b      	ldr	r3, [r7, #4]
 8103f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103f36:	f043 0204 	orr.w	r2, r3, #4
 8103f3a:	687b      	ldr	r3, [r7, #4]
 8103f3c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8103f3e:	687b      	ldr	r3, [r7, #4]
 8103f40:	2200      	movs	r2, #0
 8103f42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8103f46:	2303      	movs	r3, #3
 8103f48:	e06b      	b.n	8104022 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8103f4a:	687b      	ldr	r3, [r7, #4]
 8103f4c:	681b      	ldr	r3, [r3, #0]
 8103f4e:	681a      	ldr	r2, [r3, #0]
 8103f50:	69fb      	ldr	r3, [r7, #28]
 8103f52:	4013      	ands	r3, r2
 8103f54:	2b00      	cmp	r3, #0
 8103f56:	d0d6      	beq.n	8103f06 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103f5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8103f60:	687b      	ldr	r3, [r7, #4]
 8103f62:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8103f64:	687b      	ldr	r3, [r7, #4]
 8103f66:	681b      	ldr	r3, [r3, #0]
 8103f68:	4618      	mov	r0, r3
 8103f6a:	f7ff fb2b 	bl	81035c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8103f6e:	4603      	mov	r3, r0
 8103f70:	2b00      	cmp	r3, #0
 8103f72:	d01c      	beq.n	8103fae <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8103f74:	687b      	ldr	r3, [r7, #4]
 8103f76:	7d5b      	ldrb	r3, [r3, #21]
 8103f78:	2b00      	cmp	r3, #0
 8103f7a:	d118      	bne.n	8103fae <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8103f7c:	687b      	ldr	r3, [r7, #4]
 8103f7e:	681b      	ldr	r3, [r3, #0]
 8103f80:	681b      	ldr	r3, [r3, #0]
 8103f82:	f003 0308 	and.w	r3, r3, #8
 8103f86:	2b08      	cmp	r3, #8
 8103f88:	d111      	bne.n	8103fae <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8103f8a:	687b      	ldr	r3, [r7, #4]
 8103f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103f8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8103f92:	687b      	ldr	r3, [r7, #4]
 8103f94:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8103f96:	687b      	ldr	r3, [r7, #4]
 8103f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103f9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8103f9e:	2b00      	cmp	r3, #0
 8103fa0:	d105      	bne.n	8103fae <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8103fa2:	687b      	ldr	r3, [r7, #4]
 8103fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103fa6:	f043 0201 	orr.w	r2, r3, #1
 8103faa:	687b      	ldr	r3, [r7, #4]
 8103fac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8103fae:	687b      	ldr	r3, [r7, #4]
 8103fb0:	681b      	ldr	r3, [r3, #0]
 8103fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8104030 <HAL_ADC_PollForConversion+0x1dc>)
 8103fb4:	4293      	cmp	r3, r2
 8103fb6:	d002      	beq.n	8103fbe <HAL_ADC_PollForConversion+0x16a>
 8103fb8:	687b      	ldr	r3, [r7, #4]
 8103fba:	681b      	ldr	r3, [r3, #0]
 8103fbc:	e000      	b.n	8103fc0 <HAL_ADC_PollForConversion+0x16c>
 8103fbe:	4b1b      	ldr	r3, [pc, #108]	@ (810402c <HAL_ADC_PollForConversion+0x1d8>)
 8103fc0:	687a      	ldr	r2, [r7, #4]
 8103fc2:	6812      	ldr	r2, [r2, #0]
 8103fc4:	4293      	cmp	r3, r2
 8103fc6:	d008      	beq.n	8103fda <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103fc8:	697b      	ldr	r3, [r7, #20]
 8103fca:	2b00      	cmp	r3, #0
 8103fcc:	d005      	beq.n	8103fda <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8103fce:	697b      	ldr	r3, [r7, #20]
 8103fd0:	2b05      	cmp	r3, #5
 8103fd2:	d002      	beq.n	8103fda <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8103fd4:	697b      	ldr	r3, [r7, #20]
 8103fd6:	2b09      	cmp	r3, #9
 8103fd8:	d104      	bne.n	8103fe4 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8103fda:	687b      	ldr	r3, [r7, #4]
 8103fdc:	681b      	ldr	r3, [r3, #0]
 8103fde:	68db      	ldr	r3, [r3, #12]
 8103fe0:	61bb      	str	r3, [r7, #24]
 8103fe2:	e00c      	b.n	8103ffe <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8103fe4:	687b      	ldr	r3, [r7, #4]
 8103fe6:	681b      	ldr	r3, [r3, #0]
 8103fe8:	4a11      	ldr	r2, [pc, #68]	@ (8104030 <HAL_ADC_PollForConversion+0x1dc>)
 8103fea:	4293      	cmp	r3, r2
 8103fec:	d002      	beq.n	8103ff4 <HAL_ADC_PollForConversion+0x1a0>
 8103fee:	687b      	ldr	r3, [r7, #4]
 8103ff0:	681b      	ldr	r3, [r3, #0]
 8103ff2:	e000      	b.n	8103ff6 <HAL_ADC_PollForConversion+0x1a2>
 8103ff4:	4b0d      	ldr	r3, [pc, #52]	@ (810402c <HAL_ADC_PollForConversion+0x1d8>)
 8103ff6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8103ff8:	68fb      	ldr	r3, [r7, #12]
 8103ffa:	68db      	ldr	r3, [r3, #12]
 8103ffc:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8103ffe:	69fb      	ldr	r3, [r7, #28]
 8104000:	2b08      	cmp	r3, #8
 8104002:	d104      	bne.n	810400e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8104004:	687b      	ldr	r3, [r7, #4]
 8104006:	681b      	ldr	r3, [r3, #0]
 8104008:	2208      	movs	r2, #8
 810400a:	601a      	str	r2, [r3, #0]
 810400c:	e008      	b.n	8104020 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 810400e:	69bb      	ldr	r3, [r7, #24]
 8104010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8104014:	2b00      	cmp	r3, #0
 8104016:	d103      	bne.n	8104020 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8104018:	687b      	ldr	r3, [r7, #4]
 810401a:	681b      	ldr	r3, [r3, #0]
 810401c:	220c      	movs	r2, #12
 810401e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8104020:	2300      	movs	r3, #0
}
 8104022:	4618      	mov	r0, r3
 8104024:	3720      	adds	r7, #32
 8104026:	46bd      	mov	sp, r7
 8104028:	bd80      	pop	{r7, pc}
 810402a:	bf00      	nop
 810402c:	40022000 	.word	0x40022000
 8104030:	40022100 	.word	0x40022100
 8104034:	40022300 	.word	0x40022300
 8104038:	58026300 	.word	0x58026300

0810403c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 810403c:	b480      	push	{r7}
 810403e:	b083      	sub	sp, #12
 8104040:	af00      	add	r7, sp, #0
 8104042:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8104044:	687b      	ldr	r3, [r7, #4]
 8104046:	681b      	ldr	r3, [r3, #0]
 8104048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 810404a:	4618      	mov	r0, r3
 810404c:	370c      	adds	r7, #12
 810404e:	46bd      	mov	sp, r7
 8104050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104054:	4770      	bx	lr
	...

08104058 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8104058:	b590      	push	{r4, r7, lr}
 810405a:	b0a1      	sub	sp, #132	@ 0x84
 810405c:	af00      	add	r7, sp, #0
 810405e:	6078      	str	r0, [r7, #4]
 8104060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8104062:	2300      	movs	r3, #0
 8104064:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8104068:	2300      	movs	r3, #0
 810406a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 810406c:	683b      	ldr	r3, [r7, #0]
 810406e:	68db      	ldr	r3, [r3, #12]
 8104070:	4a65      	ldr	r2, [pc, #404]	@ (8104208 <HAL_ADC_ConfigChannel+0x1b0>)
 8104072:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8104074:	687b      	ldr	r3, [r7, #4]
 8104076:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 810407a:	2b01      	cmp	r3, #1
 810407c:	d101      	bne.n	8104082 <HAL_ADC_ConfigChannel+0x2a>
 810407e:	2302      	movs	r3, #2
 8104080:	e32e      	b.n	81046e0 <HAL_ADC_ConfigChannel+0x688>
 8104082:	687b      	ldr	r3, [r7, #4]
 8104084:	2201      	movs	r2, #1
 8104086:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810408a:	687b      	ldr	r3, [r7, #4]
 810408c:	681b      	ldr	r3, [r3, #0]
 810408e:	4618      	mov	r0, r3
 8104090:	f7ff fc06 	bl	81038a0 <LL_ADC_REG_IsConversionOngoing>
 8104094:	4603      	mov	r3, r0
 8104096:	2b00      	cmp	r3, #0
 8104098:	f040 8313 	bne.w	81046c2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 810409c:	683b      	ldr	r3, [r7, #0]
 810409e:	681b      	ldr	r3, [r3, #0]
 81040a0:	2b00      	cmp	r3, #0
 81040a2:	db2c      	blt.n	81040fe <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 81040a4:	683b      	ldr	r3, [r7, #0]
 81040a6:	681b      	ldr	r3, [r3, #0]
 81040a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81040ac:	2b00      	cmp	r3, #0
 81040ae:	d108      	bne.n	81040c2 <HAL_ADC_ConfigChannel+0x6a>
 81040b0:	683b      	ldr	r3, [r7, #0]
 81040b2:	681b      	ldr	r3, [r3, #0]
 81040b4:	0e9b      	lsrs	r3, r3, #26
 81040b6:	f003 031f 	and.w	r3, r3, #31
 81040ba:	2201      	movs	r2, #1
 81040bc:	fa02 f303 	lsl.w	r3, r2, r3
 81040c0:	e016      	b.n	81040f0 <HAL_ADC_ConfigChannel+0x98>
 81040c2:	683b      	ldr	r3, [r7, #0]
 81040c4:	681b      	ldr	r3, [r3, #0]
 81040c6:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81040c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 81040ca:	fa93 f3a3 	rbit	r3, r3
 81040ce:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 81040d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 81040d2:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 81040d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 81040d6:	2b00      	cmp	r3, #0
 81040d8:	d101      	bne.n	81040de <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 81040da:	2320      	movs	r3, #32
 81040dc:	e003      	b.n	81040e6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 81040de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 81040e0:	fab3 f383 	clz	r3, r3
 81040e4:	b2db      	uxtb	r3, r3
 81040e6:	f003 031f 	and.w	r3, r3, #31
 81040ea:	2201      	movs	r2, #1
 81040ec:	fa02 f303 	lsl.w	r3, r2, r3
 81040f0:	687a      	ldr	r2, [r7, #4]
 81040f2:	6812      	ldr	r2, [r2, #0]
 81040f4:	69d1      	ldr	r1, [r2, #28]
 81040f6:	687a      	ldr	r2, [r7, #4]
 81040f8:	6812      	ldr	r2, [r2, #0]
 81040fa:	430b      	orrs	r3, r1
 81040fc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 81040fe:	687b      	ldr	r3, [r7, #4]
 8104100:	6818      	ldr	r0, [r3, #0]
 8104102:	683b      	ldr	r3, [r7, #0]
 8104104:	6859      	ldr	r1, [r3, #4]
 8104106:	683b      	ldr	r3, [r7, #0]
 8104108:	681b      	ldr	r3, [r3, #0]
 810410a:	461a      	mov	r2, r3
 810410c:	f7ff fa6d 	bl	81035ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8104110:	687b      	ldr	r3, [r7, #4]
 8104112:	681b      	ldr	r3, [r3, #0]
 8104114:	4618      	mov	r0, r3
 8104116:	f7ff fbc3 	bl	81038a0 <LL_ADC_REG_IsConversionOngoing>
 810411a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 810411c:	687b      	ldr	r3, [r7, #4]
 810411e:	681b      	ldr	r3, [r3, #0]
 8104120:	4618      	mov	r0, r3
 8104122:	f7ff fbe4 	bl	81038ee <LL_ADC_INJ_IsConversionOngoing>
 8104126:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8104128:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810412a:	2b00      	cmp	r3, #0
 810412c:	f040 80b8 	bne.w	81042a0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8104130:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8104132:	2b00      	cmp	r3, #0
 8104134:	f040 80b4 	bne.w	81042a0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8104138:	687b      	ldr	r3, [r7, #4]
 810413a:	6818      	ldr	r0, [r3, #0]
 810413c:	683b      	ldr	r3, [r7, #0]
 810413e:	6819      	ldr	r1, [r3, #0]
 8104140:	683b      	ldr	r3, [r7, #0]
 8104142:	689b      	ldr	r3, [r3, #8]
 8104144:	461a      	mov	r2, r3
 8104146:	f7ff fa7c 	bl	8103642 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 810414a:	4b30      	ldr	r3, [pc, #192]	@ (810420c <HAL_ADC_ConfigChannel+0x1b4>)
 810414c:	681b      	ldr	r3, [r3, #0]
 810414e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8104152:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104156:	d10b      	bne.n	8104170 <HAL_ADC_ConfigChannel+0x118>
 8104158:	683b      	ldr	r3, [r7, #0]
 810415a:	695a      	ldr	r2, [r3, #20]
 810415c:	687b      	ldr	r3, [r7, #4]
 810415e:	681b      	ldr	r3, [r3, #0]
 8104160:	68db      	ldr	r3, [r3, #12]
 8104162:	089b      	lsrs	r3, r3, #2
 8104164:	f003 0307 	and.w	r3, r3, #7
 8104168:	005b      	lsls	r3, r3, #1
 810416a:	fa02 f303 	lsl.w	r3, r2, r3
 810416e:	e01d      	b.n	81041ac <HAL_ADC_ConfigChannel+0x154>
 8104170:	687b      	ldr	r3, [r7, #4]
 8104172:	681b      	ldr	r3, [r3, #0]
 8104174:	68db      	ldr	r3, [r3, #12]
 8104176:	f003 0310 	and.w	r3, r3, #16
 810417a:	2b00      	cmp	r3, #0
 810417c:	d10b      	bne.n	8104196 <HAL_ADC_ConfigChannel+0x13e>
 810417e:	683b      	ldr	r3, [r7, #0]
 8104180:	695a      	ldr	r2, [r3, #20]
 8104182:	687b      	ldr	r3, [r7, #4]
 8104184:	681b      	ldr	r3, [r3, #0]
 8104186:	68db      	ldr	r3, [r3, #12]
 8104188:	089b      	lsrs	r3, r3, #2
 810418a:	f003 0307 	and.w	r3, r3, #7
 810418e:	005b      	lsls	r3, r3, #1
 8104190:	fa02 f303 	lsl.w	r3, r2, r3
 8104194:	e00a      	b.n	81041ac <HAL_ADC_ConfigChannel+0x154>
 8104196:	683b      	ldr	r3, [r7, #0]
 8104198:	695a      	ldr	r2, [r3, #20]
 810419a:	687b      	ldr	r3, [r7, #4]
 810419c:	681b      	ldr	r3, [r3, #0]
 810419e:	68db      	ldr	r3, [r3, #12]
 81041a0:	089b      	lsrs	r3, r3, #2
 81041a2:	f003 0304 	and.w	r3, r3, #4
 81041a6:	005b      	lsls	r3, r3, #1
 81041a8:	fa02 f303 	lsl.w	r3, r2, r3
 81041ac:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 81041ae:	683b      	ldr	r3, [r7, #0]
 81041b0:	691b      	ldr	r3, [r3, #16]
 81041b2:	2b04      	cmp	r3, #4
 81041b4:	d02c      	beq.n	8104210 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 81041b6:	687b      	ldr	r3, [r7, #4]
 81041b8:	6818      	ldr	r0, [r3, #0]
 81041ba:	683b      	ldr	r3, [r7, #0]
 81041bc:	6919      	ldr	r1, [r3, #16]
 81041be:	683b      	ldr	r3, [r7, #0]
 81041c0:	681a      	ldr	r2, [r3, #0]
 81041c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 81041c4:	f7ff f9aa 	bl	810351c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 81041c8:	687b      	ldr	r3, [r7, #4]
 81041ca:	6818      	ldr	r0, [r3, #0]
 81041cc:	683b      	ldr	r3, [r7, #0]
 81041ce:	6919      	ldr	r1, [r3, #16]
 81041d0:	683b      	ldr	r3, [r7, #0]
 81041d2:	7e5b      	ldrb	r3, [r3, #25]
 81041d4:	2b01      	cmp	r3, #1
 81041d6:	d102      	bne.n	81041de <HAL_ADC_ConfigChannel+0x186>
 81041d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81041dc:	e000      	b.n	81041e0 <HAL_ADC_ConfigChannel+0x188>
 81041de:	2300      	movs	r3, #0
 81041e0:	461a      	mov	r2, r3
 81041e2:	f7ff f9d4 	bl	810358e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 81041e6:	687b      	ldr	r3, [r7, #4]
 81041e8:	6818      	ldr	r0, [r3, #0]
 81041ea:	683b      	ldr	r3, [r7, #0]
 81041ec:	6919      	ldr	r1, [r3, #16]
 81041ee:	683b      	ldr	r3, [r7, #0]
 81041f0:	7e1b      	ldrb	r3, [r3, #24]
 81041f2:	2b01      	cmp	r3, #1
 81041f4:	d102      	bne.n	81041fc <HAL_ADC_ConfigChannel+0x1a4>
 81041f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81041fa:	e000      	b.n	81041fe <HAL_ADC_ConfigChannel+0x1a6>
 81041fc:	2300      	movs	r3, #0
 81041fe:	461a      	mov	r2, r3
 8104200:	f7ff f9ac 	bl	810355c <LL_ADC_SetDataRightShift>
 8104204:	e04c      	b.n	81042a0 <HAL_ADC_ConfigChannel+0x248>
 8104206:	bf00      	nop
 8104208:	47ff0000 	.word	0x47ff0000
 810420c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8104210:	687b      	ldr	r3, [r7, #4]
 8104212:	681b      	ldr	r3, [r3, #0]
 8104214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104216:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810421a:	683b      	ldr	r3, [r7, #0]
 810421c:	681b      	ldr	r3, [r3, #0]
 810421e:	069b      	lsls	r3, r3, #26
 8104220:	429a      	cmp	r2, r3
 8104222:	d107      	bne.n	8104234 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8104224:	687b      	ldr	r3, [r7, #4]
 8104226:	681b      	ldr	r3, [r3, #0]
 8104228:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 810422a:	687b      	ldr	r3, [r7, #4]
 810422c:	681b      	ldr	r3, [r3, #0]
 810422e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8104232:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8104234:	687b      	ldr	r3, [r7, #4]
 8104236:	681b      	ldr	r3, [r3, #0]
 8104238:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810423a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810423e:	683b      	ldr	r3, [r7, #0]
 8104240:	681b      	ldr	r3, [r3, #0]
 8104242:	069b      	lsls	r3, r3, #26
 8104244:	429a      	cmp	r2, r3
 8104246:	d107      	bne.n	8104258 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8104248:	687b      	ldr	r3, [r7, #4]
 810424a:	681b      	ldr	r3, [r3, #0]
 810424c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 810424e:	687b      	ldr	r3, [r7, #4]
 8104250:	681b      	ldr	r3, [r3, #0]
 8104252:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8104256:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8104258:	687b      	ldr	r3, [r7, #4]
 810425a:	681b      	ldr	r3, [r3, #0]
 810425c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810425e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104262:	683b      	ldr	r3, [r7, #0]
 8104264:	681b      	ldr	r3, [r3, #0]
 8104266:	069b      	lsls	r3, r3, #26
 8104268:	429a      	cmp	r2, r3
 810426a:	d107      	bne.n	810427c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 810426c:	687b      	ldr	r3, [r7, #4]
 810426e:	681b      	ldr	r3, [r3, #0]
 8104270:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8104272:	687b      	ldr	r3, [r7, #4]
 8104274:	681b      	ldr	r3, [r3, #0]
 8104276:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810427a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810427c:	687b      	ldr	r3, [r7, #4]
 810427e:	681b      	ldr	r3, [r3, #0]
 8104280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104282:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104286:	683b      	ldr	r3, [r7, #0]
 8104288:	681b      	ldr	r3, [r3, #0]
 810428a:	069b      	lsls	r3, r3, #26
 810428c:	429a      	cmp	r2, r3
 810428e:	d107      	bne.n	81042a0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8104290:	687b      	ldr	r3, [r7, #4]
 8104292:	681b      	ldr	r3, [r3, #0]
 8104294:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8104296:	687b      	ldr	r3, [r7, #4]
 8104298:	681b      	ldr	r3, [r3, #0]
 810429a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810429e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81042a0:	687b      	ldr	r3, [r7, #4]
 81042a2:	681b      	ldr	r3, [r3, #0]
 81042a4:	4618      	mov	r0, r3
 81042a6:	f7ff faad 	bl	8103804 <LL_ADC_IsEnabled>
 81042aa:	4603      	mov	r3, r0
 81042ac:	2b00      	cmp	r3, #0
 81042ae:	f040 8211 	bne.w	81046d4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 81042b2:	687b      	ldr	r3, [r7, #4]
 81042b4:	6818      	ldr	r0, [r3, #0]
 81042b6:	683b      	ldr	r3, [r7, #0]
 81042b8:	6819      	ldr	r1, [r3, #0]
 81042ba:	683b      	ldr	r3, [r7, #0]
 81042bc:	68db      	ldr	r3, [r3, #12]
 81042be:	461a      	mov	r2, r3
 81042c0:	f7ff f9ea 	bl	8103698 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 81042c4:	683b      	ldr	r3, [r7, #0]
 81042c6:	68db      	ldr	r3, [r3, #12]
 81042c8:	4aa1      	ldr	r2, [pc, #644]	@ (8104550 <HAL_ADC_ConfigChannel+0x4f8>)
 81042ca:	4293      	cmp	r3, r2
 81042cc:	f040 812e 	bne.w	810452c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81042d0:	687b      	ldr	r3, [r7, #4]
 81042d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81042d4:	683b      	ldr	r3, [r7, #0]
 81042d6:	681b      	ldr	r3, [r3, #0]
 81042d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81042dc:	2b00      	cmp	r3, #0
 81042de:	d10b      	bne.n	81042f8 <HAL_ADC_ConfigChannel+0x2a0>
 81042e0:	683b      	ldr	r3, [r7, #0]
 81042e2:	681b      	ldr	r3, [r3, #0]
 81042e4:	0e9b      	lsrs	r3, r3, #26
 81042e6:	3301      	adds	r3, #1
 81042e8:	f003 031f 	and.w	r3, r3, #31
 81042ec:	2b09      	cmp	r3, #9
 81042ee:	bf94      	ite	ls
 81042f0:	2301      	movls	r3, #1
 81042f2:	2300      	movhi	r3, #0
 81042f4:	b2db      	uxtb	r3, r3
 81042f6:	e019      	b.n	810432c <HAL_ADC_ConfigChannel+0x2d4>
 81042f8:	683b      	ldr	r3, [r7, #0]
 81042fa:	681b      	ldr	r3, [r3, #0]
 81042fc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81042fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8104300:	fa93 f3a3 	rbit	r3, r3
 8104304:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8104306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8104308:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 810430a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810430c:	2b00      	cmp	r3, #0
 810430e:	d101      	bne.n	8104314 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8104310:	2320      	movs	r3, #32
 8104312:	e003      	b.n	810431c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8104314:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8104316:	fab3 f383 	clz	r3, r3
 810431a:	b2db      	uxtb	r3, r3
 810431c:	3301      	adds	r3, #1
 810431e:	f003 031f 	and.w	r3, r3, #31
 8104322:	2b09      	cmp	r3, #9
 8104324:	bf94      	ite	ls
 8104326:	2301      	movls	r3, #1
 8104328:	2300      	movhi	r3, #0
 810432a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 810432c:	2b00      	cmp	r3, #0
 810432e:	d079      	beq.n	8104424 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8104330:	683b      	ldr	r3, [r7, #0]
 8104332:	681b      	ldr	r3, [r3, #0]
 8104334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104338:	2b00      	cmp	r3, #0
 810433a:	d107      	bne.n	810434c <HAL_ADC_ConfigChannel+0x2f4>
 810433c:	683b      	ldr	r3, [r7, #0]
 810433e:	681b      	ldr	r3, [r3, #0]
 8104340:	0e9b      	lsrs	r3, r3, #26
 8104342:	3301      	adds	r3, #1
 8104344:	069b      	lsls	r3, r3, #26
 8104346:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810434a:	e015      	b.n	8104378 <HAL_ADC_ConfigChannel+0x320>
 810434c:	683b      	ldr	r3, [r7, #0]
 810434e:	681b      	ldr	r3, [r3, #0]
 8104350:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8104354:	fa93 f3a3 	rbit	r3, r3
 8104358:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 810435a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810435c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 810435e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8104360:	2b00      	cmp	r3, #0
 8104362:	d101      	bne.n	8104368 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8104364:	2320      	movs	r3, #32
 8104366:	e003      	b.n	8104370 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8104368:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810436a:	fab3 f383 	clz	r3, r3
 810436e:	b2db      	uxtb	r3, r3
 8104370:	3301      	adds	r3, #1
 8104372:	069b      	lsls	r3, r3, #26
 8104374:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104378:	683b      	ldr	r3, [r7, #0]
 810437a:	681b      	ldr	r3, [r3, #0]
 810437c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104380:	2b00      	cmp	r3, #0
 8104382:	d109      	bne.n	8104398 <HAL_ADC_ConfigChannel+0x340>
 8104384:	683b      	ldr	r3, [r7, #0]
 8104386:	681b      	ldr	r3, [r3, #0]
 8104388:	0e9b      	lsrs	r3, r3, #26
 810438a:	3301      	adds	r3, #1
 810438c:	f003 031f 	and.w	r3, r3, #31
 8104390:	2101      	movs	r1, #1
 8104392:	fa01 f303 	lsl.w	r3, r1, r3
 8104396:	e017      	b.n	81043c8 <HAL_ADC_ConfigChannel+0x370>
 8104398:	683b      	ldr	r3, [r7, #0]
 810439a:	681b      	ldr	r3, [r3, #0]
 810439c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810439e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81043a0:	fa93 f3a3 	rbit	r3, r3
 81043a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 81043a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81043a8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 81043aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81043ac:	2b00      	cmp	r3, #0
 81043ae:	d101      	bne.n	81043b4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 81043b0:	2320      	movs	r3, #32
 81043b2:	e003      	b.n	81043bc <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 81043b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81043b6:	fab3 f383 	clz	r3, r3
 81043ba:	b2db      	uxtb	r3, r3
 81043bc:	3301      	adds	r3, #1
 81043be:	f003 031f 	and.w	r3, r3, #31
 81043c2:	2101      	movs	r1, #1
 81043c4:	fa01 f303 	lsl.w	r3, r1, r3
 81043c8:	ea42 0103 	orr.w	r1, r2, r3
 81043cc:	683b      	ldr	r3, [r7, #0]
 81043ce:	681b      	ldr	r3, [r3, #0]
 81043d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81043d4:	2b00      	cmp	r3, #0
 81043d6:	d10a      	bne.n	81043ee <HAL_ADC_ConfigChannel+0x396>
 81043d8:	683b      	ldr	r3, [r7, #0]
 81043da:	681b      	ldr	r3, [r3, #0]
 81043dc:	0e9b      	lsrs	r3, r3, #26
 81043de:	3301      	adds	r3, #1
 81043e0:	f003 021f 	and.w	r2, r3, #31
 81043e4:	4613      	mov	r3, r2
 81043e6:	005b      	lsls	r3, r3, #1
 81043e8:	4413      	add	r3, r2
 81043ea:	051b      	lsls	r3, r3, #20
 81043ec:	e018      	b.n	8104420 <HAL_ADC_ConfigChannel+0x3c8>
 81043ee:	683b      	ldr	r3, [r7, #0]
 81043f0:	681b      	ldr	r3, [r3, #0]
 81043f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81043f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81043f6:	fa93 f3a3 	rbit	r3, r3
 81043fa:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 81043fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81043fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8104400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104402:	2b00      	cmp	r3, #0
 8104404:	d101      	bne.n	810440a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8104406:	2320      	movs	r3, #32
 8104408:	e003      	b.n	8104412 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 810440a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810440c:	fab3 f383 	clz	r3, r3
 8104410:	b2db      	uxtb	r3, r3
 8104412:	3301      	adds	r3, #1
 8104414:	f003 021f 	and.w	r2, r3, #31
 8104418:	4613      	mov	r3, r2
 810441a:	005b      	lsls	r3, r3, #1
 810441c:	4413      	add	r3, r2
 810441e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8104420:	430b      	orrs	r3, r1
 8104422:	e07e      	b.n	8104522 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8104424:	683b      	ldr	r3, [r7, #0]
 8104426:	681b      	ldr	r3, [r3, #0]
 8104428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810442c:	2b00      	cmp	r3, #0
 810442e:	d107      	bne.n	8104440 <HAL_ADC_ConfigChannel+0x3e8>
 8104430:	683b      	ldr	r3, [r7, #0]
 8104432:	681b      	ldr	r3, [r3, #0]
 8104434:	0e9b      	lsrs	r3, r3, #26
 8104436:	3301      	adds	r3, #1
 8104438:	069b      	lsls	r3, r3, #26
 810443a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810443e:	e015      	b.n	810446c <HAL_ADC_ConfigChannel+0x414>
 8104440:	683b      	ldr	r3, [r7, #0]
 8104442:	681b      	ldr	r3, [r3, #0]
 8104444:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104448:	fa93 f3a3 	rbit	r3, r3
 810444c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 810444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104450:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8104452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104454:	2b00      	cmp	r3, #0
 8104456:	d101      	bne.n	810445c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8104458:	2320      	movs	r3, #32
 810445a:	e003      	b.n	8104464 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 810445c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810445e:	fab3 f383 	clz	r3, r3
 8104462:	b2db      	uxtb	r3, r3
 8104464:	3301      	adds	r3, #1
 8104466:	069b      	lsls	r3, r3, #26
 8104468:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810446c:	683b      	ldr	r3, [r7, #0]
 810446e:	681b      	ldr	r3, [r3, #0]
 8104470:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104474:	2b00      	cmp	r3, #0
 8104476:	d109      	bne.n	810448c <HAL_ADC_ConfigChannel+0x434>
 8104478:	683b      	ldr	r3, [r7, #0]
 810447a:	681b      	ldr	r3, [r3, #0]
 810447c:	0e9b      	lsrs	r3, r3, #26
 810447e:	3301      	adds	r3, #1
 8104480:	f003 031f 	and.w	r3, r3, #31
 8104484:	2101      	movs	r1, #1
 8104486:	fa01 f303 	lsl.w	r3, r1, r3
 810448a:	e017      	b.n	81044bc <HAL_ADC_ConfigChannel+0x464>
 810448c:	683b      	ldr	r3, [r7, #0]
 810448e:	681b      	ldr	r3, [r3, #0]
 8104490:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104492:	69fb      	ldr	r3, [r7, #28]
 8104494:	fa93 f3a3 	rbit	r3, r3
 8104498:	61bb      	str	r3, [r7, #24]
  return result;
 810449a:	69bb      	ldr	r3, [r7, #24]
 810449c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 810449e:	6a3b      	ldr	r3, [r7, #32]
 81044a0:	2b00      	cmp	r3, #0
 81044a2:	d101      	bne.n	81044a8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 81044a4:	2320      	movs	r3, #32
 81044a6:	e003      	b.n	81044b0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 81044a8:	6a3b      	ldr	r3, [r7, #32]
 81044aa:	fab3 f383 	clz	r3, r3
 81044ae:	b2db      	uxtb	r3, r3
 81044b0:	3301      	adds	r3, #1
 81044b2:	f003 031f 	and.w	r3, r3, #31
 81044b6:	2101      	movs	r1, #1
 81044b8:	fa01 f303 	lsl.w	r3, r1, r3
 81044bc:	ea42 0103 	orr.w	r1, r2, r3
 81044c0:	683b      	ldr	r3, [r7, #0]
 81044c2:	681b      	ldr	r3, [r3, #0]
 81044c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81044c8:	2b00      	cmp	r3, #0
 81044ca:	d10d      	bne.n	81044e8 <HAL_ADC_ConfigChannel+0x490>
 81044cc:	683b      	ldr	r3, [r7, #0]
 81044ce:	681b      	ldr	r3, [r3, #0]
 81044d0:	0e9b      	lsrs	r3, r3, #26
 81044d2:	3301      	adds	r3, #1
 81044d4:	f003 021f 	and.w	r2, r3, #31
 81044d8:	4613      	mov	r3, r2
 81044da:	005b      	lsls	r3, r3, #1
 81044dc:	4413      	add	r3, r2
 81044de:	3b1e      	subs	r3, #30
 81044e0:	051b      	lsls	r3, r3, #20
 81044e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81044e6:	e01b      	b.n	8104520 <HAL_ADC_ConfigChannel+0x4c8>
 81044e8:	683b      	ldr	r3, [r7, #0]
 81044ea:	681b      	ldr	r3, [r3, #0]
 81044ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81044ee:	693b      	ldr	r3, [r7, #16]
 81044f0:	fa93 f3a3 	rbit	r3, r3
 81044f4:	60fb      	str	r3, [r7, #12]
  return result;
 81044f6:	68fb      	ldr	r3, [r7, #12]
 81044f8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 81044fa:	697b      	ldr	r3, [r7, #20]
 81044fc:	2b00      	cmp	r3, #0
 81044fe:	d101      	bne.n	8104504 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8104500:	2320      	movs	r3, #32
 8104502:	e003      	b.n	810450c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8104504:	697b      	ldr	r3, [r7, #20]
 8104506:	fab3 f383 	clz	r3, r3
 810450a:	b2db      	uxtb	r3, r3
 810450c:	3301      	adds	r3, #1
 810450e:	f003 021f 	and.w	r2, r3, #31
 8104512:	4613      	mov	r3, r2
 8104514:	005b      	lsls	r3, r3, #1
 8104516:	4413      	add	r3, r2
 8104518:	3b1e      	subs	r3, #30
 810451a:	051b      	lsls	r3, r3, #20
 810451c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8104520:	430b      	orrs	r3, r1
 8104522:	683a      	ldr	r2, [r7, #0]
 8104524:	6892      	ldr	r2, [r2, #8]
 8104526:	4619      	mov	r1, r3
 8104528:	f7ff f88b 	bl	8103642 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 810452c:	683b      	ldr	r3, [r7, #0]
 810452e:	681b      	ldr	r3, [r3, #0]
 8104530:	2b00      	cmp	r3, #0
 8104532:	f280 80cf 	bge.w	81046d4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8104536:	687b      	ldr	r3, [r7, #4]
 8104538:	681b      	ldr	r3, [r3, #0]
 810453a:	4a06      	ldr	r2, [pc, #24]	@ (8104554 <HAL_ADC_ConfigChannel+0x4fc>)
 810453c:	4293      	cmp	r3, r2
 810453e:	d004      	beq.n	810454a <HAL_ADC_ConfigChannel+0x4f2>
 8104540:	687b      	ldr	r3, [r7, #4]
 8104542:	681b      	ldr	r3, [r3, #0]
 8104544:	4a04      	ldr	r2, [pc, #16]	@ (8104558 <HAL_ADC_ConfigChannel+0x500>)
 8104546:	4293      	cmp	r3, r2
 8104548:	d10a      	bne.n	8104560 <HAL_ADC_ConfigChannel+0x508>
 810454a:	4b04      	ldr	r3, [pc, #16]	@ (810455c <HAL_ADC_ConfigChannel+0x504>)
 810454c:	e009      	b.n	8104562 <HAL_ADC_ConfigChannel+0x50a>
 810454e:	bf00      	nop
 8104550:	47ff0000 	.word	0x47ff0000
 8104554:	40022000 	.word	0x40022000
 8104558:	40022100 	.word	0x40022100
 810455c:	40022300 	.word	0x40022300
 8104560:	4b61      	ldr	r3, [pc, #388]	@ (81046e8 <HAL_ADC_ConfigChannel+0x690>)
 8104562:	4618      	mov	r0, r3
 8104564:	f7fe ffcc 	bl	8103500 <LL_ADC_GetCommonPathInternalCh>
 8104568:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810456a:	687b      	ldr	r3, [r7, #4]
 810456c:	681b      	ldr	r3, [r3, #0]
 810456e:	4a5f      	ldr	r2, [pc, #380]	@ (81046ec <HAL_ADC_ConfigChannel+0x694>)
 8104570:	4293      	cmp	r3, r2
 8104572:	d004      	beq.n	810457e <HAL_ADC_ConfigChannel+0x526>
 8104574:	687b      	ldr	r3, [r7, #4]
 8104576:	681b      	ldr	r3, [r3, #0]
 8104578:	4a5d      	ldr	r2, [pc, #372]	@ (81046f0 <HAL_ADC_ConfigChannel+0x698>)
 810457a:	4293      	cmp	r3, r2
 810457c:	d10e      	bne.n	810459c <HAL_ADC_ConfigChannel+0x544>
 810457e:	485b      	ldr	r0, [pc, #364]	@ (81046ec <HAL_ADC_ConfigChannel+0x694>)
 8104580:	f7ff f940 	bl	8103804 <LL_ADC_IsEnabled>
 8104584:	4604      	mov	r4, r0
 8104586:	485a      	ldr	r0, [pc, #360]	@ (81046f0 <HAL_ADC_ConfigChannel+0x698>)
 8104588:	f7ff f93c 	bl	8103804 <LL_ADC_IsEnabled>
 810458c:	4603      	mov	r3, r0
 810458e:	4323      	orrs	r3, r4
 8104590:	2b00      	cmp	r3, #0
 8104592:	bf0c      	ite	eq
 8104594:	2301      	moveq	r3, #1
 8104596:	2300      	movne	r3, #0
 8104598:	b2db      	uxtb	r3, r3
 810459a:	e008      	b.n	81045ae <HAL_ADC_ConfigChannel+0x556>
 810459c:	4855      	ldr	r0, [pc, #340]	@ (81046f4 <HAL_ADC_ConfigChannel+0x69c>)
 810459e:	f7ff f931 	bl	8103804 <LL_ADC_IsEnabled>
 81045a2:	4603      	mov	r3, r0
 81045a4:	2b00      	cmp	r3, #0
 81045a6:	bf0c      	ite	eq
 81045a8:	2301      	moveq	r3, #1
 81045aa:	2300      	movne	r3, #0
 81045ac:	b2db      	uxtb	r3, r3
 81045ae:	2b00      	cmp	r3, #0
 81045b0:	d07d      	beq.n	81046ae <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 81045b2:	683b      	ldr	r3, [r7, #0]
 81045b4:	681b      	ldr	r3, [r3, #0]
 81045b6:	4a50      	ldr	r2, [pc, #320]	@ (81046f8 <HAL_ADC_ConfigChannel+0x6a0>)
 81045b8:	4293      	cmp	r3, r2
 81045ba:	d130      	bne.n	810461e <HAL_ADC_ConfigChannel+0x5c6>
 81045bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81045be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81045c2:	2b00      	cmp	r3, #0
 81045c4:	d12b      	bne.n	810461e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81045c6:	687b      	ldr	r3, [r7, #4]
 81045c8:	681b      	ldr	r3, [r3, #0]
 81045ca:	4a4a      	ldr	r2, [pc, #296]	@ (81046f4 <HAL_ADC_ConfigChannel+0x69c>)
 81045cc:	4293      	cmp	r3, r2
 81045ce:	f040 8081 	bne.w	81046d4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 81045d2:	687b      	ldr	r3, [r7, #4]
 81045d4:	681b      	ldr	r3, [r3, #0]
 81045d6:	4a45      	ldr	r2, [pc, #276]	@ (81046ec <HAL_ADC_ConfigChannel+0x694>)
 81045d8:	4293      	cmp	r3, r2
 81045da:	d004      	beq.n	81045e6 <HAL_ADC_ConfigChannel+0x58e>
 81045dc:	687b      	ldr	r3, [r7, #4]
 81045de:	681b      	ldr	r3, [r3, #0]
 81045e0:	4a43      	ldr	r2, [pc, #268]	@ (81046f0 <HAL_ADC_ConfigChannel+0x698>)
 81045e2:	4293      	cmp	r3, r2
 81045e4:	d101      	bne.n	81045ea <HAL_ADC_ConfigChannel+0x592>
 81045e6:	4a45      	ldr	r2, [pc, #276]	@ (81046fc <HAL_ADC_ConfigChannel+0x6a4>)
 81045e8:	e000      	b.n	81045ec <HAL_ADC_ConfigChannel+0x594>
 81045ea:	4a3f      	ldr	r2, [pc, #252]	@ (81046e8 <HAL_ADC_ConfigChannel+0x690>)
 81045ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81045ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81045f2:	4619      	mov	r1, r3
 81045f4:	4610      	mov	r0, r2
 81045f6:	f7fe ff70 	bl	81034da <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 81045fa:	4b41      	ldr	r3, [pc, #260]	@ (8104700 <HAL_ADC_ConfigChannel+0x6a8>)
 81045fc:	681b      	ldr	r3, [r3, #0]
 81045fe:	099b      	lsrs	r3, r3, #6
 8104600:	4a40      	ldr	r2, [pc, #256]	@ (8104704 <HAL_ADC_ConfigChannel+0x6ac>)
 8104602:	fba2 2303 	umull	r2, r3, r2, r3
 8104606:	099b      	lsrs	r3, r3, #6
 8104608:	3301      	adds	r3, #1
 810460a:	005b      	lsls	r3, r3, #1
 810460c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 810460e:	e002      	b.n	8104616 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8104610:	68bb      	ldr	r3, [r7, #8]
 8104612:	3b01      	subs	r3, #1
 8104614:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8104616:	68bb      	ldr	r3, [r7, #8]
 8104618:	2b00      	cmp	r3, #0
 810461a:	d1f9      	bne.n	8104610 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 810461c:	e05a      	b.n	81046d4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 810461e:	683b      	ldr	r3, [r7, #0]
 8104620:	681b      	ldr	r3, [r3, #0]
 8104622:	4a39      	ldr	r2, [pc, #228]	@ (8104708 <HAL_ADC_ConfigChannel+0x6b0>)
 8104624:	4293      	cmp	r3, r2
 8104626:	d11e      	bne.n	8104666 <HAL_ADC_ConfigChannel+0x60e>
 8104628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810462a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810462e:	2b00      	cmp	r3, #0
 8104630:	d119      	bne.n	8104666 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8104632:	687b      	ldr	r3, [r7, #4]
 8104634:	681b      	ldr	r3, [r3, #0]
 8104636:	4a2f      	ldr	r2, [pc, #188]	@ (81046f4 <HAL_ADC_ConfigChannel+0x69c>)
 8104638:	4293      	cmp	r3, r2
 810463a:	d14b      	bne.n	81046d4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 810463c:	687b      	ldr	r3, [r7, #4]
 810463e:	681b      	ldr	r3, [r3, #0]
 8104640:	4a2a      	ldr	r2, [pc, #168]	@ (81046ec <HAL_ADC_ConfigChannel+0x694>)
 8104642:	4293      	cmp	r3, r2
 8104644:	d004      	beq.n	8104650 <HAL_ADC_ConfigChannel+0x5f8>
 8104646:	687b      	ldr	r3, [r7, #4]
 8104648:	681b      	ldr	r3, [r3, #0]
 810464a:	4a29      	ldr	r2, [pc, #164]	@ (81046f0 <HAL_ADC_ConfigChannel+0x698>)
 810464c:	4293      	cmp	r3, r2
 810464e:	d101      	bne.n	8104654 <HAL_ADC_ConfigChannel+0x5fc>
 8104650:	4a2a      	ldr	r2, [pc, #168]	@ (81046fc <HAL_ADC_ConfigChannel+0x6a4>)
 8104652:	e000      	b.n	8104656 <HAL_ADC_ConfigChannel+0x5fe>
 8104654:	4a24      	ldr	r2, [pc, #144]	@ (81046e8 <HAL_ADC_ConfigChannel+0x690>)
 8104656:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104658:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810465c:	4619      	mov	r1, r3
 810465e:	4610      	mov	r0, r2
 8104660:	f7fe ff3b 	bl	81034da <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8104664:	e036      	b.n	81046d4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8104666:	683b      	ldr	r3, [r7, #0]
 8104668:	681b      	ldr	r3, [r3, #0]
 810466a:	4a28      	ldr	r2, [pc, #160]	@ (810470c <HAL_ADC_ConfigChannel+0x6b4>)
 810466c:	4293      	cmp	r3, r2
 810466e:	d131      	bne.n	81046d4 <HAL_ADC_ConfigChannel+0x67c>
 8104670:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8104676:	2b00      	cmp	r3, #0
 8104678:	d12c      	bne.n	81046d4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 810467a:	687b      	ldr	r3, [r7, #4]
 810467c:	681b      	ldr	r3, [r3, #0]
 810467e:	4a1d      	ldr	r2, [pc, #116]	@ (81046f4 <HAL_ADC_ConfigChannel+0x69c>)
 8104680:	4293      	cmp	r3, r2
 8104682:	d127      	bne.n	81046d4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8104684:	687b      	ldr	r3, [r7, #4]
 8104686:	681b      	ldr	r3, [r3, #0]
 8104688:	4a18      	ldr	r2, [pc, #96]	@ (81046ec <HAL_ADC_ConfigChannel+0x694>)
 810468a:	4293      	cmp	r3, r2
 810468c:	d004      	beq.n	8104698 <HAL_ADC_ConfigChannel+0x640>
 810468e:	687b      	ldr	r3, [r7, #4]
 8104690:	681b      	ldr	r3, [r3, #0]
 8104692:	4a17      	ldr	r2, [pc, #92]	@ (81046f0 <HAL_ADC_ConfigChannel+0x698>)
 8104694:	4293      	cmp	r3, r2
 8104696:	d101      	bne.n	810469c <HAL_ADC_ConfigChannel+0x644>
 8104698:	4a18      	ldr	r2, [pc, #96]	@ (81046fc <HAL_ADC_ConfigChannel+0x6a4>)
 810469a:	e000      	b.n	810469e <HAL_ADC_ConfigChannel+0x646>
 810469c:	4a12      	ldr	r2, [pc, #72]	@ (81046e8 <HAL_ADC_ConfigChannel+0x690>)
 810469e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81046a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81046a4:	4619      	mov	r1, r3
 81046a6:	4610      	mov	r0, r2
 81046a8:	f7fe ff17 	bl	81034da <LL_ADC_SetCommonPathInternalCh>
 81046ac:	e012      	b.n	81046d4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81046ae:	687b      	ldr	r3, [r7, #4]
 81046b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81046b2:	f043 0220 	orr.w	r2, r3, #32
 81046b6:	687b      	ldr	r3, [r7, #4]
 81046b8:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 81046ba:	2301      	movs	r3, #1
 81046bc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 81046c0:	e008      	b.n	81046d4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81046c2:	687b      	ldr	r3, [r7, #4]
 81046c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81046c6:	f043 0220 	orr.w	r2, r3, #32
 81046ca:	687b      	ldr	r3, [r7, #4]
 81046cc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 81046ce:	2301      	movs	r3, #1
 81046d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81046d4:	687b      	ldr	r3, [r7, #4]
 81046d6:	2200      	movs	r2, #0
 81046d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 81046dc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 81046e0:	4618      	mov	r0, r3
 81046e2:	3784      	adds	r7, #132	@ 0x84
 81046e4:	46bd      	mov	sp, r7
 81046e6:	bd90      	pop	{r4, r7, pc}
 81046e8:	58026300 	.word	0x58026300
 81046ec:	40022000 	.word	0x40022000
 81046f0:	40022100 	.word	0x40022100
 81046f4:	58026000 	.word	0x58026000
 81046f8:	cb840000 	.word	0xcb840000
 81046fc:	40022300 	.word	0x40022300
 8104700:	10000000 	.word	0x10000000
 8104704:	053e2d63 	.word	0x053e2d63
 8104708:	c7520000 	.word	0xc7520000
 810470c:	cfb80000 	.word	0xcfb80000

08104710 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8104710:	b580      	push	{r7, lr}
 8104712:	b088      	sub	sp, #32
 8104714:	af00      	add	r7, sp, #0
 8104716:	6078      	str	r0, [r7, #4]
 8104718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 810471a:	2300      	movs	r3, #0
 810471c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 810471e:	683b      	ldr	r3, [r7, #0]
 8104720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8104722:	687b      	ldr	r3, [r7, #4]
 8104724:	681b      	ldr	r3, [r3, #0]
 8104726:	4618      	mov	r0, r3
 8104728:	f7ff f8ba 	bl	81038a0 <LL_ADC_REG_IsConversionOngoing>
 810472c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 810472e:	687b      	ldr	r3, [r7, #4]
 8104730:	681b      	ldr	r3, [r3, #0]
 8104732:	4618      	mov	r0, r3
 8104734:	f7ff f8db 	bl	81038ee <LL_ADC_INJ_IsConversionOngoing>
 8104738:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 810473a:	693b      	ldr	r3, [r7, #16]
 810473c:	2b00      	cmp	r3, #0
 810473e:	d103      	bne.n	8104748 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8104740:	68fb      	ldr	r3, [r7, #12]
 8104742:	2b00      	cmp	r3, #0
 8104744:	f000 8098 	beq.w	8104878 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8104748:	687b      	ldr	r3, [r7, #4]
 810474a:	681b      	ldr	r3, [r3, #0]
 810474c:	68db      	ldr	r3, [r3, #12]
 810474e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104752:	2b00      	cmp	r3, #0
 8104754:	d02a      	beq.n	81047ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8104756:	687b      	ldr	r3, [r7, #4]
 8104758:	7d5b      	ldrb	r3, [r3, #21]
 810475a:	2b01      	cmp	r3, #1
 810475c:	d126      	bne.n	81047ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 810475e:	687b      	ldr	r3, [r7, #4]
 8104760:	7d1b      	ldrb	r3, [r3, #20]
 8104762:	2b01      	cmp	r3, #1
 8104764:	d122      	bne.n	81047ac <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8104766:	2301      	movs	r3, #1
 8104768:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 810476a:	e014      	b.n	8104796 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 810476c:	69fb      	ldr	r3, [r7, #28]
 810476e:	4a45      	ldr	r2, [pc, #276]	@ (8104884 <ADC_ConversionStop+0x174>)
 8104770:	4293      	cmp	r3, r2
 8104772:	d90d      	bls.n	8104790 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8104774:	687b      	ldr	r3, [r7, #4]
 8104776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104778:	f043 0210 	orr.w	r2, r3, #16
 810477c:	687b      	ldr	r3, [r7, #4]
 810477e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8104780:	687b      	ldr	r3, [r7, #4]
 8104782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104784:	f043 0201 	orr.w	r2, r3, #1
 8104788:	687b      	ldr	r3, [r7, #4]
 810478a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 810478c:	2301      	movs	r3, #1
 810478e:	e074      	b.n	810487a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8104790:	69fb      	ldr	r3, [r7, #28]
 8104792:	3301      	adds	r3, #1
 8104794:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8104796:	687b      	ldr	r3, [r7, #4]
 8104798:	681b      	ldr	r3, [r3, #0]
 810479a:	681b      	ldr	r3, [r3, #0]
 810479c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81047a0:	2b40      	cmp	r3, #64	@ 0x40
 81047a2:	d1e3      	bne.n	810476c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 81047a4:	687b      	ldr	r3, [r7, #4]
 81047a6:	681b      	ldr	r3, [r3, #0]
 81047a8:	2240      	movs	r2, #64	@ 0x40
 81047aa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 81047ac:	69bb      	ldr	r3, [r7, #24]
 81047ae:	2b02      	cmp	r3, #2
 81047b0:	d014      	beq.n	81047dc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 81047b2:	687b      	ldr	r3, [r7, #4]
 81047b4:	681b      	ldr	r3, [r3, #0]
 81047b6:	4618      	mov	r0, r3
 81047b8:	f7ff f872 	bl	81038a0 <LL_ADC_REG_IsConversionOngoing>
 81047bc:	4603      	mov	r3, r0
 81047be:	2b00      	cmp	r3, #0
 81047c0:	d00c      	beq.n	81047dc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 81047c2:	687b      	ldr	r3, [r7, #4]
 81047c4:	681b      	ldr	r3, [r3, #0]
 81047c6:	4618      	mov	r0, r3
 81047c8:	f7ff f82f 	bl	810382a <LL_ADC_IsDisableOngoing>
 81047cc:	4603      	mov	r3, r0
 81047ce:	2b00      	cmp	r3, #0
 81047d0:	d104      	bne.n	81047dc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 81047d2:	687b      	ldr	r3, [r7, #4]
 81047d4:	681b      	ldr	r3, [r3, #0]
 81047d6:	4618      	mov	r0, r3
 81047d8:	f7ff f84e 	bl	8103878 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 81047dc:	69bb      	ldr	r3, [r7, #24]
 81047de:	2b01      	cmp	r3, #1
 81047e0:	d014      	beq.n	810480c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 81047e2:	687b      	ldr	r3, [r7, #4]
 81047e4:	681b      	ldr	r3, [r3, #0]
 81047e6:	4618      	mov	r0, r3
 81047e8:	f7ff f881 	bl	81038ee <LL_ADC_INJ_IsConversionOngoing>
 81047ec:	4603      	mov	r3, r0
 81047ee:	2b00      	cmp	r3, #0
 81047f0:	d00c      	beq.n	810480c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 81047f2:	687b      	ldr	r3, [r7, #4]
 81047f4:	681b      	ldr	r3, [r3, #0]
 81047f6:	4618      	mov	r0, r3
 81047f8:	f7ff f817 	bl	810382a <LL_ADC_IsDisableOngoing>
 81047fc:	4603      	mov	r3, r0
 81047fe:	2b00      	cmp	r3, #0
 8104800:	d104      	bne.n	810480c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8104802:	687b      	ldr	r3, [r7, #4]
 8104804:	681b      	ldr	r3, [r3, #0]
 8104806:	4618      	mov	r0, r3
 8104808:	f7ff f85d 	bl	81038c6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 810480c:	69bb      	ldr	r3, [r7, #24]
 810480e:	2b02      	cmp	r3, #2
 8104810:	d005      	beq.n	810481e <ADC_ConversionStop+0x10e>
 8104812:	69bb      	ldr	r3, [r7, #24]
 8104814:	2b03      	cmp	r3, #3
 8104816:	d105      	bne.n	8104824 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8104818:	230c      	movs	r3, #12
 810481a:	617b      	str	r3, [r7, #20]
        break;
 810481c:	e005      	b.n	810482a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 810481e:	2308      	movs	r3, #8
 8104820:	617b      	str	r3, [r7, #20]
        break;
 8104822:	e002      	b.n	810482a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8104824:	2304      	movs	r3, #4
 8104826:	617b      	str	r3, [r7, #20]
        break;
 8104828:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 810482a:	f7fe fe07 	bl	810343c <HAL_GetTick>
 810482e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8104830:	e01b      	b.n	810486a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8104832:	f7fe fe03 	bl	810343c <HAL_GetTick>
 8104836:	4602      	mov	r2, r0
 8104838:	68bb      	ldr	r3, [r7, #8]
 810483a:	1ad3      	subs	r3, r2, r3
 810483c:	2b05      	cmp	r3, #5
 810483e:	d914      	bls.n	810486a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8104840:	687b      	ldr	r3, [r7, #4]
 8104842:	681b      	ldr	r3, [r3, #0]
 8104844:	689a      	ldr	r2, [r3, #8]
 8104846:	697b      	ldr	r3, [r7, #20]
 8104848:	4013      	ands	r3, r2
 810484a:	2b00      	cmp	r3, #0
 810484c:	d00d      	beq.n	810486a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810484e:	687b      	ldr	r3, [r7, #4]
 8104850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104852:	f043 0210 	orr.w	r2, r3, #16
 8104856:	687b      	ldr	r3, [r7, #4]
 8104858:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810485a:	687b      	ldr	r3, [r7, #4]
 810485c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810485e:	f043 0201 	orr.w	r2, r3, #1
 8104862:	687b      	ldr	r3, [r7, #4]
 8104864:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8104866:	2301      	movs	r3, #1
 8104868:	e007      	b.n	810487a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 810486a:	687b      	ldr	r3, [r7, #4]
 810486c:	681b      	ldr	r3, [r3, #0]
 810486e:	689a      	ldr	r2, [r3, #8]
 8104870:	697b      	ldr	r3, [r7, #20]
 8104872:	4013      	ands	r3, r2
 8104874:	2b00      	cmp	r3, #0
 8104876:	d1dc      	bne.n	8104832 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8104878:	2300      	movs	r3, #0
}
 810487a:	4618      	mov	r0, r3
 810487c:	3720      	adds	r7, #32
 810487e:	46bd      	mov	sp, r7
 8104880:	bd80      	pop	{r7, pc}
 8104882:	bf00      	nop
 8104884:	000cdbff 	.word	0x000cdbff

08104888 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8104888:	b580      	push	{r7, lr}
 810488a:	b084      	sub	sp, #16
 810488c:	af00      	add	r7, sp, #0
 810488e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8104890:	687b      	ldr	r3, [r7, #4]
 8104892:	681b      	ldr	r3, [r3, #0]
 8104894:	4618      	mov	r0, r3
 8104896:	f7fe ffb5 	bl	8103804 <LL_ADC_IsEnabled>
 810489a:	4603      	mov	r3, r0
 810489c:	2b00      	cmp	r3, #0
 810489e:	d16e      	bne.n	810497e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 81048a0:	687b      	ldr	r3, [r7, #4]
 81048a2:	681b      	ldr	r3, [r3, #0]
 81048a4:	689a      	ldr	r2, [r3, #8]
 81048a6:	4b38      	ldr	r3, [pc, #224]	@ (8104988 <ADC_Enable+0x100>)
 81048a8:	4013      	ands	r3, r2
 81048aa:	2b00      	cmp	r3, #0
 81048ac:	d00d      	beq.n	81048ca <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81048ae:	687b      	ldr	r3, [r7, #4]
 81048b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81048b2:	f043 0210 	orr.w	r2, r3, #16
 81048b6:	687b      	ldr	r3, [r7, #4]
 81048b8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81048ba:	687b      	ldr	r3, [r7, #4]
 81048bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81048be:	f043 0201 	orr.w	r2, r3, #1
 81048c2:	687b      	ldr	r3, [r7, #4]
 81048c4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 81048c6:	2301      	movs	r3, #1
 81048c8:	e05a      	b.n	8104980 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 81048ca:	687b      	ldr	r3, [r7, #4]
 81048cc:	681b      	ldr	r3, [r3, #0]
 81048ce:	4618      	mov	r0, r3
 81048d0:	f7fe ff70 	bl	81037b4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 81048d4:	f7fe fdb2 	bl	810343c <HAL_GetTick>
 81048d8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81048da:	687b      	ldr	r3, [r7, #4]
 81048dc:	681b      	ldr	r3, [r3, #0]
 81048de:	4a2b      	ldr	r2, [pc, #172]	@ (810498c <ADC_Enable+0x104>)
 81048e0:	4293      	cmp	r3, r2
 81048e2:	d004      	beq.n	81048ee <ADC_Enable+0x66>
 81048e4:	687b      	ldr	r3, [r7, #4]
 81048e6:	681b      	ldr	r3, [r3, #0]
 81048e8:	4a29      	ldr	r2, [pc, #164]	@ (8104990 <ADC_Enable+0x108>)
 81048ea:	4293      	cmp	r3, r2
 81048ec:	d101      	bne.n	81048f2 <ADC_Enable+0x6a>
 81048ee:	4b29      	ldr	r3, [pc, #164]	@ (8104994 <ADC_Enable+0x10c>)
 81048f0:	e000      	b.n	81048f4 <ADC_Enable+0x6c>
 81048f2:	4b29      	ldr	r3, [pc, #164]	@ (8104998 <ADC_Enable+0x110>)
 81048f4:	4618      	mov	r0, r3
 81048f6:	f7fe fef3 	bl	81036e0 <LL_ADC_GetMultimode>
 81048fa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81048fc:	687b      	ldr	r3, [r7, #4]
 81048fe:	681b      	ldr	r3, [r3, #0]
 8104900:	4a23      	ldr	r2, [pc, #140]	@ (8104990 <ADC_Enable+0x108>)
 8104902:	4293      	cmp	r3, r2
 8104904:	d002      	beq.n	810490c <ADC_Enable+0x84>
 8104906:	687b      	ldr	r3, [r7, #4]
 8104908:	681b      	ldr	r3, [r3, #0]
 810490a:	e000      	b.n	810490e <ADC_Enable+0x86>
 810490c:	4b1f      	ldr	r3, [pc, #124]	@ (810498c <ADC_Enable+0x104>)
 810490e:	687a      	ldr	r2, [r7, #4]
 8104910:	6812      	ldr	r2, [r2, #0]
 8104912:	4293      	cmp	r3, r2
 8104914:	d02c      	beq.n	8104970 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8104916:	68bb      	ldr	r3, [r7, #8]
 8104918:	2b00      	cmp	r3, #0
 810491a:	d130      	bne.n	810497e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 810491c:	e028      	b.n	8104970 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810491e:	687b      	ldr	r3, [r7, #4]
 8104920:	681b      	ldr	r3, [r3, #0]
 8104922:	4618      	mov	r0, r3
 8104924:	f7fe ff6e 	bl	8103804 <LL_ADC_IsEnabled>
 8104928:	4603      	mov	r3, r0
 810492a:	2b00      	cmp	r3, #0
 810492c:	d104      	bne.n	8104938 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 810492e:	687b      	ldr	r3, [r7, #4]
 8104930:	681b      	ldr	r3, [r3, #0]
 8104932:	4618      	mov	r0, r3
 8104934:	f7fe ff3e 	bl	81037b4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8104938:	f7fe fd80 	bl	810343c <HAL_GetTick>
 810493c:	4602      	mov	r2, r0
 810493e:	68fb      	ldr	r3, [r7, #12]
 8104940:	1ad3      	subs	r3, r2, r3
 8104942:	2b02      	cmp	r3, #2
 8104944:	d914      	bls.n	8104970 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8104946:	687b      	ldr	r3, [r7, #4]
 8104948:	681b      	ldr	r3, [r3, #0]
 810494a:	681b      	ldr	r3, [r3, #0]
 810494c:	f003 0301 	and.w	r3, r3, #1
 8104950:	2b01      	cmp	r3, #1
 8104952:	d00d      	beq.n	8104970 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8104954:	687b      	ldr	r3, [r7, #4]
 8104956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104958:	f043 0210 	orr.w	r2, r3, #16
 810495c:	687b      	ldr	r3, [r7, #4]
 810495e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8104960:	687b      	ldr	r3, [r7, #4]
 8104962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104964:	f043 0201 	orr.w	r2, r3, #1
 8104968:	687b      	ldr	r3, [r7, #4]
 810496a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 810496c:	2301      	movs	r3, #1
 810496e:	e007      	b.n	8104980 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8104970:	687b      	ldr	r3, [r7, #4]
 8104972:	681b      	ldr	r3, [r3, #0]
 8104974:	681b      	ldr	r3, [r3, #0]
 8104976:	f003 0301 	and.w	r3, r3, #1
 810497a:	2b01      	cmp	r3, #1
 810497c:	d1cf      	bne.n	810491e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 810497e:	2300      	movs	r3, #0
}
 8104980:	4618      	mov	r0, r3
 8104982:	3710      	adds	r7, #16
 8104984:	46bd      	mov	sp, r7
 8104986:	bd80      	pop	{r7, pc}
 8104988:	8000003f 	.word	0x8000003f
 810498c:	40022000 	.word	0x40022000
 8104990:	40022100 	.word	0x40022100
 8104994:	40022300 	.word	0x40022300
 8104998:	58026300 	.word	0x58026300

0810499c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 810499c:	b580      	push	{r7, lr}
 810499e:	b084      	sub	sp, #16
 81049a0:	af00      	add	r7, sp, #0
 81049a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 81049a4:	687b      	ldr	r3, [r7, #4]
 81049a6:	681b      	ldr	r3, [r3, #0]
 81049a8:	4618      	mov	r0, r3
 81049aa:	f7fe ff3e 	bl	810382a <LL_ADC_IsDisableOngoing>
 81049ae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 81049b0:	687b      	ldr	r3, [r7, #4]
 81049b2:	681b      	ldr	r3, [r3, #0]
 81049b4:	4618      	mov	r0, r3
 81049b6:	f7fe ff25 	bl	8103804 <LL_ADC_IsEnabled>
 81049ba:	4603      	mov	r3, r0
 81049bc:	2b00      	cmp	r3, #0
 81049be:	d047      	beq.n	8104a50 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 81049c0:	68fb      	ldr	r3, [r7, #12]
 81049c2:	2b00      	cmp	r3, #0
 81049c4:	d144      	bne.n	8104a50 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 81049c6:	687b      	ldr	r3, [r7, #4]
 81049c8:	681b      	ldr	r3, [r3, #0]
 81049ca:	689b      	ldr	r3, [r3, #8]
 81049cc:	f003 030d 	and.w	r3, r3, #13
 81049d0:	2b01      	cmp	r3, #1
 81049d2:	d10c      	bne.n	81049ee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 81049d4:	687b      	ldr	r3, [r7, #4]
 81049d6:	681b      	ldr	r3, [r3, #0]
 81049d8:	4618      	mov	r0, r3
 81049da:	f7fe feff 	bl	81037dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 81049de:	687b      	ldr	r3, [r7, #4]
 81049e0:	681b      	ldr	r3, [r3, #0]
 81049e2:	2203      	movs	r2, #3
 81049e4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 81049e6:	f7fe fd29 	bl	810343c <HAL_GetTick>
 81049ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 81049ec:	e029      	b.n	8104a42 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81049ee:	687b      	ldr	r3, [r7, #4]
 81049f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81049f2:	f043 0210 	orr.w	r2, r3, #16
 81049f6:	687b      	ldr	r3, [r7, #4]
 81049f8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81049fa:	687b      	ldr	r3, [r7, #4]
 81049fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81049fe:	f043 0201 	orr.w	r2, r3, #1
 8104a02:	687b      	ldr	r3, [r7, #4]
 8104a04:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8104a06:	2301      	movs	r3, #1
 8104a08:	e023      	b.n	8104a52 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8104a0a:	f7fe fd17 	bl	810343c <HAL_GetTick>
 8104a0e:	4602      	mov	r2, r0
 8104a10:	68bb      	ldr	r3, [r7, #8]
 8104a12:	1ad3      	subs	r3, r2, r3
 8104a14:	2b02      	cmp	r3, #2
 8104a16:	d914      	bls.n	8104a42 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8104a18:	687b      	ldr	r3, [r7, #4]
 8104a1a:	681b      	ldr	r3, [r3, #0]
 8104a1c:	689b      	ldr	r3, [r3, #8]
 8104a1e:	f003 0301 	and.w	r3, r3, #1
 8104a22:	2b00      	cmp	r3, #0
 8104a24:	d00d      	beq.n	8104a42 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8104a26:	687b      	ldr	r3, [r7, #4]
 8104a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104a2a:	f043 0210 	orr.w	r2, r3, #16
 8104a2e:	687b      	ldr	r3, [r7, #4]
 8104a30:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8104a32:	687b      	ldr	r3, [r7, #4]
 8104a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104a36:	f043 0201 	orr.w	r2, r3, #1
 8104a3a:	687b      	ldr	r3, [r7, #4]
 8104a3c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8104a3e:	2301      	movs	r3, #1
 8104a40:	e007      	b.n	8104a52 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8104a42:	687b      	ldr	r3, [r7, #4]
 8104a44:	681b      	ldr	r3, [r3, #0]
 8104a46:	689b      	ldr	r3, [r3, #8]
 8104a48:	f003 0301 	and.w	r3, r3, #1
 8104a4c:	2b00      	cmp	r3, #0
 8104a4e:	d1dc      	bne.n	8104a0a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8104a50:	2300      	movs	r3, #0
}
 8104a52:	4618      	mov	r0, r3
 8104a54:	3710      	adds	r7, #16
 8104a56:	46bd      	mov	sp, r7
 8104a58:	bd80      	pop	{r7, pc}
	...

08104a5c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8104a5c:	b580      	push	{r7, lr}
 8104a5e:	b084      	sub	sp, #16
 8104a60:	af00      	add	r7, sp, #0
 8104a62:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8104a64:	687b      	ldr	r3, [r7, #4]
 8104a66:	681b      	ldr	r3, [r3, #0]
 8104a68:	4a7a      	ldr	r2, [pc, #488]	@ (8104c54 <ADC_ConfigureBoostMode+0x1f8>)
 8104a6a:	4293      	cmp	r3, r2
 8104a6c:	d004      	beq.n	8104a78 <ADC_ConfigureBoostMode+0x1c>
 8104a6e:	687b      	ldr	r3, [r7, #4]
 8104a70:	681b      	ldr	r3, [r3, #0]
 8104a72:	4a79      	ldr	r2, [pc, #484]	@ (8104c58 <ADC_ConfigureBoostMode+0x1fc>)
 8104a74:	4293      	cmp	r3, r2
 8104a76:	d109      	bne.n	8104a8c <ADC_ConfigureBoostMode+0x30>
 8104a78:	4b78      	ldr	r3, [pc, #480]	@ (8104c5c <ADC_ConfigureBoostMode+0x200>)
 8104a7a:	689b      	ldr	r3, [r3, #8]
 8104a7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8104a80:	2b00      	cmp	r3, #0
 8104a82:	bf14      	ite	ne
 8104a84:	2301      	movne	r3, #1
 8104a86:	2300      	moveq	r3, #0
 8104a88:	b2db      	uxtb	r3, r3
 8104a8a:	e008      	b.n	8104a9e <ADC_ConfigureBoostMode+0x42>
 8104a8c:	4b74      	ldr	r3, [pc, #464]	@ (8104c60 <ADC_ConfigureBoostMode+0x204>)
 8104a8e:	689b      	ldr	r3, [r3, #8]
 8104a90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8104a94:	2b00      	cmp	r3, #0
 8104a96:	bf14      	ite	ne
 8104a98:	2301      	movne	r3, #1
 8104a9a:	2300      	moveq	r3, #0
 8104a9c:	b2db      	uxtb	r3, r3
 8104a9e:	2b00      	cmp	r3, #0
 8104aa0:	d01c      	beq.n	8104adc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8104aa2:	f001 fd0d 	bl	81064c0 <HAL_RCC_GetHCLKFreq>
 8104aa6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8104aa8:	687b      	ldr	r3, [r7, #4]
 8104aaa:	685b      	ldr	r3, [r3, #4]
 8104aac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104ab0:	d010      	beq.n	8104ad4 <ADC_ConfigureBoostMode+0x78>
 8104ab2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104ab6:	d873      	bhi.n	8104ba0 <ADC_ConfigureBoostMode+0x144>
 8104ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104abc:	d002      	beq.n	8104ac4 <ADC_ConfigureBoostMode+0x68>
 8104abe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104ac2:	d16d      	bne.n	8104ba0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8104ac4:	687b      	ldr	r3, [r7, #4]
 8104ac6:	685b      	ldr	r3, [r3, #4]
 8104ac8:	0c1b      	lsrs	r3, r3, #16
 8104aca:	68fa      	ldr	r2, [r7, #12]
 8104acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8104ad0:	60fb      	str	r3, [r7, #12]
        break;
 8104ad2:	e068      	b.n	8104ba6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8104ad4:	68fb      	ldr	r3, [r7, #12]
 8104ad6:	089b      	lsrs	r3, r3, #2
 8104ad8:	60fb      	str	r3, [r7, #12]
        break;
 8104ada:	e064      	b.n	8104ba6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8104adc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8104ae0:	f04f 0100 	mov.w	r1, #0
 8104ae4:	f002 ff54 	bl	8107990 <HAL_RCCEx_GetPeriphCLKFreq>
 8104ae8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8104aea:	687b      	ldr	r3, [r7, #4]
 8104aec:	685b      	ldr	r3, [r3, #4]
 8104aee:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8104af2:	d051      	beq.n	8104b98 <ADC_ConfigureBoostMode+0x13c>
 8104af4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8104af8:	d854      	bhi.n	8104ba4 <ADC_ConfigureBoostMode+0x148>
 8104afa:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8104afe:	d047      	beq.n	8104b90 <ADC_ConfigureBoostMode+0x134>
 8104b00:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8104b04:	d84e      	bhi.n	8104ba4 <ADC_ConfigureBoostMode+0x148>
 8104b06:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8104b0a:	d03d      	beq.n	8104b88 <ADC_ConfigureBoostMode+0x12c>
 8104b0c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8104b10:	d848      	bhi.n	8104ba4 <ADC_ConfigureBoostMode+0x148>
 8104b12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104b16:	d033      	beq.n	8104b80 <ADC_ConfigureBoostMode+0x124>
 8104b18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104b1c:	d842      	bhi.n	8104ba4 <ADC_ConfigureBoostMode+0x148>
 8104b1e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8104b22:	d029      	beq.n	8104b78 <ADC_ConfigureBoostMode+0x11c>
 8104b24:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8104b28:	d83c      	bhi.n	8104ba4 <ADC_ConfigureBoostMode+0x148>
 8104b2a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8104b2e:	d01a      	beq.n	8104b66 <ADC_ConfigureBoostMode+0x10a>
 8104b30:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8104b34:	d836      	bhi.n	8104ba4 <ADC_ConfigureBoostMode+0x148>
 8104b36:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8104b3a:	d014      	beq.n	8104b66 <ADC_ConfigureBoostMode+0x10a>
 8104b3c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8104b40:	d830      	bhi.n	8104ba4 <ADC_ConfigureBoostMode+0x148>
 8104b42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8104b46:	d00e      	beq.n	8104b66 <ADC_ConfigureBoostMode+0x10a>
 8104b48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8104b4c:	d82a      	bhi.n	8104ba4 <ADC_ConfigureBoostMode+0x148>
 8104b4e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8104b52:	d008      	beq.n	8104b66 <ADC_ConfigureBoostMode+0x10a>
 8104b54:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8104b58:	d824      	bhi.n	8104ba4 <ADC_ConfigureBoostMode+0x148>
 8104b5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104b5e:	d002      	beq.n	8104b66 <ADC_ConfigureBoostMode+0x10a>
 8104b60:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8104b64:	d11e      	bne.n	8104ba4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8104b66:	687b      	ldr	r3, [r7, #4]
 8104b68:	685b      	ldr	r3, [r3, #4]
 8104b6a:	0c9b      	lsrs	r3, r3, #18
 8104b6c:	005b      	lsls	r3, r3, #1
 8104b6e:	68fa      	ldr	r2, [r7, #12]
 8104b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8104b74:	60fb      	str	r3, [r7, #12]
        break;
 8104b76:	e016      	b.n	8104ba6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8104b78:	68fb      	ldr	r3, [r7, #12]
 8104b7a:	091b      	lsrs	r3, r3, #4
 8104b7c:	60fb      	str	r3, [r7, #12]
        break;
 8104b7e:	e012      	b.n	8104ba6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8104b80:	68fb      	ldr	r3, [r7, #12]
 8104b82:	095b      	lsrs	r3, r3, #5
 8104b84:	60fb      	str	r3, [r7, #12]
        break;
 8104b86:	e00e      	b.n	8104ba6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8104b88:	68fb      	ldr	r3, [r7, #12]
 8104b8a:	099b      	lsrs	r3, r3, #6
 8104b8c:	60fb      	str	r3, [r7, #12]
        break;
 8104b8e:	e00a      	b.n	8104ba6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8104b90:	68fb      	ldr	r3, [r7, #12]
 8104b92:	09db      	lsrs	r3, r3, #7
 8104b94:	60fb      	str	r3, [r7, #12]
        break;
 8104b96:	e006      	b.n	8104ba6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8104b98:	68fb      	ldr	r3, [r7, #12]
 8104b9a:	0a1b      	lsrs	r3, r3, #8
 8104b9c:	60fb      	str	r3, [r7, #12]
        break;
 8104b9e:	e002      	b.n	8104ba6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8104ba0:	bf00      	nop
 8104ba2:	e000      	b.n	8104ba6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8104ba4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8104ba6:	f7fe fc79 	bl	810349c <HAL_GetREVID>
 8104baa:	4603      	mov	r3, r0
 8104bac:	f241 0203 	movw	r2, #4099	@ 0x1003
 8104bb0:	4293      	cmp	r3, r2
 8104bb2:	d815      	bhi.n	8104be0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8104bb4:	68fb      	ldr	r3, [r7, #12]
 8104bb6:	4a2b      	ldr	r2, [pc, #172]	@ (8104c64 <ADC_ConfigureBoostMode+0x208>)
 8104bb8:	4293      	cmp	r3, r2
 8104bba:	d908      	bls.n	8104bce <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8104bbc:	687b      	ldr	r3, [r7, #4]
 8104bbe:	681b      	ldr	r3, [r3, #0]
 8104bc0:	689a      	ldr	r2, [r3, #8]
 8104bc2:	687b      	ldr	r3, [r7, #4]
 8104bc4:	681b      	ldr	r3, [r3, #0]
 8104bc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8104bca:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8104bcc:	e03e      	b.n	8104c4c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8104bce:	687b      	ldr	r3, [r7, #4]
 8104bd0:	681b      	ldr	r3, [r3, #0]
 8104bd2:	689a      	ldr	r2, [r3, #8]
 8104bd4:	687b      	ldr	r3, [r7, #4]
 8104bd6:	681b      	ldr	r3, [r3, #0]
 8104bd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8104bdc:	609a      	str	r2, [r3, #8]
}
 8104bde:	e035      	b.n	8104c4c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8104be0:	68fb      	ldr	r3, [r7, #12]
 8104be2:	085b      	lsrs	r3, r3, #1
 8104be4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8104be6:	68fb      	ldr	r3, [r7, #12]
 8104be8:	4a1f      	ldr	r2, [pc, #124]	@ (8104c68 <ADC_ConfigureBoostMode+0x20c>)
 8104bea:	4293      	cmp	r3, r2
 8104bec:	d808      	bhi.n	8104c00 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8104bee:	687b      	ldr	r3, [r7, #4]
 8104bf0:	681b      	ldr	r3, [r3, #0]
 8104bf2:	689a      	ldr	r2, [r3, #8]
 8104bf4:	687b      	ldr	r3, [r7, #4]
 8104bf6:	681b      	ldr	r3, [r3, #0]
 8104bf8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8104bfc:	609a      	str	r2, [r3, #8]
}
 8104bfe:	e025      	b.n	8104c4c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8104c00:	68fb      	ldr	r3, [r7, #12]
 8104c02:	4a1a      	ldr	r2, [pc, #104]	@ (8104c6c <ADC_ConfigureBoostMode+0x210>)
 8104c04:	4293      	cmp	r3, r2
 8104c06:	d80a      	bhi.n	8104c1e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8104c08:	687b      	ldr	r3, [r7, #4]
 8104c0a:	681b      	ldr	r3, [r3, #0]
 8104c0c:	689b      	ldr	r3, [r3, #8]
 8104c0e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8104c12:	687b      	ldr	r3, [r7, #4]
 8104c14:	681b      	ldr	r3, [r3, #0]
 8104c16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8104c1a:	609a      	str	r2, [r3, #8]
}
 8104c1c:	e016      	b.n	8104c4c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8104c1e:	68fb      	ldr	r3, [r7, #12]
 8104c20:	4a13      	ldr	r2, [pc, #76]	@ (8104c70 <ADC_ConfigureBoostMode+0x214>)
 8104c22:	4293      	cmp	r3, r2
 8104c24:	d80a      	bhi.n	8104c3c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8104c26:	687b      	ldr	r3, [r7, #4]
 8104c28:	681b      	ldr	r3, [r3, #0]
 8104c2a:	689b      	ldr	r3, [r3, #8]
 8104c2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8104c30:	687b      	ldr	r3, [r7, #4]
 8104c32:	681b      	ldr	r3, [r3, #0]
 8104c34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8104c38:	609a      	str	r2, [r3, #8]
}
 8104c3a:	e007      	b.n	8104c4c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8104c3c:	687b      	ldr	r3, [r7, #4]
 8104c3e:	681b      	ldr	r3, [r3, #0]
 8104c40:	689a      	ldr	r2, [r3, #8]
 8104c42:	687b      	ldr	r3, [r7, #4]
 8104c44:	681b      	ldr	r3, [r3, #0]
 8104c46:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8104c4a:	609a      	str	r2, [r3, #8]
}
 8104c4c:	bf00      	nop
 8104c4e:	3710      	adds	r7, #16
 8104c50:	46bd      	mov	sp, r7
 8104c52:	bd80      	pop	{r7, pc}
 8104c54:	40022000 	.word	0x40022000
 8104c58:	40022100 	.word	0x40022100
 8104c5c:	40022300 	.word	0x40022300
 8104c60:	58026300 	.word	0x58026300
 8104c64:	01312d00 	.word	0x01312d00
 8104c68:	005f5e10 	.word	0x005f5e10
 8104c6c:	00bebc20 	.word	0x00bebc20
 8104c70:	017d7840 	.word	0x017d7840

08104c74 <LL_ADC_IsEnabled>:
{
 8104c74:	b480      	push	{r7}
 8104c76:	b083      	sub	sp, #12
 8104c78:	af00      	add	r7, sp, #0
 8104c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8104c7c:	687b      	ldr	r3, [r7, #4]
 8104c7e:	689b      	ldr	r3, [r3, #8]
 8104c80:	f003 0301 	and.w	r3, r3, #1
 8104c84:	2b01      	cmp	r3, #1
 8104c86:	d101      	bne.n	8104c8c <LL_ADC_IsEnabled+0x18>
 8104c88:	2301      	movs	r3, #1
 8104c8a:	e000      	b.n	8104c8e <LL_ADC_IsEnabled+0x1a>
 8104c8c:	2300      	movs	r3, #0
}
 8104c8e:	4618      	mov	r0, r3
 8104c90:	370c      	adds	r7, #12
 8104c92:	46bd      	mov	sp, r7
 8104c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c98:	4770      	bx	lr

08104c9a <LL_ADC_REG_IsConversionOngoing>:
{
 8104c9a:	b480      	push	{r7}
 8104c9c:	b083      	sub	sp, #12
 8104c9e:	af00      	add	r7, sp, #0
 8104ca0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8104ca2:	687b      	ldr	r3, [r7, #4]
 8104ca4:	689b      	ldr	r3, [r3, #8]
 8104ca6:	f003 0304 	and.w	r3, r3, #4
 8104caa:	2b04      	cmp	r3, #4
 8104cac:	d101      	bne.n	8104cb2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8104cae:	2301      	movs	r3, #1
 8104cb0:	e000      	b.n	8104cb4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8104cb2:	2300      	movs	r3, #0
}
 8104cb4:	4618      	mov	r0, r3
 8104cb6:	370c      	adds	r7, #12
 8104cb8:	46bd      	mov	sp, r7
 8104cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104cbe:	4770      	bx	lr

08104cc0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8104cc0:	b590      	push	{r4, r7, lr}
 8104cc2:	b09f      	sub	sp, #124	@ 0x7c
 8104cc4:	af00      	add	r7, sp, #0
 8104cc6:	6078      	str	r0, [r7, #4]
 8104cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8104cca:	2300      	movs	r3, #0
 8104ccc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8104cd0:	687b      	ldr	r3, [r7, #4]
 8104cd2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8104cd6:	2b01      	cmp	r3, #1
 8104cd8:	d101      	bne.n	8104cde <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8104cda:	2302      	movs	r3, #2
 8104cdc:	e0c4      	b.n	8104e68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8104cde:	687b      	ldr	r3, [r7, #4]
 8104ce0:	2201      	movs	r2, #1
 8104ce2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8104ce6:	2300      	movs	r3, #0
 8104ce8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8104cea:	2300      	movs	r3, #0
 8104cec:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8104cee:	687b      	ldr	r3, [r7, #4]
 8104cf0:	681b      	ldr	r3, [r3, #0]
 8104cf2:	4a5f      	ldr	r2, [pc, #380]	@ (8104e70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104cf4:	4293      	cmp	r3, r2
 8104cf6:	d102      	bne.n	8104cfe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8104cf8:	4b5e      	ldr	r3, [pc, #376]	@ (8104e74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104cfa:	60bb      	str	r3, [r7, #8]
 8104cfc:	e001      	b.n	8104d02 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8104cfe:	2300      	movs	r3, #0
 8104d00:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8104d02:	68bb      	ldr	r3, [r7, #8]
 8104d04:	2b00      	cmp	r3, #0
 8104d06:	d10b      	bne.n	8104d20 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104d08:	687b      	ldr	r3, [r7, #4]
 8104d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104d0c:	f043 0220 	orr.w	r2, r3, #32
 8104d10:	687b      	ldr	r3, [r7, #4]
 8104d12:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8104d14:	687b      	ldr	r3, [r7, #4]
 8104d16:	2200      	movs	r2, #0
 8104d18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8104d1c:	2301      	movs	r3, #1
 8104d1e:	e0a3      	b.n	8104e68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8104d20:	68bb      	ldr	r3, [r7, #8]
 8104d22:	4618      	mov	r0, r3
 8104d24:	f7ff ffb9 	bl	8104c9a <LL_ADC_REG_IsConversionOngoing>
 8104d28:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8104d2a:	687b      	ldr	r3, [r7, #4]
 8104d2c:	681b      	ldr	r3, [r3, #0]
 8104d2e:	4618      	mov	r0, r3
 8104d30:	f7ff ffb3 	bl	8104c9a <LL_ADC_REG_IsConversionOngoing>
 8104d34:	4603      	mov	r3, r0
 8104d36:	2b00      	cmp	r3, #0
 8104d38:	f040 8085 	bne.w	8104e46 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8104d3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8104d3e:	2b00      	cmp	r3, #0
 8104d40:	f040 8081 	bne.w	8104e46 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8104d44:	687b      	ldr	r3, [r7, #4]
 8104d46:	681b      	ldr	r3, [r3, #0]
 8104d48:	4a49      	ldr	r2, [pc, #292]	@ (8104e70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104d4a:	4293      	cmp	r3, r2
 8104d4c:	d004      	beq.n	8104d58 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8104d4e:	687b      	ldr	r3, [r7, #4]
 8104d50:	681b      	ldr	r3, [r3, #0]
 8104d52:	4a48      	ldr	r2, [pc, #288]	@ (8104e74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104d54:	4293      	cmp	r3, r2
 8104d56:	d101      	bne.n	8104d5c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8104d58:	4b47      	ldr	r3, [pc, #284]	@ (8104e78 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8104d5a:	e000      	b.n	8104d5e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8104d5c:	4b47      	ldr	r3, [pc, #284]	@ (8104e7c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8104d5e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104d60:	683b      	ldr	r3, [r7, #0]
 8104d62:	681b      	ldr	r3, [r3, #0]
 8104d64:	2b00      	cmp	r3, #0
 8104d66:	d03b      	beq.n	8104de0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8104d68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104d6a:	689b      	ldr	r3, [r3, #8]
 8104d6c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8104d70:	683b      	ldr	r3, [r7, #0]
 8104d72:	685b      	ldr	r3, [r3, #4]
 8104d74:	431a      	orrs	r2, r3
 8104d76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104d78:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8104d7a:	687b      	ldr	r3, [r7, #4]
 8104d7c:	681b      	ldr	r3, [r3, #0]
 8104d7e:	4a3c      	ldr	r2, [pc, #240]	@ (8104e70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104d80:	4293      	cmp	r3, r2
 8104d82:	d004      	beq.n	8104d8e <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8104d84:	687b      	ldr	r3, [r7, #4]
 8104d86:	681b      	ldr	r3, [r3, #0]
 8104d88:	4a3a      	ldr	r2, [pc, #232]	@ (8104e74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104d8a:	4293      	cmp	r3, r2
 8104d8c:	d10e      	bne.n	8104dac <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8104d8e:	4838      	ldr	r0, [pc, #224]	@ (8104e70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104d90:	f7ff ff70 	bl	8104c74 <LL_ADC_IsEnabled>
 8104d94:	4604      	mov	r4, r0
 8104d96:	4837      	ldr	r0, [pc, #220]	@ (8104e74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104d98:	f7ff ff6c 	bl	8104c74 <LL_ADC_IsEnabled>
 8104d9c:	4603      	mov	r3, r0
 8104d9e:	4323      	orrs	r3, r4
 8104da0:	2b00      	cmp	r3, #0
 8104da2:	bf0c      	ite	eq
 8104da4:	2301      	moveq	r3, #1
 8104da6:	2300      	movne	r3, #0
 8104da8:	b2db      	uxtb	r3, r3
 8104daa:	e008      	b.n	8104dbe <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8104dac:	4834      	ldr	r0, [pc, #208]	@ (8104e80 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8104dae:	f7ff ff61 	bl	8104c74 <LL_ADC_IsEnabled>
 8104db2:	4603      	mov	r3, r0
 8104db4:	2b00      	cmp	r3, #0
 8104db6:	bf0c      	ite	eq
 8104db8:	2301      	moveq	r3, #1
 8104dba:	2300      	movne	r3, #0
 8104dbc:	b2db      	uxtb	r3, r3
 8104dbe:	2b00      	cmp	r3, #0
 8104dc0:	d04b      	beq.n	8104e5a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8104dc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104dc4:	689b      	ldr	r3, [r3, #8]
 8104dc6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8104dca:	f023 030f 	bic.w	r3, r3, #15
 8104dce:	683a      	ldr	r2, [r7, #0]
 8104dd0:	6811      	ldr	r1, [r2, #0]
 8104dd2:	683a      	ldr	r2, [r7, #0]
 8104dd4:	6892      	ldr	r2, [r2, #8]
 8104dd6:	430a      	orrs	r2, r1
 8104dd8:	431a      	orrs	r2, r3
 8104dda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104ddc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104dde:	e03c      	b.n	8104e5a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8104de0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104de2:	689b      	ldr	r3, [r3, #8]
 8104de4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8104de8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104dea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8104dec:	687b      	ldr	r3, [r7, #4]
 8104dee:	681b      	ldr	r3, [r3, #0]
 8104df0:	4a1f      	ldr	r2, [pc, #124]	@ (8104e70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104df2:	4293      	cmp	r3, r2
 8104df4:	d004      	beq.n	8104e00 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8104df6:	687b      	ldr	r3, [r7, #4]
 8104df8:	681b      	ldr	r3, [r3, #0]
 8104dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8104e74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104dfc:	4293      	cmp	r3, r2
 8104dfe:	d10e      	bne.n	8104e1e <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8104e00:	481b      	ldr	r0, [pc, #108]	@ (8104e70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104e02:	f7ff ff37 	bl	8104c74 <LL_ADC_IsEnabled>
 8104e06:	4604      	mov	r4, r0
 8104e08:	481a      	ldr	r0, [pc, #104]	@ (8104e74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104e0a:	f7ff ff33 	bl	8104c74 <LL_ADC_IsEnabled>
 8104e0e:	4603      	mov	r3, r0
 8104e10:	4323      	orrs	r3, r4
 8104e12:	2b00      	cmp	r3, #0
 8104e14:	bf0c      	ite	eq
 8104e16:	2301      	moveq	r3, #1
 8104e18:	2300      	movne	r3, #0
 8104e1a:	b2db      	uxtb	r3, r3
 8104e1c:	e008      	b.n	8104e30 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8104e1e:	4818      	ldr	r0, [pc, #96]	@ (8104e80 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8104e20:	f7ff ff28 	bl	8104c74 <LL_ADC_IsEnabled>
 8104e24:	4603      	mov	r3, r0
 8104e26:	2b00      	cmp	r3, #0
 8104e28:	bf0c      	ite	eq
 8104e2a:	2301      	moveq	r3, #1
 8104e2c:	2300      	movne	r3, #0
 8104e2e:	b2db      	uxtb	r3, r3
 8104e30:	2b00      	cmp	r3, #0
 8104e32:	d012      	beq.n	8104e5a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8104e34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104e36:	689b      	ldr	r3, [r3, #8]
 8104e38:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8104e3c:	f023 030f 	bic.w	r3, r3, #15
 8104e40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8104e42:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104e44:	e009      	b.n	8104e5a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104e46:	687b      	ldr	r3, [r7, #4]
 8104e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104e4a:	f043 0220 	orr.w	r2, r3, #32
 8104e4e:	687b      	ldr	r3, [r7, #4]
 8104e50:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8104e52:	2301      	movs	r3, #1
 8104e54:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8104e58:	e000      	b.n	8104e5c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104e5a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8104e5c:	687b      	ldr	r3, [r7, #4]
 8104e5e:	2200      	movs	r2, #0
 8104e60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8104e64:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8104e68:	4618      	mov	r0, r3
 8104e6a:	377c      	adds	r7, #124	@ 0x7c
 8104e6c:	46bd      	mov	sp, r7
 8104e6e:	bd90      	pop	{r4, r7, pc}
 8104e70:	40022000 	.word	0x40022000
 8104e74:	40022100 	.word	0x40022100
 8104e78:	40022300 	.word	0x40022300
 8104e7c:	58026300 	.word	0x58026300
 8104e80:	58026000 	.word	0x58026000

08104e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104e84:	b480      	push	{r7}
 8104e86:	b085      	sub	sp, #20
 8104e88:	af00      	add	r7, sp, #0
 8104e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8104e8c:	687b      	ldr	r3, [r7, #4]
 8104e8e:	f003 0307 	and.w	r3, r3, #7
 8104e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8104e94:	4b0c      	ldr	r3, [pc, #48]	@ (8104ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8104e96:	68db      	ldr	r3, [r3, #12]
 8104e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8104e9a:	68ba      	ldr	r2, [r7, #8]
 8104e9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8104ea0:	4013      	ands	r3, r2
 8104ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8104ea4:	68fb      	ldr	r3, [r7, #12]
 8104ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8104ea8:	68bb      	ldr	r3, [r7, #8]
 8104eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8104eac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8104eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8104eb6:	4a04      	ldr	r2, [pc, #16]	@ (8104ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8104eb8:	68bb      	ldr	r3, [r7, #8]
 8104eba:	60d3      	str	r3, [r2, #12]
}
 8104ebc:	bf00      	nop
 8104ebe:	3714      	adds	r7, #20
 8104ec0:	46bd      	mov	sp, r7
 8104ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ec6:	4770      	bx	lr
 8104ec8:	e000ed00 	.word	0xe000ed00

08104ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8104ecc:	b480      	push	{r7}
 8104ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8104ed0:	4b04      	ldr	r3, [pc, #16]	@ (8104ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8104ed2:	68db      	ldr	r3, [r3, #12]
 8104ed4:	0a1b      	lsrs	r3, r3, #8
 8104ed6:	f003 0307 	and.w	r3, r3, #7
}
 8104eda:	4618      	mov	r0, r3
 8104edc:	46bd      	mov	sp, r7
 8104ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ee2:	4770      	bx	lr
 8104ee4:	e000ed00 	.word	0xe000ed00

08104ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104ee8:	b480      	push	{r7}
 8104eea:	b083      	sub	sp, #12
 8104eec:	af00      	add	r7, sp, #0
 8104eee:	4603      	mov	r3, r0
 8104ef0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104ef6:	2b00      	cmp	r3, #0
 8104ef8:	db0b      	blt.n	8104f12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8104efa:	88fb      	ldrh	r3, [r7, #6]
 8104efc:	f003 021f 	and.w	r2, r3, #31
 8104f00:	4907      	ldr	r1, [pc, #28]	@ (8104f20 <__NVIC_EnableIRQ+0x38>)
 8104f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104f06:	095b      	lsrs	r3, r3, #5
 8104f08:	2001      	movs	r0, #1
 8104f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8104f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8104f12:	bf00      	nop
 8104f14:	370c      	adds	r7, #12
 8104f16:	46bd      	mov	sp, r7
 8104f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f1c:	4770      	bx	lr
 8104f1e:	bf00      	nop
 8104f20:	e000e100 	.word	0xe000e100

08104f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8104f24:	b480      	push	{r7}
 8104f26:	b083      	sub	sp, #12
 8104f28:	af00      	add	r7, sp, #0
 8104f2a:	4603      	mov	r3, r0
 8104f2c:	6039      	str	r1, [r7, #0]
 8104f2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104f30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104f34:	2b00      	cmp	r3, #0
 8104f36:	db0a      	blt.n	8104f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104f38:	683b      	ldr	r3, [r7, #0]
 8104f3a:	b2da      	uxtb	r2, r3
 8104f3c:	490c      	ldr	r1, [pc, #48]	@ (8104f70 <__NVIC_SetPriority+0x4c>)
 8104f3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104f42:	0112      	lsls	r2, r2, #4
 8104f44:	b2d2      	uxtb	r2, r2
 8104f46:	440b      	add	r3, r1
 8104f48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8104f4c:	e00a      	b.n	8104f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104f4e:	683b      	ldr	r3, [r7, #0]
 8104f50:	b2da      	uxtb	r2, r3
 8104f52:	4908      	ldr	r1, [pc, #32]	@ (8104f74 <__NVIC_SetPriority+0x50>)
 8104f54:	88fb      	ldrh	r3, [r7, #6]
 8104f56:	f003 030f 	and.w	r3, r3, #15
 8104f5a:	3b04      	subs	r3, #4
 8104f5c:	0112      	lsls	r2, r2, #4
 8104f5e:	b2d2      	uxtb	r2, r2
 8104f60:	440b      	add	r3, r1
 8104f62:	761a      	strb	r2, [r3, #24]
}
 8104f64:	bf00      	nop
 8104f66:	370c      	adds	r7, #12
 8104f68:	46bd      	mov	sp, r7
 8104f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f6e:	4770      	bx	lr
 8104f70:	e000e100 	.word	0xe000e100
 8104f74:	e000ed00 	.word	0xe000ed00

08104f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8104f78:	b480      	push	{r7}
 8104f7a:	b089      	sub	sp, #36	@ 0x24
 8104f7c:	af00      	add	r7, sp, #0
 8104f7e:	60f8      	str	r0, [r7, #12]
 8104f80:	60b9      	str	r1, [r7, #8]
 8104f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8104f84:	68fb      	ldr	r3, [r7, #12]
 8104f86:	f003 0307 	and.w	r3, r3, #7
 8104f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8104f8c:	69fb      	ldr	r3, [r7, #28]
 8104f8e:	f1c3 0307 	rsb	r3, r3, #7
 8104f92:	2b04      	cmp	r3, #4
 8104f94:	bf28      	it	cs
 8104f96:	2304      	movcs	r3, #4
 8104f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8104f9a:	69fb      	ldr	r3, [r7, #28]
 8104f9c:	3304      	adds	r3, #4
 8104f9e:	2b06      	cmp	r3, #6
 8104fa0:	d902      	bls.n	8104fa8 <NVIC_EncodePriority+0x30>
 8104fa2:	69fb      	ldr	r3, [r7, #28]
 8104fa4:	3b03      	subs	r3, #3
 8104fa6:	e000      	b.n	8104faa <NVIC_EncodePriority+0x32>
 8104fa8:	2300      	movs	r3, #0
 8104faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104fac:	f04f 32ff 	mov.w	r2, #4294967295
 8104fb0:	69bb      	ldr	r3, [r7, #24]
 8104fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8104fb6:	43da      	mvns	r2, r3
 8104fb8:	68bb      	ldr	r3, [r7, #8]
 8104fba:	401a      	ands	r2, r3
 8104fbc:	697b      	ldr	r3, [r7, #20]
 8104fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8104fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8104fc4:	697b      	ldr	r3, [r7, #20]
 8104fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8104fca:	43d9      	mvns	r1, r3
 8104fcc:	687b      	ldr	r3, [r7, #4]
 8104fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104fd0:	4313      	orrs	r3, r2
         );
}
 8104fd2:	4618      	mov	r0, r3
 8104fd4:	3724      	adds	r7, #36	@ 0x24
 8104fd6:	46bd      	mov	sp, r7
 8104fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104fdc:	4770      	bx	lr
	...

08104fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8104fe0:	b580      	push	{r7, lr}
 8104fe2:	b082      	sub	sp, #8
 8104fe4:	af00      	add	r7, sp, #0
 8104fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8104fe8:	687b      	ldr	r3, [r7, #4]
 8104fea:	3b01      	subs	r3, #1
 8104fec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8104ff0:	d301      	bcc.n	8104ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8104ff2:	2301      	movs	r3, #1
 8104ff4:	e00f      	b.n	8105016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8104ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8105020 <SysTick_Config+0x40>)
 8104ff8:	687b      	ldr	r3, [r7, #4]
 8104ffa:	3b01      	subs	r3, #1
 8104ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8104ffe:	210f      	movs	r1, #15
 8105000:	f04f 30ff 	mov.w	r0, #4294967295
 8105004:	f7ff ff8e 	bl	8104f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8105008:	4b05      	ldr	r3, [pc, #20]	@ (8105020 <SysTick_Config+0x40>)
 810500a:	2200      	movs	r2, #0
 810500c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810500e:	4b04      	ldr	r3, [pc, #16]	@ (8105020 <SysTick_Config+0x40>)
 8105010:	2207      	movs	r2, #7
 8105012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8105014:	2300      	movs	r3, #0
}
 8105016:	4618      	mov	r0, r3
 8105018:	3708      	adds	r7, #8
 810501a:	46bd      	mov	sp, r7
 810501c:	bd80      	pop	{r7, pc}
 810501e:	bf00      	nop
 8105020:	e000e010 	.word	0xe000e010

08105024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8105024:	b580      	push	{r7, lr}
 8105026:	b082      	sub	sp, #8
 8105028:	af00      	add	r7, sp, #0
 810502a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810502c:	6878      	ldr	r0, [r7, #4]
 810502e:	f7ff ff29 	bl	8104e84 <__NVIC_SetPriorityGrouping>
}
 8105032:	bf00      	nop
 8105034:	3708      	adds	r7, #8
 8105036:	46bd      	mov	sp, r7
 8105038:	bd80      	pop	{r7, pc}

0810503a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810503a:	b580      	push	{r7, lr}
 810503c:	b086      	sub	sp, #24
 810503e:	af00      	add	r7, sp, #0
 8105040:	4603      	mov	r3, r0
 8105042:	60b9      	str	r1, [r7, #8]
 8105044:	607a      	str	r2, [r7, #4]
 8105046:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8105048:	f7ff ff40 	bl	8104ecc <__NVIC_GetPriorityGrouping>
 810504c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810504e:	687a      	ldr	r2, [r7, #4]
 8105050:	68b9      	ldr	r1, [r7, #8]
 8105052:	6978      	ldr	r0, [r7, #20]
 8105054:	f7ff ff90 	bl	8104f78 <NVIC_EncodePriority>
 8105058:	4602      	mov	r2, r0
 810505a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810505e:	4611      	mov	r1, r2
 8105060:	4618      	mov	r0, r3
 8105062:	f7ff ff5f 	bl	8104f24 <__NVIC_SetPriority>
}
 8105066:	bf00      	nop
 8105068:	3718      	adds	r7, #24
 810506a:	46bd      	mov	sp, r7
 810506c:	bd80      	pop	{r7, pc}

0810506e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810506e:	b580      	push	{r7, lr}
 8105070:	b082      	sub	sp, #8
 8105072:	af00      	add	r7, sp, #0
 8105074:	4603      	mov	r3, r0
 8105076:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8105078:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810507c:	4618      	mov	r0, r3
 810507e:	f7ff ff33 	bl	8104ee8 <__NVIC_EnableIRQ>
}
 8105082:	bf00      	nop
 8105084:	3708      	adds	r7, #8
 8105086:	46bd      	mov	sp, r7
 8105088:	bd80      	pop	{r7, pc}

0810508a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810508a:	b580      	push	{r7, lr}
 810508c:	b082      	sub	sp, #8
 810508e:	af00      	add	r7, sp, #0
 8105090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8105092:	6878      	ldr	r0, [r7, #4]
 8105094:	f7ff ffa4 	bl	8104fe0 <SysTick_Config>
 8105098:	4603      	mov	r3, r0
}
 810509a:	4618      	mov	r0, r3
 810509c:	3708      	adds	r7, #8
 810509e:	46bd      	mov	sp, r7
 81050a0:	bd80      	pop	{r7, pc}
	...

081050a4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81050a4:	b480      	push	{r7}
 81050a6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81050a8:	4b07      	ldr	r3, [pc, #28]	@ (81050c8 <HAL_GetCurrentCPUID+0x24>)
 81050aa:	681b      	ldr	r3, [r3, #0]
 81050ac:	091b      	lsrs	r3, r3, #4
 81050ae:	f003 030f 	and.w	r3, r3, #15
 81050b2:	2b07      	cmp	r3, #7
 81050b4:	d101      	bne.n	81050ba <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81050b6:	2303      	movs	r3, #3
 81050b8:	e000      	b.n	81050bc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81050ba:	2301      	movs	r3, #1
  }
}
 81050bc:	4618      	mov	r0, r3
 81050be:	46bd      	mov	sp, r7
 81050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050c4:	4770      	bx	lr
 81050c6:	bf00      	nop
 81050c8:	e000ed00 	.word	0xe000ed00

081050cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81050cc:	b480      	push	{r7}
 81050ce:	b089      	sub	sp, #36	@ 0x24
 81050d0:	af00      	add	r7, sp, #0
 81050d2:	6078      	str	r0, [r7, #4]
 81050d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81050d6:	2300      	movs	r3, #0
 81050d8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81050da:	4b89      	ldr	r3, [pc, #548]	@ (8105300 <HAL_GPIO_Init+0x234>)
 81050dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81050de:	e194      	b.n	810540a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81050e0:	683b      	ldr	r3, [r7, #0]
 81050e2:	681a      	ldr	r2, [r3, #0]
 81050e4:	2101      	movs	r1, #1
 81050e6:	69fb      	ldr	r3, [r7, #28]
 81050e8:	fa01 f303 	lsl.w	r3, r1, r3
 81050ec:	4013      	ands	r3, r2
 81050ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81050f0:	693b      	ldr	r3, [r7, #16]
 81050f2:	2b00      	cmp	r3, #0
 81050f4:	f000 8186 	beq.w	8105404 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81050f8:	683b      	ldr	r3, [r7, #0]
 81050fa:	685b      	ldr	r3, [r3, #4]
 81050fc:	f003 0303 	and.w	r3, r3, #3
 8105100:	2b01      	cmp	r3, #1
 8105102:	d005      	beq.n	8105110 <HAL_GPIO_Init+0x44>
 8105104:	683b      	ldr	r3, [r7, #0]
 8105106:	685b      	ldr	r3, [r3, #4]
 8105108:	f003 0303 	and.w	r3, r3, #3
 810510c:	2b02      	cmp	r3, #2
 810510e:	d130      	bne.n	8105172 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8105110:	687b      	ldr	r3, [r7, #4]
 8105112:	689b      	ldr	r3, [r3, #8]
 8105114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8105116:	69fb      	ldr	r3, [r7, #28]
 8105118:	005b      	lsls	r3, r3, #1
 810511a:	2203      	movs	r2, #3
 810511c:	fa02 f303 	lsl.w	r3, r2, r3
 8105120:	43db      	mvns	r3, r3
 8105122:	69ba      	ldr	r2, [r7, #24]
 8105124:	4013      	ands	r3, r2
 8105126:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8105128:	683b      	ldr	r3, [r7, #0]
 810512a:	68da      	ldr	r2, [r3, #12]
 810512c:	69fb      	ldr	r3, [r7, #28]
 810512e:	005b      	lsls	r3, r3, #1
 8105130:	fa02 f303 	lsl.w	r3, r2, r3
 8105134:	69ba      	ldr	r2, [r7, #24]
 8105136:	4313      	orrs	r3, r2
 8105138:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810513a:	687b      	ldr	r3, [r7, #4]
 810513c:	69ba      	ldr	r2, [r7, #24]
 810513e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8105140:	687b      	ldr	r3, [r7, #4]
 8105142:	685b      	ldr	r3, [r3, #4]
 8105144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8105146:	2201      	movs	r2, #1
 8105148:	69fb      	ldr	r3, [r7, #28]
 810514a:	fa02 f303 	lsl.w	r3, r2, r3
 810514e:	43db      	mvns	r3, r3
 8105150:	69ba      	ldr	r2, [r7, #24]
 8105152:	4013      	ands	r3, r2
 8105154:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8105156:	683b      	ldr	r3, [r7, #0]
 8105158:	685b      	ldr	r3, [r3, #4]
 810515a:	091b      	lsrs	r3, r3, #4
 810515c:	f003 0201 	and.w	r2, r3, #1
 8105160:	69fb      	ldr	r3, [r7, #28]
 8105162:	fa02 f303 	lsl.w	r3, r2, r3
 8105166:	69ba      	ldr	r2, [r7, #24]
 8105168:	4313      	orrs	r3, r2
 810516a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810516c:	687b      	ldr	r3, [r7, #4]
 810516e:	69ba      	ldr	r2, [r7, #24]
 8105170:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8105172:	683b      	ldr	r3, [r7, #0]
 8105174:	685b      	ldr	r3, [r3, #4]
 8105176:	f003 0303 	and.w	r3, r3, #3
 810517a:	2b03      	cmp	r3, #3
 810517c:	d017      	beq.n	81051ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810517e:	687b      	ldr	r3, [r7, #4]
 8105180:	68db      	ldr	r3, [r3, #12]
 8105182:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8105184:	69fb      	ldr	r3, [r7, #28]
 8105186:	005b      	lsls	r3, r3, #1
 8105188:	2203      	movs	r2, #3
 810518a:	fa02 f303 	lsl.w	r3, r2, r3
 810518e:	43db      	mvns	r3, r3
 8105190:	69ba      	ldr	r2, [r7, #24]
 8105192:	4013      	ands	r3, r2
 8105194:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8105196:	683b      	ldr	r3, [r7, #0]
 8105198:	689a      	ldr	r2, [r3, #8]
 810519a:	69fb      	ldr	r3, [r7, #28]
 810519c:	005b      	lsls	r3, r3, #1
 810519e:	fa02 f303 	lsl.w	r3, r2, r3
 81051a2:	69ba      	ldr	r2, [r7, #24]
 81051a4:	4313      	orrs	r3, r2
 81051a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81051a8:	687b      	ldr	r3, [r7, #4]
 81051aa:	69ba      	ldr	r2, [r7, #24]
 81051ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81051ae:	683b      	ldr	r3, [r7, #0]
 81051b0:	685b      	ldr	r3, [r3, #4]
 81051b2:	f003 0303 	and.w	r3, r3, #3
 81051b6:	2b02      	cmp	r3, #2
 81051b8:	d123      	bne.n	8105202 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81051ba:	69fb      	ldr	r3, [r7, #28]
 81051bc:	08da      	lsrs	r2, r3, #3
 81051be:	687b      	ldr	r3, [r7, #4]
 81051c0:	3208      	adds	r2, #8
 81051c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81051c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81051c8:	69fb      	ldr	r3, [r7, #28]
 81051ca:	f003 0307 	and.w	r3, r3, #7
 81051ce:	009b      	lsls	r3, r3, #2
 81051d0:	220f      	movs	r2, #15
 81051d2:	fa02 f303 	lsl.w	r3, r2, r3
 81051d6:	43db      	mvns	r3, r3
 81051d8:	69ba      	ldr	r2, [r7, #24]
 81051da:	4013      	ands	r3, r2
 81051dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81051de:	683b      	ldr	r3, [r7, #0]
 81051e0:	691a      	ldr	r2, [r3, #16]
 81051e2:	69fb      	ldr	r3, [r7, #28]
 81051e4:	f003 0307 	and.w	r3, r3, #7
 81051e8:	009b      	lsls	r3, r3, #2
 81051ea:	fa02 f303 	lsl.w	r3, r2, r3
 81051ee:	69ba      	ldr	r2, [r7, #24]
 81051f0:	4313      	orrs	r3, r2
 81051f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81051f4:	69fb      	ldr	r3, [r7, #28]
 81051f6:	08da      	lsrs	r2, r3, #3
 81051f8:	687b      	ldr	r3, [r7, #4]
 81051fa:	3208      	adds	r2, #8
 81051fc:	69b9      	ldr	r1, [r7, #24]
 81051fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8105202:	687b      	ldr	r3, [r7, #4]
 8105204:	681b      	ldr	r3, [r3, #0]
 8105206:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8105208:	69fb      	ldr	r3, [r7, #28]
 810520a:	005b      	lsls	r3, r3, #1
 810520c:	2203      	movs	r2, #3
 810520e:	fa02 f303 	lsl.w	r3, r2, r3
 8105212:	43db      	mvns	r3, r3
 8105214:	69ba      	ldr	r2, [r7, #24]
 8105216:	4013      	ands	r3, r2
 8105218:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810521a:	683b      	ldr	r3, [r7, #0]
 810521c:	685b      	ldr	r3, [r3, #4]
 810521e:	f003 0203 	and.w	r2, r3, #3
 8105222:	69fb      	ldr	r3, [r7, #28]
 8105224:	005b      	lsls	r3, r3, #1
 8105226:	fa02 f303 	lsl.w	r3, r2, r3
 810522a:	69ba      	ldr	r2, [r7, #24]
 810522c:	4313      	orrs	r3, r2
 810522e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8105230:	687b      	ldr	r3, [r7, #4]
 8105232:	69ba      	ldr	r2, [r7, #24]
 8105234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8105236:	683b      	ldr	r3, [r7, #0]
 8105238:	685b      	ldr	r3, [r3, #4]
 810523a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810523e:	2b00      	cmp	r3, #0
 8105240:	f000 80e0 	beq.w	8105404 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8105244:	4b2f      	ldr	r3, [pc, #188]	@ (8105304 <HAL_GPIO_Init+0x238>)
 8105246:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810524a:	4a2e      	ldr	r2, [pc, #184]	@ (8105304 <HAL_GPIO_Init+0x238>)
 810524c:	f043 0302 	orr.w	r3, r3, #2
 8105250:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8105254:	4b2b      	ldr	r3, [pc, #172]	@ (8105304 <HAL_GPIO_Init+0x238>)
 8105256:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810525a:	f003 0302 	and.w	r3, r3, #2
 810525e:	60fb      	str	r3, [r7, #12]
 8105260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8105262:	4a29      	ldr	r2, [pc, #164]	@ (8105308 <HAL_GPIO_Init+0x23c>)
 8105264:	69fb      	ldr	r3, [r7, #28]
 8105266:	089b      	lsrs	r3, r3, #2
 8105268:	3302      	adds	r3, #2
 810526a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810526e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8105270:	69fb      	ldr	r3, [r7, #28]
 8105272:	f003 0303 	and.w	r3, r3, #3
 8105276:	009b      	lsls	r3, r3, #2
 8105278:	220f      	movs	r2, #15
 810527a:	fa02 f303 	lsl.w	r3, r2, r3
 810527e:	43db      	mvns	r3, r3
 8105280:	69ba      	ldr	r2, [r7, #24]
 8105282:	4013      	ands	r3, r2
 8105284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8105286:	687b      	ldr	r3, [r7, #4]
 8105288:	4a20      	ldr	r2, [pc, #128]	@ (810530c <HAL_GPIO_Init+0x240>)
 810528a:	4293      	cmp	r3, r2
 810528c:	d052      	beq.n	8105334 <HAL_GPIO_Init+0x268>
 810528e:	687b      	ldr	r3, [r7, #4]
 8105290:	4a1f      	ldr	r2, [pc, #124]	@ (8105310 <HAL_GPIO_Init+0x244>)
 8105292:	4293      	cmp	r3, r2
 8105294:	d031      	beq.n	81052fa <HAL_GPIO_Init+0x22e>
 8105296:	687b      	ldr	r3, [r7, #4]
 8105298:	4a1e      	ldr	r2, [pc, #120]	@ (8105314 <HAL_GPIO_Init+0x248>)
 810529a:	4293      	cmp	r3, r2
 810529c:	d02b      	beq.n	81052f6 <HAL_GPIO_Init+0x22a>
 810529e:	687b      	ldr	r3, [r7, #4]
 81052a0:	4a1d      	ldr	r2, [pc, #116]	@ (8105318 <HAL_GPIO_Init+0x24c>)
 81052a2:	4293      	cmp	r3, r2
 81052a4:	d025      	beq.n	81052f2 <HAL_GPIO_Init+0x226>
 81052a6:	687b      	ldr	r3, [r7, #4]
 81052a8:	4a1c      	ldr	r2, [pc, #112]	@ (810531c <HAL_GPIO_Init+0x250>)
 81052aa:	4293      	cmp	r3, r2
 81052ac:	d01f      	beq.n	81052ee <HAL_GPIO_Init+0x222>
 81052ae:	687b      	ldr	r3, [r7, #4]
 81052b0:	4a1b      	ldr	r2, [pc, #108]	@ (8105320 <HAL_GPIO_Init+0x254>)
 81052b2:	4293      	cmp	r3, r2
 81052b4:	d019      	beq.n	81052ea <HAL_GPIO_Init+0x21e>
 81052b6:	687b      	ldr	r3, [r7, #4]
 81052b8:	4a1a      	ldr	r2, [pc, #104]	@ (8105324 <HAL_GPIO_Init+0x258>)
 81052ba:	4293      	cmp	r3, r2
 81052bc:	d013      	beq.n	81052e6 <HAL_GPIO_Init+0x21a>
 81052be:	687b      	ldr	r3, [r7, #4]
 81052c0:	4a19      	ldr	r2, [pc, #100]	@ (8105328 <HAL_GPIO_Init+0x25c>)
 81052c2:	4293      	cmp	r3, r2
 81052c4:	d00d      	beq.n	81052e2 <HAL_GPIO_Init+0x216>
 81052c6:	687b      	ldr	r3, [r7, #4]
 81052c8:	4a18      	ldr	r2, [pc, #96]	@ (810532c <HAL_GPIO_Init+0x260>)
 81052ca:	4293      	cmp	r3, r2
 81052cc:	d007      	beq.n	81052de <HAL_GPIO_Init+0x212>
 81052ce:	687b      	ldr	r3, [r7, #4]
 81052d0:	4a17      	ldr	r2, [pc, #92]	@ (8105330 <HAL_GPIO_Init+0x264>)
 81052d2:	4293      	cmp	r3, r2
 81052d4:	d101      	bne.n	81052da <HAL_GPIO_Init+0x20e>
 81052d6:	2309      	movs	r3, #9
 81052d8:	e02d      	b.n	8105336 <HAL_GPIO_Init+0x26a>
 81052da:	230a      	movs	r3, #10
 81052dc:	e02b      	b.n	8105336 <HAL_GPIO_Init+0x26a>
 81052de:	2308      	movs	r3, #8
 81052e0:	e029      	b.n	8105336 <HAL_GPIO_Init+0x26a>
 81052e2:	2307      	movs	r3, #7
 81052e4:	e027      	b.n	8105336 <HAL_GPIO_Init+0x26a>
 81052e6:	2306      	movs	r3, #6
 81052e8:	e025      	b.n	8105336 <HAL_GPIO_Init+0x26a>
 81052ea:	2305      	movs	r3, #5
 81052ec:	e023      	b.n	8105336 <HAL_GPIO_Init+0x26a>
 81052ee:	2304      	movs	r3, #4
 81052f0:	e021      	b.n	8105336 <HAL_GPIO_Init+0x26a>
 81052f2:	2303      	movs	r3, #3
 81052f4:	e01f      	b.n	8105336 <HAL_GPIO_Init+0x26a>
 81052f6:	2302      	movs	r3, #2
 81052f8:	e01d      	b.n	8105336 <HAL_GPIO_Init+0x26a>
 81052fa:	2301      	movs	r3, #1
 81052fc:	e01b      	b.n	8105336 <HAL_GPIO_Init+0x26a>
 81052fe:	bf00      	nop
 8105300:	580000c0 	.word	0x580000c0
 8105304:	58024400 	.word	0x58024400
 8105308:	58000400 	.word	0x58000400
 810530c:	58020000 	.word	0x58020000
 8105310:	58020400 	.word	0x58020400
 8105314:	58020800 	.word	0x58020800
 8105318:	58020c00 	.word	0x58020c00
 810531c:	58021000 	.word	0x58021000
 8105320:	58021400 	.word	0x58021400
 8105324:	58021800 	.word	0x58021800
 8105328:	58021c00 	.word	0x58021c00
 810532c:	58022000 	.word	0x58022000
 8105330:	58022400 	.word	0x58022400
 8105334:	2300      	movs	r3, #0
 8105336:	69fa      	ldr	r2, [r7, #28]
 8105338:	f002 0203 	and.w	r2, r2, #3
 810533c:	0092      	lsls	r2, r2, #2
 810533e:	4093      	lsls	r3, r2
 8105340:	69ba      	ldr	r2, [r7, #24]
 8105342:	4313      	orrs	r3, r2
 8105344:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8105346:	4938      	ldr	r1, [pc, #224]	@ (8105428 <HAL_GPIO_Init+0x35c>)
 8105348:	69fb      	ldr	r3, [r7, #28]
 810534a:	089b      	lsrs	r3, r3, #2
 810534c:	3302      	adds	r3, #2
 810534e:	69ba      	ldr	r2, [r7, #24]
 8105350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8105354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105358:	681b      	ldr	r3, [r3, #0]
 810535a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810535c:	693b      	ldr	r3, [r7, #16]
 810535e:	43db      	mvns	r3, r3
 8105360:	69ba      	ldr	r2, [r7, #24]
 8105362:	4013      	ands	r3, r2
 8105364:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8105366:	683b      	ldr	r3, [r7, #0]
 8105368:	685b      	ldr	r3, [r3, #4]
 810536a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810536e:	2b00      	cmp	r3, #0
 8105370:	d003      	beq.n	810537a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8105372:	69ba      	ldr	r2, [r7, #24]
 8105374:	693b      	ldr	r3, [r7, #16]
 8105376:	4313      	orrs	r3, r2
 8105378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810537a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810537e:	69bb      	ldr	r3, [r7, #24]
 8105380:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8105382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105386:	685b      	ldr	r3, [r3, #4]
 8105388:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810538a:	693b      	ldr	r3, [r7, #16]
 810538c:	43db      	mvns	r3, r3
 810538e:	69ba      	ldr	r2, [r7, #24]
 8105390:	4013      	ands	r3, r2
 8105392:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8105394:	683b      	ldr	r3, [r7, #0]
 8105396:	685b      	ldr	r3, [r3, #4]
 8105398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810539c:	2b00      	cmp	r3, #0
 810539e:	d003      	beq.n	81053a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81053a0:	69ba      	ldr	r2, [r7, #24]
 81053a2:	693b      	ldr	r3, [r7, #16]
 81053a4:	4313      	orrs	r3, r2
 81053a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81053a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81053ac:	69bb      	ldr	r3, [r7, #24]
 81053ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81053b0:	697b      	ldr	r3, [r7, #20]
 81053b2:	685b      	ldr	r3, [r3, #4]
 81053b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81053b6:	693b      	ldr	r3, [r7, #16]
 81053b8:	43db      	mvns	r3, r3
 81053ba:	69ba      	ldr	r2, [r7, #24]
 81053bc:	4013      	ands	r3, r2
 81053be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81053c0:	683b      	ldr	r3, [r7, #0]
 81053c2:	685b      	ldr	r3, [r3, #4]
 81053c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81053c8:	2b00      	cmp	r3, #0
 81053ca:	d003      	beq.n	81053d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81053cc:	69ba      	ldr	r2, [r7, #24]
 81053ce:	693b      	ldr	r3, [r7, #16]
 81053d0:	4313      	orrs	r3, r2
 81053d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81053d4:	697b      	ldr	r3, [r7, #20]
 81053d6:	69ba      	ldr	r2, [r7, #24]
 81053d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81053da:	697b      	ldr	r3, [r7, #20]
 81053dc:	681b      	ldr	r3, [r3, #0]
 81053de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81053e0:	693b      	ldr	r3, [r7, #16]
 81053e2:	43db      	mvns	r3, r3
 81053e4:	69ba      	ldr	r2, [r7, #24]
 81053e6:	4013      	ands	r3, r2
 81053e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81053ea:	683b      	ldr	r3, [r7, #0]
 81053ec:	685b      	ldr	r3, [r3, #4]
 81053ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81053f2:	2b00      	cmp	r3, #0
 81053f4:	d003      	beq.n	81053fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81053f6:	69ba      	ldr	r2, [r7, #24]
 81053f8:	693b      	ldr	r3, [r7, #16]
 81053fa:	4313      	orrs	r3, r2
 81053fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81053fe:	697b      	ldr	r3, [r7, #20]
 8105400:	69ba      	ldr	r2, [r7, #24]
 8105402:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8105404:	69fb      	ldr	r3, [r7, #28]
 8105406:	3301      	adds	r3, #1
 8105408:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810540a:	683b      	ldr	r3, [r7, #0]
 810540c:	681a      	ldr	r2, [r3, #0]
 810540e:	69fb      	ldr	r3, [r7, #28]
 8105410:	fa22 f303 	lsr.w	r3, r2, r3
 8105414:	2b00      	cmp	r3, #0
 8105416:	f47f ae63 	bne.w	81050e0 <HAL_GPIO_Init+0x14>
  }
}
 810541a:	bf00      	nop
 810541c:	bf00      	nop
 810541e:	3724      	adds	r7, #36	@ 0x24
 8105420:	46bd      	mov	sp, r7
 8105422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105426:	4770      	bx	lr
 8105428:	58000400 	.word	0x58000400

0810542c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 810542c:	b480      	push	{r7}
 810542e:	b083      	sub	sp, #12
 8105430:	af00      	add	r7, sp, #0
 8105432:	6078      	str	r0, [r7, #4]
 8105434:	460b      	mov	r3, r1
 8105436:	807b      	strh	r3, [r7, #2]
 8105438:	4613      	mov	r3, r2
 810543a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 810543c:	787b      	ldrb	r3, [r7, #1]
 810543e:	2b00      	cmp	r3, #0
 8105440:	d003      	beq.n	810544a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8105442:	887a      	ldrh	r2, [r7, #2]
 8105444:	687b      	ldr	r3, [r7, #4]
 8105446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8105448:	e003      	b.n	8105452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810544a:	887b      	ldrh	r3, [r7, #2]
 810544c:	041a      	lsls	r2, r3, #16
 810544e:	687b      	ldr	r3, [r7, #4]
 8105450:	619a      	str	r2, [r3, #24]
}
 8105452:	bf00      	nop
 8105454:	370c      	adds	r7, #12
 8105456:	46bd      	mov	sp, r7
 8105458:	f85d 7b04 	ldr.w	r7, [sp], #4
 810545c:	4770      	bx	lr

0810545e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 810545e:	b580      	push	{r7, lr}
 8105460:	b082      	sub	sp, #8
 8105462:	af00      	add	r7, sp, #0
 8105464:	4603      	mov	r3, r0
 8105466:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8105468:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810546c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8105470:	88fb      	ldrh	r3, [r7, #6]
 8105472:	4013      	ands	r3, r2
 8105474:	2b00      	cmp	r3, #0
 8105476:	d008      	beq.n	810548a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8105478:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810547c:	88fb      	ldrh	r3, [r7, #6]
 810547e:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8105482:	88fb      	ldrh	r3, [r7, #6]
 8105484:	4618      	mov	r0, r3
 8105486:	f7fd fb2f 	bl	8102ae8 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 810548a:	bf00      	nop
 810548c:	3708      	adds	r7, #8
 810548e:	46bd      	mov	sp, r7
 8105490:	bd80      	pop	{r7, pc}
	...

08105494 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8105494:	b480      	push	{r7}
 8105496:	b083      	sub	sp, #12
 8105498:	af00      	add	r7, sp, #0
 810549a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810549c:	4b05      	ldr	r3, [pc, #20]	@ (81054b4 <HAL_HSEM_ActivateNotification+0x20>)
 810549e:	681a      	ldr	r2, [r3, #0]
 81054a0:	4904      	ldr	r1, [pc, #16]	@ (81054b4 <HAL_HSEM_ActivateNotification+0x20>)
 81054a2:	687b      	ldr	r3, [r7, #4]
 81054a4:	4313      	orrs	r3, r2
 81054a6:	600b      	str	r3, [r1, #0]
#endif
}
 81054a8:	bf00      	nop
 81054aa:	370c      	adds	r7, #12
 81054ac:	46bd      	mov	sp, r7
 81054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054b2:	4770      	bx	lr
 81054b4:	58026510 	.word	0x58026510

081054b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 81054b8:	b580      	push	{r7, lr}
 81054ba:	b082      	sub	sp, #8
 81054bc:	af00      	add	r7, sp, #0
 81054be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 81054c0:	687b      	ldr	r3, [r7, #4]
 81054c2:	2b00      	cmp	r3, #0
 81054c4:	d101      	bne.n	81054ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 81054c6:	2301      	movs	r3, #1
 81054c8:	e08d      	b.n	81055e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 81054ca:	687b      	ldr	r3, [r7, #4]
 81054cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81054d0:	b2db      	uxtb	r3, r3
 81054d2:	2b00      	cmp	r3, #0
 81054d4:	d106      	bne.n	81054e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 81054d6:	687b      	ldr	r3, [r7, #4]
 81054d8:	2200      	movs	r2, #0
 81054da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 81054de:	6878      	ldr	r0, [r7, #4]
 81054e0:	f7fd fbfe 	bl	8102ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 81054e4:	687b      	ldr	r3, [r7, #4]
 81054e6:	2224      	movs	r2, #36	@ 0x24
 81054e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 81054ec:	687b      	ldr	r3, [r7, #4]
 81054ee:	681b      	ldr	r3, [r3, #0]
 81054f0:	681a      	ldr	r2, [r3, #0]
 81054f2:	687b      	ldr	r3, [r7, #4]
 81054f4:	681b      	ldr	r3, [r3, #0]
 81054f6:	f022 0201 	bic.w	r2, r2, #1
 81054fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81054fc:	687b      	ldr	r3, [r7, #4]
 81054fe:	685a      	ldr	r2, [r3, #4]
 8105500:	687b      	ldr	r3, [r7, #4]
 8105502:	681b      	ldr	r3, [r3, #0]
 8105504:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8105508:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810550a:	687b      	ldr	r3, [r7, #4]
 810550c:	681b      	ldr	r3, [r3, #0]
 810550e:	689a      	ldr	r2, [r3, #8]
 8105510:	687b      	ldr	r3, [r7, #4]
 8105512:	681b      	ldr	r3, [r3, #0]
 8105514:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8105518:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810551a:	687b      	ldr	r3, [r7, #4]
 810551c:	68db      	ldr	r3, [r3, #12]
 810551e:	2b01      	cmp	r3, #1
 8105520:	d107      	bne.n	8105532 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8105522:	687b      	ldr	r3, [r7, #4]
 8105524:	689a      	ldr	r2, [r3, #8]
 8105526:	687b      	ldr	r3, [r7, #4]
 8105528:	681b      	ldr	r3, [r3, #0]
 810552a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 810552e:	609a      	str	r2, [r3, #8]
 8105530:	e006      	b.n	8105540 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8105532:	687b      	ldr	r3, [r7, #4]
 8105534:	689a      	ldr	r2, [r3, #8]
 8105536:	687b      	ldr	r3, [r7, #4]
 8105538:	681b      	ldr	r3, [r3, #0]
 810553a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 810553e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8105540:	687b      	ldr	r3, [r7, #4]
 8105542:	68db      	ldr	r3, [r3, #12]
 8105544:	2b02      	cmp	r3, #2
 8105546:	d108      	bne.n	810555a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8105548:	687b      	ldr	r3, [r7, #4]
 810554a:	681b      	ldr	r3, [r3, #0]
 810554c:	685a      	ldr	r2, [r3, #4]
 810554e:	687b      	ldr	r3, [r7, #4]
 8105550:	681b      	ldr	r3, [r3, #0]
 8105552:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8105556:	605a      	str	r2, [r3, #4]
 8105558:	e007      	b.n	810556a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 810555a:	687b      	ldr	r3, [r7, #4]
 810555c:	681b      	ldr	r3, [r3, #0]
 810555e:	685a      	ldr	r2, [r3, #4]
 8105560:	687b      	ldr	r3, [r7, #4]
 8105562:	681b      	ldr	r3, [r3, #0]
 8105564:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8105568:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810556a:	687b      	ldr	r3, [r7, #4]
 810556c:	681b      	ldr	r3, [r3, #0]
 810556e:	685b      	ldr	r3, [r3, #4]
 8105570:	687a      	ldr	r2, [r7, #4]
 8105572:	6812      	ldr	r2, [r2, #0]
 8105574:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8105578:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 810557c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810557e:	687b      	ldr	r3, [r7, #4]
 8105580:	681b      	ldr	r3, [r3, #0]
 8105582:	68da      	ldr	r2, [r3, #12]
 8105584:	687b      	ldr	r3, [r7, #4]
 8105586:	681b      	ldr	r3, [r3, #0]
 8105588:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 810558c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	691a      	ldr	r2, [r3, #16]
 8105592:	687b      	ldr	r3, [r7, #4]
 8105594:	695b      	ldr	r3, [r3, #20]
 8105596:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 810559a:	687b      	ldr	r3, [r7, #4]
 810559c:	699b      	ldr	r3, [r3, #24]
 810559e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81055a0:	687b      	ldr	r3, [r7, #4]
 81055a2:	681b      	ldr	r3, [r3, #0]
 81055a4:	430a      	orrs	r2, r1
 81055a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81055a8:	687b      	ldr	r3, [r7, #4]
 81055aa:	69d9      	ldr	r1, [r3, #28]
 81055ac:	687b      	ldr	r3, [r7, #4]
 81055ae:	6a1a      	ldr	r2, [r3, #32]
 81055b0:	687b      	ldr	r3, [r7, #4]
 81055b2:	681b      	ldr	r3, [r3, #0]
 81055b4:	430a      	orrs	r2, r1
 81055b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81055b8:	687b      	ldr	r3, [r7, #4]
 81055ba:	681b      	ldr	r3, [r3, #0]
 81055bc:	681a      	ldr	r2, [r3, #0]
 81055be:	687b      	ldr	r3, [r7, #4]
 81055c0:	681b      	ldr	r3, [r3, #0]
 81055c2:	f042 0201 	orr.w	r2, r2, #1
 81055c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81055c8:	687b      	ldr	r3, [r7, #4]
 81055ca:	2200      	movs	r2, #0
 81055cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 81055ce:	687b      	ldr	r3, [r7, #4]
 81055d0:	2220      	movs	r2, #32
 81055d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 81055d6:	687b      	ldr	r3, [r7, #4]
 81055d8:	2200      	movs	r2, #0
 81055da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81055dc:	687b      	ldr	r3, [r7, #4]
 81055de:	2200      	movs	r2, #0
 81055e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 81055e4:	2300      	movs	r3, #0
}
 81055e6:	4618      	mov	r0, r3
 81055e8:	3708      	adds	r7, #8
 81055ea:	46bd      	mov	sp, r7
 81055ec:	bd80      	pop	{r7, pc}
	...

081055f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 81055f0:	b580      	push	{r7, lr}
 81055f2:	b088      	sub	sp, #32
 81055f4:	af02      	add	r7, sp, #8
 81055f6:	60f8      	str	r0, [r7, #12]
 81055f8:	607a      	str	r2, [r7, #4]
 81055fa:	461a      	mov	r2, r3
 81055fc:	460b      	mov	r3, r1
 81055fe:	817b      	strh	r3, [r7, #10]
 8105600:	4613      	mov	r3, r2
 8105602:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105604:	68fb      	ldr	r3, [r7, #12]
 8105606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810560a:	b2db      	uxtb	r3, r3
 810560c:	2b20      	cmp	r3, #32
 810560e:	f040 80fd 	bne.w	810580c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105612:	68fb      	ldr	r3, [r7, #12]
 8105614:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8105618:	2b01      	cmp	r3, #1
 810561a:	d101      	bne.n	8105620 <HAL_I2C_Master_Transmit+0x30>
 810561c:	2302      	movs	r3, #2
 810561e:	e0f6      	b.n	810580e <HAL_I2C_Master_Transmit+0x21e>
 8105620:	68fb      	ldr	r3, [r7, #12]
 8105622:	2201      	movs	r2, #1
 8105624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8105628:	f7fd ff08 	bl	810343c <HAL_GetTick>
 810562c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810562e:	693b      	ldr	r3, [r7, #16]
 8105630:	9300      	str	r3, [sp, #0]
 8105632:	2319      	movs	r3, #25
 8105634:	2201      	movs	r2, #1
 8105636:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 810563a:	68f8      	ldr	r0, [r7, #12]
 810563c:	f000 fa24 	bl	8105a88 <I2C_WaitOnFlagUntilTimeout>
 8105640:	4603      	mov	r3, r0
 8105642:	2b00      	cmp	r3, #0
 8105644:	d001      	beq.n	810564a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8105646:	2301      	movs	r3, #1
 8105648:	e0e1      	b.n	810580e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 810564a:	68fb      	ldr	r3, [r7, #12]
 810564c:	2221      	movs	r2, #33	@ 0x21
 810564e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8105652:	68fb      	ldr	r3, [r7, #12]
 8105654:	2210      	movs	r2, #16
 8105656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810565a:	68fb      	ldr	r3, [r7, #12]
 810565c:	2200      	movs	r2, #0
 810565e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8105660:	68fb      	ldr	r3, [r7, #12]
 8105662:	687a      	ldr	r2, [r7, #4]
 8105664:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8105666:	68fb      	ldr	r3, [r7, #12]
 8105668:	893a      	ldrh	r2, [r7, #8]
 810566a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 810566c:	68fb      	ldr	r3, [r7, #12]
 810566e:	2200      	movs	r2, #0
 8105670:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105672:	68fb      	ldr	r3, [r7, #12]
 8105674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105676:	b29b      	uxth	r3, r3
 8105678:	2bff      	cmp	r3, #255	@ 0xff
 810567a:	d906      	bls.n	810568a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810567c:	68fb      	ldr	r3, [r7, #12]
 810567e:	22ff      	movs	r2, #255	@ 0xff
 8105680:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8105682:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8105686:	617b      	str	r3, [r7, #20]
 8105688:	e007      	b.n	810569a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810568a:	68fb      	ldr	r3, [r7, #12]
 810568c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810568e:	b29a      	uxth	r2, r3
 8105690:	68fb      	ldr	r3, [r7, #12]
 8105692:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8105694:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8105698:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 810569a:	68fb      	ldr	r3, [r7, #12]
 810569c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810569e:	2b00      	cmp	r3, #0
 81056a0:	d024      	beq.n	81056ec <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81056a2:	68fb      	ldr	r3, [r7, #12]
 81056a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81056a6:	781a      	ldrb	r2, [r3, #0]
 81056a8:	68fb      	ldr	r3, [r7, #12]
 81056aa:	681b      	ldr	r3, [r3, #0]
 81056ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81056ae:	68fb      	ldr	r3, [r7, #12]
 81056b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81056b2:	1c5a      	adds	r2, r3, #1
 81056b4:	68fb      	ldr	r3, [r7, #12]
 81056b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 81056b8:	68fb      	ldr	r3, [r7, #12]
 81056ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81056bc:	b29b      	uxth	r3, r3
 81056be:	3b01      	subs	r3, #1
 81056c0:	b29a      	uxth	r2, r3
 81056c2:	68fb      	ldr	r3, [r7, #12]
 81056c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 81056c6:	68fb      	ldr	r3, [r7, #12]
 81056c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81056ca:	3b01      	subs	r3, #1
 81056cc:	b29a      	uxth	r2, r3
 81056ce:	68fb      	ldr	r3, [r7, #12]
 81056d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 81056d2:	68fb      	ldr	r3, [r7, #12]
 81056d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81056d6:	b2db      	uxtb	r3, r3
 81056d8:	3301      	adds	r3, #1
 81056da:	b2da      	uxtb	r2, r3
 81056dc:	8979      	ldrh	r1, [r7, #10]
 81056de:	4b4e      	ldr	r3, [pc, #312]	@ (8105818 <HAL_I2C_Master_Transmit+0x228>)
 81056e0:	9300      	str	r3, [sp, #0]
 81056e2:	697b      	ldr	r3, [r7, #20]
 81056e4:	68f8      	ldr	r0, [r7, #12]
 81056e6:	f000 fc1f 	bl	8105f28 <I2C_TransferConfig>
 81056ea:	e066      	b.n	81057ba <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 81056ec:	68fb      	ldr	r3, [r7, #12]
 81056ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81056f0:	b2da      	uxtb	r2, r3
 81056f2:	8979      	ldrh	r1, [r7, #10]
 81056f4:	4b48      	ldr	r3, [pc, #288]	@ (8105818 <HAL_I2C_Master_Transmit+0x228>)
 81056f6:	9300      	str	r3, [sp, #0]
 81056f8:	697b      	ldr	r3, [r7, #20]
 81056fa:	68f8      	ldr	r0, [r7, #12]
 81056fc:	f000 fc14 	bl	8105f28 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8105700:	e05b      	b.n	81057ba <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105702:	693a      	ldr	r2, [r7, #16]
 8105704:	6a39      	ldr	r1, [r7, #32]
 8105706:	68f8      	ldr	r0, [r7, #12]
 8105708:	f000 fa17 	bl	8105b3a <I2C_WaitOnTXISFlagUntilTimeout>
 810570c:	4603      	mov	r3, r0
 810570e:	2b00      	cmp	r3, #0
 8105710:	d001      	beq.n	8105716 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8105712:	2301      	movs	r3, #1
 8105714:	e07b      	b.n	810580e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8105716:	68fb      	ldr	r3, [r7, #12]
 8105718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810571a:	781a      	ldrb	r2, [r3, #0]
 810571c:	68fb      	ldr	r3, [r7, #12]
 810571e:	681b      	ldr	r3, [r3, #0]
 8105720:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105722:	68fb      	ldr	r3, [r7, #12]
 8105724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105726:	1c5a      	adds	r2, r3, #1
 8105728:	68fb      	ldr	r3, [r7, #12]
 810572a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 810572c:	68fb      	ldr	r3, [r7, #12]
 810572e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105730:	b29b      	uxth	r3, r3
 8105732:	3b01      	subs	r3, #1
 8105734:	b29a      	uxth	r2, r3
 8105736:	68fb      	ldr	r3, [r7, #12]
 8105738:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 810573a:	68fb      	ldr	r3, [r7, #12]
 810573c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810573e:	3b01      	subs	r3, #1
 8105740:	b29a      	uxth	r2, r3
 8105742:	68fb      	ldr	r3, [r7, #12]
 8105744:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8105746:	68fb      	ldr	r3, [r7, #12]
 8105748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810574a:	b29b      	uxth	r3, r3
 810574c:	2b00      	cmp	r3, #0
 810574e:	d034      	beq.n	81057ba <HAL_I2C_Master_Transmit+0x1ca>
 8105750:	68fb      	ldr	r3, [r7, #12]
 8105752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105754:	2b00      	cmp	r3, #0
 8105756:	d130      	bne.n	81057ba <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8105758:	693b      	ldr	r3, [r7, #16]
 810575a:	9300      	str	r3, [sp, #0]
 810575c:	6a3b      	ldr	r3, [r7, #32]
 810575e:	2200      	movs	r2, #0
 8105760:	2180      	movs	r1, #128	@ 0x80
 8105762:	68f8      	ldr	r0, [r7, #12]
 8105764:	f000 f990 	bl	8105a88 <I2C_WaitOnFlagUntilTimeout>
 8105768:	4603      	mov	r3, r0
 810576a:	2b00      	cmp	r3, #0
 810576c:	d001      	beq.n	8105772 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 810576e:	2301      	movs	r3, #1
 8105770:	e04d      	b.n	810580e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105772:	68fb      	ldr	r3, [r7, #12]
 8105774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105776:	b29b      	uxth	r3, r3
 8105778:	2bff      	cmp	r3, #255	@ 0xff
 810577a:	d90e      	bls.n	810579a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810577c:	68fb      	ldr	r3, [r7, #12]
 810577e:	22ff      	movs	r2, #255	@ 0xff
 8105780:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8105782:	68fb      	ldr	r3, [r7, #12]
 8105784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105786:	b2da      	uxtb	r2, r3
 8105788:	8979      	ldrh	r1, [r7, #10]
 810578a:	2300      	movs	r3, #0
 810578c:	9300      	str	r3, [sp, #0]
 810578e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8105792:	68f8      	ldr	r0, [r7, #12]
 8105794:	f000 fbc8 	bl	8105f28 <I2C_TransferConfig>
 8105798:	e00f      	b.n	81057ba <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 810579a:	68fb      	ldr	r3, [r7, #12]
 810579c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810579e:	b29a      	uxth	r2, r3
 81057a0:	68fb      	ldr	r3, [r7, #12]
 81057a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81057a4:	68fb      	ldr	r3, [r7, #12]
 81057a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81057a8:	b2da      	uxtb	r2, r3
 81057aa:	8979      	ldrh	r1, [r7, #10]
 81057ac:	2300      	movs	r3, #0
 81057ae:	9300      	str	r3, [sp, #0]
 81057b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81057b4:	68f8      	ldr	r0, [r7, #12]
 81057b6:	f000 fbb7 	bl	8105f28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81057ba:	68fb      	ldr	r3, [r7, #12]
 81057bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81057be:	b29b      	uxth	r3, r3
 81057c0:	2b00      	cmp	r3, #0
 81057c2:	d19e      	bne.n	8105702 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81057c4:	693a      	ldr	r2, [r7, #16]
 81057c6:	6a39      	ldr	r1, [r7, #32]
 81057c8:	68f8      	ldr	r0, [r7, #12]
 81057ca:	f000 f9fd 	bl	8105bc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 81057ce:	4603      	mov	r3, r0
 81057d0:	2b00      	cmp	r3, #0
 81057d2:	d001      	beq.n	81057d8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 81057d4:	2301      	movs	r3, #1
 81057d6:	e01a      	b.n	810580e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81057d8:	68fb      	ldr	r3, [r7, #12]
 81057da:	681b      	ldr	r3, [r3, #0]
 81057dc:	2220      	movs	r2, #32
 81057de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81057e0:	68fb      	ldr	r3, [r7, #12]
 81057e2:	681b      	ldr	r3, [r3, #0]
 81057e4:	6859      	ldr	r1, [r3, #4]
 81057e6:	68fb      	ldr	r3, [r7, #12]
 81057e8:	681a      	ldr	r2, [r3, #0]
 81057ea:	4b0c      	ldr	r3, [pc, #48]	@ (810581c <HAL_I2C_Master_Transmit+0x22c>)
 81057ec:	400b      	ands	r3, r1
 81057ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81057f0:	68fb      	ldr	r3, [r7, #12]
 81057f2:	2220      	movs	r2, #32
 81057f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81057f8:	68fb      	ldr	r3, [r7, #12]
 81057fa:	2200      	movs	r2, #0
 81057fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105800:	68fb      	ldr	r3, [r7, #12]
 8105802:	2200      	movs	r2, #0
 8105804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8105808:	2300      	movs	r3, #0
 810580a:	e000      	b.n	810580e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 810580c:	2302      	movs	r3, #2
  }
}
 810580e:	4618      	mov	r0, r3
 8105810:	3718      	adds	r7, #24
 8105812:	46bd      	mov	sp, r7
 8105814:	bd80      	pop	{r7, pc}
 8105816:	bf00      	nop
 8105818:	80002000 	.word	0x80002000
 810581c:	fe00e800 	.word	0xfe00e800

08105820 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8105820:	b580      	push	{r7, lr}
 8105822:	b088      	sub	sp, #32
 8105824:	af02      	add	r7, sp, #8
 8105826:	60f8      	str	r0, [r7, #12]
 8105828:	607a      	str	r2, [r7, #4]
 810582a:	461a      	mov	r2, r3
 810582c:	460b      	mov	r3, r1
 810582e:	817b      	strh	r3, [r7, #10]
 8105830:	4613      	mov	r3, r2
 8105832:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105834:	68fb      	ldr	r3, [r7, #12]
 8105836:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810583a:	b2db      	uxtb	r3, r3
 810583c:	2b20      	cmp	r3, #32
 810583e:	f040 80db 	bne.w	81059f8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105842:	68fb      	ldr	r3, [r7, #12]
 8105844:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8105848:	2b01      	cmp	r3, #1
 810584a:	d101      	bne.n	8105850 <HAL_I2C_Master_Receive+0x30>
 810584c:	2302      	movs	r3, #2
 810584e:	e0d4      	b.n	81059fa <HAL_I2C_Master_Receive+0x1da>
 8105850:	68fb      	ldr	r3, [r7, #12]
 8105852:	2201      	movs	r2, #1
 8105854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8105858:	f7fd fdf0 	bl	810343c <HAL_GetTick>
 810585c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810585e:	697b      	ldr	r3, [r7, #20]
 8105860:	9300      	str	r3, [sp, #0]
 8105862:	2319      	movs	r3, #25
 8105864:	2201      	movs	r2, #1
 8105866:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 810586a:	68f8      	ldr	r0, [r7, #12]
 810586c:	f000 f90c 	bl	8105a88 <I2C_WaitOnFlagUntilTimeout>
 8105870:	4603      	mov	r3, r0
 8105872:	2b00      	cmp	r3, #0
 8105874:	d001      	beq.n	810587a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8105876:	2301      	movs	r3, #1
 8105878:	e0bf      	b.n	81059fa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 810587a:	68fb      	ldr	r3, [r7, #12]
 810587c:	2222      	movs	r2, #34	@ 0x22
 810587e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8105882:	68fb      	ldr	r3, [r7, #12]
 8105884:	2210      	movs	r2, #16
 8105886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810588a:	68fb      	ldr	r3, [r7, #12]
 810588c:	2200      	movs	r2, #0
 810588e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8105890:	68fb      	ldr	r3, [r7, #12]
 8105892:	687a      	ldr	r2, [r7, #4]
 8105894:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8105896:	68fb      	ldr	r3, [r7, #12]
 8105898:	893a      	ldrh	r2, [r7, #8]
 810589a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 810589c:	68fb      	ldr	r3, [r7, #12]
 810589e:	2200      	movs	r2, #0
 81058a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81058a2:	68fb      	ldr	r3, [r7, #12]
 81058a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81058a6:	b29b      	uxth	r3, r3
 81058a8:	2bff      	cmp	r3, #255	@ 0xff
 81058aa:	d90e      	bls.n	81058ca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81058ac:	68fb      	ldr	r3, [r7, #12]
 81058ae:	22ff      	movs	r2, #255	@ 0xff
 81058b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81058b2:	68fb      	ldr	r3, [r7, #12]
 81058b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81058b6:	b2da      	uxtb	r2, r3
 81058b8:	8979      	ldrh	r1, [r7, #10]
 81058ba:	4b52      	ldr	r3, [pc, #328]	@ (8105a04 <HAL_I2C_Master_Receive+0x1e4>)
 81058bc:	9300      	str	r3, [sp, #0]
 81058be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81058c2:	68f8      	ldr	r0, [r7, #12]
 81058c4:	f000 fb30 	bl	8105f28 <I2C_TransferConfig>
 81058c8:	e06d      	b.n	81059a6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81058ca:	68fb      	ldr	r3, [r7, #12]
 81058cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81058ce:	b29a      	uxth	r2, r3
 81058d0:	68fb      	ldr	r3, [r7, #12]
 81058d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81058d4:	68fb      	ldr	r3, [r7, #12]
 81058d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81058d8:	b2da      	uxtb	r2, r3
 81058da:	8979      	ldrh	r1, [r7, #10]
 81058dc:	4b49      	ldr	r3, [pc, #292]	@ (8105a04 <HAL_I2C_Master_Receive+0x1e4>)
 81058de:	9300      	str	r3, [sp, #0]
 81058e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81058e4:	68f8      	ldr	r0, [r7, #12]
 81058e6:	f000 fb1f 	bl	8105f28 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 81058ea:	e05c      	b.n	81059a6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81058ec:	697a      	ldr	r2, [r7, #20]
 81058ee:	6a39      	ldr	r1, [r7, #32]
 81058f0:	68f8      	ldr	r0, [r7, #12]
 81058f2:	f000 f9ad 	bl	8105c50 <I2C_WaitOnRXNEFlagUntilTimeout>
 81058f6:	4603      	mov	r3, r0
 81058f8:	2b00      	cmp	r3, #0
 81058fa:	d001      	beq.n	8105900 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 81058fc:	2301      	movs	r3, #1
 81058fe:	e07c      	b.n	81059fa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8105900:	68fb      	ldr	r3, [r7, #12]
 8105902:	681b      	ldr	r3, [r3, #0]
 8105904:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8105906:	68fb      	ldr	r3, [r7, #12]
 8105908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810590a:	b2d2      	uxtb	r2, r2
 810590c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810590e:	68fb      	ldr	r3, [r7, #12]
 8105910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105912:	1c5a      	adds	r2, r3, #1
 8105914:	68fb      	ldr	r3, [r7, #12]
 8105916:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8105918:	68fb      	ldr	r3, [r7, #12]
 810591a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810591c:	3b01      	subs	r3, #1
 810591e:	b29a      	uxth	r2, r3
 8105920:	68fb      	ldr	r3, [r7, #12]
 8105922:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8105924:	68fb      	ldr	r3, [r7, #12]
 8105926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105928:	b29b      	uxth	r3, r3
 810592a:	3b01      	subs	r3, #1
 810592c:	b29a      	uxth	r2, r3
 810592e:	68fb      	ldr	r3, [r7, #12]
 8105930:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8105932:	68fb      	ldr	r3, [r7, #12]
 8105934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105936:	b29b      	uxth	r3, r3
 8105938:	2b00      	cmp	r3, #0
 810593a:	d034      	beq.n	81059a6 <HAL_I2C_Master_Receive+0x186>
 810593c:	68fb      	ldr	r3, [r7, #12]
 810593e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105940:	2b00      	cmp	r3, #0
 8105942:	d130      	bne.n	81059a6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8105944:	697b      	ldr	r3, [r7, #20]
 8105946:	9300      	str	r3, [sp, #0]
 8105948:	6a3b      	ldr	r3, [r7, #32]
 810594a:	2200      	movs	r2, #0
 810594c:	2180      	movs	r1, #128	@ 0x80
 810594e:	68f8      	ldr	r0, [r7, #12]
 8105950:	f000 f89a 	bl	8105a88 <I2C_WaitOnFlagUntilTimeout>
 8105954:	4603      	mov	r3, r0
 8105956:	2b00      	cmp	r3, #0
 8105958:	d001      	beq.n	810595e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 810595a:	2301      	movs	r3, #1
 810595c:	e04d      	b.n	81059fa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810595e:	68fb      	ldr	r3, [r7, #12]
 8105960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105962:	b29b      	uxth	r3, r3
 8105964:	2bff      	cmp	r3, #255	@ 0xff
 8105966:	d90e      	bls.n	8105986 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8105968:	68fb      	ldr	r3, [r7, #12]
 810596a:	22ff      	movs	r2, #255	@ 0xff
 810596c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810596e:	68fb      	ldr	r3, [r7, #12]
 8105970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105972:	b2da      	uxtb	r2, r3
 8105974:	8979      	ldrh	r1, [r7, #10]
 8105976:	2300      	movs	r3, #0
 8105978:	9300      	str	r3, [sp, #0]
 810597a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810597e:	68f8      	ldr	r0, [r7, #12]
 8105980:	f000 fad2 	bl	8105f28 <I2C_TransferConfig>
 8105984:	e00f      	b.n	81059a6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8105986:	68fb      	ldr	r3, [r7, #12]
 8105988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810598a:	b29a      	uxth	r2, r3
 810598c:	68fb      	ldr	r3, [r7, #12]
 810598e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8105990:	68fb      	ldr	r3, [r7, #12]
 8105992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105994:	b2da      	uxtb	r2, r3
 8105996:	8979      	ldrh	r1, [r7, #10]
 8105998:	2300      	movs	r3, #0
 810599a:	9300      	str	r3, [sp, #0]
 810599c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81059a0:	68f8      	ldr	r0, [r7, #12]
 81059a2:	f000 fac1 	bl	8105f28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81059a6:	68fb      	ldr	r3, [r7, #12]
 81059a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81059aa:	b29b      	uxth	r3, r3
 81059ac:	2b00      	cmp	r3, #0
 81059ae:	d19d      	bne.n	81058ec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81059b0:	697a      	ldr	r2, [r7, #20]
 81059b2:	6a39      	ldr	r1, [r7, #32]
 81059b4:	68f8      	ldr	r0, [r7, #12]
 81059b6:	f000 f907 	bl	8105bc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 81059ba:	4603      	mov	r3, r0
 81059bc:	2b00      	cmp	r3, #0
 81059be:	d001      	beq.n	81059c4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 81059c0:	2301      	movs	r3, #1
 81059c2:	e01a      	b.n	81059fa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81059c4:	68fb      	ldr	r3, [r7, #12]
 81059c6:	681b      	ldr	r3, [r3, #0]
 81059c8:	2220      	movs	r2, #32
 81059ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81059cc:	68fb      	ldr	r3, [r7, #12]
 81059ce:	681b      	ldr	r3, [r3, #0]
 81059d0:	6859      	ldr	r1, [r3, #4]
 81059d2:	68fb      	ldr	r3, [r7, #12]
 81059d4:	681a      	ldr	r2, [r3, #0]
 81059d6:	4b0c      	ldr	r3, [pc, #48]	@ (8105a08 <HAL_I2C_Master_Receive+0x1e8>)
 81059d8:	400b      	ands	r3, r1
 81059da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81059dc:	68fb      	ldr	r3, [r7, #12]
 81059de:	2220      	movs	r2, #32
 81059e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81059e4:	68fb      	ldr	r3, [r7, #12]
 81059e6:	2200      	movs	r2, #0
 81059e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81059ec:	68fb      	ldr	r3, [r7, #12]
 81059ee:	2200      	movs	r2, #0
 81059f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81059f4:	2300      	movs	r3, #0
 81059f6:	e000      	b.n	81059fa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 81059f8:	2302      	movs	r3, #2
  }
}
 81059fa:	4618      	mov	r0, r3
 81059fc:	3718      	adds	r7, #24
 81059fe:	46bd      	mov	sp, r7
 8105a00:	bd80      	pop	{r7, pc}
 8105a02:	bf00      	nop
 8105a04:	80002400 	.word	0x80002400
 8105a08:	fe00e800 	.word	0xfe00e800

08105a0c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8105a0c:	b480      	push	{r7}
 8105a0e:	b083      	sub	sp, #12
 8105a10:	af00      	add	r7, sp, #0
 8105a12:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8105a14:	687b      	ldr	r3, [r7, #4]
 8105a16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8105a1a:	b2db      	uxtb	r3, r3
}
 8105a1c:	4618      	mov	r0, r3
 8105a1e:	370c      	adds	r7, #12
 8105a20:	46bd      	mov	sp, r7
 8105a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a26:	4770      	bx	lr

08105a28 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8105a28:	b480      	push	{r7}
 8105a2a:	b083      	sub	sp, #12
 8105a2c:	af00      	add	r7, sp, #0
 8105a2e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8105a30:	687b      	ldr	r3, [r7, #4]
 8105a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8105a34:	4618      	mov	r0, r3
 8105a36:	370c      	adds	r7, #12
 8105a38:	46bd      	mov	sp, r7
 8105a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a3e:	4770      	bx	lr

08105a40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8105a40:	b480      	push	{r7}
 8105a42:	b083      	sub	sp, #12
 8105a44:	af00      	add	r7, sp, #0
 8105a46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8105a48:	687b      	ldr	r3, [r7, #4]
 8105a4a:	681b      	ldr	r3, [r3, #0]
 8105a4c:	699b      	ldr	r3, [r3, #24]
 8105a4e:	f003 0302 	and.w	r3, r3, #2
 8105a52:	2b02      	cmp	r3, #2
 8105a54:	d103      	bne.n	8105a5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8105a56:	687b      	ldr	r3, [r7, #4]
 8105a58:	681b      	ldr	r3, [r3, #0]
 8105a5a:	2200      	movs	r2, #0
 8105a5c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8105a5e:	687b      	ldr	r3, [r7, #4]
 8105a60:	681b      	ldr	r3, [r3, #0]
 8105a62:	699b      	ldr	r3, [r3, #24]
 8105a64:	f003 0301 	and.w	r3, r3, #1
 8105a68:	2b01      	cmp	r3, #1
 8105a6a:	d007      	beq.n	8105a7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8105a6c:	687b      	ldr	r3, [r7, #4]
 8105a6e:	681b      	ldr	r3, [r3, #0]
 8105a70:	699a      	ldr	r2, [r3, #24]
 8105a72:	687b      	ldr	r3, [r7, #4]
 8105a74:	681b      	ldr	r3, [r3, #0]
 8105a76:	f042 0201 	orr.w	r2, r2, #1
 8105a7a:	619a      	str	r2, [r3, #24]
  }
}
 8105a7c:	bf00      	nop
 8105a7e:	370c      	adds	r7, #12
 8105a80:	46bd      	mov	sp, r7
 8105a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a86:	4770      	bx	lr

08105a88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8105a88:	b580      	push	{r7, lr}
 8105a8a:	b084      	sub	sp, #16
 8105a8c:	af00      	add	r7, sp, #0
 8105a8e:	60f8      	str	r0, [r7, #12]
 8105a90:	60b9      	str	r1, [r7, #8]
 8105a92:	603b      	str	r3, [r7, #0]
 8105a94:	4613      	mov	r3, r2
 8105a96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105a98:	e03b      	b.n	8105b12 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8105a9a:	69ba      	ldr	r2, [r7, #24]
 8105a9c:	6839      	ldr	r1, [r7, #0]
 8105a9e:	68f8      	ldr	r0, [r7, #12]
 8105aa0:	f000 f962 	bl	8105d68 <I2C_IsErrorOccurred>
 8105aa4:	4603      	mov	r3, r0
 8105aa6:	2b00      	cmp	r3, #0
 8105aa8:	d001      	beq.n	8105aae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8105aaa:	2301      	movs	r3, #1
 8105aac:	e041      	b.n	8105b32 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105aae:	683b      	ldr	r3, [r7, #0]
 8105ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105ab4:	d02d      	beq.n	8105b12 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105ab6:	f7fd fcc1 	bl	810343c <HAL_GetTick>
 8105aba:	4602      	mov	r2, r0
 8105abc:	69bb      	ldr	r3, [r7, #24]
 8105abe:	1ad3      	subs	r3, r2, r3
 8105ac0:	683a      	ldr	r2, [r7, #0]
 8105ac2:	429a      	cmp	r2, r3
 8105ac4:	d302      	bcc.n	8105acc <I2C_WaitOnFlagUntilTimeout+0x44>
 8105ac6:	683b      	ldr	r3, [r7, #0]
 8105ac8:	2b00      	cmp	r3, #0
 8105aca:	d122      	bne.n	8105b12 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8105acc:	68fb      	ldr	r3, [r7, #12]
 8105ace:	681b      	ldr	r3, [r3, #0]
 8105ad0:	699a      	ldr	r2, [r3, #24]
 8105ad2:	68bb      	ldr	r3, [r7, #8]
 8105ad4:	4013      	ands	r3, r2
 8105ad6:	68ba      	ldr	r2, [r7, #8]
 8105ad8:	429a      	cmp	r2, r3
 8105ada:	bf0c      	ite	eq
 8105adc:	2301      	moveq	r3, #1
 8105ade:	2300      	movne	r3, #0
 8105ae0:	b2db      	uxtb	r3, r3
 8105ae2:	461a      	mov	r2, r3
 8105ae4:	79fb      	ldrb	r3, [r7, #7]
 8105ae6:	429a      	cmp	r2, r3
 8105ae8:	d113      	bne.n	8105b12 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105aea:	68fb      	ldr	r3, [r7, #12]
 8105aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105aee:	f043 0220 	orr.w	r2, r3, #32
 8105af2:	68fb      	ldr	r3, [r7, #12]
 8105af4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8105af6:	68fb      	ldr	r3, [r7, #12]
 8105af8:	2220      	movs	r2, #32
 8105afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8105afe:	68fb      	ldr	r3, [r7, #12]
 8105b00:	2200      	movs	r2, #0
 8105b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8105b06:	68fb      	ldr	r3, [r7, #12]
 8105b08:	2200      	movs	r2, #0
 8105b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8105b0e:	2301      	movs	r3, #1
 8105b10:	e00f      	b.n	8105b32 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105b12:	68fb      	ldr	r3, [r7, #12]
 8105b14:	681b      	ldr	r3, [r3, #0]
 8105b16:	699a      	ldr	r2, [r3, #24]
 8105b18:	68bb      	ldr	r3, [r7, #8]
 8105b1a:	4013      	ands	r3, r2
 8105b1c:	68ba      	ldr	r2, [r7, #8]
 8105b1e:	429a      	cmp	r2, r3
 8105b20:	bf0c      	ite	eq
 8105b22:	2301      	moveq	r3, #1
 8105b24:	2300      	movne	r3, #0
 8105b26:	b2db      	uxtb	r3, r3
 8105b28:	461a      	mov	r2, r3
 8105b2a:	79fb      	ldrb	r3, [r7, #7]
 8105b2c:	429a      	cmp	r2, r3
 8105b2e:	d0b4      	beq.n	8105a9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8105b30:	2300      	movs	r3, #0
}
 8105b32:	4618      	mov	r0, r3
 8105b34:	3710      	adds	r7, #16
 8105b36:	46bd      	mov	sp, r7
 8105b38:	bd80      	pop	{r7, pc}

08105b3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8105b3a:	b580      	push	{r7, lr}
 8105b3c:	b084      	sub	sp, #16
 8105b3e:	af00      	add	r7, sp, #0
 8105b40:	60f8      	str	r0, [r7, #12]
 8105b42:	60b9      	str	r1, [r7, #8]
 8105b44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8105b46:	e033      	b.n	8105bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8105b48:	687a      	ldr	r2, [r7, #4]
 8105b4a:	68b9      	ldr	r1, [r7, #8]
 8105b4c:	68f8      	ldr	r0, [r7, #12]
 8105b4e:	f000 f90b 	bl	8105d68 <I2C_IsErrorOccurred>
 8105b52:	4603      	mov	r3, r0
 8105b54:	2b00      	cmp	r3, #0
 8105b56:	d001      	beq.n	8105b5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105b58:	2301      	movs	r3, #1
 8105b5a:	e031      	b.n	8105bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105b5c:	68bb      	ldr	r3, [r7, #8]
 8105b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105b62:	d025      	beq.n	8105bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105b64:	f7fd fc6a 	bl	810343c <HAL_GetTick>
 8105b68:	4602      	mov	r2, r0
 8105b6a:	687b      	ldr	r3, [r7, #4]
 8105b6c:	1ad3      	subs	r3, r2, r3
 8105b6e:	68ba      	ldr	r2, [r7, #8]
 8105b70:	429a      	cmp	r2, r3
 8105b72:	d302      	bcc.n	8105b7a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8105b74:	68bb      	ldr	r3, [r7, #8]
 8105b76:	2b00      	cmp	r3, #0
 8105b78:	d11a      	bne.n	8105bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8105b7a:	68fb      	ldr	r3, [r7, #12]
 8105b7c:	681b      	ldr	r3, [r3, #0]
 8105b7e:	699b      	ldr	r3, [r3, #24]
 8105b80:	f003 0302 	and.w	r3, r3, #2
 8105b84:	2b02      	cmp	r3, #2
 8105b86:	d013      	beq.n	8105bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105b88:	68fb      	ldr	r3, [r7, #12]
 8105b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105b8c:	f043 0220 	orr.w	r2, r3, #32
 8105b90:	68fb      	ldr	r3, [r7, #12]
 8105b92:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8105b94:	68fb      	ldr	r3, [r7, #12]
 8105b96:	2220      	movs	r2, #32
 8105b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8105b9c:	68fb      	ldr	r3, [r7, #12]
 8105b9e:	2200      	movs	r2, #0
 8105ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8105ba4:	68fb      	ldr	r3, [r7, #12]
 8105ba6:	2200      	movs	r2, #0
 8105ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8105bac:	2301      	movs	r3, #1
 8105bae:	e007      	b.n	8105bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8105bb0:	68fb      	ldr	r3, [r7, #12]
 8105bb2:	681b      	ldr	r3, [r3, #0]
 8105bb4:	699b      	ldr	r3, [r3, #24]
 8105bb6:	f003 0302 	and.w	r3, r3, #2
 8105bba:	2b02      	cmp	r3, #2
 8105bbc:	d1c4      	bne.n	8105b48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8105bbe:	2300      	movs	r3, #0
}
 8105bc0:	4618      	mov	r0, r3
 8105bc2:	3710      	adds	r7, #16
 8105bc4:	46bd      	mov	sp, r7
 8105bc6:	bd80      	pop	{r7, pc}

08105bc8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8105bc8:	b580      	push	{r7, lr}
 8105bca:	b084      	sub	sp, #16
 8105bcc:	af00      	add	r7, sp, #0
 8105bce:	60f8      	str	r0, [r7, #12]
 8105bd0:	60b9      	str	r1, [r7, #8]
 8105bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105bd4:	e02f      	b.n	8105c36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8105bd6:	687a      	ldr	r2, [r7, #4]
 8105bd8:	68b9      	ldr	r1, [r7, #8]
 8105bda:	68f8      	ldr	r0, [r7, #12]
 8105bdc:	f000 f8c4 	bl	8105d68 <I2C_IsErrorOccurred>
 8105be0:	4603      	mov	r3, r0
 8105be2:	2b00      	cmp	r3, #0
 8105be4:	d001      	beq.n	8105bea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105be6:	2301      	movs	r3, #1
 8105be8:	e02d      	b.n	8105c46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105bea:	f7fd fc27 	bl	810343c <HAL_GetTick>
 8105bee:	4602      	mov	r2, r0
 8105bf0:	687b      	ldr	r3, [r7, #4]
 8105bf2:	1ad3      	subs	r3, r2, r3
 8105bf4:	68ba      	ldr	r2, [r7, #8]
 8105bf6:	429a      	cmp	r2, r3
 8105bf8:	d302      	bcc.n	8105c00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8105bfa:	68bb      	ldr	r3, [r7, #8]
 8105bfc:	2b00      	cmp	r3, #0
 8105bfe:	d11a      	bne.n	8105c36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8105c00:	68fb      	ldr	r3, [r7, #12]
 8105c02:	681b      	ldr	r3, [r3, #0]
 8105c04:	699b      	ldr	r3, [r3, #24]
 8105c06:	f003 0320 	and.w	r3, r3, #32
 8105c0a:	2b20      	cmp	r3, #32
 8105c0c:	d013      	beq.n	8105c36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105c0e:	68fb      	ldr	r3, [r7, #12]
 8105c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105c12:	f043 0220 	orr.w	r2, r3, #32
 8105c16:	68fb      	ldr	r3, [r7, #12]
 8105c18:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105c1a:	68fb      	ldr	r3, [r7, #12]
 8105c1c:	2220      	movs	r2, #32
 8105c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105c22:	68fb      	ldr	r3, [r7, #12]
 8105c24:	2200      	movs	r2, #0
 8105c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105c2a:	68fb      	ldr	r3, [r7, #12]
 8105c2c:	2200      	movs	r2, #0
 8105c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8105c32:	2301      	movs	r3, #1
 8105c34:	e007      	b.n	8105c46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105c36:	68fb      	ldr	r3, [r7, #12]
 8105c38:	681b      	ldr	r3, [r3, #0]
 8105c3a:	699b      	ldr	r3, [r3, #24]
 8105c3c:	f003 0320 	and.w	r3, r3, #32
 8105c40:	2b20      	cmp	r3, #32
 8105c42:	d1c8      	bne.n	8105bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8105c44:	2300      	movs	r3, #0
}
 8105c46:	4618      	mov	r0, r3
 8105c48:	3710      	adds	r7, #16
 8105c4a:	46bd      	mov	sp, r7
 8105c4c:	bd80      	pop	{r7, pc}
	...

08105c50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8105c50:	b580      	push	{r7, lr}
 8105c52:	b086      	sub	sp, #24
 8105c54:	af00      	add	r7, sp, #0
 8105c56:	60f8      	str	r0, [r7, #12]
 8105c58:	60b9      	str	r1, [r7, #8]
 8105c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8105c5c:	2300      	movs	r3, #0
 8105c5e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8105c60:	e071      	b.n	8105d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8105c62:	687a      	ldr	r2, [r7, #4]
 8105c64:	68b9      	ldr	r1, [r7, #8]
 8105c66:	68f8      	ldr	r0, [r7, #12]
 8105c68:	f000 f87e 	bl	8105d68 <I2C_IsErrorOccurred>
 8105c6c:	4603      	mov	r3, r0
 8105c6e:	2b00      	cmp	r3, #0
 8105c70:	d001      	beq.n	8105c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8105c72:	2301      	movs	r3, #1
 8105c74:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8105c76:	68fb      	ldr	r3, [r7, #12]
 8105c78:	681b      	ldr	r3, [r3, #0]
 8105c7a:	699b      	ldr	r3, [r3, #24]
 8105c7c:	f003 0320 	and.w	r3, r3, #32
 8105c80:	2b20      	cmp	r3, #32
 8105c82:	d13b      	bne.n	8105cfc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8105c84:	7dfb      	ldrb	r3, [r7, #23]
 8105c86:	2b00      	cmp	r3, #0
 8105c88:	d138      	bne.n	8105cfc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8105c8a:	68fb      	ldr	r3, [r7, #12]
 8105c8c:	681b      	ldr	r3, [r3, #0]
 8105c8e:	699b      	ldr	r3, [r3, #24]
 8105c90:	f003 0304 	and.w	r3, r3, #4
 8105c94:	2b04      	cmp	r3, #4
 8105c96:	d105      	bne.n	8105ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8105c98:	68fb      	ldr	r3, [r7, #12]
 8105c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105c9c:	2b00      	cmp	r3, #0
 8105c9e:	d001      	beq.n	8105ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8105ca0:	2300      	movs	r3, #0
 8105ca2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8105ca4:	68fb      	ldr	r3, [r7, #12]
 8105ca6:	681b      	ldr	r3, [r3, #0]
 8105ca8:	699b      	ldr	r3, [r3, #24]
 8105caa:	f003 0310 	and.w	r3, r3, #16
 8105cae:	2b10      	cmp	r3, #16
 8105cb0:	d121      	bne.n	8105cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105cb2:	68fb      	ldr	r3, [r7, #12]
 8105cb4:	681b      	ldr	r3, [r3, #0]
 8105cb6:	2210      	movs	r2, #16
 8105cb8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8105cba:	68fb      	ldr	r3, [r7, #12]
 8105cbc:	2204      	movs	r2, #4
 8105cbe:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105cc0:	68fb      	ldr	r3, [r7, #12]
 8105cc2:	681b      	ldr	r3, [r3, #0]
 8105cc4:	2220      	movs	r2, #32
 8105cc6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8105cc8:	68fb      	ldr	r3, [r7, #12]
 8105cca:	681b      	ldr	r3, [r3, #0]
 8105ccc:	6859      	ldr	r1, [r3, #4]
 8105cce:	68fb      	ldr	r3, [r7, #12]
 8105cd0:	681a      	ldr	r2, [r3, #0]
 8105cd2:	4b24      	ldr	r3, [pc, #144]	@ (8105d64 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8105cd4:	400b      	ands	r3, r1
 8105cd6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8105cd8:	68fb      	ldr	r3, [r7, #12]
 8105cda:	2220      	movs	r2, #32
 8105cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105ce0:	68fb      	ldr	r3, [r7, #12]
 8105ce2:	2200      	movs	r2, #0
 8105ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105ce8:	68fb      	ldr	r3, [r7, #12]
 8105cea:	2200      	movs	r2, #0
 8105cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8105cf0:	2301      	movs	r3, #1
 8105cf2:	75fb      	strb	r3, [r7, #23]
 8105cf4:	e002      	b.n	8105cfc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105cf6:	68fb      	ldr	r3, [r7, #12]
 8105cf8:	2200      	movs	r2, #0
 8105cfa:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8105cfc:	f7fd fb9e 	bl	810343c <HAL_GetTick>
 8105d00:	4602      	mov	r2, r0
 8105d02:	687b      	ldr	r3, [r7, #4]
 8105d04:	1ad3      	subs	r3, r2, r3
 8105d06:	68ba      	ldr	r2, [r7, #8]
 8105d08:	429a      	cmp	r2, r3
 8105d0a:	d302      	bcc.n	8105d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8105d0c:	68bb      	ldr	r3, [r7, #8]
 8105d0e:	2b00      	cmp	r3, #0
 8105d10:	d119      	bne.n	8105d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8105d12:	7dfb      	ldrb	r3, [r7, #23]
 8105d14:	2b00      	cmp	r3, #0
 8105d16:	d116      	bne.n	8105d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8105d18:	68fb      	ldr	r3, [r7, #12]
 8105d1a:	681b      	ldr	r3, [r3, #0]
 8105d1c:	699b      	ldr	r3, [r3, #24]
 8105d1e:	f003 0304 	and.w	r3, r3, #4
 8105d22:	2b04      	cmp	r3, #4
 8105d24:	d00f      	beq.n	8105d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105d26:	68fb      	ldr	r3, [r7, #12]
 8105d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105d2a:	f043 0220 	orr.w	r2, r3, #32
 8105d2e:	68fb      	ldr	r3, [r7, #12]
 8105d30:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105d32:	68fb      	ldr	r3, [r7, #12]
 8105d34:	2220      	movs	r2, #32
 8105d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105d3a:	68fb      	ldr	r3, [r7, #12]
 8105d3c:	2200      	movs	r2, #0
 8105d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8105d42:	2301      	movs	r3, #1
 8105d44:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8105d46:	68fb      	ldr	r3, [r7, #12]
 8105d48:	681b      	ldr	r3, [r3, #0]
 8105d4a:	699b      	ldr	r3, [r3, #24]
 8105d4c:	f003 0304 	and.w	r3, r3, #4
 8105d50:	2b04      	cmp	r3, #4
 8105d52:	d002      	beq.n	8105d5a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8105d54:	7dfb      	ldrb	r3, [r7, #23]
 8105d56:	2b00      	cmp	r3, #0
 8105d58:	d083      	beq.n	8105c62 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8105d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8105d5c:	4618      	mov	r0, r3
 8105d5e:	3718      	adds	r7, #24
 8105d60:	46bd      	mov	sp, r7
 8105d62:	bd80      	pop	{r7, pc}
 8105d64:	fe00e800 	.word	0xfe00e800

08105d68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105d68:	b580      	push	{r7, lr}
 8105d6a:	b08a      	sub	sp, #40	@ 0x28
 8105d6c:	af00      	add	r7, sp, #0
 8105d6e:	60f8      	str	r0, [r7, #12]
 8105d70:	60b9      	str	r1, [r7, #8]
 8105d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8105d74:	2300      	movs	r3, #0
 8105d76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8105d7a:	68fb      	ldr	r3, [r7, #12]
 8105d7c:	681b      	ldr	r3, [r3, #0]
 8105d7e:	699b      	ldr	r3, [r3, #24]
 8105d80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8105d82:	2300      	movs	r3, #0
 8105d84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8105d86:	687b      	ldr	r3, [r7, #4]
 8105d88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8105d8a:	69bb      	ldr	r3, [r7, #24]
 8105d8c:	f003 0310 	and.w	r3, r3, #16
 8105d90:	2b00      	cmp	r3, #0
 8105d92:	d068      	beq.n	8105e66 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105d94:	68fb      	ldr	r3, [r7, #12]
 8105d96:	681b      	ldr	r3, [r3, #0]
 8105d98:	2210      	movs	r2, #16
 8105d9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8105d9c:	e049      	b.n	8105e32 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8105d9e:	68bb      	ldr	r3, [r7, #8]
 8105da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105da4:	d045      	beq.n	8105e32 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8105da6:	f7fd fb49 	bl	810343c <HAL_GetTick>
 8105daa:	4602      	mov	r2, r0
 8105dac:	69fb      	ldr	r3, [r7, #28]
 8105dae:	1ad3      	subs	r3, r2, r3
 8105db0:	68ba      	ldr	r2, [r7, #8]
 8105db2:	429a      	cmp	r2, r3
 8105db4:	d302      	bcc.n	8105dbc <I2C_IsErrorOccurred+0x54>
 8105db6:	68bb      	ldr	r3, [r7, #8]
 8105db8:	2b00      	cmp	r3, #0
 8105dba:	d13a      	bne.n	8105e32 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8105dbc:	68fb      	ldr	r3, [r7, #12]
 8105dbe:	681b      	ldr	r3, [r3, #0]
 8105dc0:	685b      	ldr	r3, [r3, #4]
 8105dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8105dc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8105dc8:	68fb      	ldr	r3, [r7, #12]
 8105dca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8105dce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8105dd0:	68fb      	ldr	r3, [r7, #12]
 8105dd2:	681b      	ldr	r3, [r3, #0]
 8105dd4:	699b      	ldr	r3, [r3, #24]
 8105dd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8105dda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8105dde:	d121      	bne.n	8105e24 <I2C_IsErrorOccurred+0xbc>
 8105de0:	697b      	ldr	r3, [r7, #20]
 8105de2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8105de6:	d01d      	beq.n	8105e24 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8105de8:	7cfb      	ldrb	r3, [r7, #19]
 8105dea:	2b20      	cmp	r3, #32
 8105dec:	d01a      	beq.n	8105e24 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8105dee:	68fb      	ldr	r3, [r7, #12]
 8105df0:	681b      	ldr	r3, [r3, #0]
 8105df2:	685a      	ldr	r2, [r3, #4]
 8105df4:	68fb      	ldr	r3, [r7, #12]
 8105df6:	681b      	ldr	r3, [r3, #0]
 8105df8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8105dfc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8105dfe:	f7fd fb1d 	bl	810343c <HAL_GetTick>
 8105e02:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105e04:	e00e      	b.n	8105e24 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8105e06:	f7fd fb19 	bl	810343c <HAL_GetTick>
 8105e0a:	4602      	mov	r2, r0
 8105e0c:	69fb      	ldr	r3, [r7, #28]
 8105e0e:	1ad3      	subs	r3, r2, r3
 8105e10:	2b19      	cmp	r3, #25
 8105e12:	d907      	bls.n	8105e24 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8105e14:	6a3b      	ldr	r3, [r7, #32]
 8105e16:	f043 0320 	orr.w	r3, r3, #32
 8105e1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8105e1c:	2301      	movs	r3, #1
 8105e1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8105e22:	e006      	b.n	8105e32 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105e24:	68fb      	ldr	r3, [r7, #12]
 8105e26:	681b      	ldr	r3, [r3, #0]
 8105e28:	699b      	ldr	r3, [r3, #24]
 8105e2a:	f003 0320 	and.w	r3, r3, #32
 8105e2e:	2b20      	cmp	r3, #32
 8105e30:	d1e9      	bne.n	8105e06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8105e32:	68fb      	ldr	r3, [r7, #12]
 8105e34:	681b      	ldr	r3, [r3, #0]
 8105e36:	699b      	ldr	r3, [r3, #24]
 8105e38:	f003 0320 	and.w	r3, r3, #32
 8105e3c:	2b20      	cmp	r3, #32
 8105e3e:	d003      	beq.n	8105e48 <I2C_IsErrorOccurred+0xe0>
 8105e40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8105e44:	2b00      	cmp	r3, #0
 8105e46:	d0aa      	beq.n	8105d9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8105e48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8105e4c:	2b00      	cmp	r3, #0
 8105e4e:	d103      	bne.n	8105e58 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105e50:	68fb      	ldr	r3, [r7, #12]
 8105e52:	681b      	ldr	r3, [r3, #0]
 8105e54:	2220      	movs	r2, #32
 8105e56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8105e58:	6a3b      	ldr	r3, [r7, #32]
 8105e5a:	f043 0304 	orr.w	r3, r3, #4
 8105e5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8105e60:	2301      	movs	r3, #1
 8105e62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8105e66:	68fb      	ldr	r3, [r7, #12]
 8105e68:	681b      	ldr	r3, [r3, #0]
 8105e6a:	699b      	ldr	r3, [r3, #24]
 8105e6c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8105e6e:	69bb      	ldr	r3, [r7, #24]
 8105e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105e74:	2b00      	cmp	r3, #0
 8105e76:	d00b      	beq.n	8105e90 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8105e78:	6a3b      	ldr	r3, [r7, #32]
 8105e7a:	f043 0301 	orr.w	r3, r3, #1
 8105e7e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8105e80:	68fb      	ldr	r3, [r7, #12]
 8105e82:	681b      	ldr	r3, [r3, #0]
 8105e84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8105e88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8105e8a:	2301      	movs	r3, #1
 8105e8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8105e90:	69bb      	ldr	r3, [r7, #24]
 8105e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8105e96:	2b00      	cmp	r3, #0
 8105e98:	d00b      	beq.n	8105eb2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8105e9a:	6a3b      	ldr	r3, [r7, #32]
 8105e9c:	f043 0308 	orr.w	r3, r3, #8
 8105ea0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8105ea2:	68fb      	ldr	r3, [r7, #12]
 8105ea4:	681b      	ldr	r3, [r3, #0]
 8105ea6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8105eaa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8105eac:	2301      	movs	r3, #1
 8105eae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8105eb2:	69bb      	ldr	r3, [r7, #24]
 8105eb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8105eb8:	2b00      	cmp	r3, #0
 8105eba:	d00b      	beq.n	8105ed4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8105ebc:	6a3b      	ldr	r3, [r7, #32]
 8105ebe:	f043 0302 	orr.w	r3, r3, #2
 8105ec2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8105ec4:	68fb      	ldr	r3, [r7, #12]
 8105ec6:	681b      	ldr	r3, [r3, #0]
 8105ec8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8105ecc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8105ece:	2301      	movs	r3, #1
 8105ed0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8105ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8105ed8:	2b00      	cmp	r3, #0
 8105eda:	d01c      	beq.n	8105f16 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8105edc:	68f8      	ldr	r0, [r7, #12]
 8105ede:	f7ff fdaf 	bl	8105a40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105ee2:	68fb      	ldr	r3, [r7, #12]
 8105ee4:	681b      	ldr	r3, [r3, #0]
 8105ee6:	6859      	ldr	r1, [r3, #4]
 8105ee8:	68fb      	ldr	r3, [r7, #12]
 8105eea:	681a      	ldr	r2, [r3, #0]
 8105eec:	4b0d      	ldr	r3, [pc, #52]	@ (8105f24 <I2C_IsErrorOccurred+0x1bc>)
 8105eee:	400b      	ands	r3, r1
 8105ef0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8105ef2:	68fb      	ldr	r3, [r7, #12]
 8105ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8105ef6:	6a3b      	ldr	r3, [r7, #32]
 8105ef8:	431a      	orrs	r2, r3
 8105efa:	68fb      	ldr	r3, [r7, #12]
 8105efc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8105efe:	68fb      	ldr	r3, [r7, #12]
 8105f00:	2220      	movs	r2, #32
 8105f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8105f06:	68fb      	ldr	r3, [r7, #12]
 8105f08:	2200      	movs	r2, #0
 8105f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105f0e:	68fb      	ldr	r3, [r7, #12]
 8105f10:	2200      	movs	r2, #0
 8105f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8105f16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8105f1a:	4618      	mov	r0, r3
 8105f1c:	3728      	adds	r7, #40	@ 0x28
 8105f1e:	46bd      	mov	sp, r7
 8105f20:	bd80      	pop	{r7, pc}
 8105f22:	bf00      	nop
 8105f24:	fe00e800 	.word	0xfe00e800

08105f28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8105f28:	b480      	push	{r7}
 8105f2a:	b087      	sub	sp, #28
 8105f2c:	af00      	add	r7, sp, #0
 8105f2e:	60f8      	str	r0, [r7, #12]
 8105f30:	607b      	str	r3, [r7, #4]
 8105f32:	460b      	mov	r3, r1
 8105f34:	817b      	strh	r3, [r7, #10]
 8105f36:	4613      	mov	r3, r2
 8105f38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8105f3a:	897b      	ldrh	r3, [r7, #10]
 8105f3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8105f40:	7a7b      	ldrb	r3, [r7, #9]
 8105f42:	041b      	lsls	r3, r3, #16
 8105f44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8105f48:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8105f4a:	687b      	ldr	r3, [r7, #4]
 8105f4c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8105f4e:	6a3b      	ldr	r3, [r7, #32]
 8105f50:	4313      	orrs	r3, r2
 8105f52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8105f56:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8105f58:	68fb      	ldr	r3, [r7, #12]
 8105f5a:	681b      	ldr	r3, [r3, #0]
 8105f5c:	685a      	ldr	r2, [r3, #4]
 8105f5e:	6a3b      	ldr	r3, [r7, #32]
 8105f60:	0d5b      	lsrs	r3, r3, #21
 8105f62:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8105f66:	4b08      	ldr	r3, [pc, #32]	@ (8105f88 <I2C_TransferConfig+0x60>)
 8105f68:	430b      	orrs	r3, r1
 8105f6a:	43db      	mvns	r3, r3
 8105f6c:	ea02 0103 	and.w	r1, r2, r3
 8105f70:	68fb      	ldr	r3, [r7, #12]
 8105f72:	681b      	ldr	r3, [r3, #0]
 8105f74:	697a      	ldr	r2, [r7, #20]
 8105f76:	430a      	orrs	r2, r1
 8105f78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8105f7a:	bf00      	nop
 8105f7c:	371c      	adds	r7, #28
 8105f7e:	46bd      	mov	sp, r7
 8105f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f84:	4770      	bx	lr
 8105f86:	bf00      	nop
 8105f88:	03ff63ff 	.word	0x03ff63ff

08105f8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8105f8c:	b480      	push	{r7}
 8105f8e:	b083      	sub	sp, #12
 8105f90:	af00      	add	r7, sp, #0
 8105f92:	6078      	str	r0, [r7, #4]
 8105f94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105f96:	687b      	ldr	r3, [r7, #4]
 8105f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8105f9c:	b2db      	uxtb	r3, r3
 8105f9e:	2b20      	cmp	r3, #32
 8105fa0:	d138      	bne.n	8106014 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105fa2:	687b      	ldr	r3, [r7, #4]
 8105fa4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8105fa8:	2b01      	cmp	r3, #1
 8105faa:	d101      	bne.n	8105fb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8105fac:	2302      	movs	r3, #2
 8105fae:	e032      	b.n	8106016 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8105fb0:	687b      	ldr	r3, [r7, #4]
 8105fb2:	2201      	movs	r2, #1
 8105fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105fb8:	687b      	ldr	r3, [r7, #4]
 8105fba:	2224      	movs	r2, #36	@ 0x24
 8105fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8105fc0:	687b      	ldr	r3, [r7, #4]
 8105fc2:	681b      	ldr	r3, [r3, #0]
 8105fc4:	681a      	ldr	r2, [r3, #0]
 8105fc6:	687b      	ldr	r3, [r7, #4]
 8105fc8:	681b      	ldr	r3, [r3, #0]
 8105fca:	f022 0201 	bic.w	r2, r2, #1
 8105fce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8105fd0:	687b      	ldr	r3, [r7, #4]
 8105fd2:	681b      	ldr	r3, [r3, #0]
 8105fd4:	681a      	ldr	r2, [r3, #0]
 8105fd6:	687b      	ldr	r3, [r7, #4]
 8105fd8:	681b      	ldr	r3, [r3, #0]
 8105fda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8105fde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8105fe0:	687b      	ldr	r3, [r7, #4]
 8105fe2:	681b      	ldr	r3, [r3, #0]
 8105fe4:	6819      	ldr	r1, [r3, #0]
 8105fe6:	687b      	ldr	r3, [r7, #4]
 8105fe8:	681b      	ldr	r3, [r3, #0]
 8105fea:	683a      	ldr	r2, [r7, #0]
 8105fec:	430a      	orrs	r2, r1
 8105fee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8105ff0:	687b      	ldr	r3, [r7, #4]
 8105ff2:	681b      	ldr	r3, [r3, #0]
 8105ff4:	681a      	ldr	r2, [r3, #0]
 8105ff6:	687b      	ldr	r3, [r7, #4]
 8105ff8:	681b      	ldr	r3, [r3, #0]
 8105ffa:	f042 0201 	orr.w	r2, r2, #1
 8105ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8106000:	687b      	ldr	r3, [r7, #4]
 8106002:	2220      	movs	r2, #32
 8106004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8106008:	687b      	ldr	r3, [r7, #4]
 810600a:	2200      	movs	r2, #0
 810600c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8106010:	2300      	movs	r3, #0
 8106012:	e000      	b.n	8106016 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8106014:	2302      	movs	r3, #2
  }
}
 8106016:	4618      	mov	r0, r3
 8106018:	370c      	adds	r7, #12
 810601a:	46bd      	mov	sp, r7
 810601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106020:	4770      	bx	lr

08106022 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8106022:	b480      	push	{r7}
 8106024:	b085      	sub	sp, #20
 8106026:	af00      	add	r7, sp, #0
 8106028:	6078      	str	r0, [r7, #4]
 810602a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810602c:	687b      	ldr	r3, [r7, #4]
 810602e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106032:	b2db      	uxtb	r3, r3
 8106034:	2b20      	cmp	r3, #32
 8106036:	d139      	bne.n	81060ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8106038:	687b      	ldr	r3, [r7, #4]
 810603a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810603e:	2b01      	cmp	r3, #1
 8106040:	d101      	bne.n	8106046 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8106042:	2302      	movs	r3, #2
 8106044:	e033      	b.n	81060ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8106046:	687b      	ldr	r3, [r7, #4]
 8106048:	2201      	movs	r2, #1
 810604a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810604e:	687b      	ldr	r3, [r7, #4]
 8106050:	2224      	movs	r2, #36	@ 0x24
 8106052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8106056:	687b      	ldr	r3, [r7, #4]
 8106058:	681b      	ldr	r3, [r3, #0]
 810605a:	681a      	ldr	r2, [r3, #0]
 810605c:	687b      	ldr	r3, [r7, #4]
 810605e:	681b      	ldr	r3, [r3, #0]
 8106060:	f022 0201 	bic.w	r2, r2, #1
 8106064:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8106066:	687b      	ldr	r3, [r7, #4]
 8106068:	681b      	ldr	r3, [r3, #0]
 810606a:	681b      	ldr	r3, [r3, #0]
 810606c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 810606e:	68fb      	ldr	r3, [r7, #12]
 8106070:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8106074:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8106076:	683b      	ldr	r3, [r7, #0]
 8106078:	021b      	lsls	r3, r3, #8
 810607a:	68fa      	ldr	r2, [r7, #12]
 810607c:	4313      	orrs	r3, r2
 810607e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8106080:	687b      	ldr	r3, [r7, #4]
 8106082:	681b      	ldr	r3, [r3, #0]
 8106084:	68fa      	ldr	r2, [r7, #12]
 8106086:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8106088:	687b      	ldr	r3, [r7, #4]
 810608a:	681b      	ldr	r3, [r3, #0]
 810608c:	681a      	ldr	r2, [r3, #0]
 810608e:	687b      	ldr	r3, [r7, #4]
 8106090:	681b      	ldr	r3, [r3, #0]
 8106092:	f042 0201 	orr.w	r2, r2, #1
 8106096:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8106098:	687b      	ldr	r3, [r7, #4]
 810609a:	2220      	movs	r2, #32
 810609c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81060a0:	687b      	ldr	r3, [r7, #4]
 81060a2:	2200      	movs	r2, #0
 81060a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81060a8:	2300      	movs	r3, #0
 81060aa:	e000      	b.n	81060ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81060ac:	2302      	movs	r3, #2
  }
}
 81060ae:	4618      	mov	r0, r3
 81060b0:	3714      	adds	r7, #20
 81060b2:	46bd      	mov	sp, r7
 81060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81060b8:	4770      	bx	lr
	...

081060bc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81060bc:	b580      	push	{r7, lr}
 81060be:	b084      	sub	sp, #16
 81060c0:	af00      	add	r7, sp, #0
 81060c2:	60f8      	str	r0, [r7, #12]
 81060c4:	460b      	mov	r3, r1
 81060c6:	607a      	str	r2, [r7, #4]
 81060c8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81060ca:	4b37      	ldr	r3, [pc, #220]	@ (81061a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81060cc:	681b      	ldr	r3, [r3, #0]
 81060ce:	f023 0201 	bic.w	r2, r3, #1
 81060d2:	4935      	ldr	r1, [pc, #212]	@ (81061a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81060d4:	68fb      	ldr	r3, [r7, #12]
 81060d6:	4313      	orrs	r3, r2
 81060d8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81060da:	687b      	ldr	r3, [r7, #4]
 81060dc:	2b00      	cmp	r3, #0
 81060de:	d123      	bne.n	8106128 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81060e0:	f7fe ffe0 	bl	81050a4 <HAL_GetCurrentCPUID>
 81060e4:	4603      	mov	r3, r0
 81060e6:	2b03      	cmp	r3, #3
 81060e8:	d158      	bne.n	810619c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81060ea:	4b2f      	ldr	r3, [pc, #188]	@ (81061a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81060ec:	691b      	ldr	r3, [r3, #16]
 81060ee:	4a2e      	ldr	r2, [pc, #184]	@ (81061a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81060f0:	f023 0301 	bic.w	r3, r3, #1
 81060f4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81060f6:	4b2d      	ldr	r3, [pc, #180]	@ (81061ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 81060f8:	691b      	ldr	r3, [r3, #16]
 81060fa:	4a2c      	ldr	r2, [pc, #176]	@ (81061ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 81060fc:	f043 0304 	orr.w	r3, r3, #4
 8106100:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8106102:	f3bf 8f4f 	dsb	sy
}
 8106106:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8106108:	f3bf 8f6f 	isb	sy
}
 810610c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810610e:	7afb      	ldrb	r3, [r7, #11]
 8106110:	2b01      	cmp	r3, #1
 8106112:	d101      	bne.n	8106118 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106114:	bf30      	wfi
 8106116:	e000      	b.n	810611a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8106118:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810611a:	4b24      	ldr	r3, [pc, #144]	@ (81061ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 810611c:	691b      	ldr	r3, [r3, #16]
 810611e:	4a23      	ldr	r2, [pc, #140]	@ (81061ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106120:	f023 0304 	bic.w	r3, r3, #4
 8106124:	6113      	str	r3, [r2, #16]
 8106126:	e03c      	b.n	81061a2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8106128:	687b      	ldr	r3, [r7, #4]
 810612a:	2b01      	cmp	r3, #1
 810612c:	d123      	bne.n	8106176 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810612e:	f7fe ffb9 	bl	81050a4 <HAL_GetCurrentCPUID>
 8106132:	4603      	mov	r3, r0
 8106134:	2b01      	cmp	r3, #1
 8106136:	d133      	bne.n	81061a0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8106138:	4b1b      	ldr	r3, [pc, #108]	@ (81061a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810613a:	695b      	ldr	r3, [r3, #20]
 810613c:	4a1a      	ldr	r2, [pc, #104]	@ (81061a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810613e:	f023 0302 	bic.w	r3, r3, #2
 8106142:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106144:	4b19      	ldr	r3, [pc, #100]	@ (81061ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106146:	691b      	ldr	r3, [r3, #16]
 8106148:	4a18      	ldr	r2, [pc, #96]	@ (81061ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 810614a:	f043 0304 	orr.w	r3, r3, #4
 810614e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8106150:	f3bf 8f4f 	dsb	sy
}
 8106154:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8106156:	f3bf 8f6f 	isb	sy
}
 810615a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810615c:	7afb      	ldrb	r3, [r7, #11]
 810615e:	2b01      	cmp	r3, #1
 8106160:	d101      	bne.n	8106166 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106162:	bf30      	wfi
 8106164:	e000      	b.n	8106168 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8106166:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106168:	4b10      	ldr	r3, [pc, #64]	@ (81061ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 810616a:	691b      	ldr	r3, [r3, #16]
 810616c:	4a0f      	ldr	r2, [pc, #60]	@ (81061ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 810616e:	f023 0304 	bic.w	r3, r3, #4
 8106172:	6113      	str	r3, [r2, #16]
 8106174:	e015      	b.n	81061a2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8106176:	f7fe ff95 	bl	81050a4 <HAL_GetCurrentCPUID>
 810617a:	4603      	mov	r3, r0
 810617c:	2b03      	cmp	r3, #3
 810617e:	d106      	bne.n	810618e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8106180:	4b09      	ldr	r3, [pc, #36]	@ (81061a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106182:	691b      	ldr	r3, [r3, #16]
 8106184:	4a08      	ldr	r2, [pc, #32]	@ (81061a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106186:	f023 0304 	bic.w	r3, r3, #4
 810618a:	6113      	str	r3, [r2, #16]
 810618c:	e009      	b.n	81061a2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810618e:	4b06      	ldr	r3, [pc, #24]	@ (81061a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106190:	695b      	ldr	r3, [r3, #20]
 8106192:	4a05      	ldr	r2, [pc, #20]	@ (81061a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106194:	f023 0304 	bic.w	r3, r3, #4
 8106198:	6153      	str	r3, [r2, #20]
 810619a:	e002      	b.n	81061a2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810619c:	bf00      	nop
 810619e:	e000      	b.n	81061a2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81061a0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81061a2:	3710      	adds	r7, #16
 81061a4:	46bd      	mov	sp, r7
 81061a6:	bd80      	pop	{r7, pc}
 81061a8:	58024800 	.word	0x58024800
 81061ac:	e000ed00 	.word	0xe000ed00

081061b0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81061b0:	b580      	push	{r7, lr}
 81061b2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81061b4:	f7fe ff76 	bl	81050a4 <HAL_GetCurrentCPUID>
 81061b8:	4603      	mov	r3, r0
 81061ba:	2b03      	cmp	r3, #3
 81061bc:	d101      	bne.n	81061c2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81061be:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81061c0:	e001      	b.n	81061c6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81061c2:	bf40      	sev
    __WFE ();
 81061c4:	bf20      	wfe
}
 81061c6:	bf00      	nop
 81061c8:	bd80      	pop	{r7, pc}
	...

081061cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81061cc:	b480      	push	{r7}
 81061ce:	b089      	sub	sp, #36	@ 0x24
 81061d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81061d2:	4bb3      	ldr	r3, [pc, #716]	@ (81064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81061d4:	691b      	ldr	r3, [r3, #16]
 81061d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81061da:	2b18      	cmp	r3, #24
 81061dc:	f200 8155 	bhi.w	810648a <HAL_RCC_GetSysClockFreq+0x2be>
 81061e0:	a201      	add	r2, pc, #4	@ (adr r2, 81061e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81061e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81061e6:	bf00      	nop
 81061e8:	0810624d 	.word	0x0810624d
 81061ec:	0810648b 	.word	0x0810648b
 81061f0:	0810648b 	.word	0x0810648b
 81061f4:	0810648b 	.word	0x0810648b
 81061f8:	0810648b 	.word	0x0810648b
 81061fc:	0810648b 	.word	0x0810648b
 8106200:	0810648b 	.word	0x0810648b
 8106204:	0810648b 	.word	0x0810648b
 8106208:	08106273 	.word	0x08106273
 810620c:	0810648b 	.word	0x0810648b
 8106210:	0810648b 	.word	0x0810648b
 8106214:	0810648b 	.word	0x0810648b
 8106218:	0810648b 	.word	0x0810648b
 810621c:	0810648b 	.word	0x0810648b
 8106220:	0810648b 	.word	0x0810648b
 8106224:	0810648b 	.word	0x0810648b
 8106228:	08106279 	.word	0x08106279
 810622c:	0810648b 	.word	0x0810648b
 8106230:	0810648b 	.word	0x0810648b
 8106234:	0810648b 	.word	0x0810648b
 8106238:	0810648b 	.word	0x0810648b
 810623c:	0810648b 	.word	0x0810648b
 8106240:	0810648b 	.word	0x0810648b
 8106244:	0810648b 	.word	0x0810648b
 8106248:	0810627f 	.word	0x0810627f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810624c:	4b94      	ldr	r3, [pc, #592]	@ (81064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810624e:	681b      	ldr	r3, [r3, #0]
 8106250:	f003 0320 	and.w	r3, r3, #32
 8106254:	2b00      	cmp	r3, #0
 8106256:	d009      	beq.n	810626c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106258:	4b91      	ldr	r3, [pc, #580]	@ (81064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810625a:	681b      	ldr	r3, [r3, #0]
 810625c:	08db      	lsrs	r3, r3, #3
 810625e:	f003 0303 	and.w	r3, r3, #3
 8106262:	4a90      	ldr	r2, [pc, #576]	@ (81064a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106264:	fa22 f303 	lsr.w	r3, r2, r3
 8106268:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810626a:	e111      	b.n	8106490 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810626c:	4b8d      	ldr	r3, [pc, #564]	@ (81064a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810626e:	61bb      	str	r3, [r7, #24]
      break;
 8106270:	e10e      	b.n	8106490 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8106272:	4b8d      	ldr	r3, [pc, #564]	@ (81064a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106274:	61bb      	str	r3, [r7, #24]
      break;
 8106276:	e10b      	b.n	8106490 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8106278:	4b8c      	ldr	r3, [pc, #560]	@ (81064ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 810627a:	61bb      	str	r3, [r7, #24]
      break;
 810627c:	e108      	b.n	8106490 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810627e:	4b88      	ldr	r3, [pc, #544]	@ (81064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106282:	f003 0303 	and.w	r3, r3, #3
 8106286:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8106288:	4b85      	ldr	r3, [pc, #532]	@ (81064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810628a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810628c:	091b      	lsrs	r3, r3, #4
 810628e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106292:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8106294:	4b82      	ldr	r3, [pc, #520]	@ (81064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106298:	f003 0301 	and.w	r3, r3, #1
 810629c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810629e:	4b80      	ldr	r3, [pc, #512]	@ (81064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81062a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81062a2:	08db      	lsrs	r3, r3, #3
 81062a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81062a8:	68fa      	ldr	r2, [r7, #12]
 81062aa:	fb02 f303 	mul.w	r3, r2, r3
 81062ae:	ee07 3a90 	vmov	s15, r3
 81062b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81062b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81062ba:	693b      	ldr	r3, [r7, #16]
 81062bc:	2b00      	cmp	r3, #0
 81062be:	f000 80e1 	beq.w	8106484 <HAL_RCC_GetSysClockFreq+0x2b8>
 81062c2:	697b      	ldr	r3, [r7, #20]
 81062c4:	2b02      	cmp	r3, #2
 81062c6:	f000 8083 	beq.w	81063d0 <HAL_RCC_GetSysClockFreq+0x204>
 81062ca:	697b      	ldr	r3, [r7, #20]
 81062cc:	2b02      	cmp	r3, #2
 81062ce:	f200 80a1 	bhi.w	8106414 <HAL_RCC_GetSysClockFreq+0x248>
 81062d2:	697b      	ldr	r3, [r7, #20]
 81062d4:	2b00      	cmp	r3, #0
 81062d6:	d003      	beq.n	81062e0 <HAL_RCC_GetSysClockFreq+0x114>
 81062d8:	697b      	ldr	r3, [r7, #20]
 81062da:	2b01      	cmp	r3, #1
 81062dc:	d056      	beq.n	810638c <HAL_RCC_GetSysClockFreq+0x1c0>
 81062de:	e099      	b.n	8106414 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81062e0:	4b6f      	ldr	r3, [pc, #444]	@ (81064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81062e2:	681b      	ldr	r3, [r3, #0]
 81062e4:	f003 0320 	and.w	r3, r3, #32
 81062e8:	2b00      	cmp	r3, #0
 81062ea:	d02d      	beq.n	8106348 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81062ec:	4b6c      	ldr	r3, [pc, #432]	@ (81064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81062ee:	681b      	ldr	r3, [r3, #0]
 81062f0:	08db      	lsrs	r3, r3, #3
 81062f2:	f003 0303 	and.w	r3, r3, #3
 81062f6:	4a6b      	ldr	r2, [pc, #428]	@ (81064a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81062f8:	fa22 f303 	lsr.w	r3, r2, r3
 81062fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81062fe:	687b      	ldr	r3, [r7, #4]
 8106300:	ee07 3a90 	vmov	s15, r3
 8106304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106308:	693b      	ldr	r3, [r7, #16]
 810630a:	ee07 3a90 	vmov	s15, r3
 810630e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106316:	4b62      	ldr	r3, [pc, #392]	@ (81064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810631a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810631e:	ee07 3a90 	vmov	s15, r3
 8106322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106326:	ed97 6a02 	vldr	s12, [r7, #8]
 810632a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81064b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810632e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106336:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810633a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810633e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106342:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8106346:	e087      	b.n	8106458 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106348:	693b      	ldr	r3, [r7, #16]
 810634a:	ee07 3a90 	vmov	s15, r3
 810634e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106352:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81064b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8106356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810635a:	4b51      	ldr	r3, [pc, #324]	@ (81064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810635c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810635e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106362:	ee07 3a90 	vmov	s15, r3
 8106366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810636a:	ed97 6a02 	vldr	s12, [r7, #8]
 810636e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81064b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810637a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810637e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106386:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810638a:	e065      	b.n	8106458 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810638c:	693b      	ldr	r3, [r7, #16]
 810638e:	ee07 3a90 	vmov	s15, r3
 8106392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106396:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81064b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 810639a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810639e:	4b40      	ldr	r3, [pc, #256]	@ (81064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81063a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81063a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81063a6:	ee07 3a90 	vmov	s15, r3
 81063aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81063ae:	ed97 6a02 	vldr	s12, [r7, #8]
 81063b2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81064b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81063b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81063ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81063be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81063c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81063c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81063ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81063ce:	e043      	b.n	8106458 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81063d0:	693b      	ldr	r3, [r7, #16]
 81063d2:	ee07 3a90 	vmov	s15, r3
 81063d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81063da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 81064bc <HAL_RCC_GetSysClockFreq+0x2f0>
 81063de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81063e2:	4b2f      	ldr	r3, [pc, #188]	@ (81064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81063e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81063e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81063ea:	ee07 3a90 	vmov	s15, r3
 81063ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81063f2:	ed97 6a02 	vldr	s12, [r7, #8]
 81063f6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81064b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81063fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81063fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106402:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810640a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810640e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106412:	e021      	b.n	8106458 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106414:	693b      	ldr	r3, [r7, #16]
 8106416:	ee07 3a90 	vmov	s15, r3
 810641a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810641e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81064b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8106422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106426:	4b1e      	ldr	r3, [pc, #120]	@ (81064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810642a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810642e:	ee07 3a90 	vmov	s15, r3
 8106432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106436:	ed97 6a02 	vldr	s12, [r7, #8]
 810643a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81064b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810643e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106446:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810644a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810644e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106452:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106456:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8106458:	4b11      	ldr	r3, [pc, #68]	@ (81064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810645a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810645c:	0a5b      	lsrs	r3, r3, #9
 810645e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106462:	3301      	adds	r3, #1
 8106464:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8106466:	683b      	ldr	r3, [r7, #0]
 8106468:	ee07 3a90 	vmov	s15, r3
 810646c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8106470:	edd7 6a07 	vldr	s13, [r7, #28]
 8106474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810647c:	ee17 3a90 	vmov	r3, s15
 8106480:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8106482:	e005      	b.n	8106490 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8106484:	2300      	movs	r3, #0
 8106486:	61bb      	str	r3, [r7, #24]
      break;
 8106488:	e002      	b.n	8106490 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810648a:	4b07      	ldr	r3, [pc, #28]	@ (81064a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810648c:	61bb      	str	r3, [r7, #24]
      break;
 810648e:	bf00      	nop
  }

  return sysclockfreq;
 8106490:	69bb      	ldr	r3, [r7, #24]
}
 8106492:	4618      	mov	r0, r3
 8106494:	3724      	adds	r7, #36	@ 0x24
 8106496:	46bd      	mov	sp, r7
 8106498:	f85d 7b04 	ldr.w	r7, [sp], #4
 810649c:	4770      	bx	lr
 810649e:	bf00      	nop
 81064a0:	58024400 	.word	0x58024400
 81064a4:	03d09000 	.word	0x03d09000
 81064a8:	003d0900 	.word	0x003d0900
 81064ac:	007a1200 	.word	0x007a1200
 81064b0:	46000000 	.word	0x46000000
 81064b4:	4c742400 	.word	0x4c742400
 81064b8:	4a742400 	.word	0x4a742400
 81064bc:	4af42400 	.word	0x4af42400

081064c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81064c0:	b580      	push	{r7, lr}
 81064c2:	b082      	sub	sp, #8
 81064c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81064c6:	f7ff fe81 	bl	81061cc <HAL_RCC_GetSysClockFreq>
 81064ca:	4602      	mov	r2, r0
 81064cc:	4b11      	ldr	r3, [pc, #68]	@ (8106514 <HAL_RCC_GetHCLKFreq+0x54>)
 81064ce:	699b      	ldr	r3, [r3, #24]
 81064d0:	0a1b      	lsrs	r3, r3, #8
 81064d2:	f003 030f 	and.w	r3, r3, #15
 81064d6:	4910      	ldr	r1, [pc, #64]	@ (8106518 <HAL_RCC_GetHCLKFreq+0x58>)
 81064d8:	5ccb      	ldrb	r3, [r1, r3]
 81064da:	f003 031f 	and.w	r3, r3, #31
 81064de:	fa22 f303 	lsr.w	r3, r2, r3
 81064e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81064e4:	4b0b      	ldr	r3, [pc, #44]	@ (8106514 <HAL_RCC_GetHCLKFreq+0x54>)
 81064e6:	699b      	ldr	r3, [r3, #24]
 81064e8:	f003 030f 	and.w	r3, r3, #15
 81064ec:	4a0a      	ldr	r2, [pc, #40]	@ (8106518 <HAL_RCC_GetHCLKFreq+0x58>)
 81064ee:	5cd3      	ldrb	r3, [r2, r3]
 81064f0:	f003 031f 	and.w	r3, r3, #31
 81064f4:	687a      	ldr	r2, [r7, #4]
 81064f6:	fa22 f303 	lsr.w	r3, r2, r3
 81064fa:	4a08      	ldr	r2, [pc, #32]	@ (810651c <HAL_RCC_GetHCLKFreq+0x5c>)
 81064fc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81064fe:	4b07      	ldr	r3, [pc, #28]	@ (810651c <HAL_RCC_GetHCLKFreq+0x5c>)
 8106500:	681b      	ldr	r3, [r3, #0]
 8106502:	4a07      	ldr	r2, [pc, #28]	@ (8106520 <HAL_RCC_GetHCLKFreq+0x60>)
 8106504:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8106506:	4b05      	ldr	r3, [pc, #20]	@ (810651c <HAL_RCC_GetHCLKFreq+0x5c>)
 8106508:	681b      	ldr	r3, [r3, #0]
}
 810650a:	4618      	mov	r0, r3
 810650c:	3708      	adds	r7, #8
 810650e:	46bd      	mov	sp, r7
 8106510:	bd80      	pop	{r7, pc}
 8106512:	bf00      	nop
 8106514:	58024400 	.word	0x58024400
 8106518:	08111e8c 	.word	0x08111e8c
 810651c:	10000004 	.word	0x10000004
 8106520:	10000000 	.word	0x10000000

08106524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8106524:	b580      	push	{r7, lr}
 8106526:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8106528:	f7ff ffca 	bl	81064c0 <HAL_RCC_GetHCLKFreq>
 810652c:	4602      	mov	r2, r0
 810652e:	4b06      	ldr	r3, [pc, #24]	@ (8106548 <HAL_RCC_GetPCLK1Freq+0x24>)
 8106530:	69db      	ldr	r3, [r3, #28]
 8106532:	091b      	lsrs	r3, r3, #4
 8106534:	f003 0307 	and.w	r3, r3, #7
 8106538:	4904      	ldr	r1, [pc, #16]	@ (810654c <HAL_RCC_GetPCLK1Freq+0x28>)
 810653a:	5ccb      	ldrb	r3, [r1, r3]
 810653c:	f003 031f 	and.w	r3, r3, #31
 8106540:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8106544:	4618      	mov	r0, r3
 8106546:	bd80      	pop	{r7, pc}
 8106548:	58024400 	.word	0x58024400
 810654c:	08111e8c 	.word	0x08111e8c

08106550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8106550:	b580      	push	{r7, lr}
 8106552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8106554:	f7ff ffb4 	bl	81064c0 <HAL_RCC_GetHCLKFreq>
 8106558:	4602      	mov	r2, r0
 810655a:	4b06      	ldr	r3, [pc, #24]	@ (8106574 <HAL_RCC_GetPCLK2Freq+0x24>)
 810655c:	69db      	ldr	r3, [r3, #28]
 810655e:	0a1b      	lsrs	r3, r3, #8
 8106560:	f003 0307 	and.w	r3, r3, #7
 8106564:	4904      	ldr	r1, [pc, #16]	@ (8106578 <HAL_RCC_GetPCLK2Freq+0x28>)
 8106566:	5ccb      	ldrb	r3, [r1, r3]
 8106568:	f003 031f 	and.w	r3, r3, #31
 810656c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8106570:	4618      	mov	r0, r3
 8106572:	bd80      	pop	{r7, pc}
 8106574:	58024400 	.word	0x58024400
 8106578:	08111e8c 	.word	0x08111e8c

0810657c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810657c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8106580:	b0ca      	sub	sp, #296	@ 0x128
 8106582:	af00      	add	r7, sp, #0
 8106584:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8106588:	2300      	movs	r3, #0
 810658a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810658e:	2300      	movs	r3, #0
 8106590:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8106594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106598:	e9d3 2300 	ldrd	r2, r3, [r3]
 810659c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 81065a0:	2500      	movs	r5, #0
 81065a2:	ea54 0305 	orrs.w	r3, r4, r5
 81065a6:	d049      	beq.n	810663c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 81065a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81065ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81065ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81065b2:	d02f      	beq.n	8106614 <HAL_RCCEx_PeriphCLKConfig+0x98>
 81065b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81065b8:	d828      	bhi.n	810660c <HAL_RCCEx_PeriphCLKConfig+0x90>
 81065ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81065be:	d01a      	beq.n	81065f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81065c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81065c4:	d822      	bhi.n	810660c <HAL_RCCEx_PeriphCLKConfig+0x90>
 81065c6:	2b00      	cmp	r3, #0
 81065c8:	d003      	beq.n	81065d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 81065ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81065ce:	d007      	beq.n	81065e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81065d0:	e01c      	b.n	810660c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81065d2:	4bb8      	ldr	r3, [pc, #736]	@ (81068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81065d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81065d6:	4ab7      	ldr	r2, [pc, #732]	@ (81068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81065d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81065dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81065de:	e01a      	b.n	8106616 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81065e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81065e4:	3308      	adds	r3, #8
 81065e6:	2102      	movs	r1, #2
 81065e8:	4618      	mov	r0, r3
 81065ea:	f002 fb61 	bl	8108cb0 <RCCEx_PLL2_Config>
 81065ee:	4603      	mov	r3, r0
 81065f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81065f4:	e00f      	b.n	8106616 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81065fa:	3328      	adds	r3, #40	@ 0x28
 81065fc:	2102      	movs	r1, #2
 81065fe:	4618      	mov	r0, r3
 8106600:	f002 fc08 	bl	8108e14 <RCCEx_PLL3_Config>
 8106604:	4603      	mov	r3, r0
 8106606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810660a:	e004      	b.n	8106616 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810660c:	2301      	movs	r3, #1
 810660e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106612:	e000      	b.n	8106616 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8106614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810661a:	2b00      	cmp	r3, #0
 810661c:	d10a      	bne.n	8106634 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810661e:	4ba5      	ldr	r3, [pc, #660]	@ (81068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106622:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8106626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810662a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810662c:	4aa1      	ldr	r2, [pc, #644]	@ (81068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810662e:	430b      	orrs	r3, r1
 8106630:	6513      	str	r3, [r2, #80]	@ 0x50
 8106632:	e003      	b.n	810663c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106638:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810663c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106644:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8106648:	f04f 0900 	mov.w	r9, #0
 810664c:	ea58 0309 	orrs.w	r3, r8, r9
 8106650:	d047      	beq.n	81066e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8106652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106658:	2b04      	cmp	r3, #4
 810665a:	d82a      	bhi.n	81066b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 810665c:	a201      	add	r2, pc, #4	@ (adr r2, 8106664 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810665e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106662:	bf00      	nop
 8106664:	08106679 	.word	0x08106679
 8106668:	08106687 	.word	0x08106687
 810666c:	0810669d 	.word	0x0810669d
 8106670:	081066bb 	.word	0x081066bb
 8106674:	081066bb 	.word	0x081066bb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106678:	4b8e      	ldr	r3, [pc, #568]	@ (81068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810667a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810667c:	4a8d      	ldr	r2, [pc, #564]	@ (81068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810667e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106682:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106684:	e01a      	b.n	81066bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810668a:	3308      	adds	r3, #8
 810668c:	2100      	movs	r1, #0
 810668e:	4618      	mov	r0, r3
 8106690:	f002 fb0e 	bl	8108cb0 <RCCEx_PLL2_Config>
 8106694:	4603      	mov	r3, r0
 8106696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810669a:	e00f      	b.n	81066bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810669c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81066a0:	3328      	adds	r3, #40	@ 0x28
 81066a2:	2100      	movs	r1, #0
 81066a4:	4618      	mov	r0, r3
 81066a6:	f002 fbb5 	bl	8108e14 <RCCEx_PLL3_Config>
 81066aa:	4603      	mov	r3, r0
 81066ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81066b0:	e004      	b.n	81066bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81066b2:	2301      	movs	r3, #1
 81066b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81066b8:	e000      	b.n	81066bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81066ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 81066bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81066c0:	2b00      	cmp	r3, #0
 81066c2:	d10a      	bne.n	81066da <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81066c4:	4b7b      	ldr	r3, [pc, #492]	@ (81068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81066c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81066c8:	f023 0107 	bic.w	r1, r3, #7
 81066cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81066d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81066d2:	4a78      	ldr	r2, [pc, #480]	@ (81068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81066d4:	430b      	orrs	r3, r1
 81066d6:	6513      	str	r3, [r2, #80]	@ 0x50
 81066d8:	e003      	b.n	81066e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81066de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81066e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066ea:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 81066ee:	f04f 0b00 	mov.w	fp, #0
 81066f2:	ea5a 030b 	orrs.w	r3, sl, fp
 81066f6:	d04c      	beq.n	8106792 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81066f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81066fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81066fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106702:	d030      	beq.n	8106766 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8106704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106708:	d829      	bhi.n	810675e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810670a:	2bc0      	cmp	r3, #192	@ 0xc0
 810670c:	d02d      	beq.n	810676a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810670e:	2bc0      	cmp	r3, #192	@ 0xc0
 8106710:	d825      	bhi.n	810675e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8106712:	2b80      	cmp	r3, #128	@ 0x80
 8106714:	d018      	beq.n	8106748 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8106716:	2b80      	cmp	r3, #128	@ 0x80
 8106718:	d821      	bhi.n	810675e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810671a:	2b00      	cmp	r3, #0
 810671c:	d002      	beq.n	8106724 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810671e:	2b40      	cmp	r3, #64	@ 0x40
 8106720:	d007      	beq.n	8106732 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8106722:	e01c      	b.n	810675e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106724:	4b63      	ldr	r3, [pc, #396]	@ (81068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106728:	4a62      	ldr	r2, [pc, #392]	@ (81068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810672a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810672e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106730:	e01c      	b.n	810676c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106736:	3308      	adds	r3, #8
 8106738:	2100      	movs	r1, #0
 810673a:	4618      	mov	r0, r3
 810673c:	f002 fab8 	bl	8108cb0 <RCCEx_PLL2_Config>
 8106740:	4603      	mov	r3, r0
 8106742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106746:	e011      	b.n	810676c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810674c:	3328      	adds	r3, #40	@ 0x28
 810674e:	2100      	movs	r1, #0
 8106750:	4618      	mov	r0, r3
 8106752:	f002 fb5f 	bl	8108e14 <RCCEx_PLL3_Config>
 8106756:	4603      	mov	r3, r0
 8106758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810675c:	e006      	b.n	810676c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810675e:	2301      	movs	r3, #1
 8106760:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106764:	e002      	b.n	810676c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8106766:	bf00      	nop
 8106768:	e000      	b.n	810676c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810676a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810676c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106770:	2b00      	cmp	r3, #0
 8106772:	d10a      	bne.n	810678a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8106774:	4b4f      	ldr	r3, [pc, #316]	@ (81068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106778:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 810677c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106782:	4a4c      	ldr	r2, [pc, #304]	@ (81068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106784:	430b      	orrs	r3, r1
 8106786:	6513      	str	r3, [r2, #80]	@ 0x50
 8106788:	e003      	b.n	8106792 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810678a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810678e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8106792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106796:	e9d3 2300 	ldrd	r2, r3, [r3]
 810679a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810679e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 81067a2:	2300      	movs	r3, #0
 81067a4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 81067a8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 81067ac:	460b      	mov	r3, r1
 81067ae:	4313      	orrs	r3, r2
 81067b0:	d053      	beq.n	810685a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 81067b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81067ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81067be:	d035      	beq.n	810682c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81067c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81067c4:	d82e      	bhi.n	8106824 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81067c6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81067ca:	d031      	beq.n	8106830 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81067cc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81067d0:	d828      	bhi.n	8106824 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81067d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81067d6:	d01a      	beq.n	810680e <HAL_RCCEx_PeriphCLKConfig+0x292>
 81067d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81067dc:	d822      	bhi.n	8106824 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81067de:	2b00      	cmp	r3, #0
 81067e0:	d003      	beq.n	81067ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81067e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81067e6:	d007      	beq.n	81067f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 81067e8:	e01c      	b.n	8106824 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81067ea:	4b32      	ldr	r3, [pc, #200]	@ (81068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81067ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81067ee:	4a31      	ldr	r2, [pc, #196]	@ (81068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81067f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81067f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81067f6:	e01c      	b.n	8106832 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81067f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067fc:	3308      	adds	r3, #8
 81067fe:	2100      	movs	r1, #0
 8106800:	4618      	mov	r0, r3
 8106802:	f002 fa55 	bl	8108cb0 <RCCEx_PLL2_Config>
 8106806:	4603      	mov	r3, r0
 8106808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810680c:	e011      	b.n	8106832 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810680e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106812:	3328      	adds	r3, #40	@ 0x28
 8106814:	2100      	movs	r1, #0
 8106816:	4618      	mov	r0, r3
 8106818:	f002 fafc 	bl	8108e14 <RCCEx_PLL3_Config>
 810681c:	4603      	mov	r3, r0
 810681e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106822:	e006      	b.n	8106832 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8106824:	2301      	movs	r3, #1
 8106826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810682a:	e002      	b.n	8106832 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810682c:	bf00      	nop
 810682e:	e000      	b.n	8106832 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8106830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106836:	2b00      	cmp	r3, #0
 8106838:	d10b      	bne.n	8106852 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810683a:	4b1e      	ldr	r3, [pc, #120]	@ (81068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810683c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810683e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8106842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106846:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810684a:	4a1a      	ldr	r2, [pc, #104]	@ (81068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810684c:	430b      	orrs	r3, r1
 810684e:	6593      	str	r3, [r2, #88]	@ 0x58
 8106850:	e003      	b.n	810685a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106856:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810685a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810685e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106862:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8106866:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810686a:	2300      	movs	r3, #0
 810686c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8106870:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8106874:	460b      	mov	r3, r1
 8106876:	4313      	orrs	r3, r2
 8106878:	d056      	beq.n	8106928 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810687a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810687e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8106882:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8106886:	d038      	beq.n	81068fa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8106888:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810688c:	d831      	bhi.n	81068f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810688e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8106892:	d034      	beq.n	81068fe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8106894:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8106898:	d82b      	bhi.n	81068f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810689a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810689e:	d01d      	beq.n	81068dc <HAL_RCCEx_PeriphCLKConfig+0x360>
 81068a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81068a4:	d825      	bhi.n	81068f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81068a6:	2b00      	cmp	r3, #0
 81068a8:	d006      	beq.n	81068b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 81068aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81068ae:	d00a      	beq.n	81068c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81068b0:	e01f      	b.n	81068f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81068b2:	bf00      	nop
 81068b4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81068b8:	4ba2      	ldr	r3, [pc, #648]	@ (8106b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81068ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81068bc:	4aa1      	ldr	r2, [pc, #644]	@ (8106b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81068be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81068c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81068c4:	e01c      	b.n	8106900 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81068c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068ca:	3308      	adds	r3, #8
 81068cc:	2100      	movs	r1, #0
 81068ce:	4618      	mov	r0, r3
 81068d0:	f002 f9ee 	bl	8108cb0 <RCCEx_PLL2_Config>
 81068d4:	4603      	mov	r3, r0
 81068d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81068da:	e011      	b.n	8106900 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81068dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068e0:	3328      	adds	r3, #40	@ 0x28
 81068e2:	2100      	movs	r1, #0
 81068e4:	4618      	mov	r0, r3
 81068e6:	f002 fa95 	bl	8108e14 <RCCEx_PLL3_Config>
 81068ea:	4603      	mov	r3, r0
 81068ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81068f0:	e006      	b.n	8106900 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81068f2:	2301      	movs	r3, #1
 81068f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81068f8:	e002      	b.n	8106900 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81068fa:	bf00      	nop
 81068fc:	e000      	b.n	8106900 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81068fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106904:	2b00      	cmp	r3, #0
 8106906:	d10b      	bne.n	8106920 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8106908:	4b8e      	ldr	r3, [pc, #568]	@ (8106b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810690a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810690c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8106910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106914:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8106918:	4a8a      	ldr	r2, [pc, #552]	@ (8106b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810691a:	430b      	orrs	r3, r1
 810691c:	6593      	str	r3, [r2, #88]	@ 0x58
 810691e:	e003      	b.n	8106928 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106924:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8106928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106930:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8106934:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8106938:	2300      	movs	r3, #0
 810693a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 810693e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8106942:	460b      	mov	r3, r1
 8106944:	4313      	orrs	r3, r2
 8106946:	d03a      	beq.n	81069be <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8106948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810694c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810694e:	2b30      	cmp	r3, #48	@ 0x30
 8106950:	d01f      	beq.n	8106992 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8106952:	2b30      	cmp	r3, #48	@ 0x30
 8106954:	d819      	bhi.n	810698a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8106956:	2b20      	cmp	r3, #32
 8106958:	d00c      	beq.n	8106974 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810695a:	2b20      	cmp	r3, #32
 810695c:	d815      	bhi.n	810698a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810695e:	2b00      	cmp	r3, #0
 8106960:	d019      	beq.n	8106996 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8106962:	2b10      	cmp	r3, #16
 8106964:	d111      	bne.n	810698a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106966:	4b77      	ldr	r3, [pc, #476]	@ (8106b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810696a:	4a76      	ldr	r2, [pc, #472]	@ (8106b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810696c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106970:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8106972:	e011      	b.n	8106998 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106978:	3308      	adds	r3, #8
 810697a:	2102      	movs	r1, #2
 810697c:	4618      	mov	r0, r3
 810697e:	f002 f997 	bl	8108cb0 <RCCEx_PLL2_Config>
 8106982:	4603      	mov	r3, r0
 8106984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8106988:	e006      	b.n	8106998 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810698a:	2301      	movs	r3, #1
 810698c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106990:	e002      	b.n	8106998 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8106992:	bf00      	nop
 8106994:	e000      	b.n	8106998 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8106996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106998:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810699c:	2b00      	cmp	r3, #0
 810699e:	d10a      	bne.n	81069b6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81069a0:	4b68      	ldr	r3, [pc, #416]	@ (8106b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81069a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81069a4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 81069a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81069ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81069ae:	4a65      	ldr	r2, [pc, #404]	@ (8106b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81069b0:	430b      	orrs	r3, r1
 81069b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81069b4:	e003      	b.n	81069be <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81069b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81069ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81069be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81069c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81069c6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81069ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 81069ce:	2300      	movs	r3, #0
 81069d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 81069d4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 81069d8:	460b      	mov	r3, r1
 81069da:	4313      	orrs	r3, r2
 81069dc:	d051      	beq.n	8106a82 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81069de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81069e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81069e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81069e8:	d035      	beq.n	8106a56 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81069ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81069ee:	d82e      	bhi.n	8106a4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81069f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81069f4:	d031      	beq.n	8106a5a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81069f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81069fa:	d828      	bhi.n	8106a4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81069fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106a00:	d01a      	beq.n	8106a38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8106a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106a06:	d822      	bhi.n	8106a4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8106a08:	2b00      	cmp	r3, #0
 8106a0a:	d003      	beq.n	8106a14 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8106a0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106a10:	d007      	beq.n	8106a22 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8106a12:	e01c      	b.n	8106a4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106a14:	4b4b      	ldr	r3, [pc, #300]	@ (8106b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106a18:	4a4a      	ldr	r2, [pc, #296]	@ (8106b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106a20:	e01c      	b.n	8106a5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a26:	3308      	adds	r3, #8
 8106a28:	2100      	movs	r1, #0
 8106a2a:	4618      	mov	r0, r3
 8106a2c:	f002 f940 	bl	8108cb0 <RCCEx_PLL2_Config>
 8106a30:	4603      	mov	r3, r0
 8106a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106a36:	e011      	b.n	8106a5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a3c:	3328      	adds	r3, #40	@ 0x28
 8106a3e:	2100      	movs	r1, #0
 8106a40:	4618      	mov	r0, r3
 8106a42:	f002 f9e7 	bl	8108e14 <RCCEx_PLL3_Config>
 8106a46:	4603      	mov	r3, r0
 8106a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106a4c:	e006      	b.n	8106a5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106a4e:	2301      	movs	r3, #1
 8106a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106a54:	e002      	b.n	8106a5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8106a56:	bf00      	nop
 8106a58:	e000      	b.n	8106a5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8106a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106a60:	2b00      	cmp	r3, #0
 8106a62:	d10a      	bne.n	8106a7a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8106a64:	4b37      	ldr	r3, [pc, #220]	@ (8106b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106a68:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8106a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106a72:	4a34      	ldr	r2, [pc, #208]	@ (8106b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106a74:	430b      	orrs	r3, r1
 8106a76:	6513      	str	r3, [r2, #80]	@ 0x50
 8106a78:	e003      	b.n	8106a82 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106a7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8106a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106a8a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8106a8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8106a92:	2300      	movs	r3, #0
 8106a94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8106a98:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8106a9c:	460b      	mov	r3, r1
 8106a9e:	4313      	orrs	r3, r2
 8106aa0:	d056      	beq.n	8106b50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8106aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106aa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106aa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8106aac:	d033      	beq.n	8106b16 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8106aae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8106ab2:	d82c      	bhi.n	8106b0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106ab4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106ab8:	d02f      	beq.n	8106b1a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8106aba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106abe:	d826      	bhi.n	8106b0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106ac0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106ac4:	d02b      	beq.n	8106b1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8106ac6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106aca:	d820      	bhi.n	8106b0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106acc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106ad0:	d012      	beq.n	8106af8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8106ad2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106ad6:	d81a      	bhi.n	8106b0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106ad8:	2b00      	cmp	r3, #0
 8106ada:	d022      	beq.n	8106b22 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8106adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106ae0:	d115      	bne.n	8106b0e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ae6:	3308      	adds	r3, #8
 8106ae8:	2101      	movs	r1, #1
 8106aea:	4618      	mov	r0, r3
 8106aec:	f002 f8e0 	bl	8108cb0 <RCCEx_PLL2_Config>
 8106af0:	4603      	mov	r3, r0
 8106af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8106af6:	e015      	b.n	8106b24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106afc:	3328      	adds	r3, #40	@ 0x28
 8106afe:	2101      	movs	r1, #1
 8106b00:	4618      	mov	r0, r3
 8106b02:	f002 f987 	bl	8108e14 <RCCEx_PLL3_Config>
 8106b06:	4603      	mov	r3, r0
 8106b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8106b0c:	e00a      	b.n	8106b24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106b0e:	2301      	movs	r3, #1
 8106b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106b14:	e006      	b.n	8106b24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106b16:	bf00      	nop
 8106b18:	e004      	b.n	8106b24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106b1a:	bf00      	nop
 8106b1c:	e002      	b.n	8106b24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106b1e:	bf00      	nop
 8106b20:	e000      	b.n	8106b24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106b28:	2b00      	cmp	r3, #0
 8106b2a:	d10d      	bne.n	8106b48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8106b2c:	4b05      	ldr	r3, [pc, #20]	@ (8106b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106b30:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8106b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106b3a:	4a02      	ldr	r2, [pc, #8]	@ (8106b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106b3c:	430b      	orrs	r3, r1
 8106b3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8106b40:	e006      	b.n	8106b50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8106b42:	bf00      	nop
 8106b44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106b4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8106b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b58:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8106b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8106b60:	2300      	movs	r3, #0
 8106b62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8106b66:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8106b6a:	460b      	mov	r3, r1
 8106b6c:	4313      	orrs	r3, r2
 8106b6e:	d055      	beq.n	8106c1c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8106b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8106b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106b7c:	d033      	beq.n	8106be6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8106b7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106b82:	d82c      	bhi.n	8106bde <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106b88:	d02f      	beq.n	8106bea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8106b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106b8e:	d826      	bhi.n	8106bde <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106b90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106b94:	d02b      	beq.n	8106bee <HAL_RCCEx_PeriphCLKConfig+0x672>
 8106b96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106b9a:	d820      	bhi.n	8106bde <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106b9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106ba0:	d012      	beq.n	8106bc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8106ba2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106ba6:	d81a      	bhi.n	8106bde <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106ba8:	2b00      	cmp	r3, #0
 8106baa:	d022      	beq.n	8106bf2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8106bac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106bb0:	d115      	bne.n	8106bde <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106bb6:	3308      	adds	r3, #8
 8106bb8:	2101      	movs	r1, #1
 8106bba:	4618      	mov	r0, r3
 8106bbc:	f002 f878 	bl	8108cb0 <RCCEx_PLL2_Config>
 8106bc0:	4603      	mov	r3, r0
 8106bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106bc6:	e015      	b.n	8106bf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106bcc:	3328      	adds	r3, #40	@ 0x28
 8106bce:	2101      	movs	r1, #1
 8106bd0:	4618      	mov	r0, r3
 8106bd2:	f002 f91f 	bl	8108e14 <RCCEx_PLL3_Config>
 8106bd6:	4603      	mov	r3, r0
 8106bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106bdc:	e00a      	b.n	8106bf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8106bde:	2301      	movs	r3, #1
 8106be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106be4:	e006      	b.n	8106bf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106be6:	bf00      	nop
 8106be8:	e004      	b.n	8106bf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106bea:	bf00      	nop
 8106bec:	e002      	b.n	8106bf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106bee:	bf00      	nop
 8106bf0:	e000      	b.n	8106bf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106bf8:	2b00      	cmp	r3, #0
 8106bfa:	d10b      	bne.n	8106c14 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8106bfc:	4ba4      	ldr	r3, [pc, #656]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106c00:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8106c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8106c0c:	4aa0      	ldr	r2, [pc, #640]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106c0e:	430b      	orrs	r3, r1
 8106c10:	6593      	str	r3, [r2, #88]	@ 0x58
 8106c12:	e003      	b.n	8106c1c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106c18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8106c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c24:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8106c28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8106c2c:	2300      	movs	r3, #0
 8106c2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8106c32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8106c36:	460b      	mov	r3, r1
 8106c38:	4313      	orrs	r3, r2
 8106c3a:	d037      	beq.n	8106cac <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8106c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106c42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106c46:	d00e      	beq.n	8106c66 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8106c48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106c4c:	d816      	bhi.n	8106c7c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8106c4e:	2b00      	cmp	r3, #0
 8106c50:	d018      	beq.n	8106c84 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8106c52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106c56:	d111      	bne.n	8106c7c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106c58:	4b8d      	ldr	r3, [pc, #564]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106c5c:	4a8c      	ldr	r2, [pc, #560]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106c64:	e00f      	b.n	8106c86 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c6a:	3308      	adds	r3, #8
 8106c6c:	2101      	movs	r1, #1
 8106c6e:	4618      	mov	r0, r3
 8106c70:	f002 f81e 	bl	8108cb0 <RCCEx_PLL2_Config>
 8106c74:	4603      	mov	r3, r0
 8106c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106c7a:	e004      	b.n	8106c86 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106c7c:	2301      	movs	r3, #1
 8106c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106c82:	e000      	b.n	8106c86 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8106c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106c8a:	2b00      	cmp	r3, #0
 8106c8c:	d10a      	bne.n	8106ca4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8106c8e:	4b80      	ldr	r3, [pc, #512]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106c92:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8106c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106c9c:	4a7c      	ldr	r2, [pc, #496]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106c9e:	430b      	orrs	r3, r1
 8106ca0:	6513      	str	r3, [r2, #80]	@ 0x50
 8106ca2:	e003      	b.n	8106cac <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106ca8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8106cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106cb4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8106cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8106cbc:	2300      	movs	r3, #0
 8106cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8106cc2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8106cc6:	460b      	mov	r3, r1
 8106cc8:	4313      	orrs	r3, r2
 8106cca:	d039      	beq.n	8106d40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8106ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106cd2:	2b03      	cmp	r3, #3
 8106cd4:	d81c      	bhi.n	8106d10 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8106cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8106cdc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8106cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106cdc:	08106d19 	.word	0x08106d19
 8106ce0:	08106ced 	.word	0x08106ced
 8106ce4:	08106cfb 	.word	0x08106cfb
 8106ce8:	08106d19 	.word	0x08106d19
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106cec:	4b68      	ldr	r3, [pc, #416]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106cf0:	4a67      	ldr	r2, [pc, #412]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106cf8:	e00f      	b.n	8106d1a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106cfe:	3308      	adds	r3, #8
 8106d00:	2102      	movs	r1, #2
 8106d02:	4618      	mov	r0, r3
 8106d04:	f001 ffd4 	bl	8108cb0 <RCCEx_PLL2_Config>
 8106d08:	4603      	mov	r3, r0
 8106d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106d0e:	e004      	b.n	8106d1a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8106d10:	2301      	movs	r3, #1
 8106d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106d16:	e000      	b.n	8106d1a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8106d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d1e:	2b00      	cmp	r3, #0
 8106d20:	d10a      	bne.n	8106d38 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8106d22:	4b5b      	ldr	r3, [pc, #364]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106d26:	f023 0103 	bic.w	r1, r3, #3
 8106d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106d30:	4a57      	ldr	r2, [pc, #348]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106d32:	430b      	orrs	r3, r1
 8106d34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106d36:	e003      	b.n	8106d40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8106d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d48:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8106d4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8106d50:	2300      	movs	r3, #0
 8106d52:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8106d56:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8106d5a:	460b      	mov	r3, r1
 8106d5c:	4313      	orrs	r3, r2
 8106d5e:	f000 809f 	beq.w	8106ea0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8106d62:	4b4c      	ldr	r3, [pc, #304]	@ (8106e94 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106d64:	681b      	ldr	r3, [r3, #0]
 8106d66:	4a4b      	ldr	r2, [pc, #300]	@ (8106e94 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8106d6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8106d6e:	f7fc fb65 	bl	810343c <HAL_GetTick>
 8106d72:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106d76:	e00b      	b.n	8106d90 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106d78:	f7fc fb60 	bl	810343c <HAL_GetTick>
 8106d7c:	4602      	mov	r2, r0
 8106d7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8106d82:	1ad3      	subs	r3, r2, r3
 8106d84:	2b64      	cmp	r3, #100	@ 0x64
 8106d86:	d903      	bls.n	8106d90 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8106d88:	2303      	movs	r3, #3
 8106d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106d8e:	e005      	b.n	8106d9c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106d90:	4b40      	ldr	r3, [pc, #256]	@ (8106e94 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106d92:	681b      	ldr	r3, [r3, #0]
 8106d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106d98:	2b00      	cmp	r3, #0
 8106d9a:	d0ed      	beq.n	8106d78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8106d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106da0:	2b00      	cmp	r3, #0
 8106da2:	d179      	bne.n	8106e98 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8106da4:	4b3a      	ldr	r3, [pc, #232]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106da6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8106da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106dac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106db0:	4053      	eors	r3, r2
 8106db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106db6:	2b00      	cmp	r3, #0
 8106db8:	d015      	beq.n	8106de6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8106dba:	4b35      	ldr	r3, [pc, #212]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8106dc2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8106dc6:	4b32      	ldr	r3, [pc, #200]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106dca:	4a31      	ldr	r2, [pc, #196]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8106dd0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8106dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106dd6:	4a2e      	ldr	r2, [pc, #184]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106dd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8106ddc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8106dde:	4a2c      	ldr	r2, [pc, #176]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106de0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106de4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8106de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106dea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106df2:	d118      	bne.n	8106e26 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8106df4:	f7fc fb22 	bl	810343c <HAL_GetTick>
 8106df8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106dfc:	e00d      	b.n	8106e1a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8106dfe:	f7fc fb1d 	bl	810343c <HAL_GetTick>
 8106e02:	4602      	mov	r2, r0
 8106e04:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8106e08:	1ad2      	subs	r2, r2, r3
 8106e0a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8106e0e:	429a      	cmp	r2, r3
 8106e10:	d903      	bls.n	8106e1a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8106e12:	2303      	movs	r3, #3
 8106e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8106e18:	e005      	b.n	8106e26 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106e1e:	f003 0302 	and.w	r3, r3, #2
 8106e22:	2b00      	cmp	r3, #0
 8106e24:	d0eb      	beq.n	8106dfe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8106e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106e2a:	2b00      	cmp	r3, #0
 8106e2c:	d12b      	bne.n	8106e86 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8106e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106e3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106e3e:	d110      	bne.n	8106e62 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8106e40:	4b13      	ldr	r3, [pc, #76]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e42:	691b      	ldr	r3, [r3, #16]
 8106e44:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8106e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106e50:	091b      	lsrs	r3, r3, #4
 8106e52:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8106e56:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8106e5a:	4a0d      	ldr	r2, [pc, #52]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e5c:	430b      	orrs	r3, r1
 8106e5e:	6113      	str	r3, [r2, #16]
 8106e60:	e005      	b.n	8106e6e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8106e62:	4b0b      	ldr	r3, [pc, #44]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e64:	691b      	ldr	r3, [r3, #16]
 8106e66:	4a0a      	ldr	r2, [pc, #40]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e68:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8106e6c:	6113      	str	r3, [r2, #16]
 8106e6e:	4b08      	ldr	r3, [pc, #32]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e70:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8106e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106e7e:	4a04      	ldr	r2, [pc, #16]	@ (8106e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e80:	430b      	orrs	r3, r1
 8106e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8106e84:	e00c      	b.n	8106ea0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8106e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106e8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8106e8e:	e007      	b.n	8106ea0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8106e90:	58024400 	.word	0x58024400
 8106e94:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106e9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ea8:	f002 0301 	and.w	r3, r2, #1
 8106eac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8106eb0:	2300      	movs	r3, #0
 8106eb2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8106eb6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8106eba:	460b      	mov	r3, r1
 8106ebc:	4313      	orrs	r3, r2
 8106ebe:	f000 8089 	beq.w	8106fd4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8106ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ec6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8106ec8:	2b28      	cmp	r3, #40	@ 0x28
 8106eca:	d86b      	bhi.n	8106fa4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8106ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8106ed4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8106ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106ed2:	bf00      	nop
 8106ed4:	08106fad 	.word	0x08106fad
 8106ed8:	08106fa5 	.word	0x08106fa5
 8106edc:	08106fa5 	.word	0x08106fa5
 8106ee0:	08106fa5 	.word	0x08106fa5
 8106ee4:	08106fa5 	.word	0x08106fa5
 8106ee8:	08106fa5 	.word	0x08106fa5
 8106eec:	08106fa5 	.word	0x08106fa5
 8106ef0:	08106fa5 	.word	0x08106fa5
 8106ef4:	08106f79 	.word	0x08106f79
 8106ef8:	08106fa5 	.word	0x08106fa5
 8106efc:	08106fa5 	.word	0x08106fa5
 8106f00:	08106fa5 	.word	0x08106fa5
 8106f04:	08106fa5 	.word	0x08106fa5
 8106f08:	08106fa5 	.word	0x08106fa5
 8106f0c:	08106fa5 	.word	0x08106fa5
 8106f10:	08106fa5 	.word	0x08106fa5
 8106f14:	08106f8f 	.word	0x08106f8f
 8106f18:	08106fa5 	.word	0x08106fa5
 8106f1c:	08106fa5 	.word	0x08106fa5
 8106f20:	08106fa5 	.word	0x08106fa5
 8106f24:	08106fa5 	.word	0x08106fa5
 8106f28:	08106fa5 	.word	0x08106fa5
 8106f2c:	08106fa5 	.word	0x08106fa5
 8106f30:	08106fa5 	.word	0x08106fa5
 8106f34:	08106fad 	.word	0x08106fad
 8106f38:	08106fa5 	.word	0x08106fa5
 8106f3c:	08106fa5 	.word	0x08106fa5
 8106f40:	08106fa5 	.word	0x08106fa5
 8106f44:	08106fa5 	.word	0x08106fa5
 8106f48:	08106fa5 	.word	0x08106fa5
 8106f4c:	08106fa5 	.word	0x08106fa5
 8106f50:	08106fa5 	.word	0x08106fa5
 8106f54:	08106fad 	.word	0x08106fad
 8106f58:	08106fa5 	.word	0x08106fa5
 8106f5c:	08106fa5 	.word	0x08106fa5
 8106f60:	08106fa5 	.word	0x08106fa5
 8106f64:	08106fa5 	.word	0x08106fa5
 8106f68:	08106fa5 	.word	0x08106fa5
 8106f6c:	08106fa5 	.word	0x08106fa5
 8106f70:	08106fa5 	.word	0x08106fa5
 8106f74:	08106fad 	.word	0x08106fad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f7c:	3308      	adds	r3, #8
 8106f7e:	2101      	movs	r1, #1
 8106f80:	4618      	mov	r0, r3
 8106f82:	f001 fe95 	bl	8108cb0 <RCCEx_PLL2_Config>
 8106f86:	4603      	mov	r3, r0
 8106f88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106f8c:	e00f      	b.n	8106fae <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f92:	3328      	adds	r3, #40	@ 0x28
 8106f94:	2101      	movs	r1, #1
 8106f96:	4618      	mov	r0, r3
 8106f98:	f001 ff3c 	bl	8108e14 <RCCEx_PLL3_Config>
 8106f9c:	4603      	mov	r3, r0
 8106f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106fa2:	e004      	b.n	8106fae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106fa4:	2301      	movs	r3, #1
 8106fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106faa:	e000      	b.n	8106fae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8106fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106fb2:	2b00      	cmp	r3, #0
 8106fb4:	d10a      	bne.n	8106fcc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8106fb6:	4bbf      	ldr	r3, [pc, #764]	@ (81072b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106fba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8106fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8106fc4:	4abb      	ldr	r2, [pc, #748]	@ (81072b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106fc6:	430b      	orrs	r3, r1
 8106fc8:	6553      	str	r3, [r2, #84]	@ 0x54
 8106fca:	e003      	b.n	8106fd4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106fd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8106fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106fdc:	f002 0302 	and.w	r3, r2, #2
 8106fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8106fe4:	2300      	movs	r3, #0
 8106fe6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8106fea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8106fee:	460b      	mov	r3, r1
 8106ff0:	4313      	orrs	r3, r2
 8106ff2:	d041      	beq.n	8107078 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8106ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8106ffa:	2b05      	cmp	r3, #5
 8106ffc:	d824      	bhi.n	8107048 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8106ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8107004 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8107000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107004:	08107051 	.word	0x08107051
 8107008:	0810701d 	.word	0x0810701d
 810700c:	08107033 	.word	0x08107033
 8107010:	08107051 	.word	0x08107051
 8107014:	08107051 	.word	0x08107051
 8107018:	08107051 	.word	0x08107051
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810701c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107020:	3308      	adds	r3, #8
 8107022:	2101      	movs	r1, #1
 8107024:	4618      	mov	r0, r3
 8107026:	f001 fe43 	bl	8108cb0 <RCCEx_PLL2_Config>
 810702a:	4603      	mov	r3, r0
 810702c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8107030:	e00f      	b.n	8107052 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107036:	3328      	adds	r3, #40	@ 0x28
 8107038:	2101      	movs	r1, #1
 810703a:	4618      	mov	r0, r3
 810703c:	f001 feea 	bl	8108e14 <RCCEx_PLL3_Config>
 8107040:	4603      	mov	r3, r0
 8107042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8107046:	e004      	b.n	8107052 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107048:	2301      	movs	r3, #1
 810704a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810704e:	e000      	b.n	8107052 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8107050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107056:	2b00      	cmp	r3, #0
 8107058:	d10a      	bne.n	8107070 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810705a:	4b96      	ldr	r3, [pc, #600]	@ (81072b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810705c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810705e:	f023 0107 	bic.w	r1, r3, #7
 8107062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107066:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8107068:	4a92      	ldr	r2, [pc, #584]	@ (81072b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810706a:	430b      	orrs	r3, r1
 810706c:	6553      	str	r3, [r2, #84]	@ 0x54
 810706e:	e003      	b.n	8107078 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107074:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8107078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107080:	f002 0304 	and.w	r3, r2, #4
 8107084:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8107088:	2300      	movs	r3, #0
 810708a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810708e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8107092:	460b      	mov	r3, r1
 8107094:	4313      	orrs	r3, r2
 8107096:	d044      	beq.n	8107122 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8107098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810709c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81070a0:	2b05      	cmp	r3, #5
 81070a2:	d825      	bhi.n	81070f0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 81070a4:	a201      	add	r2, pc, #4	@ (adr r2, 81070ac <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 81070a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81070aa:	bf00      	nop
 81070ac:	081070f9 	.word	0x081070f9
 81070b0:	081070c5 	.word	0x081070c5
 81070b4:	081070db 	.word	0x081070db
 81070b8:	081070f9 	.word	0x081070f9
 81070bc:	081070f9 	.word	0x081070f9
 81070c0:	081070f9 	.word	0x081070f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81070c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070c8:	3308      	adds	r3, #8
 81070ca:	2101      	movs	r1, #1
 81070cc:	4618      	mov	r0, r3
 81070ce:	f001 fdef 	bl	8108cb0 <RCCEx_PLL2_Config>
 81070d2:	4603      	mov	r3, r0
 81070d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81070d8:	e00f      	b.n	81070fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81070da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070de:	3328      	adds	r3, #40	@ 0x28
 81070e0:	2101      	movs	r1, #1
 81070e2:	4618      	mov	r0, r3
 81070e4:	f001 fe96 	bl	8108e14 <RCCEx_PLL3_Config>
 81070e8:	4603      	mov	r3, r0
 81070ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81070ee:	e004      	b.n	81070fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81070f0:	2301      	movs	r3, #1
 81070f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81070f6:	e000      	b.n	81070fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 81070f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81070fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81070fe:	2b00      	cmp	r3, #0
 8107100:	d10b      	bne.n	810711a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8107102:	4b6c      	ldr	r3, [pc, #432]	@ (81072b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107106:	f023 0107 	bic.w	r1, r3, #7
 810710a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810710e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8107112:	4a68      	ldr	r2, [pc, #416]	@ (81072b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107114:	430b      	orrs	r3, r1
 8107116:	6593      	str	r3, [r2, #88]	@ 0x58
 8107118:	e003      	b.n	8107122 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810711a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810711e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8107122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107126:	e9d3 2300 	ldrd	r2, r3, [r3]
 810712a:	f002 0320 	and.w	r3, r2, #32
 810712e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8107132:	2300      	movs	r3, #0
 8107134:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8107138:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 810713c:	460b      	mov	r3, r1
 810713e:	4313      	orrs	r3, r2
 8107140:	d055      	beq.n	81071ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8107142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810714a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810714e:	d033      	beq.n	81071b8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8107150:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107154:	d82c      	bhi.n	81071b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8107156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810715a:	d02f      	beq.n	81071bc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 810715c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107160:	d826      	bhi.n	81071b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8107162:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107166:	d02b      	beq.n	81071c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8107168:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810716c:	d820      	bhi.n	81071b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810716e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107172:	d012      	beq.n	810719a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8107174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107178:	d81a      	bhi.n	81071b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810717a:	2b00      	cmp	r3, #0
 810717c:	d022      	beq.n	81071c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 810717e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107182:	d115      	bne.n	81071b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107188:	3308      	adds	r3, #8
 810718a:	2100      	movs	r1, #0
 810718c:	4618      	mov	r0, r3
 810718e:	f001 fd8f 	bl	8108cb0 <RCCEx_PLL2_Config>
 8107192:	4603      	mov	r3, r0
 8107194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8107198:	e015      	b.n	81071c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810719a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810719e:	3328      	adds	r3, #40	@ 0x28
 81071a0:	2102      	movs	r1, #2
 81071a2:	4618      	mov	r0, r3
 81071a4:	f001 fe36 	bl	8108e14 <RCCEx_PLL3_Config>
 81071a8:	4603      	mov	r3, r0
 81071aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81071ae:	e00a      	b.n	81071c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81071b0:	2301      	movs	r3, #1
 81071b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81071b6:	e006      	b.n	81071c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81071b8:	bf00      	nop
 81071ba:	e004      	b.n	81071c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81071bc:	bf00      	nop
 81071be:	e002      	b.n	81071c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81071c0:	bf00      	nop
 81071c2:	e000      	b.n	81071c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81071c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81071c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81071ca:	2b00      	cmp	r3, #0
 81071cc:	d10b      	bne.n	81071e6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81071ce:	4b39      	ldr	r3, [pc, #228]	@ (81072b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81071d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81071d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81071d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81071de:	4a35      	ldr	r2, [pc, #212]	@ (81072b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81071e0:	430b      	orrs	r3, r1
 81071e2:	6553      	str	r3, [r2, #84]	@ 0x54
 81071e4:	e003      	b.n	81071ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81071e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81071ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81071ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81071f6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 81071fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 81071fe:	2300      	movs	r3, #0
 8107200:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8107204:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8107208:	460b      	mov	r3, r1
 810720a:	4313      	orrs	r3, r2
 810720c:	d058      	beq.n	81072c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810720e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107212:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8107216:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810721a:	d033      	beq.n	8107284 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 810721c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8107220:	d82c      	bhi.n	810727c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107226:	d02f      	beq.n	8107288 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8107228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810722c:	d826      	bhi.n	810727c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810722e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8107232:	d02b      	beq.n	810728c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8107234:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8107238:	d820      	bhi.n	810727c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810723a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810723e:	d012      	beq.n	8107266 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8107240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8107244:	d81a      	bhi.n	810727c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107246:	2b00      	cmp	r3, #0
 8107248:	d022      	beq.n	8107290 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 810724a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810724e:	d115      	bne.n	810727c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107254:	3308      	adds	r3, #8
 8107256:	2100      	movs	r1, #0
 8107258:	4618      	mov	r0, r3
 810725a:	f001 fd29 	bl	8108cb0 <RCCEx_PLL2_Config>
 810725e:	4603      	mov	r3, r0
 8107260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8107264:	e015      	b.n	8107292 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810726a:	3328      	adds	r3, #40	@ 0x28
 810726c:	2102      	movs	r1, #2
 810726e:	4618      	mov	r0, r3
 8107270:	f001 fdd0 	bl	8108e14 <RCCEx_PLL3_Config>
 8107274:	4603      	mov	r3, r0
 8107276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810727a:	e00a      	b.n	8107292 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810727c:	2301      	movs	r3, #1
 810727e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107282:	e006      	b.n	8107292 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8107284:	bf00      	nop
 8107286:	e004      	b.n	8107292 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8107288:	bf00      	nop
 810728a:	e002      	b.n	8107292 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810728c:	bf00      	nop
 810728e:	e000      	b.n	8107292 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8107290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107296:	2b00      	cmp	r3, #0
 8107298:	d10e      	bne.n	81072b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810729a:	4b06      	ldr	r3, [pc, #24]	@ (81072b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810729c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810729e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 81072a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81072a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81072aa:	4a02      	ldr	r2, [pc, #8]	@ (81072b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81072ac:	430b      	orrs	r3, r1
 81072ae:	6593      	str	r3, [r2, #88]	@ 0x58
 81072b0:	e006      	b.n	81072c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 81072b2:	bf00      	nop
 81072b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81072b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81072bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81072c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81072c8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 81072cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 81072d0:	2300      	movs	r3, #0
 81072d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 81072d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 81072da:	460b      	mov	r3, r1
 81072dc:	4313      	orrs	r3, r2
 81072de:	d055      	beq.n	810738c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81072e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81072e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81072e8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81072ec:	d033      	beq.n	8107356 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 81072ee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81072f2:	d82c      	bhi.n	810734e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81072f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81072f8:	d02f      	beq.n	810735a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 81072fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81072fe:	d826      	bhi.n	810734e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107300:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8107304:	d02b      	beq.n	810735e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8107306:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810730a:	d820      	bhi.n	810734e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810730c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107310:	d012      	beq.n	8107338 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8107312:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107316:	d81a      	bhi.n	810734e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107318:	2b00      	cmp	r3, #0
 810731a:	d022      	beq.n	8107362 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 810731c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107320:	d115      	bne.n	810734e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107326:	3308      	adds	r3, #8
 8107328:	2100      	movs	r1, #0
 810732a:	4618      	mov	r0, r3
 810732c:	f001 fcc0 	bl	8108cb0 <RCCEx_PLL2_Config>
 8107330:	4603      	mov	r3, r0
 8107332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8107336:	e015      	b.n	8107364 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810733c:	3328      	adds	r3, #40	@ 0x28
 810733e:	2102      	movs	r1, #2
 8107340:	4618      	mov	r0, r3
 8107342:	f001 fd67 	bl	8108e14 <RCCEx_PLL3_Config>
 8107346:	4603      	mov	r3, r0
 8107348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810734c:	e00a      	b.n	8107364 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810734e:	2301      	movs	r3, #1
 8107350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107354:	e006      	b.n	8107364 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107356:	bf00      	nop
 8107358:	e004      	b.n	8107364 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810735a:	bf00      	nop
 810735c:	e002      	b.n	8107364 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810735e:	bf00      	nop
 8107360:	e000      	b.n	8107364 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107364:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107368:	2b00      	cmp	r3, #0
 810736a:	d10b      	bne.n	8107384 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810736c:	4ba1      	ldr	r3, [pc, #644]	@ (81075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810736e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107370:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8107374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107378:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810737c:	4a9d      	ldr	r2, [pc, #628]	@ (81075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810737e:	430b      	orrs	r3, r1
 8107380:	6593      	str	r3, [r2, #88]	@ 0x58
 8107382:	e003      	b.n	810738c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107384:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107388:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810738c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107394:	f002 0308 	and.w	r3, r2, #8
 8107398:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810739c:	2300      	movs	r3, #0
 810739e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 81073a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 81073a6:	460b      	mov	r3, r1
 81073a8:	4313      	orrs	r3, r2
 81073aa:	d01e      	beq.n	81073ea <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81073ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81073b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81073b8:	d10c      	bne.n	81073d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81073ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073be:	3328      	adds	r3, #40	@ 0x28
 81073c0:	2102      	movs	r1, #2
 81073c2:	4618      	mov	r0, r3
 81073c4:	f001 fd26 	bl	8108e14 <RCCEx_PLL3_Config>
 81073c8:	4603      	mov	r3, r0
 81073ca:	2b00      	cmp	r3, #0
 81073cc:	d002      	beq.n	81073d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 81073ce:	2301      	movs	r3, #1
 81073d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81073d4:	4b87      	ldr	r3, [pc, #540]	@ (81075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81073d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81073d8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81073dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81073e4:	4a83      	ldr	r2, [pc, #524]	@ (81075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81073e6:	430b      	orrs	r3, r1
 81073e8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81073ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81073f2:	f002 0310 	and.w	r3, r2, #16
 81073f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81073fa:	2300      	movs	r3, #0
 81073fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8107400:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8107404:	460b      	mov	r3, r1
 8107406:	4313      	orrs	r3, r2
 8107408:	d01e      	beq.n	8107448 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810740a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810740e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8107412:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107416:	d10c      	bne.n	8107432 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810741c:	3328      	adds	r3, #40	@ 0x28
 810741e:	2102      	movs	r1, #2
 8107420:	4618      	mov	r0, r3
 8107422:	f001 fcf7 	bl	8108e14 <RCCEx_PLL3_Config>
 8107426:	4603      	mov	r3, r0
 8107428:	2b00      	cmp	r3, #0
 810742a:	d002      	beq.n	8107432 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 810742c:	2301      	movs	r3, #1
 810742e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8107432:	4b70      	ldr	r3, [pc, #448]	@ (81075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107436:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810743a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810743e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8107442:	4a6c      	ldr	r2, [pc, #432]	@ (81075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107444:	430b      	orrs	r3, r1
 8107446:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8107448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810744c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107450:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8107454:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8107458:	2300      	movs	r3, #0
 810745a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810745e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8107462:	460b      	mov	r3, r1
 8107464:	4313      	orrs	r3, r2
 8107466:	d03e      	beq.n	81074e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8107468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810746c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8107470:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107474:	d022      	beq.n	81074bc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8107476:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810747a:	d81b      	bhi.n	81074b4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 810747c:	2b00      	cmp	r3, #0
 810747e:	d003      	beq.n	8107488 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8107480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107484:	d00b      	beq.n	810749e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8107486:	e015      	b.n	81074b4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810748c:	3308      	adds	r3, #8
 810748e:	2100      	movs	r1, #0
 8107490:	4618      	mov	r0, r3
 8107492:	f001 fc0d 	bl	8108cb0 <RCCEx_PLL2_Config>
 8107496:	4603      	mov	r3, r0
 8107498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810749c:	e00f      	b.n	81074be <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810749e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074a2:	3328      	adds	r3, #40	@ 0x28
 81074a4:	2102      	movs	r1, #2
 81074a6:	4618      	mov	r0, r3
 81074a8:	f001 fcb4 	bl	8108e14 <RCCEx_PLL3_Config>
 81074ac:	4603      	mov	r3, r0
 81074ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81074b2:	e004      	b.n	81074be <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81074b4:	2301      	movs	r3, #1
 81074b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81074ba:	e000      	b.n	81074be <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 81074bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81074be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81074c2:	2b00      	cmp	r3, #0
 81074c4:	d10b      	bne.n	81074de <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81074c6:	4b4b      	ldr	r3, [pc, #300]	@ (81075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81074c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81074ca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 81074ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81074d6:	4a47      	ldr	r2, [pc, #284]	@ (81075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81074d8:	430b      	orrs	r3, r1
 81074da:	6593      	str	r3, [r2, #88]	@ 0x58
 81074dc:	e003      	b.n	81074e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81074de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81074e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81074e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81074ee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 81074f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 81074f4:	2300      	movs	r3, #0
 81074f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81074f8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 81074fc:	460b      	mov	r3, r1
 81074fe:	4313      	orrs	r3, r2
 8107500:	d03b      	beq.n	810757a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8107502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810750a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810750e:	d01f      	beq.n	8107550 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8107510:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107514:	d818      	bhi.n	8107548 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8107516:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810751a:	d003      	beq.n	8107524 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 810751c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107520:	d007      	beq.n	8107532 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8107522:	e011      	b.n	8107548 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107524:	4b33      	ldr	r3, [pc, #204]	@ (81075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107528:	4a32      	ldr	r2, [pc, #200]	@ (81075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810752a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810752e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8107530:	e00f      	b.n	8107552 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107536:	3328      	adds	r3, #40	@ 0x28
 8107538:	2101      	movs	r1, #1
 810753a:	4618      	mov	r0, r3
 810753c:	f001 fc6a 	bl	8108e14 <RCCEx_PLL3_Config>
 8107540:	4603      	mov	r3, r0
 8107542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8107546:	e004      	b.n	8107552 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107548:	2301      	movs	r3, #1
 810754a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810754e:	e000      	b.n	8107552 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8107550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107556:	2b00      	cmp	r3, #0
 8107558:	d10b      	bne.n	8107572 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810755a:	4b26      	ldr	r3, [pc, #152]	@ (81075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810755c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810755e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8107562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810756a:	4a22      	ldr	r2, [pc, #136]	@ (81075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810756c:	430b      	orrs	r3, r1
 810756e:	6553      	str	r3, [r2, #84]	@ 0x54
 8107570:	e003      	b.n	810757a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107576:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810757a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107582:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8107586:	673b      	str	r3, [r7, #112]	@ 0x70
 8107588:	2300      	movs	r3, #0
 810758a:	677b      	str	r3, [r7, #116]	@ 0x74
 810758c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8107590:	460b      	mov	r3, r1
 8107592:	4313      	orrs	r3, r2
 8107594:	d034      	beq.n	8107600 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8107596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810759a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810759c:	2b00      	cmp	r3, #0
 810759e:	d003      	beq.n	81075a8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 81075a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81075a4:	d007      	beq.n	81075b6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 81075a6:	e011      	b.n	81075cc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81075a8:	4b12      	ldr	r3, [pc, #72]	@ (81075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81075aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81075ac:	4a11      	ldr	r2, [pc, #68]	@ (81075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81075ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81075b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81075b4:	e00e      	b.n	81075d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81075b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075ba:	3308      	adds	r3, #8
 81075bc:	2102      	movs	r1, #2
 81075be:	4618      	mov	r0, r3
 81075c0:	f001 fb76 	bl	8108cb0 <RCCEx_PLL2_Config>
 81075c4:	4603      	mov	r3, r0
 81075c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81075ca:	e003      	b.n	81075d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 81075cc:	2301      	movs	r3, #1
 81075ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81075d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81075d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81075d8:	2b00      	cmp	r3, #0
 81075da:	d10d      	bne.n	81075f8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81075dc:	4b05      	ldr	r3, [pc, #20]	@ (81075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81075de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81075e0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81075e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81075ea:	4a02      	ldr	r2, [pc, #8]	@ (81075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81075ec:	430b      	orrs	r3, r1
 81075ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81075f0:	e006      	b.n	8107600 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 81075f2:	bf00      	nop
 81075f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81075f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81075fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8107600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107608:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 810760c:	66bb      	str	r3, [r7, #104]	@ 0x68
 810760e:	2300      	movs	r3, #0
 8107610:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8107612:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8107616:	460b      	mov	r3, r1
 8107618:	4313      	orrs	r3, r2
 810761a:	d00c      	beq.n	8107636 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810761c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107620:	3328      	adds	r3, #40	@ 0x28
 8107622:	2102      	movs	r1, #2
 8107624:	4618      	mov	r0, r3
 8107626:	f001 fbf5 	bl	8108e14 <RCCEx_PLL3_Config>
 810762a:	4603      	mov	r3, r0
 810762c:	2b00      	cmp	r3, #0
 810762e:	d002      	beq.n	8107636 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8107630:	2301      	movs	r3, #1
 8107632:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8107636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810763a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810763e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8107642:	663b      	str	r3, [r7, #96]	@ 0x60
 8107644:	2300      	movs	r3, #0
 8107646:	667b      	str	r3, [r7, #100]	@ 0x64
 8107648:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 810764c:	460b      	mov	r3, r1
 810764e:	4313      	orrs	r3, r2
 8107650:	d038      	beq.n	81076c4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8107652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810765a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810765e:	d018      	beq.n	8107692 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8107660:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8107664:	d811      	bhi.n	810768a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8107666:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810766a:	d014      	beq.n	8107696 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 810766c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107670:	d80b      	bhi.n	810768a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8107672:	2b00      	cmp	r3, #0
 8107674:	d011      	beq.n	810769a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8107676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810767a:	d106      	bne.n	810768a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810767c:	4bc3      	ldr	r3, [pc, #780]	@ (810798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810767e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107680:	4ac2      	ldr	r2, [pc, #776]	@ (810798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107682:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107686:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8107688:	e008      	b.n	810769c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810768a:	2301      	movs	r3, #1
 810768c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107690:	e004      	b.n	810769c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8107692:	bf00      	nop
 8107694:	e002      	b.n	810769c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8107696:	bf00      	nop
 8107698:	e000      	b.n	810769c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810769a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810769c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81076a0:	2b00      	cmp	r3, #0
 81076a2:	d10b      	bne.n	81076bc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81076a4:	4bb9      	ldr	r3, [pc, #740]	@ (810798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81076a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81076a8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81076ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81076b4:	4ab5      	ldr	r2, [pc, #724]	@ (810798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81076b6:	430b      	orrs	r3, r1
 81076b8:	6553      	str	r3, [r2, #84]	@ 0x54
 81076ba:	e003      	b.n	81076c4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81076bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81076c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81076c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81076cc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81076d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 81076d2:	2300      	movs	r3, #0
 81076d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81076d6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 81076da:	460b      	mov	r3, r1
 81076dc:	4313      	orrs	r3, r2
 81076de:	d009      	beq.n	81076f4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81076e0:	4baa      	ldr	r3, [pc, #680]	@ (810798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81076e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81076e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81076e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81076ee:	4aa7      	ldr	r2, [pc, #668]	@ (810798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81076f0:	430b      	orrs	r3, r1
 81076f2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81076f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81076fc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8107700:	653b      	str	r3, [r7, #80]	@ 0x50
 8107702:	2300      	movs	r3, #0
 8107704:	657b      	str	r3, [r7, #84]	@ 0x54
 8107706:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810770a:	460b      	mov	r3, r1
 810770c:	4313      	orrs	r3, r2
 810770e:	d00a      	beq.n	8107726 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8107710:	4b9e      	ldr	r3, [pc, #632]	@ (810798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107712:	691b      	ldr	r3, [r3, #16]
 8107714:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8107718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810771c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8107720:	4a9a      	ldr	r2, [pc, #616]	@ (810798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107722:	430b      	orrs	r3, r1
 8107724:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8107726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810772e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8107732:	64bb      	str	r3, [r7, #72]	@ 0x48
 8107734:	2300      	movs	r3, #0
 8107736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8107738:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 810773c:	460b      	mov	r3, r1
 810773e:	4313      	orrs	r3, r2
 8107740:	d009      	beq.n	8107756 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8107742:	4b92      	ldr	r3, [pc, #584]	@ (810798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107746:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810774a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810774e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107750:	4a8e      	ldr	r2, [pc, #568]	@ (810798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107752:	430b      	orrs	r3, r1
 8107754:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8107756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810775e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8107762:	643b      	str	r3, [r7, #64]	@ 0x40
 8107764:	2300      	movs	r3, #0
 8107766:	647b      	str	r3, [r7, #68]	@ 0x44
 8107768:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 810776c:	460b      	mov	r3, r1
 810776e:	4313      	orrs	r3, r2
 8107770:	d00e      	beq.n	8107790 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8107772:	4b86      	ldr	r3, [pc, #536]	@ (810798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107774:	691b      	ldr	r3, [r3, #16]
 8107776:	4a85      	ldr	r2, [pc, #532]	@ (810798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107778:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 810777c:	6113      	str	r3, [r2, #16]
 810777e:	4b83      	ldr	r3, [pc, #524]	@ (810798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107780:	6919      	ldr	r1, [r3, #16]
 8107782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107786:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810778a:	4a80      	ldr	r2, [pc, #512]	@ (810798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810778c:	430b      	orrs	r3, r1
 810778e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8107790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107798:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 810779c:	63bb      	str	r3, [r7, #56]	@ 0x38
 810779e:	2300      	movs	r3, #0
 81077a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81077a2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 81077a6:	460b      	mov	r3, r1
 81077a8:	4313      	orrs	r3, r2
 81077aa:	d009      	beq.n	81077c0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81077ac:	4b77      	ldr	r3, [pc, #476]	@ (810798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81077b0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81077b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81077b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81077ba:	4a74      	ldr	r2, [pc, #464]	@ (810798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077bc:	430b      	orrs	r3, r1
 81077be:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81077c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81077c8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 81077cc:	633b      	str	r3, [r7, #48]	@ 0x30
 81077ce:	2300      	movs	r3, #0
 81077d0:	637b      	str	r3, [r7, #52]	@ 0x34
 81077d2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 81077d6:	460b      	mov	r3, r1
 81077d8:	4313      	orrs	r3, r2
 81077da:	d00a      	beq.n	81077f2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81077dc:	4b6b      	ldr	r3, [pc, #428]	@ (810798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81077e0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 81077e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81077e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81077ec:	4a67      	ldr	r2, [pc, #412]	@ (810798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077ee:	430b      	orrs	r3, r1
 81077f0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81077f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81077fa:	2100      	movs	r1, #0
 81077fc:	62b9      	str	r1, [r7, #40]	@ 0x28
 81077fe:	f003 0301 	and.w	r3, r3, #1
 8107802:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8107804:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8107808:	460b      	mov	r3, r1
 810780a:	4313      	orrs	r3, r2
 810780c:	d011      	beq.n	8107832 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810780e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107812:	3308      	adds	r3, #8
 8107814:	2100      	movs	r1, #0
 8107816:	4618      	mov	r0, r3
 8107818:	f001 fa4a 	bl	8108cb0 <RCCEx_PLL2_Config>
 810781c:	4603      	mov	r3, r0
 810781e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8107822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107826:	2b00      	cmp	r3, #0
 8107828:	d003      	beq.n	8107832 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810782a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810782e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8107832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107836:	e9d3 2300 	ldrd	r2, r3, [r3]
 810783a:	2100      	movs	r1, #0
 810783c:	6239      	str	r1, [r7, #32]
 810783e:	f003 0302 	and.w	r3, r3, #2
 8107842:	627b      	str	r3, [r7, #36]	@ 0x24
 8107844:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8107848:	460b      	mov	r3, r1
 810784a:	4313      	orrs	r3, r2
 810784c:	d011      	beq.n	8107872 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810784e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107852:	3308      	adds	r3, #8
 8107854:	2101      	movs	r1, #1
 8107856:	4618      	mov	r0, r3
 8107858:	f001 fa2a 	bl	8108cb0 <RCCEx_PLL2_Config>
 810785c:	4603      	mov	r3, r0
 810785e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8107862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107866:	2b00      	cmp	r3, #0
 8107868:	d003      	beq.n	8107872 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810786a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810786e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8107872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107876:	e9d3 2300 	ldrd	r2, r3, [r3]
 810787a:	2100      	movs	r1, #0
 810787c:	61b9      	str	r1, [r7, #24]
 810787e:	f003 0304 	and.w	r3, r3, #4
 8107882:	61fb      	str	r3, [r7, #28]
 8107884:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8107888:	460b      	mov	r3, r1
 810788a:	4313      	orrs	r3, r2
 810788c:	d011      	beq.n	81078b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810788e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107892:	3308      	adds	r3, #8
 8107894:	2102      	movs	r1, #2
 8107896:	4618      	mov	r0, r3
 8107898:	f001 fa0a 	bl	8108cb0 <RCCEx_PLL2_Config>
 810789c:	4603      	mov	r3, r0
 810789e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81078a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81078a6:	2b00      	cmp	r3, #0
 81078a8:	d003      	beq.n	81078b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81078aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81078ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81078b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81078ba:	2100      	movs	r1, #0
 81078bc:	6139      	str	r1, [r7, #16]
 81078be:	f003 0308 	and.w	r3, r3, #8
 81078c2:	617b      	str	r3, [r7, #20]
 81078c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81078c8:	460b      	mov	r3, r1
 81078ca:	4313      	orrs	r3, r2
 81078cc:	d011      	beq.n	81078f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81078ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078d2:	3328      	adds	r3, #40	@ 0x28
 81078d4:	2100      	movs	r1, #0
 81078d6:	4618      	mov	r0, r3
 81078d8:	f001 fa9c 	bl	8108e14 <RCCEx_PLL3_Config>
 81078dc:	4603      	mov	r3, r0
 81078de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 81078e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81078e6:	2b00      	cmp	r3, #0
 81078e8:	d003      	beq.n	81078f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81078ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81078ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81078f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81078fa:	2100      	movs	r1, #0
 81078fc:	60b9      	str	r1, [r7, #8]
 81078fe:	f003 0310 	and.w	r3, r3, #16
 8107902:	60fb      	str	r3, [r7, #12]
 8107904:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8107908:	460b      	mov	r3, r1
 810790a:	4313      	orrs	r3, r2
 810790c:	d011      	beq.n	8107932 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810790e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107912:	3328      	adds	r3, #40	@ 0x28
 8107914:	2101      	movs	r1, #1
 8107916:	4618      	mov	r0, r3
 8107918:	f001 fa7c 	bl	8108e14 <RCCEx_PLL3_Config>
 810791c:	4603      	mov	r3, r0
 810791e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8107922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107926:	2b00      	cmp	r3, #0
 8107928:	d003      	beq.n	8107932 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810792a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810792e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8107932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107936:	e9d3 2300 	ldrd	r2, r3, [r3]
 810793a:	2100      	movs	r1, #0
 810793c:	6039      	str	r1, [r7, #0]
 810793e:	f003 0320 	and.w	r3, r3, #32
 8107942:	607b      	str	r3, [r7, #4]
 8107944:	e9d7 1200 	ldrd	r1, r2, [r7]
 8107948:	460b      	mov	r3, r1
 810794a:	4313      	orrs	r3, r2
 810794c:	d011      	beq.n	8107972 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810794e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107952:	3328      	adds	r3, #40	@ 0x28
 8107954:	2102      	movs	r1, #2
 8107956:	4618      	mov	r0, r3
 8107958:	f001 fa5c 	bl	8108e14 <RCCEx_PLL3_Config>
 810795c:	4603      	mov	r3, r0
 810795e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8107962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107966:	2b00      	cmp	r3, #0
 8107968:	d003      	beq.n	8107972 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810796a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810796e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8107972:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8107976:	2b00      	cmp	r3, #0
 8107978:	d101      	bne.n	810797e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 810797a:	2300      	movs	r3, #0
 810797c:	e000      	b.n	8107980 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 810797e:	2301      	movs	r3, #1
}
 8107980:	4618      	mov	r0, r3
 8107982:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8107986:	46bd      	mov	sp, r7
 8107988:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810798c:	58024400 	.word	0x58024400

08107990 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8107990:	b580      	push	{r7, lr}
 8107992:	b090      	sub	sp, #64	@ 0x40
 8107994:	af00      	add	r7, sp, #0
 8107996:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810799a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810799e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 81079a2:	430b      	orrs	r3, r1
 81079a4:	f040 8094 	bne.w	8107ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 81079a8:	4b9e      	ldr	r3, [pc, #632]	@ (8107c24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81079aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81079ac:	f003 0307 	and.w	r3, r3, #7
 81079b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81079b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81079b4:	2b04      	cmp	r3, #4
 81079b6:	f200 8087 	bhi.w	8107ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 81079ba:	a201      	add	r2, pc, #4	@ (adr r2, 81079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 81079bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81079c0:	081079d5 	.word	0x081079d5
 81079c4:	081079fd 	.word	0x081079fd
 81079c8:	08107a25 	.word	0x08107a25
 81079cc:	08107ac1 	.word	0x08107ac1
 81079d0:	08107a4d 	.word	0x08107a4d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81079d4:	4b93      	ldr	r3, [pc, #588]	@ (8107c24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81079d6:	681b      	ldr	r3, [r3, #0]
 81079d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81079dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81079e0:	d108      	bne.n	81079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81079e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81079e6:	4618      	mov	r0, r3
 81079e8:	f001 f810 	bl	8108a0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81079ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81079ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81079f0:	f000 bd45 	b.w	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81079f4:	2300      	movs	r3, #0
 81079f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81079f8:	f000 bd41 	b.w	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81079fc:	4b89      	ldr	r3, [pc, #548]	@ (8107c24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81079fe:	681b      	ldr	r3, [r3, #0]
 8107a00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107a04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107a08:	d108      	bne.n	8107a1c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107a0a:	f107 0318 	add.w	r3, r7, #24
 8107a0e:	4618      	mov	r0, r3
 8107a10:	f000 fd54 	bl	81084bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107a14:	69bb      	ldr	r3, [r7, #24]
 8107a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107a18:	f000 bd31 	b.w	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107a1c:	2300      	movs	r3, #0
 8107a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107a20:	f000 bd2d 	b.w	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107a24:	4b7f      	ldr	r3, [pc, #508]	@ (8107c24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107a26:	681b      	ldr	r3, [r3, #0]
 8107a28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107a2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107a30:	d108      	bne.n	8107a44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107a32:	f107 030c 	add.w	r3, r7, #12
 8107a36:	4618      	mov	r0, r3
 8107a38:	f000 fe94 	bl	8108764 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107a3c:	68fb      	ldr	r3, [r7, #12]
 8107a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107a40:	f000 bd1d 	b.w	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107a44:	2300      	movs	r3, #0
 8107a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107a48:	f000 bd19 	b.w	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107a4c:	4b75      	ldr	r3, [pc, #468]	@ (8107c24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107a50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107a54:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107a56:	4b73      	ldr	r3, [pc, #460]	@ (8107c24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107a58:	681b      	ldr	r3, [r3, #0]
 8107a5a:	f003 0304 	and.w	r3, r3, #4
 8107a5e:	2b04      	cmp	r3, #4
 8107a60:	d10c      	bne.n	8107a7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8107a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107a64:	2b00      	cmp	r3, #0
 8107a66:	d109      	bne.n	8107a7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107a68:	4b6e      	ldr	r3, [pc, #440]	@ (8107c24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107a6a:	681b      	ldr	r3, [r3, #0]
 8107a6c:	08db      	lsrs	r3, r3, #3
 8107a6e:	f003 0303 	and.w	r3, r3, #3
 8107a72:	4a6d      	ldr	r2, [pc, #436]	@ (8107c28 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8107a74:	fa22 f303 	lsr.w	r3, r2, r3
 8107a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107a7a:	e01f      	b.n	8107abc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107a7c:	4b69      	ldr	r3, [pc, #420]	@ (8107c24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107a7e:	681b      	ldr	r3, [r3, #0]
 8107a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107a88:	d106      	bne.n	8107a98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8107a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107a8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107a90:	d102      	bne.n	8107a98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107a92:	4b66      	ldr	r3, [pc, #408]	@ (8107c2c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8107a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107a96:	e011      	b.n	8107abc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107a98:	4b62      	ldr	r3, [pc, #392]	@ (8107c24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107a9a:	681b      	ldr	r3, [r3, #0]
 8107a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107aa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107aa4:	d106      	bne.n	8107ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8107aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107aa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107aac:	d102      	bne.n	8107ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107aae:	4b60      	ldr	r3, [pc, #384]	@ (8107c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8107ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107ab2:	e003      	b.n	8107abc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107ab4:	2300      	movs	r3, #0
 8107ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107ab8:	f000 bce1 	b.w	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107abc:	f000 bcdf 	b.w	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107ac0:	4b5c      	ldr	r3, [pc, #368]	@ (8107c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8107ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107ac4:	f000 bcdb 	b.w	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107ac8:	2300      	movs	r3, #0
 8107aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107acc:	f000 bcd7 	b.w	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8107ad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107ad4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8107ad8:	430b      	orrs	r3, r1
 8107ada:	f040 80ad 	bne.w	8107c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8107ade:	4b51      	ldr	r3, [pc, #324]	@ (8107c24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107ae2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8107ae6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107aea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107aee:	d056      	beq.n	8107b9e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8107af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107af6:	f200 8090 	bhi.w	8107c1a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107afc:	2bc0      	cmp	r3, #192	@ 0xc0
 8107afe:	f000 8088 	beq.w	8107c12 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8107b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107b04:	2bc0      	cmp	r3, #192	@ 0xc0
 8107b06:	f200 8088 	bhi.w	8107c1a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107b0c:	2b80      	cmp	r3, #128	@ 0x80
 8107b0e:	d032      	beq.n	8107b76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8107b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107b12:	2b80      	cmp	r3, #128	@ 0x80
 8107b14:	f200 8081 	bhi.w	8107c1a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107b1a:	2b00      	cmp	r3, #0
 8107b1c:	d003      	beq.n	8107b26 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8107b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107b20:	2b40      	cmp	r3, #64	@ 0x40
 8107b22:	d014      	beq.n	8107b4e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8107b24:	e079      	b.n	8107c1a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107b26:	4b3f      	ldr	r3, [pc, #252]	@ (8107c24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107b28:	681b      	ldr	r3, [r3, #0]
 8107b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107b2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107b32:	d108      	bne.n	8107b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107b34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107b38:	4618      	mov	r0, r3
 8107b3a:	f000 ff67 	bl	8108a0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b42:	f000 bc9c 	b.w	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b46:	2300      	movs	r3, #0
 8107b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b4a:	f000 bc98 	b.w	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107b4e:	4b35      	ldr	r3, [pc, #212]	@ (8107c24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107b50:	681b      	ldr	r3, [r3, #0]
 8107b52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107b56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107b5a:	d108      	bne.n	8107b6e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107b5c:	f107 0318 	add.w	r3, r7, #24
 8107b60:	4618      	mov	r0, r3
 8107b62:	f000 fcab 	bl	81084bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107b66:	69bb      	ldr	r3, [r7, #24]
 8107b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b6a:	f000 bc88 	b.w	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b6e:	2300      	movs	r3, #0
 8107b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b72:	f000 bc84 	b.w	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107b76:	4b2b      	ldr	r3, [pc, #172]	@ (8107c24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107b78:	681b      	ldr	r3, [r3, #0]
 8107b7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107b7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107b82:	d108      	bne.n	8107b96 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107b84:	f107 030c 	add.w	r3, r7, #12
 8107b88:	4618      	mov	r0, r3
 8107b8a:	f000 fdeb 	bl	8108764 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107b8e:	68fb      	ldr	r3, [r7, #12]
 8107b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b92:	f000 bc74 	b.w	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b96:	2300      	movs	r3, #0
 8107b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b9a:	f000 bc70 	b.w	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107b9e:	4b21      	ldr	r3, [pc, #132]	@ (8107c24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107ba2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107ba6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8107c24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107baa:	681b      	ldr	r3, [r3, #0]
 8107bac:	f003 0304 	and.w	r3, r3, #4
 8107bb0:	2b04      	cmp	r3, #4
 8107bb2:	d10c      	bne.n	8107bce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8107bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107bb6:	2b00      	cmp	r3, #0
 8107bb8:	d109      	bne.n	8107bce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107bba:	4b1a      	ldr	r3, [pc, #104]	@ (8107c24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107bbc:	681b      	ldr	r3, [r3, #0]
 8107bbe:	08db      	lsrs	r3, r3, #3
 8107bc0:	f003 0303 	and.w	r3, r3, #3
 8107bc4:	4a18      	ldr	r2, [pc, #96]	@ (8107c28 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8107bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8107bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107bcc:	e01f      	b.n	8107c0e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107bce:	4b15      	ldr	r3, [pc, #84]	@ (8107c24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107bd0:	681b      	ldr	r3, [r3, #0]
 8107bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107bd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107bda:	d106      	bne.n	8107bea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8107bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107bde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107be2:	d102      	bne.n	8107bea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107be4:	4b11      	ldr	r3, [pc, #68]	@ (8107c2c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8107be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107be8:	e011      	b.n	8107c0e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107bea:	4b0e      	ldr	r3, [pc, #56]	@ (8107c24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107bec:	681b      	ldr	r3, [r3, #0]
 8107bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107bf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107bf6:	d106      	bne.n	8107c06 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8107bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107bfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107bfe:	d102      	bne.n	8107c06 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107c00:	4b0b      	ldr	r3, [pc, #44]	@ (8107c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8107c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107c04:	e003      	b.n	8107c0e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107c06:	2300      	movs	r3, #0
 8107c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107c0a:	f000 bc38 	b.w	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107c0e:	f000 bc36 	b.w	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107c12:	4b08      	ldr	r3, [pc, #32]	@ (8107c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8107c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c16:	f000 bc32 	b.w	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107c1a:	2300      	movs	r3, #0
 8107c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c1e:	f000 bc2e 	b.w	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107c22:	bf00      	nop
 8107c24:	58024400 	.word	0x58024400
 8107c28:	03d09000 	.word	0x03d09000
 8107c2c:	003d0900 	.word	0x003d0900
 8107c30:	007a1200 	.word	0x007a1200
 8107c34:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8107c38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107c3c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8107c40:	430b      	orrs	r3, r1
 8107c42:	f040 809c 	bne.w	8107d7e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8107c46:	4b9e      	ldr	r3, [pc, #632]	@ (8107ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107c4a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8107c4e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8107c56:	d054      	beq.n	8107d02 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8107c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8107c5e:	f200 808b 	bhi.w	8107d78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c64:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8107c68:	f000 8083 	beq.w	8107d72 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8107c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c6e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8107c72:	f200 8081 	bhi.w	8107d78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107c7c:	d02f      	beq.n	8107cde <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8107c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107c84:	d878      	bhi.n	8107d78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c88:	2b00      	cmp	r3, #0
 8107c8a:	d004      	beq.n	8107c96 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8107c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107c92:	d012      	beq.n	8107cba <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8107c94:	e070      	b.n	8107d78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107c96:	4b8a      	ldr	r3, [pc, #552]	@ (8107ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107c98:	681b      	ldr	r3, [r3, #0]
 8107c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107c9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107ca2:	d107      	bne.n	8107cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107ca8:	4618      	mov	r0, r3
 8107caa:	f000 feaf 	bl	8108a0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107cb2:	e3e4      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107cb4:	2300      	movs	r3, #0
 8107cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107cb8:	e3e1      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107cba:	4b81      	ldr	r3, [pc, #516]	@ (8107ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107cbc:	681b      	ldr	r3, [r3, #0]
 8107cbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107cc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107cc6:	d107      	bne.n	8107cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107cc8:	f107 0318 	add.w	r3, r7, #24
 8107ccc:	4618      	mov	r0, r3
 8107cce:	f000 fbf5 	bl	81084bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107cd2:	69bb      	ldr	r3, [r7, #24]
 8107cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107cd6:	e3d2      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107cd8:	2300      	movs	r3, #0
 8107cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107cdc:	e3cf      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107cde:	4b78      	ldr	r3, [pc, #480]	@ (8107ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107ce0:	681b      	ldr	r3, [r3, #0]
 8107ce2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107ce6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107cea:	d107      	bne.n	8107cfc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107cec:	f107 030c 	add.w	r3, r7, #12
 8107cf0:	4618      	mov	r0, r3
 8107cf2:	f000 fd37 	bl	8108764 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107cf6:	68fb      	ldr	r3, [r7, #12]
 8107cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107cfa:	e3c0      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107cfc:	2300      	movs	r3, #0
 8107cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107d00:	e3bd      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107d02:	4b6f      	ldr	r3, [pc, #444]	@ (8107ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107d06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107d0a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107d0c:	4b6c      	ldr	r3, [pc, #432]	@ (8107ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107d0e:	681b      	ldr	r3, [r3, #0]
 8107d10:	f003 0304 	and.w	r3, r3, #4
 8107d14:	2b04      	cmp	r3, #4
 8107d16:	d10c      	bne.n	8107d32 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8107d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107d1a:	2b00      	cmp	r3, #0
 8107d1c:	d109      	bne.n	8107d32 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107d1e:	4b68      	ldr	r3, [pc, #416]	@ (8107ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107d20:	681b      	ldr	r3, [r3, #0]
 8107d22:	08db      	lsrs	r3, r3, #3
 8107d24:	f003 0303 	and.w	r3, r3, #3
 8107d28:	4a66      	ldr	r2, [pc, #408]	@ (8107ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8107d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8107d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107d30:	e01e      	b.n	8107d70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107d32:	4b63      	ldr	r3, [pc, #396]	@ (8107ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107d34:	681b      	ldr	r3, [r3, #0]
 8107d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107d3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107d3e:	d106      	bne.n	8107d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8107d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107d42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107d46:	d102      	bne.n	8107d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107d48:	4b5f      	ldr	r3, [pc, #380]	@ (8107ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8107d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107d4c:	e010      	b.n	8107d70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8107ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107d50:	681b      	ldr	r3, [r3, #0]
 8107d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107d56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107d5a:	d106      	bne.n	8107d6a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8107d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107d5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107d62:	d102      	bne.n	8107d6a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107d64:	4b59      	ldr	r3, [pc, #356]	@ (8107ecc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8107d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107d68:	e002      	b.n	8107d70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107d6a:	2300      	movs	r3, #0
 8107d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107d6e:	e386      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107d70:	e385      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107d72:	4b57      	ldr	r3, [pc, #348]	@ (8107ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8107d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107d76:	e382      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107d78:	2300      	movs	r3, #0
 8107d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107d7c:	e37f      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8107d7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107d82:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8107d86:	430b      	orrs	r3, r1
 8107d88:	f040 80a7 	bne.w	8107eda <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8107d8c:	4b4c      	ldr	r3, [pc, #304]	@ (8107ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107d90:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8107d94:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107d98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107d9c:	d055      	beq.n	8107e4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8107d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107da0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107da4:	f200 8096 	bhi.w	8107ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107daa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107dae:	f000 8084 	beq.w	8107eba <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8107db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107db4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107db8:	f200 808c 	bhi.w	8107ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107dbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107dc2:	d030      	beq.n	8107e26 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8107dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107dc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107dca:	f200 8083 	bhi.w	8107ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107dd0:	2b00      	cmp	r3, #0
 8107dd2:	d004      	beq.n	8107dde <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8107dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107dd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8107dda:	d012      	beq.n	8107e02 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8107ddc:	e07a      	b.n	8107ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107dde:	4b38      	ldr	r3, [pc, #224]	@ (8107ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107de0:	681b      	ldr	r3, [r3, #0]
 8107de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107de6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107dea:	d107      	bne.n	8107dfc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107dec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107df0:	4618      	mov	r0, r3
 8107df2:	f000 fe0b 	bl	8108a0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107dfa:	e340      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107dfc:	2300      	movs	r3, #0
 8107dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107e00:	e33d      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107e02:	4b2f      	ldr	r3, [pc, #188]	@ (8107ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107e04:	681b      	ldr	r3, [r3, #0]
 8107e06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107e0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107e0e:	d107      	bne.n	8107e20 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107e10:	f107 0318 	add.w	r3, r7, #24
 8107e14:	4618      	mov	r0, r3
 8107e16:	f000 fb51 	bl	81084bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107e1a:	69bb      	ldr	r3, [r7, #24]
 8107e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107e1e:	e32e      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107e20:	2300      	movs	r3, #0
 8107e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107e24:	e32b      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107e26:	4b26      	ldr	r3, [pc, #152]	@ (8107ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107e28:	681b      	ldr	r3, [r3, #0]
 8107e2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107e32:	d107      	bne.n	8107e44 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107e34:	f107 030c 	add.w	r3, r7, #12
 8107e38:	4618      	mov	r0, r3
 8107e3a:	f000 fc93 	bl	8108764 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107e3e:	68fb      	ldr	r3, [r7, #12]
 8107e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107e42:	e31c      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107e44:	2300      	movs	r3, #0
 8107e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107e48:	e319      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8107ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107e4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107e52:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107e54:	4b1a      	ldr	r3, [pc, #104]	@ (8107ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107e56:	681b      	ldr	r3, [r3, #0]
 8107e58:	f003 0304 	and.w	r3, r3, #4
 8107e5c:	2b04      	cmp	r3, #4
 8107e5e:	d10c      	bne.n	8107e7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8107e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107e62:	2b00      	cmp	r3, #0
 8107e64:	d109      	bne.n	8107e7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107e66:	4b16      	ldr	r3, [pc, #88]	@ (8107ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107e68:	681b      	ldr	r3, [r3, #0]
 8107e6a:	08db      	lsrs	r3, r3, #3
 8107e6c:	f003 0303 	and.w	r3, r3, #3
 8107e70:	4a14      	ldr	r2, [pc, #80]	@ (8107ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8107e72:	fa22 f303 	lsr.w	r3, r2, r3
 8107e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107e78:	e01e      	b.n	8107eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107e7a:	4b11      	ldr	r3, [pc, #68]	@ (8107ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107e7c:	681b      	ldr	r3, [r3, #0]
 8107e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107e86:	d106      	bne.n	8107e96 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8107e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107e8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107e8e:	d102      	bne.n	8107e96 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107e90:	4b0d      	ldr	r3, [pc, #52]	@ (8107ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8107e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107e94:	e010      	b.n	8107eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107e96:	4b0a      	ldr	r3, [pc, #40]	@ (8107ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107e98:	681b      	ldr	r3, [r3, #0]
 8107e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107e9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107ea2:	d106      	bne.n	8107eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8107ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107ea6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107eaa:	d102      	bne.n	8107eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107eac:	4b07      	ldr	r3, [pc, #28]	@ (8107ecc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8107eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107eb0:	e002      	b.n	8107eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107eb2:	2300      	movs	r3, #0
 8107eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107eb6:	e2e2      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107eb8:	e2e1      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107eba:	4b05      	ldr	r3, [pc, #20]	@ (8107ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8107ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107ebe:	e2de      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107ec0:	58024400 	.word	0x58024400
 8107ec4:	03d09000 	.word	0x03d09000
 8107ec8:	003d0900 	.word	0x003d0900
 8107ecc:	007a1200 	.word	0x007a1200
 8107ed0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8107ed4:	2300      	movs	r3, #0
 8107ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107ed8:	e2d1      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8107eda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107ede:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8107ee2:	430b      	orrs	r3, r1
 8107ee4:	f040 809c 	bne.w	8108020 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8107ee8:	4b93      	ldr	r3, [pc, #588]	@ (8108138 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107eec:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8107ef0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ef4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107ef8:	d054      	beq.n	8107fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8107efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107efc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107f00:	f200 808b 	bhi.w	810801a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107f06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8107f0a:	f000 8083 	beq.w	8108014 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8107f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107f10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8107f14:	f200 8081 	bhi.w	810801a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107f1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107f1e:	d02f      	beq.n	8107f80 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8107f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107f22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107f26:	d878      	bhi.n	810801a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107f2a:	2b00      	cmp	r3, #0
 8107f2c:	d004      	beq.n	8107f38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8107f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107f30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107f34:	d012      	beq.n	8107f5c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8107f36:	e070      	b.n	810801a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107f38:	4b7f      	ldr	r3, [pc, #508]	@ (8108138 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107f3a:	681b      	ldr	r3, [r3, #0]
 8107f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107f40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107f44:	d107      	bne.n	8107f56 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107f46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107f4a:	4618      	mov	r0, r3
 8107f4c:	f000 fd5e 	bl	8108a0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107f54:	e293      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107f56:	2300      	movs	r3, #0
 8107f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107f5a:	e290      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107f5c:	4b76      	ldr	r3, [pc, #472]	@ (8108138 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107f5e:	681b      	ldr	r3, [r3, #0]
 8107f60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107f64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107f68:	d107      	bne.n	8107f7a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107f6a:	f107 0318 	add.w	r3, r7, #24
 8107f6e:	4618      	mov	r0, r3
 8107f70:	f000 faa4 	bl	81084bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107f74:	69bb      	ldr	r3, [r7, #24]
 8107f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107f78:	e281      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107f7a:	2300      	movs	r3, #0
 8107f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107f7e:	e27e      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107f80:	4b6d      	ldr	r3, [pc, #436]	@ (8108138 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107f82:	681b      	ldr	r3, [r3, #0]
 8107f84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107f88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107f8c:	d107      	bne.n	8107f9e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107f8e:	f107 030c 	add.w	r3, r7, #12
 8107f92:	4618      	mov	r0, r3
 8107f94:	f000 fbe6 	bl	8108764 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107f98:	68fb      	ldr	r3, [r7, #12]
 8107f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107f9c:	e26f      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107f9e:	2300      	movs	r3, #0
 8107fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107fa2:	e26c      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107fa4:	4b64      	ldr	r3, [pc, #400]	@ (8108138 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107fa8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107fac:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107fae:	4b62      	ldr	r3, [pc, #392]	@ (8108138 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107fb0:	681b      	ldr	r3, [r3, #0]
 8107fb2:	f003 0304 	and.w	r3, r3, #4
 8107fb6:	2b04      	cmp	r3, #4
 8107fb8:	d10c      	bne.n	8107fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8107fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107fbc:	2b00      	cmp	r3, #0
 8107fbe:	d109      	bne.n	8107fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107fc0:	4b5d      	ldr	r3, [pc, #372]	@ (8108138 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107fc2:	681b      	ldr	r3, [r3, #0]
 8107fc4:	08db      	lsrs	r3, r3, #3
 8107fc6:	f003 0303 	and.w	r3, r3, #3
 8107fca:	4a5c      	ldr	r2, [pc, #368]	@ (810813c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8107fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8107fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107fd2:	e01e      	b.n	8108012 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107fd4:	4b58      	ldr	r3, [pc, #352]	@ (8108138 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107fd6:	681b      	ldr	r3, [r3, #0]
 8107fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107fdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107fe0:	d106      	bne.n	8107ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8107fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107fe4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107fe8:	d102      	bne.n	8107ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107fea:	4b55      	ldr	r3, [pc, #340]	@ (8108140 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8107fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107fee:	e010      	b.n	8108012 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107ff0:	4b51      	ldr	r3, [pc, #324]	@ (8108138 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107ff2:	681b      	ldr	r3, [r3, #0]
 8107ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107ff8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107ffc:	d106      	bne.n	810800c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8107ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108004:	d102      	bne.n	810800c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8108006:	4b4f      	ldr	r3, [pc, #316]	@ (8108144 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8108008:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810800a:	e002      	b.n	8108012 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810800c:	2300      	movs	r3, #0
 810800e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8108010:	e235      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108012:	e234      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8108014:	4b4c      	ldr	r3, [pc, #304]	@ (8108148 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8108016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108018:	e231      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810801a:	2300      	movs	r3, #0
 810801c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810801e:	e22e      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8108020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108024:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8108028:	430b      	orrs	r3, r1
 810802a:	f040 808f 	bne.w	810814c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 810802e:	4b42      	ldr	r3, [pc, #264]	@ (8108138 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108032:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8108036:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8108038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810803a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810803e:	d06b      	beq.n	8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8108040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108042:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8108046:	d874      	bhi.n	8108132 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8108048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810804a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810804e:	d056      	beq.n	81080fe <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8108050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108052:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8108056:	d86c      	bhi.n	8108132 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8108058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810805a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810805e:	d03b      	beq.n	81080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8108060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108062:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8108066:	d864      	bhi.n	8108132 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8108068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810806a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810806e:	d021      	beq.n	81080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8108070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108072:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108076:	d85c      	bhi.n	8108132 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8108078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810807a:	2b00      	cmp	r3, #0
 810807c:	d004      	beq.n	8108088 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 810807e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108084:	d004      	beq.n	8108090 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8108086:	e054      	b.n	8108132 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8108088:	f7fe fa4c 	bl	8106524 <HAL_RCC_GetPCLK1Freq>
 810808c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810808e:	e1f6      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108090:	4b29      	ldr	r3, [pc, #164]	@ (8108138 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108092:	681b      	ldr	r3, [r3, #0]
 8108094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810809c:	d107      	bne.n	81080ae <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810809e:	f107 0318 	add.w	r3, r7, #24
 81080a2:	4618      	mov	r0, r3
 81080a4:	f000 fa0a 	bl	81084bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81080a8:	69fb      	ldr	r3, [r7, #28]
 81080aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81080ac:	e1e7      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81080ae:	2300      	movs	r3, #0
 81080b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81080b2:	e1e4      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81080b4:	4b20      	ldr	r3, [pc, #128]	@ (8108138 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81080b6:	681b      	ldr	r3, [r3, #0]
 81080b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81080bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81080c0:	d107      	bne.n	81080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81080c2:	f107 030c 	add.w	r3, r7, #12
 81080c6:	4618      	mov	r0, r3
 81080c8:	f000 fb4c 	bl	8108764 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81080cc:	693b      	ldr	r3, [r7, #16]
 81080ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81080d0:	e1d5      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81080d2:	2300      	movs	r3, #0
 81080d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81080d6:	e1d2      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81080d8:	4b17      	ldr	r3, [pc, #92]	@ (8108138 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81080da:	681b      	ldr	r3, [r3, #0]
 81080dc:	f003 0304 	and.w	r3, r3, #4
 81080e0:	2b04      	cmp	r3, #4
 81080e2:	d109      	bne.n	81080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81080e4:	4b14      	ldr	r3, [pc, #80]	@ (8108138 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81080e6:	681b      	ldr	r3, [r3, #0]
 81080e8:	08db      	lsrs	r3, r3, #3
 81080ea:	f003 0303 	and.w	r3, r3, #3
 81080ee:	4a13      	ldr	r2, [pc, #76]	@ (810813c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81080f0:	fa22 f303 	lsr.w	r3, r2, r3
 81080f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81080f6:	e1c2      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81080f8:	2300      	movs	r3, #0
 81080fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81080fc:	e1bf      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81080fe:	4b0e      	ldr	r3, [pc, #56]	@ (8108138 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108100:	681b      	ldr	r3, [r3, #0]
 8108102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810810a:	d102      	bne.n	8108112 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 810810c:	4b0c      	ldr	r3, [pc, #48]	@ (8108140 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810810e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108110:	e1b5      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108112:	2300      	movs	r3, #0
 8108114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108116:	e1b2      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8108118:	4b07      	ldr	r3, [pc, #28]	@ (8108138 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810811a:	681b      	ldr	r3, [r3, #0]
 810811c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108120:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108124:	d102      	bne.n	810812c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8108126:	4b07      	ldr	r3, [pc, #28]	@ (8108144 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8108128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810812a:	e1a8      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810812c:	2300      	movs	r3, #0
 810812e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108130:	e1a5      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8108132:	2300      	movs	r3, #0
 8108134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108136:	e1a2      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108138:	58024400 	.word	0x58024400
 810813c:	03d09000 	.word	0x03d09000
 8108140:	003d0900 	.word	0x003d0900
 8108144:	007a1200 	.word	0x007a1200
 8108148:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 810814c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108150:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8108154:	430b      	orrs	r3, r1
 8108156:	d173      	bne.n	8108240 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8108158:	4b9c      	ldr	r3, [pc, #624]	@ (81083cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810815a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810815c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8108160:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8108162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108164:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108168:	d02f      	beq.n	81081ca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 810816a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810816c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108170:	d863      	bhi.n	810823a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8108172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108174:	2b00      	cmp	r3, #0
 8108176:	d004      	beq.n	8108182 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8108178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810817a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810817e:	d012      	beq.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8108180:	e05b      	b.n	810823a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108182:	4b92      	ldr	r3, [pc, #584]	@ (81083cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108184:	681b      	ldr	r3, [r3, #0]
 8108186:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810818a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810818e:	d107      	bne.n	81081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108190:	f107 0318 	add.w	r3, r7, #24
 8108194:	4618      	mov	r0, r3
 8108196:	f000 f991 	bl	81084bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810819a:	69bb      	ldr	r3, [r7, #24]
 810819c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810819e:	e16e      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81081a0:	2300      	movs	r3, #0
 81081a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81081a4:	e16b      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81081a6:	4b89      	ldr	r3, [pc, #548]	@ (81083cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81081a8:	681b      	ldr	r3, [r3, #0]
 81081aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81081ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81081b2:	d107      	bne.n	81081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81081b4:	f107 030c 	add.w	r3, r7, #12
 81081b8:	4618      	mov	r0, r3
 81081ba:	f000 fad3 	bl	8108764 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 81081be:	697b      	ldr	r3, [r7, #20]
 81081c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81081c2:	e15c      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81081c4:	2300      	movs	r3, #0
 81081c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81081c8:	e159      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81081ca:	4b80      	ldr	r3, [pc, #512]	@ (81083cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81081cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81081ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81081d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81081d4:	4b7d      	ldr	r3, [pc, #500]	@ (81083cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81081d6:	681b      	ldr	r3, [r3, #0]
 81081d8:	f003 0304 	and.w	r3, r3, #4
 81081dc:	2b04      	cmp	r3, #4
 81081de:	d10c      	bne.n	81081fa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 81081e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81081e2:	2b00      	cmp	r3, #0
 81081e4:	d109      	bne.n	81081fa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81081e6:	4b79      	ldr	r3, [pc, #484]	@ (81083cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81081e8:	681b      	ldr	r3, [r3, #0]
 81081ea:	08db      	lsrs	r3, r3, #3
 81081ec:	f003 0303 	and.w	r3, r3, #3
 81081f0:	4a77      	ldr	r2, [pc, #476]	@ (81083d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81081f2:	fa22 f303 	lsr.w	r3, r2, r3
 81081f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81081f8:	e01e      	b.n	8108238 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81081fa:	4b74      	ldr	r3, [pc, #464]	@ (81083cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81081fc:	681b      	ldr	r3, [r3, #0]
 81081fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108206:	d106      	bne.n	8108216 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8108208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810820a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810820e:	d102      	bne.n	8108216 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8108210:	4b70      	ldr	r3, [pc, #448]	@ (81083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8108212:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108214:	e010      	b.n	8108238 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108216:	4b6d      	ldr	r3, [pc, #436]	@ (81083cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108218:	681b      	ldr	r3, [r3, #0]
 810821a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810821e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108222:	d106      	bne.n	8108232 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8108224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108226:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810822a:	d102      	bne.n	8108232 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810822c:	4b6a      	ldr	r3, [pc, #424]	@ (81083d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810822e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108230:	e002      	b.n	8108238 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8108232:	2300      	movs	r3, #0
 8108234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8108236:	e122      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108238:	e121      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810823a:	2300      	movs	r3, #0
 810823c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810823e:	e11e      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8108240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108244:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8108248:	430b      	orrs	r3, r1
 810824a:	d133      	bne.n	81082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 810824c:	4b5f      	ldr	r3, [pc, #380]	@ (81083cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810824e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8108254:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8108256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108258:	2b00      	cmp	r3, #0
 810825a:	d004      	beq.n	8108266 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 810825c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810825e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108262:	d012      	beq.n	810828a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8108264:	e023      	b.n	81082ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108266:	4b59      	ldr	r3, [pc, #356]	@ (81083cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108268:	681b      	ldr	r3, [r3, #0]
 810826a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810826e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8108272:	d107      	bne.n	8108284 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108274:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108278:	4618      	mov	r0, r3
 810827a:	f000 fbc7 	bl	8108a0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810827e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108282:	e0fc      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108284:	2300      	movs	r3, #0
 8108286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108288:	e0f9      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810828a:	4b50      	ldr	r3, [pc, #320]	@ (81083cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810828c:	681b      	ldr	r3, [r3, #0]
 810828e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108292:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108296:	d107      	bne.n	81082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108298:	f107 0318 	add.w	r3, r7, #24
 810829c:	4618      	mov	r0, r3
 810829e:	f000 f90d 	bl	81084bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 81082a2:	6a3b      	ldr	r3, [r7, #32]
 81082a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81082a6:	e0ea      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81082a8:	2300      	movs	r3, #0
 81082aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81082ac:	e0e7      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81082ae:	2300      	movs	r3, #0
 81082b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81082b2:	e0e4      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 81082b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 81082b8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 81082bc:	430b      	orrs	r3, r1
 81082be:	f040 808d 	bne.w	81083dc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 81082c2:	4b42      	ldr	r3, [pc, #264]	@ (81083cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81082c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81082c6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 81082ca:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81082cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81082ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81082d2:	d06b      	beq.n	81083ac <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 81082d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81082d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81082da:	d874      	bhi.n	81083c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81082dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81082de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81082e2:	d056      	beq.n	8108392 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 81082e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81082e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81082ea:	d86c      	bhi.n	81083c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81082ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81082ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81082f2:	d03b      	beq.n	810836c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 81082f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81082f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81082fa:	d864      	bhi.n	81083c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81082fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81082fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108302:	d021      	beq.n	8108348 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8108304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108306:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810830a:	d85c      	bhi.n	81083c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810830c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810830e:	2b00      	cmp	r3, #0
 8108310:	d004      	beq.n	810831c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8108312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108314:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108318:	d004      	beq.n	8108324 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 810831a:	e054      	b.n	81083c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810831c:	f000 f8b8 	bl	8108490 <HAL_RCCEx_GetD3PCLK1Freq>
 8108320:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108322:	e0ac      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108324:	4b29      	ldr	r3, [pc, #164]	@ (81083cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108326:	681b      	ldr	r3, [r3, #0]
 8108328:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810832c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108330:	d107      	bne.n	8108342 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108332:	f107 0318 	add.w	r3, r7, #24
 8108336:	4618      	mov	r0, r3
 8108338:	f000 f8c0 	bl	81084bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810833c:	69fb      	ldr	r3, [r7, #28]
 810833e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108340:	e09d      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108342:	2300      	movs	r3, #0
 8108344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108346:	e09a      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108348:	4b20      	ldr	r3, [pc, #128]	@ (81083cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810834a:	681b      	ldr	r3, [r3, #0]
 810834c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108354:	d107      	bne.n	8108366 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108356:	f107 030c 	add.w	r3, r7, #12
 810835a:	4618      	mov	r0, r3
 810835c:	f000 fa02 	bl	8108764 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8108360:	693b      	ldr	r3, [r7, #16]
 8108362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108364:	e08b      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108366:	2300      	movs	r3, #0
 8108368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810836a:	e088      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810836c:	4b17      	ldr	r3, [pc, #92]	@ (81083cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810836e:	681b      	ldr	r3, [r3, #0]
 8108370:	f003 0304 	and.w	r3, r3, #4
 8108374:	2b04      	cmp	r3, #4
 8108376:	d109      	bne.n	810838c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108378:	4b14      	ldr	r3, [pc, #80]	@ (81083cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810837a:	681b      	ldr	r3, [r3, #0]
 810837c:	08db      	lsrs	r3, r3, #3
 810837e:	f003 0303 	and.w	r3, r3, #3
 8108382:	4a13      	ldr	r2, [pc, #76]	@ (81083d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8108384:	fa22 f303 	lsr.w	r3, r2, r3
 8108388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810838a:	e078      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810838c:	2300      	movs	r3, #0
 810838e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108390:	e075      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8108392:	4b0e      	ldr	r3, [pc, #56]	@ (81083cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108394:	681b      	ldr	r3, [r3, #0]
 8108396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810839a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810839e:	d102      	bne.n	81083a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 81083a0:	4b0c      	ldr	r3, [pc, #48]	@ (81083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81083a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81083a4:	e06b      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81083a6:	2300      	movs	r3, #0
 81083a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81083aa:	e068      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81083ac:	4b07      	ldr	r3, [pc, #28]	@ (81083cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81083ae:	681b      	ldr	r3, [r3, #0]
 81083b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81083b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81083b8:	d102      	bne.n	81083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 81083ba:	4b07      	ldr	r3, [pc, #28]	@ (81083d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81083bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81083be:	e05e      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81083c0:	2300      	movs	r3, #0
 81083c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81083c4:	e05b      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 81083c6:	2300      	movs	r3, #0
 81083c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81083ca:	e058      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81083cc:	58024400 	.word	0x58024400
 81083d0:	03d09000 	.word	0x03d09000
 81083d4:	003d0900 	.word	0x003d0900
 81083d8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 81083dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 81083e0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 81083e4:	430b      	orrs	r3, r1
 81083e6:	d148      	bne.n	810847a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 81083e8:	4b27      	ldr	r3, [pc, #156]	@ (8108488 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81083ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81083ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81083f0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81083f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81083f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81083f8:	d02a      	beq.n	8108450 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 81083fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81083fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108400:	d838      	bhi.n	8108474 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8108402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108404:	2b00      	cmp	r3, #0
 8108406:	d004      	beq.n	8108412 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8108408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810840a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810840e:	d00d      	beq.n	810842c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8108410:	e030      	b.n	8108474 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8108412:	4b1d      	ldr	r3, [pc, #116]	@ (8108488 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108414:	681b      	ldr	r3, [r3, #0]
 8108416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810841a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810841e:	d102      	bne.n	8108426 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8108420:	4b1a      	ldr	r3, [pc, #104]	@ (810848c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8108422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108424:	e02b      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108426:	2300      	movs	r3, #0
 8108428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810842a:	e028      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810842c:	4b16      	ldr	r3, [pc, #88]	@ (8108488 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810842e:	681b      	ldr	r3, [r3, #0]
 8108430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8108434:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8108438:	d107      	bne.n	810844a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810843a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810843e:	4618      	mov	r0, r3
 8108440:	f000 fae4 	bl	8108a0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8108444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108448:	e019      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810844a:	2300      	movs	r3, #0
 810844c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810844e:	e016      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108450:	4b0d      	ldr	r3, [pc, #52]	@ (8108488 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108452:	681b      	ldr	r3, [r3, #0]
 8108454:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108458:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810845c:	d107      	bne.n	810846e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810845e:	f107 0318 	add.w	r3, r7, #24
 8108462:	4618      	mov	r0, r3
 8108464:	f000 f82a 	bl	81084bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8108468:	69fb      	ldr	r3, [r7, #28]
 810846a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810846c:	e007      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810846e:	2300      	movs	r3, #0
 8108470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108472:	e004      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8108474:	2300      	movs	r3, #0
 8108476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108478:	e001      	b.n	810847e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 810847a:	2300      	movs	r3, #0
 810847c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 810847e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8108480:	4618      	mov	r0, r3
 8108482:	3740      	adds	r7, #64	@ 0x40
 8108484:	46bd      	mov	sp, r7
 8108486:	bd80      	pop	{r7, pc}
 8108488:	58024400 	.word	0x58024400
 810848c:	007a1200 	.word	0x007a1200

08108490 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8108490:	b580      	push	{r7, lr}
 8108492:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8108494:	f7fe f814 	bl	81064c0 <HAL_RCC_GetHCLKFreq>
 8108498:	4602      	mov	r2, r0
 810849a:	4b06      	ldr	r3, [pc, #24]	@ (81084b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810849c:	6a1b      	ldr	r3, [r3, #32]
 810849e:	091b      	lsrs	r3, r3, #4
 81084a0:	f003 0307 	and.w	r3, r3, #7
 81084a4:	4904      	ldr	r1, [pc, #16]	@ (81084b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81084a6:	5ccb      	ldrb	r3, [r1, r3]
 81084a8:	f003 031f 	and.w	r3, r3, #31
 81084ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81084b0:	4618      	mov	r0, r3
 81084b2:	bd80      	pop	{r7, pc}
 81084b4:	58024400 	.word	0x58024400
 81084b8:	08111e8c 	.word	0x08111e8c

081084bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81084bc:	b480      	push	{r7}
 81084be:	b089      	sub	sp, #36	@ 0x24
 81084c0:	af00      	add	r7, sp, #0
 81084c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81084c4:	4ba1      	ldr	r3, [pc, #644]	@ (810874c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81084c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81084c8:	f003 0303 	and.w	r3, r3, #3
 81084cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81084ce:	4b9f      	ldr	r3, [pc, #636]	@ (810874c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81084d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81084d2:	0b1b      	lsrs	r3, r3, #12
 81084d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81084d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81084da:	4b9c      	ldr	r3, [pc, #624]	@ (810874c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81084dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81084de:	091b      	lsrs	r3, r3, #4
 81084e0:	f003 0301 	and.w	r3, r3, #1
 81084e4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81084e6:	4b99      	ldr	r3, [pc, #612]	@ (810874c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81084e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81084ea:	08db      	lsrs	r3, r3, #3
 81084ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81084f0:	693a      	ldr	r2, [r7, #16]
 81084f2:	fb02 f303 	mul.w	r3, r2, r3
 81084f6:	ee07 3a90 	vmov	s15, r3
 81084fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81084fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8108502:	697b      	ldr	r3, [r7, #20]
 8108504:	2b00      	cmp	r3, #0
 8108506:	f000 8111 	beq.w	810872c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810850a:	69bb      	ldr	r3, [r7, #24]
 810850c:	2b02      	cmp	r3, #2
 810850e:	f000 8083 	beq.w	8108618 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8108512:	69bb      	ldr	r3, [r7, #24]
 8108514:	2b02      	cmp	r3, #2
 8108516:	f200 80a1 	bhi.w	810865c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810851a:	69bb      	ldr	r3, [r7, #24]
 810851c:	2b00      	cmp	r3, #0
 810851e:	d003      	beq.n	8108528 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8108520:	69bb      	ldr	r3, [r7, #24]
 8108522:	2b01      	cmp	r3, #1
 8108524:	d056      	beq.n	81085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8108526:	e099      	b.n	810865c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108528:	4b88      	ldr	r3, [pc, #544]	@ (810874c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810852a:	681b      	ldr	r3, [r3, #0]
 810852c:	f003 0320 	and.w	r3, r3, #32
 8108530:	2b00      	cmp	r3, #0
 8108532:	d02d      	beq.n	8108590 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108534:	4b85      	ldr	r3, [pc, #532]	@ (810874c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108536:	681b      	ldr	r3, [r3, #0]
 8108538:	08db      	lsrs	r3, r3, #3
 810853a:	f003 0303 	and.w	r3, r3, #3
 810853e:	4a84      	ldr	r2, [pc, #528]	@ (8108750 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8108540:	fa22 f303 	lsr.w	r3, r2, r3
 8108544:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108546:	68bb      	ldr	r3, [r7, #8]
 8108548:	ee07 3a90 	vmov	s15, r3
 810854c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108550:	697b      	ldr	r3, [r7, #20]
 8108552:	ee07 3a90 	vmov	s15, r3
 8108556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810855a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810855e:	4b7b      	ldr	r3, [pc, #492]	@ (810874c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108566:	ee07 3a90 	vmov	s15, r3
 810856a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810856e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108572:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8108754 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810857a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810857e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108586:	ee67 7a27 	vmul.f32	s15, s14, s15
 810858a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810858e:	e087      	b.n	81086a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108590:	697b      	ldr	r3, [r7, #20]
 8108592:	ee07 3a90 	vmov	s15, r3
 8108596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810859a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8108758 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810859e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81085a2:	4b6a      	ldr	r3, [pc, #424]	@ (810874c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81085a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81085a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81085aa:	ee07 3a90 	vmov	s15, r3
 81085ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81085b2:	ed97 6a03 	vldr	s12, [r7, #12]
 81085b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8108754 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81085ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81085be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81085c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81085c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81085ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81085ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81085d2:	e065      	b.n	81086a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81085d4:	697b      	ldr	r3, [r7, #20]
 81085d6:	ee07 3a90 	vmov	s15, r3
 81085da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81085de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810875c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81085e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81085e6:	4b59      	ldr	r3, [pc, #356]	@ (810874c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81085e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81085ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81085ee:	ee07 3a90 	vmov	s15, r3
 81085f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81085f6:	ed97 6a03 	vldr	s12, [r7, #12]
 81085fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8108754 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81085fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108606:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810860a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810860e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108612:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108616:	e043      	b.n	81086a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108618:	697b      	ldr	r3, [r7, #20]
 810861a:	ee07 3a90 	vmov	s15, r3
 810861e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108622:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8108760 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8108626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810862a:	4b48      	ldr	r3, [pc, #288]	@ (810874c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810862c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810862e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108632:	ee07 3a90 	vmov	s15, r3
 8108636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810863a:	ed97 6a03 	vldr	s12, [r7, #12]
 810863e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8108754 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810864a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810864e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108656:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810865a:	e021      	b.n	81086a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810865c:	697b      	ldr	r3, [r7, #20]
 810865e:	ee07 3a90 	vmov	s15, r3
 8108662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108666:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810875c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810866a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810866e:	4b37      	ldr	r3, [pc, #220]	@ (810874c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108676:	ee07 3a90 	vmov	s15, r3
 810867a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810867e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108682:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8108754 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810868a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810868e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108696:	ee67 7a27 	vmul.f32	s15, s14, s15
 810869a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810869e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 81086a0:	4b2a      	ldr	r3, [pc, #168]	@ (810874c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81086a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81086a4:	0a5b      	lsrs	r3, r3, #9
 81086a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81086aa:	ee07 3a90 	vmov	s15, r3
 81086ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81086b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81086b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81086ba:	edd7 6a07 	vldr	s13, [r7, #28]
 81086be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81086c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81086c6:	ee17 2a90 	vmov	r2, s15
 81086ca:	687b      	ldr	r3, [r7, #4]
 81086cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 81086ce:	4b1f      	ldr	r3, [pc, #124]	@ (810874c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81086d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81086d2:	0c1b      	lsrs	r3, r3, #16
 81086d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81086d8:	ee07 3a90 	vmov	s15, r3
 81086dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81086e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81086e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81086e8:	edd7 6a07 	vldr	s13, [r7, #28]
 81086ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81086f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81086f4:	ee17 2a90 	vmov	r2, s15
 81086f8:	687b      	ldr	r3, [r7, #4]
 81086fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 81086fc:	4b13      	ldr	r3, [pc, #76]	@ (810874c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81086fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108700:	0e1b      	lsrs	r3, r3, #24
 8108702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108706:	ee07 3a90 	vmov	s15, r3
 810870a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810870e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108712:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108716:	edd7 6a07 	vldr	s13, [r7, #28]
 810871a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810871e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108722:	ee17 2a90 	vmov	r2, s15
 8108726:	687b      	ldr	r3, [r7, #4]
 8108728:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810872a:	e008      	b.n	810873e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810872c:	687b      	ldr	r3, [r7, #4]
 810872e:	2200      	movs	r2, #0
 8108730:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8108732:	687b      	ldr	r3, [r7, #4]
 8108734:	2200      	movs	r2, #0
 8108736:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8108738:	687b      	ldr	r3, [r7, #4]
 810873a:	2200      	movs	r2, #0
 810873c:	609a      	str	r2, [r3, #8]
}
 810873e:	bf00      	nop
 8108740:	3724      	adds	r7, #36	@ 0x24
 8108742:	46bd      	mov	sp, r7
 8108744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108748:	4770      	bx	lr
 810874a:	bf00      	nop
 810874c:	58024400 	.word	0x58024400
 8108750:	03d09000 	.word	0x03d09000
 8108754:	46000000 	.word	0x46000000
 8108758:	4c742400 	.word	0x4c742400
 810875c:	4a742400 	.word	0x4a742400
 8108760:	4af42400 	.word	0x4af42400

08108764 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8108764:	b480      	push	{r7}
 8108766:	b089      	sub	sp, #36	@ 0x24
 8108768:	af00      	add	r7, sp, #0
 810876a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810876c:	4ba1      	ldr	r3, [pc, #644]	@ (81089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810876e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108770:	f003 0303 	and.w	r3, r3, #3
 8108774:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8108776:	4b9f      	ldr	r3, [pc, #636]	@ (81089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810877a:	0d1b      	lsrs	r3, r3, #20
 810877c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108780:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8108782:	4b9c      	ldr	r3, [pc, #624]	@ (81089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108786:	0a1b      	lsrs	r3, r3, #8
 8108788:	f003 0301 	and.w	r3, r3, #1
 810878c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810878e:	4b99      	ldr	r3, [pc, #612]	@ (81089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108792:	08db      	lsrs	r3, r3, #3
 8108794:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108798:	693a      	ldr	r2, [r7, #16]
 810879a:	fb02 f303 	mul.w	r3, r2, r3
 810879e:	ee07 3a90 	vmov	s15, r3
 81087a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81087a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81087aa:	697b      	ldr	r3, [r7, #20]
 81087ac:	2b00      	cmp	r3, #0
 81087ae:	f000 8111 	beq.w	81089d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81087b2:	69bb      	ldr	r3, [r7, #24]
 81087b4:	2b02      	cmp	r3, #2
 81087b6:	f000 8083 	beq.w	81088c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81087ba:	69bb      	ldr	r3, [r7, #24]
 81087bc:	2b02      	cmp	r3, #2
 81087be:	f200 80a1 	bhi.w	8108904 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81087c2:	69bb      	ldr	r3, [r7, #24]
 81087c4:	2b00      	cmp	r3, #0
 81087c6:	d003      	beq.n	81087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81087c8:	69bb      	ldr	r3, [r7, #24]
 81087ca:	2b01      	cmp	r3, #1
 81087cc:	d056      	beq.n	810887c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81087ce:	e099      	b.n	8108904 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81087d0:	4b88      	ldr	r3, [pc, #544]	@ (81089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81087d2:	681b      	ldr	r3, [r3, #0]
 81087d4:	f003 0320 	and.w	r3, r3, #32
 81087d8:	2b00      	cmp	r3, #0
 81087da:	d02d      	beq.n	8108838 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81087dc:	4b85      	ldr	r3, [pc, #532]	@ (81089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81087de:	681b      	ldr	r3, [r3, #0]
 81087e0:	08db      	lsrs	r3, r3, #3
 81087e2:	f003 0303 	and.w	r3, r3, #3
 81087e6:	4a84      	ldr	r2, [pc, #528]	@ (81089f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81087e8:	fa22 f303 	lsr.w	r3, r2, r3
 81087ec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81087ee:	68bb      	ldr	r3, [r7, #8]
 81087f0:	ee07 3a90 	vmov	s15, r3
 81087f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81087f8:	697b      	ldr	r3, [r7, #20]
 81087fa:	ee07 3a90 	vmov	s15, r3
 81087fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108806:	4b7b      	ldr	r3, [pc, #492]	@ (81089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810880a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810880e:	ee07 3a90 	vmov	s15, r3
 8108812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108816:	ed97 6a03 	vldr	s12, [r7, #12]
 810881a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81089fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810881e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810882a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810882e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108832:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8108836:	e087      	b.n	8108948 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108838:	697b      	ldr	r3, [r7, #20]
 810883a:	ee07 3a90 	vmov	s15, r3
 810883e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108842:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8108a00 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8108846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810884a:	4b6a      	ldr	r3, [pc, #424]	@ (81089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810884c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810884e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108852:	ee07 3a90 	vmov	s15, r3
 8108856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810885a:	ed97 6a03 	vldr	s12, [r7, #12]
 810885e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81089fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810886a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810886e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108876:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810887a:	e065      	b.n	8108948 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810887c:	697b      	ldr	r3, [r7, #20]
 810887e:	ee07 3a90 	vmov	s15, r3
 8108882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108886:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8108a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810888a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810888e:	4b59      	ldr	r3, [pc, #356]	@ (81089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108896:	ee07 3a90 	vmov	s15, r3
 810889a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810889e:	ed97 6a03 	vldr	s12, [r7, #12]
 81088a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81089fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81088a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81088aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81088ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81088b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81088b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81088ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81088be:	e043      	b.n	8108948 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81088c0:	697b      	ldr	r3, [r7, #20]
 81088c2:	ee07 3a90 	vmov	s15, r3
 81088c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81088ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8108a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81088ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81088d2:	4b48      	ldr	r3, [pc, #288]	@ (81089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81088d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81088d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81088da:	ee07 3a90 	vmov	s15, r3
 81088de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81088e2:	ed97 6a03 	vldr	s12, [r7, #12]
 81088e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81089fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81088ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81088ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81088f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81088f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81088fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81088fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108902:	e021      	b.n	8108948 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108904:	697b      	ldr	r3, [r7, #20]
 8108906:	ee07 3a90 	vmov	s15, r3
 810890a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810890e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8108a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8108912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108916:	4b37      	ldr	r3, [pc, #220]	@ (81089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810891a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810891e:	ee07 3a90 	vmov	s15, r3
 8108922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108926:	ed97 6a03 	vldr	s12, [r7, #12]
 810892a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81089fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810892e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810893a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810893e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108946:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8108948:	4b2a      	ldr	r3, [pc, #168]	@ (81089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810894a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810894c:	0a5b      	lsrs	r3, r3, #9
 810894e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108952:	ee07 3a90 	vmov	s15, r3
 8108956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810895a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810895e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108962:	edd7 6a07 	vldr	s13, [r7, #28]
 8108966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810896a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810896e:	ee17 2a90 	vmov	r2, s15
 8108972:	687b      	ldr	r3, [r7, #4]
 8108974:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8108976:	4b1f      	ldr	r3, [pc, #124]	@ (81089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810897a:	0c1b      	lsrs	r3, r3, #16
 810897c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108980:	ee07 3a90 	vmov	s15, r3
 8108984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108988:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810898c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108990:	edd7 6a07 	vldr	s13, [r7, #28]
 8108994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810899c:	ee17 2a90 	vmov	r2, s15
 81089a0:	687b      	ldr	r3, [r7, #4]
 81089a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 81089a4:	4b13      	ldr	r3, [pc, #76]	@ (81089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81089a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81089a8:	0e1b      	lsrs	r3, r3, #24
 81089aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81089ae:	ee07 3a90 	vmov	s15, r3
 81089b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81089b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81089ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 81089be:	edd7 6a07 	vldr	s13, [r7, #28]
 81089c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81089c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81089ca:	ee17 2a90 	vmov	r2, s15
 81089ce:	687b      	ldr	r3, [r7, #4]
 81089d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81089d2:	e008      	b.n	81089e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81089d4:	687b      	ldr	r3, [r7, #4]
 81089d6:	2200      	movs	r2, #0
 81089d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81089da:	687b      	ldr	r3, [r7, #4]
 81089dc:	2200      	movs	r2, #0
 81089de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81089e0:	687b      	ldr	r3, [r7, #4]
 81089e2:	2200      	movs	r2, #0
 81089e4:	609a      	str	r2, [r3, #8]
}
 81089e6:	bf00      	nop
 81089e8:	3724      	adds	r7, #36	@ 0x24
 81089ea:	46bd      	mov	sp, r7
 81089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81089f0:	4770      	bx	lr
 81089f2:	bf00      	nop
 81089f4:	58024400 	.word	0x58024400
 81089f8:	03d09000 	.word	0x03d09000
 81089fc:	46000000 	.word	0x46000000
 8108a00:	4c742400 	.word	0x4c742400
 8108a04:	4a742400 	.word	0x4a742400
 8108a08:	4af42400 	.word	0x4af42400

08108a0c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8108a0c:	b480      	push	{r7}
 8108a0e:	b089      	sub	sp, #36	@ 0x24
 8108a10:	af00      	add	r7, sp, #0
 8108a12:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108a14:	4ba0      	ldr	r3, [pc, #640]	@ (8108c98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108a18:	f003 0303 	and.w	r3, r3, #3
 8108a1c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8108a1e:	4b9e      	ldr	r3, [pc, #632]	@ (8108c98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108a22:	091b      	lsrs	r3, r3, #4
 8108a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108a28:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8108a2a:	4b9b      	ldr	r3, [pc, #620]	@ (8108c98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108a2e:	f003 0301 	and.w	r3, r3, #1
 8108a32:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8108a34:	4b98      	ldr	r3, [pc, #608]	@ (8108c98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108a38:	08db      	lsrs	r3, r3, #3
 8108a3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108a3e:	693a      	ldr	r2, [r7, #16]
 8108a40:	fb02 f303 	mul.w	r3, r2, r3
 8108a44:	ee07 3a90 	vmov	s15, r3
 8108a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108a4c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8108a50:	697b      	ldr	r3, [r7, #20]
 8108a52:	2b00      	cmp	r3, #0
 8108a54:	f000 8111 	beq.w	8108c7a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8108a58:	69bb      	ldr	r3, [r7, #24]
 8108a5a:	2b02      	cmp	r3, #2
 8108a5c:	f000 8083 	beq.w	8108b66 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8108a60:	69bb      	ldr	r3, [r7, #24]
 8108a62:	2b02      	cmp	r3, #2
 8108a64:	f200 80a1 	bhi.w	8108baa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8108a68:	69bb      	ldr	r3, [r7, #24]
 8108a6a:	2b00      	cmp	r3, #0
 8108a6c:	d003      	beq.n	8108a76 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8108a6e:	69bb      	ldr	r3, [r7, #24]
 8108a70:	2b01      	cmp	r3, #1
 8108a72:	d056      	beq.n	8108b22 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8108a74:	e099      	b.n	8108baa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108a76:	4b88      	ldr	r3, [pc, #544]	@ (8108c98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108a78:	681b      	ldr	r3, [r3, #0]
 8108a7a:	f003 0320 	and.w	r3, r3, #32
 8108a7e:	2b00      	cmp	r3, #0
 8108a80:	d02d      	beq.n	8108ade <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108a82:	4b85      	ldr	r3, [pc, #532]	@ (8108c98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108a84:	681b      	ldr	r3, [r3, #0]
 8108a86:	08db      	lsrs	r3, r3, #3
 8108a88:	f003 0303 	and.w	r3, r3, #3
 8108a8c:	4a83      	ldr	r2, [pc, #524]	@ (8108c9c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8108a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8108a92:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108a94:	68bb      	ldr	r3, [r7, #8]
 8108a96:	ee07 3a90 	vmov	s15, r3
 8108a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108a9e:	697b      	ldr	r3, [r7, #20]
 8108aa0:	ee07 3a90 	vmov	s15, r3
 8108aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108aa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108aac:	4b7a      	ldr	r3, [pc, #488]	@ (8108c98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108ab4:	ee07 3a90 	vmov	s15, r3
 8108ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108abc:	ed97 6a03 	vldr	s12, [r7, #12]
 8108ac0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8108ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108ac4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108ac8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108acc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108ad0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108ad8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8108adc:	e087      	b.n	8108bee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108ade:	697b      	ldr	r3, [r7, #20]
 8108ae0:	ee07 3a90 	vmov	s15, r3
 8108ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108ae8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8108ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8108aec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108af0:	4b69      	ldr	r3, [pc, #420]	@ (8108c98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108af8:	ee07 3a90 	vmov	s15, r3
 8108afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108b00:	ed97 6a03 	vldr	s12, [r7, #12]
 8108b04:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8108ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108b08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108b0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108b10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108b14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108b1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108b20:	e065      	b.n	8108bee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108b22:	697b      	ldr	r3, [r7, #20]
 8108b24:	ee07 3a90 	vmov	s15, r3
 8108b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108b2c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8108ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8108b30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108b34:	4b58      	ldr	r3, [pc, #352]	@ (8108c98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108b3c:	ee07 3a90 	vmov	s15, r3
 8108b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108b44:	ed97 6a03 	vldr	s12, [r7, #12]
 8108b48:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8108ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108b4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108b50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108b54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108b60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108b64:	e043      	b.n	8108bee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108b66:	697b      	ldr	r3, [r7, #20]
 8108b68:	ee07 3a90 	vmov	s15, r3
 8108b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108b70:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8108cac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8108b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108b78:	4b47      	ldr	r3, [pc, #284]	@ (8108c98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108b80:	ee07 3a90 	vmov	s15, r3
 8108b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108b88:	ed97 6a03 	vldr	s12, [r7, #12]
 8108b8c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8108ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108b90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108b94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108b98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108b9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108ba4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108ba8:	e021      	b.n	8108bee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108baa:	697b      	ldr	r3, [r7, #20]
 8108bac:	ee07 3a90 	vmov	s15, r3
 8108bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108bb4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8108ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8108bb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108bbc:	4b36      	ldr	r3, [pc, #216]	@ (8108c98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108bc4:	ee07 3a90 	vmov	s15, r3
 8108bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108bcc:	ed97 6a03 	vldr	s12, [r7, #12]
 8108bd0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8108ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108bd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108bd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108bdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108be8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108bec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8108bee:	4b2a      	ldr	r3, [pc, #168]	@ (8108c98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108bf2:	0a5b      	lsrs	r3, r3, #9
 8108bf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108bf8:	ee07 3a90 	vmov	s15, r3
 8108bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108c00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108c04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108c08:	edd7 6a07 	vldr	s13, [r7, #28]
 8108c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108c14:	ee17 2a90 	vmov	r2, s15
 8108c18:	687b      	ldr	r3, [r7, #4]
 8108c1a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8108c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8108c98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108c20:	0c1b      	lsrs	r3, r3, #16
 8108c22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108c26:	ee07 3a90 	vmov	s15, r3
 8108c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108c2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108c32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108c36:	edd7 6a07 	vldr	s13, [r7, #28]
 8108c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108c42:	ee17 2a90 	vmov	r2, s15
 8108c46:	687b      	ldr	r3, [r7, #4]
 8108c48:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8108c4a:	4b13      	ldr	r3, [pc, #76]	@ (8108c98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108c4e:	0e1b      	lsrs	r3, r3, #24
 8108c50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108c54:	ee07 3a90 	vmov	s15, r3
 8108c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108c5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108c60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108c64:	edd7 6a07 	vldr	s13, [r7, #28]
 8108c68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108c70:	ee17 2a90 	vmov	r2, s15
 8108c74:	687b      	ldr	r3, [r7, #4]
 8108c76:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8108c78:	e008      	b.n	8108c8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8108c7a:	687b      	ldr	r3, [r7, #4]
 8108c7c:	2200      	movs	r2, #0
 8108c7e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8108c80:	687b      	ldr	r3, [r7, #4]
 8108c82:	2200      	movs	r2, #0
 8108c84:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8108c86:	687b      	ldr	r3, [r7, #4]
 8108c88:	2200      	movs	r2, #0
 8108c8a:	609a      	str	r2, [r3, #8]
}
 8108c8c:	bf00      	nop
 8108c8e:	3724      	adds	r7, #36	@ 0x24
 8108c90:	46bd      	mov	sp, r7
 8108c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c96:	4770      	bx	lr
 8108c98:	58024400 	.word	0x58024400
 8108c9c:	03d09000 	.word	0x03d09000
 8108ca0:	46000000 	.word	0x46000000
 8108ca4:	4c742400 	.word	0x4c742400
 8108ca8:	4a742400 	.word	0x4a742400
 8108cac:	4af42400 	.word	0x4af42400

08108cb0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8108cb0:	b580      	push	{r7, lr}
 8108cb2:	b084      	sub	sp, #16
 8108cb4:	af00      	add	r7, sp, #0
 8108cb6:	6078      	str	r0, [r7, #4]
 8108cb8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108cba:	2300      	movs	r3, #0
 8108cbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108cbe:	4b54      	ldr	r3, [pc, #336]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108cc2:	f003 0303 	and.w	r3, r3, #3
 8108cc6:	2b03      	cmp	r3, #3
 8108cc8:	d101      	bne.n	8108cce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8108cca:	2301      	movs	r3, #1
 8108ccc:	e09b      	b.n	8108e06 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8108cce:	4b50      	ldr	r3, [pc, #320]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108cd0:	681b      	ldr	r3, [r3, #0]
 8108cd2:	4a4f      	ldr	r2, [pc, #316]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108cd4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8108cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108cda:	f7fa fbaf 	bl	810343c <HAL_GetTick>
 8108cde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108ce0:	e008      	b.n	8108cf4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8108ce2:	f7fa fbab 	bl	810343c <HAL_GetTick>
 8108ce6:	4602      	mov	r2, r0
 8108ce8:	68bb      	ldr	r3, [r7, #8]
 8108cea:	1ad3      	subs	r3, r2, r3
 8108cec:	2b02      	cmp	r3, #2
 8108cee:	d901      	bls.n	8108cf4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108cf0:	2303      	movs	r3, #3
 8108cf2:	e088      	b.n	8108e06 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108cf4:	4b46      	ldr	r3, [pc, #280]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108cf6:	681b      	ldr	r3, [r3, #0]
 8108cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108cfc:	2b00      	cmp	r3, #0
 8108cfe:	d1f0      	bne.n	8108ce2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8108d00:	4b43      	ldr	r3, [pc, #268]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108d04:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8108d08:	687b      	ldr	r3, [r7, #4]
 8108d0a:	681b      	ldr	r3, [r3, #0]
 8108d0c:	031b      	lsls	r3, r3, #12
 8108d0e:	4940      	ldr	r1, [pc, #256]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108d10:	4313      	orrs	r3, r2
 8108d12:	628b      	str	r3, [r1, #40]	@ 0x28
 8108d14:	687b      	ldr	r3, [r7, #4]
 8108d16:	685b      	ldr	r3, [r3, #4]
 8108d18:	3b01      	subs	r3, #1
 8108d1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108d1e:	687b      	ldr	r3, [r7, #4]
 8108d20:	689b      	ldr	r3, [r3, #8]
 8108d22:	3b01      	subs	r3, #1
 8108d24:	025b      	lsls	r3, r3, #9
 8108d26:	b29b      	uxth	r3, r3
 8108d28:	431a      	orrs	r2, r3
 8108d2a:	687b      	ldr	r3, [r7, #4]
 8108d2c:	68db      	ldr	r3, [r3, #12]
 8108d2e:	3b01      	subs	r3, #1
 8108d30:	041b      	lsls	r3, r3, #16
 8108d32:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108d36:	431a      	orrs	r2, r3
 8108d38:	687b      	ldr	r3, [r7, #4]
 8108d3a:	691b      	ldr	r3, [r3, #16]
 8108d3c:	3b01      	subs	r3, #1
 8108d3e:	061b      	lsls	r3, r3, #24
 8108d40:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108d44:	4932      	ldr	r1, [pc, #200]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108d46:	4313      	orrs	r3, r2
 8108d48:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8108d4a:	4b31      	ldr	r3, [pc, #196]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108d4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8108d52:	687b      	ldr	r3, [r7, #4]
 8108d54:	695b      	ldr	r3, [r3, #20]
 8108d56:	492e      	ldr	r1, [pc, #184]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108d58:	4313      	orrs	r3, r2
 8108d5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8108d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108d60:	f023 0220 	bic.w	r2, r3, #32
 8108d64:	687b      	ldr	r3, [r7, #4]
 8108d66:	699b      	ldr	r3, [r3, #24]
 8108d68:	4929      	ldr	r1, [pc, #164]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108d6a:	4313      	orrs	r3, r2
 8108d6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8108d6e:	4b28      	ldr	r3, [pc, #160]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108d72:	4a27      	ldr	r2, [pc, #156]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108d74:	f023 0310 	bic.w	r3, r3, #16
 8108d78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8108d7a:	4b25      	ldr	r3, [pc, #148]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108d7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108d82:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8108d86:	687a      	ldr	r2, [r7, #4]
 8108d88:	69d2      	ldr	r2, [r2, #28]
 8108d8a:	00d2      	lsls	r2, r2, #3
 8108d8c:	4920      	ldr	r1, [pc, #128]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108d8e:	4313      	orrs	r3, r2
 8108d90:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8108d92:	4b1f      	ldr	r3, [pc, #124]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108d96:	4a1e      	ldr	r2, [pc, #120]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108d98:	f043 0310 	orr.w	r3, r3, #16
 8108d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108d9e:	683b      	ldr	r3, [r7, #0]
 8108da0:	2b00      	cmp	r3, #0
 8108da2:	d106      	bne.n	8108db2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8108da4:	4b1a      	ldr	r3, [pc, #104]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108da8:	4a19      	ldr	r2, [pc, #100]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108daa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8108dae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108db0:	e00f      	b.n	8108dd2 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8108db2:	683b      	ldr	r3, [r7, #0]
 8108db4:	2b01      	cmp	r3, #1
 8108db6:	d106      	bne.n	8108dc6 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8108db8:	4b15      	ldr	r3, [pc, #84]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108dbc:	4a14      	ldr	r2, [pc, #80]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108dbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8108dc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108dc4:	e005      	b.n	8108dd2 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8108dc6:	4b12      	ldr	r3, [pc, #72]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108dca:	4a11      	ldr	r2, [pc, #68]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108dcc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8108dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8108dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108dd4:	681b      	ldr	r3, [r3, #0]
 8108dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108dd8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8108ddc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108dde:	f7fa fb2d 	bl	810343c <HAL_GetTick>
 8108de2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108de4:	e008      	b.n	8108df8 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8108de6:	f7fa fb29 	bl	810343c <HAL_GetTick>
 8108dea:	4602      	mov	r2, r0
 8108dec:	68bb      	ldr	r3, [r7, #8]
 8108dee:	1ad3      	subs	r3, r2, r3
 8108df0:	2b02      	cmp	r3, #2
 8108df2:	d901      	bls.n	8108df8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108df4:	2303      	movs	r3, #3
 8108df6:	e006      	b.n	8108e06 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108df8:	4b05      	ldr	r3, [pc, #20]	@ (8108e10 <RCCEx_PLL2_Config+0x160>)
 8108dfa:	681b      	ldr	r3, [r3, #0]
 8108dfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108e00:	2b00      	cmp	r3, #0
 8108e02:	d0f0      	beq.n	8108de6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8108e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8108e06:	4618      	mov	r0, r3
 8108e08:	3710      	adds	r7, #16
 8108e0a:	46bd      	mov	sp, r7
 8108e0c:	bd80      	pop	{r7, pc}
 8108e0e:	bf00      	nop
 8108e10:	58024400 	.word	0x58024400

08108e14 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8108e14:	b580      	push	{r7, lr}
 8108e16:	b084      	sub	sp, #16
 8108e18:	af00      	add	r7, sp, #0
 8108e1a:	6078      	str	r0, [r7, #4]
 8108e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108e1e:	2300      	movs	r3, #0
 8108e20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108e22:	4b54      	ldr	r3, [pc, #336]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108e26:	f003 0303 	and.w	r3, r3, #3
 8108e2a:	2b03      	cmp	r3, #3
 8108e2c:	d101      	bne.n	8108e32 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8108e2e:	2301      	movs	r3, #1
 8108e30:	e09b      	b.n	8108f6a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8108e32:	4b50      	ldr	r3, [pc, #320]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108e34:	681b      	ldr	r3, [r3, #0]
 8108e36:	4a4f      	ldr	r2, [pc, #316]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108e38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8108e3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108e3e:	f7fa fafd 	bl	810343c <HAL_GetTick>
 8108e42:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108e44:	e008      	b.n	8108e58 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108e46:	f7fa faf9 	bl	810343c <HAL_GetTick>
 8108e4a:	4602      	mov	r2, r0
 8108e4c:	68bb      	ldr	r3, [r7, #8]
 8108e4e:	1ad3      	subs	r3, r2, r3
 8108e50:	2b02      	cmp	r3, #2
 8108e52:	d901      	bls.n	8108e58 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108e54:	2303      	movs	r3, #3
 8108e56:	e088      	b.n	8108f6a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108e58:	4b46      	ldr	r3, [pc, #280]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108e5a:	681b      	ldr	r3, [r3, #0]
 8108e5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108e60:	2b00      	cmp	r3, #0
 8108e62:	d1f0      	bne.n	8108e46 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8108e64:	4b43      	ldr	r3, [pc, #268]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108e68:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8108e6c:	687b      	ldr	r3, [r7, #4]
 8108e6e:	681b      	ldr	r3, [r3, #0]
 8108e70:	051b      	lsls	r3, r3, #20
 8108e72:	4940      	ldr	r1, [pc, #256]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108e74:	4313      	orrs	r3, r2
 8108e76:	628b      	str	r3, [r1, #40]	@ 0x28
 8108e78:	687b      	ldr	r3, [r7, #4]
 8108e7a:	685b      	ldr	r3, [r3, #4]
 8108e7c:	3b01      	subs	r3, #1
 8108e7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108e82:	687b      	ldr	r3, [r7, #4]
 8108e84:	689b      	ldr	r3, [r3, #8]
 8108e86:	3b01      	subs	r3, #1
 8108e88:	025b      	lsls	r3, r3, #9
 8108e8a:	b29b      	uxth	r3, r3
 8108e8c:	431a      	orrs	r2, r3
 8108e8e:	687b      	ldr	r3, [r7, #4]
 8108e90:	68db      	ldr	r3, [r3, #12]
 8108e92:	3b01      	subs	r3, #1
 8108e94:	041b      	lsls	r3, r3, #16
 8108e96:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108e9a:	431a      	orrs	r2, r3
 8108e9c:	687b      	ldr	r3, [r7, #4]
 8108e9e:	691b      	ldr	r3, [r3, #16]
 8108ea0:	3b01      	subs	r3, #1
 8108ea2:	061b      	lsls	r3, r3, #24
 8108ea4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108ea8:	4932      	ldr	r1, [pc, #200]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108eaa:	4313      	orrs	r3, r2
 8108eac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8108eae:	4b31      	ldr	r3, [pc, #196]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108eb2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8108eb6:	687b      	ldr	r3, [r7, #4]
 8108eb8:	695b      	ldr	r3, [r3, #20]
 8108eba:	492e      	ldr	r1, [pc, #184]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108ebc:	4313      	orrs	r3, r2
 8108ebe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8108ec0:	4b2c      	ldr	r3, [pc, #176]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ec4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8108ec8:	687b      	ldr	r3, [r7, #4]
 8108eca:	699b      	ldr	r3, [r3, #24]
 8108ecc:	4929      	ldr	r1, [pc, #164]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108ece:	4313      	orrs	r3, r2
 8108ed0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8108ed2:	4b28      	ldr	r3, [pc, #160]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ed6:	4a27      	ldr	r2, [pc, #156]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108ed8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8108edc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8108ede:	4b25      	ldr	r3, [pc, #148]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108ee2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108ee6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8108eea:	687a      	ldr	r2, [r7, #4]
 8108eec:	69d2      	ldr	r2, [r2, #28]
 8108eee:	00d2      	lsls	r2, r2, #3
 8108ef0:	4920      	ldr	r1, [pc, #128]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108ef2:	4313      	orrs	r3, r2
 8108ef4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8108ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108efa:	4a1e      	ldr	r2, [pc, #120]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8108f00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108f02:	683b      	ldr	r3, [r7, #0]
 8108f04:	2b00      	cmp	r3, #0
 8108f06:	d106      	bne.n	8108f16 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8108f08:	4b1a      	ldr	r3, [pc, #104]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108f0c:	4a19      	ldr	r2, [pc, #100]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108f0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8108f12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108f14:	e00f      	b.n	8108f36 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8108f16:	683b      	ldr	r3, [r7, #0]
 8108f18:	2b01      	cmp	r3, #1
 8108f1a:	d106      	bne.n	8108f2a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8108f1c:	4b15      	ldr	r3, [pc, #84]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108f20:	4a14      	ldr	r2, [pc, #80]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108f22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8108f26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108f28:	e005      	b.n	8108f36 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8108f2a:	4b12      	ldr	r3, [pc, #72]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108f2e:	4a11      	ldr	r2, [pc, #68]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108f30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8108f34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8108f36:	4b0f      	ldr	r3, [pc, #60]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108f38:	681b      	ldr	r3, [r3, #0]
 8108f3a:	4a0e      	ldr	r2, [pc, #56]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8108f40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108f42:	f7fa fa7b 	bl	810343c <HAL_GetTick>
 8108f46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108f48:	e008      	b.n	8108f5c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108f4a:	f7fa fa77 	bl	810343c <HAL_GetTick>
 8108f4e:	4602      	mov	r2, r0
 8108f50:	68bb      	ldr	r3, [r7, #8]
 8108f52:	1ad3      	subs	r3, r2, r3
 8108f54:	2b02      	cmp	r3, #2
 8108f56:	d901      	bls.n	8108f5c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108f58:	2303      	movs	r3, #3
 8108f5a:	e006      	b.n	8108f6a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108f5c:	4b05      	ldr	r3, [pc, #20]	@ (8108f74 <RCCEx_PLL3_Config+0x160>)
 8108f5e:	681b      	ldr	r3, [r3, #0]
 8108f60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108f64:	2b00      	cmp	r3, #0
 8108f66:	d0f0      	beq.n	8108f4a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8108f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8108f6a:	4618      	mov	r0, r3
 8108f6c:	3710      	adds	r7, #16
 8108f6e:	46bd      	mov	sp, r7
 8108f70:	bd80      	pop	{r7, pc}
 8108f72:	bf00      	nop
 8108f74:	58024400 	.word	0x58024400

08108f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8108f78:	b580      	push	{r7, lr}
 8108f7a:	b082      	sub	sp, #8
 8108f7c:	af00      	add	r7, sp, #0
 8108f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8108f80:	687b      	ldr	r3, [r7, #4]
 8108f82:	2b00      	cmp	r3, #0
 8108f84:	d101      	bne.n	8108f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8108f86:	2301      	movs	r3, #1
 8108f88:	e049      	b.n	810901e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8108f8a:	687b      	ldr	r3, [r7, #4]
 8108f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8108f90:	b2db      	uxtb	r3, r3
 8108f92:	2b00      	cmp	r3, #0
 8108f94:	d106      	bne.n	8108fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8108f96:	687b      	ldr	r3, [r7, #4]
 8108f98:	2200      	movs	r2, #0
 8108f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8108f9e:	6878      	ldr	r0, [r7, #4]
 8108fa0:	f7f9 ff06 	bl	8102db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108fa4:	687b      	ldr	r3, [r7, #4]
 8108fa6:	2202      	movs	r2, #2
 8108fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8108fac:	687b      	ldr	r3, [r7, #4]
 8108fae:	681a      	ldr	r2, [r3, #0]
 8108fb0:	687b      	ldr	r3, [r7, #4]
 8108fb2:	3304      	adds	r3, #4
 8108fb4:	4619      	mov	r1, r3
 8108fb6:	4610      	mov	r0, r2
 8108fb8:	f000 fe00 	bl	8109bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8108fbc:	687b      	ldr	r3, [r7, #4]
 8108fbe:	2201      	movs	r2, #1
 8108fc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8108fc4:	687b      	ldr	r3, [r7, #4]
 8108fc6:	2201      	movs	r2, #1
 8108fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8108fcc:	687b      	ldr	r3, [r7, #4]
 8108fce:	2201      	movs	r2, #1
 8108fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8108fd4:	687b      	ldr	r3, [r7, #4]
 8108fd6:	2201      	movs	r2, #1
 8108fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8108fdc:	687b      	ldr	r3, [r7, #4]
 8108fde:	2201      	movs	r2, #1
 8108fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8108fe4:	687b      	ldr	r3, [r7, #4]
 8108fe6:	2201      	movs	r2, #1
 8108fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8108fec:	687b      	ldr	r3, [r7, #4]
 8108fee:	2201      	movs	r2, #1
 8108ff0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8108ff4:	687b      	ldr	r3, [r7, #4]
 8108ff6:	2201      	movs	r2, #1
 8108ff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8108ffc:	687b      	ldr	r3, [r7, #4]
 8108ffe:	2201      	movs	r2, #1
 8109000:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8109004:	687b      	ldr	r3, [r7, #4]
 8109006:	2201      	movs	r2, #1
 8109008:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810900c:	687b      	ldr	r3, [r7, #4]
 810900e:	2201      	movs	r2, #1
 8109010:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8109014:	687b      	ldr	r3, [r7, #4]
 8109016:	2201      	movs	r2, #1
 8109018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810901c:	2300      	movs	r3, #0
}
 810901e:	4618      	mov	r0, r3
 8109020:	3708      	adds	r7, #8
 8109022:	46bd      	mov	sp, r7
 8109024:	bd80      	pop	{r7, pc}
	...

08109028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8109028:	b480      	push	{r7}
 810902a:	b085      	sub	sp, #20
 810902c:	af00      	add	r7, sp, #0
 810902e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8109030:	687b      	ldr	r3, [r7, #4]
 8109032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8109036:	b2db      	uxtb	r3, r3
 8109038:	2b01      	cmp	r3, #1
 810903a:	d001      	beq.n	8109040 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810903c:	2301      	movs	r3, #1
 810903e:	e054      	b.n	81090ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109040:	687b      	ldr	r3, [r7, #4]
 8109042:	2202      	movs	r2, #2
 8109044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8109048:	687b      	ldr	r3, [r7, #4]
 810904a:	681b      	ldr	r3, [r3, #0]
 810904c:	68da      	ldr	r2, [r3, #12]
 810904e:	687b      	ldr	r3, [r7, #4]
 8109050:	681b      	ldr	r3, [r3, #0]
 8109052:	f042 0201 	orr.w	r2, r2, #1
 8109056:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8109058:	687b      	ldr	r3, [r7, #4]
 810905a:	681b      	ldr	r3, [r3, #0]
 810905c:	4a26      	ldr	r2, [pc, #152]	@ (81090f8 <HAL_TIM_Base_Start_IT+0xd0>)
 810905e:	4293      	cmp	r3, r2
 8109060:	d022      	beq.n	81090a8 <HAL_TIM_Base_Start_IT+0x80>
 8109062:	687b      	ldr	r3, [r7, #4]
 8109064:	681b      	ldr	r3, [r3, #0]
 8109066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810906a:	d01d      	beq.n	81090a8 <HAL_TIM_Base_Start_IT+0x80>
 810906c:	687b      	ldr	r3, [r7, #4]
 810906e:	681b      	ldr	r3, [r3, #0]
 8109070:	4a22      	ldr	r2, [pc, #136]	@ (81090fc <HAL_TIM_Base_Start_IT+0xd4>)
 8109072:	4293      	cmp	r3, r2
 8109074:	d018      	beq.n	81090a8 <HAL_TIM_Base_Start_IT+0x80>
 8109076:	687b      	ldr	r3, [r7, #4]
 8109078:	681b      	ldr	r3, [r3, #0]
 810907a:	4a21      	ldr	r2, [pc, #132]	@ (8109100 <HAL_TIM_Base_Start_IT+0xd8>)
 810907c:	4293      	cmp	r3, r2
 810907e:	d013      	beq.n	81090a8 <HAL_TIM_Base_Start_IT+0x80>
 8109080:	687b      	ldr	r3, [r7, #4]
 8109082:	681b      	ldr	r3, [r3, #0]
 8109084:	4a1f      	ldr	r2, [pc, #124]	@ (8109104 <HAL_TIM_Base_Start_IT+0xdc>)
 8109086:	4293      	cmp	r3, r2
 8109088:	d00e      	beq.n	81090a8 <HAL_TIM_Base_Start_IT+0x80>
 810908a:	687b      	ldr	r3, [r7, #4]
 810908c:	681b      	ldr	r3, [r3, #0]
 810908e:	4a1e      	ldr	r2, [pc, #120]	@ (8109108 <HAL_TIM_Base_Start_IT+0xe0>)
 8109090:	4293      	cmp	r3, r2
 8109092:	d009      	beq.n	81090a8 <HAL_TIM_Base_Start_IT+0x80>
 8109094:	687b      	ldr	r3, [r7, #4]
 8109096:	681b      	ldr	r3, [r3, #0]
 8109098:	4a1c      	ldr	r2, [pc, #112]	@ (810910c <HAL_TIM_Base_Start_IT+0xe4>)
 810909a:	4293      	cmp	r3, r2
 810909c:	d004      	beq.n	81090a8 <HAL_TIM_Base_Start_IT+0x80>
 810909e:	687b      	ldr	r3, [r7, #4]
 81090a0:	681b      	ldr	r3, [r3, #0]
 81090a2:	4a1b      	ldr	r2, [pc, #108]	@ (8109110 <HAL_TIM_Base_Start_IT+0xe8>)
 81090a4:	4293      	cmp	r3, r2
 81090a6:	d115      	bne.n	81090d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81090a8:	687b      	ldr	r3, [r7, #4]
 81090aa:	681b      	ldr	r3, [r3, #0]
 81090ac:	689a      	ldr	r2, [r3, #8]
 81090ae:	4b19      	ldr	r3, [pc, #100]	@ (8109114 <HAL_TIM_Base_Start_IT+0xec>)
 81090b0:	4013      	ands	r3, r2
 81090b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81090b4:	68fb      	ldr	r3, [r7, #12]
 81090b6:	2b06      	cmp	r3, #6
 81090b8:	d015      	beq.n	81090e6 <HAL_TIM_Base_Start_IT+0xbe>
 81090ba:	68fb      	ldr	r3, [r7, #12]
 81090bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81090c0:	d011      	beq.n	81090e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 81090c2:	687b      	ldr	r3, [r7, #4]
 81090c4:	681b      	ldr	r3, [r3, #0]
 81090c6:	681a      	ldr	r2, [r3, #0]
 81090c8:	687b      	ldr	r3, [r7, #4]
 81090ca:	681b      	ldr	r3, [r3, #0]
 81090cc:	f042 0201 	orr.w	r2, r2, #1
 81090d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81090d2:	e008      	b.n	81090e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81090d4:	687b      	ldr	r3, [r7, #4]
 81090d6:	681b      	ldr	r3, [r3, #0]
 81090d8:	681a      	ldr	r2, [r3, #0]
 81090da:	687b      	ldr	r3, [r7, #4]
 81090dc:	681b      	ldr	r3, [r3, #0]
 81090de:	f042 0201 	orr.w	r2, r2, #1
 81090e2:	601a      	str	r2, [r3, #0]
 81090e4:	e000      	b.n	81090e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81090e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81090e8:	2300      	movs	r3, #0
}
 81090ea:	4618      	mov	r0, r3
 81090ec:	3714      	adds	r7, #20
 81090ee:	46bd      	mov	sp, r7
 81090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090f4:	4770      	bx	lr
 81090f6:	bf00      	nop
 81090f8:	40010000 	.word	0x40010000
 81090fc:	40000400 	.word	0x40000400
 8109100:	40000800 	.word	0x40000800
 8109104:	40000c00 	.word	0x40000c00
 8109108:	40010400 	.word	0x40010400
 810910c:	40001800 	.word	0x40001800
 8109110:	40014000 	.word	0x40014000
 8109114:	00010007 	.word	0x00010007

08109118 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8109118:	b580      	push	{r7, lr}
 810911a:	b082      	sub	sp, #8
 810911c:	af00      	add	r7, sp, #0
 810911e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8109120:	687b      	ldr	r3, [r7, #4]
 8109122:	2b00      	cmp	r3, #0
 8109124:	d101      	bne.n	810912a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8109126:	2301      	movs	r3, #1
 8109128:	e049      	b.n	81091be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810912a:	687b      	ldr	r3, [r7, #4]
 810912c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8109130:	b2db      	uxtb	r3, r3
 8109132:	2b00      	cmp	r3, #0
 8109134:	d106      	bne.n	8109144 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8109136:	687b      	ldr	r3, [r7, #4]
 8109138:	2200      	movs	r2, #0
 810913a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 810913e:	6878      	ldr	r0, [r7, #4]
 8109140:	f000 f841 	bl	81091c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109144:	687b      	ldr	r3, [r7, #4]
 8109146:	2202      	movs	r2, #2
 8109148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810914c:	687b      	ldr	r3, [r7, #4]
 810914e:	681a      	ldr	r2, [r3, #0]
 8109150:	687b      	ldr	r3, [r7, #4]
 8109152:	3304      	adds	r3, #4
 8109154:	4619      	mov	r1, r3
 8109156:	4610      	mov	r0, r2
 8109158:	f000 fd30 	bl	8109bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810915c:	687b      	ldr	r3, [r7, #4]
 810915e:	2201      	movs	r2, #1
 8109160:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109164:	687b      	ldr	r3, [r7, #4]
 8109166:	2201      	movs	r2, #1
 8109168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810916c:	687b      	ldr	r3, [r7, #4]
 810916e:	2201      	movs	r2, #1
 8109170:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8109174:	687b      	ldr	r3, [r7, #4]
 8109176:	2201      	movs	r2, #1
 8109178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810917c:	687b      	ldr	r3, [r7, #4]
 810917e:	2201      	movs	r2, #1
 8109180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8109184:	687b      	ldr	r3, [r7, #4]
 8109186:	2201      	movs	r2, #1
 8109188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810918c:	687b      	ldr	r3, [r7, #4]
 810918e:	2201      	movs	r2, #1
 8109190:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109194:	687b      	ldr	r3, [r7, #4]
 8109196:	2201      	movs	r2, #1
 8109198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810919c:	687b      	ldr	r3, [r7, #4]
 810919e:	2201      	movs	r2, #1
 81091a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81091a4:	687b      	ldr	r3, [r7, #4]
 81091a6:	2201      	movs	r2, #1
 81091a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 81091ac:	687b      	ldr	r3, [r7, #4]
 81091ae:	2201      	movs	r2, #1
 81091b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81091b4:	687b      	ldr	r3, [r7, #4]
 81091b6:	2201      	movs	r2, #1
 81091b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 81091bc:	2300      	movs	r3, #0
}
 81091be:	4618      	mov	r0, r3
 81091c0:	3708      	adds	r7, #8
 81091c2:	46bd      	mov	sp, r7
 81091c4:	bd80      	pop	{r7, pc}

081091c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 81091c6:	b480      	push	{r7}
 81091c8:	b083      	sub	sp, #12
 81091ca:	af00      	add	r7, sp, #0
 81091cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 81091ce:	bf00      	nop
 81091d0:	370c      	adds	r7, #12
 81091d2:	46bd      	mov	sp, r7
 81091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091d8:	4770      	bx	lr
	...

081091dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81091dc:	b580      	push	{r7, lr}
 81091de:	b084      	sub	sp, #16
 81091e0:	af00      	add	r7, sp, #0
 81091e2:	6078      	str	r0, [r7, #4]
 81091e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 81091e6:	683b      	ldr	r3, [r7, #0]
 81091e8:	2b00      	cmp	r3, #0
 81091ea:	d109      	bne.n	8109200 <HAL_TIM_PWM_Start+0x24>
 81091ec:	687b      	ldr	r3, [r7, #4]
 81091ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 81091f2:	b2db      	uxtb	r3, r3
 81091f4:	2b01      	cmp	r3, #1
 81091f6:	bf14      	ite	ne
 81091f8:	2301      	movne	r3, #1
 81091fa:	2300      	moveq	r3, #0
 81091fc:	b2db      	uxtb	r3, r3
 81091fe:	e03c      	b.n	810927a <HAL_TIM_PWM_Start+0x9e>
 8109200:	683b      	ldr	r3, [r7, #0]
 8109202:	2b04      	cmp	r3, #4
 8109204:	d109      	bne.n	810921a <HAL_TIM_PWM_Start+0x3e>
 8109206:	687b      	ldr	r3, [r7, #4]
 8109208:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 810920c:	b2db      	uxtb	r3, r3
 810920e:	2b01      	cmp	r3, #1
 8109210:	bf14      	ite	ne
 8109212:	2301      	movne	r3, #1
 8109214:	2300      	moveq	r3, #0
 8109216:	b2db      	uxtb	r3, r3
 8109218:	e02f      	b.n	810927a <HAL_TIM_PWM_Start+0x9e>
 810921a:	683b      	ldr	r3, [r7, #0]
 810921c:	2b08      	cmp	r3, #8
 810921e:	d109      	bne.n	8109234 <HAL_TIM_PWM_Start+0x58>
 8109220:	687b      	ldr	r3, [r7, #4]
 8109222:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8109226:	b2db      	uxtb	r3, r3
 8109228:	2b01      	cmp	r3, #1
 810922a:	bf14      	ite	ne
 810922c:	2301      	movne	r3, #1
 810922e:	2300      	moveq	r3, #0
 8109230:	b2db      	uxtb	r3, r3
 8109232:	e022      	b.n	810927a <HAL_TIM_PWM_Start+0x9e>
 8109234:	683b      	ldr	r3, [r7, #0]
 8109236:	2b0c      	cmp	r3, #12
 8109238:	d109      	bne.n	810924e <HAL_TIM_PWM_Start+0x72>
 810923a:	687b      	ldr	r3, [r7, #4]
 810923c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8109240:	b2db      	uxtb	r3, r3
 8109242:	2b01      	cmp	r3, #1
 8109244:	bf14      	ite	ne
 8109246:	2301      	movne	r3, #1
 8109248:	2300      	moveq	r3, #0
 810924a:	b2db      	uxtb	r3, r3
 810924c:	e015      	b.n	810927a <HAL_TIM_PWM_Start+0x9e>
 810924e:	683b      	ldr	r3, [r7, #0]
 8109250:	2b10      	cmp	r3, #16
 8109252:	d109      	bne.n	8109268 <HAL_TIM_PWM_Start+0x8c>
 8109254:	687b      	ldr	r3, [r7, #4]
 8109256:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 810925a:	b2db      	uxtb	r3, r3
 810925c:	2b01      	cmp	r3, #1
 810925e:	bf14      	ite	ne
 8109260:	2301      	movne	r3, #1
 8109262:	2300      	moveq	r3, #0
 8109264:	b2db      	uxtb	r3, r3
 8109266:	e008      	b.n	810927a <HAL_TIM_PWM_Start+0x9e>
 8109268:	687b      	ldr	r3, [r7, #4]
 810926a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 810926e:	b2db      	uxtb	r3, r3
 8109270:	2b01      	cmp	r3, #1
 8109272:	bf14      	ite	ne
 8109274:	2301      	movne	r3, #1
 8109276:	2300      	moveq	r3, #0
 8109278:	b2db      	uxtb	r3, r3
 810927a:	2b00      	cmp	r3, #0
 810927c:	d001      	beq.n	8109282 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 810927e:	2301      	movs	r3, #1
 8109280:	e0a1      	b.n	81093c6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8109282:	683b      	ldr	r3, [r7, #0]
 8109284:	2b00      	cmp	r3, #0
 8109286:	d104      	bne.n	8109292 <HAL_TIM_PWM_Start+0xb6>
 8109288:	687b      	ldr	r3, [r7, #4]
 810928a:	2202      	movs	r2, #2
 810928c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8109290:	e023      	b.n	81092da <HAL_TIM_PWM_Start+0xfe>
 8109292:	683b      	ldr	r3, [r7, #0]
 8109294:	2b04      	cmp	r3, #4
 8109296:	d104      	bne.n	81092a2 <HAL_TIM_PWM_Start+0xc6>
 8109298:	687b      	ldr	r3, [r7, #4]
 810929a:	2202      	movs	r2, #2
 810929c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 81092a0:	e01b      	b.n	81092da <HAL_TIM_PWM_Start+0xfe>
 81092a2:	683b      	ldr	r3, [r7, #0]
 81092a4:	2b08      	cmp	r3, #8
 81092a6:	d104      	bne.n	81092b2 <HAL_TIM_PWM_Start+0xd6>
 81092a8:	687b      	ldr	r3, [r7, #4]
 81092aa:	2202      	movs	r2, #2
 81092ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 81092b0:	e013      	b.n	81092da <HAL_TIM_PWM_Start+0xfe>
 81092b2:	683b      	ldr	r3, [r7, #0]
 81092b4:	2b0c      	cmp	r3, #12
 81092b6:	d104      	bne.n	81092c2 <HAL_TIM_PWM_Start+0xe6>
 81092b8:	687b      	ldr	r3, [r7, #4]
 81092ba:	2202      	movs	r2, #2
 81092bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 81092c0:	e00b      	b.n	81092da <HAL_TIM_PWM_Start+0xfe>
 81092c2:	683b      	ldr	r3, [r7, #0]
 81092c4:	2b10      	cmp	r3, #16
 81092c6:	d104      	bne.n	81092d2 <HAL_TIM_PWM_Start+0xf6>
 81092c8:	687b      	ldr	r3, [r7, #4]
 81092ca:	2202      	movs	r2, #2
 81092cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 81092d0:	e003      	b.n	81092da <HAL_TIM_PWM_Start+0xfe>
 81092d2:	687b      	ldr	r3, [r7, #4]
 81092d4:	2202      	movs	r2, #2
 81092d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 81092da:	687b      	ldr	r3, [r7, #4]
 81092dc:	681b      	ldr	r3, [r3, #0]
 81092de:	2201      	movs	r2, #1
 81092e0:	6839      	ldr	r1, [r7, #0]
 81092e2:	4618      	mov	r0, r3
 81092e4:	f001 f882 	bl	810a3ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 81092e8:	687b      	ldr	r3, [r7, #4]
 81092ea:	681b      	ldr	r3, [r3, #0]
 81092ec:	4a38      	ldr	r2, [pc, #224]	@ (81093d0 <HAL_TIM_PWM_Start+0x1f4>)
 81092ee:	4293      	cmp	r3, r2
 81092f0:	d013      	beq.n	810931a <HAL_TIM_PWM_Start+0x13e>
 81092f2:	687b      	ldr	r3, [r7, #4]
 81092f4:	681b      	ldr	r3, [r3, #0]
 81092f6:	4a37      	ldr	r2, [pc, #220]	@ (81093d4 <HAL_TIM_PWM_Start+0x1f8>)
 81092f8:	4293      	cmp	r3, r2
 81092fa:	d00e      	beq.n	810931a <HAL_TIM_PWM_Start+0x13e>
 81092fc:	687b      	ldr	r3, [r7, #4]
 81092fe:	681b      	ldr	r3, [r3, #0]
 8109300:	4a35      	ldr	r2, [pc, #212]	@ (81093d8 <HAL_TIM_PWM_Start+0x1fc>)
 8109302:	4293      	cmp	r3, r2
 8109304:	d009      	beq.n	810931a <HAL_TIM_PWM_Start+0x13e>
 8109306:	687b      	ldr	r3, [r7, #4]
 8109308:	681b      	ldr	r3, [r3, #0]
 810930a:	4a34      	ldr	r2, [pc, #208]	@ (81093dc <HAL_TIM_PWM_Start+0x200>)
 810930c:	4293      	cmp	r3, r2
 810930e:	d004      	beq.n	810931a <HAL_TIM_PWM_Start+0x13e>
 8109310:	687b      	ldr	r3, [r7, #4]
 8109312:	681b      	ldr	r3, [r3, #0]
 8109314:	4a32      	ldr	r2, [pc, #200]	@ (81093e0 <HAL_TIM_PWM_Start+0x204>)
 8109316:	4293      	cmp	r3, r2
 8109318:	d101      	bne.n	810931e <HAL_TIM_PWM_Start+0x142>
 810931a:	2301      	movs	r3, #1
 810931c:	e000      	b.n	8109320 <HAL_TIM_PWM_Start+0x144>
 810931e:	2300      	movs	r3, #0
 8109320:	2b00      	cmp	r3, #0
 8109322:	d007      	beq.n	8109334 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8109324:	687b      	ldr	r3, [r7, #4]
 8109326:	681b      	ldr	r3, [r3, #0]
 8109328:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810932a:	687b      	ldr	r3, [r7, #4]
 810932c:	681b      	ldr	r3, [r3, #0]
 810932e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8109332:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8109334:	687b      	ldr	r3, [r7, #4]
 8109336:	681b      	ldr	r3, [r3, #0]
 8109338:	4a25      	ldr	r2, [pc, #148]	@ (81093d0 <HAL_TIM_PWM_Start+0x1f4>)
 810933a:	4293      	cmp	r3, r2
 810933c:	d022      	beq.n	8109384 <HAL_TIM_PWM_Start+0x1a8>
 810933e:	687b      	ldr	r3, [r7, #4]
 8109340:	681b      	ldr	r3, [r3, #0]
 8109342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109346:	d01d      	beq.n	8109384 <HAL_TIM_PWM_Start+0x1a8>
 8109348:	687b      	ldr	r3, [r7, #4]
 810934a:	681b      	ldr	r3, [r3, #0]
 810934c:	4a25      	ldr	r2, [pc, #148]	@ (81093e4 <HAL_TIM_PWM_Start+0x208>)
 810934e:	4293      	cmp	r3, r2
 8109350:	d018      	beq.n	8109384 <HAL_TIM_PWM_Start+0x1a8>
 8109352:	687b      	ldr	r3, [r7, #4]
 8109354:	681b      	ldr	r3, [r3, #0]
 8109356:	4a24      	ldr	r2, [pc, #144]	@ (81093e8 <HAL_TIM_PWM_Start+0x20c>)
 8109358:	4293      	cmp	r3, r2
 810935a:	d013      	beq.n	8109384 <HAL_TIM_PWM_Start+0x1a8>
 810935c:	687b      	ldr	r3, [r7, #4]
 810935e:	681b      	ldr	r3, [r3, #0]
 8109360:	4a22      	ldr	r2, [pc, #136]	@ (81093ec <HAL_TIM_PWM_Start+0x210>)
 8109362:	4293      	cmp	r3, r2
 8109364:	d00e      	beq.n	8109384 <HAL_TIM_PWM_Start+0x1a8>
 8109366:	687b      	ldr	r3, [r7, #4]
 8109368:	681b      	ldr	r3, [r3, #0]
 810936a:	4a1a      	ldr	r2, [pc, #104]	@ (81093d4 <HAL_TIM_PWM_Start+0x1f8>)
 810936c:	4293      	cmp	r3, r2
 810936e:	d009      	beq.n	8109384 <HAL_TIM_PWM_Start+0x1a8>
 8109370:	687b      	ldr	r3, [r7, #4]
 8109372:	681b      	ldr	r3, [r3, #0]
 8109374:	4a1e      	ldr	r2, [pc, #120]	@ (81093f0 <HAL_TIM_PWM_Start+0x214>)
 8109376:	4293      	cmp	r3, r2
 8109378:	d004      	beq.n	8109384 <HAL_TIM_PWM_Start+0x1a8>
 810937a:	687b      	ldr	r3, [r7, #4]
 810937c:	681b      	ldr	r3, [r3, #0]
 810937e:	4a16      	ldr	r2, [pc, #88]	@ (81093d8 <HAL_TIM_PWM_Start+0x1fc>)
 8109380:	4293      	cmp	r3, r2
 8109382:	d115      	bne.n	81093b0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8109384:	687b      	ldr	r3, [r7, #4]
 8109386:	681b      	ldr	r3, [r3, #0]
 8109388:	689a      	ldr	r2, [r3, #8]
 810938a:	4b1a      	ldr	r3, [pc, #104]	@ (81093f4 <HAL_TIM_PWM_Start+0x218>)
 810938c:	4013      	ands	r3, r2
 810938e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109390:	68fb      	ldr	r3, [r7, #12]
 8109392:	2b06      	cmp	r3, #6
 8109394:	d015      	beq.n	81093c2 <HAL_TIM_PWM_Start+0x1e6>
 8109396:	68fb      	ldr	r3, [r7, #12]
 8109398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810939c:	d011      	beq.n	81093c2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 810939e:	687b      	ldr	r3, [r7, #4]
 81093a0:	681b      	ldr	r3, [r3, #0]
 81093a2:	681a      	ldr	r2, [r3, #0]
 81093a4:	687b      	ldr	r3, [r7, #4]
 81093a6:	681b      	ldr	r3, [r3, #0]
 81093a8:	f042 0201 	orr.w	r2, r2, #1
 81093ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81093ae:	e008      	b.n	81093c2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81093b0:	687b      	ldr	r3, [r7, #4]
 81093b2:	681b      	ldr	r3, [r3, #0]
 81093b4:	681a      	ldr	r2, [r3, #0]
 81093b6:	687b      	ldr	r3, [r7, #4]
 81093b8:	681b      	ldr	r3, [r3, #0]
 81093ba:	f042 0201 	orr.w	r2, r2, #1
 81093be:	601a      	str	r2, [r3, #0]
 81093c0:	e000      	b.n	81093c4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81093c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81093c4:	2300      	movs	r3, #0
}
 81093c6:	4618      	mov	r0, r3
 81093c8:	3710      	adds	r7, #16
 81093ca:	46bd      	mov	sp, r7
 81093cc:	bd80      	pop	{r7, pc}
 81093ce:	bf00      	nop
 81093d0:	40010000 	.word	0x40010000
 81093d4:	40010400 	.word	0x40010400
 81093d8:	40014000 	.word	0x40014000
 81093dc:	40014400 	.word	0x40014400
 81093e0:	40014800 	.word	0x40014800
 81093e4:	40000400 	.word	0x40000400
 81093e8:	40000800 	.word	0x40000800
 81093ec:	40000c00 	.word	0x40000c00
 81093f0:	40001800 	.word	0x40001800
 81093f4:	00010007 	.word	0x00010007

081093f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 81093f8:	b580      	push	{r7, lr}
 81093fa:	b086      	sub	sp, #24
 81093fc:	af00      	add	r7, sp, #0
 81093fe:	6078      	str	r0, [r7, #4]
 8109400:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8109402:	687b      	ldr	r3, [r7, #4]
 8109404:	2b00      	cmp	r3, #0
 8109406:	d101      	bne.n	810940c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8109408:	2301      	movs	r3, #1
 810940a:	e097      	b.n	810953c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 810940c:	687b      	ldr	r3, [r7, #4]
 810940e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8109412:	b2db      	uxtb	r3, r3
 8109414:	2b00      	cmp	r3, #0
 8109416:	d106      	bne.n	8109426 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8109418:	687b      	ldr	r3, [r7, #4]
 810941a:	2200      	movs	r2, #0
 810941c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8109420:	6878      	ldr	r0, [r7, #4]
 8109422:	f7f9 fd19 	bl	8102e58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109426:	687b      	ldr	r3, [r7, #4]
 8109428:	2202      	movs	r2, #2
 810942a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 810942e:	687b      	ldr	r3, [r7, #4]
 8109430:	681b      	ldr	r3, [r3, #0]
 8109432:	689b      	ldr	r3, [r3, #8]
 8109434:	687a      	ldr	r2, [r7, #4]
 8109436:	6812      	ldr	r2, [r2, #0]
 8109438:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 810943c:	f023 0307 	bic.w	r3, r3, #7
 8109440:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8109442:	687b      	ldr	r3, [r7, #4]
 8109444:	681a      	ldr	r2, [r3, #0]
 8109446:	687b      	ldr	r3, [r7, #4]
 8109448:	3304      	adds	r3, #4
 810944a:	4619      	mov	r1, r3
 810944c:	4610      	mov	r0, r2
 810944e:	f000 fbb5 	bl	8109bbc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8109452:	687b      	ldr	r3, [r7, #4]
 8109454:	681b      	ldr	r3, [r3, #0]
 8109456:	689b      	ldr	r3, [r3, #8]
 8109458:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 810945a:	687b      	ldr	r3, [r7, #4]
 810945c:	681b      	ldr	r3, [r3, #0]
 810945e:	699b      	ldr	r3, [r3, #24]
 8109460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8109462:	687b      	ldr	r3, [r7, #4]
 8109464:	681b      	ldr	r3, [r3, #0]
 8109466:	6a1b      	ldr	r3, [r3, #32]
 8109468:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 810946a:	683b      	ldr	r3, [r7, #0]
 810946c:	681b      	ldr	r3, [r3, #0]
 810946e:	697a      	ldr	r2, [r7, #20]
 8109470:	4313      	orrs	r3, r2
 8109472:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8109474:	693b      	ldr	r3, [r7, #16]
 8109476:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810947a:	f023 0303 	bic.w	r3, r3, #3
 810947e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8109480:	683b      	ldr	r3, [r7, #0]
 8109482:	689a      	ldr	r2, [r3, #8]
 8109484:	683b      	ldr	r3, [r7, #0]
 8109486:	699b      	ldr	r3, [r3, #24]
 8109488:	021b      	lsls	r3, r3, #8
 810948a:	4313      	orrs	r3, r2
 810948c:	693a      	ldr	r2, [r7, #16]
 810948e:	4313      	orrs	r3, r2
 8109490:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8109492:	693b      	ldr	r3, [r7, #16]
 8109494:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8109498:	f023 030c 	bic.w	r3, r3, #12
 810949c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 810949e:	693b      	ldr	r3, [r7, #16]
 81094a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 81094a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 81094a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 81094aa:	683b      	ldr	r3, [r7, #0]
 81094ac:	68da      	ldr	r2, [r3, #12]
 81094ae:	683b      	ldr	r3, [r7, #0]
 81094b0:	69db      	ldr	r3, [r3, #28]
 81094b2:	021b      	lsls	r3, r3, #8
 81094b4:	4313      	orrs	r3, r2
 81094b6:	693a      	ldr	r2, [r7, #16]
 81094b8:	4313      	orrs	r3, r2
 81094ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 81094bc:	683b      	ldr	r3, [r7, #0]
 81094be:	691b      	ldr	r3, [r3, #16]
 81094c0:	011a      	lsls	r2, r3, #4
 81094c2:	683b      	ldr	r3, [r7, #0]
 81094c4:	6a1b      	ldr	r3, [r3, #32]
 81094c6:	031b      	lsls	r3, r3, #12
 81094c8:	4313      	orrs	r3, r2
 81094ca:	693a      	ldr	r2, [r7, #16]
 81094cc:	4313      	orrs	r3, r2
 81094ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 81094d0:	68fb      	ldr	r3, [r7, #12]
 81094d2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 81094d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 81094d8:	68fb      	ldr	r3, [r7, #12]
 81094da:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 81094de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 81094e0:	683b      	ldr	r3, [r7, #0]
 81094e2:	685a      	ldr	r2, [r3, #4]
 81094e4:	683b      	ldr	r3, [r7, #0]
 81094e6:	695b      	ldr	r3, [r3, #20]
 81094e8:	011b      	lsls	r3, r3, #4
 81094ea:	4313      	orrs	r3, r2
 81094ec:	68fa      	ldr	r2, [r7, #12]
 81094ee:	4313      	orrs	r3, r2
 81094f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 81094f2:	687b      	ldr	r3, [r7, #4]
 81094f4:	681b      	ldr	r3, [r3, #0]
 81094f6:	697a      	ldr	r2, [r7, #20]
 81094f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 81094fa:	687b      	ldr	r3, [r7, #4]
 81094fc:	681b      	ldr	r3, [r3, #0]
 81094fe:	693a      	ldr	r2, [r7, #16]
 8109500:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8109502:	687b      	ldr	r3, [r7, #4]
 8109504:	681b      	ldr	r3, [r3, #0]
 8109506:	68fa      	ldr	r2, [r7, #12]
 8109508:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810950a:	687b      	ldr	r3, [r7, #4]
 810950c:	2201      	movs	r2, #1
 810950e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8109512:	687b      	ldr	r3, [r7, #4]
 8109514:	2201      	movs	r2, #1
 8109516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810951a:	687b      	ldr	r3, [r7, #4]
 810951c:	2201      	movs	r2, #1
 810951e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8109522:	687b      	ldr	r3, [r7, #4]
 8109524:	2201      	movs	r2, #1
 8109526:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810952a:	687b      	ldr	r3, [r7, #4]
 810952c:	2201      	movs	r2, #1
 810952e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8109532:	687b      	ldr	r3, [r7, #4]
 8109534:	2201      	movs	r2, #1
 8109536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810953a:	2300      	movs	r3, #0
}
 810953c:	4618      	mov	r0, r3
 810953e:	3718      	adds	r7, #24
 8109540:	46bd      	mov	sp, r7
 8109542:	bd80      	pop	{r7, pc}

08109544 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8109544:	b580      	push	{r7, lr}
 8109546:	b084      	sub	sp, #16
 8109548:	af00      	add	r7, sp, #0
 810954a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 810954c:	687b      	ldr	r3, [r7, #4]
 810954e:	681b      	ldr	r3, [r3, #0]
 8109550:	68db      	ldr	r3, [r3, #12]
 8109552:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8109554:	687b      	ldr	r3, [r7, #4]
 8109556:	681b      	ldr	r3, [r3, #0]
 8109558:	691b      	ldr	r3, [r3, #16]
 810955a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 810955c:	68bb      	ldr	r3, [r7, #8]
 810955e:	f003 0302 	and.w	r3, r3, #2
 8109562:	2b00      	cmp	r3, #0
 8109564:	d020      	beq.n	81095a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8109566:	68fb      	ldr	r3, [r7, #12]
 8109568:	f003 0302 	and.w	r3, r3, #2
 810956c:	2b00      	cmp	r3, #0
 810956e:	d01b      	beq.n	81095a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8109570:	687b      	ldr	r3, [r7, #4]
 8109572:	681b      	ldr	r3, [r3, #0]
 8109574:	f06f 0202 	mvn.w	r2, #2
 8109578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810957a:	687b      	ldr	r3, [r7, #4]
 810957c:	2201      	movs	r2, #1
 810957e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8109580:	687b      	ldr	r3, [r7, #4]
 8109582:	681b      	ldr	r3, [r3, #0]
 8109584:	699b      	ldr	r3, [r3, #24]
 8109586:	f003 0303 	and.w	r3, r3, #3
 810958a:	2b00      	cmp	r3, #0
 810958c:	d003      	beq.n	8109596 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810958e:	6878      	ldr	r0, [r7, #4]
 8109590:	f000 faf6 	bl	8109b80 <HAL_TIM_IC_CaptureCallback>
 8109594:	e005      	b.n	81095a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8109596:	6878      	ldr	r0, [r7, #4]
 8109598:	f000 fae8 	bl	8109b6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810959c:	6878      	ldr	r0, [r7, #4]
 810959e:	f000 faf9 	bl	8109b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81095a2:	687b      	ldr	r3, [r7, #4]
 81095a4:	2200      	movs	r2, #0
 81095a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 81095a8:	68bb      	ldr	r3, [r7, #8]
 81095aa:	f003 0304 	and.w	r3, r3, #4
 81095ae:	2b00      	cmp	r3, #0
 81095b0:	d020      	beq.n	81095f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 81095b2:	68fb      	ldr	r3, [r7, #12]
 81095b4:	f003 0304 	and.w	r3, r3, #4
 81095b8:	2b00      	cmp	r3, #0
 81095ba:	d01b      	beq.n	81095f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 81095bc:	687b      	ldr	r3, [r7, #4]
 81095be:	681b      	ldr	r3, [r3, #0]
 81095c0:	f06f 0204 	mvn.w	r2, #4
 81095c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81095c6:	687b      	ldr	r3, [r7, #4]
 81095c8:	2202      	movs	r2, #2
 81095ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81095cc:	687b      	ldr	r3, [r7, #4]
 81095ce:	681b      	ldr	r3, [r3, #0]
 81095d0:	699b      	ldr	r3, [r3, #24]
 81095d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81095d6:	2b00      	cmp	r3, #0
 81095d8:	d003      	beq.n	81095e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81095da:	6878      	ldr	r0, [r7, #4]
 81095dc:	f000 fad0 	bl	8109b80 <HAL_TIM_IC_CaptureCallback>
 81095e0:	e005      	b.n	81095ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81095e2:	6878      	ldr	r0, [r7, #4]
 81095e4:	f000 fac2 	bl	8109b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81095e8:	6878      	ldr	r0, [r7, #4]
 81095ea:	f000 fad3 	bl	8109b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81095ee:	687b      	ldr	r3, [r7, #4]
 81095f0:	2200      	movs	r2, #0
 81095f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 81095f4:	68bb      	ldr	r3, [r7, #8]
 81095f6:	f003 0308 	and.w	r3, r3, #8
 81095fa:	2b00      	cmp	r3, #0
 81095fc:	d020      	beq.n	8109640 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 81095fe:	68fb      	ldr	r3, [r7, #12]
 8109600:	f003 0308 	and.w	r3, r3, #8
 8109604:	2b00      	cmp	r3, #0
 8109606:	d01b      	beq.n	8109640 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8109608:	687b      	ldr	r3, [r7, #4]
 810960a:	681b      	ldr	r3, [r3, #0]
 810960c:	f06f 0208 	mvn.w	r2, #8
 8109610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8109612:	687b      	ldr	r3, [r7, #4]
 8109614:	2204      	movs	r2, #4
 8109616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8109618:	687b      	ldr	r3, [r7, #4]
 810961a:	681b      	ldr	r3, [r3, #0]
 810961c:	69db      	ldr	r3, [r3, #28]
 810961e:	f003 0303 	and.w	r3, r3, #3
 8109622:	2b00      	cmp	r3, #0
 8109624:	d003      	beq.n	810962e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8109626:	6878      	ldr	r0, [r7, #4]
 8109628:	f000 faaa 	bl	8109b80 <HAL_TIM_IC_CaptureCallback>
 810962c:	e005      	b.n	810963a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810962e:	6878      	ldr	r0, [r7, #4]
 8109630:	f000 fa9c 	bl	8109b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109634:	6878      	ldr	r0, [r7, #4]
 8109636:	f000 faad 	bl	8109b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810963a:	687b      	ldr	r3, [r7, #4]
 810963c:	2200      	movs	r2, #0
 810963e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8109640:	68bb      	ldr	r3, [r7, #8]
 8109642:	f003 0310 	and.w	r3, r3, #16
 8109646:	2b00      	cmp	r3, #0
 8109648:	d020      	beq.n	810968c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810964a:	68fb      	ldr	r3, [r7, #12]
 810964c:	f003 0310 	and.w	r3, r3, #16
 8109650:	2b00      	cmp	r3, #0
 8109652:	d01b      	beq.n	810968c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8109654:	687b      	ldr	r3, [r7, #4]
 8109656:	681b      	ldr	r3, [r3, #0]
 8109658:	f06f 0210 	mvn.w	r2, #16
 810965c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810965e:	687b      	ldr	r3, [r7, #4]
 8109660:	2208      	movs	r2, #8
 8109662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8109664:	687b      	ldr	r3, [r7, #4]
 8109666:	681b      	ldr	r3, [r3, #0]
 8109668:	69db      	ldr	r3, [r3, #28]
 810966a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810966e:	2b00      	cmp	r3, #0
 8109670:	d003      	beq.n	810967a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8109672:	6878      	ldr	r0, [r7, #4]
 8109674:	f000 fa84 	bl	8109b80 <HAL_TIM_IC_CaptureCallback>
 8109678:	e005      	b.n	8109686 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810967a:	6878      	ldr	r0, [r7, #4]
 810967c:	f000 fa76 	bl	8109b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109680:	6878      	ldr	r0, [r7, #4]
 8109682:	f000 fa87 	bl	8109b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8109686:	687b      	ldr	r3, [r7, #4]
 8109688:	2200      	movs	r2, #0
 810968a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 810968c:	68bb      	ldr	r3, [r7, #8]
 810968e:	f003 0301 	and.w	r3, r3, #1
 8109692:	2b00      	cmp	r3, #0
 8109694:	d00c      	beq.n	81096b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8109696:	68fb      	ldr	r3, [r7, #12]
 8109698:	f003 0301 	and.w	r3, r3, #1
 810969c:	2b00      	cmp	r3, #0
 810969e:	d007      	beq.n	81096b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 81096a0:	687b      	ldr	r3, [r7, #4]
 81096a2:	681b      	ldr	r3, [r3, #0]
 81096a4:	f06f 0201 	mvn.w	r2, #1
 81096a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81096aa:	6878      	ldr	r0, [r7, #4]
 81096ac:	f7f9 fa30 	bl	8102b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 81096b0:	68bb      	ldr	r3, [r7, #8]
 81096b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81096b6:	2b00      	cmp	r3, #0
 81096b8:	d104      	bne.n	81096c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 81096ba:	68bb      	ldr	r3, [r7, #8]
 81096bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 81096c0:	2b00      	cmp	r3, #0
 81096c2:	d00c      	beq.n	81096de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 81096c4:	68fb      	ldr	r3, [r7, #12]
 81096c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81096ca:	2b00      	cmp	r3, #0
 81096cc:	d007      	beq.n	81096de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 81096ce:	687b      	ldr	r3, [r7, #4]
 81096d0:	681b      	ldr	r3, [r3, #0]
 81096d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 81096d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81096d8:	6878      	ldr	r0, [r7, #4]
 81096da:	f000 ffc3 	bl	810a664 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 81096de:	68bb      	ldr	r3, [r7, #8]
 81096e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81096e4:	2b00      	cmp	r3, #0
 81096e6:	d00c      	beq.n	8109702 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 81096e8:	68fb      	ldr	r3, [r7, #12]
 81096ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81096ee:	2b00      	cmp	r3, #0
 81096f0:	d007      	beq.n	8109702 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81096f2:	687b      	ldr	r3, [r7, #4]
 81096f4:	681b      	ldr	r3, [r3, #0]
 81096f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 81096fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81096fc:	6878      	ldr	r0, [r7, #4]
 81096fe:	f000 ffbb 	bl	810a678 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8109702:	68bb      	ldr	r3, [r7, #8]
 8109704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109708:	2b00      	cmp	r3, #0
 810970a:	d00c      	beq.n	8109726 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 810970c:	68fb      	ldr	r3, [r7, #12]
 810970e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109712:	2b00      	cmp	r3, #0
 8109714:	d007      	beq.n	8109726 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8109716:	687b      	ldr	r3, [r7, #4]
 8109718:	681b      	ldr	r3, [r3, #0]
 810971a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 810971e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8109720:	6878      	ldr	r0, [r7, #4]
 8109722:	f000 fa41 	bl	8109ba8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8109726:	68bb      	ldr	r3, [r7, #8]
 8109728:	f003 0320 	and.w	r3, r3, #32
 810972c:	2b00      	cmp	r3, #0
 810972e:	d00c      	beq.n	810974a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8109730:	68fb      	ldr	r3, [r7, #12]
 8109732:	f003 0320 	and.w	r3, r3, #32
 8109736:	2b00      	cmp	r3, #0
 8109738:	d007      	beq.n	810974a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810973a:	687b      	ldr	r3, [r7, #4]
 810973c:	681b      	ldr	r3, [r3, #0]
 810973e:	f06f 0220 	mvn.w	r2, #32
 8109742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8109744:	6878      	ldr	r0, [r7, #4]
 8109746:	f000 ff83 	bl	810a650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810974a:	bf00      	nop
 810974c:	3710      	adds	r7, #16
 810974e:	46bd      	mov	sp, r7
 8109750:	bd80      	pop	{r7, pc}
	...

08109754 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8109754:	b580      	push	{r7, lr}
 8109756:	b086      	sub	sp, #24
 8109758:	af00      	add	r7, sp, #0
 810975a:	60f8      	str	r0, [r7, #12]
 810975c:	60b9      	str	r1, [r7, #8]
 810975e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8109760:	2300      	movs	r3, #0
 8109762:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8109764:	68fb      	ldr	r3, [r7, #12]
 8109766:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810976a:	2b01      	cmp	r3, #1
 810976c:	d101      	bne.n	8109772 <HAL_TIM_PWM_ConfigChannel+0x1e>
 810976e:	2302      	movs	r3, #2
 8109770:	e0ff      	b.n	8109972 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8109772:	68fb      	ldr	r3, [r7, #12]
 8109774:	2201      	movs	r2, #1
 8109776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 810977a:	687b      	ldr	r3, [r7, #4]
 810977c:	2b14      	cmp	r3, #20
 810977e:	f200 80f0 	bhi.w	8109962 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8109782:	a201      	add	r2, pc, #4	@ (adr r2, 8109788 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8109784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109788:	081097dd 	.word	0x081097dd
 810978c:	08109963 	.word	0x08109963
 8109790:	08109963 	.word	0x08109963
 8109794:	08109963 	.word	0x08109963
 8109798:	0810981d 	.word	0x0810981d
 810979c:	08109963 	.word	0x08109963
 81097a0:	08109963 	.word	0x08109963
 81097a4:	08109963 	.word	0x08109963
 81097a8:	0810985f 	.word	0x0810985f
 81097ac:	08109963 	.word	0x08109963
 81097b0:	08109963 	.word	0x08109963
 81097b4:	08109963 	.word	0x08109963
 81097b8:	0810989f 	.word	0x0810989f
 81097bc:	08109963 	.word	0x08109963
 81097c0:	08109963 	.word	0x08109963
 81097c4:	08109963 	.word	0x08109963
 81097c8:	081098e1 	.word	0x081098e1
 81097cc:	08109963 	.word	0x08109963
 81097d0:	08109963 	.word	0x08109963
 81097d4:	08109963 	.word	0x08109963
 81097d8:	08109921 	.word	0x08109921
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81097dc:	68fb      	ldr	r3, [r7, #12]
 81097de:	681b      	ldr	r3, [r3, #0]
 81097e0:	68b9      	ldr	r1, [r7, #8]
 81097e2:	4618      	mov	r0, r3
 81097e4:	f000 fa90 	bl	8109d08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81097e8:	68fb      	ldr	r3, [r7, #12]
 81097ea:	681b      	ldr	r3, [r3, #0]
 81097ec:	699a      	ldr	r2, [r3, #24]
 81097ee:	68fb      	ldr	r3, [r7, #12]
 81097f0:	681b      	ldr	r3, [r3, #0]
 81097f2:	f042 0208 	orr.w	r2, r2, #8
 81097f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 81097f8:	68fb      	ldr	r3, [r7, #12]
 81097fa:	681b      	ldr	r3, [r3, #0]
 81097fc:	699a      	ldr	r2, [r3, #24]
 81097fe:	68fb      	ldr	r3, [r7, #12]
 8109800:	681b      	ldr	r3, [r3, #0]
 8109802:	f022 0204 	bic.w	r2, r2, #4
 8109806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8109808:	68fb      	ldr	r3, [r7, #12]
 810980a:	681b      	ldr	r3, [r3, #0]
 810980c:	6999      	ldr	r1, [r3, #24]
 810980e:	68bb      	ldr	r3, [r7, #8]
 8109810:	691a      	ldr	r2, [r3, #16]
 8109812:	68fb      	ldr	r3, [r7, #12]
 8109814:	681b      	ldr	r3, [r3, #0]
 8109816:	430a      	orrs	r2, r1
 8109818:	619a      	str	r2, [r3, #24]
      break;
 810981a:	e0a5      	b.n	8109968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810981c:	68fb      	ldr	r3, [r7, #12]
 810981e:	681b      	ldr	r3, [r3, #0]
 8109820:	68b9      	ldr	r1, [r7, #8]
 8109822:	4618      	mov	r0, r3
 8109824:	f000 fb00 	bl	8109e28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8109828:	68fb      	ldr	r3, [r7, #12]
 810982a:	681b      	ldr	r3, [r3, #0]
 810982c:	699a      	ldr	r2, [r3, #24]
 810982e:	68fb      	ldr	r3, [r7, #12]
 8109830:	681b      	ldr	r3, [r3, #0]
 8109832:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8109836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8109838:	68fb      	ldr	r3, [r7, #12]
 810983a:	681b      	ldr	r3, [r3, #0]
 810983c:	699a      	ldr	r2, [r3, #24]
 810983e:	68fb      	ldr	r3, [r7, #12]
 8109840:	681b      	ldr	r3, [r3, #0]
 8109842:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8109846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8109848:	68fb      	ldr	r3, [r7, #12]
 810984a:	681b      	ldr	r3, [r3, #0]
 810984c:	6999      	ldr	r1, [r3, #24]
 810984e:	68bb      	ldr	r3, [r7, #8]
 8109850:	691b      	ldr	r3, [r3, #16]
 8109852:	021a      	lsls	r2, r3, #8
 8109854:	68fb      	ldr	r3, [r7, #12]
 8109856:	681b      	ldr	r3, [r3, #0]
 8109858:	430a      	orrs	r2, r1
 810985a:	619a      	str	r2, [r3, #24]
      break;
 810985c:	e084      	b.n	8109968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810985e:	68fb      	ldr	r3, [r7, #12]
 8109860:	681b      	ldr	r3, [r3, #0]
 8109862:	68b9      	ldr	r1, [r7, #8]
 8109864:	4618      	mov	r0, r3
 8109866:	f000 fb69 	bl	8109f3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810986a:	68fb      	ldr	r3, [r7, #12]
 810986c:	681b      	ldr	r3, [r3, #0]
 810986e:	69da      	ldr	r2, [r3, #28]
 8109870:	68fb      	ldr	r3, [r7, #12]
 8109872:	681b      	ldr	r3, [r3, #0]
 8109874:	f042 0208 	orr.w	r2, r2, #8
 8109878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810987a:	68fb      	ldr	r3, [r7, #12]
 810987c:	681b      	ldr	r3, [r3, #0]
 810987e:	69da      	ldr	r2, [r3, #28]
 8109880:	68fb      	ldr	r3, [r7, #12]
 8109882:	681b      	ldr	r3, [r3, #0]
 8109884:	f022 0204 	bic.w	r2, r2, #4
 8109888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810988a:	68fb      	ldr	r3, [r7, #12]
 810988c:	681b      	ldr	r3, [r3, #0]
 810988e:	69d9      	ldr	r1, [r3, #28]
 8109890:	68bb      	ldr	r3, [r7, #8]
 8109892:	691a      	ldr	r2, [r3, #16]
 8109894:	68fb      	ldr	r3, [r7, #12]
 8109896:	681b      	ldr	r3, [r3, #0]
 8109898:	430a      	orrs	r2, r1
 810989a:	61da      	str	r2, [r3, #28]
      break;
 810989c:	e064      	b.n	8109968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810989e:	68fb      	ldr	r3, [r7, #12]
 81098a0:	681b      	ldr	r3, [r3, #0]
 81098a2:	68b9      	ldr	r1, [r7, #8]
 81098a4:	4618      	mov	r0, r3
 81098a6:	f000 fbd1 	bl	810a04c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81098aa:	68fb      	ldr	r3, [r7, #12]
 81098ac:	681b      	ldr	r3, [r3, #0]
 81098ae:	69da      	ldr	r2, [r3, #28]
 81098b0:	68fb      	ldr	r3, [r7, #12]
 81098b2:	681b      	ldr	r3, [r3, #0]
 81098b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81098b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81098ba:	68fb      	ldr	r3, [r7, #12]
 81098bc:	681b      	ldr	r3, [r3, #0]
 81098be:	69da      	ldr	r2, [r3, #28]
 81098c0:	68fb      	ldr	r3, [r7, #12]
 81098c2:	681b      	ldr	r3, [r3, #0]
 81098c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 81098c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81098ca:	68fb      	ldr	r3, [r7, #12]
 81098cc:	681b      	ldr	r3, [r3, #0]
 81098ce:	69d9      	ldr	r1, [r3, #28]
 81098d0:	68bb      	ldr	r3, [r7, #8]
 81098d2:	691b      	ldr	r3, [r3, #16]
 81098d4:	021a      	lsls	r2, r3, #8
 81098d6:	68fb      	ldr	r3, [r7, #12]
 81098d8:	681b      	ldr	r3, [r3, #0]
 81098da:	430a      	orrs	r2, r1
 81098dc:	61da      	str	r2, [r3, #28]
      break;
 81098de:	e043      	b.n	8109968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81098e0:	68fb      	ldr	r3, [r7, #12]
 81098e2:	681b      	ldr	r3, [r3, #0]
 81098e4:	68b9      	ldr	r1, [r7, #8]
 81098e6:	4618      	mov	r0, r3
 81098e8:	f000 fc1a 	bl	810a120 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 81098ec:	68fb      	ldr	r3, [r7, #12]
 81098ee:	681b      	ldr	r3, [r3, #0]
 81098f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81098f2:	68fb      	ldr	r3, [r7, #12]
 81098f4:	681b      	ldr	r3, [r3, #0]
 81098f6:	f042 0208 	orr.w	r2, r2, #8
 81098fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 81098fc:	68fb      	ldr	r3, [r7, #12]
 81098fe:	681b      	ldr	r3, [r3, #0]
 8109900:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8109902:	68fb      	ldr	r3, [r7, #12]
 8109904:	681b      	ldr	r3, [r3, #0]
 8109906:	f022 0204 	bic.w	r2, r2, #4
 810990a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810990c:	68fb      	ldr	r3, [r7, #12]
 810990e:	681b      	ldr	r3, [r3, #0]
 8109910:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8109912:	68bb      	ldr	r3, [r7, #8]
 8109914:	691a      	ldr	r2, [r3, #16]
 8109916:	68fb      	ldr	r3, [r7, #12]
 8109918:	681b      	ldr	r3, [r3, #0]
 810991a:	430a      	orrs	r2, r1
 810991c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810991e:	e023      	b.n	8109968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8109920:	68fb      	ldr	r3, [r7, #12]
 8109922:	681b      	ldr	r3, [r3, #0]
 8109924:	68b9      	ldr	r1, [r7, #8]
 8109926:	4618      	mov	r0, r3
 8109928:	f000 fc5e 	bl	810a1e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 810992c:	68fb      	ldr	r3, [r7, #12]
 810992e:	681b      	ldr	r3, [r3, #0]
 8109930:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8109932:	68fb      	ldr	r3, [r7, #12]
 8109934:	681b      	ldr	r3, [r3, #0]
 8109936:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810993a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 810993c:	68fb      	ldr	r3, [r7, #12]
 810993e:	681b      	ldr	r3, [r3, #0]
 8109940:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8109942:	68fb      	ldr	r3, [r7, #12]
 8109944:	681b      	ldr	r3, [r3, #0]
 8109946:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810994a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810994c:	68fb      	ldr	r3, [r7, #12]
 810994e:	681b      	ldr	r3, [r3, #0]
 8109950:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8109952:	68bb      	ldr	r3, [r7, #8]
 8109954:	691b      	ldr	r3, [r3, #16]
 8109956:	021a      	lsls	r2, r3, #8
 8109958:	68fb      	ldr	r3, [r7, #12]
 810995a:	681b      	ldr	r3, [r3, #0]
 810995c:	430a      	orrs	r2, r1
 810995e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8109960:	e002      	b.n	8109968 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8109962:	2301      	movs	r3, #1
 8109964:	75fb      	strb	r3, [r7, #23]
      break;
 8109966:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8109968:	68fb      	ldr	r3, [r7, #12]
 810996a:	2200      	movs	r2, #0
 810996c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8109970:	7dfb      	ldrb	r3, [r7, #23]
}
 8109972:	4618      	mov	r0, r3
 8109974:	3718      	adds	r7, #24
 8109976:	46bd      	mov	sp, r7
 8109978:	bd80      	pop	{r7, pc}
 810997a:	bf00      	nop

0810997c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 810997c:	b580      	push	{r7, lr}
 810997e:	b084      	sub	sp, #16
 8109980:	af00      	add	r7, sp, #0
 8109982:	6078      	str	r0, [r7, #4]
 8109984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8109986:	2300      	movs	r3, #0
 8109988:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810998a:	687b      	ldr	r3, [r7, #4]
 810998c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8109990:	2b01      	cmp	r3, #1
 8109992:	d101      	bne.n	8109998 <HAL_TIM_ConfigClockSource+0x1c>
 8109994:	2302      	movs	r3, #2
 8109996:	e0de      	b.n	8109b56 <HAL_TIM_ConfigClockSource+0x1da>
 8109998:	687b      	ldr	r3, [r7, #4]
 810999a:	2201      	movs	r2, #1
 810999c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 81099a0:	687b      	ldr	r3, [r7, #4]
 81099a2:	2202      	movs	r2, #2
 81099a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 81099a8:	687b      	ldr	r3, [r7, #4]
 81099aa:	681b      	ldr	r3, [r3, #0]
 81099ac:	689b      	ldr	r3, [r3, #8]
 81099ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 81099b0:	68bb      	ldr	r3, [r7, #8]
 81099b2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 81099b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 81099ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81099bc:	68bb      	ldr	r3, [r7, #8]
 81099be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81099c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 81099c4:	687b      	ldr	r3, [r7, #4]
 81099c6:	681b      	ldr	r3, [r3, #0]
 81099c8:	68ba      	ldr	r2, [r7, #8]
 81099ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 81099cc:	683b      	ldr	r3, [r7, #0]
 81099ce:	681b      	ldr	r3, [r3, #0]
 81099d0:	4a63      	ldr	r2, [pc, #396]	@ (8109b60 <HAL_TIM_ConfigClockSource+0x1e4>)
 81099d2:	4293      	cmp	r3, r2
 81099d4:	f000 80a9 	beq.w	8109b2a <HAL_TIM_ConfigClockSource+0x1ae>
 81099d8:	4a61      	ldr	r2, [pc, #388]	@ (8109b60 <HAL_TIM_ConfigClockSource+0x1e4>)
 81099da:	4293      	cmp	r3, r2
 81099dc:	f200 80ae 	bhi.w	8109b3c <HAL_TIM_ConfigClockSource+0x1c0>
 81099e0:	4a60      	ldr	r2, [pc, #384]	@ (8109b64 <HAL_TIM_ConfigClockSource+0x1e8>)
 81099e2:	4293      	cmp	r3, r2
 81099e4:	f000 80a1 	beq.w	8109b2a <HAL_TIM_ConfigClockSource+0x1ae>
 81099e8:	4a5e      	ldr	r2, [pc, #376]	@ (8109b64 <HAL_TIM_ConfigClockSource+0x1e8>)
 81099ea:	4293      	cmp	r3, r2
 81099ec:	f200 80a6 	bhi.w	8109b3c <HAL_TIM_ConfigClockSource+0x1c0>
 81099f0:	4a5d      	ldr	r2, [pc, #372]	@ (8109b68 <HAL_TIM_ConfigClockSource+0x1ec>)
 81099f2:	4293      	cmp	r3, r2
 81099f4:	f000 8099 	beq.w	8109b2a <HAL_TIM_ConfigClockSource+0x1ae>
 81099f8:	4a5b      	ldr	r2, [pc, #364]	@ (8109b68 <HAL_TIM_ConfigClockSource+0x1ec>)
 81099fa:	4293      	cmp	r3, r2
 81099fc:	f200 809e 	bhi.w	8109b3c <HAL_TIM_ConfigClockSource+0x1c0>
 8109a00:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8109a04:	f000 8091 	beq.w	8109b2a <HAL_TIM_ConfigClockSource+0x1ae>
 8109a08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8109a0c:	f200 8096 	bhi.w	8109b3c <HAL_TIM_ConfigClockSource+0x1c0>
 8109a10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8109a14:	f000 8089 	beq.w	8109b2a <HAL_TIM_ConfigClockSource+0x1ae>
 8109a18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8109a1c:	f200 808e 	bhi.w	8109b3c <HAL_TIM_ConfigClockSource+0x1c0>
 8109a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8109a24:	d03e      	beq.n	8109aa4 <HAL_TIM_ConfigClockSource+0x128>
 8109a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8109a2a:	f200 8087 	bhi.w	8109b3c <HAL_TIM_ConfigClockSource+0x1c0>
 8109a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8109a32:	f000 8086 	beq.w	8109b42 <HAL_TIM_ConfigClockSource+0x1c6>
 8109a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8109a3a:	d87f      	bhi.n	8109b3c <HAL_TIM_ConfigClockSource+0x1c0>
 8109a3c:	2b70      	cmp	r3, #112	@ 0x70
 8109a3e:	d01a      	beq.n	8109a76 <HAL_TIM_ConfigClockSource+0xfa>
 8109a40:	2b70      	cmp	r3, #112	@ 0x70
 8109a42:	d87b      	bhi.n	8109b3c <HAL_TIM_ConfigClockSource+0x1c0>
 8109a44:	2b60      	cmp	r3, #96	@ 0x60
 8109a46:	d050      	beq.n	8109aea <HAL_TIM_ConfigClockSource+0x16e>
 8109a48:	2b60      	cmp	r3, #96	@ 0x60
 8109a4a:	d877      	bhi.n	8109b3c <HAL_TIM_ConfigClockSource+0x1c0>
 8109a4c:	2b50      	cmp	r3, #80	@ 0x50
 8109a4e:	d03c      	beq.n	8109aca <HAL_TIM_ConfigClockSource+0x14e>
 8109a50:	2b50      	cmp	r3, #80	@ 0x50
 8109a52:	d873      	bhi.n	8109b3c <HAL_TIM_ConfigClockSource+0x1c0>
 8109a54:	2b40      	cmp	r3, #64	@ 0x40
 8109a56:	d058      	beq.n	8109b0a <HAL_TIM_ConfigClockSource+0x18e>
 8109a58:	2b40      	cmp	r3, #64	@ 0x40
 8109a5a:	d86f      	bhi.n	8109b3c <HAL_TIM_ConfigClockSource+0x1c0>
 8109a5c:	2b30      	cmp	r3, #48	@ 0x30
 8109a5e:	d064      	beq.n	8109b2a <HAL_TIM_ConfigClockSource+0x1ae>
 8109a60:	2b30      	cmp	r3, #48	@ 0x30
 8109a62:	d86b      	bhi.n	8109b3c <HAL_TIM_ConfigClockSource+0x1c0>
 8109a64:	2b20      	cmp	r3, #32
 8109a66:	d060      	beq.n	8109b2a <HAL_TIM_ConfigClockSource+0x1ae>
 8109a68:	2b20      	cmp	r3, #32
 8109a6a:	d867      	bhi.n	8109b3c <HAL_TIM_ConfigClockSource+0x1c0>
 8109a6c:	2b00      	cmp	r3, #0
 8109a6e:	d05c      	beq.n	8109b2a <HAL_TIM_ConfigClockSource+0x1ae>
 8109a70:	2b10      	cmp	r3, #16
 8109a72:	d05a      	beq.n	8109b2a <HAL_TIM_ConfigClockSource+0x1ae>
 8109a74:	e062      	b.n	8109b3c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8109a76:	687b      	ldr	r3, [r7, #4]
 8109a78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8109a7a:	683b      	ldr	r3, [r7, #0]
 8109a7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8109a7e:	683b      	ldr	r3, [r7, #0]
 8109a80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8109a82:	683b      	ldr	r3, [r7, #0]
 8109a84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8109a86:	f000 fc91 	bl	810a3ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8109a8a:	687b      	ldr	r3, [r7, #4]
 8109a8c:	681b      	ldr	r3, [r3, #0]
 8109a8e:	689b      	ldr	r3, [r3, #8]
 8109a90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8109a92:	68bb      	ldr	r3, [r7, #8]
 8109a94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8109a98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8109a9a:	687b      	ldr	r3, [r7, #4]
 8109a9c:	681b      	ldr	r3, [r3, #0]
 8109a9e:	68ba      	ldr	r2, [r7, #8]
 8109aa0:	609a      	str	r2, [r3, #8]
      break;
 8109aa2:	e04f      	b.n	8109b44 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8109aa4:	687b      	ldr	r3, [r7, #4]
 8109aa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8109aa8:	683b      	ldr	r3, [r7, #0]
 8109aaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8109aac:	683b      	ldr	r3, [r7, #0]
 8109aae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8109ab0:	683b      	ldr	r3, [r7, #0]
 8109ab2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8109ab4:	f000 fc7a 	bl	810a3ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8109ab8:	687b      	ldr	r3, [r7, #4]
 8109aba:	681b      	ldr	r3, [r3, #0]
 8109abc:	689a      	ldr	r2, [r3, #8]
 8109abe:	687b      	ldr	r3, [r7, #4]
 8109ac0:	681b      	ldr	r3, [r3, #0]
 8109ac2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8109ac6:	609a      	str	r2, [r3, #8]
      break;
 8109ac8:	e03c      	b.n	8109b44 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8109aca:	687b      	ldr	r3, [r7, #4]
 8109acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8109ace:	683b      	ldr	r3, [r7, #0]
 8109ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8109ad2:	683b      	ldr	r3, [r7, #0]
 8109ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8109ad6:	461a      	mov	r2, r3
 8109ad8:	f000 fbec 	bl	810a2b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8109adc:	687b      	ldr	r3, [r7, #4]
 8109ade:	681b      	ldr	r3, [r3, #0]
 8109ae0:	2150      	movs	r1, #80	@ 0x50
 8109ae2:	4618      	mov	r0, r3
 8109ae4:	f000 fc45 	bl	810a372 <TIM_ITRx_SetConfig>
      break;
 8109ae8:	e02c      	b.n	8109b44 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8109aea:	687b      	ldr	r3, [r7, #4]
 8109aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8109aee:	683b      	ldr	r3, [r7, #0]
 8109af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8109af2:	683b      	ldr	r3, [r7, #0]
 8109af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8109af6:	461a      	mov	r2, r3
 8109af8:	f000 fc0b 	bl	810a312 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8109afc:	687b      	ldr	r3, [r7, #4]
 8109afe:	681b      	ldr	r3, [r3, #0]
 8109b00:	2160      	movs	r1, #96	@ 0x60
 8109b02:	4618      	mov	r0, r3
 8109b04:	f000 fc35 	bl	810a372 <TIM_ITRx_SetConfig>
      break;
 8109b08:	e01c      	b.n	8109b44 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8109b0a:	687b      	ldr	r3, [r7, #4]
 8109b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8109b0e:	683b      	ldr	r3, [r7, #0]
 8109b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8109b12:	683b      	ldr	r3, [r7, #0]
 8109b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8109b16:	461a      	mov	r2, r3
 8109b18:	f000 fbcc 	bl	810a2b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8109b1c:	687b      	ldr	r3, [r7, #4]
 8109b1e:	681b      	ldr	r3, [r3, #0]
 8109b20:	2140      	movs	r1, #64	@ 0x40
 8109b22:	4618      	mov	r0, r3
 8109b24:	f000 fc25 	bl	810a372 <TIM_ITRx_SetConfig>
      break;
 8109b28:	e00c      	b.n	8109b44 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8109b2a:	687b      	ldr	r3, [r7, #4]
 8109b2c:	681a      	ldr	r2, [r3, #0]
 8109b2e:	683b      	ldr	r3, [r7, #0]
 8109b30:	681b      	ldr	r3, [r3, #0]
 8109b32:	4619      	mov	r1, r3
 8109b34:	4610      	mov	r0, r2
 8109b36:	f000 fc1c 	bl	810a372 <TIM_ITRx_SetConfig>
      break;
 8109b3a:	e003      	b.n	8109b44 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8109b3c:	2301      	movs	r3, #1
 8109b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8109b40:	e000      	b.n	8109b44 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8109b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8109b44:	687b      	ldr	r3, [r7, #4]
 8109b46:	2201      	movs	r2, #1
 8109b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8109b4c:	687b      	ldr	r3, [r7, #4]
 8109b4e:	2200      	movs	r2, #0
 8109b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8109b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8109b56:	4618      	mov	r0, r3
 8109b58:	3710      	adds	r7, #16
 8109b5a:	46bd      	mov	sp, r7
 8109b5c:	bd80      	pop	{r7, pc}
 8109b5e:	bf00      	nop
 8109b60:	00100040 	.word	0x00100040
 8109b64:	00100030 	.word	0x00100030
 8109b68:	00100020 	.word	0x00100020

08109b6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8109b6c:	b480      	push	{r7}
 8109b6e:	b083      	sub	sp, #12
 8109b70:	af00      	add	r7, sp, #0
 8109b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8109b74:	bf00      	nop
 8109b76:	370c      	adds	r7, #12
 8109b78:	46bd      	mov	sp, r7
 8109b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b7e:	4770      	bx	lr

08109b80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8109b80:	b480      	push	{r7}
 8109b82:	b083      	sub	sp, #12
 8109b84:	af00      	add	r7, sp, #0
 8109b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8109b88:	bf00      	nop
 8109b8a:	370c      	adds	r7, #12
 8109b8c:	46bd      	mov	sp, r7
 8109b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b92:	4770      	bx	lr

08109b94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8109b94:	b480      	push	{r7}
 8109b96:	b083      	sub	sp, #12
 8109b98:	af00      	add	r7, sp, #0
 8109b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8109b9c:	bf00      	nop
 8109b9e:	370c      	adds	r7, #12
 8109ba0:	46bd      	mov	sp, r7
 8109ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ba6:	4770      	bx	lr

08109ba8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8109ba8:	b480      	push	{r7}
 8109baa:	b083      	sub	sp, #12
 8109bac:	af00      	add	r7, sp, #0
 8109bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8109bb0:	bf00      	nop
 8109bb2:	370c      	adds	r7, #12
 8109bb4:	46bd      	mov	sp, r7
 8109bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109bba:	4770      	bx	lr

08109bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8109bbc:	b480      	push	{r7}
 8109bbe:	b085      	sub	sp, #20
 8109bc0:	af00      	add	r7, sp, #0
 8109bc2:	6078      	str	r0, [r7, #4]
 8109bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8109bc6:	687b      	ldr	r3, [r7, #4]
 8109bc8:	681b      	ldr	r3, [r3, #0]
 8109bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8109bcc:	687b      	ldr	r3, [r7, #4]
 8109bce:	4a46      	ldr	r2, [pc, #280]	@ (8109ce8 <TIM_Base_SetConfig+0x12c>)
 8109bd0:	4293      	cmp	r3, r2
 8109bd2:	d013      	beq.n	8109bfc <TIM_Base_SetConfig+0x40>
 8109bd4:	687b      	ldr	r3, [r7, #4]
 8109bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109bda:	d00f      	beq.n	8109bfc <TIM_Base_SetConfig+0x40>
 8109bdc:	687b      	ldr	r3, [r7, #4]
 8109bde:	4a43      	ldr	r2, [pc, #268]	@ (8109cec <TIM_Base_SetConfig+0x130>)
 8109be0:	4293      	cmp	r3, r2
 8109be2:	d00b      	beq.n	8109bfc <TIM_Base_SetConfig+0x40>
 8109be4:	687b      	ldr	r3, [r7, #4]
 8109be6:	4a42      	ldr	r2, [pc, #264]	@ (8109cf0 <TIM_Base_SetConfig+0x134>)
 8109be8:	4293      	cmp	r3, r2
 8109bea:	d007      	beq.n	8109bfc <TIM_Base_SetConfig+0x40>
 8109bec:	687b      	ldr	r3, [r7, #4]
 8109bee:	4a41      	ldr	r2, [pc, #260]	@ (8109cf4 <TIM_Base_SetConfig+0x138>)
 8109bf0:	4293      	cmp	r3, r2
 8109bf2:	d003      	beq.n	8109bfc <TIM_Base_SetConfig+0x40>
 8109bf4:	687b      	ldr	r3, [r7, #4]
 8109bf6:	4a40      	ldr	r2, [pc, #256]	@ (8109cf8 <TIM_Base_SetConfig+0x13c>)
 8109bf8:	4293      	cmp	r3, r2
 8109bfa:	d108      	bne.n	8109c0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8109bfc:	68fb      	ldr	r3, [r7, #12]
 8109bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8109c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8109c04:	683b      	ldr	r3, [r7, #0]
 8109c06:	685b      	ldr	r3, [r3, #4]
 8109c08:	68fa      	ldr	r2, [r7, #12]
 8109c0a:	4313      	orrs	r3, r2
 8109c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8109c0e:	687b      	ldr	r3, [r7, #4]
 8109c10:	4a35      	ldr	r2, [pc, #212]	@ (8109ce8 <TIM_Base_SetConfig+0x12c>)
 8109c12:	4293      	cmp	r3, r2
 8109c14:	d01f      	beq.n	8109c56 <TIM_Base_SetConfig+0x9a>
 8109c16:	687b      	ldr	r3, [r7, #4]
 8109c18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109c1c:	d01b      	beq.n	8109c56 <TIM_Base_SetConfig+0x9a>
 8109c1e:	687b      	ldr	r3, [r7, #4]
 8109c20:	4a32      	ldr	r2, [pc, #200]	@ (8109cec <TIM_Base_SetConfig+0x130>)
 8109c22:	4293      	cmp	r3, r2
 8109c24:	d017      	beq.n	8109c56 <TIM_Base_SetConfig+0x9a>
 8109c26:	687b      	ldr	r3, [r7, #4]
 8109c28:	4a31      	ldr	r2, [pc, #196]	@ (8109cf0 <TIM_Base_SetConfig+0x134>)
 8109c2a:	4293      	cmp	r3, r2
 8109c2c:	d013      	beq.n	8109c56 <TIM_Base_SetConfig+0x9a>
 8109c2e:	687b      	ldr	r3, [r7, #4]
 8109c30:	4a30      	ldr	r2, [pc, #192]	@ (8109cf4 <TIM_Base_SetConfig+0x138>)
 8109c32:	4293      	cmp	r3, r2
 8109c34:	d00f      	beq.n	8109c56 <TIM_Base_SetConfig+0x9a>
 8109c36:	687b      	ldr	r3, [r7, #4]
 8109c38:	4a2f      	ldr	r2, [pc, #188]	@ (8109cf8 <TIM_Base_SetConfig+0x13c>)
 8109c3a:	4293      	cmp	r3, r2
 8109c3c:	d00b      	beq.n	8109c56 <TIM_Base_SetConfig+0x9a>
 8109c3e:	687b      	ldr	r3, [r7, #4]
 8109c40:	4a2e      	ldr	r2, [pc, #184]	@ (8109cfc <TIM_Base_SetConfig+0x140>)
 8109c42:	4293      	cmp	r3, r2
 8109c44:	d007      	beq.n	8109c56 <TIM_Base_SetConfig+0x9a>
 8109c46:	687b      	ldr	r3, [r7, #4]
 8109c48:	4a2d      	ldr	r2, [pc, #180]	@ (8109d00 <TIM_Base_SetConfig+0x144>)
 8109c4a:	4293      	cmp	r3, r2
 8109c4c:	d003      	beq.n	8109c56 <TIM_Base_SetConfig+0x9a>
 8109c4e:	687b      	ldr	r3, [r7, #4]
 8109c50:	4a2c      	ldr	r2, [pc, #176]	@ (8109d04 <TIM_Base_SetConfig+0x148>)
 8109c52:	4293      	cmp	r3, r2
 8109c54:	d108      	bne.n	8109c68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8109c56:	68fb      	ldr	r3, [r7, #12]
 8109c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8109c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8109c5e:	683b      	ldr	r3, [r7, #0]
 8109c60:	68db      	ldr	r3, [r3, #12]
 8109c62:	68fa      	ldr	r2, [r7, #12]
 8109c64:	4313      	orrs	r3, r2
 8109c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8109c68:	68fb      	ldr	r3, [r7, #12]
 8109c6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8109c6e:	683b      	ldr	r3, [r7, #0]
 8109c70:	695b      	ldr	r3, [r3, #20]
 8109c72:	4313      	orrs	r3, r2
 8109c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8109c76:	687b      	ldr	r3, [r7, #4]
 8109c78:	68fa      	ldr	r2, [r7, #12]
 8109c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8109c7c:	683b      	ldr	r3, [r7, #0]
 8109c7e:	689a      	ldr	r2, [r3, #8]
 8109c80:	687b      	ldr	r3, [r7, #4]
 8109c82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8109c84:	683b      	ldr	r3, [r7, #0]
 8109c86:	681a      	ldr	r2, [r3, #0]
 8109c88:	687b      	ldr	r3, [r7, #4]
 8109c8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8109c8c:	687b      	ldr	r3, [r7, #4]
 8109c8e:	4a16      	ldr	r2, [pc, #88]	@ (8109ce8 <TIM_Base_SetConfig+0x12c>)
 8109c90:	4293      	cmp	r3, r2
 8109c92:	d00f      	beq.n	8109cb4 <TIM_Base_SetConfig+0xf8>
 8109c94:	687b      	ldr	r3, [r7, #4]
 8109c96:	4a18      	ldr	r2, [pc, #96]	@ (8109cf8 <TIM_Base_SetConfig+0x13c>)
 8109c98:	4293      	cmp	r3, r2
 8109c9a:	d00b      	beq.n	8109cb4 <TIM_Base_SetConfig+0xf8>
 8109c9c:	687b      	ldr	r3, [r7, #4]
 8109c9e:	4a17      	ldr	r2, [pc, #92]	@ (8109cfc <TIM_Base_SetConfig+0x140>)
 8109ca0:	4293      	cmp	r3, r2
 8109ca2:	d007      	beq.n	8109cb4 <TIM_Base_SetConfig+0xf8>
 8109ca4:	687b      	ldr	r3, [r7, #4]
 8109ca6:	4a16      	ldr	r2, [pc, #88]	@ (8109d00 <TIM_Base_SetConfig+0x144>)
 8109ca8:	4293      	cmp	r3, r2
 8109caa:	d003      	beq.n	8109cb4 <TIM_Base_SetConfig+0xf8>
 8109cac:	687b      	ldr	r3, [r7, #4]
 8109cae:	4a15      	ldr	r2, [pc, #84]	@ (8109d04 <TIM_Base_SetConfig+0x148>)
 8109cb0:	4293      	cmp	r3, r2
 8109cb2:	d103      	bne.n	8109cbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8109cb4:	683b      	ldr	r3, [r7, #0]
 8109cb6:	691a      	ldr	r2, [r3, #16]
 8109cb8:	687b      	ldr	r3, [r7, #4]
 8109cba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8109cbc:	687b      	ldr	r3, [r7, #4]
 8109cbe:	2201      	movs	r2, #1
 8109cc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8109cc2:	687b      	ldr	r3, [r7, #4]
 8109cc4:	691b      	ldr	r3, [r3, #16]
 8109cc6:	f003 0301 	and.w	r3, r3, #1
 8109cca:	2b01      	cmp	r3, #1
 8109ccc:	d105      	bne.n	8109cda <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8109cce:	687b      	ldr	r3, [r7, #4]
 8109cd0:	691b      	ldr	r3, [r3, #16]
 8109cd2:	f023 0201 	bic.w	r2, r3, #1
 8109cd6:	687b      	ldr	r3, [r7, #4]
 8109cd8:	611a      	str	r2, [r3, #16]
  }
}
 8109cda:	bf00      	nop
 8109cdc:	3714      	adds	r7, #20
 8109cde:	46bd      	mov	sp, r7
 8109ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ce4:	4770      	bx	lr
 8109ce6:	bf00      	nop
 8109ce8:	40010000 	.word	0x40010000
 8109cec:	40000400 	.word	0x40000400
 8109cf0:	40000800 	.word	0x40000800
 8109cf4:	40000c00 	.word	0x40000c00
 8109cf8:	40010400 	.word	0x40010400
 8109cfc:	40014000 	.word	0x40014000
 8109d00:	40014400 	.word	0x40014400
 8109d04:	40014800 	.word	0x40014800

08109d08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8109d08:	b480      	push	{r7}
 8109d0a:	b087      	sub	sp, #28
 8109d0c:	af00      	add	r7, sp, #0
 8109d0e:	6078      	str	r0, [r7, #4]
 8109d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109d12:	687b      	ldr	r3, [r7, #4]
 8109d14:	6a1b      	ldr	r3, [r3, #32]
 8109d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8109d18:	687b      	ldr	r3, [r7, #4]
 8109d1a:	6a1b      	ldr	r3, [r3, #32]
 8109d1c:	f023 0201 	bic.w	r2, r3, #1
 8109d20:	687b      	ldr	r3, [r7, #4]
 8109d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109d24:	687b      	ldr	r3, [r7, #4]
 8109d26:	685b      	ldr	r3, [r3, #4]
 8109d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8109d2a:	687b      	ldr	r3, [r7, #4]
 8109d2c:	699b      	ldr	r3, [r3, #24]
 8109d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8109d30:	68fb      	ldr	r3, [r7, #12]
 8109d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8109d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8109d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8109d3c:	68fb      	ldr	r3, [r7, #12]
 8109d3e:	f023 0303 	bic.w	r3, r3, #3
 8109d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8109d44:	683b      	ldr	r3, [r7, #0]
 8109d46:	681b      	ldr	r3, [r3, #0]
 8109d48:	68fa      	ldr	r2, [r7, #12]
 8109d4a:	4313      	orrs	r3, r2
 8109d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8109d4e:	697b      	ldr	r3, [r7, #20]
 8109d50:	f023 0302 	bic.w	r3, r3, #2
 8109d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8109d56:	683b      	ldr	r3, [r7, #0]
 8109d58:	689b      	ldr	r3, [r3, #8]
 8109d5a:	697a      	ldr	r2, [r7, #20]
 8109d5c:	4313      	orrs	r3, r2
 8109d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8109d60:	687b      	ldr	r3, [r7, #4]
 8109d62:	4a2c      	ldr	r2, [pc, #176]	@ (8109e14 <TIM_OC1_SetConfig+0x10c>)
 8109d64:	4293      	cmp	r3, r2
 8109d66:	d00f      	beq.n	8109d88 <TIM_OC1_SetConfig+0x80>
 8109d68:	687b      	ldr	r3, [r7, #4]
 8109d6a:	4a2b      	ldr	r2, [pc, #172]	@ (8109e18 <TIM_OC1_SetConfig+0x110>)
 8109d6c:	4293      	cmp	r3, r2
 8109d6e:	d00b      	beq.n	8109d88 <TIM_OC1_SetConfig+0x80>
 8109d70:	687b      	ldr	r3, [r7, #4]
 8109d72:	4a2a      	ldr	r2, [pc, #168]	@ (8109e1c <TIM_OC1_SetConfig+0x114>)
 8109d74:	4293      	cmp	r3, r2
 8109d76:	d007      	beq.n	8109d88 <TIM_OC1_SetConfig+0x80>
 8109d78:	687b      	ldr	r3, [r7, #4]
 8109d7a:	4a29      	ldr	r2, [pc, #164]	@ (8109e20 <TIM_OC1_SetConfig+0x118>)
 8109d7c:	4293      	cmp	r3, r2
 8109d7e:	d003      	beq.n	8109d88 <TIM_OC1_SetConfig+0x80>
 8109d80:	687b      	ldr	r3, [r7, #4]
 8109d82:	4a28      	ldr	r2, [pc, #160]	@ (8109e24 <TIM_OC1_SetConfig+0x11c>)
 8109d84:	4293      	cmp	r3, r2
 8109d86:	d10c      	bne.n	8109da2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8109d88:	697b      	ldr	r3, [r7, #20]
 8109d8a:	f023 0308 	bic.w	r3, r3, #8
 8109d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8109d90:	683b      	ldr	r3, [r7, #0]
 8109d92:	68db      	ldr	r3, [r3, #12]
 8109d94:	697a      	ldr	r2, [r7, #20]
 8109d96:	4313      	orrs	r3, r2
 8109d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8109d9a:	697b      	ldr	r3, [r7, #20]
 8109d9c:	f023 0304 	bic.w	r3, r3, #4
 8109da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8109da2:	687b      	ldr	r3, [r7, #4]
 8109da4:	4a1b      	ldr	r2, [pc, #108]	@ (8109e14 <TIM_OC1_SetConfig+0x10c>)
 8109da6:	4293      	cmp	r3, r2
 8109da8:	d00f      	beq.n	8109dca <TIM_OC1_SetConfig+0xc2>
 8109daa:	687b      	ldr	r3, [r7, #4]
 8109dac:	4a1a      	ldr	r2, [pc, #104]	@ (8109e18 <TIM_OC1_SetConfig+0x110>)
 8109dae:	4293      	cmp	r3, r2
 8109db0:	d00b      	beq.n	8109dca <TIM_OC1_SetConfig+0xc2>
 8109db2:	687b      	ldr	r3, [r7, #4]
 8109db4:	4a19      	ldr	r2, [pc, #100]	@ (8109e1c <TIM_OC1_SetConfig+0x114>)
 8109db6:	4293      	cmp	r3, r2
 8109db8:	d007      	beq.n	8109dca <TIM_OC1_SetConfig+0xc2>
 8109dba:	687b      	ldr	r3, [r7, #4]
 8109dbc:	4a18      	ldr	r2, [pc, #96]	@ (8109e20 <TIM_OC1_SetConfig+0x118>)
 8109dbe:	4293      	cmp	r3, r2
 8109dc0:	d003      	beq.n	8109dca <TIM_OC1_SetConfig+0xc2>
 8109dc2:	687b      	ldr	r3, [r7, #4]
 8109dc4:	4a17      	ldr	r2, [pc, #92]	@ (8109e24 <TIM_OC1_SetConfig+0x11c>)
 8109dc6:	4293      	cmp	r3, r2
 8109dc8:	d111      	bne.n	8109dee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8109dca:	693b      	ldr	r3, [r7, #16]
 8109dcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8109dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8109dd2:	693b      	ldr	r3, [r7, #16]
 8109dd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8109dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8109dda:	683b      	ldr	r3, [r7, #0]
 8109ddc:	695b      	ldr	r3, [r3, #20]
 8109dde:	693a      	ldr	r2, [r7, #16]
 8109de0:	4313      	orrs	r3, r2
 8109de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8109de4:	683b      	ldr	r3, [r7, #0]
 8109de6:	699b      	ldr	r3, [r3, #24]
 8109de8:	693a      	ldr	r2, [r7, #16]
 8109dea:	4313      	orrs	r3, r2
 8109dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8109dee:	687b      	ldr	r3, [r7, #4]
 8109df0:	693a      	ldr	r2, [r7, #16]
 8109df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8109df4:	687b      	ldr	r3, [r7, #4]
 8109df6:	68fa      	ldr	r2, [r7, #12]
 8109df8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8109dfa:	683b      	ldr	r3, [r7, #0]
 8109dfc:	685a      	ldr	r2, [r3, #4]
 8109dfe:	687b      	ldr	r3, [r7, #4]
 8109e00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8109e02:	687b      	ldr	r3, [r7, #4]
 8109e04:	697a      	ldr	r2, [r7, #20]
 8109e06:	621a      	str	r2, [r3, #32]
}
 8109e08:	bf00      	nop
 8109e0a:	371c      	adds	r7, #28
 8109e0c:	46bd      	mov	sp, r7
 8109e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e12:	4770      	bx	lr
 8109e14:	40010000 	.word	0x40010000
 8109e18:	40010400 	.word	0x40010400
 8109e1c:	40014000 	.word	0x40014000
 8109e20:	40014400 	.word	0x40014400
 8109e24:	40014800 	.word	0x40014800

08109e28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8109e28:	b480      	push	{r7}
 8109e2a:	b087      	sub	sp, #28
 8109e2c:	af00      	add	r7, sp, #0
 8109e2e:	6078      	str	r0, [r7, #4]
 8109e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109e32:	687b      	ldr	r3, [r7, #4]
 8109e34:	6a1b      	ldr	r3, [r3, #32]
 8109e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8109e38:	687b      	ldr	r3, [r7, #4]
 8109e3a:	6a1b      	ldr	r3, [r3, #32]
 8109e3c:	f023 0210 	bic.w	r2, r3, #16
 8109e40:	687b      	ldr	r3, [r7, #4]
 8109e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109e44:	687b      	ldr	r3, [r7, #4]
 8109e46:	685b      	ldr	r3, [r3, #4]
 8109e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8109e4a:	687b      	ldr	r3, [r7, #4]
 8109e4c:	699b      	ldr	r3, [r3, #24]
 8109e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8109e50:	68fb      	ldr	r3, [r7, #12]
 8109e52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8109e56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8109e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8109e5c:	68fb      	ldr	r3, [r7, #12]
 8109e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8109e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8109e64:	683b      	ldr	r3, [r7, #0]
 8109e66:	681b      	ldr	r3, [r3, #0]
 8109e68:	021b      	lsls	r3, r3, #8
 8109e6a:	68fa      	ldr	r2, [r7, #12]
 8109e6c:	4313      	orrs	r3, r2
 8109e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8109e70:	697b      	ldr	r3, [r7, #20]
 8109e72:	f023 0320 	bic.w	r3, r3, #32
 8109e76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8109e78:	683b      	ldr	r3, [r7, #0]
 8109e7a:	689b      	ldr	r3, [r3, #8]
 8109e7c:	011b      	lsls	r3, r3, #4
 8109e7e:	697a      	ldr	r2, [r7, #20]
 8109e80:	4313      	orrs	r3, r2
 8109e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8109e84:	687b      	ldr	r3, [r7, #4]
 8109e86:	4a28      	ldr	r2, [pc, #160]	@ (8109f28 <TIM_OC2_SetConfig+0x100>)
 8109e88:	4293      	cmp	r3, r2
 8109e8a:	d003      	beq.n	8109e94 <TIM_OC2_SetConfig+0x6c>
 8109e8c:	687b      	ldr	r3, [r7, #4]
 8109e8e:	4a27      	ldr	r2, [pc, #156]	@ (8109f2c <TIM_OC2_SetConfig+0x104>)
 8109e90:	4293      	cmp	r3, r2
 8109e92:	d10d      	bne.n	8109eb0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8109e94:	697b      	ldr	r3, [r7, #20]
 8109e96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8109e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8109e9c:	683b      	ldr	r3, [r7, #0]
 8109e9e:	68db      	ldr	r3, [r3, #12]
 8109ea0:	011b      	lsls	r3, r3, #4
 8109ea2:	697a      	ldr	r2, [r7, #20]
 8109ea4:	4313      	orrs	r3, r2
 8109ea6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8109ea8:	697b      	ldr	r3, [r7, #20]
 8109eaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8109eae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8109eb0:	687b      	ldr	r3, [r7, #4]
 8109eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8109f28 <TIM_OC2_SetConfig+0x100>)
 8109eb4:	4293      	cmp	r3, r2
 8109eb6:	d00f      	beq.n	8109ed8 <TIM_OC2_SetConfig+0xb0>
 8109eb8:	687b      	ldr	r3, [r7, #4]
 8109eba:	4a1c      	ldr	r2, [pc, #112]	@ (8109f2c <TIM_OC2_SetConfig+0x104>)
 8109ebc:	4293      	cmp	r3, r2
 8109ebe:	d00b      	beq.n	8109ed8 <TIM_OC2_SetConfig+0xb0>
 8109ec0:	687b      	ldr	r3, [r7, #4]
 8109ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8109f30 <TIM_OC2_SetConfig+0x108>)
 8109ec4:	4293      	cmp	r3, r2
 8109ec6:	d007      	beq.n	8109ed8 <TIM_OC2_SetConfig+0xb0>
 8109ec8:	687b      	ldr	r3, [r7, #4]
 8109eca:	4a1a      	ldr	r2, [pc, #104]	@ (8109f34 <TIM_OC2_SetConfig+0x10c>)
 8109ecc:	4293      	cmp	r3, r2
 8109ece:	d003      	beq.n	8109ed8 <TIM_OC2_SetConfig+0xb0>
 8109ed0:	687b      	ldr	r3, [r7, #4]
 8109ed2:	4a19      	ldr	r2, [pc, #100]	@ (8109f38 <TIM_OC2_SetConfig+0x110>)
 8109ed4:	4293      	cmp	r3, r2
 8109ed6:	d113      	bne.n	8109f00 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8109ed8:	693b      	ldr	r3, [r7, #16]
 8109eda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8109ede:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8109ee0:	693b      	ldr	r3, [r7, #16]
 8109ee2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8109ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8109ee8:	683b      	ldr	r3, [r7, #0]
 8109eea:	695b      	ldr	r3, [r3, #20]
 8109eec:	009b      	lsls	r3, r3, #2
 8109eee:	693a      	ldr	r2, [r7, #16]
 8109ef0:	4313      	orrs	r3, r2
 8109ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8109ef4:	683b      	ldr	r3, [r7, #0]
 8109ef6:	699b      	ldr	r3, [r3, #24]
 8109ef8:	009b      	lsls	r3, r3, #2
 8109efa:	693a      	ldr	r2, [r7, #16]
 8109efc:	4313      	orrs	r3, r2
 8109efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8109f00:	687b      	ldr	r3, [r7, #4]
 8109f02:	693a      	ldr	r2, [r7, #16]
 8109f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8109f06:	687b      	ldr	r3, [r7, #4]
 8109f08:	68fa      	ldr	r2, [r7, #12]
 8109f0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8109f0c:	683b      	ldr	r3, [r7, #0]
 8109f0e:	685a      	ldr	r2, [r3, #4]
 8109f10:	687b      	ldr	r3, [r7, #4]
 8109f12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8109f14:	687b      	ldr	r3, [r7, #4]
 8109f16:	697a      	ldr	r2, [r7, #20]
 8109f18:	621a      	str	r2, [r3, #32]
}
 8109f1a:	bf00      	nop
 8109f1c:	371c      	adds	r7, #28
 8109f1e:	46bd      	mov	sp, r7
 8109f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f24:	4770      	bx	lr
 8109f26:	bf00      	nop
 8109f28:	40010000 	.word	0x40010000
 8109f2c:	40010400 	.word	0x40010400
 8109f30:	40014000 	.word	0x40014000
 8109f34:	40014400 	.word	0x40014400
 8109f38:	40014800 	.word	0x40014800

08109f3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8109f3c:	b480      	push	{r7}
 8109f3e:	b087      	sub	sp, #28
 8109f40:	af00      	add	r7, sp, #0
 8109f42:	6078      	str	r0, [r7, #4]
 8109f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109f46:	687b      	ldr	r3, [r7, #4]
 8109f48:	6a1b      	ldr	r3, [r3, #32]
 8109f4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8109f4c:	687b      	ldr	r3, [r7, #4]
 8109f4e:	6a1b      	ldr	r3, [r3, #32]
 8109f50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8109f54:	687b      	ldr	r3, [r7, #4]
 8109f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109f58:	687b      	ldr	r3, [r7, #4]
 8109f5a:	685b      	ldr	r3, [r3, #4]
 8109f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8109f5e:	687b      	ldr	r3, [r7, #4]
 8109f60:	69db      	ldr	r3, [r3, #28]
 8109f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8109f64:	68fb      	ldr	r3, [r7, #12]
 8109f66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8109f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8109f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8109f70:	68fb      	ldr	r3, [r7, #12]
 8109f72:	f023 0303 	bic.w	r3, r3, #3
 8109f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8109f78:	683b      	ldr	r3, [r7, #0]
 8109f7a:	681b      	ldr	r3, [r3, #0]
 8109f7c:	68fa      	ldr	r2, [r7, #12]
 8109f7e:	4313      	orrs	r3, r2
 8109f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8109f82:	697b      	ldr	r3, [r7, #20]
 8109f84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8109f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8109f8a:	683b      	ldr	r3, [r7, #0]
 8109f8c:	689b      	ldr	r3, [r3, #8]
 8109f8e:	021b      	lsls	r3, r3, #8
 8109f90:	697a      	ldr	r2, [r7, #20]
 8109f92:	4313      	orrs	r3, r2
 8109f94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8109f96:	687b      	ldr	r3, [r7, #4]
 8109f98:	4a27      	ldr	r2, [pc, #156]	@ (810a038 <TIM_OC3_SetConfig+0xfc>)
 8109f9a:	4293      	cmp	r3, r2
 8109f9c:	d003      	beq.n	8109fa6 <TIM_OC3_SetConfig+0x6a>
 8109f9e:	687b      	ldr	r3, [r7, #4]
 8109fa0:	4a26      	ldr	r2, [pc, #152]	@ (810a03c <TIM_OC3_SetConfig+0x100>)
 8109fa2:	4293      	cmp	r3, r2
 8109fa4:	d10d      	bne.n	8109fc2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8109fa6:	697b      	ldr	r3, [r7, #20]
 8109fa8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8109fac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8109fae:	683b      	ldr	r3, [r7, #0]
 8109fb0:	68db      	ldr	r3, [r3, #12]
 8109fb2:	021b      	lsls	r3, r3, #8
 8109fb4:	697a      	ldr	r2, [r7, #20]
 8109fb6:	4313      	orrs	r3, r2
 8109fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8109fba:	697b      	ldr	r3, [r7, #20]
 8109fbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8109fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8109fc2:	687b      	ldr	r3, [r7, #4]
 8109fc4:	4a1c      	ldr	r2, [pc, #112]	@ (810a038 <TIM_OC3_SetConfig+0xfc>)
 8109fc6:	4293      	cmp	r3, r2
 8109fc8:	d00f      	beq.n	8109fea <TIM_OC3_SetConfig+0xae>
 8109fca:	687b      	ldr	r3, [r7, #4]
 8109fcc:	4a1b      	ldr	r2, [pc, #108]	@ (810a03c <TIM_OC3_SetConfig+0x100>)
 8109fce:	4293      	cmp	r3, r2
 8109fd0:	d00b      	beq.n	8109fea <TIM_OC3_SetConfig+0xae>
 8109fd2:	687b      	ldr	r3, [r7, #4]
 8109fd4:	4a1a      	ldr	r2, [pc, #104]	@ (810a040 <TIM_OC3_SetConfig+0x104>)
 8109fd6:	4293      	cmp	r3, r2
 8109fd8:	d007      	beq.n	8109fea <TIM_OC3_SetConfig+0xae>
 8109fda:	687b      	ldr	r3, [r7, #4]
 8109fdc:	4a19      	ldr	r2, [pc, #100]	@ (810a044 <TIM_OC3_SetConfig+0x108>)
 8109fde:	4293      	cmp	r3, r2
 8109fe0:	d003      	beq.n	8109fea <TIM_OC3_SetConfig+0xae>
 8109fe2:	687b      	ldr	r3, [r7, #4]
 8109fe4:	4a18      	ldr	r2, [pc, #96]	@ (810a048 <TIM_OC3_SetConfig+0x10c>)
 8109fe6:	4293      	cmp	r3, r2
 8109fe8:	d113      	bne.n	810a012 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8109fea:	693b      	ldr	r3, [r7, #16]
 8109fec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8109ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8109ff2:	693b      	ldr	r3, [r7, #16]
 8109ff4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8109ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8109ffa:	683b      	ldr	r3, [r7, #0]
 8109ffc:	695b      	ldr	r3, [r3, #20]
 8109ffe:	011b      	lsls	r3, r3, #4
 810a000:	693a      	ldr	r2, [r7, #16]
 810a002:	4313      	orrs	r3, r2
 810a004:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810a006:	683b      	ldr	r3, [r7, #0]
 810a008:	699b      	ldr	r3, [r3, #24]
 810a00a:	011b      	lsls	r3, r3, #4
 810a00c:	693a      	ldr	r2, [r7, #16]
 810a00e:	4313      	orrs	r3, r2
 810a010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a012:	687b      	ldr	r3, [r7, #4]
 810a014:	693a      	ldr	r2, [r7, #16]
 810a016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810a018:	687b      	ldr	r3, [r7, #4]
 810a01a:	68fa      	ldr	r2, [r7, #12]
 810a01c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810a01e:	683b      	ldr	r3, [r7, #0]
 810a020:	685a      	ldr	r2, [r3, #4]
 810a022:	687b      	ldr	r3, [r7, #4]
 810a024:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a026:	687b      	ldr	r3, [r7, #4]
 810a028:	697a      	ldr	r2, [r7, #20]
 810a02a:	621a      	str	r2, [r3, #32]
}
 810a02c:	bf00      	nop
 810a02e:	371c      	adds	r7, #28
 810a030:	46bd      	mov	sp, r7
 810a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a036:	4770      	bx	lr
 810a038:	40010000 	.word	0x40010000
 810a03c:	40010400 	.word	0x40010400
 810a040:	40014000 	.word	0x40014000
 810a044:	40014400 	.word	0x40014400
 810a048:	40014800 	.word	0x40014800

0810a04c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810a04c:	b480      	push	{r7}
 810a04e:	b087      	sub	sp, #28
 810a050:	af00      	add	r7, sp, #0
 810a052:	6078      	str	r0, [r7, #4]
 810a054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a056:	687b      	ldr	r3, [r7, #4]
 810a058:	6a1b      	ldr	r3, [r3, #32]
 810a05a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810a05c:	687b      	ldr	r3, [r7, #4]
 810a05e:	6a1b      	ldr	r3, [r3, #32]
 810a060:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810a064:	687b      	ldr	r3, [r7, #4]
 810a066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a068:	687b      	ldr	r3, [r7, #4]
 810a06a:	685b      	ldr	r3, [r3, #4]
 810a06c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810a06e:	687b      	ldr	r3, [r7, #4]
 810a070:	69db      	ldr	r3, [r3, #28]
 810a072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810a074:	68fb      	ldr	r3, [r7, #12]
 810a076:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810a07a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810a07e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810a080:	68fb      	ldr	r3, [r7, #12]
 810a082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810a086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810a088:	683b      	ldr	r3, [r7, #0]
 810a08a:	681b      	ldr	r3, [r3, #0]
 810a08c:	021b      	lsls	r3, r3, #8
 810a08e:	68fa      	ldr	r2, [r7, #12]
 810a090:	4313      	orrs	r3, r2
 810a092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810a094:	693b      	ldr	r3, [r7, #16]
 810a096:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810a09a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810a09c:	683b      	ldr	r3, [r7, #0]
 810a09e:	689b      	ldr	r3, [r3, #8]
 810a0a0:	031b      	lsls	r3, r3, #12
 810a0a2:	693a      	ldr	r2, [r7, #16]
 810a0a4:	4313      	orrs	r3, r2
 810a0a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a0a8:	687b      	ldr	r3, [r7, #4]
 810a0aa:	4a18      	ldr	r2, [pc, #96]	@ (810a10c <TIM_OC4_SetConfig+0xc0>)
 810a0ac:	4293      	cmp	r3, r2
 810a0ae:	d00f      	beq.n	810a0d0 <TIM_OC4_SetConfig+0x84>
 810a0b0:	687b      	ldr	r3, [r7, #4]
 810a0b2:	4a17      	ldr	r2, [pc, #92]	@ (810a110 <TIM_OC4_SetConfig+0xc4>)
 810a0b4:	4293      	cmp	r3, r2
 810a0b6:	d00b      	beq.n	810a0d0 <TIM_OC4_SetConfig+0x84>
 810a0b8:	687b      	ldr	r3, [r7, #4]
 810a0ba:	4a16      	ldr	r2, [pc, #88]	@ (810a114 <TIM_OC4_SetConfig+0xc8>)
 810a0bc:	4293      	cmp	r3, r2
 810a0be:	d007      	beq.n	810a0d0 <TIM_OC4_SetConfig+0x84>
 810a0c0:	687b      	ldr	r3, [r7, #4]
 810a0c2:	4a15      	ldr	r2, [pc, #84]	@ (810a118 <TIM_OC4_SetConfig+0xcc>)
 810a0c4:	4293      	cmp	r3, r2
 810a0c6:	d003      	beq.n	810a0d0 <TIM_OC4_SetConfig+0x84>
 810a0c8:	687b      	ldr	r3, [r7, #4]
 810a0ca:	4a14      	ldr	r2, [pc, #80]	@ (810a11c <TIM_OC4_SetConfig+0xd0>)
 810a0cc:	4293      	cmp	r3, r2
 810a0ce:	d109      	bne.n	810a0e4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810a0d0:	697b      	ldr	r3, [r7, #20]
 810a0d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 810a0d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810a0d8:	683b      	ldr	r3, [r7, #0]
 810a0da:	695b      	ldr	r3, [r3, #20]
 810a0dc:	019b      	lsls	r3, r3, #6
 810a0de:	697a      	ldr	r2, [r7, #20]
 810a0e0:	4313      	orrs	r3, r2
 810a0e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a0e4:	687b      	ldr	r3, [r7, #4]
 810a0e6:	697a      	ldr	r2, [r7, #20]
 810a0e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810a0ea:	687b      	ldr	r3, [r7, #4]
 810a0ec:	68fa      	ldr	r2, [r7, #12]
 810a0ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810a0f0:	683b      	ldr	r3, [r7, #0]
 810a0f2:	685a      	ldr	r2, [r3, #4]
 810a0f4:	687b      	ldr	r3, [r7, #4]
 810a0f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a0f8:	687b      	ldr	r3, [r7, #4]
 810a0fa:	693a      	ldr	r2, [r7, #16]
 810a0fc:	621a      	str	r2, [r3, #32]
}
 810a0fe:	bf00      	nop
 810a100:	371c      	adds	r7, #28
 810a102:	46bd      	mov	sp, r7
 810a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a108:	4770      	bx	lr
 810a10a:	bf00      	nop
 810a10c:	40010000 	.word	0x40010000
 810a110:	40010400 	.word	0x40010400
 810a114:	40014000 	.word	0x40014000
 810a118:	40014400 	.word	0x40014400
 810a11c:	40014800 	.word	0x40014800

0810a120 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810a120:	b480      	push	{r7}
 810a122:	b087      	sub	sp, #28
 810a124:	af00      	add	r7, sp, #0
 810a126:	6078      	str	r0, [r7, #4]
 810a128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a12a:	687b      	ldr	r3, [r7, #4]
 810a12c:	6a1b      	ldr	r3, [r3, #32]
 810a12e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810a130:	687b      	ldr	r3, [r7, #4]
 810a132:	6a1b      	ldr	r3, [r3, #32]
 810a134:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810a138:	687b      	ldr	r3, [r7, #4]
 810a13a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a13c:	687b      	ldr	r3, [r7, #4]
 810a13e:	685b      	ldr	r3, [r3, #4]
 810a140:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810a142:	687b      	ldr	r3, [r7, #4]
 810a144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810a148:	68fb      	ldr	r3, [r7, #12]
 810a14a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810a14e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810a152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810a154:	683b      	ldr	r3, [r7, #0]
 810a156:	681b      	ldr	r3, [r3, #0]
 810a158:	68fa      	ldr	r2, [r7, #12]
 810a15a:	4313      	orrs	r3, r2
 810a15c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810a15e:	693b      	ldr	r3, [r7, #16]
 810a160:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 810a164:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810a166:	683b      	ldr	r3, [r7, #0]
 810a168:	689b      	ldr	r3, [r3, #8]
 810a16a:	041b      	lsls	r3, r3, #16
 810a16c:	693a      	ldr	r2, [r7, #16]
 810a16e:	4313      	orrs	r3, r2
 810a170:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a172:	687b      	ldr	r3, [r7, #4]
 810a174:	4a17      	ldr	r2, [pc, #92]	@ (810a1d4 <TIM_OC5_SetConfig+0xb4>)
 810a176:	4293      	cmp	r3, r2
 810a178:	d00f      	beq.n	810a19a <TIM_OC5_SetConfig+0x7a>
 810a17a:	687b      	ldr	r3, [r7, #4]
 810a17c:	4a16      	ldr	r2, [pc, #88]	@ (810a1d8 <TIM_OC5_SetConfig+0xb8>)
 810a17e:	4293      	cmp	r3, r2
 810a180:	d00b      	beq.n	810a19a <TIM_OC5_SetConfig+0x7a>
 810a182:	687b      	ldr	r3, [r7, #4]
 810a184:	4a15      	ldr	r2, [pc, #84]	@ (810a1dc <TIM_OC5_SetConfig+0xbc>)
 810a186:	4293      	cmp	r3, r2
 810a188:	d007      	beq.n	810a19a <TIM_OC5_SetConfig+0x7a>
 810a18a:	687b      	ldr	r3, [r7, #4]
 810a18c:	4a14      	ldr	r2, [pc, #80]	@ (810a1e0 <TIM_OC5_SetConfig+0xc0>)
 810a18e:	4293      	cmp	r3, r2
 810a190:	d003      	beq.n	810a19a <TIM_OC5_SetConfig+0x7a>
 810a192:	687b      	ldr	r3, [r7, #4]
 810a194:	4a13      	ldr	r2, [pc, #76]	@ (810a1e4 <TIM_OC5_SetConfig+0xc4>)
 810a196:	4293      	cmp	r3, r2
 810a198:	d109      	bne.n	810a1ae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810a19a:	697b      	ldr	r3, [r7, #20]
 810a19c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810a1a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810a1a2:	683b      	ldr	r3, [r7, #0]
 810a1a4:	695b      	ldr	r3, [r3, #20]
 810a1a6:	021b      	lsls	r3, r3, #8
 810a1a8:	697a      	ldr	r2, [r7, #20]
 810a1aa:	4313      	orrs	r3, r2
 810a1ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a1ae:	687b      	ldr	r3, [r7, #4]
 810a1b0:	697a      	ldr	r2, [r7, #20]
 810a1b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810a1b4:	687b      	ldr	r3, [r7, #4]
 810a1b6:	68fa      	ldr	r2, [r7, #12]
 810a1b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810a1ba:	683b      	ldr	r3, [r7, #0]
 810a1bc:	685a      	ldr	r2, [r3, #4]
 810a1be:	687b      	ldr	r3, [r7, #4]
 810a1c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a1c2:	687b      	ldr	r3, [r7, #4]
 810a1c4:	693a      	ldr	r2, [r7, #16]
 810a1c6:	621a      	str	r2, [r3, #32]
}
 810a1c8:	bf00      	nop
 810a1ca:	371c      	adds	r7, #28
 810a1cc:	46bd      	mov	sp, r7
 810a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a1d2:	4770      	bx	lr
 810a1d4:	40010000 	.word	0x40010000
 810a1d8:	40010400 	.word	0x40010400
 810a1dc:	40014000 	.word	0x40014000
 810a1e0:	40014400 	.word	0x40014400
 810a1e4:	40014800 	.word	0x40014800

0810a1e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810a1e8:	b480      	push	{r7}
 810a1ea:	b087      	sub	sp, #28
 810a1ec:	af00      	add	r7, sp, #0
 810a1ee:	6078      	str	r0, [r7, #4]
 810a1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a1f2:	687b      	ldr	r3, [r7, #4]
 810a1f4:	6a1b      	ldr	r3, [r3, #32]
 810a1f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810a1f8:	687b      	ldr	r3, [r7, #4]
 810a1fa:	6a1b      	ldr	r3, [r3, #32]
 810a1fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 810a200:	687b      	ldr	r3, [r7, #4]
 810a202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a204:	687b      	ldr	r3, [r7, #4]
 810a206:	685b      	ldr	r3, [r3, #4]
 810a208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810a20a:	687b      	ldr	r3, [r7, #4]
 810a20c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810a210:	68fb      	ldr	r3, [r7, #12]
 810a212:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810a216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810a21a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810a21c:	683b      	ldr	r3, [r7, #0]
 810a21e:	681b      	ldr	r3, [r3, #0]
 810a220:	021b      	lsls	r3, r3, #8
 810a222:	68fa      	ldr	r2, [r7, #12]
 810a224:	4313      	orrs	r3, r2
 810a226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810a228:	693b      	ldr	r3, [r7, #16]
 810a22a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810a22e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810a230:	683b      	ldr	r3, [r7, #0]
 810a232:	689b      	ldr	r3, [r3, #8]
 810a234:	051b      	lsls	r3, r3, #20
 810a236:	693a      	ldr	r2, [r7, #16]
 810a238:	4313      	orrs	r3, r2
 810a23a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a23c:	687b      	ldr	r3, [r7, #4]
 810a23e:	4a18      	ldr	r2, [pc, #96]	@ (810a2a0 <TIM_OC6_SetConfig+0xb8>)
 810a240:	4293      	cmp	r3, r2
 810a242:	d00f      	beq.n	810a264 <TIM_OC6_SetConfig+0x7c>
 810a244:	687b      	ldr	r3, [r7, #4]
 810a246:	4a17      	ldr	r2, [pc, #92]	@ (810a2a4 <TIM_OC6_SetConfig+0xbc>)
 810a248:	4293      	cmp	r3, r2
 810a24a:	d00b      	beq.n	810a264 <TIM_OC6_SetConfig+0x7c>
 810a24c:	687b      	ldr	r3, [r7, #4]
 810a24e:	4a16      	ldr	r2, [pc, #88]	@ (810a2a8 <TIM_OC6_SetConfig+0xc0>)
 810a250:	4293      	cmp	r3, r2
 810a252:	d007      	beq.n	810a264 <TIM_OC6_SetConfig+0x7c>
 810a254:	687b      	ldr	r3, [r7, #4]
 810a256:	4a15      	ldr	r2, [pc, #84]	@ (810a2ac <TIM_OC6_SetConfig+0xc4>)
 810a258:	4293      	cmp	r3, r2
 810a25a:	d003      	beq.n	810a264 <TIM_OC6_SetConfig+0x7c>
 810a25c:	687b      	ldr	r3, [r7, #4]
 810a25e:	4a14      	ldr	r2, [pc, #80]	@ (810a2b0 <TIM_OC6_SetConfig+0xc8>)
 810a260:	4293      	cmp	r3, r2
 810a262:	d109      	bne.n	810a278 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810a264:	697b      	ldr	r3, [r7, #20]
 810a266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 810a26a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810a26c:	683b      	ldr	r3, [r7, #0]
 810a26e:	695b      	ldr	r3, [r3, #20]
 810a270:	029b      	lsls	r3, r3, #10
 810a272:	697a      	ldr	r2, [r7, #20]
 810a274:	4313      	orrs	r3, r2
 810a276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a278:	687b      	ldr	r3, [r7, #4]
 810a27a:	697a      	ldr	r2, [r7, #20]
 810a27c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810a27e:	687b      	ldr	r3, [r7, #4]
 810a280:	68fa      	ldr	r2, [r7, #12]
 810a282:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810a284:	683b      	ldr	r3, [r7, #0]
 810a286:	685a      	ldr	r2, [r3, #4]
 810a288:	687b      	ldr	r3, [r7, #4]
 810a28a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a28c:	687b      	ldr	r3, [r7, #4]
 810a28e:	693a      	ldr	r2, [r7, #16]
 810a290:	621a      	str	r2, [r3, #32]
}
 810a292:	bf00      	nop
 810a294:	371c      	adds	r7, #28
 810a296:	46bd      	mov	sp, r7
 810a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a29c:	4770      	bx	lr
 810a29e:	bf00      	nop
 810a2a0:	40010000 	.word	0x40010000
 810a2a4:	40010400 	.word	0x40010400
 810a2a8:	40014000 	.word	0x40014000
 810a2ac:	40014400 	.word	0x40014400
 810a2b0:	40014800 	.word	0x40014800

0810a2b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810a2b4:	b480      	push	{r7}
 810a2b6:	b087      	sub	sp, #28
 810a2b8:	af00      	add	r7, sp, #0
 810a2ba:	60f8      	str	r0, [r7, #12]
 810a2bc:	60b9      	str	r1, [r7, #8]
 810a2be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810a2c0:	68fb      	ldr	r3, [r7, #12]
 810a2c2:	6a1b      	ldr	r3, [r3, #32]
 810a2c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810a2c6:	68fb      	ldr	r3, [r7, #12]
 810a2c8:	6a1b      	ldr	r3, [r3, #32]
 810a2ca:	f023 0201 	bic.w	r2, r3, #1
 810a2ce:	68fb      	ldr	r3, [r7, #12]
 810a2d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810a2d2:	68fb      	ldr	r3, [r7, #12]
 810a2d4:	699b      	ldr	r3, [r3, #24]
 810a2d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810a2d8:	693b      	ldr	r3, [r7, #16]
 810a2da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810a2de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 810a2e0:	687b      	ldr	r3, [r7, #4]
 810a2e2:	011b      	lsls	r3, r3, #4
 810a2e4:	693a      	ldr	r2, [r7, #16]
 810a2e6:	4313      	orrs	r3, r2
 810a2e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810a2ea:	697b      	ldr	r3, [r7, #20]
 810a2ec:	f023 030a 	bic.w	r3, r3, #10
 810a2f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810a2f2:	697a      	ldr	r2, [r7, #20]
 810a2f4:	68bb      	ldr	r3, [r7, #8]
 810a2f6:	4313      	orrs	r3, r2
 810a2f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810a2fa:	68fb      	ldr	r3, [r7, #12]
 810a2fc:	693a      	ldr	r2, [r7, #16]
 810a2fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810a300:	68fb      	ldr	r3, [r7, #12]
 810a302:	697a      	ldr	r2, [r7, #20]
 810a304:	621a      	str	r2, [r3, #32]
}
 810a306:	bf00      	nop
 810a308:	371c      	adds	r7, #28
 810a30a:	46bd      	mov	sp, r7
 810a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a310:	4770      	bx	lr

0810a312 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810a312:	b480      	push	{r7}
 810a314:	b087      	sub	sp, #28
 810a316:	af00      	add	r7, sp, #0
 810a318:	60f8      	str	r0, [r7, #12]
 810a31a:	60b9      	str	r1, [r7, #8]
 810a31c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 810a31e:	68fb      	ldr	r3, [r7, #12]
 810a320:	6a1b      	ldr	r3, [r3, #32]
 810a322:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810a324:	68fb      	ldr	r3, [r7, #12]
 810a326:	6a1b      	ldr	r3, [r3, #32]
 810a328:	f023 0210 	bic.w	r2, r3, #16
 810a32c:	68fb      	ldr	r3, [r7, #12]
 810a32e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810a330:	68fb      	ldr	r3, [r7, #12]
 810a332:	699b      	ldr	r3, [r3, #24]
 810a334:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810a336:	693b      	ldr	r3, [r7, #16]
 810a338:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810a33c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810a33e:	687b      	ldr	r3, [r7, #4]
 810a340:	031b      	lsls	r3, r3, #12
 810a342:	693a      	ldr	r2, [r7, #16]
 810a344:	4313      	orrs	r3, r2
 810a346:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810a348:	697b      	ldr	r3, [r7, #20]
 810a34a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 810a34e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 810a350:	68bb      	ldr	r3, [r7, #8]
 810a352:	011b      	lsls	r3, r3, #4
 810a354:	697a      	ldr	r2, [r7, #20]
 810a356:	4313      	orrs	r3, r2
 810a358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810a35a:	68fb      	ldr	r3, [r7, #12]
 810a35c:	693a      	ldr	r2, [r7, #16]
 810a35e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810a360:	68fb      	ldr	r3, [r7, #12]
 810a362:	697a      	ldr	r2, [r7, #20]
 810a364:	621a      	str	r2, [r3, #32]
}
 810a366:	bf00      	nop
 810a368:	371c      	adds	r7, #28
 810a36a:	46bd      	mov	sp, r7
 810a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a370:	4770      	bx	lr

0810a372 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810a372:	b480      	push	{r7}
 810a374:	b085      	sub	sp, #20
 810a376:	af00      	add	r7, sp, #0
 810a378:	6078      	str	r0, [r7, #4]
 810a37a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 810a37c:	687b      	ldr	r3, [r7, #4]
 810a37e:	689b      	ldr	r3, [r3, #8]
 810a380:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810a382:	68fb      	ldr	r3, [r7, #12]
 810a384:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 810a388:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810a38c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810a38e:	683a      	ldr	r2, [r7, #0]
 810a390:	68fb      	ldr	r3, [r7, #12]
 810a392:	4313      	orrs	r3, r2
 810a394:	f043 0307 	orr.w	r3, r3, #7
 810a398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810a39a:	687b      	ldr	r3, [r7, #4]
 810a39c:	68fa      	ldr	r2, [r7, #12]
 810a39e:	609a      	str	r2, [r3, #8]
}
 810a3a0:	bf00      	nop
 810a3a2:	3714      	adds	r7, #20
 810a3a4:	46bd      	mov	sp, r7
 810a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a3aa:	4770      	bx	lr

0810a3ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 810a3ac:	b480      	push	{r7}
 810a3ae:	b087      	sub	sp, #28
 810a3b0:	af00      	add	r7, sp, #0
 810a3b2:	60f8      	str	r0, [r7, #12]
 810a3b4:	60b9      	str	r1, [r7, #8]
 810a3b6:	607a      	str	r2, [r7, #4]
 810a3b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810a3ba:	68fb      	ldr	r3, [r7, #12]
 810a3bc:	689b      	ldr	r3, [r3, #8]
 810a3be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810a3c0:	697b      	ldr	r3, [r7, #20]
 810a3c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810a3c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810a3c8:	683b      	ldr	r3, [r7, #0]
 810a3ca:	021a      	lsls	r2, r3, #8
 810a3cc:	687b      	ldr	r3, [r7, #4]
 810a3ce:	431a      	orrs	r2, r3
 810a3d0:	68bb      	ldr	r3, [r7, #8]
 810a3d2:	4313      	orrs	r3, r2
 810a3d4:	697a      	ldr	r2, [r7, #20]
 810a3d6:	4313      	orrs	r3, r2
 810a3d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810a3da:	68fb      	ldr	r3, [r7, #12]
 810a3dc:	697a      	ldr	r2, [r7, #20]
 810a3de:	609a      	str	r2, [r3, #8]
}
 810a3e0:	bf00      	nop
 810a3e2:	371c      	adds	r7, #28
 810a3e4:	46bd      	mov	sp, r7
 810a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a3ea:	4770      	bx	lr

0810a3ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 810a3ec:	b480      	push	{r7}
 810a3ee:	b087      	sub	sp, #28
 810a3f0:	af00      	add	r7, sp, #0
 810a3f2:	60f8      	str	r0, [r7, #12]
 810a3f4:	60b9      	str	r1, [r7, #8]
 810a3f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 810a3f8:	68bb      	ldr	r3, [r7, #8]
 810a3fa:	f003 031f 	and.w	r3, r3, #31
 810a3fe:	2201      	movs	r2, #1
 810a400:	fa02 f303 	lsl.w	r3, r2, r3
 810a404:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 810a406:	68fb      	ldr	r3, [r7, #12]
 810a408:	6a1a      	ldr	r2, [r3, #32]
 810a40a:	697b      	ldr	r3, [r7, #20]
 810a40c:	43db      	mvns	r3, r3
 810a40e:	401a      	ands	r2, r3
 810a410:	68fb      	ldr	r3, [r7, #12]
 810a412:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 810a414:	68fb      	ldr	r3, [r7, #12]
 810a416:	6a1a      	ldr	r2, [r3, #32]
 810a418:	68bb      	ldr	r3, [r7, #8]
 810a41a:	f003 031f 	and.w	r3, r3, #31
 810a41e:	6879      	ldr	r1, [r7, #4]
 810a420:	fa01 f303 	lsl.w	r3, r1, r3
 810a424:	431a      	orrs	r2, r3
 810a426:	68fb      	ldr	r3, [r7, #12]
 810a428:	621a      	str	r2, [r3, #32]
}
 810a42a:	bf00      	nop
 810a42c:	371c      	adds	r7, #28
 810a42e:	46bd      	mov	sp, r7
 810a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a434:	4770      	bx	lr
	...

0810a438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810a438:	b480      	push	{r7}
 810a43a:	b085      	sub	sp, #20
 810a43c:	af00      	add	r7, sp, #0
 810a43e:	6078      	str	r0, [r7, #4]
 810a440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810a442:	687b      	ldr	r3, [r7, #4]
 810a444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810a448:	2b01      	cmp	r3, #1
 810a44a:	d101      	bne.n	810a450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810a44c:	2302      	movs	r3, #2
 810a44e:	e06d      	b.n	810a52c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810a450:	687b      	ldr	r3, [r7, #4]
 810a452:	2201      	movs	r2, #1
 810a454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810a458:	687b      	ldr	r3, [r7, #4]
 810a45a:	2202      	movs	r2, #2
 810a45c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810a460:	687b      	ldr	r3, [r7, #4]
 810a462:	681b      	ldr	r3, [r3, #0]
 810a464:	685b      	ldr	r3, [r3, #4]
 810a466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810a468:	687b      	ldr	r3, [r7, #4]
 810a46a:	681b      	ldr	r3, [r3, #0]
 810a46c:	689b      	ldr	r3, [r3, #8]
 810a46e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810a470:	687b      	ldr	r3, [r7, #4]
 810a472:	681b      	ldr	r3, [r3, #0]
 810a474:	4a30      	ldr	r2, [pc, #192]	@ (810a538 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810a476:	4293      	cmp	r3, r2
 810a478:	d004      	beq.n	810a484 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810a47a:	687b      	ldr	r3, [r7, #4]
 810a47c:	681b      	ldr	r3, [r3, #0]
 810a47e:	4a2f      	ldr	r2, [pc, #188]	@ (810a53c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810a480:	4293      	cmp	r3, r2
 810a482:	d108      	bne.n	810a496 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810a484:	68fb      	ldr	r3, [r7, #12]
 810a486:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810a48a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810a48c:	683b      	ldr	r3, [r7, #0]
 810a48e:	685b      	ldr	r3, [r3, #4]
 810a490:	68fa      	ldr	r2, [r7, #12]
 810a492:	4313      	orrs	r3, r2
 810a494:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810a496:	68fb      	ldr	r3, [r7, #12]
 810a498:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810a49c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810a49e:	683b      	ldr	r3, [r7, #0]
 810a4a0:	681b      	ldr	r3, [r3, #0]
 810a4a2:	68fa      	ldr	r2, [r7, #12]
 810a4a4:	4313      	orrs	r3, r2
 810a4a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810a4a8:	687b      	ldr	r3, [r7, #4]
 810a4aa:	681b      	ldr	r3, [r3, #0]
 810a4ac:	68fa      	ldr	r2, [r7, #12]
 810a4ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810a4b0:	687b      	ldr	r3, [r7, #4]
 810a4b2:	681b      	ldr	r3, [r3, #0]
 810a4b4:	4a20      	ldr	r2, [pc, #128]	@ (810a538 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810a4b6:	4293      	cmp	r3, r2
 810a4b8:	d022      	beq.n	810a500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a4ba:	687b      	ldr	r3, [r7, #4]
 810a4bc:	681b      	ldr	r3, [r3, #0]
 810a4be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a4c2:	d01d      	beq.n	810a500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a4c4:	687b      	ldr	r3, [r7, #4]
 810a4c6:	681b      	ldr	r3, [r3, #0]
 810a4c8:	4a1d      	ldr	r2, [pc, #116]	@ (810a540 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810a4ca:	4293      	cmp	r3, r2
 810a4cc:	d018      	beq.n	810a500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a4ce:	687b      	ldr	r3, [r7, #4]
 810a4d0:	681b      	ldr	r3, [r3, #0]
 810a4d2:	4a1c      	ldr	r2, [pc, #112]	@ (810a544 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810a4d4:	4293      	cmp	r3, r2
 810a4d6:	d013      	beq.n	810a500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a4d8:	687b      	ldr	r3, [r7, #4]
 810a4da:	681b      	ldr	r3, [r3, #0]
 810a4dc:	4a1a      	ldr	r2, [pc, #104]	@ (810a548 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810a4de:	4293      	cmp	r3, r2
 810a4e0:	d00e      	beq.n	810a500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a4e2:	687b      	ldr	r3, [r7, #4]
 810a4e4:	681b      	ldr	r3, [r3, #0]
 810a4e6:	4a15      	ldr	r2, [pc, #84]	@ (810a53c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810a4e8:	4293      	cmp	r3, r2
 810a4ea:	d009      	beq.n	810a500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a4ec:	687b      	ldr	r3, [r7, #4]
 810a4ee:	681b      	ldr	r3, [r3, #0]
 810a4f0:	4a16      	ldr	r2, [pc, #88]	@ (810a54c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810a4f2:	4293      	cmp	r3, r2
 810a4f4:	d004      	beq.n	810a500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a4f6:	687b      	ldr	r3, [r7, #4]
 810a4f8:	681b      	ldr	r3, [r3, #0]
 810a4fa:	4a15      	ldr	r2, [pc, #84]	@ (810a550 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810a4fc:	4293      	cmp	r3, r2
 810a4fe:	d10c      	bne.n	810a51a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810a500:	68bb      	ldr	r3, [r7, #8]
 810a502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810a506:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810a508:	683b      	ldr	r3, [r7, #0]
 810a50a:	689b      	ldr	r3, [r3, #8]
 810a50c:	68ba      	ldr	r2, [r7, #8]
 810a50e:	4313      	orrs	r3, r2
 810a510:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810a512:	687b      	ldr	r3, [r7, #4]
 810a514:	681b      	ldr	r3, [r3, #0]
 810a516:	68ba      	ldr	r2, [r7, #8]
 810a518:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810a51a:	687b      	ldr	r3, [r7, #4]
 810a51c:	2201      	movs	r2, #1
 810a51e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810a522:	687b      	ldr	r3, [r7, #4]
 810a524:	2200      	movs	r2, #0
 810a526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810a52a:	2300      	movs	r3, #0
}
 810a52c:	4618      	mov	r0, r3
 810a52e:	3714      	adds	r7, #20
 810a530:	46bd      	mov	sp, r7
 810a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a536:	4770      	bx	lr
 810a538:	40010000 	.word	0x40010000
 810a53c:	40010400 	.word	0x40010400
 810a540:	40000400 	.word	0x40000400
 810a544:	40000800 	.word	0x40000800
 810a548:	40000c00 	.word	0x40000c00
 810a54c:	40001800 	.word	0x40001800
 810a550:	40014000 	.word	0x40014000

0810a554 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810a554:	b480      	push	{r7}
 810a556:	b085      	sub	sp, #20
 810a558:	af00      	add	r7, sp, #0
 810a55a:	6078      	str	r0, [r7, #4]
 810a55c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810a55e:	2300      	movs	r3, #0
 810a560:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 810a562:	687b      	ldr	r3, [r7, #4]
 810a564:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810a568:	2b01      	cmp	r3, #1
 810a56a:	d101      	bne.n	810a570 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810a56c:	2302      	movs	r3, #2
 810a56e:	e065      	b.n	810a63c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810a570:	687b      	ldr	r3, [r7, #4]
 810a572:	2201      	movs	r2, #1
 810a574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810a578:	68fb      	ldr	r3, [r7, #12]
 810a57a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810a57e:	683b      	ldr	r3, [r7, #0]
 810a580:	68db      	ldr	r3, [r3, #12]
 810a582:	4313      	orrs	r3, r2
 810a584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810a586:	68fb      	ldr	r3, [r7, #12]
 810a588:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810a58c:	683b      	ldr	r3, [r7, #0]
 810a58e:	689b      	ldr	r3, [r3, #8]
 810a590:	4313      	orrs	r3, r2
 810a592:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810a594:	68fb      	ldr	r3, [r7, #12]
 810a596:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 810a59a:	683b      	ldr	r3, [r7, #0]
 810a59c:	685b      	ldr	r3, [r3, #4]
 810a59e:	4313      	orrs	r3, r2
 810a5a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810a5a2:	68fb      	ldr	r3, [r7, #12]
 810a5a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 810a5a8:	683b      	ldr	r3, [r7, #0]
 810a5aa:	681b      	ldr	r3, [r3, #0]
 810a5ac:	4313      	orrs	r3, r2
 810a5ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810a5b0:	68fb      	ldr	r3, [r7, #12]
 810a5b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810a5b6:	683b      	ldr	r3, [r7, #0]
 810a5b8:	691b      	ldr	r3, [r3, #16]
 810a5ba:	4313      	orrs	r3, r2
 810a5bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810a5be:	68fb      	ldr	r3, [r7, #12]
 810a5c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 810a5c4:	683b      	ldr	r3, [r7, #0]
 810a5c6:	695b      	ldr	r3, [r3, #20]
 810a5c8:	4313      	orrs	r3, r2
 810a5ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810a5cc:	68fb      	ldr	r3, [r7, #12]
 810a5ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 810a5d2:	683b      	ldr	r3, [r7, #0]
 810a5d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a5d6:	4313      	orrs	r3, r2
 810a5d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810a5da:	68fb      	ldr	r3, [r7, #12]
 810a5dc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 810a5e0:	683b      	ldr	r3, [r7, #0]
 810a5e2:	699b      	ldr	r3, [r3, #24]
 810a5e4:	041b      	lsls	r3, r3, #16
 810a5e6:	4313      	orrs	r3, r2
 810a5e8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810a5ea:	687b      	ldr	r3, [r7, #4]
 810a5ec:	681b      	ldr	r3, [r3, #0]
 810a5ee:	4a16      	ldr	r2, [pc, #88]	@ (810a648 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810a5f0:	4293      	cmp	r3, r2
 810a5f2:	d004      	beq.n	810a5fe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810a5f4:	687b      	ldr	r3, [r7, #4]
 810a5f6:	681b      	ldr	r3, [r3, #0]
 810a5f8:	4a14      	ldr	r2, [pc, #80]	@ (810a64c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810a5fa:	4293      	cmp	r3, r2
 810a5fc:	d115      	bne.n	810a62a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810a5fe:	68fb      	ldr	r3, [r7, #12]
 810a600:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 810a604:	683b      	ldr	r3, [r7, #0]
 810a606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a608:	051b      	lsls	r3, r3, #20
 810a60a:	4313      	orrs	r3, r2
 810a60c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810a60e:	68fb      	ldr	r3, [r7, #12]
 810a610:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 810a614:	683b      	ldr	r3, [r7, #0]
 810a616:	69db      	ldr	r3, [r3, #28]
 810a618:	4313      	orrs	r3, r2
 810a61a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810a61c:	68fb      	ldr	r3, [r7, #12]
 810a61e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 810a622:	683b      	ldr	r3, [r7, #0]
 810a624:	6a1b      	ldr	r3, [r3, #32]
 810a626:	4313      	orrs	r3, r2
 810a628:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810a62a:	687b      	ldr	r3, [r7, #4]
 810a62c:	681b      	ldr	r3, [r3, #0]
 810a62e:	68fa      	ldr	r2, [r7, #12]
 810a630:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 810a632:	687b      	ldr	r3, [r7, #4]
 810a634:	2200      	movs	r2, #0
 810a636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810a63a:	2300      	movs	r3, #0
}
 810a63c:	4618      	mov	r0, r3
 810a63e:	3714      	adds	r7, #20
 810a640:	46bd      	mov	sp, r7
 810a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a646:	4770      	bx	lr
 810a648:	40010000 	.word	0x40010000
 810a64c:	40010400 	.word	0x40010400

0810a650 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810a650:	b480      	push	{r7}
 810a652:	b083      	sub	sp, #12
 810a654:	af00      	add	r7, sp, #0
 810a656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810a658:	bf00      	nop
 810a65a:	370c      	adds	r7, #12
 810a65c:	46bd      	mov	sp, r7
 810a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a662:	4770      	bx	lr

0810a664 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810a664:	b480      	push	{r7}
 810a666:	b083      	sub	sp, #12
 810a668:	af00      	add	r7, sp, #0
 810a66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810a66c:	bf00      	nop
 810a66e:	370c      	adds	r7, #12
 810a670:	46bd      	mov	sp, r7
 810a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a676:	4770      	bx	lr

0810a678 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810a678:	b480      	push	{r7}
 810a67a:	b083      	sub	sp, #12
 810a67c:	af00      	add	r7, sp, #0
 810a67e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810a680:	bf00      	nop
 810a682:	370c      	adds	r7, #12
 810a684:	46bd      	mov	sp, r7
 810a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a68a:	4770      	bx	lr

0810a68c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810a68c:	b580      	push	{r7, lr}
 810a68e:	b082      	sub	sp, #8
 810a690:	af00      	add	r7, sp, #0
 810a692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810a694:	687b      	ldr	r3, [r7, #4]
 810a696:	2b00      	cmp	r3, #0
 810a698:	d101      	bne.n	810a69e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810a69a:	2301      	movs	r3, #1
 810a69c:	e042      	b.n	810a724 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810a69e:	687b      	ldr	r3, [r7, #4]
 810a6a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810a6a4:	2b00      	cmp	r3, #0
 810a6a6:	d106      	bne.n	810a6b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810a6a8:	687b      	ldr	r3, [r7, #4]
 810a6aa:	2200      	movs	r2, #0
 810a6ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810a6b0:	6878      	ldr	r0, [r7, #4]
 810a6b2:	f7f8 fc7f 	bl	8102fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810a6b6:	687b      	ldr	r3, [r7, #4]
 810a6b8:	2224      	movs	r2, #36	@ 0x24
 810a6ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810a6be:	687b      	ldr	r3, [r7, #4]
 810a6c0:	681b      	ldr	r3, [r3, #0]
 810a6c2:	681a      	ldr	r2, [r3, #0]
 810a6c4:	687b      	ldr	r3, [r7, #4]
 810a6c6:	681b      	ldr	r3, [r3, #0]
 810a6c8:	f022 0201 	bic.w	r2, r2, #1
 810a6cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810a6ce:	687b      	ldr	r3, [r7, #4]
 810a6d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a6d2:	2b00      	cmp	r3, #0
 810a6d4:	d002      	beq.n	810a6dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810a6d6:	6878      	ldr	r0, [r7, #4]
 810a6d8:	f000 fee6 	bl	810b4a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810a6dc:	6878      	ldr	r0, [r7, #4]
 810a6de:	f000 f97b 	bl	810a9d8 <UART_SetConfig>
 810a6e2:	4603      	mov	r3, r0
 810a6e4:	2b01      	cmp	r3, #1
 810a6e6:	d101      	bne.n	810a6ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 810a6e8:	2301      	movs	r3, #1
 810a6ea:	e01b      	b.n	810a724 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810a6ec:	687b      	ldr	r3, [r7, #4]
 810a6ee:	681b      	ldr	r3, [r3, #0]
 810a6f0:	685a      	ldr	r2, [r3, #4]
 810a6f2:	687b      	ldr	r3, [r7, #4]
 810a6f4:	681b      	ldr	r3, [r3, #0]
 810a6f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810a6fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810a6fc:	687b      	ldr	r3, [r7, #4]
 810a6fe:	681b      	ldr	r3, [r3, #0]
 810a700:	689a      	ldr	r2, [r3, #8]
 810a702:	687b      	ldr	r3, [r7, #4]
 810a704:	681b      	ldr	r3, [r3, #0]
 810a706:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810a70a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810a70c:	687b      	ldr	r3, [r7, #4]
 810a70e:	681b      	ldr	r3, [r3, #0]
 810a710:	681a      	ldr	r2, [r3, #0]
 810a712:	687b      	ldr	r3, [r7, #4]
 810a714:	681b      	ldr	r3, [r3, #0]
 810a716:	f042 0201 	orr.w	r2, r2, #1
 810a71a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810a71c:	6878      	ldr	r0, [r7, #4]
 810a71e:	f000 ff65 	bl	810b5ec <UART_CheckIdleState>
 810a722:	4603      	mov	r3, r0
}
 810a724:	4618      	mov	r0, r3
 810a726:	3708      	adds	r7, #8
 810a728:	46bd      	mov	sp, r7
 810a72a:	bd80      	pop	{r7, pc}

0810a72c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810a72c:	b580      	push	{r7, lr}
 810a72e:	b08a      	sub	sp, #40	@ 0x28
 810a730:	af02      	add	r7, sp, #8
 810a732:	60f8      	str	r0, [r7, #12]
 810a734:	60b9      	str	r1, [r7, #8]
 810a736:	603b      	str	r3, [r7, #0]
 810a738:	4613      	mov	r3, r2
 810a73a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810a73c:	68fb      	ldr	r3, [r7, #12]
 810a73e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810a742:	2b20      	cmp	r3, #32
 810a744:	d17b      	bne.n	810a83e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 810a746:	68bb      	ldr	r3, [r7, #8]
 810a748:	2b00      	cmp	r3, #0
 810a74a:	d002      	beq.n	810a752 <HAL_UART_Transmit+0x26>
 810a74c:	88fb      	ldrh	r3, [r7, #6]
 810a74e:	2b00      	cmp	r3, #0
 810a750:	d101      	bne.n	810a756 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810a752:	2301      	movs	r3, #1
 810a754:	e074      	b.n	810a840 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a756:	68fb      	ldr	r3, [r7, #12]
 810a758:	2200      	movs	r2, #0
 810a75a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810a75e:	68fb      	ldr	r3, [r7, #12]
 810a760:	2221      	movs	r2, #33	@ 0x21
 810a762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810a766:	f7f8 fe69 	bl	810343c <HAL_GetTick>
 810a76a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810a76c:	68fb      	ldr	r3, [r7, #12]
 810a76e:	88fa      	ldrh	r2, [r7, #6]
 810a770:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 810a774:	68fb      	ldr	r3, [r7, #12]
 810a776:	88fa      	ldrh	r2, [r7, #6]
 810a778:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810a77c:	68fb      	ldr	r3, [r7, #12]
 810a77e:	689b      	ldr	r3, [r3, #8]
 810a780:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a784:	d108      	bne.n	810a798 <HAL_UART_Transmit+0x6c>
 810a786:	68fb      	ldr	r3, [r7, #12]
 810a788:	691b      	ldr	r3, [r3, #16]
 810a78a:	2b00      	cmp	r3, #0
 810a78c:	d104      	bne.n	810a798 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810a78e:	2300      	movs	r3, #0
 810a790:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810a792:	68bb      	ldr	r3, [r7, #8]
 810a794:	61bb      	str	r3, [r7, #24]
 810a796:	e003      	b.n	810a7a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 810a798:	68bb      	ldr	r3, [r7, #8]
 810a79a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810a79c:	2300      	movs	r3, #0
 810a79e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 810a7a0:	e030      	b.n	810a804 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810a7a2:	683b      	ldr	r3, [r7, #0]
 810a7a4:	9300      	str	r3, [sp, #0]
 810a7a6:	697b      	ldr	r3, [r7, #20]
 810a7a8:	2200      	movs	r2, #0
 810a7aa:	2180      	movs	r1, #128	@ 0x80
 810a7ac:	68f8      	ldr	r0, [r7, #12]
 810a7ae:	f000 ffc7 	bl	810b740 <UART_WaitOnFlagUntilTimeout>
 810a7b2:	4603      	mov	r3, r0
 810a7b4:	2b00      	cmp	r3, #0
 810a7b6:	d005      	beq.n	810a7c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 810a7b8:	68fb      	ldr	r3, [r7, #12]
 810a7ba:	2220      	movs	r2, #32
 810a7bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 810a7c0:	2303      	movs	r3, #3
 810a7c2:	e03d      	b.n	810a840 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 810a7c4:	69fb      	ldr	r3, [r7, #28]
 810a7c6:	2b00      	cmp	r3, #0
 810a7c8:	d10b      	bne.n	810a7e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810a7ca:	69bb      	ldr	r3, [r7, #24]
 810a7cc:	881b      	ldrh	r3, [r3, #0]
 810a7ce:	461a      	mov	r2, r3
 810a7d0:	68fb      	ldr	r3, [r7, #12]
 810a7d2:	681b      	ldr	r3, [r3, #0]
 810a7d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810a7d8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 810a7da:	69bb      	ldr	r3, [r7, #24]
 810a7dc:	3302      	adds	r3, #2
 810a7de:	61bb      	str	r3, [r7, #24]
 810a7e0:	e007      	b.n	810a7f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810a7e2:	69fb      	ldr	r3, [r7, #28]
 810a7e4:	781a      	ldrb	r2, [r3, #0]
 810a7e6:	68fb      	ldr	r3, [r7, #12]
 810a7e8:	681b      	ldr	r3, [r3, #0]
 810a7ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 810a7ec:	69fb      	ldr	r3, [r7, #28]
 810a7ee:	3301      	adds	r3, #1
 810a7f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810a7f2:	68fb      	ldr	r3, [r7, #12]
 810a7f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810a7f8:	b29b      	uxth	r3, r3
 810a7fa:	3b01      	subs	r3, #1
 810a7fc:	b29a      	uxth	r2, r3
 810a7fe:	68fb      	ldr	r3, [r7, #12]
 810a800:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 810a804:	68fb      	ldr	r3, [r7, #12]
 810a806:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810a80a:	b29b      	uxth	r3, r3
 810a80c:	2b00      	cmp	r3, #0
 810a80e:	d1c8      	bne.n	810a7a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810a810:	683b      	ldr	r3, [r7, #0]
 810a812:	9300      	str	r3, [sp, #0]
 810a814:	697b      	ldr	r3, [r7, #20]
 810a816:	2200      	movs	r2, #0
 810a818:	2140      	movs	r1, #64	@ 0x40
 810a81a:	68f8      	ldr	r0, [r7, #12]
 810a81c:	f000 ff90 	bl	810b740 <UART_WaitOnFlagUntilTimeout>
 810a820:	4603      	mov	r3, r0
 810a822:	2b00      	cmp	r3, #0
 810a824:	d005      	beq.n	810a832 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 810a826:	68fb      	ldr	r3, [r7, #12]
 810a828:	2220      	movs	r2, #32
 810a82a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810a82e:	2303      	movs	r3, #3
 810a830:	e006      	b.n	810a840 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810a832:	68fb      	ldr	r3, [r7, #12]
 810a834:	2220      	movs	r2, #32
 810a836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 810a83a:	2300      	movs	r3, #0
 810a83c:	e000      	b.n	810a840 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810a83e:	2302      	movs	r3, #2
  }
}
 810a840:	4618      	mov	r0, r3
 810a842:	3720      	adds	r7, #32
 810a844:	46bd      	mov	sp, r7
 810a846:	bd80      	pop	{r7, pc}

0810a848 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810a848:	b580      	push	{r7, lr}
 810a84a:	b08a      	sub	sp, #40	@ 0x28
 810a84c:	af02      	add	r7, sp, #8
 810a84e:	60f8      	str	r0, [r7, #12]
 810a850:	60b9      	str	r1, [r7, #8]
 810a852:	603b      	str	r3, [r7, #0]
 810a854:	4613      	mov	r3, r2
 810a856:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810a858:	68fb      	ldr	r3, [r7, #12]
 810a85a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810a85e:	2b20      	cmp	r3, #32
 810a860:	f040 80b5 	bne.w	810a9ce <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 810a864:	68bb      	ldr	r3, [r7, #8]
 810a866:	2b00      	cmp	r3, #0
 810a868:	d002      	beq.n	810a870 <HAL_UART_Receive+0x28>
 810a86a:	88fb      	ldrh	r3, [r7, #6]
 810a86c:	2b00      	cmp	r3, #0
 810a86e:	d101      	bne.n	810a874 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 810a870:	2301      	movs	r3, #1
 810a872:	e0ad      	b.n	810a9d0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a874:	68fb      	ldr	r3, [r7, #12]
 810a876:	2200      	movs	r2, #0
 810a878:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 810a87c:	68fb      	ldr	r3, [r7, #12]
 810a87e:	2222      	movs	r2, #34	@ 0x22
 810a880:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a884:	68fb      	ldr	r3, [r7, #12]
 810a886:	2200      	movs	r2, #0
 810a888:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810a88a:	f7f8 fdd7 	bl	810343c <HAL_GetTick>
 810a88e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 810a890:	68fb      	ldr	r3, [r7, #12]
 810a892:	88fa      	ldrh	r2, [r7, #6]
 810a894:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 810a898:	68fb      	ldr	r3, [r7, #12]
 810a89a:	88fa      	ldrh	r2, [r7, #6]
 810a89c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 810a8a0:	68fb      	ldr	r3, [r7, #12]
 810a8a2:	689b      	ldr	r3, [r3, #8]
 810a8a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a8a8:	d10e      	bne.n	810a8c8 <HAL_UART_Receive+0x80>
 810a8aa:	68fb      	ldr	r3, [r7, #12]
 810a8ac:	691b      	ldr	r3, [r3, #16]
 810a8ae:	2b00      	cmp	r3, #0
 810a8b0:	d105      	bne.n	810a8be <HAL_UART_Receive+0x76>
 810a8b2:	68fb      	ldr	r3, [r7, #12]
 810a8b4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 810a8b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a8bc:	e02d      	b.n	810a91a <HAL_UART_Receive+0xd2>
 810a8be:	68fb      	ldr	r3, [r7, #12]
 810a8c0:	22ff      	movs	r2, #255	@ 0xff
 810a8c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a8c6:	e028      	b.n	810a91a <HAL_UART_Receive+0xd2>
 810a8c8:	68fb      	ldr	r3, [r7, #12]
 810a8ca:	689b      	ldr	r3, [r3, #8]
 810a8cc:	2b00      	cmp	r3, #0
 810a8ce:	d10d      	bne.n	810a8ec <HAL_UART_Receive+0xa4>
 810a8d0:	68fb      	ldr	r3, [r7, #12]
 810a8d2:	691b      	ldr	r3, [r3, #16]
 810a8d4:	2b00      	cmp	r3, #0
 810a8d6:	d104      	bne.n	810a8e2 <HAL_UART_Receive+0x9a>
 810a8d8:	68fb      	ldr	r3, [r7, #12]
 810a8da:	22ff      	movs	r2, #255	@ 0xff
 810a8dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a8e0:	e01b      	b.n	810a91a <HAL_UART_Receive+0xd2>
 810a8e2:	68fb      	ldr	r3, [r7, #12]
 810a8e4:	227f      	movs	r2, #127	@ 0x7f
 810a8e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a8ea:	e016      	b.n	810a91a <HAL_UART_Receive+0xd2>
 810a8ec:	68fb      	ldr	r3, [r7, #12]
 810a8ee:	689b      	ldr	r3, [r3, #8]
 810a8f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810a8f4:	d10d      	bne.n	810a912 <HAL_UART_Receive+0xca>
 810a8f6:	68fb      	ldr	r3, [r7, #12]
 810a8f8:	691b      	ldr	r3, [r3, #16]
 810a8fa:	2b00      	cmp	r3, #0
 810a8fc:	d104      	bne.n	810a908 <HAL_UART_Receive+0xc0>
 810a8fe:	68fb      	ldr	r3, [r7, #12]
 810a900:	227f      	movs	r2, #127	@ 0x7f
 810a902:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a906:	e008      	b.n	810a91a <HAL_UART_Receive+0xd2>
 810a908:	68fb      	ldr	r3, [r7, #12]
 810a90a:	223f      	movs	r2, #63	@ 0x3f
 810a90c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a910:	e003      	b.n	810a91a <HAL_UART_Receive+0xd2>
 810a912:	68fb      	ldr	r3, [r7, #12]
 810a914:	2200      	movs	r2, #0
 810a916:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 810a91a:	68fb      	ldr	r3, [r7, #12]
 810a91c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810a920:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810a922:	68fb      	ldr	r3, [r7, #12]
 810a924:	689b      	ldr	r3, [r3, #8]
 810a926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a92a:	d108      	bne.n	810a93e <HAL_UART_Receive+0xf6>
 810a92c:	68fb      	ldr	r3, [r7, #12]
 810a92e:	691b      	ldr	r3, [r3, #16]
 810a930:	2b00      	cmp	r3, #0
 810a932:	d104      	bne.n	810a93e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 810a934:	2300      	movs	r3, #0
 810a936:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 810a938:	68bb      	ldr	r3, [r7, #8]
 810a93a:	61bb      	str	r3, [r7, #24]
 810a93c:	e003      	b.n	810a946 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 810a93e:	68bb      	ldr	r3, [r7, #8]
 810a940:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810a942:	2300      	movs	r3, #0
 810a944:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 810a946:	e036      	b.n	810a9b6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 810a948:	683b      	ldr	r3, [r7, #0]
 810a94a:	9300      	str	r3, [sp, #0]
 810a94c:	697b      	ldr	r3, [r7, #20]
 810a94e:	2200      	movs	r2, #0
 810a950:	2120      	movs	r1, #32
 810a952:	68f8      	ldr	r0, [r7, #12]
 810a954:	f000 fef4 	bl	810b740 <UART_WaitOnFlagUntilTimeout>
 810a958:	4603      	mov	r3, r0
 810a95a:	2b00      	cmp	r3, #0
 810a95c:	d005      	beq.n	810a96a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 810a95e:	68fb      	ldr	r3, [r7, #12]
 810a960:	2220      	movs	r2, #32
 810a962:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 810a966:	2303      	movs	r3, #3
 810a968:	e032      	b.n	810a9d0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 810a96a:	69fb      	ldr	r3, [r7, #28]
 810a96c:	2b00      	cmp	r3, #0
 810a96e:	d10c      	bne.n	810a98a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 810a970:	68fb      	ldr	r3, [r7, #12]
 810a972:	681b      	ldr	r3, [r3, #0]
 810a974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a976:	b29a      	uxth	r2, r3
 810a978:	8a7b      	ldrh	r3, [r7, #18]
 810a97a:	4013      	ands	r3, r2
 810a97c:	b29a      	uxth	r2, r3
 810a97e:	69bb      	ldr	r3, [r7, #24]
 810a980:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 810a982:	69bb      	ldr	r3, [r7, #24]
 810a984:	3302      	adds	r3, #2
 810a986:	61bb      	str	r3, [r7, #24]
 810a988:	e00c      	b.n	810a9a4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 810a98a:	68fb      	ldr	r3, [r7, #12]
 810a98c:	681b      	ldr	r3, [r3, #0]
 810a98e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a990:	b2da      	uxtb	r2, r3
 810a992:	8a7b      	ldrh	r3, [r7, #18]
 810a994:	b2db      	uxtb	r3, r3
 810a996:	4013      	ands	r3, r2
 810a998:	b2da      	uxtb	r2, r3
 810a99a:	69fb      	ldr	r3, [r7, #28]
 810a99c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 810a99e:	69fb      	ldr	r3, [r7, #28]
 810a9a0:	3301      	adds	r3, #1
 810a9a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 810a9a4:	68fb      	ldr	r3, [r7, #12]
 810a9a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810a9aa:	b29b      	uxth	r3, r3
 810a9ac:	3b01      	subs	r3, #1
 810a9ae:	b29a      	uxth	r2, r3
 810a9b0:	68fb      	ldr	r3, [r7, #12]
 810a9b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 810a9b6:	68fb      	ldr	r3, [r7, #12]
 810a9b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810a9bc:	b29b      	uxth	r3, r3
 810a9be:	2b00      	cmp	r3, #0
 810a9c0:	d1c2      	bne.n	810a948 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810a9c2:	68fb      	ldr	r3, [r7, #12]
 810a9c4:	2220      	movs	r2, #32
 810a9c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 810a9ca:	2300      	movs	r3, #0
 810a9cc:	e000      	b.n	810a9d0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 810a9ce:	2302      	movs	r3, #2
  }
}
 810a9d0:	4618      	mov	r0, r3
 810a9d2:	3720      	adds	r7, #32
 810a9d4:	46bd      	mov	sp, r7
 810a9d6:	bd80      	pop	{r7, pc}

0810a9d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810a9d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810a9dc:	b092      	sub	sp, #72	@ 0x48
 810a9de:	af00      	add	r7, sp, #0
 810a9e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810a9e2:	2300      	movs	r3, #0
 810a9e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810a9e8:	697b      	ldr	r3, [r7, #20]
 810a9ea:	689a      	ldr	r2, [r3, #8]
 810a9ec:	697b      	ldr	r3, [r7, #20]
 810a9ee:	691b      	ldr	r3, [r3, #16]
 810a9f0:	431a      	orrs	r2, r3
 810a9f2:	697b      	ldr	r3, [r7, #20]
 810a9f4:	695b      	ldr	r3, [r3, #20]
 810a9f6:	431a      	orrs	r2, r3
 810a9f8:	697b      	ldr	r3, [r7, #20]
 810a9fa:	69db      	ldr	r3, [r3, #28]
 810a9fc:	4313      	orrs	r3, r2
 810a9fe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810aa00:	697b      	ldr	r3, [r7, #20]
 810aa02:	681b      	ldr	r3, [r3, #0]
 810aa04:	681a      	ldr	r2, [r3, #0]
 810aa06:	4bbd      	ldr	r3, [pc, #756]	@ (810acfc <UART_SetConfig+0x324>)
 810aa08:	4013      	ands	r3, r2
 810aa0a:	697a      	ldr	r2, [r7, #20]
 810aa0c:	6812      	ldr	r2, [r2, #0]
 810aa0e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810aa10:	430b      	orrs	r3, r1
 810aa12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810aa14:	697b      	ldr	r3, [r7, #20]
 810aa16:	681b      	ldr	r3, [r3, #0]
 810aa18:	685b      	ldr	r3, [r3, #4]
 810aa1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810aa1e:	697b      	ldr	r3, [r7, #20]
 810aa20:	68da      	ldr	r2, [r3, #12]
 810aa22:	697b      	ldr	r3, [r7, #20]
 810aa24:	681b      	ldr	r3, [r3, #0]
 810aa26:	430a      	orrs	r2, r1
 810aa28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810aa2a:	697b      	ldr	r3, [r7, #20]
 810aa2c:	699b      	ldr	r3, [r3, #24]
 810aa2e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810aa30:	697b      	ldr	r3, [r7, #20]
 810aa32:	681b      	ldr	r3, [r3, #0]
 810aa34:	4ab2      	ldr	r2, [pc, #712]	@ (810ad00 <UART_SetConfig+0x328>)
 810aa36:	4293      	cmp	r3, r2
 810aa38:	d004      	beq.n	810aa44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810aa3a:	697b      	ldr	r3, [r7, #20]
 810aa3c:	6a1b      	ldr	r3, [r3, #32]
 810aa3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810aa40:	4313      	orrs	r3, r2
 810aa42:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810aa44:	697b      	ldr	r3, [r7, #20]
 810aa46:	681b      	ldr	r3, [r3, #0]
 810aa48:	689b      	ldr	r3, [r3, #8]
 810aa4a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810aa4e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810aa52:	697a      	ldr	r2, [r7, #20]
 810aa54:	6812      	ldr	r2, [r2, #0]
 810aa56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810aa58:	430b      	orrs	r3, r1
 810aa5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810aa5c:	697b      	ldr	r3, [r7, #20]
 810aa5e:	681b      	ldr	r3, [r3, #0]
 810aa60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810aa62:	f023 010f 	bic.w	r1, r3, #15
 810aa66:	697b      	ldr	r3, [r7, #20]
 810aa68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810aa6a:	697b      	ldr	r3, [r7, #20]
 810aa6c:	681b      	ldr	r3, [r3, #0]
 810aa6e:	430a      	orrs	r2, r1
 810aa70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810aa72:	697b      	ldr	r3, [r7, #20]
 810aa74:	681b      	ldr	r3, [r3, #0]
 810aa76:	4aa3      	ldr	r2, [pc, #652]	@ (810ad04 <UART_SetConfig+0x32c>)
 810aa78:	4293      	cmp	r3, r2
 810aa7a:	d177      	bne.n	810ab6c <UART_SetConfig+0x194>
 810aa7c:	4ba2      	ldr	r3, [pc, #648]	@ (810ad08 <UART_SetConfig+0x330>)
 810aa7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810aa80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810aa84:	2b28      	cmp	r3, #40	@ 0x28
 810aa86:	d86d      	bhi.n	810ab64 <UART_SetConfig+0x18c>
 810aa88:	a201      	add	r2, pc, #4	@ (adr r2, 810aa90 <UART_SetConfig+0xb8>)
 810aa8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810aa8e:	bf00      	nop
 810aa90:	0810ab35 	.word	0x0810ab35
 810aa94:	0810ab65 	.word	0x0810ab65
 810aa98:	0810ab65 	.word	0x0810ab65
 810aa9c:	0810ab65 	.word	0x0810ab65
 810aaa0:	0810ab65 	.word	0x0810ab65
 810aaa4:	0810ab65 	.word	0x0810ab65
 810aaa8:	0810ab65 	.word	0x0810ab65
 810aaac:	0810ab65 	.word	0x0810ab65
 810aab0:	0810ab3d 	.word	0x0810ab3d
 810aab4:	0810ab65 	.word	0x0810ab65
 810aab8:	0810ab65 	.word	0x0810ab65
 810aabc:	0810ab65 	.word	0x0810ab65
 810aac0:	0810ab65 	.word	0x0810ab65
 810aac4:	0810ab65 	.word	0x0810ab65
 810aac8:	0810ab65 	.word	0x0810ab65
 810aacc:	0810ab65 	.word	0x0810ab65
 810aad0:	0810ab45 	.word	0x0810ab45
 810aad4:	0810ab65 	.word	0x0810ab65
 810aad8:	0810ab65 	.word	0x0810ab65
 810aadc:	0810ab65 	.word	0x0810ab65
 810aae0:	0810ab65 	.word	0x0810ab65
 810aae4:	0810ab65 	.word	0x0810ab65
 810aae8:	0810ab65 	.word	0x0810ab65
 810aaec:	0810ab65 	.word	0x0810ab65
 810aaf0:	0810ab4d 	.word	0x0810ab4d
 810aaf4:	0810ab65 	.word	0x0810ab65
 810aaf8:	0810ab65 	.word	0x0810ab65
 810aafc:	0810ab65 	.word	0x0810ab65
 810ab00:	0810ab65 	.word	0x0810ab65
 810ab04:	0810ab65 	.word	0x0810ab65
 810ab08:	0810ab65 	.word	0x0810ab65
 810ab0c:	0810ab65 	.word	0x0810ab65
 810ab10:	0810ab55 	.word	0x0810ab55
 810ab14:	0810ab65 	.word	0x0810ab65
 810ab18:	0810ab65 	.word	0x0810ab65
 810ab1c:	0810ab65 	.word	0x0810ab65
 810ab20:	0810ab65 	.word	0x0810ab65
 810ab24:	0810ab65 	.word	0x0810ab65
 810ab28:	0810ab65 	.word	0x0810ab65
 810ab2c:	0810ab65 	.word	0x0810ab65
 810ab30:	0810ab5d 	.word	0x0810ab5d
 810ab34:	2301      	movs	r3, #1
 810ab36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ab3a:	e220      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ab3c:	2304      	movs	r3, #4
 810ab3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ab42:	e21c      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ab44:	2308      	movs	r3, #8
 810ab46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ab4a:	e218      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ab4c:	2310      	movs	r3, #16
 810ab4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ab52:	e214      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ab54:	2320      	movs	r3, #32
 810ab56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ab5a:	e210      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ab5c:	2340      	movs	r3, #64	@ 0x40
 810ab5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ab62:	e20c      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ab64:	2380      	movs	r3, #128	@ 0x80
 810ab66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ab6a:	e208      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ab6c:	697b      	ldr	r3, [r7, #20]
 810ab6e:	681b      	ldr	r3, [r3, #0]
 810ab70:	4a66      	ldr	r2, [pc, #408]	@ (810ad0c <UART_SetConfig+0x334>)
 810ab72:	4293      	cmp	r3, r2
 810ab74:	d130      	bne.n	810abd8 <UART_SetConfig+0x200>
 810ab76:	4b64      	ldr	r3, [pc, #400]	@ (810ad08 <UART_SetConfig+0x330>)
 810ab78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ab7a:	f003 0307 	and.w	r3, r3, #7
 810ab7e:	2b05      	cmp	r3, #5
 810ab80:	d826      	bhi.n	810abd0 <UART_SetConfig+0x1f8>
 810ab82:	a201      	add	r2, pc, #4	@ (adr r2, 810ab88 <UART_SetConfig+0x1b0>)
 810ab84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ab88:	0810aba1 	.word	0x0810aba1
 810ab8c:	0810aba9 	.word	0x0810aba9
 810ab90:	0810abb1 	.word	0x0810abb1
 810ab94:	0810abb9 	.word	0x0810abb9
 810ab98:	0810abc1 	.word	0x0810abc1
 810ab9c:	0810abc9 	.word	0x0810abc9
 810aba0:	2300      	movs	r3, #0
 810aba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810aba6:	e1ea      	b.n	810af7e <UART_SetConfig+0x5a6>
 810aba8:	2304      	movs	r3, #4
 810abaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810abae:	e1e6      	b.n	810af7e <UART_SetConfig+0x5a6>
 810abb0:	2308      	movs	r3, #8
 810abb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810abb6:	e1e2      	b.n	810af7e <UART_SetConfig+0x5a6>
 810abb8:	2310      	movs	r3, #16
 810abba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810abbe:	e1de      	b.n	810af7e <UART_SetConfig+0x5a6>
 810abc0:	2320      	movs	r3, #32
 810abc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810abc6:	e1da      	b.n	810af7e <UART_SetConfig+0x5a6>
 810abc8:	2340      	movs	r3, #64	@ 0x40
 810abca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810abce:	e1d6      	b.n	810af7e <UART_SetConfig+0x5a6>
 810abd0:	2380      	movs	r3, #128	@ 0x80
 810abd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810abd6:	e1d2      	b.n	810af7e <UART_SetConfig+0x5a6>
 810abd8:	697b      	ldr	r3, [r7, #20]
 810abda:	681b      	ldr	r3, [r3, #0]
 810abdc:	4a4c      	ldr	r2, [pc, #304]	@ (810ad10 <UART_SetConfig+0x338>)
 810abde:	4293      	cmp	r3, r2
 810abe0:	d130      	bne.n	810ac44 <UART_SetConfig+0x26c>
 810abe2:	4b49      	ldr	r3, [pc, #292]	@ (810ad08 <UART_SetConfig+0x330>)
 810abe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810abe6:	f003 0307 	and.w	r3, r3, #7
 810abea:	2b05      	cmp	r3, #5
 810abec:	d826      	bhi.n	810ac3c <UART_SetConfig+0x264>
 810abee:	a201      	add	r2, pc, #4	@ (adr r2, 810abf4 <UART_SetConfig+0x21c>)
 810abf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810abf4:	0810ac0d 	.word	0x0810ac0d
 810abf8:	0810ac15 	.word	0x0810ac15
 810abfc:	0810ac1d 	.word	0x0810ac1d
 810ac00:	0810ac25 	.word	0x0810ac25
 810ac04:	0810ac2d 	.word	0x0810ac2d
 810ac08:	0810ac35 	.word	0x0810ac35
 810ac0c:	2300      	movs	r3, #0
 810ac0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ac12:	e1b4      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ac14:	2304      	movs	r3, #4
 810ac16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ac1a:	e1b0      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ac1c:	2308      	movs	r3, #8
 810ac1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ac22:	e1ac      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ac24:	2310      	movs	r3, #16
 810ac26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ac2a:	e1a8      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ac2c:	2320      	movs	r3, #32
 810ac2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ac32:	e1a4      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ac34:	2340      	movs	r3, #64	@ 0x40
 810ac36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ac3a:	e1a0      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ac3c:	2380      	movs	r3, #128	@ 0x80
 810ac3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ac42:	e19c      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ac44:	697b      	ldr	r3, [r7, #20]
 810ac46:	681b      	ldr	r3, [r3, #0]
 810ac48:	4a32      	ldr	r2, [pc, #200]	@ (810ad14 <UART_SetConfig+0x33c>)
 810ac4a:	4293      	cmp	r3, r2
 810ac4c:	d130      	bne.n	810acb0 <UART_SetConfig+0x2d8>
 810ac4e:	4b2e      	ldr	r3, [pc, #184]	@ (810ad08 <UART_SetConfig+0x330>)
 810ac50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ac52:	f003 0307 	and.w	r3, r3, #7
 810ac56:	2b05      	cmp	r3, #5
 810ac58:	d826      	bhi.n	810aca8 <UART_SetConfig+0x2d0>
 810ac5a:	a201      	add	r2, pc, #4	@ (adr r2, 810ac60 <UART_SetConfig+0x288>)
 810ac5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ac60:	0810ac79 	.word	0x0810ac79
 810ac64:	0810ac81 	.word	0x0810ac81
 810ac68:	0810ac89 	.word	0x0810ac89
 810ac6c:	0810ac91 	.word	0x0810ac91
 810ac70:	0810ac99 	.word	0x0810ac99
 810ac74:	0810aca1 	.word	0x0810aca1
 810ac78:	2300      	movs	r3, #0
 810ac7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ac7e:	e17e      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ac80:	2304      	movs	r3, #4
 810ac82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ac86:	e17a      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ac88:	2308      	movs	r3, #8
 810ac8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ac8e:	e176      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ac90:	2310      	movs	r3, #16
 810ac92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ac96:	e172      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ac98:	2320      	movs	r3, #32
 810ac9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ac9e:	e16e      	b.n	810af7e <UART_SetConfig+0x5a6>
 810aca0:	2340      	movs	r3, #64	@ 0x40
 810aca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810aca6:	e16a      	b.n	810af7e <UART_SetConfig+0x5a6>
 810aca8:	2380      	movs	r3, #128	@ 0x80
 810acaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810acae:	e166      	b.n	810af7e <UART_SetConfig+0x5a6>
 810acb0:	697b      	ldr	r3, [r7, #20]
 810acb2:	681b      	ldr	r3, [r3, #0]
 810acb4:	4a18      	ldr	r2, [pc, #96]	@ (810ad18 <UART_SetConfig+0x340>)
 810acb6:	4293      	cmp	r3, r2
 810acb8:	d140      	bne.n	810ad3c <UART_SetConfig+0x364>
 810acba:	4b13      	ldr	r3, [pc, #76]	@ (810ad08 <UART_SetConfig+0x330>)
 810acbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810acbe:	f003 0307 	and.w	r3, r3, #7
 810acc2:	2b05      	cmp	r3, #5
 810acc4:	d836      	bhi.n	810ad34 <UART_SetConfig+0x35c>
 810acc6:	a201      	add	r2, pc, #4	@ (adr r2, 810accc <UART_SetConfig+0x2f4>)
 810acc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810accc:	0810ace5 	.word	0x0810ace5
 810acd0:	0810aced 	.word	0x0810aced
 810acd4:	0810acf5 	.word	0x0810acf5
 810acd8:	0810ad1d 	.word	0x0810ad1d
 810acdc:	0810ad25 	.word	0x0810ad25
 810ace0:	0810ad2d 	.word	0x0810ad2d
 810ace4:	2300      	movs	r3, #0
 810ace6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810acea:	e148      	b.n	810af7e <UART_SetConfig+0x5a6>
 810acec:	2304      	movs	r3, #4
 810acee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810acf2:	e144      	b.n	810af7e <UART_SetConfig+0x5a6>
 810acf4:	2308      	movs	r3, #8
 810acf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810acfa:	e140      	b.n	810af7e <UART_SetConfig+0x5a6>
 810acfc:	cfff69f3 	.word	0xcfff69f3
 810ad00:	58000c00 	.word	0x58000c00
 810ad04:	40011000 	.word	0x40011000
 810ad08:	58024400 	.word	0x58024400
 810ad0c:	40004400 	.word	0x40004400
 810ad10:	40004800 	.word	0x40004800
 810ad14:	40004c00 	.word	0x40004c00
 810ad18:	40005000 	.word	0x40005000
 810ad1c:	2310      	movs	r3, #16
 810ad1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ad22:	e12c      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ad24:	2320      	movs	r3, #32
 810ad26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ad2a:	e128      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ad2c:	2340      	movs	r3, #64	@ 0x40
 810ad2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ad32:	e124      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ad34:	2380      	movs	r3, #128	@ 0x80
 810ad36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ad3a:	e120      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ad3c:	697b      	ldr	r3, [r7, #20]
 810ad3e:	681b      	ldr	r3, [r3, #0]
 810ad40:	4acb      	ldr	r2, [pc, #812]	@ (810b070 <UART_SetConfig+0x698>)
 810ad42:	4293      	cmp	r3, r2
 810ad44:	d176      	bne.n	810ae34 <UART_SetConfig+0x45c>
 810ad46:	4bcb      	ldr	r3, [pc, #812]	@ (810b074 <UART_SetConfig+0x69c>)
 810ad48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ad4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810ad4e:	2b28      	cmp	r3, #40	@ 0x28
 810ad50:	d86c      	bhi.n	810ae2c <UART_SetConfig+0x454>
 810ad52:	a201      	add	r2, pc, #4	@ (adr r2, 810ad58 <UART_SetConfig+0x380>)
 810ad54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ad58:	0810adfd 	.word	0x0810adfd
 810ad5c:	0810ae2d 	.word	0x0810ae2d
 810ad60:	0810ae2d 	.word	0x0810ae2d
 810ad64:	0810ae2d 	.word	0x0810ae2d
 810ad68:	0810ae2d 	.word	0x0810ae2d
 810ad6c:	0810ae2d 	.word	0x0810ae2d
 810ad70:	0810ae2d 	.word	0x0810ae2d
 810ad74:	0810ae2d 	.word	0x0810ae2d
 810ad78:	0810ae05 	.word	0x0810ae05
 810ad7c:	0810ae2d 	.word	0x0810ae2d
 810ad80:	0810ae2d 	.word	0x0810ae2d
 810ad84:	0810ae2d 	.word	0x0810ae2d
 810ad88:	0810ae2d 	.word	0x0810ae2d
 810ad8c:	0810ae2d 	.word	0x0810ae2d
 810ad90:	0810ae2d 	.word	0x0810ae2d
 810ad94:	0810ae2d 	.word	0x0810ae2d
 810ad98:	0810ae0d 	.word	0x0810ae0d
 810ad9c:	0810ae2d 	.word	0x0810ae2d
 810ada0:	0810ae2d 	.word	0x0810ae2d
 810ada4:	0810ae2d 	.word	0x0810ae2d
 810ada8:	0810ae2d 	.word	0x0810ae2d
 810adac:	0810ae2d 	.word	0x0810ae2d
 810adb0:	0810ae2d 	.word	0x0810ae2d
 810adb4:	0810ae2d 	.word	0x0810ae2d
 810adb8:	0810ae15 	.word	0x0810ae15
 810adbc:	0810ae2d 	.word	0x0810ae2d
 810adc0:	0810ae2d 	.word	0x0810ae2d
 810adc4:	0810ae2d 	.word	0x0810ae2d
 810adc8:	0810ae2d 	.word	0x0810ae2d
 810adcc:	0810ae2d 	.word	0x0810ae2d
 810add0:	0810ae2d 	.word	0x0810ae2d
 810add4:	0810ae2d 	.word	0x0810ae2d
 810add8:	0810ae1d 	.word	0x0810ae1d
 810addc:	0810ae2d 	.word	0x0810ae2d
 810ade0:	0810ae2d 	.word	0x0810ae2d
 810ade4:	0810ae2d 	.word	0x0810ae2d
 810ade8:	0810ae2d 	.word	0x0810ae2d
 810adec:	0810ae2d 	.word	0x0810ae2d
 810adf0:	0810ae2d 	.word	0x0810ae2d
 810adf4:	0810ae2d 	.word	0x0810ae2d
 810adf8:	0810ae25 	.word	0x0810ae25
 810adfc:	2301      	movs	r3, #1
 810adfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae02:	e0bc      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ae04:	2304      	movs	r3, #4
 810ae06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae0a:	e0b8      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ae0c:	2308      	movs	r3, #8
 810ae0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae12:	e0b4      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ae14:	2310      	movs	r3, #16
 810ae16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae1a:	e0b0      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ae1c:	2320      	movs	r3, #32
 810ae1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae22:	e0ac      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ae24:	2340      	movs	r3, #64	@ 0x40
 810ae26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae2a:	e0a8      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ae2c:	2380      	movs	r3, #128	@ 0x80
 810ae2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae32:	e0a4      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ae34:	697b      	ldr	r3, [r7, #20]
 810ae36:	681b      	ldr	r3, [r3, #0]
 810ae38:	4a8f      	ldr	r2, [pc, #572]	@ (810b078 <UART_SetConfig+0x6a0>)
 810ae3a:	4293      	cmp	r3, r2
 810ae3c:	d130      	bne.n	810aea0 <UART_SetConfig+0x4c8>
 810ae3e:	4b8d      	ldr	r3, [pc, #564]	@ (810b074 <UART_SetConfig+0x69c>)
 810ae40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ae42:	f003 0307 	and.w	r3, r3, #7
 810ae46:	2b05      	cmp	r3, #5
 810ae48:	d826      	bhi.n	810ae98 <UART_SetConfig+0x4c0>
 810ae4a:	a201      	add	r2, pc, #4	@ (adr r2, 810ae50 <UART_SetConfig+0x478>)
 810ae4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ae50:	0810ae69 	.word	0x0810ae69
 810ae54:	0810ae71 	.word	0x0810ae71
 810ae58:	0810ae79 	.word	0x0810ae79
 810ae5c:	0810ae81 	.word	0x0810ae81
 810ae60:	0810ae89 	.word	0x0810ae89
 810ae64:	0810ae91 	.word	0x0810ae91
 810ae68:	2300      	movs	r3, #0
 810ae6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae6e:	e086      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ae70:	2304      	movs	r3, #4
 810ae72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae76:	e082      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ae78:	2308      	movs	r3, #8
 810ae7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae7e:	e07e      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ae80:	2310      	movs	r3, #16
 810ae82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae86:	e07a      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ae88:	2320      	movs	r3, #32
 810ae8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae8e:	e076      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ae90:	2340      	movs	r3, #64	@ 0x40
 810ae92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae96:	e072      	b.n	810af7e <UART_SetConfig+0x5a6>
 810ae98:	2380      	movs	r3, #128	@ 0x80
 810ae9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae9e:	e06e      	b.n	810af7e <UART_SetConfig+0x5a6>
 810aea0:	697b      	ldr	r3, [r7, #20]
 810aea2:	681b      	ldr	r3, [r3, #0]
 810aea4:	4a75      	ldr	r2, [pc, #468]	@ (810b07c <UART_SetConfig+0x6a4>)
 810aea6:	4293      	cmp	r3, r2
 810aea8:	d130      	bne.n	810af0c <UART_SetConfig+0x534>
 810aeaa:	4b72      	ldr	r3, [pc, #456]	@ (810b074 <UART_SetConfig+0x69c>)
 810aeac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810aeae:	f003 0307 	and.w	r3, r3, #7
 810aeb2:	2b05      	cmp	r3, #5
 810aeb4:	d826      	bhi.n	810af04 <UART_SetConfig+0x52c>
 810aeb6:	a201      	add	r2, pc, #4	@ (adr r2, 810aebc <UART_SetConfig+0x4e4>)
 810aeb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810aebc:	0810aed5 	.word	0x0810aed5
 810aec0:	0810aedd 	.word	0x0810aedd
 810aec4:	0810aee5 	.word	0x0810aee5
 810aec8:	0810aeed 	.word	0x0810aeed
 810aecc:	0810aef5 	.word	0x0810aef5
 810aed0:	0810aefd 	.word	0x0810aefd
 810aed4:	2300      	movs	r3, #0
 810aed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810aeda:	e050      	b.n	810af7e <UART_SetConfig+0x5a6>
 810aedc:	2304      	movs	r3, #4
 810aede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810aee2:	e04c      	b.n	810af7e <UART_SetConfig+0x5a6>
 810aee4:	2308      	movs	r3, #8
 810aee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810aeea:	e048      	b.n	810af7e <UART_SetConfig+0x5a6>
 810aeec:	2310      	movs	r3, #16
 810aeee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810aef2:	e044      	b.n	810af7e <UART_SetConfig+0x5a6>
 810aef4:	2320      	movs	r3, #32
 810aef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810aefa:	e040      	b.n	810af7e <UART_SetConfig+0x5a6>
 810aefc:	2340      	movs	r3, #64	@ 0x40
 810aefe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af02:	e03c      	b.n	810af7e <UART_SetConfig+0x5a6>
 810af04:	2380      	movs	r3, #128	@ 0x80
 810af06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af0a:	e038      	b.n	810af7e <UART_SetConfig+0x5a6>
 810af0c:	697b      	ldr	r3, [r7, #20]
 810af0e:	681b      	ldr	r3, [r3, #0]
 810af10:	4a5b      	ldr	r2, [pc, #364]	@ (810b080 <UART_SetConfig+0x6a8>)
 810af12:	4293      	cmp	r3, r2
 810af14:	d130      	bne.n	810af78 <UART_SetConfig+0x5a0>
 810af16:	4b57      	ldr	r3, [pc, #348]	@ (810b074 <UART_SetConfig+0x69c>)
 810af18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810af1a:	f003 0307 	and.w	r3, r3, #7
 810af1e:	2b05      	cmp	r3, #5
 810af20:	d826      	bhi.n	810af70 <UART_SetConfig+0x598>
 810af22:	a201      	add	r2, pc, #4	@ (adr r2, 810af28 <UART_SetConfig+0x550>)
 810af24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810af28:	0810af41 	.word	0x0810af41
 810af2c:	0810af49 	.word	0x0810af49
 810af30:	0810af51 	.word	0x0810af51
 810af34:	0810af59 	.word	0x0810af59
 810af38:	0810af61 	.word	0x0810af61
 810af3c:	0810af69 	.word	0x0810af69
 810af40:	2302      	movs	r3, #2
 810af42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af46:	e01a      	b.n	810af7e <UART_SetConfig+0x5a6>
 810af48:	2304      	movs	r3, #4
 810af4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af4e:	e016      	b.n	810af7e <UART_SetConfig+0x5a6>
 810af50:	2308      	movs	r3, #8
 810af52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af56:	e012      	b.n	810af7e <UART_SetConfig+0x5a6>
 810af58:	2310      	movs	r3, #16
 810af5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af5e:	e00e      	b.n	810af7e <UART_SetConfig+0x5a6>
 810af60:	2320      	movs	r3, #32
 810af62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af66:	e00a      	b.n	810af7e <UART_SetConfig+0x5a6>
 810af68:	2340      	movs	r3, #64	@ 0x40
 810af6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af6e:	e006      	b.n	810af7e <UART_SetConfig+0x5a6>
 810af70:	2380      	movs	r3, #128	@ 0x80
 810af72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af76:	e002      	b.n	810af7e <UART_SetConfig+0x5a6>
 810af78:	2380      	movs	r3, #128	@ 0x80
 810af7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810af7e:	697b      	ldr	r3, [r7, #20]
 810af80:	681b      	ldr	r3, [r3, #0]
 810af82:	4a3f      	ldr	r2, [pc, #252]	@ (810b080 <UART_SetConfig+0x6a8>)
 810af84:	4293      	cmp	r3, r2
 810af86:	f040 80f8 	bne.w	810b17a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810af8a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810af8e:	2b20      	cmp	r3, #32
 810af90:	dc46      	bgt.n	810b020 <UART_SetConfig+0x648>
 810af92:	2b02      	cmp	r3, #2
 810af94:	f2c0 8082 	blt.w	810b09c <UART_SetConfig+0x6c4>
 810af98:	3b02      	subs	r3, #2
 810af9a:	2b1e      	cmp	r3, #30
 810af9c:	d87e      	bhi.n	810b09c <UART_SetConfig+0x6c4>
 810af9e:	a201      	add	r2, pc, #4	@ (adr r2, 810afa4 <UART_SetConfig+0x5cc>)
 810afa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810afa4:	0810b027 	.word	0x0810b027
 810afa8:	0810b09d 	.word	0x0810b09d
 810afac:	0810b02f 	.word	0x0810b02f
 810afb0:	0810b09d 	.word	0x0810b09d
 810afb4:	0810b09d 	.word	0x0810b09d
 810afb8:	0810b09d 	.word	0x0810b09d
 810afbc:	0810b03f 	.word	0x0810b03f
 810afc0:	0810b09d 	.word	0x0810b09d
 810afc4:	0810b09d 	.word	0x0810b09d
 810afc8:	0810b09d 	.word	0x0810b09d
 810afcc:	0810b09d 	.word	0x0810b09d
 810afd0:	0810b09d 	.word	0x0810b09d
 810afd4:	0810b09d 	.word	0x0810b09d
 810afd8:	0810b09d 	.word	0x0810b09d
 810afdc:	0810b04f 	.word	0x0810b04f
 810afe0:	0810b09d 	.word	0x0810b09d
 810afe4:	0810b09d 	.word	0x0810b09d
 810afe8:	0810b09d 	.word	0x0810b09d
 810afec:	0810b09d 	.word	0x0810b09d
 810aff0:	0810b09d 	.word	0x0810b09d
 810aff4:	0810b09d 	.word	0x0810b09d
 810aff8:	0810b09d 	.word	0x0810b09d
 810affc:	0810b09d 	.word	0x0810b09d
 810b000:	0810b09d 	.word	0x0810b09d
 810b004:	0810b09d 	.word	0x0810b09d
 810b008:	0810b09d 	.word	0x0810b09d
 810b00c:	0810b09d 	.word	0x0810b09d
 810b010:	0810b09d 	.word	0x0810b09d
 810b014:	0810b09d 	.word	0x0810b09d
 810b018:	0810b09d 	.word	0x0810b09d
 810b01c:	0810b08f 	.word	0x0810b08f
 810b020:	2b40      	cmp	r3, #64	@ 0x40
 810b022:	d037      	beq.n	810b094 <UART_SetConfig+0x6bc>
 810b024:	e03a      	b.n	810b09c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810b026:	f7fd fa33 	bl	8108490 <HAL_RCCEx_GetD3PCLK1Freq>
 810b02a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b02c:	e03c      	b.n	810b0a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b02e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b032:	4618      	mov	r0, r3
 810b034:	f7fd fa42 	bl	81084bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b03a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b03c:	e034      	b.n	810b0a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b03e:	f107 0318 	add.w	r3, r7, #24
 810b042:	4618      	mov	r0, r3
 810b044:	f7fd fb8e 	bl	8108764 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b048:	69fb      	ldr	r3, [r7, #28]
 810b04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b04c:	e02c      	b.n	810b0a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b04e:	4b09      	ldr	r3, [pc, #36]	@ (810b074 <UART_SetConfig+0x69c>)
 810b050:	681b      	ldr	r3, [r3, #0]
 810b052:	f003 0320 	and.w	r3, r3, #32
 810b056:	2b00      	cmp	r3, #0
 810b058:	d016      	beq.n	810b088 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b05a:	4b06      	ldr	r3, [pc, #24]	@ (810b074 <UART_SetConfig+0x69c>)
 810b05c:	681b      	ldr	r3, [r3, #0]
 810b05e:	08db      	lsrs	r3, r3, #3
 810b060:	f003 0303 	and.w	r3, r3, #3
 810b064:	4a07      	ldr	r2, [pc, #28]	@ (810b084 <UART_SetConfig+0x6ac>)
 810b066:	fa22 f303 	lsr.w	r3, r2, r3
 810b06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b06c:	e01c      	b.n	810b0a8 <UART_SetConfig+0x6d0>
 810b06e:	bf00      	nop
 810b070:	40011400 	.word	0x40011400
 810b074:	58024400 	.word	0x58024400
 810b078:	40007800 	.word	0x40007800
 810b07c:	40007c00 	.word	0x40007c00
 810b080:	58000c00 	.word	0x58000c00
 810b084:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810b088:	4b9d      	ldr	r3, [pc, #628]	@ (810b300 <UART_SetConfig+0x928>)
 810b08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b08c:	e00c      	b.n	810b0a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b08e:	4b9d      	ldr	r3, [pc, #628]	@ (810b304 <UART_SetConfig+0x92c>)
 810b090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b092:	e009      	b.n	810b0a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b094:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810b098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b09a:	e005      	b.n	810b0a8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810b09c:	2300      	movs	r3, #0
 810b09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810b0a0:	2301      	movs	r3, #1
 810b0a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810b0a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810b0a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b0aa:	2b00      	cmp	r3, #0
 810b0ac:	f000 81de 	beq.w	810b46c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810b0b0:	697b      	ldr	r3, [r7, #20]
 810b0b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b0b4:	4a94      	ldr	r2, [pc, #592]	@ (810b308 <UART_SetConfig+0x930>)
 810b0b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b0ba:	461a      	mov	r2, r3
 810b0bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b0be:	fbb3 f3f2 	udiv	r3, r3, r2
 810b0c2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810b0c4:	697b      	ldr	r3, [r7, #20]
 810b0c6:	685a      	ldr	r2, [r3, #4]
 810b0c8:	4613      	mov	r3, r2
 810b0ca:	005b      	lsls	r3, r3, #1
 810b0cc:	4413      	add	r3, r2
 810b0ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b0d0:	429a      	cmp	r2, r3
 810b0d2:	d305      	bcc.n	810b0e0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810b0d4:	697b      	ldr	r3, [r7, #20]
 810b0d6:	685b      	ldr	r3, [r3, #4]
 810b0d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810b0da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b0dc:	429a      	cmp	r2, r3
 810b0de:	d903      	bls.n	810b0e8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810b0e0:	2301      	movs	r3, #1
 810b0e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810b0e6:	e1c1      	b.n	810b46c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b0e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b0ea:	2200      	movs	r2, #0
 810b0ec:	60bb      	str	r3, [r7, #8]
 810b0ee:	60fa      	str	r2, [r7, #12]
 810b0f0:	697b      	ldr	r3, [r7, #20]
 810b0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b0f4:	4a84      	ldr	r2, [pc, #528]	@ (810b308 <UART_SetConfig+0x930>)
 810b0f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b0fa:	b29b      	uxth	r3, r3
 810b0fc:	2200      	movs	r2, #0
 810b0fe:	603b      	str	r3, [r7, #0]
 810b100:	607a      	str	r2, [r7, #4]
 810b102:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b106:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810b10a:	f7f5 fe45 	bl	8100d98 <__aeabi_uldivmod>
 810b10e:	4602      	mov	r2, r0
 810b110:	460b      	mov	r3, r1
 810b112:	4610      	mov	r0, r2
 810b114:	4619      	mov	r1, r3
 810b116:	f04f 0200 	mov.w	r2, #0
 810b11a:	f04f 0300 	mov.w	r3, #0
 810b11e:	020b      	lsls	r3, r1, #8
 810b120:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810b124:	0202      	lsls	r2, r0, #8
 810b126:	6979      	ldr	r1, [r7, #20]
 810b128:	6849      	ldr	r1, [r1, #4]
 810b12a:	0849      	lsrs	r1, r1, #1
 810b12c:	2000      	movs	r0, #0
 810b12e:	460c      	mov	r4, r1
 810b130:	4605      	mov	r5, r0
 810b132:	eb12 0804 	adds.w	r8, r2, r4
 810b136:	eb43 0905 	adc.w	r9, r3, r5
 810b13a:	697b      	ldr	r3, [r7, #20]
 810b13c:	685b      	ldr	r3, [r3, #4]
 810b13e:	2200      	movs	r2, #0
 810b140:	469a      	mov	sl, r3
 810b142:	4693      	mov	fp, r2
 810b144:	4652      	mov	r2, sl
 810b146:	465b      	mov	r3, fp
 810b148:	4640      	mov	r0, r8
 810b14a:	4649      	mov	r1, r9
 810b14c:	f7f5 fe24 	bl	8100d98 <__aeabi_uldivmod>
 810b150:	4602      	mov	r2, r0
 810b152:	460b      	mov	r3, r1
 810b154:	4613      	mov	r3, r2
 810b156:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810b158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b15a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810b15e:	d308      	bcc.n	810b172 <UART_SetConfig+0x79a>
 810b160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b162:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810b166:	d204      	bcs.n	810b172 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810b168:	697b      	ldr	r3, [r7, #20]
 810b16a:	681b      	ldr	r3, [r3, #0]
 810b16c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810b16e:	60da      	str	r2, [r3, #12]
 810b170:	e17c      	b.n	810b46c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810b172:	2301      	movs	r3, #1
 810b174:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810b178:	e178      	b.n	810b46c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810b17a:	697b      	ldr	r3, [r7, #20]
 810b17c:	69db      	ldr	r3, [r3, #28]
 810b17e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810b182:	f040 80c5 	bne.w	810b310 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810b186:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810b18a:	2b20      	cmp	r3, #32
 810b18c:	dc48      	bgt.n	810b220 <UART_SetConfig+0x848>
 810b18e:	2b00      	cmp	r3, #0
 810b190:	db7b      	blt.n	810b28a <UART_SetConfig+0x8b2>
 810b192:	2b20      	cmp	r3, #32
 810b194:	d879      	bhi.n	810b28a <UART_SetConfig+0x8b2>
 810b196:	a201      	add	r2, pc, #4	@ (adr r2, 810b19c <UART_SetConfig+0x7c4>)
 810b198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b19c:	0810b227 	.word	0x0810b227
 810b1a0:	0810b22f 	.word	0x0810b22f
 810b1a4:	0810b28b 	.word	0x0810b28b
 810b1a8:	0810b28b 	.word	0x0810b28b
 810b1ac:	0810b237 	.word	0x0810b237
 810b1b0:	0810b28b 	.word	0x0810b28b
 810b1b4:	0810b28b 	.word	0x0810b28b
 810b1b8:	0810b28b 	.word	0x0810b28b
 810b1bc:	0810b247 	.word	0x0810b247
 810b1c0:	0810b28b 	.word	0x0810b28b
 810b1c4:	0810b28b 	.word	0x0810b28b
 810b1c8:	0810b28b 	.word	0x0810b28b
 810b1cc:	0810b28b 	.word	0x0810b28b
 810b1d0:	0810b28b 	.word	0x0810b28b
 810b1d4:	0810b28b 	.word	0x0810b28b
 810b1d8:	0810b28b 	.word	0x0810b28b
 810b1dc:	0810b257 	.word	0x0810b257
 810b1e0:	0810b28b 	.word	0x0810b28b
 810b1e4:	0810b28b 	.word	0x0810b28b
 810b1e8:	0810b28b 	.word	0x0810b28b
 810b1ec:	0810b28b 	.word	0x0810b28b
 810b1f0:	0810b28b 	.word	0x0810b28b
 810b1f4:	0810b28b 	.word	0x0810b28b
 810b1f8:	0810b28b 	.word	0x0810b28b
 810b1fc:	0810b28b 	.word	0x0810b28b
 810b200:	0810b28b 	.word	0x0810b28b
 810b204:	0810b28b 	.word	0x0810b28b
 810b208:	0810b28b 	.word	0x0810b28b
 810b20c:	0810b28b 	.word	0x0810b28b
 810b210:	0810b28b 	.word	0x0810b28b
 810b214:	0810b28b 	.word	0x0810b28b
 810b218:	0810b28b 	.word	0x0810b28b
 810b21c:	0810b27d 	.word	0x0810b27d
 810b220:	2b40      	cmp	r3, #64	@ 0x40
 810b222:	d02e      	beq.n	810b282 <UART_SetConfig+0x8aa>
 810b224:	e031      	b.n	810b28a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810b226:	f7fb f97d 	bl	8106524 <HAL_RCC_GetPCLK1Freq>
 810b22a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b22c:	e033      	b.n	810b296 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810b22e:	f7fb f98f 	bl	8106550 <HAL_RCC_GetPCLK2Freq>
 810b232:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b234:	e02f      	b.n	810b296 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b236:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b23a:	4618      	mov	r0, r3
 810b23c:	f7fd f93e 	bl	81084bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b244:	e027      	b.n	810b296 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b246:	f107 0318 	add.w	r3, r7, #24
 810b24a:	4618      	mov	r0, r3
 810b24c:	f7fd fa8a 	bl	8108764 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b250:	69fb      	ldr	r3, [r7, #28]
 810b252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b254:	e01f      	b.n	810b296 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b256:	4b2d      	ldr	r3, [pc, #180]	@ (810b30c <UART_SetConfig+0x934>)
 810b258:	681b      	ldr	r3, [r3, #0]
 810b25a:	f003 0320 	and.w	r3, r3, #32
 810b25e:	2b00      	cmp	r3, #0
 810b260:	d009      	beq.n	810b276 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b262:	4b2a      	ldr	r3, [pc, #168]	@ (810b30c <UART_SetConfig+0x934>)
 810b264:	681b      	ldr	r3, [r3, #0]
 810b266:	08db      	lsrs	r3, r3, #3
 810b268:	f003 0303 	and.w	r3, r3, #3
 810b26c:	4a24      	ldr	r2, [pc, #144]	@ (810b300 <UART_SetConfig+0x928>)
 810b26e:	fa22 f303 	lsr.w	r3, r2, r3
 810b272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b274:	e00f      	b.n	810b296 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810b276:	4b22      	ldr	r3, [pc, #136]	@ (810b300 <UART_SetConfig+0x928>)
 810b278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b27a:	e00c      	b.n	810b296 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b27c:	4b21      	ldr	r3, [pc, #132]	@ (810b304 <UART_SetConfig+0x92c>)
 810b27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b280:	e009      	b.n	810b296 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b282:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810b286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b288:	e005      	b.n	810b296 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810b28a:	2300      	movs	r3, #0
 810b28c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810b28e:	2301      	movs	r3, #1
 810b290:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810b294:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810b296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b298:	2b00      	cmp	r3, #0
 810b29a:	f000 80e7 	beq.w	810b46c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b29e:	697b      	ldr	r3, [r7, #20]
 810b2a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b2a2:	4a19      	ldr	r2, [pc, #100]	@ (810b308 <UART_SetConfig+0x930>)
 810b2a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b2a8:	461a      	mov	r2, r3
 810b2aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b2ac:	fbb3 f3f2 	udiv	r3, r3, r2
 810b2b0:	005a      	lsls	r2, r3, #1
 810b2b2:	697b      	ldr	r3, [r7, #20]
 810b2b4:	685b      	ldr	r3, [r3, #4]
 810b2b6:	085b      	lsrs	r3, r3, #1
 810b2b8:	441a      	add	r2, r3
 810b2ba:	697b      	ldr	r3, [r7, #20]
 810b2bc:	685b      	ldr	r3, [r3, #4]
 810b2be:	fbb2 f3f3 	udiv	r3, r2, r3
 810b2c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810b2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b2c6:	2b0f      	cmp	r3, #15
 810b2c8:	d916      	bls.n	810b2f8 <UART_SetConfig+0x920>
 810b2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b2cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810b2d0:	d212      	bcs.n	810b2f8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810b2d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b2d4:	b29b      	uxth	r3, r3
 810b2d6:	f023 030f 	bic.w	r3, r3, #15
 810b2da:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810b2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b2de:	085b      	lsrs	r3, r3, #1
 810b2e0:	b29b      	uxth	r3, r3
 810b2e2:	f003 0307 	and.w	r3, r3, #7
 810b2e6:	b29a      	uxth	r2, r3
 810b2e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810b2ea:	4313      	orrs	r3, r2
 810b2ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810b2ee:	697b      	ldr	r3, [r7, #20]
 810b2f0:	681b      	ldr	r3, [r3, #0]
 810b2f2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810b2f4:	60da      	str	r2, [r3, #12]
 810b2f6:	e0b9      	b.n	810b46c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810b2f8:	2301      	movs	r3, #1
 810b2fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810b2fe:	e0b5      	b.n	810b46c <UART_SetConfig+0xa94>
 810b300:	03d09000 	.word	0x03d09000
 810b304:	003d0900 	.word	0x003d0900
 810b308:	08111e9c 	.word	0x08111e9c
 810b30c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810b310:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810b314:	2b20      	cmp	r3, #32
 810b316:	dc49      	bgt.n	810b3ac <UART_SetConfig+0x9d4>
 810b318:	2b00      	cmp	r3, #0
 810b31a:	db7c      	blt.n	810b416 <UART_SetConfig+0xa3e>
 810b31c:	2b20      	cmp	r3, #32
 810b31e:	d87a      	bhi.n	810b416 <UART_SetConfig+0xa3e>
 810b320:	a201      	add	r2, pc, #4	@ (adr r2, 810b328 <UART_SetConfig+0x950>)
 810b322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b326:	bf00      	nop
 810b328:	0810b3b3 	.word	0x0810b3b3
 810b32c:	0810b3bb 	.word	0x0810b3bb
 810b330:	0810b417 	.word	0x0810b417
 810b334:	0810b417 	.word	0x0810b417
 810b338:	0810b3c3 	.word	0x0810b3c3
 810b33c:	0810b417 	.word	0x0810b417
 810b340:	0810b417 	.word	0x0810b417
 810b344:	0810b417 	.word	0x0810b417
 810b348:	0810b3d3 	.word	0x0810b3d3
 810b34c:	0810b417 	.word	0x0810b417
 810b350:	0810b417 	.word	0x0810b417
 810b354:	0810b417 	.word	0x0810b417
 810b358:	0810b417 	.word	0x0810b417
 810b35c:	0810b417 	.word	0x0810b417
 810b360:	0810b417 	.word	0x0810b417
 810b364:	0810b417 	.word	0x0810b417
 810b368:	0810b3e3 	.word	0x0810b3e3
 810b36c:	0810b417 	.word	0x0810b417
 810b370:	0810b417 	.word	0x0810b417
 810b374:	0810b417 	.word	0x0810b417
 810b378:	0810b417 	.word	0x0810b417
 810b37c:	0810b417 	.word	0x0810b417
 810b380:	0810b417 	.word	0x0810b417
 810b384:	0810b417 	.word	0x0810b417
 810b388:	0810b417 	.word	0x0810b417
 810b38c:	0810b417 	.word	0x0810b417
 810b390:	0810b417 	.word	0x0810b417
 810b394:	0810b417 	.word	0x0810b417
 810b398:	0810b417 	.word	0x0810b417
 810b39c:	0810b417 	.word	0x0810b417
 810b3a0:	0810b417 	.word	0x0810b417
 810b3a4:	0810b417 	.word	0x0810b417
 810b3a8:	0810b409 	.word	0x0810b409
 810b3ac:	2b40      	cmp	r3, #64	@ 0x40
 810b3ae:	d02e      	beq.n	810b40e <UART_SetConfig+0xa36>
 810b3b0:	e031      	b.n	810b416 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810b3b2:	f7fb f8b7 	bl	8106524 <HAL_RCC_GetPCLK1Freq>
 810b3b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b3b8:	e033      	b.n	810b422 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810b3ba:	f7fb f8c9 	bl	8106550 <HAL_RCC_GetPCLK2Freq>
 810b3be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b3c0:	e02f      	b.n	810b422 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b3c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b3c6:	4618      	mov	r0, r3
 810b3c8:	f7fd f878 	bl	81084bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b3d0:	e027      	b.n	810b422 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b3d2:	f107 0318 	add.w	r3, r7, #24
 810b3d6:	4618      	mov	r0, r3
 810b3d8:	f7fd f9c4 	bl	8108764 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b3dc:	69fb      	ldr	r3, [r7, #28]
 810b3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b3e0:	e01f      	b.n	810b422 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b3e2:	4b2d      	ldr	r3, [pc, #180]	@ (810b498 <UART_SetConfig+0xac0>)
 810b3e4:	681b      	ldr	r3, [r3, #0]
 810b3e6:	f003 0320 	and.w	r3, r3, #32
 810b3ea:	2b00      	cmp	r3, #0
 810b3ec:	d009      	beq.n	810b402 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b3ee:	4b2a      	ldr	r3, [pc, #168]	@ (810b498 <UART_SetConfig+0xac0>)
 810b3f0:	681b      	ldr	r3, [r3, #0]
 810b3f2:	08db      	lsrs	r3, r3, #3
 810b3f4:	f003 0303 	and.w	r3, r3, #3
 810b3f8:	4a28      	ldr	r2, [pc, #160]	@ (810b49c <UART_SetConfig+0xac4>)
 810b3fa:	fa22 f303 	lsr.w	r3, r2, r3
 810b3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b400:	e00f      	b.n	810b422 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810b402:	4b26      	ldr	r3, [pc, #152]	@ (810b49c <UART_SetConfig+0xac4>)
 810b404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b406:	e00c      	b.n	810b422 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b408:	4b25      	ldr	r3, [pc, #148]	@ (810b4a0 <UART_SetConfig+0xac8>)
 810b40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b40c:	e009      	b.n	810b422 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b40e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810b412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b414:	e005      	b.n	810b422 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810b416:	2300      	movs	r3, #0
 810b418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810b41a:	2301      	movs	r3, #1
 810b41c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810b420:	bf00      	nop
    }

    if (pclk != 0U)
 810b422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b424:	2b00      	cmp	r3, #0
 810b426:	d021      	beq.n	810b46c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b428:	697b      	ldr	r3, [r7, #20]
 810b42a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b42c:	4a1d      	ldr	r2, [pc, #116]	@ (810b4a4 <UART_SetConfig+0xacc>)
 810b42e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b432:	461a      	mov	r2, r3
 810b434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b436:	fbb3 f2f2 	udiv	r2, r3, r2
 810b43a:	697b      	ldr	r3, [r7, #20]
 810b43c:	685b      	ldr	r3, [r3, #4]
 810b43e:	085b      	lsrs	r3, r3, #1
 810b440:	441a      	add	r2, r3
 810b442:	697b      	ldr	r3, [r7, #20]
 810b444:	685b      	ldr	r3, [r3, #4]
 810b446:	fbb2 f3f3 	udiv	r3, r2, r3
 810b44a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810b44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b44e:	2b0f      	cmp	r3, #15
 810b450:	d909      	bls.n	810b466 <UART_SetConfig+0xa8e>
 810b452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810b458:	d205      	bcs.n	810b466 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810b45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b45c:	b29a      	uxth	r2, r3
 810b45e:	697b      	ldr	r3, [r7, #20]
 810b460:	681b      	ldr	r3, [r3, #0]
 810b462:	60da      	str	r2, [r3, #12]
 810b464:	e002      	b.n	810b46c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810b466:	2301      	movs	r3, #1
 810b468:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810b46c:	697b      	ldr	r3, [r7, #20]
 810b46e:	2201      	movs	r2, #1
 810b470:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810b474:	697b      	ldr	r3, [r7, #20]
 810b476:	2201      	movs	r2, #1
 810b478:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810b47c:	697b      	ldr	r3, [r7, #20]
 810b47e:	2200      	movs	r2, #0
 810b480:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810b482:	697b      	ldr	r3, [r7, #20]
 810b484:	2200      	movs	r2, #0
 810b486:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810b488:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810b48c:	4618      	mov	r0, r3
 810b48e:	3748      	adds	r7, #72	@ 0x48
 810b490:	46bd      	mov	sp, r7
 810b492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810b496:	bf00      	nop
 810b498:	58024400 	.word	0x58024400
 810b49c:	03d09000 	.word	0x03d09000
 810b4a0:	003d0900 	.word	0x003d0900
 810b4a4:	08111e9c 	.word	0x08111e9c

0810b4a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810b4a8:	b480      	push	{r7}
 810b4aa:	b083      	sub	sp, #12
 810b4ac:	af00      	add	r7, sp, #0
 810b4ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810b4b0:	687b      	ldr	r3, [r7, #4]
 810b4b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b4b4:	f003 0308 	and.w	r3, r3, #8
 810b4b8:	2b00      	cmp	r3, #0
 810b4ba:	d00a      	beq.n	810b4d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810b4bc:	687b      	ldr	r3, [r7, #4]
 810b4be:	681b      	ldr	r3, [r3, #0]
 810b4c0:	685b      	ldr	r3, [r3, #4]
 810b4c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810b4c6:	687b      	ldr	r3, [r7, #4]
 810b4c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810b4ca:	687b      	ldr	r3, [r7, #4]
 810b4cc:	681b      	ldr	r3, [r3, #0]
 810b4ce:	430a      	orrs	r2, r1
 810b4d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810b4d2:	687b      	ldr	r3, [r7, #4]
 810b4d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b4d6:	f003 0301 	and.w	r3, r3, #1
 810b4da:	2b00      	cmp	r3, #0
 810b4dc:	d00a      	beq.n	810b4f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810b4de:	687b      	ldr	r3, [r7, #4]
 810b4e0:	681b      	ldr	r3, [r3, #0]
 810b4e2:	685b      	ldr	r3, [r3, #4]
 810b4e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810b4e8:	687b      	ldr	r3, [r7, #4]
 810b4ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810b4ec:	687b      	ldr	r3, [r7, #4]
 810b4ee:	681b      	ldr	r3, [r3, #0]
 810b4f0:	430a      	orrs	r2, r1
 810b4f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810b4f4:	687b      	ldr	r3, [r7, #4]
 810b4f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b4f8:	f003 0302 	and.w	r3, r3, #2
 810b4fc:	2b00      	cmp	r3, #0
 810b4fe:	d00a      	beq.n	810b516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810b500:	687b      	ldr	r3, [r7, #4]
 810b502:	681b      	ldr	r3, [r3, #0]
 810b504:	685b      	ldr	r3, [r3, #4]
 810b506:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810b50a:	687b      	ldr	r3, [r7, #4]
 810b50c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810b50e:	687b      	ldr	r3, [r7, #4]
 810b510:	681b      	ldr	r3, [r3, #0]
 810b512:	430a      	orrs	r2, r1
 810b514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810b516:	687b      	ldr	r3, [r7, #4]
 810b518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b51a:	f003 0304 	and.w	r3, r3, #4
 810b51e:	2b00      	cmp	r3, #0
 810b520:	d00a      	beq.n	810b538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810b522:	687b      	ldr	r3, [r7, #4]
 810b524:	681b      	ldr	r3, [r3, #0]
 810b526:	685b      	ldr	r3, [r3, #4]
 810b528:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810b52c:	687b      	ldr	r3, [r7, #4]
 810b52e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810b530:	687b      	ldr	r3, [r7, #4]
 810b532:	681b      	ldr	r3, [r3, #0]
 810b534:	430a      	orrs	r2, r1
 810b536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810b538:	687b      	ldr	r3, [r7, #4]
 810b53a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b53c:	f003 0310 	and.w	r3, r3, #16
 810b540:	2b00      	cmp	r3, #0
 810b542:	d00a      	beq.n	810b55a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810b544:	687b      	ldr	r3, [r7, #4]
 810b546:	681b      	ldr	r3, [r3, #0]
 810b548:	689b      	ldr	r3, [r3, #8]
 810b54a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810b54e:	687b      	ldr	r3, [r7, #4]
 810b550:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810b552:	687b      	ldr	r3, [r7, #4]
 810b554:	681b      	ldr	r3, [r3, #0]
 810b556:	430a      	orrs	r2, r1
 810b558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810b55a:	687b      	ldr	r3, [r7, #4]
 810b55c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b55e:	f003 0320 	and.w	r3, r3, #32
 810b562:	2b00      	cmp	r3, #0
 810b564:	d00a      	beq.n	810b57c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810b566:	687b      	ldr	r3, [r7, #4]
 810b568:	681b      	ldr	r3, [r3, #0]
 810b56a:	689b      	ldr	r3, [r3, #8]
 810b56c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810b570:	687b      	ldr	r3, [r7, #4]
 810b572:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810b574:	687b      	ldr	r3, [r7, #4]
 810b576:	681b      	ldr	r3, [r3, #0]
 810b578:	430a      	orrs	r2, r1
 810b57a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810b57c:	687b      	ldr	r3, [r7, #4]
 810b57e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810b584:	2b00      	cmp	r3, #0
 810b586:	d01a      	beq.n	810b5be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810b588:	687b      	ldr	r3, [r7, #4]
 810b58a:	681b      	ldr	r3, [r3, #0]
 810b58c:	685b      	ldr	r3, [r3, #4]
 810b58e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810b592:	687b      	ldr	r3, [r7, #4]
 810b594:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810b596:	687b      	ldr	r3, [r7, #4]
 810b598:	681b      	ldr	r3, [r3, #0]
 810b59a:	430a      	orrs	r2, r1
 810b59c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810b59e:	687b      	ldr	r3, [r7, #4]
 810b5a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810b5a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810b5a6:	d10a      	bne.n	810b5be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810b5a8:	687b      	ldr	r3, [r7, #4]
 810b5aa:	681b      	ldr	r3, [r3, #0]
 810b5ac:	685b      	ldr	r3, [r3, #4]
 810b5ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810b5b2:	687b      	ldr	r3, [r7, #4]
 810b5b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810b5b6:	687b      	ldr	r3, [r7, #4]
 810b5b8:	681b      	ldr	r3, [r3, #0]
 810b5ba:	430a      	orrs	r2, r1
 810b5bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810b5be:	687b      	ldr	r3, [r7, #4]
 810b5c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b5c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810b5c6:	2b00      	cmp	r3, #0
 810b5c8:	d00a      	beq.n	810b5e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810b5ca:	687b      	ldr	r3, [r7, #4]
 810b5cc:	681b      	ldr	r3, [r3, #0]
 810b5ce:	685b      	ldr	r3, [r3, #4]
 810b5d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810b5d4:	687b      	ldr	r3, [r7, #4]
 810b5d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810b5d8:	687b      	ldr	r3, [r7, #4]
 810b5da:	681b      	ldr	r3, [r3, #0]
 810b5dc:	430a      	orrs	r2, r1
 810b5de:	605a      	str	r2, [r3, #4]
  }
}
 810b5e0:	bf00      	nop
 810b5e2:	370c      	adds	r7, #12
 810b5e4:	46bd      	mov	sp, r7
 810b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b5ea:	4770      	bx	lr

0810b5ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810b5ec:	b580      	push	{r7, lr}
 810b5ee:	b098      	sub	sp, #96	@ 0x60
 810b5f0:	af02      	add	r7, sp, #8
 810b5f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b5f4:	687b      	ldr	r3, [r7, #4]
 810b5f6:	2200      	movs	r2, #0
 810b5f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810b5fc:	f7f7 ff1e 	bl	810343c <HAL_GetTick>
 810b600:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810b602:	687b      	ldr	r3, [r7, #4]
 810b604:	681b      	ldr	r3, [r3, #0]
 810b606:	681b      	ldr	r3, [r3, #0]
 810b608:	f003 0308 	and.w	r3, r3, #8
 810b60c:	2b08      	cmp	r3, #8
 810b60e:	d12f      	bne.n	810b670 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810b610:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810b614:	9300      	str	r3, [sp, #0]
 810b616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810b618:	2200      	movs	r2, #0
 810b61a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810b61e:	6878      	ldr	r0, [r7, #4]
 810b620:	f000 f88e 	bl	810b740 <UART_WaitOnFlagUntilTimeout>
 810b624:	4603      	mov	r3, r0
 810b626:	2b00      	cmp	r3, #0
 810b628:	d022      	beq.n	810b670 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810b62a:	687b      	ldr	r3, [r7, #4]
 810b62c:	681b      	ldr	r3, [r3, #0]
 810b62e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b632:	e853 3f00 	ldrex	r3, [r3]
 810b636:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810b638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b63a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810b63e:	653b      	str	r3, [r7, #80]	@ 0x50
 810b640:	687b      	ldr	r3, [r7, #4]
 810b642:	681b      	ldr	r3, [r3, #0]
 810b644:	461a      	mov	r2, r3
 810b646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810b648:	647b      	str	r3, [r7, #68]	@ 0x44
 810b64a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b64c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810b64e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810b650:	e841 2300 	strex	r3, r2, [r1]
 810b654:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810b656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b658:	2b00      	cmp	r3, #0
 810b65a:	d1e6      	bne.n	810b62a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810b65c:	687b      	ldr	r3, [r7, #4]
 810b65e:	2220      	movs	r2, #32
 810b660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810b664:	687b      	ldr	r3, [r7, #4]
 810b666:	2200      	movs	r2, #0
 810b668:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810b66c:	2303      	movs	r3, #3
 810b66e:	e063      	b.n	810b738 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810b670:	687b      	ldr	r3, [r7, #4]
 810b672:	681b      	ldr	r3, [r3, #0]
 810b674:	681b      	ldr	r3, [r3, #0]
 810b676:	f003 0304 	and.w	r3, r3, #4
 810b67a:	2b04      	cmp	r3, #4
 810b67c:	d149      	bne.n	810b712 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810b67e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810b682:	9300      	str	r3, [sp, #0]
 810b684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810b686:	2200      	movs	r2, #0
 810b688:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810b68c:	6878      	ldr	r0, [r7, #4]
 810b68e:	f000 f857 	bl	810b740 <UART_WaitOnFlagUntilTimeout>
 810b692:	4603      	mov	r3, r0
 810b694:	2b00      	cmp	r3, #0
 810b696:	d03c      	beq.n	810b712 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810b698:	687b      	ldr	r3, [r7, #4]
 810b69a:	681b      	ldr	r3, [r3, #0]
 810b69c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b6a0:	e853 3f00 	ldrex	r3, [r3]
 810b6a4:	623b      	str	r3, [r7, #32]
   return(result);
 810b6a6:	6a3b      	ldr	r3, [r7, #32]
 810b6a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810b6ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810b6ae:	687b      	ldr	r3, [r7, #4]
 810b6b0:	681b      	ldr	r3, [r3, #0]
 810b6b2:	461a      	mov	r2, r3
 810b6b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810b6b6:	633b      	str	r3, [r7, #48]	@ 0x30
 810b6b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b6ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810b6bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b6be:	e841 2300 	strex	r3, r2, [r1]
 810b6c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810b6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b6c6:	2b00      	cmp	r3, #0
 810b6c8:	d1e6      	bne.n	810b698 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810b6ca:	687b      	ldr	r3, [r7, #4]
 810b6cc:	681b      	ldr	r3, [r3, #0]
 810b6ce:	3308      	adds	r3, #8
 810b6d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b6d2:	693b      	ldr	r3, [r7, #16]
 810b6d4:	e853 3f00 	ldrex	r3, [r3]
 810b6d8:	60fb      	str	r3, [r7, #12]
   return(result);
 810b6da:	68fb      	ldr	r3, [r7, #12]
 810b6dc:	f023 0301 	bic.w	r3, r3, #1
 810b6e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 810b6e2:	687b      	ldr	r3, [r7, #4]
 810b6e4:	681b      	ldr	r3, [r3, #0]
 810b6e6:	3308      	adds	r3, #8
 810b6e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810b6ea:	61fa      	str	r2, [r7, #28]
 810b6ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b6ee:	69b9      	ldr	r1, [r7, #24]
 810b6f0:	69fa      	ldr	r2, [r7, #28]
 810b6f2:	e841 2300 	strex	r3, r2, [r1]
 810b6f6:	617b      	str	r3, [r7, #20]
   return(result);
 810b6f8:	697b      	ldr	r3, [r7, #20]
 810b6fa:	2b00      	cmp	r3, #0
 810b6fc:	d1e5      	bne.n	810b6ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810b6fe:	687b      	ldr	r3, [r7, #4]
 810b700:	2220      	movs	r2, #32
 810b702:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810b706:	687b      	ldr	r3, [r7, #4]
 810b708:	2200      	movs	r2, #0
 810b70a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810b70e:	2303      	movs	r3, #3
 810b710:	e012      	b.n	810b738 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810b712:	687b      	ldr	r3, [r7, #4]
 810b714:	2220      	movs	r2, #32
 810b716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810b71a:	687b      	ldr	r3, [r7, #4]
 810b71c:	2220      	movs	r2, #32
 810b71e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b722:	687b      	ldr	r3, [r7, #4]
 810b724:	2200      	movs	r2, #0
 810b726:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810b728:	687b      	ldr	r3, [r7, #4]
 810b72a:	2200      	movs	r2, #0
 810b72c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810b72e:	687b      	ldr	r3, [r7, #4]
 810b730:	2200      	movs	r2, #0
 810b732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b736:	2300      	movs	r3, #0
}
 810b738:	4618      	mov	r0, r3
 810b73a:	3758      	adds	r7, #88	@ 0x58
 810b73c:	46bd      	mov	sp, r7
 810b73e:	bd80      	pop	{r7, pc}

0810b740 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810b740:	b580      	push	{r7, lr}
 810b742:	b084      	sub	sp, #16
 810b744:	af00      	add	r7, sp, #0
 810b746:	60f8      	str	r0, [r7, #12]
 810b748:	60b9      	str	r1, [r7, #8]
 810b74a:	603b      	str	r3, [r7, #0]
 810b74c:	4613      	mov	r3, r2
 810b74e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810b750:	e04f      	b.n	810b7f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810b752:	69bb      	ldr	r3, [r7, #24]
 810b754:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b758:	d04b      	beq.n	810b7f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810b75a:	f7f7 fe6f 	bl	810343c <HAL_GetTick>
 810b75e:	4602      	mov	r2, r0
 810b760:	683b      	ldr	r3, [r7, #0]
 810b762:	1ad3      	subs	r3, r2, r3
 810b764:	69ba      	ldr	r2, [r7, #24]
 810b766:	429a      	cmp	r2, r3
 810b768:	d302      	bcc.n	810b770 <UART_WaitOnFlagUntilTimeout+0x30>
 810b76a:	69bb      	ldr	r3, [r7, #24]
 810b76c:	2b00      	cmp	r3, #0
 810b76e:	d101      	bne.n	810b774 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810b770:	2303      	movs	r3, #3
 810b772:	e04e      	b.n	810b812 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810b774:	68fb      	ldr	r3, [r7, #12]
 810b776:	681b      	ldr	r3, [r3, #0]
 810b778:	681b      	ldr	r3, [r3, #0]
 810b77a:	f003 0304 	and.w	r3, r3, #4
 810b77e:	2b00      	cmp	r3, #0
 810b780:	d037      	beq.n	810b7f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 810b782:	68bb      	ldr	r3, [r7, #8]
 810b784:	2b80      	cmp	r3, #128	@ 0x80
 810b786:	d034      	beq.n	810b7f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 810b788:	68bb      	ldr	r3, [r7, #8]
 810b78a:	2b40      	cmp	r3, #64	@ 0x40
 810b78c:	d031      	beq.n	810b7f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810b78e:	68fb      	ldr	r3, [r7, #12]
 810b790:	681b      	ldr	r3, [r3, #0]
 810b792:	69db      	ldr	r3, [r3, #28]
 810b794:	f003 0308 	and.w	r3, r3, #8
 810b798:	2b08      	cmp	r3, #8
 810b79a:	d110      	bne.n	810b7be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810b79c:	68fb      	ldr	r3, [r7, #12]
 810b79e:	681b      	ldr	r3, [r3, #0]
 810b7a0:	2208      	movs	r2, #8
 810b7a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810b7a4:	68f8      	ldr	r0, [r7, #12]
 810b7a6:	f000 f838 	bl	810b81a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810b7aa:	68fb      	ldr	r3, [r7, #12]
 810b7ac:	2208      	movs	r2, #8
 810b7ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810b7b2:	68fb      	ldr	r3, [r7, #12]
 810b7b4:	2200      	movs	r2, #0
 810b7b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810b7ba:	2301      	movs	r3, #1
 810b7bc:	e029      	b.n	810b812 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810b7be:	68fb      	ldr	r3, [r7, #12]
 810b7c0:	681b      	ldr	r3, [r3, #0]
 810b7c2:	69db      	ldr	r3, [r3, #28]
 810b7c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810b7c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810b7cc:	d111      	bne.n	810b7f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810b7ce:	68fb      	ldr	r3, [r7, #12]
 810b7d0:	681b      	ldr	r3, [r3, #0]
 810b7d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810b7d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810b7d8:	68f8      	ldr	r0, [r7, #12]
 810b7da:	f000 f81e 	bl	810b81a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810b7de:	68fb      	ldr	r3, [r7, #12]
 810b7e0:	2220      	movs	r2, #32
 810b7e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810b7e6:	68fb      	ldr	r3, [r7, #12]
 810b7e8:	2200      	movs	r2, #0
 810b7ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810b7ee:	2303      	movs	r3, #3
 810b7f0:	e00f      	b.n	810b812 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810b7f2:	68fb      	ldr	r3, [r7, #12]
 810b7f4:	681b      	ldr	r3, [r3, #0]
 810b7f6:	69da      	ldr	r2, [r3, #28]
 810b7f8:	68bb      	ldr	r3, [r7, #8]
 810b7fa:	4013      	ands	r3, r2
 810b7fc:	68ba      	ldr	r2, [r7, #8]
 810b7fe:	429a      	cmp	r2, r3
 810b800:	bf0c      	ite	eq
 810b802:	2301      	moveq	r3, #1
 810b804:	2300      	movne	r3, #0
 810b806:	b2db      	uxtb	r3, r3
 810b808:	461a      	mov	r2, r3
 810b80a:	79fb      	ldrb	r3, [r7, #7]
 810b80c:	429a      	cmp	r2, r3
 810b80e:	d0a0      	beq.n	810b752 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810b810:	2300      	movs	r3, #0
}
 810b812:	4618      	mov	r0, r3
 810b814:	3710      	adds	r7, #16
 810b816:	46bd      	mov	sp, r7
 810b818:	bd80      	pop	{r7, pc}

0810b81a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810b81a:	b480      	push	{r7}
 810b81c:	b095      	sub	sp, #84	@ 0x54
 810b81e:	af00      	add	r7, sp, #0
 810b820:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810b822:	687b      	ldr	r3, [r7, #4]
 810b824:	681b      	ldr	r3, [r3, #0]
 810b826:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b82a:	e853 3f00 	ldrex	r3, [r3]
 810b82e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810b830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b832:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810b836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810b838:	687b      	ldr	r3, [r7, #4]
 810b83a:	681b      	ldr	r3, [r3, #0]
 810b83c:	461a      	mov	r2, r3
 810b83e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810b840:	643b      	str	r3, [r7, #64]	@ 0x40
 810b842:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b844:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810b846:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810b848:	e841 2300 	strex	r3, r2, [r1]
 810b84c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810b84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b850:	2b00      	cmp	r3, #0
 810b852:	d1e6      	bne.n	810b822 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810b854:	687b      	ldr	r3, [r7, #4]
 810b856:	681b      	ldr	r3, [r3, #0]
 810b858:	3308      	adds	r3, #8
 810b85a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b85c:	6a3b      	ldr	r3, [r7, #32]
 810b85e:	e853 3f00 	ldrex	r3, [r3]
 810b862:	61fb      	str	r3, [r7, #28]
   return(result);
 810b864:	69fb      	ldr	r3, [r7, #28]
 810b866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810b86a:	f023 0301 	bic.w	r3, r3, #1
 810b86e:	64bb      	str	r3, [r7, #72]	@ 0x48
 810b870:	687b      	ldr	r3, [r7, #4]
 810b872:	681b      	ldr	r3, [r3, #0]
 810b874:	3308      	adds	r3, #8
 810b876:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810b878:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810b87a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b87c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810b87e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b880:	e841 2300 	strex	r3, r2, [r1]
 810b884:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810b886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b888:	2b00      	cmp	r3, #0
 810b88a:	d1e3      	bne.n	810b854 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b88c:	687b      	ldr	r3, [r7, #4]
 810b88e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b890:	2b01      	cmp	r3, #1
 810b892:	d118      	bne.n	810b8c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b894:	687b      	ldr	r3, [r7, #4]
 810b896:	681b      	ldr	r3, [r3, #0]
 810b898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b89a:	68fb      	ldr	r3, [r7, #12]
 810b89c:	e853 3f00 	ldrex	r3, [r3]
 810b8a0:	60bb      	str	r3, [r7, #8]
   return(result);
 810b8a2:	68bb      	ldr	r3, [r7, #8]
 810b8a4:	f023 0310 	bic.w	r3, r3, #16
 810b8a8:	647b      	str	r3, [r7, #68]	@ 0x44
 810b8aa:	687b      	ldr	r3, [r7, #4]
 810b8ac:	681b      	ldr	r3, [r3, #0]
 810b8ae:	461a      	mov	r2, r3
 810b8b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810b8b2:	61bb      	str	r3, [r7, #24]
 810b8b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b8b6:	6979      	ldr	r1, [r7, #20]
 810b8b8:	69ba      	ldr	r2, [r7, #24]
 810b8ba:	e841 2300 	strex	r3, r2, [r1]
 810b8be:	613b      	str	r3, [r7, #16]
   return(result);
 810b8c0:	693b      	ldr	r3, [r7, #16]
 810b8c2:	2b00      	cmp	r3, #0
 810b8c4:	d1e6      	bne.n	810b894 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810b8c6:	687b      	ldr	r3, [r7, #4]
 810b8c8:	2220      	movs	r2, #32
 810b8ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b8ce:	687b      	ldr	r3, [r7, #4]
 810b8d0:	2200      	movs	r2, #0
 810b8d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810b8d4:	687b      	ldr	r3, [r7, #4]
 810b8d6:	2200      	movs	r2, #0
 810b8d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810b8da:	bf00      	nop
 810b8dc:	3754      	adds	r7, #84	@ 0x54
 810b8de:	46bd      	mov	sp, r7
 810b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b8e4:	4770      	bx	lr

0810b8e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810b8e6:	b480      	push	{r7}
 810b8e8:	b085      	sub	sp, #20
 810b8ea:	af00      	add	r7, sp, #0
 810b8ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b8ee:	687b      	ldr	r3, [r7, #4]
 810b8f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b8f4:	2b01      	cmp	r3, #1
 810b8f6:	d101      	bne.n	810b8fc <HAL_UARTEx_DisableFifoMode+0x16>
 810b8f8:	2302      	movs	r3, #2
 810b8fa:	e027      	b.n	810b94c <HAL_UARTEx_DisableFifoMode+0x66>
 810b8fc:	687b      	ldr	r3, [r7, #4]
 810b8fe:	2201      	movs	r2, #1
 810b900:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b904:	687b      	ldr	r3, [r7, #4]
 810b906:	2224      	movs	r2, #36	@ 0x24
 810b908:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b90c:	687b      	ldr	r3, [r7, #4]
 810b90e:	681b      	ldr	r3, [r3, #0]
 810b910:	681b      	ldr	r3, [r3, #0]
 810b912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b914:	687b      	ldr	r3, [r7, #4]
 810b916:	681b      	ldr	r3, [r3, #0]
 810b918:	681a      	ldr	r2, [r3, #0]
 810b91a:	687b      	ldr	r3, [r7, #4]
 810b91c:	681b      	ldr	r3, [r3, #0]
 810b91e:	f022 0201 	bic.w	r2, r2, #1
 810b922:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810b924:	68fb      	ldr	r3, [r7, #12]
 810b926:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810b92a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810b92c:	687b      	ldr	r3, [r7, #4]
 810b92e:	2200      	movs	r2, #0
 810b930:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b932:	687b      	ldr	r3, [r7, #4]
 810b934:	681b      	ldr	r3, [r3, #0]
 810b936:	68fa      	ldr	r2, [r7, #12]
 810b938:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b93a:	687b      	ldr	r3, [r7, #4]
 810b93c:	2220      	movs	r2, #32
 810b93e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b942:	687b      	ldr	r3, [r7, #4]
 810b944:	2200      	movs	r2, #0
 810b946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b94a:	2300      	movs	r3, #0
}
 810b94c:	4618      	mov	r0, r3
 810b94e:	3714      	adds	r7, #20
 810b950:	46bd      	mov	sp, r7
 810b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b956:	4770      	bx	lr

0810b958 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b958:	b580      	push	{r7, lr}
 810b95a:	b084      	sub	sp, #16
 810b95c:	af00      	add	r7, sp, #0
 810b95e:	6078      	str	r0, [r7, #4]
 810b960:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b962:	687b      	ldr	r3, [r7, #4]
 810b964:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b968:	2b01      	cmp	r3, #1
 810b96a:	d101      	bne.n	810b970 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810b96c:	2302      	movs	r3, #2
 810b96e:	e02d      	b.n	810b9cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810b970:	687b      	ldr	r3, [r7, #4]
 810b972:	2201      	movs	r2, #1
 810b974:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b978:	687b      	ldr	r3, [r7, #4]
 810b97a:	2224      	movs	r2, #36	@ 0x24
 810b97c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b980:	687b      	ldr	r3, [r7, #4]
 810b982:	681b      	ldr	r3, [r3, #0]
 810b984:	681b      	ldr	r3, [r3, #0]
 810b986:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b988:	687b      	ldr	r3, [r7, #4]
 810b98a:	681b      	ldr	r3, [r3, #0]
 810b98c:	681a      	ldr	r2, [r3, #0]
 810b98e:	687b      	ldr	r3, [r7, #4]
 810b990:	681b      	ldr	r3, [r3, #0]
 810b992:	f022 0201 	bic.w	r2, r2, #1
 810b996:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810b998:	687b      	ldr	r3, [r7, #4]
 810b99a:	681b      	ldr	r3, [r3, #0]
 810b99c:	689b      	ldr	r3, [r3, #8]
 810b99e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810b9a2:	687b      	ldr	r3, [r7, #4]
 810b9a4:	681b      	ldr	r3, [r3, #0]
 810b9a6:	683a      	ldr	r2, [r7, #0]
 810b9a8:	430a      	orrs	r2, r1
 810b9aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810b9ac:	6878      	ldr	r0, [r7, #4]
 810b9ae:	f000 f84f 	bl	810ba50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b9b2:	687b      	ldr	r3, [r7, #4]
 810b9b4:	681b      	ldr	r3, [r3, #0]
 810b9b6:	68fa      	ldr	r2, [r7, #12]
 810b9b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b9ba:	687b      	ldr	r3, [r7, #4]
 810b9bc:	2220      	movs	r2, #32
 810b9be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b9c2:	687b      	ldr	r3, [r7, #4]
 810b9c4:	2200      	movs	r2, #0
 810b9c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b9ca:	2300      	movs	r3, #0
}
 810b9cc:	4618      	mov	r0, r3
 810b9ce:	3710      	adds	r7, #16
 810b9d0:	46bd      	mov	sp, r7
 810b9d2:	bd80      	pop	{r7, pc}

0810b9d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b9d4:	b580      	push	{r7, lr}
 810b9d6:	b084      	sub	sp, #16
 810b9d8:	af00      	add	r7, sp, #0
 810b9da:	6078      	str	r0, [r7, #4]
 810b9dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b9de:	687b      	ldr	r3, [r7, #4]
 810b9e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b9e4:	2b01      	cmp	r3, #1
 810b9e6:	d101      	bne.n	810b9ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810b9e8:	2302      	movs	r3, #2
 810b9ea:	e02d      	b.n	810ba48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810b9ec:	687b      	ldr	r3, [r7, #4]
 810b9ee:	2201      	movs	r2, #1
 810b9f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b9f4:	687b      	ldr	r3, [r7, #4]
 810b9f6:	2224      	movs	r2, #36	@ 0x24
 810b9f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b9fc:	687b      	ldr	r3, [r7, #4]
 810b9fe:	681b      	ldr	r3, [r3, #0]
 810ba00:	681b      	ldr	r3, [r3, #0]
 810ba02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ba04:	687b      	ldr	r3, [r7, #4]
 810ba06:	681b      	ldr	r3, [r3, #0]
 810ba08:	681a      	ldr	r2, [r3, #0]
 810ba0a:	687b      	ldr	r3, [r7, #4]
 810ba0c:	681b      	ldr	r3, [r3, #0]
 810ba0e:	f022 0201 	bic.w	r2, r2, #1
 810ba12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810ba14:	687b      	ldr	r3, [r7, #4]
 810ba16:	681b      	ldr	r3, [r3, #0]
 810ba18:	689b      	ldr	r3, [r3, #8]
 810ba1a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810ba1e:	687b      	ldr	r3, [r7, #4]
 810ba20:	681b      	ldr	r3, [r3, #0]
 810ba22:	683a      	ldr	r2, [r7, #0]
 810ba24:	430a      	orrs	r2, r1
 810ba26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810ba28:	6878      	ldr	r0, [r7, #4]
 810ba2a:	f000 f811 	bl	810ba50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ba2e:	687b      	ldr	r3, [r7, #4]
 810ba30:	681b      	ldr	r3, [r3, #0]
 810ba32:	68fa      	ldr	r2, [r7, #12]
 810ba34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ba36:	687b      	ldr	r3, [r7, #4]
 810ba38:	2220      	movs	r2, #32
 810ba3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ba3e:	687b      	ldr	r3, [r7, #4]
 810ba40:	2200      	movs	r2, #0
 810ba42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810ba46:	2300      	movs	r3, #0
}
 810ba48:	4618      	mov	r0, r3
 810ba4a:	3710      	adds	r7, #16
 810ba4c:	46bd      	mov	sp, r7
 810ba4e:	bd80      	pop	{r7, pc}

0810ba50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810ba50:	b480      	push	{r7}
 810ba52:	b085      	sub	sp, #20
 810ba54:	af00      	add	r7, sp, #0
 810ba56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810ba58:	687b      	ldr	r3, [r7, #4]
 810ba5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810ba5c:	2b00      	cmp	r3, #0
 810ba5e:	d108      	bne.n	810ba72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810ba60:	687b      	ldr	r3, [r7, #4]
 810ba62:	2201      	movs	r2, #1
 810ba64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810ba68:	687b      	ldr	r3, [r7, #4]
 810ba6a:	2201      	movs	r2, #1
 810ba6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810ba70:	e031      	b.n	810bad6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810ba72:	2310      	movs	r3, #16
 810ba74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810ba76:	2310      	movs	r3, #16
 810ba78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810ba7a:	687b      	ldr	r3, [r7, #4]
 810ba7c:	681b      	ldr	r3, [r3, #0]
 810ba7e:	689b      	ldr	r3, [r3, #8]
 810ba80:	0e5b      	lsrs	r3, r3, #25
 810ba82:	b2db      	uxtb	r3, r3
 810ba84:	f003 0307 	and.w	r3, r3, #7
 810ba88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810ba8a:	687b      	ldr	r3, [r7, #4]
 810ba8c:	681b      	ldr	r3, [r3, #0]
 810ba8e:	689b      	ldr	r3, [r3, #8]
 810ba90:	0f5b      	lsrs	r3, r3, #29
 810ba92:	b2db      	uxtb	r3, r3
 810ba94:	f003 0307 	and.w	r3, r3, #7
 810ba98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810ba9a:	7bbb      	ldrb	r3, [r7, #14]
 810ba9c:	7b3a      	ldrb	r2, [r7, #12]
 810ba9e:	4911      	ldr	r1, [pc, #68]	@ (810bae4 <UARTEx_SetNbDataToProcess+0x94>)
 810baa0:	5c8a      	ldrb	r2, [r1, r2]
 810baa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810baa6:	7b3a      	ldrb	r2, [r7, #12]
 810baa8:	490f      	ldr	r1, [pc, #60]	@ (810bae8 <UARTEx_SetNbDataToProcess+0x98>)
 810baaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810baac:	fb93 f3f2 	sdiv	r3, r3, r2
 810bab0:	b29a      	uxth	r2, r3
 810bab2:	687b      	ldr	r3, [r7, #4]
 810bab4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810bab8:	7bfb      	ldrb	r3, [r7, #15]
 810baba:	7b7a      	ldrb	r2, [r7, #13]
 810babc:	4909      	ldr	r1, [pc, #36]	@ (810bae4 <UARTEx_SetNbDataToProcess+0x94>)
 810babe:	5c8a      	ldrb	r2, [r1, r2]
 810bac0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810bac4:	7b7a      	ldrb	r2, [r7, #13]
 810bac6:	4908      	ldr	r1, [pc, #32]	@ (810bae8 <UARTEx_SetNbDataToProcess+0x98>)
 810bac8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810baca:	fb93 f3f2 	sdiv	r3, r3, r2
 810bace:	b29a      	uxth	r2, r3
 810bad0:	687b      	ldr	r3, [r7, #4]
 810bad2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810bad6:	bf00      	nop
 810bad8:	3714      	adds	r7, #20
 810bada:	46bd      	mov	sp, r7
 810badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bae0:	4770      	bx	lr
 810bae2:	bf00      	nop
 810bae4:	08111eb4 	.word	0x08111eb4
 810bae8:	08111ebc 	.word	0x08111ebc

0810baec <arm_mat_trans_f32>:
 810baec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810baf0:	8802      	ldrh	r2, [r0, #0]
 810baf2:	884b      	ldrh	r3, [r1, #2]
 810baf4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810baf8:	684f      	ldr	r7, [r1, #4]
 810bafa:	8840      	ldrh	r0, [r0, #2]
 810bafc:	4293      	cmp	r3, r2
 810bafe:	b083      	sub	sp, #12
 810bb00:	d14c      	bne.n	810bb9c <arm_mat_trans_f32+0xb0>
 810bb02:	f8b1 e000 	ldrh.w	lr, [r1]
 810bb06:	4586      	cmp	lr, r0
 810bb08:	d148      	bne.n	810bb9c <arm_mat_trans_f32+0xb0>
 810bb0a:	ea4f 089e 	mov.w	r8, lr, lsr #2
 810bb0e:	009c      	lsls	r4, r3, #2
 810bb10:	f00e 0e03 	and.w	lr, lr, #3
 810bb14:	fb08 f904 	mul.w	r9, r8, r4
 810bb18:	ea4f 028e 	mov.w	r2, lr, lsl #2
 810bb1c:	011d      	lsls	r5, r3, #4
 810bb1e:	00db      	lsls	r3, r3, #3
 810bb20:	ea4f 0989 	mov.w	r9, r9, lsl #2
 810bb24:	eb07 0a04 	add.w	sl, r7, r4
 810bb28:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 810bb2c:	9201      	str	r2, [sp, #4]
 810bb2e:	9300      	str	r3, [sp, #0]
 810bb30:	463b      	mov	r3, r7
 810bb32:	f1b8 0f00 	cmp.w	r8, #0
 810bb36:	d01d      	beq.n	810bb74 <arm_mat_trans_f32+0x88>
 810bb38:	9900      	ldr	r1, [sp, #0]
 810bb3a:	f10c 0210 	add.w	r2, ip, #16
 810bb3e:	4439      	add	r1, r7
 810bb40:	4640      	mov	r0, r8
 810bb42:	f852 6c10 	ldr.w	r6, [r2, #-16]
 810bb46:	601e      	str	r6, [r3, #0]
 810bb48:	ed52 7a03 	vldr	s15, [r2, #-12]
 810bb4c:	191e      	adds	r6, r3, r4
 810bb4e:	edc6 7a00 	vstr	s15, [r6]
 810bb52:	f852 6c08 	ldr.w	r6, [r2, #-8]
 810bb56:	600e      	str	r6, [r1, #0]
 810bb58:	ed52 7a01 	vldr	s15, [r2, #-4]
 810bb5c:	190e      	adds	r6, r1, r4
 810bb5e:	3801      	subs	r0, #1
 810bb60:	442b      	add	r3, r5
 810bb62:	f102 0210 	add.w	r2, r2, #16
 810bb66:	edc6 7a00 	vstr	s15, [r6]
 810bb6a:	4429      	add	r1, r5
 810bb6c:	d1e9      	bne.n	810bb42 <arm_mat_trans_f32+0x56>
 810bb6e:	44dc      	add	ip, fp
 810bb70:	eb09 0307 	add.w	r3, r9, r7
 810bb74:	f1be 0f00 	cmp.w	lr, #0
 810bb78:	d009      	beq.n	810bb8e <arm_mat_trans_f32+0xa2>
 810bb7a:	4672      	mov	r2, lr
 810bb7c:	4661      	mov	r1, ip
 810bb7e:	f851 0b04 	ldr.w	r0, [r1], #4
 810bb82:	6018      	str	r0, [r3, #0]
 810bb84:	3a01      	subs	r2, #1
 810bb86:	4423      	add	r3, r4
 810bb88:	d1f9      	bne.n	810bb7e <arm_mat_trans_f32+0x92>
 810bb8a:	9b01      	ldr	r3, [sp, #4]
 810bb8c:	449c      	add	ip, r3
 810bb8e:	3704      	adds	r7, #4
 810bb90:	4557      	cmp	r7, sl
 810bb92:	d1cd      	bne.n	810bb30 <arm_mat_trans_f32+0x44>
 810bb94:	2000      	movs	r0, #0
 810bb96:	b003      	add	sp, #12
 810bb98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bb9c:	f06f 0002 	mvn.w	r0, #2
 810bba0:	e7f9      	b.n	810bb96 <arm_mat_trans_f32+0xaa>
 810bba2:	bf00      	nop

0810bba4 <arm_mat_sub_f32>:
 810bba4:	b4f0      	push	{r4, r5, r6, r7}
 810bba6:	e9d1 4700 	ldrd	r4, r7, [r1]
 810bbaa:	6803      	ldr	r3, [r0, #0]
 810bbac:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810bbb0:	6856      	ldr	r6, [r2, #4]
 810bbb2:	42a3      	cmp	r3, r4
 810bbb4:	d15d      	bne.n	810bc72 <arm_mat_sub_f32+0xce>
 810bbb6:	6812      	ldr	r2, [r2, #0]
 810bbb8:	4293      	cmp	r3, r2
 810bbba:	d15a      	bne.n	810bc72 <arm_mat_sub_f32+0xce>
 810bbbc:	8803      	ldrh	r3, [r0, #0]
 810bbbe:	8844      	ldrh	r4, [r0, #2]
 810bbc0:	fb04 f403 	mul.w	r4, r4, r3
 810bbc4:	08a5      	lsrs	r5, r4, #2
 810bbc6:	d032      	beq.n	810bc2e <arm_mat_sub_f32+0x8a>
 810bbc8:	f10c 0110 	add.w	r1, ip, #16
 810bbcc:	f107 0210 	add.w	r2, r7, #16
 810bbd0:	f106 0310 	add.w	r3, r6, #16
 810bbd4:	4628      	mov	r0, r5
 810bbd6:	ed12 7a04 	vldr	s14, [r2, #-16]
 810bbda:	ed51 7a04 	vldr	s15, [r1, #-16]
 810bbde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810bbe2:	3801      	subs	r0, #1
 810bbe4:	ed43 7a04 	vstr	s15, [r3, #-16]
 810bbe8:	ed12 7a03 	vldr	s14, [r2, #-12]
 810bbec:	ed51 7a03 	vldr	s15, [r1, #-12]
 810bbf0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810bbf4:	f101 0110 	add.w	r1, r1, #16
 810bbf8:	ed43 7a03 	vstr	s15, [r3, #-12]
 810bbfc:	ed12 7a02 	vldr	s14, [r2, #-8]
 810bc00:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 810bc04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810bc08:	f102 0210 	add.w	r2, r2, #16
 810bc0c:	ed43 7a02 	vstr	s15, [r3, #-8]
 810bc10:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 810bc14:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 810bc18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810bc1c:	f103 0310 	add.w	r3, r3, #16
 810bc20:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 810bc24:	d1d7      	bne.n	810bbd6 <arm_mat_sub_f32+0x32>
 810bc26:	012b      	lsls	r3, r5, #4
 810bc28:	449c      	add	ip, r3
 810bc2a:	441f      	add	r7, r3
 810bc2c:	441e      	add	r6, r3
 810bc2e:	f014 0403 	ands.w	r4, r4, #3
 810bc32:	d01b      	beq.n	810bc6c <arm_mat_sub_f32+0xc8>
 810bc34:	eddc 7a00 	vldr	s15, [ip]
 810bc38:	ed97 7a00 	vldr	s14, [r7]
 810bc3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810bc40:	3c01      	subs	r4, #1
 810bc42:	edc6 7a00 	vstr	s15, [r6]
 810bc46:	d011      	beq.n	810bc6c <arm_mat_sub_f32+0xc8>
 810bc48:	eddc 7a01 	vldr	s15, [ip, #4]
 810bc4c:	ed97 7a01 	vldr	s14, [r7, #4]
 810bc50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810bc54:	2c01      	cmp	r4, #1
 810bc56:	edc6 7a01 	vstr	s15, [r6, #4]
 810bc5a:	d007      	beq.n	810bc6c <arm_mat_sub_f32+0xc8>
 810bc5c:	eddc 7a02 	vldr	s15, [ip, #8]
 810bc60:	ed97 7a02 	vldr	s14, [r7, #8]
 810bc64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810bc68:	edc6 7a02 	vstr	s15, [r6, #8]
 810bc6c:	2000      	movs	r0, #0
 810bc6e:	bcf0      	pop	{r4, r5, r6, r7}
 810bc70:	4770      	bx	lr
 810bc72:	f06f 0002 	mvn.w	r0, #2
 810bc76:	e7fa      	b.n	810bc6e <arm_mat_sub_f32+0xca>

0810bc78 <arm_mat_mult_f32>:
 810bc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bc7c:	8845      	ldrh	r5, [r0, #2]
 810bc7e:	880b      	ldrh	r3, [r1, #0]
 810bc80:	8806      	ldrh	r6, [r0, #0]
 810bc82:	6847      	ldr	r7, [r0, #4]
 810bc84:	6854      	ldr	r4, [r2, #4]
 810bc86:	6848      	ldr	r0, [r1, #4]
 810bc88:	b08b      	sub	sp, #44	@ 0x2c
 810bc8a:	42ab      	cmp	r3, r5
 810bc8c:	9109      	str	r1, [sp, #36]	@ 0x24
 810bc8e:	9604      	str	r6, [sp, #16]
 810bc90:	8849      	ldrh	r1, [r1, #2]
 810bc92:	f040 808a 	bne.w	810bdaa <arm_mat_mult_f32+0x132>
 810bc96:	8815      	ldrh	r5, [r2, #0]
 810bc98:	42b5      	cmp	r5, r6
 810bc9a:	f040 8086 	bne.w	810bdaa <arm_mat_mult_f32+0x132>
 810bc9e:	8852      	ldrh	r2, [r2, #2]
 810bca0:	428a      	cmp	r2, r1
 810bca2:	f040 8082 	bne.w	810bdaa <arm_mat_mult_f32+0x132>
 810bca6:	ea4f 0893 	mov.w	r8, r3, lsr #2
 810bcaa:	1d01      	adds	r1, r0, #4
 810bcac:	0116      	lsls	r6, r2, #4
 810bcae:	9108      	str	r1, [sp, #32]
 810bcb0:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 810bcb4:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 810bcb8:	9101      	str	r1, [sp, #4]
 810bcba:	fb06 f108 	mul.w	r1, r6, r8
 810bcbe:	0095      	lsls	r5, r2, #2
 810bcc0:	9103      	str	r1, [sp, #12]
 810bcc2:	00d2      	lsls	r2, r2, #3
 810bcc4:	ea4f 018c 	mov.w	r1, ip, lsl #2
 810bcc8:	f003 0903 	and.w	r9, r3, #3
 810bccc:	009b      	lsls	r3, r3, #2
 810bcce:	f107 0b10 	add.w	fp, r7, #16
 810bcd2:	eb04 0a05 	add.w	sl, r4, r5
 810bcd6:	9107      	str	r1, [sp, #28]
 810bcd8:	9202      	str	r2, [sp, #8]
 810bcda:	9306      	str	r3, [sp, #24]
 810bcdc:	f1ab 0310 	sub.w	r3, fp, #16
 810bce0:	9305      	str	r3, [sp, #20]
 810bce2:	9b07      	ldr	r3, [sp, #28]
 810bce4:	f8dd e020 	ldr.w	lr, [sp, #32]
 810bce8:	eb03 0c0a 	add.w	ip, r3, sl
 810bcec:	eddf 7a31 	vldr	s15, [pc, #196]	@ 810bdb4 <arm_mat_mult_f32+0x13c>
 810bcf0:	f1b8 0f00 	cmp.w	r8, #0
 810bcf4:	d053      	beq.n	810bd9e <arm_mat_mult_f32+0x126>
 810bcf6:	9b02      	ldr	r3, [sp, #8]
 810bcf8:	4644      	mov	r4, r8
 810bcfa:	18c1      	adds	r1, r0, r3
 810bcfc:	4602      	mov	r2, r0
 810bcfe:	465b      	mov	r3, fp
 810bd00:	ed92 6a00 	vldr	s12, [r2]
 810bd04:	ed13 7a04 	vldr	s14, [r3, #-16]
 810bd08:	ed53 4a03 	vldr	s9, [r3, #-12]
 810bd0c:	ed53 6a02 	vldr	s13, [r3, #-8]
 810bd10:	ed91 5a00 	vldr	s10, [r1]
 810bd14:	ed53 5a01 	vldr	s11, [r3, #-4]
 810bd18:	1957      	adds	r7, r2, r5
 810bd1a:	ee27 7a06 	vmul.f32	s14, s14, s12
 810bd1e:	ed97 6a00 	vldr	s12, [r7]
 810bd22:	ee77 7a27 	vadd.f32	s15, s14, s15
 810bd26:	ee26 6a24 	vmul.f32	s12, s12, s9
 810bd2a:	194f      	adds	r7, r1, r5
 810bd2c:	ee36 6a27 	vadd.f32	s12, s12, s15
 810bd30:	ee26 7a85 	vmul.f32	s14, s13, s10
 810bd34:	edd7 7a00 	vldr	s15, [r7]
 810bd38:	ee37 7a06 	vadd.f32	s14, s14, s12
 810bd3c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 810bd40:	3c01      	subs	r4, #1
 810bd42:	4432      	add	r2, r6
 810bd44:	4431      	add	r1, r6
 810bd46:	ee77 7a87 	vadd.f32	s15, s15, s14
 810bd4a:	f103 0310 	add.w	r3, r3, #16
 810bd4e:	d1d7      	bne.n	810bd00 <arm_mat_mult_f32+0x88>
 810bd50:	9b03      	ldr	r3, [sp, #12]
 810bd52:	9a01      	ldr	r2, [sp, #4]
 810bd54:	4418      	add	r0, r3
 810bd56:	f1b9 0f00 	cmp.w	r9, #0
 810bd5a:	d00b      	beq.n	810bd74 <arm_mat_mult_f32+0xfc>
 810bd5c:	464b      	mov	r3, r9
 810bd5e:	edd0 6a00 	vldr	s13, [r0]
 810bd62:	ecb2 7a01 	vldmia	r2!, {s14}
 810bd66:	ee27 7a26 	vmul.f32	s14, s14, s13
 810bd6a:	3b01      	subs	r3, #1
 810bd6c:	4428      	add	r0, r5
 810bd6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 810bd72:	d1f4      	bne.n	810bd5e <arm_mat_mult_f32+0xe6>
 810bd74:	ecec 7a01 	vstmia	ip!, {s15}
 810bd78:	45d4      	cmp	ip, sl
 810bd7a:	4670      	mov	r0, lr
 810bd7c:	f10e 0e04 	add.w	lr, lr, #4
 810bd80:	d1b4      	bne.n	810bcec <arm_mat_mult_f32+0x74>
 810bd82:	9a01      	ldr	r2, [sp, #4]
 810bd84:	9b06      	ldr	r3, [sp, #24]
 810bd86:	4611      	mov	r1, r2
 810bd88:	4419      	add	r1, r3
 810bd8a:	449b      	add	fp, r3
 810bd8c:	9b04      	ldr	r3, [sp, #16]
 810bd8e:	9101      	str	r1, [sp, #4]
 810bd90:	3b01      	subs	r3, #1
 810bd92:	44aa      	add	sl, r5
 810bd94:	9304      	str	r3, [sp, #16]
 810bd96:	d004      	beq.n	810bda2 <arm_mat_mult_f32+0x12a>
 810bd98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810bd9a:	6858      	ldr	r0, [r3, #4]
 810bd9c:	e79e      	b.n	810bcdc <arm_mat_mult_f32+0x64>
 810bd9e:	9a05      	ldr	r2, [sp, #20]
 810bda0:	e7d9      	b.n	810bd56 <arm_mat_mult_f32+0xde>
 810bda2:	4618      	mov	r0, r3
 810bda4:	b00b      	add	sp, #44	@ 0x2c
 810bda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bdaa:	f06f 0002 	mvn.w	r0, #2
 810bdae:	b00b      	add	sp, #44	@ 0x2c
 810bdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bdb4:	00000000 	.word	0x00000000

0810bdb8 <arm_mat_inverse_f32>:
 810bdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bdbc:	8843      	ldrh	r3, [r0, #2]
 810bdbe:	8804      	ldrh	r4, [r0, #0]
 810bdc0:	684e      	ldr	r6, [r1, #4]
 810bdc2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 810bdc6:	b087      	sub	sp, #28
 810bdc8:	429c      	cmp	r4, r3
 810bdca:	9301      	str	r3, [sp, #4]
 810bdcc:	9603      	str	r6, [sp, #12]
 810bdce:	f040 80ea 	bne.w	810bfa6 <arm_mat_inverse_f32+0x1ee>
 810bdd2:	880a      	ldrh	r2, [r1, #0]
 810bdd4:	884b      	ldrh	r3, [r1, #2]
 810bdd6:	4293      	cmp	r3, r2
 810bdd8:	f040 80e5 	bne.w	810bfa6 <arm_mat_inverse_f32+0x1ee>
 810bddc:	429c      	cmp	r4, r3
 810bdde:	f040 80e2 	bne.w	810bfa6 <arm_mat_inverse_f32+0x1ee>
 810bde2:	9005      	str	r0, [sp, #20]
 810bde4:	b30c      	cbz	r4, 810be2a <arm_mat_inverse_f32+0x72>
 810bde6:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 810bdea:	1e67      	subs	r7, r4, #1
 810bdec:	f846 bb04 	str.w	fp, [r6], #4
 810bdf0:	d01b      	beq.n	810be2a <arm_mat_inverse_f32+0x72>
 810bdf2:	f04f 0801 	mov.w	r8, #1
 810bdf6:	00ba      	lsls	r2, r7, #2
 810bdf8:	eb06 0a02 	add.w	sl, r6, r2
 810bdfc:	ea4f 0588 	mov.w	r5, r8, lsl #2
 810be00:	4630      	mov	r0, r6
 810be02:	2100      	movs	r1, #0
 810be04:	f001 f9e2 	bl	810d1cc <memset>
 810be08:	eb0a 0605 	add.w	r6, sl, r5
 810be0c:	462a      	mov	r2, r5
 810be0e:	2100      	movs	r1, #0
 810be10:	4650      	mov	r0, sl
 810be12:	f1b8 0f00 	cmp.w	r8, #0
 810be16:	f000 80cb 	beq.w	810bfb0 <arm_mat_inverse_f32+0x1f8>
 810be1a:	f001 f9d7 	bl	810d1cc <memset>
 810be1e:	3f01      	subs	r7, #1
 810be20:	f108 0801 	add.w	r8, r8, #1
 810be24:	f846 bb04 	str.w	fp, [r6], #4
 810be28:	d1e5      	bne.n	810bdf6 <arm_mat_inverse_f32+0x3e>
 810be2a:	9b01      	ldr	r3, [sp, #4]
 810be2c:	2b00      	cmp	r3, #0
 810be2e:	f000 80b5 	beq.w	810bf9c <arm_mat_inverse_f32+0x1e4>
 810be32:	009d      	lsls	r5, r3, #2
 810be34:	eb09 0205 	add.w	r2, r9, r5
 810be38:	46cc      	mov	ip, r9
 810be3a:	9202      	str	r2, [sp, #8]
 810be3c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 810be40:	1d2a      	adds	r2, r5, #4
 810be42:	9204      	str	r2, [sp, #16]
 810be44:	462f      	mov	r7, r5
 810be46:	469e      	mov	lr, r3
 810be48:	2600      	movs	r6, #0
 810be4a:	9b02      	ldr	r3, [sp, #8]
 810be4c:	eddc 6a00 	vldr	s13, [ip]
 810be50:	42b4      	cmp	r4, r6
 810be52:	eba3 0b07 	sub.w	fp, r3, r7
 810be56:	f000 80a1 	beq.w	810bf9c <arm_mat_inverse_f32+0x1e4>
 810be5a:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 810bfc0 <arm_mat_inverse_f32+0x208>
 810be5e:	4632      	mov	r2, r6
 810be60:	4663      	mov	r3, ip
 810be62:	e00b      	b.n	810be7c <arm_mat_inverse_f32+0xc4>
 810be64:	eef4 7a47 	vcmp.f32	s15, s14
 810be68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810be6c:	f102 0201 	add.w	r2, r2, #1
 810be70:	bfc8      	it	gt
 810be72:	eeb0 7a67 	vmovgt.f32	s14, s15
 810be76:	42a2      	cmp	r2, r4
 810be78:	442b      	add	r3, r5
 810be7a:	d014      	beq.n	810bea6 <arm_mat_inverse_f32+0xee>
 810be7c:	edd3 7a00 	vldr	s15, [r3]
 810be80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810be84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810be88:	eeb1 6a67 	vneg.f32	s12, s15
 810be8c:	dcea      	bgt.n	810be64 <arm_mat_inverse_f32+0xac>
 810be8e:	eeb4 6a47 	vcmp.f32	s12, s14
 810be92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810be96:	f102 0201 	add.w	r2, r2, #1
 810be9a:	bfc8      	it	gt
 810be9c:	eeb0 7a46 	vmovgt.f32	s14, s12
 810bea0:	42a2      	cmp	r2, r4
 810bea2:	442b      	add	r3, r5
 810bea4:	d1ea      	bne.n	810be7c <arm_mat_inverse_f32+0xc4>
 810bea6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 810beaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810beae:	d075      	beq.n	810bf9c <arm_mat_inverse_f32+0x1e4>
 810beb0:	eef5 6a40 	vcmp.f32	s13, #0.0
 810beb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810beb8:	d070      	beq.n	810bf9c <arm_mat_inverse_f32+0x1e4>
 810beba:	4672      	mov	r2, lr
 810bebc:	4663      	mov	r3, ip
 810bebe:	ed93 7a00 	vldr	s14, [r3]
 810bec2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810bec6:	3a01      	subs	r2, #1
 810bec8:	ece3 7a01 	vstmia	r3!, {s15}
 810becc:	d1f7      	bne.n	810bebe <arm_mat_inverse_f32+0x106>
 810bece:	9901      	ldr	r1, [sp, #4]
 810bed0:	464b      	mov	r3, r9
 810bed2:	ed93 7a00 	vldr	s14, [r3]
 810bed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810beda:	3901      	subs	r1, #1
 810bedc:	ece3 7a01 	vstmia	r3!, {s15}
 810bee0:	d1f7      	bne.n	810bed2 <arm_mat_inverse_f32+0x11a>
 810bee2:	9803      	ldr	r0, [sp, #12]
 810bee4:	ea4f 0886 	mov.w	r8, r6, lsl #2
 810bee8:	42b1      	cmp	r1, r6
 810beea:	d039      	beq.n	810bf60 <arm_mat_inverse_f32+0x1a8>
 810beec:	eddb 6a00 	vldr	s13, [fp]
 810bef0:	465a      	mov	r2, fp
 810bef2:	4673      	mov	r3, lr
 810bef4:	46e2      	mov	sl, ip
 810bef6:	ecba 7a01 	vldmia	sl!, {s14}
 810befa:	edd2 7a00 	vldr	s15, [r2]
 810befe:	ee26 7a87 	vmul.f32	s14, s13, s14
 810bf02:	3b01      	subs	r3, #1
 810bf04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810bf08:	ece2 7a01 	vstmia	r2!, {s15}
 810bf0c:	d1f3      	bne.n	810bef6 <arm_mat_inverse_f32+0x13e>
 810bf0e:	9b01      	ldr	r3, [sp, #4]
 810bf10:	44bb      	add	fp, r7
 810bf12:	4602      	mov	r2, r0
 810bf14:	46ca      	mov	sl, r9
 810bf16:	ecba 7a01 	vldmia	sl!, {s14}
 810bf1a:	edd2 7a00 	vldr	s15, [r2]
 810bf1e:	ee26 7a87 	vmul.f32	s14, s13, s14
 810bf22:	3b01      	subs	r3, #1
 810bf24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810bf28:	ece2 7a01 	vstmia	r2!, {s15}
 810bf2c:	d1f3      	bne.n	810bf16 <arm_mat_inverse_f32+0x15e>
 810bf2e:	4428      	add	r0, r5
 810bf30:	3101      	adds	r1, #1
 810bf32:	428c      	cmp	r4, r1
 810bf34:	44c3      	add	fp, r8
 810bf36:	d1d7      	bne.n	810bee8 <arm_mat_inverse_f32+0x130>
 810bf38:	9b04      	ldr	r3, [sp, #16]
 810bf3a:	f1be 0e01 	subs.w	lr, lr, #1
 810bf3e:	f106 0601 	add.w	r6, r6, #1
 810bf42:	449c      	add	ip, r3
 810bf44:	f1a7 0704 	sub.w	r7, r7, #4
 810bf48:	44a9      	add	r9, r5
 810bf4a:	f47f af7e 	bne.w	810be4a <arm_mat_inverse_f32+0x92>
 810bf4e:	eef5 6a40 	vcmp.f32	s13, #0.0
 810bf52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810bf56:	d006      	beq.n	810bf66 <arm_mat_inverse_f32+0x1ae>
 810bf58:	2000      	movs	r0, #0
 810bf5a:	b007      	add	sp, #28
 810bf5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bf60:	44bb      	add	fp, r7
 810bf62:	4428      	add	r0, r5
 810bf64:	e7e4      	b.n	810bf30 <arm_mat_inverse_f32+0x178>
 810bf66:	9b05      	ldr	r3, [sp, #20]
 810bf68:	9a01      	ldr	r2, [sp, #4]
 810bf6a:	685b      	ldr	r3, [r3, #4]
 810bf6c:	edd3 7a00 	vldr	s15, [r3]
 810bf70:	eef5 7a40 	vcmp.f32	s15, #0.0
 810bf74:	fb02 f204 	mul.w	r2, r2, r4
 810bf78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810bf7c:	4614      	mov	r4, r2
 810bf7e:	bf08      	it	eq
 810bf80:	3304      	addeq	r3, #4
 810bf82:	d007      	beq.n	810bf94 <arm_mat_inverse_f32+0x1dc>
 810bf84:	e7e8      	b.n	810bf58 <arm_mat_inverse_f32+0x1a0>
 810bf86:	ecf3 7a01 	vldmia	r3!, {s15}
 810bf8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 810bf8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810bf92:	d1e1      	bne.n	810bf58 <arm_mat_inverse_f32+0x1a0>
 810bf94:	f10e 0e01 	add.w	lr, lr, #1
 810bf98:	4574      	cmp	r4, lr
 810bf9a:	d1f4      	bne.n	810bf86 <arm_mat_inverse_f32+0x1ce>
 810bf9c:	f06f 0004 	mvn.w	r0, #4
 810bfa0:	b007      	add	sp, #28
 810bfa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bfa6:	f06f 0002 	mvn.w	r0, #2
 810bfaa:	b007      	add	sp, #28
 810bfac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bfb0:	4656      	mov	r6, sl
 810bfb2:	3f01      	subs	r7, #1
 810bfb4:	f846 bb04 	str.w	fp, [r6], #4
 810bfb8:	f47f af1b 	bne.w	810bdf2 <arm_mat_inverse_f32+0x3a>
 810bfbc:	e735      	b.n	810be2a <arm_mat_inverse_f32+0x72>
 810bfbe:	bf00      	nop
 810bfc0:	00000000 	.word	0x00000000

0810bfc4 <arm_mat_init_f32>:
 810bfc4:	8001      	strh	r1, [r0, #0]
 810bfc6:	8042      	strh	r2, [r0, #2]
 810bfc8:	6043      	str	r3, [r0, #4]
 810bfca:	4770      	bx	lr

0810bfcc <arm_mat_add_f32>:
 810bfcc:	b4f0      	push	{r4, r5, r6, r7}
 810bfce:	e9d1 4700 	ldrd	r4, r7, [r1]
 810bfd2:	6803      	ldr	r3, [r0, #0]
 810bfd4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810bfd8:	6856      	ldr	r6, [r2, #4]
 810bfda:	42a3      	cmp	r3, r4
 810bfdc:	d15d      	bne.n	810c09a <arm_mat_add_f32+0xce>
 810bfde:	6812      	ldr	r2, [r2, #0]
 810bfe0:	4293      	cmp	r3, r2
 810bfe2:	d15a      	bne.n	810c09a <arm_mat_add_f32+0xce>
 810bfe4:	8803      	ldrh	r3, [r0, #0]
 810bfe6:	8844      	ldrh	r4, [r0, #2]
 810bfe8:	fb04 f403 	mul.w	r4, r4, r3
 810bfec:	08a5      	lsrs	r5, r4, #2
 810bfee:	d032      	beq.n	810c056 <arm_mat_add_f32+0x8a>
 810bff0:	f10c 0110 	add.w	r1, ip, #16
 810bff4:	f107 0210 	add.w	r2, r7, #16
 810bff8:	f106 0310 	add.w	r3, r6, #16
 810bffc:	4628      	mov	r0, r5
 810bffe:	ed12 7a04 	vldr	s14, [r2, #-16]
 810c002:	ed51 7a04 	vldr	s15, [r1, #-16]
 810c006:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c00a:	3801      	subs	r0, #1
 810c00c:	ed43 7a04 	vstr	s15, [r3, #-16]
 810c010:	ed12 7a03 	vldr	s14, [r2, #-12]
 810c014:	ed51 7a03 	vldr	s15, [r1, #-12]
 810c018:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c01c:	f101 0110 	add.w	r1, r1, #16
 810c020:	ed43 7a03 	vstr	s15, [r3, #-12]
 810c024:	ed12 7a02 	vldr	s14, [r2, #-8]
 810c028:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 810c02c:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c030:	f102 0210 	add.w	r2, r2, #16
 810c034:	ed43 7a02 	vstr	s15, [r3, #-8]
 810c038:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 810c03c:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 810c040:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c044:	f103 0310 	add.w	r3, r3, #16
 810c048:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 810c04c:	d1d7      	bne.n	810bffe <arm_mat_add_f32+0x32>
 810c04e:	012b      	lsls	r3, r5, #4
 810c050:	449c      	add	ip, r3
 810c052:	441f      	add	r7, r3
 810c054:	441e      	add	r6, r3
 810c056:	f014 0403 	ands.w	r4, r4, #3
 810c05a:	d01b      	beq.n	810c094 <arm_mat_add_f32+0xc8>
 810c05c:	edd7 7a00 	vldr	s15, [r7]
 810c060:	ed9c 7a00 	vldr	s14, [ip]
 810c064:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c068:	3c01      	subs	r4, #1
 810c06a:	edc6 7a00 	vstr	s15, [r6]
 810c06e:	d011      	beq.n	810c094 <arm_mat_add_f32+0xc8>
 810c070:	eddc 7a01 	vldr	s15, [ip, #4]
 810c074:	ed97 7a01 	vldr	s14, [r7, #4]
 810c078:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c07c:	2c01      	cmp	r4, #1
 810c07e:	edc6 7a01 	vstr	s15, [r6, #4]
 810c082:	d007      	beq.n	810c094 <arm_mat_add_f32+0xc8>
 810c084:	eddc 7a02 	vldr	s15, [ip, #8]
 810c088:	ed97 7a02 	vldr	s14, [r7, #8]
 810c08c:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c090:	edc6 7a02 	vstr	s15, [r6, #8]
 810c094:	2000      	movs	r0, #0
 810c096:	bcf0      	pop	{r4, r5, r6, r7}
 810c098:	4770      	bx	lr
 810c09a:	f06f 0002 	mvn.w	r0, #2
 810c09e:	e7fa      	b.n	810c096 <arm_mat_add_f32+0xca>

0810c0a0 <__cvt>:
 810c0a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810c0a4:	ec57 6b10 	vmov	r6, r7, d0
 810c0a8:	2f00      	cmp	r7, #0
 810c0aa:	460c      	mov	r4, r1
 810c0ac:	4619      	mov	r1, r3
 810c0ae:	463b      	mov	r3, r7
 810c0b0:	bfbb      	ittet	lt
 810c0b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 810c0b6:	461f      	movlt	r7, r3
 810c0b8:	2300      	movge	r3, #0
 810c0ba:	232d      	movlt	r3, #45	@ 0x2d
 810c0bc:	700b      	strb	r3, [r1, #0]
 810c0be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810c0c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 810c0c4:	4691      	mov	r9, r2
 810c0c6:	f023 0820 	bic.w	r8, r3, #32
 810c0ca:	bfbc      	itt	lt
 810c0cc:	4632      	movlt	r2, r6
 810c0ce:	4616      	movlt	r6, r2
 810c0d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810c0d4:	d005      	beq.n	810c0e2 <__cvt+0x42>
 810c0d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 810c0da:	d100      	bne.n	810c0de <__cvt+0x3e>
 810c0dc:	3401      	adds	r4, #1
 810c0de:	2102      	movs	r1, #2
 810c0e0:	e000      	b.n	810c0e4 <__cvt+0x44>
 810c0e2:	2103      	movs	r1, #3
 810c0e4:	ab03      	add	r3, sp, #12
 810c0e6:	9301      	str	r3, [sp, #4]
 810c0e8:	ab02      	add	r3, sp, #8
 810c0ea:	9300      	str	r3, [sp, #0]
 810c0ec:	ec47 6b10 	vmov	d0, r6, r7
 810c0f0:	4653      	mov	r3, sl
 810c0f2:	4622      	mov	r2, r4
 810c0f4:	f001 f988 	bl	810d408 <_dtoa_r>
 810c0f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 810c0fc:	4605      	mov	r5, r0
 810c0fe:	d119      	bne.n	810c134 <__cvt+0x94>
 810c100:	f019 0f01 	tst.w	r9, #1
 810c104:	d00e      	beq.n	810c124 <__cvt+0x84>
 810c106:	eb00 0904 	add.w	r9, r0, r4
 810c10a:	2200      	movs	r2, #0
 810c10c:	2300      	movs	r3, #0
 810c10e:	4630      	mov	r0, r6
 810c110:	4639      	mov	r1, r7
 810c112:	f7f4 fd61 	bl	8100bd8 <__aeabi_dcmpeq>
 810c116:	b108      	cbz	r0, 810c11c <__cvt+0x7c>
 810c118:	f8cd 900c 	str.w	r9, [sp, #12]
 810c11c:	2230      	movs	r2, #48	@ 0x30
 810c11e:	9b03      	ldr	r3, [sp, #12]
 810c120:	454b      	cmp	r3, r9
 810c122:	d31e      	bcc.n	810c162 <__cvt+0xc2>
 810c124:	9b03      	ldr	r3, [sp, #12]
 810c126:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810c128:	1b5b      	subs	r3, r3, r5
 810c12a:	4628      	mov	r0, r5
 810c12c:	6013      	str	r3, [r2, #0]
 810c12e:	b004      	add	sp, #16
 810c130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c134:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810c138:	eb00 0904 	add.w	r9, r0, r4
 810c13c:	d1e5      	bne.n	810c10a <__cvt+0x6a>
 810c13e:	7803      	ldrb	r3, [r0, #0]
 810c140:	2b30      	cmp	r3, #48	@ 0x30
 810c142:	d10a      	bne.n	810c15a <__cvt+0xba>
 810c144:	2200      	movs	r2, #0
 810c146:	2300      	movs	r3, #0
 810c148:	4630      	mov	r0, r6
 810c14a:	4639      	mov	r1, r7
 810c14c:	f7f4 fd44 	bl	8100bd8 <__aeabi_dcmpeq>
 810c150:	b918      	cbnz	r0, 810c15a <__cvt+0xba>
 810c152:	f1c4 0401 	rsb	r4, r4, #1
 810c156:	f8ca 4000 	str.w	r4, [sl]
 810c15a:	f8da 3000 	ldr.w	r3, [sl]
 810c15e:	4499      	add	r9, r3
 810c160:	e7d3      	b.n	810c10a <__cvt+0x6a>
 810c162:	1c59      	adds	r1, r3, #1
 810c164:	9103      	str	r1, [sp, #12]
 810c166:	701a      	strb	r2, [r3, #0]
 810c168:	e7d9      	b.n	810c11e <__cvt+0x7e>

0810c16a <__exponent>:
 810c16a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810c16c:	2900      	cmp	r1, #0
 810c16e:	bfba      	itte	lt
 810c170:	4249      	neglt	r1, r1
 810c172:	232d      	movlt	r3, #45	@ 0x2d
 810c174:	232b      	movge	r3, #43	@ 0x2b
 810c176:	2909      	cmp	r1, #9
 810c178:	7002      	strb	r2, [r0, #0]
 810c17a:	7043      	strb	r3, [r0, #1]
 810c17c:	dd29      	ble.n	810c1d2 <__exponent+0x68>
 810c17e:	f10d 0307 	add.w	r3, sp, #7
 810c182:	461d      	mov	r5, r3
 810c184:	270a      	movs	r7, #10
 810c186:	461a      	mov	r2, r3
 810c188:	fbb1 f6f7 	udiv	r6, r1, r7
 810c18c:	fb07 1416 	mls	r4, r7, r6, r1
 810c190:	3430      	adds	r4, #48	@ 0x30
 810c192:	f802 4c01 	strb.w	r4, [r2, #-1]
 810c196:	460c      	mov	r4, r1
 810c198:	2c63      	cmp	r4, #99	@ 0x63
 810c19a:	f103 33ff 	add.w	r3, r3, #4294967295
 810c19e:	4631      	mov	r1, r6
 810c1a0:	dcf1      	bgt.n	810c186 <__exponent+0x1c>
 810c1a2:	3130      	adds	r1, #48	@ 0x30
 810c1a4:	1e94      	subs	r4, r2, #2
 810c1a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 810c1aa:	1c41      	adds	r1, r0, #1
 810c1ac:	4623      	mov	r3, r4
 810c1ae:	42ab      	cmp	r3, r5
 810c1b0:	d30a      	bcc.n	810c1c8 <__exponent+0x5e>
 810c1b2:	f10d 0309 	add.w	r3, sp, #9
 810c1b6:	1a9b      	subs	r3, r3, r2
 810c1b8:	42ac      	cmp	r4, r5
 810c1ba:	bf88      	it	hi
 810c1bc:	2300      	movhi	r3, #0
 810c1be:	3302      	adds	r3, #2
 810c1c0:	4403      	add	r3, r0
 810c1c2:	1a18      	subs	r0, r3, r0
 810c1c4:	b003      	add	sp, #12
 810c1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810c1c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 810c1cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 810c1d0:	e7ed      	b.n	810c1ae <__exponent+0x44>
 810c1d2:	2330      	movs	r3, #48	@ 0x30
 810c1d4:	3130      	adds	r1, #48	@ 0x30
 810c1d6:	7083      	strb	r3, [r0, #2]
 810c1d8:	70c1      	strb	r1, [r0, #3]
 810c1da:	1d03      	adds	r3, r0, #4
 810c1dc:	e7f1      	b.n	810c1c2 <__exponent+0x58>
	...

0810c1e0 <_printf_float>:
 810c1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c1e4:	b08d      	sub	sp, #52	@ 0x34
 810c1e6:	460c      	mov	r4, r1
 810c1e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 810c1ec:	4616      	mov	r6, r2
 810c1ee:	461f      	mov	r7, r3
 810c1f0:	4605      	mov	r5, r0
 810c1f2:	f000 fff3 	bl	810d1dc <_localeconv_r>
 810c1f6:	6803      	ldr	r3, [r0, #0]
 810c1f8:	9304      	str	r3, [sp, #16]
 810c1fa:	4618      	mov	r0, r3
 810c1fc:	f7f4 f8c0 	bl	8100380 <strlen>
 810c200:	2300      	movs	r3, #0
 810c202:	930a      	str	r3, [sp, #40]	@ 0x28
 810c204:	f8d8 3000 	ldr.w	r3, [r8]
 810c208:	9005      	str	r0, [sp, #20]
 810c20a:	3307      	adds	r3, #7
 810c20c:	f023 0307 	bic.w	r3, r3, #7
 810c210:	f103 0208 	add.w	r2, r3, #8
 810c214:	f894 a018 	ldrb.w	sl, [r4, #24]
 810c218:	f8d4 b000 	ldr.w	fp, [r4]
 810c21c:	f8c8 2000 	str.w	r2, [r8]
 810c220:	e9d3 8900 	ldrd	r8, r9, [r3]
 810c224:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 810c228:	9307      	str	r3, [sp, #28]
 810c22a:	f8cd 8018 	str.w	r8, [sp, #24]
 810c22e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 810c232:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810c236:	4b9c      	ldr	r3, [pc, #624]	@ (810c4a8 <_printf_float+0x2c8>)
 810c238:	f04f 32ff 	mov.w	r2, #4294967295
 810c23c:	f7f4 fcfe 	bl	8100c3c <__aeabi_dcmpun>
 810c240:	bb70      	cbnz	r0, 810c2a0 <_printf_float+0xc0>
 810c242:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810c246:	4b98      	ldr	r3, [pc, #608]	@ (810c4a8 <_printf_float+0x2c8>)
 810c248:	f04f 32ff 	mov.w	r2, #4294967295
 810c24c:	f7f4 fcd8 	bl	8100c00 <__aeabi_dcmple>
 810c250:	bb30      	cbnz	r0, 810c2a0 <_printf_float+0xc0>
 810c252:	2200      	movs	r2, #0
 810c254:	2300      	movs	r3, #0
 810c256:	4640      	mov	r0, r8
 810c258:	4649      	mov	r1, r9
 810c25a:	f7f4 fcc7 	bl	8100bec <__aeabi_dcmplt>
 810c25e:	b110      	cbz	r0, 810c266 <_printf_float+0x86>
 810c260:	232d      	movs	r3, #45	@ 0x2d
 810c262:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810c266:	4a91      	ldr	r2, [pc, #580]	@ (810c4ac <_printf_float+0x2cc>)
 810c268:	4b91      	ldr	r3, [pc, #580]	@ (810c4b0 <_printf_float+0x2d0>)
 810c26a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 810c26e:	bf94      	ite	ls
 810c270:	4690      	movls	r8, r2
 810c272:	4698      	movhi	r8, r3
 810c274:	2303      	movs	r3, #3
 810c276:	6123      	str	r3, [r4, #16]
 810c278:	f02b 0304 	bic.w	r3, fp, #4
 810c27c:	6023      	str	r3, [r4, #0]
 810c27e:	f04f 0900 	mov.w	r9, #0
 810c282:	9700      	str	r7, [sp, #0]
 810c284:	4633      	mov	r3, r6
 810c286:	aa0b      	add	r2, sp, #44	@ 0x2c
 810c288:	4621      	mov	r1, r4
 810c28a:	4628      	mov	r0, r5
 810c28c:	f000 f9d2 	bl	810c634 <_printf_common>
 810c290:	3001      	adds	r0, #1
 810c292:	f040 808d 	bne.w	810c3b0 <_printf_float+0x1d0>
 810c296:	f04f 30ff 	mov.w	r0, #4294967295
 810c29a:	b00d      	add	sp, #52	@ 0x34
 810c29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c2a0:	4642      	mov	r2, r8
 810c2a2:	464b      	mov	r3, r9
 810c2a4:	4640      	mov	r0, r8
 810c2a6:	4649      	mov	r1, r9
 810c2a8:	f7f4 fcc8 	bl	8100c3c <__aeabi_dcmpun>
 810c2ac:	b140      	cbz	r0, 810c2c0 <_printf_float+0xe0>
 810c2ae:	464b      	mov	r3, r9
 810c2b0:	2b00      	cmp	r3, #0
 810c2b2:	bfbc      	itt	lt
 810c2b4:	232d      	movlt	r3, #45	@ 0x2d
 810c2b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 810c2ba:	4a7e      	ldr	r2, [pc, #504]	@ (810c4b4 <_printf_float+0x2d4>)
 810c2bc:	4b7e      	ldr	r3, [pc, #504]	@ (810c4b8 <_printf_float+0x2d8>)
 810c2be:	e7d4      	b.n	810c26a <_printf_float+0x8a>
 810c2c0:	6863      	ldr	r3, [r4, #4]
 810c2c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 810c2c6:	9206      	str	r2, [sp, #24]
 810c2c8:	1c5a      	adds	r2, r3, #1
 810c2ca:	d13b      	bne.n	810c344 <_printf_float+0x164>
 810c2cc:	2306      	movs	r3, #6
 810c2ce:	6063      	str	r3, [r4, #4]
 810c2d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 810c2d4:	2300      	movs	r3, #0
 810c2d6:	6022      	str	r2, [r4, #0]
 810c2d8:	9303      	str	r3, [sp, #12]
 810c2da:	ab0a      	add	r3, sp, #40	@ 0x28
 810c2dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 810c2e0:	ab09      	add	r3, sp, #36	@ 0x24
 810c2e2:	9300      	str	r3, [sp, #0]
 810c2e4:	6861      	ldr	r1, [r4, #4]
 810c2e6:	ec49 8b10 	vmov	d0, r8, r9
 810c2ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 810c2ee:	4628      	mov	r0, r5
 810c2f0:	f7ff fed6 	bl	810c0a0 <__cvt>
 810c2f4:	9b06      	ldr	r3, [sp, #24]
 810c2f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810c2f8:	2b47      	cmp	r3, #71	@ 0x47
 810c2fa:	4680      	mov	r8, r0
 810c2fc:	d129      	bne.n	810c352 <_printf_float+0x172>
 810c2fe:	1cc8      	adds	r0, r1, #3
 810c300:	db02      	blt.n	810c308 <_printf_float+0x128>
 810c302:	6863      	ldr	r3, [r4, #4]
 810c304:	4299      	cmp	r1, r3
 810c306:	dd41      	ble.n	810c38c <_printf_float+0x1ac>
 810c308:	f1aa 0a02 	sub.w	sl, sl, #2
 810c30c:	fa5f fa8a 	uxtb.w	sl, sl
 810c310:	3901      	subs	r1, #1
 810c312:	4652      	mov	r2, sl
 810c314:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 810c318:	9109      	str	r1, [sp, #36]	@ 0x24
 810c31a:	f7ff ff26 	bl	810c16a <__exponent>
 810c31e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810c320:	1813      	adds	r3, r2, r0
 810c322:	2a01      	cmp	r2, #1
 810c324:	4681      	mov	r9, r0
 810c326:	6123      	str	r3, [r4, #16]
 810c328:	dc02      	bgt.n	810c330 <_printf_float+0x150>
 810c32a:	6822      	ldr	r2, [r4, #0]
 810c32c:	07d2      	lsls	r2, r2, #31
 810c32e:	d501      	bpl.n	810c334 <_printf_float+0x154>
 810c330:	3301      	adds	r3, #1
 810c332:	6123      	str	r3, [r4, #16]
 810c334:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 810c338:	2b00      	cmp	r3, #0
 810c33a:	d0a2      	beq.n	810c282 <_printf_float+0xa2>
 810c33c:	232d      	movs	r3, #45	@ 0x2d
 810c33e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810c342:	e79e      	b.n	810c282 <_printf_float+0xa2>
 810c344:	9a06      	ldr	r2, [sp, #24]
 810c346:	2a47      	cmp	r2, #71	@ 0x47
 810c348:	d1c2      	bne.n	810c2d0 <_printf_float+0xf0>
 810c34a:	2b00      	cmp	r3, #0
 810c34c:	d1c0      	bne.n	810c2d0 <_printf_float+0xf0>
 810c34e:	2301      	movs	r3, #1
 810c350:	e7bd      	b.n	810c2ce <_printf_float+0xee>
 810c352:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810c356:	d9db      	bls.n	810c310 <_printf_float+0x130>
 810c358:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 810c35c:	d118      	bne.n	810c390 <_printf_float+0x1b0>
 810c35e:	2900      	cmp	r1, #0
 810c360:	6863      	ldr	r3, [r4, #4]
 810c362:	dd0b      	ble.n	810c37c <_printf_float+0x19c>
 810c364:	6121      	str	r1, [r4, #16]
 810c366:	b913      	cbnz	r3, 810c36e <_printf_float+0x18e>
 810c368:	6822      	ldr	r2, [r4, #0]
 810c36a:	07d0      	lsls	r0, r2, #31
 810c36c:	d502      	bpl.n	810c374 <_printf_float+0x194>
 810c36e:	3301      	adds	r3, #1
 810c370:	440b      	add	r3, r1
 810c372:	6123      	str	r3, [r4, #16]
 810c374:	65a1      	str	r1, [r4, #88]	@ 0x58
 810c376:	f04f 0900 	mov.w	r9, #0
 810c37a:	e7db      	b.n	810c334 <_printf_float+0x154>
 810c37c:	b913      	cbnz	r3, 810c384 <_printf_float+0x1a4>
 810c37e:	6822      	ldr	r2, [r4, #0]
 810c380:	07d2      	lsls	r2, r2, #31
 810c382:	d501      	bpl.n	810c388 <_printf_float+0x1a8>
 810c384:	3302      	adds	r3, #2
 810c386:	e7f4      	b.n	810c372 <_printf_float+0x192>
 810c388:	2301      	movs	r3, #1
 810c38a:	e7f2      	b.n	810c372 <_printf_float+0x192>
 810c38c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 810c390:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810c392:	4299      	cmp	r1, r3
 810c394:	db05      	blt.n	810c3a2 <_printf_float+0x1c2>
 810c396:	6823      	ldr	r3, [r4, #0]
 810c398:	6121      	str	r1, [r4, #16]
 810c39a:	07d8      	lsls	r0, r3, #31
 810c39c:	d5ea      	bpl.n	810c374 <_printf_float+0x194>
 810c39e:	1c4b      	adds	r3, r1, #1
 810c3a0:	e7e7      	b.n	810c372 <_printf_float+0x192>
 810c3a2:	2900      	cmp	r1, #0
 810c3a4:	bfd4      	ite	le
 810c3a6:	f1c1 0202 	rsble	r2, r1, #2
 810c3aa:	2201      	movgt	r2, #1
 810c3ac:	4413      	add	r3, r2
 810c3ae:	e7e0      	b.n	810c372 <_printf_float+0x192>
 810c3b0:	6823      	ldr	r3, [r4, #0]
 810c3b2:	055a      	lsls	r2, r3, #21
 810c3b4:	d407      	bmi.n	810c3c6 <_printf_float+0x1e6>
 810c3b6:	6923      	ldr	r3, [r4, #16]
 810c3b8:	4642      	mov	r2, r8
 810c3ba:	4631      	mov	r1, r6
 810c3bc:	4628      	mov	r0, r5
 810c3be:	47b8      	blx	r7
 810c3c0:	3001      	adds	r0, #1
 810c3c2:	d12b      	bne.n	810c41c <_printf_float+0x23c>
 810c3c4:	e767      	b.n	810c296 <_printf_float+0xb6>
 810c3c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810c3ca:	f240 80dd 	bls.w	810c588 <_printf_float+0x3a8>
 810c3ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810c3d2:	2200      	movs	r2, #0
 810c3d4:	2300      	movs	r3, #0
 810c3d6:	f7f4 fbff 	bl	8100bd8 <__aeabi_dcmpeq>
 810c3da:	2800      	cmp	r0, #0
 810c3dc:	d033      	beq.n	810c446 <_printf_float+0x266>
 810c3de:	4a37      	ldr	r2, [pc, #220]	@ (810c4bc <_printf_float+0x2dc>)
 810c3e0:	2301      	movs	r3, #1
 810c3e2:	4631      	mov	r1, r6
 810c3e4:	4628      	mov	r0, r5
 810c3e6:	47b8      	blx	r7
 810c3e8:	3001      	adds	r0, #1
 810c3ea:	f43f af54 	beq.w	810c296 <_printf_float+0xb6>
 810c3ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 810c3f2:	4543      	cmp	r3, r8
 810c3f4:	db02      	blt.n	810c3fc <_printf_float+0x21c>
 810c3f6:	6823      	ldr	r3, [r4, #0]
 810c3f8:	07d8      	lsls	r0, r3, #31
 810c3fa:	d50f      	bpl.n	810c41c <_printf_float+0x23c>
 810c3fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810c400:	4631      	mov	r1, r6
 810c402:	4628      	mov	r0, r5
 810c404:	47b8      	blx	r7
 810c406:	3001      	adds	r0, #1
 810c408:	f43f af45 	beq.w	810c296 <_printf_float+0xb6>
 810c40c:	f04f 0900 	mov.w	r9, #0
 810c410:	f108 38ff 	add.w	r8, r8, #4294967295
 810c414:	f104 0a1a 	add.w	sl, r4, #26
 810c418:	45c8      	cmp	r8, r9
 810c41a:	dc09      	bgt.n	810c430 <_printf_float+0x250>
 810c41c:	6823      	ldr	r3, [r4, #0]
 810c41e:	079b      	lsls	r3, r3, #30
 810c420:	f100 8103 	bmi.w	810c62a <_printf_float+0x44a>
 810c424:	68e0      	ldr	r0, [r4, #12]
 810c426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810c428:	4298      	cmp	r0, r3
 810c42a:	bfb8      	it	lt
 810c42c:	4618      	movlt	r0, r3
 810c42e:	e734      	b.n	810c29a <_printf_float+0xba>
 810c430:	2301      	movs	r3, #1
 810c432:	4652      	mov	r2, sl
 810c434:	4631      	mov	r1, r6
 810c436:	4628      	mov	r0, r5
 810c438:	47b8      	blx	r7
 810c43a:	3001      	adds	r0, #1
 810c43c:	f43f af2b 	beq.w	810c296 <_printf_float+0xb6>
 810c440:	f109 0901 	add.w	r9, r9, #1
 810c444:	e7e8      	b.n	810c418 <_printf_float+0x238>
 810c446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c448:	2b00      	cmp	r3, #0
 810c44a:	dc39      	bgt.n	810c4c0 <_printf_float+0x2e0>
 810c44c:	4a1b      	ldr	r2, [pc, #108]	@ (810c4bc <_printf_float+0x2dc>)
 810c44e:	2301      	movs	r3, #1
 810c450:	4631      	mov	r1, r6
 810c452:	4628      	mov	r0, r5
 810c454:	47b8      	blx	r7
 810c456:	3001      	adds	r0, #1
 810c458:	f43f af1d 	beq.w	810c296 <_printf_float+0xb6>
 810c45c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 810c460:	ea59 0303 	orrs.w	r3, r9, r3
 810c464:	d102      	bne.n	810c46c <_printf_float+0x28c>
 810c466:	6823      	ldr	r3, [r4, #0]
 810c468:	07d9      	lsls	r1, r3, #31
 810c46a:	d5d7      	bpl.n	810c41c <_printf_float+0x23c>
 810c46c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810c470:	4631      	mov	r1, r6
 810c472:	4628      	mov	r0, r5
 810c474:	47b8      	blx	r7
 810c476:	3001      	adds	r0, #1
 810c478:	f43f af0d 	beq.w	810c296 <_printf_float+0xb6>
 810c47c:	f04f 0a00 	mov.w	sl, #0
 810c480:	f104 0b1a 	add.w	fp, r4, #26
 810c484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c486:	425b      	negs	r3, r3
 810c488:	4553      	cmp	r3, sl
 810c48a:	dc01      	bgt.n	810c490 <_printf_float+0x2b0>
 810c48c:	464b      	mov	r3, r9
 810c48e:	e793      	b.n	810c3b8 <_printf_float+0x1d8>
 810c490:	2301      	movs	r3, #1
 810c492:	465a      	mov	r2, fp
 810c494:	4631      	mov	r1, r6
 810c496:	4628      	mov	r0, r5
 810c498:	47b8      	blx	r7
 810c49a:	3001      	adds	r0, #1
 810c49c:	f43f aefb 	beq.w	810c296 <_printf_float+0xb6>
 810c4a0:	f10a 0a01 	add.w	sl, sl, #1
 810c4a4:	e7ee      	b.n	810c484 <_printf_float+0x2a4>
 810c4a6:	bf00      	nop
 810c4a8:	7fefffff 	.word	0x7fefffff
 810c4ac:	08111ec4 	.word	0x08111ec4
 810c4b0:	08111ec8 	.word	0x08111ec8
 810c4b4:	08111ecc 	.word	0x08111ecc
 810c4b8:	08111ed0 	.word	0x08111ed0
 810c4bc:	08111ed4 	.word	0x08111ed4
 810c4c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810c4c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810c4c6:	4553      	cmp	r3, sl
 810c4c8:	bfa8      	it	ge
 810c4ca:	4653      	movge	r3, sl
 810c4cc:	2b00      	cmp	r3, #0
 810c4ce:	4699      	mov	r9, r3
 810c4d0:	dc36      	bgt.n	810c540 <_printf_float+0x360>
 810c4d2:	f04f 0b00 	mov.w	fp, #0
 810c4d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810c4da:	f104 021a 	add.w	r2, r4, #26
 810c4de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810c4e0:	9306      	str	r3, [sp, #24]
 810c4e2:	eba3 0309 	sub.w	r3, r3, r9
 810c4e6:	455b      	cmp	r3, fp
 810c4e8:	dc31      	bgt.n	810c54e <_printf_float+0x36e>
 810c4ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c4ec:	459a      	cmp	sl, r3
 810c4ee:	dc3a      	bgt.n	810c566 <_printf_float+0x386>
 810c4f0:	6823      	ldr	r3, [r4, #0]
 810c4f2:	07da      	lsls	r2, r3, #31
 810c4f4:	d437      	bmi.n	810c566 <_printf_float+0x386>
 810c4f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c4f8:	ebaa 0903 	sub.w	r9, sl, r3
 810c4fc:	9b06      	ldr	r3, [sp, #24]
 810c4fe:	ebaa 0303 	sub.w	r3, sl, r3
 810c502:	4599      	cmp	r9, r3
 810c504:	bfa8      	it	ge
 810c506:	4699      	movge	r9, r3
 810c508:	f1b9 0f00 	cmp.w	r9, #0
 810c50c:	dc33      	bgt.n	810c576 <_printf_float+0x396>
 810c50e:	f04f 0800 	mov.w	r8, #0
 810c512:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810c516:	f104 0b1a 	add.w	fp, r4, #26
 810c51a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c51c:	ebaa 0303 	sub.w	r3, sl, r3
 810c520:	eba3 0309 	sub.w	r3, r3, r9
 810c524:	4543      	cmp	r3, r8
 810c526:	f77f af79 	ble.w	810c41c <_printf_float+0x23c>
 810c52a:	2301      	movs	r3, #1
 810c52c:	465a      	mov	r2, fp
 810c52e:	4631      	mov	r1, r6
 810c530:	4628      	mov	r0, r5
 810c532:	47b8      	blx	r7
 810c534:	3001      	adds	r0, #1
 810c536:	f43f aeae 	beq.w	810c296 <_printf_float+0xb6>
 810c53a:	f108 0801 	add.w	r8, r8, #1
 810c53e:	e7ec      	b.n	810c51a <_printf_float+0x33a>
 810c540:	4642      	mov	r2, r8
 810c542:	4631      	mov	r1, r6
 810c544:	4628      	mov	r0, r5
 810c546:	47b8      	blx	r7
 810c548:	3001      	adds	r0, #1
 810c54a:	d1c2      	bne.n	810c4d2 <_printf_float+0x2f2>
 810c54c:	e6a3      	b.n	810c296 <_printf_float+0xb6>
 810c54e:	2301      	movs	r3, #1
 810c550:	4631      	mov	r1, r6
 810c552:	4628      	mov	r0, r5
 810c554:	9206      	str	r2, [sp, #24]
 810c556:	47b8      	blx	r7
 810c558:	3001      	adds	r0, #1
 810c55a:	f43f ae9c 	beq.w	810c296 <_printf_float+0xb6>
 810c55e:	9a06      	ldr	r2, [sp, #24]
 810c560:	f10b 0b01 	add.w	fp, fp, #1
 810c564:	e7bb      	b.n	810c4de <_printf_float+0x2fe>
 810c566:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810c56a:	4631      	mov	r1, r6
 810c56c:	4628      	mov	r0, r5
 810c56e:	47b8      	blx	r7
 810c570:	3001      	adds	r0, #1
 810c572:	d1c0      	bne.n	810c4f6 <_printf_float+0x316>
 810c574:	e68f      	b.n	810c296 <_printf_float+0xb6>
 810c576:	9a06      	ldr	r2, [sp, #24]
 810c578:	464b      	mov	r3, r9
 810c57a:	4442      	add	r2, r8
 810c57c:	4631      	mov	r1, r6
 810c57e:	4628      	mov	r0, r5
 810c580:	47b8      	blx	r7
 810c582:	3001      	adds	r0, #1
 810c584:	d1c3      	bne.n	810c50e <_printf_float+0x32e>
 810c586:	e686      	b.n	810c296 <_printf_float+0xb6>
 810c588:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810c58c:	f1ba 0f01 	cmp.w	sl, #1
 810c590:	dc01      	bgt.n	810c596 <_printf_float+0x3b6>
 810c592:	07db      	lsls	r3, r3, #31
 810c594:	d536      	bpl.n	810c604 <_printf_float+0x424>
 810c596:	2301      	movs	r3, #1
 810c598:	4642      	mov	r2, r8
 810c59a:	4631      	mov	r1, r6
 810c59c:	4628      	mov	r0, r5
 810c59e:	47b8      	blx	r7
 810c5a0:	3001      	adds	r0, #1
 810c5a2:	f43f ae78 	beq.w	810c296 <_printf_float+0xb6>
 810c5a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810c5aa:	4631      	mov	r1, r6
 810c5ac:	4628      	mov	r0, r5
 810c5ae:	47b8      	blx	r7
 810c5b0:	3001      	adds	r0, #1
 810c5b2:	f43f ae70 	beq.w	810c296 <_printf_float+0xb6>
 810c5b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810c5ba:	2200      	movs	r2, #0
 810c5bc:	2300      	movs	r3, #0
 810c5be:	f10a 3aff 	add.w	sl, sl, #4294967295
 810c5c2:	f7f4 fb09 	bl	8100bd8 <__aeabi_dcmpeq>
 810c5c6:	b9c0      	cbnz	r0, 810c5fa <_printf_float+0x41a>
 810c5c8:	4653      	mov	r3, sl
 810c5ca:	f108 0201 	add.w	r2, r8, #1
 810c5ce:	4631      	mov	r1, r6
 810c5d0:	4628      	mov	r0, r5
 810c5d2:	47b8      	blx	r7
 810c5d4:	3001      	adds	r0, #1
 810c5d6:	d10c      	bne.n	810c5f2 <_printf_float+0x412>
 810c5d8:	e65d      	b.n	810c296 <_printf_float+0xb6>
 810c5da:	2301      	movs	r3, #1
 810c5dc:	465a      	mov	r2, fp
 810c5de:	4631      	mov	r1, r6
 810c5e0:	4628      	mov	r0, r5
 810c5e2:	47b8      	blx	r7
 810c5e4:	3001      	adds	r0, #1
 810c5e6:	f43f ae56 	beq.w	810c296 <_printf_float+0xb6>
 810c5ea:	f108 0801 	add.w	r8, r8, #1
 810c5ee:	45d0      	cmp	r8, sl
 810c5f0:	dbf3      	blt.n	810c5da <_printf_float+0x3fa>
 810c5f2:	464b      	mov	r3, r9
 810c5f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 810c5f8:	e6df      	b.n	810c3ba <_printf_float+0x1da>
 810c5fa:	f04f 0800 	mov.w	r8, #0
 810c5fe:	f104 0b1a 	add.w	fp, r4, #26
 810c602:	e7f4      	b.n	810c5ee <_printf_float+0x40e>
 810c604:	2301      	movs	r3, #1
 810c606:	4642      	mov	r2, r8
 810c608:	e7e1      	b.n	810c5ce <_printf_float+0x3ee>
 810c60a:	2301      	movs	r3, #1
 810c60c:	464a      	mov	r2, r9
 810c60e:	4631      	mov	r1, r6
 810c610:	4628      	mov	r0, r5
 810c612:	47b8      	blx	r7
 810c614:	3001      	adds	r0, #1
 810c616:	f43f ae3e 	beq.w	810c296 <_printf_float+0xb6>
 810c61a:	f108 0801 	add.w	r8, r8, #1
 810c61e:	68e3      	ldr	r3, [r4, #12]
 810c620:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810c622:	1a5b      	subs	r3, r3, r1
 810c624:	4543      	cmp	r3, r8
 810c626:	dcf0      	bgt.n	810c60a <_printf_float+0x42a>
 810c628:	e6fc      	b.n	810c424 <_printf_float+0x244>
 810c62a:	f04f 0800 	mov.w	r8, #0
 810c62e:	f104 0919 	add.w	r9, r4, #25
 810c632:	e7f4      	b.n	810c61e <_printf_float+0x43e>

0810c634 <_printf_common>:
 810c634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c638:	4616      	mov	r6, r2
 810c63a:	4698      	mov	r8, r3
 810c63c:	688a      	ldr	r2, [r1, #8]
 810c63e:	690b      	ldr	r3, [r1, #16]
 810c640:	f8dd 9020 	ldr.w	r9, [sp, #32]
 810c644:	4293      	cmp	r3, r2
 810c646:	bfb8      	it	lt
 810c648:	4613      	movlt	r3, r2
 810c64a:	6033      	str	r3, [r6, #0]
 810c64c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 810c650:	4607      	mov	r7, r0
 810c652:	460c      	mov	r4, r1
 810c654:	b10a      	cbz	r2, 810c65a <_printf_common+0x26>
 810c656:	3301      	adds	r3, #1
 810c658:	6033      	str	r3, [r6, #0]
 810c65a:	6823      	ldr	r3, [r4, #0]
 810c65c:	0699      	lsls	r1, r3, #26
 810c65e:	bf42      	ittt	mi
 810c660:	6833      	ldrmi	r3, [r6, #0]
 810c662:	3302      	addmi	r3, #2
 810c664:	6033      	strmi	r3, [r6, #0]
 810c666:	6825      	ldr	r5, [r4, #0]
 810c668:	f015 0506 	ands.w	r5, r5, #6
 810c66c:	d106      	bne.n	810c67c <_printf_common+0x48>
 810c66e:	f104 0a19 	add.w	sl, r4, #25
 810c672:	68e3      	ldr	r3, [r4, #12]
 810c674:	6832      	ldr	r2, [r6, #0]
 810c676:	1a9b      	subs	r3, r3, r2
 810c678:	42ab      	cmp	r3, r5
 810c67a:	dc26      	bgt.n	810c6ca <_printf_common+0x96>
 810c67c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 810c680:	6822      	ldr	r2, [r4, #0]
 810c682:	3b00      	subs	r3, #0
 810c684:	bf18      	it	ne
 810c686:	2301      	movne	r3, #1
 810c688:	0692      	lsls	r2, r2, #26
 810c68a:	d42b      	bmi.n	810c6e4 <_printf_common+0xb0>
 810c68c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 810c690:	4641      	mov	r1, r8
 810c692:	4638      	mov	r0, r7
 810c694:	47c8      	blx	r9
 810c696:	3001      	adds	r0, #1
 810c698:	d01e      	beq.n	810c6d8 <_printf_common+0xa4>
 810c69a:	6823      	ldr	r3, [r4, #0]
 810c69c:	6922      	ldr	r2, [r4, #16]
 810c69e:	f003 0306 	and.w	r3, r3, #6
 810c6a2:	2b04      	cmp	r3, #4
 810c6a4:	bf02      	ittt	eq
 810c6a6:	68e5      	ldreq	r5, [r4, #12]
 810c6a8:	6833      	ldreq	r3, [r6, #0]
 810c6aa:	1aed      	subeq	r5, r5, r3
 810c6ac:	68a3      	ldr	r3, [r4, #8]
 810c6ae:	bf0c      	ite	eq
 810c6b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810c6b4:	2500      	movne	r5, #0
 810c6b6:	4293      	cmp	r3, r2
 810c6b8:	bfc4      	itt	gt
 810c6ba:	1a9b      	subgt	r3, r3, r2
 810c6bc:	18ed      	addgt	r5, r5, r3
 810c6be:	2600      	movs	r6, #0
 810c6c0:	341a      	adds	r4, #26
 810c6c2:	42b5      	cmp	r5, r6
 810c6c4:	d11a      	bne.n	810c6fc <_printf_common+0xc8>
 810c6c6:	2000      	movs	r0, #0
 810c6c8:	e008      	b.n	810c6dc <_printf_common+0xa8>
 810c6ca:	2301      	movs	r3, #1
 810c6cc:	4652      	mov	r2, sl
 810c6ce:	4641      	mov	r1, r8
 810c6d0:	4638      	mov	r0, r7
 810c6d2:	47c8      	blx	r9
 810c6d4:	3001      	adds	r0, #1
 810c6d6:	d103      	bne.n	810c6e0 <_printf_common+0xac>
 810c6d8:	f04f 30ff 	mov.w	r0, #4294967295
 810c6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c6e0:	3501      	adds	r5, #1
 810c6e2:	e7c6      	b.n	810c672 <_printf_common+0x3e>
 810c6e4:	18e1      	adds	r1, r4, r3
 810c6e6:	1c5a      	adds	r2, r3, #1
 810c6e8:	2030      	movs	r0, #48	@ 0x30
 810c6ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 810c6ee:	4422      	add	r2, r4
 810c6f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 810c6f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 810c6f8:	3302      	adds	r3, #2
 810c6fa:	e7c7      	b.n	810c68c <_printf_common+0x58>
 810c6fc:	2301      	movs	r3, #1
 810c6fe:	4622      	mov	r2, r4
 810c700:	4641      	mov	r1, r8
 810c702:	4638      	mov	r0, r7
 810c704:	47c8      	blx	r9
 810c706:	3001      	adds	r0, #1
 810c708:	d0e6      	beq.n	810c6d8 <_printf_common+0xa4>
 810c70a:	3601      	adds	r6, #1
 810c70c:	e7d9      	b.n	810c6c2 <_printf_common+0x8e>
	...

0810c710 <_printf_i>:
 810c710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810c714:	7e0f      	ldrb	r7, [r1, #24]
 810c716:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 810c718:	2f78      	cmp	r7, #120	@ 0x78
 810c71a:	4691      	mov	r9, r2
 810c71c:	4680      	mov	r8, r0
 810c71e:	460c      	mov	r4, r1
 810c720:	469a      	mov	sl, r3
 810c722:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810c726:	d807      	bhi.n	810c738 <_printf_i+0x28>
 810c728:	2f62      	cmp	r7, #98	@ 0x62
 810c72a:	d80a      	bhi.n	810c742 <_printf_i+0x32>
 810c72c:	2f00      	cmp	r7, #0
 810c72e:	f000 80d2 	beq.w	810c8d6 <_printf_i+0x1c6>
 810c732:	2f58      	cmp	r7, #88	@ 0x58
 810c734:	f000 80b9 	beq.w	810c8aa <_printf_i+0x19a>
 810c738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810c73c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 810c740:	e03a      	b.n	810c7b8 <_printf_i+0xa8>
 810c742:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 810c746:	2b15      	cmp	r3, #21
 810c748:	d8f6      	bhi.n	810c738 <_printf_i+0x28>
 810c74a:	a101      	add	r1, pc, #4	@ (adr r1, 810c750 <_printf_i+0x40>)
 810c74c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810c750:	0810c7a9 	.word	0x0810c7a9
 810c754:	0810c7bd 	.word	0x0810c7bd
 810c758:	0810c739 	.word	0x0810c739
 810c75c:	0810c739 	.word	0x0810c739
 810c760:	0810c739 	.word	0x0810c739
 810c764:	0810c739 	.word	0x0810c739
 810c768:	0810c7bd 	.word	0x0810c7bd
 810c76c:	0810c739 	.word	0x0810c739
 810c770:	0810c739 	.word	0x0810c739
 810c774:	0810c739 	.word	0x0810c739
 810c778:	0810c739 	.word	0x0810c739
 810c77c:	0810c8bd 	.word	0x0810c8bd
 810c780:	0810c7e7 	.word	0x0810c7e7
 810c784:	0810c877 	.word	0x0810c877
 810c788:	0810c739 	.word	0x0810c739
 810c78c:	0810c739 	.word	0x0810c739
 810c790:	0810c8df 	.word	0x0810c8df
 810c794:	0810c739 	.word	0x0810c739
 810c798:	0810c7e7 	.word	0x0810c7e7
 810c79c:	0810c739 	.word	0x0810c739
 810c7a0:	0810c739 	.word	0x0810c739
 810c7a4:	0810c87f 	.word	0x0810c87f
 810c7a8:	6833      	ldr	r3, [r6, #0]
 810c7aa:	1d1a      	adds	r2, r3, #4
 810c7ac:	681b      	ldr	r3, [r3, #0]
 810c7ae:	6032      	str	r2, [r6, #0]
 810c7b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810c7b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 810c7b8:	2301      	movs	r3, #1
 810c7ba:	e09d      	b.n	810c8f8 <_printf_i+0x1e8>
 810c7bc:	6833      	ldr	r3, [r6, #0]
 810c7be:	6820      	ldr	r0, [r4, #0]
 810c7c0:	1d19      	adds	r1, r3, #4
 810c7c2:	6031      	str	r1, [r6, #0]
 810c7c4:	0606      	lsls	r6, r0, #24
 810c7c6:	d501      	bpl.n	810c7cc <_printf_i+0xbc>
 810c7c8:	681d      	ldr	r5, [r3, #0]
 810c7ca:	e003      	b.n	810c7d4 <_printf_i+0xc4>
 810c7cc:	0645      	lsls	r5, r0, #25
 810c7ce:	d5fb      	bpl.n	810c7c8 <_printf_i+0xb8>
 810c7d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 810c7d4:	2d00      	cmp	r5, #0
 810c7d6:	da03      	bge.n	810c7e0 <_printf_i+0xd0>
 810c7d8:	232d      	movs	r3, #45	@ 0x2d
 810c7da:	426d      	negs	r5, r5
 810c7dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810c7e0:	4859      	ldr	r0, [pc, #356]	@ (810c948 <_printf_i+0x238>)
 810c7e2:	230a      	movs	r3, #10
 810c7e4:	e011      	b.n	810c80a <_printf_i+0xfa>
 810c7e6:	6821      	ldr	r1, [r4, #0]
 810c7e8:	6833      	ldr	r3, [r6, #0]
 810c7ea:	0608      	lsls	r0, r1, #24
 810c7ec:	f853 5b04 	ldr.w	r5, [r3], #4
 810c7f0:	d402      	bmi.n	810c7f8 <_printf_i+0xe8>
 810c7f2:	0649      	lsls	r1, r1, #25
 810c7f4:	bf48      	it	mi
 810c7f6:	b2ad      	uxthmi	r5, r5
 810c7f8:	2f6f      	cmp	r7, #111	@ 0x6f
 810c7fa:	4853      	ldr	r0, [pc, #332]	@ (810c948 <_printf_i+0x238>)
 810c7fc:	6033      	str	r3, [r6, #0]
 810c7fe:	bf14      	ite	ne
 810c800:	230a      	movne	r3, #10
 810c802:	2308      	moveq	r3, #8
 810c804:	2100      	movs	r1, #0
 810c806:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810c80a:	6866      	ldr	r6, [r4, #4]
 810c80c:	60a6      	str	r6, [r4, #8]
 810c80e:	2e00      	cmp	r6, #0
 810c810:	bfa2      	ittt	ge
 810c812:	6821      	ldrge	r1, [r4, #0]
 810c814:	f021 0104 	bicge.w	r1, r1, #4
 810c818:	6021      	strge	r1, [r4, #0]
 810c81a:	b90d      	cbnz	r5, 810c820 <_printf_i+0x110>
 810c81c:	2e00      	cmp	r6, #0
 810c81e:	d04b      	beq.n	810c8b8 <_printf_i+0x1a8>
 810c820:	4616      	mov	r6, r2
 810c822:	fbb5 f1f3 	udiv	r1, r5, r3
 810c826:	fb03 5711 	mls	r7, r3, r1, r5
 810c82a:	5dc7      	ldrb	r7, [r0, r7]
 810c82c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810c830:	462f      	mov	r7, r5
 810c832:	42bb      	cmp	r3, r7
 810c834:	460d      	mov	r5, r1
 810c836:	d9f4      	bls.n	810c822 <_printf_i+0x112>
 810c838:	2b08      	cmp	r3, #8
 810c83a:	d10b      	bne.n	810c854 <_printf_i+0x144>
 810c83c:	6823      	ldr	r3, [r4, #0]
 810c83e:	07df      	lsls	r7, r3, #31
 810c840:	d508      	bpl.n	810c854 <_printf_i+0x144>
 810c842:	6923      	ldr	r3, [r4, #16]
 810c844:	6861      	ldr	r1, [r4, #4]
 810c846:	4299      	cmp	r1, r3
 810c848:	bfde      	ittt	le
 810c84a:	2330      	movle	r3, #48	@ 0x30
 810c84c:	f806 3c01 	strble.w	r3, [r6, #-1]
 810c850:	f106 36ff 	addle.w	r6, r6, #4294967295
 810c854:	1b92      	subs	r2, r2, r6
 810c856:	6122      	str	r2, [r4, #16]
 810c858:	f8cd a000 	str.w	sl, [sp]
 810c85c:	464b      	mov	r3, r9
 810c85e:	aa03      	add	r2, sp, #12
 810c860:	4621      	mov	r1, r4
 810c862:	4640      	mov	r0, r8
 810c864:	f7ff fee6 	bl	810c634 <_printf_common>
 810c868:	3001      	adds	r0, #1
 810c86a:	d14a      	bne.n	810c902 <_printf_i+0x1f2>
 810c86c:	f04f 30ff 	mov.w	r0, #4294967295
 810c870:	b004      	add	sp, #16
 810c872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c876:	6823      	ldr	r3, [r4, #0]
 810c878:	f043 0320 	orr.w	r3, r3, #32
 810c87c:	6023      	str	r3, [r4, #0]
 810c87e:	4833      	ldr	r0, [pc, #204]	@ (810c94c <_printf_i+0x23c>)
 810c880:	2778      	movs	r7, #120	@ 0x78
 810c882:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810c886:	6823      	ldr	r3, [r4, #0]
 810c888:	6831      	ldr	r1, [r6, #0]
 810c88a:	061f      	lsls	r7, r3, #24
 810c88c:	f851 5b04 	ldr.w	r5, [r1], #4
 810c890:	d402      	bmi.n	810c898 <_printf_i+0x188>
 810c892:	065f      	lsls	r7, r3, #25
 810c894:	bf48      	it	mi
 810c896:	b2ad      	uxthmi	r5, r5
 810c898:	6031      	str	r1, [r6, #0]
 810c89a:	07d9      	lsls	r1, r3, #31
 810c89c:	bf44      	itt	mi
 810c89e:	f043 0320 	orrmi.w	r3, r3, #32
 810c8a2:	6023      	strmi	r3, [r4, #0]
 810c8a4:	b11d      	cbz	r5, 810c8ae <_printf_i+0x19e>
 810c8a6:	2310      	movs	r3, #16
 810c8a8:	e7ac      	b.n	810c804 <_printf_i+0xf4>
 810c8aa:	4827      	ldr	r0, [pc, #156]	@ (810c948 <_printf_i+0x238>)
 810c8ac:	e7e9      	b.n	810c882 <_printf_i+0x172>
 810c8ae:	6823      	ldr	r3, [r4, #0]
 810c8b0:	f023 0320 	bic.w	r3, r3, #32
 810c8b4:	6023      	str	r3, [r4, #0]
 810c8b6:	e7f6      	b.n	810c8a6 <_printf_i+0x196>
 810c8b8:	4616      	mov	r6, r2
 810c8ba:	e7bd      	b.n	810c838 <_printf_i+0x128>
 810c8bc:	6833      	ldr	r3, [r6, #0]
 810c8be:	6825      	ldr	r5, [r4, #0]
 810c8c0:	6961      	ldr	r1, [r4, #20]
 810c8c2:	1d18      	adds	r0, r3, #4
 810c8c4:	6030      	str	r0, [r6, #0]
 810c8c6:	062e      	lsls	r6, r5, #24
 810c8c8:	681b      	ldr	r3, [r3, #0]
 810c8ca:	d501      	bpl.n	810c8d0 <_printf_i+0x1c0>
 810c8cc:	6019      	str	r1, [r3, #0]
 810c8ce:	e002      	b.n	810c8d6 <_printf_i+0x1c6>
 810c8d0:	0668      	lsls	r0, r5, #25
 810c8d2:	d5fb      	bpl.n	810c8cc <_printf_i+0x1bc>
 810c8d4:	8019      	strh	r1, [r3, #0]
 810c8d6:	2300      	movs	r3, #0
 810c8d8:	6123      	str	r3, [r4, #16]
 810c8da:	4616      	mov	r6, r2
 810c8dc:	e7bc      	b.n	810c858 <_printf_i+0x148>
 810c8de:	6833      	ldr	r3, [r6, #0]
 810c8e0:	1d1a      	adds	r2, r3, #4
 810c8e2:	6032      	str	r2, [r6, #0]
 810c8e4:	681e      	ldr	r6, [r3, #0]
 810c8e6:	6862      	ldr	r2, [r4, #4]
 810c8e8:	2100      	movs	r1, #0
 810c8ea:	4630      	mov	r0, r6
 810c8ec:	f7f3 fcf8 	bl	81002e0 <memchr>
 810c8f0:	b108      	cbz	r0, 810c8f6 <_printf_i+0x1e6>
 810c8f2:	1b80      	subs	r0, r0, r6
 810c8f4:	6060      	str	r0, [r4, #4]
 810c8f6:	6863      	ldr	r3, [r4, #4]
 810c8f8:	6123      	str	r3, [r4, #16]
 810c8fa:	2300      	movs	r3, #0
 810c8fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810c900:	e7aa      	b.n	810c858 <_printf_i+0x148>
 810c902:	6923      	ldr	r3, [r4, #16]
 810c904:	4632      	mov	r2, r6
 810c906:	4649      	mov	r1, r9
 810c908:	4640      	mov	r0, r8
 810c90a:	47d0      	blx	sl
 810c90c:	3001      	adds	r0, #1
 810c90e:	d0ad      	beq.n	810c86c <_printf_i+0x15c>
 810c910:	6823      	ldr	r3, [r4, #0]
 810c912:	079b      	lsls	r3, r3, #30
 810c914:	d413      	bmi.n	810c93e <_printf_i+0x22e>
 810c916:	68e0      	ldr	r0, [r4, #12]
 810c918:	9b03      	ldr	r3, [sp, #12]
 810c91a:	4298      	cmp	r0, r3
 810c91c:	bfb8      	it	lt
 810c91e:	4618      	movlt	r0, r3
 810c920:	e7a6      	b.n	810c870 <_printf_i+0x160>
 810c922:	2301      	movs	r3, #1
 810c924:	4632      	mov	r2, r6
 810c926:	4649      	mov	r1, r9
 810c928:	4640      	mov	r0, r8
 810c92a:	47d0      	blx	sl
 810c92c:	3001      	adds	r0, #1
 810c92e:	d09d      	beq.n	810c86c <_printf_i+0x15c>
 810c930:	3501      	adds	r5, #1
 810c932:	68e3      	ldr	r3, [r4, #12]
 810c934:	9903      	ldr	r1, [sp, #12]
 810c936:	1a5b      	subs	r3, r3, r1
 810c938:	42ab      	cmp	r3, r5
 810c93a:	dcf2      	bgt.n	810c922 <_printf_i+0x212>
 810c93c:	e7eb      	b.n	810c916 <_printf_i+0x206>
 810c93e:	2500      	movs	r5, #0
 810c940:	f104 0619 	add.w	r6, r4, #25
 810c944:	e7f5      	b.n	810c932 <_printf_i+0x222>
 810c946:	bf00      	nop
 810c948:	08111ed6 	.word	0x08111ed6
 810c94c:	08111ee7 	.word	0x08111ee7

0810c950 <_scanf_float>:
 810c950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c954:	b087      	sub	sp, #28
 810c956:	4617      	mov	r7, r2
 810c958:	9303      	str	r3, [sp, #12]
 810c95a:	688b      	ldr	r3, [r1, #8]
 810c95c:	1e5a      	subs	r2, r3, #1
 810c95e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 810c962:	bf81      	itttt	hi
 810c964:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 810c968:	eb03 0b05 	addhi.w	fp, r3, r5
 810c96c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 810c970:	608b      	strhi	r3, [r1, #8]
 810c972:	680b      	ldr	r3, [r1, #0]
 810c974:	460a      	mov	r2, r1
 810c976:	f04f 0500 	mov.w	r5, #0
 810c97a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 810c97e:	f842 3b1c 	str.w	r3, [r2], #28
 810c982:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810c986:	4680      	mov	r8, r0
 810c988:	460c      	mov	r4, r1
 810c98a:	bf98      	it	ls
 810c98c:	f04f 0b00 	movls.w	fp, #0
 810c990:	9201      	str	r2, [sp, #4]
 810c992:	4616      	mov	r6, r2
 810c994:	46aa      	mov	sl, r5
 810c996:	46a9      	mov	r9, r5
 810c998:	9502      	str	r5, [sp, #8]
 810c99a:	68a2      	ldr	r2, [r4, #8]
 810c99c:	b152      	cbz	r2, 810c9b4 <_scanf_float+0x64>
 810c99e:	683b      	ldr	r3, [r7, #0]
 810c9a0:	781b      	ldrb	r3, [r3, #0]
 810c9a2:	2b4e      	cmp	r3, #78	@ 0x4e
 810c9a4:	d864      	bhi.n	810ca70 <_scanf_float+0x120>
 810c9a6:	2b40      	cmp	r3, #64	@ 0x40
 810c9a8:	d83c      	bhi.n	810ca24 <_scanf_float+0xd4>
 810c9aa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 810c9ae:	b2c8      	uxtb	r0, r1
 810c9b0:	280e      	cmp	r0, #14
 810c9b2:	d93a      	bls.n	810ca2a <_scanf_float+0xda>
 810c9b4:	f1b9 0f00 	cmp.w	r9, #0
 810c9b8:	d003      	beq.n	810c9c2 <_scanf_float+0x72>
 810c9ba:	6823      	ldr	r3, [r4, #0]
 810c9bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810c9c0:	6023      	str	r3, [r4, #0]
 810c9c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 810c9c6:	f1ba 0f01 	cmp.w	sl, #1
 810c9ca:	f200 8117 	bhi.w	810cbfc <_scanf_float+0x2ac>
 810c9ce:	9b01      	ldr	r3, [sp, #4]
 810c9d0:	429e      	cmp	r6, r3
 810c9d2:	f200 8108 	bhi.w	810cbe6 <_scanf_float+0x296>
 810c9d6:	2001      	movs	r0, #1
 810c9d8:	b007      	add	sp, #28
 810c9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c9de:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 810c9e2:	2a0d      	cmp	r2, #13
 810c9e4:	d8e6      	bhi.n	810c9b4 <_scanf_float+0x64>
 810c9e6:	a101      	add	r1, pc, #4	@ (adr r1, 810c9ec <_scanf_float+0x9c>)
 810c9e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810c9ec:	0810cb33 	.word	0x0810cb33
 810c9f0:	0810c9b5 	.word	0x0810c9b5
 810c9f4:	0810c9b5 	.word	0x0810c9b5
 810c9f8:	0810c9b5 	.word	0x0810c9b5
 810c9fc:	0810cb93 	.word	0x0810cb93
 810ca00:	0810cb6b 	.word	0x0810cb6b
 810ca04:	0810c9b5 	.word	0x0810c9b5
 810ca08:	0810c9b5 	.word	0x0810c9b5
 810ca0c:	0810cb41 	.word	0x0810cb41
 810ca10:	0810c9b5 	.word	0x0810c9b5
 810ca14:	0810c9b5 	.word	0x0810c9b5
 810ca18:	0810c9b5 	.word	0x0810c9b5
 810ca1c:	0810c9b5 	.word	0x0810c9b5
 810ca20:	0810caf9 	.word	0x0810caf9
 810ca24:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 810ca28:	e7db      	b.n	810c9e2 <_scanf_float+0x92>
 810ca2a:	290e      	cmp	r1, #14
 810ca2c:	d8c2      	bhi.n	810c9b4 <_scanf_float+0x64>
 810ca2e:	a001      	add	r0, pc, #4	@ (adr r0, 810ca34 <_scanf_float+0xe4>)
 810ca30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810ca34:	0810cae9 	.word	0x0810cae9
 810ca38:	0810c9b5 	.word	0x0810c9b5
 810ca3c:	0810cae9 	.word	0x0810cae9
 810ca40:	0810cb7f 	.word	0x0810cb7f
 810ca44:	0810c9b5 	.word	0x0810c9b5
 810ca48:	0810ca91 	.word	0x0810ca91
 810ca4c:	0810cacf 	.word	0x0810cacf
 810ca50:	0810cacf 	.word	0x0810cacf
 810ca54:	0810cacf 	.word	0x0810cacf
 810ca58:	0810cacf 	.word	0x0810cacf
 810ca5c:	0810cacf 	.word	0x0810cacf
 810ca60:	0810cacf 	.word	0x0810cacf
 810ca64:	0810cacf 	.word	0x0810cacf
 810ca68:	0810cacf 	.word	0x0810cacf
 810ca6c:	0810cacf 	.word	0x0810cacf
 810ca70:	2b6e      	cmp	r3, #110	@ 0x6e
 810ca72:	d809      	bhi.n	810ca88 <_scanf_float+0x138>
 810ca74:	2b60      	cmp	r3, #96	@ 0x60
 810ca76:	d8b2      	bhi.n	810c9de <_scanf_float+0x8e>
 810ca78:	2b54      	cmp	r3, #84	@ 0x54
 810ca7a:	d07b      	beq.n	810cb74 <_scanf_float+0x224>
 810ca7c:	2b59      	cmp	r3, #89	@ 0x59
 810ca7e:	d199      	bne.n	810c9b4 <_scanf_float+0x64>
 810ca80:	2d07      	cmp	r5, #7
 810ca82:	d197      	bne.n	810c9b4 <_scanf_float+0x64>
 810ca84:	2508      	movs	r5, #8
 810ca86:	e02c      	b.n	810cae2 <_scanf_float+0x192>
 810ca88:	2b74      	cmp	r3, #116	@ 0x74
 810ca8a:	d073      	beq.n	810cb74 <_scanf_float+0x224>
 810ca8c:	2b79      	cmp	r3, #121	@ 0x79
 810ca8e:	e7f6      	b.n	810ca7e <_scanf_float+0x12e>
 810ca90:	6821      	ldr	r1, [r4, #0]
 810ca92:	05c8      	lsls	r0, r1, #23
 810ca94:	d51b      	bpl.n	810cace <_scanf_float+0x17e>
 810ca96:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 810ca9a:	6021      	str	r1, [r4, #0]
 810ca9c:	f109 0901 	add.w	r9, r9, #1
 810caa0:	f1bb 0f00 	cmp.w	fp, #0
 810caa4:	d003      	beq.n	810caae <_scanf_float+0x15e>
 810caa6:	3201      	adds	r2, #1
 810caa8:	f10b 3bff 	add.w	fp, fp, #4294967295
 810caac:	60a2      	str	r2, [r4, #8]
 810caae:	68a3      	ldr	r3, [r4, #8]
 810cab0:	3b01      	subs	r3, #1
 810cab2:	60a3      	str	r3, [r4, #8]
 810cab4:	6923      	ldr	r3, [r4, #16]
 810cab6:	3301      	adds	r3, #1
 810cab8:	6123      	str	r3, [r4, #16]
 810caba:	687b      	ldr	r3, [r7, #4]
 810cabc:	3b01      	subs	r3, #1
 810cabe:	2b00      	cmp	r3, #0
 810cac0:	607b      	str	r3, [r7, #4]
 810cac2:	f340 8087 	ble.w	810cbd4 <_scanf_float+0x284>
 810cac6:	683b      	ldr	r3, [r7, #0]
 810cac8:	3301      	adds	r3, #1
 810caca:	603b      	str	r3, [r7, #0]
 810cacc:	e765      	b.n	810c99a <_scanf_float+0x4a>
 810cace:	eb1a 0105 	adds.w	r1, sl, r5
 810cad2:	f47f af6f 	bne.w	810c9b4 <_scanf_float+0x64>
 810cad6:	6822      	ldr	r2, [r4, #0]
 810cad8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 810cadc:	6022      	str	r2, [r4, #0]
 810cade:	460d      	mov	r5, r1
 810cae0:	468a      	mov	sl, r1
 810cae2:	f806 3b01 	strb.w	r3, [r6], #1
 810cae6:	e7e2      	b.n	810caae <_scanf_float+0x15e>
 810cae8:	6822      	ldr	r2, [r4, #0]
 810caea:	0610      	lsls	r0, r2, #24
 810caec:	f57f af62 	bpl.w	810c9b4 <_scanf_float+0x64>
 810caf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 810caf4:	6022      	str	r2, [r4, #0]
 810caf6:	e7f4      	b.n	810cae2 <_scanf_float+0x192>
 810caf8:	f1ba 0f00 	cmp.w	sl, #0
 810cafc:	d10e      	bne.n	810cb1c <_scanf_float+0x1cc>
 810cafe:	f1b9 0f00 	cmp.w	r9, #0
 810cb02:	d10e      	bne.n	810cb22 <_scanf_float+0x1d2>
 810cb04:	6822      	ldr	r2, [r4, #0]
 810cb06:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810cb0a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810cb0e:	d108      	bne.n	810cb22 <_scanf_float+0x1d2>
 810cb10:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810cb14:	6022      	str	r2, [r4, #0]
 810cb16:	f04f 0a01 	mov.w	sl, #1
 810cb1a:	e7e2      	b.n	810cae2 <_scanf_float+0x192>
 810cb1c:	f1ba 0f02 	cmp.w	sl, #2
 810cb20:	d055      	beq.n	810cbce <_scanf_float+0x27e>
 810cb22:	2d01      	cmp	r5, #1
 810cb24:	d002      	beq.n	810cb2c <_scanf_float+0x1dc>
 810cb26:	2d04      	cmp	r5, #4
 810cb28:	f47f af44 	bne.w	810c9b4 <_scanf_float+0x64>
 810cb2c:	3501      	adds	r5, #1
 810cb2e:	b2ed      	uxtb	r5, r5
 810cb30:	e7d7      	b.n	810cae2 <_scanf_float+0x192>
 810cb32:	f1ba 0f01 	cmp.w	sl, #1
 810cb36:	f47f af3d 	bne.w	810c9b4 <_scanf_float+0x64>
 810cb3a:	f04f 0a02 	mov.w	sl, #2
 810cb3e:	e7d0      	b.n	810cae2 <_scanf_float+0x192>
 810cb40:	b97d      	cbnz	r5, 810cb62 <_scanf_float+0x212>
 810cb42:	f1b9 0f00 	cmp.w	r9, #0
 810cb46:	f47f af38 	bne.w	810c9ba <_scanf_float+0x6a>
 810cb4a:	6822      	ldr	r2, [r4, #0]
 810cb4c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810cb50:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810cb54:	f040 8108 	bne.w	810cd68 <_scanf_float+0x418>
 810cb58:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810cb5c:	6022      	str	r2, [r4, #0]
 810cb5e:	2501      	movs	r5, #1
 810cb60:	e7bf      	b.n	810cae2 <_scanf_float+0x192>
 810cb62:	2d03      	cmp	r5, #3
 810cb64:	d0e2      	beq.n	810cb2c <_scanf_float+0x1dc>
 810cb66:	2d05      	cmp	r5, #5
 810cb68:	e7de      	b.n	810cb28 <_scanf_float+0x1d8>
 810cb6a:	2d02      	cmp	r5, #2
 810cb6c:	f47f af22 	bne.w	810c9b4 <_scanf_float+0x64>
 810cb70:	2503      	movs	r5, #3
 810cb72:	e7b6      	b.n	810cae2 <_scanf_float+0x192>
 810cb74:	2d06      	cmp	r5, #6
 810cb76:	f47f af1d 	bne.w	810c9b4 <_scanf_float+0x64>
 810cb7a:	2507      	movs	r5, #7
 810cb7c:	e7b1      	b.n	810cae2 <_scanf_float+0x192>
 810cb7e:	6822      	ldr	r2, [r4, #0]
 810cb80:	0591      	lsls	r1, r2, #22
 810cb82:	f57f af17 	bpl.w	810c9b4 <_scanf_float+0x64>
 810cb86:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 810cb8a:	6022      	str	r2, [r4, #0]
 810cb8c:	f8cd 9008 	str.w	r9, [sp, #8]
 810cb90:	e7a7      	b.n	810cae2 <_scanf_float+0x192>
 810cb92:	6822      	ldr	r2, [r4, #0]
 810cb94:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 810cb98:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 810cb9c:	d006      	beq.n	810cbac <_scanf_float+0x25c>
 810cb9e:	0550      	lsls	r0, r2, #21
 810cba0:	f57f af08 	bpl.w	810c9b4 <_scanf_float+0x64>
 810cba4:	f1b9 0f00 	cmp.w	r9, #0
 810cba8:	f000 80de 	beq.w	810cd68 <_scanf_float+0x418>
 810cbac:	0591      	lsls	r1, r2, #22
 810cbae:	bf58      	it	pl
 810cbb0:	9902      	ldrpl	r1, [sp, #8]
 810cbb2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810cbb6:	bf58      	it	pl
 810cbb8:	eba9 0101 	subpl.w	r1, r9, r1
 810cbbc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 810cbc0:	bf58      	it	pl
 810cbc2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810cbc6:	6022      	str	r2, [r4, #0]
 810cbc8:	f04f 0900 	mov.w	r9, #0
 810cbcc:	e789      	b.n	810cae2 <_scanf_float+0x192>
 810cbce:	f04f 0a03 	mov.w	sl, #3
 810cbd2:	e786      	b.n	810cae2 <_scanf_float+0x192>
 810cbd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 810cbd8:	4639      	mov	r1, r7
 810cbda:	4640      	mov	r0, r8
 810cbdc:	4798      	blx	r3
 810cbde:	2800      	cmp	r0, #0
 810cbe0:	f43f aedb 	beq.w	810c99a <_scanf_float+0x4a>
 810cbe4:	e6e6      	b.n	810c9b4 <_scanf_float+0x64>
 810cbe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810cbea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810cbee:	463a      	mov	r2, r7
 810cbf0:	4640      	mov	r0, r8
 810cbf2:	4798      	blx	r3
 810cbf4:	6923      	ldr	r3, [r4, #16]
 810cbf6:	3b01      	subs	r3, #1
 810cbf8:	6123      	str	r3, [r4, #16]
 810cbfa:	e6e8      	b.n	810c9ce <_scanf_float+0x7e>
 810cbfc:	1e6b      	subs	r3, r5, #1
 810cbfe:	2b06      	cmp	r3, #6
 810cc00:	d824      	bhi.n	810cc4c <_scanf_float+0x2fc>
 810cc02:	2d02      	cmp	r5, #2
 810cc04:	d836      	bhi.n	810cc74 <_scanf_float+0x324>
 810cc06:	9b01      	ldr	r3, [sp, #4]
 810cc08:	429e      	cmp	r6, r3
 810cc0a:	f67f aee4 	bls.w	810c9d6 <_scanf_float+0x86>
 810cc0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810cc12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810cc16:	463a      	mov	r2, r7
 810cc18:	4640      	mov	r0, r8
 810cc1a:	4798      	blx	r3
 810cc1c:	6923      	ldr	r3, [r4, #16]
 810cc1e:	3b01      	subs	r3, #1
 810cc20:	6123      	str	r3, [r4, #16]
 810cc22:	e7f0      	b.n	810cc06 <_scanf_float+0x2b6>
 810cc24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810cc28:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 810cc2c:	463a      	mov	r2, r7
 810cc2e:	4640      	mov	r0, r8
 810cc30:	4798      	blx	r3
 810cc32:	6923      	ldr	r3, [r4, #16]
 810cc34:	3b01      	subs	r3, #1
 810cc36:	6123      	str	r3, [r4, #16]
 810cc38:	f10a 3aff 	add.w	sl, sl, #4294967295
 810cc3c:	fa5f fa8a 	uxtb.w	sl, sl
 810cc40:	f1ba 0f02 	cmp.w	sl, #2
 810cc44:	d1ee      	bne.n	810cc24 <_scanf_float+0x2d4>
 810cc46:	3d03      	subs	r5, #3
 810cc48:	b2ed      	uxtb	r5, r5
 810cc4a:	1b76      	subs	r6, r6, r5
 810cc4c:	6823      	ldr	r3, [r4, #0]
 810cc4e:	05da      	lsls	r2, r3, #23
 810cc50:	d530      	bpl.n	810ccb4 <_scanf_float+0x364>
 810cc52:	055b      	lsls	r3, r3, #21
 810cc54:	d511      	bpl.n	810cc7a <_scanf_float+0x32a>
 810cc56:	9b01      	ldr	r3, [sp, #4]
 810cc58:	429e      	cmp	r6, r3
 810cc5a:	f67f aebc 	bls.w	810c9d6 <_scanf_float+0x86>
 810cc5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810cc62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810cc66:	463a      	mov	r2, r7
 810cc68:	4640      	mov	r0, r8
 810cc6a:	4798      	blx	r3
 810cc6c:	6923      	ldr	r3, [r4, #16]
 810cc6e:	3b01      	subs	r3, #1
 810cc70:	6123      	str	r3, [r4, #16]
 810cc72:	e7f0      	b.n	810cc56 <_scanf_float+0x306>
 810cc74:	46aa      	mov	sl, r5
 810cc76:	46b3      	mov	fp, r6
 810cc78:	e7de      	b.n	810cc38 <_scanf_float+0x2e8>
 810cc7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810cc7e:	6923      	ldr	r3, [r4, #16]
 810cc80:	2965      	cmp	r1, #101	@ 0x65
 810cc82:	f103 33ff 	add.w	r3, r3, #4294967295
 810cc86:	f106 35ff 	add.w	r5, r6, #4294967295
 810cc8a:	6123      	str	r3, [r4, #16]
 810cc8c:	d00c      	beq.n	810cca8 <_scanf_float+0x358>
 810cc8e:	2945      	cmp	r1, #69	@ 0x45
 810cc90:	d00a      	beq.n	810cca8 <_scanf_float+0x358>
 810cc92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810cc96:	463a      	mov	r2, r7
 810cc98:	4640      	mov	r0, r8
 810cc9a:	4798      	blx	r3
 810cc9c:	6923      	ldr	r3, [r4, #16]
 810cc9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810cca2:	3b01      	subs	r3, #1
 810cca4:	1eb5      	subs	r5, r6, #2
 810cca6:	6123      	str	r3, [r4, #16]
 810cca8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810ccac:	463a      	mov	r2, r7
 810ccae:	4640      	mov	r0, r8
 810ccb0:	4798      	blx	r3
 810ccb2:	462e      	mov	r6, r5
 810ccb4:	6822      	ldr	r2, [r4, #0]
 810ccb6:	f012 0210 	ands.w	r2, r2, #16
 810ccba:	d001      	beq.n	810ccc0 <_scanf_float+0x370>
 810ccbc:	2000      	movs	r0, #0
 810ccbe:	e68b      	b.n	810c9d8 <_scanf_float+0x88>
 810ccc0:	7032      	strb	r2, [r6, #0]
 810ccc2:	6823      	ldr	r3, [r4, #0]
 810ccc4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 810ccc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810cccc:	d11c      	bne.n	810cd08 <_scanf_float+0x3b8>
 810ccce:	9b02      	ldr	r3, [sp, #8]
 810ccd0:	454b      	cmp	r3, r9
 810ccd2:	eba3 0209 	sub.w	r2, r3, r9
 810ccd6:	d123      	bne.n	810cd20 <_scanf_float+0x3d0>
 810ccd8:	9901      	ldr	r1, [sp, #4]
 810ccda:	2200      	movs	r2, #0
 810ccdc:	4640      	mov	r0, r8
 810ccde:	f002 fd0b 	bl	810f6f8 <_strtod_r>
 810cce2:	9b03      	ldr	r3, [sp, #12]
 810cce4:	6821      	ldr	r1, [r4, #0]
 810cce6:	681b      	ldr	r3, [r3, #0]
 810cce8:	f011 0f02 	tst.w	r1, #2
 810ccec:	ec57 6b10 	vmov	r6, r7, d0
 810ccf0:	f103 0204 	add.w	r2, r3, #4
 810ccf4:	d01f      	beq.n	810cd36 <_scanf_float+0x3e6>
 810ccf6:	9903      	ldr	r1, [sp, #12]
 810ccf8:	600a      	str	r2, [r1, #0]
 810ccfa:	681b      	ldr	r3, [r3, #0]
 810ccfc:	e9c3 6700 	strd	r6, r7, [r3]
 810cd00:	68e3      	ldr	r3, [r4, #12]
 810cd02:	3301      	adds	r3, #1
 810cd04:	60e3      	str	r3, [r4, #12]
 810cd06:	e7d9      	b.n	810ccbc <_scanf_float+0x36c>
 810cd08:	9b04      	ldr	r3, [sp, #16]
 810cd0a:	2b00      	cmp	r3, #0
 810cd0c:	d0e4      	beq.n	810ccd8 <_scanf_float+0x388>
 810cd0e:	9905      	ldr	r1, [sp, #20]
 810cd10:	230a      	movs	r3, #10
 810cd12:	3101      	adds	r1, #1
 810cd14:	4640      	mov	r0, r8
 810cd16:	f002 fd6f 	bl	810f7f8 <_strtol_r>
 810cd1a:	9b04      	ldr	r3, [sp, #16]
 810cd1c:	9e05      	ldr	r6, [sp, #20]
 810cd1e:	1ac2      	subs	r2, r0, r3
 810cd20:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 810cd24:	429e      	cmp	r6, r3
 810cd26:	bf28      	it	cs
 810cd28:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 810cd2c:	4910      	ldr	r1, [pc, #64]	@ (810cd70 <_scanf_float+0x420>)
 810cd2e:	4630      	mov	r0, r6
 810cd30:	f000 f954 	bl	810cfdc <siprintf>
 810cd34:	e7d0      	b.n	810ccd8 <_scanf_float+0x388>
 810cd36:	f011 0f04 	tst.w	r1, #4
 810cd3a:	9903      	ldr	r1, [sp, #12]
 810cd3c:	600a      	str	r2, [r1, #0]
 810cd3e:	d1dc      	bne.n	810ccfa <_scanf_float+0x3aa>
 810cd40:	681d      	ldr	r5, [r3, #0]
 810cd42:	4632      	mov	r2, r6
 810cd44:	463b      	mov	r3, r7
 810cd46:	4630      	mov	r0, r6
 810cd48:	4639      	mov	r1, r7
 810cd4a:	f7f3 ff77 	bl	8100c3c <__aeabi_dcmpun>
 810cd4e:	b128      	cbz	r0, 810cd5c <_scanf_float+0x40c>
 810cd50:	4808      	ldr	r0, [pc, #32]	@ (810cd74 <_scanf_float+0x424>)
 810cd52:	f000 fac9 	bl	810d2e8 <nanf>
 810cd56:	ed85 0a00 	vstr	s0, [r5]
 810cd5a:	e7d1      	b.n	810cd00 <_scanf_float+0x3b0>
 810cd5c:	4630      	mov	r0, r6
 810cd5e:	4639      	mov	r1, r7
 810cd60:	f7f3 ffca 	bl	8100cf8 <__aeabi_d2f>
 810cd64:	6028      	str	r0, [r5, #0]
 810cd66:	e7cb      	b.n	810cd00 <_scanf_float+0x3b0>
 810cd68:	f04f 0900 	mov.w	r9, #0
 810cd6c:	e629      	b.n	810c9c2 <_scanf_float+0x72>
 810cd6e:	bf00      	nop
 810cd70:	08111ef8 	.word	0x08111ef8
 810cd74:	0811228d 	.word	0x0811228d

0810cd78 <std>:
 810cd78:	2300      	movs	r3, #0
 810cd7a:	b510      	push	{r4, lr}
 810cd7c:	4604      	mov	r4, r0
 810cd7e:	e9c0 3300 	strd	r3, r3, [r0]
 810cd82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810cd86:	6083      	str	r3, [r0, #8]
 810cd88:	8181      	strh	r1, [r0, #12]
 810cd8a:	6643      	str	r3, [r0, #100]	@ 0x64
 810cd8c:	81c2      	strh	r2, [r0, #14]
 810cd8e:	6183      	str	r3, [r0, #24]
 810cd90:	4619      	mov	r1, r3
 810cd92:	2208      	movs	r2, #8
 810cd94:	305c      	adds	r0, #92	@ 0x5c
 810cd96:	f000 fa19 	bl	810d1cc <memset>
 810cd9a:	4b0d      	ldr	r3, [pc, #52]	@ (810cdd0 <std+0x58>)
 810cd9c:	6263      	str	r3, [r4, #36]	@ 0x24
 810cd9e:	4b0d      	ldr	r3, [pc, #52]	@ (810cdd4 <std+0x5c>)
 810cda0:	62a3      	str	r3, [r4, #40]	@ 0x28
 810cda2:	4b0d      	ldr	r3, [pc, #52]	@ (810cdd8 <std+0x60>)
 810cda4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 810cda6:	4b0d      	ldr	r3, [pc, #52]	@ (810cddc <std+0x64>)
 810cda8:	6323      	str	r3, [r4, #48]	@ 0x30
 810cdaa:	4b0d      	ldr	r3, [pc, #52]	@ (810cde0 <std+0x68>)
 810cdac:	6224      	str	r4, [r4, #32]
 810cdae:	429c      	cmp	r4, r3
 810cdb0:	d006      	beq.n	810cdc0 <std+0x48>
 810cdb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 810cdb6:	4294      	cmp	r4, r2
 810cdb8:	d002      	beq.n	810cdc0 <std+0x48>
 810cdba:	33d0      	adds	r3, #208	@ 0xd0
 810cdbc:	429c      	cmp	r4, r3
 810cdbe:	d105      	bne.n	810cdcc <std+0x54>
 810cdc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 810cdc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810cdc8:	f000 ba7c 	b.w	810d2c4 <__retarget_lock_init_recursive>
 810cdcc:	bd10      	pop	{r4, pc}
 810cdce:	bf00      	nop
 810cdd0:	0810d01d 	.word	0x0810d01d
 810cdd4:	0810d03f 	.word	0x0810d03f
 810cdd8:	0810d077 	.word	0x0810d077
 810cddc:	0810d09b 	.word	0x0810d09b
 810cde0:	1000064c 	.word	0x1000064c

0810cde4 <stdio_exit_handler>:
 810cde4:	4a02      	ldr	r2, [pc, #8]	@ (810cdf0 <stdio_exit_handler+0xc>)
 810cde6:	4903      	ldr	r1, [pc, #12]	@ (810cdf4 <stdio_exit_handler+0x10>)
 810cde8:	4803      	ldr	r0, [pc, #12]	@ (810cdf8 <stdio_exit_handler+0x14>)
 810cdea:	f000 b869 	b.w	810cec0 <_fwalk_sglue>
 810cdee:	bf00      	nop
 810cdf0:	10000088 	.word	0x10000088
 810cdf4:	0810fe39 	.word	0x0810fe39
 810cdf8:	10000098 	.word	0x10000098

0810cdfc <cleanup_stdio>:
 810cdfc:	6841      	ldr	r1, [r0, #4]
 810cdfe:	4b0c      	ldr	r3, [pc, #48]	@ (810ce30 <cleanup_stdio+0x34>)
 810ce00:	4299      	cmp	r1, r3
 810ce02:	b510      	push	{r4, lr}
 810ce04:	4604      	mov	r4, r0
 810ce06:	d001      	beq.n	810ce0c <cleanup_stdio+0x10>
 810ce08:	f003 f816 	bl	810fe38 <_fflush_r>
 810ce0c:	68a1      	ldr	r1, [r4, #8]
 810ce0e:	4b09      	ldr	r3, [pc, #36]	@ (810ce34 <cleanup_stdio+0x38>)
 810ce10:	4299      	cmp	r1, r3
 810ce12:	d002      	beq.n	810ce1a <cleanup_stdio+0x1e>
 810ce14:	4620      	mov	r0, r4
 810ce16:	f003 f80f 	bl	810fe38 <_fflush_r>
 810ce1a:	68e1      	ldr	r1, [r4, #12]
 810ce1c:	4b06      	ldr	r3, [pc, #24]	@ (810ce38 <cleanup_stdio+0x3c>)
 810ce1e:	4299      	cmp	r1, r3
 810ce20:	d004      	beq.n	810ce2c <cleanup_stdio+0x30>
 810ce22:	4620      	mov	r0, r4
 810ce24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810ce28:	f003 b806 	b.w	810fe38 <_fflush_r>
 810ce2c:	bd10      	pop	{r4, pc}
 810ce2e:	bf00      	nop
 810ce30:	1000064c 	.word	0x1000064c
 810ce34:	100006b4 	.word	0x100006b4
 810ce38:	1000071c 	.word	0x1000071c

0810ce3c <global_stdio_init.part.0>:
 810ce3c:	b510      	push	{r4, lr}
 810ce3e:	4b0b      	ldr	r3, [pc, #44]	@ (810ce6c <global_stdio_init.part.0+0x30>)
 810ce40:	4c0b      	ldr	r4, [pc, #44]	@ (810ce70 <global_stdio_init.part.0+0x34>)
 810ce42:	4a0c      	ldr	r2, [pc, #48]	@ (810ce74 <global_stdio_init.part.0+0x38>)
 810ce44:	601a      	str	r2, [r3, #0]
 810ce46:	4620      	mov	r0, r4
 810ce48:	2200      	movs	r2, #0
 810ce4a:	2104      	movs	r1, #4
 810ce4c:	f7ff ff94 	bl	810cd78 <std>
 810ce50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 810ce54:	2201      	movs	r2, #1
 810ce56:	2109      	movs	r1, #9
 810ce58:	f7ff ff8e 	bl	810cd78 <std>
 810ce5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 810ce60:	2202      	movs	r2, #2
 810ce62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810ce66:	2112      	movs	r1, #18
 810ce68:	f7ff bf86 	b.w	810cd78 <std>
 810ce6c:	10000784 	.word	0x10000784
 810ce70:	1000064c 	.word	0x1000064c
 810ce74:	0810cde5 	.word	0x0810cde5

0810ce78 <__sfp_lock_acquire>:
 810ce78:	4801      	ldr	r0, [pc, #4]	@ (810ce80 <__sfp_lock_acquire+0x8>)
 810ce7a:	f000 ba24 	b.w	810d2c6 <__retarget_lock_acquire_recursive>
 810ce7e:	bf00      	nop
 810ce80:	1000078d 	.word	0x1000078d

0810ce84 <__sfp_lock_release>:
 810ce84:	4801      	ldr	r0, [pc, #4]	@ (810ce8c <__sfp_lock_release+0x8>)
 810ce86:	f000 ba1f 	b.w	810d2c8 <__retarget_lock_release_recursive>
 810ce8a:	bf00      	nop
 810ce8c:	1000078d 	.word	0x1000078d

0810ce90 <__sinit>:
 810ce90:	b510      	push	{r4, lr}
 810ce92:	4604      	mov	r4, r0
 810ce94:	f7ff fff0 	bl	810ce78 <__sfp_lock_acquire>
 810ce98:	6a23      	ldr	r3, [r4, #32]
 810ce9a:	b11b      	cbz	r3, 810cea4 <__sinit+0x14>
 810ce9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810cea0:	f7ff bff0 	b.w	810ce84 <__sfp_lock_release>
 810cea4:	4b04      	ldr	r3, [pc, #16]	@ (810ceb8 <__sinit+0x28>)
 810cea6:	6223      	str	r3, [r4, #32]
 810cea8:	4b04      	ldr	r3, [pc, #16]	@ (810cebc <__sinit+0x2c>)
 810ceaa:	681b      	ldr	r3, [r3, #0]
 810ceac:	2b00      	cmp	r3, #0
 810ceae:	d1f5      	bne.n	810ce9c <__sinit+0xc>
 810ceb0:	f7ff ffc4 	bl	810ce3c <global_stdio_init.part.0>
 810ceb4:	e7f2      	b.n	810ce9c <__sinit+0xc>
 810ceb6:	bf00      	nop
 810ceb8:	0810cdfd 	.word	0x0810cdfd
 810cebc:	10000784 	.word	0x10000784

0810cec0 <_fwalk_sglue>:
 810cec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810cec4:	4607      	mov	r7, r0
 810cec6:	4688      	mov	r8, r1
 810cec8:	4614      	mov	r4, r2
 810ceca:	2600      	movs	r6, #0
 810cecc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810ced0:	f1b9 0901 	subs.w	r9, r9, #1
 810ced4:	d505      	bpl.n	810cee2 <_fwalk_sglue+0x22>
 810ced6:	6824      	ldr	r4, [r4, #0]
 810ced8:	2c00      	cmp	r4, #0
 810ceda:	d1f7      	bne.n	810cecc <_fwalk_sglue+0xc>
 810cedc:	4630      	mov	r0, r6
 810cede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810cee2:	89ab      	ldrh	r3, [r5, #12]
 810cee4:	2b01      	cmp	r3, #1
 810cee6:	d907      	bls.n	810cef8 <_fwalk_sglue+0x38>
 810cee8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810ceec:	3301      	adds	r3, #1
 810ceee:	d003      	beq.n	810cef8 <_fwalk_sglue+0x38>
 810cef0:	4629      	mov	r1, r5
 810cef2:	4638      	mov	r0, r7
 810cef4:	47c0      	blx	r8
 810cef6:	4306      	orrs	r6, r0
 810cef8:	3568      	adds	r5, #104	@ 0x68
 810cefa:	e7e9      	b.n	810ced0 <_fwalk_sglue+0x10>

0810cefc <iprintf>:
 810cefc:	b40f      	push	{r0, r1, r2, r3}
 810cefe:	b507      	push	{r0, r1, r2, lr}
 810cf00:	4906      	ldr	r1, [pc, #24]	@ (810cf1c <iprintf+0x20>)
 810cf02:	ab04      	add	r3, sp, #16
 810cf04:	6808      	ldr	r0, [r1, #0]
 810cf06:	f853 2b04 	ldr.w	r2, [r3], #4
 810cf0a:	6881      	ldr	r1, [r0, #8]
 810cf0c:	9301      	str	r3, [sp, #4]
 810cf0e:	f002 fdf7 	bl	810fb00 <_vfiprintf_r>
 810cf12:	b003      	add	sp, #12
 810cf14:	f85d eb04 	ldr.w	lr, [sp], #4
 810cf18:	b004      	add	sp, #16
 810cf1a:	4770      	bx	lr
 810cf1c:	10000094 	.word	0x10000094

0810cf20 <_puts_r>:
 810cf20:	6a03      	ldr	r3, [r0, #32]
 810cf22:	b570      	push	{r4, r5, r6, lr}
 810cf24:	6884      	ldr	r4, [r0, #8]
 810cf26:	4605      	mov	r5, r0
 810cf28:	460e      	mov	r6, r1
 810cf2a:	b90b      	cbnz	r3, 810cf30 <_puts_r+0x10>
 810cf2c:	f7ff ffb0 	bl	810ce90 <__sinit>
 810cf30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810cf32:	07db      	lsls	r3, r3, #31
 810cf34:	d405      	bmi.n	810cf42 <_puts_r+0x22>
 810cf36:	89a3      	ldrh	r3, [r4, #12]
 810cf38:	0598      	lsls	r0, r3, #22
 810cf3a:	d402      	bmi.n	810cf42 <_puts_r+0x22>
 810cf3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810cf3e:	f000 f9c2 	bl	810d2c6 <__retarget_lock_acquire_recursive>
 810cf42:	89a3      	ldrh	r3, [r4, #12]
 810cf44:	0719      	lsls	r1, r3, #28
 810cf46:	d502      	bpl.n	810cf4e <_puts_r+0x2e>
 810cf48:	6923      	ldr	r3, [r4, #16]
 810cf4a:	2b00      	cmp	r3, #0
 810cf4c:	d135      	bne.n	810cfba <_puts_r+0x9a>
 810cf4e:	4621      	mov	r1, r4
 810cf50:	4628      	mov	r0, r5
 810cf52:	f000 f8e5 	bl	810d120 <__swsetup_r>
 810cf56:	b380      	cbz	r0, 810cfba <_puts_r+0x9a>
 810cf58:	f04f 35ff 	mov.w	r5, #4294967295
 810cf5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810cf5e:	07da      	lsls	r2, r3, #31
 810cf60:	d405      	bmi.n	810cf6e <_puts_r+0x4e>
 810cf62:	89a3      	ldrh	r3, [r4, #12]
 810cf64:	059b      	lsls	r3, r3, #22
 810cf66:	d402      	bmi.n	810cf6e <_puts_r+0x4e>
 810cf68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810cf6a:	f000 f9ad 	bl	810d2c8 <__retarget_lock_release_recursive>
 810cf6e:	4628      	mov	r0, r5
 810cf70:	bd70      	pop	{r4, r5, r6, pc}
 810cf72:	2b00      	cmp	r3, #0
 810cf74:	da04      	bge.n	810cf80 <_puts_r+0x60>
 810cf76:	69a2      	ldr	r2, [r4, #24]
 810cf78:	429a      	cmp	r2, r3
 810cf7a:	dc17      	bgt.n	810cfac <_puts_r+0x8c>
 810cf7c:	290a      	cmp	r1, #10
 810cf7e:	d015      	beq.n	810cfac <_puts_r+0x8c>
 810cf80:	6823      	ldr	r3, [r4, #0]
 810cf82:	1c5a      	adds	r2, r3, #1
 810cf84:	6022      	str	r2, [r4, #0]
 810cf86:	7019      	strb	r1, [r3, #0]
 810cf88:	68a3      	ldr	r3, [r4, #8]
 810cf8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810cf8e:	3b01      	subs	r3, #1
 810cf90:	60a3      	str	r3, [r4, #8]
 810cf92:	2900      	cmp	r1, #0
 810cf94:	d1ed      	bne.n	810cf72 <_puts_r+0x52>
 810cf96:	2b00      	cmp	r3, #0
 810cf98:	da11      	bge.n	810cfbe <_puts_r+0x9e>
 810cf9a:	4622      	mov	r2, r4
 810cf9c:	210a      	movs	r1, #10
 810cf9e:	4628      	mov	r0, r5
 810cfa0:	f000 f87f 	bl	810d0a2 <__swbuf_r>
 810cfa4:	3001      	adds	r0, #1
 810cfa6:	d0d7      	beq.n	810cf58 <_puts_r+0x38>
 810cfa8:	250a      	movs	r5, #10
 810cfaa:	e7d7      	b.n	810cf5c <_puts_r+0x3c>
 810cfac:	4622      	mov	r2, r4
 810cfae:	4628      	mov	r0, r5
 810cfb0:	f000 f877 	bl	810d0a2 <__swbuf_r>
 810cfb4:	3001      	adds	r0, #1
 810cfb6:	d1e7      	bne.n	810cf88 <_puts_r+0x68>
 810cfb8:	e7ce      	b.n	810cf58 <_puts_r+0x38>
 810cfba:	3e01      	subs	r6, #1
 810cfbc:	e7e4      	b.n	810cf88 <_puts_r+0x68>
 810cfbe:	6823      	ldr	r3, [r4, #0]
 810cfc0:	1c5a      	adds	r2, r3, #1
 810cfc2:	6022      	str	r2, [r4, #0]
 810cfc4:	220a      	movs	r2, #10
 810cfc6:	701a      	strb	r2, [r3, #0]
 810cfc8:	e7ee      	b.n	810cfa8 <_puts_r+0x88>
	...

0810cfcc <puts>:
 810cfcc:	4b02      	ldr	r3, [pc, #8]	@ (810cfd8 <puts+0xc>)
 810cfce:	4601      	mov	r1, r0
 810cfd0:	6818      	ldr	r0, [r3, #0]
 810cfd2:	f7ff bfa5 	b.w	810cf20 <_puts_r>
 810cfd6:	bf00      	nop
 810cfd8:	10000094 	.word	0x10000094

0810cfdc <siprintf>:
 810cfdc:	b40e      	push	{r1, r2, r3}
 810cfde:	b500      	push	{lr}
 810cfe0:	b09c      	sub	sp, #112	@ 0x70
 810cfe2:	ab1d      	add	r3, sp, #116	@ 0x74
 810cfe4:	9002      	str	r0, [sp, #8]
 810cfe6:	9006      	str	r0, [sp, #24]
 810cfe8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 810cfec:	4809      	ldr	r0, [pc, #36]	@ (810d014 <siprintf+0x38>)
 810cfee:	9107      	str	r1, [sp, #28]
 810cff0:	9104      	str	r1, [sp, #16]
 810cff2:	4909      	ldr	r1, [pc, #36]	@ (810d018 <siprintf+0x3c>)
 810cff4:	f853 2b04 	ldr.w	r2, [r3], #4
 810cff8:	9105      	str	r1, [sp, #20]
 810cffa:	6800      	ldr	r0, [r0, #0]
 810cffc:	9301      	str	r3, [sp, #4]
 810cffe:	a902      	add	r1, sp, #8
 810d000:	f002 fc58 	bl	810f8b4 <_svfiprintf_r>
 810d004:	9b02      	ldr	r3, [sp, #8]
 810d006:	2200      	movs	r2, #0
 810d008:	701a      	strb	r2, [r3, #0]
 810d00a:	b01c      	add	sp, #112	@ 0x70
 810d00c:	f85d eb04 	ldr.w	lr, [sp], #4
 810d010:	b003      	add	sp, #12
 810d012:	4770      	bx	lr
 810d014:	10000094 	.word	0x10000094
 810d018:	ffff0208 	.word	0xffff0208

0810d01c <__sread>:
 810d01c:	b510      	push	{r4, lr}
 810d01e:	460c      	mov	r4, r1
 810d020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d024:	f000 f900 	bl	810d228 <_read_r>
 810d028:	2800      	cmp	r0, #0
 810d02a:	bfab      	itete	ge
 810d02c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 810d02e:	89a3      	ldrhlt	r3, [r4, #12]
 810d030:	181b      	addge	r3, r3, r0
 810d032:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 810d036:	bfac      	ite	ge
 810d038:	6563      	strge	r3, [r4, #84]	@ 0x54
 810d03a:	81a3      	strhlt	r3, [r4, #12]
 810d03c:	bd10      	pop	{r4, pc}

0810d03e <__swrite>:
 810d03e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d042:	461f      	mov	r7, r3
 810d044:	898b      	ldrh	r3, [r1, #12]
 810d046:	05db      	lsls	r3, r3, #23
 810d048:	4605      	mov	r5, r0
 810d04a:	460c      	mov	r4, r1
 810d04c:	4616      	mov	r6, r2
 810d04e:	d505      	bpl.n	810d05c <__swrite+0x1e>
 810d050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d054:	2302      	movs	r3, #2
 810d056:	2200      	movs	r2, #0
 810d058:	f000 f8d4 	bl	810d204 <_lseek_r>
 810d05c:	89a3      	ldrh	r3, [r4, #12]
 810d05e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810d062:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810d066:	81a3      	strh	r3, [r4, #12]
 810d068:	4632      	mov	r2, r6
 810d06a:	463b      	mov	r3, r7
 810d06c:	4628      	mov	r0, r5
 810d06e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810d072:	f000 b8eb 	b.w	810d24c <_write_r>

0810d076 <__sseek>:
 810d076:	b510      	push	{r4, lr}
 810d078:	460c      	mov	r4, r1
 810d07a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d07e:	f000 f8c1 	bl	810d204 <_lseek_r>
 810d082:	1c43      	adds	r3, r0, #1
 810d084:	89a3      	ldrh	r3, [r4, #12]
 810d086:	bf15      	itete	ne
 810d088:	6560      	strne	r0, [r4, #84]	@ 0x54
 810d08a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 810d08e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 810d092:	81a3      	strheq	r3, [r4, #12]
 810d094:	bf18      	it	ne
 810d096:	81a3      	strhne	r3, [r4, #12]
 810d098:	bd10      	pop	{r4, pc}

0810d09a <__sclose>:
 810d09a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d09e:	f000 b8a1 	b.w	810d1e4 <_close_r>

0810d0a2 <__swbuf_r>:
 810d0a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d0a4:	460e      	mov	r6, r1
 810d0a6:	4614      	mov	r4, r2
 810d0a8:	4605      	mov	r5, r0
 810d0aa:	b118      	cbz	r0, 810d0b4 <__swbuf_r+0x12>
 810d0ac:	6a03      	ldr	r3, [r0, #32]
 810d0ae:	b90b      	cbnz	r3, 810d0b4 <__swbuf_r+0x12>
 810d0b0:	f7ff feee 	bl	810ce90 <__sinit>
 810d0b4:	69a3      	ldr	r3, [r4, #24]
 810d0b6:	60a3      	str	r3, [r4, #8]
 810d0b8:	89a3      	ldrh	r3, [r4, #12]
 810d0ba:	071a      	lsls	r2, r3, #28
 810d0bc:	d501      	bpl.n	810d0c2 <__swbuf_r+0x20>
 810d0be:	6923      	ldr	r3, [r4, #16]
 810d0c0:	b943      	cbnz	r3, 810d0d4 <__swbuf_r+0x32>
 810d0c2:	4621      	mov	r1, r4
 810d0c4:	4628      	mov	r0, r5
 810d0c6:	f000 f82b 	bl	810d120 <__swsetup_r>
 810d0ca:	b118      	cbz	r0, 810d0d4 <__swbuf_r+0x32>
 810d0cc:	f04f 37ff 	mov.w	r7, #4294967295
 810d0d0:	4638      	mov	r0, r7
 810d0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810d0d4:	6823      	ldr	r3, [r4, #0]
 810d0d6:	6922      	ldr	r2, [r4, #16]
 810d0d8:	1a98      	subs	r0, r3, r2
 810d0da:	6963      	ldr	r3, [r4, #20]
 810d0dc:	b2f6      	uxtb	r6, r6
 810d0de:	4283      	cmp	r3, r0
 810d0e0:	4637      	mov	r7, r6
 810d0e2:	dc05      	bgt.n	810d0f0 <__swbuf_r+0x4e>
 810d0e4:	4621      	mov	r1, r4
 810d0e6:	4628      	mov	r0, r5
 810d0e8:	f002 fea6 	bl	810fe38 <_fflush_r>
 810d0ec:	2800      	cmp	r0, #0
 810d0ee:	d1ed      	bne.n	810d0cc <__swbuf_r+0x2a>
 810d0f0:	68a3      	ldr	r3, [r4, #8]
 810d0f2:	3b01      	subs	r3, #1
 810d0f4:	60a3      	str	r3, [r4, #8]
 810d0f6:	6823      	ldr	r3, [r4, #0]
 810d0f8:	1c5a      	adds	r2, r3, #1
 810d0fa:	6022      	str	r2, [r4, #0]
 810d0fc:	701e      	strb	r6, [r3, #0]
 810d0fe:	6962      	ldr	r2, [r4, #20]
 810d100:	1c43      	adds	r3, r0, #1
 810d102:	429a      	cmp	r2, r3
 810d104:	d004      	beq.n	810d110 <__swbuf_r+0x6e>
 810d106:	89a3      	ldrh	r3, [r4, #12]
 810d108:	07db      	lsls	r3, r3, #31
 810d10a:	d5e1      	bpl.n	810d0d0 <__swbuf_r+0x2e>
 810d10c:	2e0a      	cmp	r6, #10
 810d10e:	d1df      	bne.n	810d0d0 <__swbuf_r+0x2e>
 810d110:	4621      	mov	r1, r4
 810d112:	4628      	mov	r0, r5
 810d114:	f002 fe90 	bl	810fe38 <_fflush_r>
 810d118:	2800      	cmp	r0, #0
 810d11a:	d0d9      	beq.n	810d0d0 <__swbuf_r+0x2e>
 810d11c:	e7d6      	b.n	810d0cc <__swbuf_r+0x2a>
	...

0810d120 <__swsetup_r>:
 810d120:	b538      	push	{r3, r4, r5, lr}
 810d122:	4b29      	ldr	r3, [pc, #164]	@ (810d1c8 <__swsetup_r+0xa8>)
 810d124:	4605      	mov	r5, r0
 810d126:	6818      	ldr	r0, [r3, #0]
 810d128:	460c      	mov	r4, r1
 810d12a:	b118      	cbz	r0, 810d134 <__swsetup_r+0x14>
 810d12c:	6a03      	ldr	r3, [r0, #32]
 810d12e:	b90b      	cbnz	r3, 810d134 <__swsetup_r+0x14>
 810d130:	f7ff feae 	bl	810ce90 <__sinit>
 810d134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d138:	0719      	lsls	r1, r3, #28
 810d13a:	d422      	bmi.n	810d182 <__swsetup_r+0x62>
 810d13c:	06da      	lsls	r2, r3, #27
 810d13e:	d407      	bmi.n	810d150 <__swsetup_r+0x30>
 810d140:	2209      	movs	r2, #9
 810d142:	602a      	str	r2, [r5, #0]
 810d144:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810d148:	81a3      	strh	r3, [r4, #12]
 810d14a:	f04f 30ff 	mov.w	r0, #4294967295
 810d14e:	e033      	b.n	810d1b8 <__swsetup_r+0x98>
 810d150:	0758      	lsls	r0, r3, #29
 810d152:	d512      	bpl.n	810d17a <__swsetup_r+0x5a>
 810d154:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810d156:	b141      	cbz	r1, 810d16a <__swsetup_r+0x4a>
 810d158:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810d15c:	4299      	cmp	r1, r3
 810d15e:	d002      	beq.n	810d166 <__swsetup_r+0x46>
 810d160:	4628      	mov	r0, r5
 810d162:	f000 ff15 	bl	810df90 <_free_r>
 810d166:	2300      	movs	r3, #0
 810d168:	6363      	str	r3, [r4, #52]	@ 0x34
 810d16a:	89a3      	ldrh	r3, [r4, #12]
 810d16c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 810d170:	81a3      	strh	r3, [r4, #12]
 810d172:	2300      	movs	r3, #0
 810d174:	6063      	str	r3, [r4, #4]
 810d176:	6923      	ldr	r3, [r4, #16]
 810d178:	6023      	str	r3, [r4, #0]
 810d17a:	89a3      	ldrh	r3, [r4, #12]
 810d17c:	f043 0308 	orr.w	r3, r3, #8
 810d180:	81a3      	strh	r3, [r4, #12]
 810d182:	6923      	ldr	r3, [r4, #16]
 810d184:	b94b      	cbnz	r3, 810d19a <__swsetup_r+0x7a>
 810d186:	89a3      	ldrh	r3, [r4, #12]
 810d188:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 810d18c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810d190:	d003      	beq.n	810d19a <__swsetup_r+0x7a>
 810d192:	4621      	mov	r1, r4
 810d194:	4628      	mov	r0, r5
 810d196:	f002 fe9d 	bl	810fed4 <__smakebuf_r>
 810d19a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d19e:	f013 0201 	ands.w	r2, r3, #1
 810d1a2:	d00a      	beq.n	810d1ba <__swsetup_r+0x9a>
 810d1a4:	2200      	movs	r2, #0
 810d1a6:	60a2      	str	r2, [r4, #8]
 810d1a8:	6962      	ldr	r2, [r4, #20]
 810d1aa:	4252      	negs	r2, r2
 810d1ac:	61a2      	str	r2, [r4, #24]
 810d1ae:	6922      	ldr	r2, [r4, #16]
 810d1b0:	b942      	cbnz	r2, 810d1c4 <__swsetup_r+0xa4>
 810d1b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 810d1b6:	d1c5      	bne.n	810d144 <__swsetup_r+0x24>
 810d1b8:	bd38      	pop	{r3, r4, r5, pc}
 810d1ba:	0799      	lsls	r1, r3, #30
 810d1bc:	bf58      	it	pl
 810d1be:	6962      	ldrpl	r2, [r4, #20]
 810d1c0:	60a2      	str	r2, [r4, #8]
 810d1c2:	e7f4      	b.n	810d1ae <__swsetup_r+0x8e>
 810d1c4:	2000      	movs	r0, #0
 810d1c6:	e7f7      	b.n	810d1b8 <__swsetup_r+0x98>
 810d1c8:	10000094 	.word	0x10000094

0810d1cc <memset>:
 810d1cc:	4402      	add	r2, r0
 810d1ce:	4603      	mov	r3, r0
 810d1d0:	4293      	cmp	r3, r2
 810d1d2:	d100      	bne.n	810d1d6 <memset+0xa>
 810d1d4:	4770      	bx	lr
 810d1d6:	f803 1b01 	strb.w	r1, [r3], #1
 810d1da:	e7f9      	b.n	810d1d0 <memset+0x4>

0810d1dc <_localeconv_r>:
 810d1dc:	4800      	ldr	r0, [pc, #0]	@ (810d1e0 <_localeconv_r+0x4>)
 810d1de:	4770      	bx	lr
 810d1e0:	100001d4 	.word	0x100001d4

0810d1e4 <_close_r>:
 810d1e4:	b538      	push	{r3, r4, r5, lr}
 810d1e6:	4d06      	ldr	r5, [pc, #24]	@ (810d200 <_close_r+0x1c>)
 810d1e8:	2300      	movs	r3, #0
 810d1ea:	4604      	mov	r4, r0
 810d1ec:	4608      	mov	r0, r1
 810d1ee:	602b      	str	r3, [r5, #0]
 810d1f0:	f7f5 ffe8 	bl	81031c4 <_close>
 810d1f4:	1c43      	adds	r3, r0, #1
 810d1f6:	d102      	bne.n	810d1fe <_close_r+0x1a>
 810d1f8:	682b      	ldr	r3, [r5, #0]
 810d1fa:	b103      	cbz	r3, 810d1fe <_close_r+0x1a>
 810d1fc:	6023      	str	r3, [r4, #0]
 810d1fe:	bd38      	pop	{r3, r4, r5, pc}
 810d200:	10000788 	.word	0x10000788

0810d204 <_lseek_r>:
 810d204:	b538      	push	{r3, r4, r5, lr}
 810d206:	4d07      	ldr	r5, [pc, #28]	@ (810d224 <_lseek_r+0x20>)
 810d208:	4604      	mov	r4, r0
 810d20a:	4608      	mov	r0, r1
 810d20c:	4611      	mov	r1, r2
 810d20e:	2200      	movs	r2, #0
 810d210:	602a      	str	r2, [r5, #0]
 810d212:	461a      	mov	r2, r3
 810d214:	f7f5 fffd 	bl	8103212 <_lseek>
 810d218:	1c43      	adds	r3, r0, #1
 810d21a:	d102      	bne.n	810d222 <_lseek_r+0x1e>
 810d21c:	682b      	ldr	r3, [r5, #0]
 810d21e:	b103      	cbz	r3, 810d222 <_lseek_r+0x1e>
 810d220:	6023      	str	r3, [r4, #0]
 810d222:	bd38      	pop	{r3, r4, r5, pc}
 810d224:	10000788 	.word	0x10000788

0810d228 <_read_r>:
 810d228:	b538      	push	{r3, r4, r5, lr}
 810d22a:	4d07      	ldr	r5, [pc, #28]	@ (810d248 <_read_r+0x20>)
 810d22c:	4604      	mov	r4, r0
 810d22e:	4608      	mov	r0, r1
 810d230:	4611      	mov	r1, r2
 810d232:	2200      	movs	r2, #0
 810d234:	602a      	str	r2, [r5, #0]
 810d236:	461a      	mov	r2, r3
 810d238:	f7f5 ff89 	bl	810314e <_read>
 810d23c:	1c43      	adds	r3, r0, #1
 810d23e:	d102      	bne.n	810d246 <_read_r+0x1e>
 810d240:	682b      	ldr	r3, [r5, #0]
 810d242:	b103      	cbz	r3, 810d246 <_read_r+0x1e>
 810d244:	6023      	str	r3, [r4, #0]
 810d246:	bd38      	pop	{r3, r4, r5, pc}
 810d248:	10000788 	.word	0x10000788

0810d24c <_write_r>:
 810d24c:	b538      	push	{r3, r4, r5, lr}
 810d24e:	4d07      	ldr	r5, [pc, #28]	@ (810d26c <_write_r+0x20>)
 810d250:	4604      	mov	r4, r0
 810d252:	4608      	mov	r0, r1
 810d254:	4611      	mov	r1, r2
 810d256:	2200      	movs	r2, #0
 810d258:	602a      	str	r2, [r5, #0]
 810d25a:	461a      	mov	r2, r3
 810d25c:	f7f5 ff96 	bl	810318c <_write>
 810d260:	1c43      	adds	r3, r0, #1
 810d262:	d102      	bne.n	810d26a <_write_r+0x1e>
 810d264:	682b      	ldr	r3, [r5, #0]
 810d266:	b103      	cbz	r3, 810d26a <_write_r+0x1e>
 810d268:	6023      	str	r3, [r4, #0]
 810d26a:	bd38      	pop	{r3, r4, r5, pc}
 810d26c:	10000788 	.word	0x10000788

0810d270 <__errno>:
 810d270:	4b01      	ldr	r3, [pc, #4]	@ (810d278 <__errno+0x8>)
 810d272:	6818      	ldr	r0, [r3, #0]
 810d274:	4770      	bx	lr
 810d276:	bf00      	nop
 810d278:	10000094 	.word	0x10000094

0810d27c <__libc_init_array>:
 810d27c:	b570      	push	{r4, r5, r6, lr}
 810d27e:	4d0d      	ldr	r5, [pc, #52]	@ (810d2b4 <__libc_init_array+0x38>)
 810d280:	4c0d      	ldr	r4, [pc, #52]	@ (810d2b8 <__libc_init_array+0x3c>)
 810d282:	1b64      	subs	r4, r4, r5
 810d284:	10a4      	asrs	r4, r4, #2
 810d286:	2600      	movs	r6, #0
 810d288:	42a6      	cmp	r6, r4
 810d28a:	d109      	bne.n	810d2a0 <__libc_init_array+0x24>
 810d28c:	4d0b      	ldr	r5, [pc, #44]	@ (810d2bc <__libc_init_array+0x40>)
 810d28e:	4c0c      	ldr	r4, [pc, #48]	@ (810d2c0 <__libc_init_array+0x44>)
 810d290:	f004 fb12 	bl	81118b8 <_init>
 810d294:	1b64      	subs	r4, r4, r5
 810d296:	10a4      	asrs	r4, r4, #2
 810d298:	2600      	movs	r6, #0
 810d29a:	42a6      	cmp	r6, r4
 810d29c:	d105      	bne.n	810d2aa <__libc_init_array+0x2e>
 810d29e:	bd70      	pop	{r4, r5, r6, pc}
 810d2a0:	f855 3b04 	ldr.w	r3, [r5], #4
 810d2a4:	4798      	blx	r3
 810d2a6:	3601      	adds	r6, #1
 810d2a8:	e7ee      	b.n	810d288 <__libc_init_array+0xc>
 810d2aa:	f855 3b04 	ldr.w	r3, [r5], #4
 810d2ae:	4798      	blx	r3
 810d2b0:	3601      	adds	r6, #1
 810d2b2:	e7f2      	b.n	810d29a <__libc_init_array+0x1e>
 810d2b4:	081124d0 	.word	0x081124d0
 810d2b8:	081124d0 	.word	0x081124d0
 810d2bc:	081124d0 	.word	0x081124d0
 810d2c0:	081124d4 	.word	0x081124d4

0810d2c4 <__retarget_lock_init_recursive>:
 810d2c4:	4770      	bx	lr

0810d2c6 <__retarget_lock_acquire_recursive>:
 810d2c6:	4770      	bx	lr

0810d2c8 <__retarget_lock_release_recursive>:
 810d2c8:	4770      	bx	lr

0810d2ca <memcpy>:
 810d2ca:	440a      	add	r2, r1
 810d2cc:	4291      	cmp	r1, r2
 810d2ce:	f100 33ff 	add.w	r3, r0, #4294967295
 810d2d2:	d100      	bne.n	810d2d6 <memcpy+0xc>
 810d2d4:	4770      	bx	lr
 810d2d6:	b510      	push	{r4, lr}
 810d2d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 810d2dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 810d2e0:	4291      	cmp	r1, r2
 810d2e2:	d1f9      	bne.n	810d2d8 <memcpy+0xe>
 810d2e4:	bd10      	pop	{r4, pc}
	...

0810d2e8 <nanf>:
 810d2e8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 810d2f0 <nanf+0x8>
 810d2ec:	4770      	bx	lr
 810d2ee:	bf00      	nop
 810d2f0:	7fc00000 	.word	0x7fc00000

0810d2f4 <quorem>:
 810d2f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d2f8:	6903      	ldr	r3, [r0, #16]
 810d2fa:	690c      	ldr	r4, [r1, #16]
 810d2fc:	42a3      	cmp	r3, r4
 810d2fe:	4607      	mov	r7, r0
 810d300:	db7e      	blt.n	810d400 <quorem+0x10c>
 810d302:	3c01      	subs	r4, #1
 810d304:	f101 0814 	add.w	r8, r1, #20
 810d308:	00a3      	lsls	r3, r4, #2
 810d30a:	f100 0514 	add.w	r5, r0, #20
 810d30e:	9300      	str	r3, [sp, #0]
 810d310:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810d314:	9301      	str	r3, [sp, #4]
 810d316:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810d31a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810d31e:	3301      	adds	r3, #1
 810d320:	429a      	cmp	r2, r3
 810d322:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810d326:	fbb2 f6f3 	udiv	r6, r2, r3
 810d32a:	d32e      	bcc.n	810d38a <quorem+0x96>
 810d32c:	f04f 0a00 	mov.w	sl, #0
 810d330:	46c4      	mov	ip, r8
 810d332:	46ae      	mov	lr, r5
 810d334:	46d3      	mov	fp, sl
 810d336:	f85c 3b04 	ldr.w	r3, [ip], #4
 810d33a:	b298      	uxth	r0, r3
 810d33c:	fb06 a000 	mla	r0, r6, r0, sl
 810d340:	0c02      	lsrs	r2, r0, #16
 810d342:	0c1b      	lsrs	r3, r3, #16
 810d344:	fb06 2303 	mla	r3, r6, r3, r2
 810d348:	f8de 2000 	ldr.w	r2, [lr]
 810d34c:	b280      	uxth	r0, r0
 810d34e:	b292      	uxth	r2, r2
 810d350:	1a12      	subs	r2, r2, r0
 810d352:	445a      	add	r2, fp
 810d354:	f8de 0000 	ldr.w	r0, [lr]
 810d358:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810d35c:	b29b      	uxth	r3, r3
 810d35e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 810d362:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 810d366:	b292      	uxth	r2, r2
 810d368:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 810d36c:	45e1      	cmp	r9, ip
 810d36e:	f84e 2b04 	str.w	r2, [lr], #4
 810d372:	ea4f 4b23 	mov.w	fp, r3, asr #16
 810d376:	d2de      	bcs.n	810d336 <quorem+0x42>
 810d378:	9b00      	ldr	r3, [sp, #0]
 810d37a:	58eb      	ldr	r3, [r5, r3]
 810d37c:	b92b      	cbnz	r3, 810d38a <quorem+0x96>
 810d37e:	9b01      	ldr	r3, [sp, #4]
 810d380:	3b04      	subs	r3, #4
 810d382:	429d      	cmp	r5, r3
 810d384:	461a      	mov	r2, r3
 810d386:	d32f      	bcc.n	810d3e8 <quorem+0xf4>
 810d388:	613c      	str	r4, [r7, #16]
 810d38a:	4638      	mov	r0, r7
 810d38c:	f001 f9c4 	bl	810e718 <__mcmp>
 810d390:	2800      	cmp	r0, #0
 810d392:	db25      	blt.n	810d3e0 <quorem+0xec>
 810d394:	4629      	mov	r1, r5
 810d396:	2000      	movs	r0, #0
 810d398:	f858 2b04 	ldr.w	r2, [r8], #4
 810d39c:	f8d1 c000 	ldr.w	ip, [r1]
 810d3a0:	fa1f fe82 	uxth.w	lr, r2
 810d3a4:	fa1f f38c 	uxth.w	r3, ip
 810d3a8:	eba3 030e 	sub.w	r3, r3, lr
 810d3ac:	4403      	add	r3, r0
 810d3ae:	0c12      	lsrs	r2, r2, #16
 810d3b0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 810d3b4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 810d3b8:	b29b      	uxth	r3, r3
 810d3ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810d3be:	45c1      	cmp	r9, r8
 810d3c0:	f841 3b04 	str.w	r3, [r1], #4
 810d3c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 810d3c8:	d2e6      	bcs.n	810d398 <quorem+0xa4>
 810d3ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810d3ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810d3d2:	b922      	cbnz	r2, 810d3de <quorem+0xea>
 810d3d4:	3b04      	subs	r3, #4
 810d3d6:	429d      	cmp	r5, r3
 810d3d8:	461a      	mov	r2, r3
 810d3da:	d30b      	bcc.n	810d3f4 <quorem+0x100>
 810d3dc:	613c      	str	r4, [r7, #16]
 810d3de:	3601      	adds	r6, #1
 810d3e0:	4630      	mov	r0, r6
 810d3e2:	b003      	add	sp, #12
 810d3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d3e8:	6812      	ldr	r2, [r2, #0]
 810d3ea:	3b04      	subs	r3, #4
 810d3ec:	2a00      	cmp	r2, #0
 810d3ee:	d1cb      	bne.n	810d388 <quorem+0x94>
 810d3f0:	3c01      	subs	r4, #1
 810d3f2:	e7c6      	b.n	810d382 <quorem+0x8e>
 810d3f4:	6812      	ldr	r2, [r2, #0]
 810d3f6:	3b04      	subs	r3, #4
 810d3f8:	2a00      	cmp	r2, #0
 810d3fa:	d1ef      	bne.n	810d3dc <quorem+0xe8>
 810d3fc:	3c01      	subs	r4, #1
 810d3fe:	e7ea      	b.n	810d3d6 <quorem+0xe2>
 810d400:	2000      	movs	r0, #0
 810d402:	e7ee      	b.n	810d3e2 <quorem+0xee>
 810d404:	0000      	movs	r0, r0
	...

0810d408 <_dtoa_r>:
 810d408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d40c:	69c7      	ldr	r7, [r0, #28]
 810d40e:	b099      	sub	sp, #100	@ 0x64
 810d410:	ed8d 0b02 	vstr	d0, [sp, #8]
 810d414:	ec55 4b10 	vmov	r4, r5, d0
 810d418:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 810d41a:	9109      	str	r1, [sp, #36]	@ 0x24
 810d41c:	4683      	mov	fp, r0
 810d41e:	920e      	str	r2, [sp, #56]	@ 0x38
 810d420:	9313      	str	r3, [sp, #76]	@ 0x4c
 810d422:	b97f      	cbnz	r7, 810d444 <_dtoa_r+0x3c>
 810d424:	2010      	movs	r0, #16
 810d426:	f000 fdfd 	bl	810e024 <malloc>
 810d42a:	4602      	mov	r2, r0
 810d42c:	f8cb 001c 	str.w	r0, [fp, #28]
 810d430:	b920      	cbnz	r0, 810d43c <_dtoa_r+0x34>
 810d432:	4ba7      	ldr	r3, [pc, #668]	@ (810d6d0 <_dtoa_r+0x2c8>)
 810d434:	21ef      	movs	r1, #239	@ 0xef
 810d436:	48a7      	ldr	r0, [pc, #668]	@ (810d6d4 <_dtoa_r+0x2cc>)
 810d438:	f002 fdee 	bl	8110018 <__assert_func>
 810d43c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 810d440:	6007      	str	r7, [r0, #0]
 810d442:	60c7      	str	r7, [r0, #12]
 810d444:	f8db 301c 	ldr.w	r3, [fp, #28]
 810d448:	6819      	ldr	r1, [r3, #0]
 810d44a:	b159      	cbz	r1, 810d464 <_dtoa_r+0x5c>
 810d44c:	685a      	ldr	r2, [r3, #4]
 810d44e:	604a      	str	r2, [r1, #4]
 810d450:	2301      	movs	r3, #1
 810d452:	4093      	lsls	r3, r2
 810d454:	608b      	str	r3, [r1, #8]
 810d456:	4658      	mov	r0, fp
 810d458:	f000 feda 	bl	810e210 <_Bfree>
 810d45c:	f8db 301c 	ldr.w	r3, [fp, #28]
 810d460:	2200      	movs	r2, #0
 810d462:	601a      	str	r2, [r3, #0]
 810d464:	1e2b      	subs	r3, r5, #0
 810d466:	bfb9      	ittee	lt
 810d468:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 810d46c:	9303      	strlt	r3, [sp, #12]
 810d46e:	2300      	movge	r3, #0
 810d470:	6033      	strge	r3, [r6, #0]
 810d472:	9f03      	ldr	r7, [sp, #12]
 810d474:	4b98      	ldr	r3, [pc, #608]	@ (810d6d8 <_dtoa_r+0x2d0>)
 810d476:	bfbc      	itt	lt
 810d478:	2201      	movlt	r2, #1
 810d47a:	6032      	strlt	r2, [r6, #0]
 810d47c:	43bb      	bics	r3, r7
 810d47e:	d112      	bne.n	810d4a6 <_dtoa_r+0x9e>
 810d480:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 810d482:	f242 730f 	movw	r3, #9999	@ 0x270f
 810d486:	6013      	str	r3, [r2, #0]
 810d488:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810d48c:	4323      	orrs	r3, r4
 810d48e:	f000 854d 	beq.w	810df2c <_dtoa_r+0xb24>
 810d492:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810d494:	f8df a254 	ldr.w	sl, [pc, #596]	@ 810d6ec <_dtoa_r+0x2e4>
 810d498:	2b00      	cmp	r3, #0
 810d49a:	f000 854f 	beq.w	810df3c <_dtoa_r+0xb34>
 810d49e:	f10a 0303 	add.w	r3, sl, #3
 810d4a2:	f000 bd49 	b.w	810df38 <_dtoa_r+0xb30>
 810d4a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 810d4aa:	2200      	movs	r2, #0
 810d4ac:	ec51 0b17 	vmov	r0, r1, d7
 810d4b0:	2300      	movs	r3, #0
 810d4b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 810d4b6:	f7f3 fb8f 	bl	8100bd8 <__aeabi_dcmpeq>
 810d4ba:	4680      	mov	r8, r0
 810d4bc:	b158      	cbz	r0, 810d4d6 <_dtoa_r+0xce>
 810d4be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 810d4c0:	2301      	movs	r3, #1
 810d4c2:	6013      	str	r3, [r2, #0]
 810d4c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810d4c6:	b113      	cbz	r3, 810d4ce <_dtoa_r+0xc6>
 810d4c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 810d4ca:	4b84      	ldr	r3, [pc, #528]	@ (810d6dc <_dtoa_r+0x2d4>)
 810d4cc:	6013      	str	r3, [r2, #0]
 810d4ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 810d6f0 <_dtoa_r+0x2e8>
 810d4d2:	f000 bd33 	b.w	810df3c <_dtoa_r+0xb34>
 810d4d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 810d4da:	aa16      	add	r2, sp, #88	@ 0x58
 810d4dc:	a917      	add	r1, sp, #92	@ 0x5c
 810d4de:	4658      	mov	r0, fp
 810d4e0:	f001 fa3a 	bl	810e958 <__d2b>
 810d4e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 810d4e8:	4681      	mov	r9, r0
 810d4ea:	2e00      	cmp	r6, #0
 810d4ec:	d077      	beq.n	810d5de <_dtoa_r+0x1d6>
 810d4ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810d4f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 810d4f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810d4f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810d4fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 810d500:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 810d504:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 810d508:	4619      	mov	r1, r3
 810d50a:	2200      	movs	r2, #0
 810d50c:	4b74      	ldr	r3, [pc, #464]	@ (810d6e0 <_dtoa_r+0x2d8>)
 810d50e:	f7f2 ff43 	bl	8100398 <__aeabi_dsub>
 810d512:	a369      	add	r3, pc, #420	@ (adr r3, 810d6b8 <_dtoa_r+0x2b0>)
 810d514:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d518:	f7f3 f8f6 	bl	8100708 <__aeabi_dmul>
 810d51c:	a368      	add	r3, pc, #416	@ (adr r3, 810d6c0 <_dtoa_r+0x2b8>)
 810d51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d522:	f7f2 ff3b 	bl	810039c <__adddf3>
 810d526:	4604      	mov	r4, r0
 810d528:	4630      	mov	r0, r6
 810d52a:	460d      	mov	r5, r1
 810d52c:	f7f3 f882 	bl	8100634 <__aeabi_i2d>
 810d530:	a365      	add	r3, pc, #404	@ (adr r3, 810d6c8 <_dtoa_r+0x2c0>)
 810d532:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d536:	f7f3 f8e7 	bl	8100708 <__aeabi_dmul>
 810d53a:	4602      	mov	r2, r0
 810d53c:	460b      	mov	r3, r1
 810d53e:	4620      	mov	r0, r4
 810d540:	4629      	mov	r1, r5
 810d542:	f7f2 ff2b 	bl	810039c <__adddf3>
 810d546:	4604      	mov	r4, r0
 810d548:	460d      	mov	r5, r1
 810d54a:	f7f3 fb8d 	bl	8100c68 <__aeabi_d2iz>
 810d54e:	2200      	movs	r2, #0
 810d550:	4607      	mov	r7, r0
 810d552:	2300      	movs	r3, #0
 810d554:	4620      	mov	r0, r4
 810d556:	4629      	mov	r1, r5
 810d558:	f7f3 fb48 	bl	8100bec <__aeabi_dcmplt>
 810d55c:	b140      	cbz	r0, 810d570 <_dtoa_r+0x168>
 810d55e:	4638      	mov	r0, r7
 810d560:	f7f3 f868 	bl	8100634 <__aeabi_i2d>
 810d564:	4622      	mov	r2, r4
 810d566:	462b      	mov	r3, r5
 810d568:	f7f3 fb36 	bl	8100bd8 <__aeabi_dcmpeq>
 810d56c:	b900      	cbnz	r0, 810d570 <_dtoa_r+0x168>
 810d56e:	3f01      	subs	r7, #1
 810d570:	2f16      	cmp	r7, #22
 810d572:	d851      	bhi.n	810d618 <_dtoa_r+0x210>
 810d574:	4b5b      	ldr	r3, [pc, #364]	@ (810d6e4 <_dtoa_r+0x2dc>)
 810d576:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810d57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d57e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810d582:	f7f3 fb33 	bl	8100bec <__aeabi_dcmplt>
 810d586:	2800      	cmp	r0, #0
 810d588:	d048      	beq.n	810d61c <_dtoa_r+0x214>
 810d58a:	3f01      	subs	r7, #1
 810d58c:	2300      	movs	r3, #0
 810d58e:	9312      	str	r3, [sp, #72]	@ 0x48
 810d590:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810d592:	1b9b      	subs	r3, r3, r6
 810d594:	1e5a      	subs	r2, r3, #1
 810d596:	bf44      	itt	mi
 810d598:	f1c3 0801 	rsbmi	r8, r3, #1
 810d59c:	2300      	movmi	r3, #0
 810d59e:	9208      	str	r2, [sp, #32]
 810d5a0:	bf54      	ite	pl
 810d5a2:	f04f 0800 	movpl.w	r8, #0
 810d5a6:	9308      	strmi	r3, [sp, #32]
 810d5a8:	2f00      	cmp	r7, #0
 810d5aa:	db39      	blt.n	810d620 <_dtoa_r+0x218>
 810d5ac:	9b08      	ldr	r3, [sp, #32]
 810d5ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 810d5b0:	443b      	add	r3, r7
 810d5b2:	9308      	str	r3, [sp, #32]
 810d5b4:	2300      	movs	r3, #0
 810d5b6:	930a      	str	r3, [sp, #40]	@ 0x28
 810d5b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d5ba:	2b09      	cmp	r3, #9
 810d5bc:	d864      	bhi.n	810d688 <_dtoa_r+0x280>
 810d5be:	2b05      	cmp	r3, #5
 810d5c0:	bfc4      	itt	gt
 810d5c2:	3b04      	subgt	r3, #4
 810d5c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 810d5c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d5c8:	f1a3 0302 	sub.w	r3, r3, #2
 810d5cc:	bfcc      	ite	gt
 810d5ce:	2400      	movgt	r4, #0
 810d5d0:	2401      	movle	r4, #1
 810d5d2:	2b03      	cmp	r3, #3
 810d5d4:	d863      	bhi.n	810d69e <_dtoa_r+0x296>
 810d5d6:	e8df f003 	tbb	[pc, r3]
 810d5da:	372a      	.short	0x372a
 810d5dc:	5535      	.short	0x5535
 810d5de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 810d5e2:	441e      	add	r6, r3
 810d5e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 810d5e8:	2b20      	cmp	r3, #32
 810d5ea:	bfc1      	itttt	gt
 810d5ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 810d5f0:	409f      	lslgt	r7, r3
 810d5f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 810d5f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 810d5fa:	bfd6      	itet	le
 810d5fc:	f1c3 0320 	rsble	r3, r3, #32
 810d600:	ea47 0003 	orrgt.w	r0, r7, r3
 810d604:	fa04 f003 	lslle.w	r0, r4, r3
 810d608:	f7f3 f804 	bl	8100614 <__aeabi_ui2d>
 810d60c:	2201      	movs	r2, #1
 810d60e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 810d612:	3e01      	subs	r6, #1
 810d614:	9214      	str	r2, [sp, #80]	@ 0x50
 810d616:	e777      	b.n	810d508 <_dtoa_r+0x100>
 810d618:	2301      	movs	r3, #1
 810d61a:	e7b8      	b.n	810d58e <_dtoa_r+0x186>
 810d61c:	9012      	str	r0, [sp, #72]	@ 0x48
 810d61e:	e7b7      	b.n	810d590 <_dtoa_r+0x188>
 810d620:	427b      	negs	r3, r7
 810d622:	930a      	str	r3, [sp, #40]	@ 0x28
 810d624:	2300      	movs	r3, #0
 810d626:	eba8 0807 	sub.w	r8, r8, r7
 810d62a:	930f      	str	r3, [sp, #60]	@ 0x3c
 810d62c:	e7c4      	b.n	810d5b8 <_dtoa_r+0x1b0>
 810d62e:	2300      	movs	r3, #0
 810d630:	930b      	str	r3, [sp, #44]	@ 0x2c
 810d632:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810d634:	2b00      	cmp	r3, #0
 810d636:	dc35      	bgt.n	810d6a4 <_dtoa_r+0x29c>
 810d638:	2301      	movs	r3, #1
 810d63a:	9300      	str	r3, [sp, #0]
 810d63c:	9307      	str	r3, [sp, #28]
 810d63e:	461a      	mov	r2, r3
 810d640:	920e      	str	r2, [sp, #56]	@ 0x38
 810d642:	e00b      	b.n	810d65c <_dtoa_r+0x254>
 810d644:	2301      	movs	r3, #1
 810d646:	e7f3      	b.n	810d630 <_dtoa_r+0x228>
 810d648:	2300      	movs	r3, #0
 810d64a:	930b      	str	r3, [sp, #44]	@ 0x2c
 810d64c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810d64e:	18fb      	adds	r3, r7, r3
 810d650:	9300      	str	r3, [sp, #0]
 810d652:	3301      	adds	r3, #1
 810d654:	2b01      	cmp	r3, #1
 810d656:	9307      	str	r3, [sp, #28]
 810d658:	bfb8      	it	lt
 810d65a:	2301      	movlt	r3, #1
 810d65c:	f8db 001c 	ldr.w	r0, [fp, #28]
 810d660:	2100      	movs	r1, #0
 810d662:	2204      	movs	r2, #4
 810d664:	f102 0514 	add.w	r5, r2, #20
 810d668:	429d      	cmp	r5, r3
 810d66a:	d91f      	bls.n	810d6ac <_dtoa_r+0x2a4>
 810d66c:	6041      	str	r1, [r0, #4]
 810d66e:	4658      	mov	r0, fp
 810d670:	f000 fd8e 	bl	810e190 <_Balloc>
 810d674:	4682      	mov	sl, r0
 810d676:	2800      	cmp	r0, #0
 810d678:	d13c      	bne.n	810d6f4 <_dtoa_r+0x2ec>
 810d67a:	4b1b      	ldr	r3, [pc, #108]	@ (810d6e8 <_dtoa_r+0x2e0>)
 810d67c:	4602      	mov	r2, r0
 810d67e:	f240 11af 	movw	r1, #431	@ 0x1af
 810d682:	e6d8      	b.n	810d436 <_dtoa_r+0x2e>
 810d684:	2301      	movs	r3, #1
 810d686:	e7e0      	b.n	810d64a <_dtoa_r+0x242>
 810d688:	2401      	movs	r4, #1
 810d68a:	2300      	movs	r3, #0
 810d68c:	9309      	str	r3, [sp, #36]	@ 0x24
 810d68e:	940b      	str	r4, [sp, #44]	@ 0x2c
 810d690:	f04f 33ff 	mov.w	r3, #4294967295
 810d694:	9300      	str	r3, [sp, #0]
 810d696:	9307      	str	r3, [sp, #28]
 810d698:	2200      	movs	r2, #0
 810d69a:	2312      	movs	r3, #18
 810d69c:	e7d0      	b.n	810d640 <_dtoa_r+0x238>
 810d69e:	2301      	movs	r3, #1
 810d6a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 810d6a2:	e7f5      	b.n	810d690 <_dtoa_r+0x288>
 810d6a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810d6a6:	9300      	str	r3, [sp, #0]
 810d6a8:	9307      	str	r3, [sp, #28]
 810d6aa:	e7d7      	b.n	810d65c <_dtoa_r+0x254>
 810d6ac:	3101      	adds	r1, #1
 810d6ae:	0052      	lsls	r2, r2, #1
 810d6b0:	e7d8      	b.n	810d664 <_dtoa_r+0x25c>
 810d6b2:	bf00      	nop
 810d6b4:	f3af 8000 	nop.w
 810d6b8:	636f4361 	.word	0x636f4361
 810d6bc:	3fd287a7 	.word	0x3fd287a7
 810d6c0:	8b60c8b3 	.word	0x8b60c8b3
 810d6c4:	3fc68a28 	.word	0x3fc68a28
 810d6c8:	509f79fb 	.word	0x509f79fb
 810d6cc:	3fd34413 	.word	0x3fd34413
 810d6d0:	08111f0a 	.word	0x08111f0a
 810d6d4:	08111f21 	.word	0x08111f21
 810d6d8:	7ff00000 	.word	0x7ff00000
 810d6dc:	08111ed5 	.word	0x08111ed5
 810d6e0:	3ff80000 	.word	0x3ff80000
 810d6e4:	08112018 	.word	0x08112018
 810d6e8:	08111f79 	.word	0x08111f79
 810d6ec:	08111f06 	.word	0x08111f06
 810d6f0:	08111ed4 	.word	0x08111ed4
 810d6f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 810d6f8:	6018      	str	r0, [r3, #0]
 810d6fa:	9b07      	ldr	r3, [sp, #28]
 810d6fc:	2b0e      	cmp	r3, #14
 810d6fe:	f200 80a4 	bhi.w	810d84a <_dtoa_r+0x442>
 810d702:	2c00      	cmp	r4, #0
 810d704:	f000 80a1 	beq.w	810d84a <_dtoa_r+0x442>
 810d708:	2f00      	cmp	r7, #0
 810d70a:	dd33      	ble.n	810d774 <_dtoa_r+0x36c>
 810d70c:	4bad      	ldr	r3, [pc, #692]	@ (810d9c4 <_dtoa_r+0x5bc>)
 810d70e:	f007 020f 	and.w	r2, r7, #15
 810d712:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810d716:	ed93 7b00 	vldr	d7, [r3]
 810d71a:	05f8      	lsls	r0, r7, #23
 810d71c:	ed8d 7b04 	vstr	d7, [sp, #16]
 810d720:	ea4f 1427 	mov.w	r4, r7, asr #4
 810d724:	d516      	bpl.n	810d754 <_dtoa_r+0x34c>
 810d726:	4ba8      	ldr	r3, [pc, #672]	@ (810d9c8 <_dtoa_r+0x5c0>)
 810d728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810d72c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810d730:	f7f3 f914 	bl	810095c <__aeabi_ddiv>
 810d734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810d738:	f004 040f 	and.w	r4, r4, #15
 810d73c:	2603      	movs	r6, #3
 810d73e:	4da2      	ldr	r5, [pc, #648]	@ (810d9c8 <_dtoa_r+0x5c0>)
 810d740:	b954      	cbnz	r4, 810d758 <_dtoa_r+0x350>
 810d742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810d746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810d74a:	f7f3 f907 	bl	810095c <__aeabi_ddiv>
 810d74e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810d752:	e028      	b.n	810d7a6 <_dtoa_r+0x39e>
 810d754:	2602      	movs	r6, #2
 810d756:	e7f2      	b.n	810d73e <_dtoa_r+0x336>
 810d758:	07e1      	lsls	r1, r4, #31
 810d75a:	d508      	bpl.n	810d76e <_dtoa_r+0x366>
 810d75c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810d760:	e9d5 2300 	ldrd	r2, r3, [r5]
 810d764:	f7f2 ffd0 	bl	8100708 <__aeabi_dmul>
 810d768:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810d76c:	3601      	adds	r6, #1
 810d76e:	1064      	asrs	r4, r4, #1
 810d770:	3508      	adds	r5, #8
 810d772:	e7e5      	b.n	810d740 <_dtoa_r+0x338>
 810d774:	f000 80d2 	beq.w	810d91c <_dtoa_r+0x514>
 810d778:	427c      	negs	r4, r7
 810d77a:	4b92      	ldr	r3, [pc, #584]	@ (810d9c4 <_dtoa_r+0x5bc>)
 810d77c:	4d92      	ldr	r5, [pc, #584]	@ (810d9c8 <_dtoa_r+0x5c0>)
 810d77e:	f004 020f 	and.w	r2, r4, #15
 810d782:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810d786:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d78a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810d78e:	f7f2 ffbb 	bl	8100708 <__aeabi_dmul>
 810d792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810d796:	1124      	asrs	r4, r4, #4
 810d798:	2300      	movs	r3, #0
 810d79a:	2602      	movs	r6, #2
 810d79c:	2c00      	cmp	r4, #0
 810d79e:	f040 80b2 	bne.w	810d906 <_dtoa_r+0x4fe>
 810d7a2:	2b00      	cmp	r3, #0
 810d7a4:	d1d3      	bne.n	810d74e <_dtoa_r+0x346>
 810d7a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810d7a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 810d7ac:	2b00      	cmp	r3, #0
 810d7ae:	f000 80b7 	beq.w	810d920 <_dtoa_r+0x518>
 810d7b2:	4b86      	ldr	r3, [pc, #536]	@ (810d9cc <_dtoa_r+0x5c4>)
 810d7b4:	2200      	movs	r2, #0
 810d7b6:	4620      	mov	r0, r4
 810d7b8:	4629      	mov	r1, r5
 810d7ba:	f7f3 fa17 	bl	8100bec <__aeabi_dcmplt>
 810d7be:	2800      	cmp	r0, #0
 810d7c0:	f000 80ae 	beq.w	810d920 <_dtoa_r+0x518>
 810d7c4:	9b07      	ldr	r3, [sp, #28]
 810d7c6:	2b00      	cmp	r3, #0
 810d7c8:	f000 80aa 	beq.w	810d920 <_dtoa_r+0x518>
 810d7cc:	9b00      	ldr	r3, [sp, #0]
 810d7ce:	2b00      	cmp	r3, #0
 810d7d0:	dd37      	ble.n	810d842 <_dtoa_r+0x43a>
 810d7d2:	1e7b      	subs	r3, r7, #1
 810d7d4:	9304      	str	r3, [sp, #16]
 810d7d6:	4620      	mov	r0, r4
 810d7d8:	4b7d      	ldr	r3, [pc, #500]	@ (810d9d0 <_dtoa_r+0x5c8>)
 810d7da:	2200      	movs	r2, #0
 810d7dc:	4629      	mov	r1, r5
 810d7de:	f7f2 ff93 	bl	8100708 <__aeabi_dmul>
 810d7e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810d7e6:	9c00      	ldr	r4, [sp, #0]
 810d7e8:	3601      	adds	r6, #1
 810d7ea:	4630      	mov	r0, r6
 810d7ec:	f7f2 ff22 	bl	8100634 <__aeabi_i2d>
 810d7f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810d7f4:	f7f2 ff88 	bl	8100708 <__aeabi_dmul>
 810d7f8:	4b76      	ldr	r3, [pc, #472]	@ (810d9d4 <_dtoa_r+0x5cc>)
 810d7fa:	2200      	movs	r2, #0
 810d7fc:	f7f2 fdce 	bl	810039c <__adddf3>
 810d800:	4605      	mov	r5, r0
 810d802:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 810d806:	2c00      	cmp	r4, #0
 810d808:	f040 808d 	bne.w	810d926 <_dtoa_r+0x51e>
 810d80c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810d810:	4b71      	ldr	r3, [pc, #452]	@ (810d9d8 <_dtoa_r+0x5d0>)
 810d812:	2200      	movs	r2, #0
 810d814:	f7f2 fdc0 	bl	8100398 <__aeabi_dsub>
 810d818:	4602      	mov	r2, r0
 810d81a:	460b      	mov	r3, r1
 810d81c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810d820:	462a      	mov	r2, r5
 810d822:	4633      	mov	r3, r6
 810d824:	f7f3 fa00 	bl	8100c28 <__aeabi_dcmpgt>
 810d828:	2800      	cmp	r0, #0
 810d82a:	f040 828b 	bne.w	810dd44 <_dtoa_r+0x93c>
 810d82e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810d832:	462a      	mov	r2, r5
 810d834:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 810d838:	f7f3 f9d8 	bl	8100bec <__aeabi_dcmplt>
 810d83c:	2800      	cmp	r0, #0
 810d83e:	f040 8128 	bne.w	810da92 <_dtoa_r+0x68a>
 810d842:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 810d846:	e9cd 3402 	strd	r3, r4, [sp, #8]
 810d84a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810d84c:	2b00      	cmp	r3, #0
 810d84e:	f2c0 815a 	blt.w	810db06 <_dtoa_r+0x6fe>
 810d852:	2f0e      	cmp	r7, #14
 810d854:	f300 8157 	bgt.w	810db06 <_dtoa_r+0x6fe>
 810d858:	4b5a      	ldr	r3, [pc, #360]	@ (810d9c4 <_dtoa_r+0x5bc>)
 810d85a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810d85e:	ed93 7b00 	vldr	d7, [r3]
 810d862:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810d864:	2b00      	cmp	r3, #0
 810d866:	ed8d 7b00 	vstr	d7, [sp]
 810d86a:	da03      	bge.n	810d874 <_dtoa_r+0x46c>
 810d86c:	9b07      	ldr	r3, [sp, #28]
 810d86e:	2b00      	cmp	r3, #0
 810d870:	f340 8101 	ble.w	810da76 <_dtoa_r+0x66e>
 810d874:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 810d878:	4656      	mov	r6, sl
 810d87a:	e9dd 2300 	ldrd	r2, r3, [sp]
 810d87e:	4620      	mov	r0, r4
 810d880:	4629      	mov	r1, r5
 810d882:	f7f3 f86b 	bl	810095c <__aeabi_ddiv>
 810d886:	f7f3 f9ef 	bl	8100c68 <__aeabi_d2iz>
 810d88a:	4680      	mov	r8, r0
 810d88c:	f7f2 fed2 	bl	8100634 <__aeabi_i2d>
 810d890:	e9dd 2300 	ldrd	r2, r3, [sp]
 810d894:	f7f2 ff38 	bl	8100708 <__aeabi_dmul>
 810d898:	4602      	mov	r2, r0
 810d89a:	460b      	mov	r3, r1
 810d89c:	4620      	mov	r0, r4
 810d89e:	4629      	mov	r1, r5
 810d8a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 810d8a4:	f7f2 fd78 	bl	8100398 <__aeabi_dsub>
 810d8a8:	f806 4b01 	strb.w	r4, [r6], #1
 810d8ac:	9d07      	ldr	r5, [sp, #28]
 810d8ae:	eba6 040a 	sub.w	r4, r6, sl
 810d8b2:	42a5      	cmp	r5, r4
 810d8b4:	4602      	mov	r2, r0
 810d8b6:	460b      	mov	r3, r1
 810d8b8:	f040 8117 	bne.w	810daea <_dtoa_r+0x6e2>
 810d8bc:	f7f2 fd6e 	bl	810039c <__adddf3>
 810d8c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 810d8c4:	4604      	mov	r4, r0
 810d8c6:	460d      	mov	r5, r1
 810d8c8:	f7f3 f9ae 	bl	8100c28 <__aeabi_dcmpgt>
 810d8cc:	2800      	cmp	r0, #0
 810d8ce:	f040 80f9 	bne.w	810dac4 <_dtoa_r+0x6bc>
 810d8d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 810d8d6:	4620      	mov	r0, r4
 810d8d8:	4629      	mov	r1, r5
 810d8da:	f7f3 f97d 	bl	8100bd8 <__aeabi_dcmpeq>
 810d8de:	b118      	cbz	r0, 810d8e8 <_dtoa_r+0x4e0>
 810d8e0:	f018 0f01 	tst.w	r8, #1
 810d8e4:	f040 80ee 	bne.w	810dac4 <_dtoa_r+0x6bc>
 810d8e8:	4649      	mov	r1, r9
 810d8ea:	4658      	mov	r0, fp
 810d8ec:	f000 fc90 	bl	810e210 <_Bfree>
 810d8f0:	2300      	movs	r3, #0
 810d8f2:	7033      	strb	r3, [r6, #0]
 810d8f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810d8f6:	3701      	adds	r7, #1
 810d8f8:	601f      	str	r7, [r3, #0]
 810d8fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810d8fc:	2b00      	cmp	r3, #0
 810d8fe:	f000 831d 	beq.w	810df3c <_dtoa_r+0xb34>
 810d902:	601e      	str	r6, [r3, #0]
 810d904:	e31a      	b.n	810df3c <_dtoa_r+0xb34>
 810d906:	07e2      	lsls	r2, r4, #31
 810d908:	d505      	bpl.n	810d916 <_dtoa_r+0x50e>
 810d90a:	e9d5 2300 	ldrd	r2, r3, [r5]
 810d90e:	f7f2 fefb 	bl	8100708 <__aeabi_dmul>
 810d912:	3601      	adds	r6, #1
 810d914:	2301      	movs	r3, #1
 810d916:	1064      	asrs	r4, r4, #1
 810d918:	3508      	adds	r5, #8
 810d91a:	e73f      	b.n	810d79c <_dtoa_r+0x394>
 810d91c:	2602      	movs	r6, #2
 810d91e:	e742      	b.n	810d7a6 <_dtoa_r+0x39e>
 810d920:	9c07      	ldr	r4, [sp, #28]
 810d922:	9704      	str	r7, [sp, #16]
 810d924:	e761      	b.n	810d7ea <_dtoa_r+0x3e2>
 810d926:	4b27      	ldr	r3, [pc, #156]	@ (810d9c4 <_dtoa_r+0x5bc>)
 810d928:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810d92a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810d92e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810d932:	4454      	add	r4, sl
 810d934:	2900      	cmp	r1, #0
 810d936:	d053      	beq.n	810d9e0 <_dtoa_r+0x5d8>
 810d938:	4928      	ldr	r1, [pc, #160]	@ (810d9dc <_dtoa_r+0x5d4>)
 810d93a:	2000      	movs	r0, #0
 810d93c:	f7f3 f80e 	bl	810095c <__aeabi_ddiv>
 810d940:	4633      	mov	r3, r6
 810d942:	462a      	mov	r2, r5
 810d944:	f7f2 fd28 	bl	8100398 <__aeabi_dsub>
 810d948:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810d94c:	4656      	mov	r6, sl
 810d94e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810d952:	f7f3 f989 	bl	8100c68 <__aeabi_d2iz>
 810d956:	4605      	mov	r5, r0
 810d958:	f7f2 fe6c 	bl	8100634 <__aeabi_i2d>
 810d95c:	4602      	mov	r2, r0
 810d95e:	460b      	mov	r3, r1
 810d960:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810d964:	f7f2 fd18 	bl	8100398 <__aeabi_dsub>
 810d968:	3530      	adds	r5, #48	@ 0x30
 810d96a:	4602      	mov	r2, r0
 810d96c:	460b      	mov	r3, r1
 810d96e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810d972:	f806 5b01 	strb.w	r5, [r6], #1
 810d976:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810d97a:	f7f3 f937 	bl	8100bec <__aeabi_dcmplt>
 810d97e:	2800      	cmp	r0, #0
 810d980:	d171      	bne.n	810da66 <_dtoa_r+0x65e>
 810d982:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810d986:	4911      	ldr	r1, [pc, #68]	@ (810d9cc <_dtoa_r+0x5c4>)
 810d988:	2000      	movs	r0, #0
 810d98a:	f7f2 fd05 	bl	8100398 <__aeabi_dsub>
 810d98e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810d992:	f7f3 f92b 	bl	8100bec <__aeabi_dcmplt>
 810d996:	2800      	cmp	r0, #0
 810d998:	f040 8095 	bne.w	810dac6 <_dtoa_r+0x6be>
 810d99c:	42a6      	cmp	r6, r4
 810d99e:	f43f af50 	beq.w	810d842 <_dtoa_r+0x43a>
 810d9a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810d9a6:	4b0a      	ldr	r3, [pc, #40]	@ (810d9d0 <_dtoa_r+0x5c8>)
 810d9a8:	2200      	movs	r2, #0
 810d9aa:	f7f2 fead 	bl	8100708 <__aeabi_dmul>
 810d9ae:	4b08      	ldr	r3, [pc, #32]	@ (810d9d0 <_dtoa_r+0x5c8>)
 810d9b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810d9b4:	2200      	movs	r2, #0
 810d9b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810d9ba:	f7f2 fea5 	bl	8100708 <__aeabi_dmul>
 810d9be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810d9c2:	e7c4      	b.n	810d94e <_dtoa_r+0x546>
 810d9c4:	08112018 	.word	0x08112018
 810d9c8:	08111ff0 	.word	0x08111ff0
 810d9cc:	3ff00000 	.word	0x3ff00000
 810d9d0:	40240000 	.word	0x40240000
 810d9d4:	401c0000 	.word	0x401c0000
 810d9d8:	40140000 	.word	0x40140000
 810d9dc:	3fe00000 	.word	0x3fe00000
 810d9e0:	4631      	mov	r1, r6
 810d9e2:	4628      	mov	r0, r5
 810d9e4:	f7f2 fe90 	bl	8100708 <__aeabi_dmul>
 810d9e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810d9ec:	9415      	str	r4, [sp, #84]	@ 0x54
 810d9ee:	4656      	mov	r6, sl
 810d9f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810d9f4:	f7f3 f938 	bl	8100c68 <__aeabi_d2iz>
 810d9f8:	4605      	mov	r5, r0
 810d9fa:	f7f2 fe1b 	bl	8100634 <__aeabi_i2d>
 810d9fe:	4602      	mov	r2, r0
 810da00:	460b      	mov	r3, r1
 810da02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810da06:	f7f2 fcc7 	bl	8100398 <__aeabi_dsub>
 810da0a:	3530      	adds	r5, #48	@ 0x30
 810da0c:	f806 5b01 	strb.w	r5, [r6], #1
 810da10:	4602      	mov	r2, r0
 810da12:	460b      	mov	r3, r1
 810da14:	42a6      	cmp	r6, r4
 810da16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810da1a:	f04f 0200 	mov.w	r2, #0
 810da1e:	d124      	bne.n	810da6a <_dtoa_r+0x662>
 810da20:	4bac      	ldr	r3, [pc, #688]	@ (810dcd4 <_dtoa_r+0x8cc>)
 810da22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810da26:	f7f2 fcb9 	bl	810039c <__adddf3>
 810da2a:	4602      	mov	r2, r0
 810da2c:	460b      	mov	r3, r1
 810da2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810da32:	f7f3 f8f9 	bl	8100c28 <__aeabi_dcmpgt>
 810da36:	2800      	cmp	r0, #0
 810da38:	d145      	bne.n	810dac6 <_dtoa_r+0x6be>
 810da3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810da3e:	49a5      	ldr	r1, [pc, #660]	@ (810dcd4 <_dtoa_r+0x8cc>)
 810da40:	2000      	movs	r0, #0
 810da42:	f7f2 fca9 	bl	8100398 <__aeabi_dsub>
 810da46:	4602      	mov	r2, r0
 810da48:	460b      	mov	r3, r1
 810da4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810da4e:	f7f3 f8cd 	bl	8100bec <__aeabi_dcmplt>
 810da52:	2800      	cmp	r0, #0
 810da54:	f43f aef5 	beq.w	810d842 <_dtoa_r+0x43a>
 810da58:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 810da5a:	1e73      	subs	r3, r6, #1
 810da5c:	9315      	str	r3, [sp, #84]	@ 0x54
 810da5e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810da62:	2b30      	cmp	r3, #48	@ 0x30
 810da64:	d0f8      	beq.n	810da58 <_dtoa_r+0x650>
 810da66:	9f04      	ldr	r7, [sp, #16]
 810da68:	e73e      	b.n	810d8e8 <_dtoa_r+0x4e0>
 810da6a:	4b9b      	ldr	r3, [pc, #620]	@ (810dcd8 <_dtoa_r+0x8d0>)
 810da6c:	f7f2 fe4c 	bl	8100708 <__aeabi_dmul>
 810da70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810da74:	e7bc      	b.n	810d9f0 <_dtoa_r+0x5e8>
 810da76:	d10c      	bne.n	810da92 <_dtoa_r+0x68a>
 810da78:	4b98      	ldr	r3, [pc, #608]	@ (810dcdc <_dtoa_r+0x8d4>)
 810da7a:	2200      	movs	r2, #0
 810da7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810da80:	f7f2 fe42 	bl	8100708 <__aeabi_dmul>
 810da84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810da88:	f7f3 f8c4 	bl	8100c14 <__aeabi_dcmpge>
 810da8c:	2800      	cmp	r0, #0
 810da8e:	f000 8157 	beq.w	810dd40 <_dtoa_r+0x938>
 810da92:	2400      	movs	r4, #0
 810da94:	4625      	mov	r5, r4
 810da96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810da98:	43db      	mvns	r3, r3
 810da9a:	9304      	str	r3, [sp, #16]
 810da9c:	4656      	mov	r6, sl
 810da9e:	2700      	movs	r7, #0
 810daa0:	4621      	mov	r1, r4
 810daa2:	4658      	mov	r0, fp
 810daa4:	f000 fbb4 	bl	810e210 <_Bfree>
 810daa8:	2d00      	cmp	r5, #0
 810daaa:	d0dc      	beq.n	810da66 <_dtoa_r+0x65e>
 810daac:	b12f      	cbz	r7, 810daba <_dtoa_r+0x6b2>
 810daae:	42af      	cmp	r7, r5
 810dab0:	d003      	beq.n	810daba <_dtoa_r+0x6b2>
 810dab2:	4639      	mov	r1, r7
 810dab4:	4658      	mov	r0, fp
 810dab6:	f000 fbab 	bl	810e210 <_Bfree>
 810daba:	4629      	mov	r1, r5
 810dabc:	4658      	mov	r0, fp
 810dabe:	f000 fba7 	bl	810e210 <_Bfree>
 810dac2:	e7d0      	b.n	810da66 <_dtoa_r+0x65e>
 810dac4:	9704      	str	r7, [sp, #16]
 810dac6:	4633      	mov	r3, r6
 810dac8:	461e      	mov	r6, r3
 810daca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810dace:	2a39      	cmp	r2, #57	@ 0x39
 810dad0:	d107      	bne.n	810dae2 <_dtoa_r+0x6da>
 810dad2:	459a      	cmp	sl, r3
 810dad4:	d1f8      	bne.n	810dac8 <_dtoa_r+0x6c0>
 810dad6:	9a04      	ldr	r2, [sp, #16]
 810dad8:	3201      	adds	r2, #1
 810dada:	9204      	str	r2, [sp, #16]
 810dadc:	2230      	movs	r2, #48	@ 0x30
 810dade:	f88a 2000 	strb.w	r2, [sl]
 810dae2:	781a      	ldrb	r2, [r3, #0]
 810dae4:	3201      	adds	r2, #1
 810dae6:	701a      	strb	r2, [r3, #0]
 810dae8:	e7bd      	b.n	810da66 <_dtoa_r+0x65e>
 810daea:	4b7b      	ldr	r3, [pc, #492]	@ (810dcd8 <_dtoa_r+0x8d0>)
 810daec:	2200      	movs	r2, #0
 810daee:	f7f2 fe0b 	bl	8100708 <__aeabi_dmul>
 810daf2:	2200      	movs	r2, #0
 810daf4:	2300      	movs	r3, #0
 810daf6:	4604      	mov	r4, r0
 810daf8:	460d      	mov	r5, r1
 810dafa:	f7f3 f86d 	bl	8100bd8 <__aeabi_dcmpeq>
 810dafe:	2800      	cmp	r0, #0
 810db00:	f43f aebb 	beq.w	810d87a <_dtoa_r+0x472>
 810db04:	e6f0      	b.n	810d8e8 <_dtoa_r+0x4e0>
 810db06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 810db08:	2a00      	cmp	r2, #0
 810db0a:	f000 80db 	beq.w	810dcc4 <_dtoa_r+0x8bc>
 810db0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810db10:	2a01      	cmp	r2, #1
 810db12:	f300 80bf 	bgt.w	810dc94 <_dtoa_r+0x88c>
 810db16:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 810db18:	2a00      	cmp	r2, #0
 810db1a:	f000 80b7 	beq.w	810dc8c <_dtoa_r+0x884>
 810db1e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 810db22:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810db24:	4646      	mov	r6, r8
 810db26:	9a08      	ldr	r2, [sp, #32]
 810db28:	2101      	movs	r1, #1
 810db2a:	441a      	add	r2, r3
 810db2c:	4658      	mov	r0, fp
 810db2e:	4498      	add	r8, r3
 810db30:	9208      	str	r2, [sp, #32]
 810db32:	f000 fc6b 	bl	810e40c <__i2b>
 810db36:	4605      	mov	r5, r0
 810db38:	b15e      	cbz	r6, 810db52 <_dtoa_r+0x74a>
 810db3a:	9b08      	ldr	r3, [sp, #32]
 810db3c:	2b00      	cmp	r3, #0
 810db3e:	dd08      	ble.n	810db52 <_dtoa_r+0x74a>
 810db40:	42b3      	cmp	r3, r6
 810db42:	9a08      	ldr	r2, [sp, #32]
 810db44:	bfa8      	it	ge
 810db46:	4633      	movge	r3, r6
 810db48:	eba8 0803 	sub.w	r8, r8, r3
 810db4c:	1af6      	subs	r6, r6, r3
 810db4e:	1ad3      	subs	r3, r2, r3
 810db50:	9308      	str	r3, [sp, #32]
 810db52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810db54:	b1f3      	cbz	r3, 810db94 <_dtoa_r+0x78c>
 810db56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810db58:	2b00      	cmp	r3, #0
 810db5a:	f000 80b7 	beq.w	810dccc <_dtoa_r+0x8c4>
 810db5e:	b18c      	cbz	r4, 810db84 <_dtoa_r+0x77c>
 810db60:	4629      	mov	r1, r5
 810db62:	4622      	mov	r2, r4
 810db64:	4658      	mov	r0, fp
 810db66:	f000 fd11 	bl	810e58c <__pow5mult>
 810db6a:	464a      	mov	r2, r9
 810db6c:	4601      	mov	r1, r0
 810db6e:	4605      	mov	r5, r0
 810db70:	4658      	mov	r0, fp
 810db72:	f000 fc61 	bl	810e438 <__multiply>
 810db76:	4649      	mov	r1, r9
 810db78:	9004      	str	r0, [sp, #16]
 810db7a:	4658      	mov	r0, fp
 810db7c:	f000 fb48 	bl	810e210 <_Bfree>
 810db80:	9b04      	ldr	r3, [sp, #16]
 810db82:	4699      	mov	r9, r3
 810db84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810db86:	1b1a      	subs	r2, r3, r4
 810db88:	d004      	beq.n	810db94 <_dtoa_r+0x78c>
 810db8a:	4649      	mov	r1, r9
 810db8c:	4658      	mov	r0, fp
 810db8e:	f000 fcfd 	bl	810e58c <__pow5mult>
 810db92:	4681      	mov	r9, r0
 810db94:	2101      	movs	r1, #1
 810db96:	4658      	mov	r0, fp
 810db98:	f000 fc38 	bl	810e40c <__i2b>
 810db9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810db9e:	4604      	mov	r4, r0
 810dba0:	2b00      	cmp	r3, #0
 810dba2:	f000 81cf 	beq.w	810df44 <_dtoa_r+0xb3c>
 810dba6:	461a      	mov	r2, r3
 810dba8:	4601      	mov	r1, r0
 810dbaa:	4658      	mov	r0, fp
 810dbac:	f000 fcee 	bl	810e58c <__pow5mult>
 810dbb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810dbb2:	2b01      	cmp	r3, #1
 810dbb4:	4604      	mov	r4, r0
 810dbb6:	f300 8095 	bgt.w	810dce4 <_dtoa_r+0x8dc>
 810dbba:	9b02      	ldr	r3, [sp, #8]
 810dbbc:	2b00      	cmp	r3, #0
 810dbbe:	f040 8087 	bne.w	810dcd0 <_dtoa_r+0x8c8>
 810dbc2:	9b03      	ldr	r3, [sp, #12]
 810dbc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810dbc8:	2b00      	cmp	r3, #0
 810dbca:	f040 8089 	bne.w	810dce0 <_dtoa_r+0x8d8>
 810dbce:	9b03      	ldr	r3, [sp, #12]
 810dbd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810dbd4:	0d1b      	lsrs	r3, r3, #20
 810dbd6:	051b      	lsls	r3, r3, #20
 810dbd8:	b12b      	cbz	r3, 810dbe6 <_dtoa_r+0x7de>
 810dbda:	9b08      	ldr	r3, [sp, #32]
 810dbdc:	3301      	adds	r3, #1
 810dbde:	9308      	str	r3, [sp, #32]
 810dbe0:	f108 0801 	add.w	r8, r8, #1
 810dbe4:	2301      	movs	r3, #1
 810dbe6:	930a      	str	r3, [sp, #40]	@ 0x28
 810dbe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810dbea:	2b00      	cmp	r3, #0
 810dbec:	f000 81b0 	beq.w	810df50 <_dtoa_r+0xb48>
 810dbf0:	6923      	ldr	r3, [r4, #16]
 810dbf2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810dbf6:	6918      	ldr	r0, [r3, #16]
 810dbf8:	f000 fbbc 	bl	810e374 <__hi0bits>
 810dbfc:	f1c0 0020 	rsb	r0, r0, #32
 810dc00:	9b08      	ldr	r3, [sp, #32]
 810dc02:	4418      	add	r0, r3
 810dc04:	f010 001f 	ands.w	r0, r0, #31
 810dc08:	d077      	beq.n	810dcfa <_dtoa_r+0x8f2>
 810dc0a:	f1c0 0320 	rsb	r3, r0, #32
 810dc0e:	2b04      	cmp	r3, #4
 810dc10:	dd6b      	ble.n	810dcea <_dtoa_r+0x8e2>
 810dc12:	9b08      	ldr	r3, [sp, #32]
 810dc14:	f1c0 001c 	rsb	r0, r0, #28
 810dc18:	4403      	add	r3, r0
 810dc1a:	4480      	add	r8, r0
 810dc1c:	4406      	add	r6, r0
 810dc1e:	9308      	str	r3, [sp, #32]
 810dc20:	f1b8 0f00 	cmp.w	r8, #0
 810dc24:	dd05      	ble.n	810dc32 <_dtoa_r+0x82a>
 810dc26:	4649      	mov	r1, r9
 810dc28:	4642      	mov	r2, r8
 810dc2a:	4658      	mov	r0, fp
 810dc2c:	f000 fd08 	bl	810e640 <__lshift>
 810dc30:	4681      	mov	r9, r0
 810dc32:	9b08      	ldr	r3, [sp, #32]
 810dc34:	2b00      	cmp	r3, #0
 810dc36:	dd05      	ble.n	810dc44 <_dtoa_r+0x83c>
 810dc38:	4621      	mov	r1, r4
 810dc3a:	461a      	mov	r2, r3
 810dc3c:	4658      	mov	r0, fp
 810dc3e:	f000 fcff 	bl	810e640 <__lshift>
 810dc42:	4604      	mov	r4, r0
 810dc44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810dc46:	2b00      	cmp	r3, #0
 810dc48:	d059      	beq.n	810dcfe <_dtoa_r+0x8f6>
 810dc4a:	4621      	mov	r1, r4
 810dc4c:	4648      	mov	r0, r9
 810dc4e:	f000 fd63 	bl	810e718 <__mcmp>
 810dc52:	2800      	cmp	r0, #0
 810dc54:	da53      	bge.n	810dcfe <_dtoa_r+0x8f6>
 810dc56:	1e7b      	subs	r3, r7, #1
 810dc58:	9304      	str	r3, [sp, #16]
 810dc5a:	4649      	mov	r1, r9
 810dc5c:	2300      	movs	r3, #0
 810dc5e:	220a      	movs	r2, #10
 810dc60:	4658      	mov	r0, fp
 810dc62:	f000 faf7 	bl	810e254 <__multadd>
 810dc66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810dc68:	4681      	mov	r9, r0
 810dc6a:	2b00      	cmp	r3, #0
 810dc6c:	f000 8172 	beq.w	810df54 <_dtoa_r+0xb4c>
 810dc70:	2300      	movs	r3, #0
 810dc72:	4629      	mov	r1, r5
 810dc74:	220a      	movs	r2, #10
 810dc76:	4658      	mov	r0, fp
 810dc78:	f000 faec 	bl	810e254 <__multadd>
 810dc7c:	9b00      	ldr	r3, [sp, #0]
 810dc7e:	2b00      	cmp	r3, #0
 810dc80:	4605      	mov	r5, r0
 810dc82:	dc67      	bgt.n	810dd54 <_dtoa_r+0x94c>
 810dc84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810dc86:	2b02      	cmp	r3, #2
 810dc88:	dc41      	bgt.n	810dd0e <_dtoa_r+0x906>
 810dc8a:	e063      	b.n	810dd54 <_dtoa_r+0x94c>
 810dc8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810dc8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 810dc92:	e746      	b.n	810db22 <_dtoa_r+0x71a>
 810dc94:	9b07      	ldr	r3, [sp, #28]
 810dc96:	1e5c      	subs	r4, r3, #1
 810dc98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810dc9a:	42a3      	cmp	r3, r4
 810dc9c:	bfbf      	itttt	lt
 810dc9e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 810dca0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 810dca2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 810dca4:	1ae3      	sublt	r3, r4, r3
 810dca6:	bfb4      	ite	lt
 810dca8:	18d2      	addlt	r2, r2, r3
 810dcaa:	1b1c      	subge	r4, r3, r4
 810dcac:	9b07      	ldr	r3, [sp, #28]
 810dcae:	bfbc      	itt	lt
 810dcb0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 810dcb2:	2400      	movlt	r4, #0
 810dcb4:	2b00      	cmp	r3, #0
 810dcb6:	bfb5      	itete	lt
 810dcb8:	eba8 0603 	sublt.w	r6, r8, r3
 810dcbc:	9b07      	ldrge	r3, [sp, #28]
 810dcbe:	2300      	movlt	r3, #0
 810dcc0:	4646      	movge	r6, r8
 810dcc2:	e730      	b.n	810db26 <_dtoa_r+0x71e>
 810dcc4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810dcc6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 810dcc8:	4646      	mov	r6, r8
 810dcca:	e735      	b.n	810db38 <_dtoa_r+0x730>
 810dccc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810dcce:	e75c      	b.n	810db8a <_dtoa_r+0x782>
 810dcd0:	2300      	movs	r3, #0
 810dcd2:	e788      	b.n	810dbe6 <_dtoa_r+0x7de>
 810dcd4:	3fe00000 	.word	0x3fe00000
 810dcd8:	40240000 	.word	0x40240000
 810dcdc:	40140000 	.word	0x40140000
 810dce0:	9b02      	ldr	r3, [sp, #8]
 810dce2:	e780      	b.n	810dbe6 <_dtoa_r+0x7de>
 810dce4:	2300      	movs	r3, #0
 810dce6:	930a      	str	r3, [sp, #40]	@ 0x28
 810dce8:	e782      	b.n	810dbf0 <_dtoa_r+0x7e8>
 810dcea:	d099      	beq.n	810dc20 <_dtoa_r+0x818>
 810dcec:	9a08      	ldr	r2, [sp, #32]
 810dcee:	331c      	adds	r3, #28
 810dcf0:	441a      	add	r2, r3
 810dcf2:	4498      	add	r8, r3
 810dcf4:	441e      	add	r6, r3
 810dcf6:	9208      	str	r2, [sp, #32]
 810dcf8:	e792      	b.n	810dc20 <_dtoa_r+0x818>
 810dcfa:	4603      	mov	r3, r0
 810dcfc:	e7f6      	b.n	810dcec <_dtoa_r+0x8e4>
 810dcfe:	9b07      	ldr	r3, [sp, #28]
 810dd00:	9704      	str	r7, [sp, #16]
 810dd02:	2b00      	cmp	r3, #0
 810dd04:	dc20      	bgt.n	810dd48 <_dtoa_r+0x940>
 810dd06:	9300      	str	r3, [sp, #0]
 810dd08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810dd0a:	2b02      	cmp	r3, #2
 810dd0c:	dd1e      	ble.n	810dd4c <_dtoa_r+0x944>
 810dd0e:	9b00      	ldr	r3, [sp, #0]
 810dd10:	2b00      	cmp	r3, #0
 810dd12:	f47f aec0 	bne.w	810da96 <_dtoa_r+0x68e>
 810dd16:	4621      	mov	r1, r4
 810dd18:	2205      	movs	r2, #5
 810dd1a:	4658      	mov	r0, fp
 810dd1c:	f000 fa9a 	bl	810e254 <__multadd>
 810dd20:	4601      	mov	r1, r0
 810dd22:	4604      	mov	r4, r0
 810dd24:	4648      	mov	r0, r9
 810dd26:	f000 fcf7 	bl	810e718 <__mcmp>
 810dd2a:	2800      	cmp	r0, #0
 810dd2c:	f77f aeb3 	ble.w	810da96 <_dtoa_r+0x68e>
 810dd30:	4656      	mov	r6, sl
 810dd32:	2331      	movs	r3, #49	@ 0x31
 810dd34:	f806 3b01 	strb.w	r3, [r6], #1
 810dd38:	9b04      	ldr	r3, [sp, #16]
 810dd3a:	3301      	adds	r3, #1
 810dd3c:	9304      	str	r3, [sp, #16]
 810dd3e:	e6ae      	b.n	810da9e <_dtoa_r+0x696>
 810dd40:	9c07      	ldr	r4, [sp, #28]
 810dd42:	9704      	str	r7, [sp, #16]
 810dd44:	4625      	mov	r5, r4
 810dd46:	e7f3      	b.n	810dd30 <_dtoa_r+0x928>
 810dd48:	9b07      	ldr	r3, [sp, #28]
 810dd4a:	9300      	str	r3, [sp, #0]
 810dd4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810dd4e:	2b00      	cmp	r3, #0
 810dd50:	f000 8104 	beq.w	810df5c <_dtoa_r+0xb54>
 810dd54:	2e00      	cmp	r6, #0
 810dd56:	dd05      	ble.n	810dd64 <_dtoa_r+0x95c>
 810dd58:	4629      	mov	r1, r5
 810dd5a:	4632      	mov	r2, r6
 810dd5c:	4658      	mov	r0, fp
 810dd5e:	f000 fc6f 	bl	810e640 <__lshift>
 810dd62:	4605      	mov	r5, r0
 810dd64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810dd66:	2b00      	cmp	r3, #0
 810dd68:	d05a      	beq.n	810de20 <_dtoa_r+0xa18>
 810dd6a:	6869      	ldr	r1, [r5, #4]
 810dd6c:	4658      	mov	r0, fp
 810dd6e:	f000 fa0f 	bl	810e190 <_Balloc>
 810dd72:	4606      	mov	r6, r0
 810dd74:	b928      	cbnz	r0, 810dd82 <_dtoa_r+0x97a>
 810dd76:	4b84      	ldr	r3, [pc, #528]	@ (810df88 <_dtoa_r+0xb80>)
 810dd78:	4602      	mov	r2, r0
 810dd7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 810dd7e:	f7ff bb5a 	b.w	810d436 <_dtoa_r+0x2e>
 810dd82:	692a      	ldr	r2, [r5, #16]
 810dd84:	3202      	adds	r2, #2
 810dd86:	0092      	lsls	r2, r2, #2
 810dd88:	f105 010c 	add.w	r1, r5, #12
 810dd8c:	300c      	adds	r0, #12
 810dd8e:	f7ff fa9c 	bl	810d2ca <memcpy>
 810dd92:	2201      	movs	r2, #1
 810dd94:	4631      	mov	r1, r6
 810dd96:	4658      	mov	r0, fp
 810dd98:	f000 fc52 	bl	810e640 <__lshift>
 810dd9c:	f10a 0301 	add.w	r3, sl, #1
 810dda0:	9307      	str	r3, [sp, #28]
 810dda2:	9b00      	ldr	r3, [sp, #0]
 810dda4:	4453      	add	r3, sl
 810dda6:	930b      	str	r3, [sp, #44]	@ 0x2c
 810dda8:	9b02      	ldr	r3, [sp, #8]
 810ddaa:	f003 0301 	and.w	r3, r3, #1
 810ddae:	462f      	mov	r7, r5
 810ddb0:	930a      	str	r3, [sp, #40]	@ 0x28
 810ddb2:	4605      	mov	r5, r0
 810ddb4:	9b07      	ldr	r3, [sp, #28]
 810ddb6:	4621      	mov	r1, r4
 810ddb8:	3b01      	subs	r3, #1
 810ddba:	4648      	mov	r0, r9
 810ddbc:	9300      	str	r3, [sp, #0]
 810ddbe:	f7ff fa99 	bl	810d2f4 <quorem>
 810ddc2:	4639      	mov	r1, r7
 810ddc4:	9002      	str	r0, [sp, #8]
 810ddc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810ddca:	4648      	mov	r0, r9
 810ddcc:	f000 fca4 	bl	810e718 <__mcmp>
 810ddd0:	462a      	mov	r2, r5
 810ddd2:	9008      	str	r0, [sp, #32]
 810ddd4:	4621      	mov	r1, r4
 810ddd6:	4658      	mov	r0, fp
 810ddd8:	f000 fcba 	bl	810e750 <__mdiff>
 810dddc:	68c2      	ldr	r2, [r0, #12]
 810ddde:	4606      	mov	r6, r0
 810dde0:	bb02      	cbnz	r2, 810de24 <_dtoa_r+0xa1c>
 810dde2:	4601      	mov	r1, r0
 810dde4:	4648      	mov	r0, r9
 810dde6:	f000 fc97 	bl	810e718 <__mcmp>
 810ddea:	4602      	mov	r2, r0
 810ddec:	4631      	mov	r1, r6
 810ddee:	4658      	mov	r0, fp
 810ddf0:	920e      	str	r2, [sp, #56]	@ 0x38
 810ddf2:	f000 fa0d 	bl	810e210 <_Bfree>
 810ddf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ddf8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810ddfa:	9e07      	ldr	r6, [sp, #28]
 810ddfc:	ea43 0102 	orr.w	r1, r3, r2
 810de00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810de02:	4319      	orrs	r1, r3
 810de04:	d110      	bne.n	810de28 <_dtoa_r+0xa20>
 810de06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810de0a:	d029      	beq.n	810de60 <_dtoa_r+0xa58>
 810de0c:	9b08      	ldr	r3, [sp, #32]
 810de0e:	2b00      	cmp	r3, #0
 810de10:	dd02      	ble.n	810de18 <_dtoa_r+0xa10>
 810de12:	9b02      	ldr	r3, [sp, #8]
 810de14:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 810de18:	9b00      	ldr	r3, [sp, #0]
 810de1a:	f883 8000 	strb.w	r8, [r3]
 810de1e:	e63f      	b.n	810daa0 <_dtoa_r+0x698>
 810de20:	4628      	mov	r0, r5
 810de22:	e7bb      	b.n	810dd9c <_dtoa_r+0x994>
 810de24:	2201      	movs	r2, #1
 810de26:	e7e1      	b.n	810ddec <_dtoa_r+0x9e4>
 810de28:	9b08      	ldr	r3, [sp, #32]
 810de2a:	2b00      	cmp	r3, #0
 810de2c:	db04      	blt.n	810de38 <_dtoa_r+0xa30>
 810de2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810de30:	430b      	orrs	r3, r1
 810de32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810de34:	430b      	orrs	r3, r1
 810de36:	d120      	bne.n	810de7a <_dtoa_r+0xa72>
 810de38:	2a00      	cmp	r2, #0
 810de3a:	dded      	ble.n	810de18 <_dtoa_r+0xa10>
 810de3c:	4649      	mov	r1, r9
 810de3e:	2201      	movs	r2, #1
 810de40:	4658      	mov	r0, fp
 810de42:	f000 fbfd 	bl	810e640 <__lshift>
 810de46:	4621      	mov	r1, r4
 810de48:	4681      	mov	r9, r0
 810de4a:	f000 fc65 	bl	810e718 <__mcmp>
 810de4e:	2800      	cmp	r0, #0
 810de50:	dc03      	bgt.n	810de5a <_dtoa_r+0xa52>
 810de52:	d1e1      	bne.n	810de18 <_dtoa_r+0xa10>
 810de54:	f018 0f01 	tst.w	r8, #1
 810de58:	d0de      	beq.n	810de18 <_dtoa_r+0xa10>
 810de5a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810de5e:	d1d8      	bne.n	810de12 <_dtoa_r+0xa0a>
 810de60:	9a00      	ldr	r2, [sp, #0]
 810de62:	2339      	movs	r3, #57	@ 0x39
 810de64:	7013      	strb	r3, [r2, #0]
 810de66:	4633      	mov	r3, r6
 810de68:	461e      	mov	r6, r3
 810de6a:	3b01      	subs	r3, #1
 810de6c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 810de70:	2a39      	cmp	r2, #57	@ 0x39
 810de72:	d052      	beq.n	810df1a <_dtoa_r+0xb12>
 810de74:	3201      	adds	r2, #1
 810de76:	701a      	strb	r2, [r3, #0]
 810de78:	e612      	b.n	810daa0 <_dtoa_r+0x698>
 810de7a:	2a00      	cmp	r2, #0
 810de7c:	dd07      	ble.n	810de8e <_dtoa_r+0xa86>
 810de7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810de82:	d0ed      	beq.n	810de60 <_dtoa_r+0xa58>
 810de84:	9a00      	ldr	r2, [sp, #0]
 810de86:	f108 0301 	add.w	r3, r8, #1
 810de8a:	7013      	strb	r3, [r2, #0]
 810de8c:	e608      	b.n	810daa0 <_dtoa_r+0x698>
 810de8e:	9b07      	ldr	r3, [sp, #28]
 810de90:	9a07      	ldr	r2, [sp, #28]
 810de92:	f803 8c01 	strb.w	r8, [r3, #-1]
 810de96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810de98:	4293      	cmp	r3, r2
 810de9a:	d028      	beq.n	810deee <_dtoa_r+0xae6>
 810de9c:	4649      	mov	r1, r9
 810de9e:	2300      	movs	r3, #0
 810dea0:	220a      	movs	r2, #10
 810dea2:	4658      	mov	r0, fp
 810dea4:	f000 f9d6 	bl	810e254 <__multadd>
 810dea8:	42af      	cmp	r7, r5
 810deaa:	4681      	mov	r9, r0
 810deac:	f04f 0300 	mov.w	r3, #0
 810deb0:	f04f 020a 	mov.w	r2, #10
 810deb4:	4639      	mov	r1, r7
 810deb6:	4658      	mov	r0, fp
 810deb8:	d107      	bne.n	810deca <_dtoa_r+0xac2>
 810deba:	f000 f9cb 	bl	810e254 <__multadd>
 810debe:	4607      	mov	r7, r0
 810dec0:	4605      	mov	r5, r0
 810dec2:	9b07      	ldr	r3, [sp, #28]
 810dec4:	3301      	adds	r3, #1
 810dec6:	9307      	str	r3, [sp, #28]
 810dec8:	e774      	b.n	810ddb4 <_dtoa_r+0x9ac>
 810deca:	f000 f9c3 	bl	810e254 <__multadd>
 810dece:	4629      	mov	r1, r5
 810ded0:	4607      	mov	r7, r0
 810ded2:	2300      	movs	r3, #0
 810ded4:	220a      	movs	r2, #10
 810ded6:	4658      	mov	r0, fp
 810ded8:	f000 f9bc 	bl	810e254 <__multadd>
 810dedc:	4605      	mov	r5, r0
 810dede:	e7f0      	b.n	810dec2 <_dtoa_r+0xaba>
 810dee0:	9b00      	ldr	r3, [sp, #0]
 810dee2:	2b00      	cmp	r3, #0
 810dee4:	bfcc      	ite	gt
 810dee6:	461e      	movgt	r6, r3
 810dee8:	2601      	movle	r6, #1
 810deea:	4456      	add	r6, sl
 810deec:	2700      	movs	r7, #0
 810deee:	4649      	mov	r1, r9
 810def0:	2201      	movs	r2, #1
 810def2:	4658      	mov	r0, fp
 810def4:	f000 fba4 	bl	810e640 <__lshift>
 810def8:	4621      	mov	r1, r4
 810defa:	4681      	mov	r9, r0
 810defc:	f000 fc0c 	bl	810e718 <__mcmp>
 810df00:	2800      	cmp	r0, #0
 810df02:	dcb0      	bgt.n	810de66 <_dtoa_r+0xa5e>
 810df04:	d102      	bne.n	810df0c <_dtoa_r+0xb04>
 810df06:	f018 0f01 	tst.w	r8, #1
 810df0a:	d1ac      	bne.n	810de66 <_dtoa_r+0xa5e>
 810df0c:	4633      	mov	r3, r6
 810df0e:	461e      	mov	r6, r3
 810df10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810df14:	2a30      	cmp	r2, #48	@ 0x30
 810df16:	d0fa      	beq.n	810df0e <_dtoa_r+0xb06>
 810df18:	e5c2      	b.n	810daa0 <_dtoa_r+0x698>
 810df1a:	459a      	cmp	sl, r3
 810df1c:	d1a4      	bne.n	810de68 <_dtoa_r+0xa60>
 810df1e:	9b04      	ldr	r3, [sp, #16]
 810df20:	3301      	adds	r3, #1
 810df22:	9304      	str	r3, [sp, #16]
 810df24:	2331      	movs	r3, #49	@ 0x31
 810df26:	f88a 3000 	strb.w	r3, [sl]
 810df2a:	e5b9      	b.n	810daa0 <_dtoa_r+0x698>
 810df2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810df2e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 810df8c <_dtoa_r+0xb84>
 810df32:	b11b      	cbz	r3, 810df3c <_dtoa_r+0xb34>
 810df34:	f10a 0308 	add.w	r3, sl, #8
 810df38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 810df3a:	6013      	str	r3, [r2, #0]
 810df3c:	4650      	mov	r0, sl
 810df3e:	b019      	add	sp, #100	@ 0x64
 810df40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810df44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810df46:	2b01      	cmp	r3, #1
 810df48:	f77f ae37 	ble.w	810dbba <_dtoa_r+0x7b2>
 810df4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810df4e:	930a      	str	r3, [sp, #40]	@ 0x28
 810df50:	2001      	movs	r0, #1
 810df52:	e655      	b.n	810dc00 <_dtoa_r+0x7f8>
 810df54:	9b00      	ldr	r3, [sp, #0]
 810df56:	2b00      	cmp	r3, #0
 810df58:	f77f aed6 	ble.w	810dd08 <_dtoa_r+0x900>
 810df5c:	4656      	mov	r6, sl
 810df5e:	4621      	mov	r1, r4
 810df60:	4648      	mov	r0, r9
 810df62:	f7ff f9c7 	bl	810d2f4 <quorem>
 810df66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810df6a:	f806 8b01 	strb.w	r8, [r6], #1
 810df6e:	9b00      	ldr	r3, [sp, #0]
 810df70:	eba6 020a 	sub.w	r2, r6, sl
 810df74:	4293      	cmp	r3, r2
 810df76:	ddb3      	ble.n	810dee0 <_dtoa_r+0xad8>
 810df78:	4649      	mov	r1, r9
 810df7a:	2300      	movs	r3, #0
 810df7c:	220a      	movs	r2, #10
 810df7e:	4658      	mov	r0, fp
 810df80:	f000 f968 	bl	810e254 <__multadd>
 810df84:	4681      	mov	r9, r0
 810df86:	e7ea      	b.n	810df5e <_dtoa_r+0xb56>
 810df88:	08111f79 	.word	0x08111f79
 810df8c:	08111efd 	.word	0x08111efd

0810df90 <_free_r>:
 810df90:	b538      	push	{r3, r4, r5, lr}
 810df92:	4605      	mov	r5, r0
 810df94:	2900      	cmp	r1, #0
 810df96:	d041      	beq.n	810e01c <_free_r+0x8c>
 810df98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810df9c:	1f0c      	subs	r4, r1, #4
 810df9e:	2b00      	cmp	r3, #0
 810dfa0:	bfb8      	it	lt
 810dfa2:	18e4      	addlt	r4, r4, r3
 810dfa4:	f000 f8e8 	bl	810e178 <__malloc_lock>
 810dfa8:	4a1d      	ldr	r2, [pc, #116]	@ (810e020 <_free_r+0x90>)
 810dfaa:	6813      	ldr	r3, [r2, #0]
 810dfac:	b933      	cbnz	r3, 810dfbc <_free_r+0x2c>
 810dfae:	6063      	str	r3, [r4, #4]
 810dfb0:	6014      	str	r4, [r2, #0]
 810dfb2:	4628      	mov	r0, r5
 810dfb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810dfb8:	f000 b8e4 	b.w	810e184 <__malloc_unlock>
 810dfbc:	42a3      	cmp	r3, r4
 810dfbe:	d908      	bls.n	810dfd2 <_free_r+0x42>
 810dfc0:	6820      	ldr	r0, [r4, #0]
 810dfc2:	1821      	adds	r1, r4, r0
 810dfc4:	428b      	cmp	r3, r1
 810dfc6:	bf01      	itttt	eq
 810dfc8:	6819      	ldreq	r1, [r3, #0]
 810dfca:	685b      	ldreq	r3, [r3, #4]
 810dfcc:	1809      	addeq	r1, r1, r0
 810dfce:	6021      	streq	r1, [r4, #0]
 810dfd0:	e7ed      	b.n	810dfae <_free_r+0x1e>
 810dfd2:	461a      	mov	r2, r3
 810dfd4:	685b      	ldr	r3, [r3, #4]
 810dfd6:	b10b      	cbz	r3, 810dfdc <_free_r+0x4c>
 810dfd8:	42a3      	cmp	r3, r4
 810dfda:	d9fa      	bls.n	810dfd2 <_free_r+0x42>
 810dfdc:	6811      	ldr	r1, [r2, #0]
 810dfde:	1850      	adds	r0, r2, r1
 810dfe0:	42a0      	cmp	r0, r4
 810dfe2:	d10b      	bne.n	810dffc <_free_r+0x6c>
 810dfe4:	6820      	ldr	r0, [r4, #0]
 810dfe6:	4401      	add	r1, r0
 810dfe8:	1850      	adds	r0, r2, r1
 810dfea:	4283      	cmp	r3, r0
 810dfec:	6011      	str	r1, [r2, #0]
 810dfee:	d1e0      	bne.n	810dfb2 <_free_r+0x22>
 810dff0:	6818      	ldr	r0, [r3, #0]
 810dff2:	685b      	ldr	r3, [r3, #4]
 810dff4:	6053      	str	r3, [r2, #4]
 810dff6:	4408      	add	r0, r1
 810dff8:	6010      	str	r0, [r2, #0]
 810dffa:	e7da      	b.n	810dfb2 <_free_r+0x22>
 810dffc:	d902      	bls.n	810e004 <_free_r+0x74>
 810dffe:	230c      	movs	r3, #12
 810e000:	602b      	str	r3, [r5, #0]
 810e002:	e7d6      	b.n	810dfb2 <_free_r+0x22>
 810e004:	6820      	ldr	r0, [r4, #0]
 810e006:	1821      	adds	r1, r4, r0
 810e008:	428b      	cmp	r3, r1
 810e00a:	bf04      	itt	eq
 810e00c:	6819      	ldreq	r1, [r3, #0]
 810e00e:	685b      	ldreq	r3, [r3, #4]
 810e010:	6063      	str	r3, [r4, #4]
 810e012:	bf04      	itt	eq
 810e014:	1809      	addeq	r1, r1, r0
 810e016:	6021      	streq	r1, [r4, #0]
 810e018:	6054      	str	r4, [r2, #4]
 810e01a:	e7ca      	b.n	810dfb2 <_free_r+0x22>
 810e01c:	bd38      	pop	{r3, r4, r5, pc}
 810e01e:	bf00      	nop
 810e020:	10000794 	.word	0x10000794

0810e024 <malloc>:
 810e024:	4b02      	ldr	r3, [pc, #8]	@ (810e030 <malloc+0xc>)
 810e026:	4601      	mov	r1, r0
 810e028:	6818      	ldr	r0, [r3, #0]
 810e02a:	f000 b825 	b.w	810e078 <_malloc_r>
 810e02e:	bf00      	nop
 810e030:	10000094 	.word	0x10000094

0810e034 <sbrk_aligned>:
 810e034:	b570      	push	{r4, r5, r6, lr}
 810e036:	4e0f      	ldr	r6, [pc, #60]	@ (810e074 <sbrk_aligned+0x40>)
 810e038:	460c      	mov	r4, r1
 810e03a:	6831      	ldr	r1, [r6, #0]
 810e03c:	4605      	mov	r5, r0
 810e03e:	b911      	cbnz	r1, 810e046 <sbrk_aligned+0x12>
 810e040:	f001 ffd2 	bl	810ffe8 <_sbrk_r>
 810e044:	6030      	str	r0, [r6, #0]
 810e046:	4621      	mov	r1, r4
 810e048:	4628      	mov	r0, r5
 810e04a:	f001 ffcd 	bl	810ffe8 <_sbrk_r>
 810e04e:	1c43      	adds	r3, r0, #1
 810e050:	d103      	bne.n	810e05a <sbrk_aligned+0x26>
 810e052:	f04f 34ff 	mov.w	r4, #4294967295
 810e056:	4620      	mov	r0, r4
 810e058:	bd70      	pop	{r4, r5, r6, pc}
 810e05a:	1cc4      	adds	r4, r0, #3
 810e05c:	f024 0403 	bic.w	r4, r4, #3
 810e060:	42a0      	cmp	r0, r4
 810e062:	d0f8      	beq.n	810e056 <sbrk_aligned+0x22>
 810e064:	1a21      	subs	r1, r4, r0
 810e066:	4628      	mov	r0, r5
 810e068:	f001 ffbe 	bl	810ffe8 <_sbrk_r>
 810e06c:	3001      	adds	r0, #1
 810e06e:	d1f2      	bne.n	810e056 <sbrk_aligned+0x22>
 810e070:	e7ef      	b.n	810e052 <sbrk_aligned+0x1e>
 810e072:	bf00      	nop
 810e074:	10000790 	.word	0x10000790

0810e078 <_malloc_r>:
 810e078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e07c:	1ccd      	adds	r5, r1, #3
 810e07e:	f025 0503 	bic.w	r5, r5, #3
 810e082:	3508      	adds	r5, #8
 810e084:	2d0c      	cmp	r5, #12
 810e086:	bf38      	it	cc
 810e088:	250c      	movcc	r5, #12
 810e08a:	2d00      	cmp	r5, #0
 810e08c:	4606      	mov	r6, r0
 810e08e:	db01      	blt.n	810e094 <_malloc_r+0x1c>
 810e090:	42a9      	cmp	r1, r5
 810e092:	d904      	bls.n	810e09e <_malloc_r+0x26>
 810e094:	230c      	movs	r3, #12
 810e096:	6033      	str	r3, [r6, #0]
 810e098:	2000      	movs	r0, #0
 810e09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e09e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810e174 <_malloc_r+0xfc>
 810e0a2:	f000 f869 	bl	810e178 <__malloc_lock>
 810e0a6:	f8d8 3000 	ldr.w	r3, [r8]
 810e0aa:	461c      	mov	r4, r3
 810e0ac:	bb44      	cbnz	r4, 810e100 <_malloc_r+0x88>
 810e0ae:	4629      	mov	r1, r5
 810e0b0:	4630      	mov	r0, r6
 810e0b2:	f7ff ffbf 	bl	810e034 <sbrk_aligned>
 810e0b6:	1c43      	adds	r3, r0, #1
 810e0b8:	4604      	mov	r4, r0
 810e0ba:	d158      	bne.n	810e16e <_malloc_r+0xf6>
 810e0bc:	f8d8 4000 	ldr.w	r4, [r8]
 810e0c0:	4627      	mov	r7, r4
 810e0c2:	2f00      	cmp	r7, #0
 810e0c4:	d143      	bne.n	810e14e <_malloc_r+0xd6>
 810e0c6:	2c00      	cmp	r4, #0
 810e0c8:	d04b      	beq.n	810e162 <_malloc_r+0xea>
 810e0ca:	6823      	ldr	r3, [r4, #0]
 810e0cc:	4639      	mov	r1, r7
 810e0ce:	4630      	mov	r0, r6
 810e0d0:	eb04 0903 	add.w	r9, r4, r3
 810e0d4:	f001 ff88 	bl	810ffe8 <_sbrk_r>
 810e0d8:	4581      	cmp	r9, r0
 810e0da:	d142      	bne.n	810e162 <_malloc_r+0xea>
 810e0dc:	6821      	ldr	r1, [r4, #0]
 810e0de:	1a6d      	subs	r5, r5, r1
 810e0e0:	4629      	mov	r1, r5
 810e0e2:	4630      	mov	r0, r6
 810e0e4:	f7ff ffa6 	bl	810e034 <sbrk_aligned>
 810e0e8:	3001      	adds	r0, #1
 810e0ea:	d03a      	beq.n	810e162 <_malloc_r+0xea>
 810e0ec:	6823      	ldr	r3, [r4, #0]
 810e0ee:	442b      	add	r3, r5
 810e0f0:	6023      	str	r3, [r4, #0]
 810e0f2:	f8d8 3000 	ldr.w	r3, [r8]
 810e0f6:	685a      	ldr	r2, [r3, #4]
 810e0f8:	bb62      	cbnz	r2, 810e154 <_malloc_r+0xdc>
 810e0fa:	f8c8 7000 	str.w	r7, [r8]
 810e0fe:	e00f      	b.n	810e120 <_malloc_r+0xa8>
 810e100:	6822      	ldr	r2, [r4, #0]
 810e102:	1b52      	subs	r2, r2, r5
 810e104:	d420      	bmi.n	810e148 <_malloc_r+0xd0>
 810e106:	2a0b      	cmp	r2, #11
 810e108:	d917      	bls.n	810e13a <_malloc_r+0xc2>
 810e10a:	1961      	adds	r1, r4, r5
 810e10c:	42a3      	cmp	r3, r4
 810e10e:	6025      	str	r5, [r4, #0]
 810e110:	bf18      	it	ne
 810e112:	6059      	strne	r1, [r3, #4]
 810e114:	6863      	ldr	r3, [r4, #4]
 810e116:	bf08      	it	eq
 810e118:	f8c8 1000 	streq.w	r1, [r8]
 810e11c:	5162      	str	r2, [r4, r5]
 810e11e:	604b      	str	r3, [r1, #4]
 810e120:	4630      	mov	r0, r6
 810e122:	f000 f82f 	bl	810e184 <__malloc_unlock>
 810e126:	f104 000b 	add.w	r0, r4, #11
 810e12a:	1d23      	adds	r3, r4, #4
 810e12c:	f020 0007 	bic.w	r0, r0, #7
 810e130:	1ac2      	subs	r2, r0, r3
 810e132:	bf1c      	itt	ne
 810e134:	1a1b      	subne	r3, r3, r0
 810e136:	50a3      	strne	r3, [r4, r2]
 810e138:	e7af      	b.n	810e09a <_malloc_r+0x22>
 810e13a:	6862      	ldr	r2, [r4, #4]
 810e13c:	42a3      	cmp	r3, r4
 810e13e:	bf0c      	ite	eq
 810e140:	f8c8 2000 	streq.w	r2, [r8]
 810e144:	605a      	strne	r2, [r3, #4]
 810e146:	e7eb      	b.n	810e120 <_malloc_r+0xa8>
 810e148:	4623      	mov	r3, r4
 810e14a:	6864      	ldr	r4, [r4, #4]
 810e14c:	e7ae      	b.n	810e0ac <_malloc_r+0x34>
 810e14e:	463c      	mov	r4, r7
 810e150:	687f      	ldr	r7, [r7, #4]
 810e152:	e7b6      	b.n	810e0c2 <_malloc_r+0x4a>
 810e154:	461a      	mov	r2, r3
 810e156:	685b      	ldr	r3, [r3, #4]
 810e158:	42a3      	cmp	r3, r4
 810e15a:	d1fb      	bne.n	810e154 <_malloc_r+0xdc>
 810e15c:	2300      	movs	r3, #0
 810e15e:	6053      	str	r3, [r2, #4]
 810e160:	e7de      	b.n	810e120 <_malloc_r+0xa8>
 810e162:	230c      	movs	r3, #12
 810e164:	6033      	str	r3, [r6, #0]
 810e166:	4630      	mov	r0, r6
 810e168:	f000 f80c 	bl	810e184 <__malloc_unlock>
 810e16c:	e794      	b.n	810e098 <_malloc_r+0x20>
 810e16e:	6005      	str	r5, [r0, #0]
 810e170:	e7d6      	b.n	810e120 <_malloc_r+0xa8>
 810e172:	bf00      	nop
 810e174:	10000794 	.word	0x10000794

0810e178 <__malloc_lock>:
 810e178:	4801      	ldr	r0, [pc, #4]	@ (810e180 <__malloc_lock+0x8>)
 810e17a:	f7ff b8a4 	b.w	810d2c6 <__retarget_lock_acquire_recursive>
 810e17e:	bf00      	nop
 810e180:	1000078c 	.word	0x1000078c

0810e184 <__malloc_unlock>:
 810e184:	4801      	ldr	r0, [pc, #4]	@ (810e18c <__malloc_unlock+0x8>)
 810e186:	f7ff b89f 	b.w	810d2c8 <__retarget_lock_release_recursive>
 810e18a:	bf00      	nop
 810e18c:	1000078c 	.word	0x1000078c

0810e190 <_Balloc>:
 810e190:	b570      	push	{r4, r5, r6, lr}
 810e192:	69c6      	ldr	r6, [r0, #28]
 810e194:	4604      	mov	r4, r0
 810e196:	460d      	mov	r5, r1
 810e198:	b976      	cbnz	r6, 810e1b8 <_Balloc+0x28>
 810e19a:	2010      	movs	r0, #16
 810e19c:	f7ff ff42 	bl	810e024 <malloc>
 810e1a0:	4602      	mov	r2, r0
 810e1a2:	61e0      	str	r0, [r4, #28]
 810e1a4:	b920      	cbnz	r0, 810e1b0 <_Balloc+0x20>
 810e1a6:	4b18      	ldr	r3, [pc, #96]	@ (810e208 <_Balloc+0x78>)
 810e1a8:	4818      	ldr	r0, [pc, #96]	@ (810e20c <_Balloc+0x7c>)
 810e1aa:	216b      	movs	r1, #107	@ 0x6b
 810e1ac:	f001 ff34 	bl	8110018 <__assert_func>
 810e1b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810e1b4:	6006      	str	r6, [r0, #0]
 810e1b6:	60c6      	str	r6, [r0, #12]
 810e1b8:	69e6      	ldr	r6, [r4, #28]
 810e1ba:	68f3      	ldr	r3, [r6, #12]
 810e1bc:	b183      	cbz	r3, 810e1e0 <_Balloc+0x50>
 810e1be:	69e3      	ldr	r3, [r4, #28]
 810e1c0:	68db      	ldr	r3, [r3, #12]
 810e1c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810e1c6:	b9b8      	cbnz	r0, 810e1f8 <_Balloc+0x68>
 810e1c8:	2101      	movs	r1, #1
 810e1ca:	fa01 f605 	lsl.w	r6, r1, r5
 810e1ce:	1d72      	adds	r2, r6, #5
 810e1d0:	0092      	lsls	r2, r2, #2
 810e1d2:	4620      	mov	r0, r4
 810e1d4:	f001 ff3e 	bl	8110054 <_calloc_r>
 810e1d8:	b160      	cbz	r0, 810e1f4 <_Balloc+0x64>
 810e1da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810e1de:	e00e      	b.n	810e1fe <_Balloc+0x6e>
 810e1e0:	2221      	movs	r2, #33	@ 0x21
 810e1e2:	2104      	movs	r1, #4
 810e1e4:	4620      	mov	r0, r4
 810e1e6:	f001 ff35 	bl	8110054 <_calloc_r>
 810e1ea:	69e3      	ldr	r3, [r4, #28]
 810e1ec:	60f0      	str	r0, [r6, #12]
 810e1ee:	68db      	ldr	r3, [r3, #12]
 810e1f0:	2b00      	cmp	r3, #0
 810e1f2:	d1e4      	bne.n	810e1be <_Balloc+0x2e>
 810e1f4:	2000      	movs	r0, #0
 810e1f6:	bd70      	pop	{r4, r5, r6, pc}
 810e1f8:	6802      	ldr	r2, [r0, #0]
 810e1fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810e1fe:	2300      	movs	r3, #0
 810e200:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810e204:	e7f7      	b.n	810e1f6 <_Balloc+0x66>
 810e206:	bf00      	nop
 810e208:	08111f0a 	.word	0x08111f0a
 810e20c:	08111f8a 	.word	0x08111f8a

0810e210 <_Bfree>:
 810e210:	b570      	push	{r4, r5, r6, lr}
 810e212:	69c6      	ldr	r6, [r0, #28]
 810e214:	4605      	mov	r5, r0
 810e216:	460c      	mov	r4, r1
 810e218:	b976      	cbnz	r6, 810e238 <_Bfree+0x28>
 810e21a:	2010      	movs	r0, #16
 810e21c:	f7ff ff02 	bl	810e024 <malloc>
 810e220:	4602      	mov	r2, r0
 810e222:	61e8      	str	r0, [r5, #28]
 810e224:	b920      	cbnz	r0, 810e230 <_Bfree+0x20>
 810e226:	4b09      	ldr	r3, [pc, #36]	@ (810e24c <_Bfree+0x3c>)
 810e228:	4809      	ldr	r0, [pc, #36]	@ (810e250 <_Bfree+0x40>)
 810e22a:	218f      	movs	r1, #143	@ 0x8f
 810e22c:	f001 fef4 	bl	8110018 <__assert_func>
 810e230:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810e234:	6006      	str	r6, [r0, #0]
 810e236:	60c6      	str	r6, [r0, #12]
 810e238:	b13c      	cbz	r4, 810e24a <_Bfree+0x3a>
 810e23a:	69eb      	ldr	r3, [r5, #28]
 810e23c:	6862      	ldr	r2, [r4, #4]
 810e23e:	68db      	ldr	r3, [r3, #12]
 810e240:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810e244:	6021      	str	r1, [r4, #0]
 810e246:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810e24a:	bd70      	pop	{r4, r5, r6, pc}
 810e24c:	08111f0a 	.word	0x08111f0a
 810e250:	08111f8a 	.word	0x08111f8a

0810e254 <__multadd>:
 810e254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e258:	690d      	ldr	r5, [r1, #16]
 810e25a:	4607      	mov	r7, r0
 810e25c:	460c      	mov	r4, r1
 810e25e:	461e      	mov	r6, r3
 810e260:	f101 0c14 	add.w	ip, r1, #20
 810e264:	2000      	movs	r0, #0
 810e266:	f8dc 3000 	ldr.w	r3, [ip]
 810e26a:	b299      	uxth	r1, r3
 810e26c:	fb02 6101 	mla	r1, r2, r1, r6
 810e270:	0c1e      	lsrs	r6, r3, #16
 810e272:	0c0b      	lsrs	r3, r1, #16
 810e274:	fb02 3306 	mla	r3, r2, r6, r3
 810e278:	b289      	uxth	r1, r1
 810e27a:	3001      	adds	r0, #1
 810e27c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810e280:	4285      	cmp	r5, r0
 810e282:	f84c 1b04 	str.w	r1, [ip], #4
 810e286:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810e28a:	dcec      	bgt.n	810e266 <__multadd+0x12>
 810e28c:	b30e      	cbz	r6, 810e2d2 <__multadd+0x7e>
 810e28e:	68a3      	ldr	r3, [r4, #8]
 810e290:	42ab      	cmp	r3, r5
 810e292:	dc19      	bgt.n	810e2c8 <__multadd+0x74>
 810e294:	6861      	ldr	r1, [r4, #4]
 810e296:	4638      	mov	r0, r7
 810e298:	3101      	adds	r1, #1
 810e29a:	f7ff ff79 	bl	810e190 <_Balloc>
 810e29e:	4680      	mov	r8, r0
 810e2a0:	b928      	cbnz	r0, 810e2ae <__multadd+0x5a>
 810e2a2:	4602      	mov	r2, r0
 810e2a4:	4b0c      	ldr	r3, [pc, #48]	@ (810e2d8 <__multadd+0x84>)
 810e2a6:	480d      	ldr	r0, [pc, #52]	@ (810e2dc <__multadd+0x88>)
 810e2a8:	21ba      	movs	r1, #186	@ 0xba
 810e2aa:	f001 feb5 	bl	8110018 <__assert_func>
 810e2ae:	6922      	ldr	r2, [r4, #16]
 810e2b0:	3202      	adds	r2, #2
 810e2b2:	f104 010c 	add.w	r1, r4, #12
 810e2b6:	0092      	lsls	r2, r2, #2
 810e2b8:	300c      	adds	r0, #12
 810e2ba:	f7ff f806 	bl	810d2ca <memcpy>
 810e2be:	4621      	mov	r1, r4
 810e2c0:	4638      	mov	r0, r7
 810e2c2:	f7ff ffa5 	bl	810e210 <_Bfree>
 810e2c6:	4644      	mov	r4, r8
 810e2c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810e2cc:	3501      	adds	r5, #1
 810e2ce:	615e      	str	r6, [r3, #20]
 810e2d0:	6125      	str	r5, [r4, #16]
 810e2d2:	4620      	mov	r0, r4
 810e2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810e2d8:	08111f79 	.word	0x08111f79
 810e2dc:	08111f8a 	.word	0x08111f8a

0810e2e0 <__s2b>:
 810e2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e2e4:	460c      	mov	r4, r1
 810e2e6:	4615      	mov	r5, r2
 810e2e8:	461f      	mov	r7, r3
 810e2ea:	2209      	movs	r2, #9
 810e2ec:	3308      	adds	r3, #8
 810e2ee:	4606      	mov	r6, r0
 810e2f0:	fb93 f3f2 	sdiv	r3, r3, r2
 810e2f4:	2100      	movs	r1, #0
 810e2f6:	2201      	movs	r2, #1
 810e2f8:	429a      	cmp	r2, r3
 810e2fa:	db09      	blt.n	810e310 <__s2b+0x30>
 810e2fc:	4630      	mov	r0, r6
 810e2fe:	f7ff ff47 	bl	810e190 <_Balloc>
 810e302:	b940      	cbnz	r0, 810e316 <__s2b+0x36>
 810e304:	4602      	mov	r2, r0
 810e306:	4b19      	ldr	r3, [pc, #100]	@ (810e36c <__s2b+0x8c>)
 810e308:	4819      	ldr	r0, [pc, #100]	@ (810e370 <__s2b+0x90>)
 810e30a:	21d3      	movs	r1, #211	@ 0xd3
 810e30c:	f001 fe84 	bl	8110018 <__assert_func>
 810e310:	0052      	lsls	r2, r2, #1
 810e312:	3101      	adds	r1, #1
 810e314:	e7f0      	b.n	810e2f8 <__s2b+0x18>
 810e316:	9b08      	ldr	r3, [sp, #32]
 810e318:	6143      	str	r3, [r0, #20]
 810e31a:	2d09      	cmp	r5, #9
 810e31c:	f04f 0301 	mov.w	r3, #1
 810e320:	6103      	str	r3, [r0, #16]
 810e322:	dd16      	ble.n	810e352 <__s2b+0x72>
 810e324:	f104 0909 	add.w	r9, r4, #9
 810e328:	46c8      	mov	r8, r9
 810e32a:	442c      	add	r4, r5
 810e32c:	f818 3b01 	ldrb.w	r3, [r8], #1
 810e330:	4601      	mov	r1, r0
 810e332:	3b30      	subs	r3, #48	@ 0x30
 810e334:	220a      	movs	r2, #10
 810e336:	4630      	mov	r0, r6
 810e338:	f7ff ff8c 	bl	810e254 <__multadd>
 810e33c:	45a0      	cmp	r8, r4
 810e33e:	d1f5      	bne.n	810e32c <__s2b+0x4c>
 810e340:	f1a5 0408 	sub.w	r4, r5, #8
 810e344:	444c      	add	r4, r9
 810e346:	1b2d      	subs	r5, r5, r4
 810e348:	1963      	adds	r3, r4, r5
 810e34a:	42bb      	cmp	r3, r7
 810e34c:	db04      	blt.n	810e358 <__s2b+0x78>
 810e34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e352:	340a      	adds	r4, #10
 810e354:	2509      	movs	r5, #9
 810e356:	e7f6      	b.n	810e346 <__s2b+0x66>
 810e358:	f814 3b01 	ldrb.w	r3, [r4], #1
 810e35c:	4601      	mov	r1, r0
 810e35e:	3b30      	subs	r3, #48	@ 0x30
 810e360:	220a      	movs	r2, #10
 810e362:	4630      	mov	r0, r6
 810e364:	f7ff ff76 	bl	810e254 <__multadd>
 810e368:	e7ee      	b.n	810e348 <__s2b+0x68>
 810e36a:	bf00      	nop
 810e36c:	08111f79 	.word	0x08111f79
 810e370:	08111f8a 	.word	0x08111f8a

0810e374 <__hi0bits>:
 810e374:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 810e378:	4603      	mov	r3, r0
 810e37a:	bf36      	itet	cc
 810e37c:	0403      	lslcc	r3, r0, #16
 810e37e:	2000      	movcs	r0, #0
 810e380:	2010      	movcc	r0, #16
 810e382:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810e386:	bf3c      	itt	cc
 810e388:	021b      	lslcc	r3, r3, #8
 810e38a:	3008      	addcc	r0, #8
 810e38c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810e390:	bf3c      	itt	cc
 810e392:	011b      	lslcc	r3, r3, #4
 810e394:	3004      	addcc	r0, #4
 810e396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810e39a:	bf3c      	itt	cc
 810e39c:	009b      	lslcc	r3, r3, #2
 810e39e:	3002      	addcc	r0, #2
 810e3a0:	2b00      	cmp	r3, #0
 810e3a2:	db05      	blt.n	810e3b0 <__hi0bits+0x3c>
 810e3a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 810e3a8:	f100 0001 	add.w	r0, r0, #1
 810e3ac:	bf08      	it	eq
 810e3ae:	2020      	moveq	r0, #32
 810e3b0:	4770      	bx	lr

0810e3b2 <__lo0bits>:
 810e3b2:	6803      	ldr	r3, [r0, #0]
 810e3b4:	4602      	mov	r2, r0
 810e3b6:	f013 0007 	ands.w	r0, r3, #7
 810e3ba:	d00b      	beq.n	810e3d4 <__lo0bits+0x22>
 810e3bc:	07d9      	lsls	r1, r3, #31
 810e3be:	d421      	bmi.n	810e404 <__lo0bits+0x52>
 810e3c0:	0798      	lsls	r0, r3, #30
 810e3c2:	bf49      	itett	mi
 810e3c4:	085b      	lsrmi	r3, r3, #1
 810e3c6:	089b      	lsrpl	r3, r3, #2
 810e3c8:	2001      	movmi	r0, #1
 810e3ca:	6013      	strmi	r3, [r2, #0]
 810e3cc:	bf5c      	itt	pl
 810e3ce:	6013      	strpl	r3, [r2, #0]
 810e3d0:	2002      	movpl	r0, #2
 810e3d2:	4770      	bx	lr
 810e3d4:	b299      	uxth	r1, r3
 810e3d6:	b909      	cbnz	r1, 810e3dc <__lo0bits+0x2a>
 810e3d8:	0c1b      	lsrs	r3, r3, #16
 810e3da:	2010      	movs	r0, #16
 810e3dc:	b2d9      	uxtb	r1, r3
 810e3de:	b909      	cbnz	r1, 810e3e4 <__lo0bits+0x32>
 810e3e0:	3008      	adds	r0, #8
 810e3e2:	0a1b      	lsrs	r3, r3, #8
 810e3e4:	0719      	lsls	r1, r3, #28
 810e3e6:	bf04      	itt	eq
 810e3e8:	091b      	lsreq	r3, r3, #4
 810e3ea:	3004      	addeq	r0, #4
 810e3ec:	0799      	lsls	r1, r3, #30
 810e3ee:	bf04      	itt	eq
 810e3f0:	089b      	lsreq	r3, r3, #2
 810e3f2:	3002      	addeq	r0, #2
 810e3f4:	07d9      	lsls	r1, r3, #31
 810e3f6:	d403      	bmi.n	810e400 <__lo0bits+0x4e>
 810e3f8:	085b      	lsrs	r3, r3, #1
 810e3fa:	f100 0001 	add.w	r0, r0, #1
 810e3fe:	d003      	beq.n	810e408 <__lo0bits+0x56>
 810e400:	6013      	str	r3, [r2, #0]
 810e402:	4770      	bx	lr
 810e404:	2000      	movs	r0, #0
 810e406:	4770      	bx	lr
 810e408:	2020      	movs	r0, #32
 810e40a:	4770      	bx	lr

0810e40c <__i2b>:
 810e40c:	b510      	push	{r4, lr}
 810e40e:	460c      	mov	r4, r1
 810e410:	2101      	movs	r1, #1
 810e412:	f7ff febd 	bl	810e190 <_Balloc>
 810e416:	4602      	mov	r2, r0
 810e418:	b928      	cbnz	r0, 810e426 <__i2b+0x1a>
 810e41a:	4b05      	ldr	r3, [pc, #20]	@ (810e430 <__i2b+0x24>)
 810e41c:	4805      	ldr	r0, [pc, #20]	@ (810e434 <__i2b+0x28>)
 810e41e:	f240 1145 	movw	r1, #325	@ 0x145
 810e422:	f001 fdf9 	bl	8110018 <__assert_func>
 810e426:	2301      	movs	r3, #1
 810e428:	6144      	str	r4, [r0, #20]
 810e42a:	6103      	str	r3, [r0, #16]
 810e42c:	bd10      	pop	{r4, pc}
 810e42e:	bf00      	nop
 810e430:	08111f79 	.word	0x08111f79
 810e434:	08111f8a 	.word	0x08111f8a

0810e438 <__multiply>:
 810e438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e43c:	4614      	mov	r4, r2
 810e43e:	690a      	ldr	r2, [r1, #16]
 810e440:	6923      	ldr	r3, [r4, #16]
 810e442:	429a      	cmp	r2, r3
 810e444:	bfa8      	it	ge
 810e446:	4623      	movge	r3, r4
 810e448:	460f      	mov	r7, r1
 810e44a:	bfa4      	itt	ge
 810e44c:	460c      	movge	r4, r1
 810e44e:	461f      	movge	r7, r3
 810e450:	f8d4 a010 	ldr.w	sl, [r4, #16]
 810e454:	f8d7 9010 	ldr.w	r9, [r7, #16]
 810e458:	68a3      	ldr	r3, [r4, #8]
 810e45a:	6861      	ldr	r1, [r4, #4]
 810e45c:	eb0a 0609 	add.w	r6, sl, r9
 810e460:	42b3      	cmp	r3, r6
 810e462:	b085      	sub	sp, #20
 810e464:	bfb8      	it	lt
 810e466:	3101      	addlt	r1, #1
 810e468:	f7ff fe92 	bl	810e190 <_Balloc>
 810e46c:	b930      	cbnz	r0, 810e47c <__multiply+0x44>
 810e46e:	4602      	mov	r2, r0
 810e470:	4b44      	ldr	r3, [pc, #272]	@ (810e584 <__multiply+0x14c>)
 810e472:	4845      	ldr	r0, [pc, #276]	@ (810e588 <__multiply+0x150>)
 810e474:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 810e478:	f001 fdce 	bl	8110018 <__assert_func>
 810e47c:	f100 0514 	add.w	r5, r0, #20
 810e480:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810e484:	462b      	mov	r3, r5
 810e486:	2200      	movs	r2, #0
 810e488:	4543      	cmp	r3, r8
 810e48a:	d321      	bcc.n	810e4d0 <__multiply+0x98>
 810e48c:	f107 0114 	add.w	r1, r7, #20
 810e490:	f104 0214 	add.w	r2, r4, #20
 810e494:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 810e498:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 810e49c:	9302      	str	r3, [sp, #8]
 810e49e:	1b13      	subs	r3, r2, r4
 810e4a0:	3b15      	subs	r3, #21
 810e4a2:	f023 0303 	bic.w	r3, r3, #3
 810e4a6:	3304      	adds	r3, #4
 810e4a8:	f104 0715 	add.w	r7, r4, #21
 810e4ac:	42ba      	cmp	r2, r7
 810e4ae:	bf38      	it	cc
 810e4b0:	2304      	movcc	r3, #4
 810e4b2:	9301      	str	r3, [sp, #4]
 810e4b4:	9b02      	ldr	r3, [sp, #8]
 810e4b6:	9103      	str	r1, [sp, #12]
 810e4b8:	428b      	cmp	r3, r1
 810e4ba:	d80c      	bhi.n	810e4d6 <__multiply+0x9e>
 810e4bc:	2e00      	cmp	r6, #0
 810e4be:	dd03      	ble.n	810e4c8 <__multiply+0x90>
 810e4c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810e4c4:	2b00      	cmp	r3, #0
 810e4c6:	d05b      	beq.n	810e580 <__multiply+0x148>
 810e4c8:	6106      	str	r6, [r0, #16]
 810e4ca:	b005      	add	sp, #20
 810e4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e4d0:	f843 2b04 	str.w	r2, [r3], #4
 810e4d4:	e7d8      	b.n	810e488 <__multiply+0x50>
 810e4d6:	f8b1 a000 	ldrh.w	sl, [r1]
 810e4da:	f1ba 0f00 	cmp.w	sl, #0
 810e4de:	d024      	beq.n	810e52a <__multiply+0xf2>
 810e4e0:	f104 0e14 	add.w	lr, r4, #20
 810e4e4:	46a9      	mov	r9, r5
 810e4e6:	f04f 0c00 	mov.w	ip, #0
 810e4ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 810e4ee:	f8d9 3000 	ldr.w	r3, [r9]
 810e4f2:	fa1f fb87 	uxth.w	fp, r7
 810e4f6:	b29b      	uxth	r3, r3
 810e4f8:	fb0a 330b 	mla	r3, sl, fp, r3
 810e4fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 810e500:	f8d9 7000 	ldr.w	r7, [r9]
 810e504:	4463      	add	r3, ip
 810e506:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810e50a:	fb0a c70b 	mla	r7, sl, fp, ip
 810e50e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 810e512:	b29b      	uxth	r3, r3
 810e514:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810e518:	4572      	cmp	r2, lr
 810e51a:	f849 3b04 	str.w	r3, [r9], #4
 810e51e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810e522:	d8e2      	bhi.n	810e4ea <__multiply+0xb2>
 810e524:	9b01      	ldr	r3, [sp, #4]
 810e526:	f845 c003 	str.w	ip, [r5, r3]
 810e52a:	9b03      	ldr	r3, [sp, #12]
 810e52c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 810e530:	3104      	adds	r1, #4
 810e532:	f1b9 0f00 	cmp.w	r9, #0
 810e536:	d021      	beq.n	810e57c <__multiply+0x144>
 810e538:	682b      	ldr	r3, [r5, #0]
 810e53a:	f104 0c14 	add.w	ip, r4, #20
 810e53e:	46ae      	mov	lr, r5
 810e540:	f04f 0a00 	mov.w	sl, #0
 810e544:	f8bc b000 	ldrh.w	fp, [ip]
 810e548:	f8be 7002 	ldrh.w	r7, [lr, #2]
 810e54c:	fb09 770b 	mla	r7, r9, fp, r7
 810e550:	4457      	add	r7, sl
 810e552:	b29b      	uxth	r3, r3
 810e554:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810e558:	f84e 3b04 	str.w	r3, [lr], #4
 810e55c:	f85c 3b04 	ldr.w	r3, [ip], #4
 810e560:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810e564:	f8be 3000 	ldrh.w	r3, [lr]
 810e568:	fb09 330a 	mla	r3, r9, sl, r3
 810e56c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 810e570:	4562      	cmp	r2, ip
 810e572:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810e576:	d8e5      	bhi.n	810e544 <__multiply+0x10c>
 810e578:	9f01      	ldr	r7, [sp, #4]
 810e57a:	51eb      	str	r3, [r5, r7]
 810e57c:	3504      	adds	r5, #4
 810e57e:	e799      	b.n	810e4b4 <__multiply+0x7c>
 810e580:	3e01      	subs	r6, #1
 810e582:	e79b      	b.n	810e4bc <__multiply+0x84>
 810e584:	08111f79 	.word	0x08111f79
 810e588:	08111f8a 	.word	0x08111f8a

0810e58c <__pow5mult>:
 810e58c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e590:	4615      	mov	r5, r2
 810e592:	f012 0203 	ands.w	r2, r2, #3
 810e596:	4607      	mov	r7, r0
 810e598:	460e      	mov	r6, r1
 810e59a:	d007      	beq.n	810e5ac <__pow5mult+0x20>
 810e59c:	4c25      	ldr	r4, [pc, #148]	@ (810e634 <__pow5mult+0xa8>)
 810e59e:	3a01      	subs	r2, #1
 810e5a0:	2300      	movs	r3, #0
 810e5a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810e5a6:	f7ff fe55 	bl	810e254 <__multadd>
 810e5aa:	4606      	mov	r6, r0
 810e5ac:	10ad      	asrs	r5, r5, #2
 810e5ae:	d03d      	beq.n	810e62c <__pow5mult+0xa0>
 810e5b0:	69fc      	ldr	r4, [r7, #28]
 810e5b2:	b97c      	cbnz	r4, 810e5d4 <__pow5mult+0x48>
 810e5b4:	2010      	movs	r0, #16
 810e5b6:	f7ff fd35 	bl	810e024 <malloc>
 810e5ba:	4602      	mov	r2, r0
 810e5bc:	61f8      	str	r0, [r7, #28]
 810e5be:	b928      	cbnz	r0, 810e5cc <__pow5mult+0x40>
 810e5c0:	4b1d      	ldr	r3, [pc, #116]	@ (810e638 <__pow5mult+0xac>)
 810e5c2:	481e      	ldr	r0, [pc, #120]	@ (810e63c <__pow5mult+0xb0>)
 810e5c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 810e5c8:	f001 fd26 	bl	8110018 <__assert_func>
 810e5cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810e5d0:	6004      	str	r4, [r0, #0]
 810e5d2:	60c4      	str	r4, [r0, #12]
 810e5d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 810e5d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810e5dc:	b94c      	cbnz	r4, 810e5f2 <__pow5mult+0x66>
 810e5de:	f240 2171 	movw	r1, #625	@ 0x271
 810e5e2:	4638      	mov	r0, r7
 810e5e4:	f7ff ff12 	bl	810e40c <__i2b>
 810e5e8:	2300      	movs	r3, #0
 810e5ea:	f8c8 0008 	str.w	r0, [r8, #8]
 810e5ee:	4604      	mov	r4, r0
 810e5f0:	6003      	str	r3, [r0, #0]
 810e5f2:	f04f 0900 	mov.w	r9, #0
 810e5f6:	07eb      	lsls	r3, r5, #31
 810e5f8:	d50a      	bpl.n	810e610 <__pow5mult+0x84>
 810e5fa:	4631      	mov	r1, r6
 810e5fc:	4622      	mov	r2, r4
 810e5fe:	4638      	mov	r0, r7
 810e600:	f7ff ff1a 	bl	810e438 <__multiply>
 810e604:	4631      	mov	r1, r6
 810e606:	4680      	mov	r8, r0
 810e608:	4638      	mov	r0, r7
 810e60a:	f7ff fe01 	bl	810e210 <_Bfree>
 810e60e:	4646      	mov	r6, r8
 810e610:	106d      	asrs	r5, r5, #1
 810e612:	d00b      	beq.n	810e62c <__pow5mult+0xa0>
 810e614:	6820      	ldr	r0, [r4, #0]
 810e616:	b938      	cbnz	r0, 810e628 <__pow5mult+0x9c>
 810e618:	4622      	mov	r2, r4
 810e61a:	4621      	mov	r1, r4
 810e61c:	4638      	mov	r0, r7
 810e61e:	f7ff ff0b 	bl	810e438 <__multiply>
 810e622:	6020      	str	r0, [r4, #0]
 810e624:	f8c0 9000 	str.w	r9, [r0]
 810e628:	4604      	mov	r4, r0
 810e62a:	e7e4      	b.n	810e5f6 <__pow5mult+0x6a>
 810e62c:	4630      	mov	r0, r6
 810e62e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e632:	bf00      	nop
 810e634:	08111fe4 	.word	0x08111fe4
 810e638:	08111f0a 	.word	0x08111f0a
 810e63c:	08111f8a 	.word	0x08111f8a

0810e640 <__lshift>:
 810e640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810e644:	460c      	mov	r4, r1
 810e646:	6849      	ldr	r1, [r1, #4]
 810e648:	6923      	ldr	r3, [r4, #16]
 810e64a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810e64e:	68a3      	ldr	r3, [r4, #8]
 810e650:	4607      	mov	r7, r0
 810e652:	4691      	mov	r9, r2
 810e654:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810e658:	f108 0601 	add.w	r6, r8, #1
 810e65c:	42b3      	cmp	r3, r6
 810e65e:	db0b      	blt.n	810e678 <__lshift+0x38>
 810e660:	4638      	mov	r0, r7
 810e662:	f7ff fd95 	bl	810e190 <_Balloc>
 810e666:	4605      	mov	r5, r0
 810e668:	b948      	cbnz	r0, 810e67e <__lshift+0x3e>
 810e66a:	4602      	mov	r2, r0
 810e66c:	4b28      	ldr	r3, [pc, #160]	@ (810e710 <__lshift+0xd0>)
 810e66e:	4829      	ldr	r0, [pc, #164]	@ (810e714 <__lshift+0xd4>)
 810e670:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 810e674:	f001 fcd0 	bl	8110018 <__assert_func>
 810e678:	3101      	adds	r1, #1
 810e67a:	005b      	lsls	r3, r3, #1
 810e67c:	e7ee      	b.n	810e65c <__lshift+0x1c>
 810e67e:	2300      	movs	r3, #0
 810e680:	f100 0114 	add.w	r1, r0, #20
 810e684:	f100 0210 	add.w	r2, r0, #16
 810e688:	4618      	mov	r0, r3
 810e68a:	4553      	cmp	r3, sl
 810e68c:	db33      	blt.n	810e6f6 <__lshift+0xb6>
 810e68e:	6920      	ldr	r0, [r4, #16]
 810e690:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810e694:	f104 0314 	add.w	r3, r4, #20
 810e698:	f019 091f 	ands.w	r9, r9, #31
 810e69c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810e6a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810e6a4:	d02b      	beq.n	810e6fe <__lshift+0xbe>
 810e6a6:	f1c9 0e20 	rsb	lr, r9, #32
 810e6aa:	468a      	mov	sl, r1
 810e6ac:	2200      	movs	r2, #0
 810e6ae:	6818      	ldr	r0, [r3, #0]
 810e6b0:	fa00 f009 	lsl.w	r0, r0, r9
 810e6b4:	4310      	orrs	r0, r2
 810e6b6:	f84a 0b04 	str.w	r0, [sl], #4
 810e6ba:	f853 2b04 	ldr.w	r2, [r3], #4
 810e6be:	459c      	cmp	ip, r3
 810e6c0:	fa22 f20e 	lsr.w	r2, r2, lr
 810e6c4:	d8f3      	bhi.n	810e6ae <__lshift+0x6e>
 810e6c6:	ebac 0304 	sub.w	r3, ip, r4
 810e6ca:	3b15      	subs	r3, #21
 810e6cc:	f023 0303 	bic.w	r3, r3, #3
 810e6d0:	3304      	adds	r3, #4
 810e6d2:	f104 0015 	add.w	r0, r4, #21
 810e6d6:	4584      	cmp	ip, r0
 810e6d8:	bf38      	it	cc
 810e6da:	2304      	movcc	r3, #4
 810e6dc:	50ca      	str	r2, [r1, r3]
 810e6de:	b10a      	cbz	r2, 810e6e4 <__lshift+0xa4>
 810e6e0:	f108 0602 	add.w	r6, r8, #2
 810e6e4:	3e01      	subs	r6, #1
 810e6e6:	4638      	mov	r0, r7
 810e6e8:	612e      	str	r6, [r5, #16]
 810e6ea:	4621      	mov	r1, r4
 810e6ec:	f7ff fd90 	bl	810e210 <_Bfree>
 810e6f0:	4628      	mov	r0, r5
 810e6f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810e6f6:	f842 0f04 	str.w	r0, [r2, #4]!
 810e6fa:	3301      	adds	r3, #1
 810e6fc:	e7c5      	b.n	810e68a <__lshift+0x4a>
 810e6fe:	3904      	subs	r1, #4
 810e700:	f853 2b04 	ldr.w	r2, [r3], #4
 810e704:	f841 2f04 	str.w	r2, [r1, #4]!
 810e708:	459c      	cmp	ip, r3
 810e70a:	d8f9      	bhi.n	810e700 <__lshift+0xc0>
 810e70c:	e7ea      	b.n	810e6e4 <__lshift+0xa4>
 810e70e:	bf00      	nop
 810e710:	08111f79 	.word	0x08111f79
 810e714:	08111f8a 	.word	0x08111f8a

0810e718 <__mcmp>:
 810e718:	690a      	ldr	r2, [r1, #16]
 810e71a:	4603      	mov	r3, r0
 810e71c:	6900      	ldr	r0, [r0, #16]
 810e71e:	1a80      	subs	r0, r0, r2
 810e720:	b530      	push	{r4, r5, lr}
 810e722:	d10e      	bne.n	810e742 <__mcmp+0x2a>
 810e724:	3314      	adds	r3, #20
 810e726:	3114      	adds	r1, #20
 810e728:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 810e72c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 810e730:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 810e734:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 810e738:	4295      	cmp	r5, r2
 810e73a:	d003      	beq.n	810e744 <__mcmp+0x2c>
 810e73c:	d205      	bcs.n	810e74a <__mcmp+0x32>
 810e73e:	f04f 30ff 	mov.w	r0, #4294967295
 810e742:	bd30      	pop	{r4, r5, pc}
 810e744:	42a3      	cmp	r3, r4
 810e746:	d3f3      	bcc.n	810e730 <__mcmp+0x18>
 810e748:	e7fb      	b.n	810e742 <__mcmp+0x2a>
 810e74a:	2001      	movs	r0, #1
 810e74c:	e7f9      	b.n	810e742 <__mcmp+0x2a>
	...

0810e750 <__mdiff>:
 810e750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e754:	4689      	mov	r9, r1
 810e756:	4606      	mov	r6, r0
 810e758:	4611      	mov	r1, r2
 810e75a:	4648      	mov	r0, r9
 810e75c:	4614      	mov	r4, r2
 810e75e:	f7ff ffdb 	bl	810e718 <__mcmp>
 810e762:	1e05      	subs	r5, r0, #0
 810e764:	d112      	bne.n	810e78c <__mdiff+0x3c>
 810e766:	4629      	mov	r1, r5
 810e768:	4630      	mov	r0, r6
 810e76a:	f7ff fd11 	bl	810e190 <_Balloc>
 810e76e:	4602      	mov	r2, r0
 810e770:	b928      	cbnz	r0, 810e77e <__mdiff+0x2e>
 810e772:	4b3f      	ldr	r3, [pc, #252]	@ (810e870 <__mdiff+0x120>)
 810e774:	f240 2137 	movw	r1, #567	@ 0x237
 810e778:	483e      	ldr	r0, [pc, #248]	@ (810e874 <__mdiff+0x124>)
 810e77a:	f001 fc4d 	bl	8110018 <__assert_func>
 810e77e:	2301      	movs	r3, #1
 810e780:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810e784:	4610      	mov	r0, r2
 810e786:	b003      	add	sp, #12
 810e788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e78c:	bfbc      	itt	lt
 810e78e:	464b      	movlt	r3, r9
 810e790:	46a1      	movlt	r9, r4
 810e792:	4630      	mov	r0, r6
 810e794:	f8d9 1004 	ldr.w	r1, [r9, #4]
 810e798:	bfba      	itte	lt
 810e79a:	461c      	movlt	r4, r3
 810e79c:	2501      	movlt	r5, #1
 810e79e:	2500      	movge	r5, #0
 810e7a0:	f7ff fcf6 	bl	810e190 <_Balloc>
 810e7a4:	4602      	mov	r2, r0
 810e7a6:	b918      	cbnz	r0, 810e7b0 <__mdiff+0x60>
 810e7a8:	4b31      	ldr	r3, [pc, #196]	@ (810e870 <__mdiff+0x120>)
 810e7aa:	f240 2145 	movw	r1, #581	@ 0x245
 810e7ae:	e7e3      	b.n	810e778 <__mdiff+0x28>
 810e7b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 810e7b4:	6926      	ldr	r6, [r4, #16]
 810e7b6:	60c5      	str	r5, [r0, #12]
 810e7b8:	f109 0310 	add.w	r3, r9, #16
 810e7bc:	f109 0514 	add.w	r5, r9, #20
 810e7c0:	f104 0e14 	add.w	lr, r4, #20
 810e7c4:	f100 0b14 	add.w	fp, r0, #20
 810e7c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 810e7cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 810e7d0:	9301      	str	r3, [sp, #4]
 810e7d2:	46d9      	mov	r9, fp
 810e7d4:	f04f 0c00 	mov.w	ip, #0
 810e7d8:	9b01      	ldr	r3, [sp, #4]
 810e7da:	f85e 0b04 	ldr.w	r0, [lr], #4
 810e7de:	f853 af04 	ldr.w	sl, [r3, #4]!
 810e7e2:	9301      	str	r3, [sp, #4]
 810e7e4:	fa1f f38a 	uxth.w	r3, sl
 810e7e8:	4619      	mov	r1, r3
 810e7ea:	b283      	uxth	r3, r0
 810e7ec:	1acb      	subs	r3, r1, r3
 810e7ee:	0c00      	lsrs	r0, r0, #16
 810e7f0:	4463      	add	r3, ip
 810e7f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 810e7f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 810e7fa:	b29b      	uxth	r3, r3
 810e7fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 810e800:	4576      	cmp	r6, lr
 810e802:	f849 3b04 	str.w	r3, [r9], #4
 810e806:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810e80a:	d8e5      	bhi.n	810e7d8 <__mdiff+0x88>
 810e80c:	1b33      	subs	r3, r6, r4
 810e80e:	3b15      	subs	r3, #21
 810e810:	f023 0303 	bic.w	r3, r3, #3
 810e814:	3415      	adds	r4, #21
 810e816:	3304      	adds	r3, #4
 810e818:	42a6      	cmp	r6, r4
 810e81a:	bf38      	it	cc
 810e81c:	2304      	movcc	r3, #4
 810e81e:	441d      	add	r5, r3
 810e820:	445b      	add	r3, fp
 810e822:	461e      	mov	r6, r3
 810e824:	462c      	mov	r4, r5
 810e826:	4544      	cmp	r4, r8
 810e828:	d30e      	bcc.n	810e848 <__mdiff+0xf8>
 810e82a:	f108 0103 	add.w	r1, r8, #3
 810e82e:	1b49      	subs	r1, r1, r5
 810e830:	f021 0103 	bic.w	r1, r1, #3
 810e834:	3d03      	subs	r5, #3
 810e836:	45a8      	cmp	r8, r5
 810e838:	bf38      	it	cc
 810e83a:	2100      	movcc	r1, #0
 810e83c:	440b      	add	r3, r1
 810e83e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810e842:	b191      	cbz	r1, 810e86a <__mdiff+0x11a>
 810e844:	6117      	str	r7, [r2, #16]
 810e846:	e79d      	b.n	810e784 <__mdiff+0x34>
 810e848:	f854 1b04 	ldr.w	r1, [r4], #4
 810e84c:	46e6      	mov	lr, ip
 810e84e:	0c08      	lsrs	r0, r1, #16
 810e850:	fa1c fc81 	uxtah	ip, ip, r1
 810e854:	4471      	add	r1, lr
 810e856:	eb00 402c 	add.w	r0, r0, ip, asr #16
 810e85a:	b289      	uxth	r1, r1
 810e85c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 810e860:	f846 1b04 	str.w	r1, [r6], #4
 810e864:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810e868:	e7dd      	b.n	810e826 <__mdiff+0xd6>
 810e86a:	3f01      	subs	r7, #1
 810e86c:	e7e7      	b.n	810e83e <__mdiff+0xee>
 810e86e:	bf00      	nop
 810e870:	08111f79 	.word	0x08111f79
 810e874:	08111f8a 	.word	0x08111f8a

0810e878 <__ulp>:
 810e878:	b082      	sub	sp, #8
 810e87a:	ed8d 0b00 	vstr	d0, [sp]
 810e87e:	9a01      	ldr	r2, [sp, #4]
 810e880:	4b0f      	ldr	r3, [pc, #60]	@ (810e8c0 <__ulp+0x48>)
 810e882:	4013      	ands	r3, r2
 810e884:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 810e888:	2b00      	cmp	r3, #0
 810e88a:	dc08      	bgt.n	810e89e <__ulp+0x26>
 810e88c:	425b      	negs	r3, r3
 810e88e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 810e892:	ea4f 5223 	mov.w	r2, r3, asr #20
 810e896:	da04      	bge.n	810e8a2 <__ulp+0x2a>
 810e898:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 810e89c:	4113      	asrs	r3, r2
 810e89e:	2200      	movs	r2, #0
 810e8a0:	e008      	b.n	810e8b4 <__ulp+0x3c>
 810e8a2:	f1a2 0314 	sub.w	r3, r2, #20
 810e8a6:	2b1e      	cmp	r3, #30
 810e8a8:	bfda      	itte	le
 810e8aa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 810e8ae:	40da      	lsrle	r2, r3
 810e8b0:	2201      	movgt	r2, #1
 810e8b2:	2300      	movs	r3, #0
 810e8b4:	4619      	mov	r1, r3
 810e8b6:	4610      	mov	r0, r2
 810e8b8:	ec41 0b10 	vmov	d0, r0, r1
 810e8bc:	b002      	add	sp, #8
 810e8be:	4770      	bx	lr
 810e8c0:	7ff00000 	.word	0x7ff00000

0810e8c4 <__b2d>:
 810e8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e8c8:	6906      	ldr	r6, [r0, #16]
 810e8ca:	f100 0814 	add.w	r8, r0, #20
 810e8ce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 810e8d2:	1f37      	subs	r7, r6, #4
 810e8d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810e8d8:	4610      	mov	r0, r2
 810e8da:	f7ff fd4b 	bl	810e374 <__hi0bits>
 810e8de:	f1c0 0320 	rsb	r3, r0, #32
 810e8e2:	280a      	cmp	r0, #10
 810e8e4:	600b      	str	r3, [r1, #0]
 810e8e6:	491b      	ldr	r1, [pc, #108]	@ (810e954 <__b2d+0x90>)
 810e8e8:	dc15      	bgt.n	810e916 <__b2d+0x52>
 810e8ea:	f1c0 0c0b 	rsb	ip, r0, #11
 810e8ee:	fa22 f30c 	lsr.w	r3, r2, ip
 810e8f2:	45b8      	cmp	r8, r7
 810e8f4:	ea43 0501 	orr.w	r5, r3, r1
 810e8f8:	bf34      	ite	cc
 810e8fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810e8fe:	2300      	movcs	r3, #0
 810e900:	3015      	adds	r0, #21
 810e902:	fa02 f000 	lsl.w	r0, r2, r0
 810e906:	fa23 f30c 	lsr.w	r3, r3, ip
 810e90a:	4303      	orrs	r3, r0
 810e90c:	461c      	mov	r4, r3
 810e90e:	ec45 4b10 	vmov	d0, r4, r5
 810e912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810e916:	45b8      	cmp	r8, r7
 810e918:	bf3a      	itte	cc
 810e91a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810e91e:	f1a6 0708 	subcc.w	r7, r6, #8
 810e922:	2300      	movcs	r3, #0
 810e924:	380b      	subs	r0, #11
 810e926:	d012      	beq.n	810e94e <__b2d+0x8a>
 810e928:	f1c0 0120 	rsb	r1, r0, #32
 810e92c:	fa23 f401 	lsr.w	r4, r3, r1
 810e930:	4082      	lsls	r2, r0
 810e932:	4322      	orrs	r2, r4
 810e934:	4547      	cmp	r7, r8
 810e936:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 810e93a:	bf8c      	ite	hi
 810e93c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 810e940:	2200      	movls	r2, #0
 810e942:	4083      	lsls	r3, r0
 810e944:	40ca      	lsrs	r2, r1
 810e946:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 810e94a:	4313      	orrs	r3, r2
 810e94c:	e7de      	b.n	810e90c <__b2d+0x48>
 810e94e:	ea42 0501 	orr.w	r5, r2, r1
 810e952:	e7db      	b.n	810e90c <__b2d+0x48>
 810e954:	3ff00000 	.word	0x3ff00000

0810e958 <__d2b>:
 810e958:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810e95c:	460f      	mov	r7, r1
 810e95e:	2101      	movs	r1, #1
 810e960:	ec59 8b10 	vmov	r8, r9, d0
 810e964:	4616      	mov	r6, r2
 810e966:	f7ff fc13 	bl	810e190 <_Balloc>
 810e96a:	4604      	mov	r4, r0
 810e96c:	b930      	cbnz	r0, 810e97c <__d2b+0x24>
 810e96e:	4602      	mov	r2, r0
 810e970:	4b23      	ldr	r3, [pc, #140]	@ (810ea00 <__d2b+0xa8>)
 810e972:	4824      	ldr	r0, [pc, #144]	@ (810ea04 <__d2b+0xac>)
 810e974:	f240 310f 	movw	r1, #783	@ 0x30f
 810e978:	f001 fb4e 	bl	8110018 <__assert_func>
 810e97c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810e980:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810e984:	b10d      	cbz	r5, 810e98a <__d2b+0x32>
 810e986:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810e98a:	9301      	str	r3, [sp, #4]
 810e98c:	f1b8 0300 	subs.w	r3, r8, #0
 810e990:	d023      	beq.n	810e9da <__d2b+0x82>
 810e992:	4668      	mov	r0, sp
 810e994:	9300      	str	r3, [sp, #0]
 810e996:	f7ff fd0c 	bl	810e3b2 <__lo0bits>
 810e99a:	e9dd 1200 	ldrd	r1, r2, [sp]
 810e99e:	b1d0      	cbz	r0, 810e9d6 <__d2b+0x7e>
 810e9a0:	f1c0 0320 	rsb	r3, r0, #32
 810e9a4:	fa02 f303 	lsl.w	r3, r2, r3
 810e9a8:	430b      	orrs	r3, r1
 810e9aa:	40c2      	lsrs	r2, r0
 810e9ac:	6163      	str	r3, [r4, #20]
 810e9ae:	9201      	str	r2, [sp, #4]
 810e9b0:	9b01      	ldr	r3, [sp, #4]
 810e9b2:	61a3      	str	r3, [r4, #24]
 810e9b4:	2b00      	cmp	r3, #0
 810e9b6:	bf0c      	ite	eq
 810e9b8:	2201      	moveq	r2, #1
 810e9ba:	2202      	movne	r2, #2
 810e9bc:	6122      	str	r2, [r4, #16]
 810e9be:	b1a5      	cbz	r5, 810e9ea <__d2b+0x92>
 810e9c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 810e9c4:	4405      	add	r5, r0
 810e9c6:	603d      	str	r5, [r7, #0]
 810e9c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 810e9cc:	6030      	str	r0, [r6, #0]
 810e9ce:	4620      	mov	r0, r4
 810e9d0:	b003      	add	sp, #12
 810e9d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810e9d6:	6161      	str	r1, [r4, #20]
 810e9d8:	e7ea      	b.n	810e9b0 <__d2b+0x58>
 810e9da:	a801      	add	r0, sp, #4
 810e9dc:	f7ff fce9 	bl	810e3b2 <__lo0bits>
 810e9e0:	9b01      	ldr	r3, [sp, #4]
 810e9e2:	6163      	str	r3, [r4, #20]
 810e9e4:	3020      	adds	r0, #32
 810e9e6:	2201      	movs	r2, #1
 810e9e8:	e7e8      	b.n	810e9bc <__d2b+0x64>
 810e9ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810e9ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 810e9f2:	6038      	str	r0, [r7, #0]
 810e9f4:	6918      	ldr	r0, [r3, #16]
 810e9f6:	f7ff fcbd 	bl	810e374 <__hi0bits>
 810e9fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810e9fe:	e7e5      	b.n	810e9cc <__d2b+0x74>
 810ea00:	08111f79 	.word	0x08111f79
 810ea04:	08111f8a 	.word	0x08111f8a

0810ea08 <__ratio>:
 810ea08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ea0c:	b085      	sub	sp, #20
 810ea0e:	e9cd 1000 	strd	r1, r0, [sp]
 810ea12:	a902      	add	r1, sp, #8
 810ea14:	f7ff ff56 	bl	810e8c4 <__b2d>
 810ea18:	9800      	ldr	r0, [sp, #0]
 810ea1a:	a903      	add	r1, sp, #12
 810ea1c:	ec55 4b10 	vmov	r4, r5, d0
 810ea20:	f7ff ff50 	bl	810e8c4 <__b2d>
 810ea24:	9b01      	ldr	r3, [sp, #4]
 810ea26:	6919      	ldr	r1, [r3, #16]
 810ea28:	9b00      	ldr	r3, [sp, #0]
 810ea2a:	691b      	ldr	r3, [r3, #16]
 810ea2c:	1ac9      	subs	r1, r1, r3
 810ea2e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 810ea32:	1a9b      	subs	r3, r3, r2
 810ea34:	ec5b ab10 	vmov	sl, fp, d0
 810ea38:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 810ea3c:	2b00      	cmp	r3, #0
 810ea3e:	bfce      	itee	gt
 810ea40:	462a      	movgt	r2, r5
 810ea42:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810ea46:	465a      	movle	r2, fp
 810ea48:	462f      	mov	r7, r5
 810ea4a:	46d9      	mov	r9, fp
 810ea4c:	bfcc      	ite	gt
 810ea4e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810ea52:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 810ea56:	464b      	mov	r3, r9
 810ea58:	4652      	mov	r2, sl
 810ea5a:	4620      	mov	r0, r4
 810ea5c:	4639      	mov	r1, r7
 810ea5e:	f7f1 ff7d 	bl	810095c <__aeabi_ddiv>
 810ea62:	ec41 0b10 	vmov	d0, r0, r1
 810ea66:	b005      	add	sp, #20
 810ea68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810ea6c <__copybits>:
 810ea6c:	3901      	subs	r1, #1
 810ea6e:	b570      	push	{r4, r5, r6, lr}
 810ea70:	1149      	asrs	r1, r1, #5
 810ea72:	6914      	ldr	r4, [r2, #16]
 810ea74:	3101      	adds	r1, #1
 810ea76:	f102 0314 	add.w	r3, r2, #20
 810ea7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810ea7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810ea82:	1f05      	subs	r5, r0, #4
 810ea84:	42a3      	cmp	r3, r4
 810ea86:	d30c      	bcc.n	810eaa2 <__copybits+0x36>
 810ea88:	1aa3      	subs	r3, r4, r2
 810ea8a:	3b11      	subs	r3, #17
 810ea8c:	f023 0303 	bic.w	r3, r3, #3
 810ea90:	3211      	adds	r2, #17
 810ea92:	42a2      	cmp	r2, r4
 810ea94:	bf88      	it	hi
 810ea96:	2300      	movhi	r3, #0
 810ea98:	4418      	add	r0, r3
 810ea9a:	2300      	movs	r3, #0
 810ea9c:	4288      	cmp	r0, r1
 810ea9e:	d305      	bcc.n	810eaac <__copybits+0x40>
 810eaa0:	bd70      	pop	{r4, r5, r6, pc}
 810eaa2:	f853 6b04 	ldr.w	r6, [r3], #4
 810eaa6:	f845 6f04 	str.w	r6, [r5, #4]!
 810eaaa:	e7eb      	b.n	810ea84 <__copybits+0x18>
 810eaac:	f840 3b04 	str.w	r3, [r0], #4
 810eab0:	e7f4      	b.n	810ea9c <__copybits+0x30>

0810eab2 <__any_on>:
 810eab2:	f100 0214 	add.w	r2, r0, #20
 810eab6:	6900      	ldr	r0, [r0, #16]
 810eab8:	114b      	asrs	r3, r1, #5
 810eaba:	4298      	cmp	r0, r3
 810eabc:	b510      	push	{r4, lr}
 810eabe:	db11      	blt.n	810eae4 <__any_on+0x32>
 810eac0:	dd0a      	ble.n	810ead8 <__any_on+0x26>
 810eac2:	f011 011f 	ands.w	r1, r1, #31
 810eac6:	d007      	beq.n	810ead8 <__any_on+0x26>
 810eac8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810eacc:	fa24 f001 	lsr.w	r0, r4, r1
 810ead0:	fa00 f101 	lsl.w	r1, r0, r1
 810ead4:	428c      	cmp	r4, r1
 810ead6:	d10b      	bne.n	810eaf0 <__any_on+0x3e>
 810ead8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810eadc:	4293      	cmp	r3, r2
 810eade:	d803      	bhi.n	810eae8 <__any_on+0x36>
 810eae0:	2000      	movs	r0, #0
 810eae2:	bd10      	pop	{r4, pc}
 810eae4:	4603      	mov	r3, r0
 810eae6:	e7f7      	b.n	810ead8 <__any_on+0x26>
 810eae8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810eaec:	2900      	cmp	r1, #0
 810eaee:	d0f5      	beq.n	810eadc <__any_on+0x2a>
 810eaf0:	2001      	movs	r0, #1
 810eaf2:	e7f6      	b.n	810eae2 <__any_on+0x30>

0810eaf4 <sulp>:
 810eaf4:	b570      	push	{r4, r5, r6, lr}
 810eaf6:	4604      	mov	r4, r0
 810eaf8:	460d      	mov	r5, r1
 810eafa:	ec45 4b10 	vmov	d0, r4, r5
 810eafe:	4616      	mov	r6, r2
 810eb00:	f7ff feba 	bl	810e878 <__ulp>
 810eb04:	ec51 0b10 	vmov	r0, r1, d0
 810eb08:	b17e      	cbz	r6, 810eb2a <sulp+0x36>
 810eb0a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810eb0e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 810eb12:	2b00      	cmp	r3, #0
 810eb14:	dd09      	ble.n	810eb2a <sulp+0x36>
 810eb16:	051b      	lsls	r3, r3, #20
 810eb18:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 810eb1c:	2400      	movs	r4, #0
 810eb1e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 810eb22:	4622      	mov	r2, r4
 810eb24:	462b      	mov	r3, r5
 810eb26:	f7f1 fdef 	bl	8100708 <__aeabi_dmul>
 810eb2a:	ec41 0b10 	vmov	d0, r0, r1
 810eb2e:	bd70      	pop	{r4, r5, r6, pc}

0810eb30 <_strtod_l>:
 810eb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810eb34:	b09f      	sub	sp, #124	@ 0x7c
 810eb36:	460c      	mov	r4, r1
 810eb38:	9217      	str	r2, [sp, #92]	@ 0x5c
 810eb3a:	2200      	movs	r2, #0
 810eb3c:	921a      	str	r2, [sp, #104]	@ 0x68
 810eb3e:	9005      	str	r0, [sp, #20]
 810eb40:	f04f 0a00 	mov.w	sl, #0
 810eb44:	f04f 0b00 	mov.w	fp, #0
 810eb48:	460a      	mov	r2, r1
 810eb4a:	9219      	str	r2, [sp, #100]	@ 0x64
 810eb4c:	7811      	ldrb	r1, [r2, #0]
 810eb4e:	292b      	cmp	r1, #43	@ 0x2b
 810eb50:	d04a      	beq.n	810ebe8 <_strtod_l+0xb8>
 810eb52:	d838      	bhi.n	810ebc6 <_strtod_l+0x96>
 810eb54:	290d      	cmp	r1, #13
 810eb56:	d832      	bhi.n	810ebbe <_strtod_l+0x8e>
 810eb58:	2908      	cmp	r1, #8
 810eb5a:	d832      	bhi.n	810ebc2 <_strtod_l+0x92>
 810eb5c:	2900      	cmp	r1, #0
 810eb5e:	d03b      	beq.n	810ebd8 <_strtod_l+0xa8>
 810eb60:	2200      	movs	r2, #0
 810eb62:	920b      	str	r2, [sp, #44]	@ 0x2c
 810eb64:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 810eb66:	782a      	ldrb	r2, [r5, #0]
 810eb68:	2a30      	cmp	r2, #48	@ 0x30
 810eb6a:	f040 80b3 	bne.w	810ecd4 <_strtod_l+0x1a4>
 810eb6e:	786a      	ldrb	r2, [r5, #1]
 810eb70:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 810eb74:	2a58      	cmp	r2, #88	@ 0x58
 810eb76:	d16e      	bne.n	810ec56 <_strtod_l+0x126>
 810eb78:	9302      	str	r3, [sp, #8]
 810eb7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810eb7c:	9301      	str	r3, [sp, #4]
 810eb7e:	ab1a      	add	r3, sp, #104	@ 0x68
 810eb80:	9300      	str	r3, [sp, #0]
 810eb82:	4a8e      	ldr	r2, [pc, #568]	@ (810edbc <_strtod_l+0x28c>)
 810eb84:	9805      	ldr	r0, [sp, #20]
 810eb86:	ab1b      	add	r3, sp, #108	@ 0x6c
 810eb88:	a919      	add	r1, sp, #100	@ 0x64
 810eb8a:	f001 fadf 	bl	811014c <__gethex>
 810eb8e:	f010 060f 	ands.w	r6, r0, #15
 810eb92:	4604      	mov	r4, r0
 810eb94:	d005      	beq.n	810eba2 <_strtod_l+0x72>
 810eb96:	2e06      	cmp	r6, #6
 810eb98:	d128      	bne.n	810ebec <_strtod_l+0xbc>
 810eb9a:	3501      	adds	r5, #1
 810eb9c:	2300      	movs	r3, #0
 810eb9e:	9519      	str	r5, [sp, #100]	@ 0x64
 810eba0:	930b      	str	r3, [sp, #44]	@ 0x2c
 810eba2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810eba4:	2b00      	cmp	r3, #0
 810eba6:	f040 858e 	bne.w	810f6c6 <_strtod_l+0xb96>
 810ebaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810ebac:	b1cb      	cbz	r3, 810ebe2 <_strtod_l+0xb2>
 810ebae:	4652      	mov	r2, sl
 810ebb0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 810ebb4:	ec43 2b10 	vmov	d0, r2, r3
 810ebb8:	b01f      	add	sp, #124	@ 0x7c
 810ebba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ebbe:	2920      	cmp	r1, #32
 810ebc0:	d1ce      	bne.n	810eb60 <_strtod_l+0x30>
 810ebc2:	3201      	adds	r2, #1
 810ebc4:	e7c1      	b.n	810eb4a <_strtod_l+0x1a>
 810ebc6:	292d      	cmp	r1, #45	@ 0x2d
 810ebc8:	d1ca      	bne.n	810eb60 <_strtod_l+0x30>
 810ebca:	2101      	movs	r1, #1
 810ebcc:	910b      	str	r1, [sp, #44]	@ 0x2c
 810ebce:	1c51      	adds	r1, r2, #1
 810ebd0:	9119      	str	r1, [sp, #100]	@ 0x64
 810ebd2:	7852      	ldrb	r2, [r2, #1]
 810ebd4:	2a00      	cmp	r2, #0
 810ebd6:	d1c5      	bne.n	810eb64 <_strtod_l+0x34>
 810ebd8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810ebda:	9419      	str	r4, [sp, #100]	@ 0x64
 810ebdc:	2b00      	cmp	r3, #0
 810ebde:	f040 8570 	bne.w	810f6c2 <_strtod_l+0xb92>
 810ebe2:	4652      	mov	r2, sl
 810ebe4:	465b      	mov	r3, fp
 810ebe6:	e7e5      	b.n	810ebb4 <_strtod_l+0x84>
 810ebe8:	2100      	movs	r1, #0
 810ebea:	e7ef      	b.n	810ebcc <_strtod_l+0x9c>
 810ebec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 810ebee:	b13a      	cbz	r2, 810ec00 <_strtod_l+0xd0>
 810ebf0:	2135      	movs	r1, #53	@ 0x35
 810ebf2:	a81c      	add	r0, sp, #112	@ 0x70
 810ebf4:	f7ff ff3a 	bl	810ea6c <__copybits>
 810ebf8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810ebfa:	9805      	ldr	r0, [sp, #20]
 810ebfc:	f7ff fb08 	bl	810e210 <_Bfree>
 810ec00:	3e01      	subs	r6, #1
 810ec02:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 810ec04:	2e04      	cmp	r6, #4
 810ec06:	d806      	bhi.n	810ec16 <_strtod_l+0xe6>
 810ec08:	e8df f006 	tbb	[pc, r6]
 810ec0c:	201d0314 	.word	0x201d0314
 810ec10:	14          	.byte	0x14
 810ec11:	00          	.byte	0x00
 810ec12:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 810ec16:	05e1      	lsls	r1, r4, #23
 810ec18:	bf48      	it	mi
 810ec1a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 810ec1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810ec22:	0d1b      	lsrs	r3, r3, #20
 810ec24:	051b      	lsls	r3, r3, #20
 810ec26:	2b00      	cmp	r3, #0
 810ec28:	d1bb      	bne.n	810eba2 <_strtod_l+0x72>
 810ec2a:	f7fe fb21 	bl	810d270 <__errno>
 810ec2e:	2322      	movs	r3, #34	@ 0x22
 810ec30:	6003      	str	r3, [r0, #0]
 810ec32:	e7b6      	b.n	810eba2 <_strtod_l+0x72>
 810ec34:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 810ec38:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 810ec3c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 810ec40:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810ec44:	e7e7      	b.n	810ec16 <_strtod_l+0xe6>
 810ec46:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 810edc4 <_strtod_l+0x294>
 810ec4a:	e7e4      	b.n	810ec16 <_strtod_l+0xe6>
 810ec4c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 810ec50:	f04f 3aff 	mov.w	sl, #4294967295
 810ec54:	e7df      	b.n	810ec16 <_strtod_l+0xe6>
 810ec56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810ec58:	1c5a      	adds	r2, r3, #1
 810ec5a:	9219      	str	r2, [sp, #100]	@ 0x64
 810ec5c:	785b      	ldrb	r3, [r3, #1]
 810ec5e:	2b30      	cmp	r3, #48	@ 0x30
 810ec60:	d0f9      	beq.n	810ec56 <_strtod_l+0x126>
 810ec62:	2b00      	cmp	r3, #0
 810ec64:	d09d      	beq.n	810eba2 <_strtod_l+0x72>
 810ec66:	2301      	movs	r3, #1
 810ec68:	9309      	str	r3, [sp, #36]	@ 0x24
 810ec6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810ec6c:	930c      	str	r3, [sp, #48]	@ 0x30
 810ec6e:	2300      	movs	r3, #0
 810ec70:	9308      	str	r3, [sp, #32]
 810ec72:	930a      	str	r3, [sp, #40]	@ 0x28
 810ec74:	461f      	mov	r7, r3
 810ec76:	220a      	movs	r2, #10
 810ec78:	9819      	ldr	r0, [sp, #100]	@ 0x64
 810ec7a:	7805      	ldrb	r5, [r0, #0]
 810ec7c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 810ec80:	b2d9      	uxtb	r1, r3
 810ec82:	2909      	cmp	r1, #9
 810ec84:	d928      	bls.n	810ecd8 <_strtod_l+0x1a8>
 810ec86:	494e      	ldr	r1, [pc, #312]	@ (810edc0 <_strtod_l+0x290>)
 810ec88:	2201      	movs	r2, #1
 810ec8a:	f001 f979 	bl	810ff80 <strncmp>
 810ec8e:	2800      	cmp	r0, #0
 810ec90:	d032      	beq.n	810ecf8 <_strtod_l+0x1c8>
 810ec92:	2000      	movs	r0, #0
 810ec94:	462a      	mov	r2, r5
 810ec96:	4681      	mov	r9, r0
 810ec98:	463d      	mov	r5, r7
 810ec9a:	4603      	mov	r3, r0
 810ec9c:	2a65      	cmp	r2, #101	@ 0x65
 810ec9e:	d001      	beq.n	810eca4 <_strtod_l+0x174>
 810eca0:	2a45      	cmp	r2, #69	@ 0x45
 810eca2:	d114      	bne.n	810ecce <_strtod_l+0x19e>
 810eca4:	b91d      	cbnz	r5, 810ecae <_strtod_l+0x17e>
 810eca6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810eca8:	4302      	orrs	r2, r0
 810ecaa:	d095      	beq.n	810ebd8 <_strtod_l+0xa8>
 810ecac:	2500      	movs	r5, #0
 810ecae:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 810ecb0:	1c62      	adds	r2, r4, #1
 810ecb2:	9219      	str	r2, [sp, #100]	@ 0x64
 810ecb4:	7862      	ldrb	r2, [r4, #1]
 810ecb6:	2a2b      	cmp	r2, #43	@ 0x2b
 810ecb8:	d077      	beq.n	810edaa <_strtod_l+0x27a>
 810ecba:	2a2d      	cmp	r2, #45	@ 0x2d
 810ecbc:	d07b      	beq.n	810edb6 <_strtod_l+0x286>
 810ecbe:	f04f 0c00 	mov.w	ip, #0
 810ecc2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 810ecc6:	2909      	cmp	r1, #9
 810ecc8:	f240 8082 	bls.w	810edd0 <_strtod_l+0x2a0>
 810eccc:	9419      	str	r4, [sp, #100]	@ 0x64
 810ecce:	f04f 0800 	mov.w	r8, #0
 810ecd2:	e0a2      	b.n	810ee1a <_strtod_l+0x2ea>
 810ecd4:	2300      	movs	r3, #0
 810ecd6:	e7c7      	b.n	810ec68 <_strtod_l+0x138>
 810ecd8:	2f08      	cmp	r7, #8
 810ecda:	bfd5      	itete	le
 810ecdc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 810ecde:	9908      	ldrgt	r1, [sp, #32]
 810ece0:	fb02 3301 	mlale	r3, r2, r1, r3
 810ece4:	fb02 3301 	mlagt	r3, r2, r1, r3
 810ece8:	f100 0001 	add.w	r0, r0, #1
 810ecec:	bfd4      	ite	le
 810ecee:	930a      	strle	r3, [sp, #40]	@ 0x28
 810ecf0:	9308      	strgt	r3, [sp, #32]
 810ecf2:	3701      	adds	r7, #1
 810ecf4:	9019      	str	r0, [sp, #100]	@ 0x64
 810ecf6:	e7bf      	b.n	810ec78 <_strtod_l+0x148>
 810ecf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810ecfa:	1c5a      	adds	r2, r3, #1
 810ecfc:	9219      	str	r2, [sp, #100]	@ 0x64
 810ecfe:	785a      	ldrb	r2, [r3, #1]
 810ed00:	b37f      	cbz	r7, 810ed62 <_strtod_l+0x232>
 810ed02:	4681      	mov	r9, r0
 810ed04:	463d      	mov	r5, r7
 810ed06:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 810ed0a:	2b09      	cmp	r3, #9
 810ed0c:	d912      	bls.n	810ed34 <_strtod_l+0x204>
 810ed0e:	2301      	movs	r3, #1
 810ed10:	e7c4      	b.n	810ec9c <_strtod_l+0x16c>
 810ed12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810ed14:	1c5a      	adds	r2, r3, #1
 810ed16:	9219      	str	r2, [sp, #100]	@ 0x64
 810ed18:	785a      	ldrb	r2, [r3, #1]
 810ed1a:	3001      	adds	r0, #1
 810ed1c:	2a30      	cmp	r2, #48	@ 0x30
 810ed1e:	d0f8      	beq.n	810ed12 <_strtod_l+0x1e2>
 810ed20:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 810ed24:	2b08      	cmp	r3, #8
 810ed26:	f200 84d3 	bhi.w	810f6d0 <_strtod_l+0xba0>
 810ed2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810ed2c:	930c      	str	r3, [sp, #48]	@ 0x30
 810ed2e:	4681      	mov	r9, r0
 810ed30:	2000      	movs	r0, #0
 810ed32:	4605      	mov	r5, r0
 810ed34:	3a30      	subs	r2, #48	@ 0x30
 810ed36:	f100 0301 	add.w	r3, r0, #1
 810ed3a:	d02a      	beq.n	810ed92 <_strtod_l+0x262>
 810ed3c:	4499      	add	r9, r3
 810ed3e:	eb00 0c05 	add.w	ip, r0, r5
 810ed42:	462b      	mov	r3, r5
 810ed44:	210a      	movs	r1, #10
 810ed46:	4563      	cmp	r3, ip
 810ed48:	d10d      	bne.n	810ed66 <_strtod_l+0x236>
 810ed4a:	1c69      	adds	r1, r5, #1
 810ed4c:	4401      	add	r1, r0
 810ed4e:	4428      	add	r0, r5
 810ed50:	2808      	cmp	r0, #8
 810ed52:	dc16      	bgt.n	810ed82 <_strtod_l+0x252>
 810ed54:	980a      	ldr	r0, [sp, #40]	@ 0x28
 810ed56:	230a      	movs	r3, #10
 810ed58:	fb03 2300 	mla	r3, r3, r0, r2
 810ed5c:	930a      	str	r3, [sp, #40]	@ 0x28
 810ed5e:	2300      	movs	r3, #0
 810ed60:	e018      	b.n	810ed94 <_strtod_l+0x264>
 810ed62:	4638      	mov	r0, r7
 810ed64:	e7da      	b.n	810ed1c <_strtod_l+0x1ec>
 810ed66:	2b08      	cmp	r3, #8
 810ed68:	f103 0301 	add.w	r3, r3, #1
 810ed6c:	dc03      	bgt.n	810ed76 <_strtod_l+0x246>
 810ed6e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 810ed70:	434e      	muls	r6, r1
 810ed72:	960a      	str	r6, [sp, #40]	@ 0x28
 810ed74:	e7e7      	b.n	810ed46 <_strtod_l+0x216>
 810ed76:	2b10      	cmp	r3, #16
 810ed78:	bfde      	ittt	le
 810ed7a:	9e08      	ldrle	r6, [sp, #32]
 810ed7c:	434e      	mulle	r6, r1
 810ed7e:	9608      	strle	r6, [sp, #32]
 810ed80:	e7e1      	b.n	810ed46 <_strtod_l+0x216>
 810ed82:	280f      	cmp	r0, #15
 810ed84:	dceb      	bgt.n	810ed5e <_strtod_l+0x22e>
 810ed86:	9808      	ldr	r0, [sp, #32]
 810ed88:	230a      	movs	r3, #10
 810ed8a:	fb03 2300 	mla	r3, r3, r0, r2
 810ed8e:	9308      	str	r3, [sp, #32]
 810ed90:	e7e5      	b.n	810ed5e <_strtod_l+0x22e>
 810ed92:	4629      	mov	r1, r5
 810ed94:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810ed96:	1c50      	adds	r0, r2, #1
 810ed98:	9019      	str	r0, [sp, #100]	@ 0x64
 810ed9a:	7852      	ldrb	r2, [r2, #1]
 810ed9c:	4618      	mov	r0, r3
 810ed9e:	460d      	mov	r5, r1
 810eda0:	e7b1      	b.n	810ed06 <_strtod_l+0x1d6>
 810eda2:	f04f 0900 	mov.w	r9, #0
 810eda6:	2301      	movs	r3, #1
 810eda8:	e77d      	b.n	810eca6 <_strtod_l+0x176>
 810edaa:	f04f 0c00 	mov.w	ip, #0
 810edae:	1ca2      	adds	r2, r4, #2
 810edb0:	9219      	str	r2, [sp, #100]	@ 0x64
 810edb2:	78a2      	ldrb	r2, [r4, #2]
 810edb4:	e785      	b.n	810ecc2 <_strtod_l+0x192>
 810edb6:	f04f 0c01 	mov.w	ip, #1
 810edba:	e7f8      	b.n	810edae <_strtod_l+0x27e>
 810edbc:	081120f8 	.word	0x081120f8
 810edc0:	081120e0 	.word	0x081120e0
 810edc4:	7ff00000 	.word	0x7ff00000
 810edc8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810edca:	1c51      	adds	r1, r2, #1
 810edcc:	9119      	str	r1, [sp, #100]	@ 0x64
 810edce:	7852      	ldrb	r2, [r2, #1]
 810edd0:	2a30      	cmp	r2, #48	@ 0x30
 810edd2:	d0f9      	beq.n	810edc8 <_strtod_l+0x298>
 810edd4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 810edd8:	2908      	cmp	r1, #8
 810edda:	f63f af78 	bhi.w	810ecce <_strtod_l+0x19e>
 810edde:	3a30      	subs	r2, #48	@ 0x30
 810ede0:	920e      	str	r2, [sp, #56]	@ 0x38
 810ede2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810ede4:	920f      	str	r2, [sp, #60]	@ 0x3c
 810ede6:	f04f 080a 	mov.w	r8, #10
 810edea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810edec:	1c56      	adds	r6, r2, #1
 810edee:	9619      	str	r6, [sp, #100]	@ 0x64
 810edf0:	7852      	ldrb	r2, [r2, #1]
 810edf2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 810edf6:	f1be 0f09 	cmp.w	lr, #9
 810edfa:	d939      	bls.n	810ee70 <_strtod_l+0x340>
 810edfc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 810edfe:	1a76      	subs	r6, r6, r1
 810ee00:	2e08      	cmp	r6, #8
 810ee02:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 810ee06:	dc03      	bgt.n	810ee10 <_strtod_l+0x2e0>
 810ee08:	990e      	ldr	r1, [sp, #56]	@ 0x38
 810ee0a:	4588      	cmp	r8, r1
 810ee0c:	bfa8      	it	ge
 810ee0e:	4688      	movge	r8, r1
 810ee10:	f1bc 0f00 	cmp.w	ip, #0
 810ee14:	d001      	beq.n	810ee1a <_strtod_l+0x2ea>
 810ee16:	f1c8 0800 	rsb	r8, r8, #0
 810ee1a:	2d00      	cmp	r5, #0
 810ee1c:	d14e      	bne.n	810eebc <_strtod_l+0x38c>
 810ee1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810ee20:	4308      	orrs	r0, r1
 810ee22:	f47f aebe 	bne.w	810eba2 <_strtod_l+0x72>
 810ee26:	2b00      	cmp	r3, #0
 810ee28:	f47f aed6 	bne.w	810ebd8 <_strtod_l+0xa8>
 810ee2c:	2a69      	cmp	r2, #105	@ 0x69
 810ee2e:	d028      	beq.n	810ee82 <_strtod_l+0x352>
 810ee30:	dc25      	bgt.n	810ee7e <_strtod_l+0x34e>
 810ee32:	2a49      	cmp	r2, #73	@ 0x49
 810ee34:	d025      	beq.n	810ee82 <_strtod_l+0x352>
 810ee36:	2a4e      	cmp	r2, #78	@ 0x4e
 810ee38:	f47f aece 	bne.w	810ebd8 <_strtod_l+0xa8>
 810ee3c:	499b      	ldr	r1, [pc, #620]	@ (810f0ac <_strtod_l+0x57c>)
 810ee3e:	a819      	add	r0, sp, #100	@ 0x64
 810ee40:	f001 fba6 	bl	8110590 <__match>
 810ee44:	2800      	cmp	r0, #0
 810ee46:	f43f aec7 	beq.w	810ebd8 <_strtod_l+0xa8>
 810ee4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810ee4c:	781b      	ldrb	r3, [r3, #0]
 810ee4e:	2b28      	cmp	r3, #40	@ 0x28
 810ee50:	d12e      	bne.n	810eeb0 <_strtod_l+0x380>
 810ee52:	4997      	ldr	r1, [pc, #604]	@ (810f0b0 <_strtod_l+0x580>)
 810ee54:	aa1c      	add	r2, sp, #112	@ 0x70
 810ee56:	a819      	add	r0, sp, #100	@ 0x64
 810ee58:	f001 fbae 	bl	81105b8 <__hexnan>
 810ee5c:	2805      	cmp	r0, #5
 810ee5e:	d127      	bne.n	810eeb0 <_strtod_l+0x380>
 810ee60:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 810ee62:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 810ee66:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 810ee6a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 810ee6e:	e698      	b.n	810eba2 <_strtod_l+0x72>
 810ee70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 810ee72:	fb08 2101 	mla	r1, r8, r1, r2
 810ee76:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 810ee7a:	920e      	str	r2, [sp, #56]	@ 0x38
 810ee7c:	e7b5      	b.n	810edea <_strtod_l+0x2ba>
 810ee7e:	2a6e      	cmp	r2, #110	@ 0x6e
 810ee80:	e7da      	b.n	810ee38 <_strtod_l+0x308>
 810ee82:	498c      	ldr	r1, [pc, #560]	@ (810f0b4 <_strtod_l+0x584>)
 810ee84:	a819      	add	r0, sp, #100	@ 0x64
 810ee86:	f001 fb83 	bl	8110590 <__match>
 810ee8a:	2800      	cmp	r0, #0
 810ee8c:	f43f aea4 	beq.w	810ebd8 <_strtod_l+0xa8>
 810ee90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810ee92:	4989      	ldr	r1, [pc, #548]	@ (810f0b8 <_strtod_l+0x588>)
 810ee94:	3b01      	subs	r3, #1
 810ee96:	a819      	add	r0, sp, #100	@ 0x64
 810ee98:	9319      	str	r3, [sp, #100]	@ 0x64
 810ee9a:	f001 fb79 	bl	8110590 <__match>
 810ee9e:	b910      	cbnz	r0, 810eea6 <_strtod_l+0x376>
 810eea0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810eea2:	3301      	adds	r3, #1
 810eea4:	9319      	str	r3, [sp, #100]	@ 0x64
 810eea6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 810f0c8 <_strtod_l+0x598>
 810eeaa:	f04f 0a00 	mov.w	sl, #0
 810eeae:	e678      	b.n	810eba2 <_strtod_l+0x72>
 810eeb0:	4882      	ldr	r0, [pc, #520]	@ (810f0bc <_strtod_l+0x58c>)
 810eeb2:	f001 f8a9 	bl	8110008 <nan>
 810eeb6:	ec5b ab10 	vmov	sl, fp, d0
 810eeba:	e672      	b.n	810eba2 <_strtod_l+0x72>
 810eebc:	eba8 0309 	sub.w	r3, r8, r9
 810eec0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 810eec2:	9309      	str	r3, [sp, #36]	@ 0x24
 810eec4:	2f00      	cmp	r7, #0
 810eec6:	bf08      	it	eq
 810eec8:	462f      	moveq	r7, r5
 810eeca:	2d10      	cmp	r5, #16
 810eecc:	462c      	mov	r4, r5
 810eece:	bfa8      	it	ge
 810eed0:	2410      	movge	r4, #16
 810eed2:	f7f1 fb9f 	bl	8100614 <__aeabi_ui2d>
 810eed6:	2d09      	cmp	r5, #9
 810eed8:	4682      	mov	sl, r0
 810eeda:	468b      	mov	fp, r1
 810eedc:	dc13      	bgt.n	810ef06 <_strtod_l+0x3d6>
 810eede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810eee0:	2b00      	cmp	r3, #0
 810eee2:	f43f ae5e 	beq.w	810eba2 <_strtod_l+0x72>
 810eee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810eee8:	dd78      	ble.n	810efdc <_strtod_l+0x4ac>
 810eeea:	2b16      	cmp	r3, #22
 810eeec:	dc5f      	bgt.n	810efae <_strtod_l+0x47e>
 810eeee:	4974      	ldr	r1, [pc, #464]	@ (810f0c0 <_strtod_l+0x590>)
 810eef0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810eef4:	e9d1 0100 	ldrd	r0, r1, [r1]
 810eef8:	4652      	mov	r2, sl
 810eefa:	465b      	mov	r3, fp
 810eefc:	f7f1 fc04 	bl	8100708 <__aeabi_dmul>
 810ef00:	4682      	mov	sl, r0
 810ef02:	468b      	mov	fp, r1
 810ef04:	e64d      	b.n	810eba2 <_strtod_l+0x72>
 810ef06:	4b6e      	ldr	r3, [pc, #440]	@ (810f0c0 <_strtod_l+0x590>)
 810ef08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810ef0c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 810ef10:	f7f1 fbfa 	bl	8100708 <__aeabi_dmul>
 810ef14:	4682      	mov	sl, r0
 810ef16:	9808      	ldr	r0, [sp, #32]
 810ef18:	468b      	mov	fp, r1
 810ef1a:	f7f1 fb7b 	bl	8100614 <__aeabi_ui2d>
 810ef1e:	4602      	mov	r2, r0
 810ef20:	460b      	mov	r3, r1
 810ef22:	4650      	mov	r0, sl
 810ef24:	4659      	mov	r1, fp
 810ef26:	f7f1 fa39 	bl	810039c <__adddf3>
 810ef2a:	2d0f      	cmp	r5, #15
 810ef2c:	4682      	mov	sl, r0
 810ef2e:	468b      	mov	fp, r1
 810ef30:	ddd5      	ble.n	810eede <_strtod_l+0x3ae>
 810ef32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ef34:	1b2c      	subs	r4, r5, r4
 810ef36:	441c      	add	r4, r3
 810ef38:	2c00      	cmp	r4, #0
 810ef3a:	f340 8096 	ble.w	810f06a <_strtod_l+0x53a>
 810ef3e:	f014 030f 	ands.w	r3, r4, #15
 810ef42:	d00a      	beq.n	810ef5a <_strtod_l+0x42a>
 810ef44:	495e      	ldr	r1, [pc, #376]	@ (810f0c0 <_strtod_l+0x590>)
 810ef46:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810ef4a:	4652      	mov	r2, sl
 810ef4c:	465b      	mov	r3, fp
 810ef4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810ef52:	f7f1 fbd9 	bl	8100708 <__aeabi_dmul>
 810ef56:	4682      	mov	sl, r0
 810ef58:	468b      	mov	fp, r1
 810ef5a:	f034 040f 	bics.w	r4, r4, #15
 810ef5e:	d073      	beq.n	810f048 <_strtod_l+0x518>
 810ef60:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 810ef64:	dd48      	ble.n	810eff8 <_strtod_l+0x4c8>
 810ef66:	2400      	movs	r4, #0
 810ef68:	46a0      	mov	r8, r4
 810ef6a:	940a      	str	r4, [sp, #40]	@ 0x28
 810ef6c:	46a1      	mov	r9, r4
 810ef6e:	9a05      	ldr	r2, [sp, #20]
 810ef70:	f8df b154 	ldr.w	fp, [pc, #340]	@ 810f0c8 <_strtod_l+0x598>
 810ef74:	2322      	movs	r3, #34	@ 0x22
 810ef76:	6013      	str	r3, [r2, #0]
 810ef78:	f04f 0a00 	mov.w	sl, #0
 810ef7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810ef7e:	2b00      	cmp	r3, #0
 810ef80:	f43f ae0f 	beq.w	810eba2 <_strtod_l+0x72>
 810ef84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810ef86:	9805      	ldr	r0, [sp, #20]
 810ef88:	f7ff f942 	bl	810e210 <_Bfree>
 810ef8c:	9805      	ldr	r0, [sp, #20]
 810ef8e:	4649      	mov	r1, r9
 810ef90:	f7ff f93e 	bl	810e210 <_Bfree>
 810ef94:	9805      	ldr	r0, [sp, #20]
 810ef96:	4641      	mov	r1, r8
 810ef98:	f7ff f93a 	bl	810e210 <_Bfree>
 810ef9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810ef9e:	9805      	ldr	r0, [sp, #20]
 810efa0:	f7ff f936 	bl	810e210 <_Bfree>
 810efa4:	9805      	ldr	r0, [sp, #20]
 810efa6:	4621      	mov	r1, r4
 810efa8:	f7ff f932 	bl	810e210 <_Bfree>
 810efac:	e5f9      	b.n	810eba2 <_strtod_l+0x72>
 810efae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810efb0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 810efb4:	4293      	cmp	r3, r2
 810efb6:	dbbc      	blt.n	810ef32 <_strtod_l+0x402>
 810efb8:	4c41      	ldr	r4, [pc, #260]	@ (810f0c0 <_strtod_l+0x590>)
 810efba:	f1c5 050f 	rsb	r5, r5, #15
 810efbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810efc2:	4652      	mov	r2, sl
 810efc4:	465b      	mov	r3, fp
 810efc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 810efca:	f7f1 fb9d 	bl	8100708 <__aeabi_dmul>
 810efce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810efd0:	1b5d      	subs	r5, r3, r5
 810efd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810efd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 810efda:	e78f      	b.n	810eefc <_strtod_l+0x3cc>
 810efdc:	3316      	adds	r3, #22
 810efde:	dba8      	blt.n	810ef32 <_strtod_l+0x402>
 810efe0:	4b37      	ldr	r3, [pc, #220]	@ (810f0c0 <_strtod_l+0x590>)
 810efe2:	eba9 0808 	sub.w	r8, r9, r8
 810efe6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 810efea:	e9d8 2300 	ldrd	r2, r3, [r8]
 810efee:	4650      	mov	r0, sl
 810eff0:	4659      	mov	r1, fp
 810eff2:	f7f1 fcb3 	bl	810095c <__aeabi_ddiv>
 810eff6:	e783      	b.n	810ef00 <_strtod_l+0x3d0>
 810eff8:	4b32      	ldr	r3, [pc, #200]	@ (810f0c4 <_strtod_l+0x594>)
 810effa:	9308      	str	r3, [sp, #32]
 810effc:	2300      	movs	r3, #0
 810effe:	1124      	asrs	r4, r4, #4
 810f000:	4650      	mov	r0, sl
 810f002:	4659      	mov	r1, fp
 810f004:	461e      	mov	r6, r3
 810f006:	2c01      	cmp	r4, #1
 810f008:	dc21      	bgt.n	810f04e <_strtod_l+0x51e>
 810f00a:	b10b      	cbz	r3, 810f010 <_strtod_l+0x4e0>
 810f00c:	4682      	mov	sl, r0
 810f00e:	468b      	mov	fp, r1
 810f010:	492c      	ldr	r1, [pc, #176]	@ (810f0c4 <_strtod_l+0x594>)
 810f012:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 810f016:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 810f01a:	4652      	mov	r2, sl
 810f01c:	465b      	mov	r3, fp
 810f01e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810f022:	f7f1 fb71 	bl	8100708 <__aeabi_dmul>
 810f026:	4b28      	ldr	r3, [pc, #160]	@ (810f0c8 <_strtod_l+0x598>)
 810f028:	460a      	mov	r2, r1
 810f02a:	400b      	ands	r3, r1
 810f02c:	4927      	ldr	r1, [pc, #156]	@ (810f0cc <_strtod_l+0x59c>)
 810f02e:	428b      	cmp	r3, r1
 810f030:	4682      	mov	sl, r0
 810f032:	d898      	bhi.n	810ef66 <_strtod_l+0x436>
 810f034:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 810f038:	428b      	cmp	r3, r1
 810f03a:	bf86      	itte	hi
 810f03c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 810f0d0 <_strtod_l+0x5a0>
 810f040:	f04f 3aff 	movhi.w	sl, #4294967295
 810f044:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 810f048:	2300      	movs	r3, #0
 810f04a:	9308      	str	r3, [sp, #32]
 810f04c:	e07a      	b.n	810f144 <_strtod_l+0x614>
 810f04e:	07e2      	lsls	r2, r4, #31
 810f050:	d505      	bpl.n	810f05e <_strtod_l+0x52e>
 810f052:	9b08      	ldr	r3, [sp, #32]
 810f054:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f058:	f7f1 fb56 	bl	8100708 <__aeabi_dmul>
 810f05c:	2301      	movs	r3, #1
 810f05e:	9a08      	ldr	r2, [sp, #32]
 810f060:	3208      	adds	r2, #8
 810f062:	3601      	adds	r6, #1
 810f064:	1064      	asrs	r4, r4, #1
 810f066:	9208      	str	r2, [sp, #32]
 810f068:	e7cd      	b.n	810f006 <_strtod_l+0x4d6>
 810f06a:	d0ed      	beq.n	810f048 <_strtod_l+0x518>
 810f06c:	4264      	negs	r4, r4
 810f06e:	f014 020f 	ands.w	r2, r4, #15
 810f072:	d00a      	beq.n	810f08a <_strtod_l+0x55a>
 810f074:	4b12      	ldr	r3, [pc, #72]	@ (810f0c0 <_strtod_l+0x590>)
 810f076:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810f07a:	4650      	mov	r0, sl
 810f07c:	4659      	mov	r1, fp
 810f07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f082:	f7f1 fc6b 	bl	810095c <__aeabi_ddiv>
 810f086:	4682      	mov	sl, r0
 810f088:	468b      	mov	fp, r1
 810f08a:	1124      	asrs	r4, r4, #4
 810f08c:	d0dc      	beq.n	810f048 <_strtod_l+0x518>
 810f08e:	2c1f      	cmp	r4, #31
 810f090:	dd20      	ble.n	810f0d4 <_strtod_l+0x5a4>
 810f092:	2400      	movs	r4, #0
 810f094:	46a0      	mov	r8, r4
 810f096:	940a      	str	r4, [sp, #40]	@ 0x28
 810f098:	46a1      	mov	r9, r4
 810f09a:	9a05      	ldr	r2, [sp, #20]
 810f09c:	2322      	movs	r3, #34	@ 0x22
 810f09e:	f04f 0a00 	mov.w	sl, #0
 810f0a2:	f04f 0b00 	mov.w	fp, #0
 810f0a6:	6013      	str	r3, [r2, #0]
 810f0a8:	e768      	b.n	810ef7c <_strtod_l+0x44c>
 810f0aa:	bf00      	nop
 810f0ac:	08111ed1 	.word	0x08111ed1
 810f0b0:	081120e4 	.word	0x081120e4
 810f0b4:	08111ec9 	.word	0x08111ec9
 810f0b8:	08111f00 	.word	0x08111f00
 810f0bc:	0811228d 	.word	0x0811228d
 810f0c0:	08112018 	.word	0x08112018
 810f0c4:	08111ff0 	.word	0x08111ff0
 810f0c8:	7ff00000 	.word	0x7ff00000
 810f0cc:	7ca00000 	.word	0x7ca00000
 810f0d0:	7fefffff 	.word	0x7fefffff
 810f0d4:	f014 0310 	ands.w	r3, r4, #16
 810f0d8:	bf18      	it	ne
 810f0da:	236a      	movne	r3, #106	@ 0x6a
 810f0dc:	4ea9      	ldr	r6, [pc, #676]	@ (810f384 <_strtod_l+0x854>)
 810f0de:	9308      	str	r3, [sp, #32]
 810f0e0:	4650      	mov	r0, sl
 810f0e2:	4659      	mov	r1, fp
 810f0e4:	2300      	movs	r3, #0
 810f0e6:	07e2      	lsls	r2, r4, #31
 810f0e8:	d504      	bpl.n	810f0f4 <_strtod_l+0x5c4>
 810f0ea:	e9d6 2300 	ldrd	r2, r3, [r6]
 810f0ee:	f7f1 fb0b 	bl	8100708 <__aeabi_dmul>
 810f0f2:	2301      	movs	r3, #1
 810f0f4:	1064      	asrs	r4, r4, #1
 810f0f6:	f106 0608 	add.w	r6, r6, #8
 810f0fa:	d1f4      	bne.n	810f0e6 <_strtod_l+0x5b6>
 810f0fc:	b10b      	cbz	r3, 810f102 <_strtod_l+0x5d2>
 810f0fe:	4682      	mov	sl, r0
 810f100:	468b      	mov	fp, r1
 810f102:	9b08      	ldr	r3, [sp, #32]
 810f104:	b1b3      	cbz	r3, 810f134 <_strtod_l+0x604>
 810f106:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810f10a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 810f10e:	2b00      	cmp	r3, #0
 810f110:	4659      	mov	r1, fp
 810f112:	dd0f      	ble.n	810f134 <_strtod_l+0x604>
 810f114:	2b1f      	cmp	r3, #31
 810f116:	dd55      	ble.n	810f1c4 <_strtod_l+0x694>
 810f118:	2b34      	cmp	r3, #52	@ 0x34
 810f11a:	bfde      	ittt	le
 810f11c:	f04f 33ff 	movle.w	r3, #4294967295
 810f120:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 810f124:	4093      	lslle	r3, r2
 810f126:	f04f 0a00 	mov.w	sl, #0
 810f12a:	bfcc      	ite	gt
 810f12c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 810f130:	ea03 0b01 	andle.w	fp, r3, r1
 810f134:	2200      	movs	r2, #0
 810f136:	2300      	movs	r3, #0
 810f138:	4650      	mov	r0, sl
 810f13a:	4659      	mov	r1, fp
 810f13c:	f7f1 fd4c 	bl	8100bd8 <__aeabi_dcmpeq>
 810f140:	2800      	cmp	r0, #0
 810f142:	d1a6      	bne.n	810f092 <_strtod_l+0x562>
 810f144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810f146:	9300      	str	r3, [sp, #0]
 810f148:	990c      	ldr	r1, [sp, #48]	@ 0x30
 810f14a:	9805      	ldr	r0, [sp, #20]
 810f14c:	462b      	mov	r3, r5
 810f14e:	463a      	mov	r2, r7
 810f150:	f7ff f8c6 	bl	810e2e0 <__s2b>
 810f154:	900a      	str	r0, [sp, #40]	@ 0x28
 810f156:	2800      	cmp	r0, #0
 810f158:	f43f af05 	beq.w	810ef66 <_strtod_l+0x436>
 810f15c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810f15e:	2a00      	cmp	r2, #0
 810f160:	eba9 0308 	sub.w	r3, r9, r8
 810f164:	bfa8      	it	ge
 810f166:	2300      	movge	r3, #0
 810f168:	9312      	str	r3, [sp, #72]	@ 0x48
 810f16a:	2400      	movs	r4, #0
 810f16c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 810f170:	9316      	str	r3, [sp, #88]	@ 0x58
 810f172:	46a0      	mov	r8, r4
 810f174:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810f176:	9805      	ldr	r0, [sp, #20]
 810f178:	6859      	ldr	r1, [r3, #4]
 810f17a:	f7ff f809 	bl	810e190 <_Balloc>
 810f17e:	4681      	mov	r9, r0
 810f180:	2800      	cmp	r0, #0
 810f182:	f43f aef4 	beq.w	810ef6e <_strtod_l+0x43e>
 810f186:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810f188:	691a      	ldr	r2, [r3, #16]
 810f18a:	3202      	adds	r2, #2
 810f18c:	f103 010c 	add.w	r1, r3, #12
 810f190:	0092      	lsls	r2, r2, #2
 810f192:	300c      	adds	r0, #12
 810f194:	f7fe f899 	bl	810d2ca <memcpy>
 810f198:	ec4b ab10 	vmov	d0, sl, fp
 810f19c:	9805      	ldr	r0, [sp, #20]
 810f19e:	aa1c      	add	r2, sp, #112	@ 0x70
 810f1a0:	a91b      	add	r1, sp, #108	@ 0x6c
 810f1a2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 810f1a6:	f7ff fbd7 	bl	810e958 <__d2b>
 810f1aa:	901a      	str	r0, [sp, #104]	@ 0x68
 810f1ac:	2800      	cmp	r0, #0
 810f1ae:	f43f aede 	beq.w	810ef6e <_strtod_l+0x43e>
 810f1b2:	9805      	ldr	r0, [sp, #20]
 810f1b4:	2101      	movs	r1, #1
 810f1b6:	f7ff f929 	bl	810e40c <__i2b>
 810f1ba:	4680      	mov	r8, r0
 810f1bc:	b948      	cbnz	r0, 810f1d2 <_strtod_l+0x6a2>
 810f1be:	f04f 0800 	mov.w	r8, #0
 810f1c2:	e6d4      	b.n	810ef6e <_strtod_l+0x43e>
 810f1c4:	f04f 32ff 	mov.w	r2, #4294967295
 810f1c8:	fa02 f303 	lsl.w	r3, r2, r3
 810f1cc:	ea03 0a0a 	and.w	sl, r3, sl
 810f1d0:	e7b0      	b.n	810f134 <_strtod_l+0x604>
 810f1d2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 810f1d4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 810f1d6:	2d00      	cmp	r5, #0
 810f1d8:	bfab      	itete	ge
 810f1da:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 810f1dc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 810f1de:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 810f1e0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 810f1e2:	bfac      	ite	ge
 810f1e4:	18ef      	addge	r7, r5, r3
 810f1e6:	1b5e      	sublt	r6, r3, r5
 810f1e8:	9b08      	ldr	r3, [sp, #32]
 810f1ea:	1aed      	subs	r5, r5, r3
 810f1ec:	4415      	add	r5, r2
 810f1ee:	4b66      	ldr	r3, [pc, #408]	@ (810f388 <_strtod_l+0x858>)
 810f1f0:	3d01      	subs	r5, #1
 810f1f2:	429d      	cmp	r5, r3
 810f1f4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 810f1f8:	da50      	bge.n	810f29c <_strtod_l+0x76c>
 810f1fa:	1b5b      	subs	r3, r3, r5
 810f1fc:	2b1f      	cmp	r3, #31
 810f1fe:	eba2 0203 	sub.w	r2, r2, r3
 810f202:	f04f 0101 	mov.w	r1, #1
 810f206:	dc3d      	bgt.n	810f284 <_strtod_l+0x754>
 810f208:	fa01 f303 	lsl.w	r3, r1, r3
 810f20c:	9313      	str	r3, [sp, #76]	@ 0x4c
 810f20e:	2300      	movs	r3, #0
 810f210:	9310      	str	r3, [sp, #64]	@ 0x40
 810f212:	18bd      	adds	r5, r7, r2
 810f214:	9b08      	ldr	r3, [sp, #32]
 810f216:	42af      	cmp	r7, r5
 810f218:	4416      	add	r6, r2
 810f21a:	441e      	add	r6, r3
 810f21c:	463b      	mov	r3, r7
 810f21e:	bfa8      	it	ge
 810f220:	462b      	movge	r3, r5
 810f222:	42b3      	cmp	r3, r6
 810f224:	bfa8      	it	ge
 810f226:	4633      	movge	r3, r6
 810f228:	2b00      	cmp	r3, #0
 810f22a:	bfc2      	ittt	gt
 810f22c:	1aed      	subgt	r5, r5, r3
 810f22e:	1af6      	subgt	r6, r6, r3
 810f230:	1aff      	subgt	r7, r7, r3
 810f232:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810f234:	2b00      	cmp	r3, #0
 810f236:	dd16      	ble.n	810f266 <_strtod_l+0x736>
 810f238:	4641      	mov	r1, r8
 810f23a:	9805      	ldr	r0, [sp, #20]
 810f23c:	461a      	mov	r2, r3
 810f23e:	f7ff f9a5 	bl	810e58c <__pow5mult>
 810f242:	4680      	mov	r8, r0
 810f244:	2800      	cmp	r0, #0
 810f246:	d0ba      	beq.n	810f1be <_strtod_l+0x68e>
 810f248:	4601      	mov	r1, r0
 810f24a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 810f24c:	9805      	ldr	r0, [sp, #20]
 810f24e:	f7ff f8f3 	bl	810e438 <__multiply>
 810f252:	900e      	str	r0, [sp, #56]	@ 0x38
 810f254:	2800      	cmp	r0, #0
 810f256:	f43f ae8a 	beq.w	810ef6e <_strtod_l+0x43e>
 810f25a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810f25c:	9805      	ldr	r0, [sp, #20]
 810f25e:	f7fe ffd7 	bl	810e210 <_Bfree>
 810f262:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810f264:	931a      	str	r3, [sp, #104]	@ 0x68
 810f266:	2d00      	cmp	r5, #0
 810f268:	dc1d      	bgt.n	810f2a6 <_strtod_l+0x776>
 810f26a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f26c:	2b00      	cmp	r3, #0
 810f26e:	dd23      	ble.n	810f2b8 <_strtod_l+0x788>
 810f270:	4649      	mov	r1, r9
 810f272:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 810f274:	9805      	ldr	r0, [sp, #20]
 810f276:	f7ff f989 	bl	810e58c <__pow5mult>
 810f27a:	4681      	mov	r9, r0
 810f27c:	b9e0      	cbnz	r0, 810f2b8 <_strtod_l+0x788>
 810f27e:	f04f 0900 	mov.w	r9, #0
 810f282:	e674      	b.n	810ef6e <_strtod_l+0x43e>
 810f284:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 810f288:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 810f28c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 810f290:	35e2      	adds	r5, #226	@ 0xe2
 810f292:	fa01 f305 	lsl.w	r3, r1, r5
 810f296:	9310      	str	r3, [sp, #64]	@ 0x40
 810f298:	9113      	str	r1, [sp, #76]	@ 0x4c
 810f29a:	e7ba      	b.n	810f212 <_strtod_l+0x6e2>
 810f29c:	2300      	movs	r3, #0
 810f29e:	9310      	str	r3, [sp, #64]	@ 0x40
 810f2a0:	2301      	movs	r3, #1
 810f2a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 810f2a4:	e7b5      	b.n	810f212 <_strtod_l+0x6e2>
 810f2a6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810f2a8:	9805      	ldr	r0, [sp, #20]
 810f2aa:	462a      	mov	r2, r5
 810f2ac:	f7ff f9c8 	bl	810e640 <__lshift>
 810f2b0:	901a      	str	r0, [sp, #104]	@ 0x68
 810f2b2:	2800      	cmp	r0, #0
 810f2b4:	d1d9      	bne.n	810f26a <_strtod_l+0x73a>
 810f2b6:	e65a      	b.n	810ef6e <_strtod_l+0x43e>
 810f2b8:	2e00      	cmp	r6, #0
 810f2ba:	dd07      	ble.n	810f2cc <_strtod_l+0x79c>
 810f2bc:	4649      	mov	r1, r9
 810f2be:	9805      	ldr	r0, [sp, #20]
 810f2c0:	4632      	mov	r2, r6
 810f2c2:	f7ff f9bd 	bl	810e640 <__lshift>
 810f2c6:	4681      	mov	r9, r0
 810f2c8:	2800      	cmp	r0, #0
 810f2ca:	d0d8      	beq.n	810f27e <_strtod_l+0x74e>
 810f2cc:	2f00      	cmp	r7, #0
 810f2ce:	dd08      	ble.n	810f2e2 <_strtod_l+0x7b2>
 810f2d0:	4641      	mov	r1, r8
 810f2d2:	9805      	ldr	r0, [sp, #20]
 810f2d4:	463a      	mov	r2, r7
 810f2d6:	f7ff f9b3 	bl	810e640 <__lshift>
 810f2da:	4680      	mov	r8, r0
 810f2dc:	2800      	cmp	r0, #0
 810f2de:	f43f ae46 	beq.w	810ef6e <_strtod_l+0x43e>
 810f2e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810f2e4:	9805      	ldr	r0, [sp, #20]
 810f2e6:	464a      	mov	r2, r9
 810f2e8:	f7ff fa32 	bl	810e750 <__mdiff>
 810f2ec:	4604      	mov	r4, r0
 810f2ee:	2800      	cmp	r0, #0
 810f2f0:	f43f ae3d 	beq.w	810ef6e <_strtod_l+0x43e>
 810f2f4:	68c3      	ldr	r3, [r0, #12]
 810f2f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 810f2f8:	2300      	movs	r3, #0
 810f2fa:	60c3      	str	r3, [r0, #12]
 810f2fc:	4641      	mov	r1, r8
 810f2fe:	f7ff fa0b 	bl	810e718 <__mcmp>
 810f302:	2800      	cmp	r0, #0
 810f304:	da46      	bge.n	810f394 <_strtod_l+0x864>
 810f306:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810f308:	ea53 030a 	orrs.w	r3, r3, sl
 810f30c:	d16c      	bne.n	810f3e8 <_strtod_l+0x8b8>
 810f30e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810f312:	2b00      	cmp	r3, #0
 810f314:	d168      	bne.n	810f3e8 <_strtod_l+0x8b8>
 810f316:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810f31a:	0d1b      	lsrs	r3, r3, #20
 810f31c:	051b      	lsls	r3, r3, #20
 810f31e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 810f322:	d961      	bls.n	810f3e8 <_strtod_l+0x8b8>
 810f324:	6963      	ldr	r3, [r4, #20]
 810f326:	b913      	cbnz	r3, 810f32e <_strtod_l+0x7fe>
 810f328:	6923      	ldr	r3, [r4, #16]
 810f32a:	2b01      	cmp	r3, #1
 810f32c:	dd5c      	ble.n	810f3e8 <_strtod_l+0x8b8>
 810f32e:	4621      	mov	r1, r4
 810f330:	2201      	movs	r2, #1
 810f332:	9805      	ldr	r0, [sp, #20]
 810f334:	f7ff f984 	bl	810e640 <__lshift>
 810f338:	4641      	mov	r1, r8
 810f33a:	4604      	mov	r4, r0
 810f33c:	f7ff f9ec 	bl	810e718 <__mcmp>
 810f340:	2800      	cmp	r0, #0
 810f342:	dd51      	ble.n	810f3e8 <_strtod_l+0x8b8>
 810f344:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810f348:	9a08      	ldr	r2, [sp, #32]
 810f34a:	0d1b      	lsrs	r3, r3, #20
 810f34c:	051b      	lsls	r3, r3, #20
 810f34e:	2a00      	cmp	r2, #0
 810f350:	d06b      	beq.n	810f42a <_strtod_l+0x8fa>
 810f352:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 810f356:	d868      	bhi.n	810f42a <_strtod_l+0x8fa>
 810f358:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 810f35c:	f67f ae9d 	bls.w	810f09a <_strtod_l+0x56a>
 810f360:	4b0a      	ldr	r3, [pc, #40]	@ (810f38c <_strtod_l+0x85c>)
 810f362:	4650      	mov	r0, sl
 810f364:	4659      	mov	r1, fp
 810f366:	2200      	movs	r2, #0
 810f368:	f7f1 f9ce 	bl	8100708 <__aeabi_dmul>
 810f36c:	4b08      	ldr	r3, [pc, #32]	@ (810f390 <_strtod_l+0x860>)
 810f36e:	400b      	ands	r3, r1
 810f370:	4682      	mov	sl, r0
 810f372:	468b      	mov	fp, r1
 810f374:	2b00      	cmp	r3, #0
 810f376:	f47f ae05 	bne.w	810ef84 <_strtod_l+0x454>
 810f37a:	9a05      	ldr	r2, [sp, #20]
 810f37c:	2322      	movs	r3, #34	@ 0x22
 810f37e:	6013      	str	r3, [r2, #0]
 810f380:	e600      	b.n	810ef84 <_strtod_l+0x454>
 810f382:	bf00      	nop
 810f384:	08112110 	.word	0x08112110
 810f388:	fffffc02 	.word	0xfffffc02
 810f38c:	39500000 	.word	0x39500000
 810f390:	7ff00000 	.word	0x7ff00000
 810f394:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 810f398:	d165      	bne.n	810f466 <_strtod_l+0x936>
 810f39a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 810f39c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810f3a0:	b35a      	cbz	r2, 810f3fa <_strtod_l+0x8ca>
 810f3a2:	4a9f      	ldr	r2, [pc, #636]	@ (810f620 <_strtod_l+0xaf0>)
 810f3a4:	4293      	cmp	r3, r2
 810f3a6:	d12b      	bne.n	810f400 <_strtod_l+0x8d0>
 810f3a8:	9b08      	ldr	r3, [sp, #32]
 810f3aa:	4651      	mov	r1, sl
 810f3ac:	b303      	cbz	r3, 810f3f0 <_strtod_l+0x8c0>
 810f3ae:	4b9d      	ldr	r3, [pc, #628]	@ (810f624 <_strtod_l+0xaf4>)
 810f3b0:	465a      	mov	r2, fp
 810f3b2:	4013      	ands	r3, r2
 810f3b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 810f3b8:	f04f 32ff 	mov.w	r2, #4294967295
 810f3bc:	d81b      	bhi.n	810f3f6 <_strtod_l+0x8c6>
 810f3be:	0d1b      	lsrs	r3, r3, #20
 810f3c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 810f3c4:	fa02 f303 	lsl.w	r3, r2, r3
 810f3c8:	4299      	cmp	r1, r3
 810f3ca:	d119      	bne.n	810f400 <_strtod_l+0x8d0>
 810f3cc:	4b96      	ldr	r3, [pc, #600]	@ (810f628 <_strtod_l+0xaf8>)
 810f3ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810f3d0:	429a      	cmp	r2, r3
 810f3d2:	d102      	bne.n	810f3da <_strtod_l+0x8aa>
 810f3d4:	3101      	adds	r1, #1
 810f3d6:	f43f adca 	beq.w	810ef6e <_strtod_l+0x43e>
 810f3da:	4b92      	ldr	r3, [pc, #584]	@ (810f624 <_strtod_l+0xaf4>)
 810f3dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810f3de:	401a      	ands	r2, r3
 810f3e0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 810f3e4:	f04f 0a00 	mov.w	sl, #0
 810f3e8:	9b08      	ldr	r3, [sp, #32]
 810f3ea:	2b00      	cmp	r3, #0
 810f3ec:	d1b8      	bne.n	810f360 <_strtod_l+0x830>
 810f3ee:	e5c9      	b.n	810ef84 <_strtod_l+0x454>
 810f3f0:	f04f 33ff 	mov.w	r3, #4294967295
 810f3f4:	e7e8      	b.n	810f3c8 <_strtod_l+0x898>
 810f3f6:	4613      	mov	r3, r2
 810f3f8:	e7e6      	b.n	810f3c8 <_strtod_l+0x898>
 810f3fa:	ea53 030a 	orrs.w	r3, r3, sl
 810f3fe:	d0a1      	beq.n	810f344 <_strtod_l+0x814>
 810f400:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 810f402:	b1db      	cbz	r3, 810f43c <_strtod_l+0x90c>
 810f404:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810f406:	4213      	tst	r3, r2
 810f408:	d0ee      	beq.n	810f3e8 <_strtod_l+0x8b8>
 810f40a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810f40c:	9a08      	ldr	r2, [sp, #32]
 810f40e:	4650      	mov	r0, sl
 810f410:	4659      	mov	r1, fp
 810f412:	b1bb      	cbz	r3, 810f444 <_strtod_l+0x914>
 810f414:	f7ff fb6e 	bl	810eaf4 <sulp>
 810f418:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810f41c:	ec53 2b10 	vmov	r2, r3, d0
 810f420:	f7f0 ffbc 	bl	810039c <__adddf3>
 810f424:	4682      	mov	sl, r0
 810f426:	468b      	mov	fp, r1
 810f428:	e7de      	b.n	810f3e8 <_strtod_l+0x8b8>
 810f42a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 810f42e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810f432:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810f436:	f04f 3aff 	mov.w	sl, #4294967295
 810f43a:	e7d5      	b.n	810f3e8 <_strtod_l+0x8b8>
 810f43c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810f43e:	ea13 0f0a 	tst.w	r3, sl
 810f442:	e7e1      	b.n	810f408 <_strtod_l+0x8d8>
 810f444:	f7ff fb56 	bl	810eaf4 <sulp>
 810f448:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810f44c:	ec53 2b10 	vmov	r2, r3, d0
 810f450:	f7f0 ffa2 	bl	8100398 <__aeabi_dsub>
 810f454:	2200      	movs	r2, #0
 810f456:	2300      	movs	r3, #0
 810f458:	4682      	mov	sl, r0
 810f45a:	468b      	mov	fp, r1
 810f45c:	f7f1 fbbc 	bl	8100bd8 <__aeabi_dcmpeq>
 810f460:	2800      	cmp	r0, #0
 810f462:	d0c1      	beq.n	810f3e8 <_strtod_l+0x8b8>
 810f464:	e619      	b.n	810f09a <_strtod_l+0x56a>
 810f466:	4641      	mov	r1, r8
 810f468:	4620      	mov	r0, r4
 810f46a:	f7ff facd 	bl	810ea08 <__ratio>
 810f46e:	ec57 6b10 	vmov	r6, r7, d0
 810f472:	2200      	movs	r2, #0
 810f474:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 810f478:	4630      	mov	r0, r6
 810f47a:	4639      	mov	r1, r7
 810f47c:	f7f1 fbc0 	bl	8100c00 <__aeabi_dcmple>
 810f480:	2800      	cmp	r0, #0
 810f482:	d06f      	beq.n	810f564 <_strtod_l+0xa34>
 810f484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810f486:	2b00      	cmp	r3, #0
 810f488:	d17a      	bne.n	810f580 <_strtod_l+0xa50>
 810f48a:	f1ba 0f00 	cmp.w	sl, #0
 810f48e:	d158      	bne.n	810f542 <_strtod_l+0xa12>
 810f490:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810f492:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810f496:	2b00      	cmp	r3, #0
 810f498:	d15a      	bne.n	810f550 <_strtod_l+0xa20>
 810f49a:	4b64      	ldr	r3, [pc, #400]	@ (810f62c <_strtod_l+0xafc>)
 810f49c:	2200      	movs	r2, #0
 810f49e:	4630      	mov	r0, r6
 810f4a0:	4639      	mov	r1, r7
 810f4a2:	f7f1 fba3 	bl	8100bec <__aeabi_dcmplt>
 810f4a6:	2800      	cmp	r0, #0
 810f4a8:	d159      	bne.n	810f55e <_strtod_l+0xa2e>
 810f4aa:	4630      	mov	r0, r6
 810f4ac:	4639      	mov	r1, r7
 810f4ae:	4b60      	ldr	r3, [pc, #384]	@ (810f630 <_strtod_l+0xb00>)
 810f4b0:	2200      	movs	r2, #0
 810f4b2:	f7f1 f929 	bl	8100708 <__aeabi_dmul>
 810f4b6:	4606      	mov	r6, r0
 810f4b8:	460f      	mov	r7, r1
 810f4ba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 810f4be:	9606      	str	r6, [sp, #24]
 810f4c0:	9307      	str	r3, [sp, #28]
 810f4c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810f4c6:	4d57      	ldr	r5, [pc, #348]	@ (810f624 <_strtod_l+0xaf4>)
 810f4c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 810f4cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810f4ce:	401d      	ands	r5, r3
 810f4d0:	4b58      	ldr	r3, [pc, #352]	@ (810f634 <_strtod_l+0xb04>)
 810f4d2:	429d      	cmp	r5, r3
 810f4d4:	f040 80b2 	bne.w	810f63c <_strtod_l+0xb0c>
 810f4d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810f4da:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 810f4de:	ec4b ab10 	vmov	d0, sl, fp
 810f4e2:	f7ff f9c9 	bl	810e878 <__ulp>
 810f4e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810f4ea:	ec51 0b10 	vmov	r0, r1, d0
 810f4ee:	f7f1 f90b 	bl	8100708 <__aeabi_dmul>
 810f4f2:	4652      	mov	r2, sl
 810f4f4:	465b      	mov	r3, fp
 810f4f6:	f7f0 ff51 	bl	810039c <__adddf3>
 810f4fa:	460b      	mov	r3, r1
 810f4fc:	4949      	ldr	r1, [pc, #292]	@ (810f624 <_strtod_l+0xaf4>)
 810f4fe:	4a4e      	ldr	r2, [pc, #312]	@ (810f638 <_strtod_l+0xb08>)
 810f500:	4019      	ands	r1, r3
 810f502:	4291      	cmp	r1, r2
 810f504:	4682      	mov	sl, r0
 810f506:	d942      	bls.n	810f58e <_strtod_l+0xa5e>
 810f508:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 810f50a:	4b47      	ldr	r3, [pc, #284]	@ (810f628 <_strtod_l+0xaf8>)
 810f50c:	429a      	cmp	r2, r3
 810f50e:	d103      	bne.n	810f518 <_strtod_l+0x9e8>
 810f510:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 810f512:	3301      	adds	r3, #1
 810f514:	f43f ad2b 	beq.w	810ef6e <_strtod_l+0x43e>
 810f518:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 810f628 <_strtod_l+0xaf8>
 810f51c:	f04f 3aff 	mov.w	sl, #4294967295
 810f520:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810f522:	9805      	ldr	r0, [sp, #20]
 810f524:	f7fe fe74 	bl	810e210 <_Bfree>
 810f528:	9805      	ldr	r0, [sp, #20]
 810f52a:	4649      	mov	r1, r9
 810f52c:	f7fe fe70 	bl	810e210 <_Bfree>
 810f530:	9805      	ldr	r0, [sp, #20]
 810f532:	4641      	mov	r1, r8
 810f534:	f7fe fe6c 	bl	810e210 <_Bfree>
 810f538:	9805      	ldr	r0, [sp, #20]
 810f53a:	4621      	mov	r1, r4
 810f53c:	f7fe fe68 	bl	810e210 <_Bfree>
 810f540:	e618      	b.n	810f174 <_strtod_l+0x644>
 810f542:	f1ba 0f01 	cmp.w	sl, #1
 810f546:	d103      	bne.n	810f550 <_strtod_l+0xa20>
 810f548:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810f54a:	2b00      	cmp	r3, #0
 810f54c:	f43f ada5 	beq.w	810f09a <_strtod_l+0x56a>
 810f550:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 810f600 <_strtod_l+0xad0>
 810f554:	4f35      	ldr	r7, [pc, #212]	@ (810f62c <_strtod_l+0xafc>)
 810f556:	ed8d 7b06 	vstr	d7, [sp, #24]
 810f55a:	2600      	movs	r6, #0
 810f55c:	e7b1      	b.n	810f4c2 <_strtod_l+0x992>
 810f55e:	4f34      	ldr	r7, [pc, #208]	@ (810f630 <_strtod_l+0xb00>)
 810f560:	2600      	movs	r6, #0
 810f562:	e7aa      	b.n	810f4ba <_strtod_l+0x98a>
 810f564:	4b32      	ldr	r3, [pc, #200]	@ (810f630 <_strtod_l+0xb00>)
 810f566:	4630      	mov	r0, r6
 810f568:	4639      	mov	r1, r7
 810f56a:	2200      	movs	r2, #0
 810f56c:	f7f1 f8cc 	bl	8100708 <__aeabi_dmul>
 810f570:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810f572:	4606      	mov	r6, r0
 810f574:	460f      	mov	r7, r1
 810f576:	2b00      	cmp	r3, #0
 810f578:	d09f      	beq.n	810f4ba <_strtod_l+0x98a>
 810f57a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 810f57e:	e7a0      	b.n	810f4c2 <_strtod_l+0x992>
 810f580:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 810f608 <_strtod_l+0xad8>
 810f584:	ed8d 7b06 	vstr	d7, [sp, #24]
 810f588:	ec57 6b17 	vmov	r6, r7, d7
 810f58c:	e799      	b.n	810f4c2 <_strtod_l+0x992>
 810f58e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 810f592:	9b08      	ldr	r3, [sp, #32]
 810f594:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 810f598:	2b00      	cmp	r3, #0
 810f59a:	d1c1      	bne.n	810f520 <_strtod_l+0x9f0>
 810f59c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810f5a0:	0d1b      	lsrs	r3, r3, #20
 810f5a2:	051b      	lsls	r3, r3, #20
 810f5a4:	429d      	cmp	r5, r3
 810f5a6:	d1bb      	bne.n	810f520 <_strtod_l+0x9f0>
 810f5a8:	4630      	mov	r0, r6
 810f5aa:	4639      	mov	r1, r7
 810f5ac:	f7f1 fc0c 	bl	8100dc8 <__aeabi_d2lz>
 810f5b0:	f7f1 f87c 	bl	81006ac <__aeabi_l2d>
 810f5b4:	4602      	mov	r2, r0
 810f5b6:	460b      	mov	r3, r1
 810f5b8:	4630      	mov	r0, r6
 810f5ba:	4639      	mov	r1, r7
 810f5bc:	f7f0 feec 	bl	8100398 <__aeabi_dsub>
 810f5c0:	460b      	mov	r3, r1
 810f5c2:	4602      	mov	r2, r0
 810f5c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 810f5c8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 810f5cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810f5ce:	ea46 060a 	orr.w	r6, r6, sl
 810f5d2:	431e      	orrs	r6, r3
 810f5d4:	d06f      	beq.n	810f6b6 <_strtod_l+0xb86>
 810f5d6:	a30e      	add	r3, pc, #56	@ (adr r3, 810f610 <_strtod_l+0xae0>)
 810f5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f5dc:	f7f1 fb06 	bl	8100bec <__aeabi_dcmplt>
 810f5e0:	2800      	cmp	r0, #0
 810f5e2:	f47f accf 	bne.w	810ef84 <_strtod_l+0x454>
 810f5e6:	a30c      	add	r3, pc, #48	@ (adr r3, 810f618 <_strtod_l+0xae8>)
 810f5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f5ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810f5f0:	f7f1 fb1a 	bl	8100c28 <__aeabi_dcmpgt>
 810f5f4:	2800      	cmp	r0, #0
 810f5f6:	d093      	beq.n	810f520 <_strtod_l+0x9f0>
 810f5f8:	e4c4      	b.n	810ef84 <_strtod_l+0x454>
 810f5fa:	bf00      	nop
 810f5fc:	f3af 8000 	nop.w
 810f600:	00000000 	.word	0x00000000
 810f604:	bff00000 	.word	0xbff00000
 810f608:	00000000 	.word	0x00000000
 810f60c:	3ff00000 	.word	0x3ff00000
 810f610:	94a03595 	.word	0x94a03595
 810f614:	3fdfffff 	.word	0x3fdfffff
 810f618:	35afe535 	.word	0x35afe535
 810f61c:	3fe00000 	.word	0x3fe00000
 810f620:	000fffff 	.word	0x000fffff
 810f624:	7ff00000 	.word	0x7ff00000
 810f628:	7fefffff 	.word	0x7fefffff
 810f62c:	3ff00000 	.word	0x3ff00000
 810f630:	3fe00000 	.word	0x3fe00000
 810f634:	7fe00000 	.word	0x7fe00000
 810f638:	7c9fffff 	.word	0x7c9fffff
 810f63c:	9b08      	ldr	r3, [sp, #32]
 810f63e:	b323      	cbz	r3, 810f68a <_strtod_l+0xb5a>
 810f640:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 810f644:	d821      	bhi.n	810f68a <_strtod_l+0xb5a>
 810f646:	a328      	add	r3, pc, #160	@ (adr r3, 810f6e8 <_strtod_l+0xbb8>)
 810f648:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f64c:	4630      	mov	r0, r6
 810f64e:	4639      	mov	r1, r7
 810f650:	f7f1 fad6 	bl	8100c00 <__aeabi_dcmple>
 810f654:	b1a0      	cbz	r0, 810f680 <_strtod_l+0xb50>
 810f656:	4639      	mov	r1, r7
 810f658:	4630      	mov	r0, r6
 810f65a:	f7f1 fb2d 	bl	8100cb8 <__aeabi_d2uiz>
 810f65e:	2801      	cmp	r0, #1
 810f660:	bf38      	it	cc
 810f662:	2001      	movcc	r0, #1
 810f664:	f7f0 ffd6 	bl	8100614 <__aeabi_ui2d>
 810f668:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810f66a:	4606      	mov	r6, r0
 810f66c:	460f      	mov	r7, r1
 810f66e:	b9fb      	cbnz	r3, 810f6b0 <_strtod_l+0xb80>
 810f670:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 810f674:	9014      	str	r0, [sp, #80]	@ 0x50
 810f676:	9315      	str	r3, [sp, #84]	@ 0x54
 810f678:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 810f67c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 810f680:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 810f682:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 810f686:	1b5b      	subs	r3, r3, r5
 810f688:	9311      	str	r3, [sp, #68]	@ 0x44
 810f68a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 810f68e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 810f692:	f7ff f8f1 	bl	810e878 <__ulp>
 810f696:	4650      	mov	r0, sl
 810f698:	ec53 2b10 	vmov	r2, r3, d0
 810f69c:	4659      	mov	r1, fp
 810f69e:	f7f1 f833 	bl	8100708 <__aeabi_dmul>
 810f6a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 810f6a6:	f7f0 fe79 	bl	810039c <__adddf3>
 810f6aa:	4682      	mov	sl, r0
 810f6ac:	468b      	mov	fp, r1
 810f6ae:	e770      	b.n	810f592 <_strtod_l+0xa62>
 810f6b0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 810f6b4:	e7e0      	b.n	810f678 <_strtod_l+0xb48>
 810f6b6:	a30e      	add	r3, pc, #56	@ (adr r3, 810f6f0 <_strtod_l+0xbc0>)
 810f6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f6bc:	f7f1 fa96 	bl	8100bec <__aeabi_dcmplt>
 810f6c0:	e798      	b.n	810f5f4 <_strtod_l+0xac4>
 810f6c2:	2300      	movs	r3, #0
 810f6c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 810f6c6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 810f6c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810f6ca:	6013      	str	r3, [r2, #0]
 810f6cc:	f7ff ba6d 	b.w	810ebaa <_strtod_l+0x7a>
 810f6d0:	2a65      	cmp	r2, #101	@ 0x65
 810f6d2:	f43f ab66 	beq.w	810eda2 <_strtod_l+0x272>
 810f6d6:	2a45      	cmp	r2, #69	@ 0x45
 810f6d8:	f43f ab63 	beq.w	810eda2 <_strtod_l+0x272>
 810f6dc:	2301      	movs	r3, #1
 810f6de:	f7ff bb9e 	b.w	810ee1e <_strtod_l+0x2ee>
 810f6e2:	bf00      	nop
 810f6e4:	f3af 8000 	nop.w
 810f6e8:	ffc00000 	.word	0xffc00000
 810f6ec:	41dfffff 	.word	0x41dfffff
 810f6f0:	94a03595 	.word	0x94a03595
 810f6f4:	3fcfffff 	.word	0x3fcfffff

0810f6f8 <_strtod_r>:
 810f6f8:	4b01      	ldr	r3, [pc, #4]	@ (810f700 <_strtod_r+0x8>)
 810f6fa:	f7ff ba19 	b.w	810eb30 <_strtod_l>
 810f6fe:	bf00      	nop
 810f700:	100000e4 	.word	0x100000e4

0810f704 <_strtol_l.constprop.0>:
 810f704:	2b24      	cmp	r3, #36	@ 0x24
 810f706:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810f70a:	4686      	mov	lr, r0
 810f70c:	4690      	mov	r8, r2
 810f70e:	d801      	bhi.n	810f714 <_strtol_l.constprop.0+0x10>
 810f710:	2b01      	cmp	r3, #1
 810f712:	d106      	bne.n	810f722 <_strtol_l.constprop.0+0x1e>
 810f714:	f7fd fdac 	bl	810d270 <__errno>
 810f718:	2316      	movs	r3, #22
 810f71a:	6003      	str	r3, [r0, #0]
 810f71c:	2000      	movs	r0, #0
 810f71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f722:	4834      	ldr	r0, [pc, #208]	@ (810f7f4 <_strtol_l.constprop.0+0xf0>)
 810f724:	460d      	mov	r5, r1
 810f726:	462a      	mov	r2, r5
 810f728:	f815 4b01 	ldrb.w	r4, [r5], #1
 810f72c:	5d06      	ldrb	r6, [r0, r4]
 810f72e:	f016 0608 	ands.w	r6, r6, #8
 810f732:	d1f8      	bne.n	810f726 <_strtol_l.constprop.0+0x22>
 810f734:	2c2d      	cmp	r4, #45	@ 0x2d
 810f736:	d12d      	bne.n	810f794 <_strtol_l.constprop.0+0x90>
 810f738:	782c      	ldrb	r4, [r5, #0]
 810f73a:	2601      	movs	r6, #1
 810f73c:	1c95      	adds	r5, r2, #2
 810f73e:	f033 0210 	bics.w	r2, r3, #16
 810f742:	d109      	bne.n	810f758 <_strtol_l.constprop.0+0x54>
 810f744:	2c30      	cmp	r4, #48	@ 0x30
 810f746:	d12a      	bne.n	810f79e <_strtol_l.constprop.0+0x9a>
 810f748:	782a      	ldrb	r2, [r5, #0]
 810f74a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 810f74e:	2a58      	cmp	r2, #88	@ 0x58
 810f750:	d125      	bne.n	810f79e <_strtol_l.constprop.0+0x9a>
 810f752:	786c      	ldrb	r4, [r5, #1]
 810f754:	2310      	movs	r3, #16
 810f756:	3502      	adds	r5, #2
 810f758:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 810f75c:	f10c 3cff 	add.w	ip, ip, #4294967295
 810f760:	2200      	movs	r2, #0
 810f762:	fbbc f9f3 	udiv	r9, ip, r3
 810f766:	4610      	mov	r0, r2
 810f768:	fb03 ca19 	mls	sl, r3, r9, ip
 810f76c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 810f770:	2f09      	cmp	r7, #9
 810f772:	d81b      	bhi.n	810f7ac <_strtol_l.constprop.0+0xa8>
 810f774:	463c      	mov	r4, r7
 810f776:	42a3      	cmp	r3, r4
 810f778:	dd27      	ble.n	810f7ca <_strtol_l.constprop.0+0xc6>
 810f77a:	1c57      	adds	r7, r2, #1
 810f77c:	d007      	beq.n	810f78e <_strtol_l.constprop.0+0x8a>
 810f77e:	4581      	cmp	r9, r0
 810f780:	d320      	bcc.n	810f7c4 <_strtol_l.constprop.0+0xc0>
 810f782:	d101      	bne.n	810f788 <_strtol_l.constprop.0+0x84>
 810f784:	45a2      	cmp	sl, r4
 810f786:	db1d      	blt.n	810f7c4 <_strtol_l.constprop.0+0xc0>
 810f788:	fb00 4003 	mla	r0, r0, r3, r4
 810f78c:	2201      	movs	r2, #1
 810f78e:	f815 4b01 	ldrb.w	r4, [r5], #1
 810f792:	e7eb      	b.n	810f76c <_strtol_l.constprop.0+0x68>
 810f794:	2c2b      	cmp	r4, #43	@ 0x2b
 810f796:	bf04      	itt	eq
 810f798:	782c      	ldrbeq	r4, [r5, #0]
 810f79a:	1c95      	addeq	r5, r2, #2
 810f79c:	e7cf      	b.n	810f73e <_strtol_l.constprop.0+0x3a>
 810f79e:	2b00      	cmp	r3, #0
 810f7a0:	d1da      	bne.n	810f758 <_strtol_l.constprop.0+0x54>
 810f7a2:	2c30      	cmp	r4, #48	@ 0x30
 810f7a4:	bf0c      	ite	eq
 810f7a6:	2308      	moveq	r3, #8
 810f7a8:	230a      	movne	r3, #10
 810f7aa:	e7d5      	b.n	810f758 <_strtol_l.constprop.0+0x54>
 810f7ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 810f7b0:	2f19      	cmp	r7, #25
 810f7b2:	d801      	bhi.n	810f7b8 <_strtol_l.constprop.0+0xb4>
 810f7b4:	3c37      	subs	r4, #55	@ 0x37
 810f7b6:	e7de      	b.n	810f776 <_strtol_l.constprop.0+0x72>
 810f7b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 810f7bc:	2f19      	cmp	r7, #25
 810f7be:	d804      	bhi.n	810f7ca <_strtol_l.constprop.0+0xc6>
 810f7c0:	3c57      	subs	r4, #87	@ 0x57
 810f7c2:	e7d8      	b.n	810f776 <_strtol_l.constprop.0+0x72>
 810f7c4:	f04f 32ff 	mov.w	r2, #4294967295
 810f7c8:	e7e1      	b.n	810f78e <_strtol_l.constprop.0+0x8a>
 810f7ca:	1c53      	adds	r3, r2, #1
 810f7cc:	d108      	bne.n	810f7e0 <_strtol_l.constprop.0+0xdc>
 810f7ce:	2322      	movs	r3, #34	@ 0x22
 810f7d0:	f8ce 3000 	str.w	r3, [lr]
 810f7d4:	4660      	mov	r0, ip
 810f7d6:	f1b8 0f00 	cmp.w	r8, #0
 810f7da:	d0a0      	beq.n	810f71e <_strtol_l.constprop.0+0x1a>
 810f7dc:	1e69      	subs	r1, r5, #1
 810f7de:	e006      	b.n	810f7ee <_strtol_l.constprop.0+0xea>
 810f7e0:	b106      	cbz	r6, 810f7e4 <_strtol_l.constprop.0+0xe0>
 810f7e2:	4240      	negs	r0, r0
 810f7e4:	f1b8 0f00 	cmp.w	r8, #0
 810f7e8:	d099      	beq.n	810f71e <_strtol_l.constprop.0+0x1a>
 810f7ea:	2a00      	cmp	r2, #0
 810f7ec:	d1f6      	bne.n	810f7dc <_strtol_l.constprop.0+0xd8>
 810f7ee:	f8c8 1000 	str.w	r1, [r8]
 810f7f2:	e794      	b.n	810f71e <_strtol_l.constprop.0+0x1a>
 810f7f4:	08112139 	.word	0x08112139

0810f7f8 <_strtol_r>:
 810f7f8:	f7ff bf84 	b.w	810f704 <_strtol_l.constprop.0>

0810f7fc <__ssputs_r>:
 810f7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810f800:	688e      	ldr	r6, [r1, #8]
 810f802:	461f      	mov	r7, r3
 810f804:	42be      	cmp	r6, r7
 810f806:	680b      	ldr	r3, [r1, #0]
 810f808:	4682      	mov	sl, r0
 810f80a:	460c      	mov	r4, r1
 810f80c:	4690      	mov	r8, r2
 810f80e:	d82d      	bhi.n	810f86c <__ssputs_r+0x70>
 810f810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810f814:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 810f818:	d026      	beq.n	810f868 <__ssputs_r+0x6c>
 810f81a:	6965      	ldr	r5, [r4, #20]
 810f81c:	6909      	ldr	r1, [r1, #16]
 810f81e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810f822:	eba3 0901 	sub.w	r9, r3, r1
 810f826:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810f82a:	1c7b      	adds	r3, r7, #1
 810f82c:	444b      	add	r3, r9
 810f82e:	106d      	asrs	r5, r5, #1
 810f830:	429d      	cmp	r5, r3
 810f832:	bf38      	it	cc
 810f834:	461d      	movcc	r5, r3
 810f836:	0553      	lsls	r3, r2, #21
 810f838:	d527      	bpl.n	810f88a <__ssputs_r+0x8e>
 810f83a:	4629      	mov	r1, r5
 810f83c:	f7fe fc1c 	bl	810e078 <_malloc_r>
 810f840:	4606      	mov	r6, r0
 810f842:	b360      	cbz	r0, 810f89e <__ssputs_r+0xa2>
 810f844:	6921      	ldr	r1, [r4, #16]
 810f846:	464a      	mov	r2, r9
 810f848:	f7fd fd3f 	bl	810d2ca <memcpy>
 810f84c:	89a3      	ldrh	r3, [r4, #12]
 810f84e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 810f852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810f856:	81a3      	strh	r3, [r4, #12]
 810f858:	6126      	str	r6, [r4, #16]
 810f85a:	6165      	str	r5, [r4, #20]
 810f85c:	444e      	add	r6, r9
 810f85e:	eba5 0509 	sub.w	r5, r5, r9
 810f862:	6026      	str	r6, [r4, #0]
 810f864:	60a5      	str	r5, [r4, #8]
 810f866:	463e      	mov	r6, r7
 810f868:	42be      	cmp	r6, r7
 810f86a:	d900      	bls.n	810f86e <__ssputs_r+0x72>
 810f86c:	463e      	mov	r6, r7
 810f86e:	6820      	ldr	r0, [r4, #0]
 810f870:	4632      	mov	r2, r6
 810f872:	4641      	mov	r1, r8
 810f874:	f000 fb6a 	bl	810ff4c <memmove>
 810f878:	68a3      	ldr	r3, [r4, #8]
 810f87a:	1b9b      	subs	r3, r3, r6
 810f87c:	60a3      	str	r3, [r4, #8]
 810f87e:	6823      	ldr	r3, [r4, #0]
 810f880:	4433      	add	r3, r6
 810f882:	6023      	str	r3, [r4, #0]
 810f884:	2000      	movs	r0, #0
 810f886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f88a:	462a      	mov	r2, r5
 810f88c:	f000 ff41 	bl	8110712 <_realloc_r>
 810f890:	4606      	mov	r6, r0
 810f892:	2800      	cmp	r0, #0
 810f894:	d1e0      	bne.n	810f858 <__ssputs_r+0x5c>
 810f896:	6921      	ldr	r1, [r4, #16]
 810f898:	4650      	mov	r0, sl
 810f89a:	f7fe fb79 	bl	810df90 <_free_r>
 810f89e:	230c      	movs	r3, #12
 810f8a0:	f8ca 3000 	str.w	r3, [sl]
 810f8a4:	89a3      	ldrh	r3, [r4, #12]
 810f8a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810f8aa:	81a3      	strh	r3, [r4, #12]
 810f8ac:	f04f 30ff 	mov.w	r0, #4294967295
 810f8b0:	e7e9      	b.n	810f886 <__ssputs_r+0x8a>
	...

0810f8b4 <_svfiprintf_r>:
 810f8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f8b8:	4698      	mov	r8, r3
 810f8ba:	898b      	ldrh	r3, [r1, #12]
 810f8bc:	061b      	lsls	r3, r3, #24
 810f8be:	b09d      	sub	sp, #116	@ 0x74
 810f8c0:	4607      	mov	r7, r0
 810f8c2:	460d      	mov	r5, r1
 810f8c4:	4614      	mov	r4, r2
 810f8c6:	d510      	bpl.n	810f8ea <_svfiprintf_r+0x36>
 810f8c8:	690b      	ldr	r3, [r1, #16]
 810f8ca:	b973      	cbnz	r3, 810f8ea <_svfiprintf_r+0x36>
 810f8cc:	2140      	movs	r1, #64	@ 0x40
 810f8ce:	f7fe fbd3 	bl	810e078 <_malloc_r>
 810f8d2:	6028      	str	r0, [r5, #0]
 810f8d4:	6128      	str	r0, [r5, #16]
 810f8d6:	b930      	cbnz	r0, 810f8e6 <_svfiprintf_r+0x32>
 810f8d8:	230c      	movs	r3, #12
 810f8da:	603b      	str	r3, [r7, #0]
 810f8dc:	f04f 30ff 	mov.w	r0, #4294967295
 810f8e0:	b01d      	add	sp, #116	@ 0x74
 810f8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f8e6:	2340      	movs	r3, #64	@ 0x40
 810f8e8:	616b      	str	r3, [r5, #20]
 810f8ea:	2300      	movs	r3, #0
 810f8ec:	9309      	str	r3, [sp, #36]	@ 0x24
 810f8ee:	2320      	movs	r3, #32
 810f8f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810f8f4:	f8cd 800c 	str.w	r8, [sp, #12]
 810f8f8:	2330      	movs	r3, #48	@ 0x30
 810f8fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 810fa98 <_svfiprintf_r+0x1e4>
 810f8fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810f902:	f04f 0901 	mov.w	r9, #1
 810f906:	4623      	mov	r3, r4
 810f908:	469a      	mov	sl, r3
 810f90a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810f90e:	b10a      	cbz	r2, 810f914 <_svfiprintf_r+0x60>
 810f910:	2a25      	cmp	r2, #37	@ 0x25
 810f912:	d1f9      	bne.n	810f908 <_svfiprintf_r+0x54>
 810f914:	ebba 0b04 	subs.w	fp, sl, r4
 810f918:	d00b      	beq.n	810f932 <_svfiprintf_r+0x7e>
 810f91a:	465b      	mov	r3, fp
 810f91c:	4622      	mov	r2, r4
 810f91e:	4629      	mov	r1, r5
 810f920:	4638      	mov	r0, r7
 810f922:	f7ff ff6b 	bl	810f7fc <__ssputs_r>
 810f926:	3001      	adds	r0, #1
 810f928:	f000 80a7 	beq.w	810fa7a <_svfiprintf_r+0x1c6>
 810f92c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810f92e:	445a      	add	r2, fp
 810f930:	9209      	str	r2, [sp, #36]	@ 0x24
 810f932:	f89a 3000 	ldrb.w	r3, [sl]
 810f936:	2b00      	cmp	r3, #0
 810f938:	f000 809f 	beq.w	810fa7a <_svfiprintf_r+0x1c6>
 810f93c:	2300      	movs	r3, #0
 810f93e:	f04f 32ff 	mov.w	r2, #4294967295
 810f942:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810f946:	f10a 0a01 	add.w	sl, sl, #1
 810f94a:	9304      	str	r3, [sp, #16]
 810f94c:	9307      	str	r3, [sp, #28]
 810f94e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810f952:	931a      	str	r3, [sp, #104]	@ 0x68
 810f954:	4654      	mov	r4, sl
 810f956:	2205      	movs	r2, #5
 810f958:	f814 1b01 	ldrb.w	r1, [r4], #1
 810f95c:	484e      	ldr	r0, [pc, #312]	@ (810fa98 <_svfiprintf_r+0x1e4>)
 810f95e:	f7f0 fcbf 	bl	81002e0 <memchr>
 810f962:	9a04      	ldr	r2, [sp, #16]
 810f964:	b9d8      	cbnz	r0, 810f99e <_svfiprintf_r+0xea>
 810f966:	06d0      	lsls	r0, r2, #27
 810f968:	bf44      	itt	mi
 810f96a:	2320      	movmi	r3, #32
 810f96c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810f970:	0711      	lsls	r1, r2, #28
 810f972:	bf44      	itt	mi
 810f974:	232b      	movmi	r3, #43	@ 0x2b
 810f976:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810f97a:	f89a 3000 	ldrb.w	r3, [sl]
 810f97e:	2b2a      	cmp	r3, #42	@ 0x2a
 810f980:	d015      	beq.n	810f9ae <_svfiprintf_r+0xfa>
 810f982:	9a07      	ldr	r2, [sp, #28]
 810f984:	4654      	mov	r4, sl
 810f986:	2000      	movs	r0, #0
 810f988:	f04f 0c0a 	mov.w	ip, #10
 810f98c:	4621      	mov	r1, r4
 810f98e:	f811 3b01 	ldrb.w	r3, [r1], #1
 810f992:	3b30      	subs	r3, #48	@ 0x30
 810f994:	2b09      	cmp	r3, #9
 810f996:	d94b      	bls.n	810fa30 <_svfiprintf_r+0x17c>
 810f998:	b1b0      	cbz	r0, 810f9c8 <_svfiprintf_r+0x114>
 810f99a:	9207      	str	r2, [sp, #28]
 810f99c:	e014      	b.n	810f9c8 <_svfiprintf_r+0x114>
 810f99e:	eba0 0308 	sub.w	r3, r0, r8
 810f9a2:	fa09 f303 	lsl.w	r3, r9, r3
 810f9a6:	4313      	orrs	r3, r2
 810f9a8:	9304      	str	r3, [sp, #16]
 810f9aa:	46a2      	mov	sl, r4
 810f9ac:	e7d2      	b.n	810f954 <_svfiprintf_r+0xa0>
 810f9ae:	9b03      	ldr	r3, [sp, #12]
 810f9b0:	1d19      	adds	r1, r3, #4
 810f9b2:	681b      	ldr	r3, [r3, #0]
 810f9b4:	9103      	str	r1, [sp, #12]
 810f9b6:	2b00      	cmp	r3, #0
 810f9b8:	bfbb      	ittet	lt
 810f9ba:	425b      	neglt	r3, r3
 810f9bc:	f042 0202 	orrlt.w	r2, r2, #2
 810f9c0:	9307      	strge	r3, [sp, #28]
 810f9c2:	9307      	strlt	r3, [sp, #28]
 810f9c4:	bfb8      	it	lt
 810f9c6:	9204      	strlt	r2, [sp, #16]
 810f9c8:	7823      	ldrb	r3, [r4, #0]
 810f9ca:	2b2e      	cmp	r3, #46	@ 0x2e
 810f9cc:	d10a      	bne.n	810f9e4 <_svfiprintf_r+0x130>
 810f9ce:	7863      	ldrb	r3, [r4, #1]
 810f9d0:	2b2a      	cmp	r3, #42	@ 0x2a
 810f9d2:	d132      	bne.n	810fa3a <_svfiprintf_r+0x186>
 810f9d4:	9b03      	ldr	r3, [sp, #12]
 810f9d6:	1d1a      	adds	r2, r3, #4
 810f9d8:	681b      	ldr	r3, [r3, #0]
 810f9da:	9203      	str	r2, [sp, #12]
 810f9dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810f9e0:	3402      	adds	r4, #2
 810f9e2:	9305      	str	r3, [sp, #20]
 810f9e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 810faa8 <_svfiprintf_r+0x1f4>
 810f9e8:	7821      	ldrb	r1, [r4, #0]
 810f9ea:	2203      	movs	r2, #3
 810f9ec:	4650      	mov	r0, sl
 810f9ee:	f7f0 fc77 	bl	81002e0 <memchr>
 810f9f2:	b138      	cbz	r0, 810fa04 <_svfiprintf_r+0x150>
 810f9f4:	9b04      	ldr	r3, [sp, #16]
 810f9f6:	eba0 000a 	sub.w	r0, r0, sl
 810f9fa:	2240      	movs	r2, #64	@ 0x40
 810f9fc:	4082      	lsls	r2, r0
 810f9fe:	4313      	orrs	r3, r2
 810fa00:	3401      	adds	r4, #1
 810fa02:	9304      	str	r3, [sp, #16]
 810fa04:	f814 1b01 	ldrb.w	r1, [r4], #1
 810fa08:	4824      	ldr	r0, [pc, #144]	@ (810fa9c <_svfiprintf_r+0x1e8>)
 810fa0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810fa0e:	2206      	movs	r2, #6
 810fa10:	f7f0 fc66 	bl	81002e0 <memchr>
 810fa14:	2800      	cmp	r0, #0
 810fa16:	d036      	beq.n	810fa86 <_svfiprintf_r+0x1d2>
 810fa18:	4b21      	ldr	r3, [pc, #132]	@ (810faa0 <_svfiprintf_r+0x1ec>)
 810fa1a:	bb1b      	cbnz	r3, 810fa64 <_svfiprintf_r+0x1b0>
 810fa1c:	9b03      	ldr	r3, [sp, #12]
 810fa1e:	3307      	adds	r3, #7
 810fa20:	f023 0307 	bic.w	r3, r3, #7
 810fa24:	3308      	adds	r3, #8
 810fa26:	9303      	str	r3, [sp, #12]
 810fa28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810fa2a:	4433      	add	r3, r6
 810fa2c:	9309      	str	r3, [sp, #36]	@ 0x24
 810fa2e:	e76a      	b.n	810f906 <_svfiprintf_r+0x52>
 810fa30:	fb0c 3202 	mla	r2, ip, r2, r3
 810fa34:	460c      	mov	r4, r1
 810fa36:	2001      	movs	r0, #1
 810fa38:	e7a8      	b.n	810f98c <_svfiprintf_r+0xd8>
 810fa3a:	2300      	movs	r3, #0
 810fa3c:	3401      	adds	r4, #1
 810fa3e:	9305      	str	r3, [sp, #20]
 810fa40:	4619      	mov	r1, r3
 810fa42:	f04f 0c0a 	mov.w	ip, #10
 810fa46:	4620      	mov	r0, r4
 810fa48:	f810 2b01 	ldrb.w	r2, [r0], #1
 810fa4c:	3a30      	subs	r2, #48	@ 0x30
 810fa4e:	2a09      	cmp	r2, #9
 810fa50:	d903      	bls.n	810fa5a <_svfiprintf_r+0x1a6>
 810fa52:	2b00      	cmp	r3, #0
 810fa54:	d0c6      	beq.n	810f9e4 <_svfiprintf_r+0x130>
 810fa56:	9105      	str	r1, [sp, #20]
 810fa58:	e7c4      	b.n	810f9e4 <_svfiprintf_r+0x130>
 810fa5a:	fb0c 2101 	mla	r1, ip, r1, r2
 810fa5e:	4604      	mov	r4, r0
 810fa60:	2301      	movs	r3, #1
 810fa62:	e7f0      	b.n	810fa46 <_svfiprintf_r+0x192>
 810fa64:	ab03      	add	r3, sp, #12
 810fa66:	9300      	str	r3, [sp, #0]
 810fa68:	462a      	mov	r2, r5
 810fa6a:	4b0e      	ldr	r3, [pc, #56]	@ (810faa4 <_svfiprintf_r+0x1f0>)
 810fa6c:	a904      	add	r1, sp, #16
 810fa6e:	4638      	mov	r0, r7
 810fa70:	f7fc fbb6 	bl	810c1e0 <_printf_float>
 810fa74:	1c42      	adds	r2, r0, #1
 810fa76:	4606      	mov	r6, r0
 810fa78:	d1d6      	bne.n	810fa28 <_svfiprintf_r+0x174>
 810fa7a:	89ab      	ldrh	r3, [r5, #12]
 810fa7c:	065b      	lsls	r3, r3, #25
 810fa7e:	f53f af2d 	bmi.w	810f8dc <_svfiprintf_r+0x28>
 810fa82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810fa84:	e72c      	b.n	810f8e0 <_svfiprintf_r+0x2c>
 810fa86:	ab03      	add	r3, sp, #12
 810fa88:	9300      	str	r3, [sp, #0]
 810fa8a:	462a      	mov	r2, r5
 810fa8c:	4b05      	ldr	r3, [pc, #20]	@ (810faa4 <_svfiprintf_r+0x1f0>)
 810fa8e:	a904      	add	r1, sp, #16
 810fa90:	4638      	mov	r0, r7
 810fa92:	f7fc fe3d 	bl	810c710 <_printf_i>
 810fa96:	e7ed      	b.n	810fa74 <_svfiprintf_r+0x1c0>
 810fa98:	08112239 	.word	0x08112239
 810fa9c:	08112243 	.word	0x08112243
 810faa0:	0810c1e1 	.word	0x0810c1e1
 810faa4:	0810f7fd 	.word	0x0810f7fd
 810faa8:	0811223f 	.word	0x0811223f

0810faac <__sfputc_r>:
 810faac:	6893      	ldr	r3, [r2, #8]
 810faae:	3b01      	subs	r3, #1
 810fab0:	2b00      	cmp	r3, #0
 810fab2:	b410      	push	{r4}
 810fab4:	6093      	str	r3, [r2, #8]
 810fab6:	da08      	bge.n	810faca <__sfputc_r+0x1e>
 810fab8:	6994      	ldr	r4, [r2, #24]
 810faba:	42a3      	cmp	r3, r4
 810fabc:	db01      	blt.n	810fac2 <__sfputc_r+0x16>
 810fabe:	290a      	cmp	r1, #10
 810fac0:	d103      	bne.n	810faca <__sfputc_r+0x1e>
 810fac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 810fac6:	f7fd baec 	b.w	810d0a2 <__swbuf_r>
 810faca:	6813      	ldr	r3, [r2, #0]
 810facc:	1c58      	adds	r0, r3, #1
 810face:	6010      	str	r0, [r2, #0]
 810fad0:	7019      	strb	r1, [r3, #0]
 810fad2:	4608      	mov	r0, r1
 810fad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 810fad8:	4770      	bx	lr

0810fada <__sfputs_r>:
 810fada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810fadc:	4606      	mov	r6, r0
 810fade:	460f      	mov	r7, r1
 810fae0:	4614      	mov	r4, r2
 810fae2:	18d5      	adds	r5, r2, r3
 810fae4:	42ac      	cmp	r4, r5
 810fae6:	d101      	bne.n	810faec <__sfputs_r+0x12>
 810fae8:	2000      	movs	r0, #0
 810faea:	e007      	b.n	810fafc <__sfputs_r+0x22>
 810faec:	f814 1b01 	ldrb.w	r1, [r4], #1
 810faf0:	463a      	mov	r2, r7
 810faf2:	4630      	mov	r0, r6
 810faf4:	f7ff ffda 	bl	810faac <__sfputc_r>
 810faf8:	1c43      	adds	r3, r0, #1
 810fafa:	d1f3      	bne.n	810fae4 <__sfputs_r+0xa>
 810fafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810fb00 <_vfiprintf_r>:
 810fb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810fb04:	460d      	mov	r5, r1
 810fb06:	b09d      	sub	sp, #116	@ 0x74
 810fb08:	4614      	mov	r4, r2
 810fb0a:	4698      	mov	r8, r3
 810fb0c:	4606      	mov	r6, r0
 810fb0e:	b118      	cbz	r0, 810fb18 <_vfiprintf_r+0x18>
 810fb10:	6a03      	ldr	r3, [r0, #32]
 810fb12:	b90b      	cbnz	r3, 810fb18 <_vfiprintf_r+0x18>
 810fb14:	f7fd f9bc 	bl	810ce90 <__sinit>
 810fb18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810fb1a:	07d9      	lsls	r1, r3, #31
 810fb1c:	d405      	bmi.n	810fb2a <_vfiprintf_r+0x2a>
 810fb1e:	89ab      	ldrh	r3, [r5, #12]
 810fb20:	059a      	lsls	r2, r3, #22
 810fb22:	d402      	bmi.n	810fb2a <_vfiprintf_r+0x2a>
 810fb24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810fb26:	f7fd fbce 	bl	810d2c6 <__retarget_lock_acquire_recursive>
 810fb2a:	89ab      	ldrh	r3, [r5, #12]
 810fb2c:	071b      	lsls	r3, r3, #28
 810fb2e:	d501      	bpl.n	810fb34 <_vfiprintf_r+0x34>
 810fb30:	692b      	ldr	r3, [r5, #16]
 810fb32:	b99b      	cbnz	r3, 810fb5c <_vfiprintf_r+0x5c>
 810fb34:	4629      	mov	r1, r5
 810fb36:	4630      	mov	r0, r6
 810fb38:	f7fd faf2 	bl	810d120 <__swsetup_r>
 810fb3c:	b170      	cbz	r0, 810fb5c <_vfiprintf_r+0x5c>
 810fb3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810fb40:	07dc      	lsls	r4, r3, #31
 810fb42:	d504      	bpl.n	810fb4e <_vfiprintf_r+0x4e>
 810fb44:	f04f 30ff 	mov.w	r0, #4294967295
 810fb48:	b01d      	add	sp, #116	@ 0x74
 810fb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810fb4e:	89ab      	ldrh	r3, [r5, #12]
 810fb50:	0598      	lsls	r0, r3, #22
 810fb52:	d4f7      	bmi.n	810fb44 <_vfiprintf_r+0x44>
 810fb54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810fb56:	f7fd fbb7 	bl	810d2c8 <__retarget_lock_release_recursive>
 810fb5a:	e7f3      	b.n	810fb44 <_vfiprintf_r+0x44>
 810fb5c:	2300      	movs	r3, #0
 810fb5e:	9309      	str	r3, [sp, #36]	@ 0x24
 810fb60:	2320      	movs	r3, #32
 810fb62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810fb66:	f8cd 800c 	str.w	r8, [sp, #12]
 810fb6a:	2330      	movs	r3, #48	@ 0x30
 810fb6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 810fd1c <_vfiprintf_r+0x21c>
 810fb70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810fb74:	f04f 0901 	mov.w	r9, #1
 810fb78:	4623      	mov	r3, r4
 810fb7a:	469a      	mov	sl, r3
 810fb7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 810fb80:	b10a      	cbz	r2, 810fb86 <_vfiprintf_r+0x86>
 810fb82:	2a25      	cmp	r2, #37	@ 0x25
 810fb84:	d1f9      	bne.n	810fb7a <_vfiprintf_r+0x7a>
 810fb86:	ebba 0b04 	subs.w	fp, sl, r4
 810fb8a:	d00b      	beq.n	810fba4 <_vfiprintf_r+0xa4>
 810fb8c:	465b      	mov	r3, fp
 810fb8e:	4622      	mov	r2, r4
 810fb90:	4629      	mov	r1, r5
 810fb92:	4630      	mov	r0, r6
 810fb94:	f7ff ffa1 	bl	810fada <__sfputs_r>
 810fb98:	3001      	adds	r0, #1
 810fb9a:	f000 80a7 	beq.w	810fcec <_vfiprintf_r+0x1ec>
 810fb9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810fba0:	445a      	add	r2, fp
 810fba2:	9209      	str	r2, [sp, #36]	@ 0x24
 810fba4:	f89a 3000 	ldrb.w	r3, [sl]
 810fba8:	2b00      	cmp	r3, #0
 810fbaa:	f000 809f 	beq.w	810fcec <_vfiprintf_r+0x1ec>
 810fbae:	2300      	movs	r3, #0
 810fbb0:	f04f 32ff 	mov.w	r2, #4294967295
 810fbb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810fbb8:	f10a 0a01 	add.w	sl, sl, #1
 810fbbc:	9304      	str	r3, [sp, #16]
 810fbbe:	9307      	str	r3, [sp, #28]
 810fbc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810fbc4:	931a      	str	r3, [sp, #104]	@ 0x68
 810fbc6:	4654      	mov	r4, sl
 810fbc8:	2205      	movs	r2, #5
 810fbca:	f814 1b01 	ldrb.w	r1, [r4], #1
 810fbce:	4853      	ldr	r0, [pc, #332]	@ (810fd1c <_vfiprintf_r+0x21c>)
 810fbd0:	f7f0 fb86 	bl	81002e0 <memchr>
 810fbd4:	9a04      	ldr	r2, [sp, #16]
 810fbd6:	b9d8      	cbnz	r0, 810fc10 <_vfiprintf_r+0x110>
 810fbd8:	06d1      	lsls	r1, r2, #27
 810fbda:	bf44      	itt	mi
 810fbdc:	2320      	movmi	r3, #32
 810fbde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810fbe2:	0713      	lsls	r3, r2, #28
 810fbe4:	bf44      	itt	mi
 810fbe6:	232b      	movmi	r3, #43	@ 0x2b
 810fbe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810fbec:	f89a 3000 	ldrb.w	r3, [sl]
 810fbf0:	2b2a      	cmp	r3, #42	@ 0x2a
 810fbf2:	d015      	beq.n	810fc20 <_vfiprintf_r+0x120>
 810fbf4:	9a07      	ldr	r2, [sp, #28]
 810fbf6:	4654      	mov	r4, sl
 810fbf8:	2000      	movs	r0, #0
 810fbfa:	f04f 0c0a 	mov.w	ip, #10
 810fbfe:	4621      	mov	r1, r4
 810fc00:	f811 3b01 	ldrb.w	r3, [r1], #1
 810fc04:	3b30      	subs	r3, #48	@ 0x30
 810fc06:	2b09      	cmp	r3, #9
 810fc08:	d94b      	bls.n	810fca2 <_vfiprintf_r+0x1a2>
 810fc0a:	b1b0      	cbz	r0, 810fc3a <_vfiprintf_r+0x13a>
 810fc0c:	9207      	str	r2, [sp, #28]
 810fc0e:	e014      	b.n	810fc3a <_vfiprintf_r+0x13a>
 810fc10:	eba0 0308 	sub.w	r3, r0, r8
 810fc14:	fa09 f303 	lsl.w	r3, r9, r3
 810fc18:	4313      	orrs	r3, r2
 810fc1a:	9304      	str	r3, [sp, #16]
 810fc1c:	46a2      	mov	sl, r4
 810fc1e:	e7d2      	b.n	810fbc6 <_vfiprintf_r+0xc6>
 810fc20:	9b03      	ldr	r3, [sp, #12]
 810fc22:	1d19      	adds	r1, r3, #4
 810fc24:	681b      	ldr	r3, [r3, #0]
 810fc26:	9103      	str	r1, [sp, #12]
 810fc28:	2b00      	cmp	r3, #0
 810fc2a:	bfbb      	ittet	lt
 810fc2c:	425b      	neglt	r3, r3
 810fc2e:	f042 0202 	orrlt.w	r2, r2, #2
 810fc32:	9307      	strge	r3, [sp, #28]
 810fc34:	9307      	strlt	r3, [sp, #28]
 810fc36:	bfb8      	it	lt
 810fc38:	9204      	strlt	r2, [sp, #16]
 810fc3a:	7823      	ldrb	r3, [r4, #0]
 810fc3c:	2b2e      	cmp	r3, #46	@ 0x2e
 810fc3e:	d10a      	bne.n	810fc56 <_vfiprintf_r+0x156>
 810fc40:	7863      	ldrb	r3, [r4, #1]
 810fc42:	2b2a      	cmp	r3, #42	@ 0x2a
 810fc44:	d132      	bne.n	810fcac <_vfiprintf_r+0x1ac>
 810fc46:	9b03      	ldr	r3, [sp, #12]
 810fc48:	1d1a      	adds	r2, r3, #4
 810fc4a:	681b      	ldr	r3, [r3, #0]
 810fc4c:	9203      	str	r2, [sp, #12]
 810fc4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810fc52:	3402      	adds	r4, #2
 810fc54:	9305      	str	r3, [sp, #20]
 810fc56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 810fd2c <_vfiprintf_r+0x22c>
 810fc5a:	7821      	ldrb	r1, [r4, #0]
 810fc5c:	2203      	movs	r2, #3
 810fc5e:	4650      	mov	r0, sl
 810fc60:	f7f0 fb3e 	bl	81002e0 <memchr>
 810fc64:	b138      	cbz	r0, 810fc76 <_vfiprintf_r+0x176>
 810fc66:	9b04      	ldr	r3, [sp, #16]
 810fc68:	eba0 000a 	sub.w	r0, r0, sl
 810fc6c:	2240      	movs	r2, #64	@ 0x40
 810fc6e:	4082      	lsls	r2, r0
 810fc70:	4313      	orrs	r3, r2
 810fc72:	3401      	adds	r4, #1
 810fc74:	9304      	str	r3, [sp, #16]
 810fc76:	f814 1b01 	ldrb.w	r1, [r4], #1
 810fc7a:	4829      	ldr	r0, [pc, #164]	@ (810fd20 <_vfiprintf_r+0x220>)
 810fc7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810fc80:	2206      	movs	r2, #6
 810fc82:	f7f0 fb2d 	bl	81002e0 <memchr>
 810fc86:	2800      	cmp	r0, #0
 810fc88:	d03f      	beq.n	810fd0a <_vfiprintf_r+0x20a>
 810fc8a:	4b26      	ldr	r3, [pc, #152]	@ (810fd24 <_vfiprintf_r+0x224>)
 810fc8c:	bb1b      	cbnz	r3, 810fcd6 <_vfiprintf_r+0x1d6>
 810fc8e:	9b03      	ldr	r3, [sp, #12]
 810fc90:	3307      	adds	r3, #7
 810fc92:	f023 0307 	bic.w	r3, r3, #7
 810fc96:	3308      	adds	r3, #8
 810fc98:	9303      	str	r3, [sp, #12]
 810fc9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810fc9c:	443b      	add	r3, r7
 810fc9e:	9309      	str	r3, [sp, #36]	@ 0x24
 810fca0:	e76a      	b.n	810fb78 <_vfiprintf_r+0x78>
 810fca2:	fb0c 3202 	mla	r2, ip, r2, r3
 810fca6:	460c      	mov	r4, r1
 810fca8:	2001      	movs	r0, #1
 810fcaa:	e7a8      	b.n	810fbfe <_vfiprintf_r+0xfe>
 810fcac:	2300      	movs	r3, #0
 810fcae:	3401      	adds	r4, #1
 810fcb0:	9305      	str	r3, [sp, #20]
 810fcb2:	4619      	mov	r1, r3
 810fcb4:	f04f 0c0a 	mov.w	ip, #10
 810fcb8:	4620      	mov	r0, r4
 810fcba:	f810 2b01 	ldrb.w	r2, [r0], #1
 810fcbe:	3a30      	subs	r2, #48	@ 0x30
 810fcc0:	2a09      	cmp	r2, #9
 810fcc2:	d903      	bls.n	810fccc <_vfiprintf_r+0x1cc>
 810fcc4:	2b00      	cmp	r3, #0
 810fcc6:	d0c6      	beq.n	810fc56 <_vfiprintf_r+0x156>
 810fcc8:	9105      	str	r1, [sp, #20]
 810fcca:	e7c4      	b.n	810fc56 <_vfiprintf_r+0x156>
 810fccc:	fb0c 2101 	mla	r1, ip, r1, r2
 810fcd0:	4604      	mov	r4, r0
 810fcd2:	2301      	movs	r3, #1
 810fcd4:	e7f0      	b.n	810fcb8 <_vfiprintf_r+0x1b8>
 810fcd6:	ab03      	add	r3, sp, #12
 810fcd8:	9300      	str	r3, [sp, #0]
 810fcda:	462a      	mov	r2, r5
 810fcdc:	4b12      	ldr	r3, [pc, #72]	@ (810fd28 <_vfiprintf_r+0x228>)
 810fcde:	a904      	add	r1, sp, #16
 810fce0:	4630      	mov	r0, r6
 810fce2:	f7fc fa7d 	bl	810c1e0 <_printf_float>
 810fce6:	4607      	mov	r7, r0
 810fce8:	1c78      	adds	r0, r7, #1
 810fcea:	d1d6      	bne.n	810fc9a <_vfiprintf_r+0x19a>
 810fcec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810fcee:	07d9      	lsls	r1, r3, #31
 810fcf0:	d405      	bmi.n	810fcfe <_vfiprintf_r+0x1fe>
 810fcf2:	89ab      	ldrh	r3, [r5, #12]
 810fcf4:	059a      	lsls	r2, r3, #22
 810fcf6:	d402      	bmi.n	810fcfe <_vfiprintf_r+0x1fe>
 810fcf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810fcfa:	f7fd fae5 	bl	810d2c8 <__retarget_lock_release_recursive>
 810fcfe:	89ab      	ldrh	r3, [r5, #12]
 810fd00:	065b      	lsls	r3, r3, #25
 810fd02:	f53f af1f 	bmi.w	810fb44 <_vfiprintf_r+0x44>
 810fd06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810fd08:	e71e      	b.n	810fb48 <_vfiprintf_r+0x48>
 810fd0a:	ab03      	add	r3, sp, #12
 810fd0c:	9300      	str	r3, [sp, #0]
 810fd0e:	462a      	mov	r2, r5
 810fd10:	4b05      	ldr	r3, [pc, #20]	@ (810fd28 <_vfiprintf_r+0x228>)
 810fd12:	a904      	add	r1, sp, #16
 810fd14:	4630      	mov	r0, r6
 810fd16:	f7fc fcfb 	bl	810c710 <_printf_i>
 810fd1a:	e7e4      	b.n	810fce6 <_vfiprintf_r+0x1e6>
 810fd1c:	08112239 	.word	0x08112239
 810fd20:	08112243 	.word	0x08112243
 810fd24:	0810c1e1 	.word	0x0810c1e1
 810fd28:	0810fadb 	.word	0x0810fadb
 810fd2c:	0811223f 	.word	0x0811223f

0810fd30 <__sflush_r>:
 810fd30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810fd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810fd38:	0716      	lsls	r6, r2, #28
 810fd3a:	4605      	mov	r5, r0
 810fd3c:	460c      	mov	r4, r1
 810fd3e:	d454      	bmi.n	810fdea <__sflush_r+0xba>
 810fd40:	684b      	ldr	r3, [r1, #4]
 810fd42:	2b00      	cmp	r3, #0
 810fd44:	dc02      	bgt.n	810fd4c <__sflush_r+0x1c>
 810fd46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 810fd48:	2b00      	cmp	r3, #0
 810fd4a:	dd48      	ble.n	810fdde <__sflush_r+0xae>
 810fd4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810fd4e:	2e00      	cmp	r6, #0
 810fd50:	d045      	beq.n	810fdde <__sflush_r+0xae>
 810fd52:	2300      	movs	r3, #0
 810fd54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 810fd58:	682f      	ldr	r7, [r5, #0]
 810fd5a:	6a21      	ldr	r1, [r4, #32]
 810fd5c:	602b      	str	r3, [r5, #0]
 810fd5e:	d030      	beq.n	810fdc2 <__sflush_r+0x92>
 810fd60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810fd62:	89a3      	ldrh	r3, [r4, #12]
 810fd64:	0759      	lsls	r1, r3, #29
 810fd66:	d505      	bpl.n	810fd74 <__sflush_r+0x44>
 810fd68:	6863      	ldr	r3, [r4, #4]
 810fd6a:	1ad2      	subs	r2, r2, r3
 810fd6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810fd6e:	b10b      	cbz	r3, 810fd74 <__sflush_r+0x44>
 810fd70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810fd72:	1ad2      	subs	r2, r2, r3
 810fd74:	2300      	movs	r3, #0
 810fd76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810fd78:	6a21      	ldr	r1, [r4, #32]
 810fd7a:	4628      	mov	r0, r5
 810fd7c:	47b0      	blx	r6
 810fd7e:	1c43      	adds	r3, r0, #1
 810fd80:	89a3      	ldrh	r3, [r4, #12]
 810fd82:	d106      	bne.n	810fd92 <__sflush_r+0x62>
 810fd84:	6829      	ldr	r1, [r5, #0]
 810fd86:	291d      	cmp	r1, #29
 810fd88:	d82b      	bhi.n	810fde2 <__sflush_r+0xb2>
 810fd8a:	4a2a      	ldr	r2, [pc, #168]	@ (810fe34 <__sflush_r+0x104>)
 810fd8c:	410a      	asrs	r2, r1
 810fd8e:	07d6      	lsls	r6, r2, #31
 810fd90:	d427      	bmi.n	810fde2 <__sflush_r+0xb2>
 810fd92:	2200      	movs	r2, #0
 810fd94:	6062      	str	r2, [r4, #4]
 810fd96:	04d9      	lsls	r1, r3, #19
 810fd98:	6922      	ldr	r2, [r4, #16]
 810fd9a:	6022      	str	r2, [r4, #0]
 810fd9c:	d504      	bpl.n	810fda8 <__sflush_r+0x78>
 810fd9e:	1c42      	adds	r2, r0, #1
 810fda0:	d101      	bne.n	810fda6 <__sflush_r+0x76>
 810fda2:	682b      	ldr	r3, [r5, #0]
 810fda4:	b903      	cbnz	r3, 810fda8 <__sflush_r+0x78>
 810fda6:	6560      	str	r0, [r4, #84]	@ 0x54
 810fda8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810fdaa:	602f      	str	r7, [r5, #0]
 810fdac:	b1b9      	cbz	r1, 810fdde <__sflush_r+0xae>
 810fdae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810fdb2:	4299      	cmp	r1, r3
 810fdb4:	d002      	beq.n	810fdbc <__sflush_r+0x8c>
 810fdb6:	4628      	mov	r0, r5
 810fdb8:	f7fe f8ea 	bl	810df90 <_free_r>
 810fdbc:	2300      	movs	r3, #0
 810fdbe:	6363      	str	r3, [r4, #52]	@ 0x34
 810fdc0:	e00d      	b.n	810fdde <__sflush_r+0xae>
 810fdc2:	2301      	movs	r3, #1
 810fdc4:	4628      	mov	r0, r5
 810fdc6:	47b0      	blx	r6
 810fdc8:	4602      	mov	r2, r0
 810fdca:	1c50      	adds	r0, r2, #1
 810fdcc:	d1c9      	bne.n	810fd62 <__sflush_r+0x32>
 810fdce:	682b      	ldr	r3, [r5, #0]
 810fdd0:	2b00      	cmp	r3, #0
 810fdd2:	d0c6      	beq.n	810fd62 <__sflush_r+0x32>
 810fdd4:	2b1d      	cmp	r3, #29
 810fdd6:	d001      	beq.n	810fddc <__sflush_r+0xac>
 810fdd8:	2b16      	cmp	r3, #22
 810fdda:	d11e      	bne.n	810fe1a <__sflush_r+0xea>
 810fddc:	602f      	str	r7, [r5, #0]
 810fdde:	2000      	movs	r0, #0
 810fde0:	e022      	b.n	810fe28 <__sflush_r+0xf8>
 810fde2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810fde6:	b21b      	sxth	r3, r3
 810fde8:	e01b      	b.n	810fe22 <__sflush_r+0xf2>
 810fdea:	690f      	ldr	r7, [r1, #16]
 810fdec:	2f00      	cmp	r7, #0
 810fdee:	d0f6      	beq.n	810fdde <__sflush_r+0xae>
 810fdf0:	0793      	lsls	r3, r2, #30
 810fdf2:	680e      	ldr	r6, [r1, #0]
 810fdf4:	bf08      	it	eq
 810fdf6:	694b      	ldreq	r3, [r1, #20]
 810fdf8:	600f      	str	r7, [r1, #0]
 810fdfa:	bf18      	it	ne
 810fdfc:	2300      	movne	r3, #0
 810fdfe:	eba6 0807 	sub.w	r8, r6, r7
 810fe02:	608b      	str	r3, [r1, #8]
 810fe04:	f1b8 0f00 	cmp.w	r8, #0
 810fe08:	dde9      	ble.n	810fdde <__sflush_r+0xae>
 810fe0a:	6a21      	ldr	r1, [r4, #32]
 810fe0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810fe0e:	4643      	mov	r3, r8
 810fe10:	463a      	mov	r2, r7
 810fe12:	4628      	mov	r0, r5
 810fe14:	47b0      	blx	r6
 810fe16:	2800      	cmp	r0, #0
 810fe18:	dc08      	bgt.n	810fe2c <__sflush_r+0xfc>
 810fe1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810fe1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810fe22:	81a3      	strh	r3, [r4, #12]
 810fe24:	f04f 30ff 	mov.w	r0, #4294967295
 810fe28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810fe2c:	4407      	add	r7, r0
 810fe2e:	eba8 0800 	sub.w	r8, r8, r0
 810fe32:	e7e7      	b.n	810fe04 <__sflush_r+0xd4>
 810fe34:	dfbffffe 	.word	0xdfbffffe

0810fe38 <_fflush_r>:
 810fe38:	b538      	push	{r3, r4, r5, lr}
 810fe3a:	690b      	ldr	r3, [r1, #16]
 810fe3c:	4605      	mov	r5, r0
 810fe3e:	460c      	mov	r4, r1
 810fe40:	b913      	cbnz	r3, 810fe48 <_fflush_r+0x10>
 810fe42:	2500      	movs	r5, #0
 810fe44:	4628      	mov	r0, r5
 810fe46:	bd38      	pop	{r3, r4, r5, pc}
 810fe48:	b118      	cbz	r0, 810fe52 <_fflush_r+0x1a>
 810fe4a:	6a03      	ldr	r3, [r0, #32]
 810fe4c:	b90b      	cbnz	r3, 810fe52 <_fflush_r+0x1a>
 810fe4e:	f7fd f81f 	bl	810ce90 <__sinit>
 810fe52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810fe56:	2b00      	cmp	r3, #0
 810fe58:	d0f3      	beq.n	810fe42 <_fflush_r+0xa>
 810fe5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 810fe5c:	07d0      	lsls	r0, r2, #31
 810fe5e:	d404      	bmi.n	810fe6a <_fflush_r+0x32>
 810fe60:	0599      	lsls	r1, r3, #22
 810fe62:	d402      	bmi.n	810fe6a <_fflush_r+0x32>
 810fe64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810fe66:	f7fd fa2e 	bl	810d2c6 <__retarget_lock_acquire_recursive>
 810fe6a:	4628      	mov	r0, r5
 810fe6c:	4621      	mov	r1, r4
 810fe6e:	f7ff ff5f 	bl	810fd30 <__sflush_r>
 810fe72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810fe74:	07da      	lsls	r2, r3, #31
 810fe76:	4605      	mov	r5, r0
 810fe78:	d4e4      	bmi.n	810fe44 <_fflush_r+0xc>
 810fe7a:	89a3      	ldrh	r3, [r4, #12]
 810fe7c:	059b      	lsls	r3, r3, #22
 810fe7e:	d4e1      	bmi.n	810fe44 <_fflush_r+0xc>
 810fe80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810fe82:	f7fd fa21 	bl	810d2c8 <__retarget_lock_release_recursive>
 810fe86:	e7dd      	b.n	810fe44 <_fflush_r+0xc>

0810fe88 <__swhatbuf_r>:
 810fe88:	b570      	push	{r4, r5, r6, lr}
 810fe8a:	460c      	mov	r4, r1
 810fe8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810fe90:	2900      	cmp	r1, #0
 810fe92:	b096      	sub	sp, #88	@ 0x58
 810fe94:	4615      	mov	r5, r2
 810fe96:	461e      	mov	r6, r3
 810fe98:	da0d      	bge.n	810feb6 <__swhatbuf_r+0x2e>
 810fe9a:	89a3      	ldrh	r3, [r4, #12]
 810fe9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810fea0:	f04f 0100 	mov.w	r1, #0
 810fea4:	bf14      	ite	ne
 810fea6:	2340      	movne	r3, #64	@ 0x40
 810fea8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 810feac:	2000      	movs	r0, #0
 810feae:	6031      	str	r1, [r6, #0]
 810feb0:	602b      	str	r3, [r5, #0]
 810feb2:	b016      	add	sp, #88	@ 0x58
 810feb4:	bd70      	pop	{r4, r5, r6, pc}
 810feb6:	466a      	mov	r2, sp
 810feb8:	f000 f874 	bl	810ffa4 <_fstat_r>
 810febc:	2800      	cmp	r0, #0
 810febe:	dbec      	blt.n	810fe9a <__swhatbuf_r+0x12>
 810fec0:	9901      	ldr	r1, [sp, #4]
 810fec2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 810fec6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 810feca:	4259      	negs	r1, r3
 810fecc:	4159      	adcs	r1, r3
 810fece:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810fed2:	e7eb      	b.n	810feac <__swhatbuf_r+0x24>

0810fed4 <__smakebuf_r>:
 810fed4:	898b      	ldrh	r3, [r1, #12]
 810fed6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810fed8:	079d      	lsls	r5, r3, #30
 810feda:	4606      	mov	r6, r0
 810fedc:	460c      	mov	r4, r1
 810fede:	d507      	bpl.n	810fef0 <__smakebuf_r+0x1c>
 810fee0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 810fee4:	6023      	str	r3, [r4, #0]
 810fee6:	6123      	str	r3, [r4, #16]
 810fee8:	2301      	movs	r3, #1
 810feea:	6163      	str	r3, [r4, #20]
 810feec:	b003      	add	sp, #12
 810feee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810fef0:	ab01      	add	r3, sp, #4
 810fef2:	466a      	mov	r2, sp
 810fef4:	f7ff ffc8 	bl	810fe88 <__swhatbuf_r>
 810fef8:	9f00      	ldr	r7, [sp, #0]
 810fefa:	4605      	mov	r5, r0
 810fefc:	4639      	mov	r1, r7
 810fefe:	4630      	mov	r0, r6
 810ff00:	f7fe f8ba 	bl	810e078 <_malloc_r>
 810ff04:	b948      	cbnz	r0, 810ff1a <__smakebuf_r+0x46>
 810ff06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810ff0a:	059a      	lsls	r2, r3, #22
 810ff0c:	d4ee      	bmi.n	810feec <__smakebuf_r+0x18>
 810ff0e:	f023 0303 	bic.w	r3, r3, #3
 810ff12:	f043 0302 	orr.w	r3, r3, #2
 810ff16:	81a3      	strh	r3, [r4, #12]
 810ff18:	e7e2      	b.n	810fee0 <__smakebuf_r+0xc>
 810ff1a:	89a3      	ldrh	r3, [r4, #12]
 810ff1c:	6020      	str	r0, [r4, #0]
 810ff1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810ff22:	81a3      	strh	r3, [r4, #12]
 810ff24:	9b01      	ldr	r3, [sp, #4]
 810ff26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 810ff2a:	b15b      	cbz	r3, 810ff44 <__smakebuf_r+0x70>
 810ff2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810ff30:	4630      	mov	r0, r6
 810ff32:	f000 f849 	bl	810ffc8 <_isatty_r>
 810ff36:	b128      	cbz	r0, 810ff44 <__smakebuf_r+0x70>
 810ff38:	89a3      	ldrh	r3, [r4, #12]
 810ff3a:	f023 0303 	bic.w	r3, r3, #3
 810ff3e:	f043 0301 	orr.w	r3, r3, #1
 810ff42:	81a3      	strh	r3, [r4, #12]
 810ff44:	89a3      	ldrh	r3, [r4, #12]
 810ff46:	431d      	orrs	r5, r3
 810ff48:	81a5      	strh	r5, [r4, #12]
 810ff4a:	e7cf      	b.n	810feec <__smakebuf_r+0x18>

0810ff4c <memmove>:
 810ff4c:	4288      	cmp	r0, r1
 810ff4e:	b510      	push	{r4, lr}
 810ff50:	eb01 0402 	add.w	r4, r1, r2
 810ff54:	d902      	bls.n	810ff5c <memmove+0x10>
 810ff56:	4284      	cmp	r4, r0
 810ff58:	4623      	mov	r3, r4
 810ff5a:	d807      	bhi.n	810ff6c <memmove+0x20>
 810ff5c:	1e43      	subs	r3, r0, #1
 810ff5e:	42a1      	cmp	r1, r4
 810ff60:	d008      	beq.n	810ff74 <memmove+0x28>
 810ff62:	f811 2b01 	ldrb.w	r2, [r1], #1
 810ff66:	f803 2f01 	strb.w	r2, [r3, #1]!
 810ff6a:	e7f8      	b.n	810ff5e <memmove+0x12>
 810ff6c:	4402      	add	r2, r0
 810ff6e:	4601      	mov	r1, r0
 810ff70:	428a      	cmp	r2, r1
 810ff72:	d100      	bne.n	810ff76 <memmove+0x2a>
 810ff74:	bd10      	pop	{r4, pc}
 810ff76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810ff7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810ff7e:	e7f7      	b.n	810ff70 <memmove+0x24>

0810ff80 <strncmp>:
 810ff80:	b510      	push	{r4, lr}
 810ff82:	b16a      	cbz	r2, 810ffa0 <strncmp+0x20>
 810ff84:	3901      	subs	r1, #1
 810ff86:	1884      	adds	r4, r0, r2
 810ff88:	f810 2b01 	ldrb.w	r2, [r0], #1
 810ff8c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810ff90:	429a      	cmp	r2, r3
 810ff92:	d103      	bne.n	810ff9c <strncmp+0x1c>
 810ff94:	42a0      	cmp	r0, r4
 810ff96:	d001      	beq.n	810ff9c <strncmp+0x1c>
 810ff98:	2a00      	cmp	r2, #0
 810ff9a:	d1f5      	bne.n	810ff88 <strncmp+0x8>
 810ff9c:	1ad0      	subs	r0, r2, r3
 810ff9e:	bd10      	pop	{r4, pc}
 810ffa0:	4610      	mov	r0, r2
 810ffa2:	e7fc      	b.n	810ff9e <strncmp+0x1e>

0810ffa4 <_fstat_r>:
 810ffa4:	b538      	push	{r3, r4, r5, lr}
 810ffa6:	4d07      	ldr	r5, [pc, #28]	@ (810ffc4 <_fstat_r+0x20>)
 810ffa8:	2300      	movs	r3, #0
 810ffaa:	4604      	mov	r4, r0
 810ffac:	4608      	mov	r0, r1
 810ffae:	4611      	mov	r1, r2
 810ffb0:	602b      	str	r3, [r5, #0]
 810ffb2:	f7f3 f913 	bl	81031dc <_fstat>
 810ffb6:	1c43      	adds	r3, r0, #1
 810ffb8:	d102      	bne.n	810ffc0 <_fstat_r+0x1c>
 810ffba:	682b      	ldr	r3, [r5, #0]
 810ffbc:	b103      	cbz	r3, 810ffc0 <_fstat_r+0x1c>
 810ffbe:	6023      	str	r3, [r4, #0]
 810ffc0:	bd38      	pop	{r3, r4, r5, pc}
 810ffc2:	bf00      	nop
 810ffc4:	10000788 	.word	0x10000788

0810ffc8 <_isatty_r>:
 810ffc8:	b538      	push	{r3, r4, r5, lr}
 810ffca:	4d06      	ldr	r5, [pc, #24]	@ (810ffe4 <_isatty_r+0x1c>)
 810ffcc:	2300      	movs	r3, #0
 810ffce:	4604      	mov	r4, r0
 810ffd0:	4608      	mov	r0, r1
 810ffd2:	602b      	str	r3, [r5, #0]
 810ffd4:	f7f3 f912 	bl	81031fc <_isatty>
 810ffd8:	1c43      	adds	r3, r0, #1
 810ffda:	d102      	bne.n	810ffe2 <_isatty_r+0x1a>
 810ffdc:	682b      	ldr	r3, [r5, #0]
 810ffde:	b103      	cbz	r3, 810ffe2 <_isatty_r+0x1a>
 810ffe0:	6023      	str	r3, [r4, #0]
 810ffe2:	bd38      	pop	{r3, r4, r5, pc}
 810ffe4:	10000788 	.word	0x10000788

0810ffe8 <_sbrk_r>:
 810ffe8:	b538      	push	{r3, r4, r5, lr}
 810ffea:	4d06      	ldr	r5, [pc, #24]	@ (8110004 <_sbrk_r+0x1c>)
 810ffec:	2300      	movs	r3, #0
 810ffee:	4604      	mov	r4, r0
 810fff0:	4608      	mov	r0, r1
 810fff2:	602b      	str	r3, [r5, #0]
 810fff4:	f7f3 f91a 	bl	810322c <_sbrk>
 810fff8:	1c43      	adds	r3, r0, #1
 810fffa:	d102      	bne.n	8110002 <_sbrk_r+0x1a>
 810fffc:	682b      	ldr	r3, [r5, #0]
 810fffe:	b103      	cbz	r3, 8110002 <_sbrk_r+0x1a>
 8110000:	6023      	str	r3, [r4, #0]
 8110002:	bd38      	pop	{r3, r4, r5, pc}
 8110004:	10000788 	.word	0x10000788

08110008 <nan>:
 8110008:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8110010 <nan+0x8>
 811000c:	4770      	bx	lr
 811000e:	bf00      	nop
 8110010:	00000000 	.word	0x00000000
 8110014:	7ff80000 	.word	0x7ff80000

08110018 <__assert_func>:
 8110018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 811001a:	4614      	mov	r4, r2
 811001c:	461a      	mov	r2, r3
 811001e:	4b09      	ldr	r3, [pc, #36]	@ (8110044 <__assert_func+0x2c>)
 8110020:	681b      	ldr	r3, [r3, #0]
 8110022:	4605      	mov	r5, r0
 8110024:	68d8      	ldr	r0, [r3, #12]
 8110026:	b954      	cbnz	r4, 811003e <__assert_func+0x26>
 8110028:	4b07      	ldr	r3, [pc, #28]	@ (8110048 <__assert_func+0x30>)
 811002a:	461c      	mov	r4, r3
 811002c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8110030:	9100      	str	r1, [sp, #0]
 8110032:	462b      	mov	r3, r5
 8110034:	4905      	ldr	r1, [pc, #20]	@ (811004c <__assert_func+0x34>)
 8110036:	f000 fba7 	bl	8110788 <fiprintf>
 811003a:	f000 fbb7 	bl	81107ac <abort>
 811003e:	4b04      	ldr	r3, [pc, #16]	@ (8110050 <__assert_func+0x38>)
 8110040:	e7f4      	b.n	811002c <__assert_func+0x14>
 8110042:	bf00      	nop
 8110044:	10000094 	.word	0x10000094
 8110048:	0811228d 	.word	0x0811228d
 811004c:	0811225f 	.word	0x0811225f
 8110050:	08112252 	.word	0x08112252

08110054 <_calloc_r>:
 8110054:	b570      	push	{r4, r5, r6, lr}
 8110056:	fba1 5402 	umull	r5, r4, r1, r2
 811005a:	b93c      	cbnz	r4, 811006c <_calloc_r+0x18>
 811005c:	4629      	mov	r1, r5
 811005e:	f7fe f80b 	bl	810e078 <_malloc_r>
 8110062:	4606      	mov	r6, r0
 8110064:	b928      	cbnz	r0, 8110072 <_calloc_r+0x1e>
 8110066:	2600      	movs	r6, #0
 8110068:	4630      	mov	r0, r6
 811006a:	bd70      	pop	{r4, r5, r6, pc}
 811006c:	220c      	movs	r2, #12
 811006e:	6002      	str	r2, [r0, #0]
 8110070:	e7f9      	b.n	8110066 <_calloc_r+0x12>
 8110072:	462a      	mov	r2, r5
 8110074:	4621      	mov	r1, r4
 8110076:	f7fd f8a9 	bl	810d1cc <memset>
 811007a:	e7f5      	b.n	8110068 <_calloc_r+0x14>

0811007c <rshift>:
 811007c:	6903      	ldr	r3, [r0, #16]
 811007e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8110082:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8110086:	ea4f 1261 	mov.w	r2, r1, asr #5
 811008a:	f100 0414 	add.w	r4, r0, #20
 811008e:	dd45      	ble.n	811011c <rshift+0xa0>
 8110090:	f011 011f 	ands.w	r1, r1, #31
 8110094:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8110098:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 811009c:	d10c      	bne.n	81100b8 <rshift+0x3c>
 811009e:	f100 0710 	add.w	r7, r0, #16
 81100a2:	4629      	mov	r1, r5
 81100a4:	42b1      	cmp	r1, r6
 81100a6:	d334      	bcc.n	8110112 <rshift+0x96>
 81100a8:	1a9b      	subs	r3, r3, r2
 81100aa:	009b      	lsls	r3, r3, #2
 81100ac:	1eea      	subs	r2, r5, #3
 81100ae:	4296      	cmp	r6, r2
 81100b0:	bf38      	it	cc
 81100b2:	2300      	movcc	r3, #0
 81100b4:	4423      	add	r3, r4
 81100b6:	e015      	b.n	81100e4 <rshift+0x68>
 81100b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 81100bc:	f1c1 0820 	rsb	r8, r1, #32
 81100c0:	40cf      	lsrs	r7, r1
 81100c2:	f105 0e04 	add.w	lr, r5, #4
 81100c6:	46a1      	mov	r9, r4
 81100c8:	4576      	cmp	r6, lr
 81100ca:	46f4      	mov	ip, lr
 81100cc:	d815      	bhi.n	81100fa <rshift+0x7e>
 81100ce:	1a9a      	subs	r2, r3, r2
 81100d0:	0092      	lsls	r2, r2, #2
 81100d2:	3a04      	subs	r2, #4
 81100d4:	3501      	adds	r5, #1
 81100d6:	42ae      	cmp	r6, r5
 81100d8:	bf38      	it	cc
 81100da:	2200      	movcc	r2, #0
 81100dc:	18a3      	adds	r3, r4, r2
 81100de:	50a7      	str	r7, [r4, r2]
 81100e0:	b107      	cbz	r7, 81100e4 <rshift+0x68>
 81100e2:	3304      	adds	r3, #4
 81100e4:	1b1a      	subs	r2, r3, r4
 81100e6:	42a3      	cmp	r3, r4
 81100e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 81100ec:	bf08      	it	eq
 81100ee:	2300      	moveq	r3, #0
 81100f0:	6102      	str	r2, [r0, #16]
 81100f2:	bf08      	it	eq
 81100f4:	6143      	streq	r3, [r0, #20]
 81100f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81100fa:	f8dc c000 	ldr.w	ip, [ip]
 81100fe:	fa0c fc08 	lsl.w	ip, ip, r8
 8110102:	ea4c 0707 	orr.w	r7, ip, r7
 8110106:	f849 7b04 	str.w	r7, [r9], #4
 811010a:	f85e 7b04 	ldr.w	r7, [lr], #4
 811010e:	40cf      	lsrs	r7, r1
 8110110:	e7da      	b.n	81100c8 <rshift+0x4c>
 8110112:	f851 cb04 	ldr.w	ip, [r1], #4
 8110116:	f847 cf04 	str.w	ip, [r7, #4]!
 811011a:	e7c3      	b.n	81100a4 <rshift+0x28>
 811011c:	4623      	mov	r3, r4
 811011e:	e7e1      	b.n	81100e4 <rshift+0x68>

08110120 <__hexdig_fun>:
 8110120:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8110124:	2b09      	cmp	r3, #9
 8110126:	d802      	bhi.n	811012e <__hexdig_fun+0xe>
 8110128:	3820      	subs	r0, #32
 811012a:	b2c0      	uxtb	r0, r0
 811012c:	4770      	bx	lr
 811012e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8110132:	2b05      	cmp	r3, #5
 8110134:	d801      	bhi.n	811013a <__hexdig_fun+0x1a>
 8110136:	3847      	subs	r0, #71	@ 0x47
 8110138:	e7f7      	b.n	811012a <__hexdig_fun+0xa>
 811013a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 811013e:	2b05      	cmp	r3, #5
 8110140:	d801      	bhi.n	8110146 <__hexdig_fun+0x26>
 8110142:	3827      	subs	r0, #39	@ 0x27
 8110144:	e7f1      	b.n	811012a <__hexdig_fun+0xa>
 8110146:	2000      	movs	r0, #0
 8110148:	4770      	bx	lr
	...

0811014c <__gethex>:
 811014c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110150:	b085      	sub	sp, #20
 8110152:	468a      	mov	sl, r1
 8110154:	9302      	str	r3, [sp, #8]
 8110156:	680b      	ldr	r3, [r1, #0]
 8110158:	9001      	str	r0, [sp, #4]
 811015a:	4690      	mov	r8, r2
 811015c:	1c9c      	adds	r4, r3, #2
 811015e:	46a1      	mov	r9, r4
 8110160:	f814 0b01 	ldrb.w	r0, [r4], #1
 8110164:	2830      	cmp	r0, #48	@ 0x30
 8110166:	d0fa      	beq.n	811015e <__gethex+0x12>
 8110168:	eba9 0303 	sub.w	r3, r9, r3
 811016c:	f1a3 0b02 	sub.w	fp, r3, #2
 8110170:	f7ff ffd6 	bl	8110120 <__hexdig_fun>
 8110174:	4605      	mov	r5, r0
 8110176:	2800      	cmp	r0, #0
 8110178:	d168      	bne.n	811024c <__gethex+0x100>
 811017a:	49a0      	ldr	r1, [pc, #640]	@ (81103fc <__gethex+0x2b0>)
 811017c:	2201      	movs	r2, #1
 811017e:	4648      	mov	r0, r9
 8110180:	f7ff fefe 	bl	810ff80 <strncmp>
 8110184:	4607      	mov	r7, r0
 8110186:	2800      	cmp	r0, #0
 8110188:	d167      	bne.n	811025a <__gethex+0x10e>
 811018a:	f899 0001 	ldrb.w	r0, [r9, #1]
 811018e:	4626      	mov	r6, r4
 8110190:	f7ff ffc6 	bl	8110120 <__hexdig_fun>
 8110194:	2800      	cmp	r0, #0
 8110196:	d062      	beq.n	811025e <__gethex+0x112>
 8110198:	4623      	mov	r3, r4
 811019a:	7818      	ldrb	r0, [r3, #0]
 811019c:	2830      	cmp	r0, #48	@ 0x30
 811019e:	4699      	mov	r9, r3
 81101a0:	f103 0301 	add.w	r3, r3, #1
 81101a4:	d0f9      	beq.n	811019a <__gethex+0x4e>
 81101a6:	f7ff ffbb 	bl	8110120 <__hexdig_fun>
 81101aa:	fab0 f580 	clz	r5, r0
 81101ae:	096d      	lsrs	r5, r5, #5
 81101b0:	f04f 0b01 	mov.w	fp, #1
 81101b4:	464a      	mov	r2, r9
 81101b6:	4616      	mov	r6, r2
 81101b8:	3201      	adds	r2, #1
 81101ba:	7830      	ldrb	r0, [r6, #0]
 81101bc:	f7ff ffb0 	bl	8110120 <__hexdig_fun>
 81101c0:	2800      	cmp	r0, #0
 81101c2:	d1f8      	bne.n	81101b6 <__gethex+0x6a>
 81101c4:	498d      	ldr	r1, [pc, #564]	@ (81103fc <__gethex+0x2b0>)
 81101c6:	2201      	movs	r2, #1
 81101c8:	4630      	mov	r0, r6
 81101ca:	f7ff fed9 	bl	810ff80 <strncmp>
 81101ce:	2800      	cmp	r0, #0
 81101d0:	d13f      	bne.n	8110252 <__gethex+0x106>
 81101d2:	b944      	cbnz	r4, 81101e6 <__gethex+0x9a>
 81101d4:	1c74      	adds	r4, r6, #1
 81101d6:	4622      	mov	r2, r4
 81101d8:	4616      	mov	r6, r2
 81101da:	3201      	adds	r2, #1
 81101dc:	7830      	ldrb	r0, [r6, #0]
 81101de:	f7ff ff9f 	bl	8110120 <__hexdig_fun>
 81101e2:	2800      	cmp	r0, #0
 81101e4:	d1f8      	bne.n	81101d8 <__gethex+0x8c>
 81101e6:	1ba4      	subs	r4, r4, r6
 81101e8:	00a7      	lsls	r7, r4, #2
 81101ea:	7833      	ldrb	r3, [r6, #0]
 81101ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 81101f0:	2b50      	cmp	r3, #80	@ 0x50
 81101f2:	d13e      	bne.n	8110272 <__gethex+0x126>
 81101f4:	7873      	ldrb	r3, [r6, #1]
 81101f6:	2b2b      	cmp	r3, #43	@ 0x2b
 81101f8:	d033      	beq.n	8110262 <__gethex+0x116>
 81101fa:	2b2d      	cmp	r3, #45	@ 0x2d
 81101fc:	d034      	beq.n	8110268 <__gethex+0x11c>
 81101fe:	1c71      	adds	r1, r6, #1
 8110200:	2400      	movs	r4, #0
 8110202:	7808      	ldrb	r0, [r1, #0]
 8110204:	f7ff ff8c 	bl	8110120 <__hexdig_fun>
 8110208:	1e43      	subs	r3, r0, #1
 811020a:	b2db      	uxtb	r3, r3
 811020c:	2b18      	cmp	r3, #24
 811020e:	d830      	bhi.n	8110272 <__gethex+0x126>
 8110210:	f1a0 0210 	sub.w	r2, r0, #16
 8110214:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8110218:	f7ff ff82 	bl	8110120 <__hexdig_fun>
 811021c:	f100 3cff 	add.w	ip, r0, #4294967295
 8110220:	fa5f fc8c 	uxtb.w	ip, ip
 8110224:	f1bc 0f18 	cmp.w	ip, #24
 8110228:	f04f 030a 	mov.w	r3, #10
 811022c:	d91e      	bls.n	811026c <__gethex+0x120>
 811022e:	b104      	cbz	r4, 8110232 <__gethex+0xe6>
 8110230:	4252      	negs	r2, r2
 8110232:	4417      	add	r7, r2
 8110234:	f8ca 1000 	str.w	r1, [sl]
 8110238:	b1ed      	cbz	r5, 8110276 <__gethex+0x12a>
 811023a:	f1bb 0f00 	cmp.w	fp, #0
 811023e:	bf0c      	ite	eq
 8110240:	2506      	moveq	r5, #6
 8110242:	2500      	movne	r5, #0
 8110244:	4628      	mov	r0, r5
 8110246:	b005      	add	sp, #20
 8110248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811024c:	2500      	movs	r5, #0
 811024e:	462c      	mov	r4, r5
 8110250:	e7b0      	b.n	81101b4 <__gethex+0x68>
 8110252:	2c00      	cmp	r4, #0
 8110254:	d1c7      	bne.n	81101e6 <__gethex+0x9a>
 8110256:	4627      	mov	r7, r4
 8110258:	e7c7      	b.n	81101ea <__gethex+0x9e>
 811025a:	464e      	mov	r6, r9
 811025c:	462f      	mov	r7, r5
 811025e:	2501      	movs	r5, #1
 8110260:	e7c3      	b.n	81101ea <__gethex+0x9e>
 8110262:	2400      	movs	r4, #0
 8110264:	1cb1      	adds	r1, r6, #2
 8110266:	e7cc      	b.n	8110202 <__gethex+0xb6>
 8110268:	2401      	movs	r4, #1
 811026a:	e7fb      	b.n	8110264 <__gethex+0x118>
 811026c:	fb03 0002 	mla	r0, r3, r2, r0
 8110270:	e7ce      	b.n	8110210 <__gethex+0xc4>
 8110272:	4631      	mov	r1, r6
 8110274:	e7de      	b.n	8110234 <__gethex+0xe8>
 8110276:	eba6 0309 	sub.w	r3, r6, r9
 811027a:	3b01      	subs	r3, #1
 811027c:	4629      	mov	r1, r5
 811027e:	2b07      	cmp	r3, #7
 8110280:	dc0a      	bgt.n	8110298 <__gethex+0x14c>
 8110282:	9801      	ldr	r0, [sp, #4]
 8110284:	f7fd ff84 	bl	810e190 <_Balloc>
 8110288:	4604      	mov	r4, r0
 811028a:	b940      	cbnz	r0, 811029e <__gethex+0x152>
 811028c:	4b5c      	ldr	r3, [pc, #368]	@ (8110400 <__gethex+0x2b4>)
 811028e:	4602      	mov	r2, r0
 8110290:	21e4      	movs	r1, #228	@ 0xe4
 8110292:	485c      	ldr	r0, [pc, #368]	@ (8110404 <__gethex+0x2b8>)
 8110294:	f7ff fec0 	bl	8110018 <__assert_func>
 8110298:	3101      	adds	r1, #1
 811029a:	105b      	asrs	r3, r3, #1
 811029c:	e7ef      	b.n	811027e <__gethex+0x132>
 811029e:	f100 0a14 	add.w	sl, r0, #20
 81102a2:	2300      	movs	r3, #0
 81102a4:	4655      	mov	r5, sl
 81102a6:	469b      	mov	fp, r3
 81102a8:	45b1      	cmp	r9, r6
 81102aa:	d337      	bcc.n	811031c <__gethex+0x1d0>
 81102ac:	f845 bb04 	str.w	fp, [r5], #4
 81102b0:	eba5 050a 	sub.w	r5, r5, sl
 81102b4:	10ad      	asrs	r5, r5, #2
 81102b6:	6125      	str	r5, [r4, #16]
 81102b8:	4658      	mov	r0, fp
 81102ba:	f7fe f85b 	bl	810e374 <__hi0bits>
 81102be:	016d      	lsls	r5, r5, #5
 81102c0:	f8d8 6000 	ldr.w	r6, [r8]
 81102c4:	1a2d      	subs	r5, r5, r0
 81102c6:	42b5      	cmp	r5, r6
 81102c8:	dd54      	ble.n	8110374 <__gethex+0x228>
 81102ca:	1bad      	subs	r5, r5, r6
 81102cc:	4629      	mov	r1, r5
 81102ce:	4620      	mov	r0, r4
 81102d0:	f7fe fbef 	bl	810eab2 <__any_on>
 81102d4:	4681      	mov	r9, r0
 81102d6:	b178      	cbz	r0, 81102f8 <__gethex+0x1ac>
 81102d8:	1e6b      	subs	r3, r5, #1
 81102da:	1159      	asrs	r1, r3, #5
 81102dc:	f003 021f 	and.w	r2, r3, #31
 81102e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 81102e4:	f04f 0901 	mov.w	r9, #1
 81102e8:	fa09 f202 	lsl.w	r2, r9, r2
 81102ec:	420a      	tst	r2, r1
 81102ee:	d003      	beq.n	81102f8 <__gethex+0x1ac>
 81102f0:	454b      	cmp	r3, r9
 81102f2:	dc36      	bgt.n	8110362 <__gethex+0x216>
 81102f4:	f04f 0902 	mov.w	r9, #2
 81102f8:	4629      	mov	r1, r5
 81102fa:	4620      	mov	r0, r4
 81102fc:	f7ff febe 	bl	811007c <rshift>
 8110300:	442f      	add	r7, r5
 8110302:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8110306:	42bb      	cmp	r3, r7
 8110308:	da42      	bge.n	8110390 <__gethex+0x244>
 811030a:	9801      	ldr	r0, [sp, #4]
 811030c:	4621      	mov	r1, r4
 811030e:	f7fd ff7f 	bl	810e210 <_Bfree>
 8110312:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8110314:	2300      	movs	r3, #0
 8110316:	6013      	str	r3, [r2, #0]
 8110318:	25a3      	movs	r5, #163	@ 0xa3
 811031a:	e793      	b.n	8110244 <__gethex+0xf8>
 811031c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8110320:	2a2e      	cmp	r2, #46	@ 0x2e
 8110322:	d012      	beq.n	811034a <__gethex+0x1fe>
 8110324:	2b20      	cmp	r3, #32
 8110326:	d104      	bne.n	8110332 <__gethex+0x1e6>
 8110328:	f845 bb04 	str.w	fp, [r5], #4
 811032c:	f04f 0b00 	mov.w	fp, #0
 8110330:	465b      	mov	r3, fp
 8110332:	7830      	ldrb	r0, [r6, #0]
 8110334:	9303      	str	r3, [sp, #12]
 8110336:	f7ff fef3 	bl	8110120 <__hexdig_fun>
 811033a:	9b03      	ldr	r3, [sp, #12]
 811033c:	f000 000f 	and.w	r0, r0, #15
 8110340:	4098      	lsls	r0, r3
 8110342:	ea4b 0b00 	orr.w	fp, fp, r0
 8110346:	3304      	adds	r3, #4
 8110348:	e7ae      	b.n	81102a8 <__gethex+0x15c>
 811034a:	45b1      	cmp	r9, r6
 811034c:	d8ea      	bhi.n	8110324 <__gethex+0x1d8>
 811034e:	492b      	ldr	r1, [pc, #172]	@ (81103fc <__gethex+0x2b0>)
 8110350:	9303      	str	r3, [sp, #12]
 8110352:	2201      	movs	r2, #1
 8110354:	4630      	mov	r0, r6
 8110356:	f7ff fe13 	bl	810ff80 <strncmp>
 811035a:	9b03      	ldr	r3, [sp, #12]
 811035c:	2800      	cmp	r0, #0
 811035e:	d1e1      	bne.n	8110324 <__gethex+0x1d8>
 8110360:	e7a2      	b.n	81102a8 <__gethex+0x15c>
 8110362:	1ea9      	subs	r1, r5, #2
 8110364:	4620      	mov	r0, r4
 8110366:	f7fe fba4 	bl	810eab2 <__any_on>
 811036a:	2800      	cmp	r0, #0
 811036c:	d0c2      	beq.n	81102f4 <__gethex+0x1a8>
 811036e:	f04f 0903 	mov.w	r9, #3
 8110372:	e7c1      	b.n	81102f8 <__gethex+0x1ac>
 8110374:	da09      	bge.n	811038a <__gethex+0x23e>
 8110376:	1b75      	subs	r5, r6, r5
 8110378:	4621      	mov	r1, r4
 811037a:	9801      	ldr	r0, [sp, #4]
 811037c:	462a      	mov	r2, r5
 811037e:	f7fe f95f 	bl	810e640 <__lshift>
 8110382:	1b7f      	subs	r7, r7, r5
 8110384:	4604      	mov	r4, r0
 8110386:	f100 0a14 	add.w	sl, r0, #20
 811038a:	f04f 0900 	mov.w	r9, #0
 811038e:	e7b8      	b.n	8110302 <__gethex+0x1b6>
 8110390:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8110394:	42bd      	cmp	r5, r7
 8110396:	dd6f      	ble.n	8110478 <__gethex+0x32c>
 8110398:	1bed      	subs	r5, r5, r7
 811039a:	42ae      	cmp	r6, r5
 811039c:	dc34      	bgt.n	8110408 <__gethex+0x2bc>
 811039e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 81103a2:	2b02      	cmp	r3, #2
 81103a4:	d022      	beq.n	81103ec <__gethex+0x2a0>
 81103a6:	2b03      	cmp	r3, #3
 81103a8:	d024      	beq.n	81103f4 <__gethex+0x2a8>
 81103aa:	2b01      	cmp	r3, #1
 81103ac:	d115      	bne.n	81103da <__gethex+0x28e>
 81103ae:	42ae      	cmp	r6, r5
 81103b0:	d113      	bne.n	81103da <__gethex+0x28e>
 81103b2:	2e01      	cmp	r6, #1
 81103b4:	d10b      	bne.n	81103ce <__gethex+0x282>
 81103b6:	9a02      	ldr	r2, [sp, #8]
 81103b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 81103bc:	6013      	str	r3, [r2, #0]
 81103be:	2301      	movs	r3, #1
 81103c0:	6123      	str	r3, [r4, #16]
 81103c2:	f8ca 3000 	str.w	r3, [sl]
 81103c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81103c8:	2562      	movs	r5, #98	@ 0x62
 81103ca:	601c      	str	r4, [r3, #0]
 81103cc:	e73a      	b.n	8110244 <__gethex+0xf8>
 81103ce:	1e71      	subs	r1, r6, #1
 81103d0:	4620      	mov	r0, r4
 81103d2:	f7fe fb6e 	bl	810eab2 <__any_on>
 81103d6:	2800      	cmp	r0, #0
 81103d8:	d1ed      	bne.n	81103b6 <__gethex+0x26a>
 81103da:	9801      	ldr	r0, [sp, #4]
 81103dc:	4621      	mov	r1, r4
 81103de:	f7fd ff17 	bl	810e210 <_Bfree>
 81103e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 81103e4:	2300      	movs	r3, #0
 81103e6:	6013      	str	r3, [r2, #0]
 81103e8:	2550      	movs	r5, #80	@ 0x50
 81103ea:	e72b      	b.n	8110244 <__gethex+0xf8>
 81103ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81103ee:	2b00      	cmp	r3, #0
 81103f0:	d1f3      	bne.n	81103da <__gethex+0x28e>
 81103f2:	e7e0      	b.n	81103b6 <__gethex+0x26a>
 81103f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81103f6:	2b00      	cmp	r3, #0
 81103f8:	d1dd      	bne.n	81103b6 <__gethex+0x26a>
 81103fa:	e7ee      	b.n	81103da <__gethex+0x28e>
 81103fc:	081120e0 	.word	0x081120e0
 8110400:	08111f79 	.word	0x08111f79
 8110404:	0811228e 	.word	0x0811228e
 8110408:	1e6f      	subs	r7, r5, #1
 811040a:	f1b9 0f00 	cmp.w	r9, #0
 811040e:	d130      	bne.n	8110472 <__gethex+0x326>
 8110410:	b127      	cbz	r7, 811041c <__gethex+0x2d0>
 8110412:	4639      	mov	r1, r7
 8110414:	4620      	mov	r0, r4
 8110416:	f7fe fb4c 	bl	810eab2 <__any_on>
 811041a:	4681      	mov	r9, r0
 811041c:	117a      	asrs	r2, r7, #5
 811041e:	2301      	movs	r3, #1
 8110420:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8110424:	f007 071f 	and.w	r7, r7, #31
 8110428:	40bb      	lsls	r3, r7
 811042a:	4213      	tst	r3, r2
 811042c:	4629      	mov	r1, r5
 811042e:	4620      	mov	r0, r4
 8110430:	bf18      	it	ne
 8110432:	f049 0902 	orrne.w	r9, r9, #2
 8110436:	f7ff fe21 	bl	811007c <rshift>
 811043a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 811043e:	1b76      	subs	r6, r6, r5
 8110440:	2502      	movs	r5, #2
 8110442:	f1b9 0f00 	cmp.w	r9, #0
 8110446:	d047      	beq.n	81104d8 <__gethex+0x38c>
 8110448:	f8d8 300c 	ldr.w	r3, [r8, #12]
 811044c:	2b02      	cmp	r3, #2
 811044e:	d015      	beq.n	811047c <__gethex+0x330>
 8110450:	2b03      	cmp	r3, #3
 8110452:	d017      	beq.n	8110484 <__gethex+0x338>
 8110454:	2b01      	cmp	r3, #1
 8110456:	d109      	bne.n	811046c <__gethex+0x320>
 8110458:	f019 0f02 	tst.w	r9, #2
 811045c:	d006      	beq.n	811046c <__gethex+0x320>
 811045e:	f8da 3000 	ldr.w	r3, [sl]
 8110462:	ea49 0903 	orr.w	r9, r9, r3
 8110466:	f019 0f01 	tst.w	r9, #1
 811046a:	d10e      	bne.n	811048a <__gethex+0x33e>
 811046c:	f045 0510 	orr.w	r5, r5, #16
 8110470:	e032      	b.n	81104d8 <__gethex+0x38c>
 8110472:	f04f 0901 	mov.w	r9, #1
 8110476:	e7d1      	b.n	811041c <__gethex+0x2d0>
 8110478:	2501      	movs	r5, #1
 811047a:	e7e2      	b.n	8110442 <__gethex+0x2f6>
 811047c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811047e:	f1c3 0301 	rsb	r3, r3, #1
 8110482:	930f      	str	r3, [sp, #60]	@ 0x3c
 8110484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8110486:	2b00      	cmp	r3, #0
 8110488:	d0f0      	beq.n	811046c <__gethex+0x320>
 811048a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 811048e:	f104 0314 	add.w	r3, r4, #20
 8110492:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8110496:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 811049a:	f04f 0c00 	mov.w	ip, #0
 811049e:	4618      	mov	r0, r3
 81104a0:	f853 2b04 	ldr.w	r2, [r3], #4
 81104a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 81104a8:	d01b      	beq.n	81104e2 <__gethex+0x396>
 81104aa:	3201      	adds	r2, #1
 81104ac:	6002      	str	r2, [r0, #0]
 81104ae:	2d02      	cmp	r5, #2
 81104b0:	f104 0314 	add.w	r3, r4, #20
 81104b4:	d13c      	bne.n	8110530 <__gethex+0x3e4>
 81104b6:	f8d8 2000 	ldr.w	r2, [r8]
 81104ba:	3a01      	subs	r2, #1
 81104bc:	42b2      	cmp	r2, r6
 81104be:	d109      	bne.n	81104d4 <__gethex+0x388>
 81104c0:	1171      	asrs	r1, r6, #5
 81104c2:	2201      	movs	r2, #1
 81104c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 81104c8:	f006 061f 	and.w	r6, r6, #31
 81104cc:	fa02 f606 	lsl.w	r6, r2, r6
 81104d0:	421e      	tst	r6, r3
 81104d2:	d13a      	bne.n	811054a <__gethex+0x3fe>
 81104d4:	f045 0520 	orr.w	r5, r5, #32
 81104d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81104da:	601c      	str	r4, [r3, #0]
 81104dc:	9b02      	ldr	r3, [sp, #8]
 81104de:	601f      	str	r7, [r3, #0]
 81104e0:	e6b0      	b.n	8110244 <__gethex+0xf8>
 81104e2:	4299      	cmp	r1, r3
 81104e4:	f843 cc04 	str.w	ip, [r3, #-4]
 81104e8:	d8d9      	bhi.n	811049e <__gethex+0x352>
 81104ea:	68a3      	ldr	r3, [r4, #8]
 81104ec:	459b      	cmp	fp, r3
 81104ee:	db17      	blt.n	8110520 <__gethex+0x3d4>
 81104f0:	6861      	ldr	r1, [r4, #4]
 81104f2:	9801      	ldr	r0, [sp, #4]
 81104f4:	3101      	adds	r1, #1
 81104f6:	f7fd fe4b 	bl	810e190 <_Balloc>
 81104fa:	4681      	mov	r9, r0
 81104fc:	b918      	cbnz	r0, 8110506 <__gethex+0x3ba>
 81104fe:	4b1a      	ldr	r3, [pc, #104]	@ (8110568 <__gethex+0x41c>)
 8110500:	4602      	mov	r2, r0
 8110502:	2184      	movs	r1, #132	@ 0x84
 8110504:	e6c5      	b.n	8110292 <__gethex+0x146>
 8110506:	6922      	ldr	r2, [r4, #16]
 8110508:	3202      	adds	r2, #2
 811050a:	f104 010c 	add.w	r1, r4, #12
 811050e:	0092      	lsls	r2, r2, #2
 8110510:	300c      	adds	r0, #12
 8110512:	f7fc feda 	bl	810d2ca <memcpy>
 8110516:	4621      	mov	r1, r4
 8110518:	9801      	ldr	r0, [sp, #4]
 811051a:	f7fd fe79 	bl	810e210 <_Bfree>
 811051e:	464c      	mov	r4, r9
 8110520:	6923      	ldr	r3, [r4, #16]
 8110522:	1c5a      	adds	r2, r3, #1
 8110524:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8110528:	6122      	str	r2, [r4, #16]
 811052a:	2201      	movs	r2, #1
 811052c:	615a      	str	r2, [r3, #20]
 811052e:	e7be      	b.n	81104ae <__gethex+0x362>
 8110530:	6922      	ldr	r2, [r4, #16]
 8110532:	455a      	cmp	r2, fp
 8110534:	dd0b      	ble.n	811054e <__gethex+0x402>
 8110536:	2101      	movs	r1, #1
 8110538:	4620      	mov	r0, r4
 811053a:	f7ff fd9f 	bl	811007c <rshift>
 811053e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8110542:	3701      	adds	r7, #1
 8110544:	42bb      	cmp	r3, r7
 8110546:	f6ff aee0 	blt.w	811030a <__gethex+0x1be>
 811054a:	2501      	movs	r5, #1
 811054c:	e7c2      	b.n	81104d4 <__gethex+0x388>
 811054e:	f016 061f 	ands.w	r6, r6, #31
 8110552:	d0fa      	beq.n	811054a <__gethex+0x3fe>
 8110554:	4453      	add	r3, sl
 8110556:	f1c6 0620 	rsb	r6, r6, #32
 811055a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 811055e:	f7fd ff09 	bl	810e374 <__hi0bits>
 8110562:	42b0      	cmp	r0, r6
 8110564:	dbe7      	blt.n	8110536 <__gethex+0x3ea>
 8110566:	e7f0      	b.n	811054a <__gethex+0x3fe>
 8110568:	08111f79 	.word	0x08111f79

0811056c <L_shift>:
 811056c:	f1c2 0208 	rsb	r2, r2, #8
 8110570:	0092      	lsls	r2, r2, #2
 8110572:	b570      	push	{r4, r5, r6, lr}
 8110574:	f1c2 0620 	rsb	r6, r2, #32
 8110578:	6843      	ldr	r3, [r0, #4]
 811057a:	6804      	ldr	r4, [r0, #0]
 811057c:	fa03 f506 	lsl.w	r5, r3, r6
 8110580:	432c      	orrs	r4, r5
 8110582:	40d3      	lsrs	r3, r2
 8110584:	6004      	str	r4, [r0, #0]
 8110586:	f840 3f04 	str.w	r3, [r0, #4]!
 811058a:	4288      	cmp	r0, r1
 811058c:	d3f4      	bcc.n	8110578 <L_shift+0xc>
 811058e:	bd70      	pop	{r4, r5, r6, pc}

08110590 <__match>:
 8110590:	b530      	push	{r4, r5, lr}
 8110592:	6803      	ldr	r3, [r0, #0]
 8110594:	3301      	adds	r3, #1
 8110596:	f811 4b01 	ldrb.w	r4, [r1], #1
 811059a:	b914      	cbnz	r4, 81105a2 <__match+0x12>
 811059c:	6003      	str	r3, [r0, #0]
 811059e:	2001      	movs	r0, #1
 81105a0:	bd30      	pop	{r4, r5, pc}
 81105a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81105a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 81105aa:	2d19      	cmp	r5, #25
 81105ac:	bf98      	it	ls
 81105ae:	3220      	addls	r2, #32
 81105b0:	42a2      	cmp	r2, r4
 81105b2:	d0f0      	beq.n	8110596 <__match+0x6>
 81105b4:	2000      	movs	r0, #0
 81105b6:	e7f3      	b.n	81105a0 <__match+0x10>

081105b8 <__hexnan>:
 81105b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81105bc:	680b      	ldr	r3, [r1, #0]
 81105be:	6801      	ldr	r1, [r0, #0]
 81105c0:	115e      	asrs	r6, r3, #5
 81105c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 81105c6:	f013 031f 	ands.w	r3, r3, #31
 81105ca:	b087      	sub	sp, #28
 81105cc:	bf18      	it	ne
 81105ce:	3604      	addne	r6, #4
 81105d0:	2500      	movs	r5, #0
 81105d2:	1f37      	subs	r7, r6, #4
 81105d4:	4682      	mov	sl, r0
 81105d6:	4690      	mov	r8, r2
 81105d8:	9301      	str	r3, [sp, #4]
 81105da:	f846 5c04 	str.w	r5, [r6, #-4]
 81105de:	46b9      	mov	r9, r7
 81105e0:	463c      	mov	r4, r7
 81105e2:	9502      	str	r5, [sp, #8]
 81105e4:	46ab      	mov	fp, r5
 81105e6:	784a      	ldrb	r2, [r1, #1]
 81105e8:	1c4b      	adds	r3, r1, #1
 81105ea:	9303      	str	r3, [sp, #12]
 81105ec:	b342      	cbz	r2, 8110640 <__hexnan+0x88>
 81105ee:	4610      	mov	r0, r2
 81105f0:	9105      	str	r1, [sp, #20]
 81105f2:	9204      	str	r2, [sp, #16]
 81105f4:	f7ff fd94 	bl	8110120 <__hexdig_fun>
 81105f8:	2800      	cmp	r0, #0
 81105fa:	d151      	bne.n	81106a0 <__hexnan+0xe8>
 81105fc:	9a04      	ldr	r2, [sp, #16]
 81105fe:	9905      	ldr	r1, [sp, #20]
 8110600:	2a20      	cmp	r2, #32
 8110602:	d818      	bhi.n	8110636 <__hexnan+0x7e>
 8110604:	9b02      	ldr	r3, [sp, #8]
 8110606:	459b      	cmp	fp, r3
 8110608:	dd13      	ble.n	8110632 <__hexnan+0x7a>
 811060a:	454c      	cmp	r4, r9
 811060c:	d206      	bcs.n	811061c <__hexnan+0x64>
 811060e:	2d07      	cmp	r5, #7
 8110610:	dc04      	bgt.n	811061c <__hexnan+0x64>
 8110612:	462a      	mov	r2, r5
 8110614:	4649      	mov	r1, r9
 8110616:	4620      	mov	r0, r4
 8110618:	f7ff ffa8 	bl	811056c <L_shift>
 811061c:	4544      	cmp	r4, r8
 811061e:	d952      	bls.n	81106c6 <__hexnan+0x10e>
 8110620:	2300      	movs	r3, #0
 8110622:	f1a4 0904 	sub.w	r9, r4, #4
 8110626:	f844 3c04 	str.w	r3, [r4, #-4]
 811062a:	f8cd b008 	str.w	fp, [sp, #8]
 811062e:	464c      	mov	r4, r9
 8110630:	461d      	mov	r5, r3
 8110632:	9903      	ldr	r1, [sp, #12]
 8110634:	e7d7      	b.n	81105e6 <__hexnan+0x2e>
 8110636:	2a29      	cmp	r2, #41	@ 0x29
 8110638:	d157      	bne.n	81106ea <__hexnan+0x132>
 811063a:	3102      	adds	r1, #2
 811063c:	f8ca 1000 	str.w	r1, [sl]
 8110640:	f1bb 0f00 	cmp.w	fp, #0
 8110644:	d051      	beq.n	81106ea <__hexnan+0x132>
 8110646:	454c      	cmp	r4, r9
 8110648:	d206      	bcs.n	8110658 <__hexnan+0xa0>
 811064a:	2d07      	cmp	r5, #7
 811064c:	dc04      	bgt.n	8110658 <__hexnan+0xa0>
 811064e:	462a      	mov	r2, r5
 8110650:	4649      	mov	r1, r9
 8110652:	4620      	mov	r0, r4
 8110654:	f7ff ff8a 	bl	811056c <L_shift>
 8110658:	4544      	cmp	r4, r8
 811065a:	d936      	bls.n	81106ca <__hexnan+0x112>
 811065c:	f1a8 0204 	sub.w	r2, r8, #4
 8110660:	4623      	mov	r3, r4
 8110662:	f853 1b04 	ldr.w	r1, [r3], #4
 8110666:	f842 1f04 	str.w	r1, [r2, #4]!
 811066a:	429f      	cmp	r7, r3
 811066c:	d2f9      	bcs.n	8110662 <__hexnan+0xaa>
 811066e:	1b3b      	subs	r3, r7, r4
 8110670:	f023 0303 	bic.w	r3, r3, #3
 8110674:	3304      	adds	r3, #4
 8110676:	3401      	adds	r4, #1
 8110678:	3e03      	subs	r6, #3
 811067a:	42b4      	cmp	r4, r6
 811067c:	bf88      	it	hi
 811067e:	2304      	movhi	r3, #4
 8110680:	4443      	add	r3, r8
 8110682:	2200      	movs	r2, #0
 8110684:	f843 2b04 	str.w	r2, [r3], #4
 8110688:	429f      	cmp	r7, r3
 811068a:	d2fb      	bcs.n	8110684 <__hexnan+0xcc>
 811068c:	683b      	ldr	r3, [r7, #0]
 811068e:	b91b      	cbnz	r3, 8110698 <__hexnan+0xe0>
 8110690:	4547      	cmp	r7, r8
 8110692:	d128      	bne.n	81106e6 <__hexnan+0x12e>
 8110694:	2301      	movs	r3, #1
 8110696:	603b      	str	r3, [r7, #0]
 8110698:	2005      	movs	r0, #5
 811069a:	b007      	add	sp, #28
 811069c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81106a0:	3501      	adds	r5, #1
 81106a2:	2d08      	cmp	r5, #8
 81106a4:	f10b 0b01 	add.w	fp, fp, #1
 81106a8:	dd06      	ble.n	81106b8 <__hexnan+0x100>
 81106aa:	4544      	cmp	r4, r8
 81106ac:	d9c1      	bls.n	8110632 <__hexnan+0x7a>
 81106ae:	2300      	movs	r3, #0
 81106b0:	f844 3c04 	str.w	r3, [r4, #-4]
 81106b4:	2501      	movs	r5, #1
 81106b6:	3c04      	subs	r4, #4
 81106b8:	6822      	ldr	r2, [r4, #0]
 81106ba:	f000 000f 	and.w	r0, r0, #15
 81106be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 81106c2:	6020      	str	r0, [r4, #0]
 81106c4:	e7b5      	b.n	8110632 <__hexnan+0x7a>
 81106c6:	2508      	movs	r5, #8
 81106c8:	e7b3      	b.n	8110632 <__hexnan+0x7a>
 81106ca:	9b01      	ldr	r3, [sp, #4]
 81106cc:	2b00      	cmp	r3, #0
 81106ce:	d0dd      	beq.n	811068c <__hexnan+0xd4>
 81106d0:	f1c3 0320 	rsb	r3, r3, #32
 81106d4:	f04f 32ff 	mov.w	r2, #4294967295
 81106d8:	40da      	lsrs	r2, r3
 81106da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 81106de:	4013      	ands	r3, r2
 81106e0:	f846 3c04 	str.w	r3, [r6, #-4]
 81106e4:	e7d2      	b.n	811068c <__hexnan+0xd4>
 81106e6:	3f04      	subs	r7, #4
 81106e8:	e7d0      	b.n	811068c <__hexnan+0xd4>
 81106ea:	2004      	movs	r0, #4
 81106ec:	e7d5      	b.n	811069a <__hexnan+0xe2>

081106ee <__ascii_mbtowc>:
 81106ee:	b082      	sub	sp, #8
 81106f0:	b901      	cbnz	r1, 81106f4 <__ascii_mbtowc+0x6>
 81106f2:	a901      	add	r1, sp, #4
 81106f4:	b142      	cbz	r2, 8110708 <__ascii_mbtowc+0x1a>
 81106f6:	b14b      	cbz	r3, 811070c <__ascii_mbtowc+0x1e>
 81106f8:	7813      	ldrb	r3, [r2, #0]
 81106fa:	600b      	str	r3, [r1, #0]
 81106fc:	7812      	ldrb	r2, [r2, #0]
 81106fe:	1e10      	subs	r0, r2, #0
 8110700:	bf18      	it	ne
 8110702:	2001      	movne	r0, #1
 8110704:	b002      	add	sp, #8
 8110706:	4770      	bx	lr
 8110708:	4610      	mov	r0, r2
 811070a:	e7fb      	b.n	8110704 <__ascii_mbtowc+0x16>
 811070c:	f06f 0001 	mvn.w	r0, #1
 8110710:	e7f8      	b.n	8110704 <__ascii_mbtowc+0x16>

08110712 <_realloc_r>:
 8110712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8110716:	4680      	mov	r8, r0
 8110718:	4615      	mov	r5, r2
 811071a:	460c      	mov	r4, r1
 811071c:	b921      	cbnz	r1, 8110728 <_realloc_r+0x16>
 811071e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8110722:	4611      	mov	r1, r2
 8110724:	f7fd bca8 	b.w	810e078 <_malloc_r>
 8110728:	b92a      	cbnz	r2, 8110736 <_realloc_r+0x24>
 811072a:	f7fd fc31 	bl	810df90 <_free_r>
 811072e:	2400      	movs	r4, #0
 8110730:	4620      	mov	r0, r4
 8110732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8110736:	f000 f840 	bl	81107ba <_malloc_usable_size_r>
 811073a:	4285      	cmp	r5, r0
 811073c:	4606      	mov	r6, r0
 811073e:	d802      	bhi.n	8110746 <_realloc_r+0x34>
 8110740:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8110744:	d8f4      	bhi.n	8110730 <_realloc_r+0x1e>
 8110746:	4629      	mov	r1, r5
 8110748:	4640      	mov	r0, r8
 811074a:	f7fd fc95 	bl	810e078 <_malloc_r>
 811074e:	4607      	mov	r7, r0
 8110750:	2800      	cmp	r0, #0
 8110752:	d0ec      	beq.n	811072e <_realloc_r+0x1c>
 8110754:	42b5      	cmp	r5, r6
 8110756:	462a      	mov	r2, r5
 8110758:	4621      	mov	r1, r4
 811075a:	bf28      	it	cs
 811075c:	4632      	movcs	r2, r6
 811075e:	f7fc fdb4 	bl	810d2ca <memcpy>
 8110762:	4621      	mov	r1, r4
 8110764:	4640      	mov	r0, r8
 8110766:	f7fd fc13 	bl	810df90 <_free_r>
 811076a:	463c      	mov	r4, r7
 811076c:	e7e0      	b.n	8110730 <_realloc_r+0x1e>

0811076e <__ascii_wctomb>:
 811076e:	4603      	mov	r3, r0
 8110770:	4608      	mov	r0, r1
 8110772:	b141      	cbz	r1, 8110786 <__ascii_wctomb+0x18>
 8110774:	2aff      	cmp	r2, #255	@ 0xff
 8110776:	d904      	bls.n	8110782 <__ascii_wctomb+0x14>
 8110778:	228a      	movs	r2, #138	@ 0x8a
 811077a:	601a      	str	r2, [r3, #0]
 811077c:	f04f 30ff 	mov.w	r0, #4294967295
 8110780:	4770      	bx	lr
 8110782:	700a      	strb	r2, [r1, #0]
 8110784:	2001      	movs	r0, #1
 8110786:	4770      	bx	lr

08110788 <fiprintf>:
 8110788:	b40e      	push	{r1, r2, r3}
 811078a:	b503      	push	{r0, r1, lr}
 811078c:	4601      	mov	r1, r0
 811078e:	ab03      	add	r3, sp, #12
 8110790:	4805      	ldr	r0, [pc, #20]	@ (81107a8 <fiprintf+0x20>)
 8110792:	f853 2b04 	ldr.w	r2, [r3], #4
 8110796:	6800      	ldr	r0, [r0, #0]
 8110798:	9301      	str	r3, [sp, #4]
 811079a:	f7ff f9b1 	bl	810fb00 <_vfiprintf_r>
 811079e:	b002      	add	sp, #8
 81107a0:	f85d eb04 	ldr.w	lr, [sp], #4
 81107a4:	b003      	add	sp, #12
 81107a6:	4770      	bx	lr
 81107a8:	10000094 	.word	0x10000094

081107ac <abort>:
 81107ac:	b508      	push	{r3, lr}
 81107ae:	2006      	movs	r0, #6
 81107b0:	f000 f834 	bl	811081c <raise>
 81107b4:	2001      	movs	r0, #1
 81107b6:	f7f2 fcbf 	bl	8103138 <_exit>

081107ba <_malloc_usable_size_r>:
 81107ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81107be:	1f18      	subs	r0, r3, #4
 81107c0:	2b00      	cmp	r3, #0
 81107c2:	bfbc      	itt	lt
 81107c4:	580b      	ldrlt	r3, [r1, r0]
 81107c6:	18c0      	addlt	r0, r0, r3
 81107c8:	4770      	bx	lr

081107ca <_raise_r>:
 81107ca:	291f      	cmp	r1, #31
 81107cc:	b538      	push	{r3, r4, r5, lr}
 81107ce:	4605      	mov	r5, r0
 81107d0:	460c      	mov	r4, r1
 81107d2:	d904      	bls.n	81107de <_raise_r+0x14>
 81107d4:	2316      	movs	r3, #22
 81107d6:	6003      	str	r3, [r0, #0]
 81107d8:	f04f 30ff 	mov.w	r0, #4294967295
 81107dc:	bd38      	pop	{r3, r4, r5, pc}
 81107de:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 81107e0:	b112      	cbz	r2, 81107e8 <_raise_r+0x1e>
 81107e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 81107e6:	b94b      	cbnz	r3, 81107fc <_raise_r+0x32>
 81107e8:	4628      	mov	r0, r5
 81107ea:	f000 f831 	bl	8110850 <_getpid_r>
 81107ee:	4622      	mov	r2, r4
 81107f0:	4601      	mov	r1, r0
 81107f2:	4628      	mov	r0, r5
 81107f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 81107f8:	f000 b818 	b.w	811082c <_kill_r>
 81107fc:	2b01      	cmp	r3, #1
 81107fe:	d00a      	beq.n	8110816 <_raise_r+0x4c>
 8110800:	1c59      	adds	r1, r3, #1
 8110802:	d103      	bne.n	811080c <_raise_r+0x42>
 8110804:	2316      	movs	r3, #22
 8110806:	6003      	str	r3, [r0, #0]
 8110808:	2001      	movs	r0, #1
 811080a:	e7e7      	b.n	81107dc <_raise_r+0x12>
 811080c:	2100      	movs	r1, #0
 811080e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8110812:	4620      	mov	r0, r4
 8110814:	4798      	blx	r3
 8110816:	2000      	movs	r0, #0
 8110818:	e7e0      	b.n	81107dc <_raise_r+0x12>
	...

0811081c <raise>:
 811081c:	4b02      	ldr	r3, [pc, #8]	@ (8110828 <raise+0xc>)
 811081e:	4601      	mov	r1, r0
 8110820:	6818      	ldr	r0, [r3, #0]
 8110822:	f7ff bfd2 	b.w	81107ca <_raise_r>
 8110826:	bf00      	nop
 8110828:	10000094 	.word	0x10000094

0811082c <_kill_r>:
 811082c:	b538      	push	{r3, r4, r5, lr}
 811082e:	4d07      	ldr	r5, [pc, #28]	@ (811084c <_kill_r+0x20>)
 8110830:	2300      	movs	r3, #0
 8110832:	4604      	mov	r4, r0
 8110834:	4608      	mov	r0, r1
 8110836:	4611      	mov	r1, r2
 8110838:	602b      	str	r3, [r5, #0]
 811083a:	f7f2 fc6d 	bl	8103118 <_kill>
 811083e:	1c43      	adds	r3, r0, #1
 8110840:	d102      	bne.n	8110848 <_kill_r+0x1c>
 8110842:	682b      	ldr	r3, [r5, #0]
 8110844:	b103      	cbz	r3, 8110848 <_kill_r+0x1c>
 8110846:	6023      	str	r3, [r4, #0]
 8110848:	bd38      	pop	{r3, r4, r5, pc}
 811084a:	bf00      	nop
 811084c:	10000788 	.word	0x10000788

08110850 <_getpid_r>:
 8110850:	f7f2 bc5a 	b.w	8103108 <_getpid>
 8110854:	0000      	movs	r0, r0
	...

08110858 <sin>:
 8110858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 811085a:	ec53 2b10 	vmov	r2, r3, d0
 811085e:	4826      	ldr	r0, [pc, #152]	@ (81108f8 <sin+0xa0>)
 8110860:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8110864:	4281      	cmp	r1, r0
 8110866:	d807      	bhi.n	8110878 <sin+0x20>
 8110868:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 81108f0 <sin+0x98>
 811086c:	2000      	movs	r0, #0
 811086e:	b005      	add	sp, #20
 8110870:	f85d eb04 	ldr.w	lr, [sp], #4
 8110874:	f000 b90c 	b.w	8110a90 <__kernel_sin>
 8110878:	4820      	ldr	r0, [pc, #128]	@ (81108fc <sin+0xa4>)
 811087a:	4281      	cmp	r1, r0
 811087c:	d908      	bls.n	8110890 <sin+0x38>
 811087e:	4610      	mov	r0, r2
 8110880:	4619      	mov	r1, r3
 8110882:	f7ef fd89 	bl	8100398 <__aeabi_dsub>
 8110886:	ec41 0b10 	vmov	d0, r0, r1
 811088a:	b005      	add	sp, #20
 811088c:	f85d fb04 	ldr.w	pc, [sp], #4
 8110890:	4668      	mov	r0, sp
 8110892:	f000 f9b9 	bl	8110c08 <__ieee754_rem_pio2>
 8110896:	f000 0003 	and.w	r0, r0, #3
 811089a:	2801      	cmp	r0, #1
 811089c:	d00c      	beq.n	81108b8 <sin+0x60>
 811089e:	2802      	cmp	r0, #2
 81108a0:	d011      	beq.n	81108c6 <sin+0x6e>
 81108a2:	b9e8      	cbnz	r0, 81108e0 <sin+0x88>
 81108a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 81108a8:	ed9d 0b00 	vldr	d0, [sp]
 81108ac:	2001      	movs	r0, #1
 81108ae:	f000 f8ef 	bl	8110a90 <__kernel_sin>
 81108b2:	ec51 0b10 	vmov	r0, r1, d0
 81108b6:	e7e6      	b.n	8110886 <sin+0x2e>
 81108b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 81108bc:	ed9d 0b00 	vldr	d0, [sp]
 81108c0:	f000 f81e 	bl	8110900 <__kernel_cos>
 81108c4:	e7f5      	b.n	81108b2 <sin+0x5a>
 81108c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 81108ca:	ed9d 0b00 	vldr	d0, [sp]
 81108ce:	2001      	movs	r0, #1
 81108d0:	f000 f8de 	bl	8110a90 <__kernel_sin>
 81108d4:	ec53 2b10 	vmov	r2, r3, d0
 81108d8:	4610      	mov	r0, r2
 81108da:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 81108de:	e7d2      	b.n	8110886 <sin+0x2e>
 81108e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 81108e4:	ed9d 0b00 	vldr	d0, [sp]
 81108e8:	f000 f80a 	bl	8110900 <__kernel_cos>
 81108ec:	e7f2      	b.n	81108d4 <sin+0x7c>
 81108ee:	bf00      	nop
	...
 81108f8:	3fe921fb 	.word	0x3fe921fb
 81108fc:	7fefffff 	.word	0x7fefffff

08110900 <__kernel_cos>:
 8110900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110904:	ec57 6b10 	vmov	r6, r7, d0
 8110908:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 811090c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8110910:	ed8d 1b00 	vstr	d1, [sp]
 8110914:	d206      	bcs.n	8110924 <__kernel_cos+0x24>
 8110916:	4630      	mov	r0, r6
 8110918:	4639      	mov	r1, r7
 811091a:	f7f0 f9a5 	bl	8100c68 <__aeabi_d2iz>
 811091e:	2800      	cmp	r0, #0
 8110920:	f000 8088 	beq.w	8110a34 <__kernel_cos+0x134>
 8110924:	4632      	mov	r2, r6
 8110926:	463b      	mov	r3, r7
 8110928:	4630      	mov	r0, r6
 811092a:	4639      	mov	r1, r7
 811092c:	f7ef feec 	bl	8100708 <__aeabi_dmul>
 8110930:	4b51      	ldr	r3, [pc, #324]	@ (8110a78 <__kernel_cos+0x178>)
 8110932:	2200      	movs	r2, #0
 8110934:	4604      	mov	r4, r0
 8110936:	460d      	mov	r5, r1
 8110938:	f7ef fee6 	bl	8100708 <__aeabi_dmul>
 811093c:	a340      	add	r3, pc, #256	@ (adr r3, 8110a40 <__kernel_cos+0x140>)
 811093e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110942:	4682      	mov	sl, r0
 8110944:	468b      	mov	fp, r1
 8110946:	4620      	mov	r0, r4
 8110948:	4629      	mov	r1, r5
 811094a:	f7ef fedd 	bl	8100708 <__aeabi_dmul>
 811094e:	a33e      	add	r3, pc, #248	@ (adr r3, 8110a48 <__kernel_cos+0x148>)
 8110950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110954:	f7ef fd22 	bl	810039c <__adddf3>
 8110958:	4622      	mov	r2, r4
 811095a:	462b      	mov	r3, r5
 811095c:	f7ef fed4 	bl	8100708 <__aeabi_dmul>
 8110960:	a33b      	add	r3, pc, #236	@ (adr r3, 8110a50 <__kernel_cos+0x150>)
 8110962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110966:	f7ef fd17 	bl	8100398 <__aeabi_dsub>
 811096a:	4622      	mov	r2, r4
 811096c:	462b      	mov	r3, r5
 811096e:	f7ef fecb 	bl	8100708 <__aeabi_dmul>
 8110972:	a339      	add	r3, pc, #228	@ (adr r3, 8110a58 <__kernel_cos+0x158>)
 8110974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110978:	f7ef fd10 	bl	810039c <__adddf3>
 811097c:	4622      	mov	r2, r4
 811097e:	462b      	mov	r3, r5
 8110980:	f7ef fec2 	bl	8100708 <__aeabi_dmul>
 8110984:	a336      	add	r3, pc, #216	@ (adr r3, 8110a60 <__kernel_cos+0x160>)
 8110986:	e9d3 2300 	ldrd	r2, r3, [r3]
 811098a:	f7ef fd05 	bl	8100398 <__aeabi_dsub>
 811098e:	4622      	mov	r2, r4
 8110990:	462b      	mov	r3, r5
 8110992:	f7ef feb9 	bl	8100708 <__aeabi_dmul>
 8110996:	a334      	add	r3, pc, #208	@ (adr r3, 8110a68 <__kernel_cos+0x168>)
 8110998:	e9d3 2300 	ldrd	r2, r3, [r3]
 811099c:	f7ef fcfe 	bl	810039c <__adddf3>
 81109a0:	4622      	mov	r2, r4
 81109a2:	462b      	mov	r3, r5
 81109a4:	f7ef feb0 	bl	8100708 <__aeabi_dmul>
 81109a8:	4622      	mov	r2, r4
 81109aa:	462b      	mov	r3, r5
 81109ac:	f7ef feac 	bl	8100708 <__aeabi_dmul>
 81109b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 81109b4:	4604      	mov	r4, r0
 81109b6:	460d      	mov	r5, r1
 81109b8:	4630      	mov	r0, r6
 81109ba:	4639      	mov	r1, r7
 81109bc:	f7ef fea4 	bl	8100708 <__aeabi_dmul>
 81109c0:	460b      	mov	r3, r1
 81109c2:	4602      	mov	r2, r0
 81109c4:	4629      	mov	r1, r5
 81109c6:	4620      	mov	r0, r4
 81109c8:	f7ef fce6 	bl	8100398 <__aeabi_dsub>
 81109cc:	4b2b      	ldr	r3, [pc, #172]	@ (8110a7c <__kernel_cos+0x17c>)
 81109ce:	4598      	cmp	r8, r3
 81109d0:	4606      	mov	r6, r0
 81109d2:	460f      	mov	r7, r1
 81109d4:	d810      	bhi.n	81109f8 <__kernel_cos+0xf8>
 81109d6:	4602      	mov	r2, r0
 81109d8:	460b      	mov	r3, r1
 81109da:	4650      	mov	r0, sl
 81109dc:	4659      	mov	r1, fp
 81109de:	f7ef fcdb 	bl	8100398 <__aeabi_dsub>
 81109e2:	460b      	mov	r3, r1
 81109e4:	4926      	ldr	r1, [pc, #152]	@ (8110a80 <__kernel_cos+0x180>)
 81109e6:	4602      	mov	r2, r0
 81109e8:	2000      	movs	r0, #0
 81109ea:	f7ef fcd5 	bl	8100398 <__aeabi_dsub>
 81109ee:	ec41 0b10 	vmov	d0, r0, r1
 81109f2:	b003      	add	sp, #12
 81109f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81109f8:	4b22      	ldr	r3, [pc, #136]	@ (8110a84 <__kernel_cos+0x184>)
 81109fa:	4921      	ldr	r1, [pc, #132]	@ (8110a80 <__kernel_cos+0x180>)
 81109fc:	4598      	cmp	r8, r3
 81109fe:	bf8c      	ite	hi
 8110a00:	4d21      	ldrhi	r5, [pc, #132]	@ (8110a88 <__kernel_cos+0x188>)
 8110a02:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8110a06:	2400      	movs	r4, #0
 8110a08:	4622      	mov	r2, r4
 8110a0a:	462b      	mov	r3, r5
 8110a0c:	2000      	movs	r0, #0
 8110a0e:	f7ef fcc3 	bl	8100398 <__aeabi_dsub>
 8110a12:	4622      	mov	r2, r4
 8110a14:	4680      	mov	r8, r0
 8110a16:	4689      	mov	r9, r1
 8110a18:	462b      	mov	r3, r5
 8110a1a:	4650      	mov	r0, sl
 8110a1c:	4659      	mov	r1, fp
 8110a1e:	f7ef fcbb 	bl	8100398 <__aeabi_dsub>
 8110a22:	4632      	mov	r2, r6
 8110a24:	463b      	mov	r3, r7
 8110a26:	f7ef fcb7 	bl	8100398 <__aeabi_dsub>
 8110a2a:	4602      	mov	r2, r0
 8110a2c:	460b      	mov	r3, r1
 8110a2e:	4640      	mov	r0, r8
 8110a30:	4649      	mov	r1, r9
 8110a32:	e7da      	b.n	81109ea <__kernel_cos+0xea>
 8110a34:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8110a70 <__kernel_cos+0x170>
 8110a38:	e7db      	b.n	81109f2 <__kernel_cos+0xf2>
 8110a3a:	bf00      	nop
 8110a3c:	f3af 8000 	nop.w
 8110a40:	be8838d4 	.word	0xbe8838d4
 8110a44:	bda8fae9 	.word	0xbda8fae9
 8110a48:	bdb4b1c4 	.word	0xbdb4b1c4
 8110a4c:	3e21ee9e 	.word	0x3e21ee9e
 8110a50:	809c52ad 	.word	0x809c52ad
 8110a54:	3e927e4f 	.word	0x3e927e4f
 8110a58:	19cb1590 	.word	0x19cb1590
 8110a5c:	3efa01a0 	.word	0x3efa01a0
 8110a60:	16c15177 	.word	0x16c15177
 8110a64:	3f56c16c 	.word	0x3f56c16c
 8110a68:	5555554c 	.word	0x5555554c
 8110a6c:	3fa55555 	.word	0x3fa55555
 8110a70:	00000000 	.word	0x00000000
 8110a74:	3ff00000 	.word	0x3ff00000
 8110a78:	3fe00000 	.word	0x3fe00000
 8110a7c:	3fd33332 	.word	0x3fd33332
 8110a80:	3ff00000 	.word	0x3ff00000
 8110a84:	3fe90000 	.word	0x3fe90000
 8110a88:	3fd20000 	.word	0x3fd20000
 8110a8c:	00000000 	.word	0x00000000

08110a90 <__kernel_sin>:
 8110a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110a94:	ec55 4b10 	vmov	r4, r5, d0
 8110a98:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8110a9c:	b085      	sub	sp, #20
 8110a9e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8110aa2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8110aa6:	4680      	mov	r8, r0
 8110aa8:	d205      	bcs.n	8110ab6 <__kernel_sin+0x26>
 8110aaa:	4620      	mov	r0, r4
 8110aac:	4629      	mov	r1, r5
 8110aae:	f7f0 f8db 	bl	8100c68 <__aeabi_d2iz>
 8110ab2:	2800      	cmp	r0, #0
 8110ab4:	d052      	beq.n	8110b5c <__kernel_sin+0xcc>
 8110ab6:	4622      	mov	r2, r4
 8110ab8:	462b      	mov	r3, r5
 8110aba:	4620      	mov	r0, r4
 8110abc:	4629      	mov	r1, r5
 8110abe:	f7ef fe23 	bl	8100708 <__aeabi_dmul>
 8110ac2:	4682      	mov	sl, r0
 8110ac4:	468b      	mov	fp, r1
 8110ac6:	4602      	mov	r2, r0
 8110ac8:	460b      	mov	r3, r1
 8110aca:	4620      	mov	r0, r4
 8110acc:	4629      	mov	r1, r5
 8110ace:	f7ef fe1b 	bl	8100708 <__aeabi_dmul>
 8110ad2:	a342      	add	r3, pc, #264	@ (adr r3, 8110bdc <__kernel_sin+0x14c>)
 8110ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110ad8:	e9cd 0100 	strd	r0, r1, [sp]
 8110adc:	4650      	mov	r0, sl
 8110ade:	4659      	mov	r1, fp
 8110ae0:	f7ef fe12 	bl	8100708 <__aeabi_dmul>
 8110ae4:	a33f      	add	r3, pc, #252	@ (adr r3, 8110be4 <__kernel_sin+0x154>)
 8110ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110aea:	f7ef fc55 	bl	8100398 <__aeabi_dsub>
 8110aee:	4652      	mov	r2, sl
 8110af0:	465b      	mov	r3, fp
 8110af2:	f7ef fe09 	bl	8100708 <__aeabi_dmul>
 8110af6:	a33d      	add	r3, pc, #244	@ (adr r3, 8110bec <__kernel_sin+0x15c>)
 8110af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110afc:	f7ef fc4e 	bl	810039c <__adddf3>
 8110b00:	4652      	mov	r2, sl
 8110b02:	465b      	mov	r3, fp
 8110b04:	f7ef fe00 	bl	8100708 <__aeabi_dmul>
 8110b08:	a33a      	add	r3, pc, #232	@ (adr r3, 8110bf4 <__kernel_sin+0x164>)
 8110b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110b0e:	f7ef fc43 	bl	8100398 <__aeabi_dsub>
 8110b12:	4652      	mov	r2, sl
 8110b14:	465b      	mov	r3, fp
 8110b16:	f7ef fdf7 	bl	8100708 <__aeabi_dmul>
 8110b1a:	a338      	add	r3, pc, #224	@ (adr r3, 8110bfc <__kernel_sin+0x16c>)
 8110b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110b20:	f7ef fc3c 	bl	810039c <__adddf3>
 8110b24:	4606      	mov	r6, r0
 8110b26:	460f      	mov	r7, r1
 8110b28:	f1b8 0f00 	cmp.w	r8, #0
 8110b2c:	d11b      	bne.n	8110b66 <__kernel_sin+0xd6>
 8110b2e:	4602      	mov	r2, r0
 8110b30:	460b      	mov	r3, r1
 8110b32:	4650      	mov	r0, sl
 8110b34:	4659      	mov	r1, fp
 8110b36:	f7ef fde7 	bl	8100708 <__aeabi_dmul>
 8110b3a:	a325      	add	r3, pc, #148	@ (adr r3, 8110bd0 <__kernel_sin+0x140>)
 8110b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110b40:	f7ef fc2a 	bl	8100398 <__aeabi_dsub>
 8110b44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8110b48:	f7ef fdde 	bl	8100708 <__aeabi_dmul>
 8110b4c:	4602      	mov	r2, r0
 8110b4e:	460b      	mov	r3, r1
 8110b50:	4620      	mov	r0, r4
 8110b52:	4629      	mov	r1, r5
 8110b54:	f7ef fc22 	bl	810039c <__adddf3>
 8110b58:	4604      	mov	r4, r0
 8110b5a:	460d      	mov	r5, r1
 8110b5c:	ec45 4b10 	vmov	d0, r4, r5
 8110b60:	b005      	add	sp, #20
 8110b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8110bd8 <__kernel_sin+0x148>)
 8110b6c:	2200      	movs	r2, #0
 8110b6e:	f7ef fdcb 	bl	8100708 <__aeabi_dmul>
 8110b72:	4632      	mov	r2, r6
 8110b74:	4680      	mov	r8, r0
 8110b76:	4689      	mov	r9, r1
 8110b78:	463b      	mov	r3, r7
 8110b7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8110b7e:	f7ef fdc3 	bl	8100708 <__aeabi_dmul>
 8110b82:	4602      	mov	r2, r0
 8110b84:	460b      	mov	r3, r1
 8110b86:	4640      	mov	r0, r8
 8110b88:	4649      	mov	r1, r9
 8110b8a:	f7ef fc05 	bl	8100398 <__aeabi_dsub>
 8110b8e:	4652      	mov	r2, sl
 8110b90:	465b      	mov	r3, fp
 8110b92:	f7ef fdb9 	bl	8100708 <__aeabi_dmul>
 8110b96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8110b9a:	f7ef fbfd 	bl	8100398 <__aeabi_dsub>
 8110b9e:	a30c      	add	r3, pc, #48	@ (adr r3, 8110bd0 <__kernel_sin+0x140>)
 8110ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110ba4:	4606      	mov	r6, r0
 8110ba6:	460f      	mov	r7, r1
 8110ba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8110bac:	f7ef fdac 	bl	8100708 <__aeabi_dmul>
 8110bb0:	4602      	mov	r2, r0
 8110bb2:	460b      	mov	r3, r1
 8110bb4:	4630      	mov	r0, r6
 8110bb6:	4639      	mov	r1, r7
 8110bb8:	f7ef fbf0 	bl	810039c <__adddf3>
 8110bbc:	4602      	mov	r2, r0
 8110bbe:	460b      	mov	r3, r1
 8110bc0:	4620      	mov	r0, r4
 8110bc2:	4629      	mov	r1, r5
 8110bc4:	f7ef fbe8 	bl	8100398 <__aeabi_dsub>
 8110bc8:	e7c6      	b.n	8110b58 <__kernel_sin+0xc8>
 8110bca:	bf00      	nop
 8110bcc:	f3af 8000 	nop.w
 8110bd0:	55555549 	.word	0x55555549
 8110bd4:	3fc55555 	.word	0x3fc55555
 8110bd8:	3fe00000 	.word	0x3fe00000
 8110bdc:	5acfd57c 	.word	0x5acfd57c
 8110be0:	3de5d93a 	.word	0x3de5d93a
 8110be4:	8a2b9ceb 	.word	0x8a2b9ceb
 8110be8:	3e5ae5e6 	.word	0x3e5ae5e6
 8110bec:	57b1fe7d 	.word	0x57b1fe7d
 8110bf0:	3ec71de3 	.word	0x3ec71de3
 8110bf4:	19c161d5 	.word	0x19c161d5
 8110bf8:	3f2a01a0 	.word	0x3f2a01a0
 8110bfc:	1110f8a6 	.word	0x1110f8a6
 8110c00:	3f811111 	.word	0x3f811111
 8110c04:	00000000 	.word	0x00000000

08110c08 <__ieee754_rem_pio2>:
 8110c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110c0c:	ec57 6b10 	vmov	r6, r7, d0
 8110c10:	4bc5      	ldr	r3, [pc, #788]	@ (8110f28 <__ieee754_rem_pio2+0x320>)
 8110c12:	b08d      	sub	sp, #52	@ 0x34
 8110c14:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8110c18:	4598      	cmp	r8, r3
 8110c1a:	4604      	mov	r4, r0
 8110c1c:	9704      	str	r7, [sp, #16]
 8110c1e:	d807      	bhi.n	8110c30 <__ieee754_rem_pio2+0x28>
 8110c20:	2200      	movs	r2, #0
 8110c22:	2300      	movs	r3, #0
 8110c24:	ed80 0b00 	vstr	d0, [r0]
 8110c28:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8110c2c:	2500      	movs	r5, #0
 8110c2e:	e028      	b.n	8110c82 <__ieee754_rem_pio2+0x7a>
 8110c30:	4bbe      	ldr	r3, [pc, #760]	@ (8110f2c <__ieee754_rem_pio2+0x324>)
 8110c32:	4598      	cmp	r8, r3
 8110c34:	d878      	bhi.n	8110d28 <__ieee754_rem_pio2+0x120>
 8110c36:	9b04      	ldr	r3, [sp, #16]
 8110c38:	4dbd      	ldr	r5, [pc, #756]	@ (8110f30 <__ieee754_rem_pio2+0x328>)
 8110c3a:	2b00      	cmp	r3, #0
 8110c3c:	4630      	mov	r0, r6
 8110c3e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8110ef0 <__ieee754_rem_pio2+0x2e8>)
 8110c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110c44:	4639      	mov	r1, r7
 8110c46:	dd38      	ble.n	8110cba <__ieee754_rem_pio2+0xb2>
 8110c48:	f7ef fba6 	bl	8100398 <__aeabi_dsub>
 8110c4c:	45a8      	cmp	r8, r5
 8110c4e:	4606      	mov	r6, r0
 8110c50:	460f      	mov	r7, r1
 8110c52:	d01a      	beq.n	8110c8a <__ieee754_rem_pio2+0x82>
 8110c54:	a3a8      	add	r3, pc, #672	@ (adr r3, 8110ef8 <__ieee754_rem_pio2+0x2f0>)
 8110c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110c5a:	f7ef fb9d 	bl	8100398 <__aeabi_dsub>
 8110c5e:	4602      	mov	r2, r0
 8110c60:	460b      	mov	r3, r1
 8110c62:	4680      	mov	r8, r0
 8110c64:	4689      	mov	r9, r1
 8110c66:	4630      	mov	r0, r6
 8110c68:	4639      	mov	r1, r7
 8110c6a:	f7ef fb95 	bl	8100398 <__aeabi_dsub>
 8110c6e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8110ef8 <__ieee754_rem_pio2+0x2f0>)
 8110c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110c74:	f7ef fb90 	bl	8100398 <__aeabi_dsub>
 8110c78:	e9c4 8900 	strd	r8, r9, [r4]
 8110c7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8110c80:	2501      	movs	r5, #1
 8110c82:	4628      	mov	r0, r5
 8110c84:	b00d      	add	sp, #52	@ 0x34
 8110c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110c8a:	a39d      	add	r3, pc, #628	@ (adr r3, 8110f00 <__ieee754_rem_pio2+0x2f8>)
 8110c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110c90:	f7ef fb82 	bl	8100398 <__aeabi_dsub>
 8110c94:	a39c      	add	r3, pc, #624	@ (adr r3, 8110f08 <__ieee754_rem_pio2+0x300>)
 8110c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110c9a:	4606      	mov	r6, r0
 8110c9c:	460f      	mov	r7, r1
 8110c9e:	f7ef fb7b 	bl	8100398 <__aeabi_dsub>
 8110ca2:	4602      	mov	r2, r0
 8110ca4:	460b      	mov	r3, r1
 8110ca6:	4680      	mov	r8, r0
 8110ca8:	4689      	mov	r9, r1
 8110caa:	4630      	mov	r0, r6
 8110cac:	4639      	mov	r1, r7
 8110cae:	f7ef fb73 	bl	8100398 <__aeabi_dsub>
 8110cb2:	a395      	add	r3, pc, #596	@ (adr r3, 8110f08 <__ieee754_rem_pio2+0x300>)
 8110cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110cb8:	e7dc      	b.n	8110c74 <__ieee754_rem_pio2+0x6c>
 8110cba:	f7ef fb6f 	bl	810039c <__adddf3>
 8110cbe:	45a8      	cmp	r8, r5
 8110cc0:	4606      	mov	r6, r0
 8110cc2:	460f      	mov	r7, r1
 8110cc4:	d018      	beq.n	8110cf8 <__ieee754_rem_pio2+0xf0>
 8110cc6:	a38c      	add	r3, pc, #560	@ (adr r3, 8110ef8 <__ieee754_rem_pio2+0x2f0>)
 8110cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110ccc:	f7ef fb66 	bl	810039c <__adddf3>
 8110cd0:	4602      	mov	r2, r0
 8110cd2:	460b      	mov	r3, r1
 8110cd4:	4680      	mov	r8, r0
 8110cd6:	4689      	mov	r9, r1
 8110cd8:	4630      	mov	r0, r6
 8110cda:	4639      	mov	r1, r7
 8110cdc:	f7ef fb5c 	bl	8100398 <__aeabi_dsub>
 8110ce0:	a385      	add	r3, pc, #532	@ (adr r3, 8110ef8 <__ieee754_rem_pio2+0x2f0>)
 8110ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110ce6:	f7ef fb59 	bl	810039c <__adddf3>
 8110cea:	f04f 35ff 	mov.w	r5, #4294967295
 8110cee:	e9c4 8900 	strd	r8, r9, [r4]
 8110cf2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8110cf6:	e7c4      	b.n	8110c82 <__ieee754_rem_pio2+0x7a>
 8110cf8:	a381      	add	r3, pc, #516	@ (adr r3, 8110f00 <__ieee754_rem_pio2+0x2f8>)
 8110cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110cfe:	f7ef fb4d 	bl	810039c <__adddf3>
 8110d02:	a381      	add	r3, pc, #516	@ (adr r3, 8110f08 <__ieee754_rem_pio2+0x300>)
 8110d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110d08:	4606      	mov	r6, r0
 8110d0a:	460f      	mov	r7, r1
 8110d0c:	f7ef fb46 	bl	810039c <__adddf3>
 8110d10:	4602      	mov	r2, r0
 8110d12:	460b      	mov	r3, r1
 8110d14:	4680      	mov	r8, r0
 8110d16:	4689      	mov	r9, r1
 8110d18:	4630      	mov	r0, r6
 8110d1a:	4639      	mov	r1, r7
 8110d1c:	f7ef fb3c 	bl	8100398 <__aeabi_dsub>
 8110d20:	a379      	add	r3, pc, #484	@ (adr r3, 8110f08 <__ieee754_rem_pio2+0x300>)
 8110d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110d26:	e7de      	b.n	8110ce6 <__ieee754_rem_pio2+0xde>
 8110d28:	4b82      	ldr	r3, [pc, #520]	@ (8110f34 <__ieee754_rem_pio2+0x32c>)
 8110d2a:	4598      	cmp	r8, r3
 8110d2c:	f200 80d1 	bhi.w	8110ed2 <__ieee754_rem_pio2+0x2ca>
 8110d30:	f000 f966 	bl	8111000 <fabs>
 8110d34:	ec57 6b10 	vmov	r6, r7, d0
 8110d38:	a375      	add	r3, pc, #468	@ (adr r3, 8110f10 <__ieee754_rem_pio2+0x308>)
 8110d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110d3e:	4630      	mov	r0, r6
 8110d40:	4639      	mov	r1, r7
 8110d42:	f7ef fce1 	bl	8100708 <__aeabi_dmul>
 8110d46:	4b7c      	ldr	r3, [pc, #496]	@ (8110f38 <__ieee754_rem_pio2+0x330>)
 8110d48:	2200      	movs	r2, #0
 8110d4a:	f7ef fb27 	bl	810039c <__adddf3>
 8110d4e:	f7ef ff8b 	bl	8100c68 <__aeabi_d2iz>
 8110d52:	4605      	mov	r5, r0
 8110d54:	f7ef fc6e 	bl	8100634 <__aeabi_i2d>
 8110d58:	4602      	mov	r2, r0
 8110d5a:	460b      	mov	r3, r1
 8110d5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8110d60:	a363      	add	r3, pc, #396	@ (adr r3, 8110ef0 <__ieee754_rem_pio2+0x2e8>)
 8110d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110d66:	f7ef fccf 	bl	8100708 <__aeabi_dmul>
 8110d6a:	4602      	mov	r2, r0
 8110d6c:	460b      	mov	r3, r1
 8110d6e:	4630      	mov	r0, r6
 8110d70:	4639      	mov	r1, r7
 8110d72:	f7ef fb11 	bl	8100398 <__aeabi_dsub>
 8110d76:	a360      	add	r3, pc, #384	@ (adr r3, 8110ef8 <__ieee754_rem_pio2+0x2f0>)
 8110d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110d7c:	4682      	mov	sl, r0
 8110d7e:	468b      	mov	fp, r1
 8110d80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110d84:	f7ef fcc0 	bl	8100708 <__aeabi_dmul>
 8110d88:	2d1f      	cmp	r5, #31
 8110d8a:	4606      	mov	r6, r0
 8110d8c:	460f      	mov	r7, r1
 8110d8e:	dc0c      	bgt.n	8110daa <__ieee754_rem_pio2+0x1a2>
 8110d90:	4b6a      	ldr	r3, [pc, #424]	@ (8110f3c <__ieee754_rem_pio2+0x334>)
 8110d92:	1e6a      	subs	r2, r5, #1
 8110d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8110d98:	4543      	cmp	r3, r8
 8110d9a:	d006      	beq.n	8110daa <__ieee754_rem_pio2+0x1a2>
 8110d9c:	4632      	mov	r2, r6
 8110d9e:	463b      	mov	r3, r7
 8110da0:	4650      	mov	r0, sl
 8110da2:	4659      	mov	r1, fp
 8110da4:	f7ef faf8 	bl	8100398 <__aeabi_dsub>
 8110da8:	e00e      	b.n	8110dc8 <__ieee754_rem_pio2+0x1c0>
 8110daa:	463b      	mov	r3, r7
 8110dac:	4632      	mov	r2, r6
 8110dae:	4650      	mov	r0, sl
 8110db0:	4659      	mov	r1, fp
 8110db2:	f7ef faf1 	bl	8100398 <__aeabi_dsub>
 8110db6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8110dba:	9305      	str	r3, [sp, #20]
 8110dbc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8110dc0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8110dc4:	2b10      	cmp	r3, #16
 8110dc6:	dc02      	bgt.n	8110dce <__ieee754_rem_pio2+0x1c6>
 8110dc8:	e9c4 0100 	strd	r0, r1, [r4]
 8110dcc:	e039      	b.n	8110e42 <__ieee754_rem_pio2+0x23a>
 8110dce:	a34c      	add	r3, pc, #304	@ (adr r3, 8110f00 <__ieee754_rem_pio2+0x2f8>)
 8110dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110dd8:	f7ef fc96 	bl	8100708 <__aeabi_dmul>
 8110ddc:	4606      	mov	r6, r0
 8110dde:	460f      	mov	r7, r1
 8110de0:	4602      	mov	r2, r0
 8110de2:	460b      	mov	r3, r1
 8110de4:	4650      	mov	r0, sl
 8110de6:	4659      	mov	r1, fp
 8110de8:	f7ef fad6 	bl	8100398 <__aeabi_dsub>
 8110dec:	4602      	mov	r2, r0
 8110dee:	460b      	mov	r3, r1
 8110df0:	4680      	mov	r8, r0
 8110df2:	4689      	mov	r9, r1
 8110df4:	4650      	mov	r0, sl
 8110df6:	4659      	mov	r1, fp
 8110df8:	f7ef face 	bl	8100398 <__aeabi_dsub>
 8110dfc:	4632      	mov	r2, r6
 8110dfe:	463b      	mov	r3, r7
 8110e00:	f7ef faca 	bl	8100398 <__aeabi_dsub>
 8110e04:	a340      	add	r3, pc, #256	@ (adr r3, 8110f08 <__ieee754_rem_pio2+0x300>)
 8110e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110e0a:	4606      	mov	r6, r0
 8110e0c:	460f      	mov	r7, r1
 8110e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110e12:	f7ef fc79 	bl	8100708 <__aeabi_dmul>
 8110e16:	4632      	mov	r2, r6
 8110e18:	463b      	mov	r3, r7
 8110e1a:	f7ef fabd 	bl	8100398 <__aeabi_dsub>
 8110e1e:	4602      	mov	r2, r0
 8110e20:	460b      	mov	r3, r1
 8110e22:	4606      	mov	r6, r0
 8110e24:	460f      	mov	r7, r1
 8110e26:	4640      	mov	r0, r8
 8110e28:	4649      	mov	r1, r9
 8110e2a:	f7ef fab5 	bl	8100398 <__aeabi_dsub>
 8110e2e:	9a05      	ldr	r2, [sp, #20]
 8110e30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8110e34:	1ad3      	subs	r3, r2, r3
 8110e36:	2b31      	cmp	r3, #49	@ 0x31
 8110e38:	dc20      	bgt.n	8110e7c <__ieee754_rem_pio2+0x274>
 8110e3a:	e9c4 0100 	strd	r0, r1, [r4]
 8110e3e:	46c2      	mov	sl, r8
 8110e40:	46cb      	mov	fp, r9
 8110e42:	e9d4 8900 	ldrd	r8, r9, [r4]
 8110e46:	4650      	mov	r0, sl
 8110e48:	4642      	mov	r2, r8
 8110e4a:	464b      	mov	r3, r9
 8110e4c:	4659      	mov	r1, fp
 8110e4e:	f7ef faa3 	bl	8100398 <__aeabi_dsub>
 8110e52:	463b      	mov	r3, r7
 8110e54:	4632      	mov	r2, r6
 8110e56:	f7ef fa9f 	bl	8100398 <__aeabi_dsub>
 8110e5a:	9b04      	ldr	r3, [sp, #16]
 8110e5c:	2b00      	cmp	r3, #0
 8110e5e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8110e62:	f6bf af0e 	bge.w	8110c82 <__ieee754_rem_pio2+0x7a>
 8110e66:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8110e6a:	6063      	str	r3, [r4, #4]
 8110e6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8110e70:	f8c4 8000 	str.w	r8, [r4]
 8110e74:	60a0      	str	r0, [r4, #8]
 8110e76:	60e3      	str	r3, [r4, #12]
 8110e78:	426d      	negs	r5, r5
 8110e7a:	e702      	b.n	8110c82 <__ieee754_rem_pio2+0x7a>
 8110e7c:	a326      	add	r3, pc, #152	@ (adr r3, 8110f18 <__ieee754_rem_pio2+0x310>)
 8110e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110e82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110e86:	f7ef fc3f 	bl	8100708 <__aeabi_dmul>
 8110e8a:	4606      	mov	r6, r0
 8110e8c:	460f      	mov	r7, r1
 8110e8e:	4602      	mov	r2, r0
 8110e90:	460b      	mov	r3, r1
 8110e92:	4640      	mov	r0, r8
 8110e94:	4649      	mov	r1, r9
 8110e96:	f7ef fa7f 	bl	8100398 <__aeabi_dsub>
 8110e9a:	4602      	mov	r2, r0
 8110e9c:	460b      	mov	r3, r1
 8110e9e:	4682      	mov	sl, r0
 8110ea0:	468b      	mov	fp, r1
 8110ea2:	4640      	mov	r0, r8
 8110ea4:	4649      	mov	r1, r9
 8110ea6:	f7ef fa77 	bl	8100398 <__aeabi_dsub>
 8110eaa:	4632      	mov	r2, r6
 8110eac:	463b      	mov	r3, r7
 8110eae:	f7ef fa73 	bl	8100398 <__aeabi_dsub>
 8110eb2:	a31b      	add	r3, pc, #108	@ (adr r3, 8110f20 <__ieee754_rem_pio2+0x318>)
 8110eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110eb8:	4606      	mov	r6, r0
 8110eba:	460f      	mov	r7, r1
 8110ebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110ec0:	f7ef fc22 	bl	8100708 <__aeabi_dmul>
 8110ec4:	4632      	mov	r2, r6
 8110ec6:	463b      	mov	r3, r7
 8110ec8:	f7ef fa66 	bl	8100398 <__aeabi_dsub>
 8110ecc:	4606      	mov	r6, r0
 8110ece:	460f      	mov	r7, r1
 8110ed0:	e764      	b.n	8110d9c <__ieee754_rem_pio2+0x194>
 8110ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8110f40 <__ieee754_rem_pio2+0x338>)
 8110ed4:	4598      	cmp	r8, r3
 8110ed6:	d935      	bls.n	8110f44 <__ieee754_rem_pio2+0x33c>
 8110ed8:	4632      	mov	r2, r6
 8110eda:	463b      	mov	r3, r7
 8110edc:	4630      	mov	r0, r6
 8110ede:	4639      	mov	r1, r7
 8110ee0:	f7ef fa5a 	bl	8100398 <__aeabi_dsub>
 8110ee4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8110ee8:	e9c4 0100 	strd	r0, r1, [r4]
 8110eec:	e69e      	b.n	8110c2c <__ieee754_rem_pio2+0x24>
 8110eee:	bf00      	nop
 8110ef0:	54400000 	.word	0x54400000
 8110ef4:	3ff921fb 	.word	0x3ff921fb
 8110ef8:	1a626331 	.word	0x1a626331
 8110efc:	3dd0b461 	.word	0x3dd0b461
 8110f00:	1a600000 	.word	0x1a600000
 8110f04:	3dd0b461 	.word	0x3dd0b461
 8110f08:	2e037073 	.word	0x2e037073
 8110f0c:	3ba3198a 	.word	0x3ba3198a
 8110f10:	6dc9c883 	.word	0x6dc9c883
 8110f14:	3fe45f30 	.word	0x3fe45f30
 8110f18:	2e000000 	.word	0x2e000000
 8110f1c:	3ba3198a 	.word	0x3ba3198a
 8110f20:	252049c1 	.word	0x252049c1
 8110f24:	397b839a 	.word	0x397b839a
 8110f28:	3fe921fb 	.word	0x3fe921fb
 8110f2c:	4002d97b 	.word	0x4002d97b
 8110f30:	3ff921fb 	.word	0x3ff921fb
 8110f34:	413921fb 	.word	0x413921fb
 8110f38:	3fe00000 	.word	0x3fe00000
 8110f3c:	081122f0 	.word	0x081122f0
 8110f40:	7fefffff 	.word	0x7fefffff
 8110f44:	ea4f 5528 	mov.w	r5, r8, asr #20
 8110f48:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8110f4c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8110f50:	4630      	mov	r0, r6
 8110f52:	460f      	mov	r7, r1
 8110f54:	f7ef fe88 	bl	8100c68 <__aeabi_d2iz>
 8110f58:	f7ef fb6c 	bl	8100634 <__aeabi_i2d>
 8110f5c:	4602      	mov	r2, r0
 8110f5e:	460b      	mov	r3, r1
 8110f60:	4630      	mov	r0, r6
 8110f62:	4639      	mov	r1, r7
 8110f64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8110f68:	f7ef fa16 	bl	8100398 <__aeabi_dsub>
 8110f6c:	4b22      	ldr	r3, [pc, #136]	@ (8110ff8 <__ieee754_rem_pio2+0x3f0>)
 8110f6e:	2200      	movs	r2, #0
 8110f70:	f7ef fbca 	bl	8100708 <__aeabi_dmul>
 8110f74:	460f      	mov	r7, r1
 8110f76:	4606      	mov	r6, r0
 8110f78:	f7ef fe76 	bl	8100c68 <__aeabi_d2iz>
 8110f7c:	f7ef fb5a 	bl	8100634 <__aeabi_i2d>
 8110f80:	4602      	mov	r2, r0
 8110f82:	460b      	mov	r3, r1
 8110f84:	4630      	mov	r0, r6
 8110f86:	4639      	mov	r1, r7
 8110f88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8110f8c:	f7ef fa04 	bl	8100398 <__aeabi_dsub>
 8110f90:	4b19      	ldr	r3, [pc, #100]	@ (8110ff8 <__ieee754_rem_pio2+0x3f0>)
 8110f92:	2200      	movs	r2, #0
 8110f94:	f7ef fbb8 	bl	8100708 <__aeabi_dmul>
 8110f98:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8110f9c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8110fa0:	f04f 0803 	mov.w	r8, #3
 8110fa4:	2600      	movs	r6, #0
 8110fa6:	2700      	movs	r7, #0
 8110fa8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8110fac:	4632      	mov	r2, r6
 8110fae:	463b      	mov	r3, r7
 8110fb0:	46c2      	mov	sl, r8
 8110fb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8110fb6:	f7ef fe0f 	bl	8100bd8 <__aeabi_dcmpeq>
 8110fba:	2800      	cmp	r0, #0
 8110fbc:	d1f4      	bne.n	8110fa8 <__ieee754_rem_pio2+0x3a0>
 8110fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8110ffc <__ieee754_rem_pio2+0x3f4>)
 8110fc0:	9301      	str	r3, [sp, #4]
 8110fc2:	2302      	movs	r3, #2
 8110fc4:	9300      	str	r3, [sp, #0]
 8110fc6:	462a      	mov	r2, r5
 8110fc8:	4653      	mov	r3, sl
 8110fca:	4621      	mov	r1, r4
 8110fcc:	a806      	add	r0, sp, #24
 8110fce:	f000 f81f 	bl	8111010 <__kernel_rem_pio2>
 8110fd2:	9b04      	ldr	r3, [sp, #16]
 8110fd4:	2b00      	cmp	r3, #0
 8110fd6:	4605      	mov	r5, r0
 8110fd8:	f6bf ae53 	bge.w	8110c82 <__ieee754_rem_pio2+0x7a>
 8110fdc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8110fe0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8110fe4:	e9c4 2300 	strd	r2, r3, [r4]
 8110fe8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8110fec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8110ff0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8110ff4:	e740      	b.n	8110e78 <__ieee754_rem_pio2+0x270>
 8110ff6:	bf00      	nop
 8110ff8:	41700000 	.word	0x41700000
 8110ffc:	08112370 	.word	0x08112370

08111000 <fabs>:
 8111000:	ec51 0b10 	vmov	r0, r1, d0
 8111004:	4602      	mov	r2, r0
 8111006:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 811100a:	ec43 2b10 	vmov	d0, r2, r3
 811100e:	4770      	bx	lr

08111010 <__kernel_rem_pio2>:
 8111010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111014:	ed2d 8b02 	vpush	{d8}
 8111018:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 811101c:	f112 0f14 	cmn.w	r2, #20
 8111020:	9306      	str	r3, [sp, #24]
 8111022:	9104      	str	r1, [sp, #16]
 8111024:	4bbe      	ldr	r3, [pc, #760]	@ (8111320 <__kernel_rem_pio2+0x310>)
 8111026:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8111028:	9008      	str	r0, [sp, #32]
 811102a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 811102e:	9300      	str	r3, [sp, #0]
 8111030:	9b06      	ldr	r3, [sp, #24]
 8111032:	f103 33ff 	add.w	r3, r3, #4294967295
 8111036:	bfa8      	it	ge
 8111038:	1ed4      	subge	r4, r2, #3
 811103a:	9305      	str	r3, [sp, #20]
 811103c:	bfb2      	itee	lt
 811103e:	2400      	movlt	r4, #0
 8111040:	2318      	movge	r3, #24
 8111042:	fb94 f4f3 	sdivge	r4, r4, r3
 8111046:	f06f 0317 	mvn.w	r3, #23
 811104a:	fb04 3303 	mla	r3, r4, r3, r3
 811104e:	eb03 0b02 	add.w	fp, r3, r2
 8111052:	9b00      	ldr	r3, [sp, #0]
 8111054:	9a05      	ldr	r2, [sp, #20]
 8111056:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8111310 <__kernel_rem_pio2+0x300>
 811105a:	eb03 0802 	add.w	r8, r3, r2
 811105e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8111060:	1aa7      	subs	r7, r4, r2
 8111062:	ae20      	add	r6, sp, #128	@ 0x80
 8111064:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8111068:	2500      	movs	r5, #0
 811106a:	4545      	cmp	r5, r8
 811106c:	dd13      	ble.n	8111096 <__kernel_rem_pio2+0x86>
 811106e:	9b06      	ldr	r3, [sp, #24]
 8111070:	aa20      	add	r2, sp, #128	@ 0x80
 8111072:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8111076:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 811107a:	f04f 0800 	mov.w	r8, #0
 811107e:	9b00      	ldr	r3, [sp, #0]
 8111080:	4598      	cmp	r8, r3
 8111082:	dc31      	bgt.n	81110e8 <__kernel_rem_pio2+0xd8>
 8111084:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8111310 <__kernel_rem_pio2+0x300>
 8111088:	f8dd 9020 	ldr.w	r9, [sp, #32]
 811108c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8111090:	462f      	mov	r7, r5
 8111092:	2600      	movs	r6, #0
 8111094:	e01b      	b.n	81110ce <__kernel_rem_pio2+0xbe>
 8111096:	42ef      	cmn	r7, r5
 8111098:	d407      	bmi.n	81110aa <__kernel_rem_pio2+0x9a>
 811109a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 811109e:	f7ef fac9 	bl	8100634 <__aeabi_i2d>
 81110a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 81110a6:	3501      	adds	r5, #1
 81110a8:	e7df      	b.n	811106a <__kernel_rem_pio2+0x5a>
 81110aa:	ec51 0b18 	vmov	r0, r1, d8
 81110ae:	e7f8      	b.n	81110a2 <__kernel_rem_pio2+0x92>
 81110b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 81110b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 81110b8:	f7ef fb26 	bl	8100708 <__aeabi_dmul>
 81110bc:	4602      	mov	r2, r0
 81110be:	460b      	mov	r3, r1
 81110c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81110c4:	f7ef f96a 	bl	810039c <__adddf3>
 81110c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81110cc:	3601      	adds	r6, #1
 81110ce:	9b05      	ldr	r3, [sp, #20]
 81110d0:	429e      	cmp	r6, r3
 81110d2:	f1a7 0708 	sub.w	r7, r7, #8
 81110d6:	ddeb      	ble.n	81110b0 <__kernel_rem_pio2+0xa0>
 81110d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 81110dc:	f108 0801 	add.w	r8, r8, #1
 81110e0:	ecaa 7b02 	vstmia	sl!, {d7}
 81110e4:	3508      	adds	r5, #8
 81110e6:	e7ca      	b.n	811107e <__kernel_rem_pio2+0x6e>
 81110e8:	9b00      	ldr	r3, [sp, #0]
 81110ea:	f8dd 8000 	ldr.w	r8, [sp]
 81110ee:	aa0c      	add	r2, sp, #48	@ 0x30
 81110f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 81110f4:	930a      	str	r3, [sp, #40]	@ 0x28
 81110f6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 81110f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 81110fc:	9309      	str	r3, [sp, #36]	@ 0x24
 81110fe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8111102:	930b      	str	r3, [sp, #44]	@ 0x2c
 8111104:	ab98      	add	r3, sp, #608	@ 0x260
 8111106:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 811110a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 811110e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8111112:	ac0c      	add	r4, sp, #48	@ 0x30
 8111114:	ab70      	add	r3, sp, #448	@ 0x1c0
 8111116:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 811111a:	46a1      	mov	r9, r4
 811111c:	46c2      	mov	sl, r8
 811111e:	f1ba 0f00 	cmp.w	sl, #0
 8111122:	f1a5 0508 	sub.w	r5, r5, #8
 8111126:	dc77      	bgt.n	8111218 <__kernel_rem_pio2+0x208>
 8111128:	4658      	mov	r0, fp
 811112a:	ed9d 0b02 	vldr	d0, [sp, #8]
 811112e:	f000 fac7 	bl	81116c0 <scalbn>
 8111132:	ec57 6b10 	vmov	r6, r7, d0
 8111136:	2200      	movs	r2, #0
 8111138:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 811113c:	4630      	mov	r0, r6
 811113e:	4639      	mov	r1, r7
 8111140:	f7ef fae2 	bl	8100708 <__aeabi_dmul>
 8111144:	ec41 0b10 	vmov	d0, r0, r1
 8111148:	f000 fb3a 	bl	81117c0 <floor>
 811114c:	4b75      	ldr	r3, [pc, #468]	@ (8111324 <__kernel_rem_pio2+0x314>)
 811114e:	ec51 0b10 	vmov	r0, r1, d0
 8111152:	2200      	movs	r2, #0
 8111154:	f7ef fad8 	bl	8100708 <__aeabi_dmul>
 8111158:	4602      	mov	r2, r0
 811115a:	460b      	mov	r3, r1
 811115c:	4630      	mov	r0, r6
 811115e:	4639      	mov	r1, r7
 8111160:	f7ef f91a 	bl	8100398 <__aeabi_dsub>
 8111164:	460f      	mov	r7, r1
 8111166:	4606      	mov	r6, r0
 8111168:	f7ef fd7e 	bl	8100c68 <__aeabi_d2iz>
 811116c:	9002      	str	r0, [sp, #8]
 811116e:	f7ef fa61 	bl	8100634 <__aeabi_i2d>
 8111172:	4602      	mov	r2, r0
 8111174:	460b      	mov	r3, r1
 8111176:	4630      	mov	r0, r6
 8111178:	4639      	mov	r1, r7
 811117a:	f7ef f90d 	bl	8100398 <__aeabi_dsub>
 811117e:	f1bb 0f00 	cmp.w	fp, #0
 8111182:	4606      	mov	r6, r0
 8111184:	460f      	mov	r7, r1
 8111186:	dd6c      	ble.n	8111262 <__kernel_rem_pio2+0x252>
 8111188:	f108 31ff 	add.w	r1, r8, #4294967295
 811118c:	ab0c      	add	r3, sp, #48	@ 0x30
 811118e:	9d02      	ldr	r5, [sp, #8]
 8111190:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8111194:	f1cb 0018 	rsb	r0, fp, #24
 8111198:	fa43 f200 	asr.w	r2, r3, r0
 811119c:	4415      	add	r5, r2
 811119e:	4082      	lsls	r2, r0
 81111a0:	1a9b      	subs	r3, r3, r2
 81111a2:	aa0c      	add	r2, sp, #48	@ 0x30
 81111a4:	9502      	str	r5, [sp, #8]
 81111a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 81111aa:	f1cb 0217 	rsb	r2, fp, #23
 81111ae:	fa43 f902 	asr.w	r9, r3, r2
 81111b2:	f1b9 0f00 	cmp.w	r9, #0
 81111b6:	dd64      	ble.n	8111282 <__kernel_rem_pio2+0x272>
 81111b8:	9b02      	ldr	r3, [sp, #8]
 81111ba:	2200      	movs	r2, #0
 81111bc:	3301      	adds	r3, #1
 81111be:	9302      	str	r3, [sp, #8]
 81111c0:	4615      	mov	r5, r2
 81111c2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 81111c6:	4590      	cmp	r8, r2
 81111c8:	f300 80b8 	bgt.w	811133c <__kernel_rem_pio2+0x32c>
 81111cc:	f1bb 0f00 	cmp.w	fp, #0
 81111d0:	dd07      	ble.n	81111e2 <__kernel_rem_pio2+0x1d2>
 81111d2:	f1bb 0f01 	cmp.w	fp, #1
 81111d6:	f000 80bf 	beq.w	8111358 <__kernel_rem_pio2+0x348>
 81111da:	f1bb 0f02 	cmp.w	fp, #2
 81111de:	f000 80c6 	beq.w	811136e <__kernel_rem_pio2+0x35e>
 81111e2:	f1b9 0f02 	cmp.w	r9, #2
 81111e6:	d14c      	bne.n	8111282 <__kernel_rem_pio2+0x272>
 81111e8:	4632      	mov	r2, r6
 81111ea:	463b      	mov	r3, r7
 81111ec:	494e      	ldr	r1, [pc, #312]	@ (8111328 <__kernel_rem_pio2+0x318>)
 81111ee:	2000      	movs	r0, #0
 81111f0:	f7ef f8d2 	bl	8100398 <__aeabi_dsub>
 81111f4:	4606      	mov	r6, r0
 81111f6:	460f      	mov	r7, r1
 81111f8:	2d00      	cmp	r5, #0
 81111fa:	d042      	beq.n	8111282 <__kernel_rem_pio2+0x272>
 81111fc:	4658      	mov	r0, fp
 81111fe:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8111318 <__kernel_rem_pio2+0x308>
 8111202:	f000 fa5d 	bl	81116c0 <scalbn>
 8111206:	4630      	mov	r0, r6
 8111208:	4639      	mov	r1, r7
 811120a:	ec53 2b10 	vmov	r2, r3, d0
 811120e:	f7ef f8c3 	bl	8100398 <__aeabi_dsub>
 8111212:	4606      	mov	r6, r0
 8111214:	460f      	mov	r7, r1
 8111216:	e034      	b.n	8111282 <__kernel_rem_pio2+0x272>
 8111218:	4b44      	ldr	r3, [pc, #272]	@ (811132c <__kernel_rem_pio2+0x31c>)
 811121a:	2200      	movs	r2, #0
 811121c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8111220:	f7ef fa72 	bl	8100708 <__aeabi_dmul>
 8111224:	f7ef fd20 	bl	8100c68 <__aeabi_d2iz>
 8111228:	f7ef fa04 	bl	8100634 <__aeabi_i2d>
 811122c:	4b40      	ldr	r3, [pc, #256]	@ (8111330 <__kernel_rem_pio2+0x320>)
 811122e:	2200      	movs	r2, #0
 8111230:	4606      	mov	r6, r0
 8111232:	460f      	mov	r7, r1
 8111234:	f7ef fa68 	bl	8100708 <__aeabi_dmul>
 8111238:	4602      	mov	r2, r0
 811123a:	460b      	mov	r3, r1
 811123c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8111240:	f7ef f8aa 	bl	8100398 <__aeabi_dsub>
 8111244:	f7ef fd10 	bl	8100c68 <__aeabi_d2iz>
 8111248:	e9d5 2300 	ldrd	r2, r3, [r5]
 811124c:	f849 0b04 	str.w	r0, [r9], #4
 8111250:	4639      	mov	r1, r7
 8111252:	4630      	mov	r0, r6
 8111254:	f7ef f8a2 	bl	810039c <__adddf3>
 8111258:	f10a 3aff 	add.w	sl, sl, #4294967295
 811125c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8111260:	e75d      	b.n	811111e <__kernel_rem_pio2+0x10e>
 8111262:	d107      	bne.n	8111274 <__kernel_rem_pio2+0x264>
 8111264:	f108 33ff 	add.w	r3, r8, #4294967295
 8111268:	aa0c      	add	r2, sp, #48	@ 0x30
 811126a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811126e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8111272:	e79e      	b.n	81111b2 <__kernel_rem_pio2+0x1a2>
 8111274:	4b2f      	ldr	r3, [pc, #188]	@ (8111334 <__kernel_rem_pio2+0x324>)
 8111276:	2200      	movs	r2, #0
 8111278:	f7ef fccc 	bl	8100c14 <__aeabi_dcmpge>
 811127c:	2800      	cmp	r0, #0
 811127e:	d143      	bne.n	8111308 <__kernel_rem_pio2+0x2f8>
 8111280:	4681      	mov	r9, r0
 8111282:	2200      	movs	r2, #0
 8111284:	2300      	movs	r3, #0
 8111286:	4630      	mov	r0, r6
 8111288:	4639      	mov	r1, r7
 811128a:	f7ef fca5 	bl	8100bd8 <__aeabi_dcmpeq>
 811128e:	2800      	cmp	r0, #0
 8111290:	f000 80bf 	beq.w	8111412 <__kernel_rem_pio2+0x402>
 8111294:	f108 33ff 	add.w	r3, r8, #4294967295
 8111298:	2200      	movs	r2, #0
 811129a:	9900      	ldr	r1, [sp, #0]
 811129c:	428b      	cmp	r3, r1
 811129e:	da6e      	bge.n	811137e <__kernel_rem_pio2+0x36e>
 81112a0:	2a00      	cmp	r2, #0
 81112a2:	f000 8089 	beq.w	81113b8 <__kernel_rem_pio2+0x3a8>
 81112a6:	f108 38ff 	add.w	r8, r8, #4294967295
 81112aa:	ab0c      	add	r3, sp, #48	@ 0x30
 81112ac:	f1ab 0b18 	sub.w	fp, fp, #24
 81112b0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 81112b4:	2b00      	cmp	r3, #0
 81112b6:	d0f6      	beq.n	81112a6 <__kernel_rem_pio2+0x296>
 81112b8:	4658      	mov	r0, fp
 81112ba:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8111318 <__kernel_rem_pio2+0x308>
 81112be:	f000 f9ff 	bl	81116c0 <scalbn>
 81112c2:	f108 0301 	add.w	r3, r8, #1
 81112c6:	00da      	lsls	r2, r3, #3
 81112c8:	9205      	str	r2, [sp, #20]
 81112ca:	ec55 4b10 	vmov	r4, r5, d0
 81112ce:	aa70      	add	r2, sp, #448	@ 0x1c0
 81112d0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 811132c <__kernel_rem_pio2+0x31c>
 81112d4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 81112d8:	4646      	mov	r6, r8
 81112da:	f04f 0a00 	mov.w	sl, #0
 81112de:	2e00      	cmp	r6, #0
 81112e0:	f280 80cf 	bge.w	8111482 <__kernel_rem_pio2+0x472>
 81112e4:	4644      	mov	r4, r8
 81112e6:	2c00      	cmp	r4, #0
 81112e8:	f2c0 80fd 	blt.w	81114e6 <__kernel_rem_pio2+0x4d6>
 81112ec:	4b12      	ldr	r3, [pc, #72]	@ (8111338 <__kernel_rem_pio2+0x328>)
 81112ee:	461f      	mov	r7, r3
 81112f0:	ab70      	add	r3, sp, #448	@ 0x1c0
 81112f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 81112f6:	9306      	str	r3, [sp, #24]
 81112f8:	f04f 0a00 	mov.w	sl, #0
 81112fc:	f04f 0b00 	mov.w	fp, #0
 8111300:	2600      	movs	r6, #0
 8111302:	eba8 0504 	sub.w	r5, r8, r4
 8111306:	e0e2      	b.n	81114ce <__kernel_rem_pio2+0x4be>
 8111308:	f04f 0902 	mov.w	r9, #2
 811130c:	e754      	b.n	81111b8 <__kernel_rem_pio2+0x1a8>
 811130e:	bf00      	nop
	...
 811131c:	3ff00000 	.word	0x3ff00000
 8111320:	081124b8 	.word	0x081124b8
 8111324:	40200000 	.word	0x40200000
 8111328:	3ff00000 	.word	0x3ff00000
 811132c:	3e700000 	.word	0x3e700000
 8111330:	41700000 	.word	0x41700000
 8111334:	3fe00000 	.word	0x3fe00000
 8111338:	08112478 	.word	0x08112478
 811133c:	f854 3b04 	ldr.w	r3, [r4], #4
 8111340:	b945      	cbnz	r5, 8111354 <__kernel_rem_pio2+0x344>
 8111342:	b123      	cbz	r3, 811134e <__kernel_rem_pio2+0x33e>
 8111344:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8111348:	f844 3c04 	str.w	r3, [r4, #-4]
 811134c:	2301      	movs	r3, #1
 811134e:	3201      	adds	r2, #1
 8111350:	461d      	mov	r5, r3
 8111352:	e738      	b.n	81111c6 <__kernel_rem_pio2+0x1b6>
 8111354:	1acb      	subs	r3, r1, r3
 8111356:	e7f7      	b.n	8111348 <__kernel_rem_pio2+0x338>
 8111358:	f108 32ff 	add.w	r2, r8, #4294967295
 811135c:	ab0c      	add	r3, sp, #48	@ 0x30
 811135e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8111362:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8111366:	a90c      	add	r1, sp, #48	@ 0x30
 8111368:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 811136c:	e739      	b.n	81111e2 <__kernel_rem_pio2+0x1d2>
 811136e:	f108 32ff 	add.w	r2, r8, #4294967295
 8111372:	ab0c      	add	r3, sp, #48	@ 0x30
 8111374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8111378:	f3c3 0315 	ubfx	r3, r3, #0, #22
 811137c:	e7f3      	b.n	8111366 <__kernel_rem_pio2+0x356>
 811137e:	a90c      	add	r1, sp, #48	@ 0x30
 8111380:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8111384:	3b01      	subs	r3, #1
 8111386:	430a      	orrs	r2, r1
 8111388:	e787      	b.n	811129a <__kernel_rem_pio2+0x28a>
 811138a:	3401      	adds	r4, #1
 811138c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8111390:	2a00      	cmp	r2, #0
 8111392:	d0fa      	beq.n	811138a <__kernel_rem_pio2+0x37a>
 8111394:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8111396:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 811139a:	eb0d 0503 	add.w	r5, sp, r3
 811139e:	9b06      	ldr	r3, [sp, #24]
 81113a0:	aa20      	add	r2, sp, #128	@ 0x80
 81113a2:	4443      	add	r3, r8
 81113a4:	f108 0701 	add.w	r7, r8, #1
 81113a8:	3d98      	subs	r5, #152	@ 0x98
 81113aa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 81113ae:	4444      	add	r4, r8
 81113b0:	42bc      	cmp	r4, r7
 81113b2:	da04      	bge.n	81113be <__kernel_rem_pio2+0x3ae>
 81113b4:	46a0      	mov	r8, r4
 81113b6:	e6a2      	b.n	81110fe <__kernel_rem_pio2+0xee>
 81113b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81113ba:	2401      	movs	r4, #1
 81113bc:	e7e6      	b.n	811138c <__kernel_rem_pio2+0x37c>
 81113be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81113c0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 81113c4:	f7ef f936 	bl	8100634 <__aeabi_i2d>
 81113c8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8111690 <__kernel_rem_pio2+0x680>
 81113cc:	e8e6 0102 	strd	r0, r1, [r6], #8
 81113d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 81113d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 81113d8:	46b2      	mov	sl, r6
 81113da:	f04f 0800 	mov.w	r8, #0
 81113de:	9b05      	ldr	r3, [sp, #20]
 81113e0:	4598      	cmp	r8, r3
 81113e2:	dd05      	ble.n	81113f0 <__kernel_rem_pio2+0x3e0>
 81113e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 81113e8:	3701      	adds	r7, #1
 81113ea:	eca5 7b02 	vstmia	r5!, {d7}
 81113ee:	e7df      	b.n	81113b0 <__kernel_rem_pio2+0x3a0>
 81113f0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 81113f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 81113f8:	f7ef f986 	bl	8100708 <__aeabi_dmul>
 81113fc:	4602      	mov	r2, r0
 81113fe:	460b      	mov	r3, r1
 8111400:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8111404:	f7ee ffca 	bl	810039c <__adddf3>
 8111408:	f108 0801 	add.w	r8, r8, #1
 811140c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8111410:	e7e5      	b.n	81113de <__kernel_rem_pio2+0x3ce>
 8111412:	f1cb 0000 	rsb	r0, fp, #0
 8111416:	ec47 6b10 	vmov	d0, r6, r7
 811141a:	f000 f951 	bl	81116c0 <scalbn>
 811141e:	ec55 4b10 	vmov	r4, r5, d0
 8111422:	4b9d      	ldr	r3, [pc, #628]	@ (8111698 <__kernel_rem_pio2+0x688>)
 8111424:	2200      	movs	r2, #0
 8111426:	4620      	mov	r0, r4
 8111428:	4629      	mov	r1, r5
 811142a:	f7ef fbf3 	bl	8100c14 <__aeabi_dcmpge>
 811142e:	b300      	cbz	r0, 8111472 <__kernel_rem_pio2+0x462>
 8111430:	4b9a      	ldr	r3, [pc, #616]	@ (811169c <__kernel_rem_pio2+0x68c>)
 8111432:	2200      	movs	r2, #0
 8111434:	4620      	mov	r0, r4
 8111436:	4629      	mov	r1, r5
 8111438:	f7ef f966 	bl	8100708 <__aeabi_dmul>
 811143c:	f7ef fc14 	bl	8100c68 <__aeabi_d2iz>
 8111440:	4606      	mov	r6, r0
 8111442:	f7ef f8f7 	bl	8100634 <__aeabi_i2d>
 8111446:	4b94      	ldr	r3, [pc, #592]	@ (8111698 <__kernel_rem_pio2+0x688>)
 8111448:	2200      	movs	r2, #0
 811144a:	f7ef f95d 	bl	8100708 <__aeabi_dmul>
 811144e:	460b      	mov	r3, r1
 8111450:	4602      	mov	r2, r0
 8111452:	4629      	mov	r1, r5
 8111454:	4620      	mov	r0, r4
 8111456:	f7ee ff9f 	bl	8100398 <__aeabi_dsub>
 811145a:	f7ef fc05 	bl	8100c68 <__aeabi_d2iz>
 811145e:	ab0c      	add	r3, sp, #48	@ 0x30
 8111460:	f10b 0b18 	add.w	fp, fp, #24
 8111464:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8111468:	f108 0801 	add.w	r8, r8, #1
 811146c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8111470:	e722      	b.n	81112b8 <__kernel_rem_pio2+0x2a8>
 8111472:	4620      	mov	r0, r4
 8111474:	4629      	mov	r1, r5
 8111476:	f7ef fbf7 	bl	8100c68 <__aeabi_d2iz>
 811147a:	ab0c      	add	r3, sp, #48	@ 0x30
 811147c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8111480:	e71a      	b.n	81112b8 <__kernel_rem_pio2+0x2a8>
 8111482:	ab0c      	add	r3, sp, #48	@ 0x30
 8111484:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8111488:	f7ef f8d4 	bl	8100634 <__aeabi_i2d>
 811148c:	4622      	mov	r2, r4
 811148e:	462b      	mov	r3, r5
 8111490:	f7ef f93a 	bl	8100708 <__aeabi_dmul>
 8111494:	4652      	mov	r2, sl
 8111496:	e967 0102 	strd	r0, r1, [r7, #-8]!
 811149a:	465b      	mov	r3, fp
 811149c:	4620      	mov	r0, r4
 811149e:	4629      	mov	r1, r5
 81114a0:	f7ef f932 	bl	8100708 <__aeabi_dmul>
 81114a4:	3e01      	subs	r6, #1
 81114a6:	4604      	mov	r4, r0
 81114a8:	460d      	mov	r5, r1
 81114aa:	e718      	b.n	81112de <__kernel_rem_pio2+0x2ce>
 81114ac:	9906      	ldr	r1, [sp, #24]
 81114ae:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 81114b2:	9106      	str	r1, [sp, #24]
 81114b4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 81114b8:	f7ef f926 	bl	8100708 <__aeabi_dmul>
 81114bc:	4602      	mov	r2, r0
 81114be:	460b      	mov	r3, r1
 81114c0:	4650      	mov	r0, sl
 81114c2:	4659      	mov	r1, fp
 81114c4:	f7ee ff6a 	bl	810039c <__adddf3>
 81114c8:	3601      	adds	r6, #1
 81114ca:	4682      	mov	sl, r0
 81114cc:	468b      	mov	fp, r1
 81114ce:	9b00      	ldr	r3, [sp, #0]
 81114d0:	429e      	cmp	r6, r3
 81114d2:	dc01      	bgt.n	81114d8 <__kernel_rem_pio2+0x4c8>
 81114d4:	42b5      	cmp	r5, r6
 81114d6:	dae9      	bge.n	81114ac <__kernel_rem_pio2+0x49c>
 81114d8:	ab48      	add	r3, sp, #288	@ 0x120
 81114da:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 81114de:	e9c5 ab00 	strd	sl, fp, [r5]
 81114e2:	3c01      	subs	r4, #1
 81114e4:	e6ff      	b.n	81112e6 <__kernel_rem_pio2+0x2d6>
 81114e6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 81114e8:	2b02      	cmp	r3, #2
 81114ea:	dc0b      	bgt.n	8111504 <__kernel_rem_pio2+0x4f4>
 81114ec:	2b00      	cmp	r3, #0
 81114ee:	dc39      	bgt.n	8111564 <__kernel_rem_pio2+0x554>
 81114f0:	d05d      	beq.n	81115ae <__kernel_rem_pio2+0x59e>
 81114f2:	9b02      	ldr	r3, [sp, #8]
 81114f4:	f003 0007 	and.w	r0, r3, #7
 81114f8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 81114fc:	ecbd 8b02 	vpop	{d8}
 8111500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111504:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8111506:	2b03      	cmp	r3, #3
 8111508:	d1f3      	bne.n	81114f2 <__kernel_rem_pio2+0x4e2>
 811150a:	9b05      	ldr	r3, [sp, #20]
 811150c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8111510:	eb0d 0403 	add.w	r4, sp, r3
 8111514:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8111518:	4625      	mov	r5, r4
 811151a:	46c2      	mov	sl, r8
 811151c:	f1ba 0f00 	cmp.w	sl, #0
 8111520:	f1a5 0508 	sub.w	r5, r5, #8
 8111524:	dc6b      	bgt.n	81115fe <__kernel_rem_pio2+0x5ee>
 8111526:	4645      	mov	r5, r8
 8111528:	2d01      	cmp	r5, #1
 811152a:	f1a4 0408 	sub.w	r4, r4, #8
 811152e:	f300 8087 	bgt.w	8111640 <__kernel_rem_pio2+0x630>
 8111532:	9c05      	ldr	r4, [sp, #20]
 8111534:	ab48      	add	r3, sp, #288	@ 0x120
 8111536:	441c      	add	r4, r3
 8111538:	2000      	movs	r0, #0
 811153a:	2100      	movs	r1, #0
 811153c:	f1b8 0f01 	cmp.w	r8, #1
 8111540:	f300 809c 	bgt.w	811167c <__kernel_rem_pio2+0x66c>
 8111544:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8111548:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 811154c:	f1b9 0f00 	cmp.w	r9, #0
 8111550:	f040 80a6 	bne.w	81116a0 <__kernel_rem_pio2+0x690>
 8111554:	9b04      	ldr	r3, [sp, #16]
 8111556:	e9c3 7800 	strd	r7, r8, [r3]
 811155a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 811155e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8111562:	e7c6      	b.n	81114f2 <__kernel_rem_pio2+0x4e2>
 8111564:	9d05      	ldr	r5, [sp, #20]
 8111566:	ab48      	add	r3, sp, #288	@ 0x120
 8111568:	441d      	add	r5, r3
 811156a:	4644      	mov	r4, r8
 811156c:	2000      	movs	r0, #0
 811156e:	2100      	movs	r1, #0
 8111570:	2c00      	cmp	r4, #0
 8111572:	da35      	bge.n	81115e0 <__kernel_rem_pio2+0x5d0>
 8111574:	f1b9 0f00 	cmp.w	r9, #0
 8111578:	d038      	beq.n	81115ec <__kernel_rem_pio2+0x5dc>
 811157a:	4602      	mov	r2, r0
 811157c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8111580:	9c04      	ldr	r4, [sp, #16]
 8111582:	e9c4 2300 	strd	r2, r3, [r4]
 8111586:	4602      	mov	r2, r0
 8111588:	460b      	mov	r3, r1
 811158a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 811158e:	f7ee ff03 	bl	8100398 <__aeabi_dsub>
 8111592:	ad4a      	add	r5, sp, #296	@ 0x128
 8111594:	2401      	movs	r4, #1
 8111596:	45a0      	cmp	r8, r4
 8111598:	da2b      	bge.n	81115f2 <__kernel_rem_pio2+0x5e2>
 811159a:	f1b9 0f00 	cmp.w	r9, #0
 811159e:	d002      	beq.n	81115a6 <__kernel_rem_pio2+0x596>
 81115a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 81115a4:	4619      	mov	r1, r3
 81115a6:	9b04      	ldr	r3, [sp, #16]
 81115a8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 81115ac:	e7a1      	b.n	81114f2 <__kernel_rem_pio2+0x4e2>
 81115ae:	9c05      	ldr	r4, [sp, #20]
 81115b0:	ab48      	add	r3, sp, #288	@ 0x120
 81115b2:	441c      	add	r4, r3
 81115b4:	2000      	movs	r0, #0
 81115b6:	2100      	movs	r1, #0
 81115b8:	f1b8 0f00 	cmp.w	r8, #0
 81115bc:	da09      	bge.n	81115d2 <__kernel_rem_pio2+0x5c2>
 81115be:	f1b9 0f00 	cmp.w	r9, #0
 81115c2:	d002      	beq.n	81115ca <__kernel_rem_pio2+0x5ba>
 81115c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 81115c8:	4619      	mov	r1, r3
 81115ca:	9b04      	ldr	r3, [sp, #16]
 81115cc:	e9c3 0100 	strd	r0, r1, [r3]
 81115d0:	e78f      	b.n	81114f2 <__kernel_rem_pio2+0x4e2>
 81115d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 81115d6:	f7ee fee1 	bl	810039c <__adddf3>
 81115da:	f108 38ff 	add.w	r8, r8, #4294967295
 81115de:	e7eb      	b.n	81115b8 <__kernel_rem_pio2+0x5a8>
 81115e0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 81115e4:	f7ee feda 	bl	810039c <__adddf3>
 81115e8:	3c01      	subs	r4, #1
 81115ea:	e7c1      	b.n	8111570 <__kernel_rem_pio2+0x560>
 81115ec:	4602      	mov	r2, r0
 81115ee:	460b      	mov	r3, r1
 81115f0:	e7c6      	b.n	8111580 <__kernel_rem_pio2+0x570>
 81115f2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 81115f6:	f7ee fed1 	bl	810039c <__adddf3>
 81115fa:	3401      	adds	r4, #1
 81115fc:	e7cb      	b.n	8111596 <__kernel_rem_pio2+0x586>
 81115fe:	ed95 7b00 	vldr	d7, [r5]
 8111602:	ed8d 7b00 	vstr	d7, [sp]
 8111606:	ed95 7b02 	vldr	d7, [r5, #8]
 811160a:	e9dd 0100 	ldrd	r0, r1, [sp]
 811160e:	ec53 2b17 	vmov	r2, r3, d7
 8111612:	ed8d 7b06 	vstr	d7, [sp, #24]
 8111616:	f7ee fec1 	bl	810039c <__adddf3>
 811161a:	4602      	mov	r2, r0
 811161c:	460b      	mov	r3, r1
 811161e:	4606      	mov	r6, r0
 8111620:	460f      	mov	r7, r1
 8111622:	e9dd 0100 	ldrd	r0, r1, [sp]
 8111626:	f7ee feb7 	bl	8100398 <__aeabi_dsub>
 811162a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 811162e:	f7ee feb5 	bl	810039c <__adddf3>
 8111632:	f10a 3aff 	add.w	sl, sl, #4294967295
 8111636:	e9c5 0102 	strd	r0, r1, [r5, #8]
 811163a:	e9c5 6700 	strd	r6, r7, [r5]
 811163e:	e76d      	b.n	811151c <__kernel_rem_pio2+0x50c>
 8111640:	ed94 7b00 	vldr	d7, [r4]
 8111644:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8111648:	ec51 0b17 	vmov	r0, r1, d7
 811164c:	4652      	mov	r2, sl
 811164e:	465b      	mov	r3, fp
 8111650:	ed8d 7b00 	vstr	d7, [sp]
 8111654:	f7ee fea2 	bl	810039c <__adddf3>
 8111658:	4602      	mov	r2, r0
 811165a:	460b      	mov	r3, r1
 811165c:	4606      	mov	r6, r0
 811165e:	460f      	mov	r7, r1
 8111660:	e9dd 0100 	ldrd	r0, r1, [sp]
 8111664:	f7ee fe98 	bl	8100398 <__aeabi_dsub>
 8111668:	4652      	mov	r2, sl
 811166a:	465b      	mov	r3, fp
 811166c:	f7ee fe96 	bl	810039c <__adddf3>
 8111670:	3d01      	subs	r5, #1
 8111672:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8111676:	e9c4 6700 	strd	r6, r7, [r4]
 811167a:	e755      	b.n	8111528 <__kernel_rem_pio2+0x518>
 811167c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8111680:	f7ee fe8c 	bl	810039c <__adddf3>
 8111684:	f108 38ff 	add.w	r8, r8, #4294967295
 8111688:	e758      	b.n	811153c <__kernel_rem_pio2+0x52c>
 811168a:	bf00      	nop
 811168c:	f3af 8000 	nop.w
	...
 8111698:	41700000 	.word	0x41700000
 811169c:	3e700000 	.word	0x3e700000
 81116a0:	9b04      	ldr	r3, [sp, #16]
 81116a2:	9a04      	ldr	r2, [sp, #16]
 81116a4:	601f      	str	r7, [r3, #0]
 81116a6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 81116aa:	605c      	str	r4, [r3, #4]
 81116ac:	609d      	str	r5, [r3, #8]
 81116ae:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 81116b2:	60d3      	str	r3, [r2, #12]
 81116b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 81116b8:	6110      	str	r0, [r2, #16]
 81116ba:	6153      	str	r3, [r2, #20]
 81116bc:	e719      	b.n	81114f2 <__kernel_rem_pio2+0x4e2>
 81116be:	bf00      	nop

081116c0 <scalbn>:
 81116c0:	b570      	push	{r4, r5, r6, lr}
 81116c2:	ec55 4b10 	vmov	r4, r5, d0
 81116c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 81116ca:	4606      	mov	r6, r0
 81116cc:	462b      	mov	r3, r5
 81116ce:	b991      	cbnz	r1, 81116f6 <scalbn+0x36>
 81116d0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 81116d4:	4323      	orrs	r3, r4
 81116d6:	d03d      	beq.n	8111754 <scalbn+0x94>
 81116d8:	4b35      	ldr	r3, [pc, #212]	@ (81117b0 <scalbn+0xf0>)
 81116da:	4620      	mov	r0, r4
 81116dc:	4629      	mov	r1, r5
 81116de:	2200      	movs	r2, #0
 81116e0:	f7ef f812 	bl	8100708 <__aeabi_dmul>
 81116e4:	4b33      	ldr	r3, [pc, #204]	@ (81117b4 <scalbn+0xf4>)
 81116e6:	429e      	cmp	r6, r3
 81116e8:	4604      	mov	r4, r0
 81116ea:	460d      	mov	r5, r1
 81116ec:	da0f      	bge.n	811170e <scalbn+0x4e>
 81116ee:	a328      	add	r3, pc, #160	@ (adr r3, 8111790 <scalbn+0xd0>)
 81116f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81116f4:	e01e      	b.n	8111734 <scalbn+0x74>
 81116f6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 81116fa:	4291      	cmp	r1, r2
 81116fc:	d10b      	bne.n	8111716 <scalbn+0x56>
 81116fe:	4622      	mov	r2, r4
 8111700:	4620      	mov	r0, r4
 8111702:	4629      	mov	r1, r5
 8111704:	f7ee fe4a 	bl	810039c <__adddf3>
 8111708:	4604      	mov	r4, r0
 811170a:	460d      	mov	r5, r1
 811170c:	e022      	b.n	8111754 <scalbn+0x94>
 811170e:	460b      	mov	r3, r1
 8111710:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8111714:	3936      	subs	r1, #54	@ 0x36
 8111716:	f24c 3250 	movw	r2, #50000	@ 0xc350
 811171a:	4296      	cmp	r6, r2
 811171c:	dd0d      	ble.n	811173a <scalbn+0x7a>
 811171e:	2d00      	cmp	r5, #0
 8111720:	a11d      	add	r1, pc, #116	@ (adr r1, 8111798 <scalbn+0xd8>)
 8111722:	e9d1 0100 	ldrd	r0, r1, [r1]
 8111726:	da02      	bge.n	811172e <scalbn+0x6e>
 8111728:	a11d      	add	r1, pc, #116	@ (adr r1, 81117a0 <scalbn+0xe0>)
 811172a:	e9d1 0100 	ldrd	r0, r1, [r1]
 811172e:	a31a      	add	r3, pc, #104	@ (adr r3, 8111798 <scalbn+0xd8>)
 8111730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8111734:	f7ee ffe8 	bl	8100708 <__aeabi_dmul>
 8111738:	e7e6      	b.n	8111708 <scalbn+0x48>
 811173a:	1872      	adds	r2, r6, r1
 811173c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8111740:	428a      	cmp	r2, r1
 8111742:	dcec      	bgt.n	811171e <scalbn+0x5e>
 8111744:	2a00      	cmp	r2, #0
 8111746:	dd08      	ble.n	811175a <scalbn+0x9a>
 8111748:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 811174c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8111750:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8111754:	ec45 4b10 	vmov	d0, r4, r5
 8111758:	bd70      	pop	{r4, r5, r6, pc}
 811175a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 811175e:	da08      	bge.n	8111772 <scalbn+0xb2>
 8111760:	2d00      	cmp	r5, #0
 8111762:	a10b      	add	r1, pc, #44	@ (adr r1, 8111790 <scalbn+0xd0>)
 8111764:	e9d1 0100 	ldrd	r0, r1, [r1]
 8111768:	dac1      	bge.n	81116ee <scalbn+0x2e>
 811176a:	a10f      	add	r1, pc, #60	@ (adr r1, 81117a8 <scalbn+0xe8>)
 811176c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8111770:	e7bd      	b.n	81116ee <scalbn+0x2e>
 8111772:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8111776:	3236      	adds	r2, #54	@ 0x36
 8111778:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 811177c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8111780:	4620      	mov	r0, r4
 8111782:	4b0d      	ldr	r3, [pc, #52]	@ (81117b8 <scalbn+0xf8>)
 8111784:	4629      	mov	r1, r5
 8111786:	2200      	movs	r2, #0
 8111788:	e7d4      	b.n	8111734 <scalbn+0x74>
 811178a:	bf00      	nop
 811178c:	f3af 8000 	nop.w
 8111790:	c2f8f359 	.word	0xc2f8f359
 8111794:	01a56e1f 	.word	0x01a56e1f
 8111798:	8800759c 	.word	0x8800759c
 811179c:	7e37e43c 	.word	0x7e37e43c
 81117a0:	8800759c 	.word	0x8800759c
 81117a4:	fe37e43c 	.word	0xfe37e43c
 81117a8:	c2f8f359 	.word	0xc2f8f359
 81117ac:	81a56e1f 	.word	0x81a56e1f
 81117b0:	43500000 	.word	0x43500000
 81117b4:	ffff3cb0 	.word	0xffff3cb0
 81117b8:	3c900000 	.word	0x3c900000
 81117bc:	00000000 	.word	0x00000000

081117c0 <floor>:
 81117c0:	ec51 0b10 	vmov	r0, r1, d0
 81117c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 81117c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81117cc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 81117d0:	2e13      	cmp	r6, #19
 81117d2:	460c      	mov	r4, r1
 81117d4:	4605      	mov	r5, r0
 81117d6:	4680      	mov	r8, r0
 81117d8:	dc34      	bgt.n	8111844 <floor+0x84>
 81117da:	2e00      	cmp	r6, #0
 81117dc:	da17      	bge.n	811180e <floor+0x4e>
 81117de:	a332      	add	r3, pc, #200	@ (adr r3, 81118a8 <floor+0xe8>)
 81117e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81117e4:	f7ee fdda 	bl	810039c <__adddf3>
 81117e8:	2200      	movs	r2, #0
 81117ea:	2300      	movs	r3, #0
 81117ec:	f7ef fa1c 	bl	8100c28 <__aeabi_dcmpgt>
 81117f0:	b150      	cbz	r0, 8111808 <floor+0x48>
 81117f2:	2c00      	cmp	r4, #0
 81117f4:	da55      	bge.n	81118a2 <floor+0xe2>
 81117f6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 81117fa:	432c      	orrs	r4, r5
 81117fc:	2500      	movs	r5, #0
 81117fe:	42ac      	cmp	r4, r5
 8111800:	4c2b      	ldr	r4, [pc, #172]	@ (81118b0 <floor+0xf0>)
 8111802:	bf08      	it	eq
 8111804:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8111808:	4621      	mov	r1, r4
 811180a:	4628      	mov	r0, r5
 811180c:	e023      	b.n	8111856 <floor+0x96>
 811180e:	4f29      	ldr	r7, [pc, #164]	@ (81118b4 <floor+0xf4>)
 8111810:	4137      	asrs	r7, r6
 8111812:	ea01 0307 	and.w	r3, r1, r7
 8111816:	4303      	orrs	r3, r0
 8111818:	d01d      	beq.n	8111856 <floor+0x96>
 811181a:	a323      	add	r3, pc, #140	@ (adr r3, 81118a8 <floor+0xe8>)
 811181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8111820:	f7ee fdbc 	bl	810039c <__adddf3>
 8111824:	2200      	movs	r2, #0
 8111826:	2300      	movs	r3, #0
 8111828:	f7ef f9fe 	bl	8100c28 <__aeabi_dcmpgt>
 811182c:	2800      	cmp	r0, #0
 811182e:	d0eb      	beq.n	8111808 <floor+0x48>
 8111830:	2c00      	cmp	r4, #0
 8111832:	bfbe      	ittt	lt
 8111834:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8111838:	4133      	asrlt	r3, r6
 811183a:	18e4      	addlt	r4, r4, r3
 811183c:	ea24 0407 	bic.w	r4, r4, r7
 8111840:	2500      	movs	r5, #0
 8111842:	e7e1      	b.n	8111808 <floor+0x48>
 8111844:	2e33      	cmp	r6, #51	@ 0x33
 8111846:	dd0a      	ble.n	811185e <floor+0x9e>
 8111848:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 811184c:	d103      	bne.n	8111856 <floor+0x96>
 811184e:	4602      	mov	r2, r0
 8111850:	460b      	mov	r3, r1
 8111852:	f7ee fda3 	bl	810039c <__adddf3>
 8111856:	ec41 0b10 	vmov	d0, r0, r1
 811185a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811185e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8111862:	f04f 37ff 	mov.w	r7, #4294967295
 8111866:	40df      	lsrs	r7, r3
 8111868:	4207      	tst	r7, r0
 811186a:	d0f4      	beq.n	8111856 <floor+0x96>
 811186c:	a30e      	add	r3, pc, #56	@ (adr r3, 81118a8 <floor+0xe8>)
 811186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8111872:	f7ee fd93 	bl	810039c <__adddf3>
 8111876:	2200      	movs	r2, #0
 8111878:	2300      	movs	r3, #0
 811187a:	f7ef f9d5 	bl	8100c28 <__aeabi_dcmpgt>
 811187e:	2800      	cmp	r0, #0
 8111880:	d0c2      	beq.n	8111808 <floor+0x48>
 8111882:	2c00      	cmp	r4, #0
 8111884:	da0a      	bge.n	811189c <floor+0xdc>
 8111886:	2e14      	cmp	r6, #20
 8111888:	d101      	bne.n	811188e <floor+0xce>
 811188a:	3401      	adds	r4, #1
 811188c:	e006      	b.n	811189c <floor+0xdc>
 811188e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8111892:	2301      	movs	r3, #1
 8111894:	40b3      	lsls	r3, r6
 8111896:	441d      	add	r5, r3
 8111898:	4545      	cmp	r5, r8
 811189a:	d3f6      	bcc.n	811188a <floor+0xca>
 811189c:	ea25 0507 	bic.w	r5, r5, r7
 81118a0:	e7b2      	b.n	8111808 <floor+0x48>
 81118a2:	2500      	movs	r5, #0
 81118a4:	462c      	mov	r4, r5
 81118a6:	e7af      	b.n	8111808 <floor+0x48>
 81118a8:	8800759c 	.word	0x8800759c
 81118ac:	7e37e43c 	.word	0x7e37e43c
 81118b0:	bff00000 	.word	0xbff00000
 81118b4:	000fffff 	.word	0x000fffff

081118b8 <_init>:
 81118b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81118ba:	bf00      	nop
 81118bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81118be:	bc08      	pop	{r3}
 81118c0:	469e      	mov	lr, r3
 81118c2:	4770      	bx	lr

081118c4 <_fini>:
 81118c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81118c6:	bf00      	nop
 81118c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81118ca:	bc08      	pop	{r3}
 81118cc:	469e      	mov	lr, r3
 81118ce:	4770      	bx	lr
