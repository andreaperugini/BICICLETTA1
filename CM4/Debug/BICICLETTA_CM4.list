
BICICLETTA_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011410  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  081116b0  081116b0  000126b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08111b9c  08111b9c  00012b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08111ba4  08111ba4  00012ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08111ba8  08111ba8  00012ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000264  10000000  08111bac  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007cc  10000264  08111e10  00013264  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000a30  08111e10  00013a30  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00013264  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028ba8  00000000  00000000  00013294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004af6  00000000  00000000  0003be3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001cb0  00000000  00000000  00040938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000015a3  00000000  00000000  000425e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f569  00000000  00000000  00043b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025121  00000000  00000000  000830f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a2dca  00000000  00000000  000a8215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  0024afdf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008fcc  00000000  00000000  0024b098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  00254064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00002407  00000000  00000000  002540ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000080  00000000  00000000  002564d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000264 	.word	0x10000264
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08111698 	.word	0x08111698

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000268 	.word	0x10000268
 81002dc:	08111698 	.word	0x08111698

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a0 	b.w	81010f0 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	@ (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	460c      	mov	r4, r1
 8100e3c:	2b00      	cmp	r3, #0
 8100e3e:	d14e      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e40:	4694      	mov	ip, r2
 8100e42:	458c      	cmp	ip, r1
 8100e44:	4686      	mov	lr, r0
 8100e46:	fab2 f282 	clz	r2, r2
 8100e4a:	d962      	bls.n	8100f12 <__udivmoddi4+0xde>
 8100e4c:	b14a      	cbz	r2, 8100e62 <__udivmoddi4+0x2e>
 8100e4e:	f1c2 0320 	rsb	r3, r2, #32
 8100e52:	4091      	lsls	r1, r2
 8100e54:	fa20 f303 	lsr.w	r3, r0, r3
 8100e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5c:	4319      	orrs	r1, r3
 8100e5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8100e62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100e66:	fa1f f68c 	uxth.w	r6, ip
 8100e6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8100e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100e72:	fb07 1114 	mls	r1, r7, r4, r1
 8100e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e7a:	fb04 f106 	mul.w	r1, r4, r6
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f104 30ff 	add.w	r0, r4, #4294967295
 8100e8a:	f080 8112 	bcs.w	81010b2 <__udivmoddi4+0x27e>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 810f 	bls.w	81010b2 <__udivmoddi4+0x27e>
 8100e94:	3c02      	subs	r4, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a59      	subs	r1, r3, r1
 8100e9a:	fa1f f38e 	uxth.w	r3, lr
 8100e9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8100ea2:	fb07 1110 	mls	r1, r7, r0, r1
 8100ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100eaa:	fb00 f606 	mul.w	r6, r0, r6
 8100eae:	429e      	cmp	r6, r3
 8100eb0:	d90a      	bls.n	8100ec8 <__udivmoddi4+0x94>
 8100eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8100eb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8100eba:	f080 80fc 	bcs.w	81010b6 <__udivmoddi4+0x282>
 8100ebe:	429e      	cmp	r6, r3
 8100ec0:	f240 80f9 	bls.w	81010b6 <__udivmoddi4+0x282>
 8100ec4:	4463      	add	r3, ip
 8100ec6:	3802      	subs	r0, #2
 8100ec8:	1b9b      	subs	r3, r3, r6
 8100eca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100ece:	2100      	movs	r1, #0
 8100ed0:	b11d      	cbz	r5, 8100eda <__udivmoddi4+0xa6>
 8100ed2:	40d3      	lsrs	r3, r2
 8100ed4:	2200      	movs	r2, #0
 8100ed6:	e9c5 3200 	strd	r3, r2, [r5]
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d905      	bls.n	8100eee <__udivmoddi4+0xba>
 8100ee2:	b10d      	cbz	r5, 8100ee8 <__udivmoddi4+0xb4>
 8100ee4:	e9c5 0100 	strd	r0, r1, [r5]
 8100ee8:	2100      	movs	r1, #0
 8100eea:	4608      	mov	r0, r1
 8100eec:	e7f5      	b.n	8100eda <__udivmoddi4+0xa6>
 8100eee:	fab3 f183 	clz	r1, r3
 8100ef2:	2900      	cmp	r1, #0
 8100ef4:	d146      	bne.n	8100f84 <__udivmoddi4+0x150>
 8100ef6:	42a3      	cmp	r3, r4
 8100ef8:	d302      	bcc.n	8100f00 <__udivmoddi4+0xcc>
 8100efa:	4290      	cmp	r0, r2
 8100efc:	f0c0 80f0 	bcc.w	81010e0 <__udivmoddi4+0x2ac>
 8100f00:	1a86      	subs	r6, r0, r2
 8100f02:	eb64 0303 	sbc.w	r3, r4, r3
 8100f06:	2001      	movs	r0, #1
 8100f08:	2d00      	cmp	r5, #0
 8100f0a:	d0e6      	beq.n	8100eda <__udivmoddi4+0xa6>
 8100f0c:	e9c5 6300 	strd	r6, r3, [r5]
 8100f10:	e7e3      	b.n	8100eda <__udivmoddi4+0xa6>
 8100f12:	2a00      	cmp	r2, #0
 8100f14:	f040 8090 	bne.w	8101038 <__udivmoddi4+0x204>
 8100f18:	eba1 040c 	sub.w	r4, r1, ip
 8100f1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100f20:	fa1f f78c 	uxth.w	r7, ip
 8100f24:	2101      	movs	r1, #1
 8100f26:	fbb4 f6f8 	udiv	r6, r4, r8
 8100f2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100f2e:	fb08 4416 	mls	r4, r8, r6, r4
 8100f32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f36:	fb07 f006 	mul.w	r0, r7, r6
 8100f3a:	4298      	cmp	r0, r3
 8100f3c:	d908      	bls.n	8100f50 <__udivmoddi4+0x11c>
 8100f3e:	eb1c 0303 	adds.w	r3, ip, r3
 8100f42:	f106 34ff 	add.w	r4, r6, #4294967295
 8100f46:	d202      	bcs.n	8100f4e <__udivmoddi4+0x11a>
 8100f48:	4298      	cmp	r0, r3
 8100f4a:	f200 80cd 	bhi.w	81010e8 <__udivmoddi4+0x2b4>
 8100f4e:	4626      	mov	r6, r4
 8100f50:	1a1c      	subs	r4, r3, r0
 8100f52:	fa1f f38e 	uxth.w	r3, lr
 8100f56:	fbb4 f0f8 	udiv	r0, r4, r8
 8100f5a:	fb08 4410 	mls	r4, r8, r0, r4
 8100f5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f62:	fb00 f707 	mul.w	r7, r0, r7
 8100f66:	429f      	cmp	r7, r3
 8100f68:	d908      	bls.n	8100f7c <__udivmoddi4+0x148>
 8100f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8100f6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8100f72:	d202      	bcs.n	8100f7a <__udivmoddi4+0x146>
 8100f74:	429f      	cmp	r7, r3
 8100f76:	f200 80b0 	bhi.w	81010da <__udivmoddi4+0x2a6>
 8100f7a:	4620      	mov	r0, r4
 8100f7c:	1bdb      	subs	r3, r3, r7
 8100f7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100f82:	e7a5      	b.n	8100ed0 <__udivmoddi4+0x9c>
 8100f84:	f1c1 0620 	rsb	r6, r1, #32
 8100f88:	408b      	lsls	r3, r1
 8100f8a:	fa22 f706 	lsr.w	r7, r2, r6
 8100f8e:	431f      	orrs	r7, r3
 8100f90:	fa20 fc06 	lsr.w	ip, r0, r6
 8100f94:	fa04 f301 	lsl.w	r3, r4, r1
 8100f98:	ea43 030c 	orr.w	r3, r3, ip
 8100f9c:	40f4      	lsrs	r4, r6
 8100f9e:	fa00 f801 	lsl.w	r8, r0, r1
 8100fa2:	0c38      	lsrs	r0, r7, #16
 8100fa4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100fa8:	fbb4 fef0 	udiv	lr, r4, r0
 8100fac:	fa1f fc87 	uxth.w	ip, r7
 8100fb0:	fb00 441e 	mls	r4, r0, lr, r4
 8100fb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fb8:	fb0e f90c 	mul.w	r9, lr, ip
 8100fbc:	45a1      	cmp	r9, r4
 8100fbe:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc2:	d90a      	bls.n	8100fda <__udivmoddi4+0x1a6>
 8100fc4:	193c      	adds	r4, r7, r4
 8100fc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100fca:	f080 8084 	bcs.w	81010d6 <__udivmoddi4+0x2a2>
 8100fce:	45a1      	cmp	r9, r4
 8100fd0:	f240 8081 	bls.w	81010d6 <__udivmoddi4+0x2a2>
 8100fd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8100fd8:	443c      	add	r4, r7
 8100fda:	eba4 0409 	sub.w	r4, r4, r9
 8100fde:	fa1f f983 	uxth.w	r9, r3
 8100fe2:	fbb4 f3f0 	udiv	r3, r4, r0
 8100fe6:	fb00 4413 	mls	r4, r0, r3, r4
 8100fea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fee:	fb03 fc0c 	mul.w	ip, r3, ip
 8100ff2:	45a4      	cmp	ip, r4
 8100ff4:	d907      	bls.n	8101006 <__udivmoddi4+0x1d2>
 8100ff6:	193c      	adds	r4, r7, r4
 8100ff8:	f103 30ff 	add.w	r0, r3, #4294967295
 8100ffc:	d267      	bcs.n	81010ce <__udivmoddi4+0x29a>
 8100ffe:	45a4      	cmp	ip, r4
 8101000:	d965      	bls.n	81010ce <__udivmoddi4+0x29a>
 8101002:	3b02      	subs	r3, #2
 8101004:	443c      	add	r4, r7
 8101006:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 810100a:	fba0 9302 	umull	r9, r3, r0, r2
 810100e:	eba4 040c 	sub.w	r4, r4, ip
 8101012:	429c      	cmp	r4, r3
 8101014:	46ce      	mov	lr, r9
 8101016:	469c      	mov	ip, r3
 8101018:	d351      	bcc.n	81010be <__udivmoddi4+0x28a>
 810101a:	d04e      	beq.n	81010ba <__udivmoddi4+0x286>
 810101c:	b155      	cbz	r5, 8101034 <__udivmoddi4+0x200>
 810101e:	ebb8 030e 	subs.w	r3, r8, lr
 8101022:	eb64 040c 	sbc.w	r4, r4, ip
 8101026:	fa04 f606 	lsl.w	r6, r4, r6
 810102a:	40cb      	lsrs	r3, r1
 810102c:	431e      	orrs	r6, r3
 810102e:	40cc      	lsrs	r4, r1
 8101030:	e9c5 6400 	strd	r6, r4, [r5]
 8101034:	2100      	movs	r1, #0
 8101036:	e750      	b.n	8100eda <__udivmoddi4+0xa6>
 8101038:	f1c2 0320 	rsb	r3, r2, #32
 810103c:	fa20 f103 	lsr.w	r1, r0, r3
 8101040:	fa0c fc02 	lsl.w	ip, ip, r2
 8101044:	fa24 f303 	lsr.w	r3, r4, r3
 8101048:	4094      	lsls	r4, r2
 810104a:	430c      	orrs	r4, r1
 810104c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8101050:	fa00 fe02 	lsl.w	lr, r0, r2
 8101054:	fa1f f78c 	uxth.w	r7, ip
 8101058:	fbb3 f0f8 	udiv	r0, r3, r8
 810105c:	fb08 3110 	mls	r1, r8, r0, r3
 8101060:	0c23      	lsrs	r3, r4, #16
 8101062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8101066:	fb00 f107 	mul.w	r1, r0, r7
 810106a:	4299      	cmp	r1, r3
 810106c:	d908      	bls.n	8101080 <__udivmoddi4+0x24c>
 810106e:	eb1c 0303 	adds.w	r3, ip, r3
 8101072:	f100 36ff 	add.w	r6, r0, #4294967295
 8101076:	d22c      	bcs.n	81010d2 <__udivmoddi4+0x29e>
 8101078:	4299      	cmp	r1, r3
 810107a:	d92a      	bls.n	81010d2 <__udivmoddi4+0x29e>
 810107c:	3802      	subs	r0, #2
 810107e:	4463      	add	r3, ip
 8101080:	1a5b      	subs	r3, r3, r1
 8101082:	b2a4      	uxth	r4, r4
 8101084:	fbb3 f1f8 	udiv	r1, r3, r8
 8101088:	fb08 3311 	mls	r3, r8, r1, r3
 810108c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8101090:	fb01 f307 	mul.w	r3, r1, r7
 8101094:	42a3      	cmp	r3, r4
 8101096:	d908      	bls.n	81010aa <__udivmoddi4+0x276>
 8101098:	eb1c 0404 	adds.w	r4, ip, r4
 810109c:	f101 36ff 	add.w	r6, r1, #4294967295
 81010a0:	d213      	bcs.n	81010ca <__udivmoddi4+0x296>
 81010a2:	42a3      	cmp	r3, r4
 81010a4:	d911      	bls.n	81010ca <__udivmoddi4+0x296>
 81010a6:	3902      	subs	r1, #2
 81010a8:	4464      	add	r4, ip
 81010aa:	1ae4      	subs	r4, r4, r3
 81010ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 81010b0:	e739      	b.n	8100f26 <__udivmoddi4+0xf2>
 81010b2:	4604      	mov	r4, r0
 81010b4:	e6f0      	b.n	8100e98 <__udivmoddi4+0x64>
 81010b6:	4608      	mov	r0, r1
 81010b8:	e706      	b.n	8100ec8 <__udivmoddi4+0x94>
 81010ba:	45c8      	cmp	r8, r9
 81010bc:	d2ae      	bcs.n	810101c <__udivmoddi4+0x1e8>
 81010be:	ebb9 0e02 	subs.w	lr, r9, r2
 81010c2:	eb63 0c07 	sbc.w	ip, r3, r7
 81010c6:	3801      	subs	r0, #1
 81010c8:	e7a8      	b.n	810101c <__udivmoddi4+0x1e8>
 81010ca:	4631      	mov	r1, r6
 81010cc:	e7ed      	b.n	81010aa <__udivmoddi4+0x276>
 81010ce:	4603      	mov	r3, r0
 81010d0:	e799      	b.n	8101006 <__udivmoddi4+0x1d2>
 81010d2:	4630      	mov	r0, r6
 81010d4:	e7d4      	b.n	8101080 <__udivmoddi4+0x24c>
 81010d6:	46d6      	mov	lr, sl
 81010d8:	e77f      	b.n	8100fda <__udivmoddi4+0x1a6>
 81010da:	4463      	add	r3, ip
 81010dc:	3802      	subs	r0, #2
 81010de:	e74d      	b.n	8100f7c <__udivmoddi4+0x148>
 81010e0:	4606      	mov	r6, r0
 81010e2:	4623      	mov	r3, r4
 81010e4:	4608      	mov	r0, r1
 81010e6:	e70f      	b.n	8100f08 <__udivmoddi4+0xd4>
 81010e8:	3e02      	subs	r6, #2
 81010ea:	4463      	add	r3, ip
 81010ec:	e730      	b.n	8100f50 <__udivmoddi4+0x11c>
 81010ee:	bf00      	nop

081010f0 <__aeabi_idiv0>:
 81010f0:	4770      	bx	lr
 81010f2:	bf00      	nop

081010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81010f4:	b480      	push	{r7}
 81010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81010f8:	4b09      	ldr	r3, [pc, #36]	@ (8101120 <SystemInit+0x2c>)
 81010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81010fe:	4a08      	ldr	r2, [pc, #32]	@ (8101120 <SystemInit+0x2c>)
 8101100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101108:	4b05      	ldr	r3, [pc, #20]	@ (8101120 <SystemInit+0x2c>)
 810110a:	691b      	ldr	r3, [r3, #16]
 810110c:	4a04      	ldr	r2, [pc, #16]	@ (8101120 <SystemInit+0x2c>)
 810110e:	f043 0310 	orr.w	r3, r3, #16
 8101112:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101114:	bf00      	nop
 8101116:	46bd      	mov	sp, r7
 8101118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810111c:	4770      	bx	lr
 810111e:	bf00      	nop
 8101120:	e000ed00 	.word	0xe000ed00

08101124 <DegreeSec2RPM>:
 */
#include "DC_motor.h"
#include "main.h"
#include "stdint.h"

float DegreeSec2RPM(float speed_degsec){
 8101124:	b480      	push	{r7}
 8101126:	b085      	sub	sp, #20
 8101128:	af00      	add	r7, sp, #0
 810112a:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed_rpm = (speed_degsec * 60)/360;
 810112e:	edd7 7a01 	vldr	s15, [r7, #4]
 8101132:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 810115c <DegreeSec2RPM+0x38>
 8101136:	ee27 7a87 	vmul.f32	s14, s15, s14
 810113a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8101160 <DegreeSec2RPM+0x3c>
 810113e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101142:	edc7 7a03 	vstr	s15, [r7, #12]
	return speed_rpm;
 8101146:	68fb      	ldr	r3, [r7, #12]
 8101148:	ee07 3a90 	vmov	s15, r3
}
 810114c:	eeb0 0a67 	vmov.f32	s0, s15
 8101150:	3714      	adds	r7, #20
 8101152:	46bd      	mov	sp, r7
 8101154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101158:	4770      	bx	lr
 810115a:	bf00      	nop
 810115c:	42700000 	.word	0x42700000
 8101160:	43b40000 	.word	0x43b40000

08101164 <Voltage2Duty>:

float Voltage2Duty(float u){
 8101164:	b480      	push	{r7}
 8101166:	b085      	sub	sp, #20
 8101168:	af00      	add	r7, sp, #0
 810116a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0){
 810116e:	edd7 7a01 	vldr	s15, [r7, #4]
 8101172:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8101176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810117a:	d805      	bhi.n	8101188 <Voltage2Duty+0x24>
		u = -u;
 810117c:	edd7 7a01 	vldr	s15, [r7, #4]
 8101180:	eef1 7a67 	vneg.f32	s15, s15
 8101184:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	float duty = 100 * u/V_MAX;
 8101188:	edd7 7a01 	vldr	s15, [r7, #4]
 810118c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 81011e0 <Voltage2Duty+0x7c>
 8101190:	ee27 7a87 	vmul.f32	s14, s15, s14
 8101194:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 8101198:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810119c:	edc7 7a03 	vstr	s15, [r7, #12]

	if (duty > 100){
 81011a0:	edd7 7a03 	vldr	s15, [r7, #12]
 81011a4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 81011e0 <Voltage2Duty+0x7c>
 81011a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 81011ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011b0:	dd02      	ble.n	81011b8 <Voltage2Duty+0x54>
		duty = 100;
 81011b2:	4b0c      	ldr	r3, [pc, #48]	@ (81011e4 <Voltage2Duty+0x80>)
 81011b4:	60fb      	str	r3, [r7, #12]
 81011b6:	e009      	b.n	81011cc <Voltage2Duty+0x68>
	}else if(duty < 0){
 81011b8:	edd7 7a03 	vldr	s15, [r7, #12]
 81011bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81011c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011c4:	d502      	bpl.n	81011cc <Voltage2Duty+0x68>
		duty = 0;
 81011c6:	f04f 0300 	mov.w	r3, #0
 81011ca:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 81011cc:	68fb      	ldr	r3, [r7, #12]
 81011ce:	ee07 3a90 	vmov	s15, r3
}
 81011d2:	eeb0 0a67 	vmov.f32	s0, s15
 81011d6:	3714      	adds	r7, #20
 81011d8:	46bd      	mov	sp, r7
 81011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011de:	4770      	bx	lr
 81011e0:	42c80000 	.word	0x42c80000
 81011e4:	42c80000 	.word	0x42c80000

081011e8 <Ref2Direction>:

uint8_t Ref2Direction(float y_ref){
 81011e8:	b480      	push	{r7}
 81011ea:	b085      	sub	sp, #20
 81011ec:	af00      	add	r7, sp, #0
 81011ee:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t direction;
	if(y_ref >= 0){
 81011f2:	edd7 7a01 	vldr	s15, [r7, #4]
 81011f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011fe:	db02      	blt.n	8101206 <Ref2Direction+0x1e>
		direction = 0;
 8101200:	2300      	movs	r3, #0
 8101202:	73fb      	strb	r3, [r7, #15]
 8101204:	e001      	b.n	810120a <Ref2Direction+0x22>
	} else {
		direction = 1;
 8101206:	2301      	movs	r3, #1
 8101208:	73fb      	strb	r3, [r7, #15]
	}
	return direction;
 810120a:	7bfb      	ldrb	r3, [r7, #15]
}
 810120c:	4618      	mov	r0, r3
 810120e:	3714      	adds	r7, #20
 8101210:	46bd      	mov	sp, r7
 8101212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101216:	4770      	bx	lr

08101218 <set_PWM_and_dir_back_wheel>:

void set_PWM_and_dir_back_wheel(float duty, uint8_t direction){
 8101218:	b5b0      	push	{r4, r5, r7, lr}
 810121a:	b082      	sub	sp, #8
 810121c:	af00      	add	r7, sp, #0
 810121e:	ed87 0a01 	vstr	s0, [r7, #4]
 8101222:	4603      	mov	r3, r0
 8101224:	70fb      	strb	r3, [r7, #3]
	TIM1 ->CCR1 = (duty/100.0)*TIM1->ARR;
 8101226:	6878      	ldr	r0, [r7, #4]
 8101228:	f7ff fa16 	bl	8100658 <__aeabi_f2d>
 810122c:	f04f 0200 	mov.w	r2, #0
 8101230:	4b17      	ldr	r3, [pc, #92]	@ (8101290 <set_PWM_and_dir_back_wheel+0x78>)
 8101232:	f7ff fb93 	bl	810095c <__aeabi_ddiv>
 8101236:	4602      	mov	r2, r0
 8101238:	460b      	mov	r3, r1
 810123a:	4614      	mov	r4, r2
 810123c:	461d      	mov	r5, r3
 810123e:	4b15      	ldr	r3, [pc, #84]	@ (8101294 <set_PWM_and_dir_back_wheel+0x7c>)
 8101240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101242:	4618      	mov	r0, r3
 8101244:	f7ff f9e6 	bl	8100614 <__aeabi_ui2d>
 8101248:	4602      	mov	r2, r0
 810124a:	460b      	mov	r3, r1
 810124c:	4620      	mov	r0, r4
 810124e:	4629      	mov	r1, r5
 8101250:	f7ff fa5a 	bl	8100708 <__aeabi_dmul>
 8101254:	4602      	mov	r2, r0
 8101256:	460b      	mov	r3, r1
 8101258:	4c0e      	ldr	r4, [pc, #56]	@ (8101294 <set_PWM_and_dir_back_wheel+0x7c>)
 810125a:	4610      	mov	r0, r2
 810125c:	4619      	mov	r1, r3
 810125e:	f7ff fd2b 	bl	8100cb8 <__aeabi_d2uiz>
 8101262:	4603      	mov	r3, r0
 8101264:	6363      	str	r3, [r4, #52]	@ 0x34

	//ARR:valore massimo che il contatore può raggiungere


	//Qui non ho capito a che serve
	if(direction == 0){
 8101266:	78fb      	ldrb	r3, [r7, #3]
 8101268:	2b00      	cmp	r3, #0
 810126a:	d105      	bne.n	8101278 <set_PWM_and_dir_back_wheel+0x60>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810126c:	2200      	movs	r2, #0
 810126e:	2110      	movs	r1, #16
 8101270:	4809      	ldr	r0, [pc, #36]	@ (8101298 <set_PWM_and_dir_back_wheel+0x80>)
 8101272:	f004 fcd1 	bl	8105c18 <HAL_GPIO_WritePin>
	}else if(direction == 1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	}
}
 8101276:	e007      	b.n	8101288 <set_PWM_and_dir_back_wheel+0x70>
	}else if(direction == 1){
 8101278:	78fb      	ldrb	r3, [r7, #3]
 810127a:	2b01      	cmp	r3, #1
 810127c:	d104      	bne.n	8101288 <set_PWM_and_dir_back_wheel+0x70>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810127e:	2201      	movs	r2, #1
 8101280:	2110      	movs	r1, #16
 8101282:	4805      	ldr	r0, [pc, #20]	@ (8101298 <set_PWM_and_dir_back_wheel+0x80>)
 8101284:	f004 fcc8 	bl	8105c18 <HAL_GPIO_WritePin>
}
 8101288:	bf00      	nop
 810128a:	3708      	adds	r7, #8
 810128c:	46bd      	mov	sp, r7
 810128e:	bdb0      	pop	{r4, r5, r7, pc}
 8101290:	40590000 	.word	0x40590000
 8101294:	40010000 	.word	0x40010000
 8101298:	58020000 	.word	0x58020000

0810129c <set_PWM_and_dir_front_wheel>:

void set_PWM_and_dir_front_wheel (float duty, uint8_t dir){
 810129c:	b580      	push	{r7, lr}
 810129e:	b082      	sub	sp, #8
 81012a0:	af00      	add	r7, sp, #0
 81012a2:	ed87 0a01 	vstr	s0, [r7, #4]
 81012a6:	4603      	mov	r3, r0
 81012a8:	70fb      	strb	r3, [r7, #3]
	TIM3 -> CCR1 = (duty/100)*TIM3->ARR;
 81012aa:	edd7 7a01 	vldr	s15, [r7, #4]
 81012ae:	eddf 6a13 	vldr	s13, [pc, #76]	@ 81012fc <set_PWM_and_dir_front_wheel+0x60>
 81012b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81012b6:	4b12      	ldr	r3, [pc, #72]	@ (8101300 <set_PWM_and_dir_front_wheel+0x64>)
 81012b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81012ba:	ee07 3a90 	vmov	s15, r3
 81012be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81012c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8101300 <set_PWM_and_dir_front_wheel+0x64>)
 81012c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81012cc:	ee17 2a90 	vmov	r2, s15
 81012d0:	635a      	str	r2, [r3, #52]	@ 0x34

	if (dir == 0){
 81012d2:	78fb      	ldrb	r3, [r7, #3]
 81012d4:	2b00      	cmp	r3, #0
 81012d6:	d105      	bne.n	81012e4 <set_PWM_and_dir_front_wheel+0x48>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 81012d8:	2200      	movs	r2, #0
 81012da:	2120      	movs	r1, #32
 81012dc:	4809      	ldr	r0, [pc, #36]	@ (8101304 <set_PWM_and_dir_front_wheel+0x68>)
 81012de:	f004 fc9b 	bl	8105c18 <HAL_GPIO_WritePin>
	}else if (dir == 1){
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	}
}
 81012e2:	e007      	b.n	81012f4 <set_PWM_and_dir_front_wheel+0x58>
	}else if (dir == 1){
 81012e4:	78fb      	ldrb	r3, [r7, #3]
 81012e6:	2b01      	cmp	r3, #1
 81012e8:	d104      	bne.n	81012f4 <set_PWM_and_dir_front_wheel+0x58>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 81012ea:	2201      	movs	r2, #1
 81012ec:	2120      	movs	r1, #32
 81012ee:	4805      	ldr	r0, [pc, #20]	@ (8101304 <set_PWM_and_dir_front_wheel+0x68>)
 81012f0:	f004 fc92 	bl	8105c18 <HAL_GPIO_WritePin>
}
 81012f4:	bf00      	nop
 81012f6:	3708      	adds	r7, #8
 81012f8:	46bd      	mov	sp, r7
 81012fa:	bd80      	pop	{r7, pc}
 81012fc:	42c80000 	.word	0x42c80000
 8101300:	40000400 	.word	0x40000400
 8101304:	58020000 	.word	0x58020000

08101308 <init_PID>:
 *      Author: andre
 */

#include <PID.h>

void init_PID (PID* p, float Tc, float u_max, float u_min){
 8101308:	b480      	push	{r7}
 810130a:	b085      	sub	sp, #20
 810130c:	af00      	add	r7, sp, #0
 810130e:	60f8      	str	r0, [r7, #12]
 8101310:	ed87 0a02 	vstr	s0, [r7, #8]
 8101314:	edc7 0a01 	vstr	s1, [r7, #4]
 8101318:	ed87 1a00 	vstr	s2, [r7]

	p->Tc = Tc;
 810131c:	68fb      	ldr	r3, [r7, #12]
 810131e:	68ba      	ldr	r2, [r7, #8]
 8101320:	60da      	str	r2, [r3, #12]
	p->u_max = u_max;
 8101322:	68fb      	ldr	r3, [r7, #12]
 8101324:	687a      	ldr	r2, [r7, #4]
 8101326:	611a      	str	r2, [r3, #16]
	p->u_min = u_min;
 8101328:	68fb      	ldr	r3, [r7, #12]
 810132a:	683a      	ldr	r2, [r7, #0]
 810132c:	615a      	str	r2, [r3, #20]
	p->e_old=0;
 810132e:	68fb      	ldr	r3, [r7, #12]
 8101330:	f04f 0200 	mov.w	r2, #0
 8101334:	619a      	str	r2, [r3, #24]
	p->Iterm=0;
 8101336:	68fb      	ldr	r3, [r7, #12]
 8101338:	f04f 0200 	mov.w	r2, #0
 810133c:	61da      	str	r2, [r3, #28]

}
 810133e:	bf00      	nop
 8101340:	3714      	adds	r7, #20
 8101342:	46bd      	mov	sp, r7
 8101344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101348:	4770      	bx	lr

0810134a <tune_PID>:


void tune_PID (PID* p, float Kp, float Ki, float Kd){
 810134a:	b480      	push	{r7}
 810134c:	b085      	sub	sp, #20
 810134e:	af00      	add	r7, sp, #0
 8101350:	60f8      	str	r0, [r7, #12]
 8101352:	ed87 0a02 	vstr	s0, [r7, #8]
 8101356:	edc7 0a01 	vstr	s1, [r7, #4]
 810135a:	ed87 1a00 	vstr	s2, [r7]

	p->Kp = Kp;
 810135e:	68fb      	ldr	r3, [r7, #12]
 8101360:	68ba      	ldr	r2, [r7, #8]
 8101362:	601a      	str	r2, [r3, #0]
	p->Kd = Kd;
 8101364:	68fb      	ldr	r3, [r7, #12]
 8101366:	683a      	ldr	r2, [r7, #0]
 8101368:	609a      	str	r2, [r3, #8]
	p->Ki = Ki;
 810136a:	68fb      	ldr	r3, [r7, #12]
 810136c:	687a      	ldr	r2, [r7, #4]
 810136e:	605a      	str	r2, [r3, #4]
}
 8101370:	bf00      	nop
 8101372:	3714      	adds	r7, #20
 8101374:	46bd      	mov	sp, r7
 8101376:	f85d 7b04 	ldr.w	r7, [sp], #4
 810137a:	4770      	bx	lr

0810137c <PID_controller>:

float PID_controller (PID* p, float y, float r){
 810137c:	b480      	push	{r7}
 810137e:	b089      	sub	sp, #36	@ 0x24
 8101380:	af00      	add	r7, sp, #0
 8101382:	60f8      	str	r0, [r7, #12]
 8101384:	ed87 0a02 	vstr	s0, [r7, #8]
 8101388:	edc7 0a01 	vstr	s1, [r7, #4]

	float u;
	float newIterm;
	float e = r-y;
 810138c:	ed97 7a01 	vldr	s14, [r7, #4]
 8101390:	edd7 7a02 	vldr	s15, [r7, #8]
 8101394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101398:	edc7 7a06 	vstr	s15, [r7, #24]
	float Pterm = p-> Kp * e;
 810139c:	68fb      	ldr	r3, [r7, #12]
 810139e:	edd3 7a00 	vldr	s15, [r3]
 81013a2:	ed97 7a06 	vldr	s14, [r7, #24]
 81013a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81013aa:	edc7 7a05 	vstr	s15, [r7, #20]

	newIterm = p->Iterm + (p->Ki)* p->Tc * p->e_old;
 81013ae:	68fb      	ldr	r3, [r7, #12]
 81013b0:	ed93 7a07 	vldr	s14, [r3, #28]
 81013b4:	68fb      	ldr	r3, [r7, #12]
 81013b6:	edd3 6a01 	vldr	s13, [r3, #4]
 81013ba:	68fb      	ldr	r3, [r7, #12]
 81013bc:	edd3 7a03 	vldr	s15, [r3, #12]
 81013c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 81013c4:	68fb      	ldr	r3, [r7, #12]
 81013c6:	edd3 7a06 	vldr	s15, [r3, #24]
 81013ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81013ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 81013d2:	edc7 7a04 	vstr	s15, [r7, #16]
	p->e_old = e;
 81013d6:	68fb      	ldr	r3, [r7, #12]
 81013d8:	69ba      	ldr	r2, [r7, #24]
 81013da:	619a      	str	r2, [r3, #24]
	u = Pterm + newIterm;
 81013dc:	ed97 7a05 	vldr	s14, [r7, #20]
 81013e0:	edd7 7a04 	vldr	s15, [r7, #16]
 81013e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 81013e8:	edc7 7a07 	vstr	s15, [r7, #28]




	if (u > p->u_max){
 81013ec:	68fb      	ldr	r3, [r7, #12]
 81013ee:	edd3 7a04 	vldr	s15, [r3, #16]
 81013f2:	ed97 7a07 	vldr	s14, [r7, #28]
 81013f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81013fe:	dd03      	ble.n	8101408 <PID_controller+0x8c>
		u = p->u_max;
 8101400:	68fb      	ldr	r3, [r7, #12]
 8101402:	691b      	ldr	r3, [r3, #16]
 8101404:	61fb      	str	r3, [r7, #28]
 8101406:	e010      	b.n	810142a <PID_controller+0xae>
	}else if(u<p->u_min){
 8101408:	68fb      	ldr	r3, [r7, #12]
 810140a:	edd3 7a05 	vldr	s15, [r3, #20]
 810140e:	ed97 7a07 	vldr	s14, [r7, #28]
 8101412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810141a:	d503      	bpl.n	8101424 <PID_controller+0xa8>
		u = p->u_min;
 810141c:	68fb      	ldr	r3, [r7, #12]
 810141e:	695b      	ldr	r3, [r3, #20]
 8101420:	61fb      	str	r3, [r7, #28]
 8101422:	e002      	b.n	810142a <PID_controller+0xae>
	}else
	{
		p->Iterm = newIterm;
 8101424:	68fb      	ldr	r3, [r7, #12]
 8101426:	693a      	ldr	r2, [r7, #16]
 8101428:	61da      	str	r2, [r3, #28]
	}

	return u;
 810142a:	69fb      	ldr	r3, [r7, #28]
 810142c:	ee07 3a90 	vmov	s15, r3

}
 8101430:	eeb0 0a67 	vmov.f32	s0, s15
 8101434:	3724      	adds	r7, #36	@ 0x24
 8101436:	46bd      	mov	sp, r7
 8101438:	f85d 7b04 	ldr.w	r7, [sp], #4
 810143c:	4770      	bx	lr

0810143e <bno055_setPage>:
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

// Imposta la pagina di registro del sensore BNO055
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 810143e:	b580      	push	{r7, lr}
 8101440:	b082      	sub	sp, #8
 8101442:	af00      	add	r7, sp, #0
 8101444:	4603      	mov	r3, r0
 8101446:	71fb      	strb	r3, [r7, #7]
 8101448:	79fb      	ldrb	r3, [r7, #7]
 810144a:	4619      	mov	r1, r3
 810144c:	2007      	movs	r0, #7
 810144e:	f000 fa31 	bl	81018b4 <bno055_writeData>
 8101452:	bf00      	nop
 8101454:	3708      	adds	r7, #8
 8101456:	46bd      	mov	sp, r7
 8101458:	bd80      	pop	{r7, pc}

0810145a <bno055_setOperationMode>:
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

// Imposta la modalità operativa del sensore BNO055 e attende un ritardo in base alla modalità
void bno055_setOperationMode(bno055_opmode_t mode) {
 810145a:	b580      	push	{r7, lr}
 810145c:	b082      	sub	sp, #8
 810145e:	af00      	add	r7, sp, #0
 8101460:	4603      	mov	r3, r0
 8101462:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8101464:	79fb      	ldrb	r3, [r7, #7]
 8101466:	4619      	mov	r1, r3
 8101468:	203d      	movs	r0, #61	@ 0x3d
 810146a:	f000 fa23 	bl	81018b4 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 810146e:	79fb      	ldrb	r3, [r7, #7]
 8101470:	2b00      	cmp	r3, #0
 8101472:	d103      	bne.n	810147c <bno055_setOperationMode+0x22>
    bno055_delay(100);
 8101474:	2064      	movs	r0, #100	@ 0x64
 8101476:	f000 fa11 	bl	810189c <bno055_delay>
  } else {
    bno055_delay(80);
  }
}
 810147a:	e002      	b.n	8101482 <bno055_setOperationMode+0x28>
    bno055_delay(80);
 810147c:	2050      	movs	r0, #80	@ 0x50
 810147e:	f000 fa0d 	bl	810189c <bno055_delay>
}
 8101482:	bf00      	nop
 8101484:	3708      	adds	r7, #8
 8101486:	46bd      	mov	sp, r7
 8101488:	bd80      	pop	{r7, pc}

0810148a <bno055_setOperationModeConfig>:

// NON FUSION MODE

// Imposta la modalità operativa del sensore BNO055 su configurazione
void bno055_setOperationModeConfig() {
 810148a:	b580      	push	{r7, lr}
 810148c:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 810148e:	2000      	movs	r0, #0
 8101490:	f7ff ffe3 	bl	810145a <bno055_setOperationMode>
}
 8101494:	bf00      	nop
 8101496:	bd80      	pop	{r7, pc}

08101498 <bno055_setOperationModeNDOF>:
void bno055_setOperationModeNDOF_FMC_OFF(){
	bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF_FMC_OFF);
}

// Imposta la modalità operativa del sensore BNO055 su NDOF (Nine Degrees of Freedom)
void bno055_setOperationModeNDOF() {
 8101498:	b580      	push	{r7, lr}
 810149a:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 810149c:	200c      	movs	r0, #12
 810149e:	f7ff ffdc 	bl	810145a <bno055_setOperationMode>
}
 81014a2:	bf00      	nop
 81014a4:	bd80      	pop	{r7, pc}

081014a6 <bno055_reset>:
void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
// Disabilita l'uso di un cristallo esterno per il sensore BNO055
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

// Esegue una procedura di reset per il sensore BNO055
void bno055_reset() {
 81014a6:	b580      	push	{r7, lr}
 81014a8:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 81014aa:	2120      	movs	r1, #32
 81014ac:	203f      	movs	r0, #63	@ 0x3f
 81014ae:	f000 fa01 	bl	81018b4 <bno055_writeData>
  bno055_delay(700);
 81014b2:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 81014b6:	f000 f9f1 	bl	810189c <bno055_delay>
}
 81014ba:	bf00      	nop
 81014bc:	bd80      	pop	{r7, pc}

081014be <bno055_setup>:
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

// Inizializza il sensore BNO055 eseguendo una procedura di reset e configurazione iniziale
void bno055_setup() {
 81014be:	b580      	push	{r7, lr}
 81014c0:	b082      	sub	sp, #8
 81014c2:	af00      	add	r7, sp, #0
  bno055_reset();
 81014c4:	f7ff ffef 	bl	81014a6 <bno055_reset>

  uint8_t id = 0;
 81014c8:	2300      	movs	r3, #0
 81014ca:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 81014cc:	1dfb      	adds	r3, r7, #7
 81014ce:	2201      	movs	r2, #1
 81014d0:	4619      	mov	r1, r3
 81014d2:	2000      	movs	r0, #0
 81014d4:	f000 fa22 	bl	810191c <bno055_readData>
  if (id != BNO055_ID) {
    //printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
  }
  bno055_setPage(0);
 81014d8:	2000      	movs	r0, #0
 81014da:	f7ff ffb0 	bl	810143e <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 81014de:	2100      	movs	r1, #0
 81014e0:	203f      	movs	r0, #63	@ 0x3f
 81014e2:	f000 f9e7 	bl	81018b4 <bno055_writeData>

  // Seleziona la modalità di configurazione del BNO055
  bno055_setOperationModeConfig();
 81014e6:	f7ff ffd0 	bl	810148a <bno055_setOperationModeConfig>
  bno055_delay(10);
 81014ea:	200a      	movs	r0, #10
 81014ec:	f000 f9d6 	bl	810189c <bno055_delay>
}
 81014f0:	bf00      	nop
 81014f2:	3708      	adds	r7, #8
 81014f4:	46bd      	mov	sp, r7
 81014f6:	bd80      	pop	{r7, pc}

081014f8 <bno055_getCalibrationState>:
  bno055_readData(BNO055_SYS_ERR, &tmp, 1);
  return tmp;
}

// Ottiene lo stato di calibrazione del sensore BNO055
bno055_calibration_state_t bno055_getCalibrationState() {
 81014f8:	b580      	push	{r7, lr}
 81014fa:	b084      	sub	sp, #16
 81014fc:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 81014fe:	2000      	movs	r0, #0
 8101500:	f7ff ff9d 	bl	810143e <bno055_setPage>
  bno055_calibration_state_t cal = {.sys = 0, .gyro = 0, .mag = 0, .accel = 0};
 8101504:	2300      	movs	r3, #0
 8101506:	60bb      	str	r3, [r7, #8]
  uint8_t calState = 0;
 8101508:	2300      	movs	r3, #0
 810150a:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CALIB_STAT, &calState, 1);
 810150c:	1dfb      	adds	r3, r7, #7
 810150e:	2201      	movs	r2, #1
 8101510:	4619      	mov	r1, r3
 8101512:	2035      	movs	r0, #53	@ 0x35
 8101514:	f000 fa02 	bl	810191c <bno055_readData>
  cal.sys = (calState >> 6) & 0x03;
 8101518:	79fb      	ldrb	r3, [r7, #7]
 810151a:	099b      	lsrs	r3, r3, #6
 810151c:	b2db      	uxtb	r3, r3
 810151e:	723b      	strb	r3, [r7, #8]
  cal.gyro = (calState >> 4) & 0x03;
 8101520:	79fb      	ldrb	r3, [r7, #7]
 8101522:	091b      	lsrs	r3, r3, #4
 8101524:	b2db      	uxtb	r3, r3
 8101526:	f003 0303 	and.w	r3, r3, #3
 810152a:	b2db      	uxtb	r3, r3
 810152c:	727b      	strb	r3, [r7, #9]
  cal.accel = (calState >> 2) & 0x03;
 810152e:	79fb      	ldrb	r3, [r7, #7]
 8101530:	089b      	lsrs	r3, r3, #2
 8101532:	b2db      	uxtb	r3, r3
 8101534:	f003 0303 	and.w	r3, r3, #3
 8101538:	b2db      	uxtb	r3, r3
 810153a:	72fb      	strb	r3, [r7, #11]
  cal.mag = calState & 0x03;
 810153c:	79fb      	ldrb	r3, [r7, #7]
 810153e:	f003 0303 	and.w	r3, r3, #3
 8101542:	b2db      	uxtb	r3, r3
 8101544:	72bb      	strb	r3, [r7, #10]
  return cal;
 8101546:	68bb      	ldr	r3, [r7, #8]
 8101548:	60fb      	str	r3, [r7, #12]
 810154a:	2300      	movs	r3, #0
 810154c:	7b3a      	ldrb	r2, [r7, #12]
 810154e:	f362 0307 	bfi	r3, r2, #0, #8
 8101552:	7b7a      	ldrb	r2, [r7, #13]
 8101554:	f362 230f 	bfi	r3, r2, #8, #8
 8101558:	7bba      	ldrb	r2, [r7, #14]
 810155a:	f362 4317 	bfi	r3, r2, #16, #8
 810155e:	7bfa      	ldrb	r2, [r7, #15]
 8101560:	f362 631f 	bfi	r3, r2, #24, #8
}
 8101564:	4618      	mov	r0, r3
 8101566:	3710      	adds	r7, #16
 8101568:	46bd      	mov	sp, r7
 810156a:	bd80      	pop	{r7, pc}

0810156c <bno055_getVector>:

  bno055_setOperationMode(operationMode);
}

//Ottiene un vettore specifico dal sensore BNO055 con la possibilità di specificare la scala del vettore
bno055_vector_t bno055_getVector(uint8_t vec) {
 810156c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101570:	b09e      	sub	sp, #120	@ 0x78
 8101572:	af00      	add	r7, sp, #0
 8101574:	4603      	mov	r3, r0
 8101576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 810157a:	2000      	movs	r0, #0
 810157c:	f7ff ff5f 	bl	810143e <bno055_setPage>
  uint8_t buffer[8];    // I quaternioni richiedono 8 byte

  if (vec == BNO055_VECTOR_QUATERNION)
 8101580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101584:	2b20      	cmp	r3, #32
 8101586:	d108      	bne.n	810159a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8101588:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 810158c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101590:	2208      	movs	r2, #8
 8101592:	4618      	mov	r0, r3
 8101594:	f000 f9c2 	bl	810191c <bno055_readData>
 8101598:	e007      	b.n	81015aa <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 810159a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 810159e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015a2:	2206      	movs	r2, #6
 81015a4:	4618      	mov	r0, r3
 81015a6:	f000 f9b9 	bl	810191c <bno055_readData>

  double scale = 1;
 81015aa:	f04f 0200 	mov.w	r2, #0
 81015ae:	4b8b      	ldr	r3, [pc, #556]	@ (81017dc <bno055_getVector+0x270>)
 81015b0:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 81015b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015b8:	2b0e      	cmp	r3, #14
 81015ba:	d109      	bne.n	81015d0 <bno055_getVector+0x64>
    scale = magScale;
 81015bc:	4b88      	ldr	r3, [pc, #544]	@ (81017e0 <bno055_getVector+0x274>)
 81015be:	881b      	ldrh	r3, [r3, #0]
 81015c0:	4618      	mov	r0, r3
 81015c2:	f7ff f827 	bl	8100614 <__aeabi_ui2d>
 81015c6:	4602      	mov	r2, r0
 81015c8:	460b      	mov	r3, r1
 81015ca:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81015ce:	e03e      	b.n	810164e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 81015d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015d4:	2b08      	cmp	r3, #8
 81015d6:	d007      	beq.n	81015e8 <bno055_getVector+0x7c>
 81015d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015dc:	2b28      	cmp	r3, #40	@ 0x28
 81015de:	d003      	beq.n	81015e8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 81015e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015e4:	2b2e      	cmp	r3, #46	@ 0x2e
 81015e6:	d109      	bne.n	81015fc <bno055_getVector+0x90>
    scale = accelScale;
 81015e8:	4b7e      	ldr	r3, [pc, #504]	@ (81017e4 <bno055_getVector+0x278>)
 81015ea:	881b      	ldrh	r3, [r3, #0]
 81015ec:	4618      	mov	r0, r3
 81015ee:	f7ff f811 	bl	8100614 <__aeabi_ui2d>
 81015f2:	4602      	mov	r2, r0
 81015f4:	460b      	mov	r3, r1
 81015f6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81015fa:	e028      	b.n	810164e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 81015fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101600:	2b14      	cmp	r3, #20
 8101602:	d109      	bne.n	8101618 <bno055_getVector+0xac>
    scale = angularRateScale;
 8101604:	4b78      	ldr	r3, [pc, #480]	@ (81017e8 <bno055_getVector+0x27c>)
 8101606:	881b      	ldrh	r3, [r3, #0]
 8101608:	4618      	mov	r0, r3
 810160a:	f7ff f803 	bl	8100614 <__aeabi_ui2d>
 810160e:	4602      	mov	r2, r0
 8101610:	460b      	mov	r3, r1
 8101612:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8101616:	e01a      	b.n	810164e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8101618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810161c:	2b1a      	cmp	r3, #26
 810161e:	d109      	bne.n	8101634 <bno055_getVector+0xc8>
    scale = eulerScale;
 8101620:	4b72      	ldr	r3, [pc, #456]	@ (81017ec <bno055_getVector+0x280>)
 8101622:	881b      	ldrh	r3, [r3, #0]
 8101624:	4618      	mov	r0, r3
 8101626:	f7fe fff5 	bl	8100614 <__aeabi_ui2d>
 810162a:	4602      	mov	r2, r0
 810162c:	460b      	mov	r3, r1
 810162e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8101632:	e00c      	b.n	810164e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8101634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101638:	2b20      	cmp	r3, #32
 810163a:	d108      	bne.n	810164e <bno055_getVector+0xe2>
    scale = quaScale;
 810163c:	4b6c      	ldr	r3, [pc, #432]	@ (81017f0 <bno055_getVector+0x284>)
 810163e:	881b      	ldrh	r3, [r3, #0]
 8101640:	4618      	mov	r0, r3
 8101642:	f7fe ffe7 	bl	8100614 <__aeabi_ui2d>
 8101646:	4602      	mov	r2, r0
 8101648:	460b      	mov	r3, r1
 810164a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 810164e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101652:	2220      	movs	r2, #32
 8101654:	2100      	movs	r1, #0
 8101656:	4618      	mov	r0, r3
 8101658:	f00c fcdc 	bl	810e014 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 810165c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101660:	2b20      	cmp	r3, #32
 8101662:	d150      	bne.n	8101706 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101664:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8101668:	021b      	lsls	r3, r3, #8
 810166a:	b21a      	sxth	r2, r3
 810166c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8101670:	b21b      	sxth	r3, r3
 8101672:	4313      	orrs	r3, r2
 8101674:	b21b      	sxth	r3, r3
 8101676:	4618      	mov	r0, r3
 8101678:	f7fe ffdc 	bl	8100634 <__aeabi_i2d>
 810167c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101680:	f7ff f96c 	bl	810095c <__aeabi_ddiv>
 8101684:	4602      	mov	r2, r0
 8101686:	460b      	mov	r3, r1
 8101688:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810168c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8101690:	021b      	lsls	r3, r3, #8
 8101692:	b21a      	sxth	r2, r3
 8101694:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8101698:	b21b      	sxth	r3, r3
 810169a:	4313      	orrs	r3, r2
 810169c:	b21b      	sxth	r3, r3
 810169e:	4618      	mov	r0, r3
 81016a0:	f7fe ffc8 	bl	8100634 <__aeabi_i2d>
 81016a4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81016a8:	f7ff f958 	bl	810095c <__aeabi_ddiv>
 81016ac:	4602      	mov	r2, r0
 81016ae:	460b      	mov	r3, r1
 81016b0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 81016b4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 81016b8:	021b      	lsls	r3, r3, #8
 81016ba:	b21a      	sxth	r2, r3
 81016bc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 81016c0:	b21b      	sxth	r3, r3
 81016c2:	4313      	orrs	r3, r2
 81016c4:	b21b      	sxth	r3, r3
 81016c6:	4618      	mov	r0, r3
 81016c8:	f7fe ffb4 	bl	8100634 <__aeabi_i2d>
 81016cc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81016d0:	f7ff f944 	bl	810095c <__aeabi_ddiv>
 81016d4:	4602      	mov	r2, r0
 81016d6:	460b      	mov	r3, r1
 81016d8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 81016dc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 81016e0:	021b      	lsls	r3, r3, #8
 81016e2:	b21a      	sxth	r2, r3
 81016e4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 81016e8:	b21b      	sxth	r3, r3
 81016ea:	4313      	orrs	r3, r2
 81016ec:	b21b      	sxth	r3, r3
 81016ee:	4618      	mov	r0, r3
 81016f0:	f7fe ffa0 	bl	8100634 <__aeabi_i2d>
 81016f4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81016f8:	f7ff f930 	bl	810095c <__aeabi_ddiv>
 81016fc:	4602      	mov	r2, r0
 81016fe:	460b      	mov	r3, r1
 8101700:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8101704:	e03b      	b.n	810177e <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101706:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 810170a:	021b      	lsls	r3, r3, #8
 810170c:	b21a      	sxth	r2, r3
 810170e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8101712:	b21b      	sxth	r3, r3
 8101714:	4313      	orrs	r3, r2
 8101716:	b21b      	sxth	r3, r3
 8101718:	4618      	mov	r0, r3
 810171a:	f7fe ff8b 	bl	8100634 <__aeabi_i2d>
 810171e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101722:	f7ff f91b 	bl	810095c <__aeabi_ddiv>
 8101726:	4602      	mov	r2, r0
 8101728:	460b      	mov	r3, r1
 810172a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810172e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8101732:	021b      	lsls	r3, r3, #8
 8101734:	b21a      	sxth	r2, r3
 8101736:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 810173a:	b21b      	sxth	r3, r3
 810173c:	4313      	orrs	r3, r2
 810173e:	b21b      	sxth	r3, r3
 8101740:	4618      	mov	r0, r3
 8101742:	f7fe ff77 	bl	8100634 <__aeabi_i2d>
 8101746:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 810174a:	f7ff f907 	bl	810095c <__aeabi_ddiv>
 810174e:	4602      	mov	r2, r0
 8101750:	460b      	mov	r3, r1
 8101752:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101756:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 810175a:	021b      	lsls	r3, r3, #8
 810175c:	b21a      	sxth	r2, r3
 810175e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8101762:	b21b      	sxth	r3, r3
 8101764:	4313      	orrs	r3, r2
 8101766:	b21b      	sxth	r3, r3
 8101768:	4618      	mov	r0, r3
 810176a:	f7fe ff63 	bl	8100634 <__aeabi_i2d>
 810176e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101772:	f7ff f8f3 	bl	810095c <__aeabi_ddiv>
 8101776:	4602      	mov	r2, r0
 8101778:	460b      	mov	r3, r1
 810177a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 810177e:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8101782:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8101786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810178a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810178e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101792:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8101796:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 810179a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 810179e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 81017a2:	ec49 8b14 	vmov	d4, r8, r9
 81017a6:	ec45 4b15 	vmov	d5, r4, r5
 81017aa:	ec41 0b16 	vmov	d6, r0, r1
 81017ae:	ec43 2b17 	vmov	d7, r2, r3
}
 81017b2:	eeb0 0a44 	vmov.f32	s0, s8
 81017b6:	eef0 0a64 	vmov.f32	s1, s9
 81017ba:	eeb0 1a45 	vmov.f32	s2, s10
 81017be:	eef0 1a65 	vmov.f32	s3, s11
 81017c2:	eeb0 2a46 	vmov.f32	s4, s12
 81017c6:	eef0 2a66 	vmov.f32	s5, s13
 81017ca:	eeb0 3a47 	vmov.f32	s6, s14
 81017ce:	eef0 3a67 	vmov.f32	s7, s15
 81017d2:	3778      	adds	r7, #120	@ 0x78
 81017d4:	46bd      	mov	sp, r7
 81017d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 81017da:	bf00      	nop
 81017dc:	3ff00000 	.word	0x3ff00000
 81017e0:	1000000e 	.word	0x1000000e
 81017e4:	10000008 	.word	0x10000008
 81017e8:	1000000a 	.word	0x1000000a
 81017ec:	1000000c 	.word	0x1000000c
 81017f0:	10000010 	.word	0x10000010

081017f4 <bno055_getVectorEuler>:
// Ottiene un vettore giroscopico dal sensore BNO055
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
// Ottiene un vettore di angoli di Eulero dal sensore BNO055
bno055_vector_t bno055_getVectorEuler() {
 81017f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81017f8:	b090      	sub	sp, #64	@ 0x40
 81017fa:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 81017fc:	201a      	movs	r0, #26
 81017fe:	f7ff feb5 	bl	810156c <bno055_getVector>
 8101802:	eeb0 4a40 	vmov.f32	s8, s0
 8101806:	eef0 4a60 	vmov.f32	s9, s1
 810180a:	eeb0 5a41 	vmov.f32	s10, s2
 810180e:	eef0 5a61 	vmov.f32	s11, s3
 8101812:	eeb0 6a42 	vmov.f32	s12, s4
 8101816:	eef0 6a62 	vmov.f32	s13, s5
 810181a:	eeb0 7a43 	vmov.f32	s14, s6
 810181e:	eef0 7a63 	vmov.f32	s15, s7
 8101822:	ed87 4b08 	vstr	d4, [r7, #32]
 8101826:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 810182a:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 810182e:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8101832:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8101836:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 810183a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 810183e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8101842:	ec49 8b14 	vmov	d4, r8, r9
 8101846:	ec45 4b15 	vmov	d5, r4, r5
 810184a:	ec41 0b16 	vmov	d6, r0, r1
 810184e:	ec43 2b17 	vmov	d7, r2, r3
}
 8101852:	eeb0 0a44 	vmov.f32	s0, s8
 8101856:	eef0 0a64 	vmov.f32	s1, s9
 810185a:	eeb0 1a45 	vmov.f32	s2, s10
 810185e:	eef0 1a65 	vmov.f32	s3, s11
 8101862:	eeb0 2a46 	vmov.f32	s4, s12
 8101866:	eef0 2a66 	vmov.f32	s5, s13
 810186a:	eeb0 3a47 	vmov.f32	s6, s14
 810186e:	eef0 3a67 	vmov.f32	s7, s15
 8101872:	3740      	adds	r7, #64	@ 0x40
 8101874:	46bd      	mov	sp, r7
 8101876:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0810187c <bno055_assignI2C>:
  uint8_t axisMapSign = (axis.x_sign << 2) | (axis.y_sign << 1) | (axis.z_sign);
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
}

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 810187c:	b480      	push	{r7}
 810187e:	b083      	sub	sp, #12
 8101880:	af00      	add	r7, sp, #0
 8101882:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8101884:	4a04      	ldr	r2, [pc, #16]	@ (8101898 <bno055_assignI2C+0x1c>)
 8101886:	687b      	ldr	r3, [r7, #4]
 8101888:	6013      	str	r3, [r2, #0]
}
 810188a:	bf00      	nop
 810188c:	370c      	adds	r7, #12
 810188e:	46bd      	mov	sp, r7
 8101890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101894:	4770      	bx	lr
 8101896:	bf00      	nop
 8101898:	10000280 	.word	0x10000280

0810189c <bno055_delay>:

void bno055_delay(int time) {
 810189c:	b580      	push	{r7, lr}
 810189e:	b082      	sub	sp, #8
 81018a0:	af00      	add	r7, sp, #0
 81018a2:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 81018a4:	687b      	ldr	r3, [r7, #4]
 81018a6:	4618      	mov	r0, r3
 81018a8:	f002 f9ca 	bl	8103c40 <HAL_Delay>
#endif
}
 81018ac:	bf00      	nop
 81018ae:	3708      	adds	r7, #8
 81018b0:	46bd      	mov	sp, r7
 81018b2:	bd80      	pop	{r7, pc}

081018b4 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 81018b4:	b580      	push	{r7, lr}
 81018b6:	b088      	sub	sp, #32
 81018b8:	af02      	add	r7, sp, #8
 81018ba:	4603      	mov	r3, r0
 81018bc:	460a      	mov	r2, r1
 81018be:	71fb      	strb	r3, [r7, #7]
 81018c0:	4613      	mov	r3, r2
 81018c2:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 81018c4:	79fb      	ldrb	r3, [r7, #7]
 81018c6:	733b      	strb	r3, [r7, #12]
 81018c8:	79bb      	ldrb	r3, [r7, #6]
 81018ca:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 81018cc:	4b12      	ldr	r3, [pc, #72]	@ (8101918 <bno055_writeData+0x64>)
 81018ce:	6818      	ldr	r0, [r3, #0]
 81018d0:	f107 020c 	add.w	r2, r7, #12
 81018d4:	230a      	movs	r3, #10
 81018d6:	9300      	str	r3, [sp, #0]
 81018d8:	2302      	movs	r3, #2
 81018da:	2150      	movs	r1, #80	@ 0x50
 81018dc:	f004 fa7e 	bl	8105ddc <HAL_I2C_Master_Transmit>
 81018e0:	4603      	mov	r3, r0
 81018e2:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);

  if (status == HAL_OK) {
 81018e4:	7dfb      	ldrb	r3, [r7, #23]
 81018e6:	2b00      	cmp	r3, #0
 81018e8:	d010      	beq.n	810190c <bno055_writeData+0x58>
    //printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
  } else {
    //printf("Unknown status data %d", status);
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 81018ea:	4b0b      	ldr	r3, [pc, #44]	@ (8101918 <bno055_writeData+0x64>)
 81018ec:	681b      	ldr	r3, [r3, #0]
 81018ee:	4618      	mov	r0, r3
 81018f0:	f004 fc90 	bl	8106214 <HAL_I2C_GetError>
 81018f4:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 81018f6:	693b      	ldr	r3, [r7, #16]
 81018f8:	2b00      	cmp	r3, #0
 81018fa:	d009      	beq.n	8101910 <bno055_writeData+0x5c>
    //printf("HAL_I2C_ERROR_DMA\r\n");
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
    //printf("HAL_I2C_ERROR_TIMEOUT\r\n");
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 81018fc:	4b06      	ldr	r3, [pc, #24]	@ (8101918 <bno055_writeData+0x64>)
 81018fe:	681b      	ldr	r3, [r3, #0]
 8101900:	4618      	mov	r0, r3
 8101902:	f004 fc79 	bl	81061f8 <HAL_I2C_GetState>
 8101906:	4603      	mov	r3, r0
 8101908:	73fb      	strb	r3, [r7, #15]
 810190a:	e002      	b.n	8101912 <bno055_writeData+0x5e>
    return;
 810190c:	bf00      	nop
 810190e:	e000      	b.n	8101912 <bno055_writeData+0x5e>
    return;
 8101910:	bf00      	nop



  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8101912:	3718      	adds	r7, #24
 8101914:	46bd      	mov	sp, r7
 8101916:	bd80      	pop	{r7, pc}
 8101918:	10000280 	.word	0x10000280

0810191c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 810191c:	b580      	push	{r7, lr}
 810191e:	b086      	sub	sp, #24
 8101920:	af02      	add	r7, sp, #8
 8101922:	4603      	mov	r3, r0
 8101924:	6039      	str	r1, [r7, #0]
 8101926:	71fb      	strb	r3, [r7, #7]
 8101928:	4613      	mov	r3, r2
 810192a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 810192c:	4b0d      	ldr	r3, [pc, #52]	@ (8101964 <bno055_readData+0x48>)
 810192e:	6818      	ldr	r0, [r3, #0]
 8101930:	1dfa      	adds	r2, r7, #7
 8101932:	2364      	movs	r3, #100	@ 0x64
 8101934:	9300      	str	r3, [sp, #0]
 8101936:	2301      	movs	r3, #1
 8101938:	2150      	movs	r1, #80	@ 0x50
 810193a:	f004 fa4f 	bl	8105ddc <HAL_I2C_Master_Transmit>
 810193e:	4603      	mov	r3, r0
 8101940:	73fb      	strb	r3, [r7, #15]
                          100);
	ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8101942:	4b08      	ldr	r3, [pc, #32]	@ (8101964 <bno055_readData+0x48>)
 8101944:	6818      	ldr	r0, [r3, #0]
 8101946:	79bb      	ldrb	r3, [r7, #6]
 8101948:	b29b      	uxth	r3, r3
 810194a:	2264      	movs	r2, #100	@ 0x64
 810194c:	9200      	str	r2, [sp, #0]
 810194e:	683a      	ldr	r2, [r7, #0]
 8101950:	2150      	movs	r1, #80	@ 0x50
 8101952:	f004 fb5b 	bl	810600c <HAL_I2C_Master_Receive>
 8101956:	4603      	mov	r3, r0
 8101958:	73fb      	strb	r3, [r7, #15]
                         100);
	  if (ret == HAL_OK) {
 810195a:	7bfb      	ldrb	r3, [r7, #15]
 810195c:	2b00      	cmp	r3, #0
	  } else {
	    //printf("Unknown status data %d", ret);
	  }
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 810195e:	3710      	adds	r7, #16
 8101960:	46bd      	mov	sp, r7
 8101962:	bd80      	pop	{r7, pc}
 8101964:	10000280 	.word	0x10000280

08101968 <bno055_setPowerMode>:
    bno055_writeData(BNO055_MAG_CONFIG, magConfigReg);
    bno055_setPage(0); //tornare in page 0
}

// Funzione per impostare la modalità energetica
void bno055_setPowerMode(PowerMode mode) {
 8101968:	b580      	push	{r7, lr}
 810196a:	b084      	sub	sp, #16
 810196c:	af00      	add	r7, sp, #0
 810196e:	4603      	mov	r3, r0
 8101970:	71fb      	strb	r3, [r7, #7]
    // Leggi il valore corrente di PWR_MODE
    uint8_t currentMode;
    bno055_readData(BNO055_PWR_MODE, &currentMode, 1);
 8101972:	f107 030f 	add.w	r3, r7, #15
 8101976:	2201      	movs	r2, #1
 8101978:	4619      	mov	r1, r3
 810197a:	203e      	movs	r0, #62	@ 0x3e
 810197c:	f7ff ffce 	bl	810191c <bno055_readData>

    // Modifica solo i bit relativi alla modalità energetica
    currentMode &= 0xFC; // Azzera i primi due bit
 8101980:	7bfb      	ldrb	r3, [r7, #15]
 8101982:	f023 0303 	bic.w	r3, r3, #3
 8101986:	b2db      	uxtb	r3, r3
 8101988:	73fb      	strb	r3, [r7, #15]
    currentMode |= mode; // Imposta la nuova modalità energetica
 810198a:	7bfa      	ldrb	r2, [r7, #15]
 810198c:	79fb      	ldrb	r3, [r7, #7]
 810198e:	4313      	orrs	r3, r2
 8101990:	b2db      	uxtb	r3, r3
 8101992:	73fb      	strb	r3, [r7, #15]

    // Scrivi il nuovo valore in PWR_MODE
    bno055_writeData(BNO055_PWR_MODE, currentMode);
 8101994:	7bfb      	ldrb	r3, [r7, #15]
 8101996:	4619      	mov	r1, r3
 8101998:	203e      	movs	r0, #62	@ 0x3e
 810199a:	f7ff ff8b 	bl	81018b4 <bno055_writeData>
}
 810199e:	bf00      	nop
 81019a0:	3710      	adds	r7, #16
 81019a2:	46bd      	mov	sp, r7
 81019a4:	bd80      	pop	{r7, pc}

081019a6 <bno055_getPowerMode>:

// Funzione per ottenere la modalità energetica attuale
PowerMode bno055_getPowerMode() {
 81019a6:	b580      	push	{r7, lr}
 81019a8:	b082      	sub	sp, #8
 81019aa:	af00      	add	r7, sp, #0
    // Leggi il valore corrente di PWR_MODE
    uint8_t currentMode;
    bno055_readData(BNO055_PWR_MODE, &currentMode, 1);
 81019ac:	1dfb      	adds	r3, r7, #7
 81019ae:	2201      	movs	r2, #1
 81019b0:	4619      	mov	r1, r3
 81019b2:	203e      	movs	r0, #62	@ 0x3e
 81019b4:	f7ff ffb2 	bl	810191c <bno055_readData>

    // Estrai la modalità energetica dai primi due bit
    currentMode &= 0x03;
 81019b8:	79fb      	ldrb	r3, [r7, #7]
 81019ba:	f003 0303 	and.w	r3, r3, #3
 81019be:	b2db      	uxtb	r3, r3
 81019c0:	71fb      	strb	r3, [r7, #7]

    // Restituisci la modalità energetica come enumerazione PowerMode
    return (PowerMode)currentMode;
 81019c2:	79fb      	ldrb	r3, [r7, #7]
}
 81019c4:	4618      	mov	r0, r3
 81019c6:	3708      	adds	r7, #8
 81019c8:	46bd      	mov	sp, r7
 81019ca:	bd80      	pop	{r7, pc}

081019cc <kalman_filter_init>:
//dimensioni del sistema


void kalman_filter_init(KalmanFilter* kf, float32_t* A_data,float32_t* B_data,
		float32_t* H_data, float32_t* Q_data,float32_t* R_data,float32_t* P_data,
		float32_t* K_data, float32_t* x_data) {
 81019cc:	b580      	push	{r7, lr}
 81019ce:	b084      	sub	sp, #16
 81019d0:	af00      	add	r7, sp, #0
 81019d2:	60f8      	str	r0, [r7, #12]
 81019d4:	60b9      	str	r1, [r7, #8]
 81019d6:	607a      	str	r2, [r7, #4]
 81019d8:	603b      	str	r3, [r7, #0]


    arm_mat_init_f32(&kf->A, state_dim, state_dim, (float32_t *)A_data);
 81019da:	68f8      	ldr	r0, [r7, #12]
 81019dc:	68bb      	ldr	r3, [r7, #8]
 81019de:	2202      	movs	r2, #2
 81019e0:	2102      	movs	r1, #2
 81019e2:	f00a ff55 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, state_dim, control_dim, (float32_t *)B_data);
 81019e6:	68fb      	ldr	r3, [r7, #12]
 81019e8:	f103 0008 	add.w	r0, r3, #8
 81019ec:	687b      	ldr	r3, [r7, #4]
 81019ee:	2201      	movs	r2, #1
 81019f0:	2102      	movs	r1, #2
 81019f2:	f00a ff4d 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, measure_dim, state_dim, (float32_t *)H_data);
 81019f6:	68fb      	ldr	r3, [r7, #12]
 81019f8:	f103 0010 	add.w	r0, r3, #16
 81019fc:	683b      	ldr	r3, [r7, #0]
 81019fe:	2202      	movs	r2, #2
 8101a00:	2102      	movs	r1, #2
 8101a02:	f00a ff45 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, state_dim, state_dim, (float32_t *)Q_data);
 8101a06:	68fb      	ldr	r3, [r7, #12]
 8101a08:	f103 0018 	add.w	r0, r3, #24
 8101a0c:	69bb      	ldr	r3, [r7, #24]
 8101a0e:	2202      	movs	r2, #2
 8101a10:	2102      	movs	r1, #2
 8101a12:	f00a ff3d 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, measure_dim, measure_dim, (float32_t *)R_data);
 8101a16:	68fb      	ldr	r3, [r7, #12]
 8101a18:	f103 0020 	add.w	r0, r3, #32
 8101a1c:	69fb      	ldr	r3, [r7, #28]
 8101a1e:	2202      	movs	r2, #2
 8101a20:	2102      	movs	r1, #2
 8101a22:	f00a ff35 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, state_dim, state_dim, (float32_t *)P_data);
 8101a26:	68fb      	ldr	r3, [r7, #12]
 8101a28:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8101a2c:	6a3b      	ldr	r3, [r7, #32]
 8101a2e:	2202      	movs	r2, #2
 8101a30:	2102      	movs	r1, #2
 8101a32:	f00a ff2d 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->x, state_dim, 1, (float32_t *)x_data);
 8101a36:	68fb      	ldr	r3, [r7, #12]
 8101a38:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8101a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101a3e:	2201      	movs	r2, #1
 8101a40:	2102      	movs	r1, #2
 8101a42:	f00a ff25 	bl	810c890 <arm_mat_init_f32>

    arm_mat_init_f32(&kf->K, state_dim, measure_dim, (float32_t *)&x_data);
 8101a46:	68fb      	ldr	r3, [r7, #12]
 8101a48:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8101a4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101a50:	2202      	movs	r2, #2
 8101a52:	2102      	movs	r1, #2
 8101a54:	f00a ff1c 	bl	810c890 <arm_mat_init_f32>

}
 8101a58:	bf00      	nop
 8101a5a:	3710      	adds	r7, #16
 8101a5c:	46bd      	mov	sp, r7
 8101a5e:	bd80      	pop	{r7, pc}

08101a60 <kalman_predict>:
    }
}



void kalman_predict(KalmanFilter* kf, const arm_matrix_instance_f32* u) {
 8101a60:	b580      	push	{r7, lr}
 8101a62:	b09c      	sub	sp, #112	@ 0x70
 8101a64:	af00      	add	r7, sp, #0
 8101a66:	6078      	str	r0, [r7, #4]
 8101a68:	6039      	str	r1, [r7, #0]
	float32_t temp1_data[state_dim];
	float32_t temp2_data[state_dim];
	float32_t temp3_data[state_dim*state_dim];
	float32_t temp4_data[state_dim*state_dim];
	float32_t temp5_data[state_dim*state_dim];
    arm_mat_init_f32(&temp1, state_dim, 1, (float32_t *)&temp1_data);
 8101a6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8101a6e:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8101a72:	2201      	movs	r2, #1
 8101a74:	2102      	movs	r1, #2
 8101a76:	f00a ff0b 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, state_dim, 1, (float32_t *)&temp2_data);
 8101a7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8101a7e:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8101a82:	2201      	movs	r2, #1
 8101a84:	2102      	movs	r1, #2
 8101a86:	f00a ff03 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&temp3, state_dim, state_dim, (float32_t *)&temp3_data);
 8101a8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101a8e:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8101a92:	2202      	movs	r2, #2
 8101a94:	2102      	movs	r1, #2
 8101a96:	f00a fefb 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&temp4, state_dim, state_dim, (float32_t *)&temp4_data);
 8101a9a:	f107 0318 	add.w	r3, r7, #24
 8101a9e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8101aa2:	2202      	movs	r2, #2
 8101aa4:	2102      	movs	r1, #2
 8101aa6:	f00a fef3 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&temp5, state_dim, state_dim, (float32_t *)&temp5_data);
 8101aaa:	f107 0308 	add.w	r3, r7, #8
 8101aae:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8101ab2:	2202      	movs	r2, #2
 8101ab4:	2102      	movs	r1, #2
 8101ab6:	f00a feeb 	bl	810c890 <arm_mat_init_f32>

    // x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &temp1);
 8101aba:	6878      	ldr	r0, [r7, #4]
 8101abc:	687b      	ldr	r3, [r7, #4]
 8101abe:	3338      	adds	r3, #56	@ 0x38
 8101ac0:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8101ac4:	4619      	mov	r1, r3
 8101ac6:	f00a fd3d 	bl	810c544 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, u, &temp2);
 8101aca:	687b      	ldr	r3, [r7, #4]
 8101acc:	3308      	adds	r3, #8
 8101ace:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8101ad2:	6839      	ldr	r1, [r7, #0]
 8101ad4:	4618      	mov	r0, r3
 8101ad6:	f00a fd35 	bl	810c544 <arm_mat_mult_f32>
	arm_mat_add_f32(&temp1, &temp2,  &kf->x);
 8101ada:	687b      	ldr	r3, [r7, #4]
 8101adc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8101ae0:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8101ae4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8101ae8:	4618      	mov	r0, r3
 8101aea:	f00a fed5 	bl	810c898 <arm_mat_add_f32>


    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &temp4);
 8101aee:	6878      	ldr	r0, [r7, #4]
 8101af0:	687b      	ldr	r3, [r7, #4]
 8101af2:	3328      	adds	r3, #40	@ 0x28
 8101af4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8101af8:	4619      	mov	r1, r3
 8101afa:	f00a fd23 	bl	810c544 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &temp5);
 8101afe:	687b      	ldr	r3, [r7, #4]
 8101b00:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8101b04:	4611      	mov	r1, r2
 8101b06:	4618      	mov	r0, r3
 8101b08:	f00a fc56 	bl	810c3b8 <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp4, &temp5, &temp3);
 8101b0c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8101b10:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8101b14:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8101b18:	4618      	mov	r0, r3
 8101b1a:	f00a fd13 	bl	810c544 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->Q, &kf->P);
 8101b1e:	687b      	ldr	r3, [r7, #4]
 8101b20:	f103 0118 	add.w	r1, r3, #24
 8101b24:	687b      	ldr	r3, [r7, #4]
 8101b26:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8101b2a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8101b2e:	4618      	mov	r0, r3
 8101b30:	f00a feb2 	bl	810c898 <arm_mat_add_f32>


}
 8101b34:	bf00      	nop
 8101b36:	3770      	adds	r7, #112	@ 0x70
 8101b38:	46bd      	mov	sp, r7
 8101b3a:	bd80      	pop	{r7, pc}

08101b3c <kalman_update>:


void kalman_update(KalmanFilter* kf, const arm_matrix_instance_f32* z)
{
 8101b3c:	b580      	push	{r7, lr}
 8101b3e:	b0dc      	sub	sp, #368	@ 0x170
 8101b40:	af00      	add	r7, sp, #0
 8101b42:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b46:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101b4a:	6018      	str	r0, [r3, #0]
 8101b4c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b50:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8101b54:	6019      	str	r1, [r3, #0]
    float32_t temp12_data[measure_dim * state_dim];
    float32_t temp13_data[state_dim * measure_dim];
    float32_t temp14_data[measure_dim];
    float32_t temp15_data[measure_dim];
    float32_t temp16_data[state_dim];
    arm_mat_init_f32(&temp1, state_dim, measure_dim, temp1_data);
 8101b56:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8101b5a:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8101b5e:	2202      	movs	r2, #2
 8101b60:	2102      	movs	r1, #2
 8101b62:	f00a fe95 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, state_dim, measure_dim, temp2_data);
 8101b66:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8101b6a:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8101b6e:	2202      	movs	r2, #2
 8101b70:	2102      	movs	r1, #2
 8101b72:	f00a fe8d 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&temp3, measure_dim, measure_dim, temp3_data);
 8101b76:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8101b7a:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8101b7e:	2202      	movs	r2, #2
 8101b80:	2102      	movs	r1, #2
 8101b82:	f00a fe85 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&temp4, measure_dim, measure_dim, temp4_data);
 8101b86:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8101b8a:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8101b8e:	2202      	movs	r2, #2
 8101b90:	2102      	movs	r1, #2
 8101b92:	f00a fe7d 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&temp5, measure_dim, measure_dim, temp5_data);
 8101b96:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8101b9a:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8101b9e:	2202      	movs	r2, #2
 8101ba0:	2102      	movs	r1, #2
 8101ba2:	f00a fe75 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&temp6, state_dim, state_dim, temp6_data);
 8101ba6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8101baa:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8101bae:	2202      	movs	r2, #2
 8101bb0:	2102      	movs	r1, #2
 8101bb2:	f00a fe6d 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&temp7, state_dim, state_dim, temp7_data);
 8101bb6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8101bba:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8101bbe:	2202      	movs	r2, #2
 8101bc0:	2102      	movs	r1, #2
 8101bc2:	f00a fe65 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&temp8, state_dim, state_dim, temp8_data);
 8101bc6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8101bca:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8101bce:	2202      	movs	r2, #2
 8101bd0:	2102      	movs	r1, #2
 8101bd2:	f00a fe5d 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&temp9, state_dim, measure_dim, temp9_data);
 8101bd6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8101bda:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8101bde:	2202      	movs	r2, #2
 8101be0:	2102      	movs	r1, #2
 8101be2:	f00a fe55 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&temp10, state_dim, measure_dim, temp10_data);
 8101be6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8101bea:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8101bee:	2202      	movs	r2, #2
 8101bf0:	2102      	movs	r1, #2
 8101bf2:	f00a fe4d 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&temp11, measure_dim,state_dim, temp11_data);
 8101bf6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8101bfa:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8101bfe:	2202      	movs	r2, #2
 8101c00:	2102      	movs	r1, #2
 8101c02:	f00a fe45 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&temp12, measure_dim, state_dim, temp12_data);
 8101c06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101c0a:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8101c0e:	2202      	movs	r2, #2
 8101c10:	2102      	movs	r1, #2
 8101c12:	f00a fe3d 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&temp13, state_dim, measure_dim, temp13_data);
 8101c16:	f107 0320 	add.w	r3, r7, #32
 8101c1a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8101c1e:	2202      	movs	r2, #2
 8101c20:	2102      	movs	r1, #2
 8101c22:	f00a fe35 	bl	810c890 <arm_mat_init_f32>
    arm_mat_init_f32(&temp14, measure_dim, 1, temp14_data);
 8101c26:	f107 0318 	add.w	r3, r7, #24
 8101c2a:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8101c2e:	2201      	movs	r2, #1
 8101c30:	2102      	movs	r1, #2
 8101c32:	f00a fe2d 	bl	810c890 <arm_mat_init_f32>
	arm_mat_init_f32(&temp15, measure_dim, 1, temp15_data);
 8101c36:	f107 0310 	add.w	r3, r7, #16
 8101c3a:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 8101c3e:	2201      	movs	r2, #1
 8101c40:	2102      	movs	r1, #2
 8101c42:	f00a fe25 	bl	810c890 <arm_mat_init_f32>
	arm_mat_init_f32(&temp16, state_dim, 1, temp16_data);
 8101c46:	f107 0308 	add.w	r3, r7, #8
 8101c4a:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 8101c4e:	2201      	movs	r2, #1
 8101c50:	2102      	movs	r1, #2
 8101c52:	f00a fe1d 	bl	810c890 <arm_mat_init_f32>

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &temp1);
 8101c56:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c5a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c5e:	681b      	ldr	r3, [r3, #0]
 8101c60:	3310      	adds	r3, #16
 8101c62:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8101c66:	4611      	mov	r1, r2
 8101c68:	4618      	mov	r0, r3
 8101c6a:	f00a fba5 	bl	810c3b8 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &temp1, &temp2);
 8101c6e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c72:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c76:	681b      	ldr	r3, [r3, #0]
 8101c78:	3328      	adds	r3, #40	@ 0x28
 8101c7a:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8101c7e:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8101c82:	4618      	mov	r0, r3
 8101c84:	f00a fc5e 	bl	810c544 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &temp2, &temp3);
 8101c88:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c8c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c90:	681b      	ldr	r3, [r3, #0]
 8101c92:	3310      	adds	r3, #16
 8101c94:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8101c98:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8101c9c:	4618      	mov	r0, r3
 8101c9e:	f00a fc51 	bl	810c544 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->R, &temp4);
 8101ca2:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101ca6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101caa:	681b      	ldr	r3, [r3, #0]
 8101cac:	f103 0120 	add.w	r1, r3, #32
 8101cb0:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8101cb4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8101cb8:	4618      	mov	r0, r3
 8101cba:	f00a fded 	bl	810c898 <arm_mat_add_f32>
    arm_mat_inverse_f32(&temp4, &temp5);
 8101cbe:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8101cc2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8101cc6:	4611      	mov	r1, r2
 8101cc8:	4618      	mov	r0, r3
 8101cca:	f00a fcdb 	bl	810c684 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&temp2, &temp5, &kf->K);
 8101cce:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cd2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cd6:	681b      	ldr	r3, [r3, #0]
 8101cd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8101cdc:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8101ce0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8101ce4:	4618      	mov	r0, r3
 8101ce6:	f00a fc2d 	bl	810c544 <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &temp14);
 8101cea:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cee:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cf2:	681b      	ldr	r3, [r3, #0]
 8101cf4:	f103 0010 	add.w	r0, r3, #16
 8101cf8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cfc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d00:	681b      	ldr	r3, [r3, #0]
 8101d02:	3338      	adds	r3, #56	@ 0x38
 8101d04:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8101d08:	4619      	mov	r1, r3
 8101d0a:	f00a fc1b 	bl	810c544 <arm_mat_mult_f32>
    arm_mat_sub_f32(z, &temp14, &temp15);
 8101d0e:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8101d12:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8101d16:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d1a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8101d1e:	6818      	ldr	r0, [r3, #0]
 8101d20:	f00a fba6 	bl	810c470 <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->K, &temp15, &temp16);
 8101d24:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d28:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d2c:	681b      	ldr	r3, [r3, #0]
 8101d2e:	3330      	adds	r3, #48	@ 0x30
 8101d30:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 8101d34:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 8101d38:	4618      	mov	r0, r3
 8101d3a:	f00a fc03 	bl	810c544 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->x, &temp16, &kf->x);
 8101d3e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d42:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d46:	681b      	ldr	r3, [r3, #0]
 8101d48:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8101d4c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d50:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d54:	681b      	ldr	r3, [r3, #0]
 8101d56:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8101d5a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8101d5e:	4619      	mov	r1, r3
 8101d60:	f00a fd9a 	bl	810c898 <arm_mat_add_f32>

    // Aggiornamento di P
    // P = P - P*H'*K' - K*H*P + K*(H*P*H' + R)*K'

    // Prima parte: P * H'
    arm_mat_trans_f32(&kf->H, &temp9);
 8101d64:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d68:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d6c:	681b      	ldr	r3, [r3, #0]
 8101d6e:	3310      	adds	r3, #16
 8101d70:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8101d74:	4611      	mov	r1, r2
 8101d76:	4618      	mov	r0, r3
 8101d78:	f00a fb1e 	bl	810c3b8 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &temp9, &temp10);
 8101d7c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d80:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d84:	681b      	ldr	r3, [r3, #0]
 8101d86:	3328      	adds	r3, #40	@ 0x28
 8101d88:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8101d8c:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8101d90:	4618      	mov	r0, r3
 8101d92:	f00a fbd7 	bl	810c544 <arm_mat_mult_f32>
    // Seconda parte: P * H' * K'
    arm_mat_trans_f32(&kf->K, &temp11);
 8101d96:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d9a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d9e:	681b      	ldr	r3, [r3, #0]
 8101da0:	3330      	adds	r3, #48	@ 0x30
 8101da2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8101da6:	4611      	mov	r1, r2
 8101da8:	4618      	mov	r0, r3
 8101daa:	f00a fb05 	bl	810c3b8 <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp10, &temp11, &temp6);
 8101dae:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8101db2:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8101db6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8101dba:	4618      	mov	r0, r3
 8101dbc:	f00a fbc2 	bl	810c544 <arm_mat_mult_f32>
    // Terza parte: K * H * P
    arm_mat_mult_f32(&kf->H, &kf->P, &temp12);
 8101dc0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101dc4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dc8:	681b      	ldr	r3, [r3, #0]
 8101dca:	f103 0010 	add.w	r0, r3, #16
 8101dce:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101dd2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dd6:	681b      	ldr	r3, [r3, #0]
 8101dd8:	3328      	adds	r3, #40	@ 0x28
 8101dda:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8101dde:	4619      	mov	r1, r3
 8101de0:	f00a fbb0 	bl	810c544 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->K, &temp12, &temp7);
 8101de4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101de8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dec:	681b      	ldr	r3, [r3, #0]
 8101dee:	3330      	adds	r3, #48	@ 0x30
 8101df0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8101df4:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8101df8:	4618      	mov	r0, r3
 8101dfa:	f00a fba3 	bl	810c544 <arm_mat_mult_f32>
    // Quarta parte: K * (H * P * H' + R) * K'
    arm_mat_mult_f32(&kf->H, &kf->P, &temp8);
 8101dfe:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e02:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e06:	681b      	ldr	r3, [r3, #0]
 8101e08:	f103 0010 	add.w	r0, r3, #16
 8101e0c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e10:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e14:	681b      	ldr	r3, [r3, #0]
 8101e16:	3328      	adds	r3, #40	@ 0x28
 8101e18:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8101e1c:	4619      	mov	r1, r3
 8101e1e:	f00a fb91 	bl	810c544 <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp8, &temp9, &temp3);
 8101e22:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8101e26:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8101e2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8101e2e:	4618      	mov	r0, r3
 8101e30:	f00a fb88 	bl	810c544 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->R, &temp4);
 8101e34:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e38:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e3c:	681b      	ldr	r3, [r3, #0]
 8101e3e:	f103 0120 	add.w	r1, r3, #32
 8101e42:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8101e46:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8101e4a:	4618      	mov	r0, r3
 8101e4c:	f00a fd24 	bl	810c898 <arm_mat_add_f32>
    arm_mat_mult_f32(&kf->K, &temp4, &temp13);
 8101e50:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e54:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e58:	681b      	ldr	r3, [r3, #0]
 8101e5a:	3330      	adds	r3, #48	@ 0x30
 8101e5c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8101e60:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8101e64:	4618      	mov	r0, r3
 8101e66:	f00a fb6d 	bl	810c544 <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp13, &temp11, &temp8);
 8101e6a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8101e6e:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8101e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8101e76:	4618      	mov	r0, r3
 8101e78:	f00a fb64 	bl	810c544 <arm_mat_mult_f32>
    // Risultato finale: P = P - temp6 - temp7 + temp8
    arm_mat_sub_f32(&kf->P, &temp6, &temp12);
 8101e7c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e80:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e84:	681b      	ldr	r3, [r3, #0]
 8101e86:	3328      	adds	r3, #40	@ 0x28
 8101e88:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8101e8c:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8101e90:	4618      	mov	r0, r3
 8101e92:	f00a faed 	bl	810c470 <arm_mat_sub_f32>
    arm_mat_sub_f32(&temp12, &temp7, &temp6);
 8101e96:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8101e9a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8101e9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8101ea2:	4618      	mov	r0, r3
 8101ea4:	f00a fae4 	bl	810c470 <arm_mat_sub_f32>
    arm_mat_add_f32(&temp6, &temp8, &kf->P);
 8101ea8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101eac:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101eb0:	681b      	ldr	r3, [r3, #0]
 8101eb2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8101eb6:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8101eba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8101ebe:	4618      	mov	r0, r3
 8101ec0:	f00a fcea 	bl	810c898 <arm_mat_add_f32>


}
 8101ec4:	bf00      	nop
 8101ec6:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8101eca:	46bd      	mov	sp, r7
 8101ecc:	bd80      	pop	{r7, pc}

08101ece <voltToAmpere>:
}



float voltToAmpere(float Volt, float a, float b)
{
 8101ece:	b480      	push	{r7}
 8101ed0:	b087      	sub	sp, #28
 8101ed2:	af00      	add	r7, sp, #0
 8101ed4:	ed87 0a03 	vstr	s0, [r7, #12]
 8101ed8:	edc7 0a02 	vstr	s1, [r7, #8]
 8101edc:	ed87 1a01 	vstr	s2, [r7, #4]
	//float ampere = (Volt-2.47)/0.22;  //a3b RESISTENZA
	//float ampere = Volt*1.25994074 - 3.1119; //a3b MOTORE
	//float ampere = (Volt -2.53)/0.8 + 0.095 + 0.065 + 0.07 ;
	float ampere = (Volt-a)/b;
 8101ee0:	ed97 7a03 	vldr	s14, [r7, #12]
 8101ee4:	edd7 7a02 	vldr	s15, [r7, #8]
 8101ee8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8101eec:	ed97 7a01 	vldr	s14, [r7, #4]
 8101ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101ef4:	edc7 7a05 	vstr	s15, [r7, #20]

	//float ampere = 2.3*Volt - 5.75;   //a4b DA RIVEDERE
	//float ampere = (Volt-2.48)/0.185; //sensore ACS712 05b
	return ampere;
 8101ef8:	697b      	ldr	r3, [r7, #20]
 8101efa:	ee07 3a90 	vmov	s15, r3
}
 8101efe:	eeb0 0a67 	vmov.f32	s0, s15
 8101f02:	371c      	adds	r7, #28
 8101f04:	46bd      	mov	sp, r7
 8101f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f0a:	4770      	bx	lr

08101f0c <getSpeed>:



//******************
//FUNZIONE PER VELOCITA DESIDERATA DELLA RUOTA DIETRO, INIZIALMENTE A RAMPA E POI COSTANTE
float getSpeed(float actual_speed) {
 8101f0c:	b480      	push	{r7}
 8101f0e:	b085      	sub	sp, #20
 8101f10:	af00      	add	r7, sp, #0
 8101f12:	ed87 0a01 	vstr	s0, [r7, #4]
	float ramp_time = 6; //secondi di rampa
 8101f16:	4b13      	ldr	r3, [pc, #76]	@ (8101f64 <getSpeed+0x58>)
 8101f18:	60fb      	str	r3, [r7, #12]

	//speed è la velocita di regime (costante)
	if (actual_speed < speed) {
 8101f1a:	4b13      	ldr	r3, [pc, #76]	@ (8101f68 <getSpeed+0x5c>)
 8101f1c:	edd3 7a00 	vldr	s15, [r3]
 8101f20:	ed97 7a01 	vldr	s14, [r7, #4]
 8101f24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101f2c:	d50f      	bpl.n	8101f4e <getSpeed+0x42>
		return actual_speed + speed * dt / ramp_time;
 8101f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8101f68 <getSpeed+0x5c>)
 8101f30:	edd3 7a00 	vldr	s15, [r3]
 8101f34:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8101f6c <getSpeed+0x60>
 8101f38:	ee67 6a87 	vmul.f32	s13, s15, s14
 8101f3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8101f40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101f44:	edd7 7a01 	vldr	s15, [r7, #4]
 8101f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101f4c:	e002      	b.n	8101f54 <getSpeed+0x48>
	} else
		return speed;
 8101f4e:	4b06      	ldr	r3, [pc, #24]	@ (8101f68 <getSpeed+0x5c>)
 8101f50:	edd3 7a00 	vldr	s15, [r3]
}
 8101f54:	eeb0 0a67 	vmov.f32	s0, s15
 8101f58:	3714      	adds	r7, #20
 8101f5a:	46bd      	mov	sp, r7
 8101f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f60:	4770      	bx	lr
 8101f62:	bf00      	nop
 8101f64:	40c00000 	.word	0x40c00000
 8101f68:	100005d4 	.word	0x100005d4
 8101f6c:	3c23d70a 	.word	0x3c23d70a

08101f70 <filtro_media_mobile>:
//******************



float filtro_media_mobile(float* vettorenuovo, float* vettorevecchio, float nuovamisurazione, int dimensione)
{
 8101f70:	b480      	push	{r7}
 8101f72:	b089      	sub	sp, #36	@ 0x24
 8101f74:	af00      	add	r7, sp, #0
 8101f76:	60f8      	str	r0, [r7, #12]
 8101f78:	60b9      	str	r1, [r7, #8]
 8101f7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8101f7e:	603a      	str	r2, [r7, #0]
	vettorenuovo[0] = nuovamisurazione;
 8101f80:	68fb      	ldr	r3, [r7, #12]
 8101f82:	687a      	ldr	r2, [r7, #4]
 8101f84:	601a      	str	r2, [r3, #0]
		  for(int i=0; i<dimensione-1; i++)
 8101f86:	2300      	movs	r3, #0
 8101f88:	61fb      	str	r3, [r7, #28]
 8101f8a:	e00d      	b.n	8101fa8 <filtro_media_mobile+0x38>
		  {

			  vettorenuovo[i+1] = vettorevecchio[i];   // dal 2 al n-1 esimo valore si ricopiano i valori vecchi
 8101f8c:	69fb      	ldr	r3, [r7, #28]
 8101f8e:	009b      	lsls	r3, r3, #2
 8101f90:	68ba      	ldr	r2, [r7, #8]
 8101f92:	441a      	add	r2, r3
 8101f94:	69fb      	ldr	r3, [r7, #28]
 8101f96:	3301      	adds	r3, #1
 8101f98:	009b      	lsls	r3, r3, #2
 8101f9a:	68f9      	ldr	r1, [r7, #12]
 8101f9c:	440b      	add	r3, r1
 8101f9e:	6812      	ldr	r2, [r2, #0]
 8101fa0:	601a      	str	r2, [r3, #0]
		  for(int i=0; i<dimensione-1; i++)
 8101fa2:	69fb      	ldr	r3, [r7, #28]
 8101fa4:	3301      	adds	r3, #1
 8101fa6:	61fb      	str	r3, [r7, #28]
 8101fa8:	683b      	ldr	r3, [r7, #0]
 8101faa:	3b01      	subs	r3, #1
 8101fac:	69fa      	ldr	r2, [r7, #28]
 8101fae:	429a      	cmp	r2, r3
 8101fb0:	dbec      	blt.n	8101f8c <filtro_media_mobile+0x1c>
		  }

		  float somma = 0;
 8101fb2:	f04f 0300 	mov.w	r3, #0
 8101fb6:	61bb      	str	r3, [r7, #24]
		  float media;
		  for(int i=0; i<dimensione; i++)
 8101fb8:	2300      	movs	r3, #0
 8101fba:	617b      	str	r3, [r7, #20]
 8101fbc:	e018      	b.n	8101ff0 <filtro_media_mobile+0x80>
		  {
			  vettorevecchio[i]=vettorenuovo[i];  //copia il vettore nuovo nel vecchio
 8101fbe:	697b      	ldr	r3, [r7, #20]
 8101fc0:	009b      	lsls	r3, r3, #2
 8101fc2:	68fa      	ldr	r2, [r7, #12]
 8101fc4:	441a      	add	r2, r3
 8101fc6:	697b      	ldr	r3, [r7, #20]
 8101fc8:	009b      	lsls	r3, r3, #2
 8101fca:	68b9      	ldr	r1, [r7, #8]
 8101fcc:	440b      	add	r3, r1
 8101fce:	6812      	ldr	r2, [r2, #0]
 8101fd0:	601a      	str	r2, [r3, #0]
			  somma += vettorenuovo[i];           //calcola la somma di tutti i valori
 8101fd2:	697b      	ldr	r3, [r7, #20]
 8101fd4:	009b      	lsls	r3, r3, #2
 8101fd6:	68fa      	ldr	r2, [r7, #12]
 8101fd8:	4413      	add	r3, r2
 8101fda:	edd3 7a00 	vldr	s15, [r3]
 8101fde:	ed97 7a06 	vldr	s14, [r7, #24]
 8101fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101fe6:	edc7 7a06 	vstr	s15, [r7, #24]
		  for(int i=0; i<dimensione; i++)
 8101fea:	697b      	ldr	r3, [r7, #20]
 8101fec:	3301      	adds	r3, #1
 8101fee:	617b      	str	r3, [r7, #20]
 8101ff0:	697a      	ldr	r2, [r7, #20]
 8101ff2:	683b      	ldr	r3, [r7, #0]
 8101ff4:	429a      	cmp	r2, r3
 8101ff6:	dbe2      	blt.n	8101fbe <filtro_media_mobile+0x4e>
			 // printf("%f.3 vet ", vettorenuovo[i]);
		  }

		  media = somma/dimensione;
 8101ff8:	683b      	ldr	r3, [r7, #0]
 8101ffa:	ee07 3a90 	vmov	s15, r3
 8101ffe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8102002:	edd7 6a06 	vldr	s13, [r7, #24]
 8102006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810200a:	edc7 7a04 	vstr	s15, [r7, #16]
		  return media;
 810200e:	693b      	ldr	r3, [r7, #16]
 8102010:	ee07 3a90 	vmov	s15, r3
}
 8102014:	eeb0 0a67 	vmov.f32	s0, s15
 8102018:	3724      	adds	r7, #36	@ 0x24
 810201a:	46bd      	mov	sp, r7
 810201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102020:	4770      	bx	lr
 8102022:	0000      	movs	r0, r0
 8102024:	0000      	movs	r0, r0
	...

08102028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8102028:	b5b0      	push	{r4, r5, r7, lr}
 810202a:	b096      	sub	sp, #88	@ 0x58
 810202c:	af06      	add	r7, sp, #24

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 810202e:	4b90      	ldr	r3, [pc, #576]	@ (8102270 <main+0x248>)
 8102030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102034:	4a8e      	ldr	r2, [pc, #568]	@ (8102270 <main+0x248>)
 8102036:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810203a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810203e:	4b8c      	ldr	r3, [pc, #560]	@ (8102270 <main+0x248>)
 8102040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8102048:	613b      	str	r3, [r7, #16]
 810204a:	693b      	ldr	r3, [r7, #16]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810204c:	2001      	movs	r0, #1
 810204e:	f003 fe17 	bl	8105c80 <HAL_HSEM_ActivateNotification>
	/*
	 Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	 perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 8102052:	f004 fca3 	bl	810699c <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE,
 8102056:	2201      	movs	r2, #1
 8102058:	2102      	movs	r1, #2
 810205a:	2000      	movs	r0, #0
 810205c:	f004 fc24 	bl	81068a8 <HAL_PWREx_EnterSTOPMode>
	PWR_D2_DOMAIN);
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102060:	4b84      	ldr	r3, [pc, #528]	@ (8102274 <main+0x24c>)
 8102062:	681b      	ldr	r3, [r3, #0]
 8102064:	091b      	lsrs	r3, r3, #4
 8102066:	f003 030f 	and.w	r3, r3, #15
 810206a:	2b07      	cmp	r3, #7
 810206c:	d108      	bne.n	8102080 <main+0x58>
 810206e:	4b82      	ldr	r3, [pc, #520]	@ (8102278 <main+0x250>)
 8102070:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8102074:	4a80      	ldr	r2, [pc, #512]	@ (8102278 <main+0x250>)
 8102076:	f043 0301 	orr.w	r3, r3, #1
 810207a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 810207e:	e007      	b.n	8102090 <main+0x68>
 8102080:	4b7d      	ldr	r3, [pc, #500]	@ (8102278 <main+0x250>)
 8102082:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8102086:	4a7c      	ldr	r2, [pc, #496]	@ (8102278 <main+0x250>)
 8102088:	f043 0301 	orr.w	r3, r3, #1
 810208c:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8102090:	f001 fd22 	bl	8103ad8 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_GPIO_Init();
 8102094:	f000 fffa 	bl	810308c <MX_GPIO_Init>
  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */

  arm_fir_init_f32(&fir_instance, FIR_LENGHT, fir_coefficients, fir_state, 1);
 8102098:	2301      	movs	r3, #1
 810209a:	9300      	str	r3, [sp, #0]
 810209c:	4b77      	ldr	r3, [pc, #476]	@ (810227c <main+0x254>)
 810209e:	4a78      	ldr	r2, [pc, #480]	@ (8102280 <main+0x258>)
 81020a0:	2103      	movs	r1, #3
 81020a2:	4878      	ldr	r0, [pc, #480]	@ (8102284 <main+0x25c>)
 81020a4:	f00a fc62 	bl	810c96c <arm_fir_init_f32>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_USART3_UART_Init();
 81020a8:	f000 ffa4 	bl	8102ff4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 81020ac:	f000 fd42 	bl	8102b34 <MX_I2C1_Init>
  MX_TIM1_Init();
 81020b0:	f000 fd80 	bl	8102bb4 <MX_TIM1_Init>
  MX_TIM2_Init();
 81020b4:	f000 fe2a 	bl	8102d0c <MX_TIM2_Init>
  MX_TIM4_Init();
 81020b8:	f000 feec 	bl	8102e94 <MX_TIM4_Init>
  MX_ADC1_Init();
 81020bc:	f000 fcc2 	bl	8102a44 <MX_ADC1_Init>
  MX_TIM3_Init();
 81020c0:	f000 fe72 	bl	8102da8 <MX_TIM3_Init>
  MX_TIM8_Init();
 81020c4:	f000 ff3c 	bl	8102f40 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 81020c8:	486f      	ldr	r0, [pc, #444]	@ (8102288 <main+0x260>)
 81020ca:	f007 fc13 	bl	81098f4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 81020ce:	2100      	movs	r1, #0
 81020d0:	486e      	ldr	r0, [pc, #440]	@ (810228c <main+0x264>)
 81020d2:	f007 fce9 	bl	8109aa8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 81020d6:	2100      	movs	r1, #0
 81020d8:	486d      	ldr	r0, [pc, #436]	@ (8102290 <main+0x268>)
 81020da:	f007 fce5 	bl	8109aa8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim4);
 81020de:	486d      	ldr	r0, [pc, #436]	@ (8102294 <main+0x26c>)
 81020e0:	f007 fb98 	bl	8109814 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 81020e4:	486c      	ldr	r0, [pc, #432]	@ (8102298 <main+0x270>)
 81020e6:	f007 fb95 	bl	8109814 <HAL_TIM_Base_Start>



	srand(1233);
 81020ea:	f240 40d1 	movw	r0, #1233	@ 0x4d1
 81020ee:	f00a fecd 	bl	810ce8c <srand>

	//*************************
	//BNO055
	bno055_assignI2C(&hi2c1);
 81020f2:	486a      	ldr	r0, [pc, #424]	@ (810229c <main+0x274>)
 81020f4:	f7ff fbc2 	bl	810187c <bno055_assignI2C>
	bno055_setup(); //il BNO055 viene inizializzato con questa funzione
 81020f8:	f7ff f9e1 	bl	81014be <bno055_setup>

	bno055_setPowerMode(NORMAL_MODE); //Inserire la modalita da impostare
 81020fc:	2000      	movs	r0, #0
 81020fe:	f7ff fc33 	bl	8101968 <bno055_setPowerMode>
	PowerMode currentMode = bno055_getPowerMode(); //Metodo per ottenere la modalita impostata
 8102102:	f7ff fc50 	bl	81019a6 <bno055_getPowerMode>
 8102106:	4603      	mov	r3, r0
 8102108:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	printf("Modalita energetica attuale: %d\r\n", currentMode);
 810210c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8102110:	4619      	mov	r1, r3
 8102112:	4863      	ldr	r0, [pc, #396]	@ (81022a0 <main+0x278>)
 8102114:	f00b fe16 	bl	810dd44 <iprintf>

	//Per angoli di Eulero
	bno055_vector_t eul;
	bno055_setOperationModeNDOF();
 8102118:	f7ff f9be 	bl	8101498 <bno055_setOperationModeNDOF>

	//calibrazione sensore???
	bno055_calibration_state_t cal = bno055_getCalibrationState();
 810211c:	f7ff f9ec 	bl	81014f8 <bno055_getCalibrationState>
 8102120:	4603      	mov	r3, r0
 8102122:	617b      	str	r3, [r7, #20]
	//		cal.gyro, cal.accel, cal.mag, cal.sys);
	//*************************

	//*************************
	//PID motore ruota dietro
	init_PID(&pid_speed, dt, V_MAX, -V_MAX);
 8102124:	eddf 7a5f 	vldr	s15, [pc, #380]	@ 81022a4 <main+0x27c>
 8102128:	eebb 1a02 	vmov.f32	s2, #178	@ 0xc1900000 -18.0
 810212c:	eef3 0a02 	vmov.f32	s1, #50	@ 0x41900000  18.0
 8102130:	eeb0 0a67 	vmov.f32	s0, s15
 8102134:	485c      	ldr	r0, [pc, #368]	@ (81022a8 <main+0x280>)
 8102136:	f7ff f8e7 	bl	8101308 <init_PID>
	tune_PID(&pid_speed, 7, 6, 0);
 810213a:	ed9f 1a5c 	vldr	s2, [pc, #368]	@ 81022ac <main+0x284>
 810213e:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 8102142:	eeb1 0a0c 	vmov.f32	s0, #28	@ 0x40e00000  7.0
 8102146:	4858      	ldr	r0, [pc, #352]	@ (81022a8 <main+0x280>)
 8102148:	f7ff f8ff 	bl	810134a <tune_PID>
	//*************************

	//*************************
	//PID angolo roll
	init_PID(&pid_roll, dt, 3*K, -3*K);
 810214c:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 81022a4 <main+0x27c>
 8102150:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 81022b0 <main+0x288>
 8102154:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8102158:	ee67 7a27 	vmul.f32	s15, s14, s15
 810215c:	eddf 6a54 	vldr	s13, [pc, #336]	@ 81022b0 <main+0x288>
 8102160:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 8102164:	ee26 7a87 	vmul.f32	s14, s13, s14
 8102168:	eeb0 1a47 	vmov.f32	s2, s14
 810216c:	eef0 0a67 	vmov.f32	s1, s15
 8102170:	eeb0 0a46 	vmov.f32	s0, s12
 8102174:	484f      	ldr	r0, [pc, #316]	@ (81022b4 <main+0x28c>)
 8102176:	f7ff f8c7 	bl	8101308 <init_PID>
	tune_PID(&pid_roll, 0.00015, 0, 0);
 810217a:	ed9f 1a4c 	vldr	s2, [pc, #304]	@ 81022ac <main+0x284>
 810217e:	eddf 0a4b 	vldr	s1, [pc, #300]	@ 81022ac <main+0x284>
 8102182:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 81022b8 <main+0x290>
 8102186:	484b      	ldr	r0, [pc, #300]	@ (81022b4 <main+0x28c>)
 8102188:	f7ff f8df 	bl	810134a <tune_PID>
	//*************************

	//*************************
	//PID coppia manubrio
	init_PID(&pid_steering_torque, dt, V_MAX, -V_MAX);
 810218c:	eddf 7a45 	vldr	s15, [pc, #276]	@ 81022a4 <main+0x27c>
 8102190:	eebb 1a02 	vmov.f32	s2, #178	@ 0xc1900000 -18.0
 8102194:	eef3 0a02 	vmov.f32	s1, #50	@ 0x41900000  18.0
 8102198:	eeb0 0a67 	vmov.f32	s0, s15
 810219c:	4847      	ldr	r0, [pc, #284]	@ (81022bc <main+0x294>)
 810219e:	f7ff f8b3 	bl	8101308 <init_PID>
	tune_PID(&pid_steering_torque, 30000, 20000*5, 0);
 81021a2:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 81022ac <main+0x284>
 81021a6:	eddf 0a46 	vldr	s1, [pc, #280]	@ 81022c0 <main+0x298>
 81021aa:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 81022c4 <main+0x29c>
 81021ae:	4843      	ldr	r0, [pc, #268]	@ (81022bc <main+0x294>)
 81021b0:	f7ff f8cb 	bl	810134a <tune_PID>
	//*************************


	//*************************
	//Filtro di Kalman per corrente
	arm_mat_init_f32(&u, control_dim, 1, (float32_t*) &u_data); // Input di controllo
 81021b4:	4b44      	ldr	r3, [pc, #272]	@ (81022c8 <main+0x2a0>)
 81021b6:	2201      	movs	r2, #1
 81021b8:	2101      	movs	r1, #1
 81021ba:	4844      	ldr	r0, [pc, #272]	@ (81022cc <main+0x2a4>)
 81021bc:	f00a fb68 	bl	810c890 <arm_mat_init_f32>
	arm_mat_init_f32(&z, measure_dim, 1, (float32_t*) &z_data);  // Misurazione
 81021c0:	4b43      	ldr	r3, [pc, #268]	@ (81022d0 <main+0x2a8>)
 81021c2:	2201      	movs	r2, #1
 81021c4:	2102      	movs	r1, #2
 81021c6:	4843      	ldr	r0, [pc, #268]	@ (81022d4 <main+0x2ac>)
 81021c8:	f00a fb62 	bl	810c890 <arm_mat_init_f32>
	kalman_filter_init(&kf, &A_data, &B_data, &H_data, &Q_data, &R_data,
 81021cc:	4b42      	ldr	r3, [pc, #264]	@ (81022d8 <main+0x2b0>)
 81021ce:	9304      	str	r3, [sp, #16]
 81021d0:	4b42      	ldr	r3, [pc, #264]	@ (81022dc <main+0x2b4>)
 81021d2:	9303      	str	r3, [sp, #12]
 81021d4:	4b42      	ldr	r3, [pc, #264]	@ (81022e0 <main+0x2b8>)
 81021d6:	9302      	str	r3, [sp, #8]
 81021d8:	4b42      	ldr	r3, [pc, #264]	@ (81022e4 <main+0x2bc>)
 81021da:	9301      	str	r3, [sp, #4]
 81021dc:	4b42      	ldr	r3, [pc, #264]	@ (81022e8 <main+0x2c0>)
 81021de:	9300      	str	r3, [sp, #0]
 81021e0:	4b42      	ldr	r3, [pc, #264]	@ (81022ec <main+0x2c4>)
 81021e2:	4a43      	ldr	r2, [pc, #268]	@ (81022f0 <main+0x2c8>)
 81021e4:	4943      	ldr	r1, [pc, #268]	@ (81022f4 <main+0x2cc>)
 81021e6:	4844      	ldr	r0, [pc, #272]	@ (81022f8 <main+0x2d0>)
 81021e8:	f7ff fbf0 	bl	81019cc <kalman_filter_init>
			&P_data, &K_data, &x_data);
	 u_data[0]=-dt*lambda*b/(1-dt*lambda);
 81021ec:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 81022a4 <main+0x27c>
 81021f0:	eef1 7a67 	vneg.f32	s15, s15
 81021f4:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 81022fc <main+0x2d4>
 81021f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 81021fc:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8102300 <main+0x2d8>
 8102200:	ee67 6a87 	vmul.f32	s13, s15, s14
 8102204:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 81022a4 <main+0x27c>
 8102208:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 81022fc <main+0x2d4>
 810220c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102210:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102214:	ee37 7a67 	vsub.f32	s14, s14, s15
 8102218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810221c:	4b2a      	ldr	r3, [pc, #168]	@ (81022c8 <main+0x2a0>)
 810221e:	edc3 7a00 	vstr	s15, [r3]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (flag_Tc == 1) {
 8102222:	4b38      	ldr	r3, [pc, #224]	@ (8102304 <main+0x2dc>)
 8102224:	edd3 7a00 	vldr	s15, [r3]
 8102228:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810222c:	eef4 7a47 	vcmp.f32	s15, s14
 8102230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102234:	d1f5      	bne.n	8102222 <main+0x1fa>
			flag_Tc = 0;
 8102236:	4b33      	ldr	r3, [pc, #204]	@ (8102304 <main+0x2dc>)
 8102238:	f04f 0200 	mov.w	r2, #0
 810223c:	601a      	str	r2, [r3, #0]
			//#####################################
			//##             BNO055			   ##
			//#####################################
			//*******************************

			flag_BNO055_Data_Ready = 1; //perche non va mai a 1 non ho capito perche
 810223e:	4b32      	ldr	r3, [pc, #200]	@ (8102308 <main+0x2e0>)
 8102240:	2201      	movs	r2, #1
 8102242:	601a      	str	r2, [r3, #0]
			if (flag_BNO055_Data_Ready == 1) {
 8102244:	4b30      	ldr	r3, [pc, #192]	@ (8102308 <main+0x2e0>)
 8102246:	681b      	ldr	r3, [r3, #0]
 8102248:	2b01      	cmp	r3, #1
 810224a:	d1ea      	bne.n	8102222 <main+0x1fa>
				flag_BNO055_Data_Ready = 0;
 810224c:	4b2e      	ldr	r3, [pc, #184]	@ (8102308 <main+0x2e0>)
 810224e:	2200      	movs	r2, #0
 8102250:	601a      	str	r2, [r3, #0]

					bno055_writeData(BNO055_SYS_TRIGGER, 0x40); //reset int
 8102252:	2140      	movs	r1, #64	@ 0x40
 8102254:	203f      	movs	r0, #63	@ 0x3f
 8102256:	f7ff fb2d 	bl	81018b4 <bno055_writeData>
					bno055_calibration_state_t cal = bno055_getCalibrationState();
 810225a:	f7ff f94d 	bl	81014f8 <bno055_getCalibrationState>
 810225e:	4603      	mov	r3, r0
 8102260:	60fb      	str	r3, [r7, #12]


				if (cal.sys != 3)
 8102262:	7b3b      	ldrb	r3, [r7, #12]
 8102264:	2b03      	cmp	r3, #3
 8102266:	d053      	beq.n	8102310 <main+0x2e8>
				{
					// printf("GYR : %+2.2d | ACC : %+2.2d | MAG : %+2.2d | %+2.2d\r\n",
					// cal.gyro, cal.accel, cal.mag, cal.sys);
					bno055_calibrated = 1;
 8102268:	4b28      	ldr	r3, [pc, #160]	@ (810230c <main+0x2e4>)
 810226a:	2201      	movs	r2, #1
 810226c:	601a      	str	r2, [r3, #0]
 810226e:	e052      	b.n	8102316 <main+0x2ee>
 8102270:	58024400 	.word	0x58024400
 8102274:	e000ed00 	.word	0xe000ed00
 8102278:	58026400 	.word	0x58026400
 810227c:	100008d0 	.word	0x100008d0
 8102280:	10000088 	.word	0x10000088
 8102284:	100008bc 	.word	0x100008bc
 8102288:	10000388 	.word	0x10000388
 810228c:	1000033c 	.word	0x1000033c
 8102290:	100003d4 	.word	0x100003d4
 8102294:	10000420 	.word	0x10000420
 8102298:	1000046c 	.word	0x1000046c
 810229c:	100002e8 	.word	0x100002e8
 81022a0:	081116b0 	.word	0x081116b0
 81022a4:	3c23d70a 	.word	0x3c23d70a
 81022a8:	1000054c 	.word	0x1000054c
 81022ac:	00000000 	.word	0x00000000
 81022b0:	3cbfb15b 	.word	0x3cbfb15b
 81022b4:	1000058c 	.word	0x1000058c
 81022b8:	391d4952 	.word	0x391d4952
 81022bc:	100005ac 	.word	0x100005ac
 81022c0:	47c35000 	.word	0x47c35000
 81022c4:	46ea6000 	.word	0x46ea6000
 81022c8:	100008ac 	.word	0x100008ac
 81022cc:	1000089c 	.word	0x1000089c
 81022d0:	100008b0 	.word	0x100008b0
 81022d4:	100008a4 	.word	0x100008a4
 81022d8:	10000894 	.word	0x10000894
 81022dc:	10000078 	.word	0x10000078
 81022e0:	10000068 	.word	0x10000068
 81022e4:	10000058 	.word	0x10000058
 81022e8:	10000048 	.word	0x10000048
 81022ec:	10000038 	.word	0x10000038
 81022f0:	10000030 	.word	0x10000030
 81022f4:	10000020 	.word	0x10000020
 81022f8:	10000854 	.word	0x10000854
 81022fc:	c93b6280 	.word	0xc93b6280
 8102300:	401d3dd9 	.word	0x401d3dd9
 8102304:	100005d0 	.word	0x100005d0
 8102308:	100005cc 	.word	0x100005cc
 810230c:	1000060c 	.word	0x1000060c
				}
				else bno055_calibrated=1;
 8102310:	4bcb      	ldr	r3, [pc, #812]	@ (8102640 <main+0x618>)
 8102312:	2201      	movs	r2, #1
 8102314:	601a      	str	r2, [r3, #0]

				//bno055_calibrated = 1; //da togliere
				if (bno055_calibrated) {
 8102316:	4bca      	ldr	r3, [pc, #808]	@ (8102640 <main+0x618>)
 8102318:	681b      	ldr	r3, [r3, #0]
 810231a:	2b00      	cmp	r3, #0
 810231c:	d081      	beq.n	8102222 <main+0x1fa>
					eul = bno055_getVectorEuler();
 810231e:	f7ff fa69 	bl	81017f4 <bno055_getVectorEuler>
 8102322:	eeb0 4a40 	vmov.f32	s8, s0
 8102326:	eef0 4a60 	vmov.f32	s9, s1
 810232a:	eeb0 5a41 	vmov.f32	s10, s2
 810232e:	eef0 5a61 	vmov.f32	s11, s3
 8102332:	eeb0 6a42 	vmov.f32	s12, s4
 8102336:	eef0 6a62 	vmov.f32	s13, s5
 810233a:	eeb0 7a43 	vmov.f32	s14, s6
 810233e:	eef0 7a63 	vmov.f32	s15, s7
 8102342:	ed87 4b06 	vstr	d4, [r7, #24]
 8102346:	ed87 5b08 	vstr	d5, [r7, #32]
 810234a:	ed87 6b0a 	vstr	d6, [r7, #40]	@ 0x28
 810234e:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
					//stampa angoli eulero

					//printf("Yaw: %+2.2f Roll: %+2.2f Pitch: %+2.2f \r\n", eul.x, eul.y, eul.z);
					roll = -eul.y;
 8102352:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8102356:	4610      	mov	r0, r2
 8102358:	4619      	mov	r1, r3
 810235a:	f7fe fccd 	bl	8100cf8 <__aeabi_d2f>
 810235e:	4603      	mov	r3, r0
 8102360:	ee07 3a90 	vmov	s15, r3
 8102364:	eef1 7a67 	vneg.f32	s15, s15
 8102368:	4bb6      	ldr	r3, [pc, #728]	@ (8102644 <main+0x61c>)
 810236a:	edc3 7a00 	vstr	s15, [r3]
					//#####################################
					//##          RUOTA DIETRO		   ##
					//#####################################
					//*******************************
					//Ottengo velocita ruota dietro
					counts = (double) TIM4->CNT - (TIM4->ARR) / 2;
 810236e:	4bb6      	ldr	r3, [pc, #728]	@ (8102648 <main+0x620>)
 8102370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102372:	4618      	mov	r0, r3
 8102374:	f7fe f94e 	bl	8100614 <__aeabi_ui2d>
 8102378:	4604      	mov	r4, r0
 810237a:	460d      	mov	r5, r1
 810237c:	4bb2      	ldr	r3, [pc, #712]	@ (8102648 <main+0x620>)
 810237e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102380:	085b      	lsrs	r3, r3, #1
 8102382:	4618      	mov	r0, r3
 8102384:	f7fe f946 	bl	8100614 <__aeabi_ui2d>
 8102388:	4602      	mov	r2, r0
 810238a:	460b      	mov	r3, r1
 810238c:	4620      	mov	r0, r4
 810238e:	4629      	mov	r1, r5
 8102390:	f7fe f802 	bl	8100398 <__aeabi_dsub>
 8102394:	4602      	mov	r2, r0
 8102396:	460b      	mov	r3, r1
 8102398:	4610      	mov	r0, r2
 810239a:	4619      	mov	r1, r3
 810239c:	f7fe fcac 	bl	8100cf8 <__aeabi_d2f>
 81023a0:	4603      	mov	r3, r0
 81023a2:	4aaa      	ldr	r2, [pc, #680]	@ (810264c <main+0x624>)
 81023a4:	6013      	str	r3, [r2, #0]
					TIM4->CNT = (TIM4->ARR) / 2;
 81023a6:	4ba8      	ldr	r3, [pc, #672]	@ (8102648 <main+0x620>)
 81023a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81023aa:	4aa7      	ldr	r2, [pc, #668]	@ (8102648 <main+0x620>)
 81023ac:	085b      	lsrs	r3, r3, #1
 81023ae:	6253      	str	r3, [r2, #36]	@ 0x24


					delta_angle_degree = (counts * 360) / (13 * 4 * 66); //del motore(davanti) //18denti dietro 3.8cm  //28 davanti 5.7cm
 81023b0:	4ba6      	ldr	r3, [pc, #664]	@ (810264c <main+0x624>)
 81023b2:	edd3 7a00 	vldr	s15, [r3]
 81023b6:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8102650 <main+0x628>
 81023ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 81023be:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 8102654 <main+0x62c>
 81023c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81023c6:	4ba4      	ldr	r3, [pc, #656]	@ (8102658 <main+0x630>)
 81023c8:	edc3 7a00 	vstr	s15, [r3]

					angle_degree += delta_angle_degree;
 81023cc:	4ba3      	ldr	r3, [pc, #652]	@ (810265c <main+0x634>)
 81023ce:	ed93 7a00 	vldr	s14, [r3]
 81023d2:	4ba1      	ldr	r3, [pc, #644]	@ (8102658 <main+0x630>)
 81023d4:	edd3 7a00 	vldr	s15, [r3]
 81023d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 81023dc:	4b9f      	ldr	r3, [pc, #636]	@ (810265c <main+0x634>)
 81023de:	edc3 7a00 	vstr	s15, [r3]
					speed_degsec = -1*delta_angle_degree / dt; //velocita angolare
 81023e2:	4b9d      	ldr	r3, [pc, #628]	@ (8102658 <main+0x630>)
 81023e4:	edd3 7a00 	vldr	s15, [r3]
 81023e8:	eeb1 7a67 	vneg.f32	s14, s15
 81023ec:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 8102660 <main+0x638>
 81023f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81023f4:	4b9b      	ldr	r3, [pc, #620]	@ (8102664 <main+0x63c>)
 81023f6:	edc3 7a00 	vstr	s15, [r3]


					speed_degsec_filtrata  = filtro_media_mobile(velocitavecchia, velocitanuova, speed_degsec, 30);
 81023fa:	4b9a      	ldr	r3, [pc, #616]	@ (8102664 <main+0x63c>)
 81023fc:	edd3 7a00 	vldr	s15, [r3]
 8102400:	221e      	movs	r2, #30
 8102402:	eeb0 0a67 	vmov.f32	s0, s15
 8102406:	4998      	ldr	r1, [pc, #608]	@ (8102668 <main+0x640>)
 8102408:	4898      	ldr	r0, [pc, #608]	@ (810266c <main+0x644>)
 810240a:	f7ff fdb1 	bl	8101f70 <filtro_media_mobile>
 810240e:	eef0 7a40 	vmov.f32	s15, s0
 8102412:	4b97      	ldr	r3, [pc, #604]	@ (8102670 <main+0x648>)
 8102414:	edc3 7a00 	vstr	s15, [r3]

					speed_degsec_filtrata = speed_degsec_filtrata*0.057/0.038; //rapporto velcoita angolare tra ruota dietro e avanti???
 8102418:	4b95      	ldr	r3, [pc, #596]	@ (8102670 <main+0x648>)
 810241a:	681b      	ldr	r3, [r3, #0]
 810241c:	4618      	mov	r0, r3
 810241e:	f7fe f91b 	bl	8100658 <__aeabi_f2d>
 8102422:	a381      	add	r3, pc, #516	@ (adr r3, 8102628 <main+0x600>)
 8102424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102428:	f7fe f96e 	bl	8100708 <__aeabi_dmul>
 810242c:	4602      	mov	r2, r0
 810242e:	460b      	mov	r3, r1
 8102430:	4610      	mov	r0, r2
 8102432:	4619      	mov	r1, r3
 8102434:	a37e      	add	r3, pc, #504	@ (adr r3, 8102630 <main+0x608>)
 8102436:	e9d3 2300 	ldrd	r2, r3, [r3]
 810243a:	f7fe fa8f 	bl	810095c <__aeabi_ddiv>
 810243e:	4602      	mov	r2, r0
 8102440:	460b      	mov	r3, r1
 8102442:	4610      	mov	r0, r2
 8102444:	4619      	mov	r1, r3
 8102446:	f7fe fc57 	bl	8100cf8 <__aeabi_d2f>
 810244a:	4603      	mov	r3, r0
 810244c:	4a88      	ldr	r2, [pc, #544]	@ (8102670 <main+0x648>)
 810244e:	6013      	str	r3, [r2, #0]

					speed_metsec = speed_degsec_filtrata/180*3.14/radius;
 8102450:	4b87      	ldr	r3, [pc, #540]	@ (8102670 <main+0x648>)
 8102452:	edd3 7a00 	vldr	s15, [r3]
 8102456:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8102674 <main+0x64c>
 810245a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 810245e:	ee16 0a90 	vmov	r0, s13
 8102462:	f7fe f8f9 	bl	8100658 <__aeabi_f2d>
 8102466:	a374      	add	r3, pc, #464	@ (adr r3, 8102638 <main+0x610>)
 8102468:	e9d3 2300 	ldrd	r2, r3, [r3]
 810246c:	f7fe f94c 	bl	8100708 <__aeabi_dmul>
 8102470:	4602      	mov	r2, r0
 8102472:	460b      	mov	r3, r1
 8102474:	4610      	mov	r0, r2
 8102476:	4619      	mov	r1, r3
 8102478:	f04f 0200 	mov.w	r2, #0
 810247c:	4b7e      	ldr	r3, [pc, #504]	@ (8102678 <main+0x650>)
 810247e:	f7fe fa6d 	bl	810095c <__aeabi_ddiv>
 8102482:	4602      	mov	r2, r0
 8102484:	460b      	mov	r3, r1
 8102486:	4610      	mov	r0, r2
 8102488:	4619      	mov	r1, r3
 810248a:	f7fe fc35 	bl	8100cf8 <__aeabi_d2f>
 810248e:	4603      	mov	r3, r0
 8102490:	4a7a      	ldr	r2, [pc, #488]	@ (810267c <main+0x654>)
 8102492:	6013      	str	r3, [r2, #0]
					//speed_rpm = -(DegreeSec2RPM(speed_degsec) / 28 * 18); //wtf perche il meno???
					//*******************************

					//******************************+
					//PID ruota dietro
					desired_speed_metsec = getSpeed(desired_speed_metsec); //funzione che crea un riferimento a rampa e poi costante per la velocita della ruota dietro
 8102494:	4b7a      	ldr	r3, [pc, #488]	@ (8102680 <main+0x658>)
 8102496:	edd3 7a00 	vldr	s15, [r3]
 810249a:	eeb0 0a67 	vmov.f32	s0, s15
 810249e:	f7ff fd35 	bl	8101f0c <getSpeed>
 81024a2:	eef0 7a40 	vmov.f32	s15, s0
 81024a6:	4b76      	ldr	r3, [pc, #472]	@ (8102680 <main+0x658>)
 81024a8:	edc3 7a00 	vstr	s15, [r3]
					desired_speed_rpm = DegreeSec2RPM(desired_speed_metsec / radius);
 81024ac:	4b74      	ldr	r3, [pc, #464]	@ (8102680 <main+0x658>)
 81024ae:	edd3 7a00 	vldr	s15, [r3]
 81024b2:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 81024b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81024ba:	eeb0 0a47 	vmov.f32	s0, s14
 81024be:	f7fe fe31 	bl	8101124 <DegreeSec2RPM>
 81024c2:	eef0 7a40 	vmov.f32	s15, s0
 81024c6:	4b6f      	ldr	r3, [pc, #444]	@ (8102684 <main+0x65c>)
 81024c8:	edc3 7a00 	vstr	s15, [r3]
					u_back_wheel = PID_controller(&pid_speed, speed_metsec, desired_speed_metsec);
 81024cc:	4b6b      	ldr	r3, [pc, #428]	@ (810267c <main+0x654>)
 81024ce:	edd3 7a00 	vldr	s15, [r3]
 81024d2:	4b6b      	ldr	r3, [pc, #428]	@ (8102680 <main+0x658>)
 81024d4:	ed93 7a00 	vldr	s14, [r3]
 81024d8:	eef0 0a47 	vmov.f32	s1, s14
 81024dc:	eeb0 0a67 	vmov.f32	s0, s15
 81024e0:	4869      	ldr	r0, [pc, #420]	@ (8102688 <main+0x660>)
 81024e2:	f7fe ff4b 	bl	810137c <PID_controller>
 81024e6:	eef0 7a40 	vmov.f32	s15, s0
 81024ea:	4b68      	ldr	r3, [pc, #416]	@ (810268c <main+0x664>)
 81024ec:	edc3 7a00 	vstr	s15, [r3]
					/*
					if(roll>=30 || roll<=-30) //metti 11 dopo?
						{sys_started=0; //nel caso in cui inizia a cadere bisogna ripremere il tasto blu per fare ripartire tutto il meccanismo di controllo
						}
						*/
					if(sys_started==0)
 81024f0:	4b67      	ldr	r3, [pc, #412]	@ (8102690 <main+0x668>)
 81024f2:	681b      	ldr	r3, [r3, #0]
 81024f4:	2b00      	cmp	r3, #0
 81024f6:	d107      	bne.n	8102508 <main+0x4e0>
					{
						desired_speed_metsec=0;
 81024f8:	4b61      	ldr	r3, [pc, #388]	@ (8102680 <main+0x658>)
 81024fa:	f04f 0200 	mov.w	r2, #0
 81024fe:	601a      	str	r2, [r3, #0]
						u_back_wheel=0;
 8102500:	4b62      	ldr	r3, [pc, #392]	@ (810268c <main+0x664>)
 8102502:	f04f 0200 	mov.w	r2, #0
 8102506:	601a      	str	r2, [r3, #0]
					}
					u_back_wheel = 0;
 8102508:	4b60      	ldr	r3, [pc, #384]	@ (810268c <main+0x664>)
 810250a:	f04f 0200 	mov.w	r2, #0
 810250e:	601a      	str	r2, [r3, #0]
					duty_back_wheel = Voltage2Duty(u_back_wheel);
 8102510:	4b5e      	ldr	r3, [pc, #376]	@ (810268c <main+0x664>)
 8102512:	edd3 7a00 	vldr	s15, [r3]
 8102516:	eeb0 0a67 	vmov.f32	s0, s15
 810251a:	f7fe fe23 	bl	8101164 <Voltage2Duty>
 810251e:	eef0 7a40 	vmov.f32	s15, s0
 8102522:	4b5c      	ldr	r3, [pc, #368]	@ (8102694 <main+0x66c>)
 8102524:	edc3 7a00 	vstr	s15, [r3]
					direction_back_wheel = Ref2Direction(u_back_wheel);
 8102528:	4b58      	ldr	r3, [pc, #352]	@ (810268c <main+0x664>)
 810252a:	edd3 7a00 	vldr	s15, [r3]
 810252e:	eeb0 0a67 	vmov.f32	s0, s15
 8102532:	f7fe fe59 	bl	81011e8 <Ref2Direction>
 8102536:	4603      	mov	r3, r0
 8102538:	461a      	mov	r2, r3
 810253a:	4b57      	ldr	r3, [pc, #348]	@ (8102698 <main+0x670>)
 810253c:	601a      	str	r2, [r3, #0]
					set_PWM_and_dir_back_wheel(duty_back_wheel, (uint8_t) direction_back_wheel);
 810253e:	4b55      	ldr	r3, [pc, #340]	@ (8102694 <main+0x66c>)
 8102540:	edd3 7a00 	vldr	s15, [r3]
 8102544:	4b54      	ldr	r3, [pc, #336]	@ (8102698 <main+0x670>)
 8102546:	681b      	ldr	r3, [r3, #0]
 8102548:	b2db      	uxtb	r3, r3
 810254a:	4618      	mov	r0, r3
 810254c:	eeb0 0a67 	vmov.f32	s0, s15
 8102550:	f7fe fe62 	bl	8101218 <set_PWM_and_dir_back_wheel>

					//#####################################
					//##          PID YAW RATE		   ##
					//#####################################
					//******************************
					desired_yaw_rate = 0;
 8102554:	4b51      	ldr	r3, [pc, #324]	@ (810269c <main+0x674>)
 8102556:	f04f 0200 	mov.w	r2, #0
 810255a:	601a      	str	r2, [r3, #0]
					desired_roll = PID_controller(&pid_yaw_rate, yaw_rate,
 810255c:	4b50      	ldr	r3, [pc, #320]	@ (81026a0 <main+0x678>)
 810255e:	edd3 7a00 	vldr	s15, [r3]
 8102562:	4b4e      	ldr	r3, [pc, #312]	@ (810269c <main+0x674>)
 8102564:	ed93 7a00 	vldr	s14, [r3]
 8102568:	eef0 0a47 	vmov.f32	s1, s14
 810256c:	eeb0 0a67 	vmov.f32	s0, s15
 8102570:	484c      	ldr	r0, [pc, #304]	@ (81026a4 <main+0x67c>)
 8102572:	f7fe ff03 	bl	810137c <PID_controller>
 8102576:	eef0 7a40 	vmov.f32	s15, s0
 810257a:	4b4b      	ldr	r3, [pc, #300]	@ (81026a8 <main+0x680>)
 810257c:	edc3 7a00 	vstr	s15, [r3]
					//******************************

					//prima di usare l'encoder


					desired_roll = 2;
 8102580:	4b49      	ldr	r3, [pc, #292]	@ (81026a8 <main+0x680>)
 8102582:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8102586:	601a      	str	r2, [r3, #0]
					desired_torque = PID_controller(&pid_roll, roll,desired_roll);
 8102588:	4b2e      	ldr	r3, [pc, #184]	@ (8102644 <main+0x61c>)
 810258a:	edd3 7a00 	vldr	s15, [r3]
 810258e:	4b46      	ldr	r3, [pc, #280]	@ (81026a8 <main+0x680>)
 8102590:	ed93 7a00 	vldr	s14, [r3]
 8102594:	eef0 0a47 	vmov.f32	s1, s14
 8102598:	eeb0 0a67 	vmov.f32	s0, s15
 810259c:	4843      	ldr	r0, [pc, #268]	@ (81026ac <main+0x684>)
 810259e:	f7fe feed 	bl	810137c <PID_controller>
 81025a2:	eef0 7a40 	vmov.f32	s15, s0
 81025a6:	4b42      	ldr	r3, [pc, #264]	@ (81026b0 <main+0x688>)
 81025a8:	edc3 7a00 	vstr	s15, [r3]
					//******************************


					//ora con encoder
					//ottengo i counts dell'encoder
					counts_steer = (double) TIM8->CNT - (TIM8->ARR) / 2; //credo cosi hai sia i conteggi negativi che positivi
 81025ac:	4b41      	ldr	r3, [pc, #260]	@ (81026b4 <main+0x68c>)
 81025ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81025b0:	4618      	mov	r0, r3
 81025b2:	f7fe f82f 	bl	8100614 <__aeabi_ui2d>
 81025b6:	4604      	mov	r4, r0
 81025b8:	460d      	mov	r5, r1
 81025ba:	4b3e      	ldr	r3, [pc, #248]	@ (81026b4 <main+0x68c>)
 81025bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81025be:	085b      	lsrs	r3, r3, #1
 81025c0:	4618      	mov	r0, r3
 81025c2:	f7fe f827 	bl	8100614 <__aeabi_ui2d>
 81025c6:	4602      	mov	r2, r0
 81025c8:	460b      	mov	r3, r1
 81025ca:	4620      	mov	r0, r4
 81025cc:	4629      	mov	r1, r5
 81025ce:	f7fd fee3 	bl	8100398 <__aeabi_dsub>
 81025d2:	4602      	mov	r2, r0
 81025d4:	460b      	mov	r3, r1
 81025d6:	4610      	mov	r0, r2
 81025d8:	4619      	mov	r1, r3
 81025da:	f7fe fb8d 	bl	8100cf8 <__aeabi_d2f>
 81025de:	4603      	mov	r3, r0
 81025e0:	4a35      	ldr	r2, [pc, #212]	@ (81026b8 <main+0x690>)
 81025e2:	6013      	str	r3, [r2, #0]
					TIM8->CNT = (TIM8->ARR) / 2;
 81025e4:	4b33      	ldr	r3, [pc, #204]	@ (81026b4 <main+0x68c>)
 81025e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81025e8:	4a32      	ldr	r2, [pc, #200]	@ (81026b4 <main+0x68c>)
 81025ea:	085b      	lsrs	r3, r3, #1
 81025ec:	6253      	str	r3, [r2, #36]	@ 0x24


					//calcolo l'angolo dello sterzo
					delta_angle_degree_steer = (counts_steer * 360) / (13 * 4 * 66);
 81025ee:	4b32      	ldr	r3, [pc, #200]	@ (81026b8 <main+0x690>)
 81025f0:	edd3 7a00 	vldr	s15, [r3]
 81025f4:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8102650 <main+0x628>
 81025f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 81025fc:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8102654 <main+0x62c>
 8102600:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102604:	4b2d      	ldr	r3, [pc, #180]	@ (81026bc <main+0x694>)
 8102606:	edc3 7a00 	vstr	s15, [r3]
					angle_steer = angle_steer + delta_angle_degree_steer;  //angolo sterzo
 810260a:	4b2d      	ldr	r3, [pc, #180]	@ (81026c0 <main+0x698>)
 810260c:	ed93 7a00 	vldr	s14, [r3]
 8102610:	4b2a      	ldr	r3, [pc, #168]	@ (81026bc <main+0x694>)
 8102612:	edd3 7a00 	vldr	s15, [r3]
 8102616:	ee77 7a27 	vadd.f32	s15, s14, s15
 810261a:	4b29      	ldr	r3, [pc, #164]	@ (81026c0 <main+0x698>)
 810261c:	edc3 7a00 	vstr	s15, [r3]
 8102620:	e050      	b.n	81026c4 <main+0x69c>
 8102622:	bf00      	nop
 8102624:	f3af 8000 	nop.w
 8102628:	9fbe76c9 	.word	0x9fbe76c9
 810262c:	3fad2f1a 	.word	0x3fad2f1a
 8102630:	6a7ef9db 	.word	0x6a7ef9db
 8102634:	3fa374bc 	.word	0x3fa374bc
 8102638:	51eb851f 	.word	0x51eb851f
 810263c:	40091eb8 	.word	0x40091eb8
 8102640:	1000060c 	.word	0x1000060c
 8102644:	10000830 	.word	0x10000830
 8102648:	40000800 	.word	0x40000800
 810264c:	100005d8 	.word	0x100005d8
 8102650:	43b40000 	.word	0x43b40000
 8102654:	45568000 	.word	0x45568000
 8102658:	100005e8 	.word	0x100005e8
 810265c:	100005ec 	.word	0x100005ec
 8102660:	3c23d70a 	.word	0x3c23d70a
 8102664:	100005f0 	.word	0x100005f0
 8102668:	1000078c 	.word	0x1000078c
 810266c:	10000714 	.word	0x10000714
 8102670:	10000804 	.word	0x10000804
 8102674:	43340000 	.word	0x43340000
 8102678:	40320000 	.word	0x40320000
 810267c:	100005f8 	.word	0x100005f8
 8102680:	100005f4 	.word	0x100005f4
 8102684:	100005fc 	.word	0x100005fc
 8102688:	1000054c 	.word	0x1000054c
 810268c:	10000600 	.word	0x10000600
 8102690:	10000614 	.word	0x10000614
 8102694:	10000604 	.word	0x10000604
 8102698:	10000608 	.word	0x10000608
 810269c:	1000080c 	.word	0x1000080c
 81026a0:	1000082c 	.word	0x1000082c
 81026a4:	1000056c 	.word	0x1000056c
 81026a8:	10000810 	.word	0x10000810
 81026ac:	1000058c 	.word	0x1000058c
 81026b0:	10000814 	.word	0x10000814
 81026b4:	40010400 	.word	0x40010400
 81026b8:	100005dc 	.word	0x100005dc
 81026bc:	100005e0 	.word	0x100005e0
 81026c0:	100005e4 	.word	0x100005e4
					speed_degsec_steer = delta_angle_degree_steer / dt;  //velocita sterzo
 81026c4:	4bb4      	ldr	r3, [pc, #720]	@ (8102998 <main+0x970>)
 81026c6:	ed93 7a00 	vldr	s14, [r3]
 81026ca:	eddf 6ab4 	vldr	s13, [pc, #720]	@ 810299c <main+0x974>
 81026ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81026d2:	4bb3      	ldr	r3, [pc, #716]	@ (81029a0 <main+0x978>)
 81026d4:	edc3 7a00 	vstr	s15, [r3]
					acc_steer = speed_degsec_steer/dt; //accelerazione sterzo
 81026d8:	4bb1      	ldr	r3, [pc, #708]	@ (81029a0 <main+0x978>)
 81026da:	ed93 7a00 	vldr	s14, [r3]
 81026de:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 810299c <main+0x974>
 81026e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81026e6:	4baf      	ldr	r3, [pc, #700]	@ (81029a4 <main+0x97c>)
 81026e8:	edc3 7a00 	vstr	s15, [r3]

					speed_degsec_steer_filtrata = filtro_media_mobile(speedsteernuovo, speedsteervecchio, speed_degsec_steer, 30);
 81026ec:	4bac      	ldr	r3, [pc, #688]	@ (81029a0 <main+0x978>)
 81026ee:	edd3 7a00 	vldr	s15, [r3]
 81026f2:	221e      	movs	r2, #30
 81026f4:	eeb0 0a67 	vmov.f32	s0, s15
 81026f8:	49ab      	ldr	r1, [pc, #684]	@ (81029a8 <main+0x980>)
 81026fa:	48ac      	ldr	r0, [pc, #688]	@ (81029ac <main+0x984>)
 81026fc:	f7ff fc38 	bl	8101f70 <filtro_media_mobile>
 8102700:	eef0 7a40 	vmov.f32	s15, s0
 8102704:	4baa      	ldr	r3, [pc, #680]	@ (81029b0 <main+0x988>)
 8102706:	edc3 7a00 	vstr	s15, [r3]
					angolo_sterzo += speed_degsec_steer_filtrata*dt;
 810270a:	4ba9      	ldr	r3, [pc, #676]	@ (81029b0 <main+0x988>)
 810270c:	edd3 7a00 	vldr	s15, [r3]
 8102710:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 810299c <main+0x974>
 8102714:	ee27 7a87 	vmul.f32	s14, s15, s14
 8102718:	4ba6      	ldr	r3, [pc, #664]	@ (81029b4 <main+0x98c>)
 810271a:	edd3 7a00 	vldr	s15, [r3]
 810271e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102722:	4ba4      	ldr	r3, [pc, #656]	@ (81029b4 <main+0x98c>)
 8102724:	edc3 7a00 	vstr	s15, [r3]
					//******************************
					//filtro passa basso 1/s+1 discretizzato con Matlab
					//desired_filtered_torque = 0.99 * old_desired_filtered_torque
					//		+ 0.00995 * old_desired_torque; //questo è quello del prof

					desired_filtered_torque = 0.9 * old_desired_filtered_torque
 8102728:	4ba3      	ldr	r3, [pc, #652]	@ (81029b8 <main+0x990>)
 810272a:	681b      	ldr	r3, [r3, #0]
 810272c:	4618      	mov	r0, r3
 810272e:	f7fd ff93 	bl	8100658 <__aeabi_f2d>
 8102732:	a391      	add	r3, pc, #580	@ (adr r3, 8102978 <main+0x950>)
 8102734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102738:	f7fd ffe6 	bl	8100708 <__aeabi_dmul>
 810273c:	4602      	mov	r2, r0
 810273e:	460b      	mov	r3, r1
 8102740:	4614      	mov	r4, r2
 8102742:	461d      	mov	r5, r3
											+ 0.1 * old_desired_torque;
 8102744:	4b9d      	ldr	r3, [pc, #628]	@ (81029bc <main+0x994>)
 8102746:	681b      	ldr	r3, [r3, #0]
 8102748:	4618      	mov	r0, r3
 810274a:	f7fd ff85 	bl	8100658 <__aeabi_f2d>
 810274e:	a38c      	add	r3, pc, #560	@ (adr r3, 8102980 <main+0x958>)
 8102750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102754:	f7fd ffd8 	bl	8100708 <__aeabi_dmul>
 8102758:	4602      	mov	r2, r0
 810275a:	460b      	mov	r3, r1
 810275c:	4620      	mov	r0, r4
 810275e:	4629      	mov	r1, r5
 8102760:	f7fd fe1c 	bl	810039c <__adddf3>
 8102764:	4602      	mov	r2, r0
 8102766:	460b      	mov	r3, r1
 8102768:	4610      	mov	r0, r2
 810276a:	4619      	mov	r1, r3
 810276c:	f7fe fac4 	bl	8100cf8 <__aeabi_d2f>
 8102770:	4603      	mov	r3, r0
					desired_filtered_torque = 0.9 * old_desired_filtered_torque
 8102772:	4a93      	ldr	r2, [pc, #588]	@ (81029c0 <main+0x998>)
 8102774:	6013      	str	r3, [r2, #0]


					old_desired_torque = desired_torque;
 8102776:	4b93      	ldr	r3, [pc, #588]	@ (81029c4 <main+0x99c>)
 8102778:	681b      	ldr	r3, [r3, #0]
 810277a:	4a90      	ldr	r2, [pc, #576]	@ (81029bc <main+0x994>)
 810277c:	6013      	str	r3, [r2, #0]
					old_desired_filtered_torque = desired_filtered_torque;
 810277e:	4b90      	ldr	r3, [pc, #576]	@ (81029c0 <main+0x998>)
 8102780:	681b      	ldr	r3, [r3, #0]
 8102782:	4a8d      	ldr	r2, [pc, #564]	@ (81029b8 <main+0x990>)
 8102784:	6013      	str	r3, [r2, #0]
					//#####################################
					//##            STERZO			   ##
					//#####################################
					//******************************
					//Calcolo valore corrente
					HAL_ADC_Start(&hadc1);
 8102786:	4890      	ldr	r0, [pc, #576]	@ (81029c8 <main+0x9a0>)
 8102788:	f001 fe5c 	bl	8104444 <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc1, timeout);
 810278c:	4b8f      	ldr	r3, [pc, #572]	@ (81029cc <main+0x9a4>)
 810278e:	681b      	ldr	r3, [r3, #0]
 8102790:	4619      	mov	r1, r3
 8102792:	488d      	ldr	r0, [pc, #564]	@ (81029c8 <main+0x9a0>)
 8102794:	f001 ff54 	bl	8104640 <HAL_ADC_PollForConversion>
					CountValue = HAL_ADC_GetValue(&hadc1);
 8102798:	488b      	ldr	r0, [pc, #556]	@ (81029c8 <main+0x9a0>)
 810279a:	f002 f845 	bl	8104828 <HAL_ADC_GetValue>
 810279e:	ee07 0a90 	vmov	s15, r0
 81027a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81027a6:	4b8a      	ldr	r3, [pc, #552]	@ (81029d0 <main+0x9a8>)
 81027a8:	edc3 7a00 	vstr	s15, [r3]
					volt = ((float) CountValue) * Vref / (resolution);
 81027ac:	4b88      	ldr	r3, [pc, #544]	@ (81029d0 <main+0x9a8>)
 81027ae:	ed93 7a00 	vldr	s14, [r3]
 81027b2:	4b88      	ldr	r3, [pc, #544]	@ (81029d4 <main+0x9ac>)
 81027b4:	edd3 7a00 	vldr	s15, [r3]
 81027b8:	ee67 6a27 	vmul.f32	s13, s14, s15
 81027bc:	4b86      	ldr	r3, [pc, #536]	@ (81029d8 <main+0x9b0>)
 81027be:	ed93 7a00 	vldr	s14, [r3]
 81027c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81027c6:	4b85      	ldr	r3, [pc, #532]	@ (81029dc <main+0x9b4>)
 81027c8:	edc3 7a00 	vstr	s15, [r3]
					HAL_ADC_Stop(&hadc1);
 81027cc:	487e      	ldr	r0, [pc, #504]	@ (81029c8 <main+0x9a0>)
 81027ce:	f001 ff03 	bl	81045d8 <HAL_ADC_Stop>
					VoltSens = volt * 1.524 - 0.1018;
 81027d2:	4b82      	ldr	r3, [pc, #520]	@ (81029dc <main+0x9b4>)
 81027d4:	681b      	ldr	r3, [r3, #0]
 81027d6:	4618      	mov	r0, r3
 81027d8:	f7fd ff3e 	bl	8100658 <__aeabi_f2d>
 81027dc:	a36a      	add	r3, pc, #424	@ (adr r3, 8102988 <main+0x960>)
 81027de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027e2:	f7fd ff91 	bl	8100708 <__aeabi_dmul>
 81027e6:	4602      	mov	r2, r0
 81027e8:	460b      	mov	r3, r1
 81027ea:	4610      	mov	r0, r2
 81027ec:	4619      	mov	r1, r3
 81027ee:	a368      	add	r3, pc, #416	@ (adr r3, 8102990 <main+0x968>)
 81027f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027f4:	f7fd fdd0 	bl	8100398 <__aeabi_dsub>
 81027f8:	4602      	mov	r2, r0
 81027fa:	460b      	mov	r3, r1
 81027fc:	4610      	mov	r0, r2
 81027fe:	4619      	mov	r1, r3
 8102800:	f7fe fa7a 	bl	8100cf8 <__aeabi_d2f>
 8102804:	4603      	mov	r3, r0
 8102806:	4a76      	ldr	r2, [pc, #472]	@ (81029e0 <main+0x9b8>)
 8102808:	6013      	str	r3, [r2, #0]
					corrente_non_filtrata = voltToAmpere(VoltSens,a,b);
 810280a:	4b75      	ldr	r3, [pc, #468]	@ (81029e0 <main+0x9b8>)
 810280c:	edd3 7a00 	vldr	s15, [r3]
 8102810:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 81029e4 <main+0x9bc>
 8102814:	eddf 6a74 	vldr	s13, [pc, #464]	@ 81029e8 <main+0x9c0>
 8102818:	eeb0 1a66 	vmov.f32	s2, s13
 810281c:	eef0 0a47 	vmov.f32	s1, s14
 8102820:	eeb0 0a67 	vmov.f32	s0, s15
 8102824:	f7ff fb53 	bl	8101ece <voltToAmpere>
 8102828:	eef0 7a40 	vmov.f32	s15, s0
 810282c:	4b6f      	ldr	r3, [pc, #444]	@ (81029ec <main+0x9c4>)
 810282e:	edc3 7a00 	vstr	s15, [r3]

					 fir_in_arm = (float32_t)corrente_non_filtrata;
 8102832:	4b6e      	ldr	r3, [pc, #440]	@ (81029ec <main+0x9c4>)
 8102834:	681b      	ldr	r3, [r3, #0]
 8102836:	4a6e      	ldr	r2, [pc, #440]	@ (81029f0 <main+0x9c8>)
 8102838:	6013      	str	r3, [r2, #0]
					 arm_fir_f32(&fir_instance, &fir_in_arm, &fir_out_arm, 1);
 810283a:	2301      	movs	r3, #1
 810283c:	4a6d      	ldr	r2, [pc, #436]	@ (81029f4 <main+0x9cc>)
 810283e:	496c      	ldr	r1, [pc, #432]	@ (81029f0 <main+0x9c8>)
 8102840:	486d      	ldr	r0, [pc, #436]	@ (81029f8 <main+0x9d0>)
 8102842:	f00a f8a3 	bl	810c98c <arm_fir_f32>
					 filtered_current = fir_out_arm;
 8102846:	4b6b      	ldr	r3, [pc, #428]	@ (81029f4 <main+0x9cc>)
 8102848:	681b      	ldr	r3, [r3, #0]
 810284a:	4a6c      	ldr	r2, [pc, #432]	@ (81029fc <main+0x9d4>)
 810284c:	6013      	str	r3, [r2, #0]



					//Filtro di Kalman per corrente
					//setta i valori di input e di misura per il filtro di kalman
					z_data[0] = VoltSens; //misura del voltaggio del sensore di corrente
 810284e:	4b64      	ldr	r3, [pc, #400]	@ (81029e0 <main+0x9b8>)
 8102850:	681b      	ldr	r3, [r3, #0]
 8102852:	4a6b      	ldr	r2, [pc, #428]	@ (8102a00 <main+0x9d8>)
 8102854:	6013      	str	r3, [r2, #0]
					z_data[1] = corrente_non_filtrata; //per non usare la misura I aggiuntiva, volendo si puo usare la formula V=IR del motore, adesso vedo come metterla
 8102856:	4b65      	ldr	r3, [pc, #404]	@ (81029ec <main+0x9c4>)
 8102858:	681b      	ldr	r3, [r3, #0]
 810285a:	4a69      	ldr	r2, [pc, #420]	@ (8102a00 <main+0x9d8>)
 810285c:	6053      	str	r3, [r2, #4]
					//z_data[1] = misuracorrente; //qua ci va la misura della corrente. scelta grazie al pwm dalla formula I = V/R
					kalman_predict(&kf, &u);
 810285e:	4969      	ldr	r1, [pc, #420]	@ (8102a04 <main+0x9dc>)
 8102860:	4869      	ldr	r0, [pc, #420]	@ (8102a08 <main+0x9e0>)
 8102862:	f7ff f8fd 	bl	8101a60 <kalman_predict>
					kalman_update(&kf, &z);
 8102866:	4969      	ldr	r1, [pc, #420]	@ (8102a0c <main+0x9e4>)
 8102868:	4867      	ldr	r0, [pc, #412]	@ (8102a08 <main+0x9e0>)
 810286a:	f7ff f967 	bl	8101b3c <kalman_update>
					filtered_current_kalman = x_data[1];
 810286e:	4b68      	ldr	r3, [pc, #416]	@ (8102a10 <main+0x9e8>)
 8102870:	685b      	ldr	r3, [r3, #4]
 8102872:	4a68      	ldr	r2, [pc, #416]	@ (8102a14 <main+0x9ec>)
 8102874:	6013      	str	r3, [r2, #0]

					//idea di trovare il modello del processo dello sterzo(quindi modello sterzo+motore) tramite risposta indiciale, poi dare come misura la I ottenuta dalla equazione dinamica


					//calcolo coppia
					torque = filtered_current_kalman * K;
 8102876:	4b67      	ldr	r3, [pc, #412]	@ (8102a14 <main+0x9ec>)
 8102878:	edd3 7a00 	vldr	s15, [r3]
 810287c:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8102a18 <main+0x9f0>
 8102880:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102884:	4b65      	ldr	r3, [pc, #404]	@ (8102a1c <main+0x9f4>)
 8102886:	edc3 7a00 	vstr	s15, [r3]

*/

					//u_front_wheel = 18;

										  u_front_wheel = PID_controller(&pid_steering_torque, torque, desired_filtered_torque);
 810288a:	4b64      	ldr	r3, [pc, #400]	@ (8102a1c <main+0x9f4>)
 810288c:	edd3 7a00 	vldr	s15, [r3]
 8102890:	4b4b      	ldr	r3, [pc, #300]	@ (81029c0 <main+0x998>)
 8102892:	ed93 7a00 	vldr	s14, [r3]
 8102896:	eef0 0a47 	vmov.f32	s1, s14
 810289a:	eeb0 0a67 	vmov.f32	s0, s15
 810289e:	4860      	ldr	r0, [pc, #384]	@ (8102a20 <main+0x9f8>)
 81028a0:	f7fe fd6c 	bl	810137c <PID_controller>
 81028a4:	eef0 7a40 	vmov.f32	s15, s0
 81028a8:	4b5e      	ldr	r3, [pc, #376]	@ (8102a24 <main+0x9fc>)
 81028aa:	edc3 7a00 	vstr	s15, [r3]

										  					if(sys_started==0)
 81028ae:	4b5e      	ldr	r3, [pc, #376]	@ (8102a28 <main+0xa00>)
 81028b0:	681b      	ldr	r3, [r3, #0]
 81028b2:	2b00      	cmp	r3, #0
 81028b4:	d107      	bne.n	81028c6 <main+0x89e>
										  					{
										  					stadio = 1000;
 81028b6:	4b5d      	ldr	r3, [pc, #372]	@ (8102a2c <main+0xa04>)
 81028b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 81028bc:	601a      	str	r2, [r3, #0]
										  					u_front_wheel = 0;
 81028be:	4b59      	ldr	r3, [pc, #356]	@ (8102a24 <main+0x9fc>)
 81028c0:	f04f 0200 	mov.w	r2, #0
 81028c4:	601a      	str	r2, [r3, #0]
										  					}



					//u_front_wheel = 0;
					duty_front_wheel = Voltage2Duty(u_front_wheel);
 81028c6:	4b57      	ldr	r3, [pc, #348]	@ (8102a24 <main+0x9fc>)
 81028c8:	edd3 7a00 	vldr	s15, [r3]
 81028cc:	eeb0 0a67 	vmov.f32	s0, s15
 81028d0:	f7fe fc48 	bl	8101164 <Voltage2Duty>
 81028d4:	eef0 7a40 	vmov.f32	s15, s0
 81028d8:	4b55      	ldr	r3, [pc, #340]	@ (8102a30 <main+0xa08>)
 81028da:	edc3 7a00 	vstr	s15, [r3]
					dir_front_wheel = Ref2Direction(u_front_wheel);
 81028de:	4b51      	ldr	r3, [pc, #324]	@ (8102a24 <main+0x9fc>)
 81028e0:	edd3 7a00 	vldr	s15, [r3]
 81028e4:	eeb0 0a67 	vmov.f32	s0, s15
 81028e8:	f7fe fc7e 	bl	81011e8 <Ref2Direction>
 81028ec:	4603      	mov	r3, r0
 81028ee:	ee07 3a90 	vmov	s15, r3
 81028f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81028f6:	4b4f      	ldr	r3, [pc, #316]	@ (8102a34 <main+0xa0c>)
 81028f8:	edc3 7a00 	vstr	s15, [r3]




					set_PWM_and_dir_front_wheel(duty_front_wheel, dir_front_wheel);
 81028fc:	4b4c      	ldr	r3, [pc, #304]	@ (8102a30 <main+0xa08>)
 81028fe:	ed93 7a00 	vldr	s14, [r3]
 8102902:	4b4c      	ldr	r3, [pc, #304]	@ (8102a34 <main+0xa0c>)
 8102904:	edd3 7a00 	vldr	s15, [r3]
 8102908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810290c:	edc7 7a01 	vstr	s15, [r7, #4]
 8102910:	793b      	ldrb	r3, [r7, #4]
 8102912:	b2db      	uxtb	r3, r3
 8102914:	4618      	mov	r0, r3
 8102916:	eeb0 0a47 	vmov.f32	s0, s14
 810291a:	f7fe fcbf 	bl	810129c <set_PWM_and_dir_front_wheel>
					printf("%.5f ",acc_steer);
*/
					//printf("%.5f ",u_front_wheel/18.0*12);

//per roll
					printf("%.5f ",roll);
 810291e:	4b46      	ldr	r3, [pc, #280]	@ (8102a38 <main+0xa10>)
 8102920:	681b      	ldr	r3, [r3, #0]
 8102922:	4618      	mov	r0, r3
 8102924:	f7fd fe98 	bl	8100658 <__aeabi_f2d>
 8102928:	4602      	mov	r2, r0
 810292a:	460b      	mov	r3, r1
 810292c:	4843      	ldr	r0, [pc, #268]	@ (8102a3c <main+0xa14>)
 810292e:	f00b fa09 	bl	810dd44 <iprintf>
					printf("%.5f ",desired_filtered_torque);
 8102932:	4b23      	ldr	r3, [pc, #140]	@ (81029c0 <main+0x998>)
 8102934:	681b      	ldr	r3, [r3, #0]
 8102936:	4618      	mov	r0, r3
 8102938:	f7fd fe8e 	bl	8100658 <__aeabi_f2d>
 810293c:	4602      	mov	r2, r0
 810293e:	460b      	mov	r3, r1
 8102940:	483e      	ldr	r0, [pc, #248]	@ (8102a3c <main+0xa14>)
 8102942:	f00b f9ff 	bl	810dd44 <iprintf>
					printf("%.5f ",torque);
 8102946:	4b35      	ldr	r3, [pc, #212]	@ (8102a1c <main+0x9f4>)
 8102948:	681b      	ldr	r3, [r3, #0]
 810294a:	4618      	mov	r0, r3
 810294c:	f7fd fe84 	bl	8100658 <__aeabi_f2d>
 8102950:	4602      	mov	r2, r0
 8102952:	460b      	mov	r3, r1
 8102954:	4839      	ldr	r0, [pc, #228]	@ (8102a3c <main+0xa14>)
 8102956:	f00b f9f5 	bl	810dd44 <iprintf>
					printf("%.5f ",u_front_wheel);
 810295a:	4b32      	ldr	r3, [pc, #200]	@ (8102a24 <main+0x9fc>)
 810295c:	681b      	ldr	r3, [r3, #0]
 810295e:	4618      	mov	r0, r3
 8102960:	f7fd fe7a 	bl	8100658 <__aeabi_f2d>
 8102964:	4602      	mov	r2, r0
 8102966:	460b      	mov	r3, r1
 8102968:	4834      	ldr	r0, [pc, #208]	@ (8102a3c <main+0xa14>)
 810296a:	f00b f9eb 	bl	810dd44 <iprintf>
					printf("%.5f ",desired_speed_metsec);
				    printf("%.5f ",speed_metsec);
					printf("%.5f ",u_back_wheel/18.0*12);

*/
					printf("\r\n");
 810296e:	4834      	ldr	r0, [pc, #208]	@ (8102a40 <main+0xa18>)
 8102970:	f00b fa50 	bl	810de14 <puts>
		if (flag_Tc == 1) {
 8102974:	e455      	b.n	8102222 <main+0x1fa>
 8102976:	bf00      	nop
 8102978:	cccccccd 	.word	0xcccccccd
 810297c:	3feccccc 	.word	0x3feccccc
 8102980:	9999999a 	.word	0x9999999a
 8102984:	3fb99999 	.word	0x3fb99999
 8102988:	d2f1a9fc 	.word	0xd2f1a9fc
 810298c:	3ff8624d 	.word	0x3ff8624d
 8102990:	96bb98c8 	.word	0x96bb98c8
 8102994:	3fba0f90 	.word	0x3fba0f90
 8102998:	100005e0 	.word	0x100005e0
 810299c:	3c23d70a 	.word	0x3c23d70a
 81029a0:	10000610 	.word	0x10000610
 81029a4:	10000618 	.word	0x10000618
 81029a8:	10000698 	.word	0x10000698
 81029ac:	10000620 	.word	0x10000620
 81029b0:	1000061c 	.word	0x1000061c
 81029b4:	10000710 	.word	0x10000710
 81029b8:	1000081c 	.word	0x1000081c
 81029bc:	10000820 	.word	0x10000820
 81029c0:	10000818 	.word	0x10000818
 81029c4:	10000814 	.word	0x10000814
 81029c8:	10000284 	.word	0x10000284
 81029cc:	10000014 	.word	0x10000014
 81029d0:	10000824 	.word	0x10000824
 81029d4:	1000001c 	.word	0x1000001c
 81029d8:	10000018 	.word	0x10000018
 81029dc:	10000828 	.word	0x10000828
 81029e0:	10000850 	.word	0x10000850
 81029e4:	3f4b2fec 	.word	0x3f4b2fec
 81029e8:	401d3dd9 	.word	0x401d3dd9
 81029ec:	10000808 	.word	0x10000808
 81029f0:	100008c8 	.word	0x100008c8
 81029f4:	100008cc 	.word	0x100008cc
 81029f8:	100008bc 	.word	0x100008bc
 81029fc:	10000840 	.word	0x10000840
 8102a00:	100008b0 	.word	0x100008b0
 8102a04:	1000089c 	.word	0x1000089c
 8102a08:	10000854 	.word	0x10000854
 8102a0c:	100008a4 	.word	0x100008a4
 8102a10:	10000894 	.word	0x10000894
 8102a14:	10000844 	.word	0x10000844
 8102a18:	3cbfb15b 	.word	0x3cbfb15b
 8102a1c:	10000848 	.word	0x10000848
 8102a20:	100005ac 	.word	0x100005ac
 8102a24:	10000834 	.word	0x10000834
 8102a28:	10000614 	.word	0x10000614
 8102a2c:	100008b8 	.word	0x100008b8
 8102a30:	1000083c 	.word	0x1000083c
 8102a34:	10000838 	.word	0x10000838
 8102a38:	10000830 	.word	0x10000830
 8102a3c:	081116d4 	.word	0x081116d4
 8102a40:	081116dc 	.word	0x081116dc

08102a44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8102a44:	b580      	push	{r7, lr}
 8102a46:	b08a      	sub	sp, #40	@ 0x28
 8102a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8102a4a:	f107 031c 	add.w	r3, r7, #28
 8102a4e:	2200      	movs	r2, #0
 8102a50:	601a      	str	r2, [r3, #0]
 8102a52:	605a      	str	r2, [r3, #4]
 8102a54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8102a56:	463b      	mov	r3, r7
 8102a58:	2200      	movs	r2, #0
 8102a5a:	601a      	str	r2, [r3, #0]
 8102a5c:	605a      	str	r2, [r3, #4]
 8102a5e:	609a      	str	r2, [r3, #8]
 8102a60:	60da      	str	r2, [r3, #12]
 8102a62:	611a      	str	r2, [r3, #16]
 8102a64:	615a      	str	r2, [r3, #20]
 8102a66:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8102a68:	4b2f      	ldr	r3, [pc, #188]	@ (8102b28 <MX_ADC1_Init+0xe4>)
 8102a6a:	4a30      	ldr	r2, [pc, #192]	@ (8102b2c <MX_ADC1_Init+0xe8>)
 8102a6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8102a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8102b28 <MX_ADC1_Init+0xe4>)
 8102a70:	2200      	movs	r2, #0
 8102a72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8102a74:	4b2c      	ldr	r3, [pc, #176]	@ (8102b28 <MX_ADC1_Init+0xe4>)
 8102a76:	2200      	movs	r2, #0
 8102a78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8102a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8102b28 <MX_ADC1_Init+0xe4>)
 8102a7c:	2200      	movs	r2, #0
 8102a7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8102a80:	4b29      	ldr	r3, [pc, #164]	@ (8102b28 <MX_ADC1_Init+0xe4>)
 8102a82:	2204      	movs	r2, #4
 8102a84:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8102a86:	4b28      	ldr	r3, [pc, #160]	@ (8102b28 <MX_ADC1_Init+0xe4>)
 8102a88:	2200      	movs	r2, #0
 8102a8a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8102a8c:	4b26      	ldr	r3, [pc, #152]	@ (8102b28 <MX_ADC1_Init+0xe4>)
 8102a8e:	2200      	movs	r2, #0
 8102a90:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8102a92:	4b25      	ldr	r3, [pc, #148]	@ (8102b28 <MX_ADC1_Init+0xe4>)
 8102a94:	2201      	movs	r2, #1
 8102a96:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8102a98:	4b23      	ldr	r3, [pc, #140]	@ (8102b28 <MX_ADC1_Init+0xe4>)
 8102a9a:	2200      	movs	r2, #0
 8102a9c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8102a9e:	4b22      	ldr	r3, [pc, #136]	@ (8102b28 <MX_ADC1_Init+0xe4>)
 8102aa0:	2200      	movs	r2, #0
 8102aa2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8102aa4:	4b20      	ldr	r3, [pc, #128]	@ (8102b28 <MX_ADC1_Init+0xe4>)
 8102aa6:	2200      	movs	r2, #0
 8102aa8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8102aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8102b28 <MX_ADC1_Init+0xe4>)
 8102aac:	2200      	movs	r2, #0
 8102aae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8102ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8102b28 <MX_ADC1_Init+0xe4>)
 8102ab2:	2200      	movs	r2, #0
 8102ab4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8102ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8102b28 <MX_ADC1_Init+0xe4>)
 8102ab8:	2200      	movs	r2, #0
 8102aba:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8102abc:	4b1a      	ldr	r3, [pc, #104]	@ (8102b28 <MX_ADC1_Init+0xe4>)
 8102abe:	2200      	movs	r2, #0
 8102ac0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8102ac4:	4818      	ldr	r0, [pc, #96]	@ (8102b28 <MX_ADC1_Init+0xe4>)
 8102ac6:	f001 fb1b 	bl	8104100 <HAL_ADC_Init>
 8102aca:	4603      	mov	r3, r0
 8102acc:	2b00      	cmp	r3, #0
 8102ace:	d001      	beq.n	8102ad4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8102ad0:	f000 fc28 	bl	8103324 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8102ad4:	2300      	movs	r3, #0
 8102ad6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8102ad8:	f107 031c 	add.w	r3, r7, #28
 8102adc:	4619      	mov	r1, r3
 8102ade:	4812      	ldr	r0, [pc, #72]	@ (8102b28 <MX_ADC1_Init+0xe4>)
 8102ae0:	f002 fce4 	bl	81054ac <HAL_ADCEx_MultiModeConfigChannel>
 8102ae4:	4603      	mov	r3, r0
 8102ae6:	2b00      	cmp	r3, #0
 8102ae8:	d001      	beq.n	8102aee <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8102aea:	f000 fc1b 	bl	8103324 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8102aee:	4b10      	ldr	r3, [pc, #64]	@ (8102b30 <MX_ADC1_Init+0xec>)
 8102af0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8102af2:	2306      	movs	r3, #6
 8102af4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8102af6:	2300      	movs	r3, #0
 8102af8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8102afa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8102afe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8102b00:	2304      	movs	r3, #4
 8102b02:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8102b04:	2300      	movs	r3, #0
 8102b06:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8102b08:	2300      	movs	r3, #0
 8102b0a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8102b0c:	463b      	mov	r3, r7
 8102b0e:	4619      	mov	r1, r3
 8102b10:	4805      	ldr	r0, [pc, #20]	@ (8102b28 <MX_ADC1_Init+0xe4>)
 8102b12:	f001 fe97 	bl	8104844 <HAL_ADC_ConfigChannel>
 8102b16:	4603      	mov	r3, r0
 8102b18:	2b00      	cmp	r3, #0
 8102b1a:	d001      	beq.n	8102b20 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8102b1c:	f000 fc02 	bl	8103324 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8102b20:	bf00      	nop
 8102b22:	3728      	adds	r7, #40	@ 0x28
 8102b24:	46bd      	mov	sp, r7
 8102b26:	bd80      	pop	{r7, pc}
 8102b28:	10000284 	.word	0x10000284
 8102b2c:	40022000 	.word	0x40022000
 8102b30:	08600004 	.word	0x08600004

08102b34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8102b34:	b580      	push	{r7, lr}
 8102b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8102b38:	4b1b      	ldr	r3, [pc, #108]	@ (8102ba8 <MX_I2C1_Init+0x74>)
 8102b3a:	4a1c      	ldr	r2, [pc, #112]	@ (8102bac <MX_I2C1_Init+0x78>)
 8102b3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8102b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8102ba8 <MX_I2C1_Init+0x74>)
 8102b40:	4a1b      	ldr	r2, [pc, #108]	@ (8102bb0 <MX_I2C1_Init+0x7c>)
 8102b42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8102b44:	4b18      	ldr	r3, [pc, #96]	@ (8102ba8 <MX_I2C1_Init+0x74>)
 8102b46:	2200      	movs	r2, #0
 8102b48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8102b4a:	4b17      	ldr	r3, [pc, #92]	@ (8102ba8 <MX_I2C1_Init+0x74>)
 8102b4c:	2201      	movs	r2, #1
 8102b4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8102b50:	4b15      	ldr	r3, [pc, #84]	@ (8102ba8 <MX_I2C1_Init+0x74>)
 8102b52:	2200      	movs	r2, #0
 8102b54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8102b56:	4b14      	ldr	r3, [pc, #80]	@ (8102ba8 <MX_I2C1_Init+0x74>)
 8102b58:	2200      	movs	r2, #0
 8102b5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8102b5c:	4b12      	ldr	r3, [pc, #72]	@ (8102ba8 <MX_I2C1_Init+0x74>)
 8102b5e:	2200      	movs	r2, #0
 8102b60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8102b62:	4b11      	ldr	r3, [pc, #68]	@ (8102ba8 <MX_I2C1_Init+0x74>)
 8102b64:	2200      	movs	r2, #0
 8102b66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8102b68:	4b0f      	ldr	r3, [pc, #60]	@ (8102ba8 <MX_I2C1_Init+0x74>)
 8102b6a:	2200      	movs	r2, #0
 8102b6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8102b6e:	480e      	ldr	r0, [pc, #56]	@ (8102ba8 <MX_I2C1_Init+0x74>)
 8102b70:	f003 f898 	bl	8105ca4 <HAL_I2C_Init>
 8102b74:	4603      	mov	r3, r0
 8102b76:	2b00      	cmp	r3, #0
 8102b78:	d001      	beq.n	8102b7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8102b7a:	f000 fbd3 	bl	8103324 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8102b7e:	2100      	movs	r1, #0
 8102b80:	4809      	ldr	r0, [pc, #36]	@ (8102ba8 <MX_I2C1_Init+0x74>)
 8102b82:	f003 fdf9 	bl	8106778 <HAL_I2CEx_ConfigAnalogFilter>
 8102b86:	4603      	mov	r3, r0
 8102b88:	2b00      	cmp	r3, #0
 8102b8a:	d001      	beq.n	8102b90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8102b8c:	f000 fbca 	bl	8103324 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8102b90:	2100      	movs	r1, #0
 8102b92:	4805      	ldr	r0, [pc, #20]	@ (8102ba8 <MX_I2C1_Init+0x74>)
 8102b94:	f003 fe3b 	bl	810680e <HAL_I2CEx_ConfigDigitalFilter>
 8102b98:	4603      	mov	r3, r0
 8102b9a:	2b00      	cmp	r3, #0
 8102b9c:	d001      	beq.n	8102ba2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8102b9e:	f000 fbc1 	bl	8103324 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8102ba2:	bf00      	nop
 8102ba4:	bd80      	pop	{r7, pc}
 8102ba6:	bf00      	nop
 8102ba8:	100002e8 	.word	0x100002e8
 8102bac:	40005400 	.word	0x40005400
 8102bb0:	10c0ecff 	.word	0x10c0ecff

08102bb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8102bb4:	b580      	push	{r7, lr}
 8102bb6:	b09a      	sub	sp, #104	@ 0x68
 8102bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8102bba:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8102bbe:	2200      	movs	r2, #0
 8102bc0:	601a      	str	r2, [r3, #0]
 8102bc2:	605a      	str	r2, [r3, #4]
 8102bc4:	609a      	str	r2, [r3, #8]
 8102bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102bc8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8102bcc:	2200      	movs	r2, #0
 8102bce:	601a      	str	r2, [r3, #0]
 8102bd0:	605a      	str	r2, [r3, #4]
 8102bd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8102bd4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8102bd8:	2200      	movs	r2, #0
 8102bda:	601a      	str	r2, [r3, #0]
 8102bdc:	605a      	str	r2, [r3, #4]
 8102bde:	609a      	str	r2, [r3, #8]
 8102be0:	60da      	str	r2, [r3, #12]
 8102be2:	611a      	str	r2, [r3, #16]
 8102be4:	615a      	str	r2, [r3, #20]
 8102be6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8102be8:	1d3b      	adds	r3, r7, #4
 8102bea:	222c      	movs	r2, #44	@ 0x2c
 8102bec:	2100      	movs	r1, #0
 8102bee:	4618      	mov	r0, r3
 8102bf0:	f00b fa10 	bl	810e014 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8102bf4:	4b43      	ldr	r3, [pc, #268]	@ (8102d04 <MX_TIM1_Init+0x150>)
 8102bf6:	4a44      	ldr	r2, [pc, #272]	@ (8102d08 <MX_TIM1_Init+0x154>)
 8102bf8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8102bfa:	4b42      	ldr	r3, [pc, #264]	@ (8102d04 <MX_TIM1_Init+0x150>)
 8102bfc:	22c7      	movs	r2, #199	@ 0xc7
 8102bfe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102c00:	4b40      	ldr	r3, [pc, #256]	@ (8102d04 <MX_TIM1_Init+0x150>)
 8102c02:	2200      	movs	r2, #0
 8102c04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50-1;
 8102c06:	4b3f      	ldr	r3, [pc, #252]	@ (8102d04 <MX_TIM1_Init+0x150>)
 8102c08:	2231      	movs	r2, #49	@ 0x31
 8102c0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102c0c:	4b3d      	ldr	r3, [pc, #244]	@ (8102d04 <MX_TIM1_Init+0x150>)
 8102c0e:	2200      	movs	r2, #0
 8102c10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8102c12:	4b3c      	ldr	r3, [pc, #240]	@ (8102d04 <MX_TIM1_Init+0x150>)
 8102c14:	2200      	movs	r2, #0
 8102c16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102c18:	4b3a      	ldr	r3, [pc, #232]	@ (8102d04 <MX_TIM1_Init+0x150>)
 8102c1a:	2200      	movs	r2, #0
 8102c1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8102c1e:	4839      	ldr	r0, [pc, #228]	@ (8102d04 <MX_TIM1_Init+0x150>)
 8102c20:	f006 fda0 	bl	8109764 <HAL_TIM_Base_Init>
 8102c24:	4603      	mov	r3, r0
 8102c26:	2b00      	cmp	r3, #0
 8102c28:	d001      	beq.n	8102c2e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8102c2a:	f000 fb7b 	bl	8103324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102c2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8102c32:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8102c34:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8102c38:	4619      	mov	r1, r3
 8102c3a:	4832      	ldr	r0, [pc, #200]	@ (8102d04 <MX_TIM1_Init+0x150>)
 8102c3c:	f007 fb04 	bl	810a248 <HAL_TIM_ConfigClockSource>
 8102c40:	4603      	mov	r3, r0
 8102c42:	2b00      	cmp	r3, #0
 8102c44:	d001      	beq.n	8102c4a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8102c46:	f000 fb6d 	bl	8103324 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8102c4a:	482e      	ldr	r0, [pc, #184]	@ (8102d04 <MX_TIM1_Init+0x150>)
 8102c4c:	f006 feca 	bl	81099e4 <HAL_TIM_PWM_Init>
 8102c50:	4603      	mov	r3, r0
 8102c52:	2b00      	cmp	r3, #0
 8102c54:	d001      	beq.n	8102c5a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8102c56:	f000 fb65 	bl	8103324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102c5a:	2300      	movs	r3, #0
 8102c5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8102c5e:	2300      	movs	r3, #0
 8102c60:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102c62:	2300      	movs	r3, #0
 8102c64:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8102c66:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8102c6a:	4619      	mov	r1, r3
 8102c6c:	4825      	ldr	r0, [pc, #148]	@ (8102d04 <MX_TIM1_Init+0x150>)
 8102c6e:	f008 f849 	bl	810ad04 <HAL_TIMEx_MasterConfigSynchronization>
 8102c72:	4603      	mov	r3, r0
 8102c74:	2b00      	cmp	r3, #0
 8102c76:	d001      	beq.n	8102c7c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8102c78:	f000 fb54 	bl	8103324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8102c7c:	2360      	movs	r3, #96	@ 0x60
 8102c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8102c80:	2300      	movs	r3, #0
 8102c82:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102c84:	2300      	movs	r3, #0
 8102c86:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8102c88:	2300      	movs	r3, #0
 8102c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8102c8c:	2300      	movs	r3, #0
 8102c8e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8102c90:	2300      	movs	r3, #0
 8102c92:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8102c94:	2300      	movs	r3, #0
 8102c96:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8102c98:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8102c9c:	2200      	movs	r2, #0
 8102c9e:	4619      	mov	r1, r3
 8102ca0:	4818      	ldr	r0, [pc, #96]	@ (8102d04 <MX_TIM1_Init+0x150>)
 8102ca2:	f007 f9bd 	bl	810a020 <HAL_TIM_PWM_ConfigChannel>
 8102ca6:	4603      	mov	r3, r0
 8102ca8:	2b00      	cmp	r3, #0
 8102caa:	d001      	beq.n	8102cb0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8102cac:	f000 fb3a 	bl	8103324 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8102cb0:	2300      	movs	r3, #0
 8102cb2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8102cb4:	2300      	movs	r3, #0
 8102cb6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8102cb8:	2300      	movs	r3, #0
 8102cba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8102cbc:	2300      	movs	r3, #0
 8102cbe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8102cc0:	2300      	movs	r3, #0
 8102cc2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8102cc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8102cc8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8102cca:	2300      	movs	r3, #0
 8102ccc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8102cce:	2300      	movs	r3, #0
 8102cd0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8102cd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8102cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8102cd8:	2300      	movs	r3, #0
 8102cda:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8102cdc:	2300      	movs	r3, #0
 8102cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8102ce0:	1d3b      	adds	r3, r7, #4
 8102ce2:	4619      	mov	r1, r3
 8102ce4:	4807      	ldr	r0, [pc, #28]	@ (8102d04 <MX_TIM1_Init+0x150>)
 8102ce6:	f008 f89b 	bl	810ae20 <HAL_TIMEx_ConfigBreakDeadTime>
 8102cea:	4603      	mov	r3, r0
 8102cec:	2b00      	cmp	r3, #0
 8102cee:	d001      	beq.n	8102cf4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8102cf0:	f000 fb18 	bl	8103324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8102cf4:	4803      	ldr	r0, [pc, #12]	@ (8102d04 <MX_TIM1_Init+0x150>)
 8102cf6:	f000 fce7 	bl	81036c8 <HAL_TIM_MspPostInit>

}
 8102cfa:	bf00      	nop
 8102cfc:	3768      	adds	r7, #104	@ 0x68
 8102cfe:	46bd      	mov	sp, r7
 8102d00:	bd80      	pop	{r7, pc}
 8102d02:	bf00      	nop
 8102d04:	1000033c 	.word	0x1000033c
 8102d08:	40010000 	.word	0x40010000

08102d0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8102d0c:	b580      	push	{r7, lr}
 8102d0e:	b088      	sub	sp, #32
 8102d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8102d12:	f107 0310 	add.w	r3, r7, #16
 8102d16:	2200      	movs	r2, #0
 8102d18:	601a      	str	r2, [r3, #0]
 8102d1a:	605a      	str	r2, [r3, #4]
 8102d1c:	609a      	str	r2, [r3, #8]
 8102d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102d20:	1d3b      	adds	r3, r7, #4
 8102d22:	2200      	movs	r2, #0
 8102d24:	601a      	str	r2, [r3, #0]
 8102d26:	605a      	str	r2, [r3, #4]
 8102d28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8102d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8102da4 <MX_TIM2_Init+0x98>)
 8102d2c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8102d30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8102d32:	4b1c      	ldr	r3, [pc, #112]	@ (8102da4 <MX_TIM2_Init+0x98>)
 8102d34:	22c7      	movs	r2, #199	@ 0xc7
 8102d36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102d38:	4b1a      	ldr	r3, [pc, #104]	@ (8102da4 <MX_TIM2_Init+0x98>)
 8102d3a:	2200      	movs	r2, #0
 8102d3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8102d3e:	4b19      	ldr	r3, [pc, #100]	@ (8102da4 <MX_TIM2_Init+0x98>)
 8102d40:	f242 720f 	movw	r2, #9999	@ 0x270f
 8102d44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102d46:	4b17      	ldr	r3, [pc, #92]	@ (8102da4 <MX_TIM2_Init+0x98>)
 8102d48:	2200      	movs	r2, #0
 8102d4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102d4c:	4b15      	ldr	r3, [pc, #84]	@ (8102da4 <MX_TIM2_Init+0x98>)
 8102d4e:	2200      	movs	r2, #0
 8102d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8102d52:	4814      	ldr	r0, [pc, #80]	@ (8102da4 <MX_TIM2_Init+0x98>)
 8102d54:	f006 fd06 	bl	8109764 <HAL_TIM_Base_Init>
 8102d58:	4603      	mov	r3, r0
 8102d5a:	2b00      	cmp	r3, #0
 8102d5c:	d001      	beq.n	8102d62 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8102d5e:	f000 fae1 	bl	8103324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102d62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8102d66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8102d68:	f107 0310 	add.w	r3, r7, #16
 8102d6c:	4619      	mov	r1, r3
 8102d6e:	480d      	ldr	r0, [pc, #52]	@ (8102da4 <MX_TIM2_Init+0x98>)
 8102d70:	f007 fa6a 	bl	810a248 <HAL_TIM_ConfigClockSource>
 8102d74:	4603      	mov	r3, r0
 8102d76:	2b00      	cmp	r3, #0
 8102d78:	d001      	beq.n	8102d7e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8102d7a:	f000 fad3 	bl	8103324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102d7e:	2300      	movs	r3, #0
 8102d80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102d82:	2300      	movs	r3, #0
 8102d84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8102d86:	1d3b      	adds	r3, r7, #4
 8102d88:	4619      	mov	r1, r3
 8102d8a:	4806      	ldr	r0, [pc, #24]	@ (8102da4 <MX_TIM2_Init+0x98>)
 8102d8c:	f007 ffba 	bl	810ad04 <HAL_TIMEx_MasterConfigSynchronization>
 8102d90:	4603      	mov	r3, r0
 8102d92:	2b00      	cmp	r3, #0
 8102d94:	d001      	beq.n	8102d9a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8102d96:	f000 fac5 	bl	8103324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8102d9a:	bf00      	nop
 8102d9c:	3720      	adds	r7, #32
 8102d9e:	46bd      	mov	sp, r7
 8102da0:	bd80      	pop	{r7, pc}
 8102da2:	bf00      	nop
 8102da4:	10000388 	.word	0x10000388

08102da8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8102da8:	b580      	push	{r7, lr}
 8102daa:	b08e      	sub	sp, #56	@ 0x38
 8102dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8102dae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8102db2:	2200      	movs	r2, #0
 8102db4:	601a      	str	r2, [r3, #0]
 8102db6:	605a      	str	r2, [r3, #4]
 8102db8:	609a      	str	r2, [r3, #8]
 8102dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102dbc:	f107 031c 	add.w	r3, r7, #28
 8102dc0:	2200      	movs	r2, #0
 8102dc2:	601a      	str	r2, [r3, #0]
 8102dc4:	605a      	str	r2, [r3, #4]
 8102dc6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8102dc8:	463b      	mov	r3, r7
 8102dca:	2200      	movs	r2, #0
 8102dcc:	601a      	str	r2, [r3, #0]
 8102dce:	605a      	str	r2, [r3, #4]
 8102dd0:	609a      	str	r2, [r3, #8]
 8102dd2:	60da      	str	r2, [r3, #12]
 8102dd4:	611a      	str	r2, [r3, #16]
 8102dd6:	615a      	str	r2, [r3, #20]
 8102dd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8102dda:	4b2c      	ldr	r3, [pc, #176]	@ (8102e8c <MX_TIM3_Init+0xe4>)
 8102ddc:	4a2c      	ldr	r2, [pc, #176]	@ (8102e90 <MX_TIM3_Init+0xe8>)
 8102dde:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8102de0:	4b2a      	ldr	r3, [pc, #168]	@ (8102e8c <MX_TIM3_Init+0xe4>)
 8102de2:	22c7      	movs	r2, #199	@ 0xc7
 8102de4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102de6:	4b29      	ldr	r3, [pc, #164]	@ (8102e8c <MX_TIM3_Init+0xe4>)
 8102de8:	2200      	movs	r2, #0
 8102dea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50-1;
 8102dec:	4b27      	ldr	r3, [pc, #156]	@ (8102e8c <MX_TIM3_Init+0xe4>)
 8102dee:	2231      	movs	r2, #49	@ 0x31
 8102df0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102df2:	4b26      	ldr	r3, [pc, #152]	@ (8102e8c <MX_TIM3_Init+0xe4>)
 8102df4:	2200      	movs	r2, #0
 8102df6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102df8:	4b24      	ldr	r3, [pc, #144]	@ (8102e8c <MX_TIM3_Init+0xe4>)
 8102dfa:	2200      	movs	r2, #0
 8102dfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8102dfe:	4823      	ldr	r0, [pc, #140]	@ (8102e8c <MX_TIM3_Init+0xe4>)
 8102e00:	f006 fcb0 	bl	8109764 <HAL_TIM_Base_Init>
 8102e04:	4603      	mov	r3, r0
 8102e06:	2b00      	cmp	r3, #0
 8102e08:	d001      	beq.n	8102e0e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8102e0a:	f000 fa8b 	bl	8103324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102e0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8102e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8102e14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8102e18:	4619      	mov	r1, r3
 8102e1a:	481c      	ldr	r0, [pc, #112]	@ (8102e8c <MX_TIM3_Init+0xe4>)
 8102e1c:	f007 fa14 	bl	810a248 <HAL_TIM_ConfigClockSource>
 8102e20:	4603      	mov	r3, r0
 8102e22:	2b00      	cmp	r3, #0
 8102e24:	d001      	beq.n	8102e2a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8102e26:	f000 fa7d 	bl	8103324 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8102e2a:	4818      	ldr	r0, [pc, #96]	@ (8102e8c <MX_TIM3_Init+0xe4>)
 8102e2c:	f006 fdda 	bl	81099e4 <HAL_TIM_PWM_Init>
 8102e30:	4603      	mov	r3, r0
 8102e32:	2b00      	cmp	r3, #0
 8102e34:	d001      	beq.n	8102e3a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8102e36:	f000 fa75 	bl	8103324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102e3a:	2300      	movs	r3, #0
 8102e3c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102e3e:	2300      	movs	r3, #0
 8102e40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8102e42:	f107 031c 	add.w	r3, r7, #28
 8102e46:	4619      	mov	r1, r3
 8102e48:	4810      	ldr	r0, [pc, #64]	@ (8102e8c <MX_TIM3_Init+0xe4>)
 8102e4a:	f007 ff5b 	bl	810ad04 <HAL_TIMEx_MasterConfigSynchronization>
 8102e4e:	4603      	mov	r3, r0
 8102e50:	2b00      	cmp	r3, #0
 8102e52:	d001      	beq.n	8102e58 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8102e54:	f000 fa66 	bl	8103324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8102e58:	2360      	movs	r3, #96	@ 0x60
 8102e5a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8102e5c:	2300      	movs	r3, #0
 8102e5e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102e60:	2300      	movs	r3, #0
 8102e62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8102e64:	2300      	movs	r3, #0
 8102e66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8102e68:	463b      	mov	r3, r7
 8102e6a:	2200      	movs	r2, #0
 8102e6c:	4619      	mov	r1, r3
 8102e6e:	4807      	ldr	r0, [pc, #28]	@ (8102e8c <MX_TIM3_Init+0xe4>)
 8102e70:	f007 f8d6 	bl	810a020 <HAL_TIM_PWM_ConfigChannel>
 8102e74:	4603      	mov	r3, r0
 8102e76:	2b00      	cmp	r3, #0
 8102e78:	d001      	beq.n	8102e7e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8102e7a:	f000 fa53 	bl	8103324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8102e7e:	4803      	ldr	r0, [pc, #12]	@ (8102e8c <MX_TIM3_Init+0xe4>)
 8102e80:	f000 fc22 	bl	81036c8 <HAL_TIM_MspPostInit>

}
 8102e84:	bf00      	nop
 8102e86:	3738      	adds	r7, #56	@ 0x38
 8102e88:	46bd      	mov	sp, r7
 8102e8a:	bd80      	pop	{r7, pc}
 8102e8c:	100003d4 	.word	0x100003d4
 8102e90:	40000400 	.word	0x40000400

08102e94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8102e94:	b580      	push	{r7, lr}
 8102e96:	b08c      	sub	sp, #48	@ 0x30
 8102e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8102e9a:	f107 030c 	add.w	r3, r7, #12
 8102e9e:	2224      	movs	r2, #36	@ 0x24
 8102ea0:	2100      	movs	r1, #0
 8102ea2:	4618      	mov	r0, r3
 8102ea4:	f00b f8b6 	bl	810e014 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102ea8:	463b      	mov	r3, r7
 8102eaa:	2200      	movs	r2, #0
 8102eac:	601a      	str	r2, [r3, #0]
 8102eae:	605a      	str	r2, [r3, #4]
 8102eb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8102eb2:	4b21      	ldr	r3, [pc, #132]	@ (8102f38 <MX_TIM4_Init+0xa4>)
 8102eb4:	4a21      	ldr	r2, [pc, #132]	@ (8102f3c <MX_TIM4_Init+0xa8>)
 8102eb6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8102eb8:	4b1f      	ldr	r3, [pc, #124]	@ (8102f38 <MX_TIM4_Init+0xa4>)
 8102eba:	2200      	movs	r2, #0
 8102ebc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8102f38 <MX_TIM4_Init+0xa4>)
 8102ec0:	2200      	movs	r2, #0
 8102ec2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3423-1;
 8102ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8102f38 <MX_TIM4_Init+0xa4>)
 8102ec6:	f640 525e 	movw	r2, #3422	@ 0xd5e
 8102eca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8102f38 <MX_TIM4_Init+0xa4>)
 8102ece:	2200      	movs	r2, #0
 8102ed0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102ed2:	4b19      	ldr	r3, [pc, #100]	@ (8102f38 <MX_TIM4_Init+0xa4>)
 8102ed4:	2200      	movs	r2, #0
 8102ed6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8102ed8:	2301      	movs	r3, #1
 8102eda:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8102edc:	2300      	movs	r3, #0
 8102ede:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8102ee0:	2301      	movs	r3, #1
 8102ee2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8102ee4:	2300      	movs	r3, #0
 8102ee6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8102ee8:	2300      	movs	r3, #0
 8102eea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8102eec:	2300      	movs	r3, #0
 8102eee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8102ef0:	2301      	movs	r3, #1
 8102ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8102ef4:	2300      	movs	r3, #0
 8102ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8102ef8:	2300      	movs	r3, #0
 8102efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8102efc:	f107 030c 	add.w	r3, r7, #12
 8102f00:	4619      	mov	r1, r3
 8102f02:	480d      	ldr	r0, [pc, #52]	@ (8102f38 <MX_TIM4_Init+0xa4>)
 8102f04:	f006 fede 	bl	8109cc4 <HAL_TIM_Encoder_Init>
 8102f08:	4603      	mov	r3, r0
 8102f0a:	2b00      	cmp	r3, #0
 8102f0c:	d001      	beq.n	8102f12 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8102f0e:	f000 fa09 	bl	8103324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102f12:	2300      	movs	r3, #0
 8102f14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102f16:	2300      	movs	r3, #0
 8102f18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8102f1a:	463b      	mov	r3, r7
 8102f1c:	4619      	mov	r1, r3
 8102f1e:	4806      	ldr	r0, [pc, #24]	@ (8102f38 <MX_TIM4_Init+0xa4>)
 8102f20:	f007 fef0 	bl	810ad04 <HAL_TIMEx_MasterConfigSynchronization>
 8102f24:	4603      	mov	r3, r0
 8102f26:	2b00      	cmp	r3, #0
 8102f28:	d001      	beq.n	8102f2e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8102f2a:	f000 f9fb 	bl	8103324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8102f2e:	bf00      	nop
 8102f30:	3730      	adds	r7, #48	@ 0x30
 8102f32:	46bd      	mov	sp, r7
 8102f34:	bd80      	pop	{r7, pc}
 8102f36:	bf00      	nop
 8102f38:	10000420 	.word	0x10000420
 8102f3c:	40000800 	.word	0x40000800

08102f40 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8102f40:	b580      	push	{r7, lr}
 8102f42:	b08c      	sub	sp, #48	@ 0x30
 8102f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8102f46:	f107 030c 	add.w	r3, r7, #12
 8102f4a:	2224      	movs	r2, #36	@ 0x24
 8102f4c:	2100      	movs	r1, #0
 8102f4e:	4618      	mov	r0, r3
 8102f50:	f00b f860 	bl	810e014 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102f54:	463b      	mov	r3, r7
 8102f56:	2200      	movs	r2, #0
 8102f58:	601a      	str	r2, [r3, #0]
 8102f5a:	605a      	str	r2, [r3, #4]
 8102f5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8102f5e:	4b23      	ldr	r3, [pc, #140]	@ (8102fec <MX_TIM8_Init+0xac>)
 8102f60:	4a23      	ldr	r2, [pc, #140]	@ (8102ff0 <MX_TIM8_Init+0xb0>)
 8102f62:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8102f64:	4b21      	ldr	r3, [pc, #132]	@ (8102fec <MX_TIM8_Init+0xac>)
 8102f66:	2200      	movs	r2, #0
 8102f68:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102f6a:	4b20      	ldr	r3, [pc, #128]	@ (8102fec <MX_TIM8_Init+0xac>)
 8102f6c:	2200      	movs	r2, #0
 8102f6e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3423-1;
 8102f70:	4b1e      	ldr	r3, [pc, #120]	@ (8102fec <MX_TIM8_Init+0xac>)
 8102f72:	f640 525e 	movw	r2, #3422	@ 0xd5e
 8102f76:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102f78:	4b1c      	ldr	r3, [pc, #112]	@ (8102fec <MX_TIM8_Init+0xac>)
 8102f7a:	2200      	movs	r2, #0
 8102f7c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8102f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8102fec <MX_TIM8_Init+0xac>)
 8102f80:	2200      	movs	r2, #0
 8102f82:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102f84:	4b19      	ldr	r3, [pc, #100]	@ (8102fec <MX_TIM8_Init+0xac>)
 8102f86:	2200      	movs	r2, #0
 8102f88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8102f8a:	2301      	movs	r3, #1
 8102f8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8102f8e:	2300      	movs	r3, #0
 8102f90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8102f92:	2301      	movs	r3, #1
 8102f94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8102f96:	2300      	movs	r3, #0
 8102f98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8102f9a:	2300      	movs	r3, #0
 8102f9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8102f9e:	2300      	movs	r3, #0
 8102fa0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8102fa2:	2301      	movs	r3, #1
 8102fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8102fa6:	2300      	movs	r3, #0
 8102fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8102faa:	2300      	movs	r3, #0
 8102fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8102fae:	f107 030c 	add.w	r3, r7, #12
 8102fb2:	4619      	mov	r1, r3
 8102fb4:	480d      	ldr	r0, [pc, #52]	@ (8102fec <MX_TIM8_Init+0xac>)
 8102fb6:	f006 fe85 	bl	8109cc4 <HAL_TIM_Encoder_Init>
 8102fba:	4603      	mov	r3, r0
 8102fbc:	2b00      	cmp	r3, #0
 8102fbe:	d001      	beq.n	8102fc4 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8102fc0:	f000 f9b0 	bl	8103324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102fc4:	2300      	movs	r3, #0
 8102fc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8102fc8:	2300      	movs	r3, #0
 8102fca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102fcc:	2300      	movs	r3, #0
 8102fce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8102fd0:	463b      	mov	r3, r7
 8102fd2:	4619      	mov	r1, r3
 8102fd4:	4805      	ldr	r0, [pc, #20]	@ (8102fec <MX_TIM8_Init+0xac>)
 8102fd6:	f007 fe95 	bl	810ad04 <HAL_TIMEx_MasterConfigSynchronization>
 8102fda:	4603      	mov	r3, r0
 8102fdc:	2b00      	cmp	r3, #0
 8102fde:	d001      	beq.n	8102fe4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8102fe0:	f000 f9a0 	bl	8103324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8102fe4:	bf00      	nop
 8102fe6:	3730      	adds	r7, #48	@ 0x30
 8102fe8:	46bd      	mov	sp, r7
 8102fea:	bd80      	pop	{r7, pc}
 8102fec:	1000046c 	.word	0x1000046c
 8102ff0:	40010400 	.word	0x40010400

08102ff4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8102ff4:	b580      	push	{r7, lr}
 8102ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8102ff8:	4b22      	ldr	r3, [pc, #136]	@ (8103084 <MX_USART3_UART_Init+0x90>)
 8102ffa:	4a23      	ldr	r2, [pc, #140]	@ (8103088 <MX_USART3_UART_Init+0x94>)
 8102ffc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8102ffe:	4b21      	ldr	r3, [pc, #132]	@ (8103084 <MX_USART3_UART_Init+0x90>)
 8103000:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8103004:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8103006:	4b1f      	ldr	r3, [pc, #124]	@ (8103084 <MX_USART3_UART_Init+0x90>)
 8103008:	2200      	movs	r2, #0
 810300a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 810300c:	4b1d      	ldr	r3, [pc, #116]	@ (8103084 <MX_USART3_UART_Init+0x90>)
 810300e:	2200      	movs	r2, #0
 8103010:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8103012:	4b1c      	ldr	r3, [pc, #112]	@ (8103084 <MX_USART3_UART_Init+0x90>)
 8103014:	2200      	movs	r2, #0
 8103016:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8103018:	4b1a      	ldr	r3, [pc, #104]	@ (8103084 <MX_USART3_UART_Init+0x90>)
 810301a:	220c      	movs	r2, #12
 810301c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810301e:	4b19      	ldr	r3, [pc, #100]	@ (8103084 <MX_USART3_UART_Init+0x90>)
 8103020:	2200      	movs	r2, #0
 8103022:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8103024:	4b17      	ldr	r3, [pc, #92]	@ (8103084 <MX_USART3_UART_Init+0x90>)
 8103026:	2200      	movs	r2, #0
 8103028:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810302a:	4b16      	ldr	r3, [pc, #88]	@ (8103084 <MX_USART3_UART_Init+0x90>)
 810302c:	2200      	movs	r2, #0
 810302e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8103030:	4b14      	ldr	r3, [pc, #80]	@ (8103084 <MX_USART3_UART_Init+0x90>)
 8103032:	2200      	movs	r2, #0
 8103034:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8103036:	4b13      	ldr	r3, [pc, #76]	@ (8103084 <MX_USART3_UART_Init+0x90>)
 8103038:	2200      	movs	r2, #0
 810303a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 810303c:	4811      	ldr	r0, [pc, #68]	@ (8103084 <MX_USART3_UART_Init+0x90>)
 810303e:	f007 ff8b 	bl	810af58 <HAL_UART_Init>
 8103042:	4603      	mov	r3, r0
 8103044:	2b00      	cmp	r3, #0
 8103046:	d001      	beq.n	810304c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8103048:	f000 f96c 	bl	8103324 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810304c:	2100      	movs	r1, #0
 810304e:	480d      	ldr	r0, [pc, #52]	@ (8103084 <MX_USART3_UART_Init+0x90>)
 8103050:	f009 f8e8 	bl	810c224 <HAL_UARTEx_SetTxFifoThreshold>
 8103054:	4603      	mov	r3, r0
 8103056:	2b00      	cmp	r3, #0
 8103058:	d001      	beq.n	810305e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 810305a:	f000 f963 	bl	8103324 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810305e:	2100      	movs	r1, #0
 8103060:	4808      	ldr	r0, [pc, #32]	@ (8103084 <MX_USART3_UART_Init+0x90>)
 8103062:	f009 f91d 	bl	810c2a0 <HAL_UARTEx_SetRxFifoThreshold>
 8103066:	4603      	mov	r3, r0
 8103068:	2b00      	cmp	r3, #0
 810306a:	d001      	beq.n	8103070 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 810306c:	f000 f95a 	bl	8103324 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8103070:	4804      	ldr	r0, [pc, #16]	@ (8103084 <MX_USART3_UART_Init+0x90>)
 8103072:	f009 f89e 	bl	810c1b2 <HAL_UARTEx_DisableFifoMode>
 8103076:	4603      	mov	r3, r0
 8103078:	2b00      	cmp	r3, #0
 810307a:	d001      	beq.n	8103080 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 810307c:	f000 f952 	bl	8103324 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8103080:	bf00      	nop
 8103082:	bd80      	pop	{r7, pc}
 8103084:	100004b8 	.word	0x100004b8
 8103088:	40004800 	.word	0x40004800

0810308c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 810308c:	b580      	push	{r7, lr}
 810308e:	b08c      	sub	sp, #48	@ 0x30
 8103090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103092:	f107 031c 	add.w	r3, r7, #28
 8103096:	2200      	movs	r2, #0
 8103098:	601a      	str	r2, [r3, #0]
 810309a:	605a      	str	r2, [r3, #4]
 810309c:	609a      	str	r2, [r3, #8]
 810309e:	60da      	str	r2, [r3, #12]
 81030a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81030a2:	4b58      	ldr	r3, [pc, #352]	@ (8103204 <MX_GPIO_Init+0x178>)
 81030a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81030a8:	4a56      	ldr	r2, [pc, #344]	@ (8103204 <MX_GPIO_Init+0x178>)
 81030aa:	f043 0304 	orr.w	r3, r3, #4
 81030ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81030b2:	4b54      	ldr	r3, [pc, #336]	@ (8103204 <MX_GPIO_Init+0x178>)
 81030b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81030b8:	f003 0304 	and.w	r3, r3, #4
 81030bc:	61bb      	str	r3, [r7, #24]
 81030be:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81030c0:	4b50      	ldr	r3, [pc, #320]	@ (8103204 <MX_GPIO_Init+0x178>)
 81030c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81030c6:	4a4f      	ldr	r2, [pc, #316]	@ (8103204 <MX_GPIO_Init+0x178>)
 81030c8:	f043 0301 	orr.w	r3, r3, #1
 81030cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81030d0:	4b4c      	ldr	r3, [pc, #304]	@ (8103204 <MX_GPIO_Init+0x178>)
 81030d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81030d6:	f003 0301 	and.w	r3, r3, #1
 81030da:	617b      	str	r3, [r7, #20]
 81030dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 81030de:	4b49      	ldr	r3, [pc, #292]	@ (8103204 <MX_GPIO_Init+0x178>)
 81030e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81030e4:	4a47      	ldr	r2, [pc, #284]	@ (8103204 <MX_GPIO_Init+0x178>)
 81030e6:	f043 0320 	orr.w	r3, r3, #32
 81030ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81030ee:	4b45      	ldr	r3, [pc, #276]	@ (8103204 <MX_GPIO_Init+0x178>)
 81030f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81030f4:	f003 0320 	and.w	r3, r3, #32
 81030f8:	613b      	str	r3, [r7, #16]
 81030fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81030fc:	4b41      	ldr	r3, [pc, #260]	@ (8103204 <MX_GPIO_Init+0x178>)
 81030fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103102:	4a40      	ldr	r2, [pc, #256]	@ (8103204 <MX_GPIO_Init+0x178>)
 8103104:	f043 0310 	orr.w	r3, r3, #16
 8103108:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810310c:	4b3d      	ldr	r3, [pc, #244]	@ (8103204 <MX_GPIO_Init+0x178>)
 810310e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103112:	f003 0310 	and.w	r3, r3, #16
 8103116:	60fb      	str	r3, [r7, #12]
 8103118:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810311a:	4b3a      	ldr	r3, [pc, #232]	@ (8103204 <MX_GPIO_Init+0x178>)
 810311c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103120:	4a38      	ldr	r2, [pc, #224]	@ (8103204 <MX_GPIO_Init+0x178>)
 8103122:	f043 0302 	orr.w	r3, r3, #2
 8103126:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810312a:	4b36      	ldr	r3, [pc, #216]	@ (8103204 <MX_GPIO_Init+0x178>)
 810312c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103130:	f003 0302 	and.w	r3, r3, #2
 8103134:	60bb      	str	r3, [r7, #8]
 8103136:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8103138:	4b32      	ldr	r3, [pc, #200]	@ (8103204 <MX_GPIO_Init+0x178>)
 810313a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810313e:	4a31      	ldr	r2, [pc, #196]	@ (8103204 <MX_GPIO_Init+0x178>)
 8103140:	f043 0308 	orr.w	r3, r3, #8
 8103144:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103148:	4b2e      	ldr	r3, [pc, #184]	@ (8103204 <MX_GPIO_Init+0x178>)
 810314a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810314e:	f003 0308 	and.w	r3, r3, #8
 8103152:	607b      	str	r3, [r7, #4]
 8103154:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8103156:	2200      	movs	r2, #0
 8103158:	2130      	movs	r1, #48	@ 0x30
 810315a:	482b      	ldr	r0, [pc, #172]	@ (8103208 <MX_GPIO_Init+0x17c>)
 810315c:	f002 fd5c 	bl	8105c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8103160:	2200      	movs	r2, #0
 8103162:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8103166:	4829      	ldr	r0, [pc, #164]	@ (810320c <MX_GPIO_Init+0x180>)
 8103168:	f002 fd56 	bl	8105c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 810316c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8103170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8103172:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8103176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103178:	2300      	movs	r3, #0
 810317a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810317c:	f107 031c 	add.w	r3, r7, #28
 8103180:	4619      	mov	r1, r3
 8103182:	4823      	ldr	r0, [pc, #140]	@ (8103210 <MX_GPIO_Init+0x184>)
 8103184:	f002 fb98 	bl	81058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8103188:	2308      	movs	r3, #8
 810318a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 810318c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8103190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103192:	2300      	movs	r3, #0
 8103194:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8103196:	f107 031c 	add.w	r3, r7, #28
 810319a:	4619      	mov	r1, r3
 810319c:	481a      	ldr	r0, [pc, #104]	@ (8103208 <MX_GPIO_Init+0x17c>)
 810319e:	f002 fb8b 	bl	81058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 81031a2:	2330      	movs	r3, #48	@ 0x30
 81031a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81031a6:	2301      	movs	r3, #1
 81031a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81031aa:	2300      	movs	r3, #0
 81031ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81031ae:	2300      	movs	r3, #0
 81031b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81031b2:	f107 031c 	add.w	r3, r7, #28
 81031b6:	4619      	mov	r1, r3
 81031b8:	4813      	ldr	r0, [pc, #76]	@ (8103208 <MX_GPIO_Init+0x17c>)
 81031ba:	f002 fb7d 	bl	81058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 81031be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81031c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81031c4:	2301      	movs	r3, #1
 81031c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81031c8:	2300      	movs	r3, #0
 81031ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81031cc:	2300      	movs	r3, #0
 81031ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81031d0:	f107 031c 	add.w	r3, r7, #28
 81031d4:	4619      	mov	r1, r3
 81031d6:	480d      	ldr	r0, [pc, #52]	@ (810320c <MX_GPIO_Init+0x180>)
 81031d8:	f002 fb6e 	bl	81058b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 81031dc:	2200      	movs	r2, #0
 81031de:	2100      	movs	r1, #0
 81031e0:	2009      	movs	r0, #9
 81031e2:	f002 fb20 	bl	8105826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 81031e6:	2009      	movs	r0, #9
 81031e8:	f002 fb37 	bl	810585a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 81031ec:	2200      	movs	r2, #0
 81031ee:	2100      	movs	r1, #0
 81031f0:	2028      	movs	r0, #40	@ 0x28
 81031f2:	f002 fb18 	bl	8105826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 81031f6:	2028      	movs	r0, #40	@ 0x28
 81031f8:	f002 fb2f 	bl	810585a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 81031fc:	bf00      	nop
 81031fe:	3730      	adds	r7, #48	@ 0x30
 8103200:	46bd      	mov	sp, r7
 8103202:	bd80      	pop	{r7, pc}
 8103204:	58024400 	.word	0x58024400
 8103208:	58020000 	.word	0x58020000
 810320c:	58020400 	.word	0x58020400
 8103210:	58020800 	.word	0x58020800

08103214 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//******************
//INTERRUPT PA3 SENSORE DATA READY
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8103214:	b480      	push	{r7}
 8103216:	b083      	sub	sp, #12
 8103218:	af00      	add	r7, sp, #0
 810321a:	4603      	mov	r3, r0
 810321c:	80fb      	strh	r3, [r7, #6]


	if (GPIO_Pin == GPIO_PIN_3) {
 810321e:	88fb      	ldrh	r3, [r7, #6]
 8103220:	2b08      	cmp	r3, #8
 8103222:	d102      	bne.n	810322a <HAL_GPIO_EXTI_Callback+0x16>
		flag_BNO055_Data_Ready = 1;
 8103224:	4b11      	ldr	r3, [pc, #68]	@ (810326c <HAL_GPIO_EXTI_Callback+0x58>)
 8103226:	2201      	movs	r2, #1
 8103228:	601a      	str	r2, [r3, #0]
	}

	//FUNZIONE DI CALLBACK PULSANTE BLU
	if(GPIO_Pin == GPIO_PIN_13)
 810322a:	88fb      	ldrh	r3, [r7, #6]
 810322c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103230:	d115      	bne.n	810325e <HAL_GPIO_EXTI_Callback+0x4a>
		{
			sys_started++;
 8103232:	4b0f      	ldr	r3, [pc, #60]	@ (8103270 <HAL_GPIO_EXTI_Callback+0x5c>)
 8103234:	681b      	ldr	r3, [r3, #0]
 8103236:	3301      	adds	r3, #1
 8103238:	4a0d      	ldr	r2, [pc, #52]	@ (8103270 <HAL_GPIO_EXTI_Callback+0x5c>)
 810323a:	6013      	str	r3, [r2, #0]

			if(sys_started==1) {stadio=0;  n_ref=0;}
 810323c:	4b0c      	ldr	r3, [pc, #48]	@ (8103270 <HAL_GPIO_EXTI_Callback+0x5c>)
 810323e:	681b      	ldr	r3, [r3, #0]
 8103240:	2b01      	cmp	r3, #1
 8103242:	d105      	bne.n	8103250 <HAL_GPIO_EXTI_Callback+0x3c>
 8103244:	4b0b      	ldr	r3, [pc, #44]	@ (8103274 <HAL_GPIO_EXTI_Callback+0x60>)
 8103246:	2200      	movs	r2, #0
 8103248:	601a      	str	r2, [r3, #0]
 810324a:	4b0b      	ldr	r3, [pc, #44]	@ (8103278 <HAL_GPIO_EXTI_Callback+0x64>)
 810324c:	2200      	movs	r2, #0
 810324e:	601a      	str	r2, [r3, #0]
			if(sys_started==2) sys_started=0;
 8103250:	4b07      	ldr	r3, [pc, #28]	@ (8103270 <HAL_GPIO_EXTI_Callback+0x5c>)
 8103252:	681b      	ldr	r3, [r3, #0]
 8103254:	2b02      	cmp	r3, #2
 8103256:	d102      	bne.n	810325e <HAL_GPIO_EXTI_Callback+0x4a>
 8103258:	4b05      	ldr	r3, [pc, #20]	@ (8103270 <HAL_GPIO_EXTI_Callback+0x5c>)
 810325a:	2200      	movs	r2, #0
 810325c:	601a      	str	r2, [r3, #0]

		}
}
 810325e:	bf00      	nop
 8103260:	370c      	adds	r7, #12
 8103262:	46bd      	mov	sp, r7
 8103264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103268:	4770      	bx	lr
 810326a:	bf00      	nop
 810326c:	100005cc 	.word	0x100005cc
 8103270:	10000614 	.word	0x10000614
 8103274:	100008b8 	.word	0x100008b8
 8103278:	1000084c 	.word	0x1000084c

0810327c <HAL_TIM_PeriodElapsedCallback>:
//******************

//******************
//FUNZIONE DI CALLBACK PER IL TIMER 2
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 810327c:	b480      	push	{r7}
 810327e:	b083      	sub	sp, #12
 8103280:	af00      	add	r7, sp, #0
 8103282:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8103284:	687b      	ldr	r3, [r7, #4]
 8103286:	4a0d      	ldr	r2, [pc, #52]	@ (81032bc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8103288:	4293      	cmp	r3, r2
 810328a:	d111      	bne.n	81032b0 <HAL_TIM_PeriodElapsedCallback+0x34>
		flag_Tc = 1; //Flag che permette di entrare nel ciclo del while ogni 0.01 secondi
 810328c:	4b0c      	ldr	r3, [pc, #48]	@ (81032c0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 810328e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8103292:	601a      	str	r2, [r3, #0]
		n_ref++;
 8103294:	4b0b      	ldr	r3, [pc, #44]	@ (81032c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8103296:	681b      	ldr	r3, [r3, #0]
 8103298:	3301      	adds	r3, #1
 810329a:	4a0a      	ldr	r2, [pc, #40]	@ (81032c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 810329c:	6013      	str	r3, [r2, #0]

		if (n_ref > 100 * 500)
 810329e:	4b09      	ldr	r3, [pc, #36]	@ (81032c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 81032a0:	681b      	ldr	r3, [r3, #0]
 81032a2:	f24c 3250 	movw	r2, #50000	@ 0xc350
 81032a6:	4293      	cmp	r3, r2
 81032a8:	dd02      	ble.n	81032b0 <HAL_TIM_PeriodElapsedCallback+0x34>
			n_ref = 0;
 81032aa:	4b06      	ldr	r3, [pc, #24]	@ (81032c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 81032ac:	2200      	movs	r2, #0
 81032ae:	601a      	str	r2, [r3, #0]

	}
}
 81032b0:	bf00      	nop
 81032b2:	370c      	adds	r7, #12
 81032b4:	46bd      	mov	sp, r7
 81032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032ba:	4770      	bx	lr
 81032bc:	10000388 	.word	0x10000388
 81032c0:	100005d0 	.word	0x100005d0
 81032c4:	1000084c 	.word	0x1000084c

081032c8 <__io_putchar>:



//******************
//INPUT E OUTPUT USART
int __io_putchar(int ch) {
 81032c8:	b580      	push	{r7, lr}
 81032ca:	b082      	sub	sp, #8
 81032cc:	af00      	add	r7, sp, #0
 81032ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 81032d0:	1d39      	adds	r1, r7, #4
 81032d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 81032d6:	2201      	movs	r2, #1
 81032d8:	4803      	ldr	r0, [pc, #12]	@ (81032e8 <__io_putchar+0x20>)
 81032da:	f007 fe8d 	bl	810aff8 <HAL_UART_Transmit>
	return ch;
 81032de:	687b      	ldr	r3, [r7, #4]
}
 81032e0:	4618      	mov	r0, r3
 81032e2:	3708      	adds	r7, #8
 81032e4:	46bd      	mov	sp, r7
 81032e6:	bd80      	pop	{r7, pc}
 81032e8:	100004b8 	.word	0x100004b8

081032ec <__io_getchar>:
int __io_getchar(void) {
 81032ec:	b580      	push	{r7, lr}
 81032ee:	b082      	sub	sp, #8
 81032f0:	af00      	add	r7, sp, #0
	uint8_t ch;
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 81032f2:	4b0b      	ldr	r3, [pc, #44]	@ (8103320 <__io_getchar+0x34>)
 81032f4:	681b      	ldr	r3, [r3, #0]
 81032f6:	2208      	movs	r2, #8
 81032f8:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 81032fa:	1df9      	adds	r1, r7, #7
 81032fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8103300:	2201      	movs	r2, #1
 8103302:	4807      	ldr	r0, [pc, #28]	@ (8103320 <__io_getchar+0x34>)
 8103304:	f007 ff06 	bl	810b114 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8103308:	1df9      	adds	r1, r7, #7
 810330a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 810330e:	2201      	movs	r2, #1
 8103310:	4803      	ldr	r0, [pc, #12]	@ (8103320 <__io_getchar+0x34>)
 8103312:	f007 fe71 	bl	810aff8 <HAL_UART_Transmit>
	return ch;
 8103316:	79fb      	ldrb	r3, [r7, #7]
}
 8103318:	4618      	mov	r0, r3
 810331a:	3708      	adds	r7, #8
 810331c:	46bd      	mov	sp, r7
 810331e:	bd80      	pop	{r7, pc}
 8103320:	100004b8 	.word	0x100004b8

08103324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8103324:	b480      	push	{r7}
 8103326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8103328:	b672      	cpsid	i
}
 810332a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 810332c:	bf00      	nop
 810332e:	e7fd      	b.n	810332c <Error_Handler+0x8>

08103330 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8103330:	b480      	push	{r7}
 8103332:	b083      	sub	sp, #12
 8103334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103336:	4b0a      	ldr	r3, [pc, #40]	@ (8103360 <HAL_MspInit+0x30>)
 8103338:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810333c:	4a08      	ldr	r2, [pc, #32]	@ (8103360 <HAL_MspInit+0x30>)
 810333e:	f043 0302 	orr.w	r3, r3, #2
 8103342:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8103346:	4b06      	ldr	r3, [pc, #24]	@ (8103360 <HAL_MspInit+0x30>)
 8103348:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810334c:	f003 0302 	and.w	r3, r3, #2
 8103350:	607b      	str	r3, [r7, #4]
 8103352:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8103354:	bf00      	nop
 8103356:	370c      	adds	r7, #12
 8103358:	46bd      	mov	sp, r7
 810335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810335e:	4770      	bx	lr
 8103360:	58024400 	.word	0x58024400

08103364 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8103364:	b580      	push	{r7, lr}
 8103366:	b0ba      	sub	sp, #232	@ 0xe8
 8103368:	af00      	add	r7, sp, #0
 810336a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810336c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8103370:	2200      	movs	r2, #0
 8103372:	601a      	str	r2, [r3, #0]
 8103374:	605a      	str	r2, [r3, #4]
 8103376:	609a      	str	r2, [r3, #8]
 8103378:	60da      	str	r2, [r3, #12]
 810337a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810337c:	f107 0310 	add.w	r3, r7, #16
 8103380:	22c0      	movs	r2, #192	@ 0xc0
 8103382:	2100      	movs	r1, #0
 8103384:	4618      	mov	r0, r3
 8103386:	f00a fe45 	bl	810e014 <memset>
  if(hadc->Instance==ADC1)
 810338a:	687b      	ldr	r3, [r7, #4]
 810338c:	681b      	ldr	r3, [r3, #0]
 810338e:	4a2c      	ldr	r2, [pc, #176]	@ (8103440 <HAL_ADC_MspInit+0xdc>)
 8103390:	4293      	cmp	r3, r2
 8103392:	d151      	bne.n	8103438 <HAL_ADC_MspInit+0xd4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8103394:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8103398:	f04f 0300 	mov.w	r3, #0
 810339c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 81033a0:	2301      	movs	r3, #1
 81033a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 81033a4:	2312      	movs	r3, #18
 81033a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 81033a8:	2302      	movs	r3, #2
 81033aa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 81033ac:	2302      	movs	r3, #2
 81033ae:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 81033b0:	2302      	movs	r3, #2
 81033b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 81033b4:	23c0      	movs	r3, #192	@ 0xc0
 81033b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 81033b8:	2320      	movs	r3, #32
 81033ba:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 81033bc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 81033c0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 81033c2:	2300      	movs	r3, #0
 81033c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81033c8:	f107 0310 	add.w	r3, r7, #16
 81033cc:	4618      	mov	r0, r3
 81033ce:	f003 fccb 	bl	8106d68 <HAL_RCCEx_PeriphCLKConfig>
 81033d2:	4603      	mov	r3, r0
 81033d4:	2b00      	cmp	r3, #0
 81033d6:	d001      	beq.n	81033dc <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 81033d8:	f7ff ffa4 	bl	8103324 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81033dc:	4b19      	ldr	r3, [pc, #100]	@ (8103444 <HAL_ADC_MspInit+0xe0>)
 81033de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81033e2:	4a18      	ldr	r2, [pc, #96]	@ (8103444 <HAL_ADC_MspInit+0xe0>)
 81033e4:	f043 0320 	orr.w	r3, r3, #32
 81033e8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81033ec:	4b15      	ldr	r3, [pc, #84]	@ (8103444 <HAL_ADC_MspInit+0xe0>)
 81033ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81033f2:	f003 0320 	and.w	r3, r3, #32
 81033f6:	60fb      	str	r3, [r7, #12]
 81033f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 81033fa:	4b12      	ldr	r3, [pc, #72]	@ (8103444 <HAL_ADC_MspInit+0xe0>)
 81033fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103400:	4a10      	ldr	r2, [pc, #64]	@ (8103444 <HAL_ADC_MspInit+0xe0>)
 8103402:	f043 0320 	orr.w	r3, r3, #32
 8103406:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810340a:	4b0e      	ldr	r3, [pc, #56]	@ (8103444 <HAL_ADC_MspInit+0xe0>)
 810340c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103410:	f003 0320 	and.w	r3, r3, #32
 8103414:	60bb      	str	r3, [r7, #8]
 8103416:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8103418:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810341c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8103420:	2303      	movs	r3, #3
 8103422:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103426:	2300      	movs	r3, #0
 8103428:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 810342c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8103430:	4619      	mov	r1, r3
 8103432:	4805      	ldr	r0, [pc, #20]	@ (8103448 <HAL_ADC_MspInit+0xe4>)
 8103434:	f002 fa40 	bl	81058b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8103438:	bf00      	nop
 810343a:	37e8      	adds	r7, #232	@ 0xe8
 810343c:	46bd      	mov	sp, r7
 810343e:	bd80      	pop	{r7, pc}
 8103440:	40022000 	.word	0x40022000
 8103444:	58024400 	.word	0x58024400
 8103448:	58021400 	.word	0x58021400

0810344c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 810344c:	b580      	push	{r7, lr}
 810344e:	b0ba      	sub	sp, #232	@ 0xe8
 8103450:	af00      	add	r7, sp, #0
 8103452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103454:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8103458:	2200      	movs	r2, #0
 810345a:	601a      	str	r2, [r3, #0]
 810345c:	605a      	str	r2, [r3, #4]
 810345e:	609a      	str	r2, [r3, #8]
 8103460:	60da      	str	r2, [r3, #12]
 8103462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8103464:	f107 0310 	add.w	r3, r7, #16
 8103468:	22c0      	movs	r2, #192	@ 0xc0
 810346a:	2100      	movs	r1, #0
 810346c:	4618      	mov	r0, r3
 810346e:	f00a fdd1 	bl	810e014 <memset>
  if(hi2c->Instance==I2C1)
 8103472:	687b      	ldr	r3, [r7, #4]
 8103474:	681b      	ldr	r3, [r3, #0]
 8103476:	4a26      	ldr	r2, [pc, #152]	@ (8103510 <HAL_I2C_MspInit+0xc4>)
 8103478:	4293      	cmp	r3, r2
 810347a:	d145      	bne.n	8103508 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 810347c:	f04f 0208 	mov.w	r2, #8
 8103480:	f04f 0300 	mov.w	r3, #0
 8103484:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8103488:	2300      	movs	r3, #0
 810348a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810348e:	f107 0310 	add.w	r3, r7, #16
 8103492:	4618      	mov	r0, r3
 8103494:	f003 fc68 	bl	8106d68 <HAL_RCCEx_PeriphCLKConfig>
 8103498:	4603      	mov	r3, r0
 810349a:	2b00      	cmp	r3, #0
 810349c:	d001      	beq.n	81034a2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 810349e:	f7ff ff41 	bl	8103324 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81034a2:	4b1c      	ldr	r3, [pc, #112]	@ (8103514 <HAL_I2C_MspInit+0xc8>)
 81034a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81034a8:	4a1a      	ldr	r2, [pc, #104]	@ (8103514 <HAL_I2C_MspInit+0xc8>)
 81034aa:	f043 0302 	orr.w	r3, r3, #2
 81034ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81034b2:	4b18      	ldr	r3, [pc, #96]	@ (8103514 <HAL_I2C_MspInit+0xc8>)
 81034b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81034b8:	f003 0302 	and.w	r3, r3, #2
 81034bc:	60fb      	str	r3, [r7, #12]
 81034be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 81034c0:	23c0      	movs	r3, #192	@ 0xc0
 81034c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81034c6:	2312      	movs	r3, #18
 81034c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81034cc:	2300      	movs	r3, #0
 81034ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81034d2:	2300      	movs	r3, #0
 81034d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 81034d8:	2304      	movs	r3, #4
 81034da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81034de:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81034e2:	4619      	mov	r1, r3
 81034e4:	480c      	ldr	r0, [pc, #48]	@ (8103518 <HAL_I2C_MspInit+0xcc>)
 81034e6:	f002 f9e7 	bl	81058b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 81034ea:	4b0a      	ldr	r3, [pc, #40]	@ (8103514 <HAL_I2C_MspInit+0xc8>)
 81034ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81034f0:	4a08      	ldr	r2, [pc, #32]	@ (8103514 <HAL_I2C_MspInit+0xc8>)
 81034f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81034f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81034fa:	4b06      	ldr	r3, [pc, #24]	@ (8103514 <HAL_I2C_MspInit+0xc8>)
 81034fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8103504:	60bb      	str	r3, [r7, #8]
 8103506:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8103508:	bf00      	nop
 810350a:	37e8      	adds	r7, #232	@ 0xe8
 810350c:	46bd      	mov	sp, r7
 810350e:	bd80      	pop	{r7, pc}
 8103510:	40005400 	.word	0x40005400
 8103514:	58024400 	.word	0x58024400
 8103518:	58020400 	.word	0x58020400

0810351c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 810351c:	b580      	push	{r7, lr}
 810351e:	b086      	sub	sp, #24
 8103520:	af00      	add	r7, sp, #0
 8103522:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8103524:	687b      	ldr	r3, [r7, #4]
 8103526:	681b      	ldr	r3, [r3, #0]
 8103528:	4a23      	ldr	r2, [pc, #140]	@ (81035b8 <HAL_TIM_Base_MspInit+0x9c>)
 810352a:	4293      	cmp	r3, r2
 810352c:	d10f      	bne.n	810354e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 810352e:	4b23      	ldr	r3, [pc, #140]	@ (81035bc <HAL_TIM_Base_MspInit+0xa0>)
 8103530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103534:	4a21      	ldr	r2, [pc, #132]	@ (81035bc <HAL_TIM_Base_MspInit+0xa0>)
 8103536:	f043 0301 	orr.w	r3, r3, #1
 810353a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 810353e:	4b1f      	ldr	r3, [pc, #124]	@ (81035bc <HAL_TIM_Base_MspInit+0xa0>)
 8103540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103544:	f003 0301 	and.w	r3, r3, #1
 8103548:	617b      	str	r3, [r7, #20]
 810354a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 810354c:	e030      	b.n	81035b0 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 810354e:	687b      	ldr	r3, [r7, #4]
 8103550:	681b      	ldr	r3, [r3, #0]
 8103552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103556:	d117      	bne.n	8103588 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8103558:	4b18      	ldr	r3, [pc, #96]	@ (81035bc <HAL_TIM_Base_MspInit+0xa0>)
 810355a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810355e:	4a17      	ldr	r2, [pc, #92]	@ (81035bc <HAL_TIM_Base_MspInit+0xa0>)
 8103560:	f043 0301 	orr.w	r3, r3, #1
 8103564:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103568:	4b14      	ldr	r3, [pc, #80]	@ (81035bc <HAL_TIM_Base_MspInit+0xa0>)
 810356a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810356e:	f003 0301 	and.w	r3, r3, #1
 8103572:	613b      	str	r3, [r7, #16]
 8103574:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8103576:	2200      	movs	r2, #0
 8103578:	2100      	movs	r1, #0
 810357a:	201c      	movs	r0, #28
 810357c:	f002 f953 	bl	8105826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8103580:	201c      	movs	r0, #28
 8103582:	f002 f96a 	bl	810585a <HAL_NVIC_EnableIRQ>
}
 8103586:	e013      	b.n	81035b0 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM3)
 8103588:	687b      	ldr	r3, [r7, #4]
 810358a:	681b      	ldr	r3, [r3, #0]
 810358c:	4a0c      	ldr	r2, [pc, #48]	@ (81035c0 <HAL_TIM_Base_MspInit+0xa4>)
 810358e:	4293      	cmp	r3, r2
 8103590:	d10e      	bne.n	81035b0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8103592:	4b0a      	ldr	r3, [pc, #40]	@ (81035bc <HAL_TIM_Base_MspInit+0xa0>)
 8103594:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103598:	4a08      	ldr	r2, [pc, #32]	@ (81035bc <HAL_TIM_Base_MspInit+0xa0>)
 810359a:	f043 0302 	orr.w	r3, r3, #2
 810359e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81035a2:	4b06      	ldr	r3, [pc, #24]	@ (81035bc <HAL_TIM_Base_MspInit+0xa0>)
 81035a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81035a8:	f003 0302 	and.w	r3, r3, #2
 81035ac:	60fb      	str	r3, [r7, #12]
 81035ae:	68fb      	ldr	r3, [r7, #12]
}
 81035b0:	bf00      	nop
 81035b2:	3718      	adds	r7, #24
 81035b4:	46bd      	mov	sp, r7
 81035b6:	bd80      	pop	{r7, pc}
 81035b8:	40010000 	.word	0x40010000
 81035bc:	58024400 	.word	0x58024400
 81035c0:	40000400 	.word	0x40000400

081035c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 81035c4:	b580      	push	{r7, lr}
 81035c6:	b08c      	sub	sp, #48	@ 0x30
 81035c8:	af00      	add	r7, sp, #0
 81035ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81035cc:	f107 031c 	add.w	r3, r7, #28
 81035d0:	2200      	movs	r2, #0
 81035d2:	601a      	str	r2, [r3, #0]
 81035d4:	605a      	str	r2, [r3, #4]
 81035d6:	609a      	str	r2, [r3, #8]
 81035d8:	60da      	str	r2, [r3, #12]
 81035da:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 81035dc:	687b      	ldr	r3, [r7, #4]
 81035de:	681b      	ldr	r3, [r3, #0]
 81035e0:	4a34      	ldr	r2, [pc, #208]	@ (81036b4 <HAL_TIM_Encoder_MspInit+0xf0>)
 81035e2:	4293      	cmp	r3, r2
 81035e4:	d12f      	bne.n	8103646 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 81035e6:	4b34      	ldr	r3, [pc, #208]	@ (81036b8 <HAL_TIM_Encoder_MspInit+0xf4>)
 81035e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81035ec:	4a32      	ldr	r2, [pc, #200]	@ (81036b8 <HAL_TIM_Encoder_MspInit+0xf4>)
 81035ee:	f043 0304 	orr.w	r3, r3, #4
 81035f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81035f6:	4b30      	ldr	r3, [pc, #192]	@ (81036b8 <HAL_TIM_Encoder_MspInit+0xf4>)
 81035f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81035fc:	f003 0304 	and.w	r3, r3, #4
 8103600:	61bb      	str	r3, [r7, #24]
 8103602:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8103604:	4b2c      	ldr	r3, [pc, #176]	@ (81036b8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810360a:	4a2b      	ldr	r2, [pc, #172]	@ (81036b8 <HAL_TIM_Encoder_MspInit+0xf4>)
 810360c:	f043 0308 	orr.w	r3, r3, #8
 8103610:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103614:	4b28      	ldr	r3, [pc, #160]	@ (81036b8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810361a:	f003 0308 	and.w	r3, r3, #8
 810361e:	617b      	str	r3, [r7, #20]
 8103620:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8103622:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8103626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103628:	2302      	movs	r3, #2
 810362a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810362c:	2300      	movs	r3, #0
 810362e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103630:	2300      	movs	r3, #0
 8103632:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8103634:	2302      	movs	r3, #2
 8103636:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8103638:	f107 031c 	add.w	r3, r7, #28
 810363c:	4619      	mov	r1, r3
 810363e:	481f      	ldr	r0, [pc, #124]	@ (81036bc <HAL_TIM_Encoder_MspInit+0xf8>)
 8103640:	f002 f93a 	bl	81058b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8103644:	e032      	b.n	81036ac <HAL_TIM_Encoder_MspInit+0xe8>
  else if(htim_encoder->Instance==TIM8)
 8103646:	687b      	ldr	r3, [r7, #4]
 8103648:	681b      	ldr	r3, [r3, #0]
 810364a:	4a1d      	ldr	r2, [pc, #116]	@ (81036c0 <HAL_TIM_Encoder_MspInit+0xfc>)
 810364c:	4293      	cmp	r3, r2
 810364e:	d12d      	bne.n	81036ac <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8103650:	4b19      	ldr	r3, [pc, #100]	@ (81036b8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103652:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103656:	4a18      	ldr	r2, [pc, #96]	@ (81036b8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103658:	f043 0302 	orr.w	r3, r3, #2
 810365c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8103660:	4b15      	ldr	r3, [pc, #84]	@ (81036b8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103666:	f003 0302 	and.w	r3, r3, #2
 810366a:	613b      	str	r3, [r7, #16]
 810366c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810366e:	4b12      	ldr	r3, [pc, #72]	@ (81036b8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103674:	4a10      	ldr	r2, [pc, #64]	@ (81036b8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103676:	f043 0304 	orr.w	r3, r3, #4
 810367a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810367e:	4b0e      	ldr	r3, [pc, #56]	@ (81036b8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103684:	f003 0304 	and.w	r3, r3, #4
 8103688:	60fb      	str	r3, [r7, #12]
 810368a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 810368c:	23c0      	movs	r3, #192	@ 0xc0
 810368e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103690:	2302      	movs	r3, #2
 8103692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103694:	2300      	movs	r3, #0
 8103696:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103698:	2300      	movs	r3, #0
 810369a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 810369c:	2303      	movs	r3, #3
 810369e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81036a0:	f107 031c 	add.w	r3, r7, #28
 81036a4:	4619      	mov	r1, r3
 81036a6:	4807      	ldr	r0, [pc, #28]	@ (81036c4 <HAL_TIM_Encoder_MspInit+0x100>)
 81036a8:	f002 f906 	bl	81058b8 <HAL_GPIO_Init>
}
 81036ac:	bf00      	nop
 81036ae:	3730      	adds	r7, #48	@ 0x30
 81036b0:	46bd      	mov	sp, r7
 81036b2:	bd80      	pop	{r7, pc}
 81036b4:	40000800 	.word	0x40000800
 81036b8:	58024400 	.word	0x58024400
 81036bc:	58020c00 	.word	0x58020c00
 81036c0:	40010400 	.word	0x40010400
 81036c4:	58020800 	.word	0x58020800

081036c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 81036c8:	b580      	push	{r7, lr}
 81036ca:	b08a      	sub	sp, #40	@ 0x28
 81036cc:	af00      	add	r7, sp, #0
 81036ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81036d0:	f107 0314 	add.w	r3, r7, #20
 81036d4:	2200      	movs	r2, #0
 81036d6:	601a      	str	r2, [r3, #0]
 81036d8:	605a      	str	r2, [r3, #4]
 81036da:	609a      	str	r2, [r3, #8]
 81036dc:	60da      	str	r2, [r3, #12]
 81036de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 81036e0:	687b      	ldr	r3, [r7, #4]
 81036e2:	681b      	ldr	r3, [r3, #0]
 81036e4:	4a25      	ldr	r2, [pc, #148]	@ (810377c <HAL_TIM_MspPostInit+0xb4>)
 81036e6:	4293      	cmp	r3, r2
 81036e8:	d120      	bne.n	810372c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 81036ea:	4b25      	ldr	r3, [pc, #148]	@ (8103780 <HAL_TIM_MspPostInit+0xb8>)
 81036ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81036f0:	4a23      	ldr	r2, [pc, #140]	@ (8103780 <HAL_TIM_MspPostInit+0xb8>)
 81036f2:	f043 0310 	orr.w	r3, r3, #16
 81036f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81036fa:	4b21      	ldr	r3, [pc, #132]	@ (8103780 <HAL_TIM_MspPostInit+0xb8>)
 81036fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103700:	f003 0310 	and.w	r3, r3, #16
 8103704:	613b      	str	r3, [r7, #16]
 8103706:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8103708:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810370c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810370e:	2302      	movs	r3, #2
 8103710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103712:	2300      	movs	r3, #0
 8103714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103716:	2300      	movs	r3, #0
 8103718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 810371a:	2301      	movs	r3, #1
 810371c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810371e:	f107 0314 	add.w	r3, r7, #20
 8103722:	4619      	mov	r1, r3
 8103724:	4817      	ldr	r0, [pc, #92]	@ (8103784 <HAL_TIM_MspPostInit+0xbc>)
 8103726:	f002 f8c7 	bl	81058b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 810372a:	e023      	b.n	8103774 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 810372c:	687b      	ldr	r3, [r7, #4]
 810372e:	681b      	ldr	r3, [r3, #0]
 8103730:	4a15      	ldr	r2, [pc, #84]	@ (8103788 <HAL_TIM_MspPostInit+0xc0>)
 8103732:	4293      	cmp	r3, r2
 8103734:	d11e      	bne.n	8103774 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8103736:	4b12      	ldr	r3, [pc, #72]	@ (8103780 <HAL_TIM_MspPostInit+0xb8>)
 8103738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810373c:	4a10      	ldr	r2, [pc, #64]	@ (8103780 <HAL_TIM_MspPostInit+0xb8>)
 810373e:	f043 0301 	orr.w	r3, r3, #1
 8103742:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103746:	4b0e      	ldr	r3, [pc, #56]	@ (8103780 <HAL_TIM_MspPostInit+0xb8>)
 8103748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810374c:	f003 0301 	and.w	r3, r3, #1
 8103750:	60fb      	str	r3, [r7, #12]
 8103752:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8103754:	2340      	movs	r3, #64	@ 0x40
 8103756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103758:	2302      	movs	r3, #2
 810375a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810375c:	2300      	movs	r3, #0
 810375e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103760:	2300      	movs	r3, #0
 8103762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8103764:	2302      	movs	r3, #2
 8103766:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8103768:	f107 0314 	add.w	r3, r7, #20
 810376c:	4619      	mov	r1, r3
 810376e:	4807      	ldr	r0, [pc, #28]	@ (810378c <HAL_TIM_MspPostInit+0xc4>)
 8103770:	f002 f8a2 	bl	81058b8 <HAL_GPIO_Init>
}
 8103774:	bf00      	nop
 8103776:	3728      	adds	r7, #40	@ 0x28
 8103778:	46bd      	mov	sp, r7
 810377a:	bd80      	pop	{r7, pc}
 810377c:	40010000 	.word	0x40010000
 8103780:	58024400 	.word	0x58024400
 8103784:	58021000 	.word	0x58021000
 8103788:	40000400 	.word	0x40000400
 810378c:	58020000 	.word	0x58020000

08103790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8103790:	b580      	push	{r7, lr}
 8103792:	b0ba      	sub	sp, #232	@ 0xe8
 8103794:	af00      	add	r7, sp, #0
 8103796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103798:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810379c:	2200      	movs	r2, #0
 810379e:	601a      	str	r2, [r3, #0]
 81037a0:	605a      	str	r2, [r3, #4]
 81037a2:	609a      	str	r2, [r3, #8]
 81037a4:	60da      	str	r2, [r3, #12]
 81037a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81037a8:	f107 0310 	add.w	r3, r7, #16
 81037ac:	22c0      	movs	r2, #192	@ 0xc0
 81037ae:	2100      	movs	r1, #0
 81037b0:	4618      	mov	r0, r3
 81037b2:	f00a fc2f 	bl	810e014 <memset>
  if(huart->Instance==USART3)
 81037b6:	687b      	ldr	r3, [r7, #4]
 81037b8:	681b      	ldr	r3, [r3, #0]
 81037ba:	4a27      	ldr	r2, [pc, #156]	@ (8103858 <HAL_UART_MspInit+0xc8>)
 81037bc:	4293      	cmp	r3, r2
 81037be:	d146      	bne.n	810384e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81037c0:	f04f 0202 	mov.w	r2, #2
 81037c4:	f04f 0300 	mov.w	r3, #0
 81037c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81037cc:	2300      	movs	r3, #0
 81037ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81037d2:	f107 0310 	add.w	r3, r7, #16
 81037d6:	4618      	mov	r0, r3
 81037d8:	f003 fac6 	bl	8106d68 <HAL_RCCEx_PeriphCLKConfig>
 81037dc:	4603      	mov	r3, r0
 81037de:	2b00      	cmp	r3, #0
 81037e0:	d001      	beq.n	81037e6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 81037e2:	f7ff fd9f 	bl	8103324 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 81037e6:	4b1d      	ldr	r3, [pc, #116]	@ (810385c <HAL_UART_MspInit+0xcc>)
 81037e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81037ec:	4a1b      	ldr	r2, [pc, #108]	@ (810385c <HAL_UART_MspInit+0xcc>)
 81037ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 81037f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81037f6:	4b19      	ldr	r3, [pc, #100]	@ (810385c <HAL_UART_MspInit+0xcc>)
 81037f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81037fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8103800:	60fb      	str	r3, [r7, #12]
 8103802:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8103804:	4b15      	ldr	r3, [pc, #84]	@ (810385c <HAL_UART_MspInit+0xcc>)
 8103806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810380a:	4a14      	ldr	r2, [pc, #80]	@ (810385c <HAL_UART_MspInit+0xcc>)
 810380c:	f043 0308 	orr.w	r3, r3, #8
 8103810:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103814:	4b11      	ldr	r3, [pc, #68]	@ (810385c <HAL_UART_MspInit+0xcc>)
 8103816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810381a:	f003 0308 	and.w	r3, r3, #8
 810381e:	60bb      	str	r3, [r7, #8]
 8103820:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8103822:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8103826:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810382a:	2302      	movs	r3, #2
 810382c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103830:	2300      	movs	r3, #0
 8103832:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103836:	2300      	movs	r3, #0
 8103838:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 810383c:	2307      	movs	r3, #7
 810383e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8103842:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8103846:	4619      	mov	r1, r3
 8103848:	4805      	ldr	r0, [pc, #20]	@ (8103860 <HAL_UART_MspInit+0xd0>)
 810384a:	f002 f835 	bl	81058b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 810384e:	bf00      	nop
 8103850:	37e8      	adds	r7, #232	@ 0xe8
 8103852:	46bd      	mov	sp, r7
 8103854:	bd80      	pop	{r7, pc}
 8103856:	bf00      	nop
 8103858:	40004800 	.word	0x40004800
 810385c:	58024400 	.word	0x58024400
 8103860:	58020c00 	.word	0x58020c00

08103864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8103864:	b480      	push	{r7}
 8103866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8103868:	bf00      	nop
 810386a:	e7fd      	b.n	8103868 <NMI_Handler+0x4>

0810386c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810386c:	b480      	push	{r7}
 810386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8103870:	bf00      	nop
 8103872:	e7fd      	b.n	8103870 <HardFault_Handler+0x4>

08103874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8103874:	b480      	push	{r7}
 8103876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8103878:	bf00      	nop
 810387a:	e7fd      	b.n	8103878 <MemManage_Handler+0x4>

0810387c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810387c:	b480      	push	{r7}
 810387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8103880:	bf00      	nop
 8103882:	e7fd      	b.n	8103880 <BusFault_Handler+0x4>

08103884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8103884:	b480      	push	{r7}
 8103886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8103888:	bf00      	nop
 810388a:	e7fd      	b.n	8103888 <UsageFault_Handler+0x4>

0810388c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810388c:	b480      	push	{r7}
 810388e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8103890:	bf00      	nop
 8103892:	46bd      	mov	sp, r7
 8103894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103898:	4770      	bx	lr

0810389a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810389a:	b480      	push	{r7}
 810389c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810389e:	bf00      	nop
 81038a0:	46bd      	mov	sp, r7
 81038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038a6:	4770      	bx	lr

081038a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81038a8:	b480      	push	{r7}
 81038aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81038ac:	bf00      	nop
 81038ae:	46bd      	mov	sp, r7
 81038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038b4:	4770      	bx	lr

081038b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81038b6:	b580      	push	{r7, lr}
 81038b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81038ba:	f000 f9a1 	bl	8103c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81038be:	bf00      	nop
 81038c0:	bd80      	pop	{r7, pc}

081038c2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 81038c2:	b580      	push	{r7, lr}
 81038c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 81038c6:	2008      	movs	r0, #8
 81038c8:	f002 f9bf 	bl	8105c4a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 81038cc:	bf00      	nop
 81038ce:	bd80      	pop	{r7, pc}

081038d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 81038d0:	b580      	push	{r7, lr}
 81038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 81038d4:	4802      	ldr	r0, [pc, #8]	@ (81038e0 <TIM2_IRQHandler+0x10>)
 81038d6:	f006 fa9b 	bl	8109e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 81038da:	bf00      	nop
 81038dc:	bd80      	pop	{r7, pc}
 81038de:	bf00      	nop
 81038e0:	10000388 	.word	0x10000388

081038e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 81038e4:	b580      	push	{r7, lr}
 81038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 81038e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 81038ec:	f002 f9ad 	bl	8105c4a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 81038f0:	bf00      	nop
 81038f2:	bd80      	pop	{r7, pc}

081038f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81038f4:	b480      	push	{r7}
 81038f6:	af00      	add	r7, sp, #0
  return 1;
 81038f8:	2301      	movs	r3, #1
}
 81038fa:	4618      	mov	r0, r3
 81038fc:	46bd      	mov	sp, r7
 81038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103902:	4770      	bx	lr

08103904 <_kill>:

int _kill(int pid, int sig)
{
 8103904:	b580      	push	{r7, lr}
 8103906:	b082      	sub	sp, #8
 8103908:	af00      	add	r7, sp, #0
 810390a:	6078      	str	r0, [r7, #4]
 810390c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 810390e:	f00a fbd3 	bl	810e0b8 <__errno>
 8103912:	4603      	mov	r3, r0
 8103914:	2216      	movs	r2, #22
 8103916:	601a      	str	r2, [r3, #0]
  return -1;
 8103918:	f04f 33ff 	mov.w	r3, #4294967295
}
 810391c:	4618      	mov	r0, r3
 810391e:	3708      	adds	r7, #8
 8103920:	46bd      	mov	sp, r7
 8103922:	bd80      	pop	{r7, pc}

08103924 <_exit>:

void _exit (int status)
{
 8103924:	b580      	push	{r7, lr}
 8103926:	b082      	sub	sp, #8
 8103928:	af00      	add	r7, sp, #0
 810392a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 810392c:	f04f 31ff 	mov.w	r1, #4294967295
 8103930:	6878      	ldr	r0, [r7, #4]
 8103932:	f7ff ffe7 	bl	8103904 <_kill>
  while (1) {}    /* Make sure we hang here */
 8103936:	bf00      	nop
 8103938:	e7fd      	b.n	8103936 <_exit+0x12>

0810393a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 810393a:	b580      	push	{r7, lr}
 810393c:	b086      	sub	sp, #24
 810393e:	af00      	add	r7, sp, #0
 8103940:	60f8      	str	r0, [r7, #12]
 8103942:	60b9      	str	r1, [r7, #8]
 8103944:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  len=1;
 8103946:	2301      	movs	r3, #1
 8103948:	607b      	str	r3, [r7, #4]

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810394a:	2300      	movs	r3, #0
 810394c:	617b      	str	r3, [r7, #20]
 810394e:	e00a      	b.n	8103966 <_read+0x2c>
  {
    *ptr++ = __io_getchar();
 8103950:	f7ff fccc 	bl	81032ec <__io_getchar>
 8103954:	4601      	mov	r1, r0
 8103956:	68bb      	ldr	r3, [r7, #8]
 8103958:	1c5a      	adds	r2, r3, #1
 810395a:	60ba      	str	r2, [r7, #8]
 810395c:	b2ca      	uxtb	r2, r1
 810395e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103960:	697b      	ldr	r3, [r7, #20]
 8103962:	3301      	adds	r3, #1
 8103964:	617b      	str	r3, [r7, #20]
 8103966:	697a      	ldr	r2, [r7, #20]
 8103968:	687b      	ldr	r3, [r7, #4]
 810396a:	429a      	cmp	r2, r3
 810396c:	dbf0      	blt.n	8103950 <_read+0x16>
  }

  return len;
 810396e:	687b      	ldr	r3, [r7, #4]
}
 8103970:	4618      	mov	r0, r3
 8103972:	3718      	adds	r7, #24
 8103974:	46bd      	mov	sp, r7
 8103976:	bd80      	pop	{r7, pc}

08103978 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8103978:	b580      	push	{r7, lr}
 810397a:	b086      	sub	sp, #24
 810397c:	af00      	add	r7, sp, #0
 810397e:	60f8      	str	r0, [r7, #12]
 8103980:	60b9      	str	r1, [r7, #8]
 8103982:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103984:	2300      	movs	r3, #0
 8103986:	617b      	str	r3, [r7, #20]
 8103988:	e009      	b.n	810399e <_write+0x26>
  {
    __io_putchar(*ptr++);
 810398a:	68bb      	ldr	r3, [r7, #8]
 810398c:	1c5a      	adds	r2, r3, #1
 810398e:	60ba      	str	r2, [r7, #8]
 8103990:	781b      	ldrb	r3, [r3, #0]
 8103992:	4618      	mov	r0, r3
 8103994:	f7ff fc98 	bl	81032c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103998:	697b      	ldr	r3, [r7, #20]
 810399a:	3301      	adds	r3, #1
 810399c:	617b      	str	r3, [r7, #20]
 810399e:	697a      	ldr	r2, [r7, #20]
 81039a0:	687b      	ldr	r3, [r7, #4]
 81039a2:	429a      	cmp	r2, r3
 81039a4:	dbf1      	blt.n	810398a <_write+0x12>
  }
  return len;
 81039a6:	687b      	ldr	r3, [r7, #4]
}
 81039a8:	4618      	mov	r0, r3
 81039aa:	3718      	adds	r7, #24
 81039ac:	46bd      	mov	sp, r7
 81039ae:	bd80      	pop	{r7, pc}

081039b0 <_close>:

int _close(int file)
{
 81039b0:	b480      	push	{r7}
 81039b2:	b083      	sub	sp, #12
 81039b4:	af00      	add	r7, sp, #0
 81039b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 81039b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 81039bc:	4618      	mov	r0, r3
 81039be:	370c      	adds	r7, #12
 81039c0:	46bd      	mov	sp, r7
 81039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039c6:	4770      	bx	lr

081039c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 81039c8:	b480      	push	{r7}
 81039ca:	b083      	sub	sp, #12
 81039cc:	af00      	add	r7, sp, #0
 81039ce:	6078      	str	r0, [r7, #4]
 81039d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 81039d2:	683b      	ldr	r3, [r7, #0]
 81039d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 81039d8:	605a      	str	r2, [r3, #4]
  return 0;
 81039da:	2300      	movs	r3, #0
}
 81039dc:	4618      	mov	r0, r3
 81039de:	370c      	adds	r7, #12
 81039e0:	46bd      	mov	sp, r7
 81039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039e6:	4770      	bx	lr

081039e8 <_isatty>:

int _isatty(int file)
{
 81039e8:	b480      	push	{r7}
 81039ea:	b083      	sub	sp, #12
 81039ec:	af00      	add	r7, sp, #0
 81039ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 81039f0:	2301      	movs	r3, #1
}
 81039f2:	4618      	mov	r0, r3
 81039f4:	370c      	adds	r7, #12
 81039f6:	46bd      	mov	sp, r7
 81039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039fc:	4770      	bx	lr

081039fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81039fe:	b480      	push	{r7}
 8103a00:	b085      	sub	sp, #20
 8103a02:	af00      	add	r7, sp, #0
 8103a04:	60f8      	str	r0, [r7, #12]
 8103a06:	60b9      	str	r1, [r7, #8]
 8103a08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8103a0a:	2300      	movs	r3, #0
}
 8103a0c:	4618      	mov	r0, r3
 8103a0e:	3714      	adds	r7, #20
 8103a10:	46bd      	mov	sp, r7
 8103a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a16:	4770      	bx	lr

08103a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8103a18:	b580      	push	{r7, lr}
 8103a1a:	b086      	sub	sp, #24
 8103a1c:	af00      	add	r7, sp, #0
 8103a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8103a20:	4a14      	ldr	r2, [pc, #80]	@ (8103a74 <_sbrk+0x5c>)
 8103a22:	4b15      	ldr	r3, [pc, #84]	@ (8103a78 <_sbrk+0x60>)
 8103a24:	1ad3      	subs	r3, r2, r3
 8103a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8103a28:	697b      	ldr	r3, [r7, #20]
 8103a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8103a2c:	4b13      	ldr	r3, [pc, #76]	@ (8103a7c <_sbrk+0x64>)
 8103a2e:	681b      	ldr	r3, [r3, #0]
 8103a30:	2b00      	cmp	r3, #0
 8103a32:	d102      	bne.n	8103a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8103a34:	4b11      	ldr	r3, [pc, #68]	@ (8103a7c <_sbrk+0x64>)
 8103a36:	4a12      	ldr	r2, [pc, #72]	@ (8103a80 <_sbrk+0x68>)
 8103a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8103a3a:	4b10      	ldr	r3, [pc, #64]	@ (8103a7c <_sbrk+0x64>)
 8103a3c:	681a      	ldr	r2, [r3, #0]
 8103a3e:	687b      	ldr	r3, [r7, #4]
 8103a40:	4413      	add	r3, r2
 8103a42:	693a      	ldr	r2, [r7, #16]
 8103a44:	429a      	cmp	r2, r3
 8103a46:	d207      	bcs.n	8103a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8103a48:	f00a fb36 	bl	810e0b8 <__errno>
 8103a4c:	4603      	mov	r3, r0
 8103a4e:	220c      	movs	r2, #12
 8103a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8103a52:	f04f 33ff 	mov.w	r3, #4294967295
 8103a56:	e009      	b.n	8103a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8103a58:	4b08      	ldr	r3, [pc, #32]	@ (8103a7c <_sbrk+0x64>)
 8103a5a:	681b      	ldr	r3, [r3, #0]
 8103a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8103a5e:	4b07      	ldr	r3, [pc, #28]	@ (8103a7c <_sbrk+0x64>)
 8103a60:	681a      	ldr	r2, [r3, #0]
 8103a62:	687b      	ldr	r3, [r7, #4]
 8103a64:	4413      	add	r3, r2
 8103a66:	4a05      	ldr	r2, [pc, #20]	@ (8103a7c <_sbrk+0x64>)
 8103a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8103a6a:	68fb      	ldr	r3, [r7, #12]
}
 8103a6c:	4618      	mov	r0, r3
 8103a6e:	3718      	adds	r7, #24
 8103a70:	46bd      	mov	sp, r7
 8103a72:	bd80      	pop	{r7, pc}
 8103a74:	10048000 	.word	0x10048000
 8103a78:	00000400 	.word	0x00000400
 8103a7c:	100008dc 	.word	0x100008dc
 8103a80:	10000a30 	.word	0x10000a30

08103a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8103a84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8103abc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8103a88:	f7fd fb34 	bl	81010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8103a8c:	480c      	ldr	r0, [pc, #48]	@ (8103ac0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8103a8e:	490d      	ldr	r1, [pc, #52]	@ (8103ac4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8103a90:	4a0d      	ldr	r2, [pc, #52]	@ (8103ac8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8103a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8103a94:	e002      	b.n	8103a9c <LoopCopyDataInit>

08103a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8103a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8103a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8103a9a:	3304      	adds	r3, #4

08103a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8103a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8103a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8103aa0:	d3f9      	bcc.n	8103a96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8103aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8103acc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8103aa4:	4c0a      	ldr	r4, [pc, #40]	@ (8103ad0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8103aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8103aa8:	e001      	b.n	8103aae <LoopFillZerobss>

08103aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8103aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8103aac:	3204      	adds	r2, #4

08103aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8103aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8103ab0:	d3fb      	bcc.n	8103aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8103ab2:	f00a fb07 	bl	810e0c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8103ab6:	f7fe fab7 	bl	8102028 <main>
  bx  lr
 8103aba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8103abc:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8103ac0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8103ac4:	10000264 	.word	0x10000264
  ldr r2, =_sidata
 8103ac8:	08111bac 	.word	0x08111bac
  ldr r2, =_sbss
 8103acc:	10000264 	.word	0x10000264
  ldr r4, =_ebss
 8103ad0:	10000a30 	.word	0x10000a30

08103ad4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8103ad4:	e7fe      	b.n	8103ad4 <ADC3_IRQHandler>
	...

08103ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8103ad8:	b580      	push	{r7, lr}
 8103ada:	b082      	sub	sp, #8
 8103adc:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8103ade:	4b28      	ldr	r3, [pc, #160]	@ (8103b80 <HAL_Init+0xa8>)
 8103ae0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103ae4:	4a26      	ldr	r2, [pc, #152]	@ (8103b80 <HAL_Init+0xa8>)
 8103ae6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8103aea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8103aee:	4b24      	ldr	r3, [pc, #144]	@ (8103b80 <HAL_Init+0xa8>)
 8103af0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103af4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8103af8:	603b      	str	r3, [r7, #0]
 8103afa:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8103afc:	4b21      	ldr	r3, [pc, #132]	@ (8103b84 <HAL_Init+0xac>)
 8103afe:	681b      	ldr	r3, [r3, #0]
 8103b00:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8103b04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8103b08:	4a1e      	ldr	r2, [pc, #120]	@ (8103b84 <HAL_Init+0xac>)
 8103b0a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8103b0e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8103b10:	4b1c      	ldr	r3, [pc, #112]	@ (8103b84 <HAL_Init+0xac>)
 8103b12:	681b      	ldr	r3, [r3, #0]
 8103b14:	4a1b      	ldr	r2, [pc, #108]	@ (8103b84 <HAL_Init+0xac>)
 8103b16:	f043 0301 	orr.w	r3, r3, #1
 8103b1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8103b1c:	2003      	movs	r0, #3
 8103b1e:	f001 fe77 	bl	8105810 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8103b22:	f002 ff49 	bl	81069b8 <HAL_RCC_GetSysClockFreq>
 8103b26:	4602      	mov	r2, r0
 8103b28:	4b15      	ldr	r3, [pc, #84]	@ (8103b80 <HAL_Init+0xa8>)
 8103b2a:	699b      	ldr	r3, [r3, #24]
 8103b2c:	0a1b      	lsrs	r3, r3, #8
 8103b2e:	f003 030f 	and.w	r3, r3, #15
 8103b32:	4915      	ldr	r1, [pc, #84]	@ (8103b88 <HAL_Init+0xb0>)
 8103b34:	5ccb      	ldrb	r3, [r1, r3]
 8103b36:	f003 031f 	and.w	r3, r3, #31
 8103b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8103b3e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103b40:	4b0f      	ldr	r3, [pc, #60]	@ (8103b80 <HAL_Init+0xa8>)
 8103b42:	699b      	ldr	r3, [r3, #24]
 8103b44:	f003 030f 	and.w	r3, r3, #15
 8103b48:	4a0f      	ldr	r2, [pc, #60]	@ (8103b88 <HAL_Init+0xb0>)
 8103b4a:	5cd3      	ldrb	r3, [r2, r3]
 8103b4c:	f003 031f 	and.w	r3, r3, #31
 8103b50:	687a      	ldr	r2, [r7, #4]
 8103b52:	fa22 f303 	lsr.w	r3, r2, r3
 8103b56:	4a0d      	ldr	r2, [pc, #52]	@ (8103b8c <HAL_Init+0xb4>)
 8103b58:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8103b8c <HAL_Init+0xb4>)
 8103b5c:	681b      	ldr	r3, [r3, #0]
 8103b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8103b90 <HAL_Init+0xb8>)
 8103b60:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8103b62:	2000      	movs	r0, #0
 8103b64:	f000 f816 	bl	8103b94 <HAL_InitTick>
 8103b68:	4603      	mov	r3, r0
 8103b6a:	2b00      	cmp	r3, #0
 8103b6c:	d001      	beq.n	8103b72 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8103b6e:	2301      	movs	r3, #1
 8103b70:	e002      	b.n	8103b78 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8103b72:	f7ff fbdd 	bl	8103330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8103b76:	2300      	movs	r3, #0
}
 8103b78:	4618      	mov	r0, r3
 8103b7a:	3708      	adds	r7, #8
 8103b7c:	46bd      	mov	sp, r7
 8103b7e:	bd80      	pop	{r7, pc}
 8103b80:	58024400 	.word	0x58024400
 8103b84:	40024400 	.word	0x40024400
 8103b88:	081116e0 	.word	0x081116e0
 8103b8c:	10000004 	.word	0x10000004
 8103b90:	10000000 	.word	0x10000000

08103b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8103b94:	b580      	push	{r7, lr}
 8103b96:	b082      	sub	sp, #8
 8103b98:	af00      	add	r7, sp, #0
 8103b9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8103b9c:	4b15      	ldr	r3, [pc, #84]	@ (8103bf4 <HAL_InitTick+0x60>)
 8103b9e:	781b      	ldrb	r3, [r3, #0]
 8103ba0:	2b00      	cmp	r3, #0
 8103ba2:	d101      	bne.n	8103ba8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8103ba4:	2301      	movs	r3, #1
 8103ba6:	e021      	b.n	8103bec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8103ba8:	4b13      	ldr	r3, [pc, #76]	@ (8103bf8 <HAL_InitTick+0x64>)
 8103baa:	681a      	ldr	r2, [r3, #0]
 8103bac:	4b11      	ldr	r3, [pc, #68]	@ (8103bf4 <HAL_InitTick+0x60>)
 8103bae:	781b      	ldrb	r3, [r3, #0]
 8103bb0:	4619      	mov	r1, r3
 8103bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8103bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8103bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8103bbe:	4618      	mov	r0, r3
 8103bc0:	f001 fe59 	bl	8105876 <HAL_SYSTICK_Config>
 8103bc4:	4603      	mov	r3, r0
 8103bc6:	2b00      	cmp	r3, #0
 8103bc8:	d001      	beq.n	8103bce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8103bca:	2301      	movs	r3, #1
 8103bcc:	e00e      	b.n	8103bec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8103bce:	687b      	ldr	r3, [r7, #4]
 8103bd0:	2b0f      	cmp	r3, #15
 8103bd2:	d80a      	bhi.n	8103bea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8103bd4:	2200      	movs	r2, #0
 8103bd6:	6879      	ldr	r1, [r7, #4]
 8103bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8103bdc:	f001 fe23 	bl	8105826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8103be0:	4a06      	ldr	r2, [pc, #24]	@ (8103bfc <HAL_InitTick+0x68>)
 8103be2:	687b      	ldr	r3, [r7, #4]
 8103be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8103be6:	2300      	movs	r3, #0
 8103be8:	e000      	b.n	8103bec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8103bea:	2301      	movs	r3, #1
}
 8103bec:	4618      	mov	r0, r3
 8103bee:	3708      	adds	r7, #8
 8103bf0:	46bd      	mov	sp, r7
 8103bf2:	bd80      	pop	{r7, pc}
 8103bf4:	10000098 	.word	0x10000098
 8103bf8:	10000000 	.word	0x10000000
 8103bfc:	10000094 	.word	0x10000094

08103c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8103c00:	b480      	push	{r7}
 8103c02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8103c04:	4b06      	ldr	r3, [pc, #24]	@ (8103c20 <HAL_IncTick+0x20>)
 8103c06:	781b      	ldrb	r3, [r3, #0]
 8103c08:	461a      	mov	r2, r3
 8103c0a:	4b06      	ldr	r3, [pc, #24]	@ (8103c24 <HAL_IncTick+0x24>)
 8103c0c:	681b      	ldr	r3, [r3, #0]
 8103c0e:	4413      	add	r3, r2
 8103c10:	4a04      	ldr	r2, [pc, #16]	@ (8103c24 <HAL_IncTick+0x24>)
 8103c12:	6013      	str	r3, [r2, #0]
}
 8103c14:	bf00      	nop
 8103c16:	46bd      	mov	sp, r7
 8103c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c1c:	4770      	bx	lr
 8103c1e:	bf00      	nop
 8103c20:	10000098 	.word	0x10000098
 8103c24:	100008e0 	.word	0x100008e0

08103c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8103c28:	b480      	push	{r7}
 8103c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8103c2c:	4b03      	ldr	r3, [pc, #12]	@ (8103c3c <HAL_GetTick+0x14>)
 8103c2e:	681b      	ldr	r3, [r3, #0]
}
 8103c30:	4618      	mov	r0, r3
 8103c32:	46bd      	mov	sp, r7
 8103c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c38:	4770      	bx	lr
 8103c3a:	bf00      	nop
 8103c3c:	100008e0 	.word	0x100008e0

08103c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8103c40:	b580      	push	{r7, lr}
 8103c42:	b084      	sub	sp, #16
 8103c44:	af00      	add	r7, sp, #0
 8103c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8103c48:	f7ff ffee 	bl	8103c28 <HAL_GetTick>
 8103c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8103c4e:	687b      	ldr	r3, [r7, #4]
 8103c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8103c52:	68fb      	ldr	r3, [r7, #12]
 8103c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103c58:	d005      	beq.n	8103c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8103c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8103c84 <HAL_Delay+0x44>)
 8103c5c:	781b      	ldrb	r3, [r3, #0]
 8103c5e:	461a      	mov	r2, r3
 8103c60:	68fb      	ldr	r3, [r7, #12]
 8103c62:	4413      	add	r3, r2
 8103c64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8103c66:	bf00      	nop
 8103c68:	f7ff ffde 	bl	8103c28 <HAL_GetTick>
 8103c6c:	4602      	mov	r2, r0
 8103c6e:	68bb      	ldr	r3, [r7, #8]
 8103c70:	1ad3      	subs	r3, r2, r3
 8103c72:	68fa      	ldr	r2, [r7, #12]
 8103c74:	429a      	cmp	r2, r3
 8103c76:	d8f7      	bhi.n	8103c68 <HAL_Delay+0x28>
  {
  }
}
 8103c78:	bf00      	nop
 8103c7a:	bf00      	nop
 8103c7c:	3710      	adds	r7, #16
 8103c7e:	46bd      	mov	sp, r7
 8103c80:	bd80      	pop	{r7, pc}
 8103c82:	bf00      	nop
 8103c84:	10000098 	.word	0x10000098

08103c88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8103c88:	b480      	push	{r7}
 8103c8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8103c8c:	4b03      	ldr	r3, [pc, #12]	@ (8103c9c <HAL_GetREVID+0x14>)
 8103c8e:	681b      	ldr	r3, [r3, #0]
 8103c90:	0c1b      	lsrs	r3, r3, #16
}
 8103c92:	4618      	mov	r0, r3
 8103c94:	46bd      	mov	sp, r7
 8103c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c9a:	4770      	bx	lr
 8103c9c:	5c001000 	.word	0x5c001000

08103ca0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8103ca0:	b480      	push	{r7}
 8103ca2:	b083      	sub	sp, #12
 8103ca4:	af00      	add	r7, sp, #0
 8103ca6:	6078      	str	r0, [r7, #4]
 8103ca8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8103caa:	687b      	ldr	r3, [r7, #4]
 8103cac:	689b      	ldr	r3, [r3, #8]
 8103cae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8103cb2:	683b      	ldr	r3, [r7, #0]
 8103cb4:	431a      	orrs	r2, r3
 8103cb6:	687b      	ldr	r3, [r7, #4]
 8103cb8:	609a      	str	r2, [r3, #8]
}
 8103cba:	bf00      	nop
 8103cbc:	370c      	adds	r7, #12
 8103cbe:	46bd      	mov	sp, r7
 8103cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cc4:	4770      	bx	lr

08103cc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8103cc6:	b480      	push	{r7}
 8103cc8:	b083      	sub	sp, #12
 8103cca:	af00      	add	r7, sp, #0
 8103ccc:	6078      	str	r0, [r7, #4]
 8103cce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8103cd0:	687b      	ldr	r3, [r7, #4]
 8103cd2:	689b      	ldr	r3, [r3, #8]
 8103cd4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8103cd8:	683b      	ldr	r3, [r7, #0]
 8103cda:	431a      	orrs	r2, r3
 8103cdc:	687b      	ldr	r3, [r7, #4]
 8103cde:	609a      	str	r2, [r3, #8]
}
 8103ce0:	bf00      	nop
 8103ce2:	370c      	adds	r7, #12
 8103ce4:	46bd      	mov	sp, r7
 8103ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cea:	4770      	bx	lr

08103cec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8103cec:	b480      	push	{r7}
 8103cee:	b083      	sub	sp, #12
 8103cf0:	af00      	add	r7, sp, #0
 8103cf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8103cf4:	687b      	ldr	r3, [r7, #4]
 8103cf6:	689b      	ldr	r3, [r3, #8]
 8103cf8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8103cfc:	4618      	mov	r0, r3
 8103cfe:	370c      	adds	r7, #12
 8103d00:	46bd      	mov	sp, r7
 8103d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d06:	4770      	bx	lr

08103d08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8103d08:	b480      	push	{r7}
 8103d0a:	b087      	sub	sp, #28
 8103d0c:	af00      	add	r7, sp, #0
 8103d0e:	60f8      	str	r0, [r7, #12]
 8103d10:	60b9      	str	r1, [r7, #8]
 8103d12:	607a      	str	r2, [r7, #4]
 8103d14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8103d16:	68fb      	ldr	r3, [r7, #12]
 8103d18:	3360      	adds	r3, #96	@ 0x60
 8103d1a:	461a      	mov	r2, r3
 8103d1c:	68bb      	ldr	r3, [r7, #8]
 8103d1e:	009b      	lsls	r3, r3, #2
 8103d20:	4413      	add	r3, r2
 8103d22:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8103d24:	697b      	ldr	r3, [r7, #20]
 8103d26:	681b      	ldr	r3, [r3, #0]
 8103d28:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8103d2c:	687b      	ldr	r3, [r7, #4]
 8103d2e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8103d32:	683b      	ldr	r3, [r7, #0]
 8103d34:	430b      	orrs	r3, r1
 8103d36:	431a      	orrs	r2, r3
 8103d38:	697b      	ldr	r3, [r7, #20]
 8103d3a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8103d3c:	bf00      	nop
 8103d3e:	371c      	adds	r7, #28
 8103d40:	46bd      	mov	sp, r7
 8103d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d46:	4770      	bx	lr

08103d48 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8103d48:	b480      	push	{r7}
 8103d4a:	b085      	sub	sp, #20
 8103d4c:	af00      	add	r7, sp, #0
 8103d4e:	60f8      	str	r0, [r7, #12]
 8103d50:	60b9      	str	r1, [r7, #8]
 8103d52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8103d54:	68fb      	ldr	r3, [r7, #12]
 8103d56:	691b      	ldr	r3, [r3, #16]
 8103d58:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8103d5c:	68bb      	ldr	r3, [r7, #8]
 8103d5e:	f003 031f 	and.w	r3, r3, #31
 8103d62:	6879      	ldr	r1, [r7, #4]
 8103d64:	fa01 f303 	lsl.w	r3, r1, r3
 8103d68:	431a      	orrs	r2, r3
 8103d6a:	68fb      	ldr	r3, [r7, #12]
 8103d6c:	611a      	str	r2, [r3, #16]
}
 8103d6e:	bf00      	nop
 8103d70:	3714      	adds	r7, #20
 8103d72:	46bd      	mov	sp, r7
 8103d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d78:	4770      	bx	lr

08103d7a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8103d7a:	b480      	push	{r7}
 8103d7c:	b087      	sub	sp, #28
 8103d7e:	af00      	add	r7, sp, #0
 8103d80:	60f8      	str	r0, [r7, #12]
 8103d82:	60b9      	str	r1, [r7, #8]
 8103d84:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8103d86:	68fb      	ldr	r3, [r7, #12]
 8103d88:	3360      	adds	r3, #96	@ 0x60
 8103d8a:	461a      	mov	r2, r3
 8103d8c:	68bb      	ldr	r3, [r7, #8]
 8103d8e:	009b      	lsls	r3, r3, #2
 8103d90:	4413      	add	r3, r2
 8103d92:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8103d94:	697b      	ldr	r3, [r7, #20]
 8103d96:	681b      	ldr	r3, [r3, #0]
 8103d98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8103d9c:	687b      	ldr	r3, [r7, #4]
 8103d9e:	431a      	orrs	r2, r3
 8103da0:	697b      	ldr	r3, [r7, #20]
 8103da2:	601a      	str	r2, [r3, #0]
  }
}
 8103da4:	bf00      	nop
 8103da6:	371c      	adds	r7, #28
 8103da8:	46bd      	mov	sp, r7
 8103daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dae:	4770      	bx	lr

08103db0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8103db0:	b480      	push	{r7}
 8103db2:	b083      	sub	sp, #12
 8103db4:	af00      	add	r7, sp, #0
 8103db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8103db8:	687b      	ldr	r3, [r7, #4]
 8103dba:	68db      	ldr	r3, [r3, #12]
 8103dbc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8103dc0:	2b00      	cmp	r3, #0
 8103dc2:	d101      	bne.n	8103dc8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8103dc4:	2301      	movs	r3, #1
 8103dc6:	e000      	b.n	8103dca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8103dc8:	2300      	movs	r3, #0
}
 8103dca:	4618      	mov	r0, r3
 8103dcc:	370c      	adds	r7, #12
 8103dce:	46bd      	mov	sp, r7
 8103dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dd4:	4770      	bx	lr

08103dd6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8103dd6:	b480      	push	{r7}
 8103dd8:	b087      	sub	sp, #28
 8103dda:	af00      	add	r7, sp, #0
 8103ddc:	60f8      	str	r0, [r7, #12]
 8103dde:	60b9      	str	r1, [r7, #8]
 8103de0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8103de2:	68fb      	ldr	r3, [r7, #12]
 8103de4:	3330      	adds	r3, #48	@ 0x30
 8103de6:	461a      	mov	r2, r3
 8103de8:	68bb      	ldr	r3, [r7, #8]
 8103dea:	0a1b      	lsrs	r3, r3, #8
 8103dec:	009b      	lsls	r3, r3, #2
 8103dee:	f003 030c 	and.w	r3, r3, #12
 8103df2:	4413      	add	r3, r2
 8103df4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8103df6:	697b      	ldr	r3, [r7, #20]
 8103df8:	681a      	ldr	r2, [r3, #0]
 8103dfa:	68bb      	ldr	r3, [r7, #8]
 8103dfc:	f003 031f 	and.w	r3, r3, #31
 8103e00:	211f      	movs	r1, #31
 8103e02:	fa01 f303 	lsl.w	r3, r1, r3
 8103e06:	43db      	mvns	r3, r3
 8103e08:	401a      	ands	r2, r3
 8103e0a:	687b      	ldr	r3, [r7, #4]
 8103e0c:	0e9b      	lsrs	r3, r3, #26
 8103e0e:	f003 011f 	and.w	r1, r3, #31
 8103e12:	68bb      	ldr	r3, [r7, #8]
 8103e14:	f003 031f 	and.w	r3, r3, #31
 8103e18:	fa01 f303 	lsl.w	r3, r1, r3
 8103e1c:	431a      	orrs	r2, r3
 8103e1e:	697b      	ldr	r3, [r7, #20]
 8103e20:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8103e22:	bf00      	nop
 8103e24:	371c      	adds	r7, #28
 8103e26:	46bd      	mov	sp, r7
 8103e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e2c:	4770      	bx	lr

08103e2e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8103e2e:	b480      	push	{r7}
 8103e30:	b087      	sub	sp, #28
 8103e32:	af00      	add	r7, sp, #0
 8103e34:	60f8      	str	r0, [r7, #12]
 8103e36:	60b9      	str	r1, [r7, #8]
 8103e38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8103e3a:	68fb      	ldr	r3, [r7, #12]
 8103e3c:	3314      	adds	r3, #20
 8103e3e:	461a      	mov	r2, r3
 8103e40:	68bb      	ldr	r3, [r7, #8]
 8103e42:	0e5b      	lsrs	r3, r3, #25
 8103e44:	009b      	lsls	r3, r3, #2
 8103e46:	f003 0304 	and.w	r3, r3, #4
 8103e4a:	4413      	add	r3, r2
 8103e4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8103e4e:	697b      	ldr	r3, [r7, #20]
 8103e50:	681a      	ldr	r2, [r3, #0]
 8103e52:	68bb      	ldr	r3, [r7, #8]
 8103e54:	0d1b      	lsrs	r3, r3, #20
 8103e56:	f003 031f 	and.w	r3, r3, #31
 8103e5a:	2107      	movs	r1, #7
 8103e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8103e60:	43db      	mvns	r3, r3
 8103e62:	401a      	ands	r2, r3
 8103e64:	68bb      	ldr	r3, [r7, #8]
 8103e66:	0d1b      	lsrs	r3, r3, #20
 8103e68:	f003 031f 	and.w	r3, r3, #31
 8103e6c:	6879      	ldr	r1, [r7, #4]
 8103e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8103e72:	431a      	orrs	r2, r3
 8103e74:	697b      	ldr	r3, [r7, #20]
 8103e76:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8103e78:	bf00      	nop
 8103e7a:	371c      	adds	r7, #28
 8103e7c:	46bd      	mov	sp, r7
 8103e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e82:	4770      	bx	lr

08103e84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8103e84:	b480      	push	{r7}
 8103e86:	b085      	sub	sp, #20
 8103e88:	af00      	add	r7, sp, #0
 8103e8a:	60f8      	str	r0, [r7, #12]
 8103e8c:	60b9      	str	r1, [r7, #8]
 8103e8e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8103e90:	68fb      	ldr	r3, [r7, #12]
 8103e92:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8103e96:	68bb      	ldr	r3, [r7, #8]
 8103e98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103e9c:	43db      	mvns	r3, r3
 8103e9e:	401a      	ands	r2, r3
 8103ea0:	687b      	ldr	r3, [r7, #4]
 8103ea2:	f003 0318 	and.w	r3, r3, #24
 8103ea6:	4908      	ldr	r1, [pc, #32]	@ (8103ec8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8103ea8:	40d9      	lsrs	r1, r3
 8103eaa:	68bb      	ldr	r3, [r7, #8]
 8103eac:	400b      	ands	r3, r1
 8103eae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103eb2:	431a      	orrs	r2, r3
 8103eb4:	68fb      	ldr	r3, [r7, #12]
 8103eb6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8103eba:	bf00      	nop
 8103ebc:	3714      	adds	r7, #20
 8103ebe:	46bd      	mov	sp, r7
 8103ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ec4:	4770      	bx	lr
 8103ec6:	bf00      	nop
 8103ec8:	000fffff 	.word	0x000fffff

08103ecc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8103ecc:	b480      	push	{r7}
 8103ece:	b083      	sub	sp, #12
 8103ed0:	af00      	add	r7, sp, #0
 8103ed2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8103ed4:	687b      	ldr	r3, [r7, #4]
 8103ed6:	689b      	ldr	r3, [r3, #8]
 8103ed8:	f003 031f 	and.w	r3, r3, #31
}
 8103edc:	4618      	mov	r0, r3
 8103ede:	370c      	adds	r7, #12
 8103ee0:	46bd      	mov	sp, r7
 8103ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ee6:	4770      	bx	lr

08103ee8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8103ee8:	b480      	push	{r7}
 8103eea:	b083      	sub	sp, #12
 8103eec:	af00      	add	r7, sp, #0
 8103eee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	689b      	ldr	r3, [r3, #8]
 8103ef4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8103ef8:	4618      	mov	r0, r3
 8103efa:	370c      	adds	r7, #12
 8103efc:	46bd      	mov	sp, r7
 8103efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f02:	4770      	bx	lr

08103f04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8103f04:	b480      	push	{r7}
 8103f06:	b083      	sub	sp, #12
 8103f08:	af00      	add	r7, sp, #0
 8103f0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8103f0c:	687b      	ldr	r3, [r7, #4]
 8103f0e:	689b      	ldr	r3, [r3, #8]
 8103f10:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8103f14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8103f18:	687a      	ldr	r2, [r7, #4]
 8103f1a:	6093      	str	r3, [r2, #8]
}
 8103f1c:	bf00      	nop
 8103f1e:	370c      	adds	r7, #12
 8103f20:	46bd      	mov	sp, r7
 8103f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f26:	4770      	bx	lr

08103f28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8103f28:	b480      	push	{r7}
 8103f2a:	b083      	sub	sp, #12
 8103f2c:	af00      	add	r7, sp, #0
 8103f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8103f30:	687b      	ldr	r3, [r7, #4]
 8103f32:	689b      	ldr	r3, [r3, #8]
 8103f34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103f38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103f3c:	d101      	bne.n	8103f42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8103f3e:	2301      	movs	r3, #1
 8103f40:	e000      	b.n	8103f44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8103f42:	2300      	movs	r3, #0
}
 8103f44:	4618      	mov	r0, r3
 8103f46:	370c      	adds	r7, #12
 8103f48:	46bd      	mov	sp, r7
 8103f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f4e:	4770      	bx	lr

08103f50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8103f50:	b480      	push	{r7}
 8103f52:	b083      	sub	sp, #12
 8103f54:	af00      	add	r7, sp, #0
 8103f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	689b      	ldr	r3, [r3, #8]
 8103f5c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8103f60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8103f64:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8103f68:	687b      	ldr	r3, [r7, #4]
 8103f6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8103f6c:	bf00      	nop
 8103f6e:	370c      	adds	r7, #12
 8103f70:	46bd      	mov	sp, r7
 8103f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f76:	4770      	bx	lr

08103f78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8103f78:	b480      	push	{r7}
 8103f7a:	b083      	sub	sp, #12
 8103f7c:	af00      	add	r7, sp, #0
 8103f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8103f80:	687b      	ldr	r3, [r7, #4]
 8103f82:	689b      	ldr	r3, [r3, #8]
 8103f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8103f88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103f8c:	d101      	bne.n	8103f92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8103f8e:	2301      	movs	r3, #1
 8103f90:	e000      	b.n	8103f94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8103f92:	2300      	movs	r3, #0
}
 8103f94:	4618      	mov	r0, r3
 8103f96:	370c      	adds	r7, #12
 8103f98:	46bd      	mov	sp, r7
 8103f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f9e:	4770      	bx	lr

08103fa0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8103fa0:	b480      	push	{r7}
 8103fa2:	b083      	sub	sp, #12
 8103fa4:	af00      	add	r7, sp, #0
 8103fa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8103fa8:	687b      	ldr	r3, [r7, #4]
 8103faa:	689b      	ldr	r3, [r3, #8]
 8103fac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8103fb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8103fb4:	f043 0201 	orr.w	r2, r3, #1
 8103fb8:	687b      	ldr	r3, [r7, #4]
 8103fba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8103fbc:	bf00      	nop
 8103fbe:	370c      	adds	r7, #12
 8103fc0:	46bd      	mov	sp, r7
 8103fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fc6:	4770      	bx	lr

08103fc8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8103fc8:	b480      	push	{r7}
 8103fca:	b083      	sub	sp, #12
 8103fcc:	af00      	add	r7, sp, #0
 8103fce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8103fd0:	687b      	ldr	r3, [r7, #4]
 8103fd2:	689b      	ldr	r3, [r3, #8]
 8103fd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8103fd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8103fdc:	f043 0202 	orr.w	r2, r3, #2
 8103fe0:	687b      	ldr	r3, [r7, #4]
 8103fe2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8103fe4:	bf00      	nop
 8103fe6:	370c      	adds	r7, #12
 8103fe8:	46bd      	mov	sp, r7
 8103fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fee:	4770      	bx	lr

08103ff0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8103ff0:	b480      	push	{r7}
 8103ff2:	b083      	sub	sp, #12
 8103ff4:	af00      	add	r7, sp, #0
 8103ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103ff8:	687b      	ldr	r3, [r7, #4]
 8103ffa:	689b      	ldr	r3, [r3, #8]
 8103ffc:	f003 0301 	and.w	r3, r3, #1
 8104000:	2b01      	cmp	r3, #1
 8104002:	d101      	bne.n	8104008 <LL_ADC_IsEnabled+0x18>
 8104004:	2301      	movs	r3, #1
 8104006:	e000      	b.n	810400a <LL_ADC_IsEnabled+0x1a>
 8104008:	2300      	movs	r3, #0
}
 810400a:	4618      	mov	r0, r3
 810400c:	370c      	adds	r7, #12
 810400e:	46bd      	mov	sp, r7
 8104010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104014:	4770      	bx	lr

08104016 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8104016:	b480      	push	{r7}
 8104018:	b083      	sub	sp, #12
 810401a:	af00      	add	r7, sp, #0
 810401c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 810401e:	687b      	ldr	r3, [r7, #4]
 8104020:	689b      	ldr	r3, [r3, #8]
 8104022:	f003 0302 	and.w	r3, r3, #2
 8104026:	2b02      	cmp	r3, #2
 8104028:	d101      	bne.n	810402e <LL_ADC_IsDisableOngoing+0x18>
 810402a:	2301      	movs	r3, #1
 810402c:	e000      	b.n	8104030 <LL_ADC_IsDisableOngoing+0x1a>
 810402e:	2300      	movs	r3, #0
}
 8104030:	4618      	mov	r0, r3
 8104032:	370c      	adds	r7, #12
 8104034:	46bd      	mov	sp, r7
 8104036:	f85d 7b04 	ldr.w	r7, [sp], #4
 810403a:	4770      	bx	lr

0810403c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 810403c:	b480      	push	{r7}
 810403e:	b083      	sub	sp, #12
 8104040:	af00      	add	r7, sp, #0
 8104042:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8104044:	687b      	ldr	r3, [r7, #4]
 8104046:	689b      	ldr	r3, [r3, #8]
 8104048:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810404c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8104050:	f043 0204 	orr.w	r2, r3, #4
 8104054:	687b      	ldr	r3, [r7, #4]
 8104056:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8104058:	bf00      	nop
 810405a:	370c      	adds	r7, #12
 810405c:	46bd      	mov	sp, r7
 810405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104062:	4770      	bx	lr

08104064 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8104064:	b480      	push	{r7}
 8104066:	b083      	sub	sp, #12
 8104068:	af00      	add	r7, sp, #0
 810406a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 810406c:	687b      	ldr	r3, [r7, #4]
 810406e:	689b      	ldr	r3, [r3, #8]
 8104070:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8104074:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8104078:	f043 0210 	orr.w	r2, r3, #16
 810407c:	687b      	ldr	r3, [r7, #4]
 810407e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8104080:	bf00      	nop
 8104082:	370c      	adds	r7, #12
 8104084:	46bd      	mov	sp, r7
 8104086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810408a:	4770      	bx	lr

0810408c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 810408c:	b480      	push	{r7}
 810408e:	b083      	sub	sp, #12
 8104090:	af00      	add	r7, sp, #0
 8104092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8104094:	687b      	ldr	r3, [r7, #4]
 8104096:	689b      	ldr	r3, [r3, #8]
 8104098:	f003 0304 	and.w	r3, r3, #4
 810409c:	2b04      	cmp	r3, #4
 810409e:	d101      	bne.n	81040a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 81040a0:	2301      	movs	r3, #1
 81040a2:	e000      	b.n	81040a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 81040a4:	2300      	movs	r3, #0
}
 81040a6:	4618      	mov	r0, r3
 81040a8:	370c      	adds	r7, #12
 81040aa:	46bd      	mov	sp, r7
 81040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040b0:	4770      	bx	lr

081040b2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 81040b2:	b480      	push	{r7}
 81040b4:	b083      	sub	sp, #12
 81040b6:	af00      	add	r7, sp, #0
 81040b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81040ba:	687b      	ldr	r3, [r7, #4]
 81040bc:	689b      	ldr	r3, [r3, #8]
 81040be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81040c2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81040c6:	f043 0220 	orr.w	r2, r3, #32
 81040ca:	687b      	ldr	r3, [r7, #4]
 81040cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 81040ce:	bf00      	nop
 81040d0:	370c      	adds	r7, #12
 81040d2:	46bd      	mov	sp, r7
 81040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040d8:	4770      	bx	lr

081040da <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81040da:	b480      	push	{r7}
 81040dc:	b083      	sub	sp, #12
 81040de:	af00      	add	r7, sp, #0
 81040e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 81040e2:	687b      	ldr	r3, [r7, #4]
 81040e4:	689b      	ldr	r3, [r3, #8]
 81040e6:	f003 0308 	and.w	r3, r3, #8
 81040ea:	2b08      	cmp	r3, #8
 81040ec:	d101      	bne.n	81040f2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 81040ee:	2301      	movs	r3, #1
 81040f0:	e000      	b.n	81040f4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 81040f2:	2300      	movs	r3, #0
}
 81040f4:	4618      	mov	r0, r3
 81040f6:	370c      	adds	r7, #12
 81040f8:	46bd      	mov	sp, r7
 81040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040fe:	4770      	bx	lr

08104100 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8104100:	b590      	push	{r4, r7, lr}
 8104102:	b089      	sub	sp, #36	@ 0x24
 8104104:	af00      	add	r7, sp, #0
 8104106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8104108:	2300      	movs	r3, #0
 810410a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 810410c:	2300      	movs	r3, #0
 810410e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8104110:	687b      	ldr	r3, [r7, #4]
 8104112:	2b00      	cmp	r3, #0
 8104114:	d101      	bne.n	810411a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8104116:	2301      	movs	r3, #1
 8104118:	e18f      	b.n	810443a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 810411a:	687b      	ldr	r3, [r7, #4]
 810411c:	68db      	ldr	r3, [r3, #12]
 810411e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8104120:	687b      	ldr	r3, [r7, #4]
 8104122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104124:	2b00      	cmp	r3, #0
 8104126:	d109      	bne.n	810413c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8104128:	6878      	ldr	r0, [r7, #4]
 810412a:	f7ff f91b 	bl	8103364 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 810412e:	687b      	ldr	r3, [r7, #4]
 8104130:	2200      	movs	r2, #0
 8104132:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8104134:	687b      	ldr	r3, [r7, #4]
 8104136:	2200      	movs	r2, #0
 8104138:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 810413c:	687b      	ldr	r3, [r7, #4]
 810413e:	681b      	ldr	r3, [r3, #0]
 8104140:	4618      	mov	r0, r3
 8104142:	f7ff fef1 	bl	8103f28 <LL_ADC_IsDeepPowerDownEnabled>
 8104146:	4603      	mov	r3, r0
 8104148:	2b00      	cmp	r3, #0
 810414a:	d004      	beq.n	8104156 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 810414c:	687b      	ldr	r3, [r7, #4]
 810414e:	681b      	ldr	r3, [r3, #0]
 8104150:	4618      	mov	r0, r3
 8104152:	f7ff fed7 	bl	8103f04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8104156:	687b      	ldr	r3, [r7, #4]
 8104158:	681b      	ldr	r3, [r3, #0]
 810415a:	4618      	mov	r0, r3
 810415c:	f7ff ff0c 	bl	8103f78 <LL_ADC_IsInternalRegulatorEnabled>
 8104160:	4603      	mov	r3, r0
 8104162:	2b00      	cmp	r3, #0
 8104164:	d114      	bne.n	8104190 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8104166:	687b      	ldr	r3, [r7, #4]
 8104168:	681b      	ldr	r3, [r3, #0]
 810416a:	4618      	mov	r0, r3
 810416c:	f7ff fef0 	bl	8103f50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8104170:	4b88      	ldr	r3, [pc, #544]	@ (8104394 <HAL_ADC_Init+0x294>)
 8104172:	681b      	ldr	r3, [r3, #0]
 8104174:	099b      	lsrs	r3, r3, #6
 8104176:	4a88      	ldr	r2, [pc, #544]	@ (8104398 <HAL_ADC_Init+0x298>)
 8104178:	fba2 2303 	umull	r2, r3, r2, r3
 810417c:	099b      	lsrs	r3, r3, #6
 810417e:	3301      	adds	r3, #1
 8104180:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8104182:	e002      	b.n	810418a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8104184:	68bb      	ldr	r3, [r7, #8]
 8104186:	3b01      	subs	r3, #1
 8104188:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810418a:	68bb      	ldr	r3, [r7, #8]
 810418c:	2b00      	cmp	r3, #0
 810418e:	d1f9      	bne.n	8104184 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8104190:	687b      	ldr	r3, [r7, #4]
 8104192:	681b      	ldr	r3, [r3, #0]
 8104194:	4618      	mov	r0, r3
 8104196:	f7ff feef 	bl	8103f78 <LL_ADC_IsInternalRegulatorEnabled>
 810419a:	4603      	mov	r3, r0
 810419c:	2b00      	cmp	r3, #0
 810419e:	d10d      	bne.n	81041bc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81041a0:	687b      	ldr	r3, [r7, #4]
 81041a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81041a4:	f043 0210 	orr.w	r2, r3, #16
 81041a8:	687b      	ldr	r3, [r7, #4]
 81041aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81041ac:	687b      	ldr	r3, [r7, #4]
 81041ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81041b0:	f043 0201 	orr.w	r2, r3, #1
 81041b4:	687b      	ldr	r3, [r7, #4]
 81041b6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 81041b8:	2301      	movs	r3, #1
 81041ba:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81041bc:	687b      	ldr	r3, [r7, #4]
 81041be:	681b      	ldr	r3, [r3, #0]
 81041c0:	4618      	mov	r0, r3
 81041c2:	f7ff ff63 	bl	810408c <LL_ADC_REG_IsConversionOngoing>
 81041c6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81041c8:	687b      	ldr	r3, [r7, #4]
 81041ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81041cc:	f003 0310 	and.w	r3, r3, #16
 81041d0:	2b00      	cmp	r3, #0
 81041d2:	f040 8129 	bne.w	8104428 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 81041d6:	697b      	ldr	r3, [r7, #20]
 81041d8:	2b00      	cmp	r3, #0
 81041da:	f040 8125 	bne.w	8104428 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 81041de:	687b      	ldr	r3, [r7, #4]
 81041e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81041e2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 81041e6:	f043 0202 	orr.w	r2, r3, #2
 81041ea:	687b      	ldr	r3, [r7, #4]
 81041ec:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81041ee:	687b      	ldr	r3, [r7, #4]
 81041f0:	681b      	ldr	r3, [r3, #0]
 81041f2:	4618      	mov	r0, r3
 81041f4:	f7ff fefc 	bl	8103ff0 <LL_ADC_IsEnabled>
 81041f8:	4603      	mov	r3, r0
 81041fa:	2b00      	cmp	r3, #0
 81041fc:	d136      	bne.n	810426c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81041fe:	687b      	ldr	r3, [r7, #4]
 8104200:	681b      	ldr	r3, [r3, #0]
 8104202:	4a66      	ldr	r2, [pc, #408]	@ (810439c <HAL_ADC_Init+0x29c>)
 8104204:	4293      	cmp	r3, r2
 8104206:	d004      	beq.n	8104212 <HAL_ADC_Init+0x112>
 8104208:	687b      	ldr	r3, [r7, #4]
 810420a:	681b      	ldr	r3, [r3, #0]
 810420c:	4a64      	ldr	r2, [pc, #400]	@ (81043a0 <HAL_ADC_Init+0x2a0>)
 810420e:	4293      	cmp	r3, r2
 8104210:	d10e      	bne.n	8104230 <HAL_ADC_Init+0x130>
 8104212:	4862      	ldr	r0, [pc, #392]	@ (810439c <HAL_ADC_Init+0x29c>)
 8104214:	f7ff feec 	bl	8103ff0 <LL_ADC_IsEnabled>
 8104218:	4604      	mov	r4, r0
 810421a:	4861      	ldr	r0, [pc, #388]	@ (81043a0 <HAL_ADC_Init+0x2a0>)
 810421c:	f7ff fee8 	bl	8103ff0 <LL_ADC_IsEnabled>
 8104220:	4603      	mov	r3, r0
 8104222:	4323      	orrs	r3, r4
 8104224:	2b00      	cmp	r3, #0
 8104226:	bf0c      	ite	eq
 8104228:	2301      	moveq	r3, #1
 810422a:	2300      	movne	r3, #0
 810422c:	b2db      	uxtb	r3, r3
 810422e:	e008      	b.n	8104242 <HAL_ADC_Init+0x142>
 8104230:	485c      	ldr	r0, [pc, #368]	@ (81043a4 <HAL_ADC_Init+0x2a4>)
 8104232:	f7ff fedd 	bl	8103ff0 <LL_ADC_IsEnabled>
 8104236:	4603      	mov	r3, r0
 8104238:	2b00      	cmp	r3, #0
 810423a:	bf0c      	ite	eq
 810423c:	2301      	moveq	r3, #1
 810423e:	2300      	movne	r3, #0
 8104240:	b2db      	uxtb	r3, r3
 8104242:	2b00      	cmp	r3, #0
 8104244:	d012      	beq.n	810426c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8104246:	687b      	ldr	r3, [r7, #4]
 8104248:	681b      	ldr	r3, [r3, #0]
 810424a:	4a54      	ldr	r2, [pc, #336]	@ (810439c <HAL_ADC_Init+0x29c>)
 810424c:	4293      	cmp	r3, r2
 810424e:	d004      	beq.n	810425a <HAL_ADC_Init+0x15a>
 8104250:	687b      	ldr	r3, [r7, #4]
 8104252:	681b      	ldr	r3, [r3, #0]
 8104254:	4a52      	ldr	r2, [pc, #328]	@ (81043a0 <HAL_ADC_Init+0x2a0>)
 8104256:	4293      	cmp	r3, r2
 8104258:	d101      	bne.n	810425e <HAL_ADC_Init+0x15e>
 810425a:	4a53      	ldr	r2, [pc, #332]	@ (81043a8 <HAL_ADC_Init+0x2a8>)
 810425c:	e000      	b.n	8104260 <HAL_ADC_Init+0x160>
 810425e:	4a53      	ldr	r2, [pc, #332]	@ (81043ac <HAL_ADC_Init+0x2ac>)
 8104260:	687b      	ldr	r3, [r7, #4]
 8104262:	685b      	ldr	r3, [r3, #4]
 8104264:	4619      	mov	r1, r3
 8104266:	4610      	mov	r0, r2
 8104268:	f7ff fd1a 	bl	8103ca0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 810426c:	f7ff fd0c 	bl	8103c88 <HAL_GetREVID>
 8104270:	4603      	mov	r3, r0
 8104272:	f241 0203 	movw	r2, #4099	@ 0x1003
 8104276:	4293      	cmp	r3, r2
 8104278:	d914      	bls.n	81042a4 <HAL_ADC_Init+0x1a4>
 810427a:	687b      	ldr	r3, [r7, #4]
 810427c:	689b      	ldr	r3, [r3, #8]
 810427e:	2b10      	cmp	r3, #16
 8104280:	d110      	bne.n	81042a4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104282:	687b      	ldr	r3, [r7, #4]
 8104284:	7d5b      	ldrb	r3, [r3, #21]
 8104286:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8104288:	687b      	ldr	r3, [r7, #4]
 810428a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810428c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810428e:	687b      	ldr	r3, [r7, #4]
 8104290:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8104292:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8104294:	687b      	ldr	r3, [r7, #4]
 8104296:	7f1b      	ldrb	r3, [r3, #28]
 8104298:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810429a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810429c:	f043 030c 	orr.w	r3, r3, #12
 81042a0:	61bb      	str	r3, [r7, #24]
 81042a2:	e00d      	b.n	81042c0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81042a4:	687b      	ldr	r3, [r7, #4]
 81042a6:	7d5b      	ldrb	r3, [r3, #21]
 81042a8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 81042aa:	687b      	ldr	r3, [r7, #4]
 81042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81042ae:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 81042b0:	687b      	ldr	r3, [r7, #4]
 81042b2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 81042b4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 81042b6:	687b      	ldr	r3, [r7, #4]
 81042b8:	7f1b      	ldrb	r3, [r3, #28]
 81042ba:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81042bc:	4313      	orrs	r3, r2
 81042be:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 81042c0:	687b      	ldr	r3, [r7, #4]
 81042c2:	7f1b      	ldrb	r3, [r3, #28]
 81042c4:	2b01      	cmp	r3, #1
 81042c6:	d106      	bne.n	81042d6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 81042c8:	687b      	ldr	r3, [r7, #4]
 81042ca:	6a1b      	ldr	r3, [r3, #32]
 81042cc:	3b01      	subs	r3, #1
 81042ce:	045b      	lsls	r3, r3, #17
 81042d0:	69ba      	ldr	r2, [r7, #24]
 81042d2:	4313      	orrs	r3, r2
 81042d4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 81042d6:	687b      	ldr	r3, [r7, #4]
 81042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81042da:	2b00      	cmp	r3, #0
 81042dc:	d009      	beq.n	81042f2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81042de:	687b      	ldr	r3, [r7, #4]
 81042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81042e2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 81042e6:	687b      	ldr	r3, [r7, #4]
 81042e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81042ea:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81042ec:	69ba      	ldr	r2, [r7, #24]
 81042ee:	4313      	orrs	r3, r2
 81042f0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 81042f2:	687b      	ldr	r3, [r7, #4]
 81042f4:	681b      	ldr	r3, [r3, #0]
 81042f6:	68da      	ldr	r2, [r3, #12]
 81042f8:	4b2d      	ldr	r3, [pc, #180]	@ (81043b0 <HAL_ADC_Init+0x2b0>)
 81042fa:	4013      	ands	r3, r2
 81042fc:	687a      	ldr	r2, [r7, #4]
 81042fe:	6812      	ldr	r2, [r2, #0]
 8104300:	69b9      	ldr	r1, [r7, #24]
 8104302:	430b      	orrs	r3, r1
 8104304:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8104306:	687b      	ldr	r3, [r7, #4]
 8104308:	681b      	ldr	r3, [r3, #0]
 810430a:	4618      	mov	r0, r3
 810430c:	f7ff febe 	bl	810408c <LL_ADC_REG_IsConversionOngoing>
 8104310:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8104312:	687b      	ldr	r3, [r7, #4]
 8104314:	681b      	ldr	r3, [r3, #0]
 8104316:	4618      	mov	r0, r3
 8104318:	f7ff fedf 	bl	81040da <LL_ADC_INJ_IsConversionOngoing>
 810431c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 810431e:	693b      	ldr	r3, [r7, #16]
 8104320:	2b00      	cmp	r3, #0
 8104322:	d15f      	bne.n	81043e4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8104324:	68fb      	ldr	r3, [r7, #12]
 8104326:	2b00      	cmp	r3, #0
 8104328:	d15c      	bne.n	81043e4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 810432a:	687b      	ldr	r3, [r7, #4]
 810432c:	7d1b      	ldrb	r3, [r3, #20]
 810432e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8104330:	687b      	ldr	r3, [r7, #4]
 8104332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8104334:	4313      	orrs	r3, r2
 8104336:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8104338:	687b      	ldr	r3, [r7, #4]
 810433a:	681b      	ldr	r3, [r3, #0]
 810433c:	68db      	ldr	r3, [r3, #12]
 810433e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8104342:	f023 0303 	bic.w	r3, r3, #3
 8104346:	687a      	ldr	r2, [r7, #4]
 8104348:	6812      	ldr	r2, [r2, #0]
 810434a:	69b9      	ldr	r1, [r7, #24]
 810434c:	430b      	orrs	r3, r1
 810434e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8104350:	687b      	ldr	r3, [r7, #4]
 8104352:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8104356:	2b01      	cmp	r3, #1
 8104358:	d12e      	bne.n	81043b8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 810435a:	687b      	ldr	r3, [r7, #4]
 810435c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810435e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8104360:	687b      	ldr	r3, [r7, #4]
 8104362:	681b      	ldr	r3, [r3, #0]
 8104364:	691a      	ldr	r2, [r3, #16]
 8104366:	4b13      	ldr	r3, [pc, #76]	@ (81043b4 <HAL_ADC_Init+0x2b4>)
 8104368:	4013      	ands	r3, r2
 810436a:	687a      	ldr	r2, [r7, #4]
 810436c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 810436e:	3a01      	subs	r2, #1
 8104370:	0411      	lsls	r1, r2, #16
 8104372:	687a      	ldr	r2, [r7, #4]
 8104374:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8104376:	4311      	orrs	r1, r2
 8104378:	687a      	ldr	r2, [r7, #4]
 810437a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 810437c:	4311      	orrs	r1, r2
 810437e:	687a      	ldr	r2, [r7, #4]
 8104380:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8104382:	430a      	orrs	r2, r1
 8104384:	431a      	orrs	r2, r3
 8104386:	687b      	ldr	r3, [r7, #4]
 8104388:	681b      	ldr	r3, [r3, #0]
 810438a:	f042 0201 	orr.w	r2, r2, #1
 810438e:	611a      	str	r2, [r3, #16]
 8104390:	e01a      	b.n	81043c8 <HAL_ADC_Init+0x2c8>
 8104392:	bf00      	nop
 8104394:	10000000 	.word	0x10000000
 8104398:	053e2d63 	.word	0x053e2d63
 810439c:	40022000 	.word	0x40022000
 81043a0:	40022100 	.word	0x40022100
 81043a4:	58026000 	.word	0x58026000
 81043a8:	40022300 	.word	0x40022300
 81043ac:	58026300 	.word	0x58026300
 81043b0:	fff0c003 	.word	0xfff0c003
 81043b4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 81043b8:	687b      	ldr	r3, [r7, #4]
 81043ba:	681b      	ldr	r3, [r3, #0]
 81043bc:	691a      	ldr	r2, [r3, #16]
 81043be:	687b      	ldr	r3, [r7, #4]
 81043c0:	681b      	ldr	r3, [r3, #0]
 81043c2:	f022 0201 	bic.w	r2, r2, #1
 81043c6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 81043c8:	687b      	ldr	r3, [r7, #4]
 81043ca:	681b      	ldr	r3, [r3, #0]
 81043cc:	691b      	ldr	r3, [r3, #16]
 81043ce:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 81043d2:	687b      	ldr	r3, [r7, #4]
 81043d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81043d6:	687b      	ldr	r3, [r7, #4]
 81043d8:	681b      	ldr	r3, [r3, #0]
 81043da:	430a      	orrs	r2, r1
 81043dc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 81043de:	6878      	ldr	r0, [r7, #4]
 81043e0:	f000 ff32 	bl	8105248 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 81043e4:	687b      	ldr	r3, [r7, #4]
 81043e6:	68db      	ldr	r3, [r3, #12]
 81043e8:	2b01      	cmp	r3, #1
 81043ea:	d10c      	bne.n	8104406 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81043ec:	687b      	ldr	r3, [r7, #4]
 81043ee:	681b      	ldr	r3, [r3, #0]
 81043f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81043f2:	f023 010f 	bic.w	r1, r3, #15
 81043f6:	687b      	ldr	r3, [r7, #4]
 81043f8:	699b      	ldr	r3, [r3, #24]
 81043fa:	1e5a      	subs	r2, r3, #1
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	681b      	ldr	r3, [r3, #0]
 8104400:	430a      	orrs	r2, r1
 8104402:	631a      	str	r2, [r3, #48]	@ 0x30
 8104404:	e007      	b.n	8104416 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8104406:	687b      	ldr	r3, [r7, #4]
 8104408:	681b      	ldr	r3, [r3, #0]
 810440a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810440c:	687b      	ldr	r3, [r7, #4]
 810440e:	681b      	ldr	r3, [r3, #0]
 8104410:	f022 020f 	bic.w	r2, r2, #15
 8104414:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8104416:	687b      	ldr	r3, [r7, #4]
 8104418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810441a:	f023 0303 	bic.w	r3, r3, #3
 810441e:	f043 0201 	orr.w	r2, r3, #1
 8104422:	687b      	ldr	r3, [r7, #4]
 8104424:	655a      	str	r2, [r3, #84]	@ 0x54
 8104426:	e007      	b.n	8104438 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8104428:	687b      	ldr	r3, [r7, #4]
 810442a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810442c:	f043 0210 	orr.w	r2, r3, #16
 8104430:	687b      	ldr	r3, [r7, #4]
 8104432:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8104434:	2301      	movs	r3, #1
 8104436:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8104438:	7ffb      	ldrb	r3, [r7, #31]
}
 810443a:	4618      	mov	r0, r3
 810443c:	3724      	adds	r7, #36	@ 0x24
 810443e:	46bd      	mov	sp, r7
 8104440:	bd90      	pop	{r4, r7, pc}
 8104442:	bf00      	nop

08104444 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8104444:	b580      	push	{r7, lr}
 8104446:	b086      	sub	sp, #24
 8104448:	af00      	add	r7, sp, #0
 810444a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810444c:	687b      	ldr	r3, [r7, #4]
 810444e:	681b      	ldr	r3, [r3, #0]
 8104450:	4a5d      	ldr	r2, [pc, #372]	@ (81045c8 <HAL_ADC_Start+0x184>)
 8104452:	4293      	cmp	r3, r2
 8104454:	d004      	beq.n	8104460 <HAL_ADC_Start+0x1c>
 8104456:	687b      	ldr	r3, [r7, #4]
 8104458:	681b      	ldr	r3, [r3, #0]
 810445a:	4a5c      	ldr	r2, [pc, #368]	@ (81045cc <HAL_ADC_Start+0x188>)
 810445c:	4293      	cmp	r3, r2
 810445e:	d101      	bne.n	8104464 <HAL_ADC_Start+0x20>
 8104460:	4b5b      	ldr	r3, [pc, #364]	@ (81045d0 <HAL_ADC_Start+0x18c>)
 8104462:	e000      	b.n	8104466 <HAL_ADC_Start+0x22>
 8104464:	4b5b      	ldr	r3, [pc, #364]	@ (81045d4 <HAL_ADC_Start+0x190>)
 8104466:	4618      	mov	r0, r3
 8104468:	f7ff fd30 	bl	8103ecc <LL_ADC_GetMultimode>
 810446c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810446e:	687b      	ldr	r3, [r7, #4]
 8104470:	681b      	ldr	r3, [r3, #0]
 8104472:	4618      	mov	r0, r3
 8104474:	f7ff fe0a 	bl	810408c <LL_ADC_REG_IsConversionOngoing>
 8104478:	4603      	mov	r3, r0
 810447a:	2b00      	cmp	r3, #0
 810447c:	f040 809c 	bne.w	81045b8 <HAL_ADC_Start+0x174>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8104480:	687b      	ldr	r3, [r7, #4]
 8104482:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8104486:	2b01      	cmp	r3, #1
 8104488:	d101      	bne.n	810448e <HAL_ADC_Start+0x4a>
 810448a:	2302      	movs	r3, #2
 810448c:	e097      	b.n	81045be <HAL_ADC_Start+0x17a>
 810448e:	687b      	ldr	r3, [r7, #4]
 8104490:	2201      	movs	r2, #1
 8104492:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8104496:	6878      	ldr	r0, [r7, #4]
 8104498:	f000 fdec 	bl	8105074 <ADC_Enable>
 810449c:	4603      	mov	r3, r0
 810449e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 81044a0:	7dfb      	ldrb	r3, [r7, #23]
 81044a2:	2b00      	cmp	r3, #0
 81044a4:	f040 8083 	bne.w	81045ae <HAL_ADC_Start+0x16a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 81044a8:	687b      	ldr	r3, [r7, #4]
 81044aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81044ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81044b0:	f023 0301 	bic.w	r3, r3, #1
 81044b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81044b8:	687b      	ldr	r3, [r7, #4]
 81044ba:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81044bc:	687b      	ldr	r3, [r7, #4]
 81044be:	681b      	ldr	r3, [r3, #0]
 81044c0:	4a42      	ldr	r2, [pc, #264]	@ (81045cc <HAL_ADC_Start+0x188>)
 81044c2:	4293      	cmp	r3, r2
 81044c4:	d002      	beq.n	81044cc <HAL_ADC_Start+0x88>
 81044c6:	687b      	ldr	r3, [r7, #4]
 81044c8:	681b      	ldr	r3, [r3, #0]
 81044ca:	e000      	b.n	81044ce <HAL_ADC_Start+0x8a>
 81044cc:	4b3e      	ldr	r3, [pc, #248]	@ (81045c8 <HAL_ADC_Start+0x184>)
 81044ce:	687a      	ldr	r2, [r7, #4]
 81044d0:	6812      	ldr	r2, [r2, #0]
 81044d2:	4293      	cmp	r3, r2
 81044d4:	d002      	beq.n	81044dc <HAL_ADC_Start+0x98>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81044d6:	693b      	ldr	r3, [r7, #16]
 81044d8:	2b00      	cmp	r3, #0
 81044da:	d105      	bne.n	81044e8 <HAL_ADC_Start+0xa4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 81044dc:	687b      	ldr	r3, [r7, #4]
 81044de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81044e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 81044e4:	687b      	ldr	r3, [r7, #4]
 81044e6:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 81044e8:	687b      	ldr	r3, [r7, #4]
 81044ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81044ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81044f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81044f4:	d106      	bne.n	8104504 <HAL_ADC_Start+0xc0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 81044f6:	687b      	ldr	r3, [r7, #4]
 81044f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81044fa:	f023 0206 	bic.w	r2, r3, #6
 81044fe:	687b      	ldr	r3, [r7, #4]
 8104500:	659a      	str	r2, [r3, #88]	@ 0x58
 8104502:	e002      	b.n	810450a <HAL_ADC_Start+0xc6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8104504:	687b      	ldr	r3, [r7, #4]
 8104506:	2200      	movs	r2, #0
 8104508:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 810450a:	687b      	ldr	r3, [r7, #4]
 810450c:	681b      	ldr	r3, [r3, #0]
 810450e:	221c      	movs	r2, #28
 8104510:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8104512:	687b      	ldr	r3, [r7, #4]
 8104514:	2200      	movs	r2, #0
 8104516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 810451a:	687b      	ldr	r3, [r7, #4]
 810451c:	681b      	ldr	r3, [r3, #0]
 810451e:	4a2b      	ldr	r2, [pc, #172]	@ (81045cc <HAL_ADC_Start+0x188>)
 8104520:	4293      	cmp	r3, r2
 8104522:	d002      	beq.n	810452a <HAL_ADC_Start+0xe6>
 8104524:	687b      	ldr	r3, [r7, #4]
 8104526:	681b      	ldr	r3, [r3, #0]
 8104528:	e000      	b.n	810452c <HAL_ADC_Start+0xe8>
 810452a:	4b27      	ldr	r3, [pc, #156]	@ (81045c8 <HAL_ADC_Start+0x184>)
 810452c:	687a      	ldr	r2, [r7, #4]
 810452e:	6812      	ldr	r2, [r2, #0]
 8104530:	4293      	cmp	r3, r2
 8104532:	d008      	beq.n	8104546 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8104534:	693b      	ldr	r3, [r7, #16]
 8104536:	2b00      	cmp	r3, #0
 8104538:	d005      	beq.n	8104546 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 810453a:	693b      	ldr	r3, [r7, #16]
 810453c:	2b05      	cmp	r3, #5
 810453e:	d002      	beq.n	8104546 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8104540:	693b      	ldr	r3, [r7, #16]
 8104542:	2b09      	cmp	r3, #9
 8104544:	d114      	bne.n	8104570 <HAL_ADC_Start+0x12c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8104546:	687b      	ldr	r3, [r7, #4]
 8104548:	681b      	ldr	r3, [r3, #0]
 810454a:	68db      	ldr	r3, [r3, #12]
 810454c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104550:	2b00      	cmp	r3, #0
 8104552:	d007      	beq.n	8104564 <HAL_ADC_Start+0x120>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8104554:	687b      	ldr	r3, [r7, #4]
 8104556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104558:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 810455c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8104560:	687b      	ldr	r3, [r7, #4]
 8104562:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8104564:	687b      	ldr	r3, [r7, #4]
 8104566:	681b      	ldr	r3, [r3, #0]
 8104568:	4618      	mov	r0, r3
 810456a:	f7ff fd67 	bl	810403c <LL_ADC_REG_StartConversion>
 810456e:	e025      	b.n	81045bc <HAL_ADC_Start+0x178>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8104570:	687b      	ldr	r3, [r7, #4]
 8104572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104574:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8104578:	687b      	ldr	r3, [r7, #4]
 810457a:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 810457c:	687b      	ldr	r3, [r7, #4]
 810457e:	681b      	ldr	r3, [r3, #0]
 8104580:	4a12      	ldr	r2, [pc, #72]	@ (81045cc <HAL_ADC_Start+0x188>)
 8104582:	4293      	cmp	r3, r2
 8104584:	d002      	beq.n	810458c <HAL_ADC_Start+0x148>
 8104586:	687b      	ldr	r3, [r7, #4]
 8104588:	681b      	ldr	r3, [r3, #0]
 810458a:	e000      	b.n	810458e <HAL_ADC_Start+0x14a>
 810458c:	4b0e      	ldr	r3, [pc, #56]	@ (81045c8 <HAL_ADC_Start+0x184>)
 810458e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8104590:	68fb      	ldr	r3, [r7, #12]
 8104592:	68db      	ldr	r3, [r3, #12]
 8104594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104598:	2b00      	cmp	r3, #0
 810459a:	d00f      	beq.n	81045bc <HAL_ADC_Start+0x178>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 810459c:	687b      	ldr	r3, [r7, #4]
 810459e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81045a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 81045a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 81045a8:	687b      	ldr	r3, [r7, #4]
 81045aa:	655a      	str	r2, [r3, #84]	@ 0x54
 81045ac:	e006      	b.n	81045bc <HAL_ADC_Start+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 81045ae:	687b      	ldr	r3, [r7, #4]
 81045b0:	2200      	movs	r2, #0
 81045b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 81045b6:	e001      	b.n	81045bc <HAL_ADC_Start+0x178>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 81045b8:	2302      	movs	r3, #2
 81045ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 81045bc:	7dfb      	ldrb	r3, [r7, #23]
}
 81045be:	4618      	mov	r0, r3
 81045c0:	3718      	adds	r7, #24
 81045c2:	46bd      	mov	sp, r7
 81045c4:	bd80      	pop	{r7, pc}
 81045c6:	bf00      	nop
 81045c8:	40022000 	.word	0x40022000
 81045cc:	40022100 	.word	0x40022100
 81045d0:	40022300 	.word	0x40022300
 81045d4:	58026300 	.word	0x58026300

081045d8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 81045d8:	b580      	push	{r7, lr}
 81045da:	b084      	sub	sp, #16
 81045dc:	af00      	add	r7, sp, #0
 81045de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 81045e0:	687b      	ldr	r3, [r7, #4]
 81045e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 81045e6:	2b01      	cmp	r3, #1
 81045e8:	d101      	bne.n	81045ee <HAL_ADC_Stop+0x16>
 81045ea:	2302      	movs	r3, #2
 81045ec:	e023      	b.n	8104636 <HAL_ADC_Stop+0x5e>
 81045ee:	687b      	ldr	r3, [r7, #4]
 81045f0:	2201      	movs	r2, #1
 81045f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 81045f6:	2103      	movs	r1, #3
 81045f8:	6878      	ldr	r0, [r7, #4]
 81045fa:	f000 fc7f 	bl	8104efc <ADC_ConversionStop>
 81045fe:	4603      	mov	r3, r0
 8104600:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8104602:	7bfb      	ldrb	r3, [r7, #15]
 8104604:	2b00      	cmp	r3, #0
 8104606:	d111      	bne.n	810462c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8104608:	6878      	ldr	r0, [r7, #4]
 810460a:	f000 fdbd 	bl	8105188 <ADC_Disable>
 810460e:	4603      	mov	r3, r0
 8104610:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8104612:	7bfb      	ldrb	r3, [r7, #15]
 8104614:	2b00      	cmp	r3, #0
 8104616:	d109      	bne.n	810462c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8104618:	687b      	ldr	r3, [r7, #4]
 810461a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810461c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8104620:	f023 0301 	bic.w	r3, r3, #1
 8104624:	f043 0201 	orr.w	r2, r3, #1
 8104628:	687b      	ldr	r3, [r7, #4]
 810462a:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 810462c:	687b      	ldr	r3, [r7, #4]
 810462e:	2200      	movs	r2, #0
 8104630:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8104634:	7bfb      	ldrb	r3, [r7, #15]
}
 8104636:	4618      	mov	r0, r3
 8104638:	3710      	adds	r7, #16
 810463a:	46bd      	mov	sp, r7
 810463c:	bd80      	pop	{r7, pc}
	...

08104640 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8104640:	b580      	push	{r7, lr}
 8104642:	b088      	sub	sp, #32
 8104644:	af00      	add	r7, sp, #0
 8104646:	6078      	str	r0, [r7, #4]
 8104648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810464a:	687b      	ldr	r3, [r7, #4]
 810464c:	681b      	ldr	r3, [r3, #0]
 810464e:	4a72      	ldr	r2, [pc, #456]	@ (8104818 <HAL_ADC_PollForConversion+0x1d8>)
 8104650:	4293      	cmp	r3, r2
 8104652:	d004      	beq.n	810465e <HAL_ADC_PollForConversion+0x1e>
 8104654:	687b      	ldr	r3, [r7, #4]
 8104656:	681b      	ldr	r3, [r3, #0]
 8104658:	4a70      	ldr	r2, [pc, #448]	@ (810481c <HAL_ADC_PollForConversion+0x1dc>)
 810465a:	4293      	cmp	r3, r2
 810465c:	d101      	bne.n	8104662 <HAL_ADC_PollForConversion+0x22>
 810465e:	4b70      	ldr	r3, [pc, #448]	@ (8104820 <HAL_ADC_PollForConversion+0x1e0>)
 8104660:	e000      	b.n	8104664 <HAL_ADC_PollForConversion+0x24>
 8104662:	4b70      	ldr	r3, [pc, #448]	@ (8104824 <HAL_ADC_PollForConversion+0x1e4>)
 8104664:	4618      	mov	r0, r3
 8104666:	f7ff fc31 	bl	8103ecc <LL_ADC_GetMultimode>
 810466a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 810466c:	687b      	ldr	r3, [r7, #4]
 810466e:	691b      	ldr	r3, [r3, #16]
 8104670:	2b08      	cmp	r3, #8
 8104672:	d102      	bne.n	810467a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8104674:	2308      	movs	r3, #8
 8104676:	61fb      	str	r3, [r7, #28]
 8104678:	e037      	b.n	81046ea <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 810467a:	697b      	ldr	r3, [r7, #20]
 810467c:	2b00      	cmp	r3, #0
 810467e:	d005      	beq.n	810468c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8104680:	697b      	ldr	r3, [r7, #20]
 8104682:	2b05      	cmp	r3, #5
 8104684:	d002      	beq.n	810468c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8104686:	697b      	ldr	r3, [r7, #20]
 8104688:	2b09      	cmp	r3, #9
 810468a:	d111      	bne.n	81046b0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 810468c:	687b      	ldr	r3, [r7, #4]
 810468e:	681b      	ldr	r3, [r3, #0]
 8104690:	68db      	ldr	r3, [r3, #12]
 8104692:	f003 0301 	and.w	r3, r3, #1
 8104696:	2b00      	cmp	r3, #0
 8104698:	d007      	beq.n	81046aa <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810469e:	f043 0220 	orr.w	r2, r3, #32
 81046a2:	687b      	ldr	r3, [r7, #4]
 81046a4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 81046a6:	2301      	movs	r3, #1
 81046a8:	e0b1      	b.n	810480e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 81046aa:	2304      	movs	r3, #4
 81046ac:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 81046ae:	e01c      	b.n	81046ea <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 81046b0:	687b      	ldr	r3, [r7, #4]
 81046b2:	681b      	ldr	r3, [r3, #0]
 81046b4:	4a58      	ldr	r2, [pc, #352]	@ (8104818 <HAL_ADC_PollForConversion+0x1d8>)
 81046b6:	4293      	cmp	r3, r2
 81046b8:	d004      	beq.n	81046c4 <HAL_ADC_PollForConversion+0x84>
 81046ba:	687b      	ldr	r3, [r7, #4]
 81046bc:	681b      	ldr	r3, [r3, #0]
 81046be:	4a57      	ldr	r2, [pc, #348]	@ (810481c <HAL_ADC_PollForConversion+0x1dc>)
 81046c0:	4293      	cmp	r3, r2
 81046c2:	d101      	bne.n	81046c8 <HAL_ADC_PollForConversion+0x88>
 81046c4:	4b56      	ldr	r3, [pc, #344]	@ (8104820 <HAL_ADC_PollForConversion+0x1e0>)
 81046c6:	e000      	b.n	81046ca <HAL_ADC_PollForConversion+0x8a>
 81046c8:	4b56      	ldr	r3, [pc, #344]	@ (8104824 <HAL_ADC_PollForConversion+0x1e4>)
 81046ca:	4618      	mov	r0, r3
 81046cc:	f7ff fc0c 	bl	8103ee8 <LL_ADC_GetMultiDMATransfer>
 81046d0:	4603      	mov	r3, r0
 81046d2:	2b00      	cmp	r3, #0
 81046d4:	d007      	beq.n	81046e6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81046d6:	687b      	ldr	r3, [r7, #4]
 81046d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81046da:	f043 0220 	orr.w	r2, r3, #32
 81046de:	687b      	ldr	r3, [r7, #4]
 81046e0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 81046e2:	2301      	movs	r3, #1
 81046e4:	e093      	b.n	810480e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 81046e6:	2304      	movs	r3, #4
 81046e8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 81046ea:	f7ff fa9d 	bl	8103c28 <HAL_GetTick>
 81046ee:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 81046f0:	e021      	b.n	8104736 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 81046f2:	683b      	ldr	r3, [r7, #0]
 81046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81046f8:	d01d      	beq.n	8104736 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 81046fa:	f7ff fa95 	bl	8103c28 <HAL_GetTick>
 81046fe:	4602      	mov	r2, r0
 8104700:	693b      	ldr	r3, [r7, #16]
 8104702:	1ad3      	subs	r3, r2, r3
 8104704:	683a      	ldr	r2, [r7, #0]
 8104706:	429a      	cmp	r2, r3
 8104708:	d302      	bcc.n	8104710 <HAL_ADC_PollForConversion+0xd0>
 810470a:	683b      	ldr	r3, [r7, #0]
 810470c:	2b00      	cmp	r3, #0
 810470e:	d112      	bne.n	8104736 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8104710:	687b      	ldr	r3, [r7, #4]
 8104712:	681b      	ldr	r3, [r3, #0]
 8104714:	681a      	ldr	r2, [r3, #0]
 8104716:	69fb      	ldr	r3, [r7, #28]
 8104718:	4013      	ands	r3, r2
 810471a:	2b00      	cmp	r3, #0
 810471c:	d10b      	bne.n	8104736 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 810471e:	687b      	ldr	r3, [r7, #4]
 8104720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104722:	f043 0204 	orr.w	r2, r3, #4
 8104726:	687b      	ldr	r3, [r7, #4]
 8104728:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 810472a:	687b      	ldr	r3, [r7, #4]
 810472c:	2200      	movs	r2, #0
 810472e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8104732:	2303      	movs	r3, #3
 8104734:	e06b      	b.n	810480e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8104736:	687b      	ldr	r3, [r7, #4]
 8104738:	681b      	ldr	r3, [r3, #0]
 810473a:	681a      	ldr	r2, [r3, #0]
 810473c:	69fb      	ldr	r3, [r7, #28]
 810473e:	4013      	ands	r3, r2
 8104740:	2b00      	cmp	r3, #0
 8104742:	d0d6      	beq.n	81046f2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8104744:	687b      	ldr	r3, [r7, #4]
 8104746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104748:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 810474c:	687b      	ldr	r3, [r7, #4]
 810474e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8104750:	687b      	ldr	r3, [r7, #4]
 8104752:	681b      	ldr	r3, [r3, #0]
 8104754:	4618      	mov	r0, r3
 8104756:	f7ff fb2b 	bl	8103db0 <LL_ADC_REG_IsTriggerSourceSWStart>
 810475a:	4603      	mov	r3, r0
 810475c:	2b00      	cmp	r3, #0
 810475e:	d01c      	beq.n	810479a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8104760:	687b      	ldr	r3, [r7, #4]
 8104762:	7d5b      	ldrb	r3, [r3, #21]
 8104764:	2b00      	cmp	r3, #0
 8104766:	d118      	bne.n	810479a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8104768:	687b      	ldr	r3, [r7, #4]
 810476a:	681b      	ldr	r3, [r3, #0]
 810476c:	681b      	ldr	r3, [r3, #0]
 810476e:	f003 0308 	and.w	r3, r3, #8
 8104772:	2b08      	cmp	r3, #8
 8104774:	d111      	bne.n	810479a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8104776:	687b      	ldr	r3, [r7, #4]
 8104778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810477a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810477e:	687b      	ldr	r3, [r7, #4]
 8104780:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8104782:	687b      	ldr	r3, [r7, #4]
 8104784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104786:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810478a:	2b00      	cmp	r3, #0
 810478c:	d105      	bne.n	810479a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 810478e:	687b      	ldr	r3, [r7, #4]
 8104790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104792:	f043 0201 	orr.w	r2, r3, #1
 8104796:	687b      	ldr	r3, [r7, #4]
 8104798:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 810479a:	687b      	ldr	r3, [r7, #4]
 810479c:	681b      	ldr	r3, [r3, #0]
 810479e:	4a1f      	ldr	r2, [pc, #124]	@ (810481c <HAL_ADC_PollForConversion+0x1dc>)
 81047a0:	4293      	cmp	r3, r2
 81047a2:	d002      	beq.n	81047aa <HAL_ADC_PollForConversion+0x16a>
 81047a4:	687b      	ldr	r3, [r7, #4]
 81047a6:	681b      	ldr	r3, [r3, #0]
 81047a8:	e000      	b.n	81047ac <HAL_ADC_PollForConversion+0x16c>
 81047aa:	4b1b      	ldr	r3, [pc, #108]	@ (8104818 <HAL_ADC_PollForConversion+0x1d8>)
 81047ac:	687a      	ldr	r2, [r7, #4]
 81047ae:	6812      	ldr	r2, [r2, #0]
 81047b0:	4293      	cmp	r3, r2
 81047b2:	d008      	beq.n	81047c6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81047b4:	697b      	ldr	r3, [r7, #20]
 81047b6:	2b00      	cmp	r3, #0
 81047b8:	d005      	beq.n	81047c6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 81047ba:	697b      	ldr	r3, [r7, #20]
 81047bc:	2b05      	cmp	r3, #5
 81047be:	d002      	beq.n	81047c6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81047c0:	697b      	ldr	r3, [r7, #20]
 81047c2:	2b09      	cmp	r3, #9
 81047c4:	d104      	bne.n	81047d0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 81047c6:	687b      	ldr	r3, [r7, #4]
 81047c8:	681b      	ldr	r3, [r3, #0]
 81047ca:	68db      	ldr	r3, [r3, #12]
 81047cc:	61bb      	str	r3, [r7, #24]
 81047ce:	e00c      	b.n	81047ea <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 81047d0:	687b      	ldr	r3, [r7, #4]
 81047d2:	681b      	ldr	r3, [r3, #0]
 81047d4:	4a11      	ldr	r2, [pc, #68]	@ (810481c <HAL_ADC_PollForConversion+0x1dc>)
 81047d6:	4293      	cmp	r3, r2
 81047d8:	d002      	beq.n	81047e0 <HAL_ADC_PollForConversion+0x1a0>
 81047da:	687b      	ldr	r3, [r7, #4]
 81047dc:	681b      	ldr	r3, [r3, #0]
 81047de:	e000      	b.n	81047e2 <HAL_ADC_PollForConversion+0x1a2>
 81047e0:	4b0d      	ldr	r3, [pc, #52]	@ (8104818 <HAL_ADC_PollForConversion+0x1d8>)
 81047e2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 81047e4:	68fb      	ldr	r3, [r7, #12]
 81047e6:	68db      	ldr	r3, [r3, #12]
 81047e8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 81047ea:	69fb      	ldr	r3, [r7, #28]
 81047ec:	2b08      	cmp	r3, #8
 81047ee:	d104      	bne.n	81047fa <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 81047f0:	687b      	ldr	r3, [r7, #4]
 81047f2:	681b      	ldr	r3, [r3, #0]
 81047f4:	2208      	movs	r2, #8
 81047f6:	601a      	str	r2, [r3, #0]
 81047f8:	e008      	b.n	810480c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 81047fa:	69bb      	ldr	r3, [r7, #24]
 81047fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8104800:	2b00      	cmp	r3, #0
 8104802:	d103      	bne.n	810480c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8104804:	687b      	ldr	r3, [r7, #4]
 8104806:	681b      	ldr	r3, [r3, #0]
 8104808:	220c      	movs	r2, #12
 810480a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 810480c:	2300      	movs	r3, #0
}
 810480e:	4618      	mov	r0, r3
 8104810:	3720      	adds	r7, #32
 8104812:	46bd      	mov	sp, r7
 8104814:	bd80      	pop	{r7, pc}
 8104816:	bf00      	nop
 8104818:	40022000 	.word	0x40022000
 810481c:	40022100 	.word	0x40022100
 8104820:	40022300 	.word	0x40022300
 8104824:	58026300 	.word	0x58026300

08104828 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8104828:	b480      	push	{r7}
 810482a:	b083      	sub	sp, #12
 810482c:	af00      	add	r7, sp, #0
 810482e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8104830:	687b      	ldr	r3, [r7, #4]
 8104832:	681b      	ldr	r3, [r3, #0]
 8104834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8104836:	4618      	mov	r0, r3
 8104838:	370c      	adds	r7, #12
 810483a:	46bd      	mov	sp, r7
 810483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104840:	4770      	bx	lr
	...

08104844 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8104844:	b590      	push	{r4, r7, lr}
 8104846:	b0a1      	sub	sp, #132	@ 0x84
 8104848:	af00      	add	r7, sp, #0
 810484a:	6078      	str	r0, [r7, #4]
 810484c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810484e:	2300      	movs	r3, #0
 8104850:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8104854:	2300      	movs	r3, #0
 8104856:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8104858:	683b      	ldr	r3, [r7, #0]
 810485a:	68db      	ldr	r3, [r3, #12]
 810485c:	4a65      	ldr	r2, [pc, #404]	@ (81049f4 <HAL_ADC_ConfigChannel+0x1b0>)
 810485e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8104860:	687b      	ldr	r3, [r7, #4]
 8104862:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8104866:	2b01      	cmp	r3, #1
 8104868:	d101      	bne.n	810486e <HAL_ADC_ConfigChannel+0x2a>
 810486a:	2302      	movs	r3, #2
 810486c:	e32e      	b.n	8104ecc <HAL_ADC_ConfigChannel+0x688>
 810486e:	687b      	ldr	r3, [r7, #4]
 8104870:	2201      	movs	r2, #1
 8104872:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8104876:	687b      	ldr	r3, [r7, #4]
 8104878:	681b      	ldr	r3, [r3, #0]
 810487a:	4618      	mov	r0, r3
 810487c:	f7ff fc06 	bl	810408c <LL_ADC_REG_IsConversionOngoing>
 8104880:	4603      	mov	r3, r0
 8104882:	2b00      	cmp	r3, #0
 8104884:	f040 8313 	bne.w	8104eae <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8104888:	683b      	ldr	r3, [r7, #0]
 810488a:	681b      	ldr	r3, [r3, #0]
 810488c:	2b00      	cmp	r3, #0
 810488e:	db2c      	blt.n	81048ea <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8104890:	683b      	ldr	r3, [r7, #0]
 8104892:	681b      	ldr	r3, [r3, #0]
 8104894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104898:	2b00      	cmp	r3, #0
 810489a:	d108      	bne.n	81048ae <HAL_ADC_ConfigChannel+0x6a>
 810489c:	683b      	ldr	r3, [r7, #0]
 810489e:	681b      	ldr	r3, [r3, #0]
 81048a0:	0e9b      	lsrs	r3, r3, #26
 81048a2:	f003 031f 	and.w	r3, r3, #31
 81048a6:	2201      	movs	r2, #1
 81048a8:	fa02 f303 	lsl.w	r3, r2, r3
 81048ac:	e016      	b.n	81048dc <HAL_ADC_ConfigChannel+0x98>
 81048ae:	683b      	ldr	r3, [r7, #0]
 81048b0:	681b      	ldr	r3, [r3, #0]
 81048b2:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81048b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 81048b6:	fa93 f3a3 	rbit	r3, r3
 81048ba:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 81048bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 81048be:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 81048c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 81048c2:	2b00      	cmp	r3, #0
 81048c4:	d101      	bne.n	81048ca <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 81048c6:	2320      	movs	r3, #32
 81048c8:	e003      	b.n	81048d2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 81048ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 81048cc:	fab3 f383 	clz	r3, r3
 81048d0:	b2db      	uxtb	r3, r3
 81048d2:	f003 031f 	and.w	r3, r3, #31
 81048d6:	2201      	movs	r2, #1
 81048d8:	fa02 f303 	lsl.w	r3, r2, r3
 81048dc:	687a      	ldr	r2, [r7, #4]
 81048de:	6812      	ldr	r2, [r2, #0]
 81048e0:	69d1      	ldr	r1, [r2, #28]
 81048e2:	687a      	ldr	r2, [r7, #4]
 81048e4:	6812      	ldr	r2, [r2, #0]
 81048e6:	430b      	orrs	r3, r1
 81048e8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 81048ea:	687b      	ldr	r3, [r7, #4]
 81048ec:	6818      	ldr	r0, [r3, #0]
 81048ee:	683b      	ldr	r3, [r7, #0]
 81048f0:	6859      	ldr	r1, [r3, #4]
 81048f2:	683b      	ldr	r3, [r7, #0]
 81048f4:	681b      	ldr	r3, [r3, #0]
 81048f6:	461a      	mov	r2, r3
 81048f8:	f7ff fa6d 	bl	8103dd6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81048fc:	687b      	ldr	r3, [r7, #4]
 81048fe:	681b      	ldr	r3, [r3, #0]
 8104900:	4618      	mov	r0, r3
 8104902:	f7ff fbc3 	bl	810408c <LL_ADC_REG_IsConversionOngoing>
 8104906:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8104908:	687b      	ldr	r3, [r7, #4]
 810490a:	681b      	ldr	r3, [r3, #0]
 810490c:	4618      	mov	r0, r3
 810490e:	f7ff fbe4 	bl	81040da <LL_ADC_INJ_IsConversionOngoing>
 8104912:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8104914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8104916:	2b00      	cmp	r3, #0
 8104918:	f040 80b8 	bne.w	8104a8c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 810491c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810491e:	2b00      	cmp	r3, #0
 8104920:	f040 80b4 	bne.w	8104a8c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8104924:	687b      	ldr	r3, [r7, #4]
 8104926:	6818      	ldr	r0, [r3, #0]
 8104928:	683b      	ldr	r3, [r7, #0]
 810492a:	6819      	ldr	r1, [r3, #0]
 810492c:	683b      	ldr	r3, [r7, #0]
 810492e:	689b      	ldr	r3, [r3, #8]
 8104930:	461a      	mov	r2, r3
 8104932:	f7ff fa7c 	bl	8103e2e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8104936:	4b30      	ldr	r3, [pc, #192]	@ (81049f8 <HAL_ADC_ConfigChannel+0x1b4>)
 8104938:	681b      	ldr	r3, [r3, #0]
 810493a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 810493e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104942:	d10b      	bne.n	810495c <HAL_ADC_ConfigChannel+0x118>
 8104944:	683b      	ldr	r3, [r7, #0]
 8104946:	695a      	ldr	r2, [r3, #20]
 8104948:	687b      	ldr	r3, [r7, #4]
 810494a:	681b      	ldr	r3, [r3, #0]
 810494c:	68db      	ldr	r3, [r3, #12]
 810494e:	089b      	lsrs	r3, r3, #2
 8104950:	f003 0307 	and.w	r3, r3, #7
 8104954:	005b      	lsls	r3, r3, #1
 8104956:	fa02 f303 	lsl.w	r3, r2, r3
 810495a:	e01d      	b.n	8104998 <HAL_ADC_ConfigChannel+0x154>
 810495c:	687b      	ldr	r3, [r7, #4]
 810495e:	681b      	ldr	r3, [r3, #0]
 8104960:	68db      	ldr	r3, [r3, #12]
 8104962:	f003 0310 	and.w	r3, r3, #16
 8104966:	2b00      	cmp	r3, #0
 8104968:	d10b      	bne.n	8104982 <HAL_ADC_ConfigChannel+0x13e>
 810496a:	683b      	ldr	r3, [r7, #0]
 810496c:	695a      	ldr	r2, [r3, #20]
 810496e:	687b      	ldr	r3, [r7, #4]
 8104970:	681b      	ldr	r3, [r3, #0]
 8104972:	68db      	ldr	r3, [r3, #12]
 8104974:	089b      	lsrs	r3, r3, #2
 8104976:	f003 0307 	and.w	r3, r3, #7
 810497a:	005b      	lsls	r3, r3, #1
 810497c:	fa02 f303 	lsl.w	r3, r2, r3
 8104980:	e00a      	b.n	8104998 <HAL_ADC_ConfigChannel+0x154>
 8104982:	683b      	ldr	r3, [r7, #0]
 8104984:	695a      	ldr	r2, [r3, #20]
 8104986:	687b      	ldr	r3, [r7, #4]
 8104988:	681b      	ldr	r3, [r3, #0]
 810498a:	68db      	ldr	r3, [r3, #12]
 810498c:	089b      	lsrs	r3, r3, #2
 810498e:	f003 0304 	and.w	r3, r3, #4
 8104992:	005b      	lsls	r3, r3, #1
 8104994:	fa02 f303 	lsl.w	r3, r2, r3
 8104998:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 810499a:	683b      	ldr	r3, [r7, #0]
 810499c:	691b      	ldr	r3, [r3, #16]
 810499e:	2b04      	cmp	r3, #4
 81049a0:	d02c      	beq.n	81049fc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 81049a2:	687b      	ldr	r3, [r7, #4]
 81049a4:	6818      	ldr	r0, [r3, #0]
 81049a6:	683b      	ldr	r3, [r7, #0]
 81049a8:	6919      	ldr	r1, [r3, #16]
 81049aa:	683b      	ldr	r3, [r7, #0]
 81049ac:	681a      	ldr	r2, [r3, #0]
 81049ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 81049b0:	f7ff f9aa 	bl	8103d08 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 81049b4:	687b      	ldr	r3, [r7, #4]
 81049b6:	6818      	ldr	r0, [r3, #0]
 81049b8:	683b      	ldr	r3, [r7, #0]
 81049ba:	6919      	ldr	r1, [r3, #16]
 81049bc:	683b      	ldr	r3, [r7, #0]
 81049be:	7e5b      	ldrb	r3, [r3, #25]
 81049c0:	2b01      	cmp	r3, #1
 81049c2:	d102      	bne.n	81049ca <HAL_ADC_ConfigChannel+0x186>
 81049c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81049c8:	e000      	b.n	81049cc <HAL_ADC_ConfigChannel+0x188>
 81049ca:	2300      	movs	r3, #0
 81049cc:	461a      	mov	r2, r3
 81049ce:	f7ff f9d4 	bl	8103d7a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 81049d2:	687b      	ldr	r3, [r7, #4]
 81049d4:	6818      	ldr	r0, [r3, #0]
 81049d6:	683b      	ldr	r3, [r7, #0]
 81049d8:	6919      	ldr	r1, [r3, #16]
 81049da:	683b      	ldr	r3, [r7, #0]
 81049dc:	7e1b      	ldrb	r3, [r3, #24]
 81049de:	2b01      	cmp	r3, #1
 81049e0:	d102      	bne.n	81049e8 <HAL_ADC_ConfigChannel+0x1a4>
 81049e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81049e6:	e000      	b.n	81049ea <HAL_ADC_ConfigChannel+0x1a6>
 81049e8:	2300      	movs	r3, #0
 81049ea:	461a      	mov	r2, r3
 81049ec:	f7ff f9ac 	bl	8103d48 <LL_ADC_SetDataRightShift>
 81049f0:	e04c      	b.n	8104a8c <HAL_ADC_ConfigChannel+0x248>
 81049f2:	bf00      	nop
 81049f4:	47ff0000 	.word	0x47ff0000
 81049f8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81049fc:	687b      	ldr	r3, [r7, #4]
 81049fe:	681b      	ldr	r3, [r3, #0]
 8104a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104a02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104a06:	683b      	ldr	r3, [r7, #0]
 8104a08:	681b      	ldr	r3, [r3, #0]
 8104a0a:	069b      	lsls	r3, r3, #26
 8104a0c:	429a      	cmp	r2, r3
 8104a0e:	d107      	bne.n	8104a20 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8104a10:	687b      	ldr	r3, [r7, #4]
 8104a12:	681b      	ldr	r3, [r3, #0]
 8104a14:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8104a16:	687b      	ldr	r3, [r7, #4]
 8104a18:	681b      	ldr	r3, [r3, #0]
 8104a1a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8104a1e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8104a20:	687b      	ldr	r3, [r7, #4]
 8104a22:	681b      	ldr	r3, [r3, #0]
 8104a24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104a26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104a2a:	683b      	ldr	r3, [r7, #0]
 8104a2c:	681b      	ldr	r3, [r3, #0]
 8104a2e:	069b      	lsls	r3, r3, #26
 8104a30:	429a      	cmp	r2, r3
 8104a32:	d107      	bne.n	8104a44 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8104a34:	687b      	ldr	r3, [r7, #4]
 8104a36:	681b      	ldr	r3, [r3, #0]
 8104a38:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8104a3a:	687b      	ldr	r3, [r7, #4]
 8104a3c:	681b      	ldr	r3, [r3, #0]
 8104a3e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8104a42:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8104a44:	687b      	ldr	r3, [r7, #4]
 8104a46:	681b      	ldr	r3, [r3, #0]
 8104a48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104a4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104a4e:	683b      	ldr	r3, [r7, #0]
 8104a50:	681b      	ldr	r3, [r3, #0]
 8104a52:	069b      	lsls	r3, r3, #26
 8104a54:	429a      	cmp	r2, r3
 8104a56:	d107      	bne.n	8104a68 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8104a58:	687b      	ldr	r3, [r7, #4]
 8104a5a:	681b      	ldr	r3, [r3, #0]
 8104a5c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8104a5e:	687b      	ldr	r3, [r7, #4]
 8104a60:	681b      	ldr	r3, [r3, #0]
 8104a62:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8104a66:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8104a68:	687b      	ldr	r3, [r7, #4]
 8104a6a:	681b      	ldr	r3, [r3, #0]
 8104a6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104a6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104a72:	683b      	ldr	r3, [r7, #0]
 8104a74:	681b      	ldr	r3, [r3, #0]
 8104a76:	069b      	lsls	r3, r3, #26
 8104a78:	429a      	cmp	r2, r3
 8104a7a:	d107      	bne.n	8104a8c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8104a7c:	687b      	ldr	r3, [r7, #4]
 8104a7e:	681b      	ldr	r3, [r3, #0]
 8104a80:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8104a82:	687b      	ldr	r3, [r7, #4]
 8104a84:	681b      	ldr	r3, [r3, #0]
 8104a86:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8104a8a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8104a8c:	687b      	ldr	r3, [r7, #4]
 8104a8e:	681b      	ldr	r3, [r3, #0]
 8104a90:	4618      	mov	r0, r3
 8104a92:	f7ff faad 	bl	8103ff0 <LL_ADC_IsEnabled>
 8104a96:	4603      	mov	r3, r0
 8104a98:	2b00      	cmp	r3, #0
 8104a9a:	f040 8211 	bne.w	8104ec0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8104a9e:	687b      	ldr	r3, [r7, #4]
 8104aa0:	6818      	ldr	r0, [r3, #0]
 8104aa2:	683b      	ldr	r3, [r7, #0]
 8104aa4:	6819      	ldr	r1, [r3, #0]
 8104aa6:	683b      	ldr	r3, [r7, #0]
 8104aa8:	68db      	ldr	r3, [r3, #12]
 8104aaa:	461a      	mov	r2, r3
 8104aac:	f7ff f9ea 	bl	8103e84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8104ab0:	683b      	ldr	r3, [r7, #0]
 8104ab2:	68db      	ldr	r3, [r3, #12]
 8104ab4:	4aa1      	ldr	r2, [pc, #644]	@ (8104d3c <HAL_ADC_ConfigChannel+0x4f8>)
 8104ab6:	4293      	cmp	r3, r2
 8104ab8:	f040 812e 	bne.w	8104d18 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8104abc:	687b      	ldr	r3, [r7, #4]
 8104abe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8104ac0:	683b      	ldr	r3, [r7, #0]
 8104ac2:	681b      	ldr	r3, [r3, #0]
 8104ac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104ac8:	2b00      	cmp	r3, #0
 8104aca:	d10b      	bne.n	8104ae4 <HAL_ADC_ConfigChannel+0x2a0>
 8104acc:	683b      	ldr	r3, [r7, #0]
 8104ace:	681b      	ldr	r3, [r3, #0]
 8104ad0:	0e9b      	lsrs	r3, r3, #26
 8104ad2:	3301      	adds	r3, #1
 8104ad4:	f003 031f 	and.w	r3, r3, #31
 8104ad8:	2b09      	cmp	r3, #9
 8104ada:	bf94      	ite	ls
 8104adc:	2301      	movls	r3, #1
 8104ade:	2300      	movhi	r3, #0
 8104ae0:	b2db      	uxtb	r3, r3
 8104ae2:	e019      	b.n	8104b18 <HAL_ADC_ConfigChannel+0x2d4>
 8104ae4:	683b      	ldr	r3, [r7, #0]
 8104ae6:	681b      	ldr	r3, [r3, #0]
 8104ae8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104aea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8104aec:	fa93 f3a3 	rbit	r3, r3
 8104af0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8104af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8104af4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8104af6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8104af8:	2b00      	cmp	r3, #0
 8104afa:	d101      	bne.n	8104b00 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8104afc:	2320      	movs	r3, #32
 8104afe:	e003      	b.n	8104b08 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8104b00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8104b02:	fab3 f383 	clz	r3, r3
 8104b06:	b2db      	uxtb	r3, r3
 8104b08:	3301      	adds	r3, #1
 8104b0a:	f003 031f 	and.w	r3, r3, #31
 8104b0e:	2b09      	cmp	r3, #9
 8104b10:	bf94      	ite	ls
 8104b12:	2301      	movls	r3, #1
 8104b14:	2300      	movhi	r3, #0
 8104b16:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8104b18:	2b00      	cmp	r3, #0
 8104b1a:	d079      	beq.n	8104c10 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8104b1c:	683b      	ldr	r3, [r7, #0]
 8104b1e:	681b      	ldr	r3, [r3, #0]
 8104b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104b24:	2b00      	cmp	r3, #0
 8104b26:	d107      	bne.n	8104b38 <HAL_ADC_ConfigChannel+0x2f4>
 8104b28:	683b      	ldr	r3, [r7, #0]
 8104b2a:	681b      	ldr	r3, [r3, #0]
 8104b2c:	0e9b      	lsrs	r3, r3, #26
 8104b2e:	3301      	adds	r3, #1
 8104b30:	069b      	lsls	r3, r3, #26
 8104b32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104b36:	e015      	b.n	8104b64 <HAL_ADC_ConfigChannel+0x320>
 8104b38:	683b      	ldr	r3, [r7, #0]
 8104b3a:	681b      	ldr	r3, [r3, #0]
 8104b3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104b3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8104b40:	fa93 f3a3 	rbit	r3, r3
 8104b44:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8104b46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8104b48:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8104b4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8104b4c:	2b00      	cmp	r3, #0
 8104b4e:	d101      	bne.n	8104b54 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8104b50:	2320      	movs	r3, #32
 8104b52:	e003      	b.n	8104b5c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8104b54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8104b56:	fab3 f383 	clz	r3, r3
 8104b5a:	b2db      	uxtb	r3, r3
 8104b5c:	3301      	adds	r3, #1
 8104b5e:	069b      	lsls	r3, r3, #26
 8104b60:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104b64:	683b      	ldr	r3, [r7, #0]
 8104b66:	681b      	ldr	r3, [r3, #0]
 8104b68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104b6c:	2b00      	cmp	r3, #0
 8104b6e:	d109      	bne.n	8104b84 <HAL_ADC_ConfigChannel+0x340>
 8104b70:	683b      	ldr	r3, [r7, #0]
 8104b72:	681b      	ldr	r3, [r3, #0]
 8104b74:	0e9b      	lsrs	r3, r3, #26
 8104b76:	3301      	adds	r3, #1
 8104b78:	f003 031f 	and.w	r3, r3, #31
 8104b7c:	2101      	movs	r1, #1
 8104b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8104b82:	e017      	b.n	8104bb4 <HAL_ADC_ConfigChannel+0x370>
 8104b84:	683b      	ldr	r3, [r7, #0]
 8104b86:	681b      	ldr	r3, [r3, #0]
 8104b88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8104b8c:	fa93 f3a3 	rbit	r3, r3
 8104b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8104b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104b94:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8104b96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8104b98:	2b00      	cmp	r3, #0
 8104b9a:	d101      	bne.n	8104ba0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8104b9c:	2320      	movs	r3, #32
 8104b9e:	e003      	b.n	8104ba8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8104ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8104ba2:	fab3 f383 	clz	r3, r3
 8104ba6:	b2db      	uxtb	r3, r3
 8104ba8:	3301      	adds	r3, #1
 8104baa:	f003 031f 	and.w	r3, r3, #31
 8104bae:	2101      	movs	r1, #1
 8104bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8104bb4:	ea42 0103 	orr.w	r1, r2, r3
 8104bb8:	683b      	ldr	r3, [r7, #0]
 8104bba:	681b      	ldr	r3, [r3, #0]
 8104bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104bc0:	2b00      	cmp	r3, #0
 8104bc2:	d10a      	bne.n	8104bda <HAL_ADC_ConfigChannel+0x396>
 8104bc4:	683b      	ldr	r3, [r7, #0]
 8104bc6:	681b      	ldr	r3, [r3, #0]
 8104bc8:	0e9b      	lsrs	r3, r3, #26
 8104bca:	3301      	adds	r3, #1
 8104bcc:	f003 021f 	and.w	r2, r3, #31
 8104bd0:	4613      	mov	r3, r2
 8104bd2:	005b      	lsls	r3, r3, #1
 8104bd4:	4413      	add	r3, r2
 8104bd6:	051b      	lsls	r3, r3, #20
 8104bd8:	e018      	b.n	8104c0c <HAL_ADC_ConfigChannel+0x3c8>
 8104bda:	683b      	ldr	r3, [r7, #0]
 8104bdc:	681b      	ldr	r3, [r3, #0]
 8104bde:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104be2:	fa93 f3a3 	rbit	r3, r3
 8104be6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8104be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104bea:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8104bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104bee:	2b00      	cmp	r3, #0
 8104bf0:	d101      	bne.n	8104bf6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8104bf2:	2320      	movs	r3, #32
 8104bf4:	e003      	b.n	8104bfe <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8104bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104bf8:	fab3 f383 	clz	r3, r3
 8104bfc:	b2db      	uxtb	r3, r3
 8104bfe:	3301      	adds	r3, #1
 8104c00:	f003 021f 	and.w	r2, r3, #31
 8104c04:	4613      	mov	r3, r2
 8104c06:	005b      	lsls	r3, r3, #1
 8104c08:	4413      	add	r3, r2
 8104c0a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8104c0c:	430b      	orrs	r3, r1
 8104c0e:	e07e      	b.n	8104d0e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8104c10:	683b      	ldr	r3, [r7, #0]
 8104c12:	681b      	ldr	r3, [r3, #0]
 8104c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104c18:	2b00      	cmp	r3, #0
 8104c1a:	d107      	bne.n	8104c2c <HAL_ADC_ConfigChannel+0x3e8>
 8104c1c:	683b      	ldr	r3, [r7, #0]
 8104c1e:	681b      	ldr	r3, [r3, #0]
 8104c20:	0e9b      	lsrs	r3, r3, #26
 8104c22:	3301      	adds	r3, #1
 8104c24:	069b      	lsls	r3, r3, #26
 8104c26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104c2a:	e015      	b.n	8104c58 <HAL_ADC_ConfigChannel+0x414>
 8104c2c:	683b      	ldr	r3, [r7, #0]
 8104c2e:	681b      	ldr	r3, [r3, #0]
 8104c30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104c34:	fa93 f3a3 	rbit	r3, r3
 8104c38:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8104c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8104c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104c40:	2b00      	cmp	r3, #0
 8104c42:	d101      	bne.n	8104c48 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8104c44:	2320      	movs	r3, #32
 8104c46:	e003      	b.n	8104c50 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8104c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104c4a:	fab3 f383 	clz	r3, r3
 8104c4e:	b2db      	uxtb	r3, r3
 8104c50:	3301      	adds	r3, #1
 8104c52:	069b      	lsls	r3, r3, #26
 8104c54:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104c58:	683b      	ldr	r3, [r7, #0]
 8104c5a:	681b      	ldr	r3, [r3, #0]
 8104c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104c60:	2b00      	cmp	r3, #0
 8104c62:	d109      	bne.n	8104c78 <HAL_ADC_ConfigChannel+0x434>
 8104c64:	683b      	ldr	r3, [r7, #0]
 8104c66:	681b      	ldr	r3, [r3, #0]
 8104c68:	0e9b      	lsrs	r3, r3, #26
 8104c6a:	3301      	adds	r3, #1
 8104c6c:	f003 031f 	and.w	r3, r3, #31
 8104c70:	2101      	movs	r1, #1
 8104c72:	fa01 f303 	lsl.w	r3, r1, r3
 8104c76:	e017      	b.n	8104ca8 <HAL_ADC_ConfigChannel+0x464>
 8104c78:	683b      	ldr	r3, [r7, #0]
 8104c7a:	681b      	ldr	r3, [r3, #0]
 8104c7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104c7e:	69fb      	ldr	r3, [r7, #28]
 8104c80:	fa93 f3a3 	rbit	r3, r3
 8104c84:	61bb      	str	r3, [r7, #24]
  return result;
 8104c86:	69bb      	ldr	r3, [r7, #24]
 8104c88:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8104c8a:	6a3b      	ldr	r3, [r7, #32]
 8104c8c:	2b00      	cmp	r3, #0
 8104c8e:	d101      	bne.n	8104c94 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8104c90:	2320      	movs	r3, #32
 8104c92:	e003      	b.n	8104c9c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8104c94:	6a3b      	ldr	r3, [r7, #32]
 8104c96:	fab3 f383 	clz	r3, r3
 8104c9a:	b2db      	uxtb	r3, r3
 8104c9c:	3301      	adds	r3, #1
 8104c9e:	f003 031f 	and.w	r3, r3, #31
 8104ca2:	2101      	movs	r1, #1
 8104ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8104ca8:	ea42 0103 	orr.w	r1, r2, r3
 8104cac:	683b      	ldr	r3, [r7, #0]
 8104cae:	681b      	ldr	r3, [r3, #0]
 8104cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104cb4:	2b00      	cmp	r3, #0
 8104cb6:	d10d      	bne.n	8104cd4 <HAL_ADC_ConfigChannel+0x490>
 8104cb8:	683b      	ldr	r3, [r7, #0]
 8104cba:	681b      	ldr	r3, [r3, #0]
 8104cbc:	0e9b      	lsrs	r3, r3, #26
 8104cbe:	3301      	adds	r3, #1
 8104cc0:	f003 021f 	and.w	r2, r3, #31
 8104cc4:	4613      	mov	r3, r2
 8104cc6:	005b      	lsls	r3, r3, #1
 8104cc8:	4413      	add	r3, r2
 8104cca:	3b1e      	subs	r3, #30
 8104ccc:	051b      	lsls	r3, r3, #20
 8104cce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8104cd2:	e01b      	b.n	8104d0c <HAL_ADC_ConfigChannel+0x4c8>
 8104cd4:	683b      	ldr	r3, [r7, #0]
 8104cd6:	681b      	ldr	r3, [r3, #0]
 8104cd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104cda:	693b      	ldr	r3, [r7, #16]
 8104cdc:	fa93 f3a3 	rbit	r3, r3
 8104ce0:	60fb      	str	r3, [r7, #12]
  return result;
 8104ce2:	68fb      	ldr	r3, [r7, #12]
 8104ce4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8104ce6:	697b      	ldr	r3, [r7, #20]
 8104ce8:	2b00      	cmp	r3, #0
 8104cea:	d101      	bne.n	8104cf0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8104cec:	2320      	movs	r3, #32
 8104cee:	e003      	b.n	8104cf8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8104cf0:	697b      	ldr	r3, [r7, #20]
 8104cf2:	fab3 f383 	clz	r3, r3
 8104cf6:	b2db      	uxtb	r3, r3
 8104cf8:	3301      	adds	r3, #1
 8104cfa:	f003 021f 	and.w	r2, r3, #31
 8104cfe:	4613      	mov	r3, r2
 8104d00:	005b      	lsls	r3, r3, #1
 8104d02:	4413      	add	r3, r2
 8104d04:	3b1e      	subs	r3, #30
 8104d06:	051b      	lsls	r3, r3, #20
 8104d08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8104d0c:	430b      	orrs	r3, r1
 8104d0e:	683a      	ldr	r2, [r7, #0]
 8104d10:	6892      	ldr	r2, [r2, #8]
 8104d12:	4619      	mov	r1, r3
 8104d14:	f7ff f88b 	bl	8103e2e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8104d18:	683b      	ldr	r3, [r7, #0]
 8104d1a:	681b      	ldr	r3, [r3, #0]
 8104d1c:	2b00      	cmp	r3, #0
 8104d1e:	f280 80cf 	bge.w	8104ec0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8104d22:	687b      	ldr	r3, [r7, #4]
 8104d24:	681b      	ldr	r3, [r3, #0]
 8104d26:	4a06      	ldr	r2, [pc, #24]	@ (8104d40 <HAL_ADC_ConfigChannel+0x4fc>)
 8104d28:	4293      	cmp	r3, r2
 8104d2a:	d004      	beq.n	8104d36 <HAL_ADC_ConfigChannel+0x4f2>
 8104d2c:	687b      	ldr	r3, [r7, #4]
 8104d2e:	681b      	ldr	r3, [r3, #0]
 8104d30:	4a04      	ldr	r2, [pc, #16]	@ (8104d44 <HAL_ADC_ConfigChannel+0x500>)
 8104d32:	4293      	cmp	r3, r2
 8104d34:	d10a      	bne.n	8104d4c <HAL_ADC_ConfigChannel+0x508>
 8104d36:	4b04      	ldr	r3, [pc, #16]	@ (8104d48 <HAL_ADC_ConfigChannel+0x504>)
 8104d38:	e009      	b.n	8104d4e <HAL_ADC_ConfigChannel+0x50a>
 8104d3a:	bf00      	nop
 8104d3c:	47ff0000 	.word	0x47ff0000
 8104d40:	40022000 	.word	0x40022000
 8104d44:	40022100 	.word	0x40022100
 8104d48:	40022300 	.word	0x40022300
 8104d4c:	4b61      	ldr	r3, [pc, #388]	@ (8104ed4 <HAL_ADC_ConfigChannel+0x690>)
 8104d4e:	4618      	mov	r0, r3
 8104d50:	f7fe ffcc 	bl	8103cec <LL_ADC_GetCommonPathInternalCh>
 8104d54:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8104d56:	687b      	ldr	r3, [r7, #4]
 8104d58:	681b      	ldr	r3, [r3, #0]
 8104d5a:	4a5f      	ldr	r2, [pc, #380]	@ (8104ed8 <HAL_ADC_ConfigChannel+0x694>)
 8104d5c:	4293      	cmp	r3, r2
 8104d5e:	d004      	beq.n	8104d6a <HAL_ADC_ConfigChannel+0x526>
 8104d60:	687b      	ldr	r3, [r7, #4]
 8104d62:	681b      	ldr	r3, [r3, #0]
 8104d64:	4a5d      	ldr	r2, [pc, #372]	@ (8104edc <HAL_ADC_ConfigChannel+0x698>)
 8104d66:	4293      	cmp	r3, r2
 8104d68:	d10e      	bne.n	8104d88 <HAL_ADC_ConfigChannel+0x544>
 8104d6a:	485b      	ldr	r0, [pc, #364]	@ (8104ed8 <HAL_ADC_ConfigChannel+0x694>)
 8104d6c:	f7ff f940 	bl	8103ff0 <LL_ADC_IsEnabled>
 8104d70:	4604      	mov	r4, r0
 8104d72:	485a      	ldr	r0, [pc, #360]	@ (8104edc <HAL_ADC_ConfigChannel+0x698>)
 8104d74:	f7ff f93c 	bl	8103ff0 <LL_ADC_IsEnabled>
 8104d78:	4603      	mov	r3, r0
 8104d7a:	4323      	orrs	r3, r4
 8104d7c:	2b00      	cmp	r3, #0
 8104d7e:	bf0c      	ite	eq
 8104d80:	2301      	moveq	r3, #1
 8104d82:	2300      	movne	r3, #0
 8104d84:	b2db      	uxtb	r3, r3
 8104d86:	e008      	b.n	8104d9a <HAL_ADC_ConfigChannel+0x556>
 8104d88:	4855      	ldr	r0, [pc, #340]	@ (8104ee0 <HAL_ADC_ConfigChannel+0x69c>)
 8104d8a:	f7ff f931 	bl	8103ff0 <LL_ADC_IsEnabled>
 8104d8e:	4603      	mov	r3, r0
 8104d90:	2b00      	cmp	r3, #0
 8104d92:	bf0c      	ite	eq
 8104d94:	2301      	moveq	r3, #1
 8104d96:	2300      	movne	r3, #0
 8104d98:	b2db      	uxtb	r3, r3
 8104d9a:	2b00      	cmp	r3, #0
 8104d9c:	d07d      	beq.n	8104e9a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8104d9e:	683b      	ldr	r3, [r7, #0]
 8104da0:	681b      	ldr	r3, [r3, #0]
 8104da2:	4a50      	ldr	r2, [pc, #320]	@ (8104ee4 <HAL_ADC_ConfigChannel+0x6a0>)
 8104da4:	4293      	cmp	r3, r2
 8104da6:	d130      	bne.n	8104e0a <HAL_ADC_ConfigChannel+0x5c6>
 8104da8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104daa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8104dae:	2b00      	cmp	r3, #0
 8104db0:	d12b      	bne.n	8104e0a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8104db2:	687b      	ldr	r3, [r7, #4]
 8104db4:	681b      	ldr	r3, [r3, #0]
 8104db6:	4a4a      	ldr	r2, [pc, #296]	@ (8104ee0 <HAL_ADC_ConfigChannel+0x69c>)
 8104db8:	4293      	cmp	r3, r2
 8104dba:	f040 8081 	bne.w	8104ec0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8104dbe:	687b      	ldr	r3, [r7, #4]
 8104dc0:	681b      	ldr	r3, [r3, #0]
 8104dc2:	4a45      	ldr	r2, [pc, #276]	@ (8104ed8 <HAL_ADC_ConfigChannel+0x694>)
 8104dc4:	4293      	cmp	r3, r2
 8104dc6:	d004      	beq.n	8104dd2 <HAL_ADC_ConfigChannel+0x58e>
 8104dc8:	687b      	ldr	r3, [r7, #4]
 8104dca:	681b      	ldr	r3, [r3, #0]
 8104dcc:	4a43      	ldr	r2, [pc, #268]	@ (8104edc <HAL_ADC_ConfigChannel+0x698>)
 8104dce:	4293      	cmp	r3, r2
 8104dd0:	d101      	bne.n	8104dd6 <HAL_ADC_ConfigChannel+0x592>
 8104dd2:	4a45      	ldr	r2, [pc, #276]	@ (8104ee8 <HAL_ADC_ConfigChannel+0x6a4>)
 8104dd4:	e000      	b.n	8104dd8 <HAL_ADC_ConfigChannel+0x594>
 8104dd6:	4a3f      	ldr	r2, [pc, #252]	@ (8104ed4 <HAL_ADC_ConfigChannel+0x690>)
 8104dd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104dda:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8104dde:	4619      	mov	r1, r3
 8104de0:	4610      	mov	r0, r2
 8104de2:	f7fe ff70 	bl	8103cc6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8104de6:	4b41      	ldr	r3, [pc, #260]	@ (8104eec <HAL_ADC_ConfigChannel+0x6a8>)
 8104de8:	681b      	ldr	r3, [r3, #0]
 8104dea:	099b      	lsrs	r3, r3, #6
 8104dec:	4a40      	ldr	r2, [pc, #256]	@ (8104ef0 <HAL_ADC_ConfigChannel+0x6ac>)
 8104dee:	fba2 2303 	umull	r2, r3, r2, r3
 8104df2:	099b      	lsrs	r3, r3, #6
 8104df4:	3301      	adds	r3, #1
 8104df6:	005b      	lsls	r3, r3, #1
 8104df8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8104dfa:	e002      	b.n	8104e02 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8104dfc:	68bb      	ldr	r3, [r7, #8]
 8104dfe:	3b01      	subs	r3, #1
 8104e00:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8104e02:	68bb      	ldr	r3, [r7, #8]
 8104e04:	2b00      	cmp	r3, #0
 8104e06:	d1f9      	bne.n	8104dfc <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8104e08:	e05a      	b.n	8104ec0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8104e0a:	683b      	ldr	r3, [r7, #0]
 8104e0c:	681b      	ldr	r3, [r3, #0]
 8104e0e:	4a39      	ldr	r2, [pc, #228]	@ (8104ef4 <HAL_ADC_ConfigChannel+0x6b0>)
 8104e10:	4293      	cmp	r3, r2
 8104e12:	d11e      	bne.n	8104e52 <HAL_ADC_ConfigChannel+0x60e>
 8104e14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104e16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8104e1a:	2b00      	cmp	r3, #0
 8104e1c:	d119      	bne.n	8104e52 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8104e1e:	687b      	ldr	r3, [r7, #4]
 8104e20:	681b      	ldr	r3, [r3, #0]
 8104e22:	4a2f      	ldr	r2, [pc, #188]	@ (8104ee0 <HAL_ADC_ConfigChannel+0x69c>)
 8104e24:	4293      	cmp	r3, r2
 8104e26:	d14b      	bne.n	8104ec0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8104e28:	687b      	ldr	r3, [r7, #4]
 8104e2a:	681b      	ldr	r3, [r3, #0]
 8104e2c:	4a2a      	ldr	r2, [pc, #168]	@ (8104ed8 <HAL_ADC_ConfigChannel+0x694>)
 8104e2e:	4293      	cmp	r3, r2
 8104e30:	d004      	beq.n	8104e3c <HAL_ADC_ConfigChannel+0x5f8>
 8104e32:	687b      	ldr	r3, [r7, #4]
 8104e34:	681b      	ldr	r3, [r3, #0]
 8104e36:	4a29      	ldr	r2, [pc, #164]	@ (8104edc <HAL_ADC_ConfigChannel+0x698>)
 8104e38:	4293      	cmp	r3, r2
 8104e3a:	d101      	bne.n	8104e40 <HAL_ADC_ConfigChannel+0x5fc>
 8104e3c:	4a2a      	ldr	r2, [pc, #168]	@ (8104ee8 <HAL_ADC_ConfigChannel+0x6a4>)
 8104e3e:	e000      	b.n	8104e42 <HAL_ADC_ConfigChannel+0x5fe>
 8104e40:	4a24      	ldr	r2, [pc, #144]	@ (8104ed4 <HAL_ADC_ConfigChannel+0x690>)
 8104e42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104e44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8104e48:	4619      	mov	r1, r3
 8104e4a:	4610      	mov	r0, r2
 8104e4c:	f7fe ff3b 	bl	8103cc6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8104e50:	e036      	b.n	8104ec0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8104e52:	683b      	ldr	r3, [r7, #0]
 8104e54:	681b      	ldr	r3, [r3, #0]
 8104e56:	4a28      	ldr	r2, [pc, #160]	@ (8104ef8 <HAL_ADC_ConfigChannel+0x6b4>)
 8104e58:	4293      	cmp	r3, r2
 8104e5a:	d131      	bne.n	8104ec0 <HAL_ADC_ConfigChannel+0x67c>
 8104e5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8104e62:	2b00      	cmp	r3, #0
 8104e64:	d12c      	bne.n	8104ec0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8104e66:	687b      	ldr	r3, [r7, #4]
 8104e68:	681b      	ldr	r3, [r3, #0]
 8104e6a:	4a1d      	ldr	r2, [pc, #116]	@ (8104ee0 <HAL_ADC_ConfigChannel+0x69c>)
 8104e6c:	4293      	cmp	r3, r2
 8104e6e:	d127      	bne.n	8104ec0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8104e70:	687b      	ldr	r3, [r7, #4]
 8104e72:	681b      	ldr	r3, [r3, #0]
 8104e74:	4a18      	ldr	r2, [pc, #96]	@ (8104ed8 <HAL_ADC_ConfigChannel+0x694>)
 8104e76:	4293      	cmp	r3, r2
 8104e78:	d004      	beq.n	8104e84 <HAL_ADC_ConfigChannel+0x640>
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	681b      	ldr	r3, [r3, #0]
 8104e7e:	4a17      	ldr	r2, [pc, #92]	@ (8104edc <HAL_ADC_ConfigChannel+0x698>)
 8104e80:	4293      	cmp	r3, r2
 8104e82:	d101      	bne.n	8104e88 <HAL_ADC_ConfigChannel+0x644>
 8104e84:	4a18      	ldr	r2, [pc, #96]	@ (8104ee8 <HAL_ADC_ConfigChannel+0x6a4>)
 8104e86:	e000      	b.n	8104e8a <HAL_ADC_ConfigChannel+0x646>
 8104e88:	4a12      	ldr	r2, [pc, #72]	@ (8104ed4 <HAL_ADC_ConfigChannel+0x690>)
 8104e8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104e8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8104e90:	4619      	mov	r1, r3
 8104e92:	4610      	mov	r0, r2
 8104e94:	f7fe ff17 	bl	8103cc6 <LL_ADC_SetCommonPathInternalCh>
 8104e98:	e012      	b.n	8104ec0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104e9a:	687b      	ldr	r3, [r7, #4]
 8104e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104e9e:	f043 0220 	orr.w	r2, r3, #32
 8104ea2:	687b      	ldr	r3, [r7, #4]
 8104ea4:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8104ea6:	2301      	movs	r3, #1
 8104ea8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8104eac:	e008      	b.n	8104ec0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104eae:	687b      	ldr	r3, [r7, #4]
 8104eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104eb2:	f043 0220 	orr.w	r2, r3, #32
 8104eb6:	687b      	ldr	r3, [r7, #4]
 8104eb8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8104eba:	2301      	movs	r3, #1
 8104ebc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8104ec0:	687b      	ldr	r3, [r7, #4]
 8104ec2:	2200      	movs	r2, #0
 8104ec4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8104ec8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8104ecc:	4618      	mov	r0, r3
 8104ece:	3784      	adds	r7, #132	@ 0x84
 8104ed0:	46bd      	mov	sp, r7
 8104ed2:	bd90      	pop	{r4, r7, pc}
 8104ed4:	58026300 	.word	0x58026300
 8104ed8:	40022000 	.word	0x40022000
 8104edc:	40022100 	.word	0x40022100
 8104ee0:	58026000 	.word	0x58026000
 8104ee4:	cb840000 	.word	0xcb840000
 8104ee8:	40022300 	.word	0x40022300
 8104eec:	10000000 	.word	0x10000000
 8104ef0:	053e2d63 	.word	0x053e2d63
 8104ef4:	c7520000 	.word	0xc7520000
 8104ef8:	cfb80000 	.word	0xcfb80000

08104efc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8104efc:	b580      	push	{r7, lr}
 8104efe:	b088      	sub	sp, #32
 8104f00:	af00      	add	r7, sp, #0
 8104f02:	6078      	str	r0, [r7, #4]
 8104f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8104f06:	2300      	movs	r3, #0
 8104f08:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8104f0a:	683b      	ldr	r3, [r7, #0]
 8104f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8104f0e:	687b      	ldr	r3, [r7, #4]
 8104f10:	681b      	ldr	r3, [r3, #0]
 8104f12:	4618      	mov	r0, r3
 8104f14:	f7ff f8ba 	bl	810408c <LL_ADC_REG_IsConversionOngoing>
 8104f18:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8104f1a:	687b      	ldr	r3, [r7, #4]
 8104f1c:	681b      	ldr	r3, [r3, #0]
 8104f1e:	4618      	mov	r0, r3
 8104f20:	f7ff f8db 	bl	81040da <LL_ADC_INJ_IsConversionOngoing>
 8104f24:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8104f26:	693b      	ldr	r3, [r7, #16]
 8104f28:	2b00      	cmp	r3, #0
 8104f2a:	d103      	bne.n	8104f34 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8104f2c:	68fb      	ldr	r3, [r7, #12]
 8104f2e:	2b00      	cmp	r3, #0
 8104f30:	f000 8098 	beq.w	8105064 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8104f34:	687b      	ldr	r3, [r7, #4]
 8104f36:	681b      	ldr	r3, [r3, #0]
 8104f38:	68db      	ldr	r3, [r3, #12]
 8104f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104f3e:	2b00      	cmp	r3, #0
 8104f40:	d02a      	beq.n	8104f98 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8104f42:	687b      	ldr	r3, [r7, #4]
 8104f44:	7d5b      	ldrb	r3, [r3, #21]
 8104f46:	2b01      	cmp	r3, #1
 8104f48:	d126      	bne.n	8104f98 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8104f4a:	687b      	ldr	r3, [r7, #4]
 8104f4c:	7d1b      	ldrb	r3, [r3, #20]
 8104f4e:	2b01      	cmp	r3, #1
 8104f50:	d122      	bne.n	8104f98 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8104f52:	2301      	movs	r3, #1
 8104f54:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8104f56:	e014      	b.n	8104f82 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8104f58:	69fb      	ldr	r3, [r7, #28]
 8104f5a:	4a45      	ldr	r2, [pc, #276]	@ (8105070 <ADC_ConversionStop+0x174>)
 8104f5c:	4293      	cmp	r3, r2
 8104f5e:	d90d      	bls.n	8104f7c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8104f60:	687b      	ldr	r3, [r7, #4]
 8104f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104f64:	f043 0210 	orr.w	r2, r3, #16
 8104f68:	687b      	ldr	r3, [r7, #4]
 8104f6a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8104f6c:	687b      	ldr	r3, [r7, #4]
 8104f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104f70:	f043 0201 	orr.w	r2, r3, #1
 8104f74:	687b      	ldr	r3, [r7, #4]
 8104f76:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8104f78:	2301      	movs	r3, #1
 8104f7a:	e074      	b.n	8105066 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8104f7c:	69fb      	ldr	r3, [r7, #28]
 8104f7e:	3301      	adds	r3, #1
 8104f80:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8104f82:	687b      	ldr	r3, [r7, #4]
 8104f84:	681b      	ldr	r3, [r3, #0]
 8104f86:	681b      	ldr	r3, [r3, #0]
 8104f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104f8c:	2b40      	cmp	r3, #64	@ 0x40
 8104f8e:	d1e3      	bne.n	8104f58 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8104f90:	687b      	ldr	r3, [r7, #4]
 8104f92:	681b      	ldr	r3, [r3, #0]
 8104f94:	2240      	movs	r2, #64	@ 0x40
 8104f96:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8104f98:	69bb      	ldr	r3, [r7, #24]
 8104f9a:	2b02      	cmp	r3, #2
 8104f9c:	d014      	beq.n	8104fc8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8104f9e:	687b      	ldr	r3, [r7, #4]
 8104fa0:	681b      	ldr	r3, [r3, #0]
 8104fa2:	4618      	mov	r0, r3
 8104fa4:	f7ff f872 	bl	810408c <LL_ADC_REG_IsConversionOngoing>
 8104fa8:	4603      	mov	r3, r0
 8104faa:	2b00      	cmp	r3, #0
 8104fac:	d00c      	beq.n	8104fc8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8104fae:	687b      	ldr	r3, [r7, #4]
 8104fb0:	681b      	ldr	r3, [r3, #0]
 8104fb2:	4618      	mov	r0, r3
 8104fb4:	f7ff f82f 	bl	8104016 <LL_ADC_IsDisableOngoing>
 8104fb8:	4603      	mov	r3, r0
 8104fba:	2b00      	cmp	r3, #0
 8104fbc:	d104      	bne.n	8104fc8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8104fbe:	687b      	ldr	r3, [r7, #4]
 8104fc0:	681b      	ldr	r3, [r3, #0]
 8104fc2:	4618      	mov	r0, r3
 8104fc4:	f7ff f84e 	bl	8104064 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8104fc8:	69bb      	ldr	r3, [r7, #24]
 8104fca:	2b01      	cmp	r3, #1
 8104fcc:	d014      	beq.n	8104ff8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8104fce:	687b      	ldr	r3, [r7, #4]
 8104fd0:	681b      	ldr	r3, [r3, #0]
 8104fd2:	4618      	mov	r0, r3
 8104fd4:	f7ff f881 	bl	81040da <LL_ADC_INJ_IsConversionOngoing>
 8104fd8:	4603      	mov	r3, r0
 8104fda:	2b00      	cmp	r3, #0
 8104fdc:	d00c      	beq.n	8104ff8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8104fde:	687b      	ldr	r3, [r7, #4]
 8104fe0:	681b      	ldr	r3, [r3, #0]
 8104fe2:	4618      	mov	r0, r3
 8104fe4:	f7ff f817 	bl	8104016 <LL_ADC_IsDisableOngoing>
 8104fe8:	4603      	mov	r3, r0
 8104fea:	2b00      	cmp	r3, #0
 8104fec:	d104      	bne.n	8104ff8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8104fee:	687b      	ldr	r3, [r7, #4]
 8104ff0:	681b      	ldr	r3, [r3, #0]
 8104ff2:	4618      	mov	r0, r3
 8104ff4:	f7ff f85d 	bl	81040b2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8104ff8:	69bb      	ldr	r3, [r7, #24]
 8104ffa:	2b02      	cmp	r3, #2
 8104ffc:	d005      	beq.n	810500a <ADC_ConversionStop+0x10e>
 8104ffe:	69bb      	ldr	r3, [r7, #24]
 8105000:	2b03      	cmp	r3, #3
 8105002:	d105      	bne.n	8105010 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8105004:	230c      	movs	r3, #12
 8105006:	617b      	str	r3, [r7, #20]
        break;
 8105008:	e005      	b.n	8105016 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 810500a:	2308      	movs	r3, #8
 810500c:	617b      	str	r3, [r7, #20]
        break;
 810500e:	e002      	b.n	8105016 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8105010:	2304      	movs	r3, #4
 8105012:	617b      	str	r3, [r7, #20]
        break;
 8105014:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8105016:	f7fe fe07 	bl	8103c28 <HAL_GetTick>
 810501a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 810501c:	e01b      	b.n	8105056 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 810501e:	f7fe fe03 	bl	8103c28 <HAL_GetTick>
 8105022:	4602      	mov	r2, r0
 8105024:	68bb      	ldr	r3, [r7, #8]
 8105026:	1ad3      	subs	r3, r2, r3
 8105028:	2b05      	cmp	r3, #5
 810502a:	d914      	bls.n	8105056 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 810502c:	687b      	ldr	r3, [r7, #4]
 810502e:	681b      	ldr	r3, [r3, #0]
 8105030:	689a      	ldr	r2, [r3, #8]
 8105032:	697b      	ldr	r3, [r7, #20]
 8105034:	4013      	ands	r3, r2
 8105036:	2b00      	cmp	r3, #0
 8105038:	d00d      	beq.n	8105056 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810503a:	687b      	ldr	r3, [r7, #4]
 810503c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810503e:	f043 0210 	orr.w	r2, r3, #16
 8105042:	687b      	ldr	r3, [r7, #4]
 8105044:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8105046:	687b      	ldr	r3, [r7, #4]
 8105048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810504a:	f043 0201 	orr.w	r2, r3, #1
 810504e:	687b      	ldr	r3, [r7, #4]
 8105050:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8105052:	2301      	movs	r3, #1
 8105054:	e007      	b.n	8105066 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8105056:	687b      	ldr	r3, [r7, #4]
 8105058:	681b      	ldr	r3, [r3, #0]
 810505a:	689a      	ldr	r2, [r3, #8]
 810505c:	697b      	ldr	r3, [r7, #20]
 810505e:	4013      	ands	r3, r2
 8105060:	2b00      	cmp	r3, #0
 8105062:	d1dc      	bne.n	810501e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8105064:	2300      	movs	r3, #0
}
 8105066:	4618      	mov	r0, r3
 8105068:	3720      	adds	r7, #32
 810506a:	46bd      	mov	sp, r7
 810506c:	bd80      	pop	{r7, pc}
 810506e:	bf00      	nop
 8105070:	000cdbff 	.word	0x000cdbff

08105074 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8105074:	b580      	push	{r7, lr}
 8105076:	b084      	sub	sp, #16
 8105078:	af00      	add	r7, sp, #0
 810507a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810507c:	687b      	ldr	r3, [r7, #4]
 810507e:	681b      	ldr	r3, [r3, #0]
 8105080:	4618      	mov	r0, r3
 8105082:	f7fe ffb5 	bl	8103ff0 <LL_ADC_IsEnabled>
 8105086:	4603      	mov	r3, r0
 8105088:	2b00      	cmp	r3, #0
 810508a:	d16e      	bne.n	810516a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 810508c:	687b      	ldr	r3, [r7, #4]
 810508e:	681b      	ldr	r3, [r3, #0]
 8105090:	689a      	ldr	r2, [r3, #8]
 8105092:	4b38      	ldr	r3, [pc, #224]	@ (8105174 <ADC_Enable+0x100>)
 8105094:	4013      	ands	r3, r2
 8105096:	2b00      	cmp	r3, #0
 8105098:	d00d      	beq.n	81050b6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810509a:	687b      	ldr	r3, [r7, #4]
 810509c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810509e:	f043 0210 	orr.w	r2, r3, #16
 81050a2:	687b      	ldr	r3, [r7, #4]
 81050a4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81050a6:	687b      	ldr	r3, [r7, #4]
 81050a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81050aa:	f043 0201 	orr.w	r2, r3, #1
 81050ae:	687b      	ldr	r3, [r7, #4]
 81050b0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 81050b2:	2301      	movs	r3, #1
 81050b4:	e05a      	b.n	810516c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 81050b6:	687b      	ldr	r3, [r7, #4]
 81050b8:	681b      	ldr	r3, [r3, #0]
 81050ba:	4618      	mov	r0, r3
 81050bc:	f7fe ff70 	bl	8103fa0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 81050c0:	f7fe fdb2 	bl	8103c28 <HAL_GetTick>
 81050c4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81050c6:	687b      	ldr	r3, [r7, #4]
 81050c8:	681b      	ldr	r3, [r3, #0]
 81050ca:	4a2b      	ldr	r2, [pc, #172]	@ (8105178 <ADC_Enable+0x104>)
 81050cc:	4293      	cmp	r3, r2
 81050ce:	d004      	beq.n	81050da <ADC_Enable+0x66>
 81050d0:	687b      	ldr	r3, [r7, #4]
 81050d2:	681b      	ldr	r3, [r3, #0]
 81050d4:	4a29      	ldr	r2, [pc, #164]	@ (810517c <ADC_Enable+0x108>)
 81050d6:	4293      	cmp	r3, r2
 81050d8:	d101      	bne.n	81050de <ADC_Enable+0x6a>
 81050da:	4b29      	ldr	r3, [pc, #164]	@ (8105180 <ADC_Enable+0x10c>)
 81050dc:	e000      	b.n	81050e0 <ADC_Enable+0x6c>
 81050de:	4b29      	ldr	r3, [pc, #164]	@ (8105184 <ADC_Enable+0x110>)
 81050e0:	4618      	mov	r0, r3
 81050e2:	f7fe fef3 	bl	8103ecc <LL_ADC_GetMultimode>
 81050e6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81050e8:	687b      	ldr	r3, [r7, #4]
 81050ea:	681b      	ldr	r3, [r3, #0]
 81050ec:	4a23      	ldr	r2, [pc, #140]	@ (810517c <ADC_Enable+0x108>)
 81050ee:	4293      	cmp	r3, r2
 81050f0:	d002      	beq.n	81050f8 <ADC_Enable+0x84>
 81050f2:	687b      	ldr	r3, [r7, #4]
 81050f4:	681b      	ldr	r3, [r3, #0]
 81050f6:	e000      	b.n	81050fa <ADC_Enable+0x86>
 81050f8:	4b1f      	ldr	r3, [pc, #124]	@ (8105178 <ADC_Enable+0x104>)
 81050fa:	687a      	ldr	r2, [r7, #4]
 81050fc:	6812      	ldr	r2, [r2, #0]
 81050fe:	4293      	cmp	r3, r2
 8105100:	d02c      	beq.n	810515c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8105102:	68bb      	ldr	r3, [r7, #8]
 8105104:	2b00      	cmp	r3, #0
 8105106:	d130      	bne.n	810516a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8105108:	e028      	b.n	810515c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810510a:	687b      	ldr	r3, [r7, #4]
 810510c:	681b      	ldr	r3, [r3, #0]
 810510e:	4618      	mov	r0, r3
 8105110:	f7fe ff6e 	bl	8103ff0 <LL_ADC_IsEnabled>
 8105114:	4603      	mov	r3, r0
 8105116:	2b00      	cmp	r3, #0
 8105118:	d104      	bne.n	8105124 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 810511a:	687b      	ldr	r3, [r7, #4]
 810511c:	681b      	ldr	r3, [r3, #0]
 810511e:	4618      	mov	r0, r3
 8105120:	f7fe ff3e 	bl	8103fa0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8105124:	f7fe fd80 	bl	8103c28 <HAL_GetTick>
 8105128:	4602      	mov	r2, r0
 810512a:	68fb      	ldr	r3, [r7, #12]
 810512c:	1ad3      	subs	r3, r2, r3
 810512e:	2b02      	cmp	r3, #2
 8105130:	d914      	bls.n	810515c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8105132:	687b      	ldr	r3, [r7, #4]
 8105134:	681b      	ldr	r3, [r3, #0]
 8105136:	681b      	ldr	r3, [r3, #0]
 8105138:	f003 0301 	and.w	r3, r3, #1
 810513c:	2b01      	cmp	r3, #1
 810513e:	d00d      	beq.n	810515c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8105140:	687b      	ldr	r3, [r7, #4]
 8105142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105144:	f043 0210 	orr.w	r2, r3, #16
 8105148:	687b      	ldr	r3, [r7, #4]
 810514a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810514c:	687b      	ldr	r3, [r7, #4]
 810514e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105150:	f043 0201 	orr.w	r2, r3, #1
 8105154:	687b      	ldr	r3, [r7, #4]
 8105156:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8105158:	2301      	movs	r3, #1
 810515a:	e007      	b.n	810516c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 810515c:	687b      	ldr	r3, [r7, #4]
 810515e:	681b      	ldr	r3, [r3, #0]
 8105160:	681b      	ldr	r3, [r3, #0]
 8105162:	f003 0301 	and.w	r3, r3, #1
 8105166:	2b01      	cmp	r3, #1
 8105168:	d1cf      	bne.n	810510a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 810516a:	2300      	movs	r3, #0
}
 810516c:	4618      	mov	r0, r3
 810516e:	3710      	adds	r7, #16
 8105170:	46bd      	mov	sp, r7
 8105172:	bd80      	pop	{r7, pc}
 8105174:	8000003f 	.word	0x8000003f
 8105178:	40022000 	.word	0x40022000
 810517c:	40022100 	.word	0x40022100
 8105180:	40022300 	.word	0x40022300
 8105184:	58026300 	.word	0x58026300

08105188 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8105188:	b580      	push	{r7, lr}
 810518a:	b084      	sub	sp, #16
 810518c:	af00      	add	r7, sp, #0
 810518e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8105190:	687b      	ldr	r3, [r7, #4]
 8105192:	681b      	ldr	r3, [r3, #0]
 8105194:	4618      	mov	r0, r3
 8105196:	f7fe ff3e 	bl	8104016 <LL_ADC_IsDisableOngoing>
 810519a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 810519c:	687b      	ldr	r3, [r7, #4]
 810519e:	681b      	ldr	r3, [r3, #0]
 81051a0:	4618      	mov	r0, r3
 81051a2:	f7fe ff25 	bl	8103ff0 <LL_ADC_IsEnabled>
 81051a6:	4603      	mov	r3, r0
 81051a8:	2b00      	cmp	r3, #0
 81051aa:	d047      	beq.n	810523c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 81051ac:	68fb      	ldr	r3, [r7, #12]
 81051ae:	2b00      	cmp	r3, #0
 81051b0:	d144      	bne.n	810523c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 81051b2:	687b      	ldr	r3, [r7, #4]
 81051b4:	681b      	ldr	r3, [r3, #0]
 81051b6:	689b      	ldr	r3, [r3, #8]
 81051b8:	f003 030d 	and.w	r3, r3, #13
 81051bc:	2b01      	cmp	r3, #1
 81051be:	d10c      	bne.n	81051da <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 81051c0:	687b      	ldr	r3, [r7, #4]
 81051c2:	681b      	ldr	r3, [r3, #0]
 81051c4:	4618      	mov	r0, r3
 81051c6:	f7fe feff 	bl	8103fc8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 81051ca:	687b      	ldr	r3, [r7, #4]
 81051cc:	681b      	ldr	r3, [r3, #0]
 81051ce:	2203      	movs	r2, #3
 81051d0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 81051d2:	f7fe fd29 	bl	8103c28 <HAL_GetTick>
 81051d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 81051d8:	e029      	b.n	810522e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81051da:	687b      	ldr	r3, [r7, #4]
 81051dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81051de:	f043 0210 	orr.w	r2, r3, #16
 81051e2:	687b      	ldr	r3, [r7, #4]
 81051e4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81051e6:	687b      	ldr	r3, [r7, #4]
 81051e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81051ea:	f043 0201 	orr.w	r2, r3, #1
 81051ee:	687b      	ldr	r3, [r7, #4]
 81051f0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 81051f2:	2301      	movs	r3, #1
 81051f4:	e023      	b.n	810523e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 81051f6:	f7fe fd17 	bl	8103c28 <HAL_GetTick>
 81051fa:	4602      	mov	r2, r0
 81051fc:	68bb      	ldr	r3, [r7, #8]
 81051fe:	1ad3      	subs	r3, r2, r3
 8105200:	2b02      	cmp	r3, #2
 8105202:	d914      	bls.n	810522e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8105204:	687b      	ldr	r3, [r7, #4]
 8105206:	681b      	ldr	r3, [r3, #0]
 8105208:	689b      	ldr	r3, [r3, #8]
 810520a:	f003 0301 	and.w	r3, r3, #1
 810520e:	2b00      	cmp	r3, #0
 8105210:	d00d      	beq.n	810522e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8105212:	687b      	ldr	r3, [r7, #4]
 8105214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105216:	f043 0210 	orr.w	r2, r3, #16
 810521a:	687b      	ldr	r3, [r7, #4]
 810521c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810521e:	687b      	ldr	r3, [r7, #4]
 8105220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105222:	f043 0201 	orr.w	r2, r3, #1
 8105226:	687b      	ldr	r3, [r7, #4]
 8105228:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 810522a:	2301      	movs	r3, #1
 810522c:	e007      	b.n	810523e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 810522e:	687b      	ldr	r3, [r7, #4]
 8105230:	681b      	ldr	r3, [r3, #0]
 8105232:	689b      	ldr	r3, [r3, #8]
 8105234:	f003 0301 	and.w	r3, r3, #1
 8105238:	2b00      	cmp	r3, #0
 810523a:	d1dc      	bne.n	81051f6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 810523c:	2300      	movs	r3, #0
}
 810523e:	4618      	mov	r0, r3
 8105240:	3710      	adds	r7, #16
 8105242:	46bd      	mov	sp, r7
 8105244:	bd80      	pop	{r7, pc}
	...

08105248 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8105248:	b580      	push	{r7, lr}
 810524a:	b084      	sub	sp, #16
 810524c:	af00      	add	r7, sp, #0
 810524e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8105250:	687b      	ldr	r3, [r7, #4]
 8105252:	681b      	ldr	r3, [r3, #0]
 8105254:	4a7a      	ldr	r2, [pc, #488]	@ (8105440 <ADC_ConfigureBoostMode+0x1f8>)
 8105256:	4293      	cmp	r3, r2
 8105258:	d004      	beq.n	8105264 <ADC_ConfigureBoostMode+0x1c>
 810525a:	687b      	ldr	r3, [r7, #4]
 810525c:	681b      	ldr	r3, [r3, #0]
 810525e:	4a79      	ldr	r2, [pc, #484]	@ (8105444 <ADC_ConfigureBoostMode+0x1fc>)
 8105260:	4293      	cmp	r3, r2
 8105262:	d109      	bne.n	8105278 <ADC_ConfigureBoostMode+0x30>
 8105264:	4b78      	ldr	r3, [pc, #480]	@ (8105448 <ADC_ConfigureBoostMode+0x200>)
 8105266:	689b      	ldr	r3, [r3, #8]
 8105268:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810526c:	2b00      	cmp	r3, #0
 810526e:	bf14      	ite	ne
 8105270:	2301      	movne	r3, #1
 8105272:	2300      	moveq	r3, #0
 8105274:	b2db      	uxtb	r3, r3
 8105276:	e008      	b.n	810528a <ADC_ConfigureBoostMode+0x42>
 8105278:	4b74      	ldr	r3, [pc, #464]	@ (810544c <ADC_ConfigureBoostMode+0x204>)
 810527a:	689b      	ldr	r3, [r3, #8]
 810527c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8105280:	2b00      	cmp	r3, #0
 8105282:	bf14      	ite	ne
 8105284:	2301      	movne	r3, #1
 8105286:	2300      	moveq	r3, #0
 8105288:	b2db      	uxtb	r3, r3
 810528a:	2b00      	cmp	r3, #0
 810528c:	d01c      	beq.n	81052c8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 810528e:	f001 fd0d 	bl	8106cac <HAL_RCC_GetHCLKFreq>
 8105292:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8105294:	687b      	ldr	r3, [r7, #4]
 8105296:	685b      	ldr	r3, [r3, #4]
 8105298:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810529c:	d010      	beq.n	81052c0 <ADC_ConfigureBoostMode+0x78>
 810529e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81052a2:	d873      	bhi.n	810538c <ADC_ConfigureBoostMode+0x144>
 81052a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81052a8:	d002      	beq.n	81052b0 <ADC_ConfigureBoostMode+0x68>
 81052aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81052ae:	d16d      	bne.n	810538c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 81052b0:	687b      	ldr	r3, [r7, #4]
 81052b2:	685b      	ldr	r3, [r3, #4]
 81052b4:	0c1b      	lsrs	r3, r3, #16
 81052b6:	68fa      	ldr	r2, [r7, #12]
 81052b8:	fbb2 f3f3 	udiv	r3, r2, r3
 81052bc:	60fb      	str	r3, [r7, #12]
        break;
 81052be:	e068      	b.n	8105392 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 81052c0:	68fb      	ldr	r3, [r7, #12]
 81052c2:	089b      	lsrs	r3, r3, #2
 81052c4:	60fb      	str	r3, [r7, #12]
        break;
 81052c6:	e064      	b.n	8105392 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 81052c8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 81052cc:	f04f 0100 	mov.w	r1, #0
 81052d0:	f002 ff54 	bl	810817c <HAL_RCCEx_GetPeriphCLKFreq>
 81052d4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81052d6:	687b      	ldr	r3, [r7, #4]
 81052d8:	685b      	ldr	r3, [r3, #4]
 81052da:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 81052de:	d051      	beq.n	8105384 <ADC_ConfigureBoostMode+0x13c>
 81052e0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 81052e4:	d854      	bhi.n	8105390 <ADC_ConfigureBoostMode+0x148>
 81052e6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 81052ea:	d047      	beq.n	810537c <ADC_ConfigureBoostMode+0x134>
 81052ec:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 81052f0:	d84e      	bhi.n	8105390 <ADC_ConfigureBoostMode+0x148>
 81052f2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 81052f6:	d03d      	beq.n	8105374 <ADC_ConfigureBoostMode+0x12c>
 81052f8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 81052fc:	d848      	bhi.n	8105390 <ADC_ConfigureBoostMode+0x148>
 81052fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105302:	d033      	beq.n	810536c <ADC_ConfigureBoostMode+0x124>
 8105304:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105308:	d842      	bhi.n	8105390 <ADC_ConfigureBoostMode+0x148>
 810530a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 810530e:	d029      	beq.n	8105364 <ADC_ConfigureBoostMode+0x11c>
 8105310:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8105314:	d83c      	bhi.n	8105390 <ADC_ConfigureBoostMode+0x148>
 8105316:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 810531a:	d01a      	beq.n	8105352 <ADC_ConfigureBoostMode+0x10a>
 810531c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8105320:	d836      	bhi.n	8105390 <ADC_ConfigureBoostMode+0x148>
 8105322:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8105326:	d014      	beq.n	8105352 <ADC_ConfigureBoostMode+0x10a>
 8105328:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 810532c:	d830      	bhi.n	8105390 <ADC_ConfigureBoostMode+0x148>
 810532e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105332:	d00e      	beq.n	8105352 <ADC_ConfigureBoostMode+0x10a>
 8105334:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105338:	d82a      	bhi.n	8105390 <ADC_ConfigureBoostMode+0x148>
 810533a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 810533e:	d008      	beq.n	8105352 <ADC_ConfigureBoostMode+0x10a>
 8105340:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8105344:	d824      	bhi.n	8105390 <ADC_ConfigureBoostMode+0x148>
 8105346:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810534a:	d002      	beq.n	8105352 <ADC_ConfigureBoostMode+0x10a>
 810534c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8105350:	d11e      	bne.n	8105390 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8105352:	687b      	ldr	r3, [r7, #4]
 8105354:	685b      	ldr	r3, [r3, #4]
 8105356:	0c9b      	lsrs	r3, r3, #18
 8105358:	005b      	lsls	r3, r3, #1
 810535a:	68fa      	ldr	r2, [r7, #12]
 810535c:	fbb2 f3f3 	udiv	r3, r2, r3
 8105360:	60fb      	str	r3, [r7, #12]
        break;
 8105362:	e016      	b.n	8105392 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8105364:	68fb      	ldr	r3, [r7, #12]
 8105366:	091b      	lsrs	r3, r3, #4
 8105368:	60fb      	str	r3, [r7, #12]
        break;
 810536a:	e012      	b.n	8105392 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 810536c:	68fb      	ldr	r3, [r7, #12]
 810536e:	095b      	lsrs	r3, r3, #5
 8105370:	60fb      	str	r3, [r7, #12]
        break;
 8105372:	e00e      	b.n	8105392 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8105374:	68fb      	ldr	r3, [r7, #12]
 8105376:	099b      	lsrs	r3, r3, #6
 8105378:	60fb      	str	r3, [r7, #12]
        break;
 810537a:	e00a      	b.n	8105392 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 810537c:	68fb      	ldr	r3, [r7, #12]
 810537e:	09db      	lsrs	r3, r3, #7
 8105380:	60fb      	str	r3, [r7, #12]
        break;
 8105382:	e006      	b.n	8105392 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8105384:	68fb      	ldr	r3, [r7, #12]
 8105386:	0a1b      	lsrs	r3, r3, #8
 8105388:	60fb      	str	r3, [r7, #12]
        break;
 810538a:	e002      	b.n	8105392 <ADC_ConfigureBoostMode+0x14a>
        break;
 810538c:	bf00      	nop
 810538e:	e000      	b.n	8105392 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8105390:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8105392:	f7fe fc79 	bl	8103c88 <HAL_GetREVID>
 8105396:	4603      	mov	r3, r0
 8105398:	f241 0203 	movw	r2, #4099	@ 0x1003
 810539c:	4293      	cmp	r3, r2
 810539e:	d815      	bhi.n	81053cc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 81053a0:	68fb      	ldr	r3, [r7, #12]
 81053a2:	4a2b      	ldr	r2, [pc, #172]	@ (8105450 <ADC_ConfigureBoostMode+0x208>)
 81053a4:	4293      	cmp	r3, r2
 81053a6:	d908      	bls.n	81053ba <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81053a8:	687b      	ldr	r3, [r7, #4]
 81053aa:	681b      	ldr	r3, [r3, #0]
 81053ac:	689a      	ldr	r2, [r3, #8]
 81053ae:	687b      	ldr	r3, [r7, #4]
 81053b0:	681b      	ldr	r3, [r3, #0]
 81053b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 81053b6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 81053b8:	e03e      	b.n	8105438 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81053ba:	687b      	ldr	r3, [r7, #4]
 81053bc:	681b      	ldr	r3, [r3, #0]
 81053be:	689a      	ldr	r2, [r3, #8]
 81053c0:	687b      	ldr	r3, [r7, #4]
 81053c2:	681b      	ldr	r3, [r3, #0]
 81053c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81053c8:	609a      	str	r2, [r3, #8]
}
 81053ca:	e035      	b.n	8105438 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 81053cc:	68fb      	ldr	r3, [r7, #12]
 81053ce:	085b      	lsrs	r3, r3, #1
 81053d0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 81053d2:	68fb      	ldr	r3, [r7, #12]
 81053d4:	4a1f      	ldr	r2, [pc, #124]	@ (8105454 <ADC_ConfigureBoostMode+0x20c>)
 81053d6:	4293      	cmp	r3, r2
 81053d8:	d808      	bhi.n	81053ec <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 81053da:	687b      	ldr	r3, [r7, #4]
 81053dc:	681b      	ldr	r3, [r3, #0]
 81053de:	689a      	ldr	r2, [r3, #8]
 81053e0:	687b      	ldr	r3, [r7, #4]
 81053e2:	681b      	ldr	r3, [r3, #0]
 81053e4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 81053e8:	609a      	str	r2, [r3, #8]
}
 81053ea:	e025      	b.n	8105438 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 81053ec:	68fb      	ldr	r3, [r7, #12]
 81053ee:	4a1a      	ldr	r2, [pc, #104]	@ (8105458 <ADC_ConfigureBoostMode+0x210>)
 81053f0:	4293      	cmp	r3, r2
 81053f2:	d80a      	bhi.n	810540a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 81053f4:	687b      	ldr	r3, [r7, #4]
 81053f6:	681b      	ldr	r3, [r3, #0]
 81053f8:	689b      	ldr	r3, [r3, #8]
 81053fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 81053fe:	687b      	ldr	r3, [r7, #4]
 8105400:	681b      	ldr	r3, [r3, #0]
 8105402:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8105406:	609a      	str	r2, [r3, #8]
}
 8105408:	e016      	b.n	8105438 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 810540a:	68fb      	ldr	r3, [r7, #12]
 810540c:	4a13      	ldr	r2, [pc, #76]	@ (810545c <ADC_ConfigureBoostMode+0x214>)
 810540e:	4293      	cmp	r3, r2
 8105410:	d80a      	bhi.n	8105428 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8105412:	687b      	ldr	r3, [r7, #4]
 8105414:	681b      	ldr	r3, [r3, #0]
 8105416:	689b      	ldr	r3, [r3, #8]
 8105418:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810541c:	687b      	ldr	r3, [r7, #4]
 810541e:	681b      	ldr	r3, [r3, #0]
 8105420:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8105424:	609a      	str	r2, [r3, #8]
}
 8105426:	e007      	b.n	8105438 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8105428:	687b      	ldr	r3, [r7, #4]
 810542a:	681b      	ldr	r3, [r3, #0]
 810542c:	689a      	ldr	r2, [r3, #8]
 810542e:	687b      	ldr	r3, [r7, #4]
 8105430:	681b      	ldr	r3, [r3, #0]
 8105432:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8105436:	609a      	str	r2, [r3, #8]
}
 8105438:	bf00      	nop
 810543a:	3710      	adds	r7, #16
 810543c:	46bd      	mov	sp, r7
 810543e:	bd80      	pop	{r7, pc}
 8105440:	40022000 	.word	0x40022000
 8105444:	40022100 	.word	0x40022100
 8105448:	40022300 	.word	0x40022300
 810544c:	58026300 	.word	0x58026300
 8105450:	01312d00 	.word	0x01312d00
 8105454:	005f5e10 	.word	0x005f5e10
 8105458:	00bebc20 	.word	0x00bebc20
 810545c:	017d7840 	.word	0x017d7840

08105460 <LL_ADC_IsEnabled>:
{
 8105460:	b480      	push	{r7}
 8105462:	b083      	sub	sp, #12
 8105464:	af00      	add	r7, sp, #0
 8105466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8105468:	687b      	ldr	r3, [r7, #4]
 810546a:	689b      	ldr	r3, [r3, #8]
 810546c:	f003 0301 	and.w	r3, r3, #1
 8105470:	2b01      	cmp	r3, #1
 8105472:	d101      	bne.n	8105478 <LL_ADC_IsEnabled+0x18>
 8105474:	2301      	movs	r3, #1
 8105476:	e000      	b.n	810547a <LL_ADC_IsEnabled+0x1a>
 8105478:	2300      	movs	r3, #0
}
 810547a:	4618      	mov	r0, r3
 810547c:	370c      	adds	r7, #12
 810547e:	46bd      	mov	sp, r7
 8105480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105484:	4770      	bx	lr

08105486 <LL_ADC_REG_IsConversionOngoing>:
{
 8105486:	b480      	push	{r7}
 8105488:	b083      	sub	sp, #12
 810548a:	af00      	add	r7, sp, #0
 810548c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810548e:	687b      	ldr	r3, [r7, #4]
 8105490:	689b      	ldr	r3, [r3, #8]
 8105492:	f003 0304 	and.w	r3, r3, #4
 8105496:	2b04      	cmp	r3, #4
 8105498:	d101      	bne.n	810549e <LL_ADC_REG_IsConversionOngoing+0x18>
 810549a:	2301      	movs	r3, #1
 810549c:	e000      	b.n	81054a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 810549e:	2300      	movs	r3, #0
}
 81054a0:	4618      	mov	r0, r3
 81054a2:	370c      	adds	r7, #12
 81054a4:	46bd      	mov	sp, r7
 81054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054aa:	4770      	bx	lr

081054ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 81054ac:	b590      	push	{r4, r7, lr}
 81054ae:	b09f      	sub	sp, #124	@ 0x7c
 81054b0:	af00      	add	r7, sp, #0
 81054b2:	6078      	str	r0, [r7, #4]
 81054b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81054b6:	2300      	movs	r3, #0
 81054b8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81054bc:	687b      	ldr	r3, [r7, #4]
 81054be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 81054c2:	2b01      	cmp	r3, #1
 81054c4:	d101      	bne.n	81054ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 81054c6:	2302      	movs	r3, #2
 81054c8:	e0c4      	b.n	8105654 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 81054ca:	687b      	ldr	r3, [r7, #4]
 81054cc:	2201      	movs	r2, #1
 81054ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 81054d2:	2300      	movs	r3, #0
 81054d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 81054d6:	2300      	movs	r3, #0
 81054d8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 81054da:	687b      	ldr	r3, [r7, #4]
 81054dc:	681b      	ldr	r3, [r3, #0]
 81054de:	4a5f      	ldr	r2, [pc, #380]	@ (810565c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81054e0:	4293      	cmp	r3, r2
 81054e2:	d102      	bne.n	81054ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 81054e4:	4b5e      	ldr	r3, [pc, #376]	@ (8105660 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81054e6:	60bb      	str	r3, [r7, #8]
 81054e8:	e001      	b.n	81054ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 81054ea:	2300      	movs	r3, #0
 81054ec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 81054ee:	68bb      	ldr	r3, [r7, #8]
 81054f0:	2b00      	cmp	r3, #0
 81054f2:	d10b      	bne.n	810550c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81054f4:	687b      	ldr	r3, [r7, #4]
 81054f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81054f8:	f043 0220 	orr.w	r2, r3, #32
 81054fc:	687b      	ldr	r3, [r7, #4]
 81054fe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8105500:	687b      	ldr	r3, [r7, #4]
 8105502:	2200      	movs	r2, #0
 8105504:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8105508:	2301      	movs	r3, #1
 810550a:	e0a3      	b.n	8105654 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 810550c:	68bb      	ldr	r3, [r7, #8]
 810550e:	4618      	mov	r0, r3
 8105510:	f7ff ffb9 	bl	8105486 <LL_ADC_REG_IsConversionOngoing>
 8105514:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8105516:	687b      	ldr	r3, [r7, #4]
 8105518:	681b      	ldr	r3, [r3, #0]
 810551a:	4618      	mov	r0, r3
 810551c:	f7ff ffb3 	bl	8105486 <LL_ADC_REG_IsConversionOngoing>
 8105520:	4603      	mov	r3, r0
 8105522:	2b00      	cmp	r3, #0
 8105524:	f040 8085 	bne.w	8105632 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8105528:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810552a:	2b00      	cmp	r3, #0
 810552c:	f040 8081 	bne.w	8105632 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8105530:	687b      	ldr	r3, [r7, #4]
 8105532:	681b      	ldr	r3, [r3, #0]
 8105534:	4a49      	ldr	r2, [pc, #292]	@ (810565c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8105536:	4293      	cmp	r3, r2
 8105538:	d004      	beq.n	8105544 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 810553a:	687b      	ldr	r3, [r7, #4]
 810553c:	681b      	ldr	r3, [r3, #0]
 810553e:	4a48      	ldr	r2, [pc, #288]	@ (8105660 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105540:	4293      	cmp	r3, r2
 8105542:	d101      	bne.n	8105548 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8105544:	4b47      	ldr	r3, [pc, #284]	@ (8105664 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8105546:	e000      	b.n	810554a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8105548:	4b47      	ldr	r3, [pc, #284]	@ (8105668 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 810554a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810554c:	683b      	ldr	r3, [r7, #0]
 810554e:	681b      	ldr	r3, [r3, #0]
 8105550:	2b00      	cmp	r3, #0
 8105552:	d03b      	beq.n	81055cc <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8105554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105556:	689b      	ldr	r3, [r3, #8]
 8105558:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 810555c:	683b      	ldr	r3, [r7, #0]
 810555e:	685b      	ldr	r3, [r3, #4]
 8105560:	431a      	orrs	r2, r3
 8105562:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105564:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8105566:	687b      	ldr	r3, [r7, #4]
 8105568:	681b      	ldr	r3, [r3, #0]
 810556a:	4a3c      	ldr	r2, [pc, #240]	@ (810565c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810556c:	4293      	cmp	r3, r2
 810556e:	d004      	beq.n	810557a <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8105570:	687b      	ldr	r3, [r7, #4]
 8105572:	681b      	ldr	r3, [r3, #0]
 8105574:	4a3a      	ldr	r2, [pc, #232]	@ (8105660 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105576:	4293      	cmp	r3, r2
 8105578:	d10e      	bne.n	8105598 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 810557a:	4838      	ldr	r0, [pc, #224]	@ (810565c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810557c:	f7ff ff70 	bl	8105460 <LL_ADC_IsEnabled>
 8105580:	4604      	mov	r4, r0
 8105582:	4837      	ldr	r0, [pc, #220]	@ (8105660 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105584:	f7ff ff6c 	bl	8105460 <LL_ADC_IsEnabled>
 8105588:	4603      	mov	r3, r0
 810558a:	4323      	orrs	r3, r4
 810558c:	2b00      	cmp	r3, #0
 810558e:	bf0c      	ite	eq
 8105590:	2301      	moveq	r3, #1
 8105592:	2300      	movne	r3, #0
 8105594:	b2db      	uxtb	r3, r3
 8105596:	e008      	b.n	81055aa <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8105598:	4834      	ldr	r0, [pc, #208]	@ (810566c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 810559a:	f7ff ff61 	bl	8105460 <LL_ADC_IsEnabled>
 810559e:	4603      	mov	r3, r0
 81055a0:	2b00      	cmp	r3, #0
 81055a2:	bf0c      	ite	eq
 81055a4:	2301      	moveq	r3, #1
 81055a6:	2300      	movne	r3, #0
 81055a8:	b2db      	uxtb	r3, r3
 81055aa:	2b00      	cmp	r3, #0
 81055ac:	d04b      	beq.n	8105646 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 81055ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81055b0:	689b      	ldr	r3, [r3, #8]
 81055b2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 81055b6:	f023 030f 	bic.w	r3, r3, #15
 81055ba:	683a      	ldr	r2, [r7, #0]
 81055bc:	6811      	ldr	r1, [r2, #0]
 81055be:	683a      	ldr	r2, [r7, #0]
 81055c0:	6892      	ldr	r2, [r2, #8]
 81055c2:	430a      	orrs	r2, r1
 81055c4:	431a      	orrs	r2, r3
 81055c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81055c8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81055ca:	e03c      	b.n	8105646 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 81055cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81055ce:	689b      	ldr	r3, [r3, #8]
 81055d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 81055d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81055d6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81055d8:	687b      	ldr	r3, [r7, #4]
 81055da:	681b      	ldr	r3, [r3, #0]
 81055dc:	4a1f      	ldr	r2, [pc, #124]	@ (810565c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81055de:	4293      	cmp	r3, r2
 81055e0:	d004      	beq.n	81055ec <HAL_ADCEx_MultiModeConfigChannel+0x140>
 81055e2:	687b      	ldr	r3, [r7, #4]
 81055e4:	681b      	ldr	r3, [r3, #0]
 81055e6:	4a1e      	ldr	r2, [pc, #120]	@ (8105660 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81055e8:	4293      	cmp	r3, r2
 81055ea:	d10e      	bne.n	810560a <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 81055ec:	481b      	ldr	r0, [pc, #108]	@ (810565c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81055ee:	f7ff ff37 	bl	8105460 <LL_ADC_IsEnabled>
 81055f2:	4604      	mov	r4, r0
 81055f4:	481a      	ldr	r0, [pc, #104]	@ (8105660 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81055f6:	f7ff ff33 	bl	8105460 <LL_ADC_IsEnabled>
 81055fa:	4603      	mov	r3, r0
 81055fc:	4323      	orrs	r3, r4
 81055fe:	2b00      	cmp	r3, #0
 8105600:	bf0c      	ite	eq
 8105602:	2301      	moveq	r3, #1
 8105604:	2300      	movne	r3, #0
 8105606:	b2db      	uxtb	r3, r3
 8105608:	e008      	b.n	810561c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 810560a:	4818      	ldr	r0, [pc, #96]	@ (810566c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 810560c:	f7ff ff28 	bl	8105460 <LL_ADC_IsEnabled>
 8105610:	4603      	mov	r3, r0
 8105612:	2b00      	cmp	r3, #0
 8105614:	bf0c      	ite	eq
 8105616:	2301      	moveq	r3, #1
 8105618:	2300      	movne	r3, #0
 810561a:	b2db      	uxtb	r3, r3
 810561c:	2b00      	cmp	r3, #0
 810561e:	d012      	beq.n	8105646 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8105620:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105622:	689b      	ldr	r3, [r3, #8]
 8105624:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8105628:	f023 030f 	bic.w	r3, r3, #15
 810562c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810562e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8105630:	e009      	b.n	8105646 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8105632:	687b      	ldr	r3, [r7, #4]
 8105634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105636:	f043 0220 	orr.w	r2, r3, #32
 810563a:	687b      	ldr	r3, [r7, #4]
 810563c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 810563e:	2301      	movs	r3, #1
 8105640:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8105644:	e000      	b.n	8105648 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8105646:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8105648:	687b      	ldr	r3, [r7, #4]
 810564a:	2200      	movs	r2, #0
 810564c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8105650:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8105654:	4618      	mov	r0, r3
 8105656:	377c      	adds	r7, #124	@ 0x7c
 8105658:	46bd      	mov	sp, r7
 810565a:	bd90      	pop	{r4, r7, pc}
 810565c:	40022000 	.word	0x40022000
 8105660:	40022100 	.word	0x40022100
 8105664:	40022300 	.word	0x40022300
 8105668:	58026300 	.word	0x58026300
 810566c:	58026000 	.word	0x58026000

08105670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8105670:	b480      	push	{r7}
 8105672:	b085      	sub	sp, #20
 8105674:	af00      	add	r7, sp, #0
 8105676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8105678:	687b      	ldr	r3, [r7, #4]
 810567a:	f003 0307 	and.w	r3, r3, #7
 810567e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8105680:	4b0c      	ldr	r3, [pc, #48]	@ (81056b4 <__NVIC_SetPriorityGrouping+0x44>)
 8105682:	68db      	ldr	r3, [r3, #12]
 8105684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8105686:	68ba      	ldr	r2, [r7, #8]
 8105688:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 810568c:	4013      	ands	r3, r2
 810568e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8105690:	68fb      	ldr	r3, [r7, #12]
 8105692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8105694:	68bb      	ldr	r3, [r7, #8]
 8105696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8105698:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 810569c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81056a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81056a2:	4a04      	ldr	r2, [pc, #16]	@ (81056b4 <__NVIC_SetPriorityGrouping+0x44>)
 81056a4:	68bb      	ldr	r3, [r7, #8]
 81056a6:	60d3      	str	r3, [r2, #12]
}
 81056a8:	bf00      	nop
 81056aa:	3714      	adds	r7, #20
 81056ac:	46bd      	mov	sp, r7
 81056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056b2:	4770      	bx	lr
 81056b4:	e000ed00 	.word	0xe000ed00

081056b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81056b8:	b480      	push	{r7}
 81056ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81056bc:	4b04      	ldr	r3, [pc, #16]	@ (81056d0 <__NVIC_GetPriorityGrouping+0x18>)
 81056be:	68db      	ldr	r3, [r3, #12]
 81056c0:	0a1b      	lsrs	r3, r3, #8
 81056c2:	f003 0307 	and.w	r3, r3, #7
}
 81056c6:	4618      	mov	r0, r3
 81056c8:	46bd      	mov	sp, r7
 81056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056ce:	4770      	bx	lr
 81056d0:	e000ed00 	.word	0xe000ed00

081056d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81056d4:	b480      	push	{r7}
 81056d6:	b083      	sub	sp, #12
 81056d8:	af00      	add	r7, sp, #0
 81056da:	4603      	mov	r3, r0
 81056dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81056de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81056e2:	2b00      	cmp	r3, #0
 81056e4:	db0b      	blt.n	81056fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81056e6:	88fb      	ldrh	r3, [r7, #6]
 81056e8:	f003 021f 	and.w	r2, r3, #31
 81056ec:	4907      	ldr	r1, [pc, #28]	@ (810570c <__NVIC_EnableIRQ+0x38>)
 81056ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81056f2:	095b      	lsrs	r3, r3, #5
 81056f4:	2001      	movs	r0, #1
 81056f6:	fa00 f202 	lsl.w	r2, r0, r2
 81056fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81056fe:	bf00      	nop
 8105700:	370c      	adds	r7, #12
 8105702:	46bd      	mov	sp, r7
 8105704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105708:	4770      	bx	lr
 810570a:	bf00      	nop
 810570c:	e000e100 	.word	0xe000e100

08105710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8105710:	b480      	push	{r7}
 8105712:	b083      	sub	sp, #12
 8105714:	af00      	add	r7, sp, #0
 8105716:	4603      	mov	r3, r0
 8105718:	6039      	str	r1, [r7, #0]
 810571a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810571c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105720:	2b00      	cmp	r3, #0
 8105722:	db0a      	blt.n	810573a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8105724:	683b      	ldr	r3, [r7, #0]
 8105726:	b2da      	uxtb	r2, r3
 8105728:	490c      	ldr	r1, [pc, #48]	@ (810575c <__NVIC_SetPriority+0x4c>)
 810572a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810572e:	0112      	lsls	r2, r2, #4
 8105730:	b2d2      	uxtb	r2, r2
 8105732:	440b      	add	r3, r1
 8105734:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8105738:	e00a      	b.n	8105750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810573a:	683b      	ldr	r3, [r7, #0]
 810573c:	b2da      	uxtb	r2, r3
 810573e:	4908      	ldr	r1, [pc, #32]	@ (8105760 <__NVIC_SetPriority+0x50>)
 8105740:	88fb      	ldrh	r3, [r7, #6]
 8105742:	f003 030f 	and.w	r3, r3, #15
 8105746:	3b04      	subs	r3, #4
 8105748:	0112      	lsls	r2, r2, #4
 810574a:	b2d2      	uxtb	r2, r2
 810574c:	440b      	add	r3, r1
 810574e:	761a      	strb	r2, [r3, #24]
}
 8105750:	bf00      	nop
 8105752:	370c      	adds	r7, #12
 8105754:	46bd      	mov	sp, r7
 8105756:	f85d 7b04 	ldr.w	r7, [sp], #4
 810575a:	4770      	bx	lr
 810575c:	e000e100 	.word	0xe000e100
 8105760:	e000ed00 	.word	0xe000ed00

08105764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8105764:	b480      	push	{r7}
 8105766:	b089      	sub	sp, #36	@ 0x24
 8105768:	af00      	add	r7, sp, #0
 810576a:	60f8      	str	r0, [r7, #12]
 810576c:	60b9      	str	r1, [r7, #8]
 810576e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8105770:	68fb      	ldr	r3, [r7, #12]
 8105772:	f003 0307 	and.w	r3, r3, #7
 8105776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8105778:	69fb      	ldr	r3, [r7, #28]
 810577a:	f1c3 0307 	rsb	r3, r3, #7
 810577e:	2b04      	cmp	r3, #4
 8105780:	bf28      	it	cs
 8105782:	2304      	movcs	r3, #4
 8105784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8105786:	69fb      	ldr	r3, [r7, #28]
 8105788:	3304      	adds	r3, #4
 810578a:	2b06      	cmp	r3, #6
 810578c:	d902      	bls.n	8105794 <NVIC_EncodePriority+0x30>
 810578e:	69fb      	ldr	r3, [r7, #28]
 8105790:	3b03      	subs	r3, #3
 8105792:	e000      	b.n	8105796 <NVIC_EncodePriority+0x32>
 8105794:	2300      	movs	r3, #0
 8105796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8105798:	f04f 32ff 	mov.w	r2, #4294967295
 810579c:	69bb      	ldr	r3, [r7, #24]
 810579e:	fa02 f303 	lsl.w	r3, r2, r3
 81057a2:	43da      	mvns	r2, r3
 81057a4:	68bb      	ldr	r3, [r7, #8]
 81057a6:	401a      	ands	r2, r3
 81057a8:	697b      	ldr	r3, [r7, #20]
 81057aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81057ac:	f04f 31ff 	mov.w	r1, #4294967295
 81057b0:	697b      	ldr	r3, [r7, #20]
 81057b2:	fa01 f303 	lsl.w	r3, r1, r3
 81057b6:	43d9      	mvns	r1, r3
 81057b8:	687b      	ldr	r3, [r7, #4]
 81057ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81057bc:	4313      	orrs	r3, r2
         );
}
 81057be:	4618      	mov	r0, r3
 81057c0:	3724      	adds	r7, #36	@ 0x24
 81057c2:	46bd      	mov	sp, r7
 81057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057c8:	4770      	bx	lr
	...

081057cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81057cc:	b580      	push	{r7, lr}
 81057ce:	b082      	sub	sp, #8
 81057d0:	af00      	add	r7, sp, #0
 81057d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81057d4:	687b      	ldr	r3, [r7, #4]
 81057d6:	3b01      	subs	r3, #1
 81057d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81057dc:	d301      	bcc.n	81057e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81057de:	2301      	movs	r3, #1
 81057e0:	e00f      	b.n	8105802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81057e2:	4a0a      	ldr	r2, [pc, #40]	@ (810580c <SysTick_Config+0x40>)
 81057e4:	687b      	ldr	r3, [r7, #4]
 81057e6:	3b01      	subs	r3, #1
 81057e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81057ea:	210f      	movs	r1, #15
 81057ec:	f04f 30ff 	mov.w	r0, #4294967295
 81057f0:	f7ff ff8e 	bl	8105710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81057f4:	4b05      	ldr	r3, [pc, #20]	@ (810580c <SysTick_Config+0x40>)
 81057f6:	2200      	movs	r2, #0
 81057f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81057fa:	4b04      	ldr	r3, [pc, #16]	@ (810580c <SysTick_Config+0x40>)
 81057fc:	2207      	movs	r2, #7
 81057fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8105800:	2300      	movs	r3, #0
}
 8105802:	4618      	mov	r0, r3
 8105804:	3708      	adds	r7, #8
 8105806:	46bd      	mov	sp, r7
 8105808:	bd80      	pop	{r7, pc}
 810580a:	bf00      	nop
 810580c:	e000e010 	.word	0xe000e010

08105810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8105810:	b580      	push	{r7, lr}
 8105812:	b082      	sub	sp, #8
 8105814:	af00      	add	r7, sp, #0
 8105816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8105818:	6878      	ldr	r0, [r7, #4]
 810581a:	f7ff ff29 	bl	8105670 <__NVIC_SetPriorityGrouping>
}
 810581e:	bf00      	nop
 8105820:	3708      	adds	r7, #8
 8105822:	46bd      	mov	sp, r7
 8105824:	bd80      	pop	{r7, pc}

08105826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8105826:	b580      	push	{r7, lr}
 8105828:	b086      	sub	sp, #24
 810582a:	af00      	add	r7, sp, #0
 810582c:	4603      	mov	r3, r0
 810582e:	60b9      	str	r1, [r7, #8]
 8105830:	607a      	str	r2, [r7, #4]
 8105832:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8105834:	f7ff ff40 	bl	81056b8 <__NVIC_GetPriorityGrouping>
 8105838:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810583a:	687a      	ldr	r2, [r7, #4]
 810583c:	68b9      	ldr	r1, [r7, #8]
 810583e:	6978      	ldr	r0, [r7, #20]
 8105840:	f7ff ff90 	bl	8105764 <NVIC_EncodePriority>
 8105844:	4602      	mov	r2, r0
 8105846:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810584a:	4611      	mov	r1, r2
 810584c:	4618      	mov	r0, r3
 810584e:	f7ff ff5f 	bl	8105710 <__NVIC_SetPriority>
}
 8105852:	bf00      	nop
 8105854:	3718      	adds	r7, #24
 8105856:	46bd      	mov	sp, r7
 8105858:	bd80      	pop	{r7, pc}

0810585a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810585a:	b580      	push	{r7, lr}
 810585c:	b082      	sub	sp, #8
 810585e:	af00      	add	r7, sp, #0
 8105860:	4603      	mov	r3, r0
 8105862:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8105864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105868:	4618      	mov	r0, r3
 810586a:	f7ff ff33 	bl	81056d4 <__NVIC_EnableIRQ>
}
 810586e:	bf00      	nop
 8105870:	3708      	adds	r7, #8
 8105872:	46bd      	mov	sp, r7
 8105874:	bd80      	pop	{r7, pc}

08105876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8105876:	b580      	push	{r7, lr}
 8105878:	b082      	sub	sp, #8
 810587a:	af00      	add	r7, sp, #0
 810587c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810587e:	6878      	ldr	r0, [r7, #4]
 8105880:	f7ff ffa4 	bl	81057cc <SysTick_Config>
 8105884:	4603      	mov	r3, r0
}
 8105886:	4618      	mov	r0, r3
 8105888:	3708      	adds	r7, #8
 810588a:	46bd      	mov	sp, r7
 810588c:	bd80      	pop	{r7, pc}
	...

08105890 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8105890:	b480      	push	{r7}
 8105892:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8105894:	4b07      	ldr	r3, [pc, #28]	@ (81058b4 <HAL_GetCurrentCPUID+0x24>)
 8105896:	681b      	ldr	r3, [r3, #0]
 8105898:	091b      	lsrs	r3, r3, #4
 810589a:	f003 030f 	and.w	r3, r3, #15
 810589e:	2b07      	cmp	r3, #7
 81058a0:	d101      	bne.n	81058a6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81058a2:	2303      	movs	r3, #3
 81058a4:	e000      	b.n	81058a8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81058a6:	2301      	movs	r3, #1
  }
}
 81058a8:	4618      	mov	r0, r3
 81058aa:	46bd      	mov	sp, r7
 81058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058b0:	4770      	bx	lr
 81058b2:	bf00      	nop
 81058b4:	e000ed00 	.word	0xe000ed00

081058b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81058b8:	b480      	push	{r7}
 81058ba:	b089      	sub	sp, #36	@ 0x24
 81058bc:	af00      	add	r7, sp, #0
 81058be:	6078      	str	r0, [r7, #4]
 81058c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81058c2:	2300      	movs	r3, #0
 81058c4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81058c6:	4b89      	ldr	r3, [pc, #548]	@ (8105aec <HAL_GPIO_Init+0x234>)
 81058c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81058ca:	e194      	b.n	8105bf6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81058cc:	683b      	ldr	r3, [r7, #0]
 81058ce:	681a      	ldr	r2, [r3, #0]
 81058d0:	2101      	movs	r1, #1
 81058d2:	69fb      	ldr	r3, [r7, #28]
 81058d4:	fa01 f303 	lsl.w	r3, r1, r3
 81058d8:	4013      	ands	r3, r2
 81058da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81058dc:	693b      	ldr	r3, [r7, #16]
 81058de:	2b00      	cmp	r3, #0
 81058e0:	f000 8186 	beq.w	8105bf0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81058e4:	683b      	ldr	r3, [r7, #0]
 81058e6:	685b      	ldr	r3, [r3, #4]
 81058e8:	f003 0303 	and.w	r3, r3, #3
 81058ec:	2b01      	cmp	r3, #1
 81058ee:	d005      	beq.n	81058fc <HAL_GPIO_Init+0x44>
 81058f0:	683b      	ldr	r3, [r7, #0]
 81058f2:	685b      	ldr	r3, [r3, #4]
 81058f4:	f003 0303 	and.w	r3, r3, #3
 81058f8:	2b02      	cmp	r3, #2
 81058fa:	d130      	bne.n	810595e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81058fc:	687b      	ldr	r3, [r7, #4]
 81058fe:	689b      	ldr	r3, [r3, #8]
 8105900:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8105902:	69fb      	ldr	r3, [r7, #28]
 8105904:	005b      	lsls	r3, r3, #1
 8105906:	2203      	movs	r2, #3
 8105908:	fa02 f303 	lsl.w	r3, r2, r3
 810590c:	43db      	mvns	r3, r3
 810590e:	69ba      	ldr	r2, [r7, #24]
 8105910:	4013      	ands	r3, r2
 8105912:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8105914:	683b      	ldr	r3, [r7, #0]
 8105916:	68da      	ldr	r2, [r3, #12]
 8105918:	69fb      	ldr	r3, [r7, #28]
 810591a:	005b      	lsls	r3, r3, #1
 810591c:	fa02 f303 	lsl.w	r3, r2, r3
 8105920:	69ba      	ldr	r2, [r7, #24]
 8105922:	4313      	orrs	r3, r2
 8105924:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8105926:	687b      	ldr	r3, [r7, #4]
 8105928:	69ba      	ldr	r2, [r7, #24]
 810592a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810592c:	687b      	ldr	r3, [r7, #4]
 810592e:	685b      	ldr	r3, [r3, #4]
 8105930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8105932:	2201      	movs	r2, #1
 8105934:	69fb      	ldr	r3, [r7, #28]
 8105936:	fa02 f303 	lsl.w	r3, r2, r3
 810593a:	43db      	mvns	r3, r3
 810593c:	69ba      	ldr	r2, [r7, #24]
 810593e:	4013      	ands	r3, r2
 8105940:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8105942:	683b      	ldr	r3, [r7, #0]
 8105944:	685b      	ldr	r3, [r3, #4]
 8105946:	091b      	lsrs	r3, r3, #4
 8105948:	f003 0201 	and.w	r2, r3, #1
 810594c:	69fb      	ldr	r3, [r7, #28]
 810594e:	fa02 f303 	lsl.w	r3, r2, r3
 8105952:	69ba      	ldr	r2, [r7, #24]
 8105954:	4313      	orrs	r3, r2
 8105956:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8105958:	687b      	ldr	r3, [r7, #4]
 810595a:	69ba      	ldr	r2, [r7, #24]
 810595c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810595e:	683b      	ldr	r3, [r7, #0]
 8105960:	685b      	ldr	r3, [r3, #4]
 8105962:	f003 0303 	and.w	r3, r3, #3
 8105966:	2b03      	cmp	r3, #3
 8105968:	d017      	beq.n	810599a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810596a:	687b      	ldr	r3, [r7, #4]
 810596c:	68db      	ldr	r3, [r3, #12]
 810596e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8105970:	69fb      	ldr	r3, [r7, #28]
 8105972:	005b      	lsls	r3, r3, #1
 8105974:	2203      	movs	r2, #3
 8105976:	fa02 f303 	lsl.w	r3, r2, r3
 810597a:	43db      	mvns	r3, r3
 810597c:	69ba      	ldr	r2, [r7, #24]
 810597e:	4013      	ands	r3, r2
 8105980:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8105982:	683b      	ldr	r3, [r7, #0]
 8105984:	689a      	ldr	r2, [r3, #8]
 8105986:	69fb      	ldr	r3, [r7, #28]
 8105988:	005b      	lsls	r3, r3, #1
 810598a:	fa02 f303 	lsl.w	r3, r2, r3
 810598e:	69ba      	ldr	r2, [r7, #24]
 8105990:	4313      	orrs	r3, r2
 8105992:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8105994:	687b      	ldr	r3, [r7, #4]
 8105996:	69ba      	ldr	r2, [r7, #24]
 8105998:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810599a:	683b      	ldr	r3, [r7, #0]
 810599c:	685b      	ldr	r3, [r3, #4]
 810599e:	f003 0303 	and.w	r3, r3, #3
 81059a2:	2b02      	cmp	r3, #2
 81059a4:	d123      	bne.n	81059ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81059a6:	69fb      	ldr	r3, [r7, #28]
 81059a8:	08da      	lsrs	r2, r3, #3
 81059aa:	687b      	ldr	r3, [r7, #4]
 81059ac:	3208      	adds	r2, #8
 81059ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81059b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81059b4:	69fb      	ldr	r3, [r7, #28]
 81059b6:	f003 0307 	and.w	r3, r3, #7
 81059ba:	009b      	lsls	r3, r3, #2
 81059bc:	220f      	movs	r2, #15
 81059be:	fa02 f303 	lsl.w	r3, r2, r3
 81059c2:	43db      	mvns	r3, r3
 81059c4:	69ba      	ldr	r2, [r7, #24]
 81059c6:	4013      	ands	r3, r2
 81059c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81059ca:	683b      	ldr	r3, [r7, #0]
 81059cc:	691a      	ldr	r2, [r3, #16]
 81059ce:	69fb      	ldr	r3, [r7, #28]
 81059d0:	f003 0307 	and.w	r3, r3, #7
 81059d4:	009b      	lsls	r3, r3, #2
 81059d6:	fa02 f303 	lsl.w	r3, r2, r3
 81059da:	69ba      	ldr	r2, [r7, #24]
 81059dc:	4313      	orrs	r3, r2
 81059de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81059e0:	69fb      	ldr	r3, [r7, #28]
 81059e2:	08da      	lsrs	r2, r3, #3
 81059e4:	687b      	ldr	r3, [r7, #4]
 81059e6:	3208      	adds	r2, #8
 81059e8:	69b9      	ldr	r1, [r7, #24]
 81059ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81059ee:	687b      	ldr	r3, [r7, #4]
 81059f0:	681b      	ldr	r3, [r3, #0]
 81059f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81059f4:	69fb      	ldr	r3, [r7, #28]
 81059f6:	005b      	lsls	r3, r3, #1
 81059f8:	2203      	movs	r2, #3
 81059fa:	fa02 f303 	lsl.w	r3, r2, r3
 81059fe:	43db      	mvns	r3, r3
 8105a00:	69ba      	ldr	r2, [r7, #24]
 8105a02:	4013      	ands	r3, r2
 8105a04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8105a06:	683b      	ldr	r3, [r7, #0]
 8105a08:	685b      	ldr	r3, [r3, #4]
 8105a0a:	f003 0203 	and.w	r2, r3, #3
 8105a0e:	69fb      	ldr	r3, [r7, #28]
 8105a10:	005b      	lsls	r3, r3, #1
 8105a12:	fa02 f303 	lsl.w	r3, r2, r3
 8105a16:	69ba      	ldr	r2, [r7, #24]
 8105a18:	4313      	orrs	r3, r2
 8105a1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8105a1c:	687b      	ldr	r3, [r7, #4]
 8105a1e:	69ba      	ldr	r2, [r7, #24]
 8105a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8105a22:	683b      	ldr	r3, [r7, #0]
 8105a24:	685b      	ldr	r3, [r3, #4]
 8105a26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8105a2a:	2b00      	cmp	r3, #0
 8105a2c:	f000 80e0 	beq.w	8105bf0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8105a30:	4b2f      	ldr	r3, [pc, #188]	@ (8105af0 <HAL_GPIO_Init+0x238>)
 8105a32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105a36:	4a2e      	ldr	r2, [pc, #184]	@ (8105af0 <HAL_GPIO_Init+0x238>)
 8105a38:	f043 0302 	orr.w	r3, r3, #2
 8105a3c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8105a40:	4b2b      	ldr	r3, [pc, #172]	@ (8105af0 <HAL_GPIO_Init+0x238>)
 8105a42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105a46:	f003 0302 	and.w	r3, r3, #2
 8105a4a:	60fb      	str	r3, [r7, #12]
 8105a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8105a4e:	4a29      	ldr	r2, [pc, #164]	@ (8105af4 <HAL_GPIO_Init+0x23c>)
 8105a50:	69fb      	ldr	r3, [r7, #28]
 8105a52:	089b      	lsrs	r3, r3, #2
 8105a54:	3302      	adds	r3, #2
 8105a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8105a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8105a5c:	69fb      	ldr	r3, [r7, #28]
 8105a5e:	f003 0303 	and.w	r3, r3, #3
 8105a62:	009b      	lsls	r3, r3, #2
 8105a64:	220f      	movs	r2, #15
 8105a66:	fa02 f303 	lsl.w	r3, r2, r3
 8105a6a:	43db      	mvns	r3, r3
 8105a6c:	69ba      	ldr	r2, [r7, #24]
 8105a6e:	4013      	ands	r3, r2
 8105a70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8105a72:	687b      	ldr	r3, [r7, #4]
 8105a74:	4a20      	ldr	r2, [pc, #128]	@ (8105af8 <HAL_GPIO_Init+0x240>)
 8105a76:	4293      	cmp	r3, r2
 8105a78:	d052      	beq.n	8105b20 <HAL_GPIO_Init+0x268>
 8105a7a:	687b      	ldr	r3, [r7, #4]
 8105a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8105afc <HAL_GPIO_Init+0x244>)
 8105a7e:	4293      	cmp	r3, r2
 8105a80:	d031      	beq.n	8105ae6 <HAL_GPIO_Init+0x22e>
 8105a82:	687b      	ldr	r3, [r7, #4]
 8105a84:	4a1e      	ldr	r2, [pc, #120]	@ (8105b00 <HAL_GPIO_Init+0x248>)
 8105a86:	4293      	cmp	r3, r2
 8105a88:	d02b      	beq.n	8105ae2 <HAL_GPIO_Init+0x22a>
 8105a8a:	687b      	ldr	r3, [r7, #4]
 8105a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8105b04 <HAL_GPIO_Init+0x24c>)
 8105a8e:	4293      	cmp	r3, r2
 8105a90:	d025      	beq.n	8105ade <HAL_GPIO_Init+0x226>
 8105a92:	687b      	ldr	r3, [r7, #4]
 8105a94:	4a1c      	ldr	r2, [pc, #112]	@ (8105b08 <HAL_GPIO_Init+0x250>)
 8105a96:	4293      	cmp	r3, r2
 8105a98:	d01f      	beq.n	8105ada <HAL_GPIO_Init+0x222>
 8105a9a:	687b      	ldr	r3, [r7, #4]
 8105a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8105b0c <HAL_GPIO_Init+0x254>)
 8105a9e:	4293      	cmp	r3, r2
 8105aa0:	d019      	beq.n	8105ad6 <HAL_GPIO_Init+0x21e>
 8105aa2:	687b      	ldr	r3, [r7, #4]
 8105aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8105b10 <HAL_GPIO_Init+0x258>)
 8105aa6:	4293      	cmp	r3, r2
 8105aa8:	d013      	beq.n	8105ad2 <HAL_GPIO_Init+0x21a>
 8105aaa:	687b      	ldr	r3, [r7, #4]
 8105aac:	4a19      	ldr	r2, [pc, #100]	@ (8105b14 <HAL_GPIO_Init+0x25c>)
 8105aae:	4293      	cmp	r3, r2
 8105ab0:	d00d      	beq.n	8105ace <HAL_GPIO_Init+0x216>
 8105ab2:	687b      	ldr	r3, [r7, #4]
 8105ab4:	4a18      	ldr	r2, [pc, #96]	@ (8105b18 <HAL_GPIO_Init+0x260>)
 8105ab6:	4293      	cmp	r3, r2
 8105ab8:	d007      	beq.n	8105aca <HAL_GPIO_Init+0x212>
 8105aba:	687b      	ldr	r3, [r7, #4]
 8105abc:	4a17      	ldr	r2, [pc, #92]	@ (8105b1c <HAL_GPIO_Init+0x264>)
 8105abe:	4293      	cmp	r3, r2
 8105ac0:	d101      	bne.n	8105ac6 <HAL_GPIO_Init+0x20e>
 8105ac2:	2309      	movs	r3, #9
 8105ac4:	e02d      	b.n	8105b22 <HAL_GPIO_Init+0x26a>
 8105ac6:	230a      	movs	r3, #10
 8105ac8:	e02b      	b.n	8105b22 <HAL_GPIO_Init+0x26a>
 8105aca:	2308      	movs	r3, #8
 8105acc:	e029      	b.n	8105b22 <HAL_GPIO_Init+0x26a>
 8105ace:	2307      	movs	r3, #7
 8105ad0:	e027      	b.n	8105b22 <HAL_GPIO_Init+0x26a>
 8105ad2:	2306      	movs	r3, #6
 8105ad4:	e025      	b.n	8105b22 <HAL_GPIO_Init+0x26a>
 8105ad6:	2305      	movs	r3, #5
 8105ad8:	e023      	b.n	8105b22 <HAL_GPIO_Init+0x26a>
 8105ada:	2304      	movs	r3, #4
 8105adc:	e021      	b.n	8105b22 <HAL_GPIO_Init+0x26a>
 8105ade:	2303      	movs	r3, #3
 8105ae0:	e01f      	b.n	8105b22 <HAL_GPIO_Init+0x26a>
 8105ae2:	2302      	movs	r3, #2
 8105ae4:	e01d      	b.n	8105b22 <HAL_GPIO_Init+0x26a>
 8105ae6:	2301      	movs	r3, #1
 8105ae8:	e01b      	b.n	8105b22 <HAL_GPIO_Init+0x26a>
 8105aea:	bf00      	nop
 8105aec:	580000c0 	.word	0x580000c0
 8105af0:	58024400 	.word	0x58024400
 8105af4:	58000400 	.word	0x58000400
 8105af8:	58020000 	.word	0x58020000
 8105afc:	58020400 	.word	0x58020400
 8105b00:	58020800 	.word	0x58020800
 8105b04:	58020c00 	.word	0x58020c00
 8105b08:	58021000 	.word	0x58021000
 8105b0c:	58021400 	.word	0x58021400
 8105b10:	58021800 	.word	0x58021800
 8105b14:	58021c00 	.word	0x58021c00
 8105b18:	58022000 	.word	0x58022000
 8105b1c:	58022400 	.word	0x58022400
 8105b20:	2300      	movs	r3, #0
 8105b22:	69fa      	ldr	r2, [r7, #28]
 8105b24:	f002 0203 	and.w	r2, r2, #3
 8105b28:	0092      	lsls	r2, r2, #2
 8105b2a:	4093      	lsls	r3, r2
 8105b2c:	69ba      	ldr	r2, [r7, #24]
 8105b2e:	4313      	orrs	r3, r2
 8105b30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8105b32:	4938      	ldr	r1, [pc, #224]	@ (8105c14 <HAL_GPIO_Init+0x35c>)
 8105b34:	69fb      	ldr	r3, [r7, #28]
 8105b36:	089b      	lsrs	r3, r3, #2
 8105b38:	3302      	adds	r3, #2
 8105b3a:	69ba      	ldr	r2, [r7, #24]
 8105b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8105b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105b44:	681b      	ldr	r3, [r3, #0]
 8105b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105b48:	693b      	ldr	r3, [r7, #16]
 8105b4a:	43db      	mvns	r3, r3
 8105b4c:	69ba      	ldr	r2, [r7, #24]
 8105b4e:	4013      	ands	r3, r2
 8105b50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8105b52:	683b      	ldr	r3, [r7, #0]
 8105b54:	685b      	ldr	r3, [r3, #4]
 8105b56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8105b5a:	2b00      	cmp	r3, #0
 8105b5c:	d003      	beq.n	8105b66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8105b5e:	69ba      	ldr	r2, [r7, #24]
 8105b60:	693b      	ldr	r3, [r7, #16]
 8105b62:	4313      	orrs	r3, r2
 8105b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8105b66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8105b6a:	69bb      	ldr	r3, [r7, #24]
 8105b6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8105b6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105b72:	685b      	ldr	r3, [r3, #4]
 8105b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105b76:	693b      	ldr	r3, [r7, #16]
 8105b78:	43db      	mvns	r3, r3
 8105b7a:	69ba      	ldr	r2, [r7, #24]
 8105b7c:	4013      	ands	r3, r2
 8105b7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8105b80:	683b      	ldr	r3, [r7, #0]
 8105b82:	685b      	ldr	r3, [r3, #4]
 8105b84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8105b88:	2b00      	cmp	r3, #0
 8105b8a:	d003      	beq.n	8105b94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8105b8c:	69ba      	ldr	r2, [r7, #24]
 8105b8e:	693b      	ldr	r3, [r7, #16]
 8105b90:	4313      	orrs	r3, r2
 8105b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8105b94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8105b98:	69bb      	ldr	r3, [r7, #24]
 8105b9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8105b9c:	697b      	ldr	r3, [r7, #20]
 8105b9e:	685b      	ldr	r3, [r3, #4]
 8105ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105ba2:	693b      	ldr	r3, [r7, #16]
 8105ba4:	43db      	mvns	r3, r3
 8105ba6:	69ba      	ldr	r2, [r7, #24]
 8105ba8:	4013      	ands	r3, r2
 8105baa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8105bac:	683b      	ldr	r3, [r7, #0]
 8105bae:	685b      	ldr	r3, [r3, #4]
 8105bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105bb4:	2b00      	cmp	r3, #0
 8105bb6:	d003      	beq.n	8105bc0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8105bb8:	69ba      	ldr	r2, [r7, #24]
 8105bba:	693b      	ldr	r3, [r7, #16]
 8105bbc:	4313      	orrs	r3, r2
 8105bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8105bc0:	697b      	ldr	r3, [r7, #20]
 8105bc2:	69ba      	ldr	r2, [r7, #24]
 8105bc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8105bc6:	697b      	ldr	r3, [r7, #20]
 8105bc8:	681b      	ldr	r3, [r3, #0]
 8105bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105bcc:	693b      	ldr	r3, [r7, #16]
 8105bce:	43db      	mvns	r3, r3
 8105bd0:	69ba      	ldr	r2, [r7, #24]
 8105bd2:	4013      	ands	r3, r2
 8105bd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8105bd6:	683b      	ldr	r3, [r7, #0]
 8105bd8:	685b      	ldr	r3, [r3, #4]
 8105bda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8105bde:	2b00      	cmp	r3, #0
 8105be0:	d003      	beq.n	8105bea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8105be2:	69ba      	ldr	r2, [r7, #24]
 8105be4:	693b      	ldr	r3, [r7, #16]
 8105be6:	4313      	orrs	r3, r2
 8105be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8105bea:	697b      	ldr	r3, [r7, #20]
 8105bec:	69ba      	ldr	r2, [r7, #24]
 8105bee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8105bf0:	69fb      	ldr	r3, [r7, #28]
 8105bf2:	3301      	adds	r3, #1
 8105bf4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8105bf6:	683b      	ldr	r3, [r7, #0]
 8105bf8:	681a      	ldr	r2, [r3, #0]
 8105bfa:	69fb      	ldr	r3, [r7, #28]
 8105bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8105c00:	2b00      	cmp	r3, #0
 8105c02:	f47f ae63 	bne.w	81058cc <HAL_GPIO_Init+0x14>
  }
}
 8105c06:	bf00      	nop
 8105c08:	bf00      	nop
 8105c0a:	3724      	adds	r7, #36	@ 0x24
 8105c0c:	46bd      	mov	sp, r7
 8105c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c12:	4770      	bx	lr
 8105c14:	58000400 	.word	0x58000400

08105c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8105c18:	b480      	push	{r7}
 8105c1a:	b083      	sub	sp, #12
 8105c1c:	af00      	add	r7, sp, #0
 8105c1e:	6078      	str	r0, [r7, #4]
 8105c20:	460b      	mov	r3, r1
 8105c22:	807b      	strh	r3, [r7, #2]
 8105c24:	4613      	mov	r3, r2
 8105c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8105c28:	787b      	ldrb	r3, [r7, #1]
 8105c2a:	2b00      	cmp	r3, #0
 8105c2c:	d003      	beq.n	8105c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8105c2e:	887a      	ldrh	r2, [r7, #2]
 8105c30:	687b      	ldr	r3, [r7, #4]
 8105c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8105c34:	e003      	b.n	8105c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8105c36:	887b      	ldrh	r3, [r7, #2]
 8105c38:	041a      	lsls	r2, r3, #16
 8105c3a:	687b      	ldr	r3, [r7, #4]
 8105c3c:	619a      	str	r2, [r3, #24]
}
 8105c3e:	bf00      	nop
 8105c40:	370c      	adds	r7, #12
 8105c42:	46bd      	mov	sp, r7
 8105c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c48:	4770      	bx	lr

08105c4a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8105c4a:	b580      	push	{r7, lr}
 8105c4c:	b082      	sub	sp, #8
 8105c4e:	af00      	add	r7, sp, #0
 8105c50:	4603      	mov	r3, r0
 8105c52:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8105c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105c58:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8105c5c:	88fb      	ldrh	r3, [r7, #6]
 8105c5e:	4013      	ands	r3, r2
 8105c60:	2b00      	cmp	r3, #0
 8105c62:	d008      	beq.n	8105c76 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8105c64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8105c68:	88fb      	ldrh	r3, [r7, #6]
 8105c6a:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8105c6e:	88fb      	ldrh	r3, [r7, #6]
 8105c70:	4618      	mov	r0, r3
 8105c72:	f7fd facf 	bl	8103214 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8105c76:	bf00      	nop
 8105c78:	3708      	adds	r7, #8
 8105c7a:	46bd      	mov	sp, r7
 8105c7c:	bd80      	pop	{r7, pc}
	...

08105c80 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8105c80:	b480      	push	{r7}
 8105c82:	b083      	sub	sp, #12
 8105c84:	af00      	add	r7, sp, #0
 8105c86:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8105c88:	4b05      	ldr	r3, [pc, #20]	@ (8105ca0 <HAL_HSEM_ActivateNotification+0x20>)
 8105c8a:	681a      	ldr	r2, [r3, #0]
 8105c8c:	4904      	ldr	r1, [pc, #16]	@ (8105ca0 <HAL_HSEM_ActivateNotification+0x20>)
 8105c8e:	687b      	ldr	r3, [r7, #4]
 8105c90:	4313      	orrs	r3, r2
 8105c92:	600b      	str	r3, [r1, #0]
#endif
}
 8105c94:	bf00      	nop
 8105c96:	370c      	adds	r7, #12
 8105c98:	46bd      	mov	sp, r7
 8105c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c9e:	4770      	bx	lr
 8105ca0:	58026510 	.word	0x58026510

08105ca4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8105ca4:	b580      	push	{r7, lr}
 8105ca6:	b082      	sub	sp, #8
 8105ca8:	af00      	add	r7, sp, #0
 8105caa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8105cac:	687b      	ldr	r3, [r7, #4]
 8105cae:	2b00      	cmp	r3, #0
 8105cb0:	d101      	bne.n	8105cb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8105cb2:	2301      	movs	r3, #1
 8105cb4:	e08d      	b.n	8105dd2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8105cb6:	687b      	ldr	r3, [r7, #4]
 8105cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8105cbc:	b2db      	uxtb	r3, r3
 8105cbe:	2b00      	cmp	r3, #0
 8105cc0:	d106      	bne.n	8105cd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8105cc2:	687b      	ldr	r3, [r7, #4]
 8105cc4:	2200      	movs	r2, #0
 8105cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8105cca:	6878      	ldr	r0, [r7, #4]
 8105ccc:	f7fd fbbe 	bl	810344c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8105cd0:	687b      	ldr	r3, [r7, #4]
 8105cd2:	2224      	movs	r2, #36	@ 0x24
 8105cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8105cd8:	687b      	ldr	r3, [r7, #4]
 8105cda:	681b      	ldr	r3, [r3, #0]
 8105cdc:	681a      	ldr	r2, [r3, #0]
 8105cde:	687b      	ldr	r3, [r7, #4]
 8105ce0:	681b      	ldr	r3, [r3, #0]
 8105ce2:	f022 0201 	bic.w	r2, r2, #1
 8105ce6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8105ce8:	687b      	ldr	r3, [r7, #4]
 8105cea:	685a      	ldr	r2, [r3, #4]
 8105cec:	687b      	ldr	r3, [r7, #4]
 8105cee:	681b      	ldr	r3, [r3, #0]
 8105cf0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8105cf4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8105cf6:	687b      	ldr	r3, [r7, #4]
 8105cf8:	681b      	ldr	r3, [r3, #0]
 8105cfa:	689a      	ldr	r2, [r3, #8]
 8105cfc:	687b      	ldr	r3, [r7, #4]
 8105cfe:	681b      	ldr	r3, [r3, #0]
 8105d00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8105d04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8105d06:	687b      	ldr	r3, [r7, #4]
 8105d08:	68db      	ldr	r3, [r3, #12]
 8105d0a:	2b01      	cmp	r3, #1
 8105d0c:	d107      	bne.n	8105d1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8105d0e:	687b      	ldr	r3, [r7, #4]
 8105d10:	689a      	ldr	r2, [r3, #8]
 8105d12:	687b      	ldr	r3, [r7, #4]
 8105d14:	681b      	ldr	r3, [r3, #0]
 8105d16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8105d1a:	609a      	str	r2, [r3, #8]
 8105d1c:	e006      	b.n	8105d2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8105d1e:	687b      	ldr	r3, [r7, #4]
 8105d20:	689a      	ldr	r2, [r3, #8]
 8105d22:	687b      	ldr	r3, [r7, #4]
 8105d24:	681b      	ldr	r3, [r3, #0]
 8105d26:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8105d2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8105d2c:	687b      	ldr	r3, [r7, #4]
 8105d2e:	68db      	ldr	r3, [r3, #12]
 8105d30:	2b02      	cmp	r3, #2
 8105d32:	d108      	bne.n	8105d46 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8105d34:	687b      	ldr	r3, [r7, #4]
 8105d36:	681b      	ldr	r3, [r3, #0]
 8105d38:	685a      	ldr	r2, [r3, #4]
 8105d3a:	687b      	ldr	r3, [r7, #4]
 8105d3c:	681b      	ldr	r3, [r3, #0]
 8105d3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8105d42:	605a      	str	r2, [r3, #4]
 8105d44:	e007      	b.n	8105d56 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8105d46:	687b      	ldr	r3, [r7, #4]
 8105d48:	681b      	ldr	r3, [r3, #0]
 8105d4a:	685a      	ldr	r2, [r3, #4]
 8105d4c:	687b      	ldr	r3, [r7, #4]
 8105d4e:	681b      	ldr	r3, [r3, #0]
 8105d50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8105d54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8105d56:	687b      	ldr	r3, [r7, #4]
 8105d58:	681b      	ldr	r3, [r3, #0]
 8105d5a:	685b      	ldr	r3, [r3, #4]
 8105d5c:	687a      	ldr	r2, [r7, #4]
 8105d5e:	6812      	ldr	r2, [r2, #0]
 8105d60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8105d64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8105d68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8105d6a:	687b      	ldr	r3, [r7, #4]
 8105d6c:	681b      	ldr	r3, [r3, #0]
 8105d6e:	68da      	ldr	r2, [r3, #12]
 8105d70:	687b      	ldr	r3, [r7, #4]
 8105d72:	681b      	ldr	r3, [r3, #0]
 8105d74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8105d78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8105d7a:	687b      	ldr	r3, [r7, #4]
 8105d7c:	691a      	ldr	r2, [r3, #16]
 8105d7e:	687b      	ldr	r3, [r7, #4]
 8105d80:	695b      	ldr	r3, [r3, #20]
 8105d82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8105d86:	687b      	ldr	r3, [r7, #4]
 8105d88:	699b      	ldr	r3, [r3, #24]
 8105d8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8105d8c:	687b      	ldr	r3, [r7, #4]
 8105d8e:	681b      	ldr	r3, [r3, #0]
 8105d90:	430a      	orrs	r2, r1
 8105d92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8105d94:	687b      	ldr	r3, [r7, #4]
 8105d96:	69d9      	ldr	r1, [r3, #28]
 8105d98:	687b      	ldr	r3, [r7, #4]
 8105d9a:	6a1a      	ldr	r2, [r3, #32]
 8105d9c:	687b      	ldr	r3, [r7, #4]
 8105d9e:	681b      	ldr	r3, [r3, #0]
 8105da0:	430a      	orrs	r2, r1
 8105da2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8105da4:	687b      	ldr	r3, [r7, #4]
 8105da6:	681b      	ldr	r3, [r3, #0]
 8105da8:	681a      	ldr	r2, [r3, #0]
 8105daa:	687b      	ldr	r3, [r7, #4]
 8105dac:	681b      	ldr	r3, [r3, #0]
 8105dae:	f042 0201 	orr.w	r2, r2, #1
 8105db2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105db4:	687b      	ldr	r3, [r7, #4]
 8105db6:	2200      	movs	r2, #0
 8105db8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8105dba:	687b      	ldr	r3, [r7, #4]
 8105dbc:	2220      	movs	r2, #32
 8105dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8105dc2:	687b      	ldr	r3, [r7, #4]
 8105dc4:	2200      	movs	r2, #0
 8105dc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8105dc8:	687b      	ldr	r3, [r7, #4]
 8105dca:	2200      	movs	r2, #0
 8105dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8105dd0:	2300      	movs	r3, #0
}
 8105dd2:	4618      	mov	r0, r3
 8105dd4:	3708      	adds	r7, #8
 8105dd6:	46bd      	mov	sp, r7
 8105dd8:	bd80      	pop	{r7, pc}
	...

08105ddc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8105ddc:	b580      	push	{r7, lr}
 8105dde:	b088      	sub	sp, #32
 8105de0:	af02      	add	r7, sp, #8
 8105de2:	60f8      	str	r0, [r7, #12]
 8105de4:	607a      	str	r2, [r7, #4]
 8105de6:	461a      	mov	r2, r3
 8105de8:	460b      	mov	r3, r1
 8105dea:	817b      	strh	r3, [r7, #10]
 8105dec:	4613      	mov	r3, r2
 8105dee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105df0:	68fb      	ldr	r3, [r7, #12]
 8105df2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8105df6:	b2db      	uxtb	r3, r3
 8105df8:	2b20      	cmp	r3, #32
 8105dfa:	f040 80fd 	bne.w	8105ff8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105dfe:	68fb      	ldr	r3, [r7, #12]
 8105e00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8105e04:	2b01      	cmp	r3, #1
 8105e06:	d101      	bne.n	8105e0c <HAL_I2C_Master_Transmit+0x30>
 8105e08:	2302      	movs	r3, #2
 8105e0a:	e0f6      	b.n	8105ffa <HAL_I2C_Master_Transmit+0x21e>
 8105e0c:	68fb      	ldr	r3, [r7, #12]
 8105e0e:	2201      	movs	r2, #1
 8105e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8105e14:	f7fd ff08 	bl	8103c28 <HAL_GetTick>
 8105e18:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8105e1a:	693b      	ldr	r3, [r7, #16]
 8105e1c:	9300      	str	r3, [sp, #0]
 8105e1e:	2319      	movs	r3, #25
 8105e20:	2201      	movs	r2, #1
 8105e22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8105e26:	68f8      	ldr	r0, [r7, #12]
 8105e28:	f000 fa24 	bl	8106274 <I2C_WaitOnFlagUntilTimeout>
 8105e2c:	4603      	mov	r3, r0
 8105e2e:	2b00      	cmp	r3, #0
 8105e30:	d001      	beq.n	8105e36 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8105e32:	2301      	movs	r3, #1
 8105e34:	e0e1      	b.n	8105ffa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8105e36:	68fb      	ldr	r3, [r7, #12]
 8105e38:	2221      	movs	r2, #33	@ 0x21
 8105e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8105e3e:	68fb      	ldr	r3, [r7, #12]
 8105e40:	2210      	movs	r2, #16
 8105e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105e46:	68fb      	ldr	r3, [r7, #12]
 8105e48:	2200      	movs	r2, #0
 8105e4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8105e4c:	68fb      	ldr	r3, [r7, #12]
 8105e4e:	687a      	ldr	r2, [r7, #4]
 8105e50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8105e52:	68fb      	ldr	r3, [r7, #12]
 8105e54:	893a      	ldrh	r2, [r7, #8]
 8105e56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8105e58:	68fb      	ldr	r3, [r7, #12]
 8105e5a:	2200      	movs	r2, #0
 8105e5c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105e5e:	68fb      	ldr	r3, [r7, #12]
 8105e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105e62:	b29b      	uxth	r3, r3
 8105e64:	2bff      	cmp	r3, #255	@ 0xff
 8105e66:	d906      	bls.n	8105e76 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8105e68:	68fb      	ldr	r3, [r7, #12]
 8105e6a:	22ff      	movs	r2, #255	@ 0xff
 8105e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8105e6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8105e72:	617b      	str	r3, [r7, #20]
 8105e74:	e007      	b.n	8105e86 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8105e76:	68fb      	ldr	r3, [r7, #12]
 8105e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105e7a:	b29a      	uxth	r2, r3
 8105e7c:	68fb      	ldr	r3, [r7, #12]
 8105e7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8105e80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8105e84:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8105e86:	68fb      	ldr	r3, [r7, #12]
 8105e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105e8a:	2b00      	cmp	r3, #0
 8105e8c:	d024      	beq.n	8105ed8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8105e8e:	68fb      	ldr	r3, [r7, #12]
 8105e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105e92:	781a      	ldrb	r2, [r3, #0]
 8105e94:	68fb      	ldr	r3, [r7, #12]
 8105e96:	681b      	ldr	r3, [r3, #0]
 8105e98:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105e9a:	68fb      	ldr	r3, [r7, #12]
 8105e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105e9e:	1c5a      	adds	r2, r3, #1
 8105ea0:	68fb      	ldr	r3, [r7, #12]
 8105ea2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8105ea4:	68fb      	ldr	r3, [r7, #12]
 8105ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105ea8:	b29b      	uxth	r3, r3
 8105eaa:	3b01      	subs	r3, #1
 8105eac:	b29a      	uxth	r2, r3
 8105eae:	68fb      	ldr	r3, [r7, #12]
 8105eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8105eb2:	68fb      	ldr	r3, [r7, #12]
 8105eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105eb6:	3b01      	subs	r3, #1
 8105eb8:	b29a      	uxth	r2, r3
 8105eba:	68fb      	ldr	r3, [r7, #12]
 8105ebc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8105ebe:	68fb      	ldr	r3, [r7, #12]
 8105ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105ec2:	b2db      	uxtb	r3, r3
 8105ec4:	3301      	adds	r3, #1
 8105ec6:	b2da      	uxtb	r2, r3
 8105ec8:	8979      	ldrh	r1, [r7, #10]
 8105eca:	4b4e      	ldr	r3, [pc, #312]	@ (8106004 <HAL_I2C_Master_Transmit+0x228>)
 8105ecc:	9300      	str	r3, [sp, #0]
 8105ece:	697b      	ldr	r3, [r7, #20]
 8105ed0:	68f8      	ldr	r0, [r7, #12]
 8105ed2:	f000 fc1f 	bl	8106714 <I2C_TransferConfig>
 8105ed6:	e066      	b.n	8105fa6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8105ed8:	68fb      	ldr	r3, [r7, #12]
 8105eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105edc:	b2da      	uxtb	r2, r3
 8105ede:	8979      	ldrh	r1, [r7, #10]
 8105ee0:	4b48      	ldr	r3, [pc, #288]	@ (8106004 <HAL_I2C_Master_Transmit+0x228>)
 8105ee2:	9300      	str	r3, [sp, #0]
 8105ee4:	697b      	ldr	r3, [r7, #20]
 8105ee6:	68f8      	ldr	r0, [r7, #12]
 8105ee8:	f000 fc14 	bl	8106714 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8105eec:	e05b      	b.n	8105fa6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105eee:	693a      	ldr	r2, [r7, #16]
 8105ef0:	6a39      	ldr	r1, [r7, #32]
 8105ef2:	68f8      	ldr	r0, [r7, #12]
 8105ef4:	f000 fa17 	bl	8106326 <I2C_WaitOnTXISFlagUntilTimeout>
 8105ef8:	4603      	mov	r3, r0
 8105efa:	2b00      	cmp	r3, #0
 8105efc:	d001      	beq.n	8105f02 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8105efe:	2301      	movs	r3, #1
 8105f00:	e07b      	b.n	8105ffa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8105f02:	68fb      	ldr	r3, [r7, #12]
 8105f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105f06:	781a      	ldrb	r2, [r3, #0]
 8105f08:	68fb      	ldr	r3, [r7, #12]
 8105f0a:	681b      	ldr	r3, [r3, #0]
 8105f0c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105f0e:	68fb      	ldr	r3, [r7, #12]
 8105f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105f12:	1c5a      	adds	r2, r3, #1
 8105f14:	68fb      	ldr	r3, [r7, #12]
 8105f16:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8105f18:	68fb      	ldr	r3, [r7, #12]
 8105f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105f1c:	b29b      	uxth	r3, r3
 8105f1e:	3b01      	subs	r3, #1
 8105f20:	b29a      	uxth	r2, r3
 8105f22:	68fb      	ldr	r3, [r7, #12]
 8105f24:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8105f26:	68fb      	ldr	r3, [r7, #12]
 8105f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105f2a:	3b01      	subs	r3, #1
 8105f2c:	b29a      	uxth	r2, r3
 8105f2e:	68fb      	ldr	r3, [r7, #12]
 8105f30:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8105f32:	68fb      	ldr	r3, [r7, #12]
 8105f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105f36:	b29b      	uxth	r3, r3
 8105f38:	2b00      	cmp	r3, #0
 8105f3a:	d034      	beq.n	8105fa6 <HAL_I2C_Master_Transmit+0x1ca>
 8105f3c:	68fb      	ldr	r3, [r7, #12]
 8105f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105f40:	2b00      	cmp	r3, #0
 8105f42:	d130      	bne.n	8105fa6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8105f44:	693b      	ldr	r3, [r7, #16]
 8105f46:	9300      	str	r3, [sp, #0]
 8105f48:	6a3b      	ldr	r3, [r7, #32]
 8105f4a:	2200      	movs	r2, #0
 8105f4c:	2180      	movs	r1, #128	@ 0x80
 8105f4e:	68f8      	ldr	r0, [r7, #12]
 8105f50:	f000 f990 	bl	8106274 <I2C_WaitOnFlagUntilTimeout>
 8105f54:	4603      	mov	r3, r0
 8105f56:	2b00      	cmp	r3, #0
 8105f58:	d001      	beq.n	8105f5e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8105f5a:	2301      	movs	r3, #1
 8105f5c:	e04d      	b.n	8105ffa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105f5e:	68fb      	ldr	r3, [r7, #12]
 8105f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105f62:	b29b      	uxth	r3, r3
 8105f64:	2bff      	cmp	r3, #255	@ 0xff
 8105f66:	d90e      	bls.n	8105f86 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8105f68:	68fb      	ldr	r3, [r7, #12]
 8105f6a:	22ff      	movs	r2, #255	@ 0xff
 8105f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8105f6e:	68fb      	ldr	r3, [r7, #12]
 8105f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105f72:	b2da      	uxtb	r2, r3
 8105f74:	8979      	ldrh	r1, [r7, #10]
 8105f76:	2300      	movs	r3, #0
 8105f78:	9300      	str	r3, [sp, #0]
 8105f7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8105f7e:	68f8      	ldr	r0, [r7, #12]
 8105f80:	f000 fbc8 	bl	8106714 <I2C_TransferConfig>
 8105f84:	e00f      	b.n	8105fa6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8105f86:	68fb      	ldr	r3, [r7, #12]
 8105f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105f8a:	b29a      	uxth	r2, r3
 8105f8c:	68fb      	ldr	r3, [r7, #12]
 8105f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8105f90:	68fb      	ldr	r3, [r7, #12]
 8105f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105f94:	b2da      	uxtb	r2, r3
 8105f96:	8979      	ldrh	r1, [r7, #10]
 8105f98:	2300      	movs	r3, #0
 8105f9a:	9300      	str	r3, [sp, #0]
 8105f9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8105fa0:	68f8      	ldr	r0, [r7, #12]
 8105fa2:	f000 fbb7 	bl	8106714 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8105fa6:	68fb      	ldr	r3, [r7, #12]
 8105fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105faa:	b29b      	uxth	r3, r3
 8105fac:	2b00      	cmp	r3, #0
 8105fae:	d19e      	bne.n	8105eee <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105fb0:	693a      	ldr	r2, [r7, #16]
 8105fb2:	6a39      	ldr	r1, [r7, #32]
 8105fb4:	68f8      	ldr	r0, [r7, #12]
 8105fb6:	f000 f9fd 	bl	81063b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8105fba:	4603      	mov	r3, r0
 8105fbc:	2b00      	cmp	r3, #0
 8105fbe:	d001      	beq.n	8105fc4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8105fc0:	2301      	movs	r3, #1
 8105fc2:	e01a      	b.n	8105ffa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105fc4:	68fb      	ldr	r3, [r7, #12]
 8105fc6:	681b      	ldr	r3, [r3, #0]
 8105fc8:	2220      	movs	r2, #32
 8105fca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105fcc:	68fb      	ldr	r3, [r7, #12]
 8105fce:	681b      	ldr	r3, [r3, #0]
 8105fd0:	6859      	ldr	r1, [r3, #4]
 8105fd2:	68fb      	ldr	r3, [r7, #12]
 8105fd4:	681a      	ldr	r2, [r3, #0]
 8105fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8106008 <HAL_I2C_Master_Transmit+0x22c>)
 8105fd8:	400b      	ands	r3, r1
 8105fda:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8105fdc:	68fb      	ldr	r3, [r7, #12]
 8105fde:	2220      	movs	r2, #32
 8105fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8105fe4:	68fb      	ldr	r3, [r7, #12]
 8105fe6:	2200      	movs	r2, #0
 8105fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105fec:	68fb      	ldr	r3, [r7, #12]
 8105fee:	2200      	movs	r2, #0
 8105ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8105ff4:	2300      	movs	r3, #0
 8105ff6:	e000      	b.n	8105ffa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8105ff8:	2302      	movs	r3, #2
  }
}
 8105ffa:	4618      	mov	r0, r3
 8105ffc:	3718      	adds	r7, #24
 8105ffe:	46bd      	mov	sp, r7
 8106000:	bd80      	pop	{r7, pc}
 8106002:	bf00      	nop
 8106004:	80002000 	.word	0x80002000
 8106008:	fe00e800 	.word	0xfe00e800

0810600c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 810600c:	b580      	push	{r7, lr}
 810600e:	b088      	sub	sp, #32
 8106010:	af02      	add	r7, sp, #8
 8106012:	60f8      	str	r0, [r7, #12]
 8106014:	607a      	str	r2, [r7, #4]
 8106016:	461a      	mov	r2, r3
 8106018:	460b      	mov	r3, r1
 810601a:	817b      	strh	r3, [r7, #10]
 810601c:	4613      	mov	r3, r2
 810601e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106020:	68fb      	ldr	r3, [r7, #12]
 8106022:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106026:	b2db      	uxtb	r3, r3
 8106028:	2b20      	cmp	r3, #32
 810602a:	f040 80db 	bne.w	81061e4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810602e:	68fb      	ldr	r3, [r7, #12]
 8106030:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8106034:	2b01      	cmp	r3, #1
 8106036:	d101      	bne.n	810603c <HAL_I2C_Master_Receive+0x30>
 8106038:	2302      	movs	r3, #2
 810603a:	e0d4      	b.n	81061e6 <HAL_I2C_Master_Receive+0x1da>
 810603c:	68fb      	ldr	r3, [r7, #12]
 810603e:	2201      	movs	r2, #1
 8106040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8106044:	f7fd fdf0 	bl	8103c28 <HAL_GetTick>
 8106048:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810604a:	697b      	ldr	r3, [r7, #20]
 810604c:	9300      	str	r3, [sp, #0]
 810604e:	2319      	movs	r3, #25
 8106050:	2201      	movs	r2, #1
 8106052:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8106056:	68f8      	ldr	r0, [r7, #12]
 8106058:	f000 f90c 	bl	8106274 <I2C_WaitOnFlagUntilTimeout>
 810605c:	4603      	mov	r3, r0
 810605e:	2b00      	cmp	r3, #0
 8106060:	d001      	beq.n	8106066 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8106062:	2301      	movs	r3, #1
 8106064:	e0bf      	b.n	81061e6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8106066:	68fb      	ldr	r3, [r7, #12]
 8106068:	2222      	movs	r2, #34	@ 0x22
 810606a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 810606e:	68fb      	ldr	r3, [r7, #12]
 8106070:	2210      	movs	r2, #16
 8106072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8106076:	68fb      	ldr	r3, [r7, #12]
 8106078:	2200      	movs	r2, #0
 810607a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810607c:	68fb      	ldr	r3, [r7, #12]
 810607e:	687a      	ldr	r2, [r7, #4]
 8106080:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8106082:	68fb      	ldr	r3, [r7, #12]
 8106084:	893a      	ldrh	r2, [r7, #8]
 8106086:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8106088:	68fb      	ldr	r3, [r7, #12]
 810608a:	2200      	movs	r2, #0
 810608c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810608e:	68fb      	ldr	r3, [r7, #12]
 8106090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106092:	b29b      	uxth	r3, r3
 8106094:	2bff      	cmp	r3, #255	@ 0xff
 8106096:	d90e      	bls.n	81060b6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8106098:	68fb      	ldr	r3, [r7, #12]
 810609a:	22ff      	movs	r2, #255	@ 0xff
 810609c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810609e:	68fb      	ldr	r3, [r7, #12]
 81060a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81060a2:	b2da      	uxtb	r2, r3
 81060a4:	8979      	ldrh	r1, [r7, #10]
 81060a6:	4b52      	ldr	r3, [pc, #328]	@ (81061f0 <HAL_I2C_Master_Receive+0x1e4>)
 81060a8:	9300      	str	r3, [sp, #0]
 81060aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81060ae:	68f8      	ldr	r0, [r7, #12]
 81060b0:	f000 fb30 	bl	8106714 <I2C_TransferConfig>
 81060b4:	e06d      	b.n	8106192 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81060b6:	68fb      	ldr	r3, [r7, #12]
 81060b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81060ba:	b29a      	uxth	r2, r3
 81060bc:	68fb      	ldr	r3, [r7, #12]
 81060be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81060c0:	68fb      	ldr	r3, [r7, #12]
 81060c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81060c4:	b2da      	uxtb	r2, r3
 81060c6:	8979      	ldrh	r1, [r7, #10]
 81060c8:	4b49      	ldr	r3, [pc, #292]	@ (81061f0 <HAL_I2C_Master_Receive+0x1e4>)
 81060ca:	9300      	str	r3, [sp, #0]
 81060cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81060d0:	68f8      	ldr	r0, [r7, #12]
 81060d2:	f000 fb1f 	bl	8106714 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 81060d6:	e05c      	b.n	8106192 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81060d8:	697a      	ldr	r2, [r7, #20]
 81060da:	6a39      	ldr	r1, [r7, #32]
 81060dc:	68f8      	ldr	r0, [r7, #12]
 81060de:	f000 f9ad 	bl	810643c <I2C_WaitOnRXNEFlagUntilTimeout>
 81060e2:	4603      	mov	r3, r0
 81060e4:	2b00      	cmp	r3, #0
 81060e6:	d001      	beq.n	81060ec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 81060e8:	2301      	movs	r3, #1
 81060ea:	e07c      	b.n	81061e6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81060ec:	68fb      	ldr	r3, [r7, #12]
 81060ee:	681b      	ldr	r3, [r3, #0]
 81060f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81060f2:	68fb      	ldr	r3, [r7, #12]
 81060f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81060f6:	b2d2      	uxtb	r2, r2
 81060f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81060fa:	68fb      	ldr	r3, [r7, #12]
 81060fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81060fe:	1c5a      	adds	r2, r3, #1
 8106100:	68fb      	ldr	r3, [r7, #12]
 8106102:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8106104:	68fb      	ldr	r3, [r7, #12]
 8106106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8106108:	3b01      	subs	r3, #1
 810610a:	b29a      	uxth	r2, r3
 810610c:	68fb      	ldr	r3, [r7, #12]
 810610e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8106110:	68fb      	ldr	r3, [r7, #12]
 8106112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106114:	b29b      	uxth	r3, r3
 8106116:	3b01      	subs	r3, #1
 8106118:	b29a      	uxth	r2, r3
 810611a:	68fb      	ldr	r3, [r7, #12]
 810611c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810611e:	68fb      	ldr	r3, [r7, #12]
 8106120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106122:	b29b      	uxth	r3, r3
 8106124:	2b00      	cmp	r3, #0
 8106126:	d034      	beq.n	8106192 <HAL_I2C_Master_Receive+0x186>
 8106128:	68fb      	ldr	r3, [r7, #12]
 810612a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810612c:	2b00      	cmp	r3, #0
 810612e:	d130      	bne.n	8106192 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8106130:	697b      	ldr	r3, [r7, #20]
 8106132:	9300      	str	r3, [sp, #0]
 8106134:	6a3b      	ldr	r3, [r7, #32]
 8106136:	2200      	movs	r2, #0
 8106138:	2180      	movs	r1, #128	@ 0x80
 810613a:	68f8      	ldr	r0, [r7, #12]
 810613c:	f000 f89a 	bl	8106274 <I2C_WaitOnFlagUntilTimeout>
 8106140:	4603      	mov	r3, r0
 8106142:	2b00      	cmp	r3, #0
 8106144:	d001      	beq.n	810614a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8106146:	2301      	movs	r3, #1
 8106148:	e04d      	b.n	81061e6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810614a:	68fb      	ldr	r3, [r7, #12]
 810614c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810614e:	b29b      	uxth	r3, r3
 8106150:	2bff      	cmp	r3, #255	@ 0xff
 8106152:	d90e      	bls.n	8106172 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8106154:	68fb      	ldr	r3, [r7, #12]
 8106156:	22ff      	movs	r2, #255	@ 0xff
 8106158:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810615a:	68fb      	ldr	r3, [r7, #12]
 810615c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810615e:	b2da      	uxtb	r2, r3
 8106160:	8979      	ldrh	r1, [r7, #10]
 8106162:	2300      	movs	r3, #0
 8106164:	9300      	str	r3, [sp, #0]
 8106166:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810616a:	68f8      	ldr	r0, [r7, #12]
 810616c:	f000 fad2 	bl	8106714 <I2C_TransferConfig>
 8106170:	e00f      	b.n	8106192 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8106172:	68fb      	ldr	r3, [r7, #12]
 8106174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106176:	b29a      	uxth	r2, r3
 8106178:	68fb      	ldr	r3, [r7, #12]
 810617a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810617c:	68fb      	ldr	r3, [r7, #12]
 810617e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8106180:	b2da      	uxtb	r2, r3
 8106182:	8979      	ldrh	r1, [r7, #10]
 8106184:	2300      	movs	r3, #0
 8106186:	9300      	str	r3, [sp, #0]
 8106188:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810618c:	68f8      	ldr	r0, [r7, #12]
 810618e:	f000 fac1 	bl	8106714 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8106192:	68fb      	ldr	r3, [r7, #12]
 8106194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106196:	b29b      	uxth	r3, r3
 8106198:	2b00      	cmp	r3, #0
 810619a:	d19d      	bne.n	81060d8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810619c:	697a      	ldr	r2, [r7, #20]
 810619e:	6a39      	ldr	r1, [r7, #32]
 81061a0:	68f8      	ldr	r0, [r7, #12]
 81061a2:	f000 f907 	bl	81063b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 81061a6:	4603      	mov	r3, r0
 81061a8:	2b00      	cmp	r3, #0
 81061aa:	d001      	beq.n	81061b0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 81061ac:	2301      	movs	r3, #1
 81061ae:	e01a      	b.n	81061e6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81061b0:	68fb      	ldr	r3, [r7, #12]
 81061b2:	681b      	ldr	r3, [r3, #0]
 81061b4:	2220      	movs	r2, #32
 81061b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81061b8:	68fb      	ldr	r3, [r7, #12]
 81061ba:	681b      	ldr	r3, [r3, #0]
 81061bc:	6859      	ldr	r1, [r3, #4]
 81061be:	68fb      	ldr	r3, [r7, #12]
 81061c0:	681a      	ldr	r2, [r3, #0]
 81061c2:	4b0c      	ldr	r3, [pc, #48]	@ (81061f4 <HAL_I2C_Master_Receive+0x1e8>)
 81061c4:	400b      	ands	r3, r1
 81061c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81061c8:	68fb      	ldr	r3, [r7, #12]
 81061ca:	2220      	movs	r2, #32
 81061cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81061d0:	68fb      	ldr	r3, [r7, #12]
 81061d2:	2200      	movs	r2, #0
 81061d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81061d8:	68fb      	ldr	r3, [r7, #12]
 81061da:	2200      	movs	r2, #0
 81061dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81061e0:	2300      	movs	r3, #0
 81061e2:	e000      	b.n	81061e6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 81061e4:	2302      	movs	r3, #2
  }
}
 81061e6:	4618      	mov	r0, r3
 81061e8:	3718      	adds	r7, #24
 81061ea:	46bd      	mov	sp, r7
 81061ec:	bd80      	pop	{r7, pc}
 81061ee:	bf00      	nop
 81061f0:	80002400 	.word	0x80002400
 81061f4:	fe00e800 	.word	0xfe00e800

081061f8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 81061f8:	b480      	push	{r7}
 81061fa:	b083      	sub	sp, #12
 81061fc:	af00      	add	r7, sp, #0
 81061fe:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8106200:	687b      	ldr	r3, [r7, #4]
 8106202:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106206:	b2db      	uxtb	r3, r3
}
 8106208:	4618      	mov	r0, r3
 810620a:	370c      	adds	r7, #12
 810620c:	46bd      	mov	sp, r7
 810620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106212:	4770      	bx	lr

08106214 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8106214:	b480      	push	{r7}
 8106216:	b083      	sub	sp, #12
 8106218:	af00      	add	r7, sp, #0
 810621a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 810621c:	687b      	ldr	r3, [r7, #4]
 810621e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8106220:	4618      	mov	r0, r3
 8106222:	370c      	adds	r7, #12
 8106224:	46bd      	mov	sp, r7
 8106226:	f85d 7b04 	ldr.w	r7, [sp], #4
 810622a:	4770      	bx	lr

0810622c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 810622c:	b480      	push	{r7}
 810622e:	b083      	sub	sp, #12
 8106230:	af00      	add	r7, sp, #0
 8106232:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8106234:	687b      	ldr	r3, [r7, #4]
 8106236:	681b      	ldr	r3, [r3, #0]
 8106238:	699b      	ldr	r3, [r3, #24]
 810623a:	f003 0302 	and.w	r3, r3, #2
 810623e:	2b02      	cmp	r3, #2
 8106240:	d103      	bne.n	810624a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8106242:	687b      	ldr	r3, [r7, #4]
 8106244:	681b      	ldr	r3, [r3, #0]
 8106246:	2200      	movs	r2, #0
 8106248:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810624a:	687b      	ldr	r3, [r7, #4]
 810624c:	681b      	ldr	r3, [r3, #0]
 810624e:	699b      	ldr	r3, [r3, #24]
 8106250:	f003 0301 	and.w	r3, r3, #1
 8106254:	2b01      	cmp	r3, #1
 8106256:	d007      	beq.n	8106268 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8106258:	687b      	ldr	r3, [r7, #4]
 810625a:	681b      	ldr	r3, [r3, #0]
 810625c:	699a      	ldr	r2, [r3, #24]
 810625e:	687b      	ldr	r3, [r7, #4]
 8106260:	681b      	ldr	r3, [r3, #0]
 8106262:	f042 0201 	orr.w	r2, r2, #1
 8106266:	619a      	str	r2, [r3, #24]
  }
}
 8106268:	bf00      	nop
 810626a:	370c      	adds	r7, #12
 810626c:	46bd      	mov	sp, r7
 810626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106272:	4770      	bx	lr

08106274 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8106274:	b580      	push	{r7, lr}
 8106276:	b084      	sub	sp, #16
 8106278:	af00      	add	r7, sp, #0
 810627a:	60f8      	str	r0, [r7, #12]
 810627c:	60b9      	str	r1, [r7, #8]
 810627e:	603b      	str	r3, [r7, #0]
 8106280:	4613      	mov	r3, r2
 8106282:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8106284:	e03b      	b.n	81062fe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8106286:	69ba      	ldr	r2, [r7, #24]
 8106288:	6839      	ldr	r1, [r7, #0]
 810628a:	68f8      	ldr	r0, [r7, #12]
 810628c:	f000 f962 	bl	8106554 <I2C_IsErrorOccurred>
 8106290:	4603      	mov	r3, r0
 8106292:	2b00      	cmp	r3, #0
 8106294:	d001      	beq.n	810629a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8106296:	2301      	movs	r3, #1
 8106298:	e041      	b.n	810631e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810629a:	683b      	ldr	r3, [r7, #0]
 810629c:	f1b3 3fff 	cmp.w	r3, #4294967295
 81062a0:	d02d      	beq.n	81062fe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81062a2:	f7fd fcc1 	bl	8103c28 <HAL_GetTick>
 81062a6:	4602      	mov	r2, r0
 81062a8:	69bb      	ldr	r3, [r7, #24]
 81062aa:	1ad3      	subs	r3, r2, r3
 81062ac:	683a      	ldr	r2, [r7, #0]
 81062ae:	429a      	cmp	r2, r3
 81062b0:	d302      	bcc.n	81062b8 <I2C_WaitOnFlagUntilTimeout+0x44>
 81062b2:	683b      	ldr	r3, [r7, #0]
 81062b4:	2b00      	cmp	r3, #0
 81062b6:	d122      	bne.n	81062fe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 81062b8:	68fb      	ldr	r3, [r7, #12]
 81062ba:	681b      	ldr	r3, [r3, #0]
 81062bc:	699a      	ldr	r2, [r3, #24]
 81062be:	68bb      	ldr	r3, [r7, #8]
 81062c0:	4013      	ands	r3, r2
 81062c2:	68ba      	ldr	r2, [r7, #8]
 81062c4:	429a      	cmp	r2, r3
 81062c6:	bf0c      	ite	eq
 81062c8:	2301      	moveq	r3, #1
 81062ca:	2300      	movne	r3, #0
 81062cc:	b2db      	uxtb	r3, r3
 81062ce:	461a      	mov	r2, r3
 81062d0:	79fb      	ldrb	r3, [r7, #7]
 81062d2:	429a      	cmp	r2, r3
 81062d4:	d113      	bne.n	81062fe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81062d6:	68fb      	ldr	r3, [r7, #12]
 81062d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81062da:	f043 0220 	orr.w	r2, r3, #32
 81062de:	68fb      	ldr	r3, [r7, #12]
 81062e0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 81062e2:	68fb      	ldr	r3, [r7, #12]
 81062e4:	2220      	movs	r2, #32
 81062e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 81062ea:	68fb      	ldr	r3, [r7, #12]
 81062ec:	2200      	movs	r2, #0
 81062ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81062f2:	68fb      	ldr	r3, [r7, #12]
 81062f4:	2200      	movs	r2, #0
 81062f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 81062fa:	2301      	movs	r3, #1
 81062fc:	e00f      	b.n	810631e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81062fe:	68fb      	ldr	r3, [r7, #12]
 8106300:	681b      	ldr	r3, [r3, #0]
 8106302:	699a      	ldr	r2, [r3, #24]
 8106304:	68bb      	ldr	r3, [r7, #8]
 8106306:	4013      	ands	r3, r2
 8106308:	68ba      	ldr	r2, [r7, #8]
 810630a:	429a      	cmp	r2, r3
 810630c:	bf0c      	ite	eq
 810630e:	2301      	moveq	r3, #1
 8106310:	2300      	movne	r3, #0
 8106312:	b2db      	uxtb	r3, r3
 8106314:	461a      	mov	r2, r3
 8106316:	79fb      	ldrb	r3, [r7, #7]
 8106318:	429a      	cmp	r2, r3
 810631a:	d0b4      	beq.n	8106286 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810631c:	2300      	movs	r3, #0
}
 810631e:	4618      	mov	r0, r3
 8106320:	3710      	adds	r7, #16
 8106322:	46bd      	mov	sp, r7
 8106324:	bd80      	pop	{r7, pc}

08106326 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8106326:	b580      	push	{r7, lr}
 8106328:	b084      	sub	sp, #16
 810632a:	af00      	add	r7, sp, #0
 810632c:	60f8      	str	r0, [r7, #12]
 810632e:	60b9      	str	r1, [r7, #8]
 8106330:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8106332:	e033      	b.n	810639c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8106334:	687a      	ldr	r2, [r7, #4]
 8106336:	68b9      	ldr	r1, [r7, #8]
 8106338:	68f8      	ldr	r0, [r7, #12]
 810633a:	f000 f90b 	bl	8106554 <I2C_IsErrorOccurred>
 810633e:	4603      	mov	r3, r0
 8106340:	2b00      	cmp	r3, #0
 8106342:	d001      	beq.n	8106348 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8106344:	2301      	movs	r3, #1
 8106346:	e031      	b.n	81063ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8106348:	68bb      	ldr	r3, [r7, #8]
 810634a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810634e:	d025      	beq.n	810639c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106350:	f7fd fc6a 	bl	8103c28 <HAL_GetTick>
 8106354:	4602      	mov	r2, r0
 8106356:	687b      	ldr	r3, [r7, #4]
 8106358:	1ad3      	subs	r3, r2, r3
 810635a:	68ba      	ldr	r2, [r7, #8]
 810635c:	429a      	cmp	r2, r3
 810635e:	d302      	bcc.n	8106366 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8106360:	68bb      	ldr	r3, [r7, #8]
 8106362:	2b00      	cmp	r3, #0
 8106364:	d11a      	bne.n	810639c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8106366:	68fb      	ldr	r3, [r7, #12]
 8106368:	681b      	ldr	r3, [r3, #0]
 810636a:	699b      	ldr	r3, [r3, #24]
 810636c:	f003 0302 	and.w	r3, r3, #2
 8106370:	2b02      	cmp	r3, #2
 8106372:	d013      	beq.n	810639c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8106374:	68fb      	ldr	r3, [r7, #12]
 8106376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106378:	f043 0220 	orr.w	r2, r3, #32
 810637c:	68fb      	ldr	r3, [r7, #12]
 810637e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8106380:	68fb      	ldr	r3, [r7, #12]
 8106382:	2220      	movs	r2, #32
 8106384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8106388:	68fb      	ldr	r3, [r7, #12]
 810638a:	2200      	movs	r2, #0
 810638c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8106390:	68fb      	ldr	r3, [r7, #12]
 8106392:	2200      	movs	r2, #0
 8106394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8106398:	2301      	movs	r3, #1
 810639a:	e007      	b.n	81063ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810639c:	68fb      	ldr	r3, [r7, #12]
 810639e:	681b      	ldr	r3, [r3, #0]
 81063a0:	699b      	ldr	r3, [r3, #24]
 81063a2:	f003 0302 	and.w	r3, r3, #2
 81063a6:	2b02      	cmp	r3, #2
 81063a8:	d1c4      	bne.n	8106334 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 81063aa:	2300      	movs	r3, #0
}
 81063ac:	4618      	mov	r0, r3
 81063ae:	3710      	adds	r7, #16
 81063b0:	46bd      	mov	sp, r7
 81063b2:	bd80      	pop	{r7, pc}

081063b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81063b4:	b580      	push	{r7, lr}
 81063b6:	b084      	sub	sp, #16
 81063b8:	af00      	add	r7, sp, #0
 81063ba:	60f8      	str	r0, [r7, #12]
 81063bc:	60b9      	str	r1, [r7, #8]
 81063be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81063c0:	e02f      	b.n	8106422 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81063c2:	687a      	ldr	r2, [r7, #4]
 81063c4:	68b9      	ldr	r1, [r7, #8]
 81063c6:	68f8      	ldr	r0, [r7, #12]
 81063c8:	f000 f8c4 	bl	8106554 <I2C_IsErrorOccurred>
 81063cc:	4603      	mov	r3, r0
 81063ce:	2b00      	cmp	r3, #0
 81063d0:	d001      	beq.n	81063d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81063d2:	2301      	movs	r3, #1
 81063d4:	e02d      	b.n	8106432 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81063d6:	f7fd fc27 	bl	8103c28 <HAL_GetTick>
 81063da:	4602      	mov	r2, r0
 81063dc:	687b      	ldr	r3, [r7, #4]
 81063de:	1ad3      	subs	r3, r2, r3
 81063e0:	68ba      	ldr	r2, [r7, #8]
 81063e2:	429a      	cmp	r2, r3
 81063e4:	d302      	bcc.n	81063ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 81063e6:	68bb      	ldr	r3, [r7, #8]
 81063e8:	2b00      	cmp	r3, #0
 81063ea:	d11a      	bne.n	8106422 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 81063ec:	68fb      	ldr	r3, [r7, #12]
 81063ee:	681b      	ldr	r3, [r3, #0]
 81063f0:	699b      	ldr	r3, [r3, #24]
 81063f2:	f003 0320 	and.w	r3, r3, #32
 81063f6:	2b20      	cmp	r3, #32
 81063f8:	d013      	beq.n	8106422 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81063fa:	68fb      	ldr	r3, [r7, #12]
 81063fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81063fe:	f043 0220 	orr.w	r2, r3, #32
 8106402:	68fb      	ldr	r3, [r7, #12]
 8106404:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8106406:	68fb      	ldr	r3, [r7, #12]
 8106408:	2220      	movs	r2, #32
 810640a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 810640e:	68fb      	ldr	r3, [r7, #12]
 8106410:	2200      	movs	r2, #0
 8106412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8106416:	68fb      	ldr	r3, [r7, #12]
 8106418:	2200      	movs	r2, #0
 810641a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 810641e:	2301      	movs	r3, #1
 8106420:	e007      	b.n	8106432 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8106422:	68fb      	ldr	r3, [r7, #12]
 8106424:	681b      	ldr	r3, [r3, #0]
 8106426:	699b      	ldr	r3, [r3, #24]
 8106428:	f003 0320 	and.w	r3, r3, #32
 810642c:	2b20      	cmp	r3, #32
 810642e:	d1c8      	bne.n	81063c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8106430:	2300      	movs	r3, #0
}
 8106432:	4618      	mov	r0, r3
 8106434:	3710      	adds	r7, #16
 8106436:	46bd      	mov	sp, r7
 8106438:	bd80      	pop	{r7, pc}
	...

0810643c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 810643c:	b580      	push	{r7, lr}
 810643e:	b086      	sub	sp, #24
 8106440:	af00      	add	r7, sp, #0
 8106442:	60f8      	str	r0, [r7, #12]
 8106444:	60b9      	str	r1, [r7, #8]
 8106446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106448:	2300      	movs	r3, #0
 810644a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 810644c:	e071      	b.n	8106532 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810644e:	687a      	ldr	r2, [r7, #4]
 8106450:	68b9      	ldr	r1, [r7, #8]
 8106452:	68f8      	ldr	r0, [r7, #12]
 8106454:	f000 f87e 	bl	8106554 <I2C_IsErrorOccurred>
 8106458:	4603      	mov	r3, r0
 810645a:	2b00      	cmp	r3, #0
 810645c:	d001      	beq.n	8106462 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 810645e:	2301      	movs	r3, #1
 8106460:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8106462:	68fb      	ldr	r3, [r7, #12]
 8106464:	681b      	ldr	r3, [r3, #0]
 8106466:	699b      	ldr	r3, [r3, #24]
 8106468:	f003 0320 	and.w	r3, r3, #32
 810646c:	2b20      	cmp	r3, #32
 810646e:	d13b      	bne.n	81064e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8106470:	7dfb      	ldrb	r3, [r7, #23]
 8106472:	2b00      	cmp	r3, #0
 8106474:	d138      	bne.n	81064e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8106476:	68fb      	ldr	r3, [r7, #12]
 8106478:	681b      	ldr	r3, [r3, #0]
 810647a:	699b      	ldr	r3, [r3, #24]
 810647c:	f003 0304 	and.w	r3, r3, #4
 8106480:	2b04      	cmp	r3, #4
 8106482:	d105      	bne.n	8106490 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8106484:	68fb      	ldr	r3, [r7, #12]
 8106486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8106488:	2b00      	cmp	r3, #0
 810648a:	d001      	beq.n	8106490 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 810648c:	2300      	movs	r3, #0
 810648e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8106490:	68fb      	ldr	r3, [r7, #12]
 8106492:	681b      	ldr	r3, [r3, #0]
 8106494:	699b      	ldr	r3, [r3, #24]
 8106496:	f003 0310 	and.w	r3, r3, #16
 810649a:	2b10      	cmp	r3, #16
 810649c:	d121      	bne.n	81064e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810649e:	68fb      	ldr	r3, [r7, #12]
 81064a0:	681b      	ldr	r3, [r3, #0]
 81064a2:	2210      	movs	r2, #16
 81064a4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 81064a6:	68fb      	ldr	r3, [r7, #12]
 81064a8:	2204      	movs	r2, #4
 81064aa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81064ac:	68fb      	ldr	r3, [r7, #12]
 81064ae:	681b      	ldr	r3, [r3, #0]
 81064b0:	2220      	movs	r2, #32
 81064b2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 81064b4:	68fb      	ldr	r3, [r7, #12]
 81064b6:	681b      	ldr	r3, [r3, #0]
 81064b8:	6859      	ldr	r1, [r3, #4]
 81064ba:	68fb      	ldr	r3, [r7, #12]
 81064bc:	681a      	ldr	r2, [r3, #0]
 81064be:	4b24      	ldr	r3, [pc, #144]	@ (8106550 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 81064c0:	400b      	ands	r3, r1
 81064c2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 81064c4:	68fb      	ldr	r3, [r7, #12]
 81064c6:	2220      	movs	r2, #32
 81064c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81064cc:	68fb      	ldr	r3, [r7, #12]
 81064ce:	2200      	movs	r2, #0
 81064d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81064d4:	68fb      	ldr	r3, [r7, #12]
 81064d6:	2200      	movs	r2, #0
 81064d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 81064dc:	2301      	movs	r3, #1
 81064de:	75fb      	strb	r3, [r7, #23]
 81064e0:	e002      	b.n	81064e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81064e2:	68fb      	ldr	r3, [r7, #12]
 81064e4:	2200      	movs	r2, #0
 81064e6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 81064e8:	f7fd fb9e 	bl	8103c28 <HAL_GetTick>
 81064ec:	4602      	mov	r2, r0
 81064ee:	687b      	ldr	r3, [r7, #4]
 81064f0:	1ad3      	subs	r3, r2, r3
 81064f2:	68ba      	ldr	r2, [r7, #8]
 81064f4:	429a      	cmp	r2, r3
 81064f6:	d302      	bcc.n	81064fe <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 81064f8:	68bb      	ldr	r3, [r7, #8]
 81064fa:	2b00      	cmp	r3, #0
 81064fc:	d119      	bne.n	8106532 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 81064fe:	7dfb      	ldrb	r3, [r7, #23]
 8106500:	2b00      	cmp	r3, #0
 8106502:	d116      	bne.n	8106532 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8106504:	68fb      	ldr	r3, [r7, #12]
 8106506:	681b      	ldr	r3, [r3, #0]
 8106508:	699b      	ldr	r3, [r3, #24]
 810650a:	f003 0304 	and.w	r3, r3, #4
 810650e:	2b04      	cmp	r3, #4
 8106510:	d00f      	beq.n	8106532 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8106512:	68fb      	ldr	r3, [r7, #12]
 8106514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106516:	f043 0220 	orr.w	r2, r3, #32
 810651a:	68fb      	ldr	r3, [r7, #12]
 810651c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810651e:	68fb      	ldr	r3, [r7, #12]
 8106520:	2220      	movs	r2, #32
 8106522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8106526:	68fb      	ldr	r3, [r7, #12]
 8106528:	2200      	movs	r2, #0
 810652a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 810652e:	2301      	movs	r3, #1
 8106530:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8106532:	68fb      	ldr	r3, [r7, #12]
 8106534:	681b      	ldr	r3, [r3, #0]
 8106536:	699b      	ldr	r3, [r3, #24]
 8106538:	f003 0304 	and.w	r3, r3, #4
 810653c:	2b04      	cmp	r3, #4
 810653e:	d002      	beq.n	8106546 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8106540:	7dfb      	ldrb	r3, [r7, #23]
 8106542:	2b00      	cmp	r3, #0
 8106544:	d083      	beq.n	810644e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8106546:	7dfb      	ldrb	r3, [r7, #23]
}
 8106548:	4618      	mov	r0, r3
 810654a:	3718      	adds	r7, #24
 810654c:	46bd      	mov	sp, r7
 810654e:	bd80      	pop	{r7, pc}
 8106550:	fe00e800 	.word	0xfe00e800

08106554 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8106554:	b580      	push	{r7, lr}
 8106556:	b08a      	sub	sp, #40	@ 0x28
 8106558:	af00      	add	r7, sp, #0
 810655a:	60f8      	str	r0, [r7, #12]
 810655c:	60b9      	str	r1, [r7, #8]
 810655e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106560:	2300      	movs	r3, #0
 8106562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8106566:	68fb      	ldr	r3, [r7, #12]
 8106568:	681b      	ldr	r3, [r3, #0]
 810656a:	699b      	ldr	r3, [r3, #24]
 810656c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 810656e:	2300      	movs	r3, #0
 8106570:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8106572:	687b      	ldr	r3, [r7, #4]
 8106574:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8106576:	69bb      	ldr	r3, [r7, #24]
 8106578:	f003 0310 	and.w	r3, r3, #16
 810657c:	2b00      	cmp	r3, #0
 810657e:	d068      	beq.n	8106652 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8106580:	68fb      	ldr	r3, [r7, #12]
 8106582:	681b      	ldr	r3, [r3, #0]
 8106584:	2210      	movs	r2, #16
 8106586:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8106588:	e049      	b.n	810661e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810658a:	68bb      	ldr	r3, [r7, #8]
 810658c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106590:	d045      	beq.n	810661e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8106592:	f7fd fb49 	bl	8103c28 <HAL_GetTick>
 8106596:	4602      	mov	r2, r0
 8106598:	69fb      	ldr	r3, [r7, #28]
 810659a:	1ad3      	subs	r3, r2, r3
 810659c:	68ba      	ldr	r2, [r7, #8]
 810659e:	429a      	cmp	r2, r3
 81065a0:	d302      	bcc.n	81065a8 <I2C_IsErrorOccurred+0x54>
 81065a2:	68bb      	ldr	r3, [r7, #8]
 81065a4:	2b00      	cmp	r3, #0
 81065a6:	d13a      	bne.n	810661e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 81065a8:	68fb      	ldr	r3, [r7, #12]
 81065aa:	681b      	ldr	r3, [r3, #0]
 81065ac:	685b      	ldr	r3, [r3, #4]
 81065ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81065b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 81065b4:	68fb      	ldr	r3, [r7, #12]
 81065b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81065ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 81065bc:	68fb      	ldr	r3, [r7, #12]
 81065be:	681b      	ldr	r3, [r3, #0]
 81065c0:	699b      	ldr	r3, [r3, #24]
 81065c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81065c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81065ca:	d121      	bne.n	8106610 <I2C_IsErrorOccurred+0xbc>
 81065cc:	697b      	ldr	r3, [r7, #20]
 81065ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81065d2:	d01d      	beq.n	8106610 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 81065d4:	7cfb      	ldrb	r3, [r7, #19]
 81065d6:	2b20      	cmp	r3, #32
 81065d8:	d01a      	beq.n	8106610 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 81065da:	68fb      	ldr	r3, [r7, #12]
 81065dc:	681b      	ldr	r3, [r3, #0]
 81065de:	685a      	ldr	r2, [r3, #4]
 81065e0:	68fb      	ldr	r3, [r7, #12]
 81065e2:	681b      	ldr	r3, [r3, #0]
 81065e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 81065e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 81065ea:	f7fd fb1d 	bl	8103c28 <HAL_GetTick>
 81065ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81065f0:	e00e      	b.n	8106610 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 81065f2:	f7fd fb19 	bl	8103c28 <HAL_GetTick>
 81065f6:	4602      	mov	r2, r0
 81065f8:	69fb      	ldr	r3, [r7, #28]
 81065fa:	1ad3      	subs	r3, r2, r3
 81065fc:	2b19      	cmp	r3, #25
 81065fe:	d907      	bls.n	8106610 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8106600:	6a3b      	ldr	r3, [r7, #32]
 8106602:	f043 0320 	orr.w	r3, r3, #32
 8106606:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8106608:	2301      	movs	r3, #1
 810660a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 810660e:	e006      	b.n	810661e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8106610:	68fb      	ldr	r3, [r7, #12]
 8106612:	681b      	ldr	r3, [r3, #0]
 8106614:	699b      	ldr	r3, [r3, #24]
 8106616:	f003 0320 	and.w	r3, r3, #32
 810661a:	2b20      	cmp	r3, #32
 810661c:	d1e9      	bne.n	81065f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810661e:	68fb      	ldr	r3, [r7, #12]
 8106620:	681b      	ldr	r3, [r3, #0]
 8106622:	699b      	ldr	r3, [r3, #24]
 8106624:	f003 0320 	and.w	r3, r3, #32
 8106628:	2b20      	cmp	r3, #32
 810662a:	d003      	beq.n	8106634 <I2C_IsErrorOccurred+0xe0>
 810662c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8106630:	2b00      	cmp	r3, #0
 8106632:	d0aa      	beq.n	810658a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8106634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8106638:	2b00      	cmp	r3, #0
 810663a:	d103      	bne.n	8106644 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810663c:	68fb      	ldr	r3, [r7, #12]
 810663e:	681b      	ldr	r3, [r3, #0]
 8106640:	2220      	movs	r2, #32
 8106642:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8106644:	6a3b      	ldr	r3, [r7, #32]
 8106646:	f043 0304 	orr.w	r3, r3, #4
 810664a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 810664c:	2301      	movs	r3, #1
 810664e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8106652:	68fb      	ldr	r3, [r7, #12]
 8106654:	681b      	ldr	r3, [r3, #0]
 8106656:	699b      	ldr	r3, [r3, #24]
 8106658:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 810665a:	69bb      	ldr	r3, [r7, #24]
 810665c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106660:	2b00      	cmp	r3, #0
 8106662:	d00b      	beq.n	810667c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8106664:	6a3b      	ldr	r3, [r7, #32]
 8106666:	f043 0301 	orr.w	r3, r3, #1
 810666a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 810666c:	68fb      	ldr	r3, [r7, #12]
 810666e:	681b      	ldr	r3, [r3, #0]
 8106670:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8106674:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8106676:	2301      	movs	r3, #1
 8106678:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 810667c:	69bb      	ldr	r3, [r7, #24]
 810667e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8106682:	2b00      	cmp	r3, #0
 8106684:	d00b      	beq.n	810669e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8106686:	6a3b      	ldr	r3, [r7, #32]
 8106688:	f043 0308 	orr.w	r3, r3, #8
 810668c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 810668e:	68fb      	ldr	r3, [r7, #12]
 8106690:	681b      	ldr	r3, [r3, #0]
 8106692:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8106696:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8106698:	2301      	movs	r3, #1
 810669a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 810669e:	69bb      	ldr	r3, [r7, #24]
 81066a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81066a4:	2b00      	cmp	r3, #0
 81066a6:	d00b      	beq.n	81066c0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 81066a8:	6a3b      	ldr	r3, [r7, #32]
 81066aa:	f043 0302 	orr.w	r3, r3, #2
 81066ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 81066b0:	68fb      	ldr	r3, [r7, #12]
 81066b2:	681b      	ldr	r3, [r3, #0]
 81066b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81066b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81066ba:	2301      	movs	r3, #1
 81066bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 81066c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81066c4:	2b00      	cmp	r3, #0
 81066c6:	d01c      	beq.n	8106702 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 81066c8:	68f8      	ldr	r0, [r7, #12]
 81066ca:	f7ff fdaf 	bl	810622c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81066ce:	68fb      	ldr	r3, [r7, #12]
 81066d0:	681b      	ldr	r3, [r3, #0]
 81066d2:	6859      	ldr	r1, [r3, #4]
 81066d4:	68fb      	ldr	r3, [r7, #12]
 81066d6:	681a      	ldr	r2, [r3, #0]
 81066d8:	4b0d      	ldr	r3, [pc, #52]	@ (8106710 <I2C_IsErrorOccurred+0x1bc>)
 81066da:	400b      	ands	r3, r1
 81066dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 81066de:	68fb      	ldr	r3, [r7, #12]
 81066e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 81066e2:	6a3b      	ldr	r3, [r7, #32]
 81066e4:	431a      	orrs	r2, r3
 81066e6:	68fb      	ldr	r3, [r7, #12]
 81066e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 81066ea:	68fb      	ldr	r3, [r7, #12]
 81066ec:	2220      	movs	r2, #32
 81066ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81066f2:	68fb      	ldr	r3, [r7, #12]
 81066f4:	2200      	movs	r2, #0
 81066f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81066fa:	68fb      	ldr	r3, [r7, #12]
 81066fc:	2200      	movs	r2, #0
 81066fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8106702:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8106706:	4618      	mov	r0, r3
 8106708:	3728      	adds	r7, #40	@ 0x28
 810670a:	46bd      	mov	sp, r7
 810670c:	bd80      	pop	{r7, pc}
 810670e:	bf00      	nop
 8106710:	fe00e800 	.word	0xfe00e800

08106714 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8106714:	b480      	push	{r7}
 8106716:	b087      	sub	sp, #28
 8106718:	af00      	add	r7, sp, #0
 810671a:	60f8      	str	r0, [r7, #12]
 810671c:	607b      	str	r3, [r7, #4]
 810671e:	460b      	mov	r3, r1
 8106720:	817b      	strh	r3, [r7, #10]
 8106722:	4613      	mov	r3, r2
 8106724:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8106726:	897b      	ldrh	r3, [r7, #10]
 8106728:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810672c:	7a7b      	ldrb	r3, [r7, #9]
 810672e:	041b      	lsls	r3, r3, #16
 8106730:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8106734:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8106736:	687b      	ldr	r3, [r7, #4]
 8106738:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810673a:	6a3b      	ldr	r3, [r7, #32]
 810673c:	4313      	orrs	r3, r2
 810673e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8106742:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8106744:	68fb      	ldr	r3, [r7, #12]
 8106746:	681b      	ldr	r3, [r3, #0]
 8106748:	685a      	ldr	r2, [r3, #4]
 810674a:	6a3b      	ldr	r3, [r7, #32]
 810674c:	0d5b      	lsrs	r3, r3, #21
 810674e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8106752:	4b08      	ldr	r3, [pc, #32]	@ (8106774 <I2C_TransferConfig+0x60>)
 8106754:	430b      	orrs	r3, r1
 8106756:	43db      	mvns	r3, r3
 8106758:	ea02 0103 	and.w	r1, r2, r3
 810675c:	68fb      	ldr	r3, [r7, #12]
 810675e:	681b      	ldr	r3, [r3, #0]
 8106760:	697a      	ldr	r2, [r7, #20]
 8106762:	430a      	orrs	r2, r1
 8106764:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8106766:	bf00      	nop
 8106768:	371c      	adds	r7, #28
 810676a:	46bd      	mov	sp, r7
 810676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106770:	4770      	bx	lr
 8106772:	bf00      	nop
 8106774:	03ff63ff 	.word	0x03ff63ff

08106778 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8106778:	b480      	push	{r7}
 810677a:	b083      	sub	sp, #12
 810677c:	af00      	add	r7, sp, #0
 810677e:	6078      	str	r0, [r7, #4]
 8106780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106782:	687b      	ldr	r3, [r7, #4]
 8106784:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106788:	b2db      	uxtb	r3, r3
 810678a:	2b20      	cmp	r3, #32
 810678c:	d138      	bne.n	8106800 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810678e:	687b      	ldr	r3, [r7, #4]
 8106790:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8106794:	2b01      	cmp	r3, #1
 8106796:	d101      	bne.n	810679c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8106798:	2302      	movs	r3, #2
 810679a:	e032      	b.n	8106802 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 810679c:	687b      	ldr	r3, [r7, #4]
 810679e:	2201      	movs	r2, #1
 81067a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81067a4:	687b      	ldr	r3, [r7, #4]
 81067a6:	2224      	movs	r2, #36	@ 0x24
 81067a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81067ac:	687b      	ldr	r3, [r7, #4]
 81067ae:	681b      	ldr	r3, [r3, #0]
 81067b0:	681a      	ldr	r2, [r3, #0]
 81067b2:	687b      	ldr	r3, [r7, #4]
 81067b4:	681b      	ldr	r3, [r3, #0]
 81067b6:	f022 0201 	bic.w	r2, r2, #1
 81067ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81067bc:	687b      	ldr	r3, [r7, #4]
 81067be:	681b      	ldr	r3, [r3, #0]
 81067c0:	681a      	ldr	r2, [r3, #0]
 81067c2:	687b      	ldr	r3, [r7, #4]
 81067c4:	681b      	ldr	r3, [r3, #0]
 81067c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 81067ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81067cc:	687b      	ldr	r3, [r7, #4]
 81067ce:	681b      	ldr	r3, [r3, #0]
 81067d0:	6819      	ldr	r1, [r3, #0]
 81067d2:	687b      	ldr	r3, [r7, #4]
 81067d4:	681b      	ldr	r3, [r3, #0]
 81067d6:	683a      	ldr	r2, [r7, #0]
 81067d8:	430a      	orrs	r2, r1
 81067da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81067dc:	687b      	ldr	r3, [r7, #4]
 81067de:	681b      	ldr	r3, [r3, #0]
 81067e0:	681a      	ldr	r2, [r3, #0]
 81067e2:	687b      	ldr	r3, [r7, #4]
 81067e4:	681b      	ldr	r3, [r3, #0]
 81067e6:	f042 0201 	orr.w	r2, r2, #1
 81067ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81067ec:	687b      	ldr	r3, [r7, #4]
 81067ee:	2220      	movs	r2, #32
 81067f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81067f4:	687b      	ldr	r3, [r7, #4]
 81067f6:	2200      	movs	r2, #0
 81067f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81067fc:	2300      	movs	r3, #0
 81067fe:	e000      	b.n	8106802 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8106800:	2302      	movs	r3, #2
  }
}
 8106802:	4618      	mov	r0, r3
 8106804:	370c      	adds	r7, #12
 8106806:	46bd      	mov	sp, r7
 8106808:	f85d 7b04 	ldr.w	r7, [sp], #4
 810680c:	4770      	bx	lr

0810680e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810680e:	b480      	push	{r7}
 8106810:	b085      	sub	sp, #20
 8106812:	af00      	add	r7, sp, #0
 8106814:	6078      	str	r0, [r7, #4]
 8106816:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106818:	687b      	ldr	r3, [r7, #4]
 810681a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810681e:	b2db      	uxtb	r3, r3
 8106820:	2b20      	cmp	r3, #32
 8106822:	d139      	bne.n	8106898 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8106824:	687b      	ldr	r3, [r7, #4]
 8106826:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810682a:	2b01      	cmp	r3, #1
 810682c:	d101      	bne.n	8106832 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810682e:	2302      	movs	r3, #2
 8106830:	e033      	b.n	810689a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8106832:	687b      	ldr	r3, [r7, #4]
 8106834:	2201      	movs	r2, #1
 8106836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810683a:	687b      	ldr	r3, [r7, #4]
 810683c:	2224      	movs	r2, #36	@ 0x24
 810683e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8106842:	687b      	ldr	r3, [r7, #4]
 8106844:	681b      	ldr	r3, [r3, #0]
 8106846:	681a      	ldr	r2, [r3, #0]
 8106848:	687b      	ldr	r3, [r7, #4]
 810684a:	681b      	ldr	r3, [r3, #0]
 810684c:	f022 0201 	bic.w	r2, r2, #1
 8106850:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8106852:	687b      	ldr	r3, [r7, #4]
 8106854:	681b      	ldr	r3, [r3, #0]
 8106856:	681b      	ldr	r3, [r3, #0]
 8106858:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 810685a:	68fb      	ldr	r3, [r7, #12]
 810685c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8106860:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8106862:	683b      	ldr	r3, [r7, #0]
 8106864:	021b      	lsls	r3, r3, #8
 8106866:	68fa      	ldr	r2, [r7, #12]
 8106868:	4313      	orrs	r3, r2
 810686a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 810686c:	687b      	ldr	r3, [r7, #4]
 810686e:	681b      	ldr	r3, [r3, #0]
 8106870:	68fa      	ldr	r2, [r7, #12]
 8106872:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8106874:	687b      	ldr	r3, [r7, #4]
 8106876:	681b      	ldr	r3, [r3, #0]
 8106878:	681a      	ldr	r2, [r3, #0]
 810687a:	687b      	ldr	r3, [r7, #4]
 810687c:	681b      	ldr	r3, [r3, #0]
 810687e:	f042 0201 	orr.w	r2, r2, #1
 8106882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8106884:	687b      	ldr	r3, [r7, #4]
 8106886:	2220      	movs	r2, #32
 8106888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810688c:	687b      	ldr	r3, [r7, #4]
 810688e:	2200      	movs	r2, #0
 8106890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8106894:	2300      	movs	r3, #0
 8106896:	e000      	b.n	810689a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8106898:	2302      	movs	r3, #2
  }
}
 810689a:	4618      	mov	r0, r3
 810689c:	3714      	adds	r7, #20
 810689e:	46bd      	mov	sp, r7
 81068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068a4:	4770      	bx	lr
	...

081068a8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81068a8:	b580      	push	{r7, lr}
 81068aa:	b084      	sub	sp, #16
 81068ac:	af00      	add	r7, sp, #0
 81068ae:	60f8      	str	r0, [r7, #12]
 81068b0:	460b      	mov	r3, r1
 81068b2:	607a      	str	r2, [r7, #4]
 81068b4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81068b6:	4b37      	ldr	r3, [pc, #220]	@ (8106994 <HAL_PWREx_EnterSTOPMode+0xec>)
 81068b8:	681b      	ldr	r3, [r3, #0]
 81068ba:	f023 0201 	bic.w	r2, r3, #1
 81068be:	4935      	ldr	r1, [pc, #212]	@ (8106994 <HAL_PWREx_EnterSTOPMode+0xec>)
 81068c0:	68fb      	ldr	r3, [r7, #12]
 81068c2:	4313      	orrs	r3, r2
 81068c4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81068c6:	687b      	ldr	r3, [r7, #4]
 81068c8:	2b00      	cmp	r3, #0
 81068ca:	d123      	bne.n	8106914 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81068cc:	f7fe ffe0 	bl	8105890 <HAL_GetCurrentCPUID>
 81068d0:	4603      	mov	r3, r0
 81068d2:	2b03      	cmp	r3, #3
 81068d4:	d158      	bne.n	8106988 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81068d6:	4b2f      	ldr	r3, [pc, #188]	@ (8106994 <HAL_PWREx_EnterSTOPMode+0xec>)
 81068d8:	691b      	ldr	r3, [r3, #16]
 81068da:	4a2e      	ldr	r2, [pc, #184]	@ (8106994 <HAL_PWREx_EnterSTOPMode+0xec>)
 81068dc:	f023 0301 	bic.w	r3, r3, #1
 81068e0:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81068e2:	4b2d      	ldr	r3, [pc, #180]	@ (8106998 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81068e4:	691b      	ldr	r3, [r3, #16]
 81068e6:	4a2c      	ldr	r2, [pc, #176]	@ (8106998 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81068e8:	f043 0304 	orr.w	r3, r3, #4
 81068ec:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81068ee:	f3bf 8f4f 	dsb	sy
}
 81068f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81068f4:	f3bf 8f6f 	isb	sy
}
 81068f8:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81068fa:	7afb      	ldrb	r3, [r7, #11]
 81068fc:	2b01      	cmp	r3, #1
 81068fe:	d101      	bne.n	8106904 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106900:	bf30      	wfi
 8106902:	e000      	b.n	8106906 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8106904:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106906:	4b24      	ldr	r3, [pc, #144]	@ (8106998 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106908:	691b      	ldr	r3, [r3, #16]
 810690a:	4a23      	ldr	r2, [pc, #140]	@ (8106998 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810690c:	f023 0304 	bic.w	r3, r3, #4
 8106910:	6113      	str	r3, [r2, #16]
 8106912:	e03c      	b.n	810698e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8106914:	687b      	ldr	r3, [r7, #4]
 8106916:	2b01      	cmp	r3, #1
 8106918:	d123      	bne.n	8106962 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810691a:	f7fe ffb9 	bl	8105890 <HAL_GetCurrentCPUID>
 810691e:	4603      	mov	r3, r0
 8106920:	2b01      	cmp	r3, #1
 8106922:	d133      	bne.n	810698c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8106924:	4b1b      	ldr	r3, [pc, #108]	@ (8106994 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106926:	695b      	ldr	r3, [r3, #20]
 8106928:	4a1a      	ldr	r2, [pc, #104]	@ (8106994 <HAL_PWREx_EnterSTOPMode+0xec>)
 810692a:	f023 0302 	bic.w	r3, r3, #2
 810692e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106930:	4b19      	ldr	r3, [pc, #100]	@ (8106998 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106932:	691b      	ldr	r3, [r3, #16]
 8106934:	4a18      	ldr	r2, [pc, #96]	@ (8106998 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106936:	f043 0304 	orr.w	r3, r3, #4
 810693a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810693c:	f3bf 8f4f 	dsb	sy
}
 8106940:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8106942:	f3bf 8f6f 	isb	sy
}
 8106946:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8106948:	7afb      	ldrb	r3, [r7, #11]
 810694a:	2b01      	cmp	r3, #1
 810694c:	d101      	bne.n	8106952 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810694e:	bf30      	wfi
 8106950:	e000      	b.n	8106954 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8106952:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106954:	4b10      	ldr	r3, [pc, #64]	@ (8106998 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106956:	691b      	ldr	r3, [r3, #16]
 8106958:	4a0f      	ldr	r2, [pc, #60]	@ (8106998 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810695a:	f023 0304 	bic.w	r3, r3, #4
 810695e:	6113      	str	r3, [r2, #16]
 8106960:	e015      	b.n	810698e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8106962:	f7fe ff95 	bl	8105890 <HAL_GetCurrentCPUID>
 8106966:	4603      	mov	r3, r0
 8106968:	2b03      	cmp	r3, #3
 810696a:	d106      	bne.n	810697a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810696c:	4b09      	ldr	r3, [pc, #36]	@ (8106994 <HAL_PWREx_EnterSTOPMode+0xec>)
 810696e:	691b      	ldr	r3, [r3, #16]
 8106970:	4a08      	ldr	r2, [pc, #32]	@ (8106994 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106972:	f023 0304 	bic.w	r3, r3, #4
 8106976:	6113      	str	r3, [r2, #16]
 8106978:	e009      	b.n	810698e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810697a:	4b06      	ldr	r3, [pc, #24]	@ (8106994 <HAL_PWREx_EnterSTOPMode+0xec>)
 810697c:	695b      	ldr	r3, [r3, #20]
 810697e:	4a05      	ldr	r2, [pc, #20]	@ (8106994 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106980:	f023 0304 	bic.w	r3, r3, #4
 8106984:	6153      	str	r3, [r2, #20]
 8106986:	e002      	b.n	810698e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8106988:	bf00      	nop
 810698a:	e000      	b.n	810698e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810698c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810698e:	3710      	adds	r7, #16
 8106990:	46bd      	mov	sp, r7
 8106992:	bd80      	pop	{r7, pc}
 8106994:	58024800 	.word	0x58024800
 8106998:	e000ed00 	.word	0xe000ed00

0810699c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810699c:	b580      	push	{r7, lr}
 810699e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81069a0:	f7fe ff76 	bl	8105890 <HAL_GetCurrentCPUID>
 81069a4:	4603      	mov	r3, r0
 81069a6:	2b03      	cmp	r3, #3
 81069a8:	d101      	bne.n	81069ae <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81069aa:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81069ac:	e001      	b.n	81069b2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81069ae:	bf40      	sev
    __WFE ();
 81069b0:	bf20      	wfe
}
 81069b2:	bf00      	nop
 81069b4:	bd80      	pop	{r7, pc}
	...

081069b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81069b8:	b480      	push	{r7}
 81069ba:	b089      	sub	sp, #36	@ 0x24
 81069bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81069be:	4bb3      	ldr	r3, [pc, #716]	@ (8106c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81069c0:	691b      	ldr	r3, [r3, #16]
 81069c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81069c6:	2b18      	cmp	r3, #24
 81069c8:	f200 8155 	bhi.w	8106c76 <HAL_RCC_GetSysClockFreq+0x2be>
 81069cc:	a201      	add	r2, pc, #4	@ (adr r2, 81069d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 81069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81069d2:	bf00      	nop
 81069d4:	08106a39 	.word	0x08106a39
 81069d8:	08106c77 	.word	0x08106c77
 81069dc:	08106c77 	.word	0x08106c77
 81069e0:	08106c77 	.word	0x08106c77
 81069e4:	08106c77 	.word	0x08106c77
 81069e8:	08106c77 	.word	0x08106c77
 81069ec:	08106c77 	.word	0x08106c77
 81069f0:	08106c77 	.word	0x08106c77
 81069f4:	08106a5f 	.word	0x08106a5f
 81069f8:	08106c77 	.word	0x08106c77
 81069fc:	08106c77 	.word	0x08106c77
 8106a00:	08106c77 	.word	0x08106c77
 8106a04:	08106c77 	.word	0x08106c77
 8106a08:	08106c77 	.word	0x08106c77
 8106a0c:	08106c77 	.word	0x08106c77
 8106a10:	08106c77 	.word	0x08106c77
 8106a14:	08106a65 	.word	0x08106a65
 8106a18:	08106c77 	.word	0x08106c77
 8106a1c:	08106c77 	.word	0x08106c77
 8106a20:	08106c77 	.word	0x08106c77
 8106a24:	08106c77 	.word	0x08106c77
 8106a28:	08106c77 	.word	0x08106c77
 8106a2c:	08106c77 	.word	0x08106c77
 8106a30:	08106c77 	.word	0x08106c77
 8106a34:	08106a6b 	.word	0x08106a6b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106a38:	4b94      	ldr	r3, [pc, #592]	@ (8106c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106a3a:	681b      	ldr	r3, [r3, #0]
 8106a3c:	f003 0320 	and.w	r3, r3, #32
 8106a40:	2b00      	cmp	r3, #0
 8106a42:	d009      	beq.n	8106a58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106a44:	4b91      	ldr	r3, [pc, #580]	@ (8106c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106a46:	681b      	ldr	r3, [r3, #0]
 8106a48:	08db      	lsrs	r3, r3, #3
 8106a4a:	f003 0303 	and.w	r3, r3, #3
 8106a4e:	4a90      	ldr	r2, [pc, #576]	@ (8106c90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106a50:	fa22 f303 	lsr.w	r3, r2, r3
 8106a54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8106a56:	e111      	b.n	8106c7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8106a58:	4b8d      	ldr	r3, [pc, #564]	@ (8106c90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106a5a:	61bb      	str	r3, [r7, #24]
      break;
 8106a5c:	e10e      	b.n	8106c7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8106a5e:	4b8d      	ldr	r3, [pc, #564]	@ (8106c94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106a60:	61bb      	str	r3, [r7, #24]
      break;
 8106a62:	e10b      	b.n	8106c7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8106a64:	4b8c      	ldr	r3, [pc, #560]	@ (8106c98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8106a66:	61bb      	str	r3, [r7, #24]
      break;
 8106a68:	e108      	b.n	8106c7c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106a6a:	4b88      	ldr	r3, [pc, #544]	@ (8106c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106a6e:	f003 0303 	and.w	r3, r3, #3
 8106a72:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8106a74:	4b85      	ldr	r3, [pc, #532]	@ (8106c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106a78:	091b      	lsrs	r3, r3, #4
 8106a7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106a7e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8106a80:	4b82      	ldr	r3, [pc, #520]	@ (8106c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106a84:	f003 0301 	and.w	r3, r3, #1
 8106a88:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8106a8a:	4b80      	ldr	r3, [pc, #512]	@ (8106c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106a8e:	08db      	lsrs	r3, r3, #3
 8106a90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106a94:	68fa      	ldr	r2, [r7, #12]
 8106a96:	fb02 f303 	mul.w	r3, r2, r3
 8106a9a:	ee07 3a90 	vmov	s15, r3
 8106a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106aa2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8106aa6:	693b      	ldr	r3, [r7, #16]
 8106aa8:	2b00      	cmp	r3, #0
 8106aaa:	f000 80e1 	beq.w	8106c70 <HAL_RCC_GetSysClockFreq+0x2b8>
 8106aae:	697b      	ldr	r3, [r7, #20]
 8106ab0:	2b02      	cmp	r3, #2
 8106ab2:	f000 8083 	beq.w	8106bbc <HAL_RCC_GetSysClockFreq+0x204>
 8106ab6:	697b      	ldr	r3, [r7, #20]
 8106ab8:	2b02      	cmp	r3, #2
 8106aba:	f200 80a1 	bhi.w	8106c00 <HAL_RCC_GetSysClockFreq+0x248>
 8106abe:	697b      	ldr	r3, [r7, #20]
 8106ac0:	2b00      	cmp	r3, #0
 8106ac2:	d003      	beq.n	8106acc <HAL_RCC_GetSysClockFreq+0x114>
 8106ac4:	697b      	ldr	r3, [r7, #20]
 8106ac6:	2b01      	cmp	r3, #1
 8106ac8:	d056      	beq.n	8106b78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8106aca:	e099      	b.n	8106c00 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106acc:	4b6f      	ldr	r3, [pc, #444]	@ (8106c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106ace:	681b      	ldr	r3, [r3, #0]
 8106ad0:	f003 0320 	and.w	r3, r3, #32
 8106ad4:	2b00      	cmp	r3, #0
 8106ad6:	d02d      	beq.n	8106b34 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106ad8:	4b6c      	ldr	r3, [pc, #432]	@ (8106c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106ada:	681b      	ldr	r3, [r3, #0]
 8106adc:	08db      	lsrs	r3, r3, #3
 8106ade:	f003 0303 	and.w	r3, r3, #3
 8106ae2:	4a6b      	ldr	r2, [pc, #428]	@ (8106c90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8106ae8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106aea:	687b      	ldr	r3, [r7, #4]
 8106aec:	ee07 3a90 	vmov	s15, r3
 8106af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106af4:	693b      	ldr	r3, [r7, #16]
 8106af6:	ee07 3a90 	vmov	s15, r3
 8106afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b02:	4b62      	ldr	r3, [pc, #392]	@ (8106c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b0a:	ee07 3a90 	vmov	s15, r3
 8106b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8106b16:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8106c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8106b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b2e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8106b32:	e087      	b.n	8106c44 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106b34:	693b      	ldr	r3, [r7, #16]
 8106b36:	ee07 3a90 	vmov	s15, r3
 8106b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b3e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8106ca0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8106b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b46:	4b51      	ldr	r3, [pc, #324]	@ (8106c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b4e:	ee07 3a90 	vmov	s15, r3
 8106b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8106b5a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8106c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8106b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106b76:	e065      	b.n	8106c44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106b78:	693b      	ldr	r3, [r7, #16]
 8106b7a:	ee07 3a90 	vmov	s15, r3
 8106b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b82:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8106ca4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8106b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b8a:	4b40      	ldr	r3, [pc, #256]	@ (8106c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b92:	ee07 3a90 	vmov	s15, r3
 8106b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8106b9e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8106c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8106ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106bba:	e043      	b.n	8106c44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106bbc:	693b      	ldr	r3, [r7, #16]
 8106bbe:	ee07 3a90 	vmov	s15, r3
 8106bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106bc6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8106ca8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8106bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106bce:	4b2f      	ldr	r3, [pc, #188]	@ (8106c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106bd6:	ee07 3a90 	vmov	s15, r3
 8106bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8106be2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8106c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8106be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106bfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106bfe:	e021      	b.n	8106c44 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106c00:	693b      	ldr	r3, [r7, #16]
 8106c02:	ee07 3a90 	vmov	s15, r3
 8106c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c0a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8106ca4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8106c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106c12:	4b1e      	ldr	r3, [pc, #120]	@ (8106c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106c1a:	ee07 3a90 	vmov	s15, r3
 8106c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8106c26:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8106c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8106c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106c3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106c42:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8106c44:	4b11      	ldr	r3, [pc, #68]	@ (8106c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106c48:	0a5b      	lsrs	r3, r3, #9
 8106c4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106c4e:	3301      	adds	r3, #1
 8106c50:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8106c52:	683b      	ldr	r3, [r7, #0]
 8106c54:	ee07 3a90 	vmov	s15, r3
 8106c58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8106c5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8106c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106c68:	ee17 3a90 	vmov	r3, s15
 8106c6c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8106c6e:	e005      	b.n	8106c7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8106c70:	2300      	movs	r3, #0
 8106c72:	61bb      	str	r3, [r7, #24]
      break;
 8106c74:	e002      	b.n	8106c7c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8106c76:	4b07      	ldr	r3, [pc, #28]	@ (8106c94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106c78:	61bb      	str	r3, [r7, #24]
      break;
 8106c7a:	bf00      	nop
  }

  return sysclockfreq;
 8106c7c:	69bb      	ldr	r3, [r7, #24]
}
 8106c7e:	4618      	mov	r0, r3
 8106c80:	3724      	adds	r7, #36	@ 0x24
 8106c82:	46bd      	mov	sp, r7
 8106c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c88:	4770      	bx	lr
 8106c8a:	bf00      	nop
 8106c8c:	58024400 	.word	0x58024400
 8106c90:	03d09000 	.word	0x03d09000
 8106c94:	003d0900 	.word	0x003d0900
 8106c98:	007a1200 	.word	0x007a1200
 8106c9c:	46000000 	.word	0x46000000
 8106ca0:	4c742400 	.word	0x4c742400
 8106ca4:	4a742400 	.word	0x4a742400
 8106ca8:	4af42400 	.word	0x4af42400

08106cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8106cac:	b580      	push	{r7, lr}
 8106cae:	b082      	sub	sp, #8
 8106cb0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8106cb2:	f7ff fe81 	bl	81069b8 <HAL_RCC_GetSysClockFreq>
 8106cb6:	4602      	mov	r2, r0
 8106cb8:	4b11      	ldr	r3, [pc, #68]	@ (8106d00 <HAL_RCC_GetHCLKFreq+0x54>)
 8106cba:	699b      	ldr	r3, [r3, #24]
 8106cbc:	0a1b      	lsrs	r3, r3, #8
 8106cbe:	f003 030f 	and.w	r3, r3, #15
 8106cc2:	4910      	ldr	r1, [pc, #64]	@ (8106d04 <HAL_RCC_GetHCLKFreq+0x58>)
 8106cc4:	5ccb      	ldrb	r3, [r1, r3]
 8106cc6:	f003 031f 	and.w	r3, r3, #31
 8106cca:	fa22 f303 	lsr.w	r3, r2, r3
 8106cce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8106d00 <HAL_RCC_GetHCLKFreq+0x54>)
 8106cd2:	699b      	ldr	r3, [r3, #24]
 8106cd4:	f003 030f 	and.w	r3, r3, #15
 8106cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8106d04 <HAL_RCC_GetHCLKFreq+0x58>)
 8106cda:	5cd3      	ldrb	r3, [r2, r3]
 8106cdc:	f003 031f 	and.w	r3, r3, #31
 8106ce0:	687a      	ldr	r2, [r7, #4]
 8106ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8106ce6:	4a08      	ldr	r2, [pc, #32]	@ (8106d08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106ce8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8106cea:	4b07      	ldr	r3, [pc, #28]	@ (8106d08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106cec:	681b      	ldr	r3, [r3, #0]
 8106cee:	4a07      	ldr	r2, [pc, #28]	@ (8106d0c <HAL_RCC_GetHCLKFreq+0x60>)
 8106cf0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8106cf2:	4b05      	ldr	r3, [pc, #20]	@ (8106d08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106cf4:	681b      	ldr	r3, [r3, #0]
}
 8106cf6:	4618      	mov	r0, r3
 8106cf8:	3708      	adds	r7, #8
 8106cfa:	46bd      	mov	sp, r7
 8106cfc:	bd80      	pop	{r7, pc}
 8106cfe:	bf00      	nop
 8106d00:	58024400 	.word	0x58024400
 8106d04:	081116e0 	.word	0x081116e0
 8106d08:	10000004 	.word	0x10000004
 8106d0c:	10000000 	.word	0x10000000

08106d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8106d10:	b580      	push	{r7, lr}
 8106d12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8106d14:	f7ff ffca 	bl	8106cac <HAL_RCC_GetHCLKFreq>
 8106d18:	4602      	mov	r2, r0
 8106d1a:	4b06      	ldr	r3, [pc, #24]	@ (8106d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8106d1c:	69db      	ldr	r3, [r3, #28]
 8106d1e:	091b      	lsrs	r3, r3, #4
 8106d20:	f003 0307 	and.w	r3, r3, #7
 8106d24:	4904      	ldr	r1, [pc, #16]	@ (8106d38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8106d26:	5ccb      	ldrb	r3, [r1, r3]
 8106d28:	f003 031f 	and.w	r3, r3, #31
 8106d2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8106d30:	4618      	mov	r0, r3
 8106d32:	bd80      	pop	{r7, pc}
 8106d34:	58024400 	.word	0x58024400
 8106d38:	081116e0 	.word	0x081116e0

08106d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8106d3c:	b580      	push	{r7, lr}
 8106d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8106d40:	f7ff ffb4 	bl	8106cac <HAL_RCC_GetHCLKFreq>
 8106d44:	4602      	mov	r2, r0
 8106d46:	4b06      	ldr	r3, [pc, #24]	@ (8106d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8106d48:	69db      	ldr	r3, [r3, #28]
 8106d4a:	0a1b      	lsrs	r3, r3, #8
 8106d4c:	f003 0307 	and.w	r3, r3, #7
 8106d50:	4904      	ldr	r1, [pc, #16]	@ (8106d64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8106d52:	5ccb      	ldrb	r3, [r1, r3]
 8106d54:	f003 031f 	and.w	r3, r3, #31
 8106d58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8106d5c:	4618      	mov	r0, r3
 8106d5e:	bd80      	pop	{r7, pc}
 8106d60:	58024400 	.word	0x58024400
 8106d64:	081116e0 	.word	0x081116e0

08106d68 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8106d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8106d6c:	b0ca      	sub	sp, #296	@ 0x128
 8106d6e:	af00      	add	r7, sp, #0
 8106d70:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8106d74:	2300      	movs	r3, #0
 8106d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8106d7a:	2300      	movs	r3, #0
 8106d7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8106d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d88:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8106d8c:	2500      	movs	r5, #0
 8106d8e:	ea54 0305 	orrs.w	r3, r4, r5
 8106d92:	d049      	beq.n	8106e28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8106d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106d9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106d9e:	d02f      	beq.n	8106e00 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8106da0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106da4:	d828      	bhi.n	8106df8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8106da6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106daa:	d01a      	beq.n	8106de2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8106dac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106db0:	d822      	bhi.n	8106df8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8106db2:	2b00      	cmp	r3, #0
 8106db4:	d003      	beq.n	8106dbe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8106db6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8106dba:	d007      	beq.n	8106dcc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8106dbc:	e01c      	b.n	8106df8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106dbe:	4bb8      	ldr	r3, [pc, #736]	@ (81070a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106dc2:	4ab7      	ldr	r2, [pc, #732]	@ (81070a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106dca:	e01a      	b.n	8106e02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106dd0:	3308      	adds	r3, #8
 8106dd2:	2102      	movs	r1, #2
 8106dd4:	4618      	mov	r0, r3
 8106dd6:	f002 fb61 	bl	810949c <RCCEx_PLL2_Config>
 8106dda:	4603      	mov	r3, r0
 8106ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106de0:	e00f      	b.n	8106e02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106de6:	3328      	adds	r3, #40	@ 0x28
 8106de8:	2102      	movs	r1, #2
 8106dea:	4618      	mov	r0, r3
 8106dec:	f002 fc08 	bl	8109600 <RCCEx_PLL3_Config>
 8106df0:	4603      	mov	r3, r0
 8106df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106df6:	e004      	b.n	8106e02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106df8:	2301      	movs	r3, #1
 8106dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106dfe:	e000      	b.n	8106e02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8106e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106e06:	2b00      	cmp	r3, #0
 8106e08:	d10a      	bne.n	8106e20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8106e0a:	4ba5      	ldr	r3, [pc, #660]	@ (81070a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106e0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8106e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106e18:	4aa1      	ldr	r2, [pc, #644]	@ (81070a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106e1a:	430b      	orrs	r3, r1
 8106e1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8106e1e:	e003      	b.n	8106e28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106e24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8106e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106e30:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8106e34:	f04f 0900 	mov.w	r9, #0
 8106e38:	ea58 0309 	orrs.w	r3, r8, r9
 8106e3c:	d047      	beq.n	8106ece <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8106e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106e44:	2b04      	cmp	r3, #4
 8106e46:	d82a      	bhi.n	8106e9e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8106e48:	a201      	add	r2, pc, #4	@ (adr r2, 8106e50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8106e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e4e:	bf00      	nop
 8106e50:	08106e65 	.word	0x08106e65
 8106e54:	08106e73 	.word	0x08106e73
 8106e58:	08106e89 	.word	0x08106e89
 8106e5c:	08106ea7 	.word	0x08106ea7
 8106e60:	08106ea7 	.word	0x08106ea7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106e64:	4b8e      	ldr	r3, [pc, #568]	@ (81070a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106e68:	4a8d      	ldr	r2, [pc, #564]	@ (81070a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106e70:	e01a      	b.n	8106ea8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e76:	3308      	adds	r3, #8
 8106e78:	2100      	movs	r1, #0
 8106e7a:	4618      	mov	r0, r3
 8106e7c:	f002 fb0e 	bl	810949c <RCCEx_PLL2_Config>
 8106e80:	4603      	mov	r3, r0
 8106e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106e86:	e00f      	b.n	8106ea8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e8c:	3328      	adds	r3, #40	@ 0x28
 8106e8e:	2100      	movs	r1, #0
 8106e90:	4618      	mov	r0, r3
 8106e92:	f002 fbb5 	bl	8109600 <RCCEx_PLL3_Config>
 8106e96:	4603      	mov	r3, r0
 8106e98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106e9c:	e004      	b.n	8106ea8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106e9e:	2301      	movs	r3, #1
 8106ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106ea4:	e000      	b.n	8106ea8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8106ea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106eac:	2b00      	cmp	r3, #0
 8106eae:	d10a      	bne.n	8106ec6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8106eb0:	4b7b      	ldr	r3, [pc, #492]	@ (81070a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106eb4:	f023 0107 	bic.w	r1, r3, #7
 8106eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106ebe:	4a78      	ldr	r2, [pc, #480]	@ (81070a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106ec0:	430b      	orrs	r3, r1
 8106ec2:	6513      	str	r3, [r2, #80]	@ 0x50
 8106ec4:	e003      	b.n	8106ece <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106eca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8106ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ed6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8106eda:	f04f 0b00 	mov.w	fp, #0
 8106ede:	ea5a 030b 	orrs.w	r3, sl, fp
 8106ee2:	d04c      	beq.n	8106f7e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8106ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106eee:	d030      	beq.n	8106f52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8106ef0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106ef4:	d829      	bhi.n	8106f4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8106ef6:	2bc0      	cmp	r3, #192	@ 0xc0
 8106ef8:	d02d      	beq.n	8106f56 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8106efa:	2bc0      	cmp	r3, #192	@ 0xc0
 8106efc:	d825      	bhi.n	8106f4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8106efe:	2b80      	cmp	r3, #128	@ 0x80
 8106f00:	d018      	beq.n	8106f34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8106f02:	2b80      	cmp	r3, #128	@ 0x80
 8106f04:	d821      	bhi.n	8106f4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8106f06:	2b00      	cmp	r3, #0
 8106f08:	d002      	beq.n	8106f10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8106f0a:	2b40      	cmp	r3, #64	@ 0x40
 8106f0c:	d007      	beq.n	8106f1e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8106f0e:	e01c      	b.n	8106f4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106f10:	4b63      	ldr	r3, [pc, #396]	@ (81070a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106f14:	4a62      	ldr	r2, [pc, #392]	@ (81070a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106f1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106f1c:	e01c      	b.n	8106f58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f22:	3308      	adds	r3, #8
 8106f24:	2100      	movs	r1, #0
 8106f26:	4618      	mov	r0, r3
 8106f28:	f002 fab8 	bl	810949c <RCCEx_PLL2_Config>
 8106f2c:	4603      	mov	r3, r0
 8106f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106f32:	e011      	b.n	8106f58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f38:	3328      	adds	r3, #40	@ 0x28
 8106f3a:	2100      	movs	r1, #0
 8106f3c:	4618      	mov	r0, r3
 8106f3e:	f002 fb5f 	bl	8109600 <RCCEx_PLL3_Config>
 8106f42:	4603      	mov	r3, r0
 8106f44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106f48:	e006      	b.n	8106f58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106f4a:	2301      	movs	r3, #1
 8106f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106f50:	e002      	b.n	8106f58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8106f52:	bf00      	nop
 8106f54:	e000      	b.n	8106f58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8106f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106f58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106f5c:	2b00      	cmp	r3, #0
 8106f5e:	d10a      	bne.n	8106f76 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8106f60:	4b4f      	ldr	r3, [pc, #316]	@ (81070a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106f64:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8106f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106f6e:	4a4c      	ldr	r2, [pc, #304]	@ (81070a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106f70:	430b      	orrs	r3, r1
 8106f72:	6513      	str	r3, [r2, #80]	@ 0x50
 8106f74:	e003      	b.n	8106f7e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106f7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8106f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106f86:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8106f8a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8106f8e:	2300      	movs	r3, #0
 8106f90:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8106f94:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8106f98:	460b      	mov	r3, r1
 8106f9a:	4313      	orrs	r3, r2
 8106f9c:	d053      	beq.n	8107046 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8106f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fa2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8106fa6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8106faa:	d035      	beq.n	8107018 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8106fac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8106fb0:	d82e      	bhi.n	8107010 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106fb2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8106fb6:	d031      	beq.n	810701c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8106fb8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8106fbc:	d828      	bhi.n	8107010 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106fbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8106fc2:	d01a      	beq.n	8106ffa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8106fc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8106fc8:	d822      	bhi.n	8107010 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106fca:	2b00      	cmp	r3, #0
 8106fcc:	d003      	beq.n	8106fd6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8106fce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106fd2:	d007      	beq.n	8106fe4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8106fd4:	e01c      	b.n	8107010 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106fd6:	4b32      	ldr	r3, [pc, #200]	@ (81070a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106fda:	4a31      	ldr	r2, [pc, #196]	@ (81070a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106fe2:	e01c      	b.n	810701e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fe8:	3308      	adds	r3, #8
 8106fea:	2100      	movs	r1, #0
 8106fec:	4618      	mov	r0, r3
 8106fee:	f002 fa55 	bl	810949c <RCCEx_PLL2_Config>
 8106ff2:	4603      	mov	r3, r0
 8106ff4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8106ff8:	e011      	b.n	810701e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ffe:	3328      	adds	r3, #40	@ 0x28
 8107000:	2100      	movs	r1, #0
 8107002:	4618      	mov	r0, r3
 8107004:	f002 fafc 	bl	8109600 <RCCEx_PLL3_Config>
 8107008:	4603      	mov	r3, r0
 810700a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810700e:	e006      	b.n	810701e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8107010:	2301      	movs	r3, #1
 8107012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107016:	e002      	b.n	810701e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8107018:	bf00      	nop
 810701a:	e000      	b.n	810701e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810701c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810701e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107022:	2b00      	cmp	r3, #0
 8107024:	d10b      	bne.n	810703e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8107026:	4b1e      	ldr	r3, [pc, #120]	@ (81070a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810702a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810702e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107032:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8107036:	4a1a      	ldr	r2, [pc, #104]	@ (81070a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107038:	430b      	orrs	r3, r1
 810703a:	6593      	str	r3, [r2, #88]	@ 0x58
 810703c:	e003      	b.n	8107046 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810703e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107042:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8107046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810704a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810704e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8107052:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8107056:	2300      	movs	r3, #0
 8107058:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 810705c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8107060:	460b      	mov	r3, r1
 8107062:	4313      	orrs	r3, r2
 8107064:	d056      	beq.n	8107114 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8107066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810706a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810706e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107072:	d038      	beq.n	81070e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8107074:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107078:	d831      	bhi.n	81070de <HAL_RCCEx_PeriphCLKConfig+0x376>
 810707a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810707e:	d034      	beq.n	81070ea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8107080:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107084:	d82b      	bhi.n	81070de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8107086:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810708a:	d01d      	beq.n	81070c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 810708c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107090:	d825      	bhi.n	81070de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8107092:	2b00      	cmp	r3, #0
 8107094:	d006      	beq.n	81070a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8107096:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810709a:	d00a      	beq.n	81070b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810709c:	e01f      	b.n	81070de <HAL_RCCEx_PeriphCLKConfig+0x376>
 810709e:	bf00      	nop
 81070a0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81070a4:	4ba2      	ldr	r3, [pc, #648]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81070a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81070a8:	4aa1      	ldr	r2, [pc, #644]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81070aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81070ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81070b0:	e01c      	b.n	81070ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81070b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070b6:	3308      	adds	r3, #8
 81070b8:	2100      	movs	r1, #0
 81070ba:	4618      	mov	r0, r3
 81070bc:	f002 f9ee 	bl	810949c <RCCEx_PLL2_Config>
 81070c0:	4603      	mov	r3, r0
 81070c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81070c6:	e011      	b.n	81070ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81070c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070cc:	3328      	adds	r3, #40	@ 0x28
 81070ce:	2100      	movs	r1, #0
 81070d0:	4618      	mov	r0, r3
 81070d2:	f002 fa95 	bl	8109600 <RCCEx_PLL3_Config>
 81070d6:	4603      	mov	r3, r0
 81070d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81070dc:	e006      	b.n	81070ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81070de:	2301      	movs	r3, #1
 81070e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81070e4:	e002      	b.n	81070ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81070e6:	bf00      	nop
 81070e8:	e000      	b.n	81070ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81070ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 81070ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81070f0:	2b00      	cmp	r3, #0
 81070f2:	d10b      	bne.n	810710c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81070f4:	4b8e      	ldr	r3, [pc, #568]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81070f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81070f8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81070fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107100:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8107104:	4a8a      	ldr	r2, [pc, #552]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107106:	430b      	orrs	r3, r1
 8107108:	6593      	str	r3, [r2, #88]	@ 0x58
 810710a:	e003      	b.n	8107114 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810710c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107110:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8107114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107118:	e9d3 2300 	ldrd	r2, r3, [r3]
 810711c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8107120:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8107124:	2300      	movs	r3, #0
 8107126:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 810712a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 810712e:	460b      	mov	r3, r1
 8107130:	4313      	orrs	r3, r2
 8107132:	d03a      	beq.n	81071aa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8107134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810713a:	2b30      	cmp	r3, #48	@ 0x30
 810713c:	d01f      	beq.n	810717e <HAL_RCCEx_PeriphCLKConfig+0x416>
 810713e:	2b30      	cmp	r3, #48	@ 0x30
 8107140:	d819      	bhi.n	8107176 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8107142:	2b20      	cmp	r3, #32
 8107144:	d00c      	beq.n	8107160 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8107146:	2b20      	cmp	r3, #32
 8107148:	d815      	bhi.n	8107176 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810714a:	2b00      	cmp	r3, #0
 810714c:	d019      	beq.n	8107182 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810714e:	2b10      	cmp	r3, #16
 8107150:	d111      	bne.n	8107176 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107152:	4b77      	ldr	r3, [pc, #476]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107156:	4a76      	ldr	r2, [pc, #472]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810715c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810715e:	e011      	b.n	8107184 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107164:	3308      	adds	r3, #8
 8107166:	2102      	movs	r1, #2
 8107168:	4618      	mov	r0, r3
 810716a:	f002 f997 	bl	810949c <RCCEx_PLL2_Config>
 810716e:	4603      	mov	r3, r0
 8107170:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8107174:	e006      	b.n	8107184 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8107176:	2301      	movs	r3, #1
 8107178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810717c:	e002      	b.n	8107184 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810717e:	bf00      	nop
 8107180:	e000      	b.n	8107184 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8107182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107188:	2b00      	cmp	r3, #0
 810718a:	d10a      	bne.n	81071a2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810718c:	4b68      	ldr	r3, [pc, #416]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810718e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107190:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8107194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810719a:	4a65      	ldr	r2, [pc, #404]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810719c:	430b      	orrs	r3, r1
 810719e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81071a0:	e003      	b.n	81071aa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81071a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81071a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81071aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 81071b2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81071b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 81071ba:	2300      	movs	r3, #0
 81071bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 81071c0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 81071c4:	460b      	mov	r3, r1
 81071c6:	4313      	orrs	r3, r2
 81071c8:	d051      	beq.n	810726e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81071ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81071d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81071d4:	d035      	beq.n	8107242 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81071d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81071da:	d82e      	bhi.n	810723a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81071dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81071e0:	d031      	beq.n	8107246 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81071e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81071e6:	d828      	bhi.n	810723a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81071e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81071ec:	d01a      	beq.n	8107224 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81071ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81071f2:	d822      	bhi.n	810723a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81071f4:	2b00      	cmp	r3, #0
 81071f6:	d003      	beq.n	8107200 <HAL_RCCEx_PeriphCLKConfig+0x498>
 81071f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81071fc:	d007      	beq.n	810720e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81071fe:	e01c      	b.n	810723a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107200:	4b4b      	ldr	r3, [pc, #300]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107204:	4a4a      	ldr	r2, [pc, #296]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810720a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810720c:	e01c      	b.n	8107248 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810720e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107212:	3308      	adds	r3, #8
 8107214:	2100      	movs	r1, #0
 8107216:	4618      	mov	r0, r3
 8107218:	f002 f940 	bl	810949c <RCCEx_PLL2_Config>
 810721c:	4603      	mov	r3, r0
 810721e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8107222:	e011      	b.n	8107248 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107228:	3328      	adds	r3, #40	@ 0x28
 810722a:	2100      	movs	r1, #0
 810722c:	4618      	mov	r0, r3
 810722e:	f002 f9e7 	bl	8109600 <RCCEx_PLL3_Config>
 8107232:	4603      	mov	r3, r0
 8107234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8107238:	e006      	b.n	8107248 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810723a:	2301      	movs	r3, #1
 810723c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107240:	e002      	b.n	8107248 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8107242:	bf00      	nop
 8107244:	e000      	b.n	8107248 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8107246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107248:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810724c:	2b00      	cmp	r3, #0
 810724e:	d10a      	bne.n	8107266 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8107250:	4b37      	ldr	r3, [pc, #220]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107254:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8107258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810725c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810725e:	4a34      	ldr	r2, [pc, #208]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107260:	430b      	orrs	r3, r1
 8107262:	6513      	str	r3, [r2, #80]	@ 0x50
 8107264:	e003      	b.n	810726e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810726a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810726e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107276:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810727a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810727e:	2300      	movs	r3, #0
 8107280:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8107284:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8107288:	460b      	mov	r3, r1
 810728a:	4313      	orrs	r3, r2
 810728c:	d056      	beq.n	810733c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810728e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107292:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107294:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8107298:	d033      	beq.n	8107302 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810729a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810729e:	d82c      	bhi.n	81072fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 81072a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81072a4:	d02f      	beq.n	8107306 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 81072a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81072aa:	d826      	bhi.n	81072fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 81072ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81072b0:	d02b      	beq.n	810730a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 81072b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81072b6:	d820      	bhi.n	81072fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 81072b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81072bc:	d012      	beq.n	81072e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81072be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81072c2:	d81a      	bhi.n	81072fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 81072c4:	2b00      	cmp	r3, #0
 81072c6:	d022      	beq.n	810730e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81072c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81072cc:	d115      	bne.n	81072fa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81072ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81072d2:	3308      	adds	r3, #8
 81072d4:	2101      	movs	r1, #1
 81072d6:	4618      	mov	r0, r3
 81072d8:	f002 f8e0 	bl	810949c <RCCEx_PLL2_Config>
 81072dc:	4603      	mov	r3, r0
 81072de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81072e2:	e015      	b.n	8107310 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81072e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81072e8:	3328      	adds	r3, #40	@ 0x28
 81072ea:	2101      	movs	r1, #1
 81072ec:	4618      	mov	r0, r3
 81072ee:	f002 f987 	bl	8109600 <RCCEx_PLL3_Config>
 81072f2:	4603      	mov	r3, r0
 81072f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81072f8:	e00a      	b.n	8107310 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81072fa:	2301      	movs	r3, #1
 81072fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107300:	e006      	b.n	8107310 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8107302:	bf00      	nop
 8107304:	e004      	b.n	8107310 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8107306:	bf00      	nop
 8107308:	e002      	b.n	8107310 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810730a:	bf00      	nop
 810730c:	e000      	b.n	8107310 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810730e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107314:	2b00      	cmp	r3, #0
 8107316:	d10d      	bne.n	8107334 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8107318:	4b05      	ldr	r3, [pc, #20]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810731a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810731c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8107320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107324:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107326:	4a02      	ldr	r2, [pc, #8]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107328:	430b      	orrs	r3, r1
 810732a:	6513      	str	r3, [r2, #80]	@ 0x50
 810732c:	e006      	b.n	810733c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810732e:	bf00      	nop
 8107330:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107334:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107338:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810733c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107344:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8107348:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 810734c:	2300      	movs	r3, #0
 810734e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8107352:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8107356:	460b      	mov	r3, r1
 8107358:	4313      	orrs	r3, r2
 810735a:	d055      	beq.n	8107408 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 810735c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107360:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8107364:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107368:	d033      	beq.n	81073d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810736a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810736e:	d82c      	bhi.n	81073ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8107370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107374:	d02f      	beq.n	81073d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8107376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810737a:	d826      	bhi.n	81073ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 810737c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107380:	d02b      	beq.n	81073da <HAL_RCCEx_PeriphCLKConfig+0x672>
 8107382:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107386:	d820      	bhi.n	81073ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8107388:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810738c:	d012      	beq.n	81073b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810738e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107392:	d81a      	bhi.n	81073ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8107394:	2b00      	cmp	r3, #0
 8107396:	d022      	beq.n	81073de <HAL_RCCEx_PeriphCLKConfig+0x676>
 8107398:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810739c:	d115      	bne.n	81073ca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810739e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073a2:	3308      	adds	r3, #8
 81073a4:	2101      	movs	r1, #1
 81073a6:	4618      	mov	r0, r3
 81073a8:	f002 f878 	bl	810949c <RCCEx_PLL2_Config>
 81073ac:	4603      	mov	r3, r0
 81073ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81073b2:	e015      	b.n	81073e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81073b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073b8:	3328      	adds	r3, #40	@ 0x28
 81073ba:	2101      	movs	r1, #1
 81073bc:	4618      	mov	r0, r3
 81073be:	f002 f91f 	bl	8109600 <RCCEx_PLL3_Config>
 81073c2:	4603      	mov	r3, r0
 81073c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81073c8:	e00a      	b.n	81073e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81073ca:	2301      	movs	r3, #1
 81073cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81073d0:	e006      	b.n	81073e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81073d2:	bf00      	nop
 81073d4:	e004      	b.n	81073e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81073d6:	bf00      	nop
 81073d8:	e002      	b.n	81073e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81073da:	bf00      	nop
 81073dc:	e000      	b.n	81073e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81073de:	bf00      	nop
    }

    if (ret == HAL_OK)
 81073e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81073e4:	2b00      	cmp	r3, #0
 81073e6:	d10b      	bne.n	8107400 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81073e8:	4ba4      	ldr	r3, [pc, #656]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81073ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81073ec:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81073f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81073f8:	4aa0      	ldr	r2, [pc, #640]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81073fa:	430b      	orrs	r3, r1
 81073fc:	6593      	str	r3, [r2, #88]	@ 0x58
 81073fe:	e003      	b.n	8107408 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107400:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107404:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8107408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107410:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8107414:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8107418:	2300      	movs	r3, #0
 810741a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 810741e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8107422:	460b      	mov	r3, r1
 8107424:	4313      	orrs	r3, r2
 8107426:	d037      	beq.n	8107498 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8107428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810742c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810742e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107432:	d00e      	beq.n	8107452 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8107434:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107438:	d816      	bhi.n	8107468 <HAL_RCCEx_PeriphCLKConfig+0x700>
 810743a:	2b00      	cmp	r3, #0
 810743c:	d018      	beq.n	8107470 <HAL_RCCEx_PeriphCLKConfig+0x708>
 810743e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107442:	d111      	bne.n	8107468 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107444:	4b8d      	ldr	r3, [pc, #564]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107448:	4a8c      	ldr	r2, [pc, #560]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810744a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810744e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8107450:	e00f      	b.n	8107472 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107456:	3308      	adds	r3, #8
 8107458:	2101      	movs	r1, #1
 810745a:	4618      	mov	r0, r3
 810745c:	f002 f81e 	bl	810949c <RCCEx_PLL2_Config>
 8107460:	4603      	mov	r3, r0
 8107462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8107466:	e004      	b.n	8107472 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107468:	2301      	movs	r3, #1
 810746a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810746e:	e000      	b.n	8107472 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8107470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107476:	2b00      	cmp	r3, #0
 8107478:	d10a      	bne.n	8107490 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810747a:	4b80      	ldr	r3, [pc, #512]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810747c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810747e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8107482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107488:	4a7c      	ldr	r2, [pc, #496]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810748a:	430b      	orrs	r3, r1
 810748c:	6513      	str	r3, [r2, #80]	@ 0x50
 810748e:	e003      	b.n	8107498 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107490:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107494:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8107498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810749c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81074a0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 81074a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 81074a8:	2300      	movs	r3, #0
 81074aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 81074ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 81074b2:	460b      	mov	r3, r1
 81074b4:	4313      	orrs	r3, r2
 81074b6:	d039      	beq.n	810752c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81074b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81074be:	2b03      	cmp	r3, #3
 81074c0:	d81c      	bhi.n	81074fc <HAL_RCCEx_PeriphCLKConfig+0x794>
 81074c2:	a201      	add	r2, pc, #4	@ (adr r2, 81074c8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 81074c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81074c8:	08107505 	.word	0x08107505
 81074cc:	081074d9 	.word	0x081074d9
 81074d0:	081074e7 	.word	0x081074e7
 81074d4:	08107505 	.word	0x08107505
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81074d8:	4b68      	ldr	r3, [pc, #416]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81074da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81074dc:	4a67      	ldr	r2, [pc, #412]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81074de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81074e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81074e4:	e00f      	b.n	8107506 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81074e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074ea:	3308      	adds	r3, #8
 81074ec:	2102      	movs	r1, #2
 81074ee:	4618      	mov	r0, r3
 81074f0:	f001 ffd4 	bl	810949c <RCCEx_PLL2_Config>
 81074f4:	4603      	mov	r3, r0
 81074f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 81074fa:	e004      	b.n	8107506 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81074fc:	2301      	movs	r3, #1
 81074fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107502:	e000      	b.n	8107506 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8107504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810750a:	2b00      	cmp	r3, #0
 810750c:	d10a      	bne.n	8107524 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810750e:	4b5b      	ldr	r3, [pc, #364]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107512:	f023 0103 	bic.w	r1, r3, #3
 8107516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810751a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810751c:	4a57      	ldr	r2, [pc, #348]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810751e:	430b      	orrs	r3, r1
 8107520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8107522:	e003      	b.n	810752c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107528:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810752c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107534:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8107538:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810753c:	2300      	movs	r3, #0
 810753e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8107542:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8107546:	460b      	mov	r3, r1
 8107548:	4313      	orrs	r3, r2
 810754a:	f000 809f 	beq.w	810768c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810754e:	4b4c      	ldr	r3, [pc, #304]	@ (8107680 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8107550:	681b      	ldr	r3, [r3, #0]
 8107552:	4a4b      	ldr	r2, [pc, #300]	@ (8107680 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8107554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8107558:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810755a:	f7fc fb65 	bl	8103c28 <HAL_GetTick>
 810755e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8107562:	e00b      	b.n	810757c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8107564:	f7fc fb60 	bl	8103c28 <HAL_GetTick>
 8107568:	4602      	mov	r2, r0
 810756a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810756e:	1ad3      	subs	r3, r2, r3
 8107570:	2b64      	cmp	r3, #100	@ 0x64
 8107572:	d903      	bls.n	810757c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8107574:	2303      	movs	r3, #3
 8107576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810757a:	e005      	b.n	8107588 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810757c:	4b40      	ldr	r3, [pc, #256]	@ (8107680 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810757e:	681b      	ldr	r3, [r3, #0]
 8107580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107584:	2b00      	cmp	r3, #0
 8107586:	d0ed      	beq.n	8107564 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8107588:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810758c:	2b00      	cmp	r3, #0
 810758e:	d179      	bne.n	8107684 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8107590:	4b3a      	ldr	r3, [pc, #232]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107592:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8107594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107598:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810759c:	4053      	eors	r3, r2
 810759e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81075a2:	2b00      	cmp	r3, #0
 81075a4:	d015      	beq.n	81075d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81075a6:	4b35      	ldr	r3, [pc, #212]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81075a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81075aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81075ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81075b2:	4b32      	ldr	r3, [pc, #200]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81075b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81075b6:	4a31      	ldr	r2, [pc, #196]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81075b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81075bc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81075be:	4b2f      	ldr	r3, [pc, #188]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81075c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81075c2:	4a2e      	ldr	r2, [pc, #184]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81075c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81075c8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81075ca:	4a2c      	ldr	r2, [pc, #176]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81075cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81075d0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81075d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81075da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81075de:	d118      	bne.n	8107612 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81075e0:	f7fc fb22 	bl	8103c28 <HAL_GetTick>
 81075e4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81075e8:	e00d      	b.n	8107606 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81075ea:	f7fc fb1d 	bl	8103c28 <HAL_GetTick>
 81075ee:	4602      	mov	r2, r0
 81075f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81075f4:	1ad2      	subs	r2, r2, r3
 81075f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 81075fa:	429a      	cmp	r2, r3
 81075fc:	d903      	bls.n	8107606 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 81075fe:	2303      	movs	r3, #3
 8107600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8107604:	e005      	b.n	8107612 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8107606:	4b1d      	ldr	r3, [pc, #116]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810760a:	f003 0302 	and.w	r3, r3, #2
 810760e:	2b00      	cmp	r3, #0
 8107610:	d0eb      	beq.n	81075ea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8107612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107616:	2b00      	cmp	r3, #0
 8107618:	d12b      	bne.n	8107672 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810761a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810761e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8107622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8107626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810762a:	d110      	bne.n	810764e <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 810762c:	4b13      	ldr	r3, [pc, #76]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810762e:	691b      	ldr	r3, [r3, #16]
 8107630:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8107634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107638:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810763c:	091b      	lsrs	r3, r3, #4
 810763e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8107642:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8107646:	4a0d      	ldr	r2, [pc, #52]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107648:	430b      	orrs	r3, r1
 810764a:	6113      	str	r3, [r2, #16]
 810764c:	e005      	b.n	810765a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 810764e:	4b0b      	ldr	r3, [pc, #44]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107650:	691b      	ldr	r3, [r3, #16]
 8107652:	4a0a      	ldr	r2, [pc, #40]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107654:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8107658:	6113      	str	r3, [r2, #16]
 810765a:	4b08      	ldr	r3, [pc, #32]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810765c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810765e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107662:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8107666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810766a:	4a04      	ldr	r2, [pc, #16]	@ (810767c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810766c:	430b      	orrs	r3, r1
 810766e:	6713      	str	r3, [r2, #112]	@ 0x70
 8107670:	e00c      	b.n	810768c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8107672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 810767a:	e007      	b.n	810768c <HAL_RCCEx_PeriphCLKConfig+0x924>
 810767c:	58024400 	.word	0x58024400
 8107680:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107688:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810768c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107694:	f002 0301 	and.w	r3, r2, #1
 8107698:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810769c:	2300      	movs	r3, #0
 810769e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 81076a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 81076a6:	460b      	mov	r3, r1
 81076a8:	4313      	orrs	r3, r2
 81076aa:	f000 8089 	beq.w	81077c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 81076ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81076b4:	2b28      	cmp	r3, #40	@ 0x28
 81076b6:	d86b      	bhi.n	8107790 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 81076b8:	a201      	add	r2, pc, #4	@ (adr r2, 81076c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 81076ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81076be:	bf00      	nop
 81076c0:	08107799 	.word	0x08107799
 81076c4:	08107791 	.word	0x08107791
 81076c8:	08107791 	.word	0x08107791
 81076cc:	08107791 	.word	0x08107791
 81076d0:	08107791 	.word	0x08107791
 81076d4:	08107791 	.word	0x08107791
 81076d8:	08107791 	.word	0x08107791
 81076dc:	08107791 	.word	0x08107791
 81076e0:	08107765 	.word	0x08107765
 81076e4:	08107791 	.word	0x08107791
 81076e8:	08107791 	.word	0x08107791
 81076ec:	08107791 	.word	0x08107791
 81076f0:	08107791 	.word	0x08107791
 81076f4:	08107791 	.word	0x08107791
 81076f8:	08107791 	.word	0x08107791
 81076fc:	08107791 	.word	0x08107791
 8107700:	0810777b 	.word	0x0810777b
 8107704:	08107791 	.word	0x08107791
 8107708:	08107791 	.word	0x08107791
 810770c:	08107791 	.word	0x08107791
 8107710:	08107791 	.word	0x08107791
 8107714:	08107791 	.word	0x08107791
 8107718:	08107791 	.word	0x08107791
 810771c:	08107791 	.word	0x08107791
 8107720:	08107799 	.word	0x08107799
 8107724:	08107791 	.word	0x08107791
 8107728:	08107791 	.word	0x08107791
 810772c:	08107791 	.word	0x08107791
 8107730:	08107791 	.word	0x08107791
 8107734:	08107791 	.word	0x08107791
 8107738:	08107791 	.word	0x08107791
 810773c:	08107791 	.word	0x08107791
 8107740:	08107799 	.word	0x08107799
 8107744:	08107791 	.word	0x08107791
 8107748:	08107791 	.word	0x08107791
 810774c:	08107791 	.word	0x08107791
 8107750:	08107791 	.word	0x08107791
 8107754:	08107791 	.word	0x08107791
 8107758:	08107791 	.word	0x08107791
 810775c:	08107791 	.word	0x08107791
 8107760:	08107799 	.word	0x08107799
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107768:	3308      	adds	r3, #8
 810776a:	2101      	movs	r1, #1
 810776c:	4618      	mov	r0, r3
 810776e:	f001 fe95 	bl	810949c <RCCEx_PLL2_Config>
 8107772:	4603      	mov	r3, r0
 8107774:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8107778:	e00f      	b.n	810779a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810777a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810777e:	3328      	adds	r3, #40	@ 0x28
 8107780:	2101      	movs	r1, #1
 8107782:	4618      	mov	r0, r3
 8107784:	f001 ff3c 	bl	8109600 <RCCEx_PLL3_Config>
 8107788:	4603      	mov	r3, r0
 810778a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810778e:	e004      	b.n	810779a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107790:	2301      	movs	r3, #1
 8107792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107796:	e000      	b.n	810779a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8107798:	bf00      	nop
    }

    if (ret == HAL_OK)
 810779a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810779e:	2b00      	cmp	r3, #0
 81077a0:	d10a      	bne.n	81077b8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81077a2:	4bbf      	ldr	r3, [pc, #764]	@ (8107aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81077a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81077a6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 81077aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81077ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81077b0:	4abb      	ldr	r2, [pc, #748]	@ (8107aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81077b2:	430b      	orrs	r3, r1
 81077b4:	6553      	str	r3, [r2, #84]	@ 0x54
 81077b6:	e003      	b.n	81077c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81077b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81077bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81077c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81077c8:	f002 0302 	and.w	r3, r2, #2
 81077cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 81077d0:	2300      	movs	r3, #0
 81077d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 81077d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 81077da:	460b      	mov	r3, r1
 81077dc:	4313      	orrs	r3, r2
 81077de:	d041      	beq.n	8107864 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81077e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81077e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81077e6:	2b05      	cmp	r3, #5
 81077e8:	d824      	bhi.n	8107834 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 81077ea:	a201      	add	r2, pc, #4	@ (adr r2, 81077f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 81077ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81077f0:	0810783d 	.word	0x0810783d
 81077f4:	08107809 	.word	0x08107809
 81077f8:	0810781f 	.word	0x0810781f
 81077fc:	0810783d 	.word	0x0810783d
 8107800:	0810783d 	.word	0x0810783d
 8107804:	0810783d 	.word	0x0810783d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810780c:	3308      	adds	r3, #8
 810780e:	2101      	movs	r1, #1
 8107810:	4618      	mov	r0, r3
 8107812:	f001 fe43 	bl	810949c <RCCEx_PLL2_Config>
 8107816:	4603      	mov	r3, r0
 8107818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810781c:	e00f      	b.n	810783e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810781e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107822:	3328      	adds	r3, #40	@ 0x28
 8107824:	2101      	movs	r1, #1
 8107826:	4618      	mov	r0, r3
 8107828:	f001 feea 	bl	8109600 <RCCEx_PLL3_Config>
 810782c:	4603      	mov	r3, r0
 810782e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8107832:	e004      	b.n	810783e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107834:	2301      	movs	r3, #1
 8107836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810783a:	e000      	b.n	810783e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 810783c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810783e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107842:	2b00      	cmp	r3, #0
 8107844:	d10a      	bne.n	810785c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8107846:	4b96      	ldr	r3, [pc, #600]	@ (8107aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810784a:	f023 0107 	bic.w	r1, r3, #7
 810784e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107852:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8107854:	4a92      	ldr	r2, [pc, #584]	@ (8107aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107856:	430b      	orrs	r3, r1
 8107858:	6553      	str	r3, [r2, #84]	@ 0x54
 810785a:	e003      	b.n	8107864 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810785c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107860:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8107864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107868:	e9d3 2300 	ldrd	r2, r3, [r3]
 810786c:	f002 0304 	and.w	r3, r2, #4
 8107870:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8107874:	2300      	movs	r3, #0
 8107876:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810787a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810787e:	460b      	mov	r3, r1
 8107880:	4313      	orrs	r3, r2
 8107882:	d044      	beq.n	810790e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8107884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107888:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810788c:	2b05      	cmp	r3, #5
 810788e:	d825      	bhi.n	81078dc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8107890:	a201      	add	r2, pc, #4	@ (adr r2, 8107898 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8107892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107896:	bf00      	nop
 8107898:	081078e5 	.word	0x081078e5
 810789c:	081078b1 	.word	0x081078b1
 81078a0:	081078c7 	.word	0x081078c7
 81078a4:	081078e5 	.word	0x081078e5
 81078a8:	081078e5 	.word	0x081078e5
 81078ac:	081078e5 	.word	0x081078e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81078b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078b4:	3308      	adds	r3, #8
 81078b6:	2101      	movs	r1, #1
 81078b8:	4618      	mov	r0, r3
 81078ba:	f001 fdef 	bl	810949c <RCCEx_PLL2_Config>
 81078be:	4603      	mov	r3, r0
 81078c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81078c4:	e00f      	b.n	81078e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81078c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078ca:	3328      	adds	r3, #40	@ 0x28
 81078cc:	2101      	movs	r1, #1
 81078ce:	4618      	mov	r0, r3
 81078d0:	f001 fe96 	bl	8109600 <RCCEx_PLL3_Config>
 81078d4:	4603      	mov	r3, r0
 81078d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81078da:	e004      	b.n	81078e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81078dc:	2301      	movs	r3, #1
 81078de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81078e2:	e000      	b.n	81078e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 81078e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81078e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81078ea:	2b00      	cmp	r3, #0
 81078ec:	d10b      	bne.n	8107906 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81078ee:	4b6c      	ldr	r3, [pc, #432]	@ (8107aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81078f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81078f2:	f023 0107 	bic.w	r1, r3, #7
 81078f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81078fe:	4a68      	ldr	r2, [pc, #416]	@ (8107aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107900:	430b      	orrs	r3, r1
 8107902:	6593      	str	r3, [r2, #88]	@ 0x58
 8107904:	e003      	b.n	810790e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810790a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810790e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107916:	f002 0320 	and.w	r3, r2, #32
 810791a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810791e:	2300      	movs	r3, #0
 8107920:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8107924:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8107928:	460b      	mov	r3, r1
 810792a:	4313      	orrs	r3, r2
 810792c:	d055      	beq.n	81079da <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810792e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8107936:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810793a:	d033      	beq.n	81079a4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 810793c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107940:	d82c      	bhi.n	810799c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8107942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107946:	d02f      	beq.n	81079a8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8107948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810794c:	d826      	bhi.n	810799c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810794e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107952:	d02b      	beq.n	81079ac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8107954:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107958:	d820      	bhi.n	810799c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810795a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810795e:	d012      	beq.n	8107986 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8107960:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107964:	d81a      	bhi.n	810799c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8107966:	2b00      	cmp	r3, #0
 8107968:	d022      	beq.n	81079b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 810796a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810796e:	d115      	bne.n	810799c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107974:	3308      	adds	r3, #8
 8107976:	2100      	movs	r1, #0
 8107978:	4618      	mov	r0, r3
 810797a:	f001 fd8f 	bl	810949c <RCCEx_PLL2_Config>
 810797e:	4603      	mov	r3, r0
 8107980:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8107984:	e015      	b.n	81079b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810798a:	3328      	adds	r3, #40	@ 0x28
 810798c:	2102      	movs	r1, #2
 810798e:	4618      	mov	r0, r3
 8107990:	f001 fe36 	bl	8109600 <RCCEx_PLL3_Config>
 8107994:	4603      	mov	r3, r0
 8107996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810799a:	e00a      	b.n	81079b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810799c:	2301      	movs	r3, #1
 810799e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81079a2:	e006      	b.n	81079b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81079a4:	bf00      	nop
 81079a6:	e004      	b.n	81079b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81079a8:	bf00      	nop
 81079aa:	e002      	b.n	81079b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81079ac:	bf00      	nop
 81079ae:	e000      	b.n	81079b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81079b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81079b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81079b6:	2b00      	cmp	r3, #0
 81079b8:	d10b      	bne.n	81079d2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81079ba:	4b39      	ldr	r3, [pc, #228]	@ (8107aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81079bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81079be:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81079c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81079c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81079ca:	4a35      	ldr	r2, [pc, #212]	@ (8107aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81079cc:	430b      	orrs	r3, r1
 81079ce:	6553      	str	r3, [r2, #84]	@ 0x54
 81079d0:	e003      	b.n	81079da <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81079d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81079d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81079da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81079de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81079e2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 81079e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 81079ea:	2300      	movs	r3, #0
 81079ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 81079f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 81079f4:	460b      	mov	r3, r1
 81079f6:	4313      	orrs	r3, r2
 81079f8:	d058      	beq.n	8107aac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81079fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81079fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8107a02:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8107a06:	d033      	beq.n	8107a70 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8107a08:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8107a0c:	d82c      	bhi.n	8107a68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107a12:	d02f      	beq.n	8107a74 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8107a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107a18:	d826      	bhi.n	8107a68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107a1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8107a1e:	d02b      	beq.n	8107a78 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8107a20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8107a24:	d820      	bhi.n	8107a68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107a26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8107a2a:	d012      	beq.n	8107a52 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8107a2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8107a30:	d81a      	bhi.n	8107a68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107a32:	2b00      	cmp	r3, #0
 8107a34:	d022      	beq.n	8107a7c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8107a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8107a3a:	d115      	bne.n	8107a68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a40:	3308      	adds	r3, #8
 8107a42:	2100      	movs	r1, #0
 8107a44:	4618      	mov	r0, r3
 8107a46:	f001 fd29 	bl	810949c <RCCEx_PLL2_Config>
 8107a4a:	4603      	mov	r3, r0
 8107a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8107a50:	e015      	b.n	8107a7e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a56:	3328      	adds	r3, #40	@ 0x28
 8107a58:	2102      	movs	r1, #2
 8107a5a:	4618      	mov	r0, r3
 8107a5c:	f001 fdd0 	bl	8109600 <RCCEx_PLL3_Config>
 8107a60:	4603      	mov	r3, r0
 8107a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8107a66:	e00a      	b.n	8107a7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107a68:	2301      	movs	r3, #1
 8107a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107a6e:	e006      	b.n	8107a7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8107a70:	bf00      	nop
 8107a72:	e004      	b.n	8107a7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8107a74:	bf00      	nop
 8107a76:	e002      	b.n	8107a7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8107a78:	bf00      	nop
 8107a7a:	e000      	b.n	8107a7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8107a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107a82:	2b00      	cmp	r3, #0
 8107a84:	d10e      	bne.n	8107aa4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8107a86:	4b06      	ldr	r3, [pc, #24]	@ (8107aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107a8a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8107a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8107a96:	4a02      	ldr	r2, [pc, #8]	@ (8107aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107a98:	430b      	orrs	r3, r1
 8107a9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8107a9c:	e006      	b.n	8107aac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8107a9e:	bf00      	nop
 8107aa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107aa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8107aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107ab4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8107ab8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8107abc:	2300      	movs	r3, #0
 8107abe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8107ac2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8107ac6:	460b      	mov	r3, r1
 8107ac8:	4313      	orrs	r3, r2
 8107aca:	d055      	beq.n	8107b78 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8107acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ad0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8107ad4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8107ad8:	d033      	beq.n	8107b42 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8107ada:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8107ade:	d82c      	bhi.n	8107b3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107ae0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8107ae4:	d02f      	beq.n	8107b46 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8107ae6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8107aea:	d826      	bhi.n	8107b3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107aec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8107af0:	d02b      	beq.n	8107b4a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8107af2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8107af6:	d820      	bhi.n	8107b3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107af8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107afc:	d012      	beq.n	8107b24 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8107afe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107b02:	d81a      	bhi.n	8107b3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107b04:	2b00      	cmp	r3, #0
 8107b06:	d022      	beq.n	8107b4e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8107b08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107b0c:	d115      	bne.n	8107b3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107b12:	3308      	adds	r3, #8
 8107b14:	2100      	movs	r1, #0
 8107b16:	4618      	mov	r0, r3
 8107b18:	f001 fcc0 	bl	810949c <RCCEx_PLL2_Config>
 8107b1c:	4603      	mov	r3, r0
 8107b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8107b22:	e015      	b.n	8107b50 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107b28:	3328      	adds	r3, #40	@ 0x28
 8107b2a:	2102      	movs	r1, #2
 8107b2c:	4618      	mov	r0, r3
 8107b2e:	f001 fd67 	bl	8109600 <RCCEx_PLL3_Config>
 8107b32:	4603      	mov	r3, r0
 8107b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8107b38:	e00a      	b.n	8107b50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107b3a:	2301      	movs	r3, #1
 8107b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107b40:	e006      	b.n	8107b50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107b42:	bf00      	nop
 8107b44:	e004      	b.n	8107b50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107b46:	bf00      	nop
 8107b48:	e002      	b.n	8107b50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107b4a:	bf00      	nop
 8107b4c:	e000      	b.n	8107b50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107b54:	2b00      	cmp	r3, #0
 8107b56:	d10b      	bne.n	8107b70 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8107b58:	4ba1      	ldr	r3, [pc, #644]	@ (8107de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107b5c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8107b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107b64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8107b68:	4a9d      	ldr	r2, [pc, #628]	@ (8107de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107b6a:	430b      	orrs	r3, r1
 8107b6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8107b6e:	e003      	b.n	8107b78 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107b74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8107b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107b80:	f002 0308 	and.w	r3, r2, #8
 8107b84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8107b88:	2300      	movs	r3, #0
 8107b8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8107b8e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8107b92:	460b      	mov	r3, r1
 8107b94:	4313      	orrs	r3, r2
 8107b96:	d01e      	beq.n	8107bd6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8107b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107ba4:	d10c      	bne.n	8107bc0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107baa:	3328      	adds	r3, #40	@ 0x28
 8107bac:	2102      	movs	r1, #2
 8107bae:	4618      	mov	r0, r3
 8107bb0:	f001 fd26 	bl	8109600 <RCCEx_PLL3_Config>
 8107bb4:	4603      	mov	r3, r0
 8107bb6:	2b00      	cmp	r3, #0
 8107bb8:	d002      	beq.n	8107bc0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8107bba:	2301      	movs	r3, #1
 8107bbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8107bc0:	4b87      	ldr	r3, [pc, #540]	@ (8107de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107bc4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8107bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107bd0:	4a83      	ldr	r2, [pc, #524]	@ (8107de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107bd2:	430b      	orrs	r3, r1
 8107bd4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8107bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107bde:	f002 0310 	and.w	r3, r2, #16
 8107be2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8107be6:	2300      	movs	r3, #0
 8107be8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8107bec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8107bf0:	460b      	mov	r3, r1
 8107bf2:	4313      	orrs	r3, r2
 8107bf4:	d01e      	beq.n	8107c34 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8107bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8107bfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107c02:	d10c      	bne.n	8107c1e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c08:	3328      	adds	r3, #40	@ 0x28
 8107c0a:	2102      	movs	r1, #2
 8107c0c:	4618      	mov	r0, r3
 8107c0e:	f001 fcf7 	bl	8109600 <RCCEx_PLL3_Config>
 8107c12:	4603      	mov	r3, r0
 8107c14:	2b00      	cmp	r3, #0
 8107c16:	d002      	beq.n	8107c1e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8107c18:	2301      	movs	r3, #1
 8107c1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8107c1e:	4b70      	ldr	r3, [pc, #448]	@ (8107de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107c22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8107c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8107c2e:	4a6c      	ldr	r2, [pc, #432]	@ (8107de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107c30:	430b      	orrs	r3, r1
 8107c32:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8107c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107c3c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8107c40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8107c44:	2300      	movs	r3, #0
 8107c46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8107c4a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8107c4e:	460b      	mov	r3, r1
 8107c50:	4313      	orrs	r3, r2
 8107c52:	d03e      	beq.n	8107cd2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8107c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8107c5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107c60:	d022      	beq.n	8107ca8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8107c62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107c66:	d81b      	bhi.n	8107ca0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8107c68:	2b00      	cmp	r3, #0
 8107c6a:	d003      	beq.n	8107c74 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8107c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107c70:	d00b      	beq.n	8107c8a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8107c72:	e015      	b.n	8107ca0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c78:	3308      	adds	r3, #8
 8107c7a:	2100      	movs	r1, #0
 8107c7c:	4618      	mov	r0, r3
 8107c7e:	f001 fc0d 	bl	810949c <RCCEx_PLL2_Config>
 8107c82:	4603      	mov	r3, r0
 8107c84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8107c88:	e00f      	b.n	8107caa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c8e:	3328      	adds	r3, #40	@ 0x28
 8107c90:	2102      	movs	r1, #2
 8107c92:	4618      	mov	r0, r3
 8107c94:	f001 fcb4 	bl	8109600 <RCCEx_PLL3_Config>
 8107c98:	4603      	mov	r3, r0
 8107c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8107c9e:	e004      	b.n	8107caa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107ca0:	2301      	movs	r3, #1
 8107ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107ca6:	e000      	b.n	8107caa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8107ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107cae:	2b00      	cmp	r3, #0
 8107cb0:	d10b      	bne.n	8107cca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8107cb2:	4b4b      	ldr	r3, [pc, #300]	@ (8107de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107cb6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8107cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107cbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8107cc2:	4a47      	ldr	r2, [pc, #284]	@ (8107de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107cc4:	430b      	orrs	r3, r1
 8107cc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8107cc8:	e003      	b.n	8107cd2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107cce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8107cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107cda:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8107cde:	67bb      	str	r3, [r7, #120]	@ 0x78
 8107ce0:	2300      	movs	r3, #0
 8107ce2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8107ce4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8107ce8:	460b      	mov	r3, r1
 8107cea:	4313      	orrs	r3, r2
 8107cec:	d03b      	beq.n	8107d66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8107cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107cf6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107cfa:	d01f      	beq.n	8107d3c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8107cfc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107d00:	d818      	bhi.n	8107d34 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8107d02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8107d06:	d003      	beq.n	8107d10 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8107d08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107d0c:	d007      	beq.n	8107d1e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8107d0e:	e011      	b.n	8107d34 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107d10:	4b33      	ldr	r3, [pc, #204]	@ (8107de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107d14:	4a32      	ldr	r2, [pc, #200]	@ (8107de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107d16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8107d1c:	e00f      	b.n	8107d3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d22:	3328      	adds	r3, #40	@ 0x28
 8107d24:	2101      	movs	r1, #1
 8107d26:	4618      	mov	r0, r3
 8107d28:	f001 fc6a 	bl	8109600 <RCCEx_PLL3_Config>
 8107d2c:	4603      	mov	r3, r0
 8107d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8107d32:	e004      	b.n	8107d3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107d34:	2301      	movs	r3, #1
 8107d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107d3a:	e000      	b.n	8107d3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8107d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107d42:	2b00      	cmp	r3, #0
 8107d44:	d10b      	bne.n	8107d5e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8107d46:	4b26      	ldr	r3, [pc, #152]	@ (8107de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107d4a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8107d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107d56:	4a22      	ldr	r2, [pc, #136]	@ (8107de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107d58:	430b      	orrs	r3, r1
 8107d5a:	6553      	str	r3, [r2, #84]	@ 0x54
 8107d5c:	e003      	b.n	8107d66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107d62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8107d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107d6e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8107d72:	673b      	str	r3, [r7, #112]	@ 0x70
 8107d74:	2300      	movs	r3, #0
 8107d76:	677b      	str	r3, [r7, #116]	@ 0x74
 8107d78:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8107d7c:	460b      	mov	r3, r1
 8107d7e:	4313      	orrs	r3, r2
 8107d80:	d034      	beq.n	8107dec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8107d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107d88:	2b00      	cmp	r3, #0
 8107d8a:	d003      	beq.n	8107d94 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8107d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107d90:	d007      	beq.n	8107da2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8107d92:	e011      	b.n	8107db8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107d94:	4b12      	ldr	r3, [pc, #72]	@ (8107de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107d98:	4a11      	ldr	r2, [pc, #68]	@ (8107de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107d9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107d9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8107da0:	e00e      	b.n	8107dc0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107da6:	3308      	adds	r3, #8
 8107da8:	2102      	movs	r1, #2
 8107daa:	4618      	mov	r0, r3
 8107dac:	f001 fb76 	bl	810949c <RCCEx_PLL2_Config>
 8107db0:	4603      	mov	r3, r0
 8107db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8107db6:	e003      	b.n	8107dc0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8107db8:	2301      	movs	r3, #1
 8107dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107dc4:	2b00      	cmp	r3, #0
 8107dc6:	d10d      	bne.n	8107de4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8107dc8:	4b05      	ldr	r3, [pc, #20]	@ (8107de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107dcc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8107dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107dd6:	4a02      	ldr	r2, [pc, #8]	@ (8107de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107dd8:	430b      	orrs	r3, r1
 8107dda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8107ddc:	e006      	b.n	8107dec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8107dde:	bf00      	nop
 8107de0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107de8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8107dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107df4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8107df8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8107dfa:	2300      	movs	r3, #0
 8107dfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8107dfe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8107e02:	460b      	mov	r3, r1
 8107e04:	4313      	orrs	r3, r2
 8107e06:	d00c      	beq.n	8107e22 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e0c:	3328      	adds	r3, #40	@ 0x28
 8107e0e:	2102      	movs	r1, #2
 8107e10:	4618      	mov	r0, r3
 8107e12:	f001 fbf5 	bl	8109600 <RCCEx_PLL3_Config>
 8107e16:	4603      	mov	r3, r0
 8107e18:	2b00      	cmp	r3, #0
 8107e1a:	d002      	beq.n	8107e22 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8107e1c:	2301      	movs	r3, #1
 8107e1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8107e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107e2a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8107e2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8107e30:	2300      	movs	r3, #0
 8107e32:	667b      	str	r3, [r7, #100]	@ 0x64
 8107e34:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8107e38:	460b      	mov	r3, r1
 8107e3a:	4313      	orrs	r3, r2
 8107e3c:	d038      	beq.n	8107eb0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8107e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8107e46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8107e4a:	d018      	beq.n	8107e7e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8107e4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8107e50:	d811      	bhi.n	8107e76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8107e52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107e56:	d014      	beq.n	8107e82 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8107e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107e5c:	d80b      	bhi.n	8107e76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8107e5e:	2b00      	cmp	r3, #0
 8107e60:	d011      	beq.n	8107e86 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8107e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107e66:	d106      	bne.n	8107e76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107e68:	4bc3      	ldr	r3, [pc, #780]	@ (8108178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107e6c:	4ac2      	ldr	r2, [pc, #776]	@ (8108178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107e6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107e72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8107e74:	e008      	b.n	8107e88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107e76:	2301      	movs	r3, #1
 8107e78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107e7c:	e004      	b.n	8107e88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8107e7e:	bf00      	nop
 8107e80:	e002      	b.n	8107e88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8107e82:	bf00      	nop
 8107e84:	e000      	b.n	8107e88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8107e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107e88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107e8c:	2b00      	cmp	r3, #0
 8107e8e:	d10b      	bne.n	8107ea8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8107e90:	4bb9      	ldr	r3, [pc, #740]	@ (8108178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107e94:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8107e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8107ea0:	4ab5      	ldr	r2, [pc, #724]	@ (8108178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107ea2:	430b      	orrs	r3, r1
 8107ea4:	6553      	str	r3, [r2, #84]	@ 0x54
 8107ea6:	e003      	b.n	8107eb0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107eac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8107eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107eb8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8107ebc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8107ebe:	2300      	movs	r3, #0
 8107ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8107ec2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8107ec6:	460b      	mov	r3, r1
 8107ec8:	4313      	orrs	r3, r2
 8107eca:	d009      	beq.n	8107ee0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8107ecc:	4baa      	ldr	r3, [pc, #680]	@ (8108178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107ed0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8107ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ed8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8107eda:	4aa7      	ldr	r2, [pc, #668]	@ (8108178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107edc:	430b      	orrs	r3, r1
 8107ede:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8107ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107ee8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8107eec:	653b      	str	r3, [r7, #80]	@ 0x50
 8107eee:	2300      	movs	r3, #0
 8107ef0:	657b      	str	r3, [r7, #84]	@ 0x54
 8107ef2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8107ef6:	460b      	mov	r3, r1
 8107ef8:	4313      	orrs	r3, r2
 8107efa:	d00a      	beq.n	8107f12 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8107efc:	4b9e      	ldr	r3, [pc, #632]	@ (8108178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107efe:	691b      	ldr	r3, [r3, #16]
 8107f00:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8107f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8107f0c:	4a9a      	ldr	r2, [pc, #616]	@ (8108178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107f0e:	430b      	orrs	r3, r1
 8107f10:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8107f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107f1a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8107f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8107f20:	2300      	movs	r3, #0
 8107f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8107f24:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8107f28:	460b      	mov	r3, r1
 8107f2a:	4313      	orrs	r3, r2
 8107f2c:	d009      	beq.n	8107f42 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8107f2e:	4b92      	ldr	r3, [pc, #584]	@ (8108178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107f32:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8107f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107f3c:	4a8e      	ldr	r2, [pc, #568]	@ (8108178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107f3e:	430b      	orrs	r3, r1
 8107f40:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8107f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107f4a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8107f4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8107f50:	2300      	movs	r3, #0
 8107f52:	647b      	str	r3, [r7, #68]	@ 0x44
 8107f54:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8107f58:	460b      	mov	r3, r1
 8107f5a:	4313      	orrs	r3, r2
 8107f5c:	d00e      	beq.n	8107f7c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8107f5e:	4b86      	ldr	r3, [pc, #536]	@ (8108178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107f60:	691b      	ldr	r3, [r3, #16]
 8107f62:	4a85      	ldr	r2, [pc, #532]	@ (8108178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107f64:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8107f68:	6113      	str	r3, [r2, #16]
 8107f6a:	4b83      	ldr	r3, [pc, #524]	@ (8108178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107f6c:	6919      	ldr	r1, [r3, #16]
 8107f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8107f76:	4a80      	ldr	r2, [pc, #512]	@ (8108178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107f78:	430b      	orrs	r3, r1
 8107f7a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8107f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107f84:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8107f88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8107f8a:	2300      	movs	r3, #0
 8107f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107f8e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8107f92:	460b      	mov	r3, r1
 8107f94:	4313      	orrs	r3, r2
 8107f96:	d009      	beq.n	8107fac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8107f98:	4b77      	ldr	r3, [pc, #476]	@ (8108178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107f9c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8107fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107fa6:	4a74      	ldr	r2, [pc, #464]	@ (8108178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107fa8:	430b      	orrs	r3, r1
 8107faa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8107fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107fb4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8107fb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8107fba:	2300      	movs	r3, #0
 8107fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8107fbe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8107fc2:	460b      	mov	r3, r1
 8107fc4:	4313      	orrs	r3, r2
 8107fc6:	d00a      	beq.n	8107fde <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8107fc8:	4b6b      	ldr	r3, [pc, #428]	@ (8108178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107fcc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8107fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8107fd8:	4a67      	ldr	r2, [pc, #412]	@ (8108178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107fda:	430b      	orrs	r3, r1
 8107fdc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8107fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107fe6:	2100      	movs	r1, #0
 8107fe8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8107fea:	f003 0301 	and.w	r3, r3, #1
 8107fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8107ff0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8107ff4:	460b      	mov	r3, r1
 8107ff6:	4313      	orrs	r3, r2
 8107ff8:	d011      	beq.n	810801e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ffe:	3308      	adds	r3, #8
 8108000:	2100      	movs	r1, #0
 8108002:	4618      	mov	r0, r3
 8108004:	f001 fa4a 	bl	810949c <RCCEx_PLL2_Config>
 8108008:	4603      	mov	r3, r0
 810800a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810800e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108012:	2b00      	cmp	r3, #0
 8108014:	d003      	beq.n	810801e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810801a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810801e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108026:	2100      	movs	r1, #0
 8108028:	6239      	str	r1, [r7, #32]
 810802a:	f003 0302 	and.w	r3, r3, #2
 810802e:	627b      	str	r3, [r7, #36]	@ 0x24
 8108030:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8108034:	460b      	mov	r3, r1
 8108036:	4313      	orrs	r3, r2
 8108038:	d011      	beq.n	810805e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810803a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810803e:	3308      	adds	r3, #8
 8108040:	2101      	movs	r1, #1
 8108042:	4618      	mov	r0, r3
 8108044:	f001 fa2a 	bl	810949c <RCCEx_PLL2_Config>
 8108048:	4603      	mov	r3, r0
 810804a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810804e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108052:	2b00      	cmp	r3, #0
 8108054:	d003      	beq.n	810805e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810805a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810805e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108066:	2100      	movs	r1, #0
 8108068:	61b9      	str	r1, [r7, #24]
 810806a:	f003 0304 	and.w	r3, r3, #4
 810806e:	61fb      	str	r3, [r7, #28]
 8108070:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8108074:	460b      	mov	r3, r1
 8108076:	4313      	orrs	r3, r2
 8108078:	d011      	beq.n	810809e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810807a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810807e:	3308      	adds	r3, #8
 8108080:	2102      	movs	r1, #2
 8108082:	4618      	mov	r0, r3
 8108084:	f001 fa0a 	bl	810949c <RCCEx_PLL2_Config>
 8108088:	4603      	mov	r3, r0
 810808a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810808e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108092:	2b00      	cmp	r3, #0
 8108094:	d003      	beq.n	810809e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810809a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810809e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81080a6:	2100      	movs	r1, #0
 81080a8:	6139      	str	r1, [r7, #16]
 81080aa:	f003 0308 	and.w	r3, r3, #8
 81080ae:	617b      	str	r3, [r7, #20]
 81080b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81080b4:	460b      	mov	r3, r1
 81080b6:	4313      	orrs	r3, r2
 81080b8:	d011      	beq.n	81080de <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81080ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080be:	3328      	adds	r3, #40	@ 0x28
 81080c0:	2100      	movs	r1, #0
 81080c2:	4618      	mov	r0, r3
 81080c4:	f001 fa9c 	bl	8109600 <RCCEx_PLL3_Config>
 81080c8:	4603      	mov	r3, r0
 81080ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 81080ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81080d2:	2b00      	cmp	r3, #0
 81080d4:	d003      	beq.n	81080de <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81080d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81080da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81080de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81080e6:	2100      	movs	r1, #0
 81080e8:	60b9      	str	r1, [r7, #8]
 81080ea:	f003 0310 	and.w	r3, r3, #16
 81080ee:	60fb      	str	r3, [r7, #12]
 81080f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81080f4:	460b      	mov	r3, r1
 81080f6:	4313      	orrs	r3, r2
 81080f8:	d011      	beq.n	810811e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81080fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080fe:	3328      	adds	r3, #40	@ 0x28
 8108100:	2101      	movs	r1, #1
 8108102:	4618      	mov	r0, r3
 8108104:	f001 fa7c 	bl	8109600 <RCCEx_PLL3_Config>
 8108108:	4603      	mov	r3, r0
 810810a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810810e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108112:	2b00      	cmp	r3, #0
 8108114:	d003      	beq.n	810811e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810811a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810811e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108126:	2100      	movs	r1, #0
 8108128:	6039      	str	r1, [r7, #0]
 810812a:	f003 0320 	and.w	r3, r3, #32
 810812e:	607b      	str	r3, [r7, #4]
 8108130:	e9d7 1200 	ldrd	r1, r2, [r7]
 8108134:	460b      	mov	r3, r1
 8108136:	4313      	orrs	r3, r2
 8108138:	d011      	beq.n	810815e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810813a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810813e:	3328      	adds	r3, #40	@ 0x28
 8108140:	2102      	movs	r1, #2
 8108142:	4618      	mov	r0, r3
 8108144:	f001 fa5c 	bl	8109600 <RCCEx_PLL3_Config>
 8108148:	4603      	mov	r3, r0
 810814a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810814e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108152:	2b00      	cmp	r3, #0
 8108154:	d003      	beq.n	810815e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810815a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 810815e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8108162:	2b00      	cmp	r3, #0
 8108164:	d101      	bne.n	810816a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8108166:	2300      	movs	r3, #0
 8108168:	e000      	b.n	810816c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 810816a:	2301      	movs	r3, #1
}
 810816c:	4618      	mov	r0, r3
 810816e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8108172:	46bd      	mov	sp, r7
 8108174:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8108178:	58024400 	.word	0x58024400

0810817c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 810817c:	b580      	push	{r7, lr}
 810817e:	b090      	sub	sp, #64	@ 0x40
 8108180:	af00      	add	r7, sp, #0
 8108182:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8108186:	e9d7 2300 	ldrd	r2, r3, [r7]
 810818a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 810818e:	430b      	orrs	r3, r1
 8108190:	f040 8094 	bne.w	81082bc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8108194:	4b9e      	ldr	r3, [pc, #632]	@ (8108410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8108196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108198:	f003 0307 	and.w	r3, r3, #7
 810819c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810819e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81081a0:	2b04      	cmp	r3, #4
 81081a2:	f200 8087 	bhi.w	81082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 81081a6:	a201      	add	r2, pc, #4	@ (adr r2, 81081ac <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 81081a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81081ac:	081081c1 	.word	0x081081c1
 81081b0:	081081e9 	.word	0x081081e9
 81081b4:	08108211 	.word	0x08108211
 81081b8:	081082ad 	.word	0x081082ad
 81081bc:	08108239 	.word	0x08108239
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81081c0:	4b93      	ldr	r3, [pc, #588]	@ (8108410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81081c2:	681b      	ldr	r3, [r3, #0]
 81081c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81081c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81081cc:	d108      	bne.n	81081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81081ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81081d2:	4618      	mov	r0, r3
 81081d4:	f001 f810 	bl	81091f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81081d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81081da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81081dc:	f000 bd45 	b.w	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81081e0:	2300      	movs	r3, #0
 81081e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81081e4:	f000 bd41 	b.w	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81081e8:	4b89      	ldr	r3, [pc, #548]	@ (8108410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81081ea:	681b      	ldr	r3, [r3, #0]
 81081ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81081f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81081f4:	d108      	bne.n	8108208 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81081f6:	f107 0318 	add.w	r3, r7, #24
 81081fa:	4618      	mov	r0, r3
 81081fc:	f000 fd54 	bl	8108ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8108200:	69bb      	ldr	r3, [r7, #24]
 8108202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108204:	f000 bd31 	b.w	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108208:	2300      	movs	r3, #0
 810820a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810820c:	f000 bd2d 	b.w	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108210:	4b7f      	ldr	r3, [pc, #508]	@ (8108410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8108212:	681b      	ldr	r3, [r3, #0]
 8108214:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108218:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810821c:	d108      	bne.n	8108230 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810821e:	f107 030c 	add.w	r3, r7, #12
 8108222:	4618      	mov	r0, r3
 8108224:	f000 fe94 	bl	8108f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8108228:	68fb      	ldr	r3, [r7, #12]
 810822a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810822c:	f000 bd1d 	b.w	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108230:	2300      	movs	r3, #0
 8108232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108234:	f000 bd19 	b.w	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8108238:	4b75      	ldr	r3, [pc, #468]	@ (8108410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810823a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810823c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8108240:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8108242:	4b73      	ldr	r3, [pc, #460]	@ (8108410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8108244:	681b      	ldr	r3, [r3, #0]
 8108246:	f003 0304 	and.w	r3, r3, #4
 810824a:	2b04      	cmp	r3, #4
 810824c:	d10c      	bne.n	8108268 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 810824e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108250:	2b00      	cmp	r3, #0
 8108252:	d109      	bne.n	8108268 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108254:	4b6e      	ldr	r3, [pc, #440]	@ (8108410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8108256:	681b      	ldr	r3, [r3, #0]
 8108258:	08db      	lsrs	r3, r3, #3
 810825a:	f003 0303 	and.w	r3, r3, #3
 810825e:	4a6d      	ldr	r2, [pc, #436]	@ (8108414 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8108260:	fa22 f303 	lsr.w	r3, r2, r3
 8108264:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108266:	e01f      	b.n	81082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108268:	4b69      	ldr	r3, [pc, #420]	@ (8108410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810826a:	681b      	ldr	r3, [r3, #0]
 810826c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108274:	d106      	bne.n	8108284 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8108276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108278:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810827c:	d102      	bne.n	8108284 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810827e:	4b66      	ldr	r3, [pc, #408]	@ (8108418 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8108280:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108282:	e011      	b.n	81082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108284:	4b62      	ldr	r3, [pc, #392]	@ (8108410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8108286:	681b      	ldr	r3, [r3, #0]
 8108288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810828c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108290:	d106      	bne.n	81082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8108292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108294:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108298:	d102      	bne.n	81082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810829a:	4b60      	ldr	r3, [pc, #384]	@ (810841c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810829c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810829e:	e003      	b.n	81082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81082a0:	2300      	movs	r3, #0
 81082a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81082a4:	f000 bce1 	b.w	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81082a8:	f000 bcdf 	b.w	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81082ac:	4b5c      	ldr	r3, [pc, #368]	@ (8108420 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81082ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81082b0:	f000 bcdb 	b.w	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81082b4:	2300      	movs	r3, #0
 81082b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81082b8:	f000 bcd7 	b.w	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 81082bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 81082c0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 81082c4:	430b      	orrs	r3, r1
 81082c6:	f040 80ad 	bne.w	8108424 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 81082ca:	4b51      	ldr	r3, [pc, #324]	@ (8108410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81082cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81082ce:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 81082d2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81082d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81082d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81082da:	d056      	beq.n	810838a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 81082dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81082de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81082e2:	f200 8090 	bhi.w	8108406 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81082e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81082e8:	2bc0      	cmp	r3, #192	@ 0xc0
 81082ea:	f000 8088 	beq.w	81083fe <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 81082ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81082f0:	2bc0      	cmp	r3, #192	@ 0xc0
 81082f2:	f200 8088 	bhi.w	8108406 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81082f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81082f8:	2b80      	cmp	r3, #128	@ 0x80
 81082fa:	d032      	beq.n	8108362 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 81082fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81082fe:	2b80      	cmp	r3, #128	@ 0x80
 8108300:	f200 8081 	bhi.w	8108406 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8108304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108306:	2b00      	cmp	r3, #0
 8108308:	d003      	beq.n	8108312 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 810830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810830c:	2b40      	cmp	r3, #64	@ 0x40
 810830e:	d014      	beq.n	810833a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8108310:	e079      	b.n	8108406 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108312:	4b3f      	ldr	r3, [pc, #252]	@ (8108410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8108314:	681b      	ldr	r3, [r3, #0]
 8108316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810831a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810831e:	d108      	bne.n	8108332 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108320:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108324:	4618      	mov	r0, r3
 8108326:	f000 ff67 	bl	81091f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810832a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810832c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810832e:	f000 bc9c 	b.w	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108332:	2300      	movs	r3, #0
 8108334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108336:	f000 bc98 	b.w	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810833a:	4b35      	ldr	r3, [pc, #212]	@ (8108410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810833c:	681b      	ldr	r3, [r3, #0]
 810833e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108342:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108346:	d108      	bne.n	810835a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108348:	f107 0318 	add.w	r3, r7, #24
 810834c:	4618      	mov	r0, r3
 810834e:	f000 fcab 	bl	8108ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8108352:	69bb      	ldr	r3, [r7, #24]
 8108354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108356:	f000 bc88 	b.w	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810835a:	2300      	movs	r3, #0
 810835c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810835e:	f000 bc84 	b.w	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108362:	4b2b      	ldr	r3, [pc, #172]	@ (8108410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8108364:	681b      	ldr	r3, [r3, #0]
 8108366:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810836a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810836e:	d108      	bne.n	8108382 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108370:	f107 030c 	add.w	r3, r7, #12
 8108374:	4618      	mov	r0, r3
 8108376:	f000 fdeb 	bl	8108f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810837a:	68fb      	ldr	r3, [r7, #12]
 810837c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810837e:	f000 bc74 	b.w	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108382:	2300      	movs	r3, #0
 8108384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108386:	f000 bc70 	b.w	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810838a:	4b21      	ldr	r3, [pc, #132]	@ (8108410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810838c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810838e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8108392:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8108394:	4b1e      	ldr	r3, [pc, #120]	@ (8108410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8108396:	681b      	ldr	r3, [r3, #0]
 8108398:	f003 0304 	and.w	r3, r3, #4
 810839c:	2b04      	cmp	r3, #4
 810839e:	d10c      	bne.n	81083ba <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 81083a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81083a2:	2b00      	cmp	r3, #0
 81083a4:	d109      	bne.n	81083ba <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81083a6:	4b1a      	ldr	r3, [pc, #104]	@ (8108410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81083a8:	681b      	ldr	r3, [r3, #0]
 81083aa:	08db      	lsrs	r3, r3, #3
 81083ac:	f003 0303 	and.w	r3, r3, #3
 81083b0:	4a18      	ldr	r2, [pc, #96]	@ (8108414 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81083b2:	fa22 f303 	lsr.w	r3, r2, r3
 81083b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81083b8:	e01f      	b.n	81083fa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81083ba:	4b15      	ldr	r3, [pc, #84]	@ (8108410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81083bc:	681b      	ldr	r3, [r3, #0]
 81083be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81083c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81083c6:	d106      	bne.n	81083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 81083c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81083ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81083ce:	d102      	bne.n	81083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81083d0:	4b11      	ldr	r3, [pc, #68]	@ (8108418 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81083d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81083d4:	e011      	b.n	81083fa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81083d6:	4b0e      	ldr	r3, [pc, #56]	@ (8108410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81083d8:	681b      	ldr	r3, [r3, #0]
 81083da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81083de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81083e2:	d106      	bne.n	81083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 81083e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81083e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81083ea:	d102      	bne.n	81083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81083ec:	4b0b      	ldr	r3, [pc, #44]	@ (810841c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81083ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81083f0:	e003      	b.n	81083fa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81083f2:	2300      	movs	r3, #0
 81083f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81083f6:	f000 bc38 	b.w	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81083fa:	f000 bc36 	b.w	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81083fe:	4b08      	ldr	r3, [pc, #32]	@ (8108420 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8108400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108402:	f000 bc32 	b.w	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8108406:	2300      	movs	r3, #0
 8108408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810840a:	f000 bc2e 	b.w	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810840e:	bf00      	nop
 8108410:	58024400 	.word	0x58024400
 8108414:	03d09000 	.word	0x03d09000
 8108418:	003d0900 	.word	0x003d0900
 810841c:	007a1200 	.word	0x007a1200
 8108420:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8108424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108428:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 810842c:	430b      	orrs	r3, r1
 810842e:	f040 809c 	bne.w	810856a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8108432:	4b9e      	ldr	r3, [pc, #632]	@ (81086ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8108434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108436:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 810843a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810843c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810843e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8108442:	d054      	beq.n	81084ee <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8108444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108446:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810844a:	f200 808b 	bhi.w	8108564 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810844e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108450:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8108454:	f000 8083 	beq.w	810855e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8108458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810845a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810845e:	f200 8081 	bhi.w	8108564 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8108462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108464:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8108468:	d02f      	beq.n	81084ca <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 810846a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810846c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8108470:	d878      	bhi.n	8108564 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8108472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108474:	2b00      	cmp	r3, #0
 8108476:	d004      	beq.n	8108482 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8108478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810847a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810847e:	d012      	beq.n	81084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8108480:	e070      	b.n	8108564 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108482:	4b8a      	ldr	r3, [pc, #552]	@ (81086ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8108484:	681b      	ldr	r3, [r3, #0]
 8108486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810848a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810848e:	d107      	bne.n	81084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108490:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108494:	4618      	mov	r0, r3
 8108496:	f000 feaf 	bl	81091f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810849a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810849c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810849e:	e3e4      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81084a0:	2300      	movs	r3, #0
 81084a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81084a4:	e3e1      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81084a6:	4b81      	ldr	r3, [pc, #516]	@ (81086ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81084a8:	681b      	ldr	r3, [r3, #0]
 81084aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81084ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81084b2:	d107      	bne.n	81084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81084b4:	f107 0318 	add.w	r3, r7, #24
 81084b8:	4618      	mov	r0, r3
 81084ba:	f000 fbf5 	bl	8108ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81084be:	69bb      	ldr	r3, [r7, #24]
 81084c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81084c2:	e3d2      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81084c4:	2300      	movs	r3, #0
 81084c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81084c8:	e3cf      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81084ca:	4b78      	ldr	r3, [pc, #480]	@ (81086ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81084cc:	681b      	ldr	r3, [r3, #0]
 81084ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81084d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81084d6:	d107      	bne.n	81084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81084d8:	f107 030c 	add.w	r3, r7, #12
 81084dc:	4618      	mov	r0, r3
 81084de:	f000 fd37 	bl	8108f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81084e2:	68fb      	ldr	r3, [r7, #12]
 81084e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81084e6:	e3c0      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81084e8:	2300      	movs	r3, #0
 81084ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81084ec:	e3bd      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81084ee:	4b6f      	ldr	r3, [pc, #444]	@ (81086ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81084f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81084f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81084f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81084f8:	4b6c      	ldr	r3, [pc, #432]	@ (81086ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81084fa:	681b      	ldr	r3, [r3, #0]
 81084fc:	f003 0304 	and.w	r3, r3, #4
 8108500:	2b04      	cmp	r3, #4
 8108502:	d10c      	bne.n	810851e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8108504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108506:	2b00      	cmp	r3, #0
 8108508:	d109      	bne.n	810851e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810850a:	4b68      	ldr	r3, [pc, #416]	@ (81086ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810850c:	681b      	ldr	r3, [r3, #0]
 810850e:	08db      	lsrs	r3, r3, #3
 8108510:	f003 0303 	and.w	r3, r3, #3
 8108514:	4a66      	ldr	r2, [pc, #408]	@ (81086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8108516:	fa22 f303 	lsr.w	r3, r2, r3
 810851a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810851c:	e01e      	b.n	810855c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810851e:	4b63      	ldr	r3, [pc, #396]	@ (81086ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8108520:	681b      	ldr	r3, [r3, #0]
 8108522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810852a:	d106      	bne.n	810853a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 810852c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810852e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108532:	d102      	bne.n	810853a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8108534:	4b5f      	ldr	r3, [pc, #380]	@ (81086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8108536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108538:	e010      	b.n	810855c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810853a:	4b5c      	ldr	r3, [pc, #368]	@ (81086ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810853c:	681b      	ldr	r3, [r3, #0]
 810853e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108542:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108546:	d106      	bne.n	8108556 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8108548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810854a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810854e:	d102      	bne.n	8108556 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8108550:	4b59      	ldr	r3, [pc, #356]	@ (81086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8108552:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108554:	e002      	b.n	810855c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8108556:	2300      	movs	r3, #0
 8108558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810855a:	e386      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810855c:	e385      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810855e:	4b57      	ldr	r3, [pc, #348]	@ (81086bc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8108560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108562:	e382      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8108564:	2300      	movs	r3, #0
 8108566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108568:	e37f      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 810856a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810856e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8108572:	430b      	orrs	r3, r1
 8108574:	f040 80a7 	bne.w	81086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8108578:	4b4c      	ldr	r3, [pc, #304]	@ (81086ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810857a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810857c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8108580:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8108582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108584:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8108588:	d055      	beq.n	8108636 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 810858a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810858c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8108590:	f200 8096 	bhi.w	81086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8108594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108596:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810859a:	f000 8084 	beq.w	81086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 810859e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81085a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81085a4:	f200 808c 	bhi.w	81086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81085a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81085aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81085ae:	d030      	beq.n	8108612 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 81085b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81085b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81085b6:	f200 8083 	bhi.w	81086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81085ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81085bc:	2b00      	cmp	r3, #0
 81085be:	d004      	beq.n	81085ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 81085c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81085c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81085c6:	d012      	beq.n	81085ee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 81085c8:	e07a      	b.n	81086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81085ca:	4b38      	ldr	r3, [pc, #224]	@ (81086ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81085cc:	681b      	ldr	r3, [r3, #0]
 81085ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81085d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81085d6:	d107      	bne.n	81085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81085d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81085dc:	4618      	mov	r0, r3
 81085de:	f000 fe0b 	bl	81091f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81085e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81085e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81085e6:	e340      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81085e8:	2300      	movs	r3, #0
 81085ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81085ec:	e33d      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81085ee:	4b2f      	ldr	r3, [pc, #188]	@ (81086ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81085f0:	681b      	ldr	r3, [r3, #0]
 81085f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81085f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81085fa:	d107      	bne.n	810860c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81085fc:	f107 0318 	add.w	r3, r7, #24
 8108600:	4618      	mov	r0, r3
 8108602:	f000 fb51 	bl	8108ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8108606:	69bb      	ldr	r3, [r7, #24]
 8108608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810860a:	e32e      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810860c:	2300      	movs	r3, #0
 810860e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108610:	e32b      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108612:	4b26      	ldr	r3, [pc, #152]	@ (81086ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8108614:	681b      	ldr	r3, [r3, #0]
 8108616:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810861a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810861e:	d107      	bne.n	8108630 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108620:	f107 030c 	add.w	r3, r7, #12
 8108624:	4618      	mov	r0, r3
 8108626:	f000 fc93 	bl	8108f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810862a:	68fb      	ldr	r3, [r7, #12]
 810862c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810862e:	e31c      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108630:	2300      	movs	r3, #0
 8108632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108634:	e319      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8108636:	4b1d      	ldr	r3, [pc, #116]	@ (81086ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8108638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810863a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810863e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8108640:	4b1a      	ldr	r3, [pc, #104]	@ (81086ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8108642:	681b      	ldr	r3, [r3, #0]
 8108644:	f003 0304 	and.w	r3, r3, #4
 8108648:	2b04      	cmp	r3, #4
 810864a:	d10c      	bne.n	8108666 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 810864c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810864e:	2b00      	cmp	r3, #0
 8108650:	d109      	bne.n	8108666 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108652:	4b16      	ldr	r3, [pc, #88]	@ (81086ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8108654:	681b      	ldr	r3, [r3, #0]
 8108656:	08db      	lsrs	r3, r3, #3
 8108658:	f003 0303 	and.w	r3, r3, #3
 810865c:	4a14      	ldr	r2, [pc, #80]	@ (81086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810865e:	fa22 f303 	lsr.w	r3, r2, r3
 8108662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108664:	e01e      	b.n	81086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108666:	4b11      	ldr	r3, [pc, #68]	@ (81086ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8108668:	681b      	ldr	r3, [r3, #0]
 810866a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810866e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108672:	d106      	bne.n	8108682 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8108674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108676:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810867a:	d102      	bne.n	8108682 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810867c:	4b0d      	ldr	r3, [pc, #52]	@ (81086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810867e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108680:	e010      	b.n	81086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108682:	4b0a      	ldr	r3, [pc, #40]	@ (81086ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8108684:	681b      	ldr	r3, [r3, #0]
 8108686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810868a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810868e:	d106      	bne.n	810869e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8108690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108696:	d102      	bne.n	810869e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8108698:	4b07      	ldr	r3, [pc, #28]	@ (81086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810869a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810869c:	e002      	b.n	81086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810869e:	2300      	movs	r3, #0
 81086a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81086a2:	e2e2      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81086a4:	e2e1      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81086a6:	4b05      	ldr	r3, [pc, #20]	@ (81086bc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81086a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81086aa:	e2de      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81086ac:	58024400 	.word	0x58024400
 81086b0:	03d09000 	.word	0x03d09000
 81086b4:	003d0900 	.word	0x003d0900
 81086b8:	007a1200 	.word	0x007a1200
 81086bc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 81086c0:	2300      	movs	r3, #0
 81086c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81086c4:	e2d1      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 81086c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 81086ca:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 81086ce:	430b      	orrs	r3, r1
 81086d0:	f040 809c 	bne.w	810880c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 81086d4:	4b93      	ldr	r3, [pc, #588]	@ (8108924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81086d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81086d8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 81086dc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81086de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81086e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81086e4:	d054      	beq.n	8108790 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 81086e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81086e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81086ec:	f200 808b 	bhi.w	8108806 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81086f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81086f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81086f6:	f000 8083 	beq.w	8108800 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 81086fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81086fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8108700:	f200 8081 	bhi.w	8108806 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8108704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108706:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810870a:	d02f      	beq.n	810876c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 810870c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810870e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8108712:	d878      	bhi.n	8108806 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8108714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108716:	2b00      	cmp	r3, #0
 8108718:	d004      	beq.n	8108724 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 810871a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810871c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108720:	d012      	beq.n	8108748 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8108722:	e070      	b.n	8108806 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108724:	4b7f      	ldr	r3, [pc, #508]	@ (8108924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108726:	681b      	ldr	r3, [r3, #0]
 8108728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810872c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8108730:	d107      	bne.n	8108742 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108736:	4618      	mov	r0, r3
 8108738:	f000 fd5e 	bl	81091f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810873c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810873e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108740:	e293      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108742:	2300      	movs	r3, #0
 8108744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108746:	e290      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108748:	4b76      	ldr	r3, [pc, #472]	@ (8108924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810874a:	681b      	ldr	r3, [r3, #0]
 810874c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108750:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108754:	d107      	bne.n	8108766 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108756:	f107 0318 	add.w	r3, r7, #24
 810875a:	4618      	mov	r0, r3
 810875c:	f000 faa4 	bl	8108ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8108760:	69bb      	ldr	r3, [r7, #24]
 8108762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108764:	e281      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108766:	2300      	movs	r3, #0
 8108768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810876a:	e27e      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810876c:	4b6d      	ldr	r3, [pc, #436]	@ (8108924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810876e:	681b      	ldr	r3, [r3, #0]
 8108770:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108774:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108778:	d107      	bne.n	810878a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810877a:	f107 030c 	add.w	r3, r7, #12
 810877e:	4618      	mov	r0, r3
 8108780:	f000 fbe6 	bl	8108f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8108784:	68fb      	ldr	r3, [r7, #12]
 8108786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108788:	e26f      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810878a:	2300      	movs	r3, #0
 810878c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810878e:	e26c      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8108790:	4b64      	ldr	r3, [pc, #400]	@ (8108924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108794:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8108798:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810879a:	4b62      	ldr	r3, [pc, #392]	@ (8108924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810879c:	681b      	ldr	r3, [r3, #0]
 810879e:	f003 0304 	and.w	r3, r3, #4
 81087a2:	2b04      	cmp	r3, #4
 81087a4:	d10c      	bne.n	81087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 81087a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81087a8:	2b00      	cmp	r3, #0
 81087aa:	d109      	bne.n	81087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81087ac:	4b5d      	ldr	r3, [pc, #372]	@ (8108924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81087ae:	681b      	ldr	r3, [r3, #0]
 81087b0:	08db      	lsrs	r3, r3, #3
 81087b2:	f003 0303 	and.w	r3, r3, #3
 81087b6:	4a5c      	ldr	r2, [pc, #368]	@ (8108928 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81087b8:	fa22 f303 	lsr.w	r3, r2, r3
 81087bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81087be:	e01e      	b.n	81087fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81087c0:	4b58      	ldr	r3, [pc, #352]	@ (8108924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81087c2:	681b      	ldr	r3, [r3, #0]
 81087c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81087c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81087cc:	d106      	bne.n	81087dc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 81087ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81087d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81087d4:	d102      	bne.n	81087dc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81087d6:	4b55      	ldr	r3, [pc, #340]	@ (810892c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81087d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81087da:	e010      	b.n	81087fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81087dc:	4b51      	ldr	r3, [pc, #324]	@ (8108924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81087de:	681b      	ldr	r3, [r3, #0]
 81087e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81087e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81087e8:	d106      	bne.n	81087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 81087ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81087ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81087f0:	d102      	bne.n	81087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81087f2:	4b4f      	ldr	r3, [pc, #316]	@ (8108930 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81087f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81087f6:	e002      	b.n	81087fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81087f8:	2300      	movs	r3, #0
 81087fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81087fc:	e235      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81087fe:	e234      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8108800:	4b4c      	ldr	r3, [pc, #304]	@ (8108934 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8108802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108804:	e231      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8108806:	2300      	movs	r3, #0
 8108808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810880a:	e22e      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 810880c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108810:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8108814:	430b      	orrs	r3, r1
 8108816:	f040 808f 	bne.w	8108938 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 810881a:	4b42      	ldr	r3, [pc, #264]	@ (8108924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810881c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810881e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8108822:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8108824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108826:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810882a:	d06b      	beq.n	8108904 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 810882c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810882e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8108832:	d874      	bhi.n	810891e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8108834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108836:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810883a:	d056      	beq.n	81088ea <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 810883c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810883e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8108842:	d86c      	bhi.n	810891e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8108844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108846:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810884a:	d03b      	beq.n	81088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 810884c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810884e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8108852:	d864      	bhi.n	810891e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8108854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108856:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810885a:	d021      	beq.n	81088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 810885c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810885e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108862:	d85c      	bhi.n	810891e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8108864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108866:	2b00      	cmp	r3, #0
 8108868:	d004      	beq.n	8108874 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 810886a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810886c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108870:	d004      	beq.n	810887c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8108872:	e054      	b.n	810891e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8108874:	f7fe fa4c 	bl	8106d10 <HAL_RCC_GetPCLK1Freq>
 8108878:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810887a:	e1f6      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810887c:	4b29      	ldr	r3, [pc, #164]	@ (8108924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810887e:	681b      	ldr	r3, [r3, #0]
 8108880:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108884:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108888:	d107      	bne.n	810889a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810888a:	f107 0318 	add.w	r3, r7, #24
 810888e:	4618      	mov	r0, r3
 8108890:	f000 fa0a 	bl	8108ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8108894:	69fb      	ldr	r3, [r7, #28]
 8108896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108898:	e1e7      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810889a:	2300      	movs	r3, #0
 810889c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810889e:	e1e4      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81088a0:	4b20      	ldr	r3, [pc, #128]	@ (8108924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81088a2:	681b      	ldr	r3, [r3, #0]
 81088a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81088a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81088ac:	d107      	bne.n	81088be <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81088ae:	f107 030c 	add.w	r3, r7, #12
 81088b2:	4618      	mov	r0, r3
 81088b4:	f000 fb4c 	bl	8108f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81088b8:	693b      	ldr	r3, [r7, #16]
 81088ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81088bc:	e1d5      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81088be:	2300      	movs	r3, #0
 81088c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81088c2:	e1d2      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81088c4:	4b17      	ldr	r3, [pc, #92]	@ (8108924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81088c6:	681b      	ldr	r3, [r3, #0]
 81088c8:	f003 0304 	and.w	r3, r3, #4
 81088cc:	2b04      	cmp	r3, #4
 81088ce:	d109      	bne.n	81088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81088d0:	4b14      	ldr	r3, [pc, #80]	@ (8108924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81088d2:	681b      	ldr	r3, [r3, #0]
 81088d4:	08db      	lsrs	r3, r3, #3
 81088d6:	f003 0303 	and.w	r3, r3, #3
 81088da:	4a13      	ldr	r2, [pc, #76]	@ (8108928 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81088dc:	fa22 f303 	lsr.w	r3, r2, r3
 81088e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81088e2:	e1c2      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81088e4:	2300      	movs	r3, #0
 81088e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81088e8:	e1bf      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81088ea:	4b0e      	ldr	r3, [pc, #56]	@ (8108924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81088ec:	681b      	ldr	r3, [r3, #0]
 81088ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81088f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81088f6:	d102      	bne.n	81088fe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 81088f8:	4b0c      	ldr	r3, [pc, #48]	@ (810892c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81088fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81088fc:	e1b5      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81088fe:	2300      	movs	r3, #0
 8108900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108902:	e1b2      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8108904:	4b07      	ldr	r3, [pc, #28]	@ (8108924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108906:	681b      	ldr	r3, [r3, #0]
 8108908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810890c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108910:	d102      	bne.n	8108918 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8108912:	4b07      	ldr	r3, [pc, #28]	@ (8108930 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8108914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108916:	e1a8      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108918:	2300      	movs	r3, #0
 810891a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810891c:	e1a5      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810891e:	2300      	movs	r3, #0
 8108920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108922:	e1a2      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108924:	58024400 	.word	0x58024400
 8108928:	03d09000 	.word	0x03d09000
 810892c:	003d0900 	.word	0x003d0900
 8108930:	007a1200 	.word	0x007a1200
 8108934:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8108938:	e9d7 2300 	ldrd	r2, r3, [r7]
 810893c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8108940:	430b      	orrs	r3, r1
 8108942:	d173      	bne.n	8108a2c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8108944:	4b9c      	ldr	r3, [pc, #624]	@ (8108bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108948:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810894c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810894e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108950:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108954:	d02f      	beq.n	81089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8108956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108958:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810895c:	d863      	bhi.n	8108a26 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 810895e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108960:	2b00      	cmp	r3, #0
 8108962:	d004      	beq.n	810896e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8108964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810896a:	d012      	beq.n	8108992 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 810896c:	e05b      	b.n	8108a26 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810896e:	4b92      	ldr	r3, [pc, #584]	@ (8108bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108970:	681b      	ldr	r3, [r3, #0]
 8108972:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108976:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810897a:	d107      	bne.n	810898c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810897c:	f107 0318 	add.w	r3, r7, #24
 8108980:	4618      	mov	r0, r3
 8108982:	f000 f991 	bl	8108ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8108986:	69bb      	ldr	r3, [r7, #24]
 8108988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810898a:	e16e      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810898c:	2300      	movs	r3, #0
 810898e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108990:	e16b      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108992:	4b89      	ldr	r3, [pc, #548]	@ (8108bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108994:	681b      	ldr	r3, [r3, #0]
 8108996:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810899a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810899e:	d107      	bne.n	81089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81089a0:	f107 030c 	add.w	r3, r7, #12
 81089a4:	4618      	mov	r0, r3
 81089a6:	f000 fad3 	bl	8108f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 81089aa:	697b      	ldr	r3, [r7, #20]
 81089ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81089ae:	e15c      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81089b0:	2300      	movs	r3, #0
 81089b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81089b4:	e159      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81089b6:	4b80      	ldr	r3, [pc, #512]	@ (8108bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81089b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81089ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81089be:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81089c0:	4b7d      	ldr	r3, [pc, #500]	@ (8108bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81089c2:	681b      	ldr	r3, [r3, #0]
 81089c4:	f003 0304 	and.w	r3, r3, #4
 81089c8:	2b04      	cmp	r3, #4
 81089ca:	d10c      	bne.n	81089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 81089cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81089ce:	2b00      	cmp	r3, #0
 81089d0:	d109      	bne.n	81089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81089d2:	4b79      	ldr	r3, [pc, #484]	@ (8108bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81089d4:	681b      	ldr	r3, [r3, #0]
 81089d6:	08db      	lsrs	r3, r3, #3
 81089d8:	f003 0303 	and.w	r3, r3, #3
 81089dc:	4a77      	ldr	r2, [pc, #476]	@ (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81089de:	fa22 f303 	lsr.w	r3, r2, r3
 81089e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81089e4:	e01e      	b.n	8108a24 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81089e6:	4b74      	ldr	r3, [pc, #464]	@ (8108bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81089e8:	681b      	ldr	r3, [r3, #0]
 81089ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81089ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81089f2:	d106      	bne.n	8108a02 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 81089f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81089f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81089fa:	d102      	bne.n	8108a02 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81089fc:	4b70      	ldr	r3, [pc, #448]	@ (8108bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81089fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108a00:	e010      	b.n	8108a24 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108a02:	4b6d      	ldr	r3, [pc, #436]	@ (8108bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108a04:	681b      	ldr	r3, [r3, #0]
 8108a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108a0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108a0e:	d106      	bne.n	8108a1e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8108a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108a12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108a16:	d102      	bne.n	8108a1e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8108a18:	4b6a      	ldr	r3, [pc, #424]	@ (8108bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8108a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108a1c:	e002      	b.n	8108a24 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8108a1e:	2300      	movs	r3, #0
 8108a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8108a22:	e122      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108a24:	e121      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8108a26:	2300      	movs	r3, #0
 8108a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108a2a:	e11e      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8108a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108a30:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8108a34:	430b      	orrs	r3, r1
 8108a36:	d133      	bne.n	8108aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8108a38:	4b5f      	ldr	r3, [pc, #380]	@ (8108bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8108a40:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8108a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108a44:	2b00      	cmp	r3, #0
 8108a46:	d004      	beq.n	8108a52 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8108a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108a4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108a4e:	d012      	beq.n	8108a76 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8108a50:	e023      	b.n	8108a9a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108a52:	4b59      	ldr	r3, [pc, #356]	@ (8108bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108a54:	681b      	ldr	r3, [r3, #0]
 8108a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8108a5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8108a5e:	d107      	bne.n	8108a70 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108a60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108a64:	4618      	mov	r0, r3
 8108a66:	f000 fbc7 	bl	81091f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8108a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108a6e:	e0fc      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108a70:	2300      	movs	r3, #0
 8108a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108a74:	e0f9      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108a76:	4b50      	ldr	r3, [pc, #320]	@ (8108bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108a78:	681b      	ldr	r3, [r3, #0]
 8108a7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108a7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108a82:	d107      	bne.n	8108a94 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108a84:	f107 0318 	add.w	r3, r7, #24
 8108a88:	4618      	mov	r0, r3
 8108a8a:	f000 f90d 	bl	8108ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8108a8e:	6a3b      	ldr	r3, [r7, #32]
 8108a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108a92:	e0ea      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108a94:	2300      	movs	r3, #0
 8108a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108a98:	e0e7      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8108a9a:	2300      	movs	r3, #0
 8108a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108a9e:	e0e4      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8108aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108aa4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8108aa8:	430b      	orrs	r3, r1
 8108aaa:	f040 808d 	bne.w	8108bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8108aae:	4b42      	ldr	r3, [pc, #264]	@ (8108bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108ab2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8108ab6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8108ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8108abe:	d06b      	beq.n	8108b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8108ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8108ac6:	d874      	bhi.n	8108bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108ace:	d056      	beq.n	8108b7e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8108ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108ad6:	d86c      	bhi.n	8108bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108ada:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8108ade:	d03b      	beq.n	8108b58 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8108ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108ae2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8108ae6:	d864      	bhi.n	8108bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108aea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108aee:	d021      	beq.n	8108b34 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8108af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108af2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108af6:	d85c      	bhi.n	8108bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108afa:	2b00      	cmp	r3, #0
 8108afc:	d004      	beq.n	8108b08 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8108afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108b00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108b04:	d004      	beq.n	8108b10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8108b06:	e054      	b.n	8108bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8108b08:	f000 f8b8 	bl	8108c7c <HAL_RCCEx_GetD3PCLK1Freq>
 8108b0c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108b0e:	e0ac      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108b10:	4b29      	ldr	r3, [pc, #164]	@ (8108bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108b12:	681b      	ldr	r3, [r3, #0]
 8108b14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108b18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108b1c:	d107      	bne.n	8108b2e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108b1e:	f107 0318 	add.w	r3, r7, #24
 8108b22:	4618      	mov	r0, r3
 8108b24:	f000 f8c0 	bl	8108ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8108b28:	69fb      	ldr	r3, [r7, #28]
 8108b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108b2c:	e09d      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108b2e:	2300      	movs	r3, #0
 8108b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108b32:	e09a      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108b34:	4b20      	ldr	r3, [pc, #128]	@ (8108bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108b36:	681b      	ldr	r3, [r3, #0]
 8108b38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108b3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108b40:	d107      	bne.n	8108b52 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108b42:	f107 030c 	add.w	r3, r7, #12
 8108b46:	4618      	mov	r0, r3
 8108b48:	f000 fa02 	bl	8108f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8108b4c:	693b      	ldr	r3, [r7, #16]
 8108b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108b50:	e08b      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108b52:	2300      	movs	r3, #0
 8108b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108b56:	e088      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8108b58:	4b17      	ldr	r3, [pc, #92]	@ (8108bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108b5a:	681b      	ldr	r3, [r3, #0]
 8108b5c:	f003 0304 	and.w	r3, r3, #4
 8108b60:	2b04      	cmp	r3, #4
 8108b62:	d109      	bne.n	8108b78 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108b64:	4b14      	ldr	r3, [pc, #80]	@ (8108bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108b66:	681b      	ldr	r3, [r3, #0]
 8108b68:	08db      	lsrs	r3, r3, #3
 8108b6a:	f003 0303 	and.w	r3, r3, #3
 8108b6e:	4a13      	ldr	r2, [pc, #76]	@ (8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8108b70:	fa22 f303 	lsr.w	r3, r2, r3
 8108b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108b76:	e078      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108b78:	2300      	movs	r3, #0
 8108b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108b7c:	e075      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8108b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8108bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108b80:	681b      	ldr	r3, [r3, #0]
 8108b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108b8a:	d102      	bne.n	8108b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8108b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8108bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8108b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108b90:	e06b      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108b92:	2300      	movs	r3, #0
 8108b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108b96:	e068      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8108b98:	4b07      	ldr	r3, [pc, #28]	@ (8108bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108b9a:	681b      	ldr	r3, [r3, #0]
 8108b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108ba0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108ba4:	d102      	bne.n	8108bac <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8108ba6:	4b07      	ldr	r3, [pc, #28]	@ (8108bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8108ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108baa:	e05e      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108bac:	2300      	movs	r3, #0
 8108bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108bb0:	e05b      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8108bb2:	2300      	movs	r3, #0
 8108bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108bb6:	e058      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108bb8:	58024400 	.word	0x58024400
 8108bbc:	03d09000 	.word	0x03d09000
 8108bc0:	003d0900 	.word	0x003d0900
 8108bc4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8108bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108bcc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8108bd0:	430b      	orrs	r3, r1
 8108bd2:	d148      	bne.n	8108c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8108bd4:	4b27      	ldr	r3, [pc, #156]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108bd8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8108bdc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8108bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108be0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108be4:	d02a      	beq.n	8108c3c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8108be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108be8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108bec:	d838      	bhi.n	8108c60 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8108bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108bf0:	2b00      	cmp	r3, #0
 8108bf2:	d004      	beq.n	8108bfe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8108bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108bf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108bfa:	d00d      	beq.n	8108c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8108bfc:	e030      	b.n	8108c60 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8108bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108c00:	681b      	ldr	r3, [r3, #0]
 8108c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108c06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108c0a:	d102      	bne.n	8108c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8108c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8108c78 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8108c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108c10:	e02b      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108c12:	2300      	movs	r3, #0
 8108c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108c16:	e028      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108c18:	4b16      	ldr	r3, [pc, #88]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108c1a:	681b      	ldr	r3, [r3, #0]
 8108c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8108c20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8108c24:	d107      	bne.n	8108c36 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108c2a:	4618      	mov	r0, r3
 8108c2c:	f000 fae4 	bl	81091f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8108c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108c34:	e019      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108c36:	2300      	movs	r3, #0
 8108c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108c3a:	e016      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108c3e:	681b      	ldr	r3, [r3, #0]
 8108c40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108c44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108c48:	d107      	bne.n	8108c5a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108c4a:	f107 0318 	add.w	r3, r7, #24
 8108c4e:	4618      	mov	r0, r3
 8108c50:	f000 f82a 	bl	8108ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8108c54:	69fb      	ldr	r3, [r7, #28]
 8108c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108c58:	e007      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108c5a:	2300      	movs	r3, #0
 8108c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108c5e:	e004      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8108c60:	2300      	movs	r3, #0
 8108c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108c64:	e001      	b.n	8108c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8108c66:	2300      	movs	r3, #0
 8108c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8108c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8108c6c:	4618      	mov	r0, r3
 8108c6e:	3740      	adds	r7, #64	@ 0x40
 8108c70:	46bd      	mov	sp, r7
 8108c72:	bd80      	pop	{r7, pc}
 8108c74:	58024400 	.word	0x58024400
 8108c78:	007a1200 	.word	0x007a1200

08108c7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8108c7c:	b580      	push	{r7, lr}
 8108c7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8108c80:	f7fe f814 	bl	8106cac <HAL_RCC_GetHCLKFreq>
 8108c84:	4602      	mov	r2, r0
 8108c86:	4b06      	ldr	r3, [pc, #24]	@ (8108ca0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8108c88:	6a1b      	ldr	r3, [r3, #32]
 8108c8a:	091b      	lsrs	r3, r3, #4
 8108c8c:	f003 0307 	and.w	r3, r3, #7
 8108c90:	4904      	ldr	r1, [pc, #16]	@ (8108ca4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8108c92:	5ccb      	ldrb	r3, [r1, r3]
 8108c94:	f003 031f 	and.w	r3, r3, #31
 8108c98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8108c9c:	4618      	mov	r0, r3
 8108c9e:	bd80      	pop	{r7, pc}
 8108ca0:	58024400 	.word	0x58024400
 8108ca4:	081116e0 	.word	0x081116e0

08108ca8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8108ca8:	b480      	push	{r7}
 8108caa:	b089      	sub	sp, #36	@ 0x24
 8108cac:	af00      	add	r7, sp, #0
 8108cae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108cb0:	4ba1      	ldr	r3, [pc, #644]	@ (8108f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108cb4:	f003 0303 	and.w	r3, r3, #3
 8108cb8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8108cba:	4b9f      	ldr	r3, [pc, #636]	@ (8108f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108cbe:	0b1b      	lsrs	r3, r3, #12
 8108cc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108cc4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8108cc6:	4b9c      	ldr	r3, [pc, #624]	@ (8108f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108cca:	091b      	lsrs	r3, r3, #4
 8108ccc:	f003 0301 	and.w	r3, r3, #1
 8108cd0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8108cd2:	4b99      	ldr	r3, [pc, #612]	@ (8108f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108cd6:	08db      	lsrs	r3, r3, #3
 8108cd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108cdc:	693a      	ldr	r2, [r7, #16]
 8108cde:	fb02 f303 	mul.w	r3, r2, r3
 8108ce2:	ee07 3a90 	vmov	s15, r3
 8108ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108cea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8108cee:	697b      	ldr	r3, [r7, #20]
 8108cf0:	2b00      	cmp	r3, #0
 8108cf2:	f000 8111 	beq.w	8108f18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8108cf6:	69bb      	ldr	r3, [r7, #24]
 8108cf8:	2b02      	cmp	r3, #2
 8108cfa:	f000 8083 	beq.w	8108e04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8108cfe:	69bb      	ldr	r3, [r7, #24]
 8108d00:	2b02      	cmp	r3, #2
 8108d02:	f200 80a1 	bhi.w	8108e48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8108d06:	69bb      	ldr	r3, [r7, #24]
 8108d08:	2b00      	cmp	r3, #0
 8108d0a:	d003      	beq.n	8108d14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8108d0c:	69bb      	ldr	r3, [r7, #24]
 8108d0e:	2b01      	cmp	r3, #1
 8108d10:	d056      	beq.n	8108dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8108d12:	e099      	b.n	8108e48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108d14:	4b88      	ldr	r3, [pc, #544]	@ (8108f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108d16:	681b      	ldr	r3, [r3, #0]
 8108d18:	f003 0320 	and.w	r3, r3, #32
 8108d1c:	2b00      	cmp	r3, #0
 8108d1e:	d02d      	beq.n	8108d7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108d20:	4b85      	ldr	r3, [pc, #532]	@ (8108f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108d22:	681b      	ldr	r3, [r3, #0]
 8108d24:	08db      	lsrs	r3, r3, #3
 8108d26:	f003 0303 	and.w	r3, r3, #3
 8108d2a:	4a84      	ldr	r2, [pc, #528]	@ (8108f3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8108d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8108d30:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108d32:	68bb      	ldr	r3, [r7, #8]
 8108d34:	ee07 3a90 	vmov	s15, r3
 8108d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108d3c:	697b      	ldr	r3, [r7, #20]
 8108d3e:	ee07 3a90 	vmov	s15, r3
 8108d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108d4a:	4b7b      	ldr	r3, [pc, #492]	@ (8108f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108d52:	ee07 3a90 	vmov	s15, r3
 8108d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8108d5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8108f40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108d76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8108d7a:	e087      	b.n	8108e8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108d7c:	697b      	ldr	r3, [r7, #20]
 8108d7e:	ee07 3a90 	vmov	s15, r3
 8108d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108d86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8108f44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8108d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108d8e:	4b6a      	ldr	r3, [pc, #424]	@ (8108f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108d96:	ee07 3a90 	vmov	s15, r3
 8108d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108da2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8108f40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108dbe:	e065      	b.n	8108e8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108dc0:	697b      	ldr	r3, [r7, #20]
 8108dc2:	ee07 3a90 	vmov	s15, r3
 8108dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108dca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8108f48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8108dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108dd2:	4b59      	ldr	r3, [pc, #356]	@ (8108f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108dda:	ee07 3a90 	vmov	s15, r3
 8108dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8108de6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8108f40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108e02:	e043      	b.n	8108e8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108e04:	697b      	ldr	r3, [r7, #20]
 8108e06:	ee07 3a90 	vmov	s15, r3
 8108e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108e0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8108f4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8108e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108e16:	4b48      	ldr	r3, [pc, #288]	@ (8108f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108e1e:	ee07 3a90 	vmov	s15, r3
 8108e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8108e2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8108f40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108e42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108e46:	e021      	b.n	8108e8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108e48:	697b      	ldr	r3, [r7, #20]
 8108e4a:	ee07 3a90 	vmov	s15, r3
 8108e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108e52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8108f48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8108e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108e5a:	4b37      	ldr	r3, [pc, #220]	@ (8108f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108e62:	ee07 3a90 	vmov	s15, r3
 8108e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8108e6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8108f40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108e8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8108e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8108f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108e90:	0a5b      	lsrs	r3, r3, #9
 8108e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108e96:	ee07 3a90 	vmov	s15, r3
 8108e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108e9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108ea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108ea6:	edd7 6a07 	vldr	s13, [r7, #28]
 8108eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108eb2:	ee17 2a90 	vmov	r2, s15
 8108eb6:	687b      	ldr	r3, [r7, #4]
 8108eb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8108eba:	4b1f      	ldr	r3, [pc, #124]	@ (8108f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108ebe:	0c1b      	lsrs	r3, r3, #16
 8108ec0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108ec4:	ee07 3a90 	vmov	s15, r3
 8108ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108ecc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108ed0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108ed4:	edd7 6a07 	vldr	s13, [r7, #28]
 8108ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108ee0:	ee17 2a90 	vmov	r2, s15
 8108ee4:	687b      	ldr	r3, [r7, #4]
 8108ee6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8108ee8:	4b13      	ldr	r3, [pc, #76]	@ (8108f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108eec:	0e1b      	lsrs	r3, r3, #24
 8108eee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108ef2:	ee07 3a90 	vmov	s15, r3
 8108ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108efa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108efe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108f02:	edd7 6a07 	vldr	s13, [r7, #28]
 8108f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108f0e:	ee17 2a90 	vmov	r2, s15
 8108f12:	687b      	ldr	r3, [r7, #4]
 8108f14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8108f16:	e008      	b.n	8108f2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8108f18:	687b      	ldr	r3, [r7, #4]
 8108f1a:	2200      	movs	r2, #0
 8108f1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8108f1e:	687b      	ldr	r3, [r7, #4]
 8108f20:	2200      	movs	r2, #0
 8108f22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8108f24:	687b      	ldr	r3, [r7, #4]
 8108f26:	2200      	movs	r2, #0
 8108f28:	609a      	str	r2, [r3, #8]
}
 8108f2a:	bf00      	nop
 8108f2c:	3724      	adds	r7, #36	@ 0x24
 8108f2e:	46bd      	mov	sp, r7
 8108f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f34:	4770      	bx	lr
 8108f36:	bf00      	nop
 8108f38:	58024400 	.word	0x58024400
 8108f3c:	03d09000 	.word	0x03d09000
 8108f40:	46000000 	.word	0x46000000
 8108f44:	4c742400 	.word	0x4c742400
 8108f48:	4a742400 	.word	0x4a742400
 8108f4c:	4af42400 	.word	0x4af42400

08108f50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8108f50:	b480      	push	{r7}
 8108f52:	b089      	sub	sp, #36	@ 0x24
 8108f54:	af00      	add	r7, sp, #0
 8108f56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108f58:	4ba1      	ldr	r3, [pc, #644]	@ (81091e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108f5c:	f003 0303 	and.w	r3, r3, #3
 8108f60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8108f62:	4b9f      	ldr	r3, [pc, #636]	@ (81091e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108f66:	0d1b      	lsrs	r3, r3, #20
 8108f68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108f6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8108f6e:	4b9c      	ldr	r3, [pc, #624]	@ (81091e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108f72:	0a1b      	lsrs	r3, r3, #8
 8108f74:	f003 0301 	and.w	r3, r3, #1
 8108f78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8108f7a:	4b99      	ldr	r3, [pc, #612]	@ (81091e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108f7e:	08db      	lsrs	r3, r3, #3
 8108f80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108f84:	693a      	ldr	r2, [r7, #16]
 8108f86:	fb02 f303 	mul.w	r3, r2, r3
 8108f8a:	ee07 3a90 	vmov	s15, r3
 8108f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108f92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8108f96:	697b      	ldr	r3, [r7, #20]
 8108f98:	2b00      	cmp	r3, #0
 8108f9a:	f000 8111 	beq.w	81091c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8108f9e:	69bb      	ldr	r3, [r7, #24]
 8108fa0:	2b02      	cmp	r3, #2
 8108fa2:	f000 8083 	beq.w	81090ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8108fa6:	69bb      	ldr	r3, [r7, #24]
 8108fa8:	2b02      	cmp	r3, #2
 8108faa:	f200 80a1 	bhi.w	81090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8108fae:	69bb      	ldr	r3, [r7, #24]
 8108fb0:	2b00      	cmp	r3, #0
 8108fb2:	d003      	beq.n	8108fbc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8108fb4:	69bb      	ldr	r3, [r7, #24]
 8108fb6:	2b01      	cmp	r3, #1
 8108fb8:	d056      	beq.n	8109068 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8108fba:	e099      	b.n	81090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108fbc:	4b88      	ldr	r3, [pc, #544]	@ (81091e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108fbe:	681b      	ldr	r3, [r3, #0]
 8108fc0:	f003 0320 	and.w	r3, r3, #32
 8108fc4:	2b00      	cmp	r3, #0
 8108fc6:	d02d      	beq.n	8109024 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108fc8:	4b85      	ldr	r3, [pc, #532]	@ (81091e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108fca:	681b      	ldr	r3, [r3, #0]
 8108fcc:	08db      	lsrs	r3, r3, #3
 8108fce:	f003 0303 	and.w	r3, r3, #3
 8108fd2:	4a84      	ldr	r2, [pc, #528]	@ (81091e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8108fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8108fd8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108fda:	68bb      	ldr	r3, [r7, #8]
 8108fdc:	ee07 3a90 	vmov	s15, r3
 8108fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108fe4:	697b      	ldr	r3, [r7, #20]
 8108fe6:	ee07 3a90 	vmov	s15, r3
 8108fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108ff2:	4b7b      	ldr	r3, [pc, #492]	@ (81091e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108ffa:	ee07 3a90 	vmov	s15, r3
 8108ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109002:	ed97 6a03 	vldr	s12, [r7, #12]
 8109006:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810900a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810900e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810901a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810901e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8109022:	e087      	b.n	8109134 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8109024:	697b      	ldr	r3, [r7, #20]
 8109026:	ee07 3a90 	vmov	s15, r3
 810902a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810902e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81091ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8109032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109036:	4b6a      	ldr	r3, [pc, #424]	@ (81091e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810903a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810903e:	ee07 3a90 	vmov	s15, r3
 8109042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109046:	ed97 6a03 	vldr	s12, [r7, #12]
 810904a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810904e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810905a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810905e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109066:	e065      	b.n	8109134 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8109068:	697b      	ldr	r3, [r7, #20]
 810906a:	ee07 3a90 	vmov	s15, r3
 810906e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109072:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81091f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8109076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810907a:	4b59      	ldr	r3, [pc, #356]	@ (81091e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810907c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810907e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109082:	ee07 3a90 	vmov	s15, r3
 8109086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810908a:	ed97 6a03 	vldr	s12, [r7, #12]
 810908e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810909a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810909e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81090a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81090a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81090aa:	e043      	b.n	8109134 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81090ac:	697b      	ldr	r3, [r7, #20]
 81090ae:	ee07 3a90 	vmov	s15, r3
 81090b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81090b6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81091f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81090ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81090be:	4b48      	ldr	r3, [pc, #288]	@ (81091e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81090c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81090c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81090c6:	ee07 3a90 	vmov	s15, r3
 81090ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81090ce:	ed97 6a03 	vldr	s12, [r7, #12]
 81090d2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81090d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81090da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81090de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81090e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81090e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81090ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81090ee:	e021      	b.n	8109134 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81090f0:	697b      	ldr	r3, [r7, #20]
 81090f2:	ee07 3a90 	vmov	s15, r3
 81090f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81090fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81091f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81090fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109102:	4b37      	ldr	r3, [pc, #220]	@ (81091e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810910a:	ee07 3a90 	vmov	s15, r3
 810910e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109112:	ed97 6a03 	vldr	s12, [r7, #12]
 8109116:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810911a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810911e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810912a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810912e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109132:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8109134:	4b2a      	ldr	r3, [pc, #168]	@ (81091e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109138:	0a5b      	lsrs	r3, r3, #9
 810913a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810913e:	ee07 3a90 	vmov	s15, r3
 8109142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109146:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810914a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810914e:	edd7 6a07 	vldr	s13, [r7, #28]
 8109152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810915a:	ee17 2a90 	vmov	r2, s15
 810915e:	687b      	ldr	r3, [r7, #4]
 8109160:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8109162:	4b1f      	ldr	r3, [pc, #124]	@ (81091e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109166:	0c1b      	lsrs	r3, r3, #16
 8109168:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810916c:	ee07 3a90 	vmov	s15, r3
 8109170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109174:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8109178:	ee37 7a87 	vadd.f32	s14, s15, s14
 810917c:	edd7 6a07 	vldr	s13, [r7, #28]
 8109180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109188:	ee17 2a90 	vmov	r2, s15
 810918c:	687b      	ldr	r3, [r7, #4]
 810918e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8109190:	4b13      	ldr	r3, [pc, #76]	@ (81091e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109194:	0e1b      	lsrs	r3, r3, #24
 8109196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810919a:	ee07 3a90 	vmov	s15, r3
 810919e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81091a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81091a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81091aa:	edd7 6a07 	vldr	s13, [r7, #28]
 81091ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81091b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81091b6:	ee17 2a90 	vmov	r2, s15
 81091ba:	687b      	ldr	r3, [r7, #4]
 81091bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81091be:	e008      	b.n	81091d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81091c0:	687b      	ldr	r3, [r7, #4]
 81091c2:	2200      	movs	r2, #0
 81091c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81091c6:	687b      	ldr	r3, [r7, #4]
 81091c8:	2200      	movs	r2, #0
 81091ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81091cc:	687b      	ldr	r3, [r7, #4]
 81091ce:	2200      	movs	r2, #0
 81091d0:	609a      	str	r2, [r3, #8]
}
 81091d2:	bf00      	nop
 81091d4:	3724      	adds	r7, #36	@ 0x24
 81091d6:	46bd      	mov	sp, r7
 81091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091dc:	4770      	bx	lr
 81091de:	bf00      	nop
 81091e0:	58024400 	.word	0x58024400
 81091e4:	03d09000 	.word	0x03d09000
 81091e8:	46000000 	.word	0x46000000
 81091ec:	4c742400 	.word	0x4c742400
 81091f0:	4a742400 	.word	0x4a742400
 81091f4:	4af42400 	.word	0x4af42400

081091f8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 81091f8:	b480      	push	{r7}
 81091fa:	b089      	sub	sp, #36	@ 0x24
 81091fc:	af00      	add	r7, sp, #0
 81091fe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109200:	4ba0      	ldr	r3, [pc, #640]	@ (8109484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8109202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109204:	f003 0303 	and.w	r3, r3, #3
 8109208:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 810920a:	4b9e      	ldr	r3, [pc, #632]	@ (8109484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810920c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810920e:	091b      	lsrs	r3, r3, #4
 8109210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8109214:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8109216:	4b9b      	ldr	r3, [pc, #620]	@ (8109484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8109218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810921a:	f003 0301 	and.w	r3, r3, #1
 810921e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8109220:	4b98      	ldr	r3, [pc, #608]	@ (8109484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8109222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109224:	08db      	lsrs	r3, r3, #3
 8109226:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810922a:	693a      	ldr	r2, [r7, #16]
 810922c:	fb02 f303 	mul.w	r3, r2, r3
 8109230:	ee07 3a90 	vmov	s15, r3
 8109234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109238:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 810923c:	697b      	ldr	r3, [r7, #20]
 810923e:	2b00      	cmp	r3, #0
 8109240:	f000 8111 	beq.w	8109466 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8109244:	69bb      	ldr	r3, [r7, #24]
 8109246:	2b02      	cmp	r3, #2
 8109248:	f000 8083 	beq.w	8109352 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 810924c:	69bb      	ldr	r3, [r7, #24]
 810924e:	2b02      	cmp	r3, #2
 8109250:	f200 80a1 	bhi.w	8109396 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8109254:	69bb      	ldr	r3, [r7, #24]
 8109256:	2b00      	cmp	r3, #0
 8109258:	d003      	beq.n	8109262 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 810925a:	69bb      	ldr	r3, [r7, #24]
 810925c:	2b01      	cmp	r3, #1
 810925e:	d056      	beq.n	810930e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8109260:	e099      	b.n	8109396 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109262:	4b88      	ldr	r3, [pc, #544]	@ (8109484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8109264:	681b      	ldr	r3, [r3, #0]
 8109266:	f003 0320 	and.w	r3, r3, #32
 810926a:	2b00      	cmp	r3, #0
 810926c:	d02d      	beq.n	81092ca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810926e:	4b85      	ldr	r3, [pc, #532]	@ (8109484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8109270:	681b      	ldr	r3, [r3, #0]
 8109272:	08db      	lsrs	r3, r3, #3
 8109274:	f003 0303 	and.w	r3, r3, #3
 8109278:	4a83      	ldr	r2, [pc, #524]	@ (8109488 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 810927a:	fa22 f303 	lsr.w	r3, r2, r3
 810927e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8109280:	68bb      	ldr	r3, [r7, #8]
 8109282:	ee07 3a90 	vmov	s15, r3
 8109286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810928a:	697b      	ldr	r3, [r7, #20]
 810928c:	ee07 3a90 	vmov	s15, r3
 8109290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109298:	4b7a      	ldr	r3, [pc, #488]	@ (8109484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810929a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810929c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81092a0:	ee07 3a90 	vmov	s15, r3
 81092a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81092a8:	ed97 6a03 	vldr	s12, [r7, #12]
 81092ac:	eddf 5a77 	vldr	s11, [pc, #476]	@ 810948c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81092b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81092b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81092b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81092bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81092c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81092c4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81092c8:	e087      	b.n	81093da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81092ca:	697b      	ldr	r3, [r7, #20]
 81092cc:	ee07 3a90 	vmov	s15, r3
 81092d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81092d4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8109490 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81092d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81092dc:	4b69      	ldr	r3, [pc, #420]	@ (8109484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81092de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81092e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81092e4:	ee07 3a90 	vmov	s15, r3
 81092e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81092ec:	ed97 6a03 	vldr	s12, [r7, #12]
 81092f0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 810948c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81092f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81092f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81092fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109300:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109308:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810930c:	e065      	b.n	81093da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810930e:	697b      	ldr	r3, [r7, #20]
 8109310:	ee07 3a90 	vmov	s15, r3
 8109314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109318:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8109494 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 810931c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109320:	4b58      	ldr	r3, [pc, #352]	@ (8109484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8109322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8109324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109328:	ee07 3a90 	vmov	s15, r3
 810932c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109330:	ed97 6a03 	vldr	s12, [r7, #12]
 8109334:	eddf 5a55 	vldr	s11, [pc, #340]	@ 810948c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8109338:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810933c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109340:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109344:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109348:	ee67 7a27 	vmul.f32	s15, s14, s15
 810934c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109350:	e043      	b.n	81093da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8109352:	697b      	ldr	r3, [r7, #20]
 8109354:	ee07 3a90 	vmov	s15, r3
 8109358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810935c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8109498 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8109360:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109364:	4b47      	ldr	r3, [pc, #284]	@ (8109484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8109366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8109368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810936c:	ee07 3a90 	vmov	s15, r3
 8109370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109374:	ed97 6a03 	vldr	s12, [r7, #12]
 8109378:	eddf 5a44 	vldr	s11, [pc, #272]	@ 810948c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810937c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109380:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109384:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109388:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810938c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109390:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109394:	e021      	b.n	81093da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8109396:	697b      	ldr	r3, [r7, #20]
 8109398:	ee07 3a90 	vmov	s15, r3
 810939c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81093a0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8109490 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81093a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81093a8:	4b36      	ldr	r3, [pc, #216]	@ (8109484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81093aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81093ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81093b0:	ee07 3a90 	vmov	s15, r3
 81093b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81093b8:	ed97 6a03 	vldr	s12, [r7, #12]
 81093bc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 810948c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81093c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81093c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81093c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81093cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81093d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81093d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81093d8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 81093da:	4b2a      	ldr	r3, [pc, #168]	@ (8109484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81093dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81093de:	0a5b      	lsrs	r3, r3, #9
 81093e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81093e4:	ee07 3a90 	vmov	s15, r3
 81093e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81093ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81093f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81093f4:	edd7 6a07 	vldr	s13, [r7, #28]
 81093f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81093fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109400:	ee17 2a90 	vmov	r2, s15
 8109404:	687b      	ldr	r3, [r7, #4]
 8109406:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8109408:	4b1e      	ldr	r3, [pc, #120]	@ (8109484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810940a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810940c:	0c1b      	lsrs	r3, r3, #16
 810940e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109412:	ee07 3a90 	vmov	s15, r3
 8109416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810941a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810941e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109422:	edd7 6a07 	vldr	s13, [r7, #28]
 8109426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810942a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810942e:	ee17 2a90 	vmov	r2, s15
 8109432:	687b      	ldr	r3, [r7, #4]
 8109434:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8109436:	4b13      	ldr	r3, [pc, #76]	@ (8109484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8109438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810943a:	0e1b      	lsrs	r3, r3, #24
 810943c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109440:	ee07 3a90 	vmov	s15, r3
 8109444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109448:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810944c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109450:	edd7 6a07 	vldr	s13, [r7, #28]
 8109454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810945c:	ee17 2a90 	vmov	r2, s15
 8109460:	687b      	ldr	r3, [r7, #4]
 8109462:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8109464:	e008      	b.n	8109478 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8109466:	687b      	ldr	r3, [r7, #4]
 8109468:	2200      	movs	r2, #0
 810946a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 810946c:	687b      	ldr	r3, [r7, #4]
 810946e:	2200      	movs	r2, #0
 8109470:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8109472:	687b      	ldr	r3, [r7, #4]
 8109474:	2200      	movs	r2, #0
 8109476:	609a      	str	r2, [r3, #8]
}
 8109478:	bf00      	nop
 810947a:	3724      	adds	r7, #36	@ 0x24
 810947c:	46bd      	mov	sp, r7
 810947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109482:	4770      	bx	lr
 8109484:	58024400 	.word	0x58024400
 8109488:	03d09000 	.word	0x03d09000
 810948c:	46000000 	.word	0x46000000
 8109490:	4c742400 	.word	0x4c742400
 8109494:	4a742400 	.word	0x4a742400
 8109498:	4af42400 	.word	0x4af42400

0810949c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810949c:	b580      	push	{r7, lr}
 810949e:	b084      	sub	sp, #16
 81094a0:	af00      	add	r7, sp, #0
 81094a2:	6078      	str	r0, [r7, #4]
 81094a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81094a6:	2300      	movs	r3, #0
 81094a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81094aa:	4b54      	ldr	r3, [pc, #336]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 81094ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81094ae:	f003 0303 	and.w	r3, r3, #3
 81094b2:	2b03      	cmp	r3, #3
 81094b4:	d101      	bne.n	81094ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81094b6:	2301      	movs	r3, #1
 81094b8:	e09b      	b.n	81095f2 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81094ba:	4b50      	ldr	r3, [pc, #320]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 81094bc:	681b      	ldr	r3, [r3, #0]
 81094be:	4a4f      	ldr	r2, [pc, #316]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 81094c0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 81094c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81094c6:	f7fa fbaf 	bl	8103c28 <HAL_GetTick>
 81094ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81094cc:	e008      	b.n	81094e0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81094ce:	f7fa fbab 	bl	8103c28 <HAL_GetTick>
 81094d2:	4602      	mov	r2, r0
 81094d4:	68bb      	ldr	r3, [r7, #8]
 81094d6:	1ad3      	subs	r3, r2, r3
 81094d8:	2b02      	cmp	r3, #2
 81094da:	d901      	bls.n	81094e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81094dc:	2303      	movs	r3, #3
 81094de:	e088      	b.n	81095f2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81094e0:	4b46      	ldr	r3, [pc, #280]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 81094e2:	681b      	ldr	r3, [r3, #0]
 81094e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81094e8:	2b00      	cmp	r3, #0
 81094ea:	d1f0      	bne.n	81094ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81094ec:	4b43      	ldr	r3, [pc, #268]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 81094ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81094f0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 81094f4:	687b      	ldr	r3, [r7, #4]
 81094f6:	681b      	ldr	r3, [r3, #0]
 81094f8:	031b      	lsls	r3, r3, #12
 81094fa:	4940      	ldr	r1, [pc, #256]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 81094fc:	4313      	orrs	r3, r2
 81094fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8109500:	687b      	ldr	r3, [r7, #4]
 8109502:	685b      	ldr	r3, [r3, #4]
 8109504:	3b01      	subs	r3, #1
 8109506:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810950a:	687b      	ldr	r3, [r7, #4]
 810950c:	689b      	ldr	r3, [r3, #8]
 810950e:	3b01      	subs	r3, #1
 8109510:	025b      	lsls	r3, r3, #9
 8109512:	b29b      	uxth	r3, r3
 8109514:	431a      	orrs	r2, r3
 8109516:	687b      	ldr	r3, [r7, #4]
 8109518:	68db      	ldr	r3, [r3, #12]
 810951a:	3b01      	subs	r3, #1
 810951c:	041b      	lsls	r3, r3, #16
 810951e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8109522:	431a      	orrs	r2, r3
 8109524:	687b      	ldr	r3, [r7, #4]
 8109526:	691b      	ldr	r3, [r3, #16]
 8109528:	3b01      	subs	r3, #1
 810952a:	061b      	lsls	r3, r3, #24
 810952c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8109530:	4932      	ldr	r1, [pc, #200]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 8109532:	4313      	orrs	r3, r2
 8109534:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8109536:	4b31      	ldr	r3, [pc, #196]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 8109538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810953a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810953e:	687b      	ldr	r3, [r7, #4]
 8109540:	695b      	ldr	r3, [r3, #20]
 8109542:	492e      	ldr	r1, [pc, #184]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 8109544:	4313      	orrs	r3, r2
 8109546:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8109548:	4b2c      	ldr	r3, [pc, #176]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 810954a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810954c:	f023 0220 	bic.w	r2, r3, #32
 8109550:	687b      	ldr	r3, [r7, #4]
 8109552:	699b      	ldr	r3, [r3, #24]
 8109554:	4929      	ldr	r1, [pc, #164]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 8109556:	4313      	orrs	r3, r2
 8109558:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810955a:	4b28      	ldr	r3, [pc, #160]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 810955c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810955e:	4a27      	ldr	r2, [pc, #156]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 8109560:	f023 0310 	bic.w	r3, r3, #16
 8109564:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8109566:	4b25      	ldr	r3, [pc, #148]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 8109568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810956a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810956e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8109572:	687a      	ldr	r2, [r7, #4]
 8109574:	69d2      	ldr	r2, [r2, #28]
 8109576:	00d2      	lsls	r2, r2, #3
 8109578:	4920      	ldr	r1, [pc, #128]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 810957a:	4313      	orrs	r3, r2
 810957c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810957e:	4b1f      	ldr	r3, [pc, #124]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 8109580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109582:	4a1e      	ldr	r2, [pc, #120]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 8109584:	f043 0310 	orr.w	r3, r3, #16
 8109588:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810958a:	683b      	ldr	r3, [r7, #0]
 810958c:	2b00      	cmp	r3, #0
 810958e:	d106      	bne.n	810959e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8109590:	4b1a      	ldr	r3, [pc, #104]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 8109592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109594:	4a19      	ldr	r2, [pc, #100]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 8109596:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810959a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810959c:	e00f      	b.n	81095be <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810959e:	683b      	ldr	r3, [r7, #0]
 81095a0:	2b01      	cmp	r3, #1
 81095a2:	d106      	bne.n	81095b2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81095a4:	4b15      	ldr	r3, [pc, #84]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 81095a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81095a8:	4a14      	ldr	r2, [pc, #80]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 81095aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81095ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81095b0:	e005      	b.n	81095be <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81095b2:	4b12      	ldr	r3, [pc, #72]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 81095b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81095b6:	4a11      	ldr	r2, [pc, #68]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 81095b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81095bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81095be:	4b0f      	ldr	r3, [pc, #60]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 81095c0:	681b      	ldr	r3, [r3, #0]
 81095c2:	4a0e      	ldr	r2, [pc, #56]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 81095c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81095c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81095ca:	f7fa fb2d 	bl	8103c28 <HAL_GetTick>
 81095ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81095d0:	e008      	b.n	81095e4 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81095d2:	f7fa fb29 	bl	8103c28 <HAL_GetTick>
 81095d6:	4602      	mov	r2, r0
 81095d8:	68bb      	ldr	r3, [r7, #8]
 81095da:	1ad3      	subs	r3, r2, r3
 81095dc:	2b02      	cmp	r3, #2
 81095de:	d901      	bls.n	81095e4 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81095e0:	2303      	movs	r3, #3
 81095e2:	e006      	b.n	81095f2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81095e4:	4b05      	ldr	r3, [pc, #20]	@ (81095fc <RCCEx_PLL2_Config+0x160>)
 81095e6:	681b      	ldr	r3, [r3, #0]
 81095e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81095ec:	2b00      	cmp	r3, #0
 81095ee:	d0f0      	beq.n	81095d2 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81095f0:	7bfb      	ldrb	r3, [r7, #15]
}
 81095f2:	4618      	mov	r0, r3
 81095f4:	3710      	adds	r7, #16
 81095f6:	46bd      	mov	sp, r7
 81095f8:	bd80      	pop	{r7, pc}
 81095fa:	bf00      	nop
 81095fc:	58024400 	.word	0x58024400

08109600 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8109600:	b580      	push	{r7, lr}
 8109602:	b084      	sub	sp, #16
 8109604:	af00      	add	r7, sp, #0
 8109606:	6078      	str	r0, [r7, #4]
 8109608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810960a:	2300      	movs	r3, #0
 810960c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810960e:	4b54      	ldr	r3, [pc, #336]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 8109610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109612:	f003 0303 	and.w	r3, r3, #3
 8109616:	2b03      	cmp	r3, #3
 8109618:	d101      	bne.n	810961e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810961a:	2301      	movs	r3, #1
 810961c:	e09b      	b.n	8109756 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810961e:	4b50      	ldr	r3, [pc, #320]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 8109620:	681b      	ldr	r3, [r3, #0]
 8109622:	4a4f      	ldr	r2, [pc, #316]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 8109624:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8109628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810962a:	f7fa fafd 	bl	8103c28 <HAL_GetTick>
 810962e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8109630:	e008      	b.n	8109644 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8109632:	f7fa faf9 	bl	8103c28 <HAL_GetTick>
 8109636:	4602      	mov	r2, r0
 8109638:	68bb      	ldr	r3, [r7, #8]
 810963a:	1ad3      	subs	r3, r2, r3
 810963c:	2b02      	cmp	r3, #2
 810963e:	d901      	bls.n	8109644 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8109640:	2303      	movs	r3, #3
 8109642:	e088      	b.n	8109756 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8109644:	4b46      	ldr	r3, [pc, #280]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 8109646:	681b      	ldr	r3, [r3, #0]
 8109648:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810964c:	2b00      	cmp	r3, #0
 810964e:	d1f0      	bne.n	8109632 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8109650:	4b43      	ldr	r3, [pc, #268]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 8109652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109654:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8109658:	687b      	ldr	r3, [r7, #4]
 810965a:	681b      	ldr	r3, [r3, #0]
 810965c:	051b      	lsls	r3, r3, #20
 810965e:	4940      	ldr	r1, [pc, #256]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 8109660:	4313      	orrs	r3, r2
 8109662:	628b      	str	r3, [r1, #40]	@ 0x28
 8109664:	687b      	ldr	r3, [r7, #4]
 8109666:	685b      	ldr	r3, [r3, #4]
 8109668:	3b01      	subs	r3, #1
 810966a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810966e:	687b      	ldr	r3, [r7, #4]
 8109670:	689b      	ldr	r3, [r3, #8]
 8109672:	3b01      	subs	r3, #1
 8109674:	025b      	lsls	r3, r3, #9
 8109676:	b29b      	uxth	r3, r3
 8109678:	431a      	orrs	r2, r3
 810967a:	687b      	ldr	r3, [r7, #4]
 810967c:	68db      	ldr	r3, [r3, #12]
 810967e:	3b01      	subs	r3, #1
 8109680:	041b      	lsls	r3, r3, #16
 8109682:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8109686:	431a      	orrs	r2, r3
 8109688:	687b      	ldr	r3, [r7, #4]
 810968a:	691b      	ldr	r3, [r3, #16]
 810968c:	3b01      	subs	r3, #1
 810968e:	061b      	lsls	r3, r3, #24
 8109690:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8109694:	4932      	ldr	r1, [pc, #200]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 8109696:	4313      	orrs	r3, r2
 8109698:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810969a:	4b31      	ldr	r3, [pc, #196]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 810969c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810969e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 81096a2:	687b      	ldr	r3, [r7, #4]
 81096a4:	695b      	ldr	r3, [r3, #20]
 81096a6:	492e      	ldr	r1, [pc, #184]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 81096a8:	4313      	orrs	r3, r2
 81096aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81096ac:	4b2c      	ldr	r3, [pc, #176]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 81096ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81096b0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 81096b4:	687b      	ldr	r3, [r7, #4]
 81096b6:	699b      	ldr	r3, [r3, #24]
 81096b8:	4929      	ldr	r1, [pc, #164]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 81096ba:	4313      	orrs	r3, r2
 81096bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81096be:	4b28      	ldr	r3, [pc, #160]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 81096c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81096c2:	4a27      	ldr	r2, [pc, #156]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 81096c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81096c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81096ca:	4b25      	ldr	r3, [pc, #148]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 81096cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81096ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81096d2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81096d6:	687a      	ldr	r2, [r7, #4]
 81096d8:	69d2      	ldr	r2, [r2, #28]
 81096da:	00d2      	lsls	r2, r2, #3
 81096dc:	4920      	ldr	r1, [pc, #128]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 81096de:	4313      	orrs	r3, r2
 81096e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81096e2:	4b1f      	ldr	r3, [pc, #124]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 81096e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81096e6:	4a1e      	ldr	r2, [pc, #120]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 81096e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81096ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81096ee:	683b      	ldr	r3, [r7, #0]
 81096f0:	2b00      	cmp	r3, #0
 81096f2:	d106      	bne.n	8109702 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81096f4:	4b1a      	ldr	r3, [pc, #104]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 81096f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81096f8:	4a19      	ldr	r2, [pc, #100]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 81096fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81096fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8109700:	e00f      	b.n	8109722 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8109702:	683b      	ldr	r3, [r7, #0]
 8109704:	2b01      	cmp	r3, #1
 8109706:	d106      	bne.n	8109716 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8109708:	4b15      	ldr	r3, [pc, #84]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 810970a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810970c:	4a14      	ldr	r2, [pc, #80]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 810970e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8109712:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8109714:	e005      	b.n	8109722 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8109716:	4b12      	ldr	r3, [pc, #72]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 8109718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810971a:	4a11      	ldr	r2, [pc, #68]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 810971c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8109720:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8109722:	4b0f      	ldr	r3, [pc, #60]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 8109724:	681b      	ldr	r3, [r3, #0]
 8109726:	4a0e      	ldr	r2, [pc, #56]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 8109728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810972c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810972e:	f7fa fa7b 	bl	8103c28 <HAL_GetTick>
 8109732:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8109734:	e008      	b.n	8109748 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8109736:	f7fa fa77 	bl	8103c28 <HAL_GetTick>
 810973a:	4602      	mov	r2, r0
 810973c:	68bb      	ldr	r3, [r7, #8]
 810973e:	1ad3      	subs	r3, r2, r3
 8109740:	2b02      	cmp	r3, #2
 8109742:	d901      	bls.n	8109748 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8109744:	2303      	movs	r3, #3
 8109746:	e006      	b.n	8109756 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8109748:	4b05      	ldr	r3, [pc, #20]	@ (8109760 <RCCEx_PLL3_Config+0x160>)
 810974a:	681b      	ldr	r3, [r3, #0]
 810974c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109750:	2b00      	cmp	r3, #0
 8109752:	d0f0      	beq.n	8109736 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8109754:	7bfb      	ldrb	r3, [r7, #15]
}
 8109756:	4618      	mov	r0, r3
 8109758:	3710      	adds	r7, #16
 810975a:	46bd      	mov	sp, r7
 810975c:	bd80      	pop	{r7, pc}
 810975e:	bf00      	nop
 8109760:	58024400 	.word	0x58024400

08109764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8109764:	b580      	push	{r7, lr}
 8109766:	b082      	sub	sp, #8
 8109768:	af00      	add	r7, sp, #0
 810976a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810976c:	687b      	ldr	r3, [r7, #4]
 810976e:	2b00      	cmp	r3, #0
 8109770:	d101      	bne.n	8109776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8109772:	2301      	movs	r3, #1
 8109774:	e049      	b.n	810980a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8109776:	687b      	ldr	r3, [r7, #4]
 8109778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810977c:	b2db      	uxtb	r3, r3
 810977e:	2b00      	cmp	r3, #0
 8109780:	d106      	bne.n	8109790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8109782:	687b      	ldr	r3, [r7, #4]
 8109784:	2200      	movs	r2, #0
 8109786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810978a:	6878      	ldr	r0, [r7, #4]
 810978c:	f7f9 fec6 	bl	810351c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109790:	687b      	ldr	r3, [r7, #4]
 8109792:	2202      	movs	r2, #2
 8109794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8109798:	687b      	ldr	r3, [r7, #4]
 810979a:	681a      	ldr	r2, [r3, #0]
 810979c:	687b      	ldr	r3, [r7, #4]
 810979e:	3304      	adds	r3, #4
 81097a0:	4619      	mov	r1, r3
 81097a2:	4610      	mov	r0, r2
 81097a4:	f000 fe70 	bl	810a488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81097a8:	687b      	ldr	r3, [r7, #4]
 81097aa:	2201      	movs	r2, #1
 81097ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81097b0:	687b      	ldr	r3, [r7, #4]
 81097b2:	2201      	movs	r2, #1
 81097b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 81097b8:	687b      	ldr	r3, [r7, #4]
 81097ba:	2201      	movs	r2, #1
 81097bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 81097c0:	687b      	ldr	r3, [r7, #4]
 81097c2:	2201      	movs	r2, #1
 81097c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 81097c8:	687b      	ldr	r3, [r7, #4]
 81097ca:	2201      	movs	r2, #1
 81097cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 81097d0:	687b      	ldr	r3, [r7, #4]
 81097d2:	2201      	movs	r2, #1
 81097d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 81097d8:	687b      	ldr	r3, [r7, #4]
 81097da:	2201      	movs	r2, #1
 81097dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81097e0:	687b      	ldr	r3, [r7, #4]
 81097e2:	2201      	movs	r2, #1
 81097e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81097e8:	687b      	ldr	r3, [r7, #4]
 81097ea:	2201      	movs	r2, #1
 81097ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81097f0:	687b      	ldr	r3, [r7, #4]
 81097f2:	2201      	movs	r2, #1
 81097f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 81097f8:	687b      	ldr	r3, [r7, #4]
 81097fa:	2201      	movs	r2, #1
 81097fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8109800:	687b      	ldr	r3, [r7, #4]
 8109802:	2201      	movs	r2, #1
 8109804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8109808:	2300      	movs	r3, #0
}
 810980a:	4618      	mov	r0, r3
 810980c:	3708      	adds	r7, #8
 810980e:	46bd      	mov	sp, r7
 8109810:	bd80      	pop	{r7, pc}
	...

08109814 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8109814:	b480      	push	{r7}
 8109816:	b085      	sub	sp, #20
 8109818:	af00      	add	r7, sp, #0
 810981a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810981c:	687b      	ldr	r3, [r7, #4]
 810981e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8109822:	b2db      	uxtb	r3, r3
 8109824:	2b01      	cmp	r3, #1
 8109826:	d001      	beq.n	810982c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8109828:	2301      	movs	r3, #1
 810982a:	e04c      	b.n	81098c6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810982c:	687b      	ldr	r3, [r7, #4]
 810982e:	2202      	movs	r2, #2
 8109830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8109834:	687b      	ldr	r3, [r7, #4]
 8109836:	681b      	ldr	r3, [r3, #0]
 8109838:	4a26      	ldr	r2, [pc, #152]	@ (81098d4 <HAL_TIM_Base_Start+0xc0>)
 810983a:	4293      	cmp	r3, r2
 810983c:	d022      	beq.n	8109884 <HAL_TIM_Base_Start+0x70>
 810983e:	687b      	ldr	r3, [r7, #4]
 8109840:	681b      	ldr	r3, [r3, #0]
 8109842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109846:	d01d      	beq.n	8109884 <HAL_TIM_Base_Start+0x70>
 8109848:	687b      	ldr	r3, [r7, #4]
 810984a:	681b      	ldr	r3, [r3, #0]
 810984c:	4a22      	ldr	r2, [pc, #136]	@ (81098d8 <HAL_TIM_Base_Start+0xc4>)
 810984e:	4293      	cmp	r3, r2
 8109850:	d018      	beq.n	8109884 <HAL_TIM_Base_Start+0x70>
 8109852:	687b      	ldr	r3, [r7, #4]
 8109854:	681b      	ldr	r3, [r3, #0]
 8109856:	4a21      	ldr	r2, [pc, #132]	@ (81098dc <HAL_TIM_Base_Start+0xc8>)
 8109858:	4293      	cmp	r3, r2
 810985a:	d013      	beq.n	8109884 <HAL_TIM_Base_Start+0x70>
 810985c:	687b      	ldr	r3, [r7, #4]
 810985e:	681b      	ldr	r3, [r3, #0]
 8109860:	4a1f      	ldr	r2, [pc, #124]	@ (81098e0 <HAL_TIM_Base_Start+0xcc>)
 8109862:	4293      	cmp	r3, r2
 8109864:	d00e      	beq.n	8109884 <HAL_TIM_Base_Start+0x70>
 8109866:	687b      	ldr	r3, [r7, #4]
 8109868:	681b      	ldr	r3, [r3, #0]
 810986a:	4a1e      	ldr	r2, [pc, #120]	@ (81098e4 <HAL_TIM_Base_Start+0xd0>)
 810986c:	4293      	cmp	r3, r2
 810986e:	d009      	beq.n	8109884 <HAL_TIM_Base_Start+0x70>
 8109870:	687b      	ldr	r3, [r7, #4]
 8109872:	681b      	ldr	r3, [r3, #0]
 8109874:	4a1c      	ldr	r2, [pc, #112]	@ (81098e8 <HAL_TIM_Base_Start+0xd4>)
 8109876:	4293      	cmp	r3, r2
 8109878:	d004      	beq.n	8109884 <HAL_TIM_Base_Start+0x70>
 810987a:	687b      	ldr	r3, [r7, #4]
 810987c:	681b      	ldr	r3, [r3, #0]
 810987e:	4a1b      	ldr	r2, [pc, #108]	@ (81098ec <HAL_TIM_Base_Start+0xd8>)
 8109880:	4293      	cmp	r3, r2
 8109882:	d115      	bne.n	81098b0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8109884:	687b      	ldr	r3, [r7, #4]
 8109886:	681b      	ldr	r3, [r3, #0]
 8109888:	689a      	ldr	r2, [r3, #8]
 810988a:	4b19      	ldr	r3, [pc, #100]	@ (81098f0 <HAL_TIM_Base_Start+0xdc>)
 810988c:	4013      	ands	r3, r2
 810988e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109890:	68fb      	ldr	r3, [r7, #12]
 8109892:	2b06      	cmp	r3, #6
 8109894:	d015      	beq.n	81098c2 <HAL_TIM_Base_Start+0xae>
 8109896:	68fb      	ldr	r3, [r7, #12]
 8109898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810989c:	d011      	beq.n	81098c2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 810989e:	687b      	ldr	r3, [r7, #4]
 81098a0:	681b      	ldr	r3, [r3, #0]
 81098a2:	681a      	ldr	r2, [r3, #0]
 81098a4:	687b      	ldr	r3, [r7, #4]
 81098a6:	681b      	ldr	r3, [r3, #0]
 81098a8:	f042 0201 	orr.w	r2, r2, #1
 81098ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81098ae:	e008      	b.n	81098c2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81098b0:	687b      	ldr	r3, [r7, #4]
 81098b2:	681b      	ldr	r3, [r3, #0]
 81098b4:	681a      	ldr	r2, [r3, #0]
 81098b6:	687b      	ldr	r3, [r7, #4]
 81098b8:	681b      	ldr	r3, [r3, #0]
 81098ba:	f042 0201 	orr.w	r2, r2, #1
 81098be:	601a      	str	r2, [r3, #0]
 81098c0:	e000      	b.n	81098c4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81098c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81098c4:	2300      	movs	r3, #0
}
 81098c6:	4618      	mov	r0, r3
 81098c8:	3714      	adds	r7, #20
 81098ca:	46bd      	mov	sp, r7
 81098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098d0:	4770      	bx	lr
 81098d2:	bf00      	nop
 81098d4:	40010000 	.word	0x40010000
 81098d8:	40000400 	.word	0x40000400
 81098dc:	40000800 	.word	0x40000800
 81098e0:	40000c00 	.word	0x40000c00
 81098e4:	40010400 	.word	0x40010400
 81098e8:	40001800 	.word	0x40001800
 81098ec:	40014000 	.word	0x40014000
 81098f0:	00010007 	.word	0x00010007

081098f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81098f4:	b480      	push	{r7}
 81098f6:	b085      	sub	sp, #20
 81098f8:	af00      	add	r7, sp, #0
 81098fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81098fc:	687b      	ldr	r3, [r7, #4]
 81098fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8109902:	b2db      	uxtb	r3, r3
 8109904:	2b01      	cmp	r3, #1
 8109906:	d001      	beq.n	810990c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8109908:	2301      	movs	r3, #1
 810990a:	e054      	b.n	81099b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810990c:	687b      	ldr	r3, [r7, #4]
 810990e:	2202      	movs	r2, #2
 8109910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8109914:	687b      	ldr	r3, [r7, #4]
 8109916:	681b      	ldr	r3, [r3, #0]
 8109918:	68da      	ldr	r2, [r3, #12]
 810991a:	687b      	ldr	r3, [r7, #4]
 810991c:	681b      	ldr	r3, [r3, #0]
 810991e:	f042 0201 	orr.w	r2, r2, #1
 8109922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8109924:	687b      	ldr	r3, [r7, #4]
 8109926:	681b      	ldr	r3, [r3, #0]
 8109928:	4a26      	ldr	r2, [pc, #152]	@ (81099c4 <HAL_TIM_Base_Start_IT+0xd0>)
 810992a:	4293      	cmp	r3, r2
 810992c:	d022      	beq.n	8109974 <HAL_TIM_Base_Start_IT+0x80>
 810992e:	687b      	ldr	r3, [r7, #4]
 8109930:	681b      	ldr	r3, [r3, #0]
 8109932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109936:	d01d      	beq.n	8109974 <HAL_TIM_Base_Start_IT+0x80>
 8109938:	687b      	ldr	r3, [r7, #4]
 810993a:	681b      	ldr	r3, [r3, #0]
 810993c:	4a22      	ldr	r2, [pc, #136]	@ (81099c8 <HAL_TIM_Base_Start_IT+0xd4>)
 810993e:	4293      	cmp	r3, r2
 8109940:	d018      	beq.n	8109974 <HAL_TIM_Base_Start_IT+0x80>
 8109942:	687b      	ldr	r3, [r7, #4]
 8109944:	681b      	ldr	r3, [r3, #0]
 8109946:	4a21      	ldr	r2, [pc, #132]	@ (81099cc <HAL_TIM_Base_Start_IT+0xd8>)
 8109948:	4293      	cmp	r3, r2
 810994a:	d013      	beq.n	8109974 <HAL_TIM_Base_Start_IT+0x80>
 810994c:	687b      	ldr	r3, [r7, #4]
 810994e:	681b      	ldr	r3, [r3, #0]
 8109950:	4a1f      	ldr	r2, [pc, #124]	@ (81099d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8109952:	4293      	cmp	r3, r2
 8109954:	d00e      	beq.n	8109974 <HAL_TIM_Base_Start_IT+0x80>
 8109956:	687b      	ldr	r3, [r7, #4]
 8109958:	681b      	ldr	r3, [r3, #0]
 810995a:	4a1e      	ldr	r2, [pc, #120]	@ (81099d4 <HAL_TIM_Base_Start_IT+0xe0>)
 810995c:	4293      	cmp	r3, r2
 810995e:	d009      	beq.n	8109974 <HAL_TIM_Base_Start_IT+0x80>
 8109960:	687b      	ldr	r3, [r7, #4]
 8109962:	681b      	ldr	r3, [r3, #0]
 8109964:	4a1c      	ldr	r2, [pc, #112]	@ (81099d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8109966:	4293      	cmp	r3, r2
 8109968:	d004      	beq.n	8109974 <HAL_TIM_Base_Start_IT+0x80>
 810996a:	687b      	ldr	r3, [r7, #4]
 810996c:	681b      	ldr	r3, [r3, #0]
 810996e:	4a1b      	ldr	r2, [pc, #108]	@ (81099dc <HAL_TIM_Base_Start_IT+0xe8>)
 8109970:	4293      	cmp	r3, r2
 8109972:	d115      	bne.n	81099a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8109974:	687b      	ldr	r3, [r7, #4]
 8109976:	681b      	ldr	r3, [r3, #0]
 8109978:	689a      	ldr	r2, [r3, #8]
 810997a:	4b19      	ldr	r3, [pc, #100]	@ (81099e0 <HAL_TIM_Base_Start_IT+0xec>)
 810997c:	4013      	ands	r3, r2
 810997e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109980:	68fb      	ldr	r3, [r7, #12]
 8109982:	2b06      	cmp	r3, #6
 8109984:	d015      	beq.n	81099b2 <HAL_TIM_Base_Start_IT+0xbe>
 8109986:	68fb      	ldr	r3, [r7, #12]
 8109988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810998c:	d011      	beq.n	81099b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810998e:	687b      	ldr	r3, [r7, #4]
 8109990:	681b      	ldr	r3, [r3, #0]
 8109992:	681a      	ldr	r2, [r3, #0]
 8109994:	687b      	ldr	r3, [r7, #4]
 8109996:	681b      	ldr	r3, [r3, #0]
 8109998:	f042 0201 	orr.w	r2, r2, #1
 810999c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810999e:	e008      	b.n	81099b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81099a0:	687b      	ldr	r3, [r7, #4]
 81099a2:	681b      	ldr	r3, [r3, #0]
 81099a4:	681a      	ldr	r2, [r3, #0]
 81099a6:	687b      	ldr	r3, [r7, #4]
 81099a8:	681b      	ldr	r3, [r3, #0]
 81099aa:	f042 0201 	orr.w	r2, r2, #1
 81099ae:	601a      	str	r2, [r3, #0]
 81099b0:	e000      	b.n	81099b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81099b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81099b4:	2300      	movs	r3, #0
}
 81099b6:	4618      	mov	r0, r3
 81099b8:	3714      	adds	r7, #20
 81099ba:	46bd      	mov	sp, r7
 81099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81099c0:	4770      	bx	lr
 81099c2:	bf00      	nop
 81099c4:	40010000 	.word	0x40010000
 81099c8:	40000400 	.word	0x40000400
 81099cc:	40000800 	.word	0x40000800
 81099d0:	40000c00 	.word	0x40000c00
 81099d4:	40010400 	.word	0x40010400
 81099d8:	40001800 	.word	0x40001800
 81099dc:	40014000 	.word	0x40014000
 81099e0:	00010007 	.word	0x00010007

081099e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 81099e4:	b580      	push	{r7, lr}
 81099e6:	b082      	sub	sp, #8
 81099e8:	af00      	add	r7, sp, #0
 81099ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81099ec:	687b      	ldr	r3, [r7, #4]
 81099ee:	2b00      	cmp	r3, #0
 81099f0:	d101      	bne.n	81099f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 81099f2:	2301      	movs	r3, #1
 81099f4:	e049      	b.n	8109a8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81099f6:	687b      	ldr	r3, [r7, #4]
 81099f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81099fc:	b2db      	uxtb	r3, r3
 81099fe:	2b00      	cmp	r3, #0
 8109a00:	d106      	bne.n	8109a10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8109a02:	687b      	ldr	r3, [r7, #4]
 8109a04:	2200      	movs	r2, #0
 8109a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8109a0a:	6878      	ldr	r0, [r7, #4]
 8109a0c:	f000 f841 	bl	8109a92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109a10:	687b      	ldr	r3, [r7, #4]
 8109a12:	2202      	movs	r2, #2
 8109a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8109a18:	687b      	ldr	r3, [r7, #4]
 8109a1a:	681a      	ldr	r2, [r3, #0]
 8109a1c:	687b      	ldr	r3, [r7, #4]
 8109a1e:	3304      	adds	r3, #4
 8109a20:	4619      	mov	r1, r3
 8109a22:	4610      	mov	r0, r2
 8109a24:	f000 fd30 	bl	810a488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8109a28:	687b      	ldr	r3, [r7, #4]
 8109a2a:	2201      	movs	r2, #1
 8109a2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109a30:	687b      	ldr	r3, [r7, #4]
 8109a32:	2201      	movs	r2, #1
 8109a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8109a38:	687b      	ldr	r3, [r7, #4]
 8109a3a:	2201      	movs	r2, #1
 8109a3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8109a40:	687b      	ldr	r3, [r7, #4]
 8109a42:	2201      	movs	r2, #1
 8109a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8109a48:	687b      	ldr	r3, [r7, #4]
 8109a4a:	2201      	movs	r2, #1
 8109a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8109a50:	687b      	ldr	r3, [r7, #4]
 8109a52:	2201      	movs	r2, #1
 8109a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8109a58:	687b      	ldr	r3, [r7, #4]
 8109a5a:	2201      	movs	r2, #1
 8109a5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109a60:	687b      	ldr	r3, [r7, #4]
 8109a62:	2201      	movs	r2, #1
 8109a64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8109a68:	687b      	ldr	r3, [r7, #4]
 8109a6a:	2201      	movs	r2, #1
 8109a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8109a70:	687b      	ldr	r3, [r7, #4]
 8109a72:	2201      	movs	r2, #1
 8109a74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8109a78:	687b      	ldr	r3, [r7, #4]
 8109a7a:	2201      	movs	r2, #1
 8109a7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8109a80:	687b      	ldr	r3, [r7, #4]
 8109a82:	2201      	movs	r2, #1
 8109a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8109a88:	2300      	movs	r3, #0
}
 8109a8a:	4618      	mov	r0, r3
 8109a8c:	3708      	adds	r7, #8
 8109a8e:	46bd      	mov	sp, r7
 8109a90:	bd80      	pop	{r7, pc}

08109a92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8109a92:	b480      	push	{r7}
 8109a94:	b083      	sub	sp, #12
 8109a96:	af00      	add	r7, sp, #0
 8109a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8109a9a:	bf00      	nop
 8109a9c:	370c      	adds	r7, #12
 8109a9e:	46bd      	mov	sp, r7
 8109aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109aa4:	4770      	bx	lr
	...

08109aa8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8109aa8:	b580      	push	{r7, lr}
 8109aaa:	b084      	sub	sp, #16
 8109aac:	af00      	add	r7, sp, #0
 8109aae:	6078      	str	r0, [r7, #4]
 8109ab0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8109ab2:	683b      	ldr	r3, [r7, #0]
 8109ab4:	2b00      	cmp	r3, #0
 8109ab6:	d109      	bne.n	8109acc <HAL_TIM_PWM_Start+0x24>
 8109ab8:	687b      	ldr	r3, [r7, #4]
 8109aba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8109abe:	b2db      	uxtb	r3, r3
 8109ac0:	2b01      	cmp	r3, #1
 8109ac2:	bf14      	ite	ne
 8109ac4:	2301      	movne	r3, #1
 8109ac6:	2300      	moveq	r3, #0
 8109ac8:	b2db      	uxtb	r3, r3
 8109aca:	e03c      	b.n	8109b46 <HAL_TIM_PWM_Start+0x9e>
 8109acc:	683b      	ldr	r3, [r7, #0]
 8109ace:	2b04      	cmp	r3, #4
 8109ad0:	d109      	bne.n	8109ae6 <HAL_TIM_PWM_Start+0x3e>
 8109ad2:	687b      	ldr	r3, [r7, #4]
 8109ad4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8109ad8:	b2db      	uxtb	r3, r3
 8109ada:	2b01      	cmp	r3, #1
 8109adc:	bf14      	ite	ne
 8109ade:	2301      	movne	r3, #1
 8109ae0:	2300      	moveq	r3, #0
 8109ae2:	b2db      	uxtb	r3, r3
 8109ae4:	e02f      	b.n	8109b46 <HAL_TIM_PWM_Start+0x9e>
 8109ae6:	683b      	ldr	r3, [r7, #0]
 8109ae8:	2b08      	cmp	r3, #8
 8109aea:	d109      	bne.n	8109b00 <HAL_TIM_PWM_Start+0x58>
 8109aec:	687b      	ldr	r3, [r7, #4]
 8109aee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8109af2:	b2db      	uxtb	r3, r3
 8109af4:	2b01      	cmp	r3, #1
 8109af6:	bf14      	ite	ne
 8109af8:	2301      	movne	r3, #1
 8109afa:	2300      	moveq	r3, #0
 8109afc:	b2db      	uxtb	r3, r3
 8109afe:	e022      	b.n	8109b46 <HAL_TIM_PWM_Start+0x9e>
 8109b00:	683b      	ldr	r3, [r7, #0]
 8109b02:	2b0c      	cmp	r3, #12
 8109b04:	d109      	bne.n	8109b1a <HAL_TIM_PWM_Start+0x72>
 8109b06:	687b      	ldr	r3, [r7, #4]
 8109b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8109b0c:	b2db      	uxtb	r3, r3
 8109b0e:	2b01      	cmp	r3, #1
 8109b10:	bf14      	ite	ne
 8109b12:	2301      	movne	r3, #1
 8109b14:	2300      	moveq	r3, #0
 8109b16:	b2db      	uxtb	r3, r3
 8109b18:	e015      	b.n	8109b46 <HAL_TIM_PWM_Start+0x9e>
 8109b1a:	683b      	ldr	r3, [r7, #0]
 8109b1c:	2b10      	cmp	r3, #16
 8109b1e:	d109      	bne.n	8109b34 <HAL_TIM_PWM_Start+0x8c>
 8109b20:	687b      	ldr	r3, [r7, #4]
 8109b22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8109b26:	b2db      	uxtb	r3, r3
 8109b28:	2b01      	cmp	r3, #1
 8109b2a:	bf14      	ite	ne
 8109b2c:	2301      	movne	r3, #1
 8109b2e:	2300      	moveq	r3, #0
 8109b30:	b2db      	uxtb	r3, r3
 8109b32:	e008      	b.n	8109b46 <HAL_TIM_PWM_Start+0x9e>
 8109b34:	687b      	ldr	r3, [r7, #4]
 8109b36:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8109b3a:	b2db      	uxtb	r3, r3
 8109b3c:	2b01      	cmp	r3, #1
 8109b3e:	bf14      	ite	ne
 8109b40:	2301      	movne	r3, #1
 8109b42:	2300      	moveq	r3, #0
 8109b44:	b2db      	uxtb	r3, r3
 8109b46:	2b00      	cmp	r3, #0
 8109b48:	d001      	beq.n	8109b4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8109b4a:	2301      	movs	r3, #1
 8109b4c:	e0a1      	b.n	8109c92 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8109b4e:	683b      	ldr	r3, [r7, #0]
 8109b50:	2b00      	cmp	r3, #0
 8109b52:	d104      	bne.n	8109b5e <HAL_TIM_PWM_Start+0xb6>
 8109b54:	687b      	ldr	r3, [r7, #4]
 8109b56:	2202      	movs	r2, #2
 8109b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8109b5c:	e023      	b.n	8109ba6 <HAL_TIM_PWM_Start+0xfe>
 8109b5e:	683b      	ldr	r3, [r7, #0]
 8109b60:	2b04      	cmp	r3, #4
 8109b62:	d104      	bne.n	8109b6e <HAL_TIM_PWM_Start+0xc6>
 8109b64:	687b      	ldr	r3, [r7, #4]
 8109b66:	2202      	movs	r2, #2
 8109b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8109b6c:	e01b      	b.n	8109ba6 <HAL_TIM_PWM_Start+0xfe>
 8109b6e:	683b      	ldr	r3, [r7, #0]
 8109b70:	2b08      	cmp	r3, #8
 8109b72:	d104      	bne.n	8109b7e <HAL_TIM_PWM_Start+0xd6>
 8109b74:	687b      	ldr	r3, [r7, #4]
 8109b76:	2202      	movs	r2, #2
 8109b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8109b7c:	e013      	b.n	8109ba6 <HAL_TIM_PWM_Start+0xfe>
 8109b7e:	683b      	ldr	r3, [r7, #0]
 8109b80:	2b0c      	cmp	r3, #12
 8109b82:	d104      	bne.n	8109b8e <HAL_TIM_PWM_Start+0xe6>
 8109b84:	687b      	ldr	r3, [r7, #4]
 8109b86:	2202      	movs	r2, #2
 8109b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8109b8c:	e00b      	b.n	8109ba6 <HAL_TIM_PWM_Start+0xfe>
 8109b8e:	683b      	ldr	r3, [r7, #0]
 8109b90:	2b10      	cmp	r3, #16
 8109b92:	d104      	bne.n	8109b9e <HAL_TIM_PWM_Start+0xf6>
 8109b94:	687b      	ldr	r3, [r7, #4]
 8109b96:	2202      	movs	r2, #2
 8109b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8109b9c:	e003      	b.n	8109ba6 <HAL_TIM_PWM_Start+0xfe>
 8109b9e:	687b      	ldr	r3, [r7, #4]
 8109ba0:	2202      	movs	r2, #2
 8109ba2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8109ba6:	687b      	ldr	r3, [r7, #4]
 8109ba8:	681b      	ldr	r3, [r3, #0]
 8109baa:	2201      	movs	r2, #1
 8109bac:	6839      	ldr	r1, [r7, #0]
 8109bae:	4618      	mov	r0, r3
 8109bb0:	f001 f882 	bl	810acb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8109bb4:	687b      	ldr	r3, [r7, #4]
 8109bb6:	681b      	ldr	r3, [r3, #0]
 8109bb8:	4a38      	ldr	r2, [pc, #224]	@ (8109c9c <HAL_TIM_PWM_Start+0x1f4>)
 8109bba:	4293      	cmp	r3, r2
 8109bbc:	d013      	beq.n	8109be6 <HAL_TIM_PWM_Start+0x13e>
 8109bbe:	687b      	ldr	r3, [r7, #4]
 8109bc0:	681b      	ldr	r3, [r3, #0]
 8109bc2:	4a37      	ldr	r2, [pc, #220]	@ (8109ca0 <HAL_TIM_PWM_Start+0x1f8>)
 8109bc4:	4293      	cmp	r3, r2
 8109bc6:	d00e      	beq.n	8109be6 <HAL_TIM_PWM_Start+0x13e>
 8109bc8:	687b      	ldr	r3, [r7, #4]
 8109bca:	681b      	ldr	r3, [r3, #0]
 8109bcc:	4a35      	ldr	r2, [pc, #212]	@ (8109ca4 <HAL_TIM_PWM_Start+0x1fc>)
 8109bce:	4293      	cmp	r3, r2
 8109bd0:	d009      	beq.n	8109be6 <HAL_TIM_PWM_Start+0x13e>
 8109bd2:	687b      	ldr	r3, [r7, #4]
 8109bd4:	681b      	ldr	r3, [r3, #0]
 8109bd6:	4a34      	ldr	r2, [pc, #208]	@ (8109ca8 <HAL_TIM_PWM_Start+0x200>)
 8109bd8:	4293      	cmp	r3, r2
 8109bda:	d004      	beq.n	8109be6 <HAL_TIM_PWM_Start+0x13e>
 8109bdc:	687b      	ldr	r3, [r7, #4]
 8109bde:	681b      	ldr	r3, [r3, #0]
 8109be0:	4a32      	ldr	r2, [pc, #200]	@ (8109cac <HAL_TIM_PWM_Start+0x204>)
 8109be2:	4293      	cmp	r3, r2
 8109be4:	d101      	bne.n	8109bea <HAL_TIM_PWM_Start+0x142>
 8109be6:	2301      	movs	r3, #1
 8109be8:	e000      	b.n	8109bec <HAL_TIM_PWM_Start+0x144>
 8109bea:	2300      	movs	r3, #0
 8109bec:	2b00      	cmp	r3, #0
 8109bee:	d007      	beq.n	8109c00 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8109bf0:	687b      	ldr	r3, [r7, #4]
 8109bf2:	681b      	ldr	r3, [r3, #0]
 8109bf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8109bf6:	687b      	ldr	r3, [r7, #4]
 8109bf8:	681b      	ldr	r3, [r3, #0]
 8109bfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8109bfe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8109c00:	687b      	ldr	r3, [r7, #4]
 8109c02:	681b      	ldr	r3, [r3, #0]
 8109c04:	4a25      	ldr	r2, [pc, #148]	@ (8109c9c <HAL_TIM_PWM_Start+0x1f4>)
 8109c06:	4293      	cmp	r3, r2
 8109c08:	d022      	beq.n	8109c50 <HAL_TIM_PWM_Start+0x1a8>
 8109c0a:	687b      	ldr	r3, [r7, #4]
 8109c0c:	681b      	ldr	r3, [r3, #0]
 8109c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109c12:	d01d      	beq.n	8109c50 <HAL_TIM_PWM_Start+0x1a8>
 8109c14:	687b      	ldr	r3, [r7, #4]
 8109c16:	681b      	ldr	r3, [r3, #0]
 8109c18:	4a25      	ldr	r2, [pc, #148]	@ (8109cb0 <HAL_TIM_PWM_Start+0x208>)
 8109c1a:	4293      	cmp	r3, r2
 8109c1c:	d018      	beq.n	8109c50 <HAL_TIM_PWM_Start+0x1a8>
 8109c1e:	687b      	ldr	r3, [r7, #4]
 8109c20:	681b      	ldr	r3, [r3, #0]
 8109c22:	4a24      	ldr	r2, [pc, #144]	@ (8109cb4 <HAL_TIM_PWM_Start+0x20c>)
 8109c24:	4293      	cmp	r3, r2
 8109c26:	d013      	beq.n	8109c50 <HAL_TIM_PWM_Start+0x1a8>
 8109c28:	687b      	ldr	r3, [r7, #4]
 8109c2a:	681b      	ldr	r3, [r3, #0]
 8109c2c:	4a22      	ldr	r2, [pc, #136]	@ (8109cb8 <HAL_TIM_PWM_Start+0x210>)
 8109c2e:	4293      	cmp	r3, r2
 8109c30:	d00e      	beq.n	8109c50 <HAL_TIM_PWM_Start+0x1a8>
 8109c32:	687b      	ldr	r3, [r7, #4]
 8109c34:	681b      	ldr	r3, [r3, #0]
 8109c36:	4a1a      	ldr	r2, [pc, #104]	@ (8109ca0 <HAL_TIM_PWM_Start+0x1f8>)
 8109c38:	4293      	cmp	r3, r2
 8109c3a:	d009      	beq.n	8109c50 <HAL_TIM_PWM_Start+0x1a8>
 8109c3c:	687b      	ldr	r3, [r7, #4]
 8109c3e:	681b      	ldr	r3, [r3, #0]
 8109c40:	4a1e      	ldr	r2, [pc, #120]	@ (8109cbc <HAL_TIM_PWM_Start+0x214>)
 8109c42:	4293      	cmp	r3, r2
 8109c44:	d004      	beq.n	8109c50 <HAL_TIM_PWM_Start+0x1a8>
 8109c46:	687b      	ldr	r3, [r7, #4]
 8109c48:	681b      	ldr	r3, [r3, #0]
 8109c4a:	4a16      	ldr	r2, [pc, #88]	@ (8109ca4 <HAL_TIM_PWM_Start+0x1fc>)
 8109c4c:	4293      	cmp	r3, r2
 8109c4e:	d115      	bne.n	8109c7c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8109c50:	687b      	ldr	r3, [r7, #4]
 8109c52:	681b      	ldr	r3, [r3, #0]
 8109c54:	689a      	ldr	r2, [r3, #8]
 8109c56:	4b1a      	ldr	r3, [pc, #104]	@ (8109cc0 <HAL_TIM_PWM_Start+0x218>)
 8109c58:	4013      	ands	r3, r2
 8109c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109c5c:	68fb      	ldr	r3, [r7, #12]
 8109c5e:	2b06      	cmp	r3, #6
 8109c60:	d015      	beq.n	8109c8e <HAL_TIM_PWM_Start+0x1e6>
 8109c62:	68fb      	ldr	r3, [r7, #12]
 8109c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109c68:	d011      	beq.n	8109c8e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8109c6a:	687b      	ldr	r3, [r7, #4]
 8109c6c:	681b      	ldr	r3, [r3, #0]
 8109c6e:	681a      	ldr	r2, [r3, #0]
 8109c70:	687b      	ldr	r3, [r7, #4]
 8109c72:	681b      	ldr	r3, [r3, #0]
 8109c74:	f042 0201 	orr.w	r2, r2, #1
 8109c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109c7a:	e008      	b.n	8109c8e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8109c7c:	687b      	ldr	r3, [r7, #4]
 8109c7e:	681b      	ldr	r3, [r3, #0]
 8109c80:	681a      	ldr	r2, [r3, #0]
 8109c82:	687b      	ldr	r3, [r7, #4]
 8109c84:	681b      	ldr	r3, [r3, #0]
 8109c86:	f042 0201 	orr.w	r2, r2, #1
 8109c8a:	601a      	str	r2, [r3, #0]
 8109c8c:	e000      	b.n	8109c90 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109c8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8109c90:	2300      	movs	r3, #0
}
 8109c92:	4618      	mov	r0, r3
 8109c94:	3710      	adds	r7, #16
 8109c96:	46bd      	mov	sp, r7
 8109c98:	bd80      	pop	{r7, pc}
 8109c9a:	bf00      	nop
 8109c9c:	40010000 	.word	0x40010000
 8109ca0:	40010400 	.word	0x40010400
 8109ca4:	40014000 	.word	0x40014000
 8109ca8:	40014400 	.word	0x40014400
 8109cac:	40014800 	.word	0x40014800
 8109cb0:	40000400 	.word	0x40000400
 8109cb4:	40000800 	.word	0x40000800
 8109cb8:	40000c00 	.word	0x40000c00
 8109cbc:	40001800 	.word	0x40001800
 8109cc0:	00010007 	.word	0x00010007

08109cc4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8109cc4:	b580      	push	{r7, lr}
 8109cc6:	b086      	sub	sp, #24
 8109cc8:	af00      	add	r7, sp, #0
 8109cca:	6078      	str	r0, [r7, #4]
 8109ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8109cce:	687b      	ldr	r3, [r7, #4]
 8109cd0:	2b00      	cmp	r3, #0
 8109cd2:	d101      	bne.n	8109cd8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8109cd4:	2301      	movs	r3, #1
 8109cd6:	e097      	b.n	8109e08 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8109cd8:	687b      	ldr	r3, [r7, #4]
 8109cda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8109cde:	b2db      	uxtb	r3, r3
 8109ce0:	2b00      	cmp	r3, #0
 8109ce2:	d106      	bne.n	8109cf2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8109ce4:	687b      	ldr	r3, [r7, #4]
 8109ce6:	2200      	movs	r2, #0
 8109ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8109cec:	6878      	ldr	r0, [r7, #4]
 8109cee:	f7f9 fc69 	bl	81035c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109cf2:	687b      	ldr	r3, [r7, #4]
 8109cf4:	2202      	movs	r2, #2
 8109cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8109cfa:	687b      	ldr	r3, [r7, #4]
 8109cfc:	681b      	ldr	r3, [r3, #0]
 8109cfe:	689b      	ldr	r3, [r3, #8]
 8109d00:	687a      	ldr	r2, [r7, #4]
 8109d02:	6812      	ldr	r2, [r2, #0]
 8109d04:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8109d08:	f023 0307 	bic.w	r3, r3, #7
 8109d0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8109d0e:	687b      	ldr	r3, [r7, #4]
 8109d10:	681a      	ldr	r2, [r3, #0]
 8109d12:	687b      	ldr	r3, [r7, #4]
 8109d14:	3304      	adds	r3, #4
 8109d16:	4619      	mov	r1, r3
 8109d18:	4610      	mov	r0, r2
 8109d1a:	f000 fbb5 	bl	810a488 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8109d1e:	687b      	ldr	r3, [r7, #4]
 8109d20:	681b      	ldr	r3, [r3, #0]
 8109d22:	689b      	ldr	r3, [r3, #8]
 8109d24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8109d26:	687b      	ldr	r3, [r7, #4]
 8109d28:	681b      	ldr	r3, [r3, #0]
 8109d2a:	699b      	ldr	r3, [r3, #24]
 8109d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8109d2e:	687b      	ldr	r3, [r7, #4]
 8109d30:	681b      	ldr	r3, [r3, #0]
 8109d32:	6a1b      	ldr	r3, [r3, #32]
 8109d34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8109d36:	683b      	ldr	r3, [r7, #0]
 8109d38:	681b      	ldr	r3, [r3, #0]
 8109d3a:	697a      	ldr	r2, [r7, #20]
 8109d3c:	4313      	orrs	r3, r2
 8109d3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8109d40:	693b      	ldr	r3, [r7, #16]
 8109d42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8109d46:	f023 0303 	bic.w	r3, r3, #3
 8109d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8109d4c:	683b      	ldr	r3, [r7, #0]
 8109d4e:	689a      	ldr	r2, [r3, #8]
 8109d50:	683b      	ldr	r3, [r7, #0]
 8109d52:	699b      	ldr	r3, [r3, #24]
 8109d54:	021b      	lsls	r3, r3, #8
 8109d56:	4313      	orrs	r3, r2
 8109d58:	693a      	ldr	r2, [r7, #16]
 8109d5a:	4313      	orrs	r3, r2
 8109d5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8109d5e:	693b      	ldr	r3, [r7, #16]
 8109d60:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8109d64:	f023 030c 	bic.w	r3, r3, #12
 8109d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8109d6a:	693b      	ldr	r3, [r7, #16]
 8109d6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8109d70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8109d74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8109d76:	683b      	ldr	r3, [r7, #0]
 8109d78:	68da      	ldr	r2, [r3, #12]
 8109d7a:	683b      	ldr	r3, [r7, #0]
 8109d7c:	69db      	ldr	r3, [r3, #28]
 8109d7e:	021b      	lsls	r3, r3, #8
 8109d80:	4313      	orrs	r3, r2
 8109d82:	693a      	ldr	r2, [r7, #16]
 8109d84:	4313      	orrs	r3, r2
 8109d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8109d88:	683b      	ldr	r3, [r7, #0]
 8109d8a:	691b      	ldr	r3, [r3, #16]
 8109d8c:	011a      	lsls	r2, r3, #4
 8109d8e:	683b      	ldr	r3, [r7, #0]
 8109d90:	6a1b      	ldr	r3, [r3, #32]
 8109d92:	031b      	lsls	r3, r3, #12
 8109d94:	4313      	orrs	r3, r2
 8109d96:	693a      	ldr	r2, [r7, #16]
 8109d98:	4313      	orrs	r3, r2
 8109d9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8109d9c:	68fb      	ldr	r3, [r7, #12]
 8109d9e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8109da2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8109da4:	68fb      	ldr	r3, [r7, #12]
 8109da6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8109daa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8109dac:	683b      	ldr	r3, [r7, #0]
 8109dae:	685a      	ldr	r2, [r3, #4]
 8109db0:	683b      	ldr	r3, [r7, #0]
 8109db2:	695b      	ldr	r3, [r3, #20]
 8109db4:	011b      	lsls	r3, r3, #4
 8109db6:	4313      	orrs	r3, r2
 8109db8:	68fa      	ldr	r2, [r7, #12]
 8109dba:	4313      	orrs	r3, r2
 8109dbc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8109dbe:	687b      	ldr	r3, [r7, #4]
 8109dc0:	681b      	ldr	r3, [r3, #0]
 8109dc2:	697a      	ldr	r2, [r7, #20]
 8109dc4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8109dc6:	687b      	ldr	r3, [r7, #4]
 8109dc8:	681b      	ldr	r3, [r3, #0]
 8109dca:	693a      	ldr	r2, [r7, #16]
 8109dcc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8109dce:	687b      	ldr	r3, [r7, #4]
 8109dd0:	681b      	ldr	r3, [r3, #0]
 8109dd2:	68fa      	ldr	r2, [r7, #12]
 8109dd4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8109dd6:	687b      	ldr	r3, [r7, #4]
 8109dd8:	2201      	movs	r2, #1
 8109dda:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8109dde:	687b      	ldr	r3, [r7, #4]
 8109de0:	2201      	movs	r2, #1
 8109de2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8109de6:	687b      	ldr	r3, [r7, #4]
 8109de8:	2201      	movs	r2, #1
 8109dea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8109dee:	687b      	ldr	r3, [r7, #4]
 8109df0:	2201      	movs	r2, #1
 8109df2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8109df6:	687b      	ldr	r3, [r7, #4]
 8109df8:	2201      	movs	r2, #1
 8109dfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8109dfe:	687b      	ldr	r3, [r7, #4]
 8109e00:	2201      	movs	r2, #1
 8109e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8109e06:	2300      	movs	r3, #0
}
 8109e08:	4618      	mov	r0, r3
 8109e0a:	3718      	adds	r7, #24
 8109e0c:	46bd      	mov	sp, r7
 8109e0e:	bd80      	pop	{r7, pc}

08109e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8109e10:	b580      	push	{r7, lr}
 8109e12:	b084      	sub	sp, #16
 8109e14:	af00      	add	r7, sp, #0
 8109e16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8109e18:	687b      	ldr	r3, [r7, #4]
 8109e1a:	681b      	ldr	r3, [r3, #0]
 8109e1c:	68db      	ldr	r3, [r3, #12]
 8109e1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8109e20:	687b      	ldr	r3, [r7, #4]
 8109e22:	681b      	ldr	r3, [r3, #0]
 8109e24:	691b      	ldr	r3, [r3, #16]
 8109e26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8109e28:	68bb      	ldr	r3, [r7, #8]
 8109e2a:	f003 0302 	and.w	r3, r3, #2
 8109e2e:	2b00      	cmp	r3, #0
 8109e30:	d020      	beq.n	8109e74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8109e32:	68fb      	ldr	r3, [r7, #12]
 8109e34:	f003 0302 	and.w	r3, r3, #2
 8109e38:	2b00      	cmp	r3, #0
 8109e3a:	d01b      	beq.n	8109e74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8109e3c:	687b      	ldr	r3, [r7, #4]
 8109e3e:	681b      	ldr	r3, [r3, #0]
 8109e40:	f06f 0202 	mvn.w	r2, #2
 8109e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8109e46:	687b      	ldr	r3, [r7, #4]
 8109e48:	2201      	movs	r2, #1
 8109e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8109e4c:	687b      	ldr	r3, [r7, #4]
 8109e4e:	681b      	ldr	r3, [r3, #0]
 8109e50:	699b      	ldr	r3, [r3, #24]
 8109e52:	f003 0303 	and.w	r3, r3, #3
 8109e56:	2b00      	cmp	r3, #0
 8109e58:	d003      	beq.n	8109e62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8109e5a:	6878      	ldr	r0, [r7, #4]
 8109e5c:	f000 faf6 	bl	810a44c <HAL_TIM_IC_CaptureCallback>
 8109e60:	e005      	b.n	8109e6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8109e62:	6878      	ldr	r0, [r7, #4]
 8109e64:	f000 fae8 	bl	810a438 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109e68:	6878      	ldr	r0, [r7, #4]
 8109e6a:	f000 faf9 	bl	810a460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8109e6e:	687b      	ldr	r3, [r7, #4]
 8109e70:	2200      	movs	r2, #0
 8109e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8109e74:	68bb      	ldr	r3, [r7, #8]
 8109e76:	f003 0304 	and.w	r3, r3, #4
 8109e7a:	2b00      	cmp	r3, #0
 8109e7c:	d020      	beq.n	8109ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8109e7e:	68fb      	ldr	r3, [r7, #12]
 8109e80:	f003 0304 	and.w	r3, r3, #4
 8109e84:	2b00      	cmp	r3, #0
 8109e86:	d01b      	beq.n	8109ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8109e88:	687b      	ldr	r3, [r7, #4]
 8109e8a:	681b      	ldr	r3, [r3, #0]
 8109e8c:	f06f 0204 	mvn.w	r2, #4
 8109e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8109e92:	687b      	ldr	r3, [r7, #4]
 8109e94:	2202      	movs	r2, #2
 8109e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8109e98:	687b      	ldr	r3, [r7, #4]
 8109e9a:	681b      	ldr	r3, [r3, #0]
 8109e9c:	699b      	ldr	r3, [r3, #24]
 8109e9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8109ea2:	2b00      	cmp	r3, #0
 8109ea4:	d003      	beq.n	8109eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8109ea6:	6878      	ldr	r0, [r7, #4]
 8109ea8:	f000 fad0 	bl	810a44c <HAL_TIM_IC_CaptureCallback>
 8109eac:	e005      	b.n	8109eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8109eae:	6878      	ldr	r0, [r7, #4]
 8109eb0:	f000 fac2 	bl	810a438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109eb4:	6878      	ldr	r0, [r7, #4]
 8109eb6:	f000 fad3 	bl	810a460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8109eba:	687b      	ldr	r3, [r7, #4]
 8109ebc:	2200      	movs	r2, #0
 8109ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8109ec0:	68bb      	ldr	r3, [r7, #8]
 8109ec2:	f003 0308 	and.w	r3, r3, #8
 8109ec6:	2b00      	cmp	r3, #0
 8109ec8:	d020      	beq.n	8109f0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8109eca:	68fb      	ldr	r3, [r7, #12]
 8109ecc:	f003 0308 	and.w	r3, r3, #8
 8109ed0:	2b00      	cmp	r3, #0
 8109ed2:	d01b      	beq.n	8109f0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8109ed4:	687b      	ldr	r3, [r7, #4]
 8109ed6:	681b      	ldr	r3, [r3, #0]
 8109ed8:	f06f 0208 	mvn.w	r2, #8
 8109edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8109ede:	687b      	ldr	r3, [r7, #4]
 8109ee0:	2204      	movs	r2, #4
 8109ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8109ee4:	687b      	ldr	r3, [r7, #4]
 8109ee6:	681b      	ldr	r3, [r3, #0]
 8109ee8:	69db      	ldr	r3, [r3, #28]
 8109eea:	f003 0303 	and.w	r3, r3, #3
 8109eee:	2b00      	cmp	r3, #0
 8109ef0:	d003      	beq.n	8109efa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8109ef2:	6878      	ldr	r0, [r7, #4]
 8109ef4:	f000 faaa 	bl	810a44c <HAL_TIM_IC_CaptureCallback>
 8109ef8:	e005      	b.n	8109f06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8109efa:	6878      	ldr	r0, [r7, #4]
 8109efc:	f000 fa9c 	bl	810a438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109f00:	6878      	ldr	r0, [r7, #4]
 8109f02:	f000 faad 	bl	810a460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8109f06:	687b      	ldr	r3, [r7, #4]
 8109f08:	2200      	movs	r2, #0
 8109f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8109f0c:	68bb      	ldr	r3, [r7, #8]
 8109f0e:	f003 0310 	and.w	r3, r3, #16
 8109f12:	2b00      	cmp	r3, #0
 8109f14:	d020      	beq.n	8109f58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8109f16:	68fb      	ldr	r3, [r7, #12]
 8109f18:	f003 0310 	and.w	r3, r3, #16
 8109f1c:	2b00      	cmp	r3, #0
 8109f1e:	d01b      	beq.n	8109f58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8109f20:	687b      	ldr	r3, [r7, #4]
 8109f22:	681b      	ldr	r3, [r3, #0]
 8109f24:	f06f 0210 	mvn.w	r2, #16
 8109f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8109f2a:	687b      	ldr	r3, [r7, #4]
 8109f2c:	2208      	movs	r2, #8
 8109f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8109f30:	687b      	ldr	r3, [r7, #4]
 8109f32:	681b      	ldr	r3, [r3, #0]
 8109f34:	69db      	ldr	r3, [r3, #28]
 8109f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8109f3a:	2b00      	cmp	r3, #0
 8109f3c:	d003      	beq.n	8109f46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8109f3e:	6878      	ldr	r0, [r7, #4]
 8109f40:	f000 fa84 	bl	810a44c <HAL_TIM_IC_CaptureCallback>
 8109f44:	e005      	b.n	8109f52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8109f46:	6878      	ldr	r0, [r7, #4]
 8109f48:	f000 fa76 	bl	810a438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109f4c:	6878      	ldr	r0, [r7, #4]
 8109f4e:	f000 fa87 	bl	810a460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8109f52:	687b      	ldr	r3, [r7, #4]
 8109f54:	2200      	movs	r2, #0
 8109f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8109f58:	68bb      	ldr	r3, [r7, #8]
 8109f5a:	f003 0301 	and.w	r3, r3, #1
 8109f5e:	2b00      	cmp	r3, #0
 8109f60:	d00c      	beq.n	8109f7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8109f62:	68fb      	ldr	r3, [r7, #12]
 8109f64:	f003 0301 	and.w	r3, r3, #1
 8109f68:	2b00      	cmp	r3, #0
 8109f6a:	d007      	beq.n	8109f7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8109f6c:	687b      	ldr	r3, [r7, #4]
 8109f6e:	681b      	ldr	r3, [r3, #0]
 8109f70:	f06f 0201 	mvn.w	r2, #1
 8109f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8109f76:	6878      	ldr	r0, [r7, #4]
 8109f78:	f7f9 f980 	bl	810327c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8109f7c:	68bb      	ldr	r3, [r7, #8]
 8109f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109f82:	2b00      	cmp	r3, #0
 8109f84:	d104      	bne.n	8109f90 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8109f86:	68bb      	ldr	r3, [r7, #8]
 8109f88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8109f8c:	2b00      	cmp	r3, #0
 8109f8e:	d00c      	beq.n	8109faa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8109f90:	68fb      	ldr	r3, [r7, #12]
 8109f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109f96:	2b00      	cmp	r3, #0
 8109f98:	d007      	beq.n	8109faa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8109f9a:	687b      	ldr	r3, [r7, #4]
 8109f9c:	681b      	ldr	r3, [r3, #0]
 8109f9e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8109fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8109fa4:	6878      	ldr	r0, [r7, #4]
 8109fa6:	f000 ffc3 	bl	810af30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8109faa:	68bb      	ldr	r3, [r7, #8]
 8109fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109fb0:	2b00      	cmp	r3, #0
 8109fb2:	d00c      	beq.n	8109fce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8109fb4:	68fb      	ldr	r3, [r7, #12]
 8109fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109fba:	2b00      	cmp	r3, #0
 8109fbc:	d007      	beq.n	8109fce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8109fbe:	687b      	ldr	r3, [r7, #4]
 8109fc0:	681b      	ldr	r3, [r3, #0]
 8109fc2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8109fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8109fc8:	6878      	ldr	r0, [r7, #4]
 8109fca:	f000 ffbb 	bl	810af44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8109fce:	68bb      	ldr	r3, [r7, #8]
 8109fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109fd4:	2b00      	cmp	r3, #0
 8109fd6:	d00c      	beq.n	8109ff2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8109fd8:	68fb      	ldr	r3, [r7, #12]
 8109fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109fde:	2b00      	cmp	r3, #0
 8109fe0:	d007      	beq.n	8109ff2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8109fe2:	687b      	ldr	r3, [r7, #4]
 8109fe4:	681b      	ldr	r3, [r3, #0]
 8109fe6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8109fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8109fec:	6878      	ldr	r0, [r7, #4]
 8109fee:	f000 fa41 	bl	810a474 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8109ff2:	68bb      	ldr	r3, [r7, #8]
 8109ff4:	f003 0320 	and.w	r3, r3, #32
 8109ff8:	2b00      	cmp	r3, #0
 8109ffa:	d00c      	beq.n	810a016 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8109ffc:	68fb      	ldr	r3, [r7, #12]
 8109ffe:	f003 0320 	and.w	r3, r3, #32
 810a002:	2b00      	cmp	r3, #0
 810a004:	d007      	beq.n	810a016 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810a006:	687b      	ldr	r3, [r7, #4]
 810a008:	681b      	ldr	r3, [r3, #0]
 810a00a:	f06f 0220 	mvn.w	r2, #32
 810a00e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810a010:	6878      	ldr	r0, [r7, #4]
 810a012:	f000 ff83 	bl	810af1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810a016:	bf00      	nop
 810a018:	3710      	adds	r7, #16
 810a01a:	46bd      	mov	sp, r7
 810a01c:	bd80      	pop	{r7, pc}
	...

0810a020 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 810a020:	b580      	push	{r7, lr}
 810a022:	b086      	sub	sp, #24
 810a024:	af00      	add	r7, sp, #0
 810a026:	60f8      	str	r0, [r7, #12]
 810a028:	60b9      	str	r1, [r7, #8]
 810a02a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810a02c:	2300      	movs	r3, #0
 810a02e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 810a030:	68fb      	ldr	r3, [r7, #12]
 810a032:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810a036:	2b01      	cmp	r3, #1
 810a038:	d101      	bne.n	810a03e <HAL_TIM_PWM_ConfigChannel+0x1e>
 810a03a:	2302      	movs	r3, #2
 810a03c:	e0ff      	b.n	810a23e <HAL_TIM_PWM_ConfigChannel+0x21e>
 810a03e:	68fb      	ldr	r3, [r7, #12]
 810a040:	2201      	movs	r2, #1
 810a042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 810a046:	687b      	ldr	r3, [r7, #4]
 810a048:	2b14      	cmp	r3, #20
 810a04a:	f200 80f0 	bhi.w	810a22e <HAL_TIM_PWM_ConfigChannel+0x20e>
 810a04e:	a201      	add	r2, pc, #4	@ (adr r2, 810a054 <HAL_TIM_PWM_ConfigChannel+0x34>)
 810a050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a054:	0810a0a9 	.word	0x0810a0a9
 810a058:	0810a22f 	.word	0x0810a22f
 810a05c:	0810a22f 	.word	0x0810a22f
 810a060:	0810a22f 	.word	0x0810a22f
 810a064:	0810a0e9 	.word	0x0810a0e9
 810a068:	0810a22f 	.word	0x0810a22f
 810a06c:	0810a22f 	.word	0x0810a22f
 810a070:	0810a22f 	.word	0x0810a22f
 810a074:	0810a12b 	.word	0x0810a12b
 810a078:	0810a22f 	.word	0x0810a22f
 810a07c:	0810a22f 	.word	0x0810a22f
 810a080:	0810a22f 	.word	0x0810a22f
 810a084:	0810a16b 	.word	0x0810a16b
 810a088:	0810a22f 	.word	0x0810a22f
 810a08c:	0810a22f 	.word	0x0810a22f
 810a090:	0810a22f 	.word	0x0810a22f
 810a094:	0810a1ad 	.word	0x0810a1ad
 810a098:	0810a22f 	.word	0x0810a22f
 810a09c:	0810a22f 	.word	0x0810a22f
 810a0a0:	0810a22f 	.word	0x0810a22f
 810a0a4:	0810a1ed 	.word	0x0810a1ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810a0a8:	68fb      	ldr	r3, [r7, #12]
 810a0aa:	681b      	ldr	r3, [r3, #0]
 810a0ac:	68b9      	ldr	r1, [r7, #8]
 810a0ae:	4618      	mov	r0, r3
 810a0b0:	f000 fa90 	bl	810a5d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810a0b4:	68fb      	ldr	r3, [r7, #12]
 810a0b6:	681b      	ldr	r3, [r3, #0]
 810a0b8:	699a      	ldr	r2, [r3, #24]
 810a0ba:	68fb      	ldr	r3, [r7, #12]
 810a0bc:	681b      	ldr	r3, [r3, #0]
 810a0be:	f042 0208 	orr.w	r2, r2, #8
 810a0c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810a0c4:	68fb      	ldr	r3, [r7, #12]
 810a0c6:	681b      	ldr	r3, [r3, #0]
 810a0c8:	699a      	ldr	r2, [r3, #24]
 810a0ca:	68fb      	ldr	r3, [r7, #12]
 810a0cc:	681b      	ldr	r3, [r3, #0]
 810a0ce:	f022 0204 	bic.w	r2, r2, #4
 810a0d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810a0d4:	68fb      	ldr	r3, [r7, #12]
 810a0d6:	681b      	ldr	r3, [r3, #0]
 810a0d8:	6999      	ldr	r1, [r3, #24]
 810a0da:	68bb      	ldr	r3, [r7, #8]
 810a0dc:	691a      	ldr	r2, [r3, #16]
 810a0de:	68fb      	ldr	r3, [r7, #12]
 810a0e0:	681b      	ldr	r3, [r3, #0]
 810a0e2:	430a      	orrs	r2, r1
 810a0e4:	619a      	str	r2, [r3, #24]
      break;
 810a0e6:	e0a5      	b.n	810a234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810a0e8:	68fb      	ldr	r3, [r7, #12]
 810a0ea:	681b      	ldr	r3, [r3, #0]
 810a0ec:	68b9      	ldr	r1, [r7, #8]
 810a0ee:	4618      	mov	r0, r3
 810a0f0:	f000 fb00 	bl	810a6f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810a0f4:	68fb      	ldr	r3, [r7, #12]
 810a0f6:	681b      	ldr	r3, [r3, #0]
 810a0f8:	699a      	ldr	r2, [r3, #24]
 810a0fa:	68fb      	ldr	r3, [r7, #12]
 810a0fc:	681b      	ldr	r3, [r3, #0]
 810a0fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810a102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810a104:	68fb      	ldr	r3, [r7, #12]
 810a106:	681b      	ldr	r3, [r3, #0]
 810a108:	699a      	ldr	r2, [r3, #24]
 810a10a:	68fb      	ldr	r3, [r7, #12]
 810a10c:	681b      	ldr	r3, [r3, #0]
 810a10e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810a112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810a114:	68fb      	ldr	r3, [r7, #12]
 810a116:	681b      	ldr	r3, [r3, #0]
 810a118:	6999      	ldr	r1, [r3, #24]
 810a11a:	68bb      	ldr	r3, [r7, #8]
 810a11c:	691b      	ldr	r3, [r3, #16]
 810a11e:	021a      	lsls	r2, r3, #8
 810a120:	68fb      	ldr	r3, [r7, #12]
 810a122:	681b      	ldr	r3, [r3, #0]
 810a124:	430a      	orrs	r2, r1
 810a126:	619a      	str	r2, [r3, #24]
      break;
 810a128:	e084      	b.n	810a234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810a12a:	68fb      	ldr	r3, [r7, #12]
 810a12c:	681b      	ldr	r3, [r3, #0]
 810a12e:	68b9      	ldr	r1, [r7, #8]
 810a130:	4618      	mov	r0, r3
 810a132:	f000 fb69 	bl	810a808 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810a136:	68fb      	ldr	r3, [r7, #12]
 810a138:	681b      	ldr	r3, [r3, #0]
 810a13a:	69da      	ldr	r2, [r3, #28]
 810a13c:	68fb      	ldr	r3, [r7, #12]
 810a13e:	681b      	ldr	r3, [r3, #0]
 810a140:	f042 0208 	orr.w	r2, r2, #8
 810a144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810a146:	68fb      	ldr	r3, [r7, #12]
 810a148:	681b      	ldr	r3, [r3, #0]
 810a14a:	69da      	ldr	r2, [r3, #28]
 810a14c:	68fb      	ldr	r3, [r7, #12]
 810a14e:	681b      	ldr	r3, [r3, #0]
 810a150:	f022 0204 	bic.w	r2, r2, #4
 810a154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810a156:	68fb      	ldr	r3, [r7, #12]
 810a158:	681b      	ldr	r3, [r3, #0]
 810a15a:	69d9      	ldr	r1, [r3, #28]
 810a15c:	68bb      	ldr	r3, [r7, #8]
 810a15e:	691a      	ldr	r2, [r3, #16]
 810a160:	68fb      	ldr	r3, [r7, #12]
 810a162:	681b      	ldr	r3, [r3, #0]
 810a164:	430a      	orrs	r2, r1
 810a166:	61da      	str	r2, [r3, #28]
      break;
 810a168:	e064      	b.n	810a234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810a16a:	68fb      	ldr	r3, [r7, #12]
 810a16c:	681b      	ldr	r3, [r3, #0]
 810a16e:	68b9      	ldr	r1, [r7, #8]
 810a170:	4618      	mov	r0, r3
 810a172:	f000 fbd1 	bl	810a918 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810a176:	68fb      	ldr	r3, [r7, #12]
 810a178:	681b      	ldr	r3, [r3, #0]
 810a17a:	69da      	ldr	r2, [r3, #28]
 810a17c:	68fb      	ldr	r3, [r7, #12]
 810a17e:	681b      	ldr	r3, [r3, #0]
 810a180:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810a184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810a186:	68fb      	ldr	r3, [r7, #12]
 810a188:	681b      	ldr	r3, [r3, #0]
 810a18a:	69da      	ldr	r2, [r3, #28]
 810a18c:	68fb      	ldr	r3, [r7, #12]
 810a18e:	681b      	ldr	r3, [r3, #0]
 810a190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810a194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810a196:	68fb      	ldr	r3, [r7, #12]
 810a198:	681b      	ldr	r3, [r3, #0]
 810a19a:	69d9      	ldr	r1, [r3, #28]
 810a19c:	68bb      	ldr	r3, [r7, #8]
 810a19e:	691b      	ldr	r3, [r3, #16]
 810a1a0:	021a      	lsls	r2, r3, #8
 810a1a2:	68fb      	ldr	r3, [r7, #12]
 810a1a4:	681b      	ldr	r3, [r3, #0]
 810a1a6:	430a      	orrs	r2, r1
 810a1a8:	61da      	str	r2, [r3, #28]
      break;
 810a1aa:	e043      	b.n	810a234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810a1ac:	68fb      	ldr	r3, [r7, #12]
 810a1ae:	681b      	ldr	r3, [r3, #0]
 810a1b0:	68b9      	ldr	r1, [r7, #8]
 810a1b2:	4618      	mov	r0, r3
 810a1b4:	f000 fc1a 	bl	810a9ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 810a1b8:	68fb      	ldr	r3, [r7, #12]
 810a1ba:	681b      	ldr	r3, [r3, #0]
 810a1bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810a1be:	68fb      	ldr	r3, [r7, #12]
 810a1c0:	681b      	ldr	r3, [r3, #0]
 810a1c2:	f042 0208 	orr.w	r2, r2, #8
 810a1c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 810a1c8:	68fb      	ldr	r3, [r7, #12]
 810a1ca:	681b      	ldr	r3, [r3, #0]
 810a1cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810a1ce:	68fb      	ldr	r3, [r7, #12]
 810a1d0:	681b      	ldr	r3, [r3, #0]
 810a1d2:	f022 0204 	bic.w	r2, r2, #4
 810a1d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810a1d8:	68fb      	ldr	r3, [r7, #12]
 810a1da:	681b      	ldr	r3, [r3, #0]
 810a1dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810a1de:	68bb      	ldr	r3, [r7, #8]
 810a1e0:	691a      	ldr	r2, [r3, #16]
 810a1e2:	68fb      	ldr	r3, [r7, #12]
 810a1e4:	681b      	ldr	r3, [r3, #0]
 810a1e6:	430a      	orrs	r2, r1
 810a1e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810a1ea:	e023      	b.n	810a234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810a1ec:	68fb      	ldr	r3, [r7, #12]
 810a1ee:	681b      	ldr	r3, [r3, #0]
 810a1f0:	68b9      	ldr	r1, [r7, #8]
 810a1f2:	4618      	mov	r0, r3
 810a1f4:	f000 fc5e 	bl	810aab4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 810a1f8:	68fb      	ldr	r3, [r7, #12]
 810a1fa:	681b      	ldr	r3, [r3, #0]
 810a1fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810a1fe:	68fb      	ldr	r3, [r7, #12]
 810a200:	681b      	ldr	r3, [r3, #0]
 810a202:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810a206:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 810a208:	68fb      	ldr	r3, [r7, #12]
 810a20a:	681b      	ldr	r3, [r3, #0]
 810a20c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810a20e:	68fb      	ldr	r3, [r7, #12]
 810a210:	681b      	ldr	r3, [r3, #0]
 810a212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810a216:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810a218:	68fb      	ldr	r3, [r7, #12]
 810a21a:	681b      	ldr	r3, [r3, #0]
 810a21c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810a21e:	68bb      	ldr	r3, [r7, #8]
 810a220:	691b      	ldr	r3, [r3, #16]
 810a222:	021a      	lsls	r2, r3, #8
 810a224:	68fb      	ldr	r3, [r7, #12]
 810a226:	681b      	ldr	r3, [r3, #0]
 810a228:	430a      	orrs	r2, r1
 810a22a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810a22c:	e002      	b.n	810a234 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810a22e:	2301      	movs	r3, #1
 810a230:	75fb      	strb	r3, [r7, #23]
      break;
 810a232:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810a234:	68fb      	ldr	r3, [r7, #12]
 810a236:	2200      	movs	r2, #0
 810a238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810a23c:	7dfb      	ldrb	r3, [r7, #23]
}
 810a23e:	4618      	mov	r0, r3
 810a240:	3718      	adds	r7, #24
 810a242:	46bd      	mov	sp, r7
 810a244:	bd80      	pop	{r7, pc}
 810a246:	bf00      	nop

0810a248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 810a248:	b580      	push	{r7, lr}
 810a24a:	b084      	sub	sp, #16
 810a24c:	af00      	add	r7, sp, #0
 810a24e:	6078      	str	r0, [r7, #4]
 810a250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810a252:	2300      	movs	r3, #0
 810a254:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810a256:	687b      	ldr	r3, [r7, #4]
 810a258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810a25c:	2b01      	cmp	r3, #1
 810a25e:	d101      	bne.n	810a264 <HAL_TIM_ConfigClockSource+0x1c>
 810a260:	2302      	movs	r3, #2
 810a262:	e0de      	b.n	810a422 <HAL_TIM_ConfigClockSource+0x1da>
 810a264:	687b      	ldr	r3, [r7, #4]
 810a266:	2201      	movs	r2, #1
 810a268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 810a26c:	687b      	ldr	r3, [r7, #4]
 810a26e:	2202      	movs	r2, #2
 810a270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 810a274:	687b      	ldr	r3, [r7, #4]
 810a276:	681b      	ldr	r3, [r3, #0]
 810a278:	689b      	ldr	r3, [r3, #8]
 810a27a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 810a27c:	68bb      	ldr	r3, [r7, #8]
 810a27e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 810a282:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 810a286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810a288:	68bb      	ldr	r3, [r7, #8]
 810a28a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810a28e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 810a290:	687b      	ldr	r3, [r7, #4]
 810a292:	681b      	ldr	r3, [r3, #0]
 810a294:	68ba      	ldr	r2, [r7, #8]
 810a296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 810a298:	683b      	ldr	r3, [r7, #0]
 810a29a:	681b      	ldr	r3, [r3, #0]
 810a29c:	4a63      	ldr	r2, [pc, #396]	@ (810a42c <HAL_TIM_ConfigClockSource+0x1e4>)
 810a29e:	4293      	cmp	r3, r2
 810a2a0:	f000 80a9 	beq.w	810a3f6 <HAL_TIM_ConfigClockSource+0x1ae>
 810a2a4:	4a61      	ldr	r2, [pc, #388]	@ (810a42c <HAL_TIM_ConfigClockSource+0x1e4>)
 810a2a6:	4293      	cmp	r3, r2
 810a2a8:	f200 80ae 	bhi.w	810a408 <HAL_TIM_ConfigClockSource+0x1c0>
 810a2ac:	4a60      	ldr	r2, [pc, #384]	@ (810a430 <HAL_TIM_ConfigClockSource+0x1e8>)
 810a2ae:	4293      	cmp	r3, r2
 810a2b0:	f000 80a1 	beq.w	810a3f6 <HAL_TIM_ConfigClockSource+0x1ae>
 810a2b4:	4a5e      	ldr	r2, [pc, #376]	@ (810a430 <HAL_TIM_ConfigClockSource+0x1e8>)
 810a2b6:	4293      	cmp	r3, r2
 810a2b8:	f200 80a6 	bhi.w	810a408 <HAL_TIM_ConfigClockSource+0x1c0>
 810a2bc:	4a5d      	ldr	r2, [pc, #372]	@ (810a434 <HAL_TIM_ConfigClockSource+0x1ec>)
 810a2be:	4293      	cmp	r3, r2
 810a2c0:	f000 8099 	beq.w	810a3f6 <HAL_TIM_ConfigClockSource+0x1ae>
 810a2c4:	4a5b      	ldr	r2, [pc, #364]	@ (810a434 <HAL_TIM_ConfigClockSource+0x1ec>)
 810a2c6:	4293      	cmp	r3, r2
 810a2c8:	f200 809e 	bhi.w	810a408 <HAL_TIM_ConfigClockSource+0x1c0>
 810a2cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 810a2d0:	f000 8091 	beq.w	810a3f6 <HAL_TIM_ConfigClockSource+0x1ae>
 810a2d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 810a2d8:	f200 8096 	bhi.w	810a408 <HAL_TIM_ConfigClockSource+0x1c0>
 810a2dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810a2e0:	f000 8089 	beq.w	810a3f6 <HAL_TIM_ConfigClockSource+0x1ae>
 810a2e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810a2e8:	f200 808e 	bhi.w	810a408 <HAL_TIM_ConfigClockSource+0x1c0>
 810a2ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810a2f0:	d03e      	beq.n	810a370 <HAL_TIM_ConfigClockSource+0x128>
 810a2f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810a2f6:	f200 8087 	bhi.w	810a408 <HAL_TIM_ConfigClockSource+0x1c0>
 810a2fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a2fe:	f000 8086 	beq.w	810a40e <HAL_TIM_ConfigClockSource+0x1c6>
 810a302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a306:	d87f      	bhi.n	810a408 <HAL_TIM_ConfigClockSource+0x1c0>
 810a308:	2b70      	cmp	r3, #112	@ 0x70
 810a30a:	d01a      	beq.n	810a342 <HAL_TIM_ConfigClockSource+0xfa>
 810a30c:	2b70      	cmp	r3, #112	@ 0x70
 810a30e:	d87b      	bhi.n	810a408 <HAL_TIM_ConfigClockSource+0x1c0>
 810a310:	2b60      	cmp	r3, #96	@ 0x60
 810a312:	d050      	beq.n	810a3b6 <HAL_TIM_ConfigClockSource+0x16e>
 810a314:	2b60      	cmp	r3, #96	@ 0x60
 810a316:	d877      	bhi.n	810a408 <HAL_TIM_ConfigClockSource+0x1c0>
 810a318:	2b50      	cmp	r3, #80	@ 0x50
 810a31a:	d03c      	beq.n	810a396 <HAL_TIM_ConfigClockSource+0x14e>
 810a31c:	2b50      	cmp	r3, #80	@ 0x50
 810a31e:	d873      	bhi.n	810a408 <HAL_TIM_ConfigClockSource+0x1c0>
 810a320:	2b40      	cmp	r3, #64	@ 0x40
 810a322:	d058      	beq.n	810a3d6 <HAL_TIM_ConfigClockSource+0x18e>
 810a324:	2b40      	cmp	r3, #64	@ 0x40
 810a326:	d86f      	bhi.n	810a408 <HAL_TIM_ConfigClockSource+0x1c0>
 810a328:	2b30      	cmp	r3, #48	@ 0x30
 810a32a:	d064      	beq.n	810a3f6 <HAL_TIM_ConfigClockSource+0x1ae>
 810a32c:	2b30      	cmp	r3, #48	@ 0x30
 810a32e:	d86b      	bhi.n	810a408 <HAL_TIM_ConfigClockSource+0x1c0>
 810a330:	2b20      	cmp	r3, #32
 810a332:	d060      	beq.n	810a3f6 <HAL_TIM_ConfigClockSource+0x1ae>
 810a334:	2b20      	cmp	r3, #32
 810a336:	d867      	bhi.n	810a408 <HAL_TIM_ConfigClockSource+0x1c0>
 810a338:	2b00      	cmp	r3, #0
 810a33a:	d05c      	beq.n	810a3f6 <HAL_TIM_ConfigClockSource+0x1ae>
 810a33c:	2b10      	cmp	r3, #16
 810a33e:	d05a      	beq.n	810a3f6 <HAL_TIM_ConfigClockSource+0x1ae>
 810a340:	e062      	b.n	810a408 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810a342:	687b      	ldr	r3, [r7, #4]
 810a344:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810a346:	683b      	ldr	r3, [r7, #0]
 810a348:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810a34a:	683b      	ldr	r3, [r7, #0]
 810a34c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810a34e:	683b      	ldr	r3, [r7, #0]
 810a350:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810a352:	f000 fc91 	bl	810ac78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 810a356:	687b      	ldr	r3, [r7, #4]
 810a358:	681b      	ldr	r3, [r3, #0]
 810a35a:	689b      	ldr	r3, [r3, #8]
 810a35c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810a35e:	68bb      	ldr	r3, [r7, #8]
 810a360:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 810a364:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 810a366:	687b      	ldr	r3, [r7, #4]
 810a368:	681b      	ldr	r3, [r3, #0]
 810a36a:	68ba      	ldr	r2, [r7, #8]
 810a36c:	609a      	str	r2, [r3, #8]
      break;
 810a36e:	e04f      	b.n	810a410 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810a370:	687b      	ldr	r3, [r7, #4]
 810a372:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810a374:	683b      	ldr	r3, [r7, #0]
 810a376:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810a378:	683b      	ldr	r3, [r7, #0]
 810a37a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810a37c:	683b      	ldr	r3, [r7, #0]
 810a37e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810a380:	f000 fc7a 	bl	810ac78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810a384:	687b      	ldr	r3, [r7, #4]
 810a386:	681b      	ldr	r3, [r3, #0]
 810a388:	689a      	ldr	r2, [r3, #8]
 810a38a:	687b      	ldr	r3, [r7, #4]
 810a38c:	681b      	ldr	r3, [r3, #0]
 810a38e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810a392:	609a      	str	r2, [r3, #8]
      break;
 810a394:	e03c      	b.n	810a410 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810a396:	687b      	ldr	r3, [r7, #4]
 810a398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810a39a:	683b      	ldr	r3, [r7, #0]
 810a39c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810a39e:	683b      	ldr	r3, [r7, #0]
 810a3a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810a3a2:	461a      	mov	r2, r3
 810a3a4:	f000 fbec 	bl	810ab80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 810a3a8:	687b      	ldr	r3, [r7, #4]
 810a3aa:	681b      	ldr	r3, [r3, #0]
 810a3ac:	2150      	movs	r1, #80	@ 0x50
 810a3ae:	4618      	mov	r0, r3
 810a3b0:	f000 fc45 	bl	810ac3e <TIM_ITRx_SetConfig>
      break;
 810a3b4:	e02c      	b.n	810a410 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 810a3b6:	687b      	ldr	r3, [r7, #4]
 810a3b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810a3ba:	683b      	ldr	r3, [r7, #0]
 810a3bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810a3be:	683b      	ldr	r3, [r7, #0]
 810a3c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 810a3c2:	461a      	mov	r2, r3
 810a3c4:	f000 fc0b 	bl	810abde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 810a3c8:	687b      	ldr	r3, [r7, #4]
 810a3ca:	681b      	ldr	r3, [r3, #0]
 810a3cc:	2160      	movs	r1, #96	@ 0x60
 810a3ce:	4618      	mov	r0, r3
 810a3d0:	f000 fc35 	bl	810ac3e <TIM_ITRx_SetConfig>
      break;
 810a3d4:	e01c      	b.n	810a410 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810a3d6:	687b      	ldr	r3, [r7, #4]
 810a3d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810a3da:	683b      	ldr	r3, [r7, #0]
 810a3dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810a3de:	683b      	ldr	r3, [r7, #0]
 810a3e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810a3e2:	461a      	mov	r2, r3
 810a3e4:	f000 fbcc 	bl	810ab80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 810a3e8:	687b      	ldr	r3, [r7, #4]
 810a3ea:	681b      	ldr	r3, [r3, #0]
 810a3ec:	2140      	movs	r1, #64	@ 0x40
 810a3ee:	4618      	mov	r0, r3
 810a3f0:	f000 fc25 	bl	810ac3e <TIM_ITRx_SetConfig>
      break;
 810a3f4:	e00c      	b.n	810a410 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810a3f6:	687b      	ldr	r3, [r7, #4]
 810a3f8:	681a      	ldr	r2, [r3, #0]
 810a3fa:	683b      	ldr	r3, [r7, #0]
 810a3fc:	681b      	ldr	r3, [r3, #0]
 810a3fe:	4619      	mov	r1, r3
 810a400:	4610      	mov	r0, r2
 810a402:	f000 fc1c 	bl	810ac3e <TIM_ITRx_SetConfig>
      break;
 810a406:	e003      	b.n	810a410 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 810a408:	2301      	movs	r3, #1
 810a40a:	73fb      	strb	r3, [r7, #15]
      break;
 810a40c:	e000      	b.n	810a410 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810a40e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 810a410:	687b      	ldr	r3, [r7, #4]
 810a412:	2201      	movs	r2, #1
 810a414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810a418:	687b      	ldr	r3, [r7, #4]
 810a41a:	2200      	movs	r2, #0
 810a41c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810a420:	7bfb      	ldrb	r3, [r7, #15]
}
 810a422:	4618      	mov	r0, r3
 810a424:	3710      	adds	r7, #16
 810a426:	46bd      	mov	sp, r7
 810a428:	bd80      	pop	{r7, pc}
 810a42a:	bf00      	nop
 810a42c:	00100040 	.word	0x00100040
 810a430:	00100030 	.word	0x00100030
 810a434:	00100020 	.word	0x00100020

0810a438 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810a438:	b480      	push	{r7}
 810a43a:	b083      	sub	sp, #12
 810a43c:	af00      	add	r7, sp, #0
 810a43e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810a440:	bf00      	nop
 810a442:	370c      	adds	r7, #12
 810a444:	46bd      	mov	sp, r7
 810a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a44a:	4770      	bx	lr

0810a44c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810a44c:	b480      	push	{r7}
 810a44e:	b083      	sub	sp, #12
 810a450:	af00      	add	r7, sp, #0
 810a452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810a454:	bf00      	nop
 810a456:	370c      	adds	r7, #12
 810a458:	46bd      	mov	sp, r7
 810a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a45e:	4770      	bx	lr

0810a460 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810a460:	b480      	push	{r7}
 810a462:	b083      	sub	sp, #12
 810a464:	af00      	add	r7, sp, #0
 810a466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810a468:	bf00      	nop
 810a46a:	370c      	adds	r7, #12
 810a46c:	46bd      	mov	sp, r7
 810a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a472:	4770      	bx	lr

0810a474 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810a474:	b480      	push	{r7}
 810a476:	b083      	sub	sp, #12
 810a478:	af00      	add	r7, sp, #0
 810a47a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810a47c:	bf00      	nop
 810a47e:	370c      	adds	r7, #12
 810a480:	46bd      	mov	sp, r7
 810a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a486:	4770      	bx	lr

0810a488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810a488:	b480      	push	{r7}
 810a48a:	b085      	sub	sp, #20
 810a48c:	af00      	add	r7, sp, #0
 810a48e:	6078      	str	r0, [r7, #4]
 810a490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810a492:	687b      	ldr	r3, [r7, #4]
 810a494:	681b      	ldr	r3, [r3, #0]
 810a496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810a498:	687b      	ldr	r3, [r7, #4]
 810a49a:	4a46      	ldr	r2, [pc, #280]	@ (810a5b4 <TIM_Base_SetConfig+0x12c>)
 810a49c:	4293      	cmp	r3, r2
 810a49e:	d013      	beq.n	810a4c8 <TIM_Base_SetConfig+0x40>
 810a4a0:	687b      	ldr	r3, [r7, #4]
 810a4a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a4a6:	d00f      	beq.n	810a4c8 <TIM_Base_SetConfig+0x40>
 810a4a8:	687b      	ldr	r3, [r7, #4]
 810a4aa:	4a43      	ldr	r2, [pc, #268]	@ (810a5b8 <TIM_Base_SetConfig+0x130>)
 810a4ac:	4293      	cmp	r3, r2
 810a4ae:	d00b      	beq.n	810a4c8 <TIM_Base_SetConfig+0x40>
 810a4b0:	687b      	ldr	r3, [r7, #4]
 810a4b2:	4a42      	ldr	r2, [pc, #264]	@ (810a5bc <TIM_Base_SetConfig+0x134>)
 810a4b4:	4293      	cmp	r3, r2
 810a4b6:	d007      	beq.n	810a4c8 <TIM_Base_SetConfig+0x40>
 810a4b8:	687b      	ldr	r3, [r7, #4]
 810a4ba:	4a41      	ldr	r2, [pc, #260]	@ (810a5c0 <TIM_Base_SetConfig+0x138>)
 810a4bc:	4293      	cmp	r3, r2
 810a4be:	d003      	beq.n	810a4c8 <TIM_Base_SetConfig+0x40>
 810a4c0:	687b      	ldr	r3, [r7, #4]
 810a4c2:	4a40      	ldr	r2, [pc, #256]	@ (810a5c4 <TIM_Base_SetConfig+0x13c>)
 810a4c4:	4293      	cmp	r3, r2
 810a4c6:	d108      	bne.n	810a4da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810a4c8:	68fb      	ldr	r3, [r7, #12]
 810a4ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810a4ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810a4d0:	683b      	ldr	r3, [r7, #0]
 810a4d2:	685b      	ldr	r3, [r3, #4]
 810a4d4:	68fa      	ldr	r2, [r7, #12]
 810a4d6:	4313      	orrs	r3, r2
 810a4d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810a4da:	687b      	ldr	r3, [r7, #4]
 810a4dc:	4a35      	ldr	r2, [pc, #212]	@ (810a5b4 <TIM_Base_SetConfig+0x12c>)
 810a4de:	4293      	cmp	r3, r2
 810a4e0:	d01f      	beq.n	810a522 <TIM_Base_SetConfig+0x9a>
 810a4e2:	687b      	ldr	r3, [r7, #4]
 810a4e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a4e8:	d01b      	beq.n	810a522 <TIM_Base_SetConfig+0x9a>
 810a4ea:	687b      	ldr	r3, [r7, #4]
 810a4ec:	4a32      	ldr	r2, [pc, #200]	@ (810a5b8 <TIM_Base_SetConfig+0x130>)
 810a4ee:	4293      	cmp	r3, r2
 810a4f0:	d017      	beq.n	810a522 <TIM_Base_SetConfig+0x9a>
 810a4f2:	687b      	ldr	r3, [r7, #4]
 810a4f4:	4a31      	ldr	r2, [pc, #196]	@ (810a5bc <TIM_Base_SetConfig+0x134>)
 810a4f6:	4293      	cmp	r3, r2
 810a4f8:	d013      	beq.n	810a522 <TIM_Base_SetConfig+0x9a>
 810a4fa:	687b      	ldr	r3, [r7, #4]
 810a4fc:	4a30      	ldr	r2, [pc, #192]	@ (810a5c0 <TIM_Base_SetConfig+0x138>)
 810a4fe:	4293      	cmp	r3, r2
 810a500:	d00f      	beq.n	810a522 <TIM_Base_SetConfig+0x9a>
 810a502:	687b      	ldr	r3, [r7, #4]
 810a504:	4a2f      	ldr	r2, [pc, #188]	@ (810a5c4 <TIM_Base_SetConfig+0x13c>)
 810a506:	4293      	cmp	r3, r2
 810a508:	d00b      	beq.n	810a522 <TIM_Base_SetConfig+0x9a>
 810a50a:	687b      	ldr	r3, [r7, #4]
 810a50c:	4a2e      	ldr	r2, [pc, #184]	@ (810a5c8 <TIM_Base_SetConfig+0x140>)
 810a50e:	4293      	cmp	r3, r2
 810a510:	d007      	beq.n	810a522 <TIM_Base_SetConfig+0x9a>
 810a512:	687b      	ldr	r3, [r7, #4]
 810a514:	4a2d      	ldr	r2, [pc, #180]	@ (810a5cc <TIM_Base_SetConfig+0x144>)
 810a516:	4293      	cmp	r3, r2
 810a518:	d003      	beq.n	810a522 <TIM_Base_SetConfig+0x9a>
 810a51a:	687b      	ldr	r3, [r7, #4]
 810a51c:	4a2c      	ldr	r2, [pc, #176]	@ (810a5d0 <TIM_Base_SetConfig+0x148>)
 810a51e:	4293      	cmp	r3, r2
 810a520:	d108      	bne.n	810a534 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810a522:	68fb      	ldr	r3, [r7, #12]
 810a524:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810a528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810a52a:	683b      	ldr	r3, [r7, #0]
 810a52c:	68db      	ldr	r3, [r3, #12]
 810a52e:	68fa      	ldr	r2, [r7, #12]
 810a530:	4313      	orrs	r3, r2
 810a532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810a534:	68fb      	ldr	r3, [r7, #12]
 810a536:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810a53a:	683b      	ldr	r3, [r7, #0]
 810a53c:	695b      	ldr	r3, [r3, #20]
 810a53e:	4313      	orrs	r3, r2
 810a540:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810a542:	687b      	ldr	r3, [r7, #4]
 810a544:	68fa      	ldr	r2, [r7, #12]
 810a546:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810a548:	683b      	ldr	r3, [r7, #0]
 810a54a:	689a      	ldr	r2, [r3, #8]
 810a54c:	687b      	ldr	r3, [r7, #4]
 810a54e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810a550:	683b      	ldr	r3, [r7, #0]
 810a552:	681a      	ldr	r2, [r3, #0]
 810a554:	687b      	ldr	r3, [r7, #4]
 810a556:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810a558:	687b      	ldr	r3, [r7, #4]
 810a55a:	4a16      	ldr	r2, [pc, #88]	@ (810a5b4 <TIM_Base_SetConfig+0x12c>)
 810a55c:	4293      	cmp	r3, r2
 810a55e:	d00f      	beq.n	810a580 <TIM_Base_SetConfig+0xf8>
 810a560:	687b      	ldr	r3, [r7, #4]
 810a562:	4a18      	ldr	r2, [pc, #96]	@ (810a5c4 <TIM_Base_SetConfig+0x13c>)
 810a564:	4293      	cmp	r3, r2
 810a566:	d00b      	beq.n	810a580 <TIM_Base_SetConfig+0xf8>
 810a568:	687b      	ldr	r3, [r7, #4]
 810a56a:	4a17      	ldr	r2, [pc, #92]	@ (810a5c8 <TIM_Base_SetConfig+0x140>)
 810a56c:	4293      	cmp	r3, r2
 810a56e:	d007      	beq.n	810a580 <TIM_Base_SetConfig+0xf8>
 810a570:	687b      	ldr	r3, [r7, #4]
 810a572:	4a16      	ldr	r2, [pc, #88]	@ (810a5cc <TIM_Base_SetConfig+0x144>)
 810a574:	4293      	cmp	r3, r2
 810a576:	d003      	beq.n	810a580 <TIM_Base_SetConfig+0xf8>
 810a578:	687b      	ldr	r3, [r7, #4]
 810a57a:	4a15      	ldr	r2, [pc, #84]	@ (810a5d0 <TIM_Base_SetConfig+0x148>)
 810a57c:	4293      	cmp	r3, r2
 810a57e:	d103      	bne.n	810a588 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810a580:	683b      	ldr	r3, [r7, #0]
 810a582:	691a      	ldr	r2, [r3, #16]
 810a584:	687b      	ldr	r3, [r7, #4]
 810a586:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810a588:	687b      	ldr	r3, [r7, #4]
 810a58a:	2201      	movs	r2, #1
 810a58c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 810a58e:	687b      	ldr	r3, [r7, #4]
 810a590:	691b      	ldr	r3, [r3, #16]
 810a592:	f003 0301 	and.w	r3, r3, #1
 810a596:	2b01      	cmp	r3, #1
 810a598:	d105      	bne.n	810a5a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 810a59a:	687b      	ldr	r3, [r7, #4]
 810a59c:	691b      	ldr	r3, [r3, #16]
 810a59e:	f023 0201 	bic.w	r2, r3, #1
 810a5a2:	687b      	ldr	r3, [r7, #4]
 810a5a4:	611a      	str	r2, [r3, #16]
  }
}
 810a5a6:	bf00      	nop
 810a5a8:	3714      	adds	r7, #20
 810a5aa:	46bd      	mov	sp, r7
 810a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a5b0:	4770      	bx	lr
 810a5b2:	bf00      	nop
 810a5b4:	40010000 	.word	0x40010000
 810a5b8:	40000400 	.word	0x40000400
 810a5bc:	40000800 	.word	0x40000800
 810a5c0:	40000c00 	.word	0x40000c00
 810a5c4:	40010400 	.word	0x40010400
 810a5c8:	40014000 	.word	0x40014000
 810a5cc:	40014400 	.word	0x40014400
 810a5d0:	40014800 	.word	0x40014800

0810a5d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810a5d4:	b480      	push	{r7}
 810a5d6:	b087      	sub	sp, #28
 810a5d8:	af00      	add	r7, sp, #0
 810a5da:	6078      	str	r0, [r7, #4]
 810a5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a5de:	687b      	ldr	r3, [r7, #4]
 810a5e0:	6a1b      	ldr	r3, [r3, #32]
 810a5e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810a5e4:	687b      	ldr	r3, [r7, #4]
 810a5e6:	6a1b      	ldr	r3, [r3, #32]
 810a5e8:	f023 0201 	bic.w	r2, r3, #1
 810a5ec:	687b      	ldr	r3, [r7, #4]
 810a5ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a5f0:	687b      	ldr	r3, [r7, #4]
 810a5f2:	685b      	ldr	r3, [r3, #4]
 810a5f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810a5f6:	687b      	ldr	r3, [r7, #4]
 810a5f8:	699b      	ldr	r3, [r3, #24]
 810a5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810a5fc:	68fb      	ldr	r3, [r7, #12]
 810a5fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810a602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810a606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810a608:	68fb      	ldr	r3, [r7, #12]
 810a60a:	f023 0303 	bic.w	r3, r3, #3
 810a60e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810a610:	683b      	ldr	r3, [r7, #0]
 810a612:	681b      	ldr	r3, [r3, #0]
 810a614:	68fa      	ldr	r2, [r7, #12]
 810a616:	4313      	orrs	r3, r2
 810a618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810a61a:	697b      	ldr	r3, [r7, #20]
 810a61c:	f023 0302 	bic.w	r3, r3, #2
 810a620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810a622:	683b      	ldr	r3, [r7, #0]
 810a624:	689b      	ldr	r3, [r3, #8]
 810a626:	697a      	ldr	r2, [r7, #20]
 810a628:	4313      	orrs	r3, r2
 810a62a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810a62c:	687b      	ldr	r3, [r7, #4]
 810a62e:	4a2c      	ldr	r2, [pc, #176]	@ (810a6e0 <TIM_OC1_SetConfig+0x10c>)
 810a630:	4293      	cmp	r3, r2
 810a632:	d00f      	beq.n	810a654 <TIM_OC1_SetConfig+0x80>
 810a634:	687b      	ldr	r3, [r7, #4]
 810a636:	4a2b      	ldr	r2, [pc, #172]	@ (810a6e4 <TIM_OC1_SetConfig+0x110>)
 810a638:	4293      	cmp	r3, r2
 810a63a:	d00b      	beq.n	810a654 <TIM_OC1_SetConfig+0x80>
 810a63c:	687b      	ldr	r3, [r7, #4]
 810a63e:	4a2a      	ldr	r2, [pc, #168]	@ (810a6e8 <TIM_OC1_SetConfig+0x114>)
 810a640:	4293      	cmp	r3, r2
 810a642:	d007      	beq.n	810a654 <TIM_OC1_SetConfig+0x80>
 810a644:	687b      	ldr	r3, [r7, #4]
 810a646:	4a29      	ldr	r2, [pc, #164]	@ (810a6ec <TIM_OC1_SetConfig+0x118>)
 810a648:	4293      	cmp	r3, r2
 810a64a:	d003      	beq.n	810a654 <TIM_OC1_SetConfig+0x80>
 810a64c:	687b      	ldr	r3, [r7, #4]
 810a64e:	4a28      	ldr	r2, [pc, #160]	@ (810a6f0 <TIM_OC1_SetConfig+0x11c>)
 810a650:	4293      	cmp	r3, r2
 810a652:	d10c      	bne.n	810a66e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810a654:	697b      	ldr	r3, [r7, #20]
 810a656:	f023 0308 	bic.w	r3, r3, #8
 810a65a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810a65c:	683b      	ldr	r3, [r7, #0]
 810a65e:	68db      	ldr	r3, [r3, #12]
 810a660:	697a      	ldr	r2, [r7, #20]
 810a662:	4313      	orrs	r3, r2
 810a664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810a666:	697b      	ldr	r3, [r7, #20]
 810a668:	f023 0304 	bic.w	r3, r3, #4
 810a66c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a66e:	687b      	ldr	r3, [r7, #4]
 810a670:	4a1b      	ldr	r2, [pc, #108]	@ (810a6e0 <TIM_OC1_SetConfig+0x10c>)
 810a672:	4293      	cmp	r3, r2
 810a674:	d00f      	beq.n	810a696 <TIM_OC1_SetConfig+0xc2>
 810a676:	687b      	ldr	r3, [r7, #4]
 810a678:	4a1a      	ldr	r2, [pc, #104]	@ (810a6e4 <TIM_OC1_SetConfig+0x110>)
 810a67a:	4293      	cmp	r3, r2
 810a67c:	d00b      	beq.n	810a696 <TIM_OC1_SetConfig+0xc2>
 810a67e:	687b      	ldr	r3, [r7, #4]
 810a680:	4a19      	ldr	r2, [pc, #100]	@ (810a6e8 <TIM_OC1_SetConfig+0x114>)
 810a682:	4293      	cmp	r3, r2
 810a684:	d007      	beq.n	810a696 <TIM_OC1_SetConfig+0xc2>
 810a686:	687b      	ldr	r3, [r7, #4]
 810a688:	4a18      	ldr	r2, [pc, #96]	@ (810a6ec <TIM_OC1_SetConfig+0x118>)
 810a68a:	4293      	cmp	r3, r2
 810a68c:	d003      	beq.n	810a696 <TIM_OC1_SetConfig+0xc2>
 810a68e:	687b      	ldr	r3, [r7, #4]
 810a690:	4a17      	ldr	r2, [pc, #92]	@ (810a6f0 <TIM_OC1_SetConfig+0x11c>)
 810a692:	4293      	cmp	r3, r2
 810a694:	d111      	bne.n	810a6ba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810a696:	693b      	ldr	r3, [r7, #16]
 810a698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810a69c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810a69e:	693b      	ldr	r3, [r7, #16]
 810a6a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810a6a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810a6a6:	683b      	ldr	r3, [r7, #0]
 810a6a8:	695b      	ldr	r3, [r3, #20]
 810a6aa:	693a      	ldr	r2, [r7, #16]
 810a6ac:	4313      	orrs	r3, r2
 810a6ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810a6b0:	683b      	ldr	r3, [r7, #0]
 810a6b2:	699b      	ldr	r3, [r3, #24]
 810a6b4:	693a      	ldr	r2, [r7, #16]
 810a6b6:	4313      	orrs	r3, r2
 810a6b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a6ba:	687b      	ldr	r3, [r7, #4]
 810a6bc:	693a      	ldr	r2, [r7, #16]
 810a6be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810a6c0:	687b      	ldr	r3, [r7, #4]
 810a6c2:	68fa      	ldr	r2, [r7, #12]
 810a6c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810a6c6:	683b      	ldr	r3, [r7, #0]
 810a6c8:	685a      	ldr	r2, [r3, #4]
 810a6ca:	687b      	ldr	r3, [r7, #4]
 810a6cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a6ce:	687b      	ldr	r3, [r7, #4]
 810a6d0:	697a      	ldr	r2, [r7, #20]
 810a6d2:	621a      	str	r2, [r3, #32]
}
 810a6d4:	bf00      	nop
 810a6d6:	371c      	adds	r7, #28
 810a6d8:	46bd      	mov	sp, r7
 810a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6de:	4770      	bx	lr
 810a6e0:	40010000 	.word	0x40010000
 810a6e4:	40010400 	.word	0x40010400
 810a6e8:	40014000 	.word	0x40014000
 810a6ec:	40014400 	.word	0x40014400
 810a6f0:	40014800 	.word	0x40014800

0810a6f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810a6f4:	b480      	push	{r7}
 810a6f6:	b087      	sub	sp, #28
 810a6f8:	af00      	add	r7, sp, #0
 810a6fa:	6078      	str	r0, [r7, #4]
 810a6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a6fe:	687b      	ldr	r3, [r7, #4]
 810a700:	6a1b      	ldr	r3, [r3, #32]
 810a702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810a704:	687b      	ldr	r3, [r7, #4]
 810a706:	6a1b      	ldr	r3, [r3, #32]
 810a708:	f023 0210 	bic.w	r2, r3, #16
 810a70c:	687b      	ldr	r3, [r7, #4]
 810a70e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a710:	687b      	ldr	r3, [r7, #4]
 810a712:	685b      	ldr	r3, [r3, #4]
 810a714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810a716:	687b      	ldr	r3, [r7, #4]
 810a718:	699b      	ldr	r3, [r3, #24]
 810a71a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810a71c:	68fb      	ldr	r3, [r7, #12]
 810a71e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810a722:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810a726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810a728:	68fb      	ldr	r3, [r7, #12]
 810a72a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810a72e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810a730:	683b      	ldr	r3, [r7, #0]
 810a732:	681b      	ldr	r3, [r3, #0]
 810a734:	021b      	lsls	r3, r3, #8
 810a736:	68fa      	ldr	r2, [r7, #12]
 810a738:	4313      	orrs	r3, r2
 810a73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810a73c:	697b      	ldr	r3, [r7, #20]
 810a73e:	f023 0320 	bic.w	r3, r3, #32
 810a742:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810a744:	683b      	ldr	r3, [r7, #0]
 810a746:	689b      	ldr	r3, [r3, #8]
 810a748:	011b      	lsls	r3, r3, #4
 810a74a:	697a      	ldr	r2, [r7, #20]
 810a74c:	4313      	orrs	r3, r2
 810a74e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810a750:	687b      	ldr	r3, [r7, #4]
 810a752:	4a28      	ldr	r2, [pc, #160]	@ (810a7f4 <TIM_OC2_SetConfig+0x100>)
 810a754:	4293      	cmp	r3, r2
 810a756:	d003      	beq.n	810a760 <TIM_OC2_SetConfig+0x6c>
 810a758:	687b      	ldr	r3, [r7, #4]
 810a75a:	4a27      	ldr	r2, [pc, #156]	@ (810a7f8 <TIM_OC2_SetConfig+0x104>)
 810a75c:	4293      	cmp	r3, r2
 810a75e:	d10d      	bne.n	810a77c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810a760:	697b      	ldr	r3, [r7, #20]
 810a762:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810a766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810a768:	683b      	ldr	r3, [r7, #0]
 810a76a:	68db      	ldr	r3, [r3, #12]
 810a76c:	011b      	lsls	r3, r3, #4
 810a76e:	697a      	ldr	r2, [r7, #20]
 810a770:	4313      	orrs	r3, r2
 810a772:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810a774:	697b      	ldr	r3, [r7, #20]
 810a776:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810a77a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a77c:	687b      	ldr	r3, [r7, #4]
 810a77e:	4a1d      	ldr	r2, [pc, #116]	@ (810a7f4 <TIM_OC2_SetConfig+0x100>)
 810a780:	4293      	cmp	r3, r2
 810a782:	d00f      	beq.n	810a7a4 <TIM_OC2_SetConfig+0xb0>
 810a784:	687b      	ldr	r3, [r7, #4]
 810a786:	4a1c      	ldr	r2, [pc, #112]	@ (810a7f8 <TIM_OC2_SetConfig+0x104>)
 810a788:	4293      	cmp	r3, r2
 810a78a:	d00b      	beq.n	810a7a4 <TIM_OC2_SetConfig+0xb0>
 810a78c:	687b      	ldr	r3, [r7, #4]
 810a78e:	4a1b      	ldr	r2, [pc, #108]	@ (810a7fc <TIM_OC2_SetConfig+0x108>)
 810a790:	4293      	cmp	r3, r2
 810a792:	d007      	beq.n	810a7a4 <TIM_OC2_SetConfig+0xb0>
 810a794:	687b      	ldr	r3, [r7, #4]
 810a796:	4a1a      	ldr	r2, [pc, #104]	@ (810a800 <TIM_OC2_SetConfig+0x10c>)
 810a798:	4293      	cmp	r3, r2
 810a79a:	d003      	beq.n	810a7a4 <TIM_OC2_SetConfig+0xb0>
 810a79c:	687b      	ldr	r3, [r7, #4]
 810a79e:	4a19      	ldr	r2, [pc, #100]	@ (810a804 <TIM_OC2_SetConfig+0x110>)
 810a7a0:	4293      	cmp	r3, r2
 810a7a2:	d113      	bne.n	810a7cc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810a7a4:	693b      	ldr	r3, [r7, #16]
 810a7a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810a7aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810a7ac:	693b      	ldr	r3, [r7, #16]
 810a7ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810a7b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810a7b4:	683b      	ldr	r3, [r7, #0]
 810a7b6:	695b      	ldr	r3, [r3, #20]
 810a7b8:	009b      	lsls	r3, r3, #2
 810a7ba:	693a      	ldr	r2, [r7, #16]
 810a7bc:	4313      	orrs	r3, r2
 810a7be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810a7c0:	683b      	ldr	r3, [r7, #0]
 810a7c2:	699b      	ldr	r3, [r3, #24]
 810a7c4:	009b      	lsls	r3, r3, #2
 810a7c6:	693a      	ldr	r2, [r7, #16]
 810a7c8:	4313      	orrs	r3, r2
 810a7ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a7cc:	687b      	ldr	r3, [r7, #4]
 810a7ce:	693a      	ldr	r2, [r7, #16]
 810a7d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810a7d2:	687b      	ldr	r3, [r7, #4]
 810a7d4:	68fa      	ldr	r2, [r7, #12]
 810a7d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810a7d8:	683b      	ldr	r3, [r7, #0]
 810a7da:	685a      	ldr	r2, [r3, #4]
 810a7dc:	687b      	ldr	r3, [r7, #4]
 810a7de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a7e0:	687b      	ldr	r3, [r7, #4]
 810a7e2:	697a      	ldr	r2, [r7, #20]
 810a7e4:	621a      	str	r2, [r3, #32]
}
 810a7e6:	bf00      	nop
 810a7e8:	371c      	adds	r7, #28
 810a7ea:	46bd      	mov	sp, r7
 810a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a7f0:	4770      	bx	lr
 810a7f2:	bf00      	nop
 810a7f4:	40010000 	.word	0x40010000
 810a7f8:	40010400 	.word	0x40010400
 810a7fc:	40014000 	.word	0x40014000
 810a800:	40014400 	.word	0x40014400
 810a804:	40014800 	.word	0x40014800

0810a808 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810a808:	b480      	push	{r7}
 810a80a:	b087      	sub	sp, #28
 810a80c:	af00      	add	r7, sp, #0
 810a80e:	6078      	str	r0, [r7, #4]
 810a810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a812:	687b      	ldr	r3, [r7, #4]
 810a814:	6a1b      	ldr	r3, [r3, #32]
 810a816:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810a818:	687b      	ldr	r3, [r7, #4]
 810a81a:	6a1b      	ldr	r3, [r3, #32]
 810a81c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810a820:	687b      	ldr	r3, [r7, #4]
 810a822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a824:	687b      	ldr	r3, [r7, #4]
 810a826:	685b      	ldr	r3, [r3, #4]
 810a828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810a82a:	687b      	ldr	r3, [r7, #4]
 810a82c:	69db      	ldr	r3, [r3, #28]
 810a82e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810a830:	68fb      	ldr	r3, [r7, #12]
 810a832:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810a836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810a83a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810a83c:	68fb      	ldr	r3, [r7, #12]
 810a83e:	f023 0303 	bic.w	r3, r3, #3
 810a842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810a844:	683b      	ldr	r3, [r7, #0]
 810a846:	681b      	ldr	r3, [r3, #0]
 810a848:	68fa      	ldr	r2, [r7, #12]
 810a84a:	4313      	orrs	r3, r2
 810a84c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810a84e:	697b      	ldr	r3, [r7, #20]
 810a850:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810a854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810a856:	683b      	ldr	r3, [r7, #0]
 810a858:	689b      	ldr	r3, [r3, #8]
 810a85a:	021b      	lsls	r3, r3, #8
 810a85c:	697a      	ldr	r2, [r7, #20]
 810a85e:	4313      	orrs	r3, r2
 810a860:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810a862:	687b      	ldr	r3, [r7, #4]
 810a864:	4a27      	ldr	r2, [pc, #156]	@ (810a904 <TIM_OC3_SetConfig+0xfc>)
 810a866:	4293      	cmp	r3, r2
 810a868:	d003      	beq.n	810a872 <TIM_OC3_SetConfig+0x6a>
 810a86a:	687b      	ldr	r3, [r7, #4]
 810a86c:	4a26      	ldr	r2, [pc, #152]	@ (810a908 <TIM_OC3_SetConfig+0x100>)
 810a86e:	4293      	cmp	r3, r2
 810a870:	d10d      	bne.n	810a88e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810a872:	697b      	ldr	r3, [r7, #20]
 810a874:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810a878:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810a87a:	683b      	ldr	r3, [r7, #0]
 810a87c:	68db      	ldr	r3, [r3, #12]
 810a87e:	021b      	lsls	r3, r3, #8
 810a880:	697a      	ldr	r2, [r7, #20]
 810a882:	4313      	orrs	r3, r2
 810a884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810a886:	697b      	ldr	r3, [r7, #20]
 810a888:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810a88c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a88e:	687b      	ldr	r3, [r7, #4]
 810a890:	4a1c      	ldr	r2, [pc, #112]	@ (810a904 <TIM_OC3_SetConfig+0xfc>)
 810a892:	4293      	cmp	r3, r2
 810a894:	d00f      	beq.n	810a8b6 <TIM_OC3_SetConfig+0xae>
 810a896:	687b      	ldr	r3, [r7, #4]
 810a898:	4a1b      	ldr	r2, [pc, #108]	@ (810a908 <TIM_OC3_SetConfig+0x100>)
 810a89a:	4293      	cmp	r3, r2
 810a89c:	d00b      	beq.n	810a8b6 <TIM_OC3_SetConfig+0xae>
 810a89e:	687b      	ldr	r3, [r7, #4]
 810a8a0:	4a1a      	ldr	r2, [pc, #104]	@ (810a90c <TIM_OC3_SetConfig+0x104>)
 810a8a2:	4293      	cmp	r3, r2
 810a8a4:	d007      	beq.n	810a8b6 <TIM_OC3_SetConfig+0xae>
 810a8a6:	687b      	ldr	r3, [r7, #4]
 810a8a8:	4a19      	ldr	r2, [pc, #100]	@ (810a910 <TIM_OC3_SetConfig+0x108>)
 810a8aa:	4293      	cmp	r3, r2
 810a8ac:	d003      	beq.n	810a8b6 <TIM_OC3_SetConfig+0xae>
 810a8ae:	687b      	ldr	r3, [r7, #4]
 810a8b0:	4a18      	ldr	r2, [pc, #96]	@ (810a914 <TIM_OC3_SetConfig+0x10c>)
 810a8b2:	4293      	cmp	r3, r2
 810a8b4:	d113      	bne.n	810a8de <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810a8b6:	693b      	ldr	r3, [r7, #16]
 810a8b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810a8bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810a8be:	693b      	ldr	r3, [r7, #16]
 810a8c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810a8c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810a8c6:	683b      	ldr	r3, [r7, #0]
 810a8c8:	695b      	ldr	r3, [r3, #20]
 810a8ca:	011b      	lsls	r3, r3, #4
 810a8cc:	693a      	ldr	r2, [r7, #16]
 810a8ce:	4313      	orrs	r3, r2
 810a8d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810a8d2:	683b      	ldr	r3, [r7, #0]
 810a8d4:	699b      	ldr	r3, [r3, #24]
 810a8d6:	011b      	lsls	r3, r3, #4
 810a8d8:	693a      	ldr	r2, [r7, #16]
 810a8da:	4313      	orrs	r3, r2
 810a8dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a8de:	687b      	ldr	r3, [r7, #4]
 810a8e0:	693a      	ldr	r2, [r7, #16]
 810a8e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810a8e4:	687b      	ldr	r3, [r7, #4]
 810a8e6:	68fa      	ldr	r2, [r7, #12]
 810a8e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810a8ea:	683b      	ldr	r3, [r7, #0]
 810a8ec:	685a      	ldr	r2, [r3, #4]
 810a8ee:	687b      	ldr	r3, [r7, #4]
 810a8f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a8f2:	687b      	ldr	r3, [r7, #4]
 810a8f4:	697a      	ldr	r2, [r7, #20]
 810a8f6:	621a      	str	r2, [r3, #32]
}
 810a8f8:	bf00      	nop
 810a8fa:	371c      	adds	r7, #28
 810a8fc:	46bd      	mov	sp, r7
 810a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a902:	4770      	bx	lr
 810a904:	40010000 	.word	0x40010000
 810a908:	40010400 	.word	0x40010400
 810a90c:	40014000 	.word	0x40014000
 810a910:	40014400 	.word	0x40014400
 810a914:	40014800 	.word	0x40014800

0810a918 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810a918:	b480      	push	{r7}
 810a91a:	b087      	sub	sp, #28
 810a91c:	af00      	add	r7, sp, #0
 810a91e:	6078      	str	r0, [r7, #4]
 810a920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a922:	687b      	ldr	r3, [r7, #4]
 810a924:	6a1b      	ldr	r3, [r3, #32]
 810a926:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810a928:	687b      	ldr	r3, [r7, #4]
 810a92a:	6a1b      	ldr	r3, [r3, #32]
 810a92c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810a930:	687b      	ldr	r3, [r7, #4]
 810a932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a934:	687b      	ldr	r3, [r7, #4]
 810a936:	685b      	ldr	r3, [r3, #4]
 810a938:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810a93a:	687b      	ldr	r3, [r7, #4]
 810a93c:	69db      	ldr	r3, [r3, #28]
 810a93e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810a940:	68fb      	ldr	r3, [r7, #12]
 810a942:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810a946:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810a94a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810a94c:	68fb      	ldr	r3, [r7, #12]
 810a94e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810a952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810a954:	683b      	ldr	r3, [r7, #0]
 810a956:	681b      	ldr	r3, [r3, #0]
 810a958:	021b      	lsls	r3, r3, #8
 810a95a:	68fa      	ldr	r2, [r7, #12]
 810a95c:	4313      	orrs	r3, r2
 810a95e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810a960:	693b      	ldr	r3, [r7, #16]
 810a962:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810a966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810a968:	683b      	ldr	r3, [r7, #0]
 810a96a:	689b      	ldr	r3, [r3, #8]
 810a96c:	031b      	lsls	r3, r3, #12
 810a96e:	693a      	ldr	r2, [r7, #16]
 810a970:	4313      	orrs	r3, r2
 810a972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a974:	687b      	ldr	r3, [r7, #4]
 810a976:	4a18      	ldr	r2, [pc, #96]	@ (810a9d8 <TIM_OC4_SetConfig+0xc0>)
 810a978:	4293      	cmp	r3, r2
 810a97a:	d00f      	beq.n	810a99c <TIM_OC4_SetConfig+0x84>
 810a97c:	687b      	ldr	r3, [r7, #4]
 810a97e:	4a17      	ldr	r2, [pc, #92]	@ (810a9dc <TIM_OC4_SetConfig+0xc4>)
 810a980:	4293      	cmp	r3, r2
 810a982:	d00b      	beq.n	810a99c <TIM_OC4_SetConfig+0x84>
 810a984:	687b      	ldr	r3, [r7, #4]
 810a986:	4a16      	ldr	r2, [pc, #88]	@ (810a9e0 <TIM_OC4_SetConfig+0xc8>)
 810a988:	4293      	cmp	r3, r2
 810a98a:	d007      	beq.n	810a99c <TIM_OC4_SetConfig+0x84>
 810a98c:	687b      	ldr	r3, [r7, #4]
 810a98e:	4a15      	ldr	r2, [pc, #84]	@ (810a9e4 <TIM_OC4_SetConfig+0xcc>)
 810a990:	4293      	cmp	r3, r2
 810a992:	d003      	beq.n	810a99c <TIM_OC4_SetConfig+0x84>
 810a994:	687b      	ldr	r3, [r7, #4]
 810a996:	4a14      	ldr	r2, [pc, #80]	@ (810a9e8 <TIM_OC4_SetConfig+0xd0>)
 810a998:	4293      	cmp	r3, r2
 810a99a:	d109      	bne.n	810a9b0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810a99c:	697b      	ldr	r3, [r7, #20]
 810a99e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 810a9a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810a9a4:	683b      	ldr	r3, [r7, #0]
 810a9a6:	695b      	ldr	r3, [r3, #20]
 810a9a8:	019b      	lsls	r3, r3, #6
 810a9aa:	697a      	ldr	r2, [r7, #20]
 810a9ac:	4313      	orrs	r3, r2
 810a9ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a9b0:	687b      	ldr	r3, [r7, #4]
 810a9b2:	697a      	ldr	r2, [r7, #20]
 810a9b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810a9b6:	687b      	ldr	r3, [r7, #4]
 810a9b8:	68fa      	ldr	r2, [r7, #12]
 810a9ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810a9bc:	683b      	ldr	r3, [r7, #0]
 810a9be:	685a      	ldr	r2, [r3, #4]
 810a9c0:	687b      	ldr	r3, [r7, #4]
 810a9c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a9c4:	687b      	ldr	r3, [r7, #4]
 810a9c6:	693a      	ldr	r2, [r7, #16]
 810a9c8:	621a      	str	r2, [r3, #32]
}
 810a9ca:	bf00      	nop
 810a9cc:	371c      	adds	r7, #28
 810a9ce:	46bd      	mov	sp, r7
 810a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a9d4:	4770      	bx	lr
 810a9d6:	bf00      	nop
 810a9d8:	40010000 	.word	0x40010000
 810a9dc:	40010400 	.word	0x40010400
 810a9e0:	40014000 	.word	0x40014000
 810a9e4:	40014400 	.word	0x40014400
 810a9e8:	40014800 	.word	0x40014800

0810a9ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810a9ec:	b480      	push	{r7}
 810a9ee:	b087      	sub	sp, #28
 810a9f0:	af00      	add	r7, sp, #0
 810a9f2:	6078      	str	r0, [r7, #4]
 810a9f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a9f6:	687b      	ldr	r3, [r7, #4]
 810a9f8:	6a1b      	ldr	r3, [r3, #32]
 810a9fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810a9fc:	687b      	ldr	r3, [r7, #4]
 810a9fe:	6a1b      	ldr	r3, [r3, #32]
 810aa00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810aa04:	687b      	ldr	r3, [r7, #4]
 810aa06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810aa08:	687b      	ldr	r3, [r7, #4]
 810aa0a:	685b      	ldr	r3, [r3, #4]
 810aa0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810aa0e:	687b      	ldr	r3, [r7, #4]
 810aa10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810aa12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810aa14:	68fb      	ldr	r3, [r7, #12]
 810aa16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810aa1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810aa1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810aa20:	683b      	ldr	r3, [r7, #0]
 810aa22:	681b      	ldr	r3, [r3, #0]
 810aa24:	68fa      	ldr	r2, [r7, #12]
 810aa26:	4313      	orrs	r3, r2
 810aa28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810aa2a:	693b      	ldr	r3, [r7, #16]
 810aa2c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 810aa30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810aa32:	683b      	ldr	r3, [r7, #0]
 810aa34:	689b      	ldr	r3, [r3, #8]
 810aa36:	041b      	lsls	r3, r3, #16
 810aa38:	693a      	ldr	r2, [r7, #16]
 810aa3a:	4313      	orrs	r3, r2
 810aa3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810aa3e:	687b      	ldr	r3, [r7, #4]
 810aa40:	4a17      	ldr	r2, [pc, #92]	@ (810aaa0 <TIM_OC5_SetConfig+0xb4>)
 810aa42:	4293      	cmp	r3, r2
 810aa44:	d00f      	beq.n	810aa66 <TIM_OC5_SetConfig+0x7a>
 810aa46:	687b      	ldr	r3, [r7, #4]
 810aa48:	4a16      	ldr	r2, [pc, #88]	@ (810aaa4 <TIM_OC5_SetConfig+0xb8>)
 810aa4a:	4293      	cmp	r3, r2
 810aa4c:	d00b      	beq.n	810aa66 <TIM_OC5_SetConfig+0x7a>
 810aa4e:	687b      	ldr	r3, [r7, #4]
 810aa50:	4a15      	ldr	r2, [pc, #84]	@ (810aaa8 <TIM_OC5_SetConfig+0xbc>)
 810aa52:	4293      	cmp	r3, r2
 810aa54:	d007      	beq.n	810aa66 <TIM_OC5_SetConfig+0x7a>
 810aa56:	687b      	ldr	r3, [r7, #4]
 810aa58:	4a14      	ldr	r2, [pc, #80]	@ (810aaac <TIM_OC5_SetConfig+0xc0>)
 810aa5a:	4293      	cmp	r3, r2
 810aa5c:	d003      	beq.n	810aa66 <TIM_OC5_SetConfig+0x7a>
 810aa5e:	687b      	ldr	r3, [r7, #4]
 810aa60:	4a13      	ldr	r2, [pc, #76]	@ (810aab0 <TIM_OC5_SetConfig+0xc4>)
 810aa62:	4293      	cmp	r3, r2
 810aa64:	d109      	bne.n	810aa7a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810aa66:	697b      	ldr	r3, [r7, #20]
 810aa68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810aa6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810aa6e:	683b      	ldr	r3, [r7, #0]
 810aa70:	695b      	ldr	r3, [r3, #20]
 810aa72:	021b      	lsls	r3, r3, #8
 810aa74:	697a      	ldr	r2, [r7, #20]
 810aa76:	4313      	orrs	r3, r2
 810aa78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810aa7a:	687b      	ldr	r3, [r7, #4]
 810aa7c:	697a      	ldr	r2, [r7, #20]
 810aa7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810aa80:	687b      	ldr	r3, [r7, #4]
 810aa82:	68fa      	ldr	r2, [r7, #12]
 810aa84:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810aa86:	683b      	ldr	r3, [r7, #0]
 810aa88:	685a      	ldr	r2, [r3, #4]
 810aa8a:	687b      	ldr	r3, [r7, #4]
 810aa8c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810aa8e:	687b      	ldr	r3, [r7, #4]
 810aa90:	693a      	ldr	r2, [r7, #16]
 810aa92:	621a      	str	r2, [r3, #32]
}
 810aa94:	bf00      	nop
 810aa96:	371c      	adds	r7, #28
 810aa98:	46bd      	mov	sp, r7
 810aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa9e:	4770      	bx	lr
 810aaa0:	40010000 	.word	0x40010000
 810aaa4:	40010400 	.word	0x40010400
 810aaa8:	40014000 	.word	0x40014000
 810aaac:	40014400 	.word	0x40014400
 810aab0:	40014800 	.word	0x40014800

0810aab4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810aab4:	b480      	push	{r7}
 810aab6:	b087      	sub	sp, #28
 810aab8:	af00      	add	r7, sp, #0
 810aaba:	6078      	str	r0, [r7, #4]
 810aabc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810aabe:	687b      	ldr	r3, [r7, #4]
 810aac0:	6a1b      	ldr	r3, [r3, #32]
 810aac2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810aac4:	687b      	ldr	r3, [r7, #4]
 810aac6:	6a1b      	ldr	r3, [r3, #32]
 810aac8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 810aacc:	687b      	ldr	r3, [r7, #4]
 810aace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810aad0:	687b      	ldr	r3, [r7, #4]
 810aad2:	685b      	ldr	r3, [r3, #4]
 810aad4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810aad6:	687b      	ldr	r3, [r7, #4]
 810aad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810aada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810aadc:	68fb      	ldr	r3, [r7, #12]
 810aade:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810aae2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810aae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810aae8:	683b      	ldr	r3, [r7, #0]
 810aaea:	681b      	ldr	r3, [r3, #0]
 810aaec:	021b      	lsls	r3, r3, #8
 810aaee:	68fa      	ldr	r2, [r7, #12]
 810aaf0:	4313      	orrs	r3, r2
 810aaf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810aaf4:	693b      	ldr	r3, [r7, #16]
 810aaf6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810aafa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810aafc:	683b      	ldr	r3, [r7, #0]
 810aafe:	689b      	ldr	r3, [r3, #8]
 810ab00:	051b      	lsls	r3, r3, #20
 810ab02:	693a      	ldr	r2, [r7, #16]
 810ab04:	4313      	orrs	r3, r2
 810ab06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810ab08:	687b      	ldr	r3, [r7, #4]
 810ab0a:	4a18      	ldr	r2, [pc, #96]	@ (810ab6c <TIM_OC6_SetConfig+0xb8>)
 810ab0c:	4293      	cmp	r3, r2
 810ab0e:	d00f      	beq.n	810ab30 <TIM_OC6_SetConfig+0x7c>
 810ab10:	687b      	ldr	r3, [r7, #4]
 810ab12:	4a17      	ldr	r2, [pc, #92]	@ (810ab70 <TIM_OC6_SetConfig+0xbc>)
 810ab14:	4293      	cmp	r3, r2
 810ab16:	d00b      	beq.n	810ab30 <TIM_OC6_SetConfig+0x7c>
 810ab18:	687b      	ldr	r3, [r7, #4]
 810ab1a:	4a16      	ldr	r2, [pc, #88]	@ (810ab74 <TIM_OC6_SetConfig+0xc0>)
 810ab1c:	4293      	cmp	r3, r2
 810ab1e:	d007      	beq.n	810ab30 <TIM_OC6_SetConfig+0x7c>
 810ab20:	687b      	ldr	r3, [r7, #4]
 810ab22:	4a15      	ldr	r2, [pc, #84]	@ (810ab78 <TIM_OC6_SetConfig+0xc4>)
 810ab24:	4293      	cmp	r3, r2
 810ab26:	d003      	beq.n	810ab30 <TIM_OC6_SetConfig+0x7c>
 810ab28:	687b      	ldr	r3, [r7, #4]
 810ab2a:	4a14      	ldr	r2, [pc, #80]	@ (810ab7c <TIM_OC6_SetConfig+0xc8>)
 810ab2c:	4293      	cmp	r3, r2
 810ab2e:	d109      	bne.n	810ab44 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810ab30:	697b      	ldr	r3, [r7, #20]
 810ab32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 810ab36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810ab38:	683b      	ldr	r3, [r7, #0]
 810ab3a:	695b      	ldr	r3, [r3, #20]
 810ab3c:	029b      	lsls	r3, r3, #10
 810ab3e:	697a      	ldr	r2, [r7, #20]
 810ab40:	4313      	orrs	r3, r2
 810ab42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810ab44:	687b      	ldr	r3, [r7, #4]
 810ab46:	697a      	ldr	r2, [r7, #20]
 810ab48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810ab4a:	687b      	ldr	r3, [r7, #4]
 810ab4c:	68fa      	ldr	r2, [r7, #12]
 810ab4e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810ab50:	683b      	ldr	r3, [r7, #0]
 810ab52:	685a      	ldr	r2, [r3, #4]
 810ab54:	687b      	ldr	r3, [r7, #4]
 810ab56:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810ab58:	687b      	ldr	r3, [r7, #4]
 810ab5a:	693a      	ldr	r2, [r7, #16]
 810ab5c:	621a      	str	r2, [r3, #32]
}
 810ab5e:	bf00      	nop
 810ab60:	371c      	adds	r7, #28
 810ab62:	46bd      	mov	sp, r7
 810ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab68:	4770      	bx	lr
 810ab6a:	bf00      	nop
 810ab6c:	40010000 	.word	0x40010000
 810ab70:	40010400 	.word	0x40010400
 810ab74:	40014000 	.word	0x40014000
 810ab78:	40014400 	.word	0x40014400
 810ab7c:	40014800 	.word	0x40014800

0810ab80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810ab80:	b480      	push	{r7}
 810ab82:	b087      	sub	sp, #28
 810ab84:	af00      	add	r7, sp, #0
 810ab86:	60f8      	str	r0, [r7, #12]
 810ab88:	60b9      	str	r1, [r7, #8]
 810ab8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810ab8c:	68fb      	ldr	r3, [r7, #12]
 810ab8e:	6a1b      	ldr	r3, [r3, #32]
 810ab90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810ab92:	68fb      	ldr	r3, [r7, #12]
 810ab94:	6a1b      	ldr	r3, [r3, #32]
 810ab96:	f023 0201 	bic.w	r2, r3, #1
 810ab9a:	68fb      	ldr	r3, [r7, #12]
 810ab9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810ab9e:	68fb      	ldr	r3, [r7, #12]
 810aba0:	699b      	ldr	r3, [r3, #24]
 810aba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810aba4:	693b      	ldr	r3, [r7, #16]
 810aba6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810abaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 810abac:	687b      	ldr	r3, [r7, #4]
 810abae:	011b      	lsls	r3, r3, #4
 810abb0:	693a      	ldr	r2, [r7, #16]
 810abb2:	4313      	orrs	r3, r2
 810abb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810abb6:	697b      	ldr	r3, [r7, #20]
 810abb8:	f023 030a 	bic.w	r3, r3, #10
 810abbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810abbe:	697a      	ldr	r2, [r7, #20]
 810abc0:	68bb      	ldr	r3, [r7, #8]
 810abc2:	4313      	orrs	r3, r2
 810abc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810abc6:	68fb      	ldr	r3, [r7, #12]
 810abc8:	693a      	ldr	r2, [r7, #16]
 810abca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810abcc:	68fb      	ldr	r3, [r7, #12]
 810abce:	697a      	ldr	r2, [r7, #20]
 810abd0:	621a      	str	r2, [r3, #32]
}
 810abd2:	bf00      	nop
 810abd4:	371c      	adds	r7, #28
 810abd6:	46bd      	mov	sp, r7
 810abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810abdc:	4770      	bx	lr

0810abde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810abde:	b480      	push	{r7}
 810abe0:	b087      	sub	sp, #28
 810abe2:	af00      	add	r7, sp, #0
 810abe4:	60f8      	str	r0, [r7, #12]
 810abe6:	60b9      	str	r1, [r7, #8]
 810abe8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 810abea:	68fb      	ldr	r3, [r7, #12]
 810abec:	6a1b      	ldr	r3, [r3, #32]
 810abee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810abf0:	68fb      	ldr	r3, [r7, #12]
 810abf2:	6a1b      	ldr	r3, [r3, #32]
 810abf4:	f023 0210 	bic.w	r2, r3, #16
 810abf8:	68fb      	ldr	r3, [r7, #12]
 810abfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810abfc:	68fb      	ldr	r3, [r7, #12]
 810abfe:	699b      	ldr	r3, [r3, #24]
 810ac00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810ac02:	693b      	ldr	r3, [r7, #16]
 810ac04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810ac08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810ac0a:	687b      	ldr	r3, [r7, #4]
 810ac0c:	031b      	lsls	r3, r3, #12
 810ac0e:	693a      	ldr	r2, [r7, #16]
 810ac10:	4313      	orrs	r3, r2
 810ac12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810ac14:	697b      	ldr	r3, [r7, #20]
 810ac16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 810ac1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 810ac1c:	68bb      	ldr	r3, [r7, #8]
 810ac1e:	011b      	lsls	r3, r3, #4
 810ac20:	697a      	ldr	r2, [r7, #20]
 810ac22:	4313      	orrs	r3, r2
 810ac24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810ac26:	68fb      	ldr	r3, [r7, #12]
 810ac28:	693a      	ldr	r2, [r7, #16]
 810ac2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810ac2c:	68fb      	ldr	r3, [r7, #12]
 810ac2e:	697a      	ldr	r2, [r7, #20]
 810ac30:	621a      	str	r2, [r3, #32]
}
 810ac32:	bf00      	nop
 810ac34:	371c      	adds	r7, #28
 810ac36:	46bd      	mov	sp, r7
 810ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac3c:	4770      	bx	lr

0810ac3e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810ac3e:	b480      	push	{r7}
 810ac40:	b085      	sub	sp, #20
 810ac42:	af00      	add	r7, sp, #0
 810ac44:	6078      	str	r0, [r7, #4]
 810ac46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 810ac48:	687b      	ldr	r3, [r7, #4]
 810ac4a:	689b      	ldr	r3, [r3, #8]
 810ac4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810ac4e:	68fb      	ldr	r3, [r7, #12]
 810ac50:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 810ac54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810ac58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810ac5a:	683a      	ldr	r2, [r7, #0]
 810ac5c:	68fb      	ldr	r3, [r7, #12]
 810ac5e:	4313      	orrs	r3, r2
 810ac60:	f043 0307 	orr.w	r3, r3, #7
 810ac64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810ac66:	687b      	ldr	r3, [r7, #4]
 810ac68:	68fa      	ldr	r2, [r7, #12]
 810ac6a:	609a      	str	r2, [r3, #8]
}
 810ac6c:	bf00      	nop
 810ac6e:	3714      	adds	r7, #20
 810ac70:	46bd      	mov	sp, r7
 810ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac76:	4770      	bx	lr

0810ac78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 810ac78:	b480      	push	{r7}
 810ac7a:	b087      	sub	sp, #28
 810ac7c:	af00      	add	r7, sp, #0
 810ac7e:	60f8      	str	r0, [r7, #12]
 810ac80:	60b9      	str	r1, [r7, #8]
 810ac82:	607a      	str	r2, [r7, #4]
 810ac84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810ac86:	68fb      	ldr	r3, [r7, #12]
 810ac88:	689b      	ldr	r3, [r3, #8]
 810ac8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810ac8c:	697b      	ldr	r3, [r7, #20]
 810ac8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810ac92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810ac94:	683b      	ldr	r3, [r7, #0]
 810ac96:	021a      	lsls	r2, r3, #8
 810ac98:	687b      	ldr	r3, [r7, #4]
 810ac9a:	431a      	orrs	r2, r3
 810ac9c:	68bb      	ldr	r3, [r7, #8]
 810ac9e:	4313      	orrs	r3, r2
 810aca0:	697a      	ldr	r2, [r7, #20]
 810aca2:	4313      	orrs	r3, r2
 810aca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810aca6:	68fb      	ldr	r3, [r7, #12]
 810aca8:	697a      	ldr	r2, [r7, #20]
 810acaa:	609a      	str	r2, [r3, #8]
}
 810acac:	bf00      	nop
 810acae:	371c      	adds	r7, #28
 810acb0:	46bd      	mov	sp, r7
 810acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810acb6:	4770      	bx	lr

0810acb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 810acb8:	b480      	push	{r7}
 810acba:	b087      	sub	sp, #28
 810acbc:	af00      	add	r7, sp, #0
 810acbe:	60f8      	str	r0, [r7, #12]
 810acc0:	60b9      	str	r1, [r7, #8]
 810acc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 810acc4:	68bb      	ldr	r3, [r7, #8]
 810acc6:	f003 031f 	and.w	r3, r3, #31
 810acca:	2201      	movs	r2, #1
 810accc:	fa02 f303 	lsl.w	r3, r2, r3
 810acd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 810acd2:	68fb      	ldr	r3, [r7, #12]
 810acd4:	6a1a      	ldr	r2, [r3, #32]
 810acd6:	697b      	ldr	r3, [r7, #20]
 810acd8:	43db      	mvns	r3, r3
 810acda:	401a      	ands	r2, r3
 810acdc:	68fb      	ldr	r3, [r7, #12]
 810acde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 810ace0:	68fb      	ldr	r3, [r7, #12]
 810ace2:	6a1a      	ldr	r2, [r3, #32]
 810ace4:	68bb      	ldr	r3, [r7, #8]
 810ace6:	f003 031f 	and.w	r3, r3, #31
 810acea:	6879      	ldr	r1, [r7, #4]
 810acec:	fa01 f303 	lsl.w	r3, r1, r3
 810acf0:	431a      	orrs	r2, r3
 810acf2:	68fb      	ldr	r3, [r7, #12]
 810acf4:	621a      	str	r2, [r3, #32]
}
 810acf6:	bf00      	nop
 810acf8:	371c      	adds	r7, #28
 810acfa:	46bd      	mov	sp, r7
 810acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad00:	4770      	bx	lr
	...

0810ad04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810ad04:	b480      	push	{r7}
 810ad06:	b085      	sub	sp, #20
 810ad08:	af00      	add	r7, sp, #0
 810ad0a:	6078      	str	r0, [r7, #4]
 810ad0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810ad0e:	687b      	ldr	r3, [r7, #4]
 810ad10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810ad14:	2b01      	cmp	r3, #1
 810ad16:	d101      	bne.n	810ad1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810ad18:	2302      	movs	r3, #2
 810ad1a:	e06d      	b.n	810adf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810ad1c:	687b      	ldr	r3, [r7, #4]
 810ad1e:	2201      	movs	r2, #1
 810ad20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ad24:	687b      	ldr	r3, [r7, #4]
 810ad26:	2202      	movs	r2, #2
 810ad28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810ad2c:	687b      	ldr	r3, [r7, #4]
 810ad2e:	681b      	ldr	r3, [r3, #0]
 810ad30:	685b      	ldr	r3, [r3, #4]
 810ad32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810ad34:	687b      	ldr	r3, [r7, #4]
 810ad36:	681b      	ldr	r3, [r3, #0]
 810ad38:	689b      	ldr	r3, [r3, #8]
 810ad3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810ad3c:	687b      	ldr	r3, [r7, #4]
 810ad3e:	681b      	ldr	r3, [r3, #0]
 810ad40:	4a30      	ldr	r2, [pc, #192]	@ (810ae04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810ad42:	4293      	cmp	r3, r2
 810ad44:	d004      	beq.n	810ad50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810ad46:	687b      	ldr	r3, [r7, #4]
 810ad48:	681b      	ldr	r3, [r3, #0]
 810ad4a:	4a2f      	ldr	r2, [pc, #188]	@ (810ae08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810ad4c:	4293      	cmp	r3, r2
 810ad4e:	d108      	bne.n	810ad62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810ad50:	68fb      	ldr	r3, [r7, #12]
 810ad52:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810ad56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810ad58:	683b      	ldr	r3, [r7, #0]
 810ad5a:	685b      	ldr	r3, [r3, #4]
 810ad5c:	68fa      	ldr	r2, [r7, #12]
 810ad5e:	4313      	orrs	r3, r2
 810ad60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810ad62:	68fb      	ldr	r3, [r7, #12]
 810ad64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810ad68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810ad6a:	683b      	ldr	r3, [r7, #0]
 810ad6c:	681b      	ldr	r3, [r3, #0]
 810ad6e:	68fa      	ldr	r2, [r7, #12]
 810ad70:	4313      	orrs	r3, r2
 810ad72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810ad74:	687b      	ldr	r3, [r7, #4]
 810ad76:	681b      	ldr	r3, [r3, #0]
 810ad78:	68fa      	ldr	r2, [r7, #12]
 810ad7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810ad7c:	687b      	ldr	r3, [r7, #4]
 810ad7e:	681b      	ldr	r3, [r3, #0]
 810ad80:	4a20      	ldr	r2, [pc, #128]	@ (810ae04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810ad82:	4293      	cmp	r3, r2
 810ad84:	d022      	beq.n	810adcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810ad86:	687b      	ldr	r3, [r7, #4]
 810ad88:	681b      	ldr	r3, [r3, #0]
 810ad8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810ad8e:	d01d      	beq.n	810adcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810ad90:	687b      	ldr	r3, [r7, #4]
 810ad92:	681b      	ldr	r3, [r3, #0]
 810ad94:	4a1d      	ldr	r2, [pc, #116]	@ (810ae0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810ad96:	4293      	cmp	r3, r2
 810ad98:	d018      	beq.n	810adcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810ad9a:	687b      	ldr	r3, [r7, #4]
 810ad9c:	681b      	ldr	r3, [r3, #0]
 810ad9e:	4a1c      	ldr	r2, [pc, #112]	@ (810ae10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810ada0:	4293      	cmp	r3, r2
 810ada2:	d013      	beq.n	810adcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810ada4:	687b      	ldr	r3, [r7, #4]
 810ada6:	681b      	ldr	r3, [r3, #0]
 810ada8:	4a1a      	ldr	r2, [pc, #104]	@ (810ae14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810adaa:	4293      	cmp	r3, r2
 810adac:	d00e      	beq.n	810adcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810adae:	687b      	ldr	r3, [r7, #4]
 810adb0:	681b      	ldr	r3, [r3, #0]
 810adb2:	4a15      	ldr	r2, [pc, #84]	@ (810ae08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810adb4:	4293      	cmp	r3, r2
 810adb6:	d009      	beq.n	810adcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810adb8:	687b      	ldr	r3, [r7, #4]
 810adba:	681b      	ldr	r3, [r3, #0]
 810adbc:	4a16      	ldr	r2, [pc, #88]	@ (810ae18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810adbe:	4293      	cmp	r3, r2
 810adc0:	d004      	beq.n	810adcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810adc2:	687b      	ldr	r3, [r7, #4]
 810adc4:	681b      	ldr	r3, [r3, #0]
 810adc6:	4a15      	ldr	r2, [pc, #84]	@ (810ae1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810adc8:	4293      	cmp	r3, r2
 810adca:	d10c      	bne.n	810ade6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810adcc:	68bb      	ldr	r3, [r7, #8]
 810adce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810add2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810add4:	683b      	ldr	r3, [r7, #0]
 810add6:	689b      	ldr	r3, [r3, #8]
 810add8:	68ba      	ldr	r2, [r7, #8]
 810adda:	4313      	orrs	r3, r2
 810addc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810adde:	687b      	ldr	r3, [r7, #4]
 810ade0:	681b      	ldr	r3, [r3, #0]
 810ade2:	68ba      	ldr	r2, [r7, #8]
 810ade4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810ade6:	687b      	ldr	r3, [r7, #4]
 810ade8:	2201      	movs	r2, #1
 810adea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810adee:	687b      	ldr	r3, [r7, #4]
 810adf0:	2200      	movs	r2, #0
 810adf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810adf6:	2300      	movs	r3, #0
}
 810adf8:	4618      	mov	r0, r3
 810adfa:	3714      	adds	r7, #20
 810adfc:	46bd      	mov	sp, r7
 810adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae02:	4770      	bx	lr
 810ae04:	40010000 	.word	0x40010000
 810ae08:	40010400 	.word	0x40010400
 810ae0c:	40000400 	.word	0x40000400
 810ae10:	40000800 	.word	0x40000800
 810ae14:	40000c00 	.word	0x40000c00
 810ae18:	40001800 	.word	0x40001800
 810ae1c:	40014000 	.word	0x40014000

0810ae20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810ae20:	b480      	push	{r7}
 810ae22:	b085      	sub	sp, #20
 810ae24:	af00      	add	r7, sp, #0
 810ae26:	6078      	str	r0, [r7, #4]
 810ae28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810ae2a:	2300      	movs	r3, #0
 810ae2c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 810ae2e:	687b      	ldr	r3, [r7, #4]
 810ae30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810ae34:	2b01      	cmp	r3, #1
 810ae36:	d101      	bne.n	810ae3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810ae38:	2302      	movs	r3, #2
 810ae3a:	e065      	b.n	810af08 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810ae3c:	687b      	ldr	r3, [r7, #4]
 810ae3e:	2201      	movs	r2, #1
 810ae40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810ae44:	68fb      	ldr	r3, [r7, #12]
 810ae46:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810ae4a:	683b      	ldr	r3, [r7, #0]
 810ae4c:	68db      	ldr	r3, [r3, #12]
 810ae4e:	4313      	orrs	r3, r2
 810ae50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810ae52:	68fb      	ldr	r3, [r7, #12]
 810ae54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810ae58:	683b      	ldr	r3, [r7, #0]
 810ae5a:	689b      	ldr	r3, [r3, #8]
 810ae5c:	4313      	orrs	r3, r2
 810ae5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810ae60:	68fb      	ldr	r3, [r7, #12]
 810ae62:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 810ae66:	683b      	ldr	r3, [r7, #0]
 810ae68:	685b      	ldr	r3, [r3, #4]
 810ae6a:	4313      	orrs	r3, r2
 810ae6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810ae6e:	68fb      	ldr	r3, [r7, #12]
 810ae70:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 810ae74:	683b      	ldr	r3, [r7, #0]
 810ae76:	681b      	ldr	r3, [r3, #0]
 810ae78:	4313      	orrs	r3, r2
 810ae7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810ae7c:	68fb      	ldr	r3, [r7, #12]
 810ae7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810ae82:	683b      	ldr	r3, [r7, #0]
 810ae84:	691b      	ldr	r3, [r3, #16]
 810ae86:	4313      	orrs	r3, r2
 810ae88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810ae8a:	68fb      	ldr	r3, [r7, #12]
 810ae8c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 810ae90:	683b      	ldr	r3, [r7, #0]
 810ae92:	695b      	ldr	r3, [r3, #20]
 810ae94:	4313      	orrs	r3, r2
 810ae96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810ae98:	68fb      	ldr	r3, [r7, #12]
 810ae9a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 810ae9e:	683b      	ldr	r3, [r7, #0]
 810aea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810aea2:	4313      	orrs	r3, r2
 810aea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810aea6:	68fb      	ldr	r3, [r7, #12]
 810aea8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 810aeac:	683b      	ldr	r3, [r7, #0]
 810aeae:	699b      	ldr	r3, [r3, #24]
 810aeb0:	041b      	lsls	r3, r3, #16
 810aeb2:	4313      	orrs	r3, r2
 810aeb4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810aeb6:	687b      	ldr	r3, [r7, #4]
 810aeb8:	681b      	ldr	r3, [r3, #0]
 810aeba:	4a16      	ldr	r2, [pc, #88]	@ (810af14 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810aebc:	4293      	cmp	r3, r2
 810aebe:	d004      	beq.n	810aeca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810aec0:	687b      	ldr	r3, [r7, #4]
 810aec2:	681b      	ldr	r3, [r3, #0]
 810aec4:	4a14      	ldr	r2, [pc, #80]	@ (810af18 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810aec6:	4293      	cmp	r3, r2
 810aec8:	d115      	bne.n	810aef6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810aeca:	68fb      	ldr	r3, [r7, #12]
 810aecc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 810aed0:	683b      	ldr	r3, [r7, #0]
 810aed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810aed4:	051b      	lsls	r3, r3, #20
 810aed6:	4313      	orrs	r3, r2
 810aed8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810aeda:	68fb      	ldr	r3, [r7, #12]
 810aedc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 810aee0:	683b      	ldr	r3, [r7, #0]
 810aee2:	69db      	ldr	r3, [r3, #28]
 810aee4:	4313      	orrs	r3, r2
 810aee6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810aee8:	68fb      	ldr	r3, [r7, #12]
 810aeea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 810aeee:	683b      	ldr	r3, [r7, #0]
 810aef0:	6a1b      	ldr	r3, [r3, #32]
 810aef2:	4313      	orrs	r3, r2
 810aef4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810aef6:	687b      	ldr	r3, [r7, #4]
 810aef8:	681b      	ldr	r3, [r3, #0]
 810aefa:	68fa      	ldr	r2, [r7, #12]
 810aefc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 810aefe:	687b      	ldr	r3, [r7, #4]
 810af00:	2200      	movs	r2, #0
 810af02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810af06:	2300      	movs	r3, #0
}
 810af08:	4618      	mov	r0, r3
 810af0a:	3714      	adds	r7, #20
 810af0c:	46bd      	mov	sp, r7
 810af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af12:	4770      	bx	lr
 810af14:	40010000 	.word	0x40010000
 810af18:	40010400 	.word	0x40010400

0810af1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810af1c:	b480      	push	{r7}
 810af1e:	b083      	sub	sp, #12
 810af20:	af00      	add	r7, sp, #0
 810af22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810af24:	bf00      	nop
 810af26:	370c      	adds	r7, #12
 810af28:	46bd      	mov	sp, r7
 810af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af2e:	4770      	bx	lr

0810af30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810af30:	b480      	push	{r7}
 810af32:	b083      	sub	sp, #12
 810af34:	af00      	add	r7, sp, #0
 810af36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810af38:	bf00      	nop
 810af3a:	370c      	adds	r7, #12
 810af3c:	46bd      	mov	sp, r7
 810af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af42:	4770      	bx	lr

0810af44 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810af44:	b480      	push	{r7}
 810af46:	b083      	sub	sp, #12
 810af48:	af00      	add	r7, sp, #0
 810af4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810af4c:	bf00      	nop
 810af4e:	370c      	adds	r7, #12
 810af50:	46bd      	mov	sp, r7
 810af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af56:	4770      	bx	lr

0810af58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810af58:	b580      	push	{r7, lr}
 810af5a:	b082      	sub	sp, #8
 810af5c:	af00      	add	r7, sp, #0
 810af5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810af60:	687b      	ldr	r3, [r7, #4]
 810af62:	2b00      	cmp	r3, #0
 810af64:	d101      	bne.n	810af6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810af66:	2301      	movs	r3, #1
 810af68:	e042      	b.n	810aff0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810af6a:	687b      	ldr	r3, [r7, #4]
 810af6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810af70:	2b00      	cmp	r3, #0
 810af72:	d106      	bne.n	810af82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810af74:	687b      	ldr	r3, [r7, #4]
 810af76:	2200      	movs	r2, #0
 810af78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810af7c:	6878      	ldr	r0, [r7, #4]
 810af7e:	f7f8 fc07 	bl	8103790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810af82:	687b      	ldr	r3, [r7, #4]
 810af84:	2224      	movs	r2, #36	@ 0x24
 810af86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810af8a:	687b      	ldr	r3, [r7, #4]
 810af8c:	681b      	ldr	r3, [r3, #0]
 810af8e:	681a      	ldr	r2, [r3, #0]
 810af90:	687b      	ldr	r3, [r7, #4]
 810af92:	681b      	ldr	r3, [r3, #0]
 810af94:	f022 0201 	bic.w	r2, r2, #1
 810af98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810af9a:	687b      	ldr	r3, [r7, #4]
 810af9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810af9e:	2b00      	cmp	r3, #0
 810afa0:	d002      	beq.n	810afa8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810afa2:	6878      	ldr	r0, [r7, #4]
 810afa4:	f000 fee6 	bl	810bd74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810afa8:	6878      	ldr	r0, [r7, #4]
 810afaa:	f000 f97b 	bl	810b2a4 <UART_SetConfig>
 810afae:	4603      	mov	r3, r0
 810afb0:	2b01      	cmp	r3, #1
 810afb2:	d101      	bne.n	810afb8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 810afb4:	2301      	movs	r3, #1
 810afb6:	e01b      	b.n	810aff0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810afb8:	687b      	ldr	r3, [r7, #4]
 810afba:	681b      	ldr	r3, [r3, #0]
 810afbc:	685a      	ldr	r2, [r3, #4]
 810afbe:	687b      	ldr	r3, [r7, #4]
 810afc0:	681b      	ldr	r3, [r3, #0]
 810afc2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810afc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810afc8:	687b      	ldr	r3, [r7, #4]
 810afca:	681b      	ldr	r3, [r3, #0]
 810afcc:	689a      	ldr	r2, [r3, #8]
 810afce:	687b      	ldr	r3, [r7, #4]
 810afd0:	681b      	ldr	r3, [r3, #0]
 810afd2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810afd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810afd8:	687b      	ldr	r3, [r7, #4]
 810afda:	681b      	ldr	r3, [r3, #0]
 810afdc:	681a      	ldr	r2, [r3, #0]
 810afde:	687b      	ldr	r3, [r7, #4]
 810afe0:	681b      	ldr	r3, [r3, #0]
 810afe2:	f042 0201 	orr.w	r2, r2, #1
 810afe6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810afe8:	6878      	ldr	r0, [r7, #4]
 810afea:	f000 ff65 	bl	810beb8 <UART_CheckIdleState>
 810afee:	4603      	mov	r3, r0
}
 810aff0:	4618      	mov	r0, r3
 810aff2:	3708      	adds	r7, #8
 810aff4:	46bd      	mov	sp, r7
 810aff6:	bd80      	pop	{r7, pc}

0810aff8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810aff8:	b580      	push	{r7, lr}
 810affa:	b08a      	sub	sp, #40	@ 0x28
 810affc:	af02      	add	r7, sp, #8
 810affe:	60f8      	str	r0, [r7, #12]
 810b000:	60b9      	str	r1, [r7, #8]
 810b002:	603b      	str	r3, [r7, #0]
 810b004:	4613      	mov	r3, r2
 810b006:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810b008:	68fb      	ldr	r3, [r7, #12]
 810b00a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810b00e:	2b20      	cmp	r3, #32
 810b010:	d17b      	bne.n	810b10a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 810b012:	68bb      	ldr	r3, [r7, #8]
 810b014:	2b00      	cmp	r3, #0
 810b016:	d002      	beq.n	810b01e <HAL_UART_Transmit+0x26>
 810b018:	88fb      	ldrh	r3, [r7, #6]
 810b01a:	2b00      	cmp	r3, #0
 810b01c:	d101      	bne.n	810b022 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810b01e:	2301      	movs	r3, #1
 810b020:	e074      	b.n	810b10c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b022:	68fb      	ldr	r3, [r7, #12]
 810b024:	2200      	movs	r2, #0
 810b026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810b02a:	68fb      	ldr	r3, [r7, #12]
 810b02c:	2221      	movs	r2, #33	@ 0x21
 810b02e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810b032:	f7f8 fdf9 	bl	8103c28 <HAL_GetTick>
 810b036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810b038:	68fb      	ldr	r3, [r7, #12]
 810b03a:	88fa      	ldrh	r2, [r7, #6]
 810b03c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 810b040:	68fb      	ldr	r3, [r7, #12]
 810b042:	88fa      	ldrh	r2, [r7, #6]
 810b044:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810b048:	68fb      	ldr	r3, [r7, #12]
 810b04a:	689b      	ldr	r3, [r3, #8]
 810b04c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b050:	d108      	bne.n	810b064 <HAL_UART_Transmit+0x6c>
 810b052:	68fb      	ldr	r3, [r7, #12]
 810b054:	691b      	ldr	r3, [r3, #16]
 810b056:	2b00      	cmp	r3, #0
 810b058:	d104      	bne.n	810b064 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810b05a:	2300      	movs	r3, #0
 810b05c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810b05e:	68bb      	ldr	r3, [r7, #8]
 810b060:	61bb      	str	r3, [r7, #24]
 810b062:	e003      	b.n	810b06c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 810b064:	68bb      	ldr	r3, [r7, #8]
 810b066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810b068:	2300      	movs	r3, #0
 810b06a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 810b06c:	e030      	b.n	810b0d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810b06e:	683b      	ldr	r3, [r7, #0]
 810b070:	9300      	str	r3, [sp, #0]
 810b072:	697b      	ldr	r3, [r7, #20]
 810b074:	2200      	movs	r2, #0
 810b076:	2180      	movs	r1, #128	@ 0x80
 810b078:	68f8      	ldr	r0, [r7, #12]
 810b07a:	f000 ffc7 	bl	810c00c <UART_WaitOnFlagUntilTimeout>
 810b07e:	4603      	mov	r3, r0
 810b080:	2b00      	cmp	r3, #0
 810b082:	d005      	beq.n	810b090 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 810b084:	68fb      	ldr	r3, [r7, #12]
 810b086:	2220      	movs	r2, #32
 810b088:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 810b08c:	2303      	movs	r3, #3
 810b08e:	e03d      	b.n	810b10c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 810b090:	69fb      	ldr	r3, [r7, #28]
 810b092:	2b00      	cmp	r3, #0
 810b094:	d10b      	bne.n	810b0ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810b096:	69bb      	ldr	r3, [r7, #24]
 810b098:	881b      	ldrh	r3, [r3, #0]
 810b09a:	461a      	mov	r2, r3
 810b09c:	68fb      	ldr	r3, [r7, #12]
 810b09e:	681b      	ldr	r3, [r3, #0]
 810b0a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810b0a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 810b0a6:	69bb      	ldr	r3, [r7, #24]
 810b0a8:	3302      	adds	r3, #2
 810b0aa:	61bb      	str	r3, [r7, #24]
 810b0ac:	e007      	b.n	810b0be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810b0ae:	69fb      	ldr	r3, [r7, #28]
 810b0b0:	781a      	ldrb	r2, [r3, #0]
 810b0b2:	68fb      	ldr	r3, [r7, #12]
 810b0b4:	681b      	ldr	r3, [r3, #0]
 810b0b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 810b0b8:	69fb      	ldr	r3, [r7, #28]
 810b0ba:	3301      	adds	r3, #1
 810b0bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810b0be:	68fb      	ldr	r3, [r7, #12]
 810b0c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810b0c4:	b29b      	uxth	r3, r3
 810b0c6:	3b01      	subs	r3, #1
 810b0c8:	b29a      	uxth	r2, r3
 810b0ca:	68fb      	ldr	r3, [r7, #12]
 810b0cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 810b0d0:	68fb      	ldr	r3, [r7, #12]
 810b0d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810b0d6:	b29b      	uxth	r3, r3
 810b0d8:	2b00      	cmp	r3, #0
 810b0da:	d1c8      	bne.n	810b06e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810b0dc:	683b      	ldr	r3, [r7, #0]
 810b0de:	9300      	str	r3, [sp, #0]
 810b0e0:	697b      	ldr	r3, [r7, #20]
 810b0e2:	2200      	movs	r2, #0
 810b0e4:	2140      	movs	r1, #64	@ 0x40
 810b0e6:	68f8      	ldr	r0, [r7, #12]
 810b0e8:	f000 ff90 	bl	810c00c <UART_WaitOnFlagUntilTimeout>
 810b0ec:	4603      	mov	r3, r0
 810b0ee:	2b00      	cmp	r3, #0
 810b0f0:	d005      	beq.n	810b0fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 810b0f2:	68fb      	ldr	r3, [r7, #12]
 810b0f4:	2220      	movs	r2, #32
 810b0f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810b0fa:	2303      	movs	r3, #3
 810b0fc:	e006      	b.n	810b10c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810b0fe:	68fb      	ldr	r3, [r7, #12]
 810b100:	2220      	movs	r2, #32
 810b102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 810b106:	2300      	movs	r3, #0
 810b108:	e000      	b.n	810b10c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810b10a:	2302      	movs	r3, #2
  }
}
 810b10c:	4618      	mov	r0, r3
 810b10e:	3720      	adds	r7, #32
 810b110:	46bd      	mov	sp, r7
 810b112:	bd80      	pop	{r7, pc}

0810b114 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810b114:	b580      	push	{r7, lr}
 810b116:	b08a      	sub	sp, #40	@ 0x28
 810b118:	af02      	add	r7, sp, #8
 810b11a:	60f8      	str	r0, [r7, #12]
 810b11c:	60b9      	str	r1, [r7, #8]
 810b11e:	603b      	str	r3, [r7, #0]
 810b120:	4613      	mov	r3, r2
 810b122:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810b124:	68fb      	ldr	r3, [r7, #12]
 810b126:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b12a:	2b20      	cmp	r3, #32
 810b12c:	f040 80b5 	bne.w	810b29a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 810b130:	68bb      	ldr	r3, [r7, #8]
 810b132:	2b00      	cmp	r3, #0
 810b134:	d002      	beq.n	810b13c <HAL_UART_Receive+0x28>
 810b136:	88fb      	ldrh	r3, [r7, #6]
 810b138:	2b00      	cmp	r3, #0
 810b13a:	d101      	bne.n	810b140 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 810b13c:	2301      	movs	r3, #1
 810b13e:	e0ad      	b.n	810b29c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b140:	68fb      	ldr	r3, [r7, #12]
 810b142:	2200      	movs	r2, #0
 810b144:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 810b148:	68fb      	ldr	r3, [r7, #12]
 810b14a:	2222      	movs	r2, #34	@ 0x22
 810b14c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b150:	68fb      	ldr	r3, [r7, #12]
 810b152:	2200      	movs	r2, #0
 810b154:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810b156:	f7f8 fd67 	bl	8103c28 <HAL_GetTick>
 810b15a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 810b15c:	68fb      	ldr	r3, [r7, #12]
 810b15e:	88fa      	ldrh	r2, [r7, #6]
 810b160:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 810b164:	68fb      	ldr	r3, [r7, #12]
 810b166:	88fa      	ldrh	r2, [r7, #6]
 810b168:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 810b16c:	68fb      	ldr	r3, [r7, #12]
 810b16e:	689b      	ldr	r3, [r3, #8]
 810b170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b174:	d10e      	bne.n	810b194 <HAL_UART_Receive+0x80>
 810b176:	68fb      	ldr	r3, [r7, #12]
 810b178:	691b      	ldr	r3, [r3, #16]
 810b17a:	2b00      	cmp	r3, #0
 810b17c:	d105      	bne.n	810b18a <HAL_UART_Receive+0x76>
 810b17e:	68fb      	ldr	r3, [r7, #12]
 810b180:	f240 12ff 	movw	r2, #511	@ 0x1ff
 810b184:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810b188:	e02d      	b.n	810b1e6 <HAL_UART_Receive+0xd2>
 810b18a:	68fb      	ldr	r3, [r7, #12]
 810b18c:	22ff      	movs	r2, #255	@ 0xff
 810b18e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810b192:	e028      	b.n	810b1e6 <HAL_UART_Receive+0xd2>
 810b194:	68fb      	ldr	r3, [r7, #12]
 810b196:	689b      	ldr	r3, [r3, #8]
 810b198:	2b00      	cmp	r3, #0
 810b19a:	d10d      	bne.n	810b1b8 <HAL_UART_Receive+0xa4>
 810b19c:	68fb      	ldr	r3, [r7, #12]
 810b19e:	691b      	ldr	r3, [r3, #16]
 810b1a0:	2b00      	cmp	r3, #0
 810b1a2:	d104      	bne.n	810b1ae <HAL_UART_Receive+0x9a>
 810b1a4:	68fb      	ldr	r3, [r7, #12]
 810b1a6:	22ff      	movs	r2, #255	@ 0xff
 810b1a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810b1ac:	e01b      	b.n	810b1e6 <HAL_UART_Receive+0xd2>
 810b1ae:	68fb      	ldr	r3, [r7, #12]
 810b1b0:	227f      	movs	r2, #127	@ 0x7f
 810b1b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810b1b6:	e016      	b.n	810b1e6 <HAL_UART_Receive+0xd2>
 810b1b8:	68fb      	ldr	r3, [r7, #12]
 810b1ba:	689b      	ldr	r3, [r3, #8]
 810b1bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810b1c0:	d10d      	bne.n	810b1de <HAL_UART_Receive+0xca>
 810b1c2:	68fb      	ldr	r3, [r7, #12]
 810b1c4:	691b      	ldr	r3, [r3, #16]
 810b1c6:	2b00      	cmp	r3, #0
 810b1c8:	d104      	bne.n	810b1d4 <HAL_UART_Receive+0xc0>
 810b1ca:	68fb      	ldr	r3, [r7, #12]
 810b1cc:	227f      	movs	r2, #127	@ 0x7f
 810b1ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810b1d2:	e008      	b.n	810b1e6 <HAL_UART_Receive+0xd2>
 810b1d4:	68fb      	ldr	r3, [r7, #12]
 810b1d6:	223f      	movs	r2, #63	@ 0x3f
 810b1d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810b1dc:	e003      	b.n	810b1e6 <HAL_UART_Receive+0xd2>
 810b1de:	68fb      	ldr	r3, [r7, #12]
 810b1e0:	2200      	movs	r2, #0
 810b1e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 810b1e6:	68fb      	ldr	r3, [r7, #12]
 810b1e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810b1ec:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810b1ee:	68fb      	ldr	r3, [r7, #12]
 810b1f0:	689b      	ldr	r3, [r3, #8]
 810b1f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b1f6:	d108      	bne.n	810b20a <HAL_UART_Receive+0xf6>
 810b1f8:	68fb      	ldr	r3, [r7, #12]
 810b1fa:	691b      	ldr	r3, [r3, #16]
 810b1fc:	2b00      	cmp	r3, #0
 810b1fe:	d104      	bne.n	810b20a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 810b200:	2300      	movs	r3, #0
 810b202:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 810b204:	68bb      	ldr	r3, [r7, #8]
 810b206:	61bb      	str	r3, [r7, #24]
 810b208:	e003      	b.n	810b212 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 810b20a:	68bb      	ldr	r3, [r7, #8]
 810b20c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810b20e:	2300      	movs	r3, #0
 810b210:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 810b212:	e036      	b.n	810b282 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 810b214:	683b      	ldr	r3, [r7, #0]
 810b216:	9300      	str	r3, [sp, #0]
 810b218:	697b      	ldr	r3, [r7, #20]
 810b21a:	2200      	movs	r2, #0
 810b21c:	2120      	movs	r1, #32
 810b21e:	68f8      	ldr	r0, [r7, #12]
 810b220:	f000 fef4 	bl	810c00c <UART_WaitOnFlagUntilTimeout>
 810b224:	4603      	mov	r3, r0
 810b226:	2b00      	cmp	r3, #0
 810b228:	d005      	beq.n	810b236 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 810b22a:	68fb      	ldr	r3, [r7, #12]
 810b22c:	2220      	movs	r2, #32
 810b22e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 810b232:	2303      	movs	r3, #3
 810b234:	e032      	b.n	810b29c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 810b236:	69fb      	ldr	r3, [r7, #28]
 810b238:	2b00      	cmp	r3, #0
 810b23a:	d10c      	bne.n	810b256 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 810b23c:	68fb      	ldr	r3, [r7, #12]
 810b23e:	681b      	ldr	r3, [r3, #0]
 810b240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b242:	b29a      	uxth	r2, r3
 810b244:	8a7b      	ldrh	r3, [r7, #18]
 810b246:	4013      	ands	r3, r2
 810b248:	b29a      	uxth	r2, r3
 810b24a:	69bb      	ldr	r3, [r7, #24]
 810b24c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 810b24e:	69bb      	ldr	r3, [r7, #24]
 810b250:	3302      	adds	r3, #2
 810b252:	61bb      	str	r3, [r7, #24]
 810b254:	e00c      	b.n	810b270 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 810b256:	68fb      	ldr	r3, [r7, #12]
 810b258:	681b      	ldr	r3, [r3, #0]
 810b25a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b25c:	b2da      	uxtb	r2, r3
 810b25e:	8a7b      	ldrh	r3, [r7, #18]
 810b260:	b2db      	uxtb	r3, r3
 810b262:	4013      	ands	r3, r2
 810b264:	b2da      	uxtb	r2, r3
 810b266:	69fb      	ldr	r3, [r7, #28]
 810b268:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 810b26a:	69fb      	ldr	r3, [r7, #28]
 810b26c:	3301      	adds	r3, #1
 810b26e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 810b270:	68fb      	ldr	r3, [r7, #12]
 810b272:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b276:	b29b      	uxth	r3, r3
 810b278:	3b01      	subs	r3, #1
 810b27a:	b29a      	uxth	r2, r3
 810b27c:	68fb      	ldr	r3, [r7, #12]
 810b27e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 810b282:	68fb      	ldr	r3, [r7, #12]
 810b284:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b288:	b29b      	uxth	r3, r3
 810b28a:	2b00      	cmp	r3, #0
 810b28c:	d1c2      	bne.n	810b214 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810b28e:	68fb      	ldr	r3, [r7, #12]
 810b290:	2220      	movs	r2, #32
 810b292:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 810b296:	2300      	movs	r3, #0
 810b298:	e000      	b.n	810b29c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 810b29a:	2302      	movs	r3, #2
  }
}
 810b29c:	4618      	mov	r0, r3
 810b29e:	3720      	adds	r7, #32
 810b2a0:	46bd      	mov	sp, r7
 810b2a2:	bd80      	pop	{r7, pc}

0810b2a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810b2a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810b2a8:	b092      	sub	sp, #72	@ 0x48
 810b2aa:	af00      	add	r7, sp, #0
 810b2ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810b2ae:	2300      	movs	r3, #0
 810b2b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810b2b4:	697b      	ldr	r3, [r7, #20]
 810b2b6:	689a      	ldr	r2, [r3, #8]
 810b2b8:	697b      	ldr	r3, [r7, #20]
 810b2ba:	691b      	ldr	r3, [r3, #16]
 810b2bc:	431a      	orrs	r2, r3
 810b2be:	697b      	ldr	r3, [r7, #20]
 810b2c0:	695b      	ldr	r3, [r3, #20]
 810b2c2:	431a      	orrs	r2, r3
 810b2c4:	697b      	ldr	r3, [r7, #20]
 810b2c6:	69db      	ldr	r3, [r3, #28]
 810b2c8:	4313      	orrs	r3, r2
 810b2ca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810b2cc:	697b      	ldr	r3, [r7, #20]
 810b2ce:	681b      	ldr	r3, [r3, #0]
 810b2d0:	681a      	ldr	r2, [r3, #0]
 810b2d2:	4bbd      	ldr	r3, [pc, #756]	@ (810b5c8 <UART_SetConfig+0x324>)
 810b2d4:	4013      	ands	r3, r2
 810b2d6:	697a      	ldr	r2, [r7, #20]
 810b2d8:	6812      	ldr	r2, [r2, #0]
 810b2da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810b2dc:	430b      	orrs	r3, r1
 810b2de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810b2e0:	697b      	ldr	r3, [r7, #20]
 810b2e2:	681b      	ldr	r3, [r3, #0]
 810b2e4:	685b      	ldr	r3, [r3, #4]
 810b2e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810b2ea:	697b      	ldr	r3, [r7, #20]
 810b2ec:	68da      	ldr	r2, [r3, #12]
 810b2ee:	697b      	ldr	r3, [r7, #20]
 810b2f0:	681b      	ldr	r3, [r3, #0]
 810b2f2:	430a      	orrs	r2, r1
 810b2f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810b2f6:	697b      	ldr	r3, [r7, #20]
 810b2f8:	699b      	ldr	r3, [r3, #24]
 810b2fa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810b2fc:	697b      	ldr	r3, [r7, #20]
 810b2fe:	681b      	ldr	r3, [r3, #0]
 810b300:	4ab2      	ldr	r2, [pc, #712]	@ (810b5cc <UART_SetConfig+0x328>)
 810b302:	4293      	cmp	r3, r2
 810b304:	d004      	beq.n	810b310 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810b306:	697b      	ldr	r3, [r7, #20]
 810b308:	6a1b      	ldr	r3, [r3, #32]
 810b30a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810b30c:	4313      	orrs	r3, r2
 810b30e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810b310:	697b      	ldr	r3, [r7, #20]
 810b312:	681b      	ldr	r3, [r3, #0]
 810b314:	689b      	ldr	r3, [r3, #8]
 810b316:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810b31a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810b31e:	697a      	ldr	r2, [r7, #20]
 810b320:	6812      	ldr	r2, [r2, #0]
 810b322:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810b324:	430b      	orrs	r3, r1
 810b326:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810b328:	697b      	ldr	r3, [r7, #20]
 810b32a:	681b      	ldr	r3, [r3, #0]
 810b32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b32e:	f023 010f 	bic.w	r1, r3, #15
 810b332:	697b      	ldr	r3, [r7, #20]
 810b334:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810b336:	697b      	ldr	r3, [r7, #20]
 810b338:	681b      	ldr	r3, [r3, #0]
 810b33a:	430a      	orrs	r2, r1
 810b33c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810b33e:	697b      	ldr	r3, [r7, #20]
 810b340:	681b      	ldr	r3, [r3, #0]
 810b342:	4aa3      	ldr	r2, [pc, #652]	@ (810b5d0 <UART_SetConfig+0x32c>)
 810b344:	4293      	cmp	r3, r2
 810b346:	d177      	bne.n	810b438 <UART_SetConfig+0x194>
 810b348:	4ba2      	ldr	r3, [pc, #648]	@ (810b5d4 <UART_SetConfig+0x330>)
 810b34a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b34c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810b350:	2b28      	cmp	r3, #40	@ 0x28
 810b352:	d86d      	bhi.n	810b430 <UART_SetConfig+0x18c>
 810b354:	a201      	add	r2, pc, #4	@ (adr r2, 810b35c <UART_SetConfig+0xb8>)
 810b356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b35a:	bf00      	nop
 810b35c:	0810b401 	.word	0x0810b401
 810b360:	0810b431 	.word	0x0810b431
 810b364:	0810b431 	.word	0x0810b431
 810b368:	0810b431 	.word	0x0810b431
 810b36c:	0810b431 	.word	0x0810b431
 810b370:	0810b431 	.word	0x0810b431
 810b374:	0810b431 	.word	0x0810b431
 810b378:	0810b431 	.word	0x0810b431
 810b37c:	0810b409 	.word	0x0810b409
 810b380:	0810b431 	.word	0x0810b431
 810b384:	0810b431 	.word	0x0810b431
 810b388:	0810b431 	.word	0x0810b431
 810b38c:	0810b431 	.word	0x0810b431
 810b390:	0810b431 	.word	0x0810b431
 810b394:	0810b431 	.word	0x0810b431
 810b398:	0810b431 	.word	0x0810b431
 810b39c:	0810b411 	.word	0x0810b411
 810b3a0:	0810b431 	.word	0x0810b431
 810b3a4:	0810b431 	.word	0x0810b431
 810b3a8:	0810b431 	.word	0x0810b431
 810b3ac:	0810b431 	.word	0x0810b431
 810b3b0:	0810b431 	.word	0x0810b431
 810b3b4:	0810b431 	.word	0x0810b431
 810b3b8:	0810b431 	.word	0x0810b431
 810b3bc:	0810b419 	.word	0x0810b419
 810b3c0:	0810b431 	.word	0x0810b431
 810b3c4:	0810b431 	.word	0x0810b431
 810b3c8:	0810b431 	.word	0x0810b431
 810b3cc:	0810b431 	.word	0x0810b431
 810b3d0:	0810b431 	.word	0x0810b431
 810b3d4:	0810b431 	.word	0x0810b431
 810b3d8:	0810b431 	.word	0x0810b431
 810b3dc:	0810b421 	.word	0x0810b421
 810b3e0:	0810b431 	.word	0x0810b431
 810b3e4:	0810b431 	.word	0x0810b431
 810b3e8:	0810b431 	.word	0x0810b431
 810b3ec:	0810b431 	.word	0x0810b431
 810b3f0:	0810b431 	.word	0x0810b431
 810b3f4:	0810b431 	.word	0x0810b431
 810b3f8:	0810b431 	.word	0x0810b431
 810b3fc:	0810b429 	.word	0x0810b429
 810b400:	2301      	movs	r3, #1
 810b402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b406:	e220      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b408:	2304      	movs	r3, #4
 810b40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b40e:	e21c      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b410:	2308      	movs	r3, #8
 810b412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b416:	e218      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b418:	2310      	movs	r3, #16
 810b41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b41e:	e214      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b420:	2320      	movs	r3, #32
 810b422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b426:	e210      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b428:	2340      	movs	r3, #64	@ 0x40
 810b42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b42e:	e20c      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b430:	2380      	movs	r3, #128	@ 0x80
 810b432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b436:	e208      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b438:	697b      	ldr	r3, [r7, #20]
 810b43a:	681b      	ldr	r3, [r3, #0]
 810b43c:	4a66      	ldr	r2, [pc, #408]	@ (810b5d8 <UART_SetConfig+0x334>)
 810b43e:	4293      	cmp	r3, r2
 810b440:	d130      	bne.n	810b4a4 <UART_SetConfig+0x200>
 810b442:	4b64      	ldr	r3, [pc, #400]	@ (810b5d4 <UART_SetConfig+0x330>)
 810b444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b446:	f003 0307 	and.w	r3, r3, #7
 810b44a:	2b05      	cmp	r3, #5
 810b44c:	d826      	bhi.n	810b49c <UART_SetConfig+0x1f8>
 810b44e:	a201      	add	r2, pc, #4	@ (adr r2, 810b454 <UART_SetConfig+0x1b0>)
 810b450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b454:	0810b46d 	.word	0x0810b46d
 810b458:	0810b475 	.word	0x0810b475
 810b45c:	0810b47d 	.word	0x0810b47d
 810b460:	0810b485 	.word	0x0810b485
 810b464:	0810b48d 	.word	0x0810b48d
 810b468:	0810b495 	.word	0x0810b495
 810b46c:	2300      	movs	r3, #0
 810b46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b472:	e1ea      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b474:	2304      	movs	r3, #4
 810b476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b47a:	e1e6      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b47c:	2308      	movs	r3, #8
 810b47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b482:	e1e2      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b484:	2310      	movs	r3, #16
 810b486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b48a:	e1de      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b48c:	2320      	movs	r3, #32
 810b48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b492:	e1da      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b494:	2340      	movs	r3, #64	@ 0x40
 810b496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b49a:	e1d6      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b49c:	2380      	movs	r3, #128	@ 0x80
 810b49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b4a2:	e1d2      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b4a4:	697b      	ldr	r3, [r7, #20]
 810b4a6:	681b      	ldr	r3, [r3, #0]
 810b4a8:	4a4c      	ldr	r2, [pc, #304]	@ (810b5dc <UART_SetConfig+0x338>)
 810b4aa:	4293      	cmp	r3, r2
 810b4ac:	d130      	bne.n	810b510 <UART_SetConfig+0x26c>
 810b4ae:	4b49      	ldr	r3, [pc, #292]	@ (810b5d4 <UART_SetConfig+0x330>)
 810b4b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b4b2:	f003 0307 	and.w	r3, r3, #7
 810b4b6:	2b05      	cmp	r3, #5
 810b4b8:	d826      	bhi.n	810b508 <UART_SetConfig+0x264>
 810b4ba:	a201      	add	r2, pc, #4	@ (adr r2, 810b4c0 <UART_SetConfig+0x21c>)
 810b4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b4c0:	0810b4d9 	.word	0x0810b4d9
 810b4c4:	0810b4e1 	.word	0x0810b4e1
 810b4c8:	0810b4e9 	.word	0x0810b4e9
 810b4cc:	0810b4f1 	.word	0x0810b4f1
 810b4d0:	0810b4f9 	.word	0x0810b4f9
 810b4d4:	0810b501 	.word	0x0810b501
 810b4d8:	2300      	movs	r3, #0
 810b4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b4de:	e1b4      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b4e0:	2304      	movs	r3, #4
 810b4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b4e6:	e1b0      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b4e8:	2308      	movs	r3, #8
 810b4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b4ee:	e1ac      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b4f0:	2310      	movs	r3, #16
 810b4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b4f6:	e1a8      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b4f8:	2320      	movs	r3, #32
 810b4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b4fe:	e1a4      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b500:	2340      	movs	r3, #64	@ 0x40
 810b502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b506:	e1a0      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b508:	2380      	movs	r3, #128	@ 0x80
 810b50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b50e:	e19c      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b510:	697b      	ldr	r3, [r7, #20]
 810b512:	681b      	ldr	r3, [r3, #0]
 810b514:	4a32      	ldr	r2, [pc, #200]	@ (810b5e0 <UART_SetConfig+0x33c>)
 810b516:	4293      	cmp	r3, r2
 810b518:	d130      	bne.n	810b57c <UART_SetConfig+0x2d8>
 810b51a:	4b2e      	ldr	r3, [pc, #184]	@ (810b5d4 <UART_SetConfig+0x330>)
 810b51c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b51e:	f003 0307 	and.w	r3, r3, #7
 810b522:	2b05      	cmp	r3, #5
 810b524:	d826      	bhi.n	810b574 <UART_SetConfig+0x2d0>
 810b526:	a201      	add	r2, pc, #4	@ (adr r2, 810b52c <UART_SetConfig+0x288>)
 810b528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b52c:	0810b545 	.word	0x0810b545
 810b530:	0810b54d 	.word	0x0810b54d
 810b534:	0810b555 	.word	0x0810b555
 810b538:	0810b55d 	.word	0x0810b55d
 810b53c:	0810b565 	.word	0x0810b565
 810b540:	0810b56d 	.word	0x0810b56d
 810b544:	2300      	movs	r3, #0
 810b546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b54a:	e17e      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b54c:	2304      	movs	r3, #4
 810b54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b552:	e17a      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b554:	2308      	movs	r3, #8
 810b556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b55a:	e176      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b55c:	2310      	movs	r3, #16
 810b55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b562:	e172      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b564:	2320      	movs	r3, #32
 810b566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b56a:	e16e      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b56c:	2340      	movs	r3, #64	@ 0x40
 810b56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b572:	e16a      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b574:	2380      	movs	r3, #128	@ 0x80
 810b576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b57a:	e166      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b57c:	697b      	ldr	r3, [r7, #20]
 810b57e:	681b      	ldr	r3, [r3, #0]
 810b580:	4a18      	ldr	r2, [pc, #96]	@ (810b5e4 <UART_SetConfig+0x340>)
 810b582:	4293      	cmp	r3, r2
 810b584:	d140      	bne.n	810b608 <UART_SetConfig+0x364>
 810b586:	4b13      	ldr	r3, [pc, #76]	@ (810b5d4 <UART_SetConfig+0x330>)
 810b588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b58a:	f003 0307 	and.w	r3, r3, #7
 810b58e:	2b05      	cmp	r3, #5
 810b590:	d836      	bhi.n	810b600 <UART_SetConfig+0x35c>
 810b592:	a201      	add	r2, pc, #4	@ (adr r2, 810b598 <UART_SetConfig+0x2f4>)
 810b594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b598:	0810b5b1 	.word	0x0810b5b1
 810b59c:	0810b5b9 	.word	0x0810b5b9
 810b5a0:	0810b5c1 	.word	0x0810b5c1
 810b5a4:	0810b5e9 	.word	0x0810b5e9
 810b5a8:	0810b5f1 	.word	0x0810b5f1
 810b5ac:	0810b5f9 	.word	0x0810b5f9
 810b5b0:	2300      	movs	r3, #0
 810b5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b5b6:	e148      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b5b8:	2304      	movs	r3, #4
 810b5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b5be:	e144      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b5c0:	2308      	movs	r3, #8
 810b5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b5c6:	e140      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b5c8:	cfff69f3 	.word	0xcfff69f3
 810b5cc:	58000c00 	.word	0x58000c00
 810b5d0:	40011000 	.word	0x40011000
 810b5d4:	58024400 	.word	0x58024400
 810b5d8:	40004400 	.word	0x40004400
 810b5dc:	40004800 	.word	0x40004800
 810b5e0:	40004c00 	.word	0x40004c00
 810b5e4:	40005000 	.word	0x40005000
 810b5e8:	2310      	movs	r3, #16
 810b5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b5ee:	e12c      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b5f0:	2320      	movs	r3, #32
 810b5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b5f6:	e128      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b5f8:	2340      	movs	r3, #64	@ 0x40
 810b5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b5fe:	e124      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b600:	2380      	movs	r3, #128	@ 0x80
 810b602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b606:	e120      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b608:	697b      	ldr	r3, [r7, #20]
 810b60a:	681b      	ldr	r3, [r3, #0]
 810b60c:	4acb      	ldr	r2, [pc, #812]	@ (810b93c <UART_SetConfig+0x698>)
 810b60e:	4293      	cmp	r3, r2
 810b610:	d176      	bne.n	810b700 <UART_SetConfig+0x45c>
 810b612:	4bcb      	ldr	r3, [pc, #812]	@ (810b940 <UART_SetConfig+0x69c>)
 810b614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b616:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810b61a:	2b28      	cmp	r3, #40	@ 0x28
 810b61c:	d86c      	bhi.n	810b6f8 <UART_SetConfig+0x454>
 810b61e:	a201      	add	r2, pc, #4	@ (adr r2, 810b624 <UART_SetConfig+0x380>)
 810b620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b624:	0810b6c9 	.word	0x0810b6c9
 810b628:	0810b6f9 	.word	0x0810b6f9
 810b62c:	0810b6f9 	.word	0x0810b6f9
 810b630:	0810b6f9 	.word	0x0810b6f9
 810b634:	0810b6f9 	.word	0x0810b6f9
 810b638:	0810b6f9 	.word	0x0810b6f9
 810b63c:	0810b6f9 	.word	0x0810b6f9
 810b640:	0810b6f9 	.word	0x0810b6f9
 810b644:	0810b6d1 	.word	0x0810b6d1
 810b648:	0810b6f9 	.word	0x0810b6f9
 810b64c:	0810b6f9 	.word	0x0810b6f9
 810b650:	0810b6f9 	.word	0x0810b6f9
 810b654:	0810b6f9 	.word	0x0810b6f9
 810b658:	0810b6f9 	.word	0x0810b6f9
 810b65c:	0810b6f9 	.word	0x0810b6f9
 810b660:	0810b6f9 	.word	0x0810b6f9
 810b664:	0810b6d9 	.word	0x0810b6d9
 810b668:	0810b6f9 	.word	0x0810b6f9
 810b66c:	0810b6f9 	.word	0x0810b6f9
 810b670:	0810b6f9 	.word	0x0810b6f9
 810b674:	0810b6f9 	.word	0x0810b6f9
 810b678:	0810b6f9 	.word	0x0810b6f9
 810b67c:	0810b6f9 	.word	0x0810b6f9
 810b680:	0810b6f9 	.word	0x0810b6f9
 810b684:	0810b6e1 	.word	0x0810b6e1
 810b688:	0810b6f9 	.word	0x0810b6f9
 810b68c:	0810b6f9 	.word	0x0810b6f9
 810b690:	0810b6f9 	.word	0x0810b6f9
 810b694:	0810b6f9 	.word	0x0810b6f9
 810b698:	0810b6f9 	.word	0x0810b6f9
 810b69c:	0810b6f9 	.word	0x0810b6f9
 810b6a0:	0810b6f9 	.word	0x0810b6f9
 810b6a4:	0810b6e9 	.word	0x0810b6e9
 810b6a8:	0810b6f9 	.word	0x0810b6f9
 810b6ac:	0810b6f9 	.word	0x0810b6f9
 810b6b0:	0810b6f9 	.word	0x0810b6f9
 810b6b4:	0810b6f9 	.word	0x0810b6f9
 810b6b8:	0810b6f9 	.word	0x0810b6f9
 810b6bc:	0810b6f9 	.word	0x0810b6f9
 810b6c0:	0810b6f9 	.word	0x0810b6f9
 810b6c4:	0810b6f1 	.word	0x0810b6f1
 810b6c8:	2301      	movs	r3, #1
 810b6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b6ce:	e0bc      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b6d0:	2304      	movs	r3, #4
 810b6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b6d6:	e0b8      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b6d8:	2308      	movs	r3, #8
 810b6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b6de:	e0b4      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b6e0:	2310      	movs	r3, #16
 810b6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b6e6:	e0b0      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b6e8:	2320      	movs	r3, #32
 810b6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b6ee:	e0ac      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b6f0:	2340      	movs	r3, #64	@ 0x40
 810b6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b6f6:	e0a8      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b6f8:	2380      	movs	r3, #128	@ 0x80
 810b6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b6fe:	e0a4      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b700:	697b      	ldr	r3, [r7, #20]
 810b702:	681b      	ldr	r3, [r3, #0]
 810b704:	4a8f      	ldr	r2, [pc, #572]	@ (810b944 <UART_SetConfig+0x6a0>)
 810b706:	4293      	cmp	r3, r2
 810b708:	d130      	bne.n	810b76c <UART_SetConfig+0x4c8>
 810b70a:	4b8d      	ldr	r3, [pc, #564]	@ (810b940 <UART_SetConfig+0x69c>)
 810b70c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b70e:	f003 0307 	and.w	r3, r3, #7
 810b712:	2b05      	cmp	r3, #5
 810b714:	d826      	bhi.n	810b764 <UART_SetConfig+0x4c0>
 810b716:	a201      	add	r2, pc, #4	@ (adr r2, 810b71c <UART_SetConfig+0x478>)
 810b718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b71c:	0810b735 	.word	0x0810b735
 810b720:	0810b73d 	.word	0x0810b73d
 810b724:	0810b745 	.word	0x0810b745
 810b728:	0810b74d 	.word	0x0810b74d
 810b72c:	0810b755 	.word	0x0810b755
 810b730:	0810b75d 	.word	0x0810b75d
 810b734:	2300      	movs	r3, #0
 810b736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b73a:	e086      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b73c:	2304      	movs	r3, #4
 810b73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b742:	e082      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b744:	2308      	movs	r3, #8
 810b746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b74a:	e07e      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b74c:	2310      	movs	r3, #16
 810b74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b752:	e07a      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b754:	2320      	movs	r3, #32
 810b756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b75a:	e076      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b75c:	2340      	movs	r3, #64	@ 0x40
 810b75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b762:	e072      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b764:	2380      	movs	r3, #128	@ 0x80
 810b766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b76a:	e06e      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b76c:	697b      	ldr	r3, [r7, #20]
 810b76e:	681b      	ldr	r3, [r3, #0]
 810b770:	4a75      	ldr	r2, [pc, #468]	@ (810b948 <UART_SetConfig+0x6a4>)
 810b772:	4293      	cmp	r3, r2
 810b774:	d130      	bne.n	810b7d8 <UART_SetConfig+0x534>
 810b776:	4b72      	ldr	r3, [pc, #456]	@ (810b940 <UART_SetConfig+0x69c>)
 810b778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b77a:	f003 0307 	and.w	r3, r3, #7
 810b77e:	2b05      	cmp	r3, #5
 810b780:	d826      	bhi.n	810b7d0 <UART_SetConfig+0x52c>
 810b782:	a201      	add	r2, pc, #4	@ (adr r2, 810b788 <UART_SetConfig+0x4e4>)
 810b784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b788:	0810b7a1 	.word	0x0810b7a1
 810b78c:	0810b7a9 	.word	0x0810b7a9
 810b790:	0810b7b1 	.word	0x0810b7b1
 810b794:	0810b7b9 	.word	0x0810b7b9
 810b798:	0810b7c1 	.word	0x0810b7c1
 810b79c:	0810b7c9 	.word	0x0810b7c9
 810b7a0:	2300      	movs	r3, #0
 810b7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b7a6:	e050      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b7a8:	2304      	movs	r3, #4
 810b7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b7ae:	e04c      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b7b0:	2308      	movs	r3, #8
 810b7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b7b6:	e048      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b7b8:	2310      	movs	r3, #16
 810b7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b7be:	e044      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b7c0:	2320      	movs	r3, #32
 810b7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b7c6:	e040      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b7c8:	2340      	movs	r3, #64	@ 0x40
 810b7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b7ce:	e03c      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b7d0:	2380      	movs	r3, #128	@ 0x80
 810b7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b7d6:	e038      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b7d8:	697b      	ldr	r3, [r7, #20]
 810b7da:	681b      	ldr	r3, [r3, #0]
 810b7dc:	4a5b      	ldr	r2, [pc, #364]	@ (810b94c <UART_SetConfig+0x6a8>)
 810b7de:	4293      	cmp	r3, r2
 810b7e0:	d130      	bne.n	810b844 <UART_SetConfig+0x5a0>
 810b7e2:	4b57      	ldr	r3, [pc, #348]	@ (810b940 <UART_SetConfig+0x69c>)
 810b7e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b7e6:	f003 0307 	and.w	r3, r3, #7
 810b7ea:	2b05      	cmp	r3, #5
 810b7ec:	d826      	bhi.n	810b83c <UART_SetConfig+0x598>
 810b7ee:	a201      	add	r2, pc, #4	@ (adr r2, 810b7f4 <UART_SetConfig+0x550>)
 810b7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b7f4:	0810b80d 	.word	0x0810b80d
 810b7f8:	0810b815 	.word	0x0810b815
 810b7fc:	0810b81d 	.word	0x0810b81d
 810b800:	0810b825 	.word	0x0810b825
 810b804:	0810b82d 	.word	0x0810b82d
 810b808:	0810b835 	.word	0x0810b835
 810b80c:	2302      	movs	r3, #2
 810b80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b812:	e01a      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b814:	2304      	movs	r3, #4
 810b816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b81a:	e016      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b81c:	2308      	movs	r3, #8
 810b81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b822:	e012      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b824:	2310      	movs	r3, #16
 810b826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b82a:	e00e      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b82c:	2320      	movs	r3, #32
 810b82e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b832:	e00a      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b834:	2340      	movs	r3, #64	@ 0x40
 810b836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b83a:	e006      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b83c:	2380      	movs	r3, #128	@ 0x80
 810b83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b842:	e002      	b.n	810b84a <UART_SetConfig+0x5a6>
 810b844:	2380      	movs	r3, #128	@ 0x80
 810b846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810b84a:	697b      	ldr	r3, [r7, #20]
 810b84c:	681b      	ldr	r3, [r3, #0]
 810b84e:	4a3f      	ldr	r2, [pc, #252]	@ (810b94c <UART_SetConfig+0x6a8>)
 810b850:	4293      	cmp	r3, r2
 810b852:	f040 80f8 	bne.w	810ba46 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810b856:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810b85a:	2b20      	cmp	r3, #32
 810b85c:	dc46      	bgt.n	810b8ec <UART_SetConfig+0x648>
 810b85e:	2b02      	cmp	r3, #2
 810b860:	f2c0 8082 	blt.w	810b968 <UART_SetConfig+0x6c4>
 810b864:	3b02      	subs	r3, #2
 810b866:	2b1e      	cmp	r3, #30
 810b868:	d87e      	bhi.n	810b968 <UART_SetConfig+0x6c4>
 810b86a:	a201      	add	r2, pc, #4	@ (adr r2, 810b870 <UART_SetConfig+0x5cc>)
 810b86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b870:	0810b8f3 	.word	0x0810b8f3
 810b874:	0810b969 	.word	0x0810b969
 810b878:	0810b8fb 	.word	0x0810b8fb
 810b87c:	0810b969 	.word	0x0810b969
 810b880:	0810b969 	.word	0x0810b969
 810b884:	0810b969 	.word	0x0810b969
 810b888:	0810b90b 	.word	0x0810b90b
 810b88c:	0810b969 	.word	0x0810b969
 810b890:	0810b969 	.word	0x0810b969
 810b894:	0810b969 	.word	0x0810b969
 810b898:	0810b969 	.word	0x0810b969
 810b89c:	0810b969 	.word	0x0810b969
 810b8a0:	0810b969 	.word	0x0810b969
 810b8a4:	0810b969 	.word	0x0810b969
 810b8a8:	0810b91b 	.word	0x0810b91b
 810b8ac:	0810b969 	.word	0x0810b969
 810b8b0:	0810b969 	.word	0x0810b969
 810b8b4:	0810b969 	.word	0x0810b969
 810b8b8:	0810b969 	.word	0x0810b969
 810b8bc:	0810b969 	.word	0x0810b969
 810b8c0:	0810b969 	.word	0x0810b969
 810b8c4:	0810b969 	.word	0x0810b969
 810b8c8:	0810b969 	.word	0x0810b969
 810b8cc:	0810b969 	.word	0x0810b969
 810b8d0:	0810b969 	.word	0x0810b969
 810b8d4:	0810b969 	.word	0x0810b969
 810b8d8:	0810b969 	.word	0x0810b969
 810b8dc:	0810b969 	.word	0x0810b969
 810b8e0:	0810b969 	.word	0x0810b969
 810b8e4:	0810b969 	.word	0x0810b969
 810b8e8:	0810b95b 	.word	0x0810b95b
 810b8ec:	2b40      	cmp	r3, #64	@ 0x40
 810b8ee:	d037      	beq.n	810b960 <UART_SetConfig+0x6bc>
 810b8f0:	e03a      	b.n	810b968 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810b8f2:	f7fd f9c3 	bl	8108c7c <HAL_RCCEx_GetD3PCLK1Freq>
 810b8f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b8f8:	e03c      	b.n	810b974 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b8fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b8fe:	4618      	mov	r0, r3
 810b900:	f7fd f9d2 	bl	8108ca8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b908:	e034      	b.n	810b974 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b90a:	f107 0318 	add.w	r3, r7, #24
 810b90e:	4618      	mov	r0, r3
 810b910:	f7fd fb1e 	bl	8108f50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b914:	69fb      	ldr	r3, [r7, #28]
 810b916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b918:	e02c      	b.n	810b974 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b91a:	4b09      	ldr	r3, [pc, #36]	@ (810b940 <UART_SetConfig+0x69c>)
 810b91c:	681b      	ldr	r3, [r3, #0]
 810b91e:	f003 0320 	and.w	r3, r3, #32
 810b922:	2b00      	cmp	r3, #0
 810b924:	d016      	beq.n	810b954 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b926:	4b06      	ldr	r3, [pc, #24]	@ (810b940 <UART_SetConfig+0x69c>)
 810b928:	681b      	ldr	r3, [r3, #0]
 810b92a:	08db      	lsrs	r3, r3, #3
 810b92c:	f003 0303 	and.w	r3, r3, #3
 810b930:	4a07      	ldr	r2, [pc, #28]	@ (810b950 <UART_SetConfig+0x6ac>)
 810b932:	fa22 f303 	lsr.w	r3, r2, r3
 810b936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b938:	e01c      	b.n	810b974 <UART_SetConfig+0x6d0>
 810b93a:	bf00      	nop
 810b93c:	40011400 	.word	0x40011400
 810b940:	58024400 	.word	0x58024400
 810b944:	40007800 	.word	0x40007800
 810b948:	40007c00 	.word	0x40007c00
 810b94c:	58000c00 	.word	0x58000c00
 810b950:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810b954:	4b9d      	ldr	r3, [pc, #628]	@ (810bbcc <UART_SetConfig+0x928>)
 810b956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b958:	e00c      	b.n	810b974 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b95a:	4b9d      	ldr	r3, [pc, #628]	@ (810bbd0 <UART_SetConfig+0x92c>)
 810b95c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b95e:	e009      	b.n	810b974 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b960:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810b964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b966:	e005      	b.n	810b974 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810b968:	2300      	movs	r3, #0
 810b96a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810b96c:	2301      	movs	r3, #1
 810b96e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810b972:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810b974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b976:	2b00      	cmp	r3, #0
 810b978:	f000 81de 	beq.w	810bd38 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810b97c:	697b      	ldr	r3, [r7, #20]
 810b97e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b980:	4a94      	ldr	r2, [pc, #592]	@ (810bbd4 <UART_SetConfig+0x930>)
 810b982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b986:	461a      	mov	r2, r3
 810b988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b98a:	fbb3 f3f2 	udiv	r3, r3, r2
 810b98e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810b990:	697b      	ldr	r3, [r7, #20]
 810b992:	685a      	ldr	r2, [r3, #4]
 810b994:	4613      	mov	r3, r2
 810b996:	005b      	lsls	r3, r3, #1
 810b998:	4413      	add	r3, r2
 810b99a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b99c:	429a      	cmp	r2, r3
 810b99e:	d305      	bcc.n	810b9ac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810b9a0:	697b      	ldr	r3, [r7, #20]
 810b9a2:	685b      	ldr	r3, [r3, #4]
 810b9a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810b9a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b9a8:	429a      	cmp	r2, r3
 810b9aa:	d903      	bls.n	810b9b4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810b9ac:	2301      	movs	r3, #1
 810b9ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810b9b2:	e1c1      	b.n	810bd38 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b9b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b9b6:	2200      	movs	r2, #0
 810b9b8:	60bb      	str	r3, [r7, #8]
 810b9ba:	60fa      	str	r2, [r7, #12]
 810b9bc:	697b      	ldr	r3, [r7, #20]
 810b9be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b9c0:	4a84      	ldr	r2, [pc, #528]	@ (810bbd4 <UART_SetConfig+0x930>)
 810b9c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b9c6:	b29b      	uxth	r3, r3
 810b9c8:	2200      	movs	r2, #0
 810b9ca:	603b      	str	r3, [r7, #0]
 810b9cc:	607a      	str	r2, [r7, #4]
 810b9ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b9d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810b9d6:	f7f5 f9df 	bl	8100d98 <__aeabi_uldivmod>
 810b9da:	4602      	mov	r2, r0
 810b9dc:	460b      	mov	r3, r1
 810b9de:	4610      	mov	r0, r2
 810b9e0:	4619      	mov	r1, r3
 810b9e2:	f04f 0200 	mov.w	r2, #0
 810b9e6:	f04f 0300 	mov.w	r3, #0
 810b9ea:	020b      	lsls	r3, r1, #8
 810b9ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810b9f0:	0202      	lsls	r2, r0, #8
 810b9f2:	6979      	ldr	r1, [r7, #20]
 810b9f4:	6849      	ldr	r1, [r1, #4]
 810b9f6:	0849      	lsrs	r1, r1, #1
 810b9f8:	2000      	movs	r0, #0
 810b9fa:	460c      	mov	r4, r1
 810b9fc:	4605      	mov	r5, r0
 810b9fe:	eb12 0804 	adds.w	r8, r2, r4
 810ba02:	eb43 0905 	adc.w	r9, r3, r5
 810ba06:	697b      	ldr	r3, [r7, #20]
 810ba08:	685b      	ldr	r3, [r3, #4]
 810ba0a:	2200      	movs	r2, #0
 810ba0c:	469a      	mov	sl, r3
 810ba0e:	4693      	mov	fp, r2
 810ba10:	4652      	mov	r2, sl
 810ba12:	465b      	mov	r3, fp
 810ba14:	4640      	mov	r0, r8
 810ba16:	4649      	mov	r1, r9
 810ba18:	f7f5 f9be 	bl	8100d98 <__aeabi_uldivmod>
 810ba1c:	4602      	mov	r2, r0
 810ba1e:	460b      	mov	r3, r1
 810ba20:	4613      	mov	r3, r2
 810ba22:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810ba24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ba26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810ba2a:	d308      	bcc.n	810ba3e <UART_SetConfig+0x79a>
 810ba2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ba2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810ba32:	d204      	bcs.n	810ba3e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810ba34:	697b      	ldr	r3, [r7, #20]
 810ba36:	681b      	ldr	r3, [r3, #0]
 810ba38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810ba3a:	60da      	str	r2, [r3, #12]
 810ba3c:	e17c      	b.n	810bd38 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810ba3e:	2301      	movs	r3, #1
 810ba40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810ba44:	e178      	b.n	810bd38 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810ba46:	697b      	ldr	r3, [r7, #20]
 810ba48:	69db      	ldr	r3, [r3, #28]
 810ba4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810ba4e:	f040 80c5 	bne.w	810bbdc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810ba52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810ba56:	2b20      	cmp	r3, #32
 810ba58:	dc48      	bgt.n	810baec <UART_SetConfig+0x848>
 810ba5a:	2b00      	cmp	r3, #0
 810ba5c:	db7b      	blt.n	810bb56 <UART_SetConfig+0x8b2>
 810ba5e:	2b20      	cmp	r3, #32
 810ba60:	d879      	bhi.n	810bb56 <UART_SetConfig+0x8b2>
 810ba62:	a201      	add	r2, pc, #4	@ (adr r2, 810ba68 <UART_SetConfig+0x7c4>)
 810ba64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ba68:	0810baf3 	.word	0x0810baf3
 810ba6c:	0810bafb 	.word	0x0810bafb
 810ba70:	0810bb57 	.word	0x0810bb57
 810ba74:	0810bb57 	.word	0x0810bb57
 810ba78:	0810bb03 	.word	0x0810bb03
 810ba7c:	0810bb57 	.word	0x0810bb57
 810ba80:	0810bb57 	.word	0x0810bb57
 810ba84:	0810bb57 	.word	0x0810bb57
 810ba88:	0810bb13 	.word	0x0810bb13
 810ba8c:	0810bb57 	.word	0x0810bb57
 810ba90:	0810bb57 	.word	0x0810bb57
 810ba94:	0810bb57 	.word	0x0810bb57
 810ba98:	0810bb57 	.word	0x0810bb57
 810ba9c:	0810bb57 	.word	0x0810bb57
 810baa0:	0810bb57 	.word	0x0810bb57
 810baa4:	0810bb57 	.word	0x0810bb57
 810baa8:	0810bb23 	.word	0x0810bb23
 810baac:	0810bb57 	.word	0x0810bb57
 810bab0:	0810bb57 	.word	0x0810bb57
 810bab4:	0810bb57 	.word	0x0810bb57
 810bab8:	0810bb57 	.word	0x0810bb57
 810babc:	0810bb57 	.word	0x0810bb57
 810bac0:	0810bb57 	.word	0x0810bb57
 810bac4:	0810bb57 	.word	0x0810bb57
 810bac8:	0810bb57 	.word	0x0810bb57
 810bacc:	0810bb57 	.word	0x0810bb57
 810bad0:	0810bb57 	.word	0x0810bb57
 810bad4:	0810bb57 	.word	0x0810bb57
 810bad8:	0810bb57 	.word	0x0810bb57
 810badc:	0810bb57 	.word	0x0810bb57
 810bae0:	0810bb57 	.word	0x0810bb57
 810bae4:	0810bb57 	.word	0x0810bb57
 810bae8:	0810bb49 	.word	0x0810bb49
 810baec:	2b40      	cmp	r3, #64	@ 0x40
 810baee:	d02e      	beq.n	810bb4e <UART_SetConfig+0x8aa>
 810baf0:	e031      	b.n	810bb56 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810baf2:	f7fb f90d 	bl	8106d10 <HAL_RCC_GetPCLK1Freq>
 810baf6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810baf8:	e033      	b.n	810bb62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810bafa:	f7fb f91f 	bl	8106d3c <HAL_RCC_GetPCLK2Freq>
 810bafe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810bb00:	e02f      	b.n	810bb62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bb02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810bb06:	4618      	mov	r0, r3
 810bb08:	f7fd f8ce 	bl	8108ca8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810bb0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bb0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bb10:	e027      	b.n	810bb62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bb12:	f107 0318 	add.w	r3, r7, #24
 810bb16:	4618      	mov	r0, r3
 810bb18:	f7fd fa1a 	bl	8108f50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810bb1c:	69fb      	ldr	r3, [r7, #28]
 810bb1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bb20:	e01f      	b.n	810bb62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810bb22:	4b2d      	ldr	r3, [pc, #180]	@ (810bbd8 <UART_SetConfig+0x934>)
 810bb24:	681b      	ldr	r3, [r3, #0]
 810bb26:	f003 0320 	and.w	r3, r3, #32
 810bb2a:	2b00      	cmp	r3, #0
 810bb2c:	d009      	beq.n	810bb42 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810bb2e:	4b2a      	ldr	r3, [pc, #168]	@ (810bbd8 <UART_SetConfig+0x934>)
 810bb30:	681b      	ldr	r3, [r3, #0]
 810bb32:	08db      	lsrs	r3, r3, #3
 810bb34:	f003 0303 	and.w	r3, r3, #3
 810bb38:	4a24      	ldr	r2, [pc, #144]	@ (810bbcc <UART_SetConfig+0x928>)
 810bb3a:	fa22 f303 	lsr.w	r3, r2, r3
 810bb3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810bb40:	e00f      	b.n	810bb62 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810bb42:	4b22      	ldr	r3, [pc, #136]	@ (810bbcc <UART_SetConfig+0x928>)
 810bb44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bb46:	e00c      	b.n	810bb62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810bb48:	4b21      	ldr	r3, [pc, #132]	@ (810bbd0 <UART_SetConfig+0x92c>)
 810bb4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bb4c:	e009      	b.n	810bb62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810bb4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810bb52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bb54:	e005      	b.n	810bb62 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810bb56:	2300      	movs	r3, #0
 810bb58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810bb5a:	2301      	movs	r3, #1
 810bb5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810bb60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810bb62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810bb64:	2b00      	cmp	r3, #0
 810bb66:	f000 80e7 	beq.w	810bd38 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810bb6a:	697b      	ldr	r3, [r7, #20]
 810bb6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810bb6e:	4a19      	ldr	r2, [pc, #100]	@ (810bbd4 <UART_SetConfig+0x930>)
 810bb70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810bb74:	461a      	mov	r2, r3
 810bb76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810bb78:	fbb3 f3f2 	udiv	r3, r3, r2
 810bb7c:	005a      	lsls	r2, r3, #1
 810bb7e:	697b      	ldr	r3, [r7, #20]
 810bb80:	685b      	ldr	r3, [r3, #4]
 810bb82:	085b      	lsrs	r3, r3, #1
 810bb84:	441a      	add	r2, r3
 810bb86:	697b      	ldr	r3, [r7, #20]
 810bb88:	685b      	ldr	r3, [r3, #4]
 810bb8a:	fbb2 f3f3 	udiv	r3, r2, r3
 810bb8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810bb90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bb92:	2b0f      	cmp	r3, #15
 810bb94:	d916      	bls.n	810bbc4 <UART_SetConfig+0x920>
 810bb96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bb98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810bb9c:	d212      	bcs.n	810bbc4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810bb9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bba0:	b29b      	uxth	r3, r3
 810bba2:	f023 030f 	bic.w	r3, r3, #15
 810bba6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810bba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bbaa:	085b      	lsrs	r3, r3, #1
 810bbac:	b29b      	uxth	r3, r3
 810bbae:	f003 0307 	and.w	r3, r3, #7
 810bbb2:	b29a      	uxth	r2, r3
 810bbb4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810bbb6:	4313      	orrs	r3, r2
 810bbb8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810bbba:	697b      	ldr	r3, [r7, #20]
 810bbbc:	681b      	ldr	r3, [r3, #0]
 810bbbe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810bbc0:	60da      	str	r2, [r3, #12]
 810bbc2:	e0b9      	b.n	810bd38 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810bbc4:	2301      	movs	r3, #1
 810bbc6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810bbca:	e0b5      	b.n	810bd38 <UART_SetConfig+0xa94>
 810bbcc:	03d09000 	.word	0x03d09000
 810bbd0:	003d0900 	.word	0x003d0900
 810bbd4:	081116f0 	.word	0x081116f0
 810bbd8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810bbdc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810bbe0:	2b20      	cmp	r3, #32
 810bbe2:	dc49      	bgt.n	810bc78 <UART_SetConfig+0x9d4>
 810bbe4:	2b00      	cmp	r3, #0
 810bbe6:	db7c      	blt.n	810bce2 <UART_SetConfig+0xa3e>
 810bbe8:	2b20      	cmp	r3, #32
 810bbea:	d87a      	bhi.n	810bce2 <UART_SetConfig+0xa3e>
 810bbec:	a201      	add	r2, pc, #4	@ (adr r2, 810bbf4 <UART_SetConfig+0x950>)
 810bbee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bbf2:	bf00      	nop
 810bbf4:	0810bc7f 	.word	0x0810bc7f
 810bbf8:	0810bc87 	.word	0x0810bc87
 810bbfc:	0810bce3 	.word	0x0810bce3
 810bc00:	0810bce3 	.word	0x0810bce3
 810bc04:	0810bc8f 	.word	0x0810bc8f
 810bc08:	0810bce3 	.word	0x0810bce3
 810bc0c:	0810bce3 	.word	0x0810bce3
 810bc10:	0810bce3 	.word	0x0810bce3
 810bc14:	0810bc9f 	.word	0x0810bc9f
 810bc18:	0810bce3 	.word	0x0810bce3
 810bc1c:	0810bce3 	.word	0x0810bce3
 810bc20:	0810bce3 	.word	0x0810bce3
 810bc24:	0810bce3 	.word	0x0810bce3
 810bc28:	0810bce3 	.word	0x0810bce3
 810bc2c:	0810bce3 	.word	0x0810bce3
 810bc30:	0810bce3 	.word	0x0810bce3
 810bc34:	0810bcaf 	.word	0x0810bcaf
 810bc38:	0810bce3 	.word	0x0810bce3
 810bc3c:	0810bce3 	.word	0x0810bce3
 810bc40:	0810bce3 	.word	0x0810bce3
 810bc44:	0810bce3 	.word	0x0810bce3
 810bc48:	0810bce3 	.word	0x0810bce3
 810bc4c:	0810bce3 	.word	0x0810bce3
 810bc50:	0810bce3 	.word	0x0810bce3
 810bc54:	0810bce3 	.word	0x0810bce3
 810bc58:	0810bce3 	.word	0x0810bce3
 810bc5c:	0810bce3 	.word	0x0810bce3
 810bc60:	0810bce3 	.word	0x0810bce3
 810bc64:	0810bce3 	.word	0x0810bce3
 810bc68:	0810bce3 	.word	0x0810bce3
 810bc6c:	0810bce3 	.word	0x0810bce3
 810bc70:	0810bce3 	.word	0x0810bce3
 810bc74:	0810bcd5 	.word	0x0810bcd5
 810bc78:	2b40      	cmp	r3, #64	@ 0x40
 810bc7a:	d02e      	beq.n	810bcda <UART_SetConfig+0xa36>
 810bc7c:	e031      	b.n	810bce2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810bc7e:	f7fb f847 	bl	8106d10 <HAL_RCC_GetPCLK1Freq>
 810bc82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810bc84:	e033      	b.n	810bcee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810bc86:	f7fb f859 	bl	8106d3c <HAL_RCC_GetPCLK2Freq>
 810bc8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810bc8c:	e02f      	b.n	810bcee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bc8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810bc92:	4618      	mov	r0, r3
 810bc94:	f7fd f808 	bl	8108ca8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810bc98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bc9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bc9c:	e027      	b.n	810bcee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bc9e:	f107 0318 	add.w	r3, r7, #24
 810bca2:	4618      	mov	r0, r3
 810bca4:	f7fd f954 	bl	8108f50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810bca8:	69fb      	ldr	r3, [r7, #28]
 810bcaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bcac:	e01f      	b.n	810bcee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810bcae:	4b2d      	ldr	r3, [pc, #180]	@ (810bd64 <UART_SetConfig+0xac0>)
 810bcb0:	681b      	ldr	r3, [r3, #0]
 810bcb2:	f003 0320 	and.w	r3, r3, #32
 810bcb6:	2b00      	cmp	r3, #0
 810bcb8:	d009      	beq.n	810bcce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810bcba:	4b2a      	ldr	r3, [pc, #168]	@ (810bd64 <UART_SetConfig+0xac0>)
 810bcbc:	681b      	ldr	r3, [r3, #0]
 810bcbe:	08db      	lsrs	r3, r3, #3
 810bcc0:	f003 0303 	and.w	r3, r3, #3
 810bcc4:	4a28      	ldr	r2, [pc, #160]	@ (810bd68 <UART_SetConfig+0xac4>)
 810bcc6:	fa22 f303 	lsr.w	r3, r2, r3
 810bcca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810bccc:	e00f      	b.n	810bcee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810bcce:	4b26      	ldr	r3, [pc, #152]	@ (810bd68 <UART_SetConfig+0xac4>)
 810bcd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bcd2:	e00c      	b.n	810bcee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810bcd4:	4b25      	ldr	r3, [pc, #148]	@ (810bd6c <UART_SetConfig+0xac8>)
 810bcd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bcd8:	e009      	b.n	810bcee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810bcda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810bcde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bce0:	e005      	b.n	810bcee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810bce2:	2300      	movs	r3, #0
 810bce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810bce6:	2301      	movs	r3, #1
 810bce8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810bcec:	bf00      	nop
    }

    if (pclk != 0U)
 810bcee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810bcf0:	2b00      	cmp	r3, #0
 810bcf2:	d021      	beq.n	810bd38 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810bcf4:	697b      	ldr	r3, [r7, #20]
 810bcf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810bcf8:	4a1d      	ldr	r2, [pc, #116]	@ (810bd70 <UART_SetConfig+0xacc>)
 810bcfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810bcfe:	461a      	mov	r2, r3
 810bd00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810bd02:	fbb3 f2f2 	udiv	r2, r3, r2
 810bd06:	697b      	ldr	r3, [r7, #20]
 810bd08:	685b      	ldr	r3, [r3, #4]
 810bd0a:	085b      	lsrs	r3, r3, #1
 810bd0c:	441a      	add	r2, r3
 810bd0e:	697b      	ldr	r3, [r7, #20]
 810bd10:	685b      	ldr	r3, [r3, #4]
 810bd12:	fbb2 f3f3 	udiv	r3, r2, r3
 810bd16:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810bd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd1a:	2b0f      	cmp	r3, #15
 810bd1c:	d909      	bls.n	810bd32 <UART_SetConfig+0xa8e>
 810bd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810bd24:	d205      	bcs.n	810bd32 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810bd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd28:	b29a      	uxth	r2, r3
 810bd2a:	697b      	ldr	r3, [r7, #20]
 810bd2c:	681b      	ldr	r3, [r3, #0]
 810bd2e:	60da      	str	r2, [r3, #12]
 810bd30:	e002      	b.n	810bd38 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810bd32:	2301      	movs	r3, #1
 810bd34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810bd38:	697b      	ldr	r3, [r7, #20]
 810bd3a:	2201      	movs	r2, #1
 810bd3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810bd40:	697b      	ldr	r3, [r7, #20]
 810bd42:	2201      	movs	r2, #1
 810bd44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810bd48:	697b      	ldr	r3, [r7, #20]
 810bd4a:	2200      	movs	r2, #0
 810bd4c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810bd4e:	697b      	ldr	r3, [r7, #20]
 810bd50:	2200      	movs	r2, #0
 810bd52:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810bd54:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810bd58:	4618      	mov	r0, r3
 810bd5a:	3748      	adds	r7, #72	@ 0x48
 810bd5c:	46bd      	mov	sp, r7
 810bd5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810bd62:	bf00      	nop
 810bd64:	58024400 	.word	0x58024400
 810bd68:	03d09000 	.word	0x03d09000
 810bd6c:	003d0900 	.word	0x003d0900
 810bd70:	081116f0 	.word	0x081116f0

0810bd74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810bd74:	b480      	push	{r7}
 810bd76:	b083      	sub	sp, #12
 810bd78:	af00      	add	r7, sp, #0
 810bd7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810bd7c:	687b      	ldr	r3, [r7, #4]
 810bd7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810bd80:	f003 0308 	and.w	r3, r3, #8
 810bd84:	2b00      	cmp	r3, #0
 810bd86:	d00a      	beq.n	810bd9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810bd88:	687b      	ldr	r3, [r7, #4]
 810bd8a:	681b      	ldr	r3, [r3, #0]
 810bd8c:	685b      	ldr	r3, [r3, #4]
 810bd8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810bd92:	687b      	ldr	r3, [r7, #4]
 810bd94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810bd96:	687b      	ldr	r3, [r7, #4]
 810bd98:	681b      	ldr	r3, [r3, #0]
 810bd9a:	430a      	orrs	r2, r1
 810bd9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810bd9e:	687b      	ldr	r3, [r7, #4]
 810bda0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810bda2:	f003 0301 	and.w	r3, r3, #1
 810bda6:	2b00      	cmp	r3, #0
 810bda8:	d00a      	beq.n	810bdc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810bdaa:	687b      	ldr	r3, [r7, #4]
 810bdac:	681b      	ldr	r3, [r3, #0]
 810bdae:	685b      	ldr	r3, [r3, #4]
 810bdb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810bdb4:	687b      	ldr	r3, [r7, #4]
 810bdb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810bdb8:	687b      	ldr	r3, [r7, #4]
 810bdba:	681b      	ldr	r3, [r3, #0]
 810bdbc:	430a      	orrs	r2, r1
 810bdbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810bdc0:	687b      	ldr	r3, [r7, #4]
 810bdc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810bdc4:	f003 0302 	and.w	r3, r3, #2
 810bdc8:	2b00      	cmp	r3, #0
 810bdca:	d00a      	beq.n	810bde2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810bdcc:	687b      	ldr	r3, [r7, #4]
 810bdce:	681b      	ldr	r3, [r3, #0]
 810bdd0:	685b      	ldr	r3, [r3, #4]
 810bdd2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810bdd6:	687b      	ldr	r3, [r7, #4]
 810bdd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810bdda:	687b      	ldr	r3, [r7, #4]
 810bddc:	681b      	ldr	r3, [r3, #0]
 810bdde:	430a      	orrs	r2, r1
 810bde0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810bde2:	687b      	ldr	r3, [r7, #4]
 810bde4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810bde6:	f003 0304 	and.w	r3, r3, #4
 810bdea:	2b00      	cmp	r3, #0
 810bdec:	d00a      	beq.n	810be04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810bdee:	687b      	ldr	r3, [r7, #4]
 810bdf0:	681b      	ldr	r3, [r3, #0]
 810bdf2:	685b      	ldr	r3, [r3, #4]
 810bdf4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810bdf8:	687b      	ldr	r3, [r7, #4]
 810bdfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810bdfc:	687b      	ldr	r3, [r7, #4]
 810bdfe:	681b      	ldr	r3, [r3, #0]
 810be00:	430a      	orrs	r2, r1
 810be02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810be04:	687b      	ldr	r3, [r7, #4]
 810be06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810be08:	f003 0310 	and.w	r3, r3, #16
 810be0c:	2b00      	cmp	r3, #0
 810be0e:	d00a      	beq.n	810be26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810be10:	687b      	ldr	r3, [r7, #4]
 810be12:	681b      	ldr	r3, [r3, #0]
 810be14:	689b      	ldr	r3, [r3, #8]
 810be16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810be1a:	687b      	ldr	r3, [r7, #4]
 810be1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810be1e:	687b      	ldr	r3, [r7, #4]
 810be20:	681b      	ldr	r3, [r3, #0]
 810be22:	430a      	orrs	r2, r1
 810be24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810be26:	687b      	ldr	r3, [r7, #4]
 810be28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810be2a:	f003 0320 	and.w	r3, r3, #32
 810be2e:	2b00      	cmp	r3, #0
 810be30:	d00a      	beq.n	810be48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810be32:	687b      	ldr	r3, [r7, #4]
 810be34:	681b      	ldr	r3, [r3, #0]
 810be36:	689b      	ldr	r3, [r3, #8]
 810be38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810be3c:	687b      	ldr	r3, [r7, #4]
 810be3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810be40:	687b      	ldr	r3, [r7, #4]
 810be42:	681b      	ldr	r3, [r3, #0]
 810be44:	430a      	orrs	r2, r1
 810be46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810be48:	687b      	ldr	r3, [r7, #4]
 810be4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810be4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810be50:	2b00      	cmp	r3, #0
 810be52:	d01a      	beq.n	810be8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810be54:	687b      	ldr	r3, [r7, #4]
 810be56:	681b      	ldr	r3, [r3, #0]
 810be58:	685b      	ldr	r3, [r3, #4]
 810be5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810be5e:	687b      	ldr	r3, [r7, #4]
 810be60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810be62:	687b      	ldr	r3, [r7, #4]
 810be64:	681b      	ldr	r3, [r3, #0]
 810be66:	430a      	orrs	r2, r1
 810be68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810be6a:	687b      	ldr	r3, [r7, #4]
 810be6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810be6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810be72:	d10a      	bne.n	810be8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810be74:	687b      	ldr	r3, [r7, #4]
 810be76:	681b      	ldr	r3, [r3, #0]
 810be78:	685b      	ldr	r3, [r3, #4]
 810be7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810be7e:	687b      	ldr	r3, [r7, #4]
 810be80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810be82:	687b      	ldr	r3, [r7, #4]
 810be84:	681b      	ldr	r3, [r3, #0]
 810be86:	430a      	orrs	r2, r1
 810be88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810be8a:	687b      	ldr	r3, [r7, #4]
 810be8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810be8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810be92:	2b00      	cmp	r3, #0
 810be94:	d00a      	beq.n	810beac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810be96:	687b      	ldr	r3, [r7, #4]
 810be98:	681b      	ldr	r3, [r3, #0]
 810be9a:	685b      	ldr	r3, [r3, #4]
 810be9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810bea0:	687b      	ldr	r3, [r7, #4]
 810bea2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810bea4:	687b      	ldr	r3, [r7, #4]
 810bea6:	681b      	ldr	r3, [r3, #0]
 810bea8:	430a      	orrs	r2, r1
 810beaa:	605a      	str	r2, [r3, #4]
  }
}
 810beac:	bf00      	nop
 810beae:	370c      	adds	r7, #12
 810beb0:	46bd      	mov	sp, r7
 810beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810beb6:	4770      	bx	lr

0810beb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810beb8:	b580      	push	{r7, lr}
 810beba:	b098      	sub	sp, #96	@ 0x60
 810bebc:	af02      	add	r7, sp, #8
 810bebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810bec0:	687b      	ldr	r3, [r7, #4]
 810bec2:	2200      	movs	r2, #0
 810bec4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810bec8:	f7f7 feae 	bl	8103c28 <HAL_GetTick>
 810becc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810bece:	687b      	ldr	r3, [r7, #4]
 810bed0:	681b      	ldr	r3, [r3, #0]
 810bed2:	681b      	ldr	r3, [r3, #0]
 810bed4:	f003 0308 	and.w	r3, r3, #8
 810bed8:	2b08      	cmp	r3, #8
 810beda:	d12f      	bne.n	810bf3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810bedc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810bee0:	9300      	str	r3, [sp, #0]
 810bee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810bee4:	2200      	movs	r2, #0
 810bee6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810beea:	6878      	ldr	r0, [r7, #4]
 810beec:	f000 f88e 	bl	810c00c <UART_WaitOnFlagUntilTimeout>
 810bef0:	4603      	mov	r3, r0
 810bef2:	2b00      	cmp	r3, #0
 810bef4:	d022      	beq.n	810bf3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810bef6:	687b      	ldr	r3, [r7, #4]
 810bef8:	681b      	ldr	r3, [r3, #0]
 810befa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810befc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810befe:	e853 3f00 	ldrex	r3, [r3]
 810bf02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810bf04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bf06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810bf0a:	653b      	str	r3, [r7, #80]	@ 0x50
 810bf0c:	687b      	ldr	r3, [r7, #4]
 810bf0e:	681b      	ldr	r3, [r3, #0]
 810bf10:	461a      	mov	r2, r3
 810bf12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810bf14:	647b      	str	r3, [r7, #68]	@ 0x44
 810bf16:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810bf18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810bf1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810bf1c:	e841 2300 	strex	r3, r2, [r1]
 810bf20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810bf22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810bf24:	2b00      	cmp	r3, #0
 810bf26:	d1e6      	bne.n	810bef6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810bf28:	687b      	ldr	r3, [r7, #4]
 810bf2a:	2220      	movs	r2, #32
 810bf2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810bf30:	687b      	ldr	r3, [r7, #4]
 810bf32:	2200      	movs	r2, #0
 810bf34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810bf38:	2303      	movs	r3, #3
 810bf3a:	e063      	b.n	810c004 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810bf3c:	687b      	ldr	r3, [r7, #4]
 810bf3e:	681b      	ldr	r3, [r3, #0]
 810bf40:	681b      	ldr	r3, [r3, #0]
 810bf42:	f003 0304 	and.w	r3, r3, #4
 810bf46:	2b04      	cmp	r3, #4
 810bf48:	d149      	bne.n	810bfde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810bf4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810bf4e:	9300      	str	r3, [sp, #0]
 810bf50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810bf52:	2200      	movs	r2, #0
 810bf54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810bf58:	6878      	ldr	r0, [r7, #4]
 810bf5a:	f000 f857 	bl	810c00c <UART_WaitOnFlagUntilTimeout>
 810bf5e:	4603      	mov	r3, r0
 810bf60:	2b00      	cmp	r3, #0
 810bf62:	d03c      	beq.n	810bfde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810bf64:	687b      	ldr	r3, [r7, #4]
 810bf66:	681b      	ldr	r3, [r3, #0]
 810bf68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810bf6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bf6c:	e853 3f00 	ldrex	r3, [r3]
 810bf70:	623b      	str	r3, [r7, #32]
   return(result);
 810bf72:	6a3b      	ldr	r3, [r7, #32]
 810bf74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810bf78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810bf7a:	687b      	ldr	r3, [r7, #4]
 810bf7c:	681b      	ldr	r3, [r3, #0]
 810bf7e:	461a      	mov	r2, r3
 810bf80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810bf82:	633b      	str	r3, [r7, #48]	@ 0x30
 810bf84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810bf86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810bf88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810bf8a:	e841 2300 	strex	r3, r2, [r1]
 810bf8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810bf90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bf92:	2b00      	cmp	r3, #0
 810bf94:	d1e6      	bne.n	810bf64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810bf96:	687b      	ldr	r3, [r7, #4]
 810bf98:	681b      	ldr	r3, [r3, #0]
 810bf9a:	3308      	adds	r3, #8
 810bf9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810bf9e:	693b      	ldr	r3, [r7, #16]
 810bfa0:	e853 3f00 	ldrex	r3, [r3]
 810bfa4:	60fb      	str	r3, [r7, #12]
   return(result);
 810bfa6:	68fb      	ldr	r3, [r7, #12]
 810bfa8:	f023 0301 	bic.w	r3, r3, #1
 810bfac:	64bb      	str	r3, [r7, #72]	@ 0x48
 810bfae:	687b      	ldr	r3, [r7, #4]
 810bfb0:	681b      	ldr	r3, [r3, #0]
 810bfb2:	3308      	adds	r3, #8
 810bfb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810bfb6:	61fa      	str	r2, [r7, #28]
 810bfb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810bfba:	69b9      	ldr	r1, [r7, #24]
 810bfbc:	69fa      	ldr	r2, [r7, #28]
 810bfbe:	e841 2300 	strex	r3, r2, [r1]
 810bfc2:	617b      	str	r3, [r7, #20]
   return(result);
 810bfc4:	697b      	ldr	r3, [r7, #20]
 810bfc6:	2b00      	cmp	r3, #0
 810bfc8:	d1e5      	bne.n	810bf96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810bfca:	687b      	ldr	r3, [r7, #4]
 810bfcc:	2220      	movs	r2, #32
 810bfce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810bfd2:	687b      	ldr	r3, [r7, #4]
 810bfd4:	2200      	movs	r2, #0
 810bfd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810bfda:	2303      	movs	r3, #3
 810bfdc:	e012      	b.n	810c004 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810bfde:	687b      	ldr	r3, [r7, #4]
 810bfe0:	2220      	movs	r2, #32
 810bfe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810bfe6:	687b      	ldr	r3, [r7, #4]
 810bfe8:	2220      	movs	r2, #32
 810bfea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810bfee:	687b      	ldr	r3, [r7, #4]
 810bff0:	2200      	movs	r2, #0
 810bff2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810bff4:	687b      	ldr	r3, [r7, #4]
 810bff6:	2200      	movs	r2, #0
 810bff8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810bffa:	687b      	ldr	r3, [r7, #4]
 810bffc:	2200      	movs	r2, #0
 810bffe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810c002:	2300      	movs	r3, #0
}
 810c004:	4618      	mov	r0, r3
 810c006:	3758      	adds	r7, #88	@ 0x58
 810c008:	46bd      	mov	sp, r7
 810c00a:	bd80      	pop	{r7, pc}

0810c00c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810c00c:	b580      	push	{r7, lr}
 810c00e:	b084      	sub	sp, #16
 810c010:	af00      	add	r7, sp, #0
 810c012:	60f8      	str	r0, [r7, #12]
 810c014:	60b9      	str	r1, [r7, #8]
 810c016:	603b      	str	r3, [r7, #0]
 810c018:	4613      	mov	r3, r2
 810c01a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810c01c:	e04f      	b.n	810c0be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810c01e:	69bb      	ldr	r3, [r7, #24]
 810c020:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c024:	d04b      	beq.n	810c0be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810c026:	f7f7 fdff 	bl	8103c28 <HAL_GetTick>
 810c02a:	4602      	mov	r2, r0
 810c02c:	683b      	ldr	r3, [r7, #0]
 810c02e:	1ad3      	subs	r3, r2, r3
 810c030:	69ba      	ldr	r2, [r7, #24]
 810c032:	429a      	cmp	r2, r3
 810c034:	d302      	bcc.n	810c03c <UART_WaitOnFlagUntilTimeout+0x30>
 810c036:	69bb      	ldr	r3, [r7, #24]
 810c038:	2b00      	cmp	r3, #0
 810c03a:	d101      	bne.n	810c040 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810c03c:	2303      	movs	r3, #3
 810c03e:	e04e      	b.n	810c0de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810c040:	68fb      	ldr	r3, [r7, #12]
 810c042:	681b      	ldr	r3, [r3, #0]
 810c044:	681b      	ldr	r3, [r3, #0]
 810c046:	f003 0304 	and.w	r3, r3, #4
 810c04a:	2b00      	cmp	r3, #0
 810c04c:	d037      	beq.n	810c0be <UART_WaitOnFlagUntilTimeout+0xb2>
 810c04e:	68bb      	ldr	r3, [r7, #8]
 810c050:	2b80      	cmp	r3, #128	@ 0x80
 810c052:	d034      	beq.n	810c0be <UART_WaitOnFlagUntilTimeout+0xb2>
 810c054:	68bb      	ldr	r3, [r7, #8]
 810c056:	2b40      	cmp	r3, #64	@ 0x40
 810c058:	d031      	beq.n	810c0be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810c05a:	68fb      	ldr	r3, [r7, #12]
 810c05c:	681b      	ldr	r3, [r3, #0]
 810c05e:	69db      	ldr	r3, [r3, #28]
 810c060:	f003 0308 	and.w	r3, r3, #8
 810c064:	2b08      	cmp	r3, #8
 810c066:	d110      	bne.n	810c08a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810c068:	68fb      	ldr	r3, [r7, #12]
 810c06a:	681b      	ldr	r3, [r3, #0]
 810c06c:	2208      	movs	r2, #8
 810c06e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810c070:	68f8      	ldr	r0, [r7, #12]
 810c072:	f000 f838 	bl	810c0e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810c076:	68fb      	ldr	r3, [r7, #12]
 810c078:	2208      	movs	r2, #8
 810c07a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810c07e:	68fb      	ldr	r3, [r7, #12]
 810c080:	2200      	movs	r2, #0
 810c082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810c086:	2301      	movs	r3, #1
 810c088:	e029      	b.n	810c0de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810c08a:	68fb      	ldr	r3, [r7, #12]
 810c08c:	681b      	ldr	r3, [r3, #0]
 810c08e:	69db      	ldr	r3, [r3, #28]
 810c090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810c094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810c098:	d111      	bne.n	810c0be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810c09a:	68fb      	ldr	r3, [r7, #12]
 810c09c:	681b      	ldr	r3, [r3, #0]
 810c09e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810c0a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810c0a4:	68f8      	ldr	r0, [r7, #12]
 810c0a6:	f000 f81e 	bl	810c0e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810c0aa:	68fb      	ldr	r3, [r7, #12]
 810c0ac:	2220      	movs	r2, #32
 810c0ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810c0b2:	68fb      	ldr	r3, [r7, #12]
 810c0b4:	2200      	movs	r2, #0
 810c0b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810c0ba:	2303      	movs	r3, #3
 810c0bc:	e00f      	b.n	810c0de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810c0be:	68fb      	ldr	r3, [r7, #12]
 810c0c0:	681b      	ldr	r3, [r3, #0]
 810c0c2:	69da      	ldr	r2, [r3, #28]
 810c0c4:	68bb      	ldr	r3, [r7, #8]
 810c0c6:	4013      	ands	r3, r2
 810c0c8:	68ba      	ldr	r2, [r7, #8]
 810c0ca:	429a      	cmp	r2, r3
 810c0cc:	bf0c      	ite	eq
 810c0ce:	2301      	moveq	r3, #1
 810c0d0:	2300      	movne	r3, #0
 810c0d2:	b2db      	uxtb	r3, r3
 810c0d4:	461a      	mov	r2, r3
 810c0d6:	79fb      	ldrb	r3, [r7, #7]
 810c0d8:	429a      	cmp	r2, r3
 810c0da:	d0a0      	beq.n	810c01e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810c0dc:	2300      	movs	r3, #0
}
 810c0de:	4618      	mov	r0, r3
 810c0e0:	3710      	adds	r7, #16
 810c0e2:	46bd      	mov	sp, r7
 810c0e4:	bd80      	pop	{r7, pc}

0810c0e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810c0e6:	b480      	push	{r7}
 810c0e8:	b095      	sub	sp, #84	@ 0x54
 810c0ea:	af00      	add	r7, sp, #0
 810c0ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810c0ee:	687b      	ldr	r3, [r7, #4]
 810c0f0:	681b      	ldr	r3, [r3, #0]
 810c0f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c0f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c0f6:	e853 3f00 	ldrex	r3, [r3]
 810c0fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810c0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c0fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810c102:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810c104:	687b      	ldr	r3, [r7, #4]
 810c106:	681b      	ldr	r3, [r3, #0]
 810c108:	461a      	mov	r2, r3
 810c10a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810c10c:	643b      	str	r3, [r7, #64]	@ 0x40
 810c10e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c110:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810c112:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810c114:	e841 2300 	strex	r3, r2, [r1]
 810c118:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810c11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c11c:	2b00      	cmp	r3, #0
 810c11e:	d1e6      	bne.n	810c0ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810c120:	687b      	ldr	r3, [r7, #4]
 810c122:	681b      	ldr	r3, [r3, #0]
 810c124:	3308      	adds	r3, #8
 810c126:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c128:	6a3b      	ldr	r3, [r7, #32]
 810c12a:	e853 3f00 	ldrex	r3, [r3]
 810c12e:	61fb      	str	r3, [r7, #28]
   return(result);
 810c130:	69fb      	ldr	r3, [r7, #28]
 810c132:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810c136:	f023 0301 	bic.w	r3, r3, #1
 810c13a:	64bb      	str	r3, [r7, #72]	@ 0x48
 810c13c:	687b      	ldr	r3, [r7, #4]
 810c13e:	681b      	ldr	r3, [r3, #0]
 810c140:	3308      	adds	r3, #8
 810c142:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810c144:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810c146:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c148:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810c14a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810c14c:	e841 2300 	strex	r3, r2, [r1]
 810c150:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810c152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c154:	2b00      	cmp	r3, #0
 810c156:	d1e3      	bne.n	810c120 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c158:	687b      	ldr	r3, [r7, #4]
 810c15a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810c15c:	2b01      	cmp	r3, #1
 810c15e:	d118      	bne.n	810c192 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810c160:	687b      	ldr	r3, [r7, #4]
 810c162:	681b      	ldr	r3, [r3, #0]
 810c164:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c166:	68fb      	ldr	r3, [r7, #12]
 810c168:	e853 3f00 	ldrex	r3, [r3]
 810c16c:	60bb      	str	r3, [r7, #8]
   return(result);
 810c16e:	68bb      	ldr	r3, [r7, #8]
 810c170:	f023 0310 	bic.w	r3, r3, #16
 810c174:	647b      	str	r3, [r7, #68]	@ 0x44
 810c176:	687b      	ldr	r3, [r7, #4]
 810c178:	681b      	ldr	r3, [r3, #0]
 810c17a:	461a      	mov	r2, r3
 810c17c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810c17e:	61bb      	str	r3, [r7, #24]
 810c180:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c182:	6979      	ldr	r1, [r7, #20]
 810c184:	69ba      	ldr	r2, [r7, #24]
 810c186:	e841 2300 	strex	r3, r2, [r1]
 810c18a:	613b      	str	r3, [r7, #16]
   return(result);
 810c18c:	693b      	ldr	r3, [r7, #16]
 810c18e:	2b00      	cmp	r3, #0
 810c190:	d1e6      	bne.n	810c160 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810c192:	687b      	ldr	r3, [r7, #4]
 810c194:	2220      	movs	r2, #32
 810c196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c19a:	687b      	ldr	r3, [r7, #4]
 810c19c:	2200      	movs	r2, #0
 810c19e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810c1a0:	687b      	ldr	r3, [r7, #4]
 810c1a2:	2200      	movs	r2, #0
 810c1a4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810c1a6:	bf00      	nop
 810c1a8:	3754      	adds	r7, #84	@ 0x54
 810c1aa:	46bd      	mov	sp, r7
 810c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c1b0:	4770      	bx	lr

0810c1b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810c1b2:	b480      	push	{r7}
 810c1b4:	b085      	sub	sp, #20
 810c1b6:	af00      	add	r7, sp, #0
 810c1b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c1ba:	687b      	ldr	r3, [r7, #4]
 810c1bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810c1c0:	2b01      	cmp	r3, #1
 810c1c2:	d101      	bne.n	810c1c8 <HAL_UARTEx_DisableFifoMode+0x16>
 810c1c4:	2302      	movs	r3, #2
 810c1c6:	e027      	b.n	810c218 <HAL_UARTEx_DisableFifoMode+0x66>
 810c1c8:	687b      	ldr	r3, [r7, #4]
 810c1ca:	2201      	movs	r2, #1
 810c1cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810c1d0:	687b      	ldr	r3, [r7, #4]
 810c1d2:	2224      	movs	r2, #36	@ 0x24
 810c1d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c1d8:	687b      	ldr	r3, [r7, #4]
 810c1da:	681b      	ldr	r3, [r3, #0]
 810c1dc:	681b      	ldr	r3, [r3, #0]
 810c1de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c1e0:	687b      	ldr	r3, [r7, #4]
 810c1e2:	681b      	ldr	r3, [r3, #0]
 810c1e4:	681a      	ldr	r2, [r3, #0]
 810c1e6:	687b      	ldr	r3, [r7, #4]
 810c1e8:	681b      	ldr	r3, [r3, #0]
 810c1ea:	f022 0201 	bic.w	r2, r2, #1
 810c1ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810c1f0:	68fb      	ldr	r3, [r7, #12]
 810c1f2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810c1f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810c1f8:	687b      	ldr	r3, [r7, #4]
 810c1fa:	2200      	movs	r2, #0
 810c1fc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c1fe:	687b      	ldr	r3, [r7, #4]
 810c200:	681b      	ldr	r3, [r3, #0]
 810c202:	68fa      	ldr	r2, [r7, #12]
 810c204:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c206:	687b      	ldr	r3, [r7, #4]
 810c208:	2220      	movs	r2, #32
 810c20a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c20e:	687b      	ldr	r3, [r7, #4]
 810c210:	2200      	movs	r2, #0
 810c212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810c216:	2300      	movs	r3, #0
}
 810c218:	4618      	mov	r0, r3
 810c21a:	3714      	adds	r7, #20
 810c21c:	46bd      	mov	sp, r7
 810c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c222:	4770      	bx	lr

0810c224 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810c224:	b580      	push	{r7, lr}
 810c226:	b084      	sub	sp, #16
 810c228:	af00      	add	r7, sp, #0
 810c22a:	6078      	str	r0, [r7, #4]
 810c22c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c22e:	687b      	ldr	r3, [r7, #4]
 810c230:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810c234:	2b01      	cmp	r3, #1
 810c236:	d101      	bne.n	810c23c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810c238:	2302      	movs	r3, #2
 810c23a:	e02d      	b.n	810c298 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810c23c:	687b      	ldr	r3, [r7, #4]
 810c23e:	2201      	movs	r2, #1
 810c240:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810c244:	687b      	ldr	r3, [r7, #4]
 810c246:	2224      	movs	r2, #36	@ 0x24
 810c248:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c24c:	687b      	ldr	r3, [r7, #4]
 810c24e:	681b      	ldr	r3, [r3, #0]
 810c250:	681b      	ldr	r3, [r3, #0]
 810c252:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c254:	687b      	ldr	r3, [r7, #4]
 810c256:	681b      	ldr	r3, [r3, #0]
 810c258:	681a      	ldr	r2, [r3, #0]
 810c25a:	687b      	ldr	r3, [r7, #4]
 810c25c:	681b      	ldr	r3, [r3, #0]
 810c25e:	f022 0201 	bic.w	r2, r2, #1
 810c262:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810c264:	687b      	ldr	r3, [r7, #4]
 810c266:	681b      	ldr	r3, [r3, #0]
 810c268:	689b      	ldr	r3, [r3, #8]
 810c26a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810c26e:	687b      	ldr	r3, [r7, #4]
 810c270:	681b      	ldr	r3, [r3, #0]
 810c272:	683a      	ldr	r2, [r7, #0]
 810c274:	430a      	orrs	r2, r1
 810c276:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810c278:	6878      	ldr	r0, [r7, #4]
 810c27a:	f000 f84f 	bl	810c31c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c27e:	687b      	ldr	r3, [r7, #4]
 810c280:	681b      	ldr	r3, [r3, #0]
 810c282:	68fa      	ldr	r2, [r7, #12]
 810c284:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c286:	687b      	ldr	r3, [r7, #4]
 810c288:	2220      	movs	r2, #32
 810c28a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c28e:	687b      	ldr	r3, [r7, #4]
 810c290:	2200      	movs	r2, #0
 810c292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810c296:	2300      	movs	r3, #0
}
 810c298:	4618      	mov	r0, r3
 810c29a:	3710      	adds	r7, #16
 810c29c:	46bd      	mov	sp, r7
 810c29e:	bd80      	pop	{r7, pc}

0810c2a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810c2a0:	b580      	push	{r7, lr}
 810c2a2:	b084      	sub	sp, #16
 810c2a4:	af00      	add	r7, sp, #0
 810c2a6:	6078      	str	r0, [r7, #4]
 810c2a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c2aa:	687b      	ldr	r3, [r7, #4]
 810c2ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810c2b0:	2b01      	cmp	r3, #1
 810c2b2:	d101      	bne.n	810c2b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810c2b4:	2302      	movs	r3, #2
 810c2b6:	e02d      	b.n	810c314 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810c2b8:	687b      	ldr	r3, [r7, #4]
 810c2ba:	2201      	movs	r2, #1
 810c2bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810c2c0:	687b      	ldr	r3, [r7, #4]
 810c2c2:	2224      	movs	r2, #36	@ 0x24
 810c2c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c2c8:	687b      	ldr	r3, [r7, #4]
 810c2ca:	681b      	ldr	r3, [r3, #0]
 810c2cc:	681b      	ldr	r3, [r3, #0]
 810c2ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c2d0:	687b      	ldr	r3, [r7, #4]
 810c2d2:	681b      	ldr	r3, [r3, #0]
 810c2d4:	681a      	ldr	r2, [r3, #0]
 810c2d6:	687b      	ldr	r3, [r7, #4]
 810c2d8:	681b      	ldr	r3, [r3, #0]
 810c2da:	f022 0201 	bic.w	r2, r2, #1
 810c2de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810c2e0:	687b      	ldr	r3, [r7, #4]
 810c2e2:	681b      	ldr	r3, [r3, #0]
 810c2e4:	689b      	ldr	r3, [r3, #8]
 810c2e6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810c2ea:	687b      	ldr	r3, [r7, #4]
 810c2ec:	681b      	ldr	r3, [r3, #0]
 810c2ee:	683a      	ldr	r2, [r7, #0]
 810c2f0:	430a      	orrs	r2, r1
 810c2f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810c2f4:	6878      	ldr	r0, [r7, #4]
 810c2f6:	f000 f811 	bl	810c31c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c2fa:	687b      	ldr	r3, [r7, #4]
 810c2fc:	681b      	ldr	r3, [r3, #0]
 810c2fe:	68fa      	ldr	r2, [r7, #12]
 810c300:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c302:	687b      	ldr	r3, [r7, #4]
 810c304:	2220      	movs	r2, #32
 810c306:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c30a:	687b      	ldr	r3, [r7, #4]
 810c30c:	2200      	movs	r2, #0
 810c30e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810c312:	2300      	movs	r3, #0
}
 810c314:	4618      	mov	r0, r3
 810c316:	3710      	adds	r7, #16
 810c318:	46bd      	mov	sp, r7
 810c31a:	bd80      	pop	{r7, pc}

0810c31c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810c31c:	b480      	push	{r7}
 810c31e:	b085      	sub	sp, #20
 810c320:	af00      	add	r7, sp, #0
 810c322:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810c324:	687b      	ldr	r3, [r7, #4]
 810c326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810c328:	2b00      	cmp	r3, #0
 810c32a:	d108      	bne.n	810c33e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810c32c:	687b      	ldr	r3, [r7, #4]
 810c32e:	2201      	movs	r2, #1
 810c330:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810c334:	687b      	ldr	r3, [r7, #4]
 810c336:	2201      	movs	r2, #1
 810c338:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810c33c:	e031      	b.n	810c3a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810c33e:	2310      	movs	r3, #16
 810c340:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810c342:	2310      	movs	r3, #16
 810c344:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810c346:	687b      	ldr	r3, [r7, #4]
 810c348:	681b      	ldr	r3, [r3, #0]
 810c34a:	689b      	ldr	r3, [r3, #8]
 810c34c:	0e5b      	lsrs	r3, r3, #25
 810c34e:	b2db      	uxtb	r3, r3
 810c350:	f003 0307 	and.w	r3, r3, #7
 810c354:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810c356:	687b      	ldr	r3, [r7, #4]
 810c358:	681b      	ldr	r3, [r3, #0]
 810c35a:	689b      	ldr	r3, [r3, #8]
 810c35c:	0f5b      	lsrs	r3, r3, #29
 810c35e:	b2db      	uxtb	r3, r3
 810c360:	f003 0307 	and.w	r3, r3, #7
 810c364:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810c366:	7bbb      	ldrb	r3, [r7, #14]
 810c368:	7b3a      	ldrb	r2, [r7, #12]
 810c36a:	4911      	ldr	r1, [pc, #68]	@ (810c3b0 <UARTEx_SetNbDataToProcess+0x94>)
 810c36c:	5c8a      	ldrb	r2, [r1, r2]
 810c36e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810c372:	7b3a      	ldrb	r2, [r7, #12]
 810c374:	490f      	ldr	r1, [pc, #60]	@ (810c3b4 <UARTEx_SetNbDataToProcess+0x98>)
 810c376:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810c378:	fb93 f3f2 	sdiv	r3, r3, r2
 810c37c:	b29a      	uxth	r2, r3
 810c37e:	687b      	ldr	r3, [r7, #4]
 810c380:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810c384:	7bfb      	ldrb	r3, [r7, #15]
 810c386:	7b7a      	ldrb	r2, [r7, #13]
 810c388:	4909      	ldr	r1, [pc, #36]	@ (810c3b0 <UARTEx_SetNbDataToProcess+0x94>)
 810c38a:	5c8a      	ldrb	r2, [r1, r2]
 810c38c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810c390:	7b7a      	ldrb	r2, [r7, #13]
 810c392:	4908      	ldr	r1, [pc, #32]	@ (810c3b4 <UARTEx_SetNbDataToProcess+0x98>)
 810c394:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810c396:	fb93 f3f2 	sdiv	r3, r3, r2
 810c39a:	b29a      	uxth	r2, r3
 810c39c:	687b      	ldr	r3, [r7, #4]
 810c39e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810c3a2:	bf00      	nop
 810c3a4:	3714      	adds	r7, #20
 810c3a6:	46bd      	mov	sp, r7
 810c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c3ac:	4770      	bx	lr
 810c3ae:	bf00      	nop
 810c3b0:	08111708 	.word	0x08111708
 810c3b4:	08111710 	.word	0x08111710

0810c3b8 <arm_mat_trans_f32>:
 810c3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c3bc:	8802      	ldrh	r2, [r0, #0]
 810c3be:	884b      	ldrh	r3, [r1, #2]
 810c3c0:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810c3c4:	684f      	ldr	r7, [r1, #4]
 810c3c6:	8840      	ldrh	r0, [r0, #2]
 810c3c8:	4293      	cmp	r3, r2
 810c3ca:	b083      	sub	sp, #12
 810c3cc:	d14c      	bne.n	810c468 <arm_mat_trans_f32+0xb0>
 810c3ce:	f8b1 e000 	ldrh.w	lr, [r1]
 810c3d2:	4586      	cmp	lr, r0
 810c3d4:	d148      	bne.n	810c468 <arm_mat_trans_f32+0xb0>
 810c3d6:	ea4f 089e 	mov.w	r8, lr, lsr #2
 810c3da:	009c      	lsls	r4, r3, #2
 810c3dc:	f00e 0e03 	and.w	lr, lr, #3
 810c3e0:	fb08 f904 	mul.w	r9, r8, r4
 810c3e4:	ea4f 028e 	mov.w	r2, lr, lsl #2
 810c3e8:	011d      	lsls	r5, r3, #4
 810c3ea:	00db      	lsls	r3, r3, #3
 810c3ec:	ea4f 0989 	mov.w	r9, r9, lsl #2
 810c3f0:	eb07 0a04 	add.w	sl, r7, r4
 810c3f4:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 810c3f8:	9201      	str	r2, [sp, #4]
 810c3fa:	9300      	str	r3, [sp, #0]
 810c3fc:	463b      	mov	r3, r7
 810c3fe:	f1b8 0f00 	cmp.w	r8, #0
 810c402:	d01d      	beq.n	810c440 <arm_mat_trans_f32+0x88>
 810c404:	9900      	ldr	r1, [sp, #0]
 810c406:	f10c 0210 	add.w	r2, ip, #16
 810c40a:	4439      	add	r1, r7
 810c40c:	4640      	mov	r0, r8
 810c40e:	f852 6c10 	ldr.w	r6, [r2, #-16]
 810c412:	601e      	str	r6, [r3, #0]
 810c414:	ed52 7a03 	vldr	s15, [r2, #-12]
 810c418:	191e      	adds	r6, r3, r4
 810c41a:	edc6 7a00 	vstr	s15, [r6]
 810c41e:	f852 6c08 	ldr.w	r6, [r2, #-8]
 810c422:	600e      	str	r6, [r1, #0]
 810c424:	ed52 7a01 	vldr	s15, [r2, #-4]
 810c428:	190e      	adds	r6, r1, r4
 810c42a:	3801      	subs	r0, #1
 810c42c:	442b      	add	r3, r5
 810c42e:	f102 0210 	add.w	r2, r2, #16
 810c432:	edc6 7a00 	vstr	s15, [r6]
 810c436:	4429      	add	r1, r5
 810c438:	d1e9      	bne.n	810c40e <arm_mat_trans_f32+0x56>
 810c43a:	44dc      	add	ip, fp
 810c43c:	eb09 0307 	add.w	r3, r9, r7
 810c440:	f1be 0f00 	cmp.w	lr, #0
 810c444:	d009      	beq.n	810c45a <arm_mat_trans_f32+0xa2>
 810c446:	4672      	mov	r2, lr
 810c448:	4661      	mov	r1, ip
 810c44a:	f851 0b04 	ldr.w	r0, [r1], #4
 810c44e:	6018      	str	r0, [r3, #0]
 810c450:	3a01      	subs	r2, #1
 810c452:	4423      	add	r3, r4
 810c454:	d1f9      	bne.n	810c44a <arm_mat_trans_f32+0x92>
 810c456:	9b01      	ldr	r3, [sp, #4]
 810c458:	449c      	add	ip, r3
 810c45a:	3704      	adds	r7, #4
 810c45c:	4557      	cmp	r7, sl
 810c45e:	d1cd      	bne.n	810c3fc <arm_mat_trans_f32+0x44>
 810c460:	2000      	movs	r0, #0
 810c462:	b003      	add	sp, #12
 810c464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c468:	f06f 0002 	mvn.w	r0, #2
 810c46c:	e7f9      	b.n	810c462 <arm_mat_trans_f32+0xaa>
 810c46e:	bf00      	nop

0810c470 <arm_mat_sub_f32>:
 810c470:	b4f0      	push	{r4, r5, r6, r7}
 810c472:	e9d1 4700 	ldrd	r4, r7, [r1]
 810c476:	6803      	ldr	r3, [r0, #0]
 810c478:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810c47c:	6856      	ldr	r6, [r2, #4]
 810c47e:	42a3      	cmp	r3, r4
 810c480:	d15d      	bne.n	810c53e <arm_mat_sub_f32+0xce>
 810c482:	6812      	ldr	r2, [r2, #0]
 810c484:	4293      	cmp	r3, r2
 810c486:	d15a      	bne.n	810c53e <arm_mat_sub_f32+0xce>
 810c488:	8803      	ldrh	r3, [r0, #0]
 810c48a:	8844      	ldrh	r4, [r0, #2]
 810c48c:	fb04 f403 	mul.w	r4, r4, r3
 810c490:	08a5      	lsrs	r5, r4, #2
 810c492:	d032      	beq.n	810c4fa <arm_mat_sub_f32+0x8a>
 810c494:	f10c 0110 	add.w	r1, ip, #16
 810c498:	f107 0210 	add.w	r2, r7, #16
 810c49c:	f106 0310 	add.w	r3, r6, #16
 810c4a0:	4628      	mov	r0, r5
 810c4a2:	ed12 7a04 	vldr	s14, [r2, #-16]
 810c4a6:	ed51 7a04 	vldr	s15, [r1, #-16]
 810c4aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810c4ae:	3801      	subs	r0, #1
 810c4b0:	ed43 7a04 	vstr	s15, [r3, #-16]
 810c4b4:	ed12 7a03 	vldr	s14, [r2, #-12]
 810c4b8:	ed51 7a03 	vldr	s15, [r1, #-12]
 810c4bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810c4c0:	f101 0110 	add.w	r1, r1, #16
 810c4c4:	ed43 7a03 	vstr	s15, [r3, #-12]
 810c4c8:	ed12 7a02 	vldr	s14, [r2, #-8]
 810c4cc:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 810c4d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810c4d4:	f102 0210 	add.w	r2, r2, #16
 810c4d8:	ed43 7a02 	vstr	s15, [r3, #-8]
 810c4dc:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 810c4e0:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 810c4e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810c4e8:	f103 0310 	add.w	r3, r3, #16
 810c4ec:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 810c4f0:	d1d7      	bne.n	810c4a2 <arm_mat_sub_f32+0x32>
 810c4f2:	012b      	lsls	r3, r5, #4
 810c4f4:	449c      	add	ip, r3
 810c4f6:	441f      	add	r7, r3
 810c4f8:	441e      	add	r6, r3
 810c4fa:	f014 0403 	ands.w	r4, r4, #3
 810c4fe:	d01b      	beq.n	810c538 <arm_mat_sub_f32+0xc8>
 810c500:	eddc 7a00 	vldr	s15, [ip]
 810c504:	ed97 7a00 	vldr	s14, [r7]
 810c508:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810c50c:	3c01      	subs	r4, #1
 810c50e:	edc6 7a00 	vstr	s15, [r6]
 810c512:	d011      	beq.n	810c538 <arm_mat_sub_f32+0xc8>
 810c514:	eddc 7a01 	vldr	s15, [ip, #4]
 810c518:	ed97 7a01 	vldr	s14, [r7, #4]
 810c51c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810c520:	2c01      	cmp	r4, #1
 810c522:	edc6 7a01 	vstr	s15, [r6, #4]
 810c526:	d007      	beq.n	810c538 <arm_mat_sub_f32+0xc8>
 810c528:	eddc 7a02 	vldr	s15, [ip, #8]
 810c52c:	ed97 7a02 	vldr	s14, [r7, #8]
 810c530:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810c534:	edc6 7a02 	vstr	s15, [r6, #8]
 810c538:	2000      	movs	r0, #0
 810c53a:	bcf0      	pop	{r4, r5, r6, r7}
 810c53c:	4770      	bx	lr
 810c53e:	f06f 0002 	mvn.w	r0, #2
 810c542:	e7fa      	b.n	810c53a <arm_mat_sub_f32+0xca>

0810c544 <arm_mat_mult_f32>:
 810c544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c548:	8845      	ldrh	r5, [r0, #2]
 810c54a:	880b      	ldrh	r3, [r1, #0]
 810c54c:	8806      	ldrh	r6, [r0, #0]
 810c54e:	6847      	ldr	r7, [r0, #4]
 810c550:	6854      	ldr	r4, [r2, #4]
 810c552:	6848      	ldr	r0, [r1, #4]
 810c554:	b08b      	sub	sp, #44	@ 0x2c
 810c556:	42ab      	cmp	r3, r5
 810c558:	9109      	str	r1, [sp, #36]	@ 0x24
 810c55a:	9604      	str	r6, [sp, #16]
 810c55c:	8849      	ldrh	r1, [r1, #2]
 810c55e:	f040 808a 	bne.w	810c676 <arm_mat_mult_f32+0x132>
 810c562:	8815      	ldrh	r5, [r2, #0]
 810c564:	42b5      	cmp	r5, r6
 810c566:	f040 8086 	bne.w	810c676 <arm_mat_mult_f32+0x132>
 810c56a:	8852      	ldrh	r2, [r2, #2]
 810c56c:	428a      	cmp	r2, r1
 810c56e:	f040 8082 	bne.w	810c676 <arm_mat_mult_f32+0x132>
 810c572:	ea4f 0893 	mov.w	r8, r3, lsr #2
 810c576:	1d01      	adds	r1, r0, #4
 810c578:	0116      	lsls	r6, r2, #4
 810c57a:	9108      	str	r1, [sp, #32]
 810c57c:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 810c580:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 810c584:	9101      	str	r1, [sp, #4]
 810c586:	fb06 f108 	mul.w	r1, r6, r8
 810c58a:	0095      	lsls	r5, r2, #2
 810c58c:	9103      	str	r1, [sp, #12]
 810c58e:	00d2      	lsls	r2, r2, #3
 810c590:	ea4f 018c 	mov.w	r1, ip, lsl #2
 810c594:	f003 0903 	and.w	r9, r3, #3
 810c598:	009b      	lsls	r3, r3, #2
 810c59a:	f107 0b10 	add.w	fp, r7, #16
 810c59e:	eb04 0a05 	add.w	sl, r4, r5
 810c5a2:	9107      	str	r1, [sp, #28]
 810c5a4:	9202      	str	r2, [sp, #8]
 810c5a6:	9306      	str	r3, [sp, #24]
 810c5a8:	f1ab 0310 	sub.w	r3, fp, #16
 810c5ac:	9305      	str	r3, [sp, #20]
 810c5ae:	9b07      	ldr	r3, [sp, #28]
 810c5b0:	f8dd e020 	ldr.w	lr, [sp, #32]
 810c5b4:	eb03 0c0a 	add.w	ip, r3, sl
 810c5b8:	eddf 7a31 	vldr	s15, [pc, #196]	@ 810c680 <arm_mat_mult_f32+0x13c>
 810c5bc:	f1b8 0f00 	cmp.w	r8, #0
 810c5c0:	d053      	beq.n	810c66a <arm_mat_mult_f32+0x126>
 810c5c2:	9b02      	ldr	r3, [sp, #8]
 810c5c4:	4644      	mov	r4, r8
 810c5c6:	18c1      	adds	r1, r0, r3
 810c5c8:	4602      	mov	r2, r0
 810c5ca:	465b      	mov	r3, fp
 810c5cc:	ed92 6a00 	vldr	s12, [r2]
 810c5d0:	ed13 7a04 	vldr	s14, [r3, #-16]
 810c5d4:	ed53 4a03 	vldr	s9, [r3, #-12]
 810c5d8:	ed53 6a02 	vldr	s13, [r3, #-8]
 810c5dc:	ed91 5a00 	vldr	s10, [r1]
 810c5e0:	ed53 5a01 	vldr	s11, [r3, #-4]
 810c5e4:	1957      	adds	r7, r2, r5
 810c5e6:	ee27 7a06 	vmul.f32	s14, s14, s12
 810c5ea:	ed97 6a00 	vldr	s12, [r7]
 810c5ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 810c5f2:	ee26 6a24 	vmul.f32	s12, s12, s9
 810c5f6:	194f      	adds	r7, r1, r5
 810c5f8:	ee36 6a27 	vadd.f32	s12, s12, s15
 810c5fc:	ee26 7a85 	vmul.f32	s14, s13, s10
 810c600:	edd7 7a00 	vldr	s15, [r7]
 810c604:	ee37 7a06 	vadd.f32	s14, s14, s12
 810c608:	ee67 7aa5 	vmul.f32	s15, s15, s11
 810c60c:	3c01      	subs	r4, #1
 810c60e:	4432      	add	r2, r6
 810c610:	4431      	add	r1, r6
 810c612:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c616:	f103 0310 	add.w	r3, r3, #16
 810c61a:	d1d7      	bne.n	810c5cc <arm_mat_mult_f32+0x88>
 810c61c:	9b03      	ldr	r3, [sp, #12]
 810c61e:	9a01      	ldr	r2, [sp, #4]
 810c620:	4418      	add	r0, r3
 810c622:	f1b9 0f00 	cmp.w	r9, #0
 810c626:	d00b      	beq.n	810c640 <arm_mat_mult_f32+0xfc>
 810c628:	464b      	mov	r3, r9
 810c62a:	edd0 6a00 	vldr	s13, [r0]
 810c62e:	ecb2 7a01 	vldmia	r2!, {s14}
 810c632:	ee27 7a26 	vmul.f32	s14, s14, s13
 810c636:	3b01      	subs	r3, #1
 810c638:	4428      	add	r0, r5
 810c63a:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c63e:	d1f4      	bne.n	810c62a <arm_mat_mult_f32+0xe6>
 810c640:	ecec 7a01 	vstmia	ip!, {s15}
 810c644:	45d4      	cmp	ip, sl
 810c646:	4670      	mov	r0, lr
 810c648:	f10e 0e04 	add.w	lr, lr, #4
 810c64c:	d1b4      	bne.n	810c5b8 <arm_mat_mult_f32+0x74>
 810c64e:	9a01      	ldr	r2, [sp, #4]
 810c650:	9b06      	ldr	r3, [sp, #24]
 810c652:	4611      	mov	r1, r2
 810c654:	4419      	add	r1, r3
 810c656:	449b      	add	fp, r3
 810c658:	9b04      	ldr	r3, [sp, #16]
 810c65a:	9101      	str	r1, [sp, #4]
 810c65c:	3b01      	subs	r3, #1
 810c65e:	44aa      	add	sl, r5
 810c660:	9304      	str	r3, [sp, #16]
 810c662:	d004      	beq.n	810c66e <arm_mat_mult_f32+0x12a>
 810c664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c666:	6858      	ldr	r0, [r3, #4]
 810c668:	e79e      	b.n	810c5a8 <arm_mat_mult_f32+0x64>
 810c66a:	9a05      	ldr	r2, [sp, #20]
 810c66c:	e7d9      	b.n	810c622 <arm_mat_mult_f32+0xde>
 810c66e:	4618      	mov	r0, r3
 810c670:	b00b      	add	sp, #44	@ 0x2c
 810c672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c676:	f06f 0002 	mvn.w	r0, #2
 810c67a:	b00b      	add	sp, #44	@ 0x2c
 810c67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c680:	00000000 	.word	0x00000000

0810c684 <arm_mat_inverse_f32>:
 810c684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c688:	8843      	ldrh	r3, [r0, #2]
 810c68a:	8804      	ldrh	r4, [r0, #0]
 810c68c:	684e      	ldr	r6, [r1, #4]
 810c68e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 810c692:	b087      	sub	sp, #28
 810c694:	429c      	cmp	r4, r3
 810c696:	9301      	str	r3, [sp, #4]
 810c698:	9603      	str	r6, [sp, #12]
 810c69a:	f040 80ea 	bne.w	810c872 <arm_mat_inverse_f32+0x1ee>
 810c69e:	880a      	ldrh	r2, [r1, #0]
 810c6a0:	884b      	ldrh	r3, [r1, #2]
 810c6a2:	4293      	cmp	r3, r2
 810c6a4:	f040 80e5 	bne.w	810c872 <arm_mat_inverse_f32+0x1ee>
 810c6a8:	429c      	cmp	r4, r3
 810c6aa:	f040 80e2 	bne.w	810c872 <arm_mat_inverse_f32+0x1ee>
 810c6ae:	9005      	str	r0, [sp, #20]
 810c6b0:	b30c      	cbz	r4, 810c6f6 <arm_mat_inverse_f32+0x72>
 810c6b2:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 810c6b6:	1e67      	subs	r7, r4, #1
 810c6b8:	f846 bb04 	str.w	fp, [r6], #4
 810c6bc:	d01b      	beq.n	810c6f6 <arm_mat_inverse_f32+0x72>
 810c6be:	f04f 0801 	mov.w	r8, #1
 810c6c2:	00ba      	lsls	r2, r7, #2
 810c6c4:	eb06 0a02 	add.w	sl, r6, r2
 810c6c8:	ea4f 0588 	mov.w	r5, r8, lsl #2
 810c6cc:	4630      	mov	r0, r6
 810c6ce:	2100      	movs	r1, #0
 810c6d0:	f001 fca0 	bl	810e014 <memset>
 810c6d4:	eb0a 0605 	add.w	r6, sl, r5
 810c6d8:	462a      	mov	r2, r5
 810c6da:	2100      	movs	r1, #0
 810c6dc:	4650      	mov	r0, sl
 810c6de:	f1b8 0f00 	cmp.w	r8, #0
 810c6e2:	f000 80cb 	beq.w	810c87c <arm_mat_inverse_f32+0x1f8>
 810c6e6:	f001 fc95 	bl	810e014 <memset>
 810c6ea:	3f01      	subs	r7, #1
 810c6ec:	f108 0801 	add.w	r8, r8, #1
 810c6f0:	f846 bb04 	str.w	fp, [r6], #4
 810c6f4:	d1e5      	bne.n	810c6c2 <arm_mat_inverse_f32+0x3e>
 810c6f6:	9b01      	ldr	r3, [sp, #4]
 810c6f8:	2b00      	cmp	r3, #0
 810c6fa:	f000 80b5 	beq.w	810c868 <arm_mat_inverse_f32+0x1e4>
 810c6fe:	009d      	lsls	r5, r3, #2
 810c700:	eb09 0205 	add.w	r2, r9, r5
 810c704:	46cc      	mov	ip, r9
 810c706:	9202      	str	r2, [sp, #8]
 810c708:	f8dd 900c 	ldr.w	r9, [sp, #12]
 810c70c:	1d2a      	adds	r2, r5, #4
 810c70e:	9204      	str	r2, [sp, #16]
 810c710:	462f      	mov	r7, r5
 810c712:	469e      	mov	lr, r3
 810c714:	2600      	movs	r6, #0
 810c716:	9b02      	ldr	r3, [sp, #8]
 810c718:	eddc 6a00 	vldr	s13, [ip]
 810c71c:	42b4      	cmp	r4, r6
 810c71e:	eba3 0b07 	sub.w	fp, r3, r7
 810c722:	f000 80a1 	beq.w	810c868 <arm_mat_inverse_f32+0x1e4>
 810c726:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 810c88c <arm_mat_inverse_f32+0x208>
 810c72a:	4632      	mov	r2, r6
 810c72c:	4663      	mov	r3, ip
 810c72e:	e00b      	b.n	810c748 <arm_mat_inverse_f32+0xc4>
 810c730:	eef4 7a47 	vcmp.f32	s15, s14
 810c734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c738:	f102 0201 	add.w	r2, r2, #1
 810c73c:	bfc8      	it	gt
 810c73e:	eeb0 7a67 	vmovgt.f32	s14, s15
 810c742:	42a2      	cmp	r2, r4
 810c744:	442b      	add	r3, r5
 810c746:	d014      	beq.n	810c772 <arm_mat_inverse_f32+0xee>
 810c748:	edd3 7a00 	vldr	s15, [r3]
 810c74c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810c750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c754:	eeb1 6a67 	vneg.f32	s12, s15
 810c758:	dcea      	bgt.n	810c730 <arm_mat_inverse_f32+0xac>
 810c75a:	eeb4 6a47 	vcmp.f32	s12, s14
 810c75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c762:	f102 0201 	add.w	r2, r2, #1
 810c766:	bfc8      	it	gt
 810c768:	eeb0 7a46 	vmovgt.f32	s14, s12
 810c76c:	42a2      	cmp	r2, r4
 810c76e:	442b      	add	r3, r5
 810c770:	d1ea      	bne.n	810c748 <arm_mat_inverse_f32+0xc4>
 810c772:	eeb5 7a40 	vcmp.f32	s14, #0.0
 810c776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c77a:	d075      	beq.n	810c868 <arm_mat_inverse_f32+0x1e4>
 810c77c:	eef5 6a40 	vcmp.f32	s13, #0.0
 810c780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c784:	d070      	beq.n	810c868 <arm_mat_inverse_f32+0x1e4>
 810c786:	4672      	mov	r2, lr
 810c788:	4663      	mov	r3, ip
 810c78a:	ed93 7a00 	vldr	s14, [r3]
 810c78e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810c792:	3a01      	subs	r2, #1
 810c794:	ece3 7a01 	vstmia	r3!, {s15}
 810c798:	d1f7      	bne.n	810c78a <arm_mat_inverse_f32+0x106>
 810c79a:	9901      	ldr	r1, [sp, #4]
 810c79c:	464b      	mov	r3, r9
 810c79e:	ed93 7a00 	vldr	s14, [r3]
 810c7a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810c7a6:	3901      	subs	r1, #1
 810c7a8:	ece3 7a01 	vstmia	r3!, {s15}
 810c7ac:	d1f7      	bne.n	810c79e <arm_mat_inverse_f32+0x11a>
 810c7ae:	9803      	ldr	r0, [sp, #12]
 810c7b0:	ea4f 0886 	mov.w	r8, r6, lsl #2
 810c7b4:	42b1      	cmp	r1, r6
 810c7b6:	d039      	beq.n	810c82c <arm_mat_inverse_f32+0x1a8>
 810c7b8:	eddb 6a00 	vldr	s13, [fp]
 810c7bc:	465a      	mov	r2, fp
 810c7be:	4673      	mov	r3, lr
 810c7c0:	46e2      	mov	sl, ip
 810c7c2:	ecba 7a01 	vldmia	sl!, {s14}
 810c7c6:	edd2 7a00 	vldr	s15, [r2]
 810c7ca:	ee26 7a87 	vmul.f32	s14, s13, s14
 810c7ce:	3b01      	subs	r3, #1
 810c7d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810c7d4:	ece2 7a01 	vstmia	r2!, {s15}
 810c7d8:	d1f3      	bne.n	810c7c2 <arm_mat_inverse_f32+0x13e>
 810c7da:	9b01      	ldr	r3, [sp, #4]
 810c7dc:	44bb      	add	fp, r7
 810c7de:	4602      	mov	r2, r0
 810c7e0:	46ca      	mov	sl, r9
 810c7e2:	ecba 7a01 	vldmia	sl!, {s14}
 810c7e6:	edd2 7a00 	vldr	s15, [r2]
 810c7ea:	ee26 7a87 	vmul.f32	s14, s13, s14
 810c7ee:	3b01      	subs	r3, #1
 810c7f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810c7f4:	ece2 7a01 	vstmia	r2!, {s15}
 810c7f8:	d1f3      	bne.n	810c7e2 <arm_mat_inverse_f32+0x15e>
 810c7fa:	4428      	add	r0, r5
 810c7fc:	3101      	adds	r1, #1
 810c7fe:	428c      	cmp	r4, r1
 810c800:	44c3      	add	fp, r8
 810c802:	d1d7      	bne.n	810c7b4 <arm_mat_inverse_f32+0x130>
 810c804:	9b04      	ldr	r3, [sp, #16]
 810c806:	f1be 0e01 	subs.w	lr, lr, #1
 810c80a:	f106 0601 	add.w	r6, r6, #1
 810c80e:	449c      	add	ip, r3
 810c810:	f1a7 0704 	sub.w	r7, r7, #4
 810c814:	44a9      	add	r9, r5
 810c816:	f47f af7e 	bne.w	810c716 <arm_mat_inverse_f32+0x92>
 810c81a:	eef5 6a40 	vcmp.f32	s13, #0.0
 810c81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c822:	d006      	beq.n	810c832 <arm_mat_inverse_f32+0x1ae>
 810c824:	2000      	movs	r0, #0
 810c826:	b007      	add	sp, #28
 810c828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c82c:	44bb      	add	fp, r7
 810c82e:	4428      	add	r0, r5
 810c830:	e7e4      	b.n	810c7fc <arm_mat_inverse_f32+0x178>
 810c832:	9b05      	ldr	r3, [sp, #20]
 810c834:	9a01      	ldr	r2, [sp, #4]
 810c836:	685b      	ldr	r3, [r3, #4]
 810c838:	edd3 7a00 	vldr	s15, [r3]
 810c83c:	eef5 7a40 	vcmp.f32	s15, #0.0
 810c840:	fb02 f204 	mul.w	r2, r2, r4
 810c844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c848:	4614      	mov	r4, r2
 810c84a:	bf08      	it	eq
 810c84c:	3304      	addeq	r3, #4
 810c84e:	d007      	beq.n	810c860 <arm_mat_inverse_f32+0x1dc>
 810c850:	e7e8      	b.n	810c824 <arm_mat_inverse_f32+0x1a0>
 810c852:	ecf3 7a01 	vldmia	r3!, {s15}
 810c856:	eef5 7a40 	vcmp.f32	s15, #0.0
 810c85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c85e:	d1e1      	bne.n	810c824 <arm_mat_inverse_f32+0x1a0>
 810c860:	f10e 0e01 	add.w	lr, lr, #1
 810c864:	4574      	cmp	r4, lr
 810c866:	d1f4      	bne.n	810c852 <arm_mat_inverse_f32+0x1ce>
 810c868:	f06f 0004 	mvn.w	r0, #4
 810c86c:	b007      	add	sp, #28
 810c86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c872:	f06f 0002 	mvn.w	r0, #2
 810c876:	b007      	add	sp, #28
 810c878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c87c:	4656      	mov	r6, sl
 810c87e:	3f01      	subs	r7, #1
 810c880:	f846 bb04 	str.w	fp, [r6], #4
 810c884:	f47f af1b 	bne.w	810c6be <arm_mat_inverse_f32+0x3a>
 810c888:	e735      	b.n	810c6f6 <arm_mat_inverse_f32+0x72>
 810c88a:	bf00      	nop
 810c88c:	00000000 	.word	0x00000000

0810c890 <arm_mat_init_f32>:
 810c890:	8001      	strh	r1, [r0, #0]
 810c892:	8042      	strh	r2, [r0, #2]
 810c894:	6043      	str	r3, [r0, #4]
 810c896:	4770      	bx	lr

0810c898 <arm_mat_add_f32>:
 810c898:	b4f0      	push	{r4, r5, r6, r7}
 810c89a:	e9d1 4700 	ldrd	r4, r7, [r1]
 810c89e:	6803      	ldr	r3, [r0, #0]
 810c8a0:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810c8a4:	6856      	ldr	r6, [r2, #4]
 810c8a6:	42a3      	cmp	r3, r4
 810c8a8:	d15d      	bne.n	810c966 <arm_mat_add_f32+0xce>
 810c8aa:	6812      	ldr	r2, [r2, #0]
 810c8ac:	4293      	cmp	r3, r2
 810c8ae:	d15a      	bne.n	810c966 <arm_mat_add_f32+0xce>
 810c8b0:	8803      	ldrh	r3, [r0, #0]
 810c8b2:	8844      	ldrh	r4, [r0, #2]
 810c8b4:	fb04 f403 	mul.w	r4, r4, r3
 810c8b8:	08a5      	lsrs	r5, r4, #2
 810c8ba:	d032      	beq.n	810c922 <arm_mat_add_f32+0x8a>
 810c8bc:	f10c 0110 	add.w	r1, ip, #16
 810c8c0:	f107 0210 	add.w	r2, r7, #16
 810c8c4:	f106 0310 	add.w	r3, r6, #16
 810c8c8:	4628      	mov	r0, r5
 810c8ca:	ed12 7a04 	vldr	s14, [r2, #-16]
 810c8ce:	ed51 7a04 	vldr	s15, [r1, #-16]
 810c8d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c8d6:	3801      	subs	r0, #1
 810c8d8:	ed43 7a04 	vstr	s15, [r3, #-16]
 810c8dc:	ed12 7a03 	vldr	s14, [r2, #-12]
 810c8e0:	ed51 7a03 	vldr	s15, [r1, #-12]
 810c8e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c8e8:	f101 0110 	add.w	r1, r1, #16
 810c8ec:	ed43 7a03 	vstr	s15, [r3, #-12]
 810c8f0:	ed12 7a02 	vldr	s14, [r2, #-8]
 810c8f4:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 810c8f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c8fc:	f102 0210 	add.w	r2, r2, #16
 810c900:	ed43 7a02 	vstr	s15, [r3, #-8]
 810c904:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 810c908:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 810c90c:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c910:	f103 0310 	add.w	r3, r3, #16
 810c914:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 810c918:	d1d7      	bne.n	810c8ca <arm_mat_add_f32+0x32>
 810c91a:	012b      	lsls	r3, r5, #4
 810c91c:	449c      	add	ip, r3
 810c91e:	441f      	add	r7, r3
 810c920:	441e      	add	r6, r3
 810c922:	f014 0403 	ands.w	r4, r4, #3
 810c926:	d01b      	beq.n	810c960 <arm_mat_add_f32+0xc8>
 810c928:	edd7 7a00 	vldr	s15, [r7]
 810c92c:	ed9c 7a00 	vldr	s14, [ip]
 810c930:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c934:	3c01      	subs	r4, #1
 810c936:	edc6 7a00 	vstr	s15, [r6]
 810c93a:	d011      	beq.n	810c960 <arm_mat_add_f32+0xc8>
 810c93c:	eddc 7a01 	vldr	s15, [ip, #4]
 810c940:	ed97 7a01 	vldr	s14, [r7, #4]
 810c944:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c948:	2c01      	cmp	r4, #1
 810c94a:	edc6 7a01 	vstr	s15, [r6, #4]
 810c94e:	d007      	beq.n	810c960 <arm_mat_add_f32+0xc8>
 810c950:	eddc 7a02 	vldr	s15, [ip, #8]
 810c954:	ed97 7a02 	vldr	s14, [r7, #8]
 810c958:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c95c:	edc6 7a02 	vstr	s15, [r6, #8]
 810c960:	2000      	movs	r0, #0
 810c962:	bcf0      	pop	{r4, r5, r6, r7}
 810c964:	4770      	bx	lr
 810c966:	f06f 0002 	mvn.w	r0, #2
 810c96a:	e7fa      	b.n	810c962 <arm_mat_add_f32+0xca>

0810c96c <arm_fir_init_f32>:
 810c96c:	b538      	push	{r3, r4, r5, lr}
 810c96e:	9c04      	ldr	r4, [sp, #16]
 810c970:	6082      	str	r2, [r0, #8]
 810c972:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 810c976:	3c01      	subs	r4, #1
 810c978:	440c      	add	r4, r1
 810c97a:	8001      	strh	r1, [r0, #0]
 810c97c:	4605      	mov	r5, r0
 810c97e:	00a2      	lsls	r2, r4, #2
 810c980:	4618      	mov	r0, r3
 810c982:	2100      	movs	r1, #0
 810c984:	f001 fb46 	bl	810e014 <memset>
 810c988:	6068      	str	r0, [r5, #4]
 810c98a:	bd38      	pop	{r3, r4, r5, pc}

0810c98c <arm_fir_f32>:
 810c98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c990:	ed2d 8b10 	vpush	{d8-d15}
 810c994:	b08b      	sub	sp, #44	@ 0x2c
 810c996:	f8b0 8000 	ldrh.w	r8, [r0]
 810c99a:	9003      	str	r0, [sp, #12]
 810c99c:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 810c9a0:	461e      	mov	r6, r3
 810c9a2:	9304      	str	r3, [sp, #16]
 810c9a4:	f108 4380 	add.w	r3, r8, #1073741824	@ 0x40000000
 810c9a8:	3b01      	subs	r3, #1
 810c9aa:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 810c9ae:	08f3      	lsrs	r3, r6, #3
 810c9b0:	9002      	str	r0, [sp, #8]
 810c9b2:	9500      	str	r5, [sp, #0]
 810c9b4:	9301      	str	r3, [sp, #4]
 810c9b6:	f000 81f1 	beq.w	810cd9c <arm_fir_f32+0x410>
 810c9ba:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 810c9be:	f100 0620 	add.w	r6, r0, #32
 810c9c2:	9405      	str	r4, [sp, #20]
 810c9c4:	0164      	lsls	r4, r4, #5
 810c9c6:	4420      	add	r0, r4
 810c9c8:	f008 0a07 	and.w	sl, r8, #7
 810c9cc:	9607      	str	r6, [sp, #28]
 810c9ce:	9006      	str	r0, [sp, #24]
 810c9d0:	469c      	mov	ip, r3
 810c9d2:	4650      	mov	r0, sl
 810c9d4:	4623      	mov	r3, r4
 810c9d6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 810c9da:	f8cd 8020 	str.w	r8, [sp, #32]
 810c9de:	1937      	adds	r7, r6, r4
 810c9e0:	f109 0b1c 	add.w	fp, r9, #28
 810c9e4:	f8dd e014 	ldr.w	lr, [sp, #20]
 810c9e8:	9209      	str	r2, [sp, #36]	@ 0x24
 810c9ea:	f8cd 9014 	str.w	r9, [sp, #20]
 810c9ee:	f101 0620 	add.w	r6, r1, #32
 810c9f2:	f8dd 9018 	ldr.w	r9, [sp, #24]
 810c9f6:	9106      	str	r1, [sp, #24]
 810c9f8:	3520      	adds	r5, #32
 810c9fa:	f102 0420 	add.w	r4, r2, #32
 810c9fe:	4698      	mov	r8, r3
 810ca00:	f856 3c20 	ldr.w	r3, [r6, #-32]
 810ca04:	f845 3c20 	str.w	r3, [r5, #-32]
 810ca08:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 810ca0c:	f845 3c1c 	str.w	r3, [r5, #-28]
 810ca10:	f856 3c18 	ldr.w	r3, [r6, #-24]
 810ca14:	f845 3c18 	str.w	r3, [r5, #-24]
 810ca18:	f856 3c14 	ldr.w	r3, [r6, #-20]
 810ca1c:	f845 3c14 	str.w	r3, [r5, #-20]
 810ca20:	f856 3c10 	ldr.w	r3, [r6, #-16]
 810ca24:	f845 3c10 	str.w	r3, [r5, #-16]
 810ca28:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 810ca2c:	f845 3c0c 	str.w	r3, [r5, #-12]
 810ca30:	f856 3c08 	ldr.w	r3, [r6, #-8]
 810ca34:	f845 3c08 	str.w	r3, [r5, #-8]
 810ca38:	f856 3c04 	ldr.w	r3, [r6, #-4]
 810ca3c:	f845 3c04 	str.w	r3, [r5, #-4]
 810ca40:	ed1b 2a07 	vldr	s4, [fp, #-28]	@ 0xffffffe4
 810ca44:	ed5b 1a06 	vldr	s3, [fp, #-24]	@ 0xffffffe8
 810ca48:	ed1b 1a05 	vldr	s2, [fp, #-20]	@ 0xffffffec
 810ca4c:	ed5b 0a04 	vldr	s1, [fp, #-16]
 810ca50:	ed1b 0a03 	vldr	s0, [fp, #-12]
 810ca54:	ed1b 8a02 	vldr	s16, [fp, #-8]
 810ca58:	ed5b 8a01 	vldr	s17, [fp, #-4]
 810ca5c:	eddf 6af5 	vldr	s13, [pc, #980]	@ 810ce34 <arm_fir_f32+0x4a8>
 810ca60:	465a      	mov	r2, fp
 810ca62:	f1be 0f00 	cmp.w	lr, #0
 810ca66:	f000 81fe 	beq.w	810ce66 <arm_fir_f32+0x4da>
 810ca6a:	f10b 0120 	add.w	r1, fp, #32
 810ca6e:	eef0 ba66 	vmov.f32	s23, s13
 810ca72:	eeb0 6a66 	vmov.f32	s12, s13
 810ca76:	eeb0 9a66 	vmov.f32	s18, s13
 810ca7a:	eef0 9a66 	vmov.f32	s19, s13
 810ca7e:	eeb0 aa66 	vmov.f32	s20, s13
 810ca82:	eef0 aa66 	vmov.f32	s21, s13
 810ca86:	eeb0 ba66 	vmov.f32	s22, s13
 810ca8a:	460a      	mov	r2, r1
 810ca8c:	4653      	mov	r3, sl
 810ca8e:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 810ca92:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 810ca96:	ed53 ea07 	vldr	s29, [r3, #-28]	@ 0xffffffe4
 810ca9a:	ed13 ea06 	vldr	s28, [r3, #-24]	@ 0xffffffe8
 810ca9e:	ed53 da05 	vldr	s27, [r3, #-20]	@ 0xffffffec
 810caa2:	ed53 ca04 	vldr	s25, [r3, #-16]
 810caa6:	ed53 2a03 	vldr	s5, [r3, #-12]
 810caaa:	ed13 4a02 	vldr	s8, [r3, #-8]
 810caae:	ed13 5a01 	vldr	s10, [r3, #-4]
 810cab2:	ee67 fa02 	vmul.f32	s31, s14, s4
 810cab6:	ee27 da21 	vmul.f32	s26, s14, s3
 810caba:	ed12 2a07 	vldr	s4, [r2, #-28]	@ 0xffffffe4
 810cabe:	ee27 ca01 	vmul.f32	s24, s14, s2
 810cac2:	ee27 3a20 	vmul.f32	s6, s14, s1
 810cac6:	ee67 3a00 	vmul.f32	s7, s14, s0
 810caca:	ee67 5a08 	vmul.f32	s11, s14, s16
 810cace:	ee27 fa28 	vmul.f32	s30, s14, s17
 810cad2:	ee67 7a24 	vmul.f32	s15, s14, s9
 810cad6:	ee3f ba8b 	vadd.f32	s22, s31, s22
 810cada:	ee7d aa2a 	vadd.f32	s21, s26, s21
 810cade:	ee6e faa1 	vmul.f32	s31, s29, s3
 810cae2:	ee2e da81 	vmul.f32	s26, s29, s2
 810cae6:	ed52 1a06 	vldr	s3, [r2, #-24]	@ 0xffffffe8
 810caea:	ee3c aa0a 	vadd.f32	s20, s24, s20
 810caee:	ee73 9a29 	vadd.f32	s19, s6, s19
 810caf2:	ee2e caa0 	vmul.f32	s24, s29, s1
 810caf6:	ee2e 3a80 	vmul.f32	s6, s29, s0
 810cafa:	ee33 9a89 	vadd.f32	s18, s7, s18
 810cafe:	ee35 6a86 	vadd.f32	s12, s11, s12
 810cb02:	ee6e 3a88 	vmul.f32	s7, s29, s16
 810cb06:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 810cb0a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 810cb0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810cb12:	ee24 faae 	vmul.f32	s30, s9, s29
 810cb16:	ee6e ea82 	vmul.f32	s29, s29, s4
 810cb1a:	ee2e 7a01 	vmul.f32	s14, s28, s2
 810cb1e:	ee3f ba8b 	vadd.f32	s22, s31, s22
 810cb22:	ed12 1a05 	vldr	s2, [r2, #-20]	@ 0xffffffec
 810cb26:	ee7d aa2a 	vadd.f32	s21, s26, s21
 810cb2a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 810cb2e:	ee2e da20 	vmul.f32	s26, s28, s1
 810cb32:	ee2e ca00 	vmul.f32	s24, s28, s0
 810cb36:	ee73 9a29 	vadd.f32	s19, s6, s19
 810cb3a:	ee33 9a89 	vadd.f32	s18, s7, s18
 810cb3e:	ee2e 3a08 	vmul.f32	s6, s28, s16
 810cb42:	ee6e 3a28 	vmul.f32	s7, s28, s17
 810cb46:	ee35 6a86 	vadd.f32	s12, s11, s12
 810cb4a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 810cb4e:	ee64 5a8e 	vmul.f32	s11, s9, s28
 810cb52:	ee22 fa0e 	vmul.f32	s30, s4, s28
 810cb56:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 810cb5a:	ee2e ea21 	vmul.f32	s28, s28, s3
 810cb5e:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 810cb62:	ee7d aa2a 	vadd.f32	s21, s26, s21
 810cb66:	ed52 0a04 	vldr	s1, [r2, #-16]
 810cb6a:	ee2d da80 	vmul.f32	s26, s27, s0
 810cb6e:	ee37 ba0b 	vadd.f32	s22, s14, s22
 810cb72:	ee3c aa0a 	vadd.f32	s20, s24, s20
 810cb76:	ee73 9a29 	vadd.f32	s19, s6, s19
 810cb7a:	ee2d ca88 	vmul.f32	s24, s27, s16
 810cb7e:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 810cb82:	ee33 9a89 	vadd.f32	s18, s7, s18
 810cb86:	ee35 6a86 	vadd.f32	s12, s11, s12
 810cb8a:	ee64 3aad 	vmul.f32	s7, s9, s27
 810cb8e:	ee62 5a2d 	vmul.f32	s11, s4, s27
 810cb92:	ee7f ba2b 	vadd.f32	s23, s30, s23
 810cb96:	ee7e 7a27 	vadd.f32	s15, s28, s15
 810cb9a:	ee21 faad 	vmul.f32	s30, s3, s27
 810cb9e:	ee6d da81 	vmul.f32	s27, s27, s2
 810cba2:	ee6c fa80 	vmul.f32	s31, s25, s0
 810cba6:	ee36 ba8b 	vadd.f32	s22, s13, s22
 810cbaa:	ed12 0a03 	vldr	s0, [r2, #-12]
 810cbae:	ee3d da2a 	vadd.f32	s26, s26, s21
 810cbb2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 810cbb6:	ee6c aa88 	vmul.f32	s21, s25, s16
 810cbba:	ee2c caa8 	vmul.f32	s24, s25, s17
 810cbbe:	ee73 9a29 	vadd.f32	s19, s6, s19
 810cbc2:	ee33 9a89 	vadd.f32	s18, s7, s18
 810cbc6:	ee24 3aac 	vmul.f32	s6, s9, s25
 810cbca:	ee62 3a2c 	vmul.f32	s7, s4, s25
 810cbce:	ee35 6a86 	vadd.f32	s12, s11, s12
 810cbd2:	ee7f ba2b 	vadd.f32	s23, s30, s23
 810cbd6:	ee61 5aac 	vmul.f32	s11, s3, s25
 810cbda:	ee21 fa2c 	vmul.f32	s30, s2, s25
 810cbde:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 810cbe2:	ee6c caa0 	vmul.f32	s25, s25, s1
 810cbe6:	ee62 ea88 	vmul.f32	s29, s5, s16
 810cbea:	ee3a da8d 	vadd.f32	s26, s21, s26
 810cbee:	ed12 8a02 	vldr	s16, [r2, #-8]
 810cbf2:	ee62 aaa8 	vmul.f32	s21, s5, s17
 810cbf6:	ee3f ba8b 	vadd.f32	s22, s31, s22
 810cbfa:	ee3c aa0a 	vadd.f32	s20, s24, s20
 810cbfe:	ee73 9a29 	vadd.f32	s19, s6, s19
 810cc02:	ee24 caa2 	vmul.f32	s24, s9, s5
 810cc06:	ee22 3a22 	vmul.f32	s6, s4, s5
 810cc0a:	ee33 9a89 	vadd.f32	s18, s7, s18
 810cc0e:	ee35 6a86 	vadd.f32	s12, s11, s12
 810cc12:	ee61 3aa2 	vmul.f32	s7, s3, s5
 810cc16:	ee61 5a22 	vmul.f32	s11, s2, s5
 810cc1a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 810cc1e:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 810cc22:	ee20 faa2 	vmul.f32	s30, s1, s5
 810cc26:	ee62 2a80 	vmul.f32	s5, s5, s0
 810cc2a:	ee7e fa8b 	vadd.f32	s31, s29, s22
 810cc2e:	ee72 7aa7 	vadd.f32	s15, s5, s15
 810cc32:	ee24 ba28 	vmul.f32	s22, s8, s17
 810cc36:	ee7a aa8d 	vadd.f32	s21, s21, s26
 810cc3a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 810cc3e:	ee24 da84 	vmul.f32	s26, s9, s8
 810cc42:	ee22 ca04 	vmul.f32	s24, s4, s8
 810cc46:	ee73 9a29 	vadd.f32	s19, s6, s19
 810cc4a:	ee33 9a89 	vadd.f32	s18, s7, s18
 810cc4e:	ee21 3a84 	vmul.f32	s6, s3, s8
 810cc52:	ee61 3a04 	vmul.f32	s7, s2, s8
 810cc56:	ee35 6a86 	vadd.f32	s12, s11, s12
 810cc5a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 810cc5e:	ee60 5a84 	vmul.f32	s11, s1, s8
 810cc62:	ee20 7a04 	vmul.f32	s14, s0, s8
 810cc66:	ee64 6a08 	vmul.f32	s13, s8, s16
 810cc6a:	ed52 8a01 	vldr	s17, [r2, #-4]
 810cc6e:	ee73 9a29 	vadd.f32	s19, s6, s19
 810cc72:	ee33 9a89 	vadd.f32	s18, s7, s18
 810cc76:	ee35 6a86 	vadd.f32	s12, s11, s12
 810cc7a:	ee37 7a2b 	vadd.f32	s14, s14, s23
 810cc7e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 810cc82:	ee3b ba2f 	vadd.f32	s22, s22, s31
 810cc86:	ee64 4a85 	vmul.f32	s9, s9, s10
 810cc8a:	ee7d aa2a 	vadd.f32	s21, s26, s21
 810cc8e:	ee22 4a05 	vmul.f32	s8, s4, s10
 810cc92:	ee3c aa0a 	vadd.f32	s20, s24, s20
 810cc96:	ee61 2a85 	vmul.f32	s5, s3, s10
 810cc9a:	ee21 3a05 	vmul.f32	s6, s2, s10
 810cc9e:	ee60 3a85 	vmul.f32	s7, s1, s10
 810cca2:	ee60 5a05 	vmul.f32	s11, s0, s10
 810cca6:	ee68 ba05 	vmul.f32	s23, s16, s10
 810ccaa:	ee65 7a28 	vmul.f32	s15, s10, s17
 810ccae:	3320      	adds	r3, #32
 810ccb0:	429f      	cmp	r7, r3
 810ccb2:	ee34 ba8b 	vadd.f32	s22, s9, s22
 810ccb6:	ee74 aa2a 	vadd.f32	s21, s8, s21
 810ccba:	ee32 aa8a 	vadd.f32	s20, s5, s20
 810ccbe:	ee73 9a29 	vadd.f32	s19, s6, s19
 810ccc2:	ee33 9a89 	vadd.f32	s18, s7, s18
 810ccc6:	ee35 6a86 	vadd.f32	s12, s11, s12
 810ccca:	ee7b ba87 	vadd.f32	s23, s23, s14
 810ccce:	ee77 6aa6 	vadd.f32	s13, s15, s13
 810ccd2:	f102 0220 	add.w	r2, r2, #32
 810ccd6:	f47f aeda 	bne.w	810ca8e <arm_fir_f32+0x102>
 810ccda:	eb0b 0208 	add.w	r2, fp, r8
 810ccde:	46cb      	mov	fp, r9
 810cce0:	b3a0      	cbz	r0, 810cd4c <arm_fir_f32+0x3c0>
 810cce2:	4603      	mov	r3, r0
 810cce4:	ecfb 7a01 	vldmia	fp!, {s15}
 810cce8:	ecf2 5a01 	vldmia	r2!, {s11}
 810ccec:	ee27 2a82 	vmul.f32	s4, s15, s4
 810ccf0:	ee67 2aa1 	vmul.f32	s5, s15, s3
 810ccf4:	ee27 3a81 	vmul.f32	s6, s15, s2
 810ccf8:	ee67 3aa0 	vmul.f32	s7, s15, s1
 810ccfc:	ee27 4a80 	vmul.f32	s8, s15, s0
 810cd00:	ee67 4a88 	vmul.f32	s9, s15, s16
 810cd04:	ee27 5aa8 	vmul.f32	s10, s15, s17
 810cd08:	ee67 7aa5 	vmul.f32	s15, s15, s11
 810cd0c:	3b01      	subs	r3, #1
 810cd0e:	ee3b ba02 	vadd.f32	s22, s22, s4
 810cd12:	ee7a aaa2 	vadd.f32	s21, s21, s5
 810cd16:	eeb0 2a61 	vmov.f32	s4, s3
 810cd1a:	ee3a aa03 	vadd.f32	s20, s20, s6
 810cd1e:	eef0 1a41 	vmov.f32	s3, s2
 810cd22:	ee79 9aa3 	vadd.f32	s19, s19, s7
 810cd26:	eeb0 1a60 	vmov.f32	s2, s1
 810cd2a:	ee39 9a04 	vadd.f32	s18, s18, s8
 810cd2e:	eef0 0a40 	vmov.f32	s1, s0
 810cd32:	ee36 6a24 	vadd.f32	s12, s12, s9
 810cd36:	eeb0 0a48 	vmov.f32	s0, s16
 810cd3a:	ee7b ba85 	vadd.f32	s23, s23, s10
 810cd3e:	eeb0 8a68 	vmov.f32	s16, s17
 810cd42:	ee76 6aa7 	vadd.f32	s13, s13, s15
 810cd46:	eef0 8a65 	vmov.f32	s17, s11
 810cd4a:	d1cb      	bne.n	810cce4 <arm_fir_f32+0x358>
 810cd4c:	f1bc 0c01 	subs.w	ip, ip, #1
 810cd50:	ed04 ba08 	vstr	s22, [r4, #-32]	@ 0xffffffe0
 810cd54:	ed44 aa07 	vstr	s21, [r4, #-28]	@ 0xffffffe4
 810cd58:	ed04 aa06 	vstr	s20, [r4, #-24]	@ 0xffffffe8
 810cd5c:	ed44 9a05 	vstr	s19, [r4, #-20]	@ 0xffffffec
 810cd60:	ed04 9a04 	vstr	s18, [r4, #-16]
 810cd64:	ed04 6a03 	vstr	s12, [r4, #-12]
 810cd68:	ed44 ba02 	vstr	s23, [r4, #-8]
 810cd6c:	ed44 6a01 	vstr	s13, [r4, #-4]
 810cd70:	f106 0620 	add.w	r6, r6, #32
 810cd74:	f105 0520 	add.w	r5, r5, #32
 810cd78:	f104 0420 	add.w	r4, r4, #32
 810cd7c:	468b      	mov	fp, r1
 810cd7e:	f47f ae3f 	bne.w	810ca00 <arm_fir_f32+0x74>
 810cd82:	9b01      	ldr	r3, [sp, #4]
 810cd84:	9800      	ldr	r0, [sp, #0]
 810cd86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810cd88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810cd8c:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 810cd90:	015b      	lsls	r3, r3, #5
 810cd92:	4418      	add	r0, r3
 810cd94:	4419      	add	r1, r3
 810cd96:	441a      	add	r2, r3
 810cd98:	4499      	add	r9, r3
 810cd9a:	9000      	str	r0, [sp, #0]
 810cd9c:	9b04      	ldr	r3, [sp, #16]
 810cd9e:	f013 0707 	ands.w	r7, r3, #7
 810cda2:	d020      	beq.n	810cde6 <arm_fir_f32+0x45a>
 810cda4:	00bf      	lsls	r7, r7, #2
 810cda6:	9e00      	ldr	r6, [sp, #0]
 810cda8:	f8dd e008 	ldr.w	lr, [sp, #8]
 810cdac:	eb01 0c07 	add.w	ip, r1, r7
 810cdb0:	464d      	mov	r5, r9
 810cdb2:	f851 3b04 	ldr.w	r3, [r1], #4
 810cdb6:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 810ce34 <arm_fir_f32+0x4a8>
 810cdba:	f846 3b04 	str.w	r3, [r6], #4
 810cdbe:	4674      	mov	r4, lr
 810cdc0:	4643      	mov	r3, r8
 810cdc2:	4628      	mov	r0, r5
 810cdc4:	ecf0 7a01 	vldmia	r0!, {s15}
 810cdc8:	ecf4 6a01 	vldmia	r4!, {s13}
 810cdcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 810cdd0:	3b01      	subs	r3, #1
 810cdd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 810cdd6:	d1f5      	bne.n	810cdc4 <arm_fir_f32+0x438>
 810cdd8:	4561      	cmp	r1, ip
 810cdda:	eca2 7a01 	vstmia	r2!, {s14}
 810cdde:	f105 0504 	add.w	r5, r5, #4
 810cde2:	d1e6      	bne.n	810cdb2 <arm_fir_f32+0x426>
 810cde4:	44b9      	add	r9, r7
 810cde6:	f108 38ff 	add.w	r8, r8, #4294967295
 810cdea:	9b03      	ldr	r3, [sp, #12]
 810cdec:	ea5f 0498 	movs.w	r4, r8, lsr #2
 810cdf0:	685d      	ldr	r5, [r3, #4]
 810cdf2:	d021      	beq.n	810ce38 <arm_fir_f32+0x4ac>
 810cdf4:	f109 0210 	add.w	r2, r9, #16
 810cdf8:	f105 0310 	add.w	r3, r5, #16
 810cdfc:	4621      	mov	r1, r4
 810cdfe:	f852 0c10 	ldr.w	r0, [r2, #-16]
 810ce02:	f843 0c10 	str.w	r0, [r3, #-16]
 810ce06:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 810ce0a:	f843 0c0c 	str.w	r0, [r3, #-12]
 810ce0e:	f852 0c08 	ldr.w	r0, [r2, #-8]
 810ce12:	f843 0c08 	str.w	r0, [r3, #-8]
 810ce16:	f852 0c04 	ldr.w	r0, [r2, #-4]
 810ce1a:	f843 0c04 	str.w	r0, [r3, #-4]
 810ce1e:	3901      	subs	r1, #1
 810ce20:	f102 0210 	add.w	r2, r2, #16
 810ce24:	f103 0310 	add.w	r3, r3, #16
 810ce28:	d1e9      	bne.n	810cdfe <arm_fir_f32+0x472>
 810ce2a:	0124      	lsls	r4, r4, #4
 810ce2c:	44a1      	add	r9, r4
 810ce2e:	4425      	add	r5, r4
 810ce30:	e002      	b.n	810ce38 <arm_fir_f32+0x4ac>
 810ce32:	bf00      	nop
 810ce34:	00000000 	.word	0x00000000
 810ce38:	f018 0803 	ands.w	r8, r8, #3
 810ce3c:	d00e      	beq.n	810ce5c <arm_fir_f32+0x4d0>
 810ce3e:	f8d9 3000 	ldr.w	r3, [r9]
 810ce42:	602b      	str	r3, [r5, #0]
 810ce44:	f1b8 0801 	subs.w	r8, r8, #1
 810ce48:	d008      	beq.n	810ce5c <arm_fir_f32+0x4d0>
 810ce4a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 810ce4e:	606b      	str	r3, [r5, #4]
 810ce50:	f1b8 0f01 	cmp.w	r8, #1
 810ce54:	bf1c      	itt	ne
 810ce56:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 810ce5a:	60ab      	strne	r3, [r5, #8]
 810ce5c:	b00b      	add	sp, #44	@ 0x2c
 810ce5e:	ecbd 8b10 	vpop	{d8-d15}
 810ce62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ce66:	eef0 ba66 	vmov.f32	s23, s13
 810ce6a:	eeb0 6a66 	vmov.f32	s12, s13
 810ce6e:	eeb0 9a66 	vmov.f32	s18, s13
 810ce72:	eef0 9a66 	vmov.f32	s19, s13
 810ce76:	eeb0 aa66 	vmov.f32	s20, s13
 810ce7a:	eef0 aa66 	vmov.f32	s21, s13
 810ce7e:	eeb0 ba66 	vmov.f32	s22, s13
 810ce82:	f8dd b008 	ldr.w	fp, [sp, #8]
 810ce86:	f102 0120 	add.w	r1, r2, #32
 810ce8a:	e729      	b.n	810cce0 <arm_fir_f32+0x354>

0810ce8c <srand>:
 810ce8c:	b538      	push	{r3, r4, r5, lr}
 810ce8e:	4b10      	ldr	r3, [pc, #64]	@ (810ced0 <srand+0x44>)
 810ce90:	681d      	ldr	r5, [r3, #0]
 810ce92:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 810ce94:	4604      	mov	r4, r0
 810ce96:	b9b3      	cbnz	r3, 810cec6 <srand+0x3a>
 810ce98:	2018      	movs	r0, #24
 810ce9a:	f002 f803 	bl	810eea4 <malloc>
 810ce9e:	4602      	mov	r2, r0
 810cea0:	6328      	str	r0, [r5, #48]	@ 0x30
 810cea2:	b920      	cbnz	r0, 810ceae <srand+0x22>
 810cea4:	4b0b      	ldr	r3, [pc, #44]	@ (810ced4 <srand+0x48>)
 810cea6:	480c      	ldr	r0, [pc, #48]	@ (810ced8 <srand+0x4c>)
 810cea8:	2146      	movs	r1, #70	@ 0x46
 810ceaa:	f001 f947 	bl	810e13c <__assert_func>
 810ceae:	490b      	ldr	r1, [pc, #44]	@ (810cedc <srand+0x50>)
 810ceb0:	4b0b      	ldr	r3, [pc, #44]	@ (810cee0 <srand+0x54>)
 810ceb2:	e9c0 1300 	strd	r1, r3, [r0]
 810ceb6:	4b0b      	ldr	r3, [pc, #44]	@ (810cee4 <srand+0x58>)
 810ceb8:	6083      	str	r3, [r0, #8]
 810ceba:	230b      	movs	r3, #11
 810cebc:	8183      	strh	r3, [r0, #12]
 810cebe:	2100      	movs	r1, #0
 810cec0:	2001      	movs	r0, #1
 810cec2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 810cec6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 810cec8:	2200      	movs	r2, #0
 810ceca:	611c      	str	r4, [r3, #16]
 810cecc:	615a      	str	r2, [r3, #20]
 810cece:	bd38      	pop	{r3, r4, r5, pc}
 810ced0:	100000a8 	.word	0x100000a8
 810ced4:	08111718 	.word	0x08111718
 810ced8:	0811172f 	.word	0x0811172f
 810cedc:	abcd330e 	.word	0xabcd330e
 810cee0:	e66d1234 	.word	0xe66d1234
 810cee4:	0005deec 	.word	0x0005deec

0810cee8 <__cvt>:
 810cee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810ceec:	ec57 6b10 	vmov	r6, r7, d0
 810cef0:	2f00      	cmp	r7, #0
 810cef2:	460c      	mov	r4, r1
 810cef4:	4619      	mov	r1, r3
 810cef6:	463b      	mov	r3, r7
 810cef8:	bfbb      	ittet	lt
 810cefa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 810cefe:	461f      	movlt	r7, r3
 810cf00:	2300      	movge	r3, #0
 810cf02:	232d      	movlt	r3, #45	@ 0x2d
 810cf04:	700b      	strb	r3, [r1, #0]
 810cf06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810cf08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 810cf0c:	4691      	mov	r9, r2
 810cf0e:	f023 0820 	bic.w	r8, r3, #32
 810cf12:	bfbc      	itt	lt
 810cf14:	4632      	movlt	r2, r6
 810cf16:	4616      	movlt	r6, r2
 810cf18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810cf1c:	d005      	beq.n	810cf2a <__cvt+0x42>
 810cf1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 810cf22:	d100      	bne.n	810cf26 <__cvt+0x3e>
 810cf24:	3401      	adds	r4, #1
 810cf26:	2102      	movs	r1, #2
 810cf28:	e000      	b.n	810cf2c <__cvt+0x44>
 810cf2a:	2103      	movs	r1, #3
 810cf2c:	ab03      	add	r3, sp, #12
 810cf2e:	9301      	str	r3, [sp, #4]
 810cf30:	ab02      	add	r3, sp, #8
 810cf32:	9300      	str	r3, [sp, #0]
 810cf34:	ec47 6b10 	vmov	d0, r6, r7
 810cf38:	4653      	mov	r3, sl
 810cf3a:	4622      	mov	r2, r4
 810cf3c:	f001 f9a4 	bl	810e288 <_dtoa_r>
 810cf40:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 810cf44:	4605      	mov	r5, r0
 810cf46:	d119      	bne.n	810cf7c <__cvt+0x94>
 810cf48:	f019 0f01 	tst.w	r9, #1
 810cf4c:	d00e      	beq.n	810cf6c <__cvt+0x84>
 810cf4e:	eb00 0904 	add.w	r9, r0, r4
 810cf52:	2200      	movs	r2, #0
 810cf54:	2300      	movs	r3, #0
 810cf56:	4630      	mov	r0, r6
 810cf58:	4639      	mov	r1, r7
 810cf5a:	f7f3 fe3d 	bl	8100bd8 <__aeabi_dcmpeq>
 810cf5e:	b108      	cbz	r0, 810cf64 <__cvt+0x7c>
 810cf60:	f8cd 900c 	str.w	r9, [sp, #12]
 810cf64:	2230      	movs	r2, #48	@ 0x30
 810cf66:	9b03      	ldr	r3, [sp, #12]
 810cf68:	454b      	cmp	r3, r9
 810cf6a:	d31e      	bcc.n	810cfaa <__cvt+0xc2>
 810cf6c:	9b03      	ldr	r3, [sp, #12]
 810cf6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810cf70:	1b5b      	subs	r3, r3, r5
 810cf72:	4628      	mov	r0, r5
 810cf74:	6013      	str	r3, [r2, #0]
 810cf76:	b004      	add	sp, #16
 810cf78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810cf7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810cf80:	eb00 0904 	add.w	r9, r0, r4
 810cf84:	d1e5      	bne.n	810cf52 <__cvt+0x6a>
 810cf86:	7803      	ldrb	r3, [r0, #0]
 810cf88:	2b30      	cmp	r3, #48	@ 0x30
 810cf8a:	d10a      	bne.n	810cfa2 <__cvt+0xba>
 810cf8c:	2200      	movs	r2, #0
 810cf8e:	2300      	movs	r3, #0
 810cf90:	4630      	mov	r0, r6
 810cf92:	4639      	mov	r1, r7
 810cf94:	f7f3 fe20 	bl	8100bd8 <__aeabi_dcmpeq>
 810cf98:	b918      	cbnz	r0, 810cfa2 <__cvt+0xba>
 810cf9a:	f1c4 0401 	rsb	r4, r4, #1
 810cf9e:	f8ca 4000 	str.w	r4, [sl]
 810cfa2:	f8da 3000 	ldr.w	r3, [sl]
 810cfa6:	4499      	add	r9, r3
 810cfa8:	e7d3      	b.n	810cf52 <__cvt+0x6a>
 810cfaa:	1c59      	adds	r1, r3, #1
 810cfac:	9103      	str	r1, [sp, #12]
 810cfae:	701a      	strb	r2, [r3, #0]
 810cfb0:	e7d9      	b.n	810cf66 <__cvt+0x7e>

0810cfb2 <__exponent>:
 810cfb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810cfb4:	2900      	cmp	r1, #0
 810cfb6:	bfba      	itte	lt
 810cfb8:	4249      	neglt	r1, r1
 810cfba:	232d      	movlt	r3, #45	@ 0x2d
 810cfbc:	232b      	movge	r3, #43	@ 0x2b
 810cfbe:	2909      	cmp	r1, #9
 810cfc0:	7002      	strb	r2, [r0, #0]
 810cfc2:	7043      	strb	r3, [r0, #1]
 810cfc4:	dd29      	ble.n	810d01a <__exponent+0x68>
 810cfc6:	f10d 0307 	add.w	r3, sp, #7
 810cfca:	461d      	mov	r5, r3
 810cfcc:	270a      	movs	r7, #10
 810cfce:	461a      	mov	r2, r3
 810cfd0:	fbb1 f6f7 	udiv	r6, r1, r7
 810cfd4:	fb07 1416 	mls	r4, r7, r6, r1
 810cfd8:	3430      	adds	r4, #48	@ 0x30
 810cfda:	f802 4c01 	strb.w	r4, [r2, #-1]
 810cfde:	460c      	mov	r4, r1
 810cfe0:	2c63      	cmp	r4, #99	@ 0x63
 810cfe2:	f103 33ff 	add.w	r3, r3, #4294967295
 810cfe6:	4631      	mov	r1, r6
 810cfe8:	dcf1      	bgt.n	810cfce <__exponent+0x1c>
 810cfea:	3130      	adds	r1, #48	@ 0x30
 810cfec:	1e94      	subs	r4, r2, #2
 810cfee:	f803 1c01 	strb.w	r1, [r3, #-1]
 810cff2:	1c41      	adds	r1, r0, #1
 810cff4:	4623      	mov	r3, r4
 810cff6:	42ab      	cmp	r3, r5
 810cff8:	d30a      	bcc.n	810d010 <__exponent+0x5e>
 810cffa:	f10d 0309 	add.w	r3, sp, #9
 810cffe:	1a9b      	subs	r3, r3, r2
 810d000:	42ac      	cmp	r4, r5
 810d002:	bf88      	it	hi
 810d004:	2300      	movhi	r3, #0
 810d006:	3302      	adds	r3, #2
 810d008:	4403      	add	r3, r0
 810d00a:	1a18      	subs	r0, r3, r0
 810d00c:	b003      	add	sp, #12
 810d00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810d010:	f813 6b01 	ldrb.w	r6, [r3], #1
 810d014:	f801 6f01 	strb.w	r6, [r1, #1]!
 810d018:	e7ed      	b.n	810cff6 <__exponent+0x44>
 810d01a:	2330      	movs	r3, #48	@ 0x30
 810d01c:	3130      	adds	r1, #48	@ 0x30
 810d01e:	7083      	strb	r3, [r0, #2]
 810d020:	70c1      	strb	r1, [r0, #3]
 810d022:	1d03      	adds	r3, r0, #4
 810d024:	e7f1      	b.n	810d00a <__exponent+0x58>
	...

0810d028 <_printf_float>:
 810d028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d02c:	b08d      	sub	sp, #52	@ 0x34
 810d02e:	460c      	mov	r4, r1
 810d030:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 810d034:	4616      	mov	r6, r2
 810d036:	461f      	mov	r7, r3
 810d038:	4605      	mov	r5, r0
 810d03a:	f000 fff3 	bl	810e024 <_localeconv_r>
 810d03e:	6803      	ldr	r3, [r0, #0]
 810d040:	9304      	str	r3, [sp, #16]
 810d042:	4618      	mov	r0, r3
 810d044:	f7f3 f99c 	bl	8100380 <strlen>
 810d048:	2300      	movs	r3, #0
 810d04a:	930a      	str	r3, [sp, #40]	@ 0x28
 810d04c:	f8d8 3000 	ldr.w	r3, [r8]
 810d050:	9005      	str	r0, [sp, #20]
 810d052:	3307      	adds	r3, #7
 810d054:	f023 0307 	bic.w	r3, r3, #7
 810d058:	f103 0208 	add.w	r2, r3, #8
 810d05c:	f894 a018 	ldrb.w	sl, [r4, #24]
 810d060:	f8d4 b000 	ldr.w	fp, [r4]
 810d064:	f8c8 2000 	str.w	r2, [r8]
 810d068:	e9d3 8900 	ldrd	r8, r9, [r3]
 810d06c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 810d070:	9307      	str	r3, [sp, #28]
 810d072:	f8cd 8018 	str.w	r8, [sp, #24]
 810d076:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 810d07a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810d07e:	4b9c      	ldr	r3, [pc, #624]	@ (810d2f0 <_printf_float+0x2c8>)
 810d080:	f04f 32ff 	mov.w	r2, #4294967295
 810d084:	f7f3 fdda 	bl	8100c3c <__aeabi_dcmpun>
 810d088:	bb70      	cbnz	r0, 810d0e8 <_printf_float+0xc0>
 810d08a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810d08e:	4b98      	ldr	r3, [pc, #608]	@ (810d2f0 <_printf_float+0x2c8>)
 810d090:	f04f 32ff 	mov.w	r2, #4294967295
 810d094:	f7f3 fdb4 	bl	8100c00 <__aeabi_dcmple>
 810d098:	bb30      	cbnz	r0, 810d0e8 <_printf_float+0xc0>
 810d09a:	2200      	movs	r2, #0
 810d09c:	2300      	movs	r3, #0
 810d09e:	4640      	mov	r0, r8
 810d0a0:	4649      	mov	r1, r9
 810d0a2:	f7f3 fda3 	bl	8100bec <__aeabi_dcmplt>
 810d0a6:	b110      	cbz	r0, 810d0ae <_printf_float+0x86>
 810d0a8:	232d      	movs	r3, #45	@ 0x2d
 810d0aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810d0ae:	4a91      	ldr	r2, [pc, #580]	@ (810d2f4 <_printf_float+0x2cc>)
 810d0b0:	4b91      	ldr	r3, [pc, #580]	@ (810d2f8 <_printf_float+0x2d0>)
 810d0b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 810d0b6:	bf94      	ite	ls
 810d0b8:	4690      	movls	r8, r2
 810d0ba:	4698      	movhi	r8, r3
 810d0bc:	2303      	movs	r3, #3
 810d0be:	6123      	str	r3, [r4, #16]
 810d0c0:	f02b 0304 	bic.w	r3, fp, #4
 810d0c4:	6023      	str	r3, [r4, #0]
 810d0c6:	f04f 0900 	mov.w	r9, #0
 810d0ca:	9700      	str	r7, [sp, #0]
 810d0cc:	4633      	mov	r3, r6
 810d0ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 810d0d0:	4621      	mov	r1, r4
 810d0d2:	4628      	mov	r0, r5
 810d0d4:	f000 f9d2 	bl	810d47c <_printf_common>
 810d0d8:	3001      	adds	r0, #1
 810d0da:	f040 808d 	bne.w	810d1f8 <_printf_float+0x1d0>
 810d0de:	f04f 30ff 	mov.w	r0, #4294967295
 810d0e2:	b00d      	add	sp, #52	@ 0x34
 810d0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d0e8:	4642      	mov	r2, r8
 810d0ea:	464b      	mov	r3, r9
 810d0ec:	4640      	mov	r0, r8
 810d0ee:	4649      	mov	r1, r9
 810d0f0:	f7f3 fda4 	bl	8100c3c <__aeabi_dcmpun>
 810d0f4:	b140      	cbz	r0, 810d108 <_printf_float+0xe0>
 810d0f6:	464b      	mov	r3, r9
 810d0f8:	2b00      	cmp	r3, #0
 810d0fa:	bfbc      	itt	lt
 810d0fc:	232d      	movlt	r3, #45	@ 0x2d
 810d0fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 810d102:	4a7e      	ldr	r2, [pc, #504]	@ (810d2fc <_printf_float+0x2d4>)
 810d104:	4b7e      	ldr	r3, [pc, #504]	@ (810d300 <_printf_float+0x2d8>)
 810d106:	e7d4      	b.n	810d0b2 <_printf_float+0x8a>
 810d108:	6863      	ldr	r3, [r4, #4]
 810d10a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 810d10e:	9206      	str	r2, [sp, #24]
 810d110:	1c5a      	adds	r2, r3, #1
 810d112:	d13b      	bne.n	810d18c <_printf_float+0x164>
 810d114:	2306      	movs	r3, #6
 810d116:	6063      	str	r3, [r4, #4]
 810d118:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 810d11c:	2300      	movs	r3, #0
 810d11e:	6022      	str	r2, [r4, #0]
 810d120:	9303      	str	r3, [sp, #12]
 810d122:	ab0a      	add	r3, sp, #40	@ 0x28
 810d124:	e9cd a301 	strd	sl, r3, [sp, #4]
 810d128:	ab09      	add	r3, sp, #36	@ 0x24
 810d12a:	9300      	str	r3, [sp, #0]
 810d12c:	6861      	ldr	r1, [r4, #4]
 810d12e:	ec49 8b10 	vmov	d0, r8, r9
 810d132:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 810d136:	4628      	mov	r0, r5
 810d138:	f7ff fed6 	bl	810cee8 <__cvt>
 810d13c:	9b06      	ldr	r3, [sp, #24]
 810d13e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810d140:	2b47      	cmp	r3, #71	@ 0x47
 810d142:	4680      	mov	r8, r0
 810d144:	d129      	bne.n	810d19a <_printf_float+0x172>
 810d146:	1cc8      	adds	r0, r1, #3
 810d148:	db02      	blt.n	810d150 <_printf_float+0x128>
 810d14a:	6863      	ldr	r3, [r4, #4]
 810d14c:	4299      	cmp	r1, r3
 810d14e:	dd41      	ble.n	810d1d4 <_printf_float+0x1ac>
 810d150:	f1aa 0a02 	sub.w	sl, sl, #2
 810d154:	fa5f fa8a 	uxtb.w	sl, sl
 810d158:	3901      	subs	r1, #1
 810d15a:	4652      	mov	r2, sl
 810d15c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 810d160:	9109      	str	r1, [sp, #36]	@ 0x24
 810d162:	f7ff ff26 	bl	810cfb2 <__exponent>
 810d166:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810d168:	1813      	adds	r3, r2, r0
 810d16a:	2a01      	cmp	r2, #1
 810d16c:	4681      	mov	r9, r0
 810d16e:	6123      	str	r3, [r4, #16]
 810d170:	dc02      	bgt.n	810d178 <_printf_float+0x150>
 810d172:	6822      	ldr	r2, [r4, #0]
 810d174:	07d2      	lsls	r2, r2, #31
 810d176:	d501      	bpl.n	810d17c <_printf_float+0x154>
 810d178:	3301      	adds	r3, #1
 810d17a:	6123      	str	r3, [r4, #16]
 810d17c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 810d180:	2b00      	cmp	r3, #0
 810d182:	d0a2      	beq.n	810d0ca <_printf_float+0xa2>
 810d184:	232d      	movs	r3, #45	@ 0x2d
 810d186:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810d18a:	e79e      	b.n	810d0ca <_printf_float+0xa2>
 810d18c:	9a06      	ldr	r2, [sp, #24]
 810d18e:	2a47      	cmp	r2, #71	@ 0x47
 810d190:	d1c2      	bne.n	810d118 <_printf_float+0xf0>
 810d192:	2b00      	cmp	r3, #0
 810d194:	d1c0      	bne.n	810d118 <_printf_float+0xf0>
 810d196:	2301      	movs	r3, #1
 810d198:	e7bd      	b.n	810d116 <_printf_float+0xee>
 810d19a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810d19e:	d9db      	bls.n	810d158 <_printf_float+0x130>
 810d1a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 810d1a4:	d118      	bne.n	810d1d8 <_printf_float+0x1b0>
 810d1a6:	2900      	cmp	r1, #0
 810d1a8:	6863      	ldr	r3, [r4, #4]
 810d1aa:	dd0b      	ble.n	810d1c4 <_printf_float+0x19c>
 810d1ac:	6121      	str	r1, [r4, #16]
 810d1ae:	b913      	cbnz	r3, 810d1b6 <_printf_float+0x18e>
 810d1b0:	6822      	ldr	r2, [r4, #0]
 810d1b2:	07d0      	lsls	r0, r2, #31
 810d1b4:	d502      	bpl.n	810d1bc <_printf_float+0x194>
 810d1b6:	3301      	adds	r3, #1
 810d1b8:	440b      	add	r3, r1
 810d1ba:	6123      	str	r3, [r4, #16]
 810d1bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 810d1be:	f04f 0900 	mov.w	r9, #0
 810d1c2:	e7db      	b.n	810d17c <_printf_float+0x154>
 810d1c4:	b913      	cbnz	r3, 810d1cc <_printf_float+0x1a4>
 810d1c6:	6822      	ldr	r2, [r4, #0]
 810d1c8:	07d2      	lsls	r2, r2, #31
 810d1ca:	d501      	bpl.n	810d1d0 <_printf_float+0x1a8>
 810d1cc:	3302      	adds	r3, #2
 810d1ce:	e7f4      	b.n	810d1ba <_printf_float+0x192>
 810d1d0:	2301      	movs	r3, #1
 810d1d2:	e7f2      	b.n	810d1ba <_printf_float+0x192>
 810d1d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 810d1d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810d1da:	4299      	cmp	r1, r3
 810d1dc:	db05      	blt.n	810d1ea <_printf_float+0x1c2>
 810d1de:	6823      	ldr	r3, [r4, #0]
 810d1e0:	6121      	str	r1, [r4, #16]
 810d1e2:	07d8      	lsls	r0, r3, #31
 810d1e4:	d5ea      	bpl.n	810d1bc <_printf_float+0x194>
 810d1e6:	1c4b      	adds	r3, r1, #1
 810d1e8:	e7e7      	b.n	810d1ba <_printf_float+0x192>
 810d1ea:	2900      	cmp	r1, #0
 810d1ec:	bfd4      	ite	le
 810d1ee:	f1c1 0202 	rsble	r2, r1, #2
 810d1f2:	2201      	movgt	r2, #1
 810d1f4:	4413      	add	r3, r2
 810d1f6:	e7e0      	b.n	810d1ba <_printf_float+0x192>
 810d1f8:	6823      	ldr	r3, [r4, #0]
 810d1fa:	055a      	lsls	r2, r3, #21
 810d1fc:	d407      	bmi.n	810d20e <_printf_float+0x1e6>
 810d1fe:	6923      	ldr	r3, [r4, #16]
 810d200:	4642      	mov	r2, r8
 810d202:	4631      	mov	r1, r6
 810d204:	4628      	mov	r0, r5
 810d206:	47b8      	blx	r7
 810d208:	3001      	adds	r0, #1
 810d20a:	d12b      	bne.n	810d264 <_printf_float+0x23c>
 810d20c:	e767      	b.n	810d0de <_printf_float+0xb6>
 810d20e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810d212:	f240 80dd 	bls.w	810d3d0 <_printf_float+0x3a8>
 810d216:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810d21a:	2200      	movs	r2, #0
 810d21c:	2300      	movs	r3, #0
 810d21e:	f7f3 fcdb 	bl	8100bd8 <__aeabi_dcmpeq>
 810d222:	2800      	cmp	r0, #0
 810d224:	d033      	beq.n	810d28e <_printf_float+0x266>
 810d226:	4a37      	ldr	r2, [pc, #220]	@ (810d304 <_printf_float+0x2dc>)
 810d228:	2301      	movs	r3, #1
 810d22a:	4631      	mov	r1, r6
 810d22c:	4628      	mov	r0, r5
 810d22e:	47b8      	blx	r7
 810d230:	3001      	adds	r0, #1
 810d232:	f43f af54 	beq.w	810d0de <_printf_float+0xb6>
 810d236:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 810d23a:	4543      	cmp	r3, r8
 810d23c:	db02      	blt.n	810d244 <_printf_float+0x21c>
 810d23e:	6823      	ldr	r3, [r4, #0]
 810d240:	07d8      	lsls	r0, r3, #31
 810d242:	d50f      	bpl.n	810d264 <_printf_float+0x23c>
 810d244:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810d248:	4631      	mov	r1, r6
 810d24a:	4628      	mov	r0, r5
 810d24c:	47b8      	blx	r7
 810d24e:	3001      	adds	r0, #1
 810d250:	f43f af45 	beq.w	810d0de <_printf_float+0xb6>
 810d254:	f04f 0900 	mov.w	r9, #0
 810d258:	f108 38ff 	add.w	r8, r8, #4294967295
 810d25c:	f104 0a1a 	add.w	sl, r4, #26
 810d260:	45c8      	cmp	r8, r9
 810d262:	dc09      	bgt.n	810d278 <_printf_float+0x250>
 810d264:	6823      	ldr	r3, [r4, #0]
 810d266:	079b      	lsls	r3, r3, #30
 810d268:	f100 8103 	bmi.w	810d472 <_printf_float+0x44a>
 810d26c:	68e0      	ldr	r0, [r4, #12]
 810d26e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810d270:	4298      	cmp	r0, r3
 810d272:	bfb8      	it	lt
 810d274:	4618      	movlt	r0, r3
 810d276:	e734      	b.n	810d0e2 <_printf_float+0xba>
 810d278:	2301      	movs	r3, #1
 810d27a:	4652      	mov	r2, sl
 810d27c:	4631      	mov	r1, r6
 810d27e:	4628      	mov	r0, r5
 810d280:	47b8      	blx	r7
 810d282:	3001      	adds	r0, #1
 810d284:	f43f af2b 	beq.w	810d0de <_printf_float+0xb6>
 810d288:	f109 0901 	add.w	r9, r9, #1
 810d28c:	e7e8      	b.n	810d260 <_printf_float+0x238>
 810d28e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d290:	2b00      	cmp	r3, #0
 810d292:	dc39      	bgt.n	810d308 <_printf_float+0x2e0>
 810d294:	4a1b      	ldr	r2, [pc, #108]	@ (810d304 <_printf_float+0x2dc>)
 810d296:	2301      	movs	r3, #1
 810d298:	4631      	mov	r1, r6
 810d29a:	4628      	mov	r0, r5
 810d29c:	47b8      	blx	r7
 810d29e:	3001      	adds	r0, #1
 810d2a0:	f43f af1d 	beq.w	810d0de <_printf_float+0xb6>
 810d2a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 810d2a8:	ea59 0303 	orrs.w	r3, r9, r3
 810d2ac:	d102      	bne.n	810d2b4 <_printf_float+0x28c>
 810d2ae:	6823      	ldr	r3, [r4, #0]
 810d2b0:	07d9      	lsls	r1, r3, #31
 810d2b2:	d5d7      	bpl.n	810d264 <_printf_float+0x23c>
 810d2b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810d2b8:	4631      	mov	r1, r6
 810d2ba:	4628      	mov	r0, r5
 810d2bc:	47b8      	blx	r7
 810d2be:	3001      	adds	r0, #1
 810d2c0:	f43f af0d 	beq.w	810d0de <_printf_float+0xb6>
 810d2c4:	f04f 0a00 	mov.w	sl, #0
 810d2c8:	f104 0b1a 	add.w	fp, r4, #26
 810d2cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d2ce:	425b      	negs	r3, r3
 810d2d0:	4553      	cmp	r3, sl
 810d2d2:	dc01      	bgt.n	810d2d8 <_printf_float+0x2b0>
 810d2d4:	464b      	mov	r3, r9
 810d2d6:	e793      	b.n	810d200 <_printf_float+0x1d8>
 810d2d8:	2301      	movs	r3, #1
 810d2da:	465a      	mov	r2, fp
 810d2dc:	4631      	mov	r1, r6
 810d2de:	4628      	mov	r0, r5
 810d2e0:	47b8      	blx	r7
 810d2e2:	3001      	adds	r0, #1
 810d2e4:	f43f aefb 	beq.w	810d0de <_printf_float+0xb6>
 810d2e8:	f10a 0a01 	add.w	sl, sl, #1
 810d2ec:	e7ee      	b.n	810d2cc <_printf_float+0x2a4>
 810d2ee:	bf00      	nop
 810d2f0:	7fefffff 	.word	0x7fefffff
 810d2f4:	08111787 	.word	0x08111787
 810d2f8:	0811178b 	.word	0x0811178b
 810d2fc:	0811178f 	.word	0x0811178f
 810d300:	08111793 	.word	0x08111793
 810d304:	08111797 	.word	0x08111797
 810d308:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810d30a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810d30e:	4553      	cmp	r3, sl
 810d310:	bfa8      	it	ge
 810d312:	4653      	movge	r3, sl
 810d314:	2b00      	cmp	r3, #0
 810d316:	4699      	mov	r9, r3
 810d318:	dc36      	bgt.n	810d388 <_printf_float+0x360>
 810d31a:	f04f 0b00 	mov.w	fp, #0
 810d31e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810d322:	f104 021a 	add.w	r2, r4, #26
 810d326:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810d328:	9306      	str	r3, [sp, #24]
 810d32a:	eba3 0309 	sub.w	r3, r3, r9
 810d32e:	455b      	cmp	r3, fp
 810d330:	dc31      	bgt.n	810d396 <_printf_float+0x36e>
 810d332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d334:	459a      	cmp	sl, r3
 810d336:	dc3a      	bgt.n	810d3ae <_printf_float+0x386>
 810d338:	6823      	ldr	r3, [r4, #0]
 810d33a:	07da      	lsls	r2, r3, #31
 810d33c:	d437      	bmi.n	810d3ae <_printf_float+0x386>
 810d33e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d340:	ebaa 0903 	sub.w	r9, sl, r3
 810d344:	9b06      	ldr	r3, [sp, #24]
 810d346:	ebaa 0303 	sub.w	r3, sl, r3
 810d34a:	4599      	cmp	r9, r3
 810d34c:	bfa8      	it	ge
 810d34e:	4699      	movge	r9, r3
 810d350:	f1b9 0f00 	cmp.w	r9, #0
 810d354:	dc33      	bgt.n	810d3be <_printf_float+0x396>
 810d356:	f04f 0800 	mov.w	r8, #0
 810d35a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810d35e:	f104 0b1a 	add.w	fp, r4, #26
 810d362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d364:	ebaa 0303 	sub.w	r3, sl, r3
 810d368:	eba3 0309 	sub.w	r3, r3, r9
 810d36c:	4543      	cmp	r3, r8
 810d36e:	f77f af79 	ble.w	810d264 <_printf_float+0x23c>
 810d372:	2301      	movs	r3, #1
 810d374:	465a      	mov	r2, fp
 810d376:	4631      	mov	r1, r6
 810d378:	4628      	mov	r0, r5
 810d37a:	47b8      	blx	r7
 810d37c:	3001      	adds	r0, #1
 810d37e:	f43f aeae 	beq.w	810d0de <_printf_float+0xb6>
 810d382:	f108 0801 	add.w	r8, r8, #1
 810d386:	e7ec      	b.n	810d362 <_printf_float+0x33a>
 810d388:	4642      	mov	r2, r8
 810d38a:	4631      	mov	r1, r6
 810d38c:	4628      	mov	r0, r5
 810d38e:	47b8      	blx	r7
 810d390:	3001      	adds	r0, #1
 810d392:	d1c2      	bne.n	810d31a <_printf_float+0x2f2>
 810d394:	e6a3      	b.n	810d0de <_printf_float+0xb6>
 810d396:	2301      	movs	r3, #1
 810d398:	4631      	mov	r1, r6
 810d39a:	4628      	mov	r0, r5
 810d39c:	9206      	str	r2, [sp, #24]
 810d39e:	47b8      	blx	r7
 810d3a0:	3001      	adds	r0, #1
 810d3a2:	f43f ae9c 	beq.w	810d0de <_printf_float+0xb6>
 810d3a6:	9a06      	ldr	r2, [sp, #24]
 810d3a8:	f10b 0b01 	add.w	fp, fp, #1
 810d3ac:	e7bb      	b.n	810d326 <_printf_float+0x2fe>
 810d3ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810d3b2:	4631      	mov	r1, r6
 810d3b4:	4628      	mov	r0, r5
 810d3b6:	47b8      	blx	r7
 810d3b8:	3001      	adds	r0, #1
 810d3ba:	d1c0      	bne.n	810d33e <_printf_float+0x316>
 810d3bc:	e68f      	b.n	810d0de <_printf_float+0xb6>
 810d3be:	9a06      	ldr	r2, [sp, #24]
 810d3c0:	464b      	mov	r3, r9
 810d3c2:	4442      	add	r2, r8
 810d3c4:	4631      	mov	r1, r6
 810d3c6:	4628      	mov	r0, r5
 810d3c8:	47b8      	blx	r7
 810d3ca:	3001      	adds	r0, #1
 810d3cc:	d1c3      	bne.n	810d356 <_printf_float+0x32e>
 810d3ce:	e686      	b.n	810d0de <_printf_float+0xb6>
 810d3d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810d3d4:	f1ba 0f01 	cmp.w	sl, #1
 810d3d8:	dc01      	bgt.n	810d3de <_printf_float+0x3b6>
 810d3da:	07db      	lsls	r3, r3, #31
 810d3dc:	d536      	bpl.n	810d44c <_printf_float+0x424>
 810d3de:	2301      	movs	r3, #1
 810d3e0:	4642      	mov	r2, r8
 810d3e2:	4631      	mov	r1, r6
 810d3e4:	4628      	mov	r0, r5
 810d3e6:	47b8      	blx	r7
 810d3e8:	3001      	adds	r0, #1
 810d3ea:	f43f ae78 	beq.w	810d0de <_printf_float+0xb6>
 810d3ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810d3f2:	4631      	mov	r1, r6
 810d3f4:	4628      	mov	r0, r5
 810d3f6:	47b8      	blx	r7
 810d3f8:	3001      	adds	r0, #1
 810d3fa:	f43f ae70 	beq.w	810d0de <_printf_float+0xb6>
 810d3fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810d402:	2200      	movs	r2, #0
 810d404:	2300      	movs	r3, #0
 810d406:	f10a 3aff 	add.w	sl, sl, #4294967295
 810d40a:	f7f3 fbe5 	bl	8100bd8 <__aeabi_dcmpeq>
 810d40e:	b9c0      	cbnz	r0, 810d442 <_printf_float+0x41a>
 810d410:	4653      	mov	r3, sl
 810d412:	f108 0201 	add.w	r2, r8, #1
 810d416:	4631      	mov	r1, r6
 810d418:	4628      	mov	r0, r5
 810d41a:	47b8      	blx	r7
 810d41c:	3001      	adds	r0, #1
 810d41e:	d10c      	bne.n	810d43a <_printf_float+0x412>
 810d420:	e65d      	b.n	810d0de <_printf_float+0xb6>
 810d422:	2301      	movs	r3, #1
 810d424:	465a      	mov	r2, fp
 810d426:	4631      	mov	r1, r6
 810d428:	4628      	mov	r0, r5
 810d42a:	47b8      	blx	r7
 810d42c:	3001      	adds	r0, #1
 810d42e:	f43f ae56 	beq.w	810d0de <_printf_float+0xb6>
 810d432:	f108 0801 	add.w	r8, r8, #1
 810d436:	45d0      	cmp	r8, sl
 810d438:	dbf3      	blt.n	810d422 <_printf_float+0x3fa>
 810d43a:	464b      	mov	r3, r9
 810d43c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 810d440:	e6df      	b.n	810d202 <_printf_float+0x1da>
 810d442:	f04f 0800 	mov.w	r8, #0
 810d446:	f104 0b1a 	add.w	fp, r4, #26
 810d44a:	e7f4      	b.n	810d436 <_printf_float+0x40e>
 810d44c:	2301      	movs	r3, #1
 810d44e:	4642      	mov	r2, r8
 810d450:	e7e1      	b.n	810d416 <_printf_float+0x3ee>
 810d452:	2301      	movs	r3, #1
 810d454:	464a      	mov	r2, r9
 810d456:	4631      	mov	r1, r6
 810d458:	4628      	mov	r0, r5
 810d45a:	47b8      	blx	r7
 810d45c:	3001      	adds	r0, #1
 810d45e:	f43f ae3e 	beq.w	810d0de <_printf_float+0xb6>
 810d462:	f108 0801 	add.w	r8, r8, #1
 810d466:	68e3      	ldr	r3, [r4, #12]
 810d468:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810d46a:	1a5b      	subs	r3, r3, r1
 810d46c:	4543      	cmp	r3, r8
 810d46e:	dcf0      	bgt.n	810d452 <_printf_float+0x42a>
 810d470:	e6fc      	b.n	810d26c <_printf_float+0x244>
 810d472:	f04f 0800 	mov.w	r8, #0
 810d476:	f104 0919 	add.w	r9, r4, #25
 810d47a:	e7f4      	b.n	810d466 <_printf_float+0x43e>

0810d47c <_printf_common>:
 810d47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810d480:	4616      	mov	r6, r2
 810d482:	4698      	mov	r8, r3
 810d484:	688a      	ldr	r2, [r1, #8]
 810d486:	690b      	ldr	r3, [r1, #16]
 810d488:	f8dd 9020 	ldr.w	r9, [sp, #32]
 810d48c:	4293      	cmp	r3, r2
 810d48e:	bfb8      	it	lt
 810d490:	4613      	movlt	r3, r2
 810d492:	6033      	str	r3, [r6, #0]
 810d494:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 810d498:	4607      	mov	r7, r0
 810d49a:	460c      	mov	r4, r1
 810d49c:	b10a      	cbz	r2, 810d4a2 <_printf_common+0x26>
 810d49e:	3301      	adds	r3, #1
 810d4a0:	6033      	str	r3, [r6, #0]
 810d4a2:	6823      	ldr	r3, [r4, #0]
 810d4a4:	0699      	lsls	r1, r3, #26
 810d4a6:	bf42      	ittt	mi
 810d4a8:	6833      	ldrmi	r3, [r6, #0]
 810d4aa:	3302      	addmi	r3, #2
 810d4ac:	6033      	strmi	r3, [r6, #0]
 810d4ae:	6825      	ldr	r5, [r4, #0]
 810d4b0:	f015 0506 	ands.w	r5, r5, #6
 810d4b4:	d106      	bne.n	810d4c4 <_printf_common+0x48>
 810d4b6:	f104 0a19 	add.w	sl, r4, #25
 810d4ba:	68e3      	ldr	r3, [r4, #12]
 810d4bc:	6832      	ldr	r2, [r6, #0]
 810d4be:	1a9b      	subs	r3, r3, r2
 810d4c0:	42ab      	cmp	r3, r5
 810d4c2:	dc26      	bgt.n	810d512 <_printf_common+0x96>
 810d4c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 810d4c8:	6822      	ldr	r2, [r4, #0]
 810d4ca:	3b00      	subs	r3, #0
 810d4cc:	bf18      	it	ne
 810d4ce:	2301      	movne	r3, #1
 810d4d0:	0692      	lsls	r2, r2, #26
 810d4d2:	d42b      	bmi.n	810d52c <_printf_common+0xb0>
 810d4d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 810d4d8:	4641      	mov	r1, r8
 810d4da:	4638      	mov	r0, r7
 810d4dc:	47c8      	blx	r9
 810d4de:	3001      	adds	r0, #1
 810d4e0:	d01e      	beq.n	810d520 <_printf_common+0xa4>
 810d4e2:	6823      	ldr	r3, [r4, #0]
 810d4e4:	6922      	ldr	r2, [r4, #16]
 810d4e6:	f003 0306 	and.w	r3, r3, #6
 810d4ea:	2b04      	cmp	r3, #4
 810d4ec:	bf02      	ittt	eq
 810d4ee:	68e5      	ldreq	r5, [r4, #12]
 810d4f0:	6833      	ldreq	r3, [r6, #0]
 810d4f2:	1aed      	subeq	r5, r5, r3
 810d4f4:	68a3      	ldr	r3, [r4, #8]
 810d4f6:	bf0c      	ite	eq
 810d4f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810d4fc:	2500      	movne	r5, #0
 810d4fe:	4293      	cmp	r3, r2
 810d500:	bfc4      	itt	gt
 810d502:	1a9b      	subgt	r3, r3, r2
 810d504:	18ed      	addgt	r5, r5, r3
 810d506:	2600      	movs	r6, #0
 810d508:	341a      	adds	r4, #26
 810d50a:	42b5      	cmp	r5, r6
 810d50c:	d11a      	bne.n	810d544 <_printf_common+0xc8>
 810d50e:	2000      	movs	r0, #0
 810d510:	e008      	b.n	810d524 <_printf_common+0xa8>
 810d512:	2301      	movs	r3, #1
 810d514:	4652      	mov	r2, sl
 810d516:	4641      	mov	r1, r8
 810d518:	4638      	mov	r0, r7
 810d51a:	47c8      	blx	r9
 810d51c:	3001      	adds	r0, #1
 810d51e:	d103      	bne.n	810d528 <_printf_common+0xac>
 810d520:	f04f 30ff 	mov.w	r0, #4294967295
 810d524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d528:	3501      	adds	r5, #1
 810d52a:	e7c6      	b.n	810d4ba <_printf_common+0x3e>
 810d52c:	18e1      	adds	r1, r4, r3
 810d52e:	1c5a      	adds	r2, r3, #1
 810d530:	2030      	movs	r0, #48	@ 0x30
 810d532:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 810d536:	4422      	add	r2, r4
 810d538:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 810d53c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 810d540:	3302      	adds	r3, #2
 810d542:	e7c7      	b.n	810d4d4 <_printf_common+0x58>
 810d544:	2301      	movs	r3, #1
 810d546:	4622      	mov	r2, r4
 810d548:	4641      	mov	r1, r8
 810d54a:	4638      	mov	r0, r7
 810d54c:	47c8      	blx	r9
 810d54e:	3001      	adds	r0, #1
 810d550:	d0e6      	beq.n	810d520 <_printf_common+0xa4>
 810d552:	3601      	adds	r6, #1
 810d554:	e7d9      	b.n	810d50a <_printf_common+0x8e>
	...

0810d558 <_printf_i>:
 810d558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810d55c:	7e0f      	ldrb	r7, [r1, #24]
 810d55e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 810d560:	2f78      	cmp	r7, #120	@ 0x78
 810d562:	4691      	mov	r9, r2
 810d564:	4680      	mov	r8, r0
 810d566:	460c      	mov	r4, r1
 810d568:	469a      	mov	sl, r3
 810d56a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810d56e:	d807      	bhi.n	810d580 <_printf_i+0x28>
 810d570:	2f62      	cmp	r7, #98	@ 0x62
 810d572:	d80a      	bhi.n	810d58a <_printf_i+0x32>
 810d574:	2f00      	cmp	r7, #0
 810d576:	f000 80d2 	beq.w	810d71e <_printf_i+0x1c6>
 810d57a:	2f58      	cmp	r7, #88	@ 0x58
 810d57c:	f000 80b9 	beq.w	810d6f2 <_printf_i+0x19a>
 810d580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810d584:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 810d588:	e03a      	b.n	810d600 <_printf_i+0xa8>
 810d58a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 810d58e:	2b15      	cmp	r3, #21
 810d590:	d8f6      	bhi.n	810d580 <_printf_i+0x28>
 810d592:	a101      	add	r1, pc, #4	@ (adr r1, 810d598 <_printf_i+0x40>)
 810d594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810d598:	0810d5f1 	.word	0x0810d5f1
 810d59c:	0810d605 	.word	0x0810d605
 810d5a0:	0810d581 	.word	0x0810d581
 810d5a4:	0810d581 	.word	0x0810d581
 810d5a8:	0810d581 	.word	0x0810d581
 810d5ac:	0810d581 	.word	0x0810d581
 810d5b0:	0810d605 	.word	0x0810d605
 810d5b4:	0810d581 	.word	0x0810d581
 810d5b8:	0810d581 	.word	0x0810d581
 810d5bc:	0810d581 	.word	0x0810d581
 810d5c0:	0810d581 	.word	0x0810d581
 810d5c4:	0810d705 	.word	0x0810d705
 810d5c8:	0810d62f 	.word	0x0810d62f
 810d5cc:	0810d6bf 	.word	0x0810d6bf
 810d5d0:	0810d581 	.word	0x0810d581
 810d5d4:	0810d581 	.word	0x0810d581
 810d5d8:	0810d727 	.word	0x0810d727
 810d5dc:	0810d581 	.word	0x0810d581
 810d5e0:	0810d62f 	.word	0x0810d62f
 810d5e4:	0810d581 	.word	0x0810d581
 810d5e8:	0810d581 	.word	0x0810d581
 810d5ec:	0810d6c7 	.word	0x0810d6c7
 810d5f0:	6833      	ldr	r3, [r6, #0]
 810d5f2:	1d1a      	adds	r2, r3, #4
 810d5f4:	681b      	ldr	r3, [r3, #0]
 810d5f6:	6032      	str	r2, [r6, #0]
 810d5f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810d5fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 810d600:	2301      	movs	r3, #1
 810d602:	e09d      	b.n	810d740 <_printf_i+0x1e8>
 810d604:	6833      	ldr	r3, [r6, #0]
 810d606:	6820      	ldr	r0, [r4, #0]
 810d608:	1d19      	adds	r1, r3, #4
 810d60a:	6031      	str	r1, [r6, #0]
 810d60c:	0606      	lsls	r6, r0, #24
 810d60e:	d501      	bpl.n	810d614 <_printf_i+0xbc>
 810d610:	681d      	ldr	r5, [r3, #0]
 810d612:	e003      	b.n	810d61c <_printf_i+0xc4>
 810d614:	0645      	lsls	r5, r0, #25
 810d616:	d5fb      	bpl.n	810d610 <_printf_i+0xb8>
 810d618:	f9b3 5000 	ldrsh.w	r5, [r3]
 810d61c:	2d00      	cmp	r5, #0
 810d61e:	da03      	bge.n	810d628 <_printf_i+0xd0>
 810d620:	232d      	movs	r3, #45	@ 0x2d
 810d622:	426d      	negs	r5, r5
 810d624:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810d628:	4859      	ldr	r0, [pc, #356]	@ (810d790 <_printf_i+0x238>)
 810d62a:	230a      	movs	r3, #10
 810d62c:	e011      	b.n	810d652 <_printf_i+0xfa>
 810d62e:	6821      	ldr	r1, [r4, #0]
 810d630:	6833      	ldr	r3, [r6, #0]
 810d632:	0608      	lsls	r0, r1, #24
 810d634:	f853 5b04 	ldr.w	r5, [r3], #4
 810d638:	d402      	bmi.n	810d640 <_printf_i+0xe8>
 810d63a:	0649      	lsls	r1, r1, #25
 810d63c:	bf48      	it	mi
 810d63e:	b2ad      	uxthmi	r5, r5
 810d640:	2f6f      	cmp	r7, #111	@ 0x6f
 810d642:	4853      	ldr	r0, [pc, #332]	@ (810d790 <_printf_i+0x238>)
 810d644:	6033      	str	r3, [r6, #0]
 810d646:	bf14      	ite	ne
 810d648:	230a      	movne	r3, #10
 810d64a:	2308      	moveq	r3, #8
 810d64c:	2100      	movs	r1, #0
 810d64e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810d652:	6866      	ldr	r6, [r4, #4]
 810d654:	60a6      	str	r6, [r4, #8]
 810d656:	2e00      	cmp	r6, #0
 810d658:	bfa2      	ittt	ge
 810d65a:	6821      	ldrge	r1, [r4, #0]
 810d65c:	f021 0104 	bicge.w	r1, r1, #4
 810d660:	6021      	strge	r1, [r4, #0]
 810d662:	b90d      	cbnz	r5, 810d668 <_printf_i+0x110>
 810d664:	2e00      	cmp	r6, #0
 810d666:	d04b      	beq.n	810d700 <_printf_i+0x1a8>
 810d668:	4616      	mov	r6, r2
 810d66a:	fbb5 f1f3 	udiv	r1, r5, r3
 810d66e:	fb03 5711 	mls	r7, r3, r1, r5
 810d672:	5dc7      	ldrb	r7, [r0, r7]
 810d674:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810d678:	462f      	mov	r7, r5
 810d67a:	42bb      	cmp	r3, r7
 810d67c:	460d      	mov	r5, r1
 810d67e:	d9f4      	bls.n	810d66a <_printf_i+0x112>
 810d680:	2b08      	cmp	r3, #8
 810d682:	d10b      	bne.n	810d69c <_printf_i+0x144>
 810d684:	6823      	ldr	r3, [r4, #0]
 810d686:	07df      	lsls	r7, r3, #31
 810d688:	d508      	bpl.n	810d69c <_printf_i+0x144>
 810d68a:	6923      	ldr	r3, [r4, #16]
 810d68c:	6861      	ldr	r1, [r4, #4]
 810d68e:	4299      	cmp	r1, r3
 810d690:	bfde      	ittt	le
 810d692:	2330      	movle	r3, #48	@ 0x30
 810d694:	f806 3c01 	strble.w	r3, [r6, #-1]
 810d698:	f106 36ff 	addle.w	r6, r6, #4294967295
 810d69c:	1b92      	subs	r2, r2, r6
 810d69e:	6122      	str	r2, [r4, #16]
 810d6a0:	f8cd a000 	str.w	sl, [sp]
 810d6a4:	464b      	mov	r3, r9
 810d6a6:	aa03      	add	r2, sp, #12
 810d6a8:	4621      	mov	r1, r4
 810d6aa:	4640      	mov	r0, r8
 810d6ac:	f7ff fee6 	bl	810d47c <_printf_common>
 810d6b0:	3001      	adds	r0, #1
 810d6b2:	d14a      	bne.n	810d74a <_printf_i+0x1f2>
 810d6b4:	f04f 30ff 	mov.w	r0, #4294967295
 810d6b8:	b004      	add	sp, #16
 810d6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d6be:	6823      	ldr	r3, [r4, #0]
 810d6c0:	f043 0320 	orr.w	r3, r3, #32
 810d6c4:	6023      	str	r3, [r4, #0]
 810d6c6:	4833      	ldr	r0, [pc, #204]	@ (810d794 <_printf_i+0x23c>)
 810d6c8:	2778      	movs	r7, #120	@ 0x78
 810d6ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810d6ce:	6823      	ldr	r3, [r4, #0]
 810d6d0:	6831      	ldr	r1, [r6, #0]
 810d6d2:	061f      	lsls	r7, r3, #24
 810d6d4:	f851 5b04 	ldr.w	r5, [r1], #4
 810d6d8:	d402      	bmi.n	810d6e0 <_printf_i+0x188>
 810d6da:	065f      	lsls	r7, r3, #25
 810d6dc:	bf48      	it	mi
 810d6de:	b2ad      	uxthmi	r5, r5
 810d6e0:	6031      	str	r1, [r6, #0]
 810d6e2:	07d9      	lsls	r1, r3, #31
 810d6e4:	bf44      	itt	mi
 810d6e6:	f043 0320 	orrmi.w	r3, r3, #32
 810d6ea:	6023      	strmi	r3, [r4, #0]
 810d6ec:	b11d      	cbz	r5, 810d6f6 <_printf_i+0x19e>
 810d6ee:	2310      	movs	r3, #16
 810d6f0:	e7ac      	b.n	810d64c <_printf_i+0xf4>
 810d6f2:	4827      	ldr	r0, [pc, #156]	@ (810d790 <_printf_i+0x238>)
 810d6f4:	e7e9      	b.n	810d6ca <_printf_i+0x172>
 810d6f6:	6823      	ldr	r3, [r4, #0]
 810d6f8:	f023 0320 	bic.w	r3, r3, #32
 810d6fc:	6023      	str	r3, [r4, #0]
 810d6fe:	e7f6      	b.n	810d6ee <_printf_i+0x196>
 810d700:	4616      	mov	r6, r2
 810d702:	e7bd      	b.n	810d680 <_printf_i+0x128>
 810d704:	6833      	ldr	r3, [r6, #0]
 810d706:	6825      	ldr	r5, [r4, #0]
 810d708:	6961      	ldr	r1, [r4, #20]
 810d70a:	1d18      	adds	r0, r3, #4
 810d70c:	6030      	str	r0, [r6, #0]
 810d70e:	062e      	lsls	r6, r5, #24
 810d710:	681b      	ldr	r3, [r3, #0]
 810d712:	d501      	bpl.n	810d718 <_printf_i+0x1c0>
 810d714:	6019      	str	r1, [r3, #0]
 810d716:	e002      	b.n	810d71e <_printf_i+0x1c6>
 810d718:	0668      	lsls	r0, r5, #25
 810d71a:	d5fb      	bpl.n	810d714 <_printf_i+0x1bc>
 810d71c:	8019      	strh	r1, [r3, #0]
 810d71e:	2300      	movs	r3, #0
 810d720:	6123      	str	r3, [r4, #16]
 810d722:	4616      	mov	r6, r2
 810d724:	e7bc      	b.n	810d6a0 <_printf_i+0x148>
 810d726:	6833      	ldr	r3, [r6, #0]
 810d728:	1d1a      	adds	r2, r3, #4
 810d72a:	6032      	str	r2, [r6, #0]
 810d72c:	681e      	ldr	r6, [r3, #0]
 810d72e:	6862      	ldr	r2, [r4, #4]
 810d730:	2100      	movs	r1, #0
 810d732:	4630      	mov	r0, r6
 810d734:	f7f2 fdd4 	bl	81002e0 <memchr>
 810d738:	b108      	cbz	r0, 810d73e <_printf_i+0x1e6>
 810d73a:	1b80      	subs	r0, r0, r6
 810d73c:	6060      	str	r0, [r4, #4]
 810d73e:	6863      	ldr	r3, [r4, #4]
 810d740:	6123      	str	r3, [r4, #16]
 810d742:	2300      	movs	r3, #0
 810d744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810d748:	e7aa      	b.n	810d6a0 <_printf_i+0x148>
 810d74a:	6923      	ldr	r3, [r4, #16]
 810d74c:	4632      	mov	r2, r6
 810d74e:	4649      	mov	r1, r9
 810d750:	4640      	mov	r0, r8
 810d752:	47d0      	blx	sl
 810d754:	3001      	adds	r0, #1
 810d756:	d0ad      	beq.n	810d6b4 <_printf_i+0x15c>
 810d758:	6823      	ldr	r3, [r4, #0]
 810d75a:	079b      	lsls	r3, r3, #30
 810d75c:	d413      	bmi.n	810d786 <_printf_i+0x22e>
 810d75e:	68e0      	ldr	r0, [r4, #12]
 810d760:	9b03      	ldr	r3, [sp, #12]
 810d762:	4298      	cmp	r0, r3
 810d764:	bfb8      	it	lt
 810d766:	4618      	movlt	r0, r3
 810d768:	e7a6      	b.n	810d6b8 <_printf_i+0x160>
 810d76a:	2301      	movs	r3, #1
 810d76c:	4632      	mov	r2, r6
 810d76e:	4649      	mov	r1, r9
 810d770:	4640      	mov	r0, r8
 810d772:	47d0      	blx	sl
 810d774:	3001      	adds	r0, #1
 810d776:	d09d      	beq.n	810d6b4 <_printf_i+0x15c>
 810d778:	3501      	adds	r5, #1
 810d77a:	68e3      	ldr	r3, [r4, #12]
 810d77c:	9903      	ldr	r1, [sp, #12]
 810d77e:	1a5b      	subs	r3, r3, r1
 810d780:	42ab      	cmp	r3, r5
 810d782:	dcf2      	bgt.n	810d76a <_printf_i+0x212>
 810d784:	e7eb      	b.n	810d75e <_printf_i+0x206>
 810d786:	2500      	movs	r5, #0
 810d788:	f104 0619 	add.w	r6, r4, #25
 810d78c:	e7f5      	b.n	810d77a <_printf_i+0x222>
 810d78e:	bf00      	nop
 810d790:	08111799 	.word	0x08111799
 810d794:	081117aa 	.word	0x081117aa

0810d798 <_scanf_float>:
 810d798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d79c:	b087      	sub	sp, #28
 810d79e:	4617      	mov	r7, r2
 810d7a0:	9303      	str	r3, [sp, #12]
 810d7a2:	688b      	ldr	r3, [r1, #8]
 810d7a4:	1e5a      	subs	r2, r3, #1
 810d7a6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 810d7aa:	bf81      	itttt	hi
 810d7ac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 810d7b0:	eb03 0b05 	addhi.w	fp, r3, r5
 810d7b4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 810d7b8:	608b      	strhi	r3, [r1, #8]
 810d7ba:	680b      	ldr	r3, [r1, #0]
 810d7bc:	460a      	mov	r2, r1
 810d7be:	f04f 0500 	mov.w	r5, #0
 810d7c2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 810d7c6:	f842 3b1c 	str.w	r3, [r2], #28
 810d7ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810d7ce:	4680      	mov	r8, r0
 810d7d0:	460c      	mov	r4, r1
 810d7d2:	bf98      	it	ls
 810d7d4:	f04f 0b00 	movls.w	fp, #0
 810d7d8:	9201      	str	r2, [sp, #4]
 810d7da:	4616      	mov	r6, r2
 810d7dc:	46aa      	mov	sl, r5
 810d7de:	46a9      	mov	r9, r5
 810d7e0:	9502      	str	r5, [sp, #8]
 810d7e2:	68a2      	ldr	r2, [r4, #8]
 810d7e4:	b152      	cbz	r2, 810d7fc <_scanf_float+0x64>
 810d7e6:	683b      	ldr	r3, [r7, #0]
 810d7e8:	781b      	ldrb	r3, [r3, #0]
 810d7ea:	2b4e      	cmp	r3, #78	@ 0x4e
 810d7ec:	d864      	bhi.n	810d8b8 <_scanf_float+0x120>
 810d7ee:	2b40      	cmp	r3, #64	@ 0x40
 810d7f0:	d83c      	bhi.n	810d86c <_scanf_float+0xd4>
 810d7f2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 810d7f6:	b2c8      	uxtb	r0, r1
 810d7f8:	280e      	cmp	r0, #14
 810d7fa:	d93a      	bls.n	810d872 <_scanf_float+0xda>
 810d7fc:	f1b9 0f00 	cmp.w	r9, #0
 810d800:	d003      	beq.n	810d80a <_scanf_float+0x72>
 810d802:	6823      	ldr	r3, [r4, #0]
 810d804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810d808:	6023      	str	r3, [r4, #0]
 810d80a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810d80e:	f1ba 0f01 	cmp.w	sl, #1
 810d812:	f200 8117 	bhi.w	810da44 <_scanf_float+0x2ac>
 810d816:	9b01      	ldr	r3, [sp, #4]
 810d818:	429e      	cmp	r6, r3
 810d81a:	f200 8108 	bhi.w	810da2e <_scanf_float+0x296>
 810d81e:	2001      	movs	r0, #1
 810d820:	b007      	add	sp, #28
 810d822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d826:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 810d82a:	2a0d      	cmp	r2, #13
 810d82c:	d8e6      	bhi.n	810d7fc <_scanf_float+0x64>
 810d82e:	a101      	add	r1, pc, #4	@ (adr r1, 810d834 <_scanf_float+0x9c>)
 810d830:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810d834:	0810d97b 	.word	0x0810d97b
 810d838:	0810d7fd 	.word	0x0810d7fd
 810d83c:	0810d7fd 	.word	0x0810d7fd
 810d840:	0810d7fd 	.word	0x0810d7fd
 810d844:	0810d9db 	.word	0x0810d9db
 810d848:	0810d9b3 	.word	0x0810d9b3
 810d84c:	0810d7fd 	.word	0x0810d7fd
 810d850:	0810d7fd 	.word	0x0810d7fd
 810d854:	0810d989 	.word	0x0810d989
 810d858:	0810d7fd 	.word	0x0810d7fd
 810d85c:	0810d7fd 	.word	0x0810d7fd
 810d860:	0810d7fd 	.word	0x0810d7fd
 810d864:	0810d7fd 	.word	0x0810d7fd
 810d868:	0810d941 	.word	0x0810d941
 810d86c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 810d870:	e7db      	b.n	810d82a <_scanf_float+0x92>
 810d872:	290e      	cmp	r1, #14
 810d874:	d8c2      	bhi.n	810d7fc <_scanf_float+0x64>
 810d876:	a001      	add	r0, pc, #4	@ (adr r0, 810d87c <_scanf_float+0xe4>)
 810d878:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810d87c:	0810d931 	.word	0x0810d931
 810d880:	0810d7fd 	.word	0x0810d7fd
 810d884:	0810d931 	.word	0x0810d931
 810d888:	0810d9c7 	.word	0x0810d9c7
 810d88c:	0810d7fd 	.word	0x0810d7fd
 810d890:	0810d8d9 	.word	0x0810d8d9
 810d894:	0810d917 	.word	0x0810d917
 810d898:	0810d917 	.word	0x0810d917
 810d89c:	0810d917 	.word	0x0810d917
 810d8a0:	0810d917 	.word	0x0810d917
 810d8a4:	0810d917 	.word	0x0810d917
 810d8a8:	0810d917 	.word	0x0810d917
 810d8ac:	0810d917 	.word	0x0810d917
 810d8b0:	0810d917 	.word	0x0810d917
 810d8b4:	0810d917 	.word	0x0810d917
 810d8b8:	2b6e      	cmp	r3, #110	@ 0x6e
 810d8ba:	d809      	bhi.n	810d8d0 <_scanf_float+0x138>
 810d8bc:	2b60      	cmp	r3, #96	@ 0x60
 810d8be:	d8b2      	bhi.n	810d826 <_scanf_float+0x8e>
 810d8c0:	2b54      	cmp	r3, #84	@ 0x54
 810d8c2:	d07b      	beq.n	810d9bc <_scanf_float+0x224>
 810d8c4:	2b59      	cmp	r3, #89	@ 0x59
 810d8c6:	d199      	bne.n	810d7fc <_scanf_float+0x64>
 810d8c8:	2d07      	cmp	r5, #7
 810d8ca:	d197      	bne.n	810d7fc <_scanf_float+0x64>
 810d8cc:	2508      	movs	r5, #8
 810d8ce:	e02c      	b.n	810d92a <_scanf_float+0x192>
 810d8d0:	2b74      	cmp	r3, #116	@ 0x74
 810d8d2:	d073      	beq.n	810d9bc <_scanf_float+0x224>
 810d8d4:	2b79      	cmp	r3, #121	@ 0x79
 810d8d6:	e7f6      	b.n	810d8c6 <_scanf_float+0x12e>
 810d8d8:	6821      	ldr	r1, [r4, #0]
 810d8da:	05c8      	lsls	r0, r1, #23
 810d8dc:	d51b      	bpl.n	810d916 <_scanf_float+0x17e>
 810d8de:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 810d8e2:	6021      	str	r1, [r4, #0]
 810d8e4:	f109 0901 	add.w	r9, r9, #1
 810d8e8:	f1bb 0f00 	cmp.w	fp, #0
 810d8ec:	d003      	beq.n	810d8f6 <_scanf_float+0x15e>
 810d8ee:	3201      	adds	r2, #1
 810d8f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 810d8f4:	60a2      	str	r2, [r4, #8]
 810d8f6:	68a3      	ldr	r3, [r4, #8]
 810d8f8:	3b01      	subs	r3, #1
 810d8fa:	60a3      	str	r3, [r4, #8]
 810d8fc:	6923      	ldr	r3, [r4, #16]
 810d8fe:	3301      	adds	r3, #1
 810d900:	6123      	str	r3, [r4, #16]
 810d902:	687b      	ldr	r3, [r7, #4]
 810d904:	3b01      	subs	r3, #1
 810d906:	2b00      	cmp	r3, #0
 810d908:	607b      	str	r3, [r7, #4]
 810d90a:	f340 8087 	ble.w	810da1c <_scanf_float+0x284>
 810d90e:	683b      	ldr	r3, [r7, #0]
 810d910:	3301      	adds	r3, #1
 810d912:	603b      	str	r3, [r7, #0]
 810d914:	e765      	b.n	810d7e2 <_scanf_float+0x4a>
 810d916:	eb1a 0105 	adds.w	r1, sl, r5
 810d91a:	f47f af6f 	bne.w	810d7fc <_scanf_float+0x64>
 810d91e:	6822      	ldr	r2, [r4, #0]
 810d920:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 810d924:	6022      	str	r2, [r4, #0]
 810d926:	460d      	mov	r5, r1
 810d928:	468a      	mov	sl, r1
 810d92a:	f806 3b01 	strb.w	r3, [r6], #1
 810d92e:	e7e2      	b.n	810d8f6 <_scanf_float+0x15e>
 810d930:	6822      	ldr	r2, [r4, #0]
 810d932:	0610      	lsls	r0, r2, #24
 810d934:	f57f af62 	bpl.w	810d7fc <_scanf_float+0x64>
 810d938:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 810d93c:	6022      	str	r2, [r4, #0]
 810d93e:	e7f4      	b.n	810d92a <_scanf_float+0x192>
 810d940:	f1ba 0f00 	cmp.w	sl, #0
 810d944:	d10e      	bne.n	810d964 <_scanf_float+0x1cc>
 810d946:	f1b9 0f00 	cmp.w	r9, #0
 810d94a:	d10e      	bne.n	810d96a <_scanf_float+0x1d2>
 810d94c:	6822      	ldr	r2, [r4, #0]
 810d94e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810d952:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810d956:	d108      	bne.n	810d96a <_scanf_float+0x1d2>
 810d958:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810d95c:	6022      	str	r2, [r4, #0]
 810d95e:	f04f 0a01 	mov.w	sl, #1
 810d962:	e7e2      	b.n	810d92a <_scanf_float+0x192>
 810d964:	f1ba 0f02 	cmp.w	sl, #2
 810d968:	d055      	beq.n	810da16 <_scanf_float+0x27e>
 810d96a:	2d01      	cmp	r5, #1
 810d96c:	d002      	beq.n	810d974 <_scanf_float+0x1dc>
 810d96e:	2d04      	cmp	r5, #4
 810d970:	f47f af44 	bne.w	810d7fc <_scanf_float+0x64>
 810d974:	3501      	adds	r5, #1
 810d976:	b2ed      	uxtb	r5, r5
 810d978:	e7d7      	b.n	810d92a <_scanf_float+0x192>
 810d97a:	f1ba 0f01 	cmp.w	sl, #1
 810d97e:	f47f af3d 	bne.w	810d7fc <_scanf_float+0x64>
 810d982:	f04f 0a02 	mov.w	sl, #2
 810d986:	e7d0      	b.n	810d92a <_scanf_float+0x192>
 810d988:	b97d      	cbnz	r5, 810d9aa <_scanf_float+0x212>
 810d98a:	f1b9 0f00 	cmp.w	r9, #0
 810d98e:	f47f af38 	bne.w	810d802 <_scanf_float+0x6a>
 810d992:	6822      	ldr	r2, [r4, #0]
 810d994:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810d998:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810d99c:	f040 8108 	bne.w	810dbb0 <_scanf_float+0x418>
 810d9a0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810d9a4:	6022      	str	r2, [r4, #0]
 810d9a6:	2501      	movs	r5, #1
 810d9a8:	e7bf      	b.n	810d92a <_scanf_float+0x192>
 810d9aa:	2d03      	cmp	r5, #3
 810d9ac:	d0e2      	beq.n	810d974 <_scanf_float+0x1dc>
 810d9ae:	2d05      	cmp	r5, #5
 810d9b0:	e7de      	b.n	810d970 <_scanf_float+0x1d8>
 810d9b2:	2d02      	cmp	r5, #2
 810d9b4:	f47f af22 	bne.w	810d7fc <_scanf_float+0x64>
 810d9b8:	2503      	movs	r5, #3
 810d9ba:	e7b6      	b.n	810d92a <_scanf_float+0x192>
 810d9bc:	2d06      	cmp	r5, #6
 810d9be:	f47f af1d 	bne.w	810d7fc <_scanf_float+0x64>
 810d9c2:	2507      	movs	r5, #7
 810d9c4:	e7b1      	b.n	810d92a <_scanf_float+0x192>
 810d9c6:	6822      	ldr	r2, [r4, #0]
 810d9c8:	0591      	lsls	r1, r2, #22
 810d9ca:	f57f af17 	bpl.w	810d7fc <_scanf_float+0x64>
 810d9ce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 810d9d2:	6022      	str	r2, [r4, #0]
 810d9d4:	f8cd 9008 	str.w	r9, [sp, #8]
 810d9d8:	e7a7      	b.n	810d92a <_scanf_float+0x192>
 810d9da:	6822      	ldr	r2, [r4, #0]
 810d9dc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 810d9e0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 810d9e4:	d006      	beq.n	810d9f4 <_scanf_float+0x25c>
 810d9e6:	0550      	lsls	r0, r2, #21
 810d9e8:	f57f af08 	bpl.w	810d7fc <_scanf_float+0x64>
 810d9ec:	f1b9 0f00 	cmp.w	r9, #0
 810d9f0:	f000 80de 	beq.w	810dbb0 <_scanf_float+0x418>
 810d9f4:	0591      	lsls	r1, r2, #22
 810d9f6:	bf58      	it	pl
 810d9f8:	9902      	ldrpl	r1, [sp, #8]
 810d9fa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810d9fe:	bf58      	it	pl
 810da00:	eba9 0101 	subpl.w	r1, r9, r1
 810da04:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 810da08:	bf58      	it	pl
 810da0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810da0e:	6022      	str	r2, [r4, #0]
 810da10:	f04f 0900 	mov.w	r9, #0
 810da14:	e789      	b.n	810d92a <_scanf_float+0x192>
 810da16:	f04f 0a03 	mov.w	sl, #3
 810da1a:	e786      	b.n	810d92a <_scanf_float+0x192>
 810da1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 810da20:	4639      	mov	r1, r7
 810da22:	4640      	mov	r0, r8
 810da24:	4798      	blx	r3
 810da26:	2800      	cmp	r0, #0
 810da28:	f43f aedb 	beq.w	810d7e2 <_scanf_float+0x4a>
 810da2c:	e6e6      	b.n	810d7fc <_scanf_float+0x64>
 810da2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810da32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810da36:	463a      	mov	r2, r7
 810da38:	4640      	mov	r0, r8
 810da3a:	4798      	blx	r3
 810da3c:	6923      	ldr	r3, [r4, #16]
 810da3e:	3b01      	subs	r3, #1
 810da40:	6123      	str	r3, [r4, #16]
 810da42:	e6e8      	b.n	810d816 <_scanf_float+0x7e>
 810da44:	1e6b      	subs	r3, r5, #1
 810da46:	2b06      	cmp	r3, #6
 810da48:	d824      	bhi.n	810da94 <_scanf_float+0x2fc>
 810da4a:	2d02      	cmp	r5, #2
 810da4c:	d836      	bhi.n	810dabc <_scanf_float+0x324>
 810da4e:	9b01      	ldr	r3, [sp, #4]
 810da50:	429e      	cmp	r6, r3
 810da52:	f67f aee4 	bls.w	810d81e <_scanf_float+0x86>
 810da56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810da5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810da5e:	463a      	mov	r2, r7
 810da60:	4640      	mov	r0, r8
 810da62:	4798      	blx	r3
 810da64:	6923      	ldr	r3, [r4, #16]
 810da66:	3b01      	subs	r3, #1
 810da68:	6123      	str	r3, [r4, #16]
 810da6a:	e7f0      	b.n	810da4e <_scanf_float+0x2b6>
 810da6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810da70:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 810da74:	463a      	mov	r2, r7
 810da76:	4640      	mov	r0, r8
 810da78:	4798      	blx	r3
 810da7a:	6923      	ldr	r3, [r4, #16]
 810da7c:	3b01      	subs	r3, #1
 810da7e:	6123      	str	r3, [r4, #16]
 810da80:	f10a 3aff 	add.w	sl, sl, #4294967295
 810da84:	fa5f fa8a 	uxtb.w	sl, sl
 810da88:	f1ba 0f02 	cmp.w	sl, #2
 810da8c:	d1ee      	bne.n	810da6c <_scanf_float+0x2d4>
 810da8e:	3d03      	subs	r5, #3
 810da90:	b2ed      	uxtb	r5, r5
 810da92:	1b76      	subs	r6, r6, r5
 810da94:	6823      	ldr	r3, [r4, #0]
 810da96:	05da      	lsls	r2, r3, #23
 810da98:	d530      	bpl.n	810dafc <_scanf_float+0x364>
 810da9a:	055b      	lsls	r3, r3, #21
 810da9c:	d511      	bpl.n	810dac2 <_scanf_float+0x32a>
 810da9e:	9b01      	ldr	r3, [sp, #4]
 810daa0:	429e      	cmp	r6, r3
 810daa2:	f67f aebc 	bls.w	810d81e <_scanf_float+0x86>
 810daa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810daaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810daae:	463a      	mov	r2, r7
 810dab0:	4640      	mov	r0, r8
 810dab2:	4798      	blx	r3
 810dab4:	6923      	ldr	r3, [r4, #16]
 810dab6:	3b01      	subs	r3, #1
 810dab8:	6123      	str	r3, [r4, #16]
 810daba:	e7f0      	b.n	810da9e <_scanf_float+0x306>
 810dabc:	46aa      	mov	sl, r5
 810dabe:	46b3      	mov	fp, r6
 810dac0:	e7de      	b.n	810da80 <_scanf_float+0x2e8>
 810dac2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810dac6:	6923      	ldr	r3, [r4, #16]
 810dac8:	2965      	cmp	r1, #101	@ 0x65
 810daca:	f103 33ff 	add.w	r3, r3, #4294967295
 810dace:	f106 35ff 	add.w	r5, r6, #4294967295
 810dad2:	6123      	str	r3, [r4, #16]
 810dad4:	d00c      	beq.n	810daf0 <_scanf_float+0x358>
 810dad6:	2945      	cmp	r1, #69	@ 0x45
 810dad8:	d00a      	beq.n	810daf0 <_scanf_float+0x358>
 810dada:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810dade:	463a      	mov	r2, r7
 810dae0:	4640      	mov	r0, r8
 810dae2:	4798      	blx	r3
 810dae4:	6923      	ldr	r3, [r4, #16]
 810dae6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810daea:	3b01      	subs	r3, #1
 810daec:	1eb5      	subs	r5, r6, #2
 810daee:	6123      	str	r3, [r4, #16]
 810daf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810daf4:	463a      	mov	r2, r7
 810daf6:	4640      	mov	r0, r8
 810daf8:	4798      	blx	r3
 810dafa:	462e      	mov	r6, r5
 810dafc:	6822      	ldr	r2, [r4, #0]
 810dafe:	f012 0210 	ands.w	r2, r2, #16
 810db02:	d001      	beq.n	810db08 <_scanf_float+0x370>
 810db04:	2000      	movs	r0, #0
 810db06:	e68b      	b.n	810d820 <_scanf_float+0x88>
 810db08:	7032      	strb	r2, [r6, #0]
 810db0a:	6823      	ldr	r3, [r4, #0]
 810db0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 810db10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810db14:	d11c      	bne.n	810db50 <_scanf_float+0x3b8>
 810db16:	9b02      	ldr	r3, [sp, #8]
 810db18:	454b      	cmp	r3, r9
 810db1a:	eba3 0209 	sub.w	r2, r3, r9
 810db1e:	d123      	bne.n	810db68 <_scanf_float+0x3d0>
 810db20:	9901      	ldr	r1, [sp, #4]
 810db22:	2200      	movs	r2, #0
 810db24:	4640      	mov	r0, r8
 810db26:	f002 fd27 	bl	8110578 <_strtod_r>
 810db2a:	9b03      	ldr	r3, [sp, #12]
 810db2c:	6821      	ldr	r1, [r4, #0]
 810db2e:	681b      	ldr	r3, [r3, #0]
 810db30:	f011 0f02 	tst.w	r1, #2
 810db34:	ec57 6b10 	vmov	r6, r7, d0
 810db38:	f103 0204 	add.w	r2, r3, #4
 810db3c:	d01f      	beq.n	810db7e <_scanf_float+0x3e6>
 810db3e:	9903      	ldr	r1, [sp, #12]
 810db40:	600a      	str	r2, [r1, #0]
 810db42:	681b      	ldr	r3, [r3, #0]
 810db44:	e9c3 6700 	strd	r6, r7, [r3]
 810db48:	68e3      	ldr	r3, [r4, #12]
 810db4a:	3301      	adds	r3, #1
 810db4c:	60e3      	str	r3, [r4, #12]
 810db4e:	e7d9      	b.n	810db04 <_scanf_float+0x36c>
 810db50:	9b04      	ldr	r3, [sp, #16]
 810db52:	2b00      	cmp	r3, #0
 810db54:	d0e4      	beq.n	810db20 <_scanf_float+0x388>
 810db56:	9905      	ldr	r1, [sp, #20]
 810db58:	230a      	movs	r3, #10
 810db5a:	3101      	adds	r1, #1
 810db5c:	4640      	mov	r0, r8
 810db5e:	f002 fd8b 	bl	8110678 <_strtol_r>
 810db62:	9b04      	ldr	r3, [sp, #16]
 810db64:	9e05      	ldr	r6, [sp, #20]
 810db66:	1ac2      	subs	r2, r0, r3
 810db68:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 810db6c:	429e      	cmp	r6, r3
 810db6e:	bf28      	it	cs
 810db70:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 810db74:	4910      	ldr	r1, [pc, #64]	@ (810dbb8 <_scanf_float+0x420>)
 810db76:	4630      	mov	r0, r6
 810db78:	f000 f954 	bl	810de24 <siprintf>
 810db7c:	e7d0      	b.n	810db20 <_scanf_float+0x388>
 810db7e:	f011 0f04 	tst.w	r1, #4
 810db82:	9903      	ldr	r1, [sp, #12]
 810db84:	600a      	str	r2, [r1, #0]
 810db86:	d1dc      	bne.n	810db42 <_scanf_float+0x3aa>
 810db88:	681d      	ldr	r5, [r3, #0]
 810db8a:	4632      	mov	r2, r6
 810db8c:	463b      	mov	r3, r7
 810db8e:	4630      	mov	r0, r6
 810db90:	4639      	mov	r1, r7
 810db92:	f7f3 f853 	bl	8100c3c <__aeabi_dcmpun>
 810db96:	b128      	cbz	r0, 810dba4 <_scanf_float+0x40c>
 810db98:	4808      	ldr	r0, [pc, #32]	@ (810dbbc <_scanf_float+0x424>)
 810db9a:	f000 fac9 	bl	810e130 <nanf>
 810db9e:	ed85 0a00 	vstr	s0, [r5]
 810dba2:	e7d1      	b.n	810db48 <_scanf_float+0x3b0>
 810dba4:	4630      	mov	r0, r6
 810dba6:	4639      	mov	r1, r7
 810dba8:	f7f3 f8a6 	bl	8100cf8 <__aeabi_d2f>
 810dbac:	6028      	str	r0, [r5, #0]
 810dbae:	e7cb      	b.n	810db48 <_scanf_float+0x3b0>
 810dbb0:	f04f 0900 	mov.w	r9, #0
 810dbb4:	e629      	b.n	810d80a <_scanf_float+0x72>
 810dbb6:	bf00      	nop
 810dbb8:	081117bb 	.word	0x081117bb
 810dbbc:	081117fb 	.word	0x081117fb

0810dbc0 <std>:
 810dbc0:	2300      	movs	r3, #0
 810dbc2:	b510      	push	{r4, lr}
 810dbc4:	4604      	mov	r4, r0
 810dbc6:	e9c0 3300 	strd	r3, r3, [r0]
 810dbca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810dbce:	6083      	str	r3, [r0, #8]
 810dbd0:	8181      	strh	r1, [r0, #12]
 810dbd2:	6643      	str	r3, [r0, #100]	@ 0x64
 810dbd4:	81c2      	strh	r2, [r0, #14]
 810dbd6:	6183      	str	r3, [r0, #24]
 810dbd8:	4619      	mov	r1, r3
 810dbda:	2208      	movs	r2, #8
 810dbdc:	305c      	adds	r0, #92	@ 0x5c
 810dbde:	f000 fa19 	bl	810e014 <memset>
 810dbe2:	4b0d      	ldr	r3, [pc, #52]	@ (810dc18 <std+0x58>)
 810dbe4:	6263      	str	r3, [r4, #36]	@ 0x24
 810dbe6:	4b0d      	ldr	r3, [pc, #52]	@ (810dc1c <std+0x5c>)
 810dbe8:	62a3      	str	r3, [r4, #40]	@ 0x28
 810dbea:	4b0d      	ldr	r3, [pc, #52]	@ (810dc20 <std+0x60>)
 810dbec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 810dbee:	4b0d      	ldr	r3, [pc, #52]	@ (810dc24 <std+0x64>)
 810dbf0:	6323      	str	r3, [r4, #48]	@ 0x30
 810dbf2:	4b0d      	ldr	r3, [pc, #52]	@ (810dc28 <std+0x68>)
 810dbf4:	6224      	str	r4, [r4, #32]
 810dbf6:	429c      	cmp	r4, r3
 810dbf8:	d006      	beq.n	810dc08 <std+0x48>
 810dbfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 810dbfe:	4294      	cmp	r4, r2
 810dc00:	d002      	beq.n	810dc08 <std+0x48>
 810dc02:	33d0      	adds	r3, #208	@ 0xd0
 810dc04:	429c      	cmp	r4, r3
 810dc06:	d105      	bne.n	810dc14 <std+0x54>
 810dc08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 810dc0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810dc10:	f000 ba7c 	b.w	810e10c <__retarget_lock_init_recursive>
 810dc14:	bd10      	pop	{r4, pc}
 810dc16:	bf00      	nop
 810dc18:	0810de65 	.word	0x0810de65
 810dc1c:	0810de87 	.word	0x0810de87
 810dc20:	0810debf 	.word	0x0810debf
 810dc24:	0810dee3 	.word	0x0810dee3
 810dc28:	100008e4 	.word	0x100008e4

0810dc2c <stdio_exit_handler>:
 810dc2c:	4a02      	ldr	r2, [pc, #8]	@ (810dc38 <stdio_exit_handler+0xc>)
 810dc2e:	4903      	ldr	r1, [pc, #12]	@ (810dc3c <stdio_exit_handler+0x10>)
 810dc30:	4803      	ldr	r0, [pc, #12]	@ (810dc40 <stdio_exit_handler+0x14>)
 810dc32:	f000 b869 	b.w	810dd08 <_fwalk_sglue>
 810dc36:	bf00      	nop
 810dc38:	1000009c 	.word	0x1000009c
 810dc3c:	08110cb9 	.word	0x08110cb9
 810dc40:	100000ac 	.word	0x100000ac

0810dc44 <cleanup_stdio>:
 810dc44:	6841      	ldr	r1, [r0, #4]
 810dc46:	4b0c      	ldr	r3, [pc, #48]	@ (810dc78 <cleanup_stdio+0x34>)
 810dc48:	4299      	cmp	r1, r3
 810dc4a:	b510      	push	{r4, lr}
 810dc4c:	4604      	mov	r4, r0
 810dc4e:	d001      	beq.n	810dc54 <cleanup_stdio+0x10>
 810dc50:	f003 f832 	bl	8110cb8 <_fflush_r>
 810dc54:	68a1      	ldr	r1, [r4, #8]
 810dc56:	4b09      	ldr	r3, [pc, #36]	@ (810dc7c <cleanup_stdio+0x38>)
 810dc58:	4299      	cmp	r1, r3
 810dc5a:	d002      	beq.n	810dc62 <cleanup_stdio+0x1e>
 810dc5c:	4620      	mov	r0, r4
 810dc5e:	f003 f82b 	bl	8110cb8 <_fflush_r>
 810dc62:	68e1      	ldr	r1, [r4, #12]
 810dc64:	4b06      	ldr	r3, [pc, #24]	@ (810dc80 <cleanup_stdio+0x3c>)
 810dc66:	4299      	cmp	r1, r3
 810dc68:	d004      	beq.n	810dc74 <cleanup_stdio+0x30>
 810dc6a:	4620      	mov	r0, r4
 810dc6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810dc70:	f003 b822 	b.w	8110cb8 <_fflush_r>
 810dc74:	bd10      	pop	{r4, pc}
 810dc76:	bf00      	nop
 810dc78:	100008e4 	.word	0x100008e4
 810dc7c:	1000094c 	.word	0x1000094c
 810dc80:	100009b4 	.word	0x100009b4

0810dc84 <global_stdio_init.part.0>:
 810dc84:	b510      	push	{r4, lr}
 810dc86:	4b0b      	ldr	r3, [pc, #44]	@ (810dcb4 <global_stdio_init.part.0+0x30>)
 810dc88:	4c0b      	ldr	r4, [pc, #44]	@ (810dcb8 <global_stdio_init.part.0+0x34>)
 810dc8a:	4a0c      	ldr	r2, [pc, #48]	@ (810dcbc <global_stdio_init.part.0+0x38>)
 810dc8c:	601a      	str	r2, [r3, #0]
 810dc8e:	4620      	mov	r0, r4
 810dc90:	2200      	movs	r2, #0
 810dc92:	2104      	movs	r1, #4
 810dc94:	f7ff ff94 	bl	810dbc0 <std>
 810dc98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 810dc9c:	2201      	movs	r2, #1
 810dc9e:	2109      	movs	r1, #9
 810dca0:	f7ff ff8e 	bl	810dbc0 <std>
 810dca4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 810dca8:	2202      	movs	r2, #2
 810dcaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810dcae:	2112      	movs	r1, #18
 810dcb0:	f7ff bf86 	b.w	810dbc0 <std>
 810dcb4:	10000a1c 	.word	0x10000a1c
 810dcb8:	100008e4 	.word	0x100008e4
 810dcbc:	0810dc2d 	.word	0x0810dc2d

0810dcc0 <__sfp_lock_acquire>:
 810dcc0:	4801      	ldr	r0, [pc, #4]	@ (810dcc8 <__sfp_lock_acquire+0x8>)
 810dcc2:	f000 ba24 	b.w	810e10e <__retarget_lock_acquire_recursive>
 810dcc6:	bf00      	nop
 810dcc8:	10000a25 	.word	0x10000a25

0810dccc <__sfp_lock_release>:
 810dccc:	4801      	ldr	r0, [pc, #4]	@ (810dcd4 <__sfp_lock_release+0x8>)
 810dcce:	f000 ba1f 	b.w	810e110 <__retarget_lock_release_recursive>
 810dcd2:	bf00      	nop
 810dcd4:	10000a25 	.word	0x10000a25

0810dcd8 <__sinit>:
 810dcd8:	b510      	push	{r4, lr}
 810dcda:	4604      	mov	r4, r0
 810dcdc:	f7ff fff0 	bl	810dcc0 <__sfp_lock_acquire>
 810dce0:	6a23      	ldr	r3, [r4, #32]
 810dce2:	b11b      	cbz	r3, 810dcec <__sinit+0x14>
 810dce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810dce8:	f7ff bff0 	b.w	810dccc <__sfp_lock_release>
 810dcec:	4b04      	ldr	r3, [pc, #16]	@ (810dd00 <__sinit+0x28>)
 810dcee:	6223      	str	r3, [r4, #32]
 810dcf0:	4b04      	ldr	r3, [pc, #16]	@ (810dd04 <__sinit+0x2c>)
 810dcf2:	681b      	ldr	r3, [r3, #0]
 810dcf4:	2b00      	cmp	r3, #0
 810dcf6:	d1f5      	bne.n	810dce4 <__sinit+0xc>
 810dcf8:	f7ff ffc4 	bl	810dc84 <global_stdio_init.part.0>
 810dcfc:	e7f2      	b.n	810dce4 <__sinit+0xc>
 810dcfe:	bf00      	nop
 810dd00:	0810dc45 	.word	0x0810dc45
 810dd04:	10000a1c 	.word	0x10000a1c

0810dd08 <_fwalk_sglue>:
 810dd08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810dd0c:	4607      	mov	r7, r0
 810dd0e:	4688      	mov	r8, r1
 810dd10:	4614      	mov	r4, r2
 810dd12:	2600      	movs	r6, #0
 810dd14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810dd18:	f1b9 0901 	subs.w	r9, r9, #1
 810dd1c:	d505      	bpl.n	810dd2a <_fwalk_sglue+0x22>
 810dd1e:	6824      	ldr	r4, [r4, #0]
 810dd20:	2c00      	cmp	r4, #0
 810dd22:	d1f7      	bne.n	810dd14 <_fwalk_sglue+0xc>
 810dd24:	4630      	mov	r0, r6
 810dd26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810dd2a:	89ab      	ldrh	r3, [r5, #12]
 810dd2c:	2b01      	cmp	r3, #1
 810dd2e:	d907      	bls.n	810dd40 <_fwalk_sglue+0x38>
 810dd30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810dd34:	3301      	adds	r3, #1
 810dd36:	d003      	beq.n	810dd40 <_fwalk_sglue+0x38>
 810dd38:	4629      	mov	r1, r5
 810dd3a:	4638      	mov	r0, r7
 810dd3c:	47c0      	blx	r8
 810dd3e:	4306      	orrs	r6, r0
 810dd40:	3568      	adds	r5, #104	@ 0x68
 810dd42:	e7e9      	b.n	810dd18 <_fwalk_sglue+0x10>

0810dd44 <iprintf>:
 810dd44:	b40f      	push	{r0, r1, r2, r3}
 810dd46:	b507      	push	{r0, r1, r2, lr}
 810dd48:	4906      	ldr	r1, [pc, #24]	@ (810dd64 <iprintf+0x20>)
 810dd4a:	ab04      	add	r3, sp, #16
 810dd4c:	6808      	ldr	r0, [r1, #0]
 810dd4e:	f853 2b04 	ldr.w	r2, [r3], #4
 810dd52:	6881      	ldr	r1, [r0, #8]
 810dd54:	9301      	str	r3, [sp, #4]
 810dd56:	f002 fe13 	bl	8110980 <_vfiprintf_r>
 810dd5a:	b003      	add	sp, #12
 810dd5c:	f85d eb04 	ldr.w	lr, [sp], #4
 810dd60:	b004      	add	sp, #16
 810dd62:	4770      	bx	lr
 810dd64:	100000a8 	.word	0x100000a8

0810dd68 <_puts_r>:
 810dd68:	6a03      	ldr	r3, [r0, #32]
 810dd6a:	b570      	push	{r4, r5, r6, lr}
 810dd6c:	6884      	ldr	r4, [r0, #8]
 810dd6e:	4605      	mov	r5, r0
 810dd70:	460e      	mov	r6, r1
 810dd72:	b90b      	cbnz	r3, 810dd78 <_puts_r+0x10>
 810dd74:	f7ff ffb0 	bl	810dcd8 <__sinit>
 810dd78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810dd7a:	07db      	lsls	r3, r3, #31
 810dd7c:	d405      	bmi.n	810dd8a <_puts_r+0x22>
 810dd7e:	89a3      	ldrh	r3, [r4, #12]
 810dd80:	0598      	lsls	r0, r3, #22
 810dd82:	d402      	bmi.n	810dd8a <_puts_r+0x22>
 810dd84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810dd86:	f000 f9c2 	bl	810e10e <__retarget_lock_acquire_recursive>
 810dd8a:	89a3      	ldrh	r3, [r4, #12]
 810dd8c:	0719      	lsls	r1, r3, #28
 810dd8e:	d502      	bpl.n	810dd96 <_puts_r+0x2e>
 810dd90:	6923      	ldr	r3, [r4, #16]
 810dd92:	2b00      	cmp	r3, #0
 810dd94:	d135      	bne.n	810de02 <_puts_r+0x9a>
 810dd96:	4621      	mov	r1, r4
 810dd98:	4628      	mov	r0, r5
 810dd9a:	f000 f8e5 	bl	810df68 <__swsetup_r>
 810dd9e:	b380      	cbz	r0, 810de02 <_puts_r+0x9a>
 810dda0:	f04f 35ff 	mov.w	r5, #4294967295
 810dda4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810dda6:	07da      	lsls	r2, r3, #31
 810dda8:	d405      	bmi.n	810ddb6 <_puts_r+0x4e>
 810ddaa:	89a3      	ldrh	r3, [r4, #12]
 810ddac:	059b      	lsls	r3, r3, #22
 810ddae:	d402      	bmi.n	810ddb6 <_puts_r+0x4e>
 810ddb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810ddb2:	f000 f9ad 	bl	810e110 <__retarget_lock_release_recursive>
 810ddb6:	4628      	mov	r0, r5
 810ddb8:	bd70      	pop	{r4, r5, r6, pc}
 810ddba:	2b00      	cmp	r3, #0
 810ddbc:	da04      	bge.n	810ddc8 <_puts_r+0x60>
 810ddbe:	69a2      	ldr	r2, [r4, #24]
 810ddc0:	429a      	cmp	r2, r3
 810ddc2:	dc17      	bgt.n	810ddf4 <_puts_r+0x8c>
 810ddc4:	290a      	cmp	r1, #10
 810ddc6:	d015      	beq.n	810ddf4 <_puts_r+0x8c>
 810ddc8:	6823      	ldr	r3, [r4, #0]
 810ddca:	1c5a      	adds	r2, r3, #1
 810ddcc:	6022      	str	r2, [r4, #0]
 810ddce:	7019      	strb	r1, [r3, #0]
 810ddd0:	68a3      	ldr	r3, [r4, #8]
 810ddd2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810ddd6:	3b01      	subs	r3, #1
 810ddd8:	60a3      	str	r3, [r4, #8]
 810ddda:	2900      	cmp	r1, #0
 810dddc:	d1ed      	bne.n	810ddba <_puts_r+0x52>
 810ddde:	2b00      	cmp	r3, #0
 810dde0:	da11      	bge.n	810de06 <_puts_r+0x9e>
 810dde2:	4622      	mov	r2, r4
 810dde4:	210a      	movs	r1, #10
 810dde6:	4628      	mov	r0, r5
 810dde8:	f000 f87f 	bl	810deea <__swbuf_r>
 810ddec:	3001      	adds	r0, #1
 810ddee:	d0d7      	beq.n	810dda0 <_puts_r+0x38>
 810ddf0:	250a      	movs	r5, #10
 810ddf2:	e7d7      	b.n	810dda4 <_puts_r+0x3c>
 810ddf4:	4622      	mov	r2, r4
 810ddf6:	4628      	mov	r0, r5
 810ddf8:	f000 f877 	bl	810deea <__swbuf_r>
 810ddfc:	3001      	adds	r0, #1
 810ddfe:	d1e7      	bne.n	810ddd0 <_puts_r+0x68>
 810de00:	e7ce      	b.n	810dda0 <_puts_r+0x38>
 810de02:	3e01      	subs	r6, #1
 810de04:	e7e4      	b.n	810ddd0 <_puts_r+0x68>
 810de06:	6823      	ldr	r3, [r4, #0]
 810de08:	1c5a      	adds	r2, r3, #1
 810de0a:	6022      	str	r2, [r4, #0]
 810de0c:	220a      	movs	r2, #10
 810de0e:	701a      	strb	r2, [r3, #0]
 810de10:	e7ee      	b.n	810ddf0 <_puts_r+0x88>
	...

0810de14 <puts>:
 810de14:	4b02      	ldr	r3, [pc, #8]	@ (810de20 <puts+0xc>)
 810de16:	4601      	mov	r1, r0
 810de18:	6818      	ldr	r0, [r3, #0]
 810de1a:	f7ff bfa5 	b.w	810dd68 <_puts_r>
 810de1e:	bf00      	nop
 810de20:	100000a8 	.word	0x100000a8

0810de24 <siprintf>:
 810de24:	b40e      	push	{r1, r2, r3}
 810de26:	b500      	push	{lr}
 810de28:	b09c      	sub	sp, #112	@ 0x70
 810de2a:	ab1d      	add	r3, sp, #116	@ 0x74
 810de2c:	9002      	str	r0, [sp, #8]
 810de2e:	9006      	str	r0, [sp, #24]
 810de30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 810de34:	4809      	ldr	r0, [pc, #36]	@ (810de5c <siprintf+0x38>)
 810de36:	9107      	str	r1, [sp, #28]
 810de38:	9104      	str	r1, [sp, #16]
 810de3a:	4909      	ldr	r1, [pc, #36]	@ (810de60 <siprintf+0x3c>)
 810de3c:	f853 2b04 	ldr.w	r2, [r3], #4
 810de40:	9105      	str	r1, [sp, #20]
 810de42:	6800      	ldr	r0, [r0, #0]
 810de44:	9301      	str	r3, [sp, #4]
 810de46:	a902      	add	r1, sp, #8
 810de48:	f002 fc74 	bl	8110734 <_svfiprintf_r>
 810de4c:	9b02      	ldr	r3, [sp, #8]
 810de4e:	2200      	movs	r2, #0
 810de50:	701a      	strb	r2, [r3, #0]
 810de52:	b01c      	add	sp, #112	@ 0x70
 810de54:	f85d eb04 	ldr.w	lr, [sp], #4
 810de58:	b003      	add	sp, #12
 810de5a:	4770      	bx	lr
 810de5c:	100000a8 	.word	0x100000a8
 810de60:	ffff0208 	.word	0xffff0208

0810de64 <__sread>:
 810de64:	b510      	push	{r4, lr}
 810de66:	460c      	mov	r4, r1
 810de68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810de6c:	f000 f900 	bl	810e070 <_read_r>
 810de70:	2800      	cmp	r0, #0
 810de72:	bfab      	itete	ge
 810de74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 810de76:	89a3      	ldrhlt	r3, [r4, #12]
 810de78:	181b      	addge	r3, r3, r0
 810de7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 810de7e:	bfac      	ite	ge
 810de80:	6563      	strge	r3, [r4, #84]	@ 0x54
 810de82:	81a3      	strhlt	r3, [r4, #12]
 810de84:	bd10      	pop	{r4, pc}

0810de86 <__swrite>:
 810de86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810de8a:	461f      	mov	r7, r3
 810de8c:	898b      	ldrh	r3, [r1, #12]
 810de8e:	05db      	lsls	r3, r3, #23
 810de90:	4605      	mov	r5, r0
 810de92:	460c      	mov	r4, r1
 810de94:	4616      	mov	r6, r2
 810de96:	d505      	bpl.n	810dea4 <__swrite+0x1e>
 810de98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810de9c:	2302      	movs	r3, #2
 810de9e:	2200      	movs	r2, #0
 810dea0:	f000 f8d4 	bl	810e04c <_lseek_r>
 810dea4:	89a3      	ldrh	r3, [r4, #12]
 810dea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810deaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810deae:	81a3      	strh	r3, [r4, #12]
 810deb0:	4632      	mov	r2, r6
 810deb2:	463b      	mov	r3, r7
 810deb4:	4628      	mov	r0, r5
 810deb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810deba:	f000 b8eb 	b.w	810e094 <_write_r>

0810debe <__sseek>:
 810debe:	b510      	push	{r4, lr}
 810dec0:	460c      	mov	r4, r1
 810dec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810dec6:	f000 f8c1 	bl	810e04c <_lseek_r>
 810deca:	1c43      	adds	r3, r0, #1
 810decc:	89a3      	ldrh	r3, [r4, #12]
 810dece:	bf15      	itete	ne
 810ded0:	6560      	strne	r0, [r4, #84]	@ 0x54
 810ded2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 810ded6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 810deda:	81a3      	strheq	r3, [r4, #12]
 810dedc:	bf18      	it	ne
 810dede:	81a3      	strhne	r3, [r4, #12]
 810dee0:	bd10      	pop	{r4, pc}

0810dee2 <__sclose>:
 810dee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810dee6:	f000 b8a1 	b.w	810e02c <_close_r>

0810deea <__swbuf_r>:
 810deea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810deec:	460e      	mov	r6, r1
 810deee:	4614      	mov	r4, r2
 810def0:	4605      	mov	r5, r0
 810def2:	b118      	cbz	r0, 810defc <__swbuf_r+0x12>
 810def4:	6a03      	ldr	r3, [r0, #32]
 810def6:	b90b      	cbnz	r3, 810defc <__swbuf_r+0x12>
 810def8:	f7ff feee 	bl	810dcd8 <__sinit>
 810defc:	69a3      	ldr	r3, [r4, #24]
 810defe:	60a3      	str	r3, [r4, #8]
 810df00:	89a3      	ldrh	r3, [r4, #12]
 810df02:	071a      	lsls	r2, r3, #28
 810df04:	d501      	bpl.n	810df0a <__swbuf_r+0x20>
 810df06:	6923      	ldr	r3, [r4, #16]
 810df08:	b943      	cbnz	r3, 810df1c <__swbuf_r+0x32>
 810df0a:	4621      	mov	r1, r4
 810df0c:	4628      	mov	r0, r5
 810df0e:	f000 f82b 	bl	810df68 <__swsetup_r>
 810df12:	b118      	cbz	r0, 810df1c <__swbuf_r+0x32>
 810df14:	f04f 37ff 	mov.w	r7, #4294967295
 810df18:	4638      	mov	r0, r7
 810df1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810df1c:	6823      	ldr	r3, [r4, #0]
 810df1e:	6922      	ldr	r2, [r4, #16]
 810df20:	1a98      	subs	r0, r3, r2
 810df22:	6963      	ldr	r3, [r4, #20]
 810df24:	b2f6      	uxtb	r6, r6
 810df26:	4283      	cmp	r3, r0
 810df28:	4637      	mov	r7, r6
 810df2a:	dc05      	bgt.n	810df38 <__swbuf_r+0x4e>
 810df2c:	4621      	mov	r1, r4
 810df2e:	4628      	mov	r0, r5
 810df30:	f002 fec2 	bl	8110cb8 <_fflush_r>
 810df34:	2800      	cmp	r0, #0
 810df36:	d1ed      	bne.n	810df14 <__swbuf_r+0x2a>
 810df38:	68a3      	ldr	r3, [r4, #8]
 810df3a:	3b01      	subs	r3, #1
 810df3c:	60a3      	str	r3, [r4, #8]
 810df3e:	6823      	ldr	r3, [r4, #0]
 810df40:	1c5a      	adds	r2, r3, #1
 810df42:	6022      	str	r2, [r4, #0]
 810df44:	701e      	strb	r6, [r3, #0]
 810df46:	6962      	ldr	r2, [r4, #20]
 810df48:	1c43      	adds	r3, r0, #1
 810df4a:	429a      	cmp	r2, r3
 810df4c:	d004      	beq.n	810df58 <__swbuf_r+0x6e>
 810df4e:	89a3      	ldrh	r3, [r4, #12]
 810df50:	07db      	lsls	r3, r3, #31
 810df52:	d5e1      	bpl.n	810df18 <__swbuf_r+0x2e>
 810df54:	2e0a      	cmp	r6, #10
 810df56:	d1df      	bne.n	810df18 <__swbuf_r+0x2e>
 810df58:	4621      	mov	r1, r4
 810df5a:	4628      	mov	r0, r5
 810df5c:	f002 feac 	bl	8110cb8 <_fflush_r>
 810df60:	2800      	cmp	r0, #0
 810df62:	d0d9      	beq.n	810df18 <__swbuf_r+0x2e>
 810df64:	e7d6      	b.n	810df14 <__swbuf_r+0x2a>
	...

0810df68 <__swsetup_r>:
 810df68:	b538      	push	{r3, r4, r5, lr}
 810df6a:	4b29      	ldr	r3, [pc, #164]	@ (810e010 <__swsetup_r+0xa8>)
 810df6c:	4605      	mov	r5, r0
 810df6e:	6818      	ldr	r0, [r3, #0]
 810df70:	460c      	mov	r4, r1
 810df72:	b118      	cbz	r0, 810df7c <__swsetup_r+0x14>
 810df74:	6a03      	ldr	r3, [r0, #32]
 810df76:	b90b      	cbnz	r3, 810df7c <__swsetup_r+0x14>
 810df78:	f7ff feae 	bl	810dcd8 <__sinit>
 810df7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810df80:	0719      	lsls	r1, r3, #28
 810df82:	d422      	bmi.n	810dfca <__swsetup_r+0x62>
 810df84:	06da      	lsls	r2, r3, #27
 810df86:	d407      	bmi.n	810df98 <__swsetup_r+0x30>
 810df88:	2209      	movs	r2, #9
 810df8a:	602a      	str	r2, [r5, #0]
 810df8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810df90:	81a3      	strh	r3, [r4, #12]
 810df92:	f04f 30ff 	mov.w	r0, #4294967295
 810df96:	e033      	b.n	810e000 <__swsetup_r+0x98>
 810df98:	0758      	lsls	r0, r3, #29
 810df9a:	d512      	bpl.n	810dfc2 <__swsetup_r+0x5a>
 810df9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810df9e:	b141      	cbz	r1, 810dfb2 <__swsetup_r+0x4a>
 810dfa0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810dfa4:	4299      	cmp	r1, r3
 810dfa6:	d002      	beq.n	810dfae <__swsetup_r+0x46>
 810dfa8:	4628      	mov	r0, r5
 810dfaa:	f000 ff31 	bl	810ee10 <_free_r>
 810dfae:	2300      	movs	r3, #0
 810dfb0:	6363      	str	r3, [r4, #52]	@ 0x34
 810dfb2:	89a3      	ldrh	r3, [r4, #12]
 810dfb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 810dfb8:	81a3      	strh	r3, [r4, #12]
 810dfba:	2300      	movs	r3, #0
 810dfbc:	6063      	str	r3, [r4, #4]
 810dfbe:	6923      	ldr	r3, [r4, #16]
 810dfc0:	6023      	str	r3, [r4, #0]
 810dfc2:	89a3      	ldrh	r3, [r4, #12]
 810dfc4:	f043 0308 	orr.w	r3, r3, #8
 810dfc8:	81a3      	strh	r3, [r4, #12]
 810dfca:	6923      	ldr	r3, [r4, #16]
 810dfcc:	b94b      	cbnz	r3, 810dfe2 <__swsetup_r+0x7a>
 810dfce:	89a3      	ldrh	r3, [r4, #12]
 810dfd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 810dfd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810dfd8:	d003      	beq.n	810dfe2 <__swsetup_r+0x7a>
 810dfda:	4621      	mov	r1, r4
 810dfdc:	4628      	mov	r0, r5
 810dfde:	f002 fecb 	bl	8110d78 <__smakebuf_r>
 810dfe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810dfe6:	f013 0201 	ands.w	r2, r3, #1
 810dfea:	d00a      	beq.n	810e002 <__swsetup_r+0x9a>
 810dfec:	2200      	movs	r2, #0
 810dfee:	60a2      	str	r2, [r4, #8]
 810dff0:	6962      	ldr	r2, [r4, #20]
 810dff2:	4252      	negs	r2, r2
 810dff4:	61a2      	str	r2, [r4, #24]
 810dff6:	6922      	ldr	r2, [r4, #16]
 810dff8:	b942      	cbnz	r2, 810e00c <__swsetup_r+0xa4>
 810dffa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 810dffe:	d1c5      	bne.n	810df8c <__swsetup_r+0x24>
 810e000:	bd38      	pop	{r3, r4, r5, pc}
 810e002:	0799      	lsls	r1, r3, #30
 810e004:	bf58      	it	pl
 810e006:	6962      	ldrpl	r2, [r4, #20]
 810e008:	60a2      	str	r2, [r4, #8]
 810e00a:	e7f4      	b.n	810dff6 <__swsetup_r+0x8e>
 810e00c:	2000      	movs	r0, #0
 810e00e:	e7f7      	b.n	810e000 <__swsetup_r+0x98>
 810e010:	100000a8 	.word	0x100000a8

0810e014 <memset>:
 810e014:	4402      	add	r2, r0
 810e016:	4603      	mov	r3, r0
 810e018:	4293      	cmp	r3, r2
 810e01a:	d100      	bne.n	810e01e <memset+0xa>
 810e01c:	4770      	bx	lr
 810e01e:	f803 1b01 	strb.w	r1, [r3], #1
 810e022:	e7f9      	b.n	810e018 <memset+0x4>

0810e024 <_localeconv_r>:
 810e024:	4800      	ldr	r0, [pc, #0]	@ (810e028 <_localeconv_r+0x4>)
 810e026:	4770      	bx	lr
 810e028:	100001e8 	.word	0x100001e8

0810e02c <_close_r>:
 810e02c:	b538      	push	{r3, r4, r5, lr}
 810e02e:	4d06      	ldr	r5, [pc, #24]	@ (810e048 <_close_r+0x1c>)
 810e030:	2300      	movs	r3, #0
 810e032:	4604      	mov	r4, r0
 810e034:	4608      	mov	r0, r1
 810e036:	602b      	str	r3, [r5, #0]
 810e038:	f7f5 fcba 	bl	81039b0 <_close>
 810e03c:	1c43      	adds	r3, r0, #1
 810e03e:	d102      	bne.n	810e046 <_close_r+0x1a>
 810e040:	682b      	ldr	r3, [r5, #0]
 810e042:	b103      	cbz	r3, 810e046 <_close_r+0x1a>
 810e044:	6023      	str	r3, [r4, #0]
 810e046:	bd38      	pop	{r3, r4, r5, pc}
 810e048:	10000a20 	.word	0x10000a20

0810e04c <_lseek_r>:
 810e04c:	b538      	push	{r3, r4, r5, lr}
 810e04e:	4d07      	ldr	r5, [pc, #28]	@ (810e06c <_lseek_r+0x20>)
 810e050:	4604      	mov	r4, r0
 810e052:	4608      	mov	r0, r1
 810e054:	4611      	mov	r1, r2
 810e056:	2200      	movs	r2, #0
 810e058:	602a      	str	r2, [r5, #0]
 810e05a:	461a      	mov	r2, r3
 810e05c:	f7f5 fccf 	bl	81039fe <_lseek>
 810e060:	1c43      	adds	r3, r0, #1
 810e062:	d102      	bne.n	810e06a <_lseek_r+0x1e>
 810e064:	682b      	ldr	r3, [r5, #0]
 810e066:	b103      	cbz	r3, 810e06a <_lseek_r+0x1e>
 810e068:	6023      	str	r3, [r4, #0]
 810e06a:	bd38      	pop	{r3, r4, r5, pc}
 810e06c:	10000a20 	.word	0x10000a20

0810e070 <_read_r>:
 810e070:	b538      	push	{r3, r4, r5, lr}
 810e072:	4d07      	ldr	r5, [pc, #28]	@ (810e090 <_read_r+0x20>)
 810e074:	4604      	mov	r4, r0
 810e076:	4608      	mov	r0, r1
 810e078:	4611      	mov	r1, r2
 810e07a:	2200      	movs	r2, #0
 810e07c:	602a      	str	r2, [r5, #0]
 810e07e:	461a      	mov	r2, r3
 810e080:	f7f5 fc5b 	bl	810393a <_read>
 810e084:	1c43      	adds	r3, r0, #1
 810e086:	d102      	bne.n	810e08e <_read_r+0x1e>
 810e088:	682b      	ldr	r3, [r5, #0]
 810e08a:	b103      	cbz	r3, 810e08e <_read_r+0x1e>
 810e08c:	6023      	str	r3, [r4, #0]
 810e08e:	bd38      	pop	{r3, r4, r5, pc}
 810e090:	10000a20 	.word	0x10000a20

0810e094 <_write_r>:
 810e094:	b538      	push	{r3, r4, r5, lr}
 810e096:	4d07      	ldr	r5, [pc, #28]	@ (810e0b4 <_write_r+0x20>)
 810e098:	4604      	mov	r4, r0
 810e09a:	4608      	mov	r0, r1
 810e09c:	4611      	mov	r1, r2
 810e09e:	2200      	movs	r2, #0
 810e0a0:	602a      	str	r2, [r5, #0]
 810e0a2:	461a      	mov	r2, r3
 810e0a4:	f7f5 fc68 	bl	8103978 <_write>
 810e0a8:	1c43      	adds	r3, r0, #1
 810e0aa:	d102      	bne.n	810e0b2 <_write_r+0x1e>
 810e0ac:	682b      	ldr	r3, [r5, #0]
 810e0ae:	b103      	cbz	r3, 810e0b2 <_write_r+0x1e>
 810e0b0:	6023      	str	r3, [r4, #0]
 810e0b2:	bd38      	pop	{r3, r4, r5, pc}
 810e0b4:	10000a20 	.word	0x10000a20

0810e0b8 <__errno>:
 810e0b8:	4b01      	ldr	r3, [pc, #4]	@ (810e0c0 <__errno+0x8>)
 810e0ba:	6818      	ldr	r0, [r3, #0]
 810e0bc:	4770      	bx	lr
 810e0be:	bf00      	nop
 810e0c0:	100000a8 	.word	0x100000a8

0810e0c4 <__libc_init_array>:
 810e0c4:	b570      	push	{r4, r5, r6, lr}
 810e0c6:	4d0d      	ldr	r5, [pc, #52]	@ (810e0fc <__libc_init_array+0x38>)
 810e0c8:	4c0d      	ldr	r4, [pc, #52]	@ (810e100 <__libc_init_array+0x3c>)
 810e0ca:	1b64      	subs	r4, r4, r5
 810e0cc:	10a4      	asrs	r4, r4, #2
 810e0ce:	2600      	movs	r6, #0
 810e0d0:	42a6      	cmp	r6, r4
 810e0d2:	d109      	bne.n	810e0e8 <__libc_init_array+0x24>
 810e0d4:	4d0b      	ldr	r5, [pc, #44]	@ (810e104 <__libc_init_array+0x40>)
 810e0d6:	4c0c      	ldr	r4, [pc, #48]	@ (810e108 <__libc_init_array+0x44>)
 810e0d8:	f003 fade 	bl	8111698 <_init>
 810e0dc:	1b64      	subs	r4, r4, r5
 810e0de:	10a4      	asrs	r4, r4, #2
 810e0e0:	2600      	movs	r6, #0
 810e0e2:	42a6      	cmp	r6, r4
 810e0e4:	d105      	bne.n	810e0f2 <__libc_init_array+0x2e>
 810e0e6:	bd70      	pop	{r4, r5, r6, pc}
 810e0e8:	f855 3b04 	ldr.w	r3, [r5], #4
 810e0ec:	4798      	blx	r3
 810e0ee:	3601      	adds	r6, #1
 810e0f0:	e7ee      	b.n	810e0d0 <__libc_init_array+0xc>
 810e0f2:	f855 3b04 	ldr.w	r3, [r5], #4
 810e0f6:	4798      	blx	r3
 810e0f8:	3601      	adds	r6, #1
 810e0fa:	e7f2      	b.n	810e0e2 <__libc_init_array+0x1e>
 810e0fc:	08111ba4 	.word	0x08111ba4
 810e100:	08111ba4 	.word	0x08111ba4
 810e104:	08111ba4 	.word	0x08111ba4
 810e108:	08111ba8 	.word	0x08111ba8

0810e10c <__retarget_lock_init_recursive>:
 810e10c:	4770      	bx	lr

0810e10e <__retarget_lock_acquire_recursive>:
 810e10e:	4770      	bx	lr

0810e110 <__retarget_lock_release_recursive>:
 810e110:	4770      	bx	lr

0810e112 <memcpy>:
 810e112:	440a      	add	r2, r1
 810e114:	4291      	cmp	r1, r2
 810e116:	f100 33ff 	add.w	r3, r0, #4294967295
 810e11a:	d100      	bne.n	810e11e <memcpy+0xc>
 810e11c:	4770      	bx	lr
 810e11e:	b510      	push	{r4, lr}
 810e120:	f811 4b01 	ldrb.w	r4, [r1], #1
 810e124:	f803 4f01 	strb.w	r4, [r3, #1]!
 810e128:	4291      	cmp	r1, r2
 810e12a:	d1f9      	bne.n	810e120 <memcpy+0xe>
 810e12c:	bd10      	pop	{r4, pc}
	...

0810e130 <nanf>:
 810e130:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 810e138 <nanf+0x8>
 810e134:	4770      	bx	lr
 810e136:	bf00      	nop
 810e138:	7fc00000 	.word	0x7fc00000

0810e13c <__assert_func>:
 810e13c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810e13e:	4614      	mov	r4, r2
 810e140:	461a      	mov	r2, r3
 810e142:	4b09      	ldr	r3, [pc, #36]	@ (810e168 <__assert_func+0x2c>)
 810e144:	681b      	ldr	r3, [r3, #0]
 810e146:	4605      	mov	r5, r0
 810e148:	68d8      	ldr	r0, [r3, #12]
 810e14a:	b954      	cbnz	r4, 810e162 <__assert_func+0x26>
 810e14c:	4b07      	ldr	r3, [pc, #28]	@ (810e16c <__assert_func+0x30>)
 810e14e:	461c      	mov	r4, r3
 810e150:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810e154:	9100      	str	r1, [sp, #0]
 810e156:	462b      	mov	r3, r5
 810e158:	4905      	ldr	r1, [pc, #20]	@ (810e170 <__assert_func+0x34>)
 810e15a:	f002 fdd5 	bl	8110d08 <fiprintf>
 810e15e:	f002 feaf 	bl	8110ec0 <abort>
 810e162:	4b04      	ldr	r3, [pc, #16]	@ (810e174 <__assert_func+0x38>)
 810e164:	e7f4      	b.n	810e150 <__assert_func+0x14>
 810e166:	bf00      	nop
 810e168:	100000a8 	.word	0x100000a8
 810e16c:	081117fb 	.word	0x081117fb
 810e170:	081117cd 	.word	0x081117cd
 810e174:	081117c0 	.word	0x081117c0

0810e178 <quorem>:
 810e178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e17c:	6903      	ldr	r3, [r0, #16]
 810e17e:	690c      	ldr	r4, [r1, #16]
 810e180:	42a3      	cmp	r3, r4
 810e182:	4607      	mov	r7, r0
 810e184:	db7e      	blt.n	810e284 <quorem+0x10c>
 810e186:	3c01      	subs	r4, #1
 810e188:	f101 0814 	add.w	r8, r1, #20
 810e18c:	00a3      	lsls	r3, r4, #2
 810e18e:	f100 0514 	add.w	r5, r0, #20
 810e192:	9300      	str	r3, [sp, #0]
 810e194:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810e198:	9301      	str	r3, [sp, #4]
 810e19a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810e19e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810e1a2:	3301      	adds	r3, #1
 810e1a4:	429a      	cmp	r2, r3
 810e1a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810e1aa:	fbb2 f6f3 	udiv	r6, r2, r3
 810e1ae:	d32e      	bcc.n	810e20e <quorem+0x96>
 810e1b0:	f04f 0a00 	mov.w	sl, #0
 810e1b4:	46c4      	mov	ip, r8
 810e1b6:	46ae      	mov	lr, r5
 810e1b8:	46d3      	mov	fp, sl
 810e1ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 810e1be:	b298      	uxth	r0, r3
 810e1c0:	fb06 a000 	mla	r0, r6, r0, sl
 810e1c4:	0c02      	lsrs	r2, r0, #16
 810e1c6:	0c1b      	lsrs	r3, r3, #16
 810e1c8:	fb06 2303 	mla	r3, r6, r3, r2
 810e1cc:	f8de 2000 	ldr.w	r2, [lr]
 810e1d0:	b280      	uxth	r0, r0
 810e1d2:	b292      	uxth	r2, r2
 810e1d4:	1a12      	subs	r2, r2, r0
 810e1d6:	445a      	add	r2, fp
 810e1d8:	f8de 0000 	ldr.w	r0, [lr]
 810e1dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810e1e0:	b29b      	uxth	r3, r3
 810e1e2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 810e1e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 810e1ea:	b292      	uxth	r2, r2
 810e1ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 810e1f0:	45e1      	cmp	r9, ip
 810e1f2:	f84e 2b04 	str.w	r2, [lr], #4
 810e1f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 810e1fa:	d2de      	bcs.n	810e1ba <quorem+0x42>
 810e1fc:	9b00      	ldr	r3, [sp, #0]
 810e1fe:	58eb      	ldr	r3, [r5, r3]
 810e200:	b92b      	cbnz	r3, 810e20e <quorem+0x96>
 810e202:	9b01      	ldr	r3, [sp, #4]
 810e204:	3b04      	subs	r3, #4
 810e206:	429d      	cmp	r5, r3
 810e208:	461a      	mov	r2, r3
 810e20a:	d32f      	bcc.n	810e26c <quorem+0xf4>
 810e20c:	613c      	str	r4, [r7, #16]
 810e20e:	4638      	mov	r0, r7
 810e210:	f001 f9c2 	bl	810f598 <__mcmp>
 810e214:	2800      	cmp	r0, #0
 810e216:	db25      	blt.n	810e264 <quorem+0xec>
 810e218:	4629      	mov	r1, r5
 810e21a:	2000      	movs	r0, #0
 810e21c:	f858 2b04 	ldr.w	r2, [r8], #4
 810e220:	f8d1 c000 	ldr.w	ip, [r1]
 810e224:	fa1f fe82 	uxth.w	lr, r2
 810e228:	fa1f f38c 	uxth.w	r3, ip
 810e22c:	eba3 030e 	sub.w	r3, r3, lr
 810e230:	4403      	add	r3, r0
 810e232:	0c12      	lsrs	r2, r2, #16
 810e234:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 810e238:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 810e23c:	b29b      	uxth	r3, r3
 810e23e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810e242:	45c1      	cmp	r9, r8
 810e244:	f841 3b04 	str.w	r3, [r1], #4
 810e248:	ea4f 4022 	mov.w	r0, r2, asr #16
 810e24c:	d2e6      	bcs.n	810e21c <quorem+0xa4>
 810e24e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810e252:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810e256:	b922      	cbnz	r2, 810e262 <quorem+0xea>
 810e258:	3b04      	subs	r3, #4
 810e25a:	429d      	cmp	r5, r3
 810e25c:	461a      	mov	r2, r3
 810e25e:	d30b      	bcc.n	810e278 <quorem+0x100>
 810e260:	613c      	str	r4, [r7, #16]
 810e262:	3601      	adds	r6, #1
 810e264:	4630      	mov	r0, r6
 810e266:	b003      	add	sp, #12
 810e268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e26c:	6812      	ldr	r2, [r2, #0]
 810e26e:	3b04      	subs	r3, #4
 810e270:	2a00      	cmp	r2, #0
 810e272:	d1cb      	bne.n	810e20c <quorem+0x94>
 810e274:	3c01      	subs	r4, #1
 810e276:	e7c6      	b.n	810e206 <quorem+0x8e>
 810e278:	6812      	ldr	r2, [r2, #0]
 810e27a:	3b04      	subs	r3, #4
 810e27c:	2a00      	cmp	r2, #0
 810e27e:	d1ef      	bne.n	810e260 <quorem+0xe8>
 810e280:	3c01      	subs	r4, #1
 810e282:	e7ea      	b.n	810e25a <quorem+0xe2>
 810e284:	2000      	movs	r0, #0
 810e286:	e7ee      	b.n	810e266 <quorem+0xee>

0810e288 <_dtoa_r>:
 810e288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e28c:	69c7      	ldr	r7, [r0, #28]
 810e28e:	b099      	sub	sp, #100	@ 0x64
 810e290:	ed8d 0b02 	vstr	d0, [sp, #8]
 810e294:	ec55 4b10 	vmov	r4, r5, d0
 810e298:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 810e29a:	9109      	str	r1, [sp, #36]	@ 0x24
 810e29c:	4683      	mov	fp, r0
 810e29e:	920e      	str	r2, [sp, #56]	@ 0x38
 810e2a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 810e2a2:	b97f      	cbnz	r7, 810e2c4 <_dtoa_r+0x3c>
 810e2a4:	2010      	movs	r0, #16
 810e2a6:	f000 fdfd 	bl	810eea4 <malloc>
 810e2aa:	4602      	mov	r2, r0
 810e2ac:	f8cb 001c 	str.w	r0, [fp, #28]
 810e2b0:	b920      	cbnz	r0, 810e2bc <_dtoa_r+0x34>
 810e2b2:	4ba7      	ldr	r3, [pc, #668]	@ (810e550 <_dtoa_r+0x2c8>)
 810e2b4:	21ef      	movs	r1, #239	@ 0xef
 810e2b6:	48a7      	ldr	r0, [pc, #668]	@ (810e554 <_dtoa_r+0x2cc>)
 810e2b8:	f7ff ff40 	bl	810e13c <__assert_func>
 810e2bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 810e2c0:	6007      	str	r7, [r0, #0]
 810e2c2:	60c7      	str	r7, [r0, #12]
 810e2c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 810e2c8:	6819      	ldr	r1, [r3, #0]
 810e2ca:	b159      	cbz	r1, 810e2e4 <_dtoa_r+0x5c>
 810e2cc:	685a      	ldr	r2, [r3, #4]
 810e2ce:	604a      	str	r2, [r1, #4]
 810e2d0:	2301      	movs	r3, #1
 810e2d2:	4093      	lsls	r3, r2
 810e2d4:	608b      	str	r3, [r1, #8]
 810e2d6:	4658      	mov	r0, fp
 810e2d8:	f000 feda 	bl	810f090 <_Bfree>
 810e2dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 810e2e0:	2200      	movs	r2, #0
 810e2e2:	601a      	str	r2, [r3, #0]
 810e2e4:	1e2b      	subs	r3, r5, #0
 810e2e6:	bfb9      	ittee	lt
 810e2e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 810e2ec:	9303      	strlt	r3, [sp, #12]
 810e2ee:	2300      	movge	r3, #0
 810e2f0:	6033      	strge	r3, [r6, #0]
 810e2f2:	9f03      	ldr	r7, [sp, #12]
 810e2f4:	4b98      	ldr	r3, [pc, #608]	@ (810e558 <_dtoa_r+0x2d0>)
 810e2f6:	bfbc      	itt	lt
 810e2f8:	2201      	movlt	r2, #1
 810e2fa:	6032      	strlt	r2, [r6, #0]
 810e2fc:	43bb      	bics	r3, r7
 810e2fe:	d112      	bne.n	810e326 <_dtoa_r+0x9e>
 810e300:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 810e302:	f242 730f 	movw	r3, #9999	@ 0x270f
 810e306:	6013      	str	r3, [r2, #0]
 810e308:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810e30c:	4323      	orrs	r3, r4
 810e30e:	f000 854d 	beq.w	810edac <_dtoa_r+0xb24>
 810e312:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810e314:	f8df a254 	ldr.w	sl, [pc, #596]	@ 810e56c <_dtoa_r+0x2e4>
 810e318:	2b00      	cmp	r3, #0
 810e31a:	f000 854f 	beq.w	810edbc <_dtoa_r+0xb34>
 810e31e:	f10a 0303 	add.w	r3, sl, #3
 810e322:	f000 bd49 	b.w	810edb8 <_dtoa_r+0xb30>
 810e326:	ed9d 7b02 	vldr	d7, [sp, #8]
 810e32a:	2200      	movs	r2, #0
 810e32c:	ec51 0b17 	vmov	r0, r1, d7
 810e330:	2300      	movs	r3, #0
 810e332:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 810e336:	f7f2 fc4f 	bl	8100bd8 <__aeabi_dcmpeq>
 810e33a:	4680      	mov	r8, r0
 810e33c:	b158      	cbz	r0, 810e356 <_dtoa_r+0xce>
 810e33e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 810e340:	2301      	movs	r3, #1
 810e342:	6013      	str	r3, [r2, #0]
 810e344:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810e346:	b113      	cbz	r3, 810e34e <_dtoa_r+0xc6>
 810e348:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 810e34a:	4b84      	ldr	r3, [pc, #528]	@ (810e55c <_dtoa_r+0x2d4>)
 810e34c:	6013      	str	r3, [r2, #0]
 810e34e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 810e570 <_dtoa_r+0x2e8>
 810e352:	f000 bd33 	b.w	810edbc <_dtoa_r+0xb34>
 810e356:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 810e35a:	aa16      	add	r2, sp, #88	@ 0x58
 810e35c:	a917      	add	r1, sp, #92	@ 0x5c
 810e35e:	4658      	mov	r0, fp
 810e360:	f001 fa3a 	bl	810f7d8 <__d2b>
 810e364:	f3c7 560a 	ubfx	r6, r7, #20, #11
 810e368:	4681      	mov	r9, r0
 810e36a:	2e00      	cmp	r6, #0
 810e36c:	d077      	beq.n	810e45e <_dtoa_r+0x1d6>
 810e36e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810e370:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 810e374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810e378:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810e37c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 810e380:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 810e384:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 810e388:	4619      	mov	r1, r3
 810e38a:	2200      	movs	r2, #0
 810e38c:	4b74      	ldr	r3, [pc, #464]	@ (810e560 <_dtoa_r+0x2d8>)
 810e38e:	f7f2 f803 	bl	8100398 <__aeabi_dsub>
 810e392:	a369      	add	r3, pc, #420	@ (adr r3, 810e538 <_dtoa_r+0x2b0>)
 810e394:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e398:	f7f2 f9b6 	bl	8100708 <__aeabi_dmul>
 810e39c:	a368      	add	r3, pc, #416	@ (adr r3, 810e540 <_dtoa_r+0x2b8>)
 810e39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e3a2:	f7f1 fffb 	bl	810039c <__adddf3>
 810e3a6:	4604      	mov	r4, r0
 810e3a8:	4630      	mov	r0, r6
 810e3aa:	460d      	mov	r5, r1
 810e3ac:	f7f2 f942 	bl	8100634 <__aeabi_i2d>
 810e3b0:	a365      	add	r3, pc, #404	@ (adr r3, 810e548 <_dtoa_r+0x2c0>)
 810e3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e3b6:	f7f2 f9a7 	bl	8100708 <__aeabi_dmul>
 810e3ba:	4602      	mov	r2, r0
 810e3bc:	460b      	mov	r3, r1
 810e3be:	4620      	mov	r0, r4
 810e3c0:	4629      	mov	r1, r5
 810e3c2:	f7f1 ffeb 	bl	810039c <__adddf3>
 810e3c6:	4604      	mov	r4, r0
 810e3c8:	460d      	mov	r5, r1
 810e3ca:	f7f2 fc4d 	bl	8100c68 <__aeabi_d2iz>
 810e3ce:	2200      	movs	r2, #0
 810e3d0:	4607      	mov	r7, r0
 810e3d2:	2300      	movs	r3, #0
 810e3d4:	4620      	mov	r0, r4
 810e3d6:	4629      	mov	r1, r5
 810e3d8:	f7f2 fc08 	bl	8100bec <__aeabi_dcmplt>
 810e3dc:	b140      	cbz	r0, 810e3f0 <_dtoa_r+0x168>
 810e3de:	4638      	mov	r0, r7
 810e3e0:	f7f2 f928 	bl	8100634 <__aeabi_i2d>
 810e3e4:	4622      	mov	r2, r4
 810e3e6:	462b      	mov	r3, r5
 810e3e8:	f7f2 fbf6 	bl	8100bd8 <__aeabi_dcmpeq>
 810e3ec:	b900      	cbnz	r0, 810e3f0 <_dtoa_r+0x168>
 810e3ee:	3f01      	subs	r7, #1
 810e3f0:	2f16      	cmp	r7, #22
 810e3f2:	d851      	bhi.n	810e498 <_dtoa_r+0x210>
 810e3f4:	4b5b      	ldr	r3, [pc, #364]	@ (810e564 <_dtoa_r+0x2dc>)
 810e3f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810e3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e3fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810e402:	f7f2 fbf3 	bl	8100bec <__aeabi_dcmplt>
 810e406:	2800      	cmp	r0, #0
 810e408:	d048      	beq.n	810e49c <_dtoa_r+0x214>
 810e40a:	3f01      	subs	r7, #1
 810e40c:	2300      	movs	r3, #0
 810e40e:	9312      	str	r3, [sp, #72]	@ 0x48
 810e410:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810e412:	1b9b      	subs	r3, r3, r6
 810e414:	1e5a      	subs	r2, r3, #1
 810e416:	bf44      	itt	mi
 810e418:	f1c3 0801 	rsbmi	r8, r3, #1
 810e41c:	2300      	movmi	r3, #0
 810e41e:	9208      	str	r2, [sp, #32]
 810e420:	bf54      	ite	pl
 810e422:	f04f 0800 	movpl.w	r8, #0
 810e426:	9308      	strmi	r3, [sp, #32]
 810e428:	2f00      	cmp	r7, #0
 810e42a:	db39      	blt.n	810e4a0 <_dtoa_r+0x218>
 810e42c:	9b08      	ldr	r3, [sp, #32]
 810e42e:	970f      	str	r7, [sp, #60]	@ 0x3c
 810e430:	443b      	add	r3, r7
 810e432:	9308      	str	r3, [sp, #32]
 810e434:	2300      	movs	r3, #0
 810e436:	930a      	str	r3, [sp, #40]	@ 0x28
 810e438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810e43a:	2b09      	cmp	r3, #9
 810e43c:	d864      	bhi.n	810e508 <_dtoa_r+0x280>
 810e43e:	2b05      	cmp	r3, #5
 810e440:	bfc4      	itt	gt
 810e442:	3b04      	subgt	r3, #4
 810e444:	9309      	strgt	r3, [sp, #36]	@ 0x24
 810e446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810e448:	f1a3 0302 	sub.w	r3, r3, #2
 810e44c:	bfcc      	ite	gt
 810e44e:	2400      	movgt	r4, #0
 810e450:	2401      	movle	r4, #1
 810e452:	2b03      	cmp	r3, #3
 810e454:	d863      	bhi.n	810e51e <_dtoa_r+0x296>
 810e456:	e8df f003 	tbb	[pc, r3]
 810e45a:	372a      	.short	0x372a
 810e45c:	5535      	.short	0x5535
 810e45e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 810e462:	441e      	add	r6, r3
 810e464:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 810e468:	2b20      	cmp	r3, #32
 810e46a:	bfc1      	itttt	gt
 810e46c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 810e470:	409f      	lslgt	r7, r3
 810e472:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 810e476:	fa24 f303 	lsrgt.w	r3, r4, r3
 810e47a:	bfd6      	itet	le
 810e47c:	f1c3 0320 	rsble	r3, r3, #32
 810e480:	ea47 0003 	orrgt.w	r0, r7, r3
 810e484:	fa04 f003 	lslle.w	r0, r4, r3
 810e488:	f7f2 f8c4 	bl	8100614 <__aeabi_ui2d>
 810e48c:	2201      	movs	r2, #1
 810e48e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 810e492:	3e01      	subs	r6, #1
 810e494:	9214      	str	r2, [sp, #80]	@ 0x50
 810e496:	e777      	b.n	810e388 <_dtoa_r+0x100>
 810e498:	2301      	movs	r3, #1
 810e49a:	e7b8      	b.n	810e40e <_dtoa_r+0x186>
 810e49c:	9012      	str	r0, [sp, #72]	@ 0x48
 810e49e:	e7b7      	b.n	810e410 <_dtoa_r+0x188>
 810e4a0:	427b      	negs	r3, r7
 810e4a2:	930a      	str	r3, [sp, #40]	@ 0x28
 810e4a4:	2300      	movs	r3, #0
 810e4a6:	eba8 0807 	sub.w	r8, r8, r7
 810e4aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 810e4ac:	e7c4      	b.n	810e438 <_dtoa_r+0x1b0>
 810e4ae:	2300      	movs	r3, #0
 810e4b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 810e4b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810e4b4:	2b00      	cmp	r3, #0
 810e4b6:	dc35      	bgt.n	810e524 <_dtoa_r+0x29c>
 810e4b8:	2301      	movs	r3, #1
 810e4ba:	9300      	str	r3, [sp, #0]
 810e4bc:	9307      	str	r3, [sp, #28]
 810e4be:	461a      	mov	r2, r3
 810e4c0:	920e      	str	r2, [sp, #56]	@ 0x38
 810e4c2:	e00b      	b.n	810e4dc <_dtoa_r+0x254>
 810e4c4:	2301      	movs	r3, #1
 810e4c6:	e7f3      	b.n	810e4b0 <_dtoa_r+0x228>
 810e4c8:	2300      	movs	r3, #0
 810e4ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 810e4cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810e4ce:	18fb      	adds	r3, r7, r3
 810e4d0:	9300      	str	r3, [sp, #0]
 810e4d2:	3301      	adds	r3, #1
 810e4d4:	2b01      	cmp	r3, #1
 810e4d6:	9307      	str	r3, [sp, #28]
 810e4d8:	bfb8      	it	lt
 810e4da:	2301      	movlt	r3, #1
 810e4dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 810e4e0:	2100      	movs	r1, #0
 810e4e2:	2204      	movs	r2, #4
 810e4e4:	f102 0514 	add.w	r5, r2, #20
 810e4e8:	429d      	cmp	r5, r3
 810e4ea:	d91f      	bls.n	810e52c <_dtoa_r+0x2a4>
 810e4ec:	6041      	str	r1, [r0, #4]
 810e4ee:	4658      	mov	r0, fp
 810e4f0:	f000 fd8e 	bl	810f010 <_Balloc>
 810e4f4:	4682      	mov	sl, r0
 810e4f6:	2800      	cmp	r0, #0
 810e4f8:	d13c      	bne.n	810e574 <_dtoa_r+0x2ec>
 810e4fa:	4b1b      	ldr	r3, [pc, #108]	@ (810e568 <_dtoa_r+0x2e0>)
 810e4fc:	4602      	mov	r2, r0
 810e4fe:	f240 11af 	movw	r1, #431	@ 0x1af
 810e502:	e6d8      	b.n	810e2b6 <_dtoa_r+0x2e>
 810e504:	2301      	movs	r3, #1
 810e506:	e7e0      	b.n	810e4ca <_dtoa_r+0x242>
 810e508:	2401      	movs	r4, #1
 810e50a:	2300      	movs	r3, #0
 810e50c:	9309      	str	r3, [sp, #36]	@ 0x24
 810e50e:	940b      	str	r4, [sp, #44]	@ 0x2c
 810e510:	f04f 33ff 	mov.w	r3, #4294967295
 810e514:	9300      	str	r3, [sp, #0]
 810e516:	9307      	str	r3, [sp, #28]
 810e518:	2200      	movs	r2, #0
 810e51a:	2312      	movs	r3, #18
 810e51c:	e7d0      	b.n	810e4c0 <_dtoa_r+0x238>
 810e51e:	2301      	movs	r3, #1
 810e520:	930b      	str	r3, [sp, #44]	@ 0x2c
 810e522:	e7f5      	b.n	810e510 <_dtoa_r+0x288>
 810e524:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810e526:	9300      	str	r3, [sp, #0]
 810e528:	9307      	str	r3, [sp, #28]
 810e52a:	e7d7      	b.n	810e4dc <_dtoa_r+0x254>
 810e52c:	3101      	adds	r1, #1
 810e52e:	0052      	lsls	r2, r2, #1
 810e530:	e7d8      	b.n	810e4e4 <_dtoa_r+0x25c>
 810e532:	bf00      	nop
 810e534:	f3af 8000 	nop.w
 810e538:	636f4361 	.word	0x636f4361
 810e53c:	3fd287a7 	.word	0x3fd287a7
 810e540:	8b60c8b3 	.word	0x8b60c8b3
 810e544:	3fc68a28 	.word	0x3fc68a28
 810e548:	509f79fb 	.word	0x509f79fb
 810e54c:	3fd34413 	.word	0x3fd34413
 810e550:	08111718 	.word	0x08111718
 810e554:	08111809 	.word	0x08111809
 810e558:	7ff00000 	.word	0x7ff00000
 810e55c:	08111798 	.word	0x08111798
 810e560:	3ff80000 	.word	0x3ff80000
 810e564:	08111900 	.word	0x08111900
 810e568:	08111861 	.word	0x08111861
 810e56c:	08111805 	.word	0x08111805
 810e570:	08111797 	.word	0x08111797
 810e574:	f8db 301c 	ldr.w	r3, [fp, #28]
 810e578:	6018      	str	r0, [r3, #0]
 810e57a:	9b07      	ldr	r3, [sp, #28]
 810e57c:	2b0e      	cmp	r3, #14
 810e57e:	f200 80a4 	bhi.w	810e6ca <_dtoa_r+0x442>
 810e582:	2c00      	cmp	r4, #0
 810e584:	f000 80a1 	beq.w	810e6ca <_dtoa_r+0x442>
 810e588:	2f00      	cmp	r7, #0
 810e58a:	dd33      	ble.n	810e5f4 <_dtoa_r+0x36c>
 810e58c:	4bad      	ldr	r3, [pc, #692]	@ (810e844 <_dtoa_r+0x5bc>)
 810e58e:	f007 020f 	and.w	r2, r7, #15
 810e592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810e596:	ed93 7b00 	vldr	d7, [r3]
 810e59a:	05f8      	lsls	r0, r7, #23
 810e59c:	ed8d 7b04 	vstr	d7, [sp, #16]
 810e5a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 810e5a4:	d516      	bpl.n	810e5d4 <_dtoa_r+0x34c>
 810e5a6:	4ba8      	ldr	r3, [pc, #672]	@ (810e848 <_dtoa_r+0x5c0>)
 810e5a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810e5ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810e5b0:	f7f2 f9d4 	bl	810095c <__aeabi_ddiv>
 810e5b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810e5b8:	f004 040f 	and.w	r4, r4, #15
 810e5bc:	2603      	movs	r6, #3
 810e5be:	4da2      	ldr	r5, [pc, #648]	@ (810e848 <_dtoa_r+0x5c0>)
 810e5c0:	b954      	cbnz	r4, 810e5d8 <_dtoa_r+0x350>
 810e5c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810e5c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e5ca:	f7f2 f9c7 	bl	810095c <__aeabi_ddiv>
 810e5ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810e5d2:	e028      	b.n	810e626 <_dtoa_r+0x39e>
 810e5d4:	2602      	movs	r6, #2
 810e5d6:	e7f2      	b.n	810e5be <_dtoa_r+0x336>
 810e5d8:	07e1      	lsls	r1, r4, #31
 810e5da:	d508      	bpl.n	810e5ee <_dtoa_r+0x366>
 810e5dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810e5e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 810e5e4:	f7f2 f890 	bl	8100708 <__aeabi_dmul>
 810e5e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810e5ec:	3601      	adds	r6, #1
 810e5ee:	1064      	asrs	r4, r4, #1
 810e5f0:	3508      	adds	r5, #8
 810e5f2:	e7e5      	b.n	810e5c0 <_dtoa_r+0x338>
 810e5f4:	f000 80d2 	beq.w	810e79c <_dtoa_r+0x514>
 810e5f8:	427c      	negs	r4, r7
 810e5fa:	4b92      	ldr	r3, [pc, #584]	@ (810e844 <_dtoa_r+0x5bc>)
 810e5fc:	4d92      	ldr	r5, [pc, #584]	@ (810e848 <_dtoa_r+0x5c0>)
 810e5fe:	f004 020f 	and.w	r2, r4, #15
 810e602:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810e606:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e60a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810e60e:	f7f2 f87b 	bl	8100708 <__aeabi_dmul>
 810e612:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810e616:	1124      	asrs	r4, r4, #4
 810e618:	2300      	movs	r3, #0
 810e61a:	2602      	movs	r6, #2
 810e61c:	2c00      	cmp	r4, #0
 810e61e:	f040 80b2 	bne.w	810e786 <_dtoa_r+0x4fe>
 810e622:	2b00      	cmp	r3, #0
 810e624:	d1d3      	bne.n	810e5ce <_dtoa_r+0x346>
 810e626:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810e628:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 810e62c:	2b00      	cmp	r3, #0
 810e62e:	f000 80b7 	beq.w	810e7a0 <_dtoa_r+0x518>
 810e632:	4b86      	ldr	r3, [pc, #536]	@ (810e84c <_dtoa_r+0x5c4>)
 810e634:	2200      	movs	r2, #0
 810e636:	4620      	mov	r0, r4
 810e638:	4629      	mov	r1, r5
 810e63a:	f7f2 fad7 	bl	8100bec <__aeabi_dcmplt>
 810e63e:	2800      	cmp	r0, #0
 810e640:	f000 80ae 	beq.w	810e7a0 <_dtoa_r+0x518>
 810e644:	9b07      	ldr	r3, [sp, #28]
 810e646:	2b00      	cmp	r3, #0
 810e648:	f000 80aa 	beq.w	810e7a0 <_dtoa_r+0x518>
 810e64c:	9b00      	ldr	r3, [sp, #0]
 810e64e:	2b00      	cmp	r3, #0
 810e650:	dd37      	ble.n	810e6c2 <_dtoa_r+0x43a>
 810e652:	1e7b      	subs	r3, r7, #1
 810e654:	9304      	str	r3, [sp, #16]
 810e656:	4620      	mov	r0, r4
 810e658:	4b7d      	ldr	r3, [pc, #500]	@ (810e850 <_dtoa_r+0x5c8>)
 810e65a:	2200      	movs	r2, #0
 810e65c:	4629      	mov	r1, r5
 810e65e:	f7f2 f853 	bl	8100708 <__aeabi_dmul>
 810e662:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810e666:	9c00      	ldr	r4, [sp, #0]
 810e668:	3601      	adds	r6, #1
 810e66a:	4630      	mov	r0, r6
 810e66c:	f7f1 ffe2 	bl	8100634 <__aeabi_i2d>
 810e670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810e674:	f7f2 f848 	bl	8100708 <__aeabi_dmul>
 810e678:	4b76      	ldr	r3, [pc, #472]	@ (810e854 <_dtoa_r+0x5cc>)
 810e67a:	2200      	movs	r2, #0
 810e67c:	f7f1 fe8e 	bl	810039c <__adddf3>
 810e680:	4605      	mov	r5, r0
 810e682:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 810e686:	2c00      	cmp	r4, #0
 810e688:	f040 808d 	bne.w	810e7a6 <_dtoa_r+0x51e>
 810e68c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e690:	4b71      	ldr	r3, [pc, #452]	@ (810e858 <_dtoa_r+0x5d0>)
 810e692:	2200      	movs	r2, #0
 810e694:	f7f1 fe80 	bl	8100398 <__aeabi_dsub>
 810e698:	4602      	mov	r2, r0
 810e69a:	460b      	mov	r3, r1
 810e69c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810e6a0:	462a      	mov	r2, r5
 810e6a2:	4633      	mov	r3, r6
 810e6a4:	f7f2 fac0 	bl	8100c28 <__aeabi_dcmpgt>
 810e6a8:	2800      	cmp	r0, #0
 810e6aa:	f040 828b 	bne.w	810ebc4 <_dtoa_r+0x93c>
 810e6ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e6b2:	462a      	mov	r2, r5
 810e6b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 810e6b8:	f7f2 fa98 	bl	8100bec <__aeabi_dcmplt>
 810e6bc:	2800      	cmp	r0, #0
 810e6be:	f040 8128 	bne.w	810e912 <_dtoa_r+0x68a>
 810e6c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 810e6c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 810e6ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810e6cc:	2b00      	cmp	r3, #0
 810e6ce:	f2c0 815a 	blt.w	810e986 <_dtoa_r+0x6fe>
 810e6d2:	2f0e      	cmp	r7, #14
 810e6d4:	f300 8157 	bgt.w	810e986 <_dtoa_r+0x6fe>
 810e6d8:	4b5a      	ldr	r3, [pc, #360]	@ (810e844 <_dtoa_r+0x5bc>)
 810e6da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810e6de:	ed93 7b00 	vldr	d7, [r3]
 810e6e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810e6e4:	2b00      	cmp	r3, #0
 810e6e6:	ed8d 7b00 	vstr	d7, [sp]
 810e6ea:	da03      	bge.n	810e6f4 <_dtoa_r+0x46c>
 810e6ec:	9b07      	ldr	r3, [sp, #28]
 810e6ee:	2b00      	cmp	r3, #0
 810e6f0:	f340 8101 	ble.w	810e8f6 <_dtoa_r+0x66e>
 810e6f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 810e6f8:	4656      	mov	r6, sl
 810e6fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 810e6fe:	4620      	mov	r0, r4
 810e700:	4629      	mov	r1, r5
 810e702:	f7f2 f92b 	bl	810095c <__aeabi_ddiv>
 810e706:	f7f2 faaf 	bl	8100c68 <__aeabi_d2iz>
 810e70a:	4680      	mov	r8, r0
 810e70c:	f7f1 ff92 	bl	8100634 <__aeabi_i2d>
 810e710:	e9dd 2300 	ldrd	r2, r3, [sp]
 810e714:	f7f1 fff8 	bl	8100708 <__aeabi_dmul>
 810e718:	4602      	mov	r2, r0
 810e71a:	460b      	mov	r3, r1
 810e71c:	4620      	mov	r0, r4
 810e71e:	4629      	mov	r1, r5
 810e720:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 810e724:	f7f1 fe38 	bl	8100398 <__aeabi_dsub>
 810e728:	f806 4b01 	strb.w	r4, [r6], #1
 810e72c:	9d07      	ldr	r5, [sp, #28]
 810e72e:	eba6 040a 	sub.w	r4, r6, sl
 810e732:	42a5      	cmp	r5, r4
 810e734:	4602      	mov	r2, r0
 810e736:	460b      	mov	r3, r1
 810e738:	f040 8117 	bne.w	810e96a <_dtoa_r+0x6e2>
 810e73c:	f7f1 fe2e 	bl	810039c <__adddf3>
 810e740:	e9dd 2300 	ldrd	r2, r3, [sp]
 810e744:	4604      	mov	r4, r0
 810e746:	460d      	mov	r5, r1
 810e748:	f7f2 fa6e 	bl	8100c28 <__aeabi_dcmpgt>
 810e74c:	2800      	cmp	r0, #0
 810e74e:	f040 80f9 	bne.w	810e944 <_dtoa_r+0x6bc>
 810e752:	e9dd 2300 	ldrd	r2, r3, [sp]
 810e756:	4620      	mov	r0, r4
 810e758:	4629      	mov	r1, r5
 810e75a:	f7f2 fa3d 	bl	8100bd8 <__aeabi_dcmpeq>
 810e75e:	b118      	cbz	r0, 810e768 <_dtoa_r+0x4e0>
 810e760:	f018 0f01 	tst.w	r8, #1
 810e764:	f040 80ee 	bne.w	810e944 <_dtoa_r+0x6bc>
 810e768:	4649      	mov	r1, r9
 810e76a:	4658      	mov	r0, fp
 810e76c:	f000 fc90 	bl	810f090 <_Bfree>
 810e770:	2300      	movs	r3, #0
 810e772:	7033      	strb	r3, [r6, #0]
 810e774:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810e776:	3701      	adds	r7, #1
 810e778:	601f      	str	r7, [r3, #0]
 810e77a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810e77c:	2b00      	cmp	r3, #0
 810e77e:	f000 831d 	beq.w	810edbc <_dtoa_r+0xb34>
 810e782:	601e      	str	r6, [r3, #0]
 810e784:	e31a      	b.n	810edbc <_dtoa_r+0xb34>
 810e786:	07e2      	lsls	r2, r4, #31
 810e788:	d505      	bpl.n	810e796 <_dtoa_r+0x50e>
 810e78a:	e9d5 2300 	ldrd	r2, r3, [r5]
 810e78e:	f7f1 ffbb 	bl	8100708 <__aeabi_dmul>
 810e792:	3601      	adds	r6, #1
 810e794:	2301      	movs	r3, #1
 810e796:	1064      	asrs	r4, r4, #1
 810e798:	3508      	adds	r5, #8
 810e79a:	e73f      	b.n	810e61c <_dtoa_r+0x394>
 810e79c:	2602      	movs	r6, #2
 810e79e:	e742      	b.n	810e626 <_dtoa_r+0x39e>
 810e7a0:	9c07      	ldr	r4, [sp, #28]
 810e7a2:	9704      	str	r7, [sp, #16]
 810e7a4:	e761      	b.n	810e66a <_dtoa_r+0x3e2>
 810e7a6:	4b27      	ldr	r3, [pc, #156]	@ (810e844 <_dtoa_r+0x5bc>)
 810e7a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810e7aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810e7ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810e7b2:	4454      	add	r4, sl
 810e7b4:	2900      	cmp	r1, #0
 810e7b6:	d053      	beq.n	810e860 <_dtoa_r+0x5d8>
 810e7b8:	4928      	ldr	r1, [pc, #160]	@ (810e85c <_dtoa_r+0x5d4>)
 810e7ba:	2000      	movs	r0, #0
 810e7bc:	f7f2 f8ce 	bl	810095c <__aeabi_ddiv>
 810e7c0:	4633      	mov	r3, r6
 810e7c2:	462a      	mov	r2, r5
 810e7c4:	f7f1 fde8 	bl	8100398 <__aeabi_dsub>
 810e7c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810e7cc:	4656      	mov	r6, sl
 810e7ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e7d2:	f7f2 fa49 	bl	8100c68 <__aeabi_d2iz>
 810e7d6:	4605      	mov	r5, r0
 810e7d8:	f7f1 ff2c 	bl	8100634 <__aeabi_i2d>
 810e7dc:	4602      	mov	r2, r0
 810e7de:	460b      	mov	r3, r1
 810e7e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e7e4:	f7f1 fdd8 	bl	8100398 <__aeabi_dsub>
 810e7e8:	3530      	adds	r5, #48	@ 0x30
 810e7ea:	4602      	mov	r2, r0
 810e7ec:	460b      	mov	r3, r1
 810e7ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810e7f2:	f806 5b01 	strb.w	r5, [r6], #1
 810e7f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810e7fa:	f7f2 f9f7 	bl	8100bec <__aeabi_dcmplt>
 810e7fe:	2800      	cmp	r0, #0
 810e800:	d171      	bne.n	810e8e6 <_dtoa_r+0x65e>
 810e802:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810e806:	4911      	ldr	r1, [pc, #68]	@ (810e84c <_dtoa_r+0x5c4>)
 810e808:	2000      	movs	r0, #0
 810e80a:	f7f1 fdc5 	bl	8100398 <__aeabi_dsub>
 810e80e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810e812:	f7f2 f9eb 	bl	8100bec <__aeabi_dcmplt>
 810e816:	2800      	cmp	r0, #0
 810e818:	f040 8095 	bne.w	810e946 <_dtoa_r+0x6be>
 810e81c:	42a6      	cmp	r6, r4
 810e81e:	f43f af50 	beq.w	810e6c2 <_dtoa_r+0x43a>
 810e822:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810e826:	4b0a      	ldr	r3, [pc, #40]	@ (810e850 <_dtoa_r+0x5c8>)
 810e828:	2200      	movs	r2, #0
 810e82a:	f7f1 ff6d 	bl	8100708 <__aeabi_dmul>
 810e82e:	4b08      	ldr	r3, [pc, #32]	@ (810e850 <_dtoa_r+0x5c8>)
 810e830:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810e834:	2200      	movs	r2, #0
 810e836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e83a:	f7f1 ff65 	bl	8100708 <__aeabi_dmul>
 810e83e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810e842:	e7c4      	b.n	810e7ce <_dtoa_r+0x546>
 810e844:	08111900 	.word	0x08111900
 810e848:	081118d8 	.word	0x081118d8
 810e84c:	3ff00000 	.word	0x3ff00000
 810e850:	40240000 	.word	0x40240000
 810e854:	401c0000 	.word	0x401c0000
 810e858:	40140000 	.word	0x40140000
 810e85c:	3fe00000 	.word	0x3fe00000
 810e860:	4631      	mov	r1, r6
 810e862:	4628      	mov	r0, r5
 810e864:	f7f1 ff50 	bl	8100708 <__aeabi_dmul>
 810e868:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810e86c:	9415      	str	r4, [sp, #84]	@ 0x54
 810e86e:	4656      	mov	r6, sl
 810e870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e874:	f7f2 f9f8 	bl	8100c68 <__aeabi_d2iz>
 810e878:	4605      	mov	r5, r0
 810e87a:	f7f1 fedb 	bl	8100634 <__aeabi_i2d>
 810e87e:	4602      	mov	r2, r0
 810e880:	460b      	mov	r3, r1
 810e882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e886:	f7f1 fd87 	bl	8100398 <__aeabi_dsub>
 810e88a:	3530      	adds	r5, #48	@ 0x30
 810e88c:	f806 5b01 	strb.w	r5, [r6], #1
 810e890:	4602      	mov	r2, r0
 810e892:	460b      	mov	r3, r1
 810e894:	42a6      	cmp	r6, r4
 810e896:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810e89a:	f04f 0200 	mov.w	r2, #0
 810e89e:	d124      	bne.n	810e8ea <_dtoa_r+0x662>
 810e8a0:	4bac      	ldr	r3, [pc, #688]	@ (810eb54 <_dtoa_r+0x8cc>)
 810e8a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810e8a6:	f7f1 fd79 	bl	810039c <__adddf3>
 810e8aa:	4602      	mov	r2, r0
 810e8ac:	460b      	mov	r3, r1
 810e8ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e8b2:	f7f2 f9b9 	bl	8100c28 <__aeabi_dcmpgt>
 810e8b6:	2800      	cmp	r0, #0
 810e8b8:	d145      	bne.n	810e946 <_dtoa_r+0x6be>
 810e8ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810e8be:	49a5      	ldr	r1, [pc, #660]	@ (810eb54 <_dtoa_r+0x8cc>)
 810e8c0:	2000      	movs	r0, #0
 810e8c2:	f7f1 fd69 	bl	8100398 <__aeabi_dsub>
 810e8c6:	4602      	mov	r2, r0
 810e8c8:	460b      	mov	r3, r1
 810e8ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e8ce:	f7f2 f98d 	bl	8100bec <__aeabi_dcmplt>
 810e8d2:	2800      	cmp	r0, #0
 810e8d4:	f43f aef5 	beq.w	810e6c2 <_dtoa_r+0x43a>
 810e8d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 810e8da:	1e73      	subs	r3, r6, #1
 810e8dc:	9315      	str	r3, [sp, #84]	@ 0x54
 810e8de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810e8e2:	2b30      	cmp	r3, #48	@ 0x30
 810e8e4:	d0f8      	beq.n	810e8d8 <_dtoa_r+0x650>
 810e8e6:	9f04      	ldr	r7, [sp, #16]
 810e8e8:	e73e      	b.n	810e768 <_dtoa_r+0x4e0>
 810e8ea:	4b9b      	ldr	r3, [pc, #620]	@ (810eb58 <_dtoa_r+0x8d0>)
 810e8ec:	f7f1 ff0c 	bl	8100708 <__aeabi_dmul>
 810e8f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810e8f4:	e7bc      	b.n	810e870 <_dtoa_r+0x5e8>
 810e8f6:	d10c      	bne.n	810e912 <_dtoa_r+0x68a>
 810e8f8:	4b98      	ldr	r3, [pc, #608]	@ (810eb5c <_dtoa_r+0x8d4>)
 810e8fa:	2200      	movs	r2, #0
 810e8fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 810e900:	f7f1 ff02 	bl	8100708 <__aeabi_dmul>
 810e904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810e908:	f7f2 f984 	bl	8100c14 <__aeabi_dcmpge>
 810e90c:	2800      	cmp	r0, #0
 810e90e:	f000 8157 	beq.w	810ebc0 <_dtoa_r+0x938>
 810e912:	2400      	movs	r4, #0
 810e914:	4625      	mov	r5, r4
 810e916:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810e918:	43db      	mvns	r3, r3
 810e91a:	9304      	str	r3, [sp, #16]
 810e91c:	4656      	mov	r6, sl
 810e91e:	2700      	movs	r7, #0
 810e920:	4621      	mov	r1, r4
 810e922:	4658      	mov	r0, fp
 810e924:	f000 fbb4 	bl	810f090 <_Bfree>
 810e928:	2d00      	cmp	r5, #0
 810e92a:	d0dc      	beq.n	810e8e6 <_dtoa_r+0x65e>
 810e92c:	b12f      	cbz	r7, 810e93a <_dtoa_r+0x6b2>
 810e92e:	42af      	cmp	r7, r5
 810e930:	d003      	beq.n	810e93a <_dtoa_r+0x6b2>
 810e932:	4639      	mov	r1, r7
 810e934:	4658      	mov	r0, fp
 810e936:	f000 fbab 	bl	810f090 <_Bfree>
 810e93a:	4629      	mov	r1, r5
 810e93c:	4658      	mov	r0, fp
 810e93e:	f000 fba7 	bl	810f090 <_Bfree>
 810e942:	e7d0      	b.n	810e8e6 <_dtoa_r+0x65e>
 810e944:	9704      	str	r7, [sp, #16]
 810e946:	4633      	mov	r3, r6
 810e948:	461e      	mov	r6, r3
 810e94a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810e94e:	2a39      	cmp	r2, #57	@ 0x39
 810e950:	d107      	bne.n	810e962 <_dtoa_r+0x6da>
 810e952:	459a      	cmp	sl, r3
 810e954:	d1f8      	bne.n	810e948 <_dtoa_r+0x6c0>
 810e956:	9a04      	ldr	r2, [sp, #16]
 810e958:	3201      	adds	r2, #1
 810e95a:	9204      	str	r2, [sp, #16]
 810e95c:	2230      	movs	r2, #48	@ 0x30
 810e95e:	f88a 2000 	strb.w	r2, [sl]
 810e962:	781a      	ldrb	r2, [r3, #0]
 810e964:	3201      	adds	r2, #1
 810e966:	701a      	strb	r2, [r3, #0]
 810e968:	e7bd      	b.n	810e8e6 <_dtoa_r+0x65e>
 810e96a:	4b7b      	ldr	r3, [pc, #492]	@ (810eb58 <_dtoa_r+0x8d0>)
 810e96c:	2200      	movs	r2, #0
 810e96e:	f7f1 fecb 	bl	8100708 <__aeabi_dmul>
 810e972:	2200      	movs	r2, #0
 810e974:	2300      	movs	r3, #0
 810e976:	4604      	mov	r4, r0
 810e978:	460d      	mov	r5, r1
 810e97a:	f7f2 f92d 	bl	8100bd8 <__aeabi_dcmpeq>
 810e97e:	2800      	cmp	r0, #0
 810e980:	f43f aebb 	beq.w	810e6fa <_dtoa_r+0x472>
 810e984:	e6f0      	b.n	810e768 <_dtoa_r+0x4e0>
 810e986:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 810e988:	2a00      	cmp	r2, #0
 810e98a:	f000 80db 	beq.w	810eb44 <_dtoa_r+0x8bc>
 810e98e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810e990:	2a01      	cmp	r2, #1
 810e992:	f300 80bf 	bgt.w	810eb14 <_dtoa_r+0x88c>
 810e996:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 810e998:	2a00      	cmp	r2, #0
 810e99a:	f000 80b7 	beq.w	810eb0c <_dtoa_r+0x884>
 810e99e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 810e9a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810e9a4:	4646      	mov	r6, r8
 810e9a6:	9a08      	ldr	r2, [sp, #32]
 810e9a8:	2101      	movs	r1, #1
 810e9aa:	441a      	add	r2, r3
 810e9ac:	4658      	mov	r0, fp
 810e9ae:	4498      	add	r8, r3
 810e9b0:	9208      	str	r2, [sp, #32]
 810e9b2:	f000 fc6b 	bl	810f28c <__i2b>
 810e9b6:	4605      	mov	r5, r0
 810e9b8:	b15e      	cbz	r6, 810e9d2 <_dtoa_r+0x74a>
 810e9ba:	9b08      	ldr	r3, [sp, #32]
 810e9bc:	2b00      	cmp	r3, #0
 810e9be:	dd08      	ble.n	810e9d2 <_dtoa_r+0x74a>
 810e9c0:	42b3      	cmp	r3, r6
 810e9c2:	9a08      	ldr	r2, [sp, #32]
 810e9c4:	bfa8      	it	ge
 810e9c6:	4633      	movge	r3, r6
 810e9c8:	eba8 0803 	sub.w	r8, r8, r3
 810e9cc:	1af6      	subs	r6, r6, r3
 810e9ce:	1ad3      	subs	r3, r2, r3
 810e9d0:	9308      	str	r3, [sp, #32]
 810e9d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810e9d4:	b1f3      	cbz	r3, 810ea14 <_dtoa_r+0x78c>
 810e9d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810e9d8:	2b00      	cmp	r3, #0
 810e9da:	f000 80b7 	beq.w	810eb4c <_dtoa_r+0x8c4>
 810e9de:	b18c      	cbz	r4, 810ea04 <_dtoa_r+0x77c>
 810e9e0:	4629      	mov	r1, r5
 810e9e2:	4622      	mov	r2, r4
 810e9e4:	4658      	mov	r0, fp
 810e9e6:	f000 fd11 	bl	810f40c <__pow5mult>
 810e9ea:	464a      	mov	r2, r9
 810e9ec:	4601      	mov	r1, r0
 810e9ee:	4605      	mov	r5, r0
 810e9f0:	4658      	mov	r0, fp
 810e9f2:	f000 fc61 	bl	810f2b8 <__multiply>
 810e9f6:	4649      	mov	r1, r9
 810e9f8:	9004      	str	r0, [sp, #16]
 810e9fa:	4658      	mov	r0, fp
 810e9fc:	f000 fb48 	bl	810f090 <_Bfree>
 810ea00:	9b04      	ldr	r3, [sp, #16]
 810ea02:	4699      	mov	r9, r3
 810ea04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810ea06:	1b1a      	subs	r2, r3, r4
 810ea08:	d004      	beq.n	810ea14 <_dtoa_r+0x78c>
 810ea0a:	4649      	mov	r1, r9
 810ea0c:	4658      	mov	r0, fp
 810ea0e:	f000 fcfd 	bl	810f40c <__pow5mult>
 810ea12:	4681      	mov	r9, r0
 810ea14:	2101      	movs	r1, #1
 810ea16:	4658      	mov	r0, fp
 810ea18:	f000 fc38 	bl	810f28c <__i2b>
 810ea1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810ea1e:	4604      	mov	r4, r0
 810ea20:	2b00      	cmp	r3, #0
 810ea22:	f000 81cf 	beq.w	810edc4 <_dtoa_r+0xb3c>
 810ea26:	461a      	mov	r2, r3
 810ea28:	4601      	mov	r1, r0
 810ea2a:	4658      	mov	r0, fp
 810ea2c:	f000 fcee 	bl	810f40c <__pow5mult>
 810ea30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ea32:	2b01      	cmp	r3, #1
 810ea34:	4604      	mov	r4, r0
 810ea36:	f300 8095 	bgt.w	810eb64 <_dtoa_r+0x8dc>
 810ea3a:	9b02      	ldr	r3, [sp, #8]
 810ea3c:	2b00      	cmp	r3, #0
 810ea3e:	f040 8087 	bne.w	810eb50 <_dtoa_r+0x8c8>
 810ea42:	9b03      	ldr	r3, [sp, #12]
 810ea44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810ea48:	2b00      	cmp	r3, #0
 810ea4a:	f040 8089 	bne.w	810eb60 <_dtoa_r+0x8d8>
 810ea4e:	9b03      	ldr	r3, [sp, #12]
 810ea50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810ea54:	0d1b      	lsrs	r3, r3, #20
 810ea56:	051b      	lsls	r3, r3, #20
 810ea58:	b12b      	cbz	r3, 810ea66 <_dtoa_r+0x7de>
 810ea5a:	9b08      	ldr	r3, [sp, #32]
 810ea5c:	3301      	adds	r3, #1
 810ea5e:	9308      	str	r3, [sp, #32]
 810ea60:	f108 0801 	add.w	r8, r8, #1
 810ea64:	2301      	movs	r3, #1
 810ea66:	930a      	str	r3, [sp, #40]	@ 0x28
 810ea68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810ea6a:	2b00      	cmp	r3, #0
 810ea6c:	f000 81b0 	beq.w	810edd0 <_dtoa_r+0xb48>
 810ea70:	6923      	ldr	r3, [r4, #16]
 810ea72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810ea76:	6918      	ldr	r0, [r3, #16]
 810ea78:	f000 fbbc 	bl	810f1f4 <__hi0bits>
 810ea7c:	f1c0 0020 	rsb	r0, r0, #32
 810ea80:	9b08      	ldr	r3, [sp, #32]
 810ea82:	4418      	add	r0, r3
 810ea84:	f010 001f 	ands.w	r0, r0, #31
 810ea88:	d077      	beq.n	810eb7a <_dtoa_r+0x8f2>
 810ea8a:	f1c0 0320 	rsb	r3, r0, #32
 810ea8e:	2b04      	cmp	r3, #4
 810ea90:	dd6b      	ble.n	810eb6a <_dtoa_r+0x8e2>
 810ea92:	9b08      	ldr	r3, [sp, #32]
 810ea94:	f1c0 001c 	rsb	r0, r0, #28
 810ea98:	4403      	add	r3, r0
 810ea9a:	4480      	add	r8, r0
 810ea9c:	4406      	add	r6, r0
 810ea9e:	9308      	str	r3, [sp, #32]
 810eaa0:	f1b8 0f00 	cmp.w	r8, #0
 810eaa4:	dd05      	ble.n	810eab2 <_dtoa_r+0x82a>
 810eaa6:	4649      	mov	r1, r9
 810eaa8:	4642      	mov	r2, r8
 810eaaa:	4658      	mov	r0, fp
 810eaac:	f000 fd08 	bl	810f4c0 <__lshift>
 810eab0:	4681      	mov	r9, r0
 810eab2:	9b08      	ldr	r3, [sp, #32]
 810eab4:	2b00      	cmp	r3, #0
 810eab6:	dd05      	ble.n	810eac4 <_dtoa_r+0x83c>
 810eab8:	4621      	mov	r1, r4
 810eaba:	461a      	mov	r2, r3
 810eabc:	4658      	mov	r0, fp
 810eabe:	f000 fcff 	bl	810f4c0 <__lshift>
 810eac2:	4604      	mov	r4, r0
 810eac4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810eac6:	2b00      	cmp	r3, #0
 810eac8:	d059      	beq.n	810eb7e <_dtoa_r+0x8f6>
 810eaca:	4621      	mov	r1, r4
 810eacc:	4648      	mov	r0, r9
 810eace:	f000 fd63 	bl	810f598 <__mcmp>
 810ead2:	2800      	cmp	r0, #0
 810ead4:	da53      	bge.n	810eb7e <_dtoa_r+0x8f6>
 810ead6:	1e7b      	subs	r3, r7, #1
 810ead8:	9304      	str	r3, [sp, #16]
 810eada:	4649      	mov	r1, r9
 810eadc:	2300      	movs	r3, #0
 810eade:	220a      	movs	r2, #10
 810eae0:	4658      	mov	r0, fp
 810eae2:	f000 faf7 	bl	810f0d4 <__multadd>
 810eae6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810eae8:	4681      	mov	r9, r0
 810eaea:	2b00      	cmp	r3, #0
 810eaec:	f000 8172 	beq.w	810edd4 <_dtoa_r+0xb4c>
 810eaf0:	2300      	movs	r3, #0
 810eaf2:	4629      	mov	r1, r5
 810eaf4:	220a      	movs	r2, #10
 810eaf6:	4658      	mov	r0, fp
 810eaf8:	f000 faec 	bl	810f0d4 <__multadd>
 810eafc:	9b00      	ldr	r3, [sp, #0]
 810eafe:	2b00      	cmp	r3, #0
 810eb00:	4605      	mov	r5, r0
 810eb02:	dc67      	bgt.n	810ebd4 <_dtoa_r+0x94c>
 810eb04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810eb06:	2b02      	cmp	r3, #2
 810eb08:	dc41      	bgt.n	810eb8e <_dtoa_r+0x906>
 810eb0a:	e063      	b.n	810ebd4 <_dtoa_r+0x94c>
 810eb0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810eb0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 810eb12:	e746      	b.n	810e9a2 <_dtoa_r+0x71a>
 810eb14:	9b07      	ldr	r3, [sp, #28]
 810eb16:	1e5c      	subs	r4, r3, #1
 810eb18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810eb1a:	42a3      	cmp	r3, r4
 810eb1c:	bfbf      	itttt	lt
 810eb1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 810eb20:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 810eb22:	940a      	strlt	r4, [sp, #40]	@ 0x28
 810eb24:	1ae3      	sublt	r3, r4, r3
 810eb26:	bfb4      	ite	lt
 810eb28:	18d2      	addlt	r2, r2, r3
 810eb2a:	1b1c      	subge	r4, r3, r4
 810eb2c:	9b07      	ldr	r3, [sp, #28]
 810eb2e:	bfbc      	itt	lt
 810eb30:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 810eb32:	2400      	movlt	r4, #0
 810eb34:	2b00      	cmp	r3, #0
 810eb36:	bfb5      	itete	lt
 810eb38:	eba8 0603 	sublt.w	r6, r8, r3
 810eb3c:	9b07      	ldrge	r3, [sp, #28]
 810eb3e:	2300      	movlt	r3, #0
 810eb40:	4646      	movge	r6, r8
 810eb42:	e730      	b.n	810e9a6 <_dtoa_r+0x71e>
 810eb44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810eb46:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 810eb48:	4646      	mov	r6, r8
 810eb4a:	e735      	b.n	810e9b8 <_dtoa_r+0x730>
 810eb4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810eb4e:	e75c      	b.n	810ea0a <_dtoa_r+0x782>
 810eb50:	2300      	movs	r3, #0
 810eb52:	e788      	b.n	810ea66 <_dtoa_r+0x7de>
 810eb54:	3fe00000 	.word	0x3fe00000
 810eb58:	40240000 	.word	0x40240000
 810eb5c:	40140000 	.word	0x40140000
 810eb60:	9b02      	ldr	r3, [sp, #8]
 810eb62:	e780      	b.n	810ea66 <_dtoa_r+0x7de>
 810eb64:	2300      	movs	r3, #0
 810eb66:	930a      	str	r3, [sp, #40]	@ 0x28
 810eb68:	e782      	b.n	810ea70 <_dtoa_r+0x7e8>
 810eb6a:	d099      	beq.n	810eaa0 <_dtoa_r+0x818>
 810eb6c:	9a08      	ldr	r2, [sp, #32]
 810eb6e:	331c      	adds	r3, #28
 810eb70:	441a      	add	r2, r3
 810eb72:	4498      	add	r8, r3
 810eb74:	441e      	add	r6, r3
 810eb76:	9208      	str	r2, [sp, #32]
 810eb78:	e792      	b.n	810eaa0 <_dtoa_r+0x818>
 810eb7a:	4603      	mov	r3, r0
 810eb7c:	e7f6      	b.n	810eb6c <_dtoa_r+0x8e4>
 810eb7e:	9b07      	ldr	r3, [sp, #28]
 810eb80:	9704      	str	r7, [sp, #16]
 810eb82:	2b00      	cmp	r3, #0
 810eb84:	dc20      	bgt.n	810ebc8 <_dtoa_r+0x940>
 810eb86:	9300      	str	r3, [sp, #0]
 810eb88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810eb8a:	2b02      	cmp	r3, #2
 810eb8c:	dd1e      	ble.n	810ebcc <_dtoa_r+0x944>
 810eb8e:	9b00      	ldr	r3, [sp, #0]
 810eb90:	2b00      	cmp	r3, #0
 810eb92:	f47f aec0 	bne.w	810e916 <_dtoa_r+0x68e>
 810eb96:	4621      	mov	r1, r4
 810eb98:	2205      	movs	r2, #5
 810eb9a:	4658      	mov	r0, fp
 810eb9c:	f000 fa9a 	bl	810f0d4 <__multadd>
 810eba0:	4601      	mov	r1, r0
 810eba2:	4604      	mov	r4, r0
 810eba4:	4648      	mov	r0, r9
 810eba6:	f000 fcf7 	bl	810f598 <__mcmp>
 810ebaa:	2800      	cmp	r0, #0
 810ebac:	f77f aeb3 	ble.w	810e916 <_dtoa_r+0x68e>
 810ebb0:	4656      	mov	r6, sl
 810ebb2:	2331      	movs	r3, #49	@ 0x31
 810ebb4:	f806 3b01 	strb.w	r3, [r6], #1
 810ebb8:	9b04      	ldr	r3, [sp, #16]
 810ebba:	3301      	adds	r3, #1
 810ebbc:	9304      	str	r3, [sp, #16]
 810ebbe:	e6ae      	b.n	810e91e <_dtoa_r+0x696>
 810ebc0:	9c07      	ldr	r4, [sp, #28]
 810ebc2:	9704      	str	r7, [sp, #16]
 810ebc4:	4625      	mov	r5, r4
 810ebc6:	e7f3      	b.n	810ebb0 <_dtoa_r+0x928>
 810ebc8:	9b07      	ldr	r3, [sp, #28]
 810ebca:	9300      	str	r3, [sp, #0]
 810ebcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810ebce:	2b00      	cmp	r3, #0
 810ebd0:	f000 8104 	beq.w	810eddc <_dtoa_r+0xb54>
 810ebd4:	2e00      	cmp	r6, #0
 810ebd6:	dd05      	ble.n	810ebe4 <_dtoa_r+0x95c>
 810ebd8:	4629      	mov	r1, r5
 810ebda:	4632      	mov	r2, r6
 810ebdc:	4658      	mov	r0, fp
 810ebde:	f000 fc6f 	bl	810f4c0 <__lshift>
 810ebe2:	4605      	mov	r5, r0
 810ebe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810ebe6:	2b00      	cmp	r3, #0
 810ebe8:	d05a      	beq.n	810eca0 <_dtoa_r+0xa18>
 810ebea:	6869      	ldr	r1, [r5, #4]
 810ebec:	4658      	mov	r0, fp
 810ebee:	f000 fa0f 	bl	810f010 <_Balloc>
 810ebf2:	4606      	mov	r6, r0
 810ebf4:	b928      	cbnz	r0, 810ec02 <_dtoa_r+0x97a>
 810ebf6:	4b84      	ldr	r3, [pc, #528]	@ (810ee08 <_dtoa_r+0xb80>)
 810ebf8:	4602      	mov	r2, r0
 810ebfa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 810ebfe:	f7ff bb5a 	b.w	810e2b6 <_dtoa_r+0x2e>
 810ec02:	692a      	ldr	r2, [r5, #16]
 810ec04:	3202      	adds	r2, #2
 810ec06:	0092      	lsls	r2, r2, #2
 810ec08:	f105 010c 	add.w	r1, r5, #12
 810ec0c:	300c      	adds	r0, #12
 810ec0e:	f7ff fa80 	bl	810e112 <memcpy>
 810ec12:	2201      	movs	r2, #1
 810ec14:	4631      	mov	r1, r6
 810ec16:	4658      	mov	r0, fp
 810ec18:	f000 fc52 	bl	810f4c0 <__lshift>
 810ec1c:	f10a 0301 	add.w	r3, sl, #1
 810ec20:	9307      	str	r3, [sp, #28]
 810ec22:	9b00      	ldr	r3, [sp, #0]
 810ec24:	4453      	add	r3, sl
 810ec26:	930b      	str	r3, [sp, #44]	@ 0x2c
 810ec28:	9b02      	ldr	r3, [sp, #8]
 810ec2a:	f003 0301 	and.w	r3, r3, #1
 810ec2e:	462f      	mov	r7, r5
 810ec30:	930a      	str	r3, [sp, #40]	@ 0x28
 810ec32:	4605      	mov	r5, r0
 810ec34:	9b07      	ldr	r3, [sp, #28]
 810ec36:	4621      	mov	r1, r4
 810ec38:	3b01      	subs	r3, #1
 810ec3a:	4648      	mov	r0, r9
 810ec3c:	9300      	str	r3, [sp, #0]
 810ec3e:	f7ff fa9b 	bl	810e178 <quorem>
 810ec42:	4639      	mov	r1, r7
 810ec44:	9002      	str	r0, [sp, #8]
 810ec46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810ec4a:	4648      	mov	r0, r9
 810ec4c:	f000 fca4 	bl	810f598 <__mcmp>
 810ec50:	462a      	mov	r2, r5
 810ec52:	9008      	str	r0, [sp, #32]
 810ec54:	4621      	mov	r1, r4
 810ec56:	4658      	mov	r0, fp
 810ec58:	f000 fcba 	bl	810f5d0 <__mdiff>
 810ec5c:	68c2      	ldr	r2, [r0, #12]
 810ec5e:	4606      	mov	r6, r0
 810ec60:	bb02      	cbnz	r2, 810eca4 <_dtoa_r+0xa1c>
 810ec62:	4601      	mov	r1, r0
 810ec64:	4648      	mov	r0, r9
 810ec66:	f000 fc97 	bl	810f598 <__mcmp>
 810ec6a:	4602      	mov	r2, r0
 810ec6c:	4631      	mov	r1, r6
 810ec6e:	4658      	mov	r0, fp
 810ec70:	920e      	str	r2, [sp, #56]	@ 0x38
 810ec72:	f000 fa0d 	bl	810f090 <_Bfree>
 810ec76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ec78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810ec7a:	9e07      	ldr	r6, [sp, #28]
 810ec7c:	ea43 0102 	orr.w	r1, r3, r2
 810ec80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810ec82:	4319      	orrs	r1, r3
 810ec84:	d110      	bne.n	810eca8 <_dtoa_r+0xa20>
 810ec86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810ec8a:	d029      	beq.n	810ece0 <_dtoa_r+0xa58>
 810ec8c:	9b08      	ldr	r3, [sp, #32]
 810ec8e:	2b00      	cmp	r3, #0
 810ec90:	dd02      	ble.n	810ec98 <_dtoa_r+0xa10>
 810ec92:	9b02      	ldr	r3, [sp, #8]
 810ec94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 810ec98:	9b00      	ldr	r3, [sp, #0]
 810ec9a:	f883 8000 	strb.w	r8, [r3]
 810ec9e:	e63f      	b.n	810e920 <_dtoa_r+0x698>
 810eca0:	4628      	mov	r0, r5
 810eca2:	e7bb      	b.n	810ec1c <_dtoa_r+0x994>
 810eca4:	2201      	movs	r2, #1
 810eca6:	e7e1      	b.n	810ec6c <_dtoa_r+0x9e4>
 810eca8:	9b08      	ldr	r3, [sp, #32]
 810ecaa:	2b00      	cmp	r3, #0
 810ecac:	db04      	blt.n	810ecb8 <_dtoa_r+0xa30>
 810ecae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810ecb0:	430b      	orrs	r3, r1
 810ecb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810ecb4:	430b      	orrs	r3, r1
 810ecb6:	d120      	bne.n	810ecfa <_dtoa_r+0xa72>
 810ecb8:	2a00      	cmp	r2, #0
 810ecba:	dded      	ble.n	810ec98 <_dtoa_r+0xa10>
 810ecbc:	4649      	mov	r1, r9
 810ecbe:	2201      	movs	r2, #1
 810ecc0:	4658      	mov	r0, fp
 810ecc2:	f000 fbfd 	bl	810f4c0 <__lshift>
 810ecc6:	4621      	mov	r1, r4
 810ecc8:	4681      	mov	r9, r0
 810ecca:	f000 fc65 	bl	810f598 <__mcmp>
 810ecce:	2800      	cmp	r0, #0
 810ecd0:	dc03      	bgt.n	810ecda <_dtoa_r+0xa52>
 810ecd2:	d1e1      	bne.n	810ec98 <_dtoa_r+0xa10>
 810ecd4:	f018 0f01 	tst.w	r8, #1
 810ecd8:	d0de      	beq.n	810ec98 <_dtoa_r+0xa10>
 810ecda:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810ecde:	d1d8      	bne.n	810ec92 <_dtoa_r+0xa0a>
 810ece0:	9a00      	ldr	r2, [sp, #0]
 810ece2:	2339      	movs	r3, #57	@ 0x39
 810ece4:	7013      	strb	r3, [r2, #0]
 810ece6:	4633      	mov	r3, r6
 810ece8:	461e      	mov	r6, r3
 810ecea:	3b01      	subs	r3, #1
 810ecec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 810ecf0:	2a39      	cmp	r2, #57	@ 0x39
 810ecf2:	d052      	beq.n	810ed9a <_dtoa_r+0xb12>
 810ecf4:	3201      	adds	r2, #1
 810ecf6:	701a      	strb	r2, [r3, #0]
 810ecf8:	e612      	b.n	810e920 <_dtoa_r+0x698>
 810ecfa:	2a00      	cmp	r2, #0
 810ecfc:	dd07      	ble.n	810ed0e <_dtoa_r+0xa86>
 810ecfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810ed02:	d0ed      	beq.n	810ece0 <_dtoa_r+0xa58>
 810ed04:	9a00      	ldr	r2, [sp, #0]
 810ed06:	f108 0301 	add.w	r3, r8, #1
 810ed0a:	7013      	strb	r3, [r2, #0]
 810ed0c:	e608      	b.n	810e920 <_dtoa_r+0x698>
 810ed0e:	9b07      	ldr	r3, [sp, #28]
 810ed10:	9a07      	ldr	r2, [sp, #28]
 810ed12:	f803 8c01 	strb.w	r8, [r3, #-1]
 810ed16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810ed18:	4293      	cmp	r3, r2
 810ed1a:	d028      	beq.n	810ed6e <_dtoa_r+0xae6>
 810ed1c:	4649      	mov	r1, r9
 810ed1e:	2300      	movs	r3, #0
 810ed20:	220a      	movs	r2, #10
 810ed22:	4658      	mov	r0, fp
 810ed24:	f000 f9d6 	bl	810f0d4 <__multadd>
 810ed28:	42af      	cmp	r7, r5
 810ed2a:	4681      	mov	r9, r0
 810ed2c:	f04f 0300 	mov.w	r3, #0
 810ed30:	f04f 020a 	mov.w	r2, #10
 810ed34:	4639      	mov	r1, r7
 810ed36:	4658      	mov	r0, fp
 810ed38:	d107      	bne.n	810ed4a <_dtoa_r+0xac2>
 810ed3a:	f000 f9cb 	bl	810f0d4 <__multadd>
 810ed3e:	4607      	mov	r7, r0
 810ed40:	4605      	mov	r5, r0
 810ed42:	9b07      	ldr	r3, [sp, #28]
 810ed44:	3301      	adds	r3, #1
 810ed46:	9307      	str	r3, [sp, #28]
 810ed48:	e774      	b.n	810ec34 <_dtoa_r+0x9ac>
 810ed4a:	f000 f9c3 	bl	810f0d4 <__multadd>
 810ed4e:	4629      	mov	r1, r5
 810ed50:	4607      	mov	r7, r0
 810ed52:	2300      	movs	r3, #0
 810ed54:	220a      	movs	r2, #10
 810ed56:	4658      	mov	r0, fp
 810ed58:	f000 f9bc 	bl	810f0d4 <__multadd>
 810ed5c:	4605      	mov	r5, r0
 810ed5e:	e7f0      	b.n	810ed42 <_dtoa_r+0xaba>
 810ed60:	9b00      	ldr	r3, [sp, #0]
 810ed62:	2b00      	cmp	r3, #0
 810ed64:	bfcc      	ite	gt
 810ed66:	461e      	movgt	r6, r3
 810ed68:	2601      	movle	r6, #1
 810ed6a:	4456      	add	r6, sl
 810ed6c:	2700      	movs	r7, #0
 810ed6e:	4649      	mov	r1, r9
 810ed70:	2201      	movs	r2, #1
 810ed72:	4658      	mov	r0, fp
 810ed74:	f000 fba4 	bl	810f4c0 <__lshift>
 810ed78:	4621      	mov	r1, r4
 810ed7a:	4681      	mov	r9, r0
 810ed7c:	f000 fc0c 	bl	810f598 <__mcmp>
 810ed80:	2800      	cmp	r0, #0
 810ed82:	dcb0      	bgt.n	810ece6 <_dtoa_r+0xa5e>
 810ed84:	d102      	bne.n	810ed8c <_dtoa_r+0xb04>
 810ed86:	f018 0f01 	tst.w	r8, #1
 810ed8a:	d1ac      	bne.n	810ece6 <_dtoa_r+0xa5e>
 810ed8c:	4633      	mov	r3, r6
 810ed8e:	461e      	mov	r6, r3
 810ed90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810ed94:	2a30      	cmp	r2, #48	@ 0x30
 810ed96:	d0fa      	beq.n	810ed8e <_dtoa_r+0xb06>
 810ed98:	e5c2      	b.n	810e920 <_dtoa_r+0x698>
 810ed9a:	459a      	cmp	sl, r3
 810ed9c:	d1a4      	bne.n	810ece8 <_dtoa_r+0xa60>
 810ed9e:	9b04      	ldr	r3, [sp, #16]
 810eda0:	3301      	adds	r3, #1
 810eda2:	9304      	str	r3, [sp, #16]
 810eda4:	2331      	movs	r3, #49	@ 0x31
 810eda6:	f88a 3000 	strb.w	r3, [sl]
 810edaa:	e5b9      	b.n	810e920 <_dtoa_r+0x698>
 810edac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810edae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 810ee0c <_dtoa_r+0xb84>
 810edb2:	b11b      	cbz	r3, 810edbc <_dtoa_r+0xb34>
 810edb4:	f10a 0308 	add.w	r3, sl, #8
 810edb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 810edba:	6013      	str	r3, [r2, #0]
 810edbc:	4650      	mov	r0, sl
 810edbe:	b019      	add	sp, #100	@ 0x64
 810edc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810edc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810edc6:	2b01      	cmp	r3, #1
 810edc8:	f77f ae37 	ble.w	810ea3a <_dtoa_r+0x7b2>
 810edcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810edce:	930a      	str	r3, [sp, #40]	@ 0x28
 810edd0:	2001      	movs	r0, #1
 810edd2:	e655      	b.n	810ea80 <_dtoa_r+0x7f8>
 810edd4:	9b00      	ldr	r3, [sp, #0]
 810edd6:	2b00      	cmp	r3, #0
 810edd8:	f77f aed6 	ble.w	810eb88 <_dtoa_r+0x900>
 810eddc:	4656      	mov	r6, sl
 810edde:	4621      	mov	r1, r4
 810ede0:	4648      	mov	r0, r9
 810ede2:	f7ff f9c9 	bl	810e178 <quorem>
 810ede6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810edea:	f806 8b01 	strb.w	r8, [r6], #1
 810edee:	9b00      	ldr	r3, [sp, #0]
 810edf0:	eba6 020a 	sub.w	r2, r6, sl
 810edf4:	4293      	cmp	r3, r2
 810edf6:	ddb3      	ble.n	810ed60 <_dtoa_r+0xad8>
 810edf8:	4649      	mov	r1, r9
 810edfa:	2300      	movs	r3, #0
 810edfc:	220a      	movs	r2, #10
 810edfe:	4658      	mov	r0, fp
 810ee00:	f000 f968 	bl	810f0d4 <__multadd>
 810ee04:	4681      	mov	r9, r0
 810ee06:	e7ea      	b.n	810edde <_dtoa_r+0xb56>
 810ee08:	08111861 	.word	0x08111861
 810ee0c:	081117fc 	.word	0x081117fc

0810ee10 <_free_r>:
 810ee10:	b538      	push	{r3, r4, r5, lr}
 810ee12:	4605      	mov	r5, r0
 810ee14:	2900      	cmp	r1, #0
 810ee16:	d041      	beq.n	810ee9c <_free_r+0x8c>
 810ee18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810ee1c:	1f0c      	subs	r4, r1, #4
 810ee1e:	2b00      	cmp	r3, #0
 810ee20:	bfb8      	it	lt
 810ee22:	18e4      	addlt	r4, r4, r3
 810ee24:	f000 f8e8 	bl	810eff8 <__malloc_lock>
 810ee28:	4a1d      	ldr	r2, [pc, #116]	@ (810eea0 <_free_r+0x90>)
 810ee2a:	6813      	ldr	r3, [r2, #0]
 810ee2c:	b933      	cbnz	r3, 810ee3c <_free_r+0x2c>
 810ee2e:	6063      	str	r3, [r4, #4]
 810ee30:	6014      	str	r4, [r2, #0]
 810ee32:	4628      	mov	r0, r5
 810ee34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810ee38:	f000 b8e4 	b.w	810f004 <__malloc_unlock>
 810ee3c:	42a3      	cmp	r3, r4
 810ee3e:	d908      	bls.n	810ee52 <_free_r+0x42>
 810ee40:	6820      	ldr	r0, [r4, #0]
 810ee42:	1821      	adds	r1, r4, r0
 810ee44:	428b      	cmp	r3, r1
 810ee46:	bf01      	itttt	eq
 810ee48:	6819      	ldreq	r1, [r3, #0]
 810ee4a:	685b      	ldreq	r3, [r3, #4]
 810ee4c:	1809      	addeq	r1, r1, r0
 810ee4e:	6021      	streq	r1, [r4, #0]
 810ee50:	e7ed      	b.n	810ee2e <_free_r+0x1e>
 810ee52:	461a      	mov	r2, r3
 810ee54:	685b      	ldr	r3, [r3, #4]
 810ee56:	b10b      	cbz	r3, 810ee5c <_free_r+0x4c>
 810ee58:	42a3      	cmp	r3, r4
 810ee5a:	d9fa      	bls.n	810ee52 <_free_r+0x42>
 810ee5c:	6811      	ldr	r1, [r2, #0]
 810ee5e:	1850      	adds	r0, r2, r1
 810ee60:	42a0      	cmp	r0, r4
 810ee62:	d10b      	bne.n	810ee7c <_free_r+0x6c>
 810ee64:	6820      	ldr	r0, [r4, #0]
 810ee66:	4401      	add	r1, r0
 810ee68:	1850      	adds	r0, r2, r1
 810ee6a:	4283      	cmp	r3, r0
 810ee6c:	6011      	str	r1, [r2, #0]
 810ee6e:	d1e0      	bne.n	810ee32 <_free_r+0x22>
 810ee70:	6818      	ldr	r0, [r3, #0]
 810ee72:	685b      	ldr	r3, [r3, #4]
 810ee74:	6053      	str	r3, [r2, #4]
 810ee76:	4408      	add	r0, r1
 810ee78:	6010      	str	r0, [r2, #0]
 810ee7a:	e7da      	b.n	810ee32 <_free_r+0x22>
 810ee7c:	d902      	bls.n	810ee84 <_free_r+0x74>
 810ee7e:	230c      	movs	r3, #12
 810ee80:	602b      	str	r3, [r5, #0]
 810ee82:	e7d6      	b.n	810ee32 <_free_r+0x22>
 810ee84:	6820      	ldr	r0, [r4, #0]
 810ee86:	1821      	adds	r1, r4, r0
 810ee88:	428b      	cmp	r3, r1
 810ee8a:	bf04      	itt	eq
 810ee8c:	6819      	ldreq	r1, [r3, #0]
 810ee8e:	685b      	ldreq	r3, [r3, #4]
 810ee90:	6063      	str	r3, [r4, #4]
 810ee92:	bf04      	itt	eq
 810ee94:	1809      	addeq	r1, r1, r0
 810ee96:	6021      	streq	r1, [r4, #0]
 810ee98:	6054      	str	r4, [r2, #4]
 810ee9a:	e7ca      	b.n	810ee32 <_free_r+0x22>
 810ee9c:	bd38      	pop	{r3, r4, r5, pc}
 810ee9e:	bf00      	nop
 810eea0:	10000a2c 	.word	0x10000a2c

0810eea4 <malloc>:
 810eea4:	4b02      	ldr	r3, [pc, #8]	@ (810eeb0 <malloc+0xc>)
 810eea6:	4601      	mov	r1, r0
 810eea8:	6818      	ldr	r0, [r3, #0]
 810eeaa:	f000 b825 	b.w	810eef8 <_malloc_r>
 810eeae:	bf00      	nop
 810eeb0:	100000a8 	.word	0x100000a8

0810eeb4 <sbrk_aligned>:
 810eeb4:	b570      	push	{r4, r5, r6, lr}
 810eeb6:	4e0f      	ldr	r6, [pc, #60]	@ (810eef4 <sbrk_aligned+0x40>)
 810eeb8:	460c      	mov	r4, r1
 810eeba:	6831      	ldr	r1, [r6, #0]
 810eebc:	4605      	mov	r5, r0
 810eebe:	b911      	cbnz	r1, 810eec6 <sbrk_aligned+0x12>
 810eec0:	f001 ffe4 	bl	8110e8c <_sbrk_r>
 810eec4:	6030      	str	r0, [r6, #0]
 810eec6:	4621      	mov	r1, r4
 810eec8:	4628      	mov	r0, r5
 810eeca:	f001 ffdf 	bl	8110e8c <_sbrk_r>
 810eece:	1c43      	adds	r3, r0, #1
 810eed0:	d103      	bne.n	810eeda <sbrk_aligned+0x26>
 810eed2:	f04f 34ff 	mov.w	r4, #4294967295
 810eed6:	4620      	mov	r0, r4
 810eed8:	bd70      	pop	{r4, r5, r6, pc}
 810eeda:	1cc4      	adds	r4, r0, #3
 810eedc:	f024 0403 	bic.w	r4, r4, #3
 810eee0:	42a0      	cmp	r0, r4
 810eee2:	d0f8      	beq.n	810eed6 <sbrk_aligned+0x22>
 810eee4:	1a21      	subs	r1, r4, r0
 810eee6:	4628      	mov	r0, r5
 810eee8:	f001 ffd0 	bl	8110e8c <_sbrk_r>
 810eeec:	3001      	adds	r0, #1
 810eeee:	d1f2      	bne.n	810eed6 <sbrk_aligned+0x22>
 810eef0:	e7ef      	b.n	810eed2 <sbrk_aligned+0x1e>
 810eef2:	bf00      	nop
 810eef4:	10000a28 	.word	0x10000a28

0810eef8 <_malloc_r>:
 810eef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810eefc:	1ccd      	adds	r5, r1, #3
 810eefe:	f025 0503 	bic.w	r5, r5, #3
 810ef02:	3508      	adds	r5, #8
 810ef04:	2d0c      	cmp	r5, #12
 810ef06:	bf38      	it	cc
 810ef08:	250c      	movcc	r5, #12
 810ef0a:	2d00      	cmp	r5, #0
 810ef0c:	4606      	mov	r6, r0
 810ef0e:	db01      	blt.n	810ef14 <_malloc_r+0x1c>
 810ef10:	42a9      	cmp	r1, r5
 810ef12:	d904      	bls.n	810ef1e <_malloc_r+0x26>
 810ef14:	230c      	movs	r3, #12
 810ef16:	6033      	str	r3, [r6, #0]
 810ef18:	2000      	movs	r0, #0
 810ef1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ef1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810eff4 <_malloc_r+0xfc>
 810ef22:	f000 f869 	bl	810eff8 <__malloc_lock>
 810ef26:	f8d8 3000 	ldr.w	r3, [r8]
 810ef2a:	461c      	mov	r4, r3
 810ef2c:	bb44      	cbnz	r4, 810ef80 <_malloc_r+0x88>
 810ef2e:	4629      	mov	r1, r5
 810ef30:	4630      	mov	r0, r6
 810ef32:	f7ff ffbf 	bl	810eeb4 <sbrk_aligned>
 810ef36:	1c43      	adds	r3, r0, #1
 810ef38:	4604      	mov	r4, r0
 810ef3a:	d158      	bne.n	810efee <_malloc_r+0xf6>
 810ef3c:	f8d8 4000 	ldr.w	r4, [r8]
 810ef40:	4627      	mov	r7, r4
 810ef42:	2f00      	cmp	r7, #0
 810ef44:	d143      	bne.n	810efce <_malloc_r+0xd6>
 810ef46:	2c00      	cmp	r4, #0
 810ef48:	d04b      	beq.n	810efe2 <_malloc_r+0xea>
 810ef4a:	6823      	ldr	r3, [r4, #0]
 810ef4c:	4639      	mov	r1, r7
 810ef4e:	4630      	mov	r0, r6
 810ef50:	eb04 0903 	add.w	r9, r4, r3
 810ef54:	f001 ff9a 	bl	8110e8c <_sbrk_r>
 810ef58:	4581      	cmp	r9, r0
 810ef5a:	d142      	bne.n	810efe2 <_malloc_r+0xea>
 810ef5c:	6821      	ldr	r1, [r4, #0]
 810ef5e:	1a6d      	subs	r5, r5, r1
 810ef60:	4629      	mov	r1, r5
 810ef62:	4630      	mov	r0, r6
 810ef64:	f7ff ffa6 	bl	810eeb4 <sbrk_aligned>
 810ef68:	3001      	adds	r0, #1
 810ef6a:	d03a      	beq.n	810efe2 <_malloc_r+0xea>
 810ef6c:	6823      	ldr	r3, [r4, #0]
 810ef6e:	442b      	add	r3, r5
 810ef70:	6023      	str	r3, [r4, #0]
 810ef72:	f8d8 3000 	ldr.w	r3, [r8]
 810ef76:	685a      	ldr	r2, [r3, #4]
 810ef78:	bb62      	cbnz	r2, 810efd4 <_malloc_r+0xdc>
 810ef7a:	f8c8 7000 	str.w	r7, [r8]
 810ef7e:	e00f      	b.n	810efa0 <_malloc_r+0xa8>
 810ef80:	6822      	ldr	r2, [r4, #0]
 810ef82:	1b52      	subs	r2, r2, r5
 810ef84:	d420      	bmi.n	810efc8 <_malloc_r+0xd0>
 810ef86:	2a0b      	cmp	r2, #11
 810ef88:	d917      	bls.n	810efba <_malloc_r+0xc2>
 810ef8a:	1961      	adds	r1, r4, r5
 810ef8c:	42a3      	cmp	r3, r4
 810ef8e:	6025      	str	r5, [r4, #0]
 810ef90:	bf18      	it	ne
 810ef92:	6059      	strne	r1, [r3, #4]
 810ef94:	6863      	ldr	r3, [r4, #4]
 810ef96:	bf08      	it	eq
 810ef98:	f8c8 1000 	streq.w	r1, [r8]
 810ef9c:	5162      	str	r2, [r4, r5]
 810ef9e:	604b      	str	r3, [r1, #4]
 810efa0:	4630      	mov	r0, r6
 810efa2:	f000 f82f 	bl	810f004 <__malloc_unlock>
 810efa6:	f104 000b 	add.w	r0, r4, #11
 810efaa:	1d23      	adds	r3, r4, #4
 810efac:	f020 0007 	bic.w	r0, r0, #7
 810efb0:	1ac2      	subs	r2, r0, r3
 810efb2:	bf1c      	itt	ne
 810efb4:	1a1b      	subne	r3, r3, r0
 810efb6:	50a3      	strne	r3, [r4, r2]
 810efb8:	e7af      	b.n	810ef1a <_malloc_r+0x22>
 810efba:	6862      	ldr	r2, [r4, #4]
 810efbc:	42a3      	cmp	r3, r4
 810efbe:	bf0c      	ite	eq
 810efc0:	f8c8 2000 	streq.w	r2, [r8]
 810efc4:	605a      	strne	r2, [r3, #4]
 810efc6:	e7eb      	b.n	810efa0 <_malloc_r+0xa8>
 810efc8:	4623      	mov	r3, r4
 810efca:	6864      	ldr	r4, [r4, #4]
 810efcc:	e7ae      	b.n	810ef2c <_malloc_r+0x34>
 810efce:	463c      	mov	r4, r7
 810efd0:	687f      	ldr	r7, [r7, #4]
 810efd2:	e7b6      	b.n	810ef42 <_malloc_r+0x4a>
 810efd4:	461a      	mov	r2, r3
 810efd6:	685b      	ldr	r3, [r3, #4]
 810efd8:	42a3      	cmp	r3, r4
 810efda:	d1fb      	bne.n	810efd4 <_malloc_r+0xdc>
 810efdc:	2300      	movs	r3, #0
 810efde:	6053      	str	r3, [r2, #4]
 810efe0:	e7de      	b.n	810efa0 <_malloc_r+0xa8>
 810efe2:	230c      	movs	r3, #12
 810efe4:	6033      	str	r3, [r6, #0]
 810efe6:	4630      	mov	r0, r6
 810efe8:	f000 f80c 	bl	810f004 <__malloc_unlock>
 810efec:	e794      	b.n	810ef18 <_malloc_r+0x20>
 810efee:	6005      	str	r5, [r0, #0]
 810eff0:	e7d6      	b.n	810efa0 <_malloc_r+0xa8>
 810eff2:	bf00      	nop
 810eff4:	10000a2c 	.word	0x10000a2c

0810eff8 <__malloc_lock>:
 810eff8:	4801      	ldr	r0, [pc, #4]	@ (810f000 <__malloc_lock+0x8>)
 810effa:	f7ff b888 	b.w	810e10e <__retarget_lock_acquire_recursive>
 810effe:	bf00      	nop
 810f000:	10000a24 	.word	0x10000a24

0810f004 <__malloc_unlock>:
 810f004:	4801      	ldr	r0, [pc, #4]	@ (810f00c <__malloc_unlock+0x8>)
 810f006:	f7ff b883 	b.w	810e110 <__retarget_lock_release_recursive>
 810f00a:	bf00      	nop
 810f00c:	10000a24 	.word	0x10000a24

0810f010 <_Balloc>:
 810f010:	b570      	push	{r4, r5, r6, lr}
 810f012:	69c6      	ldr	r6, [r0, #28]
 810f014:	4604      	mov	r4, r0
 810f016:	460d      	mov	r5, r1
 810f018:	b976      	cbnz	r6, 810f038 <_Balloc+0x28>
 810f01a:	2010      	movs	r0, #16
 810f01c:	f7ff ff42 	bl	810eea4 <malloc>
 810f020:	4602      	mov	r2, r0
 810f022:	61e0      	str	r0, [r4, #28]
 810f024:	b920      	cbnz	r0, 810f030 <_Balloc+0x20>
 810f026:	4b18      	ldr	r3, [pc, #96]	@ (810f088 <_Balloc+0x78>)
 810f028:	4818      	ldr	r0, [pc, #96]	@ (810f08c <_Balloc+0x7c>)
 810f02a:	216b      	movs	r1, #107	@ 0x6b
 810f02c:	f7ff f886 	bl	810e13c <__assert_func>
 810f030:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810f034:	6006      	str	r6, [r0, #0]
 810f036:	60c6      	str	r6, [r0, #12]
 810f038:	69e6      	ldr	r6, [r4, #28]
 810f03a:	68f3      	ldr	r3, [r6, #12]
 810f03c:	b183      	cbz	r3, 810f060 <_Balloc+0x50>
 810f03e:	69e3      	ldr	r3, [r4, #28]
 810f040:	68db      	ldr	r3, [r3, #12]
 810f042:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810f046:	b9b8      	cbnz	r0, 810f078 <_Balloc+0x68>
 810f048:	2101      	movs	r1, #1
 810f04a:	fa01 f605 	lsl.w	r6, r1, r5
 810f04e:	1d72      	adds	r2, r6, #5
 810f050:	0092      	lsls	r2, r2, #2
 810f052:	4620      	mov	r0, r4
 810f054:	f001 ff3b 	bl	8110ece <_calloc_r>
 810f058:	b160      	cbz	r0, 810f074 <_Balloc+0x64>
 810f05a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810f05e:	e00e      	b.n	810f07e <_Balloc+0x6e>
 810f060:	2221      	movs	r2, #33	@ 0x21
 810f062:	2104      	movs	r1, #4
 810f064:	4620      	mov	r0, r4
 810f066:	f001 ff32 	bl	8110ece <_calloc_r>
 810f06a:	69e3      	ldr	r3, [r4, #28]
 810f06c:	60f0      	str	r0, [r6, #12]
 810f06e:	68db      	ldr	r3, [r3, #12]
 810f070:	2b00      	cmp	r3, #0
 810f072:	d1e4      	bne.n	810f03e <_Balloc+0x2e>
 810f074:	2000      	movs	r0, #0
 810f076:	bd70      	pop	{r4, r5, r6, pc}
 810f078:	6802      	ldr	r2, [r0, #0]
 810f07a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810f07e:	2300      	movs	r3, #0
 810f080:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810f084:	e7f7      	b.n	810f076 <_Balloc+0x66>
 810f086:	bf00      	nop
 810f088:	08111718 	.word	0x08111718
 810f08c:	08111872 	.word	0x08111872

0810f090 <_Bfree>:
 810f090:	b570      	push	{r4, r5, r6, lr}
 810f092:	69c6      	ldr	r6, [r0, #28]
 810f094:	4605      	mov	r5, r0
 810f096:	460c      	mov	r4, r1
 810f098:	b976      	cbnz	r6, 810f0b8 <_Bfree+0x28>
 810f09a:	2010      	movs	r0, #16
 810f09c:	f7ff ff02 	bl	810eea4 <malloc>
 810f0a0:	4602      	mov	r2, r0
 810f0a2:	61e8      	str	r0, [r5, #28]
 810f0a4:	b920      	cbnz	r0, 810f0b0 <_Bfree+0x20>
 810f0a6:	4b09      	ldr	r3, [pc, #36]	@ (810f0cc <_Bfree+0x3c>)
 810f0a8:	4809      	ldr	r0, [pc, #36]	@ (810f0d0 <_Bfree+0x40>)
 810f0aa:	218f      	movs	r1, #143	@ 0x8f
 810f0ac:	f7ff f846 	bl	810e13c <__assert_func>
 810f0b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810f0b4:	6006      	str	r6, [r0, #0]
 810f0b6:	60c6      	str	r6, [r0, #12]
 810f0b8:	b13c      	cbz	r4, 810f0ca <_Bfree+0x3a>
 810f0ba:	69eb      	ldr	r3, [r5, #28]
 810f0bc:	6862      	ldr	r2, [r4, #4]
 810f0be:	68db      	ldr	r3, [r3, #12]
 810f0c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810f0c4:	6021      	str	r1, [r4, #0]
 810f0c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810f0ca:	bd70      	pop	{r4, r5, r6, pc}
 810f0cc:	08111718 	.word	0x08111718
 810f0d0:	08111872 	.word	0x08111872

0810f0d4 <__multadd>:
 810f0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810f0d8:	690d      	ldr	r5, [r1, #16]
 810f0da:	4607      	mov	r7, r0
 810f0dc:	460c      	mov	r4, r1
 810f0de:	461e      	mov	r6, r3
 810f0e0:	f101 0c14 	add.w	ip, r1, #20
 810f0e4:	2000      	movs	r0, #0
 810f0e6:	f8dc 3000 	ldr.w	r3, [ip]
 810f0ea:	b299      	uxth	r1, r3
 810f0ec:	fb02 6101 	mla	r1, r2, r1, r6
 810f0f0:	0c1e      	lsrs	r6, r3, #16
 810f0f2:	0c0b      	lsrs	r3, r1, #16
 810f0f4:	fb02 3306 	mla	r3, r2, r6, r3
 810f0f8:	b289      	uxth	r1, r1
 810f0fa:	3001      	adds	r0, #1
 810f0fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810f100:	4285      	cmp	r5, r0
 810f102:	f84c 1b04 	str.w	r1, [ip], #4
 810f106:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810f10a:	dcec      	bgt.n	810f0e6 <__multadd+0x12>
 810f10c:	b30e      	cbz	r6, 810f152 <__multadd+0x7e>
 810f10e:	68a3      	ldr	r3, [r4, #8]
 810f110:	42ab      	cmp	r3, r5
 810f112:	dc19      	bgt.n	810f148 <__multadd+0x74>
 810f114:	6861      	ldr	r1, [r4, #4]
 810f116:	4638      	mov	r0, r7
 810f118:	3101      	adds	r1, #1
 810f11a:	f7ff ff79 	bl	810f010 <_Balloc>
 810f11e:	4680      	mov	r8, r0
 810f120:	b928      	cbnz	r0, 810f12e <__multadd+0x5a>
 810f122:	4602      	mov	r2, r0
 810f124:	4b0c      	ldr	r3, [pc, #48]	@ (810f158 <__multadd+0x84>)
 810f126:	480d      	ldr	r0, [pc, #52]	@ (810f15c <__multadd+0x88>)
 810f128:	21ba      	movs	r1, #186	@ 0xba
 810f12a:	f7ff f807 	bl	810e13c <__assert_func>
 810f12e:	6922      	ldr	r2, [r4, #16]
 810f130:	3202      	adds	r2, #2
 810f132:	f104 010c 	add.w	r1, r4, #12
 810f136:	0092      	lsls	r2, r2, #2
 810f138:	300c      	adds	r0, #12
 810f13a:	f7fe ffea 	bl	810e112 <memcpy>
 810f13e:	4621      	mov	r1, r4
 810f140:	4638      	mov	r0, r7
 810f142:	f7ff ffa5 	bl	810f090 <_Bfree>
 810f146:	4644      	mov	r4, r8
 810f148:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810f14c:	3501      	adds	r5, #1
 810f14e:	615e      	str	r6, [r3, #20]
 810f150:	6125      	str	r5, [r4, #16]
 810f152:	4620      	mov	r0, r4
 810f154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810f158:	08111861 	.word	0x08111861
 810f15c:	08111872 	.word	0x08111872

0810f160 <__s2b>:
 810f160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810f164:	460c      	mov	r4, r1
 810f166:	4615      	mov	r5, r2
 810f168:	461f      	mov	r7, r3
 810f16a:	2209      	movs	r2, #9
 810f16c:	3308      	adds	r3, #8
 810f16e:	4606      	mov	r6, r0
 810f170:	fb93 f3f2 	sdiv	r3, r3, r2
 810f174:	2100      	movs	r1, #0
 810f176:	2201      	movs	r2, #1
 810f178:	429a      	cmp	r2, r3
 810f17a:	db09      	blt.n	810f190 <__s2b+0x30>
 810f17c:	4630      	mov	r0, r6
 810f17e:	f7ff ff47 	bl	810f010 <_Balloc>
 810f182:	b940      	cbnz	r0, 810f196 <__s2b+0x36>
 810f184:	4602      	mov	r2, r0
 810f186:	4b19      	ldr	r3, [pc, #100]	@ (810f1ec <__s2b+0x8c>)
 810f188:	4819      	ldr	r0, [pc, #100]	@ (810f1f0 <__s2b+0x90>)
 810f18a:	21d3      	movs	r1, #211	@ 0xd3
 810f18c:	f7fe ffd6 	bl	810e13c <__assert_func>
 810f190:	0052      	lsls	r2, r2, #1
 810f192:	3101      	adds	r1, #1
 810f194:	e7f0      	b.n	810f178 <__s2b+0x18>
 810f196:	9b08      	ldr	r3, [sp, #32]
 810f198:	6143      	str	r3, [r0, #20]
 810f19a:	2d09      	cmp	r5, #9
 810f19c:	f04f 0301 	mov.w	r3, #1
 810f1a0:	6103      	str	r3, [r0, #16]
 810f1a2:	dd16      	ble.n	810f1d2 <__s2b+0x72>
 810f1a4:	f104 0909 	add.w	r9, r4, #9
 810f1a8:	46c8      	mov	r8, r9
 810f1aa:	442c      	add	r4, r5
 810f1ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 810f1b0:	4601      	mov	r1, r0
 810f1b2:	3b30      	subs	r3, #48	@ 0x30
 810f1b4:	220a      	movs	r2, #10
 810f1b6:	4630      	mov	r0, r6
 810f1b8:	f7ff ff8c 	bl	810f0d4 <__multadd>
 810f1bc:	45a0      	cmp	r8, r4
 810f1be:	d1f5      	bne.n	810f1ac <__s2b+0x4c>
 810f1c0:	f1a5 0408 	sub.w	r4, r5, #8
 810f1c4:	444c      	add	r4, r9
 810f1c6:	1b2d      	subs	r5, r5, r4
 810f1c8:	1963      	adds	r3, r4, r5
 810f1ca:	42bb      	cmp	r3, r7
 810f1cc:	db04      	blt.n	810f1d8 <__s2b+0x78>
 810f1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810f1d2:	340a      	adds	r4, #10
 810f1d4:	2509      	movs	r5, #9
 810f1d6:	e7f6      	b.n	810f1c6 <__s2b+0x66>
 810f1d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 810f1dc:	4601      	mov	r1, r0
 810f1de:	3b30      	subs	r3, #48	@ 0x30
 810f1e0:	220a      	movs	r2, #10
 810f1e2:	4630      	mov	r0, r6
 810f1e4:	f7ff ff76 	bl	810f0d4 <__multadd>
 810f1e8:	e7ee      	b.n	810f1c8 <__s2b+0x68>
 810f1ea:	bf00      	nop
 810f1ec:	08111861 	.word	0x08111861
 810f1f0:	08111872 	.word	0x08111872

0810f1f4 <__hi0bits>:
 810f1f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 810f1f8:	4603      	mov	r3, r0
 810f1fa:	bf36      	itet	cc
 810f1fc:	0403      	lslcc	r3, r0, #16
 810f1fe:	2000      	movcs	r0, #0
 810f200:	2010      	movcc	r0, #16
 810f202:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810f206:	bf3c      	itt	cc
 810f208:	021b      	lslcc	r3, r3, #8
 810f20a:	3008      	addcc	r0, #8
 810f20c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810f210:	bf3c      	itt	cc
 810f212:	011b      	lslcc	r3, r3, #4
 810f214:	3004      	addcc	r0, #4
 810f216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810f21a:	bf3c      	itt	cc
 810f21c:	009b      	lslcc	r3, r3, #2
 810f21e:	3002      	addcc	r0, #2
 810f220:	2b00      	cmp	r3, #0
 810f222:	db05      	blt.n	810f230 <__hi0bits+0x3c>
 810f224:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 810f228:	f100 0001 	add.w	r0, r0, #1
 810f22c:	bf08      	it	eq
 810f22e:	2020      	moveq	r0, #32
 810f230:	4770      	bx	lr

0810f232 <__lo0bits>:
 810f232:	6803      	ldr	r3, [r0, #0]
 810f234:	4602      	mov	r2, r0
 810f236:	f013 0007 	ands.w	r0, r3, #7
 810f23a:	d00b      	beq.n	810f254 <__lo0bits+0x22>
 810f23c:	07d9      	lsls	r1, r3, #31
 810f23e:	d421      	bmi.n	810f284 <__lo0bits+0x52>
 810f240:	0798      	lsls	r0, r3, #30
 810f242:	bf49      	itett	mi
 810f244:	085b      	lsrmi	r3, r3, #1
 810f246:	089b      	lsrpl	r3, r3, #2
 810f248:	2001      	movmi	r0, #1
 810f24a:	6013      	strmi	r3, [r2, #0]
 810f24c:	bf5c      	itt	pl
 810f24e:	6013      	strpl	r3, [r2, #0]
 810f250:	2002      	movpl	r0, #2
 810f252:	4770      	bx	lr
 810f254:	b299      	uxth	r1, r3
 810f256:	b909      	cbnz	r1, 810f25c <__lo0bits+0x2a>
 810f258:	0c1b      	lsrs	r3, r3, #16
 810f25a:	2010      	movs	r0, #16
 810f25c:	b2d9      	uxtb	r1, r3
 810f25e:	b909      	cbnz	r1, 810f264 <__lo0bits+0x32>
 810f260:	3008      	adds	r0, #8
 810f262:	0a1b      	lsrs	r3, r3, #8
 810f264:	0719      	lsls	r1, r3, #28
 810f266:	bf04      	itt	eq
 810f268:	091b      	lsreq	r3, r3, #4
 810f26a:	3004      	addeq	r0, #4
 810f26c:	0799      	lsls	r1, r3, #30
 810f26e:	bf04      	itt	eq
 810f270:	089b      	lsreq	r3, r3, #2
 810f272:	3002      	addeq	r0, #2
 810f274:	07d9      	lsls	r1, r3, #31
 810f276:	d403      	bmi.n	810f280 <__lo0bits+0x4e>
 810f278:	085b      	lsrs	r3, r3, #1
 810f27a:	f100 0001 	add.w	r0, r0, #1
 810f27e:	d003      	beq.n	810f288 <__lo0bits+0x56>
 810f280:	6013      	str	r3, [r2, #0]
 810f282:	4770      	bx	lr
 810f284:	2000      	movs	r0, #0
 810f286:	4770      	bx	lr
 810f288:	2020      	movs	r0, #32
 810f28a:	4770      	bx	lr

0810f28c <__i2b>:
 810f28c:	b510      	push	{r4, lr}
 810f28e:	460c      	mov	r4, r1
 810f290:	2101      	movs	r1, #1
 810f292:	f7ff febd 	bl	810f010 <_Balloc>
 810f296:	4602      	mov	r2, r0
 810f298:	b928      	cbnz	r0, 810f2a6 <__i2b+0x1a>
 810f29a:	4b05      	ldr	r3, [pc, #20]	@ (810f2b0 <__i2b+0x24>)
 810f29c:	4805      	ldr	r0, [pc, #20]	@ (810f2b4 <__i2b+0x28>)
 810f29e:	f240 1145 	movw	r1, #325	@ 0x145
 810f2a2:	f7fe ff4b 	bl	810e13c <__assert_func>
 810f2a6:	2301      	movs	r3, #1
 810f2a8:	6144      	str	r4, [r0, #20]
 810f2aa:	6103      	str	r3, [r0, #16]
 810f2ac:	bd10      	pop	{r4, pc}
 810f2ae:	bf00      	nop
 810f2b0:	08111861 	.word	0x08111861
 810f2b4:	08111872 	.word	0x08111872

0810f2b8 <__multiply>:
 810f2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f2bc:	4614      	mov	r4, r2
 810f2be:	690a      	ldr	r2, [r1, #16]
 810f2c0:	6923      	ldr	r3, [r4, #16]
 810f2c2:	429a      	cmp	r2, r3
 810f2c4:	bfa8      	it	ge
 810f2c6:	4623      	movge	r3, r4
 810f2c8:	460f      	mov	r7, r1
 810f2ca:	bfa4      	itt	ge
 810f2cc:	460c      	movge	r4, r1
 810f2ce:	461f      	movge	r7, r3
 810f2d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 810f2d4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 810f2d8:	68a3      	ldr	r3, [r4, #8]
 810f2da:	6861      	ldr	r1, [r4, #4]
 810f2dc:	eb0a 0609 	add.w	r6, sl, r9
 810f2e0:	42b3      	cmp	r3, r6
 810f2e2:	b085      	sub	sp, #20
 810f2e4:	bfb8      	it	lt
 810f2e6:	3101      	addlt	r1, #1
 810f2e8:	f7ff fe92 	bl	810f010 <_Balloc>
 810f2ec:	b930      	cbnz	r0, 810f2fc <__multiply+0x44>
 810f2ee:	4602      	mov	r2, r0
 810f2f0:	4b44      	ldr	r3, [pc, #272]	@ (810f404 <__multiply+0x14c>)
 810f2f2:	4845      	ldr	r0, [pc, #276]	@ (810f408 <__multiply+0x150>)
 810f2f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 810f2f8:	f7fe ff20 	bl	810e13c <__assert_func>
 810f2fc:	f100 0514 	add.w	r5, r0, #20
 810f300:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810f304:	462b      	mov	r3, r5
 810f306:	2200      	movs	r2, #0
 810f308:	4543      	cmp	r3, r8
 810f30a:	d321      	bcc.n	810f350 <__multiply+0x98>
 810f30c:	f107 0114 	add.w	r1, r7, #20
 810f310:	f104 0214 	add.w	r2, r4, #20
 810f314:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 810f318:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 810f31c:	9302      	str	r3, [sp, #8]
 810f31e:	1b13      	subs	r3, r2, r4
 810f320:	3b15      	subs	r3, #21
 810f322:	f023 0303 	bic.w	r3, r3, #3
 810f326:	3304      	adds	r3, #4
 810f328:	f104 0715 	add.w	r7, r4, #21
 810f32c:	42ba      	cmp	r2, r7
 810f32e:	bf38      	it	cc
 810f330:	2304      	movcc	r3, #4
 810f332:	9301      	str	r3, [sp, #4]
 810f334:	9b02      	ldr	r3, [sp, #8]
 810f336:	9103      	str	r1, [sp, #12]
 810f338:	428b      	cmp	r3, r1
 810f33a:	d80c      	bhi.n	810f356 <__multiply+0x9e>
 810f33c:	2e00      	cmp	r6, #0
 810f33e:	dd03      	ble.n	810f348 <__multiply+0x90>
 810f340:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810f344:	2b00      	cmp	r3, #0
 810f346:	d05b      	beq.n	810f400 <__multiply+0x148>
 810f348:	6106      	str	r6, [r0, #16]
 810f34a:	b005      	add	sp, #20
 810f34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f350:	f843 2b04 	str.w	r2, [r3], #4
 810f354:	e7d8      	b.n	810f308 <__multiply+0x50>
 810f356:	f8b1 a000 	ldrh.w	sl, [r1]
 810f35a:	f1ba 0f00 	cmp.w	sl, #0
 810f35e:	d024      	beq.n	810f3aa <__multiply+0xf2>
 810f360:	f104 0e14 	add.w	lr, r4, #20
 810f364:	46a9      	mov	r9, r5
 810f366:	f04f 0c00 	mov.w	ip, #0
 810f36a:	f85e 7b04 	ldr.w	r7, [lr], #4
 810f36e:	f8d9 3000 	ldr.w	r3, [r9]
 810f372:	fa1f fb87 	uxth.w	fp, r7
 810f376:	b29b      	uxth	r3, r3
 810f378:	fb0a 330b 	mla	r3, sl, fp, r3
 810f37c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 810f380:	f8d9 7000 	ldr.w	r7, [r9]
 810f384:	4463      	add	r3, ip
 810f386:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810f38a:	fb0a c70b 	mla	r7, sl, fp, ip
 810f38e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 810f392:	b29b      	uxth	r3, r3
 810f394:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810f398:	4572      	cmp	r2, lr
 810f39a:	f849 3b04 	str.w	r3, [r9], #4
 810f39e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810f3a2:	d8e2      	bhi.n	810f36a <__multiply+0xb2>
 810f3a4:	9b01      	ldr	r3, [sp, #4]
 810f3a6:	f845 c003 	str.w	ip, [r5, r3]
 810f3aa:	9b03      	ldr	r3, [sp, #12]
 810f3ac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 810f3b0:	3104      	adds	r1, #4
 810f3b2:	f1b9 0f00 	cmp.w	r9, #0
 810f3b6:	d021      	beq.n	810f3fc <__multiply+0x144>
 810f3b8:	682b      	ldr	r3, [r5, #0]
 810f3ba:	f104 0c14 	add.w	ip, r4, #20
 810f3be:	46ae      	mov	lr, r5
 810f3c0:	f04f 0a00 	mov.w	sl, #0
 810f3c4:	f8bc b000 	ldrh.w	fp, [ip]
 810f3c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 810f3cc:	fb09 770b 	mla	r7, r9, fp, r7
 810f3d0:	4457      	add	r7, sl
 810f3d2:	b29b      	uxth	r3, r3
 810f3d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810f3d8:	f84e 3b04 	str.w	r3, [lr], #4
 810f3dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 810f3e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810f3e4:	f8be 3000 	ldrh.w	r3, [lr]
 810f3e8:	fb09 330a 	mla	r3, r9, sl, r3
 810f3ec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 810f3f0:	4562      	cmp	r2, ip
 810f3f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810f3f6:	d8e5      	bhi.n	810f3c4 <__multiply+0x10c>
 810f3f8:	9f01      	ldr	r7, [sp, #4]
 810f3fa:	51eb      	str	r3, [r5, r7]
 810f3fc:	3504      	adds	r5, #4
 810f3fe:	e799      	b.n	810f334 <__multiply+0x7c>
 810f400:	3e01      	subs	r6, #1
 810f402:	e79b      	b.n	810f33c <__multiply+0x84>
 810f404:	08111861 	.word	0x08111861
 810f408:	08111872 	.word	0x08111872

0810f40c <__pow5mult>:
 810f40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810f410:	4615      	mov	r5, r2
 810f412:	f012 0203 	ands.w	r2, r2, #3
 810f416:	4607      	mov	r7, r0
 810f418:	460e      	mov	r6, r1
 810f41a:	d007      	beq.n	810f42c <__pow5mult+0x20>
 810f41c:	4c25      	ldr	r4, [pc, #148]	@ (810f4b4 <__pow5mult+0xa8>)
 810f41e:	3a01      	subs	r2, #1
 810f420:	2300      	movs	r3, #0
 810f422:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810f426:	f7ff fe55 	bl	810f0d4 <__multadd>
 810f42a:	4606      	mov	r6, r0
 810f42c:	10ad      	asrs	r5, r5, #2
 810f42e:	d03d      	beq.n	810f4ac <__pow5mult+0xa0>
 810f430:	69fc      	ldr	r4, [r7, #28]
 810f432:	b97c      	cbnz	r4, 810f454 <__pow5mult+0x48>
 810f434:	2010      	movs	r0, #16
 810f436:	f7ff fd35 	bl	810eea4 <malloc>
 810f43a:	4602      	mov	r2, r0
 810f43c:	61f8      	str	r0, [r7, #28]
 810f43e:	b928      	cbnz	r0, 810f44c <__pow5mult+0x40>
 810f440:	4b1d      	ldr	r3, [pc, #116]	@ (810f4b8 <__pow5mult+0xac>)
 810f442:	481e      	ldr	r0, [pc, #120]	@ (810f4bc <__pow5mult+0xb0>)
 810f444:	f240 11b3 	movw	r1, #435	@ 0x1b3
 810f448:	f7fe fe78 	bl	810e13c <__assert_func>
 810f44c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810f450:	6004      	str	r4, [r0, #0]
 810f452:	60c4      	str	r4, [r0, #12]
 810f454:	f8d7 801c 	ldr.w	r8, [r7, #28]
 810f458:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810f45c:	b94c      	cbnz	r4, 810f472 <__pow5mult+0x66>
 810f45e:	f240 2171 	movw	r1, #625	@ 0x271
 810f462:	4638      	mov	r0, r7
 810f464:	f7ff ff12 	bl	810f28c <__i2b>
 810f468:	2300      	movs	r3, #0
 810f46a:	f8c8 0008 	str.w	r0, [r8, #8]
 810f46e:	4604      	mov	r4, r0
 810f470:	6003      	str	r3, [r0, #0]
 810f472:	f04f 0900 	mov.w	r9, #0
 810f476:	07eb      	lsls	r3, r5, #31
 810f478:	d50a      	bpl.n	810f490 <__pow5mult+0x84>
 810f47a:	4631      	mov	r1, r6
 810f47c:	4622      	mov	r2, r4
 810f47e:	4638      	mov	r0, r7
 810f480:	f7ff ff1a 	bl	810f2b8 <__multiply>
 810f484:	4631      	mov	r1, r6
 810f486:	4680      	mov	r8, r0
 810f488:	4638      	mov	r0, r7
 810f48a:	f7ff fe01 	bl	810f090 <_Bfree>
 810f48e:	4646      	mov	r6, r8
 810f490:	106d      	asrs	r5, r5, #1
 810f492:	d00b      	beq.n	810f4ac <__pow5mult+0xa0>
 810f494:	6820      	ldr	r0, [r4, #0]
 810f496:	b938      	cbnz	r0, 810f4a8 <__pow5mult+0x9c>
 810f498:	4622      	mov	r2, r4
 810f49a:	4621      	mov	r1, r4
 810f49c:	4638      	mov	r0, r7
 810f49e:	f7ff ff0b 	bl	810f2b8 <__multiply>
 810f4a2:	6020      	str	r0, [r4, #0]
 810f4a4:	f8c0 9000 	str.w	r9, [r0]
 810f4a8:	4604      	mov	r4, r0
 810f4aa:	e7e4      	b.n	810f476 <__pow5mult+0x6a>
 810f4ac:	4630      	mov	r0, r6
 810f4ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810f4b2:	bf00      	nop
 810f4b4:	081118cc 	.word	0x081118cc
 810f4b8:	08111718 	.word	0x08111718
 810f4bc:	08111872 	.word	0x08111872

0810f4c0 <__lshift>:
 810f4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810f4c4:	460c      	mov	r4, r1
 810f4c6:	6849      	ldr	r1, [r1, #4]
 810f4c8:	6923      	ldr	r3, [r4, #16]
 810f4ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810f4ce:	68a3      	ldr	r3, [r4, #8]
 810f4d0:	4607      	mov	r7, r0
 810f4d2:	4691      	mov	r9, r2
 810f4d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810f4d8:	f108 0601 	add.w	r6, r8, #1
 810f4dc:	42b3      	cmp	r3, r6
 810f4de:	db0b      	blt.n	810f4f8 <__lshift+0x38>
 810f4e0:	4638      	mov	r0, r7
 810f4e2:	f7ff fd95 	bl	810f010 <_Balloc>
 810f4e6:	4605      	mov	r5, r0
 810f4e8:	b948      	cbnz	r0, 810f4fe <__lshift+0x3e>
 810f4ea:	4602      	mov	r2, r0
 810f4ec:	4b28      	ldr	r3, [pc, #160]	@ (810f590 <__lshift+0xd0>)
 810f4ee:	4829      	ldr	r0, [pc, #164]	@ (810f594 <__lshift+0xd4>)
 810f4f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 810f4f4:	f7fe fe22 	bl	810e13c <__assert_func>
 810f4f8:	3101      	adds	r1, #1
 810f4fa:	005b      	lsls	r3, r3, #1
 810f4fc:	e7ee      	b.n	810f4dc <__lshift+0x1c>
 810f4fe:	2300      	movs	r3, #0
 810f500:	f100 0114 	add.w	r1, r0, #20
 810f504:	f100 0210 	add.w	r2, r0, #16
 810f508:	4618      	mov	r0, r3
 810f50a:	4553      	cmp	r3, sl
 810f50c:	db33      	blt.n	810f576 <__lshift+0xb6>
 810f50e:	6920      	ldr	r0, [r4, #16]
 810f510:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810f514:	f104 0314 	add.w	r3, r4, #20
 810f518:	f019 091f 	ands.w	r9, r9, #31
 810f51c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810f520:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810f524:	d02b      	beq.n	810f57e <__lshift+0xbe>
 810f526:	f1c9 0e20 	rsb	lr, r9, #32
 810f52a:	468a      	mov	sl, r1
 810f52c:	2200      	movs	r2, #0
 810f52e:	6818      	ldr	r0, [r3, #0]
 810f530:	fa00 f009 	lsl.w	r0, r0, r9
 810f534:	4310      	orrs	r0, r2
 810f536:	f84a 0b04 	str.w	r0, [sl], #4
 810f53a:	f853 2b04 	ldr.w	r2, [r3], #4
 810f53e:	459c      	cmp	ip, r3
 810f540:	fa22 f20e 	lsr.w	r2, r2, lr
 810f544:	d8f3      	bhi.n	810f52e <__lshift+0x6e>
 810f546:	ebac 0304 	sub.w	r3, ip, r4
 810f54a:	3b15      	subs	r3, #21
 810f54c:	f023 0303 	bic.w	r3, r3, #3
 810f550:	3304      	adds	r3, #4
 810f552:	f104 0015 	add.w	r0, r4, #21
 810f556:	4584      	cmp	ip, r0
 810f558:	bf38      	it	cc
 810f55a:	2304      	movcc	r3, #4
 810f55c:	50ca      	str	r2, [r1, r3]
 810f55e:	b10a      	cbz	r2, 810f564 <__lshift+0xa4>
 810f560:	f108 0602 	add.w	r6, r8, #2
 810f564:	3e01      	subs	r6, #1
 810f566:	4638      	mov	r0, r7
 810f568:	612e      	str	r6, [r5, #16]
 810f56a:	4621      	mov	r1, r4
 810f56c:	f7ff fd90 	bl	810f090 <_Bfree>
 810f570:	4628      	mov	r0, r5
 810f572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f576:	f842 0f04 	str.w	r0, [r2, #4]!
 810f57a:	3301      	adds	r3, #1
 810f57c:	e7c5      	b.n	810f50a <__lshift+0x4a>
 810f57e:	3904      	subs	r1, #4
 810f580:	f853 2b04 	ldr.w	r2, [r3], #4
 810f584:	f841 2f04 	str.w	r2, [r1, #4]!
 810f588:	459c      	cmp	ip, r3
 810f58a:	d8f9      	bhi.n	810f580 <__lshift+0xc0>
 810f58c:	e7ea      	b.n	810f564 <__lshift+0xa4>
 810f58e:	bf00      	nop
 810f590:	08111861 	.word	0x08111861
 810f594:	08111872 	.word	0x08111872

0810f598 <__mcmp>:
 810f598:	690a      	ldr	r2, [r1, #16]
 810f59a:	4603      	mov	r3, r0
 810f59c:	6900      	ldr	r0, [r0, #16]
 810f59e:	1a80      	subs	r0, r0, r2
 810f5a0:	b530      	push	{r4, r5, lr}
 810f5a2:	d10e      	bne.n	810f5c2 <__mcmp+0x2a>
 810f5a4:	3314      	adds	r3, #20
 810f5a6:	3114      	adds	r1, #20
 810f5a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 810f5ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 810f5b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 810f5b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 810f5b8:	4295      	cmp	r5, r2
 810f5ba:	d003      	beq.n	810f5c4 <__mcmp+0x2c>
 810f5bc:	d205      	bcs.n	810f5ca <__mcmp+0x32>
 810f5be:	f04f 30ff 	mov.w	r0, #4294967295
 810f5c2:	bd30      	pop	{r4, r5, pc}
 810f5c4:	42a3      	cmp	r3, r4
 810f5c6:	d3f3      	bcc.n	810f5b0 <__mcmp+0x18>
 810f5c8:	e7fb      	b.n	810f5c2 <__mcmp+0x2a>
 810f5ca:	2001      	movs	r0, #1
 810f5cc:	e7f9      	b.n	810f5c2 <__mcmp+0x2a>
	...

0810f5d0 <__mdiff>:
 810f5d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f5d4:	4689      	mov	r9, r1
 810f5d6:	4606      	mov	r6, r0
 810f5d8:	4611      	mov	r1, r2
 810f5da:	4648      	mov	r0, r9
 810f5dc:	4614      	mov	r4, r2
 810f5de:	f7ff ffdb 	bl	810f598 <__mcmp>
 810f5e2:	1e05      	subs	r5, r0, #0
 810f5e4:	d112      	bne.n	810f60c <__mdiff+0x3c>
 810f5e6:	4629      	mov	r1, r5
 810f5e8:	4630      	mov	r0, r6
 810f5ea:	f7ff fd11 	bl	810f010 <_Balloc>
 810f5ee:	4602      	mov	r2, r0
 810f5f0:	b928      	cbnz	r0, 810f5fe <__mdiff+0x2e>
 810f5f2:	4b3f      	ldr	r3, [pc, #252]	@ (810f6f0 <__mdiff+0x120>)
 810f5f4:	f240 2137 	movw	r1, #567	@ 0x237
 810f5f8:	483e      	ldr	r0, [pc, #248]	@ (810f6f4 <__mdiff+0x124>)
 810f5fa:	f7fe fd9f 	bl	810e13c <__assert_func>
 810f5fe:	2301      	movs	r3, #1
 810f600:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810f604:	4610      	mov	r0, r2
 810f606:	b003      	add	sp, #12
 810f608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f60c:	bfbc      	itt	lt
 810f60e:	464b      	movlt	r3, r9
 810f610:	46a1      	movlt	r9, r4
 810f612:	4630      	mov	r0, r6
 810f614:	f8d9 1004 	ldr.w	r1, [r9, #4]
 810f618:	bfba      	itte	lt
 810f61a:	461c      	movlt	r4, r3
 810f61c:	2501      	movlt	r5, #1
 810f61e:	2500      	movge	r5, #0
 810f620:	f7ff fcf6 	bl	810f010 <_Balloc>
 810f624:	4602      	mov	r2, r0
 810f626:	b918      	cbnz	r0, 810f630 <__mdiff+0x60>
 810f628:	4b31      	ldr	r3, [pc, #196]	@ (810f6f0 <__mdiff+0x120>)
 810f62a:	f240 2145 	movw	r1, #581	@ 0x245
 810f62e:	e7e3      	b.n	810f5f8 <__mdiff+0x28>
 810f630:	f8d9 7010 	ldr.w	r7, [r9, #16]
 810f634:	6926      	ldr	r6, [r4, #16]
 810f636:	60c5      	str	r5, [r0, #12]
 810f638:	f109 0310 	add.w	r3, r9, #16
 810f63c:	f109 0514 	add.w	r5, r9, #20
 810f640:	f104 0e14 	add.w	lr, r4, #20
 810f644:	f100 0b14 	add.w	fp, r0, #20
 810f648:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 810f64c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 810f650:	9301      	str	r3, [sp, #4]
 810f652:	46d9      	mov	r9, fp
 810f654:	f04f 0c00 	mov.w	ip, #0
 810f658:	9b01      	ldr	r3, [sp, #4]
 810f65a:	f85e 0b04 	ldr.w	r0, [lr], #4
 810f65e:	f853 af04 	ldr.w	sl, [r3, #4]!
 810f662:	9301      	str	r3, [sp, #4]
 810f664:	fa1f f38a 	uxth.w	r3, sl
 810f668:	4619      	mov	r1, r3
 810f66a:	b283      	uxth	r3, r0
 810f66c:	1acb      	subs	r3, r1, r3
 810f66e:	0c00      	lsrs	r0, r0, #16
 810f670:	4463      	add	r3, ip
 810f672:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 810f676:	eb00 4023 	add.w	r0, r0, r3, asr #16
 810f67a:	b29b      	uxth	r3, r3
 810f67c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 810f680:	4576      	cmp	r6, lr
 810f682:	f849 3b04 	str.w	r3, [r9], #4
 810f686:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810f68a:	d8e5      	bhi.n	810f658 <__mdiff+0x88>
 810f68c:	1b33      	subs	r3, r6, r4
 810f68e:	3b15      	subs	r3, #21
 810f690:	f023 0303 	bic.w	r3, r3, #3
 810f694:	3415      	adds	r4, #21
 810f696:	3304      	adds	r3, #4
 810f698:	42a6      	cmp	r6, r4
 810f69a:	bf38      	it	cc
 810f69c:	2304      	movcc	r3, #4
 810f69e:	441d      	add	r5, r3
 810f6a0:	445b      	add	r3, fp
 810f6a2:	461e      	mov	r6, r3
 810f6a4:	462c      	mov	r4, r5
 810f6a6:	4544      	cmp	r4, r8
 810f6a8:	d30e      	bcc.n	810f6c8 <__mdiff+0xf8>
 810f6aa:	f108 0103 	add.w	r1, r8, #3
 810f6ae:	1b49      	subs	r1, r1, r5
 810f6b0:	f021 0103 	bic.w	r1, r1, #3
 810f6b4:	3d03      	subs	r5, #3
 810f6b6:	45a8      	cmp	r8, r5
 810f6b8:	bf38      	it	cc
 810f6ba:	2100      	movcc	r1, #0
 810f6bc:	440b      	add	r3, r1
 810f6be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810f6c2:	b191      	cbz	r1, 810f6ea <__mdiff+0x11a>
 810f6c4:	6117      	str	r7, [r2, #16]
 810f6c6:	e79d      	b.n	810f604 <__mdiff+0x34>
 810f6c8:	f854 1b04 	ldr.w	r1, [r4], #4
 810f6cc:	46e6      	mov	lr, ip
 810f6ce:	0c08      	lsrs	r0, r1, #16
 810f6d0:	fa1c fc81 	uxtah	ip, ip, r1
 810f6d4:	4471      	add	r1, lr
 810f6d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 810f6da:	b289      	uxth	r1, r1
 810f6dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 810f6e0:	f846 1b04 	str.w	r1, [r6], #4
 810f6e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810f6e8:	e7dd      	b.n	810f6a6 <__mdiff+0xd6>
 810f6ea:	3f01      	subs	r7, #1
 810f6ec:	e7e7      	b.n	810f6be <__mdiff+0xee>
 810f6ee:	bf00      	nop
 810f6f0:	08111861 	.word	0x08111861
 810f6f4:	08111872 	.word	0x08111872

0810f6f8 <__ulp>:
 810f6f8:	b082      	sub	sp, #8
 810f6fa:	ed8d 0b00 	vstr	d0, [sp]
 810f6fe:	9a01      	ldr	r2, [sp, #4]
 810f700:	4b0f      	ldr	r3, [pc, #60]	@ (810f740 <__ulp+0x48>)
 810f702:	4013      	ands	r3, r2
 810f704:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 810f708:	2b00      	cmp	r3, #0
 810f70a:	dc08      	bgt.n	810f71e <__ulp+0x26>
 810f70c:	425b      	negs	r3, r3
 810f70e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 810f712:	ea4f 5223 	mov.w	r2, r3, asr #20
 810f716:	da04      	bge.n	810f722 <__ulp+0x2a>
 810f718:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 810f71c:	4113      	asrs	r3, r2
 810f71e:	2200      	movs	r2, #0
 810f720:	e008      	b.n	810f734 <__ulp+0x3c>
 810f722:	f1a2 0314 	sub.w	r3, r2, #20
 810f726:	2b1e      	cmp	r3, #30
 810f728:	bfda      	itte	le
 810f72a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 810f72e:	40da      	lsrle	r2, r3
 810f730:	2201      	movgt	r2, #1
 810f732:	2300      	movs	r3, #0
 810f734:	4619      	mov	r1, r3
 810f736:	4610      	mov	r0, r2
 810f738:	ec41 0b10 	vmov	d0, r0, r1
 810f73c:	b002      	add	sp, #8
 810f73e:	4770      	bx	lr
 810f740:	7ff00000 	.word	0x7ff00000

0810f744 <__b2d>:
 810f744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810f748:	6906      	ldr	r6, [r0, #16]
 810f74a:	f100 0814 	add.w	r8, r0, #20
 810f74e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 810f752:	1f37      	subs	r7, r6, #4
 810f754:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810f758:	4610      	mov	r0, r2
 810f75a:	f7ff fd4b 	bl	810f1f4 <__hi0bits>
 810f75e:	f1c0 0320 	rsb	r3, r0, #32
 810f762:	280a      	cmp	r0, #10
 810f764:	600b      	str	r3, [r1, #0]
 810f766:	491b      	ldr	r1, [pc, #108]	@ (810f7d4 <__b2d+0x90>)
 810f768:	dc15      	bgt.n	810f796 <__b2d+0x52>
 810f76a:	f1c0 0c0b 	rsb	ip, r0, #11
 810f76e:	fa22 f30c 	lsr.w	r3, r2, ip
 810f772:	45b8      	cmp	r8, r7
 810f774:	ea43 0501 	orr.w	r5, r3, r1
 810f778:	bf34      	ite	cc
 810f77a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810f77e:	2300      	movcs	r3, #0
 810f780:	3015      	adds	r0, #21
 810f782:	fa02 f000 	lsl.w	r0, r2, r0
 810f786:	fa23 f30c 	lsr.w	r3, r3, ip
 810f78a:	4303      	orrs	r3, r0
 810f78c:	461c      	mov	r4, r3
 810f78e:	ec45 4b10 	vmov	d0, r4, r5
 810f792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810f796:	45b8      	cmp	r8, r7
 810f798:	bf3a      	itte	cc
 810f79a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810f79e:	f1a6 0708 	subcc.w	r7, r6, #8
 810f7a2:	2300      	movcs	r3, #0
 810f7a4:	380b      	subs	r0, #11
 810f7a6:	d012      	beq.n	810f7ce <__b2d+0x8a>
 810f7a8:	f1c0 0120 	rsb	r1, r0, #32
 810f7ac:	fa23 f401 	lsr.w	r4, r3, r1
 810f7b0:	4082      	lsls	r2, r0
 810f7b2:	4322      	orrs	r2, r4
 810f7b4:	4547      	cmp	r7, r8
 810f7b6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 810f7ba:	bf8c      	ite	hi
 810f7bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 810f7c0:	2200      	movls	r2, #0
 810f7c2:	4083      	lsls	r3, r0
 810f7c4:	40ca      	lsrs	r2, r1
 810f7c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 810f7ca:	4313      	orrs	r3, r2
 810f7cc:	e7de      	b.n	810f78c <__b2d+0x48>
 810f7ce:	ea42 0501 	orr.w	r5, r2, r1
 810f7d2:	e7db      	b.n	810f78c <__b2d+0x48>
 810f7d4:	3ff00000 	.word	0x3ff00000

0810f7d8 <__d2b>:
 810f7d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810f7dc:	460f      	mov	r7, r1
 810f7de:	2101      	movs	r1, #1
 810f7e0:	ec59 8b10 	vmov	r8, r9, d0
 810f7e4:	4616      	mov	r6, r2
 810f7e6:	f7ff fc13 	bl	810f010 <_Balloc>
 810f7ea:	4604      	mov	r4, r0
 810f7ec:	b930      	cbnz	r0, 810f7fc <__d2b+0x24>
 810f7ee:	4602      	mov	r2, r0
 810f7f0:	4b23      	ldr	r3, [pc, #140]	@ (810f880 <__d2b+0xa8>)
 810f7f2:	4824      	ldr	r0, [pc, #144]	@ (810f884 <__d2b+0xac>)
 810f7f4:	f240 310f 	movw	r1, #783	@ 0x30f
 810f7f8:	f7fe fca0 	bl	810e13c <__assert_func>
 810f7fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810f800:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810f804:	b10d      	cbz	r5, 810f80a <__d2b+0x32>
 810f806:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810f80a:	9301      	str	r3, [sp, #4]
 810f80c:	f1b8 0300 	subs.w	r3, r8, #0
 810f810:	d023      	beq.n	810f85a <__d2b+0x82>
 810f812:	4668      	mov	r0, sp
 810f814:	9300      	str	r3, [sp, #0]
 810f816:	f7ff fd0c 	bl	810f232 <__lo0bits>
 810f81a:	e9dd 1200 	ldrd	r1, r2, [sp]
 810f81e:	b1d0      	cbz	r0, 810f856 <__d2b+0x7e>
 810f820:	f1c0 0320 	rsb	r3, r0, #32
 810f824:	fa02 f303 	lsl.w	r3, r2, r3
 810f828:	430b      	orrs	r3, r1
 810f82a:	40c2      	lsrs	r2, r0
 810f82c:	6163      	str	r3, [r4, #20]
 810f82e:	9201      	str	r2, [sp, #4]
 810f830:	9b01      	ldr	r3, [sp, #4]
 810f832:	61a3      	str	r3, [r4, #24]
 810f834:	2b00      	cmp	r3, #0
 810f836:	bf0c      	ite	eq
 810f838:	2201      	moveq	r2, #1
 810f83a:	2202      	movne	r2, #2
 810f83c:	6122      	str	r2, [r4, #16]
 810f83e:	b1a5      	cbz	r5, 810f86a <__d2b+0x92>
 810f840:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 810f844:	4405      	add	r5, r0
 810f846:	603d      	str	r5, [r7, #0]
 810f848:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 810f84c:	6030      	str	r0, [r6, #0]
 810f84e:	4620      	mov	r0, r4
 810f850:	b003      	add	sp, #12
 810f852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810f856:	6161      	str	r1, [r4, #20]
 810f858:	e7ea      	b.n	810f830 <__d2b+0x58>
 810f85a:	a801      	add	r0, sp, #4
 810f85c:	f7ff fce9 	bl	810f232 <__lo0bits>
 810f860:	9b01      	ldr	r3, [sp, #4]
 810f862:	6163      	str	r3, [r4, #20]
 810f864:	3020      	adds	r0, #32
 810f866:	2201      	movs	r2, #1
 810f868:	e7e8      	b.n	810f83c <__d2b+0x64>
 810f86a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810f86e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 810f872:	6038      	str	r0, [r7, #0]
 810f874:	6918      	ldr	r0, [r3, #16]
 810f876:	f7ff fcbd 	bl	810f1f4 <__hi0bits>
 810f87a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810f87e:	e7e5      	b.n	810f84c <__d2b+0x74>
 810f880:	08111861 	.word	0x08111861
 810f884:	08111872 	.word	0x08111872

0810f888 <__ratio>:
 810f888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f88c:	b085      	sub	sp, #20
 810f88e:	e9cd 1000 	strd	r1, r0, [sp]
 810f892:	a902      	add	r1, sp, #8
 810f894:	f7ff ff56 	bl	810f744 <__b2d>
 810f898:	9800      	ldr	r0, [sp, #0]
 810f89a:	a903      	add	r1, sp, #12
 810f89c:	ec55 4b10 	vmov	r4, r5, d0
 810f8a0:	f7ff ff50 	bl	810f744 <__b2d>
 810f8a4:	9b01      	ldr	r3, [sp, #4]
 810f8a6:	6919      	ldr	r1, [r3, #16]
 810f8a8:	9b00      	ldr	r3, [sp, #0]
 810f8aa:	691b      	ldr	r3, [r3, #16]
 810f8ac:	1ac9      	subs	r1, r1, r3
 810f8ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 810f8b2:	1a9b      	subs	r3, r3, r2
 810f8b4:	ec5b ab10 	vmov	sl, fp, d0
 810f8b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 810f8bc:	2b00      	cmp	r3, #0
 810f8be:	bfce      	itee	gt
 810f8c0:	462a      	movgt	r2, r5
 810f8c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810f8c6:	465a      	movle	r2, fp
 810f8c8:	462f      	mov	r7, r5
 810f8ca:	46d9      	mov	r9, fp
 810f8cc:	bfcc      	ite	gt
 810f8ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810f8d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 810f8d6:	464b      	mov	r3, r9
 810f8d8:	4652      	mov	r2, sl
 810f8da:	4620      	mov	r0, r4
 810f8dc:	4639      	mov	r1, r7
 810f8de:	f7f1 f83d 	bl	810095c <__aeabi_ddiv>
 810f8e2:	ec41 0b10 	vmov	d0, r0, r1
 810f8e6:	b005      	add	sp, #20
 810f8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810f8ec <__copybits>:
 810f8ec:	3901      	subs	r1, #1
 810f8ee:	b570      	push	{r4, r5, r6, lr}
 810f8f0:	1149      	asrs	r1, r1, #5
 810f8f2:	6914      	ldr	r4, [r2, #16]
 810f8f4:	3101      	adds	r1, #1
 810f8f6:	f102 0314 	add.w	r3, r2, #20
 810f8fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810f8fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810f902:	1f05      	subs	r5, r0, #4
 810f904:	42a3      	cmp	r3, r4
 810f906:	d30c      	bcc.n	810f922 <__copybits+0x36>
 810f908:	1aa3      	subs	r3, r4, r2
 810f90a:	3b11      	subs	r3, #17
 810f90c:	f023 0303 	bic.w	r3, r3, #3
 810f910:	3211      	adds	r2, #17
 810f912:	42a2      	cmp	r2, r4
 810f914:	bf88      	it	hi
 810f916:	2300      	movhi	r3, #0
 810f918:	4418      	add	r0, r3
 810f91a:	2300      	movs	r3, #0
 810f91c:	4288      	cmp	r0, r1
 810f91e:	d305      	bcc.n	810f92c <__copybits+0x40>
 810f920:	bd70      	pop	{r4, r5, r6, pc}
 810f922:	f853 6b04 	ldr.w	r6, [r3], #4
 810f926:	f845 6f04 	str.w	r6, [r5, #4]!
 810f92a:	e7eb      	b.n	810f904 <__copybits+0x18>
 810f92c:	f840 3b04 	str.w	r3, [r0], #4
 810f930:	e7f4      	b.n	810f91c <__copybits+0x30>

0810f932 <__any_on>:
 810f932:	f100 0214 	add.w	r2, r0, #20
 810f936:	6900      	ldr	r0, [r0, #16]
 810f938:	114b      	asrs	r3, r1, #5
 810f93a:	4298      	cmp	r0, r3
 810f93c:	b510      	push	{r4, lr}
 810f93e:	db11      	blt.n	810f964 <__any_on+0x32>
 810f940:	dd0a      	ble.n	810f958 <__any_on+0x26>
 810f942:	f011 011f 	ands.w	r1, r1, #31
 810f946:	d007      	beq.n	810f958 <__any_on+0x26>
 810f948:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810f94c:	fa24 f001 	lsr.w	r0, r4, r1
 810f950:	fa00 f101 	lsl.w	r1, r0, r1
 810f954:	428c      	cmp	r4, r1
 810f956:	d10b      	bne.n	810f970 <__any_on+0x3e>
 810f958:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810f95c:	4293      	cmp	r3, r2
 810f95e:	d803      	bhi.n	810f968 <__any_on+0x36>
 810f960:	2000      	movs	r0, #0
 810f962:	bd10      	pop	{r4, pc}
 810f964:	4603      	mov	r3, r0
 810f966:	e7f7      	b.n	810f958 <__any_on+0x26>
 810f968:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810f96c:	2900      	cmp	r1, #0
 810f96e:	d0f5      	beq.n	810f95c <__any_on+0x2a>
 810f970:	2001      	movs	r0, #1
 810f972:	e7f6      	b.n	810f962 <__any_on+0x30>

0810f974 <sulp>:
 810f974:	b570      	push	{r4, r5, r6, lr}
 810f976:	4604      	mov	r4, r0
 810f978:	460d      	mov	r5, r1
 810f97a:	ec45 4b10 	vmov	d0, r4, r5
 810f97e:	4616      	mov	r6, r2
 810f980:	f7ff feba 	bl	810f6f8 <__ulp>
 810f984:	ec51 0b10 	vmov	r0, r1, d0
 810f988:	b17e      	cbz	r6, 810f9aa <sulp+0x36>
 810f98a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810f98e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 810f992:	2b00      	cmp	r3, #0
 810f994:	dd09      	ble.n	810f9aa <sulp+0x36>
 810f996:	051b      	lsls	r3, r3, #20
 810f998:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 810f99c:	2400      	movs	r4, #0
 810f99e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 810f9a2:	4622      	mov	r2, r4
 810f9a4:	462b      	mov	r3, r5
 810f9a6:	f7f0 feaf 	bl	8100708 <__aeabi_dmul>
 810f9aa:	ec41 0b10 	vmov	d0, r0, r1
 810f9ae:	bd70      	pop	{r4, r5, r6, pc}

0810f9b0 <_strtod_l>:
 810f9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f9b4:	b09f      	sub	sp, #124	@ 0x7c
 810f9b6:	460c      	mov	r4, r1
 810f9b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 810f9ba:	2200      	movs	r2, #0
 810f9bc:	921a      	str	r2, [sp, #104]	@ 0x68
 810f9be:	9005      	str	r0, [sp, #20]
 810f9c0:	f04f 0a00 	mov.w	sl, #0
 810f9c4:	f04f 0b00 	mov.w	fp, #0
 810f9c8:	460a      	mov	r2, r1
 810f9ca:	9219      	str	r2, [sp, #100]	@ 0x64
 810f9cc:	7811      	ldrb	r1, [r2, #0]
 810f9ce:	292b      	cmp	r1, #43	@ 0x2b
 810f9d0:	d04a      	beq.n	810fa68 <_strtod_l+0xb8>
 810f9d2:	d838      	bhi.n	810fa46 <_strtod_l+0x96>
 810f9d4:	290d      	cmp	r1, #13
 810f9d6:	d832      	bhi.n	810fa3e <_strtod_l+0x8e>
 810f9d8:	2908      	cmp	r1, #8
 810f9da:	d832      	bhi.n	810fa42 <_strtod_l+0x92>
 810f9dc:	2900      	cmp	r1, #0
 810f9de:	d03b      	beq.n	810fa58 <_strtod_l+0xa8>
 810f9e0:	2200      	movs	r2, #0
 810f9e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 810f9e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 810f9e6:	782a      	ldrb	r2, [r5, #0]
 810f9e8:	2a30      	cmp	r2, #48	@ 0x30
 810f9ea:	f040 80b3 	bne.w	810fb54 <_strtod_l+0x1a4>
 810f9ee:	786a      	ldrb	r2, [r5, #1]
 810f9f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 810f9f4:	2a58      	cmp	r2, #88	@ 0x58
 810f9f6:	d16e      	bne.n	810fad6 <_strtod_l+0x126>
 810f9f8:	9302      	str	r3, [sp, #8]
 810f9fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810f9fc:	9301      	str	r3, [sp, #4]
 810f9fe:	ab1a      	add	r3, sp, #104	@ 0x68
 810fa00:	9300      	str	r3, [sp, #0]
 810fa02:	4a8e      	ldr	r2, [pc, #568]	@ (810fc3c <_strtod_l+0x28c>)
 810fa04:	9805      	ldr	r0, [sp, #20]
 810fa06:	ab1b      	add	r3, sp, #108	@ 0x6c
 810fa08:	a919      	add	r1, sp, #100	@ 0x64
 810fa0a:	f001 fadb 	bl	8110fc4 <__gethex>
 810fa0e:	f010 060f 	ands.w	r6, r0, #15
 810fa12:	4604      	mov	r4, r0
 810fa14:	d005      	beq.n	810fa22 <_strtod_l+0x72>
 810fa16:	2e06      	cmp	r6, #6
 810fa18:	d128      	bne.n	810fa6c <_strtod_l+0xbc>
 810fa1a:	3501      	adds	r5, #1
 810fa1c:	2300      	movs	r3, #0
 810fa1e:	9519      	str	r5, [sp, #100]	@ 0x64
 810fa20:	930b      	str	r3, [sp, #44]	@ 0x2c
 810fa22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810fa24:	2b00      	cmp	r3, #0
 810fa26:	f040 858e 	bne.w	8110546 <_strtod_l+0xb96>
 810fa2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810fa2c:	b1cb      	cbz	r3, 810fa62 <_strtod_l+0xb2>
 810fa2e:	4652      	mov	r2, sl
 810fa30:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 810fa34:	ec43 2b10 	vmov	d0, r2, r3
 810fa38:	b01f      	add	sp, #124	@ 0x7c
 810fa3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810fa3e:	2920      	cmp	r1, #32
 810fa40:	d1ce      	bne.n	810f9e0 <_strtod_l+0x30>
 810fa42:	3201      	adds	r2, #1
 810fa44:	e7c1      	b.n	810f9ca <_strtod_l+0x1a>
 810fa46:	292d      	cmp	r1, #45	@ 0x2d
 810fa48:	d1ca      	bne.n	810f9e0 <_strtod_l+0x30>
 810fa4a:	2101      	movs	r1, #1
 810fa4c:	910b      	str	r1, [sp, #44]	@ 0x2c
 810fa4e:	1c51      	adds	r1, r2, #1
 810fa50:	9119      	str	r1, [sp, #100]	@ 0x64
 810fa52:	7852      	ldrb	r2, [r2, #1]
 810fa54:	2a00      	cmp	r2, #0
 810fa56:	d1c5      	bne.n	810f9e4 <_strtod_l+0x34>
 810fa58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810fa5a:	9419      	str	r4, [sp, #100]	@ 0x64
 810fa5c:	2b00      	cmp	r3, #0
 810fa5e:	f040 8570 	bne.w	8110542 <_strtod_l+0xb92>
 810fa62:	4652      	mov	r2, sl
 810fa64:	465b      	mov	r3, fp
 810fa66:	e7e5      	b.n	810fa34 <_strtod_l+0x84>
 810fa68:	2100      	movs	r1, #0
 810fa6a:	e7ef      	b.n	810fa4c <_strtod_l+0x9c>
 810fa6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 810fa6e:	b13a      	cbz	r2, 810fa80 <_strtod_l+0xd0>
 810fa70:	2135      	movs	r1, #53	@ 0x35
 810fa72:	a81c      	add	r0, sp, #112	@ 0x70
 810fa74:	f7ff ff3a 	bl	810f8ec <__copybits>
 810fa78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810fa7a:	9805      	ldr	r0, [sp, #20]
 810fa7c:	f7ff fb08 	bl	810f090 <_Bfree>
 810fa80:	3e01      	subs	r6, #1
 810fa82:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 810fa84:	2e04      	cmp	r6, #4
 810fa86:	d806      	bhi.n	810fa96 <_strtod_l+0xe6>
 810fa88:	e8df f006 	tbb	[pc, r6]
 810fa8c:	201d0314 	.word	0x201d0314
 810fa90:	14          	.byte	0x14
 810fa91:	00          	.byte	0x00
 810fa92:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 810fa96:	05e1      	lsls	r1, r4, #23
 810fa98:	bf48      	it	mi
 810fa9a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 810fa9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810faa2:	0d1b      	lsrs	r3, r3, #20
 810faa4:	051b      	lsls	r3, r3, #20
 810faa6:	2b00      	cmp	r3, #0
 810faa8:	d1bb      	bne.n	810fa22 <_strtod_l+0x72>
 810faaa:	f7fe fb05 	bl	810e0b8 <__errno>
 810faae:	2322      	movs	r3, #34	@ 0x22
 810fab0:	6003      	str	r3, [r0, #0]
 810fab2:	e7b6      	b.n	810fa22 <_strtod_l+0x72>
 810fab4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 810fab8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 810fabc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 810fac0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810fac4:	e7e7      	b.n	810fa96 <_strtod_l+0xe6>
 810fac6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 810fc44 <_strtod_l+0x294>
 810faca:	e7e4      	b.n	810fa96 <_strtod_l+0xe6>
 810facc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 810fad0:	f04f 3aff 	mov.w	sl, #4294967295
 810fad4:	e7df      	b.n	810fa96 <_strtod_l+0xe6>
 810fad6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810fad8:	1c5a      	adds	r2, r3, #1
 810fada:	9219      	str	r2, [sp, #100]	@ 0x64
 810fadc:	785b      	ldrb	r3, [r3, #1]
 810fade:	2b30      	cmp	r3, #48	@ 0x30
 810fae0:	d0f9      	beq.n	810fad6 <_strtod_l+0x126>
 810fae2:	2b00      	cmp	r3, #0
 810fae4:	d09d      	beq.n	810fa22 <_strtod_l+0x72>
 810fae6:	2301      	movs	r3, #1
 810fae8:	9309      	str	r3, [sp, #36]	@ 0x24
 810faea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810faec:	930c      	str	r3, [sp, #48]	@ 0x30
 810faee:	2300      	movs	r3, #0
 810faf0:	9308      	str	r3, [sp, #32]
 810faf2:	930a      	str	r3, [sp, #40]	@ 0x28
 810faf4:	461f      	mov	r7, r3
 810faf6:	220a      	movs	r2, #10
 810faf8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 810fafa:	7805      	ldrb	r5, [r0, #0]
 810fafc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 810fb00:	b2d9      	uxtb	r1, r3
 810fb02:	2909      	cmp	r1, #9
 810fb04:	d928      	bls.n	810fb58 <_strtod_l+0x1a8>
 810fb06:	494e      	ldr	r1, [pc, #312]	@ (810fc40 <_strtod_l+0x290>)
 810fb08:	2201      	movs	r2, #1
 810fb0a:	f001 f98b 	bl	8110e24 <strncmp>
 810fb0e:	2800      	cmp	r0, #0
 810fb10:	d032      	beq.n	810fb78 <_strtod_l+0x1c8>
 810fb12:	2000      	movs	r0, #0
 810fb14:	462a      	mov	r2, r5
 810fb16:	4681      	mov	r9, r0
 810fb18:	463d      	mov	r5, r7
 810fb1a:	4603      	mov	r3, r0
 810fb1c:	2a65      	cmp	r2, #101	@ 0x65
 810fb1e:	d001      	beq.n	810fb24 <_strtod_l+0x174>
 810fb20:	2a45      	cmp	r2, #69	@ 0x45
 810fb22:	d114      	bne.n	810fb4e <_strtod_l+0x19e>
 810fb24:	b91d      	cbnz	r5, 810fb2e <_strtod_l+0x17e>
 810fb26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810fb28:	4302      	orrs	r2, r0
 810fb2a:	d095      	beq.n	810fa58 <_strtod_l+0xa8>
 810fb2c:	2500      	movs	r5, #0
 810fb2e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 810fb30:	1c62      	adds	r2, r4, #1
 810fb32:	9219      	str	r2, [sp, #100]	@ 0x64
 810fb34:	7862      	ldrb	r2, [r4, #1]
 810fb36:	2a2b      	cmp	r2, #43	@ 0x2b
 810fb38:	d077      	beq.n	810fc2a <_strtod_l+0x27a>
 810fb3a:	2a2d      	cmp	r2, #45	@ 0x2d
 810fb3c:	d07b      	beq.n	810fc36 <_strtod_l+0x286>
 810fb3e:	f04f 0c00 	mov.w	ip, #0
 810fb42:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 810fb46:	2909      	cmp	r1, #9
 810fb48:	f240 8082 	bls.w	810fc50 <_strtod_l+0x2a0>
 810fb4c:	9419      	str	r4, [sp, #100]	@ 0x64
 810fb4e:	f04f 0800 	mov.w	r8, #0
 810fb52:	e0a2      	b.n	810fc9a <_strtod_l+0x2ea>
 810fb54:	2300      	movs	r3, #0
 810fb56:	e7c7      	b.n	810fae8 <_strtod_l+0x138>
 810fb58:	2f08      	cmp	r7, #8
 810fb5a:	bfd5      	itete	le
 810fb5c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 810fb5e:	9908      	ldrgt	r1, [sp, #32]
 810fb60:	fb02 3301 	mlale	r3, r2, r1, r3
 810fb64:	fb02 3301 	mlagt	r3, r2, r1, r3
 810fb68:	f100 0001 	add.w	r0, r0, #1
 810fb6c:	bfd4      	ite	le
 810fb6e:	930a      	strle	r3, [sp, #40]	@ 0x28
 810fb70:	9308      	strgt	r3, [sp, #32]
 810fb72:	3701      	adds	r7, #1
 810fb74:	9019      	str	r0, [sp, #100]	@ 0x64
 810fb76:	e7bf      	b.n	810faf8 <_strtod_l+0x148>
 810fb78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810fb7a:	1c5a      	adds	r2, r3, #1
 810fb7c:	9219      	str	r2, [sp, #100]	@ 0x64
 810fb7e:	785a      	ldrb	r2, [r3, #1]
 810fb80:	b37f      	cbz	r7, 810fbe2 <_strtod_l+0x232>
 810fb82:	4681      	mov	r9, r0
 810fb84:	463d      	mov	r5, r7
 810fb86:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 810fb8a:	2b09      	cmp	r3, #9
 810fb8c:	d912      	bls.n	810fbb4 <_strtod_l+0x204>
 810fb8e:	2301      	movs	r3, #1
 810fb90:	e7c4      	b.n	810fb1c <_strtod_l+0x16c>
 810fb92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810fb94:	1c5a      	adds	r2, r3, #1
 810fb96:	9219      	str	r2, [sp, #100]	@ 0x64
 810fb98:	785a      	ldrb	r2, [r3, #1]
 810fb9a:	3001      	adds	r0, #1
 810fb9c:	2a30      	cmp	r2, #48	@ 0x30
 810fb9e:	d0f8      	beq.n	810fb92 <_strtod_l+0x1e2>
 810fba0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 810fba4:	2b08      	cmp	r3, #8
 810fba6:	f200 84d3 	bhi.w	8110550 <_strtod_l+0xba0>
 810fbaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810fbac:	930c      	str	r3, [sp, #48]	@ 0x30
 810fbae:	4681      	mov	r9, r0
 810fbb0:	2000      	movs	r0, #0
 810fbb2:	4605      	mov	r5, r0
 810fbb4:	3a30      	subs	r2, #48	@ 0x30
 810fbb6:	f100 0301 	add.w	r3, r0, #1
 810fbba:	d02a      	beq.n	810fc12 <_strtod_l+0x262>
 810fbbc:	4499      	add	r9, r3
 810fbbe:	eb00 0c05 	add.w	ip, r0, r5
 810fbc2:	462b      	mov	r3, r5
 810fbc4:	210a      	movs	r1, #10
 810fbc6:	4563      	cmp	r3, ip
 810fbc8:	d10d      	bne.n	810fbe6 <_strtod_l+0x236>
 810fbca:	1c69      	adds	r1, r5, #1
 810fbcc:	4401      	add	r1, r0
 810fbce:	4428      	add	r0, r5
 810fbd0:	2808      	cmp	r0, #8
 810fbd2:	dc16      	bgt.n	810fc02 <_strtod_l+0x252>
 810fbd4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 810fbd6:	230a      	movs	r3, #10
 810fbd8:	fb03 2300 	mla	r3, r3, r0, r2
 810fbdc:	930a      	str	r3, [sp, #40]	@ 0x28
 810fbde:	2300      	movs	r3, #0
 810fbe0:	e018      	b.n	810fc14 <_strtod_l+0x264>
 810fbe2:	4638      	mov	r0, r7
 810fbe4:	e7da      	b.n	810fb9c <_strtod_l+0x1ec>
 810fbe6:	2b08      	cmp	r3, #8
 810fbe8:	f103 0301 	add.w	r3, r3, #1
 810fbec:	dc03      	bgt.n	810fbf6 <_strtod_l+0x246>
 810fbee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 810fbf0:	434e      	muls	r6, r1
 810fbf2:	960a      	str	r6, [sp, #40]	@ 0x28
 810fbf4:	e7e7      	b.n	810fbc6 <_strtod_l+0x216>
 810fbf6:	2b10      	cmp	r3, #16
 810fbf8:	bfde      	ittt	le
 810fbfa:	9e08      	ldrle	r6, [sp, #32]
 810fbfc:	434e      	mulle	r6, r1
 810fbfe:	9608      	strle	r6, [sp, #32]
 810fc00:	e7e1      	b.n	810fbc6 <_strtod_l+0x216>
 810fc02:	280f      	cmp	r0, #15
 810fc04:	dceb      	bgt.n	810fbde <_strtod_l+0x22e>
 810fc06:	9808      	ldr	r0, [sp, #32]
 810fc08:	230a      	movs	r3, #10
 810fc0a:	fb03 2300 	mla	r3, r3, r0, r2
 810fc0e:	9308      	str	r3, [sp, #32]
 810fc10:	e7e5      	b.n	810fbde <_strtod_l+0x22e>
 810fc12:	4629      	mov	r1, r5
 810fc14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810fc16:	1c50      	adds	r0, r2, #1
 810fc18:	9019      	str	r0, [sp, #100]	@ 0x64
 810fc1a:	7852      	ldrb	r2, [r2, #1]
 810fc1c:	4618      	mov	r0, r3
 810fc1e:	460d      	mov	r5, r1
 810fc20:	e7b1      	b.n	810fb86 <_strtod_l+0x1d6>
 810fc22:	f04f 0900 	mov.w	r9, #0
 810fc26:	2301      	movs	r3, #1
 810fc28:	e77d      	b.n	810fb26 <_strtod_l+0x176>
 810fc2a:	f04f 0c00 	mov.w	ip, #0
 810fc2e:	1ca2      	adds	r2, r4, #2
 810fc30:	9219      	str	r2, [sp, #100]	@ 0x64
 810fc32:	78a2      	ldrb	r2, [r4, #2]
 810fc34:	e785      	b.n	810fb42 <_strtod_l+0x192>
 810fc36:	f04f 0c01 	mov.w	ip, #1
 810fc3a:	e7f8      	b.n	810fc2e <_strtod_l+0x27e>
 810fc3c:	081119e0 	.word	0x081119e0
 810fc40:	081119c8 	.word	0x081119c8
 810fc44:	7ff00000 	.word	0x7ff00000
 810fc48:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810fc4a:	1c51      	adds	r1, r2, #1
 810fc4c:	9119      	str	r1, [sp, #100]	@ 0x64
 810fc4e:	7852      	ldrb	r2, [r2, #1]
 810fc50:	2a30      	cmp	r2, #48	@ 0x30
 810fc52:	d0f9      	beq.n	810fc48 <_strtod_l+0x298>
 810fc54:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 810fc58:	2908      	cmp	r1, #8
 810fc5a:	f63f af78 	bhi.w	810fb4e <_strtod_l+0x19e>
 810fc5e:	3a30      	subs	r2, #48	@ 0x30
 810fc60:	920e      	str	r2, [sp, #56]	@ 0x38
 810fc62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810fc64:	920f      	str	r2, [sp, #60]	@ 0x3c
 810fc66:	f04f 080a 	mov.w	r8, #10
 810fc6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810fc6c:	1c56      	adds	r6, r2, #1
 810fc6e:	9619      	str	r6, [sp, #100]	@ 0x64
 810fc70:	7852      	ldrb	r2, [r2, #1]
 810fc72:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 810fc76:	f1be 0f09 	cmp.w	lr, #9
 810fc7a:	d939      	bls.n	810fcf0 <_strtod_l+0x340>
 810fc7c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 810fc7e:	1a76      	subs	r6, r6, r1
 810fc80:	2e08      	cmp	r6, #8
 810fc82:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 810fc86:	dc03      	bgt.n	810fc90 <_strtod_l+0x2e0>
 810fc88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 810fc8a:	4588      	cmp	r8, r1
 810fc8c:	bfa8      	it	ge
 810fc8e:	4688      	movge	r8, r1
 810fc90:	f1bc 0f00 	cmp.w	ip, #0
 810fc94:	d001      	beq.n	810fc9a <_strtod_l+0x2ea>
 810fc96:	f1c8 0800 	rsb	r8, r8, #0
 810fc9a:	2d00      	cmp	r5, #0
 810fc9c:	d14e      	bne.n	810fd3c <_strtod_l+0x38c>
 810fc9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810fca0:	4308      	orrs	r0, r1
 810fca2:	f47f aebe 	bne.w	810fa22 <_strtod_l+0x72>
 810fca6:	2b00      	cmp	r3, #0
 810fca8:	f47f aed6 	bne.w	810fa58 <_strtod_l+0xa8>
 810fcac:	2a69      	cmp	r2, #105	@ 0x69
 810fcae:	d028      	beq.n	810fd02 <_strtod_l+0x352>
 810fcb0:	dc25      	bgt.n	810fcfe <_strtod_l+0x34e>
 810fcb2:	2a49      	cmp	r2, #73	@ 0x49
 810fcb4:	d025      	beq.n	810fd02 <_strtod_l+0x352>
 810fcb6:	2a4e      	cmp	r2, #78	@ 0x4e
 810fcb8:	f47f aece 	bne.w	810fa58 <_strtod_l+0xa8>
 810fcbc:	499b      	ldr	r1, [pc, #620]	@ (810ff2c <_strtod_l+0x57c>)
 810fcbe:	a819      	add	r0, sp, #100	@ 0x64
 810fcc0:	f001 fba2 	bl	8111408 <__match>
 810fcc4:	2800      	cmp	r0, #0
 810fcc6:	f43f aec7 	beq.w	810fa58 <_strtod_l+0xa8>
 810fcca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810fccc:	781b      	ldrb	r3, [r3, #0]
 810fcce:	2b28      	cmp	r3, #40	@ 0x28
 810fcd0:	d12e      	bne.n	810fd30 <_strtod_l+0x380>
 810fcd2:	4997      	ldr	r1, [pc, #604]	@ (810ff30 <_strtod_l+0x580>)
 810fcd4:	aa1c      	add	r2, sp, #112	@ 0x70
 810fcd6:	a819      	add	r0, sp, #100	@ 0x64
 810fcd8:	f001 fbaa 	bl	8111430 <__hexnan>
 810fcdc:	2805      	cmp	r0, #5
 810fcde:	d127      	bne.n	810fd30 <_strtod_l+0x380>
 810fce0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 810fce2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 810fce6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 810fcea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 810fcee:	e698      	b.n	810fa22 <_strtod_l+0x72>
 810fcf0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 810fcf2:	fb08 2101 	mla	r1, r8, r1, r2
 810fcf6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 810fcfa:	920e      	str	r2, [sp, #56]	@ 0x38
 810fcfc:	e7b5      	b.n	810fc6a <_strtod_l+0x2ba>
 810fcfe:	2a6e      	cmp	r2, #110	@ 0x6e
 810fd00:	e7da      	b.n	810fcb8 <_strtod_l+0x308>
 810fd02:	498c      	ldr	r1, [pc, #560]	@ (810ff34 <_strtod_l+0x584>)
 810fd04:	a819      	add	r0, sp, #100	@ 0x64
 810fd06:	f001 fb7f 	bl	8111408 <__match>
 810fd0a:	2800      	cmp	r0, #0
 810fd0c:	f43f aea4 	beq.w	810fa58 <_strtod_l+0xa8>
 810fd10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810fd12:	4989      	ldr	r1, [pc, #548]	@ (810ff38 <_strtod_l+0x588>)
 810fd14:	3b01      	subs	r3, #1
 810fd16:	a819      	add	r0, sp, #100	@ 0x64
 810fd18:	9319      	str	r3, [sp, #100]	@ 0x64
 810fd1a:	f001 fb75 	bl	8111408 <__match>
 810fd1e:	b910      	cbnz	r0, 810fd26 <_strtod_l+0x376>
 810fd20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810fd22:	3301      	adds	r3, #1
 810fd24:	9319      	str	r3, [sp, #100]	@ 0x64
 810fd26:	f8df b220 	ldr.w	fp, [pc, #544]	@ 810ff48 <_strtod_l+0x598>
 810fd2a:	f04f 0a00 	mov.w	sl, #0
 810fd2e:	e678      	b.n	810fa22 <_strtod_l+0x72>
 810fd30:	4882      	ldr	r0, [pc, #520]	@ (810ff3c <_strtod_l+0x58c>)
 810fd32:	f001 f8bd 	bl	8110eb0 <nan>
 810fd36:	ec5b ab10 	vmov	sl, fp, d0
 810fd3a:	e672      	b.n	810fa22 <_strtod_l+0x72>
 810fd3c:	eba8 0309 	sub.w	r3, r8, r9
 810fd40:	980a      	ldr	r0, [sp, #40]	@ 0x28
 810fd42:	9309      	str	r3, [sp, #36]	@ 0x24
 810fd44:	2f00      	cmp	r7, #0
 810fd46:	bf08      	it	eq
 810fd48:	462f      	moveq	r7, r5
 810fd4a:	2d10      	cmp	r5, #16
 810fd4c:	462c      	mov	r4, r5
 810fd4e:	bfa8      	it	ge
 810fd50:	2410      	movge	r4, #16
 810fd52:	f7f0 fc5f 	bl	8100614 <__aeabi_ui2d>
 810fd56:	2d09      	cmp	r5, #9
 810fd58:	4682      	mov	sl, r0
 810fd5a:	468b      	mov	fp, r1
 810fd5c:	dc13      	bgt.n	810fd86 <_strtod_l+0x3d6>
 810fd5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810fd60:	2b00      	cmp	r3, #0
 810fd62:	f43f ae5e 	beq.w	810fa22 <_strtod_l+0x72>
 810fd66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810fd68:	dd78      	ble.n	810fe5c <_strtod_l+0x4ac>
 810fd6a:	2b16      	cmp	r3, #22
 810fd6c:	dc5f      	bgt.n	810fe2e <_strtod_l+0x47e>
 810fd6e:	4974      	ldr	r1, [pc, #464]	@ (810ff40 <_strtod_l+0x590>)
 810fd70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810fd74:	e9d1 0100 	ldrd	r0, r1, [r1]
 810fd78:	4652      	mov	r2, sl
 810fd7a:	465b      	mov	r3, fp
 810fd7c:	f7f0 fcc4 	bl	8100708 <__aeabi_dmul>
 810fd80:	4682      	mov	sl, r0
 810fd82:	468b      	mov	fp, r1
 810fd84:	e64d      	b.n	810fa22 <_strtod_l+0x72>
 810fd86:	4b6e      	ldr	r3, [pc, #440]	@ (810ff40 <_strtod_l+0x590>)
 810fd88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810fd8c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 810fd90:	f7f0 fcba 	bl	8100708 <__aeabi_dmul>
 810fd94:	4682      	mov	sl, r0
 810fd96:	9808      	ldr	r0, [sp, #32]
 810fd98:	468b      	mov	fp, r1
 810fd9a:	f7f0 fc3b 	bl	8100614 <__aeabi_ui2d>
 810fd9e:	4602      	mov	r2, r0
 810fda0:	460b      	mov	r3, r1
 810fda2:	4650      	mov	r0, sl
 810fda4:	4659      	mov	r1, fp
 810fda6:	f7f0 faf9 	bl	810039c <__adddf3>
 810fdaa:	2d0f      	cmp	r5, #15
 810fdac:	4682      	mov	sl, r0
 810fdae:	468b      	mov	fp, r1
 810fdb0:	ddd5      	ble.n	810fd5e <_strtod_l+0x3ae>
 810fdb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810fdb4:	1b2c      	subs	r4, r5, r4
 810fdb6:	441c      	add	r4, r3
 810fdb8:	2c00      	cmp	r4, #0
 810fdba:	f340 8096 	ble.w	810feea <_strtod_l+0x53a>
 810fdbe:	f014 030f 	ands.w	r3, r4, #15
 810fdc2:	d00a      	beq.n	810fdda <_strtod_l+0x42a>
 810fdc4:	495e      	ldr	r1, [pc, #376]	@ (810ff40 <_strtod_l+0x590>)
 810fdc6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810fdca:	4652      	mov	r2, sl
 810fdcc:	465b      	mov	r3, fp
 810fdce:	e9d1 0100 	ldrd	r0, r1, [r1]
 810fdd2:	f7f0 fc99 	bl	8100708 <__aeabi_dmul>
 810fdd6:	4682      	mov	sl, r0
 810fdd8:	468b      	mov	fp, r1
 810fdda:	f034 040f 	bics.w	r4, r4, #15
 810fdde:	d073      	beq.n	810fec8 <_strtod_l+0x518>
 810fde0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 810fde4:	dd48      	ble.n	810fe78 <_strtod_l+0x4c8>
 810fde6:	2400      	movs	r4, #0
 810fde8:	46a0      	mov	r8, r4
 810fdea:	940a      	str	r4, [sp, #40]	@ 0x28
 810fdec:	46a1      	mov	r9, r4
 810fdee:	9a05      	ldr	r2, [sp, #20]
 810fdf0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 810ff48 <_strtod_l+0x598>
 810fdf4:	2322      	movs	r3, #34	@ 0x22
 810fdf6:	6013      	str	r3, [r2, #0]
 810fdf8:	f04f 0a00 	mov.w	sl, #0
 810fdfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810fdfe:	2b00      	cmp	r3, #0
 810fe00:	f43f ae0f 	beq.w	810fa22 <_strtod_l+0x72>
 810fe04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810fe06:	9805      	ldr	r0, [sp, #20]
 810fe08:	f7ff f942 	bl	810f090 <_Bfree>
 810fe0c:	9805      	ldr	r0, [sp, #20]
 810fe0e:	4649      	mov	r1, r9
 810fe10:	f7ff f93e 	bl	810f090 <_Bfree>
 810fe14:	9805      	ldr	r0, [sp, #20]
 810fe16:	4641      	mov	r1, r8
 810fe18:	f7ff f93a 	bl	810f090 <_Bfree>
 810fe1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810fe1e:	9805      	ldr	r0, [sp, #20]
 810fe20:	f7ff f936 	bl	810f090 <_Bfree>
 810fe24:	9805      	ldr	r0, [sp, #20]
 810fe26:	4621      	mov	r1, r4
 810fe28:	f7ff f932 	bl	810f090 <_Bfree>
 810fe2c:	e5f9      	b.n	810fa22 <_strtod_l+0x72>
 810fe2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810fe30:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 810fe34:	4293      	cmp	r3, r2
 810fe36:	dbbc      	blt.n	810fdb2 <_strtod_l+0x402>
 810fe38:	4c41      	ldr	r4, [pc, #260]	@ (810ff40 <_strtod_l+0x590>)
 810fe3a:	f1c5 050f 	rsb	r5, r5, #15
 810fe3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810fe42:	4652      	mov	r2, sl
 810fe44:	465b      	mov	r3, fp
 810fe46:	e9d1 0100 	ldrd	r0, r1, [r1]
 810fe4a:	f7f0 fc5d 	bl	8100708 <__aeabi_dmul>
 810fe4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810fe50:	1b5d      	subs	r5, r3, r5
 810fe52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810fe56:	e9d4 2300 	ldrd	r2, r3, [r4]
 810fe5a:	e78f      	b.n	810fd7c <_strtod_l+0x3cc>
 810fe5c:	3316      	adds	r3, #22
 810fe5e:	dba8      	blt.n	810fdb2 <_strtod_l+0x402>
 810fe60:	4b37      	ldr	r3, [pc, #220]	@ (810ff40 <_strtod_l+0x590>)
 810fe62:	eba9 0808 	sub.w	r8, r9, r8
 810fe66:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 810fe6a:	e9d8 2300 	ldrd	r2, r3, [r8]
 810fe6e:	4650      	mov	r0, sl
 810fe70:	4659      	mov	r1, fp
 810fe72:	f7f0 fd73 	bl	810095c <__aeabi_ddiv>
 810fe76:	e783      	b.n	810fd80 <_strtod_l+0x3d0>
 810fe78:	4b32      	ldr	r3, [pc, #200]	@ (810ff44 <_strtod_l+0x594>)
 810fe7a:	9308      	str	r3, [sp, #32]
 810fe7c:	2300      	movs	r3, #0
 810fe7e:	1124      	asrs	r4, r4, #4
 810fe80:	4650      	mov	r0, sl
 810fe82:	4659      	mov	r1, fp
 810fe84:	461e      	mov	r6, r3
 810fe86:	2c01      	cmp	r4, #1
 810fe88:	dc21      	bgt.n	810fece <_strtod_l+0x51e>
 810fe8a:	b10b      	cbz	r3, 810fe90 <_strtod_l+0x4e0>
 810fe8c:	4682      	mov	sl, r0
 810fe8e:	468b      	mov	fp, r1
 810fe90:	492c      	ldr	r1, [pc, #176]	@ (810ff44 <_strtod_l+0x594>)
 810fe92:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 810fe96:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 810fe9a:	4652      	mov	r2, sl
 810fe9c:	465b      	mov	r3, fp
 810fe9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810fea2:	f7f0 fc31 	bl	8100708 <__aeabi_dmul>
 810fea6:	4b28      	ldr	r3, [pc, #160]	@ (810ff48 <_strtod_l+0x598>)
 810fea8:	460a      	mov	r2, r1
 810feaa:	400b      	ands	r3, r1
 810feac:	4927      	ldr	r1, [pc, #156]	@ (810ff4c <_strtod_l+0x59c>)
 810feae:	428b      	cmp	r3, r1
 810feb0:	4682      	mov	sl, r0
 810feb2:	d898      	bhi.n	810fde6 <_strtod_l+0x436>
 810feb4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 810feb8:	428b      	cmp	r3, r1
 810feba:	bf86      	itte	hi
 810febc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 810ff50 <_strtod_l+0x5a0>
 810fec0:	f04f 3aff 	movhi.w	sl, #4294967295
 810fec4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 810fec8:	2300      	movs	r3, #0
 810feca:	9308      	str	r3, [sp, #32]
 810fecc:	e07a      	b.n	810ffc4 <_strtod_l+0x614>
 810fece:	07e2      	lsls	r2, r4, #31
 810fed0:	d505      	bpl.n	810fede <_strtod_l+0x52e>
 810fed2:	9b08      	ldr	r3, [sp, #32]
 810fed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810fed8:	f7f0 fc16 	bl	8100708 <__aeabi_dmul>
 810fedc:	2301      	movs	r3, #1
 810fede:	9a08      	ldr	r2, [sp, #32]
 810fee0:	3208      	adds	r2, #8
 810fee2:	3601      	adds	r6, #1
 810fee4:	1064      	asrs	r4, r4, #1
 810fee6:	9208      	str	r2, [sp, #32]
 810fee8:	e7cd      	b.n	810fe86 <_strtod_l+0x4d6>
 810feea:	d0ed      	beq.n	810fec8 <_strtod_l+0x518>
 810feec:	4264      	negs	r4, r4
 810feee:	f014 020f 	ands.w	r2, r4, #15
 810fef2:	d00a      	beq.n	810ff0a <_strtod_l+0x55a>
 810fef4:	4b12      	ldr	r3, [pc, #72]	@ (810ff40 <_strtod_l+0x590>)
 810fef6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810fefa:	4650      	mov	r0, sl
 810fefc:	4659      	mov	r1, fp
 810fefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ff02:	f7f0 fd2b 	bl	810095c <__aeabi_ddiv>
 810ff06:	4682      	mov	sl, r0
 810ff08:	468b      	mov	fp, r1
 810ff0a:	1124      	asrs	r4, r4, #4
 810ff0c:	d0dc      	beq.n	810fec8 <_strtod_l+0x518>
 810ff0e:	2c1f      	cmp	r4, #31
 810ff10:	dd20      	ble.n	810ff54 <_strtod_l+0x5a4>
 810ff12:	2400      	movs	r4, #0
 810ff14:	46a0      	mov	r8, r4
 810ff16:	940a      	str	r4, [sp, #40]	@ 0x28
 810ff18:	46a1      	mov	r9, r4
 810ff1a:	9a05      	ldr	r2, [sp, #20]
 810ff1c:	2322      	movs	r3, #34	@ 0x22
 810ff1e:	f04f 0a00 	mov.w	sl, #0
 810ff22:	f04f 0b00 	mov.w	fp, #0
 810ff26:	6013      	str	r3, [r2, #0]
 810ff28:	e768      	b.n	810fdfc <_strtod_l+0x44c>
 810ff2a:	bf00      	nop
 810ff2c:	08111794 	.word	0x08111794
 810ff30:	081119cc 	.word	0x081119cc
 810ff34:	0811178c 	.word	0x0811178c
 810ff38:	081117ff 	.word	0x081117ff
 810ff3c:	081117fb 	.word	0x081117fb
 810ff40:	08111900 	.word	0x08111900
 810ff44:	081118d8 	.word	0x081118d8
 810ff48:	7ff00000 	.word	0x7ff00000
 810ff4c:	7ca00000 	.word	0x7ca00000
 810ff50:	7fefffff 	.word	0x7fefffff
 810ff54:	f014 0310 	ands.w	r3, r4, #16
 810ff58:	bf18      	it	ne
 810ff5a:	236a      	movne	r3, #106	@ 0x6a
 810ff5c:	4ea9      	ldr	r6, [pc, #676]	@ (8110204 <_strtod_l+0x854>)
 810ff5e:	9308      	str	r3, [sp, #32]
 810ff60:	4650      	mov	r0, sl
 810ff62:	4659      	mov	r1, fp
 810ff64:	2300      	movs	r3, #0
 810ff66:	07e2      	lsls	r2, r4, #31
 810ff68:	d504      	bpl.n	810ff74 <_strtod_l+0x5c4>
 810ff6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 810ff6e:	f7f0 fbcb 	bl	8100708 <__aeabi_dmul>
 810ff72:	2301      	movs	r3, #1
 810ff74:	1064      	asrs	r4, r4, #1
 810ff76:	f106 0608 	add.w	r6, r6, #8
 810ff7a:	d1f4      	bne.n	810ff66 <_strtod_l+0x5b6>
 810ff7c:	b10b      	cbz	r3, 810ff82 <_strtod_l+0x5d2>
 810ff7e:	4682      	mov	sl, r0
 810ff80:	468b      	mov	fp, r1
 810ff82:	9b08      	ldr	r3, [sp, #32]
 810ff84:	b1b3      	cbz	r3, 810ffb4 <_strtod_l+0x604>
 810ff86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810ff8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 810ff8e:	2b00      	cmp	r3, #0
 810ff90:	4659      	mov	r1, fp
 810ff92:	dd0f      	ble.n	810ffb4 <_strtod_l+0x604>
 810ff94:	2b1f      	cmp	r3, #31
 810ff96:	dd55      	ble.n	8110044 <_strtod_l+0x694>
 810ff98:	2b34      	cmp	r3, #52	@ 0x34
 810ff9a:	bfde      	ittt	le
 810ff9c:	f04f 33ff 	movle.w	r3, #4294967295
 810ffa0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 810ffa4:	4093      	lslle	r3, r2
 810ffa6:	f04f 0a00 	mov.w	sl, #0
 810ffaa:	bfcc      	ite	gt
 810ffac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 810ffb0:	ea03 0b01 	andle.w	fp, r3, r1
 810ffb4:	2200      	movs	r2, #0
 810ffb6:	2300      	movs	r3, #0
 810ffb8:	4650      	mov	r0, sl
 810ffba:	4659      	mov	r1, fp
 810ffbc:	f7f0 fe0c 	bl	8100bd8 <__aeabi_dcmpeq>
 810ffc0:	2800      	cmp	r0, #0
 810ffc2:	d1a6      	bne.n	810ff12 <_strtod_l+0x562>
 810ffc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810ffc6:	9300      	str	r3, [sp, #0]
 810ffc8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 810ffca:	9805      	ldr	r0, [sp, #20]
 810ffcc:	462b      	mov	r3, r5
 810ffce:	463a      	mov	r2, r7
 810ffd0:	f7ff f8c6 	bl	810f160 <__s2b>
 810ffd4:	900a      	str	r0, [sp, #40]	@ 0x28
 810ffd6:	2800      	cmp	r0, #0
 810ffd8:	f43f af05 	beq.w	810fde6 <_strtod_l+0x436>
 810ffdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810ffde:	2a00      	cmp	r2, #0
 810ffe0:	eba9 0308 	sub.w	r3, r9, r8
 810ffe4:	bfa8      	it	ge
 810ffe6:	2300      	movge	r3, #0
 810ffe8:	9312      	str	r3, [sp, #72]	@ 0x48
 810ffea:	2400      	movs	r4, #0
 810ffec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 810fff0:	9316      	str	r3, [sp, #88]	@ 0x58
 810fff2:	46a0      	mov	r8, r4
 810fff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810fff6:	9805      	ldr	r0, [sp, #20]
 810fff8:	6859      	ldr	r1, [r3, #4]
 810fffa:	f7ff f809 	bl	810f010 <_Balloc>
 810fffe:	4681      	mov	r9, r0
 8110000:	2800      	cmp	r0, #0
 8110002:	f43f aef4 	beq.w	810fdee <_strtod_l+0x43e>
 8110006:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8110008:	691a      	ldr	r2, [r3, #16]
 811000a:	3202      	adds	r2, #2
 811000c:	f103 010c 	add.w	r1, r3, #12
 8110010:	0092      	lsls	r2, r2, #2
 8110012:	300c      	adds	r0, #12
 8110014:	f7fe f87d 	bl	810e112 <memcpy>
 8110018:	ec4b ab10 	vmov	d0, sl, fp
 811001c:	9805      	ldr	r0, [sp, #20]
 811001e:	aa1c      	add	r2, sp, #112	@ 0x70
 8110020:	a91b      	add	r1, sp, #108	@ 0x6c
 8110022:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8110026:	f7ff fbd7 	bl	810f7d8 <__d2b>
 811002a:	901a      	str	r0, [sp, #104]	@ 0x68
 811002c:	2800      	cmp	r0, #0
 811002e:	f43f aede 	beq.w	810fdee <_strtod_l+0x43e>
 8110032:	9805      	ldr	r0, [sp, #20]
 8110034:	2101      	movs	r1, #1
 8110036:	f7ff f929 	bl	810f28c <__i2b>
 811003a:	4680      	mov	r8, r0
 811003c:	b948      	cbnz	r0, 8110052 <_strtod_l+0x6a2>
 811003e:	f04f 0800 	mov.w	r8, #0
 8110042:	e6d4      	b.n	810fdee <_strtod_l+0x43e>
 8110044:	f04f 32ff 	mov.w	r2, #4294967295
 8110048:	fa02 f303 	lsl.w	r3, r2, r3
 811004c:	ea03 0a0a 	and.w	sl, r3, sl
 8110050:	e7b0      	b.n	810ffb4 <_strtod_l+0x604>
 8110052:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8110054:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8110056:	2d00      	cmp	r5, #0
 8110058:	bfab      	itete	ge
 811005a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 811005c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 811005e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8110060:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8110062:	bfac      	ite	ge
 8110064:	18ef      	addge	r7, r5, r3
 8110066:	1b5e      	sublt	r6, r3, r5
 8110068:	9b08      	ldr	r3, [sp, #32]
 811006a:	1aed      	subs	r5, r5, r3
 811006c:	4415      	add	r5, r2
 811006e:	4b66      	ldr	r3, [pc, #408]	@ (8110208 <_strtod_l+0x858>)
 8110070:	3d01      	subs	r5, #1
 8110072:	429d      	cmp	r5, r3
 8110074:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8110078:	da50      	bge.n	811011c <_strtod_l+0x76c>
 811007a:	1b5b      	subs	r3, r3, r5
 811007c:	2b1f      	cmp	r3, #31
 811007e:	eba2 0203 	sub.w	r2, r2, r3
 8110082:	f04f 0101 	mov.w	r1, #1
 8110086:	dc3d      	bgt.n	8110104 <_strtod_l+0x754>
 8110088:	fa01 f303 	lsl.w	r3, r1, r3
 811008c:	9313      	str	r3, [sp, #76]	@ 0x4c
 811008e:	2300      	movs	r3, #0
 8110090:	9310      	str	r3, [sp, #64]	@ 0x40
 8110092:	18bd      	adds	r5, r7, r2
 8110094:	9b08      	ldr	r3, [sp, #32]
 8110096:	42af      	cmp	r7, r5
 8110098:	4416      	add	r6, r2
 811009a:	441e      	add	r6, r3
 811009c:	463b      	mov	r3, r7
 811009e:	bfa8      	it	ge
 81100a0:	462b      	movge	r3, r5
 81100a2:	42b3      	cmp	r3, r6
 81100a4:	bfa8      	it	ge
 81100a6:	4633      	movge	r3, r6
 81100a8:	2b00      	cmp	r3, #0
 81100aa:	bfc2      	ittt	gt
 81100ac:	1aed      	subgt	r5, r5, r3
 81100ae:	1af6      	subgt	r6, r6, r3
 81100b0:	1aff      	subgt	r7, r7, r3
 81100b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 81100b4:	2b00      	cmp	r3, #0
 81100b6:	dd16      	ble.n	81100e6 <_strtod_l+0x736>
 81100b8:	4641      	mov	r1, r8
 81100ba:	9805      	ldr	r0, [sp, #20]
 81100bc:	461a      	mov	r2, r3
 81100be:	f7ff f9a5 	bl	810f40c <__pow5mult>
 81100c2:	4680      	mov	r8, r0
 81100c4:	2800      	cmp	r0, #0
 81100c6:	d0ba      	beq.n	811003e <_strtod_l+0x68e>
 81100c8:	4601      	mov	r1, r0
 81100ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 81100cc:	9805      	ldr	r0, [sp, #20]
 81100ce:	f7ff f8f3 	bl	810f2b8 <__multiply>
 81100d2:	900e      	str	r0, [sp, #56]	@ 0x38
 81100d4:	2800      	cmp	r0, #0
 81100d6:	f43f ae8a 	beq.w	810fdee <_strtod_l+0x43e>
 81100da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 81100dc:	9805      	ldr	r0, [sp, #20]
 81100de:	f7fe ffd7 	bl	810f090 <_Bfree>
 81100e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81100e4:	931a      	str	r3, [sp, #104]	@ 0x68
 81100e6:	2d00      	cmp	r5, #0
 81100e8:	dc1d      	bgt.n	8110126 <_strtod_l+0x776>
 81100ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81100ec:	2b00      	cmp	r3, #0
 81100ee:	dd23      	ble.n	8110138 <_strtod_l+0x788>
 81100f0:	4649      	mov	r1, r9
 81100f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 81100f4:	9805      	ldr	r0, [sp, #20]
 81100f6:	f7ff f989 	bl	810f40c <__pow5mult>
 81100fa:	4681      	mov	r9, r0
 81100fc:	b9e0      	cbnz	r0, 8110138 <_strtod_l+0x788>
 81100fe:	f04f 0900 	mov.w	r9, #0
 8110102:	e674      	b.n	810fdee <_strtod_l+0x43e>
 8110104:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8110108:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 811010c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8110110:	35e2      	adds	r5, #226	@ 0xe2
 8110112:	fa01 f305 	lsl.w	r3, r1, r5
 8110116:	9310      	str	r3, [sp, #64]	@ 0x40
 8110118:	9113      	str	r1, [sp, #76]	@ 0x4c
 811011a:	e7ba      	b.n	8110092 <_strtod_l+0x6e2>
 811011c:	2300      	movs	r3, #0
 811011e:	9310      	str	r3, [sp, #64]	@ 0x40
 8110120:	2301      	movs	r3, #1
 8110122:	9313      	str	r3, [sp, #76]	@ 0x4c
 8110124:	e7b5      	b.n	8110092 <_strtod_l+0x6e2>
 8110126:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8110128:	9805      	ldr	r0, [sp, #20]
 811012a:	462a      	mov	r2, r5
 811012c:	f7ff f9c8 	bl	810f4c0 <__lshift>
 8110130:	901a      	str	r0, [sp, #104]	@ 0x68
 8110132:	2800      	cmp	r0, #0
 8110134:	d1d9      	bne.n	81100ea <_strtod_l+0x73a>
 8110136:	e65a      	b.n	810fdee <_strtod_l+0x43e>
 8110138:	2e00      	cmp	r6, #0
 811013a:	dd07      	ble.n	811014c <_strtod_l+0x79c>
 811013c:	4649      	mov	r1, r9
 811013e:	9805      	ldr	r0, [sp, #20]
 8110140:	4632      	mov	r2, r6
 8110142:	f7ff f9bd 	bl	810f4c0 <__lshift>
 8110146:	4681      	mov	r9, r0
 8110148:	2800      	cmp	r0, #0
 811014a:	d0d8      	beq.n	81100fe <_strtod_l+0x74e>
 811014c:	2f00      	cmp	r7, #0
 811014e:	dd08      	ble.n	8110162 <_strtod_l+0x7b2>
 8110150:	4641      	mov	r1, r8
 8110152:	9805      	ldr	r0, [sp, #20]
 8110154:	463a      	mov	r2, r7
 8110156:	f7ff f9b3 	bl	810f4c0 <__lshift>
 811015a:	4680      	mov	r8, r0
 811015c:	2800      	cmp	r0, #0
 811015e:	f43f ae46 	beq.w	810fdee <_strtod_l+0x43e>
 8110162:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8110164:	9805      	ldr	r0, [sp, #20]
 8110166:	464a      	mov	r2, r9
 8110168:	f7ff fa32 	bl	810f5d0 <__mdiff>
 811016c:	4604      	mov	r4, r0
 811016e:	2800      	cmp	r0, #0
 8110170:	f43f ae3d 	beq.w	810fdee <_strtod_l+0x43e>
 8110174:	68c3      	ldr	r3, [r0, #12]
 8110176:	930f      	str	r3, [sp, #60]	@ 0x3c
 8110178:	2300      	movs	r3, #0
 811017a:	60c3      	str	r3, [r0, #12]
 811017c:	4641      	mov	r1, r8
 811017e:	f7ff fa0b 	bl	810f598 <__mcmp>
 8110182:	2800      	cmp	r0, #0
 8110184:	da46      	bge.n	8110214 <_strtod_l+0x864>
 8110186:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8110188:	ea53 030a 	orrs.w	r3, r3, sl
 811018c:	d16c      	bne.n	8110268 <_strtod_l+0x8b8>
 811018e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8110192:	2b00      	cmp	r3, #0
 8110194:	d168      	bne.n	8110268 <_strtod_l+0x8b8>
 8110196:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 811019a:	0d1b      	lsrs	r3, r3, #20
 811019c:	051b      	lsls	r3, r3, #20
 811019e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 81101a2:	d961      	bls.n	8110268 <_strtod_l+0x8b8>
 81101a4:	6963      	ldr	r3, [r4, #20]
 81101a6:	b913      	cbnz	r3, 81101ae <_strtod_l+0x7fe>
 81101a8:	6923      	ldr	r3, [r4, #16]
 81101aa:	2b01      	cmp	r3, #1
 81101ac:	dd5c      	ble.n	8110268 <_strtod_l+0x8b8>
 81101ae:	4621      	mov	r1, r4
 81101b0:	2201      	movs	r2, #1
 81101b2:	9805      	ldr	r0, [sp, #20]
 81101b4:	f7ff f984 	bl	810f4c0 <__lshift>
 81101b8:	4641      	mov	r1, r8
 81101ba:	4604      	mov	r4, r0
 81101bc:	f7ff f9ec 	bl	810f598 <__mcmp>
 81101c0:	2800      	cmp	r0, #0
 81101c2:	dd51      	ble.n	8110268 <_strtod_l+0x8b8>
 81101c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 81101c8:	9a08      	ldr	r2, [sp, #32]
 81101ca:	0d1b      	lsrs	r3, r3, #20
 81101cc:	051b      	lsls	r3, r3, #20
 81101ce:	2a00      	cmp	r2, #0
 81101d0:	d06b      	beq.n	81102aa <_strtod_l+0x8fa>
 81101d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 81101d6:	d868      	bhi.n	81102aa <_strtod_l+0x8fa>
 81101d8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 81101dc:	f67f ae9d 	bls.w	810ff1a <_strtod_l+0x56a>
 81101e0:	4b0a      	ldr	r3, [pc, #40]	@ (811020c <_strtod_l+0x85c>)
 81101e2:	4650      	mov	r0, sl
 81101e4:	4659      	mov	r1, fp
 81101e6:	2200      	movs	r2, #0
 81101e8:	f7f0 fa8e 	bl	8100708 <__aeabi_dmul>
 81101ec:	4b08      	ldr	r3, [pc, #32]	@ (8110210 <_strtod_l+0x860>)
 81101ee:	400b      	ands	r3, r1
 81101f0:	4682      	mov	sl, r0
 81101f2:	468b      	mov	fp, r1
 81101f4:	2b00      	cmp	r3, #0
 81101f6:	f47f ae05 	bne.w	810fe04 <_strtod_l+0x454>
 81101fa:	9a05      	ldr	r2, [sp, #20]
 81101fc:	2322      	movs	r3, #34	@ 0x22
 81101fe:	6013      	str	r3, [r2, #0]
 8110200:	e600      	b.n	810fe04 <_strtod_l+0x454>
 8110202:	bf00      	nop
 8110204:	081119f8 	.word	0x081119f8
 8110208:	fffffc02 	.word	0xfffffc02
 811020c:	39500000 	.word	0x39500000
 8110210:	7ff00000 	.word	0x7ff00000
 8110214:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8110218:	d165      	bne.n	81102e6 <_strtod_l+0x936>
 811021a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 811021c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8110220:	b35a      	cbz	r2, 811027a <_strtod_l+0x8ca>
 8110222:	4a9f      	ldr	r2, [pc, #636]	@ (81104a0 <_strtod_l+0xaf0>)
 8110224:	4293      	cmp	r3, r2
 8110226:	d12b      	bne.n	8110280 <_strtod_l+0x8d0>
 8110228:	9b08      	ldr	r3, [sp, #32]
 811022a:	4651      	mov	r1, sl
 811022c:	b303      	cbz	r3, 8110270 <_strtod_l+0x8c0>
 811022e:	4b9d      	ldr	r3, [pc, #628]	@ (81104a4 <_strtod_l+0xaf4>)
 8110230:	465a      	mov	r2, fp
 8110232:	4013      	ands	r3, r2
 8110234:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8110238:	f04f 32ff 	mov.w	r2, #4294967295
 811023c:	d81b      	bhi.n	8110276 <_strtod_l+0x8c6>
 811023e:	0d1b      	lsrs	r3, r3, #20
 8110240:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8110244:	fa02 f303 	lsl.w	r3, r2, r3
 8110248:	4299      	cmp	r1, r3
 811024a:	d119      	bne.n	8110280 <_strtod_l+0x8d0>
 811024c:	4b96      	ldr	r3, [pc, #600]	@ (81104a8 <_strtod_l+0xaf8>)
 811024e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8110250:	429a      	cmp	r2, r3
 8110252:	d102      	bne.n	811025a <_strtod_l+0x8aa>
 8110254:	3101      	adds	r1, #1
 8110256:	f43f adca 	beq.w	810fdee <_strtod_l+0x43e>
 811025a:	4b92      	ldr	r3, [pc, #584]	@ (81104a4 <_strtod_l+0xaf4>)
 811025c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 811025e:	401a      	ands	r2, r3
 8110260:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8110264:	f04f 0a00 	mov.w	sl, #0
 8110268:	9b08      	ldr	r3, [sp, #32]
 811026a:	2b00      	cmp	r3, #0
 811026c:	d1b8      	bne.n	81101e0 <_strtod_l+0x830>
 811026e:	e5c9      	b.n	810fe04 <_strtod_l+0x454>
 8110270:	f04f 33ff 	mov.w	r3, #4294967295
 8110274:	e7e8      	b.n	8110248 <_strtod_l+0x898>
 8110276:	4613      	mov	r3, r2
 8110278:	e7e6      	b.n	8110248 <_strtod_l+0x898>
 811027a:	ea53 030a 	orrs.w	r3, r3, sl
 811027e:	d0a1      	beq.n	81101c4 <_strtod_l+0x814>
 8110280:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8110282:	b1db      	cbz	r3, 81102bc <_strtod_l+0x90c>
 8110284:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8110286:	4213      	tst	r3, r2
 8110288:	d0ee      	beq.n	8110268 <_strtod_l+0x8b8>
 811028a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811028c:	9a08      	ldr	r2, [sp, #32]
 811028e:	4650      	mov	r0, sl
 8110290:	4659      	mov	r1, fp
 8110292:	b1bb      	cbz	r3, 81102c4 <_strtod_l+0x914>
 8110294:	f7ff fb6e 	bl	810f974 <sulp>
 8110298:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 811029c:	ec53 2b10 	vmov	r2, r3, d0
 81102a0:	f7f0 f87c 	bl	810039c <__adddf3>
 81102a4:	4682      	mov	sl, r0
 81102a6:	468b      	mov	fp, r1
 81102a8:	e7de      	b.n	8110268 <_strtod_l+0x8b8>
 81102aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 81102ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 81102b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 81102b6:	f04f 3aff 	mov.w	sl, #4294967295
 81102ba:	e7d5      	b.n	8110268 <_strtod_l+0x8b8>
 81102bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 81102be:	ea13 0f0a 	tst.w	r3, sl
 81102c2:	e7e1      	b.n	8110288 <_strtod_l+0x8d8>
 81102c4:	f7ff fb56 	bl	810f974 <sulp>
 81102c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81102cc:	ec53 2b10 	vmov	r2, r3, d0
 81102d0:	f7f0 f862 	bl	8100398 <__aeabi_dsub>
 81102d4:	2200      	movs	r2, #0
 81102d6:	2300      	movs	r3, #0
 81102d8:	4682      	mov	sl, r0
 81102da:	468b      	mov	fp, r1
 81102dc:	f7f0 fc7c 	bl	8100bd8 <__aeabi_dcmpeq>
 81102e0:	2800      	cmp	r0, #0
 81102e2:	d0c1      	beq.n	8110268 <_strtod_l+0x8b8>
 81102e4:	e619      	b.n	810ff1a <_strtod_l+0x56a>
 81102e6:	4641      	mov	r1, r8
 81102e8:	4620      	mov	r0, r4
 81102ea:	f7ff facd 	bl	810f888 <__ratio>
 81102ee:	ec57 6b10 	vmov	r6, r7, d0
 81102f2:	2200      	movs	r2, #0
 81102f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 81102f8:	4630      	mov	r0, r6
 81102fa:	4639      	mov	r1, r7
 81102fc:	f7f0 fc80 	bl	8100c00 <__aeabi_dcmple>
 8110300:	2800      	cmp	r0, #0
 8110302:	d06f      	beq.n	81103e4 <_strtod_l+0xa34>
 8110304:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8110306:	2b00      	cmp	r3, #0
 8110308:	d17a      	bne.n	8110400 <_strtod_l+0xa50>
 811030a:	f1ba 0f00 	cmp.w	sl, #0
 811030e:	d158      	bne.n	81103c2 <_strtod_l+0xa12>
 8110310:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8110312:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8110316:	2b00      	cmp	r3, #0
 8110318:	d15a      	bne.n	81103d0 <_strtod_l+0xa20>
 811031a:	4b64      	ldr	r3, [pc, #400]	@ (81104ac <_strtod_l+0xafc>)
 811031c:	2200      	movs	r2, #0
 811031e:	4630      	mov	r0, r6
 8110320:	4639      	mov	r1, r7
 8110322:	f7f0 fc63 	bl	8100bec <__aeabi_dcmplt>
 8110326:	2800      	cmp	r0, #0
 8110328:	d159      	bne.n	81103de <_strtod_l+0xa2e>
 811032a:	4630      	mov	r0, r6
 811032c:	4639      	mov	r1, r7
 811032e:	4b60      	ldr	r3, [pc, #384]	@ (81104b0 <_strtod_l+0xb00>)
 8110330:	2200      	movs	r2, #0
 8110332:	f7f0 f9e9 	bl	8100708 <__aeabi_dmul>
 8110336:	4606      	mov	r6, r0
 8110338:	460f      	mov	r7, r1
 811033a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 811033e:	9606      	str	r6, [sp, #24]
 8110340:	9307      	str	r3, [sp, #28]
 8110342:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8110346:	4d57      	ldr	r5, [pc, #348]	@ (81104a4 <_strtod_l+0xaf4>)
 8110348:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 811034c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811034e:	401d      	ands	r5, r3
 8110350:	4b58      	ldr	r3, [pc, #352]	@ (81104b4 <_strtod_l+0xb04>)
 8110352:	429d      	cmp	r5, r3
 8110354:	f040 80b2 	bne.w	81104bc <_strtod_l+0xb0c>
 8110358:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811035a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 811035e:	ec4b ab10 	vmov	d0, sl, fp
 8110362:	f7ff f9c9 	bl	810f6f8 <__ulp>
 8110366:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 811036a:	ec51 0b10 	vmov	r0, r1, d0
 811036e:	f7f0 f9cb 	bl	8100708 <__aeabi_dmul>
 8110372:	4652      	mov	r2, sl
 8110374:	465b      	mov	r3, fp
 8110376:	f7f0 f811 	bl	810039c <__adddf3>
 811037a:	460b      	mov	r3, r1
 811037c:	4949      	ldr	r1, [pc, #292]	@ (81104a4 <_strtod_l+0xaf4>)
 811037e:	4a4e      	ldr	r2, [pc, #312]	@ (81104b8 <_strtod_l+0xb08>)
 8110380:	4019      	ands	r1, r3
 8110382:	4291      	cmp	r1, r2
 8110384:	4682      	mov	sl, r0
 8110386:	d942      	bls.n	811040e <_strtod_l+0xa5e>
 8110388:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 811038a:	4b47      	ldr	r3, [pc, #284]	@ (81104a8 <_strtod_l+0xaf8>)
 811038c:	429a      	cmp	r2, r3
 811038e:	d103      	bne.n	8110398 <_strtod_l+0x9e8>
 8110390:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8110392:	3301      	adds	r3, #1
 8110394:	f43f ad2b 	beq.w	810fdee <_strtod_l+0x43e>
 8110398:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 81104a8 <_strtod_l+0xaf8>
 811039c:	f04f 3aff 	mov.w	sl, #4294967295
 81103a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 81103a2:	9805      	ldr	r0, [sp, #20]
 81103a4:	f7fe fe74 	bl	810f090 <_Bfree>
 81103a8:	9805      	ldr	r0, [sp, #20]
 81103aa:	4649      	mov	r1, r9
 81103ac:	f7fe fe70 	bl	810f090 <_Bfree>
 81103b0:	9805      	ldr	r0, [sp, #20]
 81103b2:	4641      	mov	r1, r8
 81103b4:	f7fe fe6c 	bl	810f090 <_Bfree>
 81103b8:	9805      	ldr	r0, [sp, #20]
 81103ba:	4621      	mov	r1, r4
 81103bc:	f7fe fe68 	bl	810f090 <_Bfree>
 81103c0:	e618      	b.n	810fff4 <_strtod_l+0x644>
 81103c2:	f1ba 0f01 	cmp.w	sl, #1
 81103c6:	d103      	bne.n	81103d0 <_strtod_l+0xa20>
 81103c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81103ca:	2b00      	cmp	r3, #0
 81103cc:	f43f ada5 	beq.w	810ff1a <_strtod_l+0x56a>
 81103d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8110480 <_strtod_l+0xad0>
 81103d4:	4f35      	ldr	r7, [pc, #212]	@ (81104ac <_strtod_l+0xafc>)
 81103d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 81103da:	2600      	movs	r6, #0
 81103dc:	e7b1      	b.n	8110342 <_strtod_l+0x992>
 81103de:	4f34      	ldr	r7, [pc, #208]	@ (81104b0 <_strtod_l+0xb00>)
 81103e0:	2600      	movs	r6, #0
 81103e2:	e7aa      	b.n	811033a <_strtod_l+0x98a>
 81103e4:	4b32      	ldr	r3, [pc, #200]	@ (81104b0 <_strtod_l+0xb00>)
 81103e6:	4630      	mov	r0, r6
 81103e8:	4639      	mov	r1, r7
 81103ea:	2200      	movs	r2, #0
 81103ec:	f7f0 f98c 	bl	8100708 <__aeabi_dmul>
 81103f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81103f2:	4606      	mov	r6, r0
 81103f4:	460f      	mov	r7, r1
 81103f6:	2b00      	cmp	r3, #0
 81103f8:	d09f      	beq.n	811033a <_strtod_l+0x98a>
 81103fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 81103fe:	e7a0      	b.n	8110342 <_strtod_l+0x992>
 8110400:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8110488 <_strtod_l+0xad8>
 8110404:	ed8d 7b06 	vstr	d7, [sp, #24]
 8110408:	ec57 6b17 	vmov	r6, r7, d7
 811040c:	e799      	b.n	8110342 <_strtod_l+0x992>
 811040e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8110412:	9b08      	ldr	r3, [sp, #32]
 8110414:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8110418:	2b00      	cmp	r3, #0
 811041a:	d1c1      	bne.n	81103a0 <_strtod_l+0x9f0>
 811041c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8110420:	0d1b      	lsrs	r3, r3, #20
 8110422:	051b      	lsls	r3, r3, #20
 8110424:	429d      	cmp	r5, r3
 8110426:	d1bb      	bne.n	81103a0 <_strtod_l+0x9f0>
 8110428:	4630      	mov	r0, r6
 811042a:	4639      	mov	r1, r7
 811042c:	f7f0 fccc 	bl	8100dc8 <__aeabi_d2lz>
 8110430:	f7f0 f93c 	bl	81006ac <__aeabi_l2d>
 8110434:	4602      	mov	r2, r0
 8110436:	460b      	mov	r3, r1
 8110438:	4630      	mov	r0, r6
 811043a:	4639      	mov	r1, r7
 811043c:	f7ef ffac 	bl	8100398 <__aeabi_dsub>
 8110440:	460b      	mov	r3, r1
 8110442:	4602      	mov	r2, r0
 8110444:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8110448:	f3cb 0613 	ubfx	r6, fp, #0, #20
 811044c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811044e:	ea46 060a 	orr.w	r6, r6, sl
 8110452:	431e      	orrs	r6, r3
 8110454:	d06f      	beq.n	8110536 <_strtod_l+0xb86>
 8110456:	a30e      	add	r3, pc, #56	@ (adr r3, 8110490 <_strtod_l+0xae0>)
 8110458:	e9d3 2300 	ldrd	r2, r3, [r3]
 811045c:	f7f0 fbc6 	bl	8100bec <__aeabi_dcmplt>
 8110460:	2800      	cmp	r0, #0
 8110462:	f47f accf 	bne.w	810fe04 <_strtod_l+0x454>
 8110466:	a30c      	add	r3, pc, #48	@ (adr r3, 8110498 <_strtod_l+0xae8>)
 8110468:	e9d3 2300 	ldrd	r2, r3, [r3]
 811046c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8110470:	f7f0 fbda 	bl	8100c28 <__aeabi_dcmpgt>
 8110474:	2800      	cmp	r0, #0
 8110476:	d093      	beq.n	81103a0 <_strtod_l+0x9f0>
 8110478:	e4c4      	b.n	810fe04 <_strtod_l+0x454>
 811047a:	bf00      	nop
 811047c:	f3af 8000 	nop.w
 8110480:	00000000 	.word	0x00000000
 8110484:	bff00000 	.word	0xbff00000
 8110488:	00000000 	.word	0x00000000
 811048c:	3ff00000 	.word	0x3ff00000
 8110490:	94a03595 	.word	0x94a03595
 8110494:	3fdfffff 	.word	0x3fdfffff
 8110498:	35afe535 	.word	0x35afe535
 811049c:	3fe00000 	.word	0x3fe00000
 81104a0:	000fffff 	.word	0x000fffff
 81104a4:	7ff00000 	.word	0x7ff00000
 81104a8:	7fefffff 	.word	0x7fefffff
 81104ac:	3ff00000 	.word	0x3ff00000
 81104b0:	3fe00000 	.word	0x3fe00000
 81104b4:	7fe00000 	.word	0x7fe00000
 81104b8:	7c9fffff 	.word	0x7c9fffff
 81104bc:	9b08      	ldr	r3, [sp, #32]
 81104be:	b323      	cbz	r3, 811050a <_strtod_l+0xb5a>
 81104c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 81104c4:	d821      	bhi.n	811050a <_strtod_l+0xb5a>
 81104c6:	a328      	add	r3, pc, #160	@ (adr r3, 8110568 <_strtod_l+0xbb8>)
 81104c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81104cc:	4630      	mov	r0, r6
 81104ce:	4639      	mov	r1, r7
 81104d0:	f7f0 fb96 	bl	8100c00 <__aeabi_dcmple>
 81104d4:	b1a0      	cbz	r0, 8110500 <_strtod_l+0xb50>
 81104d6:	4639      	mov	r1, r7
 81104d8:	4630      	mov	r0, r6
 81104da:	f7f0 fbed 	bl	8100cb8 <__aeabi_d2uiz>
 81104de:	2801      	cmp	r0, #1
 81104e0:	bf38      	it	cc
 81104e2:	2001      	movcc	r0, #1
 81104e4:	f7f0 f896 	bl	8100614 <__aeabi_ui2d>
 81104e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81104ea:	4606      	mov	r6, r0
 81104ec:	460f      	mov	r7, r1
 81104ee:	b9fb      	cbnz	r3, 8110530 <_strtod_l+0xb80>
 81104f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 81104f4:	9014      	str	r0, [sp, #80]	@ 0x50
 81104f6:	9315      	str	r3, [sp, #84]	@ 0x54
 81104f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 81104fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8110500:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8110502:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8110506:	1b5b      	subs	r3, r3, r5
 8110508:	9311      	str	r3, [sp, #68]	@ 0x44
 811050a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 811050e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8110512:	f7ff f8f1 	bl	810f6f8 <__ulp>
 8110516:	4650      	mov	r0, sl
 8110518:	ec53 2b10 	vmov	r2, r3, d0
 811051c:	4659      	mov	r1, fp
 811051e:	f7f0 f8f3 	bl	8100708 <__aeabi_dmul>
 8110522:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8110526:	f7ef ff39 	bl	810039c <__adddf3>
 811052a:	4682      	mov	sl, r0
 811052c:	468b      	mov	fp, r1
 811052e:	e770      	b.n	8110412 <_strtod_l+0xa62>
 8110530:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8110534:	e7e0      	b.n	81104f8 <_strtod_l+0xb48>
 8110536:	a30e      	add	r3, pc, #56	@ (adr r3, 8110570 <_strtod_l+0xbc0>)
 8110538:	e9d3 2300 	ldrd	r2, r3, [r3]
 811053c:	f7f0 fb56 	bl	8100bec <__aeabi_dcmplt>
 8110540:	e798      	b.n	8110474 <_strtod_l+0xac4>
 8110542:	2300      	movs	r3, #0
 8110544:	930b      	str	r3, [sp, #44]	@ 0x2c
 8110546:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8110548:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 811054a:	6013      	str	r3, [r2, #0]
 811054c:	f7ff ba6d 	b.w	810fa2a <_strtod_l+0x7a>
 8110550:	2a65      	cmp	r2, #101	@ 0x65
 8110552:	f43f ab66 	beq.w	810fc22 <_strtod_l+0x272>
 8110556:	2a45      	cmp	r2, #69	@ 0x45
 8110558:	f43f ab63 	beq.w	810fc22 <_strtod_l+0x272>
 811055c:	2301      	movs	r3, #1
 811055e:	f7ff bb9e 	b.w	810fc9e <_strtod_l+0x2ee>
 8110562:	bf00      	nop
 8110564:	f3af 8000 	nop.w
 8110568:	ffc00000 	.word	0xffc00000
 811056c:	41dfffff 	.word	0x41dfffff
 8110570:	94a03595 	.word	0x94a03595
 8110574:	3fcfffff 	.word	0x3fcfffff

08110578 <_strtod_r>:
 8110578:	4b01      	ldr	r3, [pc, #4]	@ (8110580 <_strtod_r+0x8>)
 811057a:	f7ff ba19 	b.w	810f9b0 <_strtod_l>
 811057e:	bf00      	nop
 8110580:	100000f8 	.word	0x100000f8

08110584 <_strtol_l.constprop.0>:
 8110584:	2b24      	cmp	r3, #36	@ 0x24
 8110586:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 811058a:	4686      	mov	lr, r0
 811058c:	4690      	mov	r8, r2
 811058e:	d801      	bhi.n	8110594 <_strtol_l.constprop.0+0x10>
 8110590:	2b01      	cmp	r3, #1
 8110592:	d106      	bne.n	81105a2 <_strtol_l.constprop.0+0x1e>
 8110594:	f7fd fd90 	bl	810e0b8 <__errno>
 8110598:	2316      	movs	r3, #22
 811059a:	6003      	str	r3, [r0, #0]
 811059c:	2000      	movs	r0, #0
 811059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81105a2:	4834      	ldr	r0, [pc, #208]	@ (8110674 <_strtol_l.constprop.0+0xf0>)
 81105a4:	460d      	mov	r5, r1
 81105a6:	462a      	mov	r2, r5
 81105a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 81105ac:	5d06      	ldrb	r6, [r0, r4]
 81105ae:	f016 0608 	ands.w	r6, r6, #8
 81105b2:	d1f8      	bne.n	81105a6 <_strtol_l.constprop.0+0x22>
 81105b4:	2c2d      	cmp	r4, #45	@ 0x2d
 81105b6:	d12d      	bne.n	8110614 <_strtol_l.constprop.0+0x90>
 81105b8:	782c      	ldrb	r4, [r5, #0]
 81105ba:	2601      	movs	r6, #1
 81105bc:	1c95      	adds	r5, r2, #2
 81105be:	f033 0210 	bics.w	r2, r3, #16
 81105c2:	d109      	bne.n	81105d8 <_strtol_l.constprop.0+0x54>
 81105c4:	2c30      	cmp	r4, #48	@ 0x30
 81105c6:	d12a      	bne.n	811061e <_strtol_l.constprop.0+0x9a>
 81105c8:	782a      	ldrb	r2, [r5, #0]
 81105ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 81105ce:	2a58      	cmp	r2, #88	@ 0x58
 81105d0:	d125      	bne.n	811061e <_strtol_l.constprop.0+0x9a>
 81105d2:	786c      	ldrb	r4, [r5, #1]
 81105d4:	2310      	movs	r3, #16
 81105d6:	3502      	adds	r5, #2
 81105d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 81105dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 81105e0:	2200      	movs	r2, #0
 81105e2:	fbbc f9f3 	udiv	r9, ip, r3
 81105e6:	4610      	mov	r0, r2
 81105e8:	fb03 ca19 	mls	sl, r3, r9, ip
 81105ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 81105f0:	2f09      	cmp	r7, #9
 81105f2:	d81b      	bhi.n	811062c <_strtol_l.constprop.0+0xa8>
 81105f4:	463c      	mov	r4, r7
 81105f6:	42a3      	cmp	r3, r4
 81105f8:	dd27      	ble.n	811064a <_strtol_l.constprop.0+0xc6>
 81105fa:	1c57      	adds	r7, r2, #1
 81105fc:	d007      	beq.n	811060e <_strtol_l.constprop.0+0x8a>
 81105fe:	4581      	cmp	r9, r0
 8110600:	d320      	bcc.n	8110644 <_strtol_l.constprop.0+0xc0>
 8110602:	d101      	bne.n	8110608 <_strtol_l.constprop.0+0x84>
 8110604:	45a2      	cmp	sl, r4
 8110606:	db1d      	blt.n	8110644 <_strtol_l.constprop.0+0xc0>
 8110608:	fb00 4003 	mla	r0, r0, r3, r4
 811060c:	2201      	movs	r2, #1
 811060e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8110612:	e7eb      	b.n	81105ec <_strtol_l.constprop.0+0x68>
 8110614:	2c2b      	cmp	r4, #43	@ 0x2b
 8110616:	bf04      	itt	eq
 8110618:	782c      	ldrbeq	r4, [r5, #0]
 811061a:	1c95      	addeq	r5, r2, #2
 811061c:	e7cf      	b.n	81105be <_strtol_l.constprop.0+0x3a>
 811061e:	2b00      	cmp	r3, #0
 8110620:	d1da      	bne.n	81105d8 <_strtol_l.constprop.0+0x54>
 8110622:	2c30      	cmp	r4, #48	@ 0x30
 8110624:	bf0c      	ite	eq
 8110626:	2308      	moveq	r3, #8
 8110628:	230a      	movne	r3, #10
 811062a:	e7d5      	b.n	81105d8 <_strtol_l.constprop.0+0x54>
 811062c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8110630:	2f19      	cmp	r7, #25
 8110632:	d801      	bhi.n	8110638 <_strtol_l.constprop.0+0xb4>
 8110634:	3c37      	subs	r4, #55	@ 0x37
 8110636:	e7de      	b.n	81105f6 <_strtol_l.constprop.0+0x72>
 8110638:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 811063c:	2f19      	cmp	r7, #25
 811063e:	d804      	bhi.n	811064a <_strtol_l.constprop.0+0xc6>
 8110640:	3c57      	subs	r4, #87	@ 0x57
 8110642:	e7d8      	b.n	81105f6 <_strtol_l.constprop.0+0x72>
 8110644:	f04f 32ff 	mov.w	r2, #4294967295
 8110648:	e7e1      	b.n	811060e <_strtol_l.constprop.0+0x8a>
 811064a:	1c53      	adds	r3, r2, #1
 811064c:	d108      	bne.n	8110660 <_strtol_l.constprop.0+0xdc>
 811064e:	2322      	movs	r3, #34	@ 0x22
 8110650:	f8ce 3000 	str.w	r3, [lr]
 8110654:	4660      	mov	r0, ip
 8110656:	f1b8 0f00 	cmp.w	r8, #0
 811065a:	d0a0      	beq.n	811059e <_strtol_l.constprop.0+0x1a>
 811065c:	1e69      	subs	r1, r5, #1
 811065e:	e006      	b.n	811066e <_strtol_l.constprop.0+0xea>
 8110660:	b106      	cbz	r6, 8110664 <_strtol_l.constprop.0+0xe0>
 8110662:	4240      	negs	r0, r0
 8110664:	f1b8 0f00 	cmp.w	r8, #0
 8110668:	d099      	beq.n	811059e <_strtol_l.constprop.0+0x1a>
 811066a:	2a00      	cmp	r2, #0
 811066c:	d1f6      	bne.n	811065c <_strtol_l.constprop.0+0xd8>
 811066e:	f8c8 1000 	str.w	r1, [r8]
 8110672:	e794      	b.n	811059e <_strtol_l.constprop.0+0x1a>
 8110674:	08111a21 	.word	0x08111a21

08110678 <_strtol_r>:
 8110678:	f7ff bf84 	b.w	8110584 <_strtol_l.constprop.0>

0811067c <__ssputs_r>:
 811067c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8110680:	688e      	ldr	r6, [r1, #8]
 8110682:	461f      	mov	r7, r3
 8110684:	42be      	cmp	r6, r7
 8110686:	680b      	ldr	r3, [r1, #0]
 8110688:	4682      	mov	sl, r0
 811068a:	460c      	mov	r4, r1
 811068c:	4690      	mov	r8, r2
 811068e:	d82d      	bhi.n	81106ec <__ssputs_r+0x70>
 8110690:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8110694:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8110698:	d026      	beq.n	81106e8 <__ssputs_r+0x6c>
 811069a:	6965      	ldr	r5, [r4, #20]
 811069c:	6909      	ldr	r1, [r1, #16]
 811069e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 81106a2:	eba3 0901 	sub.w	r9, r3, r1
 81106a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 81106aa:	1c7b      	adds	r3, r7, #1
 81106ac:	444b      	add	r3, r9
 81106ae:	106d      	asrs	r5, r5, #1
 81106b0:	429d      	cmp	r5, r3
 81106b2:	bf38      	it	cc
 81106b4:	461d      	movcc	r5, r3
 81106b6:	0553      	lsls	r3, r2, #21
 81106b8:	d527      	bpl.n	811070a <__ssputs_r+0x8e>
 81106ba:	4629      	mov	r1, r5
 81106bc:	f7fe fc1c 	bl	810eef8 <_malloc_r>
 81106c0:	4606      	mov	r6, r0
 81106c2:	b360      	cbz	r0, 811071e <__ssputs_r+0xa2>
 81106c4:	6921      	ldr	r1, [r4, #16]
 81106c6:	464a      	mov	r2, r9
 81106c8:	f7fd fd23 	bl	810e112 <memcpy>
 81106cc:	89a3      	ldrh	r3, [r4, #12]
 81106ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 81106d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81106d6:	81a3      	strh	r3, [r4, #12]
 81106d8:	6126      	str	r6, [r4, #16]
 81106da:	6165      	str	r5, [r4, #20]
 81106dc:	444e      	add	r6, r9
 81106de:	eba5 0509 	sub.w	r5, r5, r9
 81106e2:	6026      	str	r6, [r4, #0]
 81106e4:	60a5      	str	r5, [r4, #8]
 81106e6:	463e      	mov	r6, r7
 81106e8:	42be      	cmp	r6, r7
 81106ea:	d900      	bls.n	81106ee <__ssputs_r+0x72>
 81106ec:	463e      	mov	r6, r7
 81106ee:	6820      	ldr	r0, [r4, #0]
 81106f0:	4632      	mov	r2, r6
 81106f2:	4641      	mov	r1, r8
 81106f4:	f000 fb7c 	bl	8110df0 <memmove>
 81106f8:	68a3      	ldr	r3, [r4, #8]
 81106fa:	1b9b      	subs	r3, r3, r6
 81106fc:	60a3      	str	r3, [r4, #8]
 81106fe:	6823      	ldr	r3, [r4, #0]
 8110700:	4433      	add	r3, r6
 8110702:	6023      	str	r3, [r4, #0]
 8110704:	2000      	movs	r0, #0
 8110706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811070a:	462a      	mov	r2, r5
 811070c:	f000 ff3d 	bl	811158a <_realloc_r>
 8110710:	4606      	mov	r6, r0
 8110712:	2800      	cmp	r0, #0
 8110714:	d1e0      	bne.n	81106d8 <__ssputs_r+0x5c>
 8110716:	6921      	ldr	r1, [r4, #16]
 8110718:	4650      	mov	r0, sl
 811071a:	f7fe fb79 	bl	810ee10 <_free_r>
 811071e:	230c      	movs	r3, #12
 8110720:	f8ca 3000 	str.w	r3, [sl]
 8110724:	89a3      	ldrh	r3, [r4, #12]
 8110726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811072a:	81a3      	strh	r3, [r4, #12]
 811072c:	f04f 30ff 	mov.w	r0, #4294967295
 8110730:	e7e9      	b.n	8110706 <__ssputs_r+0x8a>
	...

08110734 <_svfiprintf_r>:
 8110734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110738:	4698      	mov	r8, r3
 811073a:	898b      	ldrh	r3, [r1, #12]
 811073c:	061b      	lsls	r3, r3, #24
 811073e:	b09d      	sub	sp, #116	@ 0x74
 8110740:	4607      	mov	r7, r0
 8110742:	460d      	mov	r5, r1
 8110744:	4614      	mov	r4, r2
 8110746:	d510      	bpl.n	811076a <_svfiprintf_r+0x36>
 8110748:	690b      	ldr	r3, [r1, #16]
 811074a:	b973      	cbnz	r3, 811076a <_svfiprintf_r+0x36>
 811074c:	2140      	movs	r1, #64	@ 0x40
 811074e:	f7fe fbd3 	bl	810eef8 <_malloc_r>
 8110752:	6028      	str	r0, [r5, #0]
 8110754:	6128      	str	r0, [r5, #16]
 8110756:	b930      	cbnz	r0, 8110766 <_svfiprintf_r+0x32>
 8110758:	230c      	movs	r3, #12
 811075a:	603b      	str	r3, [r7, #0]
 811075c:	f04f 30ff 	mov.w	r0, #4294967295
 8110760:	b01d      	add	sp, #116	@ 0x74
 8110762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110766:	2340      	movs	r3, #64	@ 0x40
 8110768:	616b      	str	r3, [r5, #20]
 811076a:	2300      	movs	r3, #0
 811076c:	9309      	str	r3, [sp, #36]	@ 0x24
 811076e:	2320      	movs	r3, #32
 8110770:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8110774:	f8cd 800c 	str.w	r8, [sp, #12]
 8110778:	2330      	movs	r3, #48	@ 0x30
 811077a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8110918 <_svfiprintf_r+0x1e4>
 811077e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8110782:	f04f 0901 	mov.w	r9, #1
 8110786:	4623      	mov	r3, r4
 8110788:	469a      	mov	sl, r3
 811078a:	f813 2b01 	ldrb.w	r2, [r3], #1
 811078e:	b10a      	cbz	r2, 8110794 <_svfiprintf_r+0x60>
 8110790:	2a25      	cmp	r2, #37	@ 0x25
 8110792:	d1f9      	bne.n	8110788 <_svfiprintf_r+0x54>
 8110794:	ebba 0b04 	subs.w	fp, sl, r4
 8110798:	d00b      	beq.n	81107b2 <_svfiprintf_r+0x7e>
 811079a:	465b      	mov	r3, fp
 811079c:	4622      	mov	r2, r4
 811079e:	4629      	mov	r1, r5
 81107a0:	4638      	mov	r0, r7
 81107a2:	f7ff ff6b 	bl	811067c <__ssputs_r>
 81107a6:	3001      	adds	r0, #1
 81107a8:	f000 80a7 	beq.w	81108fa <_svfiprintf_r+0x1c6>
 81107ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81107ae:	445a      	add	r2, fp
 81107b0:	9209      	str	r2, [sp, #36]	@ 0x24
 81107b2:	f89a 3000 	ldrb.w	r3, [sl]
 81107b6:	2b00      	cmp	r3, #0
 81107b8:	f000 809f 	beq.w	81108fa <_svfiprintf_r+0x1c6>
 81107bc:	2300      	movs	r3, #0
 81107be:	f04f 32ff 	mov.w	r2, #4294967295
 81107c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81107c6:	f10a 0a01 	add.w	sl, sl, #1
 81107ca:	9304      	str	r3, [sp, #16]
 81107cc:	9307      	str	r3, [sp, #28]
 81107ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 81107d2:	931a      	str	r3, [sp, #104]	@ 0x68
 81107d4:	4654      	mov	r4, sl
 81107d6:	2205      	movs	r2, #5
 81107d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 81107dc:	484e      	ldr	r0, [pc, #312]	@ (8110918 <_svfiprintf_r+0x1e4>)
 81107de:	f7ef fd7f 	bl	81002e0 <memchr>
 81107e2:	9a04      	ldr	r2, [sp, #16]
 81107e4:	b9d8      	cbnz	r0, 811081e <_svfiprintf_r+0xea>
 81107e6:	06d0      	lsls	r0, r2, #27
 81107e8:	bf44      	itt	mi
 81107ea:	2320      	movmi	r3, #32
 81107ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81107f0:	0711      	lsls	r1, r2, #28
 81107f2:	bf44      	itt	mi
 81107f4:	232b      	movmi	r3, #43	@ 0x2b
 81107f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81107fa:	f89a 3000 	ldrb.w	r3, [sl]
 81107fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8110800:	d015      	beq.n	811082e <_svfiprintf_r+0xfa>
 8110802:	9a07      	ldr	r2, [sp, #28]
 8110804:	4654      	mov	r4, sl
 8110806:	2000      	movs	r0, #0
 8110808:	f04f 0c0a 	mov.w	ip, #10
 811080c:	4621      	mov	r1, r4
 811080e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8110812:	3b30      	subs	r3, #48	@ 0x30
 8110814:	2b09      	cmp	r3, #9
 8110816:	d94b      	bls.n	81108b0 <_svfiprintf_r+0x17c>
 8110818:	b1b0      	cbz	r0, 8110848 <_svfiprintf_r+0x114>
 811081a:	9207      	str	r2, [sp, #28]
 811081c:	e014      	b.n	8110848 <_svfiprintf_r+0x114>
 811081e:	eba0 0308 	sub.w	r3, r0, r8
 8110822:	fa09 f303 	lsl.w	r3, r9, r3
 8110826:	4313      	orrs	r3, r2
 8110828:	9304      	str	r3, [sp, #16]
 811082a:	46a2      	mov	sl, r4
 811082c:	e7d2      	b.n	81107d4 <_svfiprintf_r+0xa0>
 811082e:	9b03      	ldr	r3, [sp, #12]
 8110830:	1d19      	adds	r1, r3, #4
 8110832:	681b      	ldr	r3, [r3, #0]
 8110834:	9103      	str	r1, [sp, #12]
 8110836:	2b00      	cmp	r3, #0
 8110838:	bfbb      	ittet	lt
 811083a:	425b      	neglt	r3, r3
 811083c:	f042 0202 	orrlt.w	r2, r2, #2
 8110840:	9307      	strge	r3, [sp, #28]
 8110842:	9307      	strlt	r3, [sp, #28]
 8110844:	bfb8      	it	lt
 8110846:	9204      	strlt	r2, [sp, #16]
 8110848:	7823      	ldrb	r3, [r4, #0]
 811084a:	2b2e      	cmp	r3, #46	@ 0x2e
 811084c:	d10a      	bne.n	8110864 <_svfiprintf_r+0x130>
 811084e:	7863      	ldrb	r3, [r4, #1]
 8110850:	2b2a      	cmp	r3, #42	@ 0x2a
 8110852:	d132      	bne.n	81108ba <_svfiprintf_r+0x186>
 8110854:	9b03      	ldr	r3, [sp, #12]
 8110856:	1d1a      	adds	r2, r3, #4
 8110858:	681b      	ldr	r3, [r3, #0]
 811085a:	9203      	str	r2, [sp, #12]
 811085c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8110860:	3402      	adds	r4, #2
 8110862:	9305      	str	r3, [sp, #20]
 8110864:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8110928 <_svfiprintf_r+0x1f4>
 8110868:	7821      	ldrb	r1, [r4, #0]
 811086a:	2203      	movs	r2, #3
 811086c:	4650      	mov	r0, sl
 811086e:	f7ef fd37 	bl	81002e0 <memchr>
 8110872:	b138      	cbz	r0, 8110884 <_svfiprintf_r+0x150>
 8110874:	9b04      	ldr	r3, [sp, #16]
 8110876:	eba0 000a 	sub.w	r0, r0, sl
 811087a:	2240      	movs	r2, #64	@ 0x40
 811087c:	4082      	lsls	r2, r0
 811087e:	4313      	orrs	r3, r2
 8110880:	3401      	adds	r4, #1
 8110882:	9304      	str	r3, [sp, #16]
 8110884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8110888:	4824      	ldr	r0, [pc, #144]	@ (811091c <_svfiprintf_r+0x1e8>)
 811088a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 811088e:	2206      	movs	r2, #6
 8110890:	f7ef fd26 	bl	81002e0 <memchr>
 8110894:	2800      	cmp	r0, #0
 8110896:	d036      	beq.n	8110906 <_svfiprintf_r+0x1d2>
 8110898:	4b21      	ldr	r3, [pc, #132]	@ (8110920 <_svfiprintf_r+0x1ec>)
 811089a:	bb1b      	cbnz	r3, 81108e4 <_svfiprintf_r+0x1b0>
 811089c:	9b03      	ldr	r3, [sp, #12]
 811089e:	3307      	adds	r3, #7
 81108a0:	f023 0307 	bic.w	r3, r3, #7
 81108a4:	3308      	adds	r3, #8
 81108a6:	9303      	str	r3, [sp, #12]
 81108a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81108aa:	4433      	add	r3, r6
 81108ac:	9309      	str	r3, [sp, #36]	@ 0x24
 81108ae:	e76a      	b.n	8110786 <_svfiprintf_r+0x52>
 81108b0:	fb0c 3202 	mla	r2, ip, r2, r3
 81108b4:	460c      	mov	r4, r1
 81108b6:	2001      	movs	r0, #1
 81108b8:	e7a8      	b.n	811080c <_svfiprintf_r+0xd8>
 81108ba:	2300      	movs	r3, #0
 81108bc:	3401      	adds	r4, #1
 81108be:	9305      	str	r3, [sp, #20]
 81108c0:	4619      	mov	r1, r3
 81108c2:	f04f 0c0a 	mov.w	ip, #10
 81108c6:	4620      	mov	r0, r4
 81108c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 81108cc:	3a30      	subs	r2, #48	@ 0x30
 81108ce:	2a09      	cmp	r2, #9
 81108d0:	d903      	bls.n	81108da <_svfiprintf_r+0x1a6>
 81108d2:	2b00      	cmp	r3, #0
 81108d4:	d0c6      	beq.n	8110864 <_svfiprintf_r+0x130>
 81108d6:	9105      	str	r1, [sp, #20]
 81108d8:	e7c4      	b.n	8110864 <_svfiprintf_r+0x130>
 81108da:	fb0c 2101 	mla	r1, ip, r1, r2
 81108de:	4604      	mov	r4, r0
 81108e0:	2301      	movs	r3, #1
 81108e2:	e7f0      	b.n	81108c6 <_svfiprintf_r+0x192>
 81108e4:	ab03      	add	r3, sp, #12
 81108e6:	9300      	str	r3, [sp, #0]
 81108e8:	462a      	mov	r2, r5
 81108ea:	4b0e      	ldr	r3, [pc, #56]	@ (8110924 <_svfiprintf_r+0x1f0>)
 81108ec:	a904      	add	r1, sp, #16
 81108ee:	4638      	mov	r0, r7
 81108f0:	f7fc fb9a 	bl	810d028 <_printf_float>
 81108f4:	1c42      	adds	r2, r0, #1
 81108f6:	4606      	mov	r6, r0
 81108f8:	d1d6      	bne.n	81108a8 <_svfiprintf_r+0x174>
 81108fa:	89ab      	ldrh	r3, [r5, #12]
 81108fc:	065b      	lsls	r3, r3, #25
 81108fe:	f53f af2d 	bmi.w	811075c <_svfiprintf_r+0x28>
 8110902:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8110904:	e72c      	b.n	8110760 <_svfiprintf_r+0x2c>
 8110906:	ab03      	add	r3, sp, #12
 8110908:	9300      	str	r3, [sp, #0]
 811090a:	462a      	mov	r2, r5
 811090c:	4b05      	ldr	r3, [pc, #20]	@ (8110924 <_svfiprintf_r+0x1f0>)
 811090e:	a904      	add	r1, sp, #16
 8110910:	4638      	mov	r0, r7
 8110912:	f7fc fe21 	bl	810d558 <_printf_i>
 8110916:	e7ed      	b.n	81108f4 <_svfiprintf_r+0x1c0>
 8110918:	08111b21 	.word	0x08111b21
 811091c:	08111b2b 	.word	0x08111b2b
 8110920:	0810d029 	.word	0x0810d029
 8110924:	0811067d 	.word	0x0811067d
 8110928:	08111b27 	.word	0x08111b27

0811092c <__sfputc_r>:
 811092c:	6893      	ldr	r3, [r2, #8]
 811092e:	3b01      	subs	r3, #1
 8110930:	2b00      	cmp	r3, #0
 8110932:	b410      	push	{r4}
 8110934:	6093      	str	r3, [r2, #8]
 8110936:	da08      	bge.n	811094a <__sfputc_r+0x1e>
 8110938:	6994      	ldr	r4, [r2, #24]
 811093a:	42a3      	cmp	r3, r4
 811093c:	db01      	blt.n	8110942 <__sfputc_r+0x16>
 811093e:	290a      	cmp	r1, #10
 8110940:	d103      	bne.n	811094a <__sfputc_r+0x1e>
 8110942:	f85d 4b04 	ldr.w	r4, [sp], #4
 8110946:	f7fd bad0 	b.w	810deea <__swbuf_r>
 811094a:	6813      	ldr	r3, [r2, #0]
 811094c:	1c58      	adds	r0, r3, #1
 811094e:	6010      	str	r0, [r2, #0]
 8110950:	7019      	strb	r1, [r3, #0]
 8110952:	4608      	mov	r0, r1
 8110954:	f85d 4b04 	ldr.w	r4, [sp], #4
 8110958:	4770      	bx	lr

0811095a <__sfputs_r>:
 811095a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811095c:	4606      	mov	r6, r0
 811095e:	460f      	mov	r7, r1
 8110960:	4614      	mov	r4, r2
 8110962:	18d5      	adds	r5, r2, r3
 8110964:	42ac      	cmp	r4, r5
 8110966:	d101      	bne.n	811096c <__sfputs_r+0x12>
 8110968:	2000      	movs	r0, #0
 811096a:	e007      	b.n	811097c <__sfputs_r+0x22>
 811096c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8110970:	463a      	mov	r2, r7
 8110972:	4630      	mov	r0, r6
 8110974:	f7ff ffda 	bl	811092c <__sfputc_r>
 8110978:	1c43      	adds	r3, r0, #1
 811097a:	d1f3      	bne.n	8110964 <__sfputs_r+0xa>
 811097c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08110980 <_vfiprintf_r>:
 8110980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110984:	460d      	mov	r5, r1
 8110986:	b09d      	sub	sp, #116	@ 0x74
 8110988:	4614      	mov	r4, r2
 811098a:	4698      	mov	r8, r3
 811098c:	4606      	mov	r6, r0
 811098e:	b118      	cbz	r0, 8110998 <_vfiprintf_r+0x18>
 8110990:	6a03      	ldr	r3, [r0, #32]
 8110992:	b90b      	cbnz	r3, 8110998 <_vfiprintf_r+0x18>
 8110994:	f7fd f9a0 	bl	810dcd8 <__sinit>
 8110998:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 811099a:	07d9      	lsls	r1, r3, #31
 811099c:	d405      	bmi.n	81109aa <_vfiprintf_r+0x2a>
 811099e:	89ab      	ldrh	r3, [r5, #12]
 81109a0:	059a      	lsls	r2, r3, #22
 81109a2:	d402      	bmi.n	81109aa <_vfiprintf_r+0x2a>
 81109a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 81109a6:	f7fd fbb2 	bl	810e10e <__retarget_lock_acquire_recursive>
 81109aa:	89ab      	ldrh	r3, [r5, #12]
 81109ac:	071b      	lsls	r3, r3, #28
 81109ae:	d501      	bpl.n	81109b4 <_vfiprintf_r+0x34>
 81109b0:	692b      	ldr	r3, [r5, #16]
 81109b2:	b99b      	cbnz	r3, 81109dc <_vfiprintf_r+0x5c>
 81109b4:	4629      	mov	r1, r5
 81109b6:	4630      	mov	r0, r6
 81109b8:	f7fd fad6 	bl	810df68 <__swsetup_r>
 81109bc:	b170      	cbz	r0, 81109dc <_vfiprintf_r+0x5c>
 81109be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 81109c0:	07dc      	lsls	r4, r3, #31
 81109c2:	d504      	bpl.n	81109ce <_vfiprintf_r+0x4e>
 81109c4:	f04f 30ff 	mov.w	r0, #4294967295
 81109c8:	b01d      	add	sp, #116	@ 0x74
 81109ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81109ce:	89ab      	ldrh	r3, [r5, #12]
 81109d0:	0598      	lsls	r0, r3, #22
 81109d2:	d4f7      	bmi.n	81109c4 <_vfiprintf_r+0x44>
 81109d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 81109d6:	f7fd fb9b 	bl	810e110 <__retarget_lock_release_recursive>
 81109da:	e7f3      	b.n	81109c4 <_vfiprintf_r+0x44>
 81109dc:	2300      	movs	r3, #0
 81109de:	9309      	str	r3, [sp, #36]	@ 0x24
 81109e0:	2320      	movs	r3, #32
 81109e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 81109e6:	f8cd 800c 	str.w	r8, [sp, #12]
 81109ea:	2330      	movs	r3, #48	@ 0x30
 81109ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8110b9c <_vfiprintf_r+0x21c>
 81109f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 81109f4:	f04f 0901 	mov.w	r9, #1
 81109f8:	4623      	mov	r3, r4
 81109fa:	469a      	mov	sl, r3
 81109fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8110a00:	b10a      	cbz	r2, 8110a06 <_vfiprintf_r+0x86>
 8110a02:	2a25      	cmp	r2, #37	@ 0x25
 8110a04:	d1f9      	bne.n	81109fa <_vfiprintf_r+0x7a>
 8110a06:	ebba 0b04 	subs.w	fp, sl, r4
 8110a0a:	d00b      	beq.n	8110a24 <_vfiprintf_r+0xa4>
 8110a0c:	465b      	mov	r3, fp
 8110a0e:	4622      	mov	r2, r4
 8110a10:	4629      	mov	r1, r5
 8110a12:	4630      	mov	r0, r6
 8110a14:	f7ff ffa1 	bl	811095a <__sfputs_r>
 8110a18:	3001      	adds	r0, #1
 8110a1a:	f000 80a7 	beq.w	8110b6c <_vfiprintf_r+0x1ec>
 8110a1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8110a20:	445a      	add	r2, fp
 8110a22:	9209      	str	r2, [sp, #36]	@ 0x24
 8110a24:	f89a 3000 	ldrb.w	r3, [sl]
 8110a28:	2b00      	cmp	r3, #0
 8110a2a:	f000 809f 	beq.w	8110b6c <_vfiprintf_r+0x1ec>
 8110a2e:	2300      	movs	r3, #0
 8110a30:	f04f 32ff 	mov.w	r2, #4294967295
 8110a34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8110a38:	f10a 0a01 	add.w	sl, sl, #1
 8110a3c:	9304      	str	r3, [sp, #16]
 8110a3e:	9307      	str	r3, [sp, #28]
 8110a40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8110a44:	931a      	str	r3, [sp, #104]	@ 0x68
 8110a46:	4654      	mov	r4, sl
 8110a48:	2205      	movs	r2, #5
 8110a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8110a4e:	4853      	ldr	r0, [pc, #332]	@ (8110b9c <_vfiprintf_r+0x21c>)
 8110a50:	f7ef fc46 	bl	81002e0 <memchr>
 8110a54:	9a04      	ldr	r2, [sp, #16]
 8110a56:	b9d8      	cbnz	r0, 8110a90 <_vfiprintf_r+0x110>
 8110a58:	06d1      	lsls	r1, r2, #27
 8110a5a:	bf44      	itt	mi
 8110a5c:	2320      	movmi	r3, #32
 8110a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8110a62:	0713      	lsls	r3, r2, #28
 8110a64:	bf44      	itt	mi
 8110a66:	232b      	movmi	r3, #43	@ 0x2b
 8110a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8110a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8110a70:	2b2a      	cmp	r3, #42	@ 0x2a
 8110a72:	d015      	beq.n	8110aa0 <_vfiprintf_r+0x120>
 8110a74:	9a07      	ldr	r2, [sp, #28]
 8110a76:	4654      	mov	r4, sl
 8110a78:	2000      	movs	r0, #0
 8110a7a:	f04f 0c0a 	mov.w	ip, #10
 8110a7e:	4621      	mov	r1, r4
 8110a80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8110a84:	3b30      	subs	r3, #48	@ 0x30
 8110a86:	2b09      	cmp	r3, #9
 8110a88:	d94b      	bls.n	8110b22 <_vfiprintf_r+0x1a2>
 8110a8a:	b1b0      	cbz	r0, 8110aba <_vfiprintf_r+0x13a>
 8110a8c:	9207      	str	r2, [sp, #28]
 8110a8e:	e014      	b.n	8110aba <_vfiprintf_r+0x13a>
 8110a90:	eba0 0308 	sub.w	r3, r0, r8
 8110a94:	fa09 f303 	lsl.w	r3, r9, r3
 8110a98:	4313      	orrs	r3, r2
 8110a9a:	9304      	str	r3, [sp, #16]
 8110a9c:	46a2      	mov	sl, r4
 8110a9e:	e7d2      	b.n	8110a46 <_vfiprintf_r+0xc6>
 8110aa0:	9b03      	ldr	r3, [sp, #12]
 8110aa2:	1d19      	adds	r1, r3, #4
 8110aa4:	681b      	ldr	r3, [r3, #0]
 8110aa6:	9103      	str	r1, [sp, #12]
 8110aa8:	2b00      	cmp	r3, #0
 8110aaa:	bfbb      	ittet	lt
 8110aac:	425b      	neglt	r3, r3
 8110aae:	f042 0202 	orrlt.w	r2, r2, #2
 8110ab2:	9307      	strge	r3, [sp, #28]
 8110ab4:	9307      	strlt	r3, [sp, #28]
 8110ab6:	bfb8      	it	lt
 8110ab8:	9204      	strlt	r2, [sp, #16]
 8110aba:	7823      	ldrb	r3, [r4, #0]
 8110abc:	2b2e      	cmp	r3, #46	@ 0x2e
 8110abe:	d10a      	bne.n	8110ad6 <_vfiprintf_r+0x156>
 8110ac0:	7863      	ldrb	r3, [r4, #1]
 8110ac2:	2b2a      	cmp	r3, #42	@ 0x2a
 8110ac4:	d132      	bne.n	8110b2c <_vfiprintf_r+0x1ac>
 8110ac6:	9b03      	ldr	r3, [sp, #12]
 8110ac8:	1d1a      	adds	r2, r3, #4
 8110aca:	681b      	ldr	r3, [r3, #0]
 8110acc:	9203      	str	r2, [sp, #12]
 8110ace:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8110ad2:	3402      	adds	r4, #2
 8110ad4:	9305      	str	r3, [sp, #20]
 8110ad6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8110bac <_vfiprintf_r+0x22c>
 8110ada:	7821      	ldrb	r1, [r4, #0]
 8110adc:	2203      	movs	r2, #3
 8110ade:	4650      	mov	r0, sl
 8110ae0:	f7ef fbfe 	bl	81002e0 <memchr>
 8110ae4:	b138      	cbz	r0, 8110af6 <_vfiprintf_r+0x176>
 8110ae6:	9b04      	ldr	r3, [sp, #16]
 8110ae8:	eba0 000a 	sub.w	r0, r0, sl
 8110aec:	2240      	movs	r2, #64	@ 0x40
 8110aee:	4082      	lsls	r2, r0
 8110af0:	4313      	orrs	r3, r2
 8110af2:	3401      	adds	r4, #1
 8110af4:	9304      	str	r3, [sp, #16]
 8110af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8110afa:	4829      	ldr	r0, [pc, #164]	@ (8110ba0 <_vfiprintf_r+0x220>)
 8110afc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8110b00:	2206      	movs	r2, #6
 8110b02:	f7ef fbed 	bl	81002e0 <memchr>
 8110b06:	2800      	cmp	r0, #0
 8110b08:	d03f      	beq.n	8110b8a <_vfiprintf_r+0x20a>
 8110b0a:	4b26      	ldr	r3, [pc, #152]	@ (8110ba4 <_vfiprintf_r+0x224>)
 8110b0c:	bb1b      	cbnz	r3, 8110b56 <_vfiprintf_r+0x1d6>
 8110b0e:	9b03      	ldr	r3, [sp, #12]
 8110b10:	3307      	adds	r3, #7
 8110b12:	f023 0307 	bic.w	r3, r3, #7
 8110b16:	3308      	adds	r3, #8
 8110b18:	9303      	str	r3, [sp, #12]
 8110b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8110b1c:	443b      	add	r3, r7
 8110b1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8110b20:	e76a      	b.n	81109f8 <_vfiprintf_r+0x78>
 8110b22:	fb0c 3202 	mla	r2, ip, r2, r3
 8110b26:	460c      	mov	r4, r1
 8110b28:	2001      	movs	r0, #1
 8110b2a:	e7a8      	b.n	8110a7e <_vfiprintf_r+0xfe>
 8110b2c:	2300      	movs	r3, #0
 8110b2e:	3401      	adds	r4, #1
 8110b30:	9305      	str	r3, [sp, #20]
 8110b32:	4619      	mov	r1, r3
 8110b34:	f04f 0c0a 	mov.w	ip, #10
 8110b38:	4620      	mov	r0, r4
 8110b3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8110b3e:	3a30      	subs	r2, #48	@ 0x30
 8110b40:	2a09      	cmp	r2, #9
 8110b42:	d903      	bls.n	8110b4c <_vfiprintf_r+0x1cc>
 8110b44:	2b00      	cmp	r3, #0
 8110b46:	d0c6      	beq.n	8110ad6 <_vfiprintf_r+0x156>
 8110b48:	9105      	str	r1, [sp, #20]
 8110b4a:	e7c4      	b.n	8110ad6 <_vfiprintf_r+0x156>
 8110b4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8110b50:	4604      	mov	r4, r0
 8110b52:	2301      	movs	r3, #1
 8110b54:	e7f0      	b.n	8110b38 <_vfiprintf_r+0x1b8>
 8110b56:	ab03      	add	r3, sp, #12
 8110b58:	9300      	str	r3, [sp, #0]
 8110b5a:	462a      	mov	r2, r5
 8110b5c:	4b12      	ldr	r3, [pc, #72]	@ (8110ba8 <_vfiprintf_r+0x228>)
 8110b5e:	a904      	add	r1, sp, #16
 8110b60:	4630      	mov	r0, r6
 8110b62:	f7fc fa61 	bl	810d028 <_printf_float>
 8110b66:	4607      	mov	r7, r0
 8110b68:	1c78      	adds	r0, r7, #1
 8110b6a:	d1d6      	bne.n	8110b1a <_vfiprintf_r+0x19a>
 8110b6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8110b6e:	07d9      	lsls	r1, r3, #31
 8110b70:	d405      	bmi.n	8110b7e <_vfiprintf_r+0x1fe>
 8110b72:	89ab      	ldrh	r3, [r5, #12]
 8110b74:	059a      	lsls	r2, r3, #22
 8110b76:	d402      	bmi.n	8110b7e <_vfiprintf_r+0x1fe>
 8110b78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8110b7a:	f7fd fac9 	bl	810e110 <__retarget_lock_release_recursive>
 8110b7e:	89ab      	ldrh	r3, [r5, #12]
 8110b80:	065b      	lsls	r3, r3, #25
 8110b82:	f53f af1f 	bmi.w	81109c4 <_vfiprintf_r+0x44>
 8110b86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8110b88:	e71e      	b.n	81109c8 <_vfiprintf_r+0x48>
 8110b8a:	ab03      	add	r3, sp, #12
 8110b8c:	9300      	str	r3, [sp, #0]
 8110b8e:	462a      	mov	r2, r5
 8110b90:	4b05      	ldr	r3, [pc, #20]	@ (8110ba8 <_vfiprintf_r+0x228>)
 8110b92:	a904      	add	r1, sp, #16
 8110b94:	4630      	mov	r0, r6
 8110b96:	f7fc fcdf 	bl	810d558 <_printf_i>
 8110b9a:	e7e4      	b.n	8110b66 <_vfiprintf_r+0x1e6>
 8110b9c:	08111b21 	.word	0x08111b21
 8110ba0:	08111b2b 	.word	0x08111b2b
 8110ba4:	0810d029 	.word	0x0810d029
 8110ba8:	0811095b 	.word	0x0811095b
 8110bac:	08111b27 	.word	0x08111b27

08110bb0 <__sflush_r>:
 8110bb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8110bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8110bb8:	0716      	lsls	r6, r2, #28
 8110bba:	4605      	mov	r5, r0
 8110bbc:	460c      	mov	r4, r1
 8110bbe:	d454      	bmi.n	8110c6a <__sflush_r+0xba>
 8110bc0:	684b      	ldr	r3, [r1, #4]
 8110bc2:	2b00      	cmp	r3, #0
 8110bc4:	dc02      	bgt.n	8110bcc <__sflush_r+0x1c>
 8110bc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8110bc8:	2b00      	cmp	r3, #0
 8110bca:	dd48      	ble.n	8110c5e <__sflush_r+0xae>
 8110bcc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8110bce:	2e00      	cmp	r6, #0
 8110bd0:	d045      	beq.n	8110c5e <__sflush_r+0xae>
 8110bd2:	2300      	movs	r3, #0
 8110bd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8110bd8:	682f      	ldr	r7, [r5, #0]
 8110bda:	6a21      	ldr	r1, [r4, #32]
 8110bdc:	602b      	str	r3, [r5, #0]
 8110bde:	d030      	beq.n	8110c42 <__sflush_r+0x92>
 8110be0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8110be2:	89a3      	ldrh	r3, [r4, #12]
 8110be4:	0759      	lsls	r1, r3, #29
 8110be6:	d505      	bpl.n	8110bf4 <__sflush_r+0x44>
 8110be8:	6863      	ldr	r3, [r4, #4]
 8110bea:	1ad2      	subs	r2, r2, r3
 8110bec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8110bee:	b10b      	cbz	r3, 8110bf4 <__sflush_r+0x44>
 8110bf0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8110bf2:	1ad2      	subs	r2, r2, r3
 8110bf4:	2300      	movs	r3, #0
 8110bf6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8110bf8:	6a21      	ldr	r1, [r4, #32]
 8110bfa:	4628      	mov	r0, r5
 8110bfc:	47b0      	blx	r6
 8110bfe:	1c43      	adds	r3, r0, #1
 8110c00:	89a3      	ldrh	r3, [r4, #12]
 8110c02:	d106      	bne.n	8110c12 <__sflush_r+0x62>
 8110c04:	6829      	ldr	r1, [r5, #0]
 8110c06:	291d      	cmp	r1, #29
 8110c08:	d82b      	bhi.n	8110c62 <__sflush_r+0xb2>
 8110c0a:	4a2a      	ldr	r2, [pc, #168]	@ (8110cb4 <__sflush_r+0x104>)
 8110c0c:	410a      	asrs	r2, r1
 8110c0e:	07d6      	lsls	r6, r2, #31
 8110c10:	d427      	bmi.n	8110c62 <__sflush_r+0xb2>
 8110c12:	2200      	movs	r2, #0
 8110c14:	6062      	str	r2, [r4, #4]
 8110c16:	04d9      	lsls	r1, r3, #19
 8110c18:	6922      	ldr	r2, [r4, #16]
 8110c1a:	6022      	str	r2, [r4, #0]
 8110c1c:	d504      	bpl.n	8110c28 <__sflush_r+0x78>
 8110c1e:	1c42      	adds	r2, r0, #1
 8110c20:	d101      	bne.n	8110c26 <__sflush_r+0x76>
 8110c22:	682b      	ldr	r3, [r5, #0]
 8110c24:	b903      	cbnz	r3, 8110c28 <__sflush_r+0x78>
 8110c26:	6560      	str	r0, [r4, #84]	@ 0x54
 8110c28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8110c2a:	602f      	str	r7, [r5, #0]
 8110c2c:	b1b9      	cbz	r1, 8110c5e <__sflush_r+0xae>
 8110c2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8110c32:	4299      	cmp	r1, r3
 8110c34:	d002      	beq.n	8110c3c <__sflush_r+0x8c>
 8110c36:	4628      	mov	r0, r5
 8110c38:	f7fe f8ea 	bl	810ee10 <_free_r>
 8110c3c:	2300      	movs	r3, #0
 8110c3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8110c40:	e00d      	b.n	8110c5e <__sflush_r+0xae>
 8110c42:	2301      	movs	r3, #1
 8110c44:	4628      	mov	r0, r5
 8110c46:	47b0      	blx	r6
 8110c48:	4602      	mov	r2, r0
 8110c4a:	1c50      	adds	r0, r2, #1
 8110c4c:	d1c9      	bne.n	8110be2 <__sflush_r+0x32>
 8110c4e:	682b      	ldr	r3, [r5, #0]
 8110c50:	2b00      	cmp	r3, #0
 8110c52:	d0c6      	beq.n	8110be2 <__sflush_r+0x32>
 8110c54:	2b1d      	cmp	r3, #29
 8110c56:	d001      	beq.n	8110c5c <__sflush_r+0xac>
 8110c58:	2b16      	cmp	r3, #22
 8110c5a:	d11e      	bne.n	8110c9a <__sflush_r+0xea>
 8110c5c:	602f      	str	r7, [r5, #0]
 8110c5e:	2000      	movs	r0, #0
 8110c60:	e022      	b.n	8110ca8 <__sflush_r+0xf8>
 8110c62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8110c66:	b21b      	sxth	r3, r3
 8110c68:	e01b      	b.n	8110ca2 <__sflush_r+0xf2>
 8110c6a:	690f      	ldr	r7, [r1, #16]
 8110c6c:	2f00      	cmp	r7, #0
 8110c6e:	d0f6      	beq.n	8110c5e <__sflush_r+0xae>
 8110c70:	0793      	lsls	r3, r2, #30
 8110c72:	680e      	ldr	r6, [r1, #0]
 8110c74:	bf08      	it	eq
 8110c76:	694b      	ldreq	r3, [r1, #20]
 8110c78:	600f      	str	r7, [r1, #0]
 8110c7a:	bf18      	it	ne
 8110c7c:	2300      	movne	r3, #0
 8110c7e:	eba6 0807 	sub.w	r8, r6, r7
 8110c82:	608b      	str	r3, [r1, #8]
 8110c84:	f1b8 0f00 	cmp.w	r8, #0
 8110c88:	dde9      	ble.n	8110c5e <__sflush_r+0xae>
 8110c8a:	6a21      	ldr	r1, [r4, #32]
 8110c8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8110c8e:	4643      	mov	r3, r8
 8110c90:	463a      	mov	r2, r7
 8110c92:	4628      	mov	r0, r5
 8110c94:	47b0      	blx	r6
 8110c96:	2800      	cmp	r0, #0
 8110c98:	dc08      	bgt.n	8110cac <__sflush_r+0xfc>
 8110c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8110c9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8110ca2:	81a3      	strh	r3, [r4, #12]
 8110ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8110ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8110cac:	4407      	add	r7, r0
 8110cae:	eba8 0800 	sub.w	r8, r8, r0
 8110cb2:	e7e7      	b.n	8110c84 <__sflush_r+0xd4>
 8110cb4:	dfbffffe 	.word	0xdfbffffe

08110cb8 <_fflush_r>:
 8110cb8:	b538      	push	{r3, r4, r5, lr}
 8110cba:	690b      	ldr	r3, [r1, #16]
 8110cbc:	4605      	mov	r5, r0
 8110cbe:	460c      	mov	r4, r1
 8110cc0:	b913      	cbnz	r3, 8110cc8 <_fflush_r+0x10>
 8110cc2:	2500      	movs	r5, #0
 8110cc4:	4628      	mov	r0, r5
 8110cc6:	bd38      	pop	{r3, r4, r5, pc}
 8110cc8:	b118      	cbz	r0, 8110cd2 <_fflush_r+0x1a>
 8110cca:	6a03      	ldr	r3, [r0, #32]
 8110ccc:	b90b      	cbnz	r3, 8110cd2 <_fflush_r+0x1a>
 8110cce:	f7fd f803 	bl	810dcd8 <__sinit>
 8110cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8110cd6:	2b00      	cmp	r3, #0
 8110cd8:	d0f3      	beq.n	8110cc2 <_fflush_r+0xa>
 8110cda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8110cdc:	07d0      	lsls	r0, r2, #31
 8110cde:	d404      	bmi.n	8110cea <_fflush_r+0x32>
 8110ce0:	0599      	lsls	r1, r3, #22
 8110ce2:	d402      	bmi.n	8110cea <_fflush_r+0x32>
 8110ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8110ce6:	f7fd fa12 	bl	810e10e <__retarget_lock_acquire_recursive>
 8110cea:	4628      	mov	r0, r5
 8110cec:	4621      	mov	r1, r4
 8110cee:	f7ff ff5f 	bl	8110bb0 <__sflush_r>
 8110cf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8110cf4:	07da      	lsls	r2, r3, #31
 8110cf6:	4605      	mov	r5, r0
 8110cf8:	d4e4      	bmi.n	8110cc4 <_fflush_r+0xc>
 8110cfa:	89a3      	ldrh	r3, [r4, #12]
 8110cfc:	059b      	lsls	r3, r3, #22
 8110cfe:	d4e1      	bmi.n	8110cc4 <_fflush_r+0xc>
 8110d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8110d02:	f7fd fa05 	bl	810e110 <__retarget_lock_release_recursive>
 8110d06:	e7dd      	b.n	8110cc4 <_fflush_r+0xc>

08110d08 <fiprintf>:
 8110d08:	b40e      	push	{r1, r2, r3}
 8110d0a:	b503      	push	{r0, r1, lr}
 8110d0c:	4601      	mov	r1, r0
 8110d0e:	ab03      	add	r3, sp, #12
 8110d10:	4805      	ldr	r0, [pc, #20]	@ (8110d28 <fiprintf+0x20>)
 8110d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8110d16:	6800      	ldr	r0, [r0, #0]
 8110d18:	9301      	str	r3, [sp, #4]
 8110d1a:	f7ff fe31 	bl	8110980 <_vfiprintf_r>
 8110d1e:	b002      	add	sp, #8
 8110d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8110d24:	b003      	add	sp, #12
 8110d26:	4770      	bx	lr
 8110d28:	100000a8 	.word	0x100000a8

08110d2c <__swhatbuf_r>:
 8110d2c:	b570      	push	{r4, r5, r6, lr}
 8110d2e:	460c      	mov	r4, r1
 8110d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8110d34:	2900      	cmp	r1, #0
 8110d36:	b096      	sub	sp, #88	@ 0x58
 8110d38:	4615      	mov	r5, r2
 8110d3a:	461e      	mov	r6, r3
 8110d3c:	da0d      	bge.n	8110d5a <__swhatbuf_r+0x2e>
 8110d3e:	89a3      	ldrh	r3, [r4, #12]
 8110d40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8110d44:	f04f 0100 	mov.w	r1, #0
 8110d48:	bf14      	ite	ne
 8110d4a:	2340      	movne	r3, #64	@ 0x40
 8110d4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8110d50:	2000      	movs	r0, #0
 8110d52:	6031      	str	r1, [r6, #0]
 8110d54:	602b      	str	r3, [r5, #0]
 8110d56:	b016      	add	sp, #88	@ 0x58
 8110d58:	bd70      	pop	{r4, r5, r6, pc}
 8110d5a:	466a      	mov	r2, sp
 8110d5c:	f000 f874 	bl	8110e48 <_fstat_r>
 8110d60:	2800      	cmp	r0, #0
 8110d62:	dbec      	blt.n	8110d3e <__swhatbuf_r+0x12>
 8110d64:	9901      	ldr	r1, [sp, #4]
 8110d66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8110d6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8110d6e:	4259      	negs	r1, r3
 8110d70:	4159      	adcs	r1, r3
 8110d72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8110d76:	e7eb      	b.n	8110d50 <__swhatbuf_r+0x24>

08110d78 <__smakebuf_r>:
 8110d78:	898b      	ldrh	r3, [r1, #12]
 8110d7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8110d7c:	079d      	lsls	r5, r3, #30
 8110d7e:	4606      	mov	r6, r0
 8110d80:	460c      	mov	r4, r1
 8110d82:	d507      	bpl.n	8110d94 <__smakebuf_r+0x1c>
 8110d84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8110d88:	6023      	str	r3, [r4, #0]
 8110d8a:	6123      	str	r3, [r4, #16]
 8110d8c:	2301      	movs	r3, #1
 8110d8e:	6163      	str	r3, [r4, #20]
 8110d90:	b003      	add	sp, #12
 8110d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8110d94:	ab01      	add	r3, sp, #4
 8110d96:	466a      	mov	r2, sp
 8110d98:	f7ff ffc8 	bl	8110d2c <__swhatbuf_r>
 8110d9c:	9f00      	ldr	r7, [sp, #0]
 8110d9e:	4605      	mov	r5, r0
 8110da0:	4639      	mov	r1, r7
 8110da2:	4630      	mov	r0, r6
 8110da4:	f7fe f8a8 	bl	810eef8 <_malloc_r>
 8110da8:	b948      	cbnz	r0, 8110dbe <__smakebuf_r+0x46>
 8110daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8110dae:	059a      	lsls	r2, r3, #22
 8110db0:	d4ee      	bmi.n	8110d90 <__smakebuf_r+0x18>
 8110db2:	f023 0303 	bic.w	r3, r3, #3
 8110db6:	f043 0302 	orr.w	r3, r3, #2
 8110dba:	81a3      	strh	r3, [r4, #12]
 8110dbc:	e7e2      	b.n	8110d84 <__smakebuf_r+0xc>
 8110dbe:	89a3      	ldrh	r3, [r4, #12]
 8110dc0:	6020      	str	r0, [r4, #0]
 8110dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8110dc6:	81a3      	strh	r3, [r4, #12]
 8110dc8:	9b01      	ldr	r3, [sp, #4]
 8110dca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8110dce:	b15b      	cbz	r3, 8110de8 <__smakebuf_r+0x70>
 8110dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8110dd4:	4630      	mov	r0, r6
 8110dd6:	f000 f849 	bl	8110e6c <_isatty_r>
 8110dda:	b128      	cbz	r0, 8110de8 <__smakebuf_r+0x70>
 8110ddc:	89a3      	ldrh	r3, [r4, #12]
 8110dde:	f023 0303 	bic.w	r3, r3, #3
 8110de2:	f043 0301 	orr.w	r3, r3, #1
 8110de6:	81a3      	strh	r3, [r4, #12]
 8110de8:	89a3      	ldrh	r3, [r4, #12]
 8110dea:	431d      	orrs	r5, r3
 8110dec:	81a5      	strh	r5, [r4, #12]
 8110dee:	e7cf      	b.n	8110d90 <__smakebuf_r+0x18>

08110df0 <memmove>:
 8110df0:	4288      	cmp	r0, r1
 8110df2:	b510      	push	{r4, lr}
 8110df4:	eb01 0402 	add.w	r4, r1, r2
 8110df8:	d902      	bls.n	8110e00 <memmove+0x10>
 8110dfa:	4284      	cmp	r4, r0
 8110dfc:	4623      	mov	r3, r4
 8110dfe:	d807      	bhi.n	8110e10 <memmove+0x20>
 8110e00:	1e43      	subs	r3, r0, #1
 8110e02:	42a1      	cmp	r1, r4
 8110e04:	d008      	beq.n	8110e18 <memmove+0x28>
 8110e06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8110e0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8110e0e:	e7f8      	b.n	8110e02 <memmove+0x12>
 8110e10:	4402      	add	r2, r0
 8110e12:	4601      	mov	r1, r0
 8110e14:	428a      	cmp	r2, r1
 8110e16:	d100      	bne.n	8110e1a <memmove+0x2a>
 8110e18:	bd10      	pop	{r4, pc}
 8110e1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8110e1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8110e22:	e7f7      	b.n	8110e14 <memmove+0x24>

08110e24 <strncmp>:
 8110e24:	b510      	push	{r4, lr}
 8110e26:	b16a      	cbz	r2, 8110e44 <strncmp+0x20>
 8110e28:	3901      	subs	r1, #1
 8110e2a:	1884      	adds	r4, r0, r2
 8110e2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8110e30:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8110e34:	429a      	cmp	r2, r3
 8110e36:	d103      	bne.n	8110e40 <strncmp+0x1c>
 8110e38:	42a0      	cmp	r0, r4
 8110e3a:	d001      	beq.n	8110e40 <strncmp+0x1c>
 8110e3c:	2a00      	cmp	r2, #0
 8110e3e:	d1f5      	bne.n	8110e2c <strncmp+0x8>
 8110e40:	1ad0      	subs	r0, r2, r3
 8110e42:	bd10      	pop	{r4, pc}
 8110e44:	4610      	mov	r0, r2
 8110e46:	e7fc      	b.n	8110e42 <strncmp+0x1e>

08110e48 <_fstat_r>:
 8110e48:	b538      	push	{r3, r4, r5, lr}
 8110e4a:	4d07      	ldr	r5, [pc, #28]	@ (8110e68 <_fstat_r+0x20>)
 8110e4c:	2300      	movs	r3, #0
 8110e4e:	4604      	mov	r4, r0
 8110e50:	4608      	mov	r0, r1
 8110e52:	4611      	mov	r1, r2
 8110e54:	602b      	str	r3, [r5, #0]
 8110e56:	f7f2 fdb7 	bl	81039c8 <_fstat>
 8110e5a:	1c43      	adds	r3, r0, #1
 8110e5c:	d102      	bne.n	8110e64 <_fstat_r+0x1c>
 8110e5e:	682b      	ldr	r3, [r5, #0]
 8110e60:	b103      	cbz	r3, 8110e64 <_fstat_r+0x1c>
 8110e62:	6023      	str	r3, [r4, #0]
 8110e64:	bd38      	pop	{r3, r4, r5, pc}
 8110e66:	bf00      	nop
 8110e68:	10000a20 	.word	0x10000a20

08110e6c <_isatty_r>:
 8110e6c:	b538      	push	{r3, r4, r5, lr}
 8110e6e:	4d06      	ldr	r5, [pc, #24]	@ (8110e88 <_isatty_r+0x1c>)
 8110e70:	2300      	movs	r3, #0
 8110e72:	4604      	mov	r4, r0
 8110e74:	4608      	mov	r0, r1
 8110e76:	602b      	str	r3, [r5, #0]
 8110e78:	f7f2 fdb6 	bl	81039e8 <_isatty>
 8110e7c:	1c43      	adds	r3, r0, #1
 8110e7e:	d102      	bne.n	8110e86 <_isatty_r+0x1a>
 8110e80:	682b      	ldr	r3, [r5, #0]
 8110e82:	b103      	cbz	r3, 8110e86 <_isatty_r+0x1a>
 8110e84:	6023      	str	r3, [r4, #0]
 8110e86:	bd38      	pop	{r3, r4, r5, pc}
 8110e88:	10000a20 	.word	0x10000a20

08110e8c <_sbrk_r>:
 8110e8c:	b538      	push	{r3, r4, r5, lr}
 8110e8e:	4d06      	ldr	r5, [pc, #24]	@ (8110ea8 <_sbrk_r+0x1c>)
 8110e90:	2300      	movs	r3, #0
 8110e92:	4604      	mov	r4, r0
 8110e94:	4608      	mov	r0, r1
 8110e96:	602b      	str	r3, [r5, #0]
 8110e98:	f7f2 fdbe 	bl	8103a18 <_sbrk>
 8110e9c:	1c43      	adds	r3, r0, #1
 8110e9e:	d102      	bne.n	8110ea6 <_sbrk_r+0x1a>
 8110ea0:	682b      	ldr	r3, [r5, #0]
 8110ea2:	b103      	cbz	r3, 8110ea6 <_sbrk_r+0x1a>
 8110ea4:	6023      	str	r3, [r4, #0]
 8110ea6:	bd38      	pop	{r3, r4, r5, pc}
 8110ea8:	10000a20 	.word	0x10000a20
 8110eac:	00000000 	.word	0x00000000

08110eb0 <nan>:
 8110eb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8110eb8 <nan+0x8>
 8110eb4:	4770      	bx	lr
 8110eb6:	bf00      	nop
 8110eb8:	00000000 	.word	0x00000000
 8110ebc:	7ff80000 	.word	0x7ff80000

08110ec0 <abort>:
 8110ec0:	b508      	push	{r3, lr}
 8110ec2:	2006      	movs	r0, #6
 8110ec4:	f000 fbc4 	bl	8111650 <raise>
 8110ec8:	2001      	movs	r0, #1
 8110eca:	f7f2 fd2b 	bl	8103924 <_exit>

08110ece <_calloc_r>:
 8110ece:	b570      	push	{r4, r5, r6, lr}
 8110ed0:	fba1 5402 	umull	r5, r4, r1, r2
 8110ed4:	b93c      	cbnz	r4, 8110ee6 <_calloc_r+0x18>
 8110ed6:	4629      	mov	r1, r5
 8110ed8:	f7fe f80e 	bl	810eef8 <_malloc_r>
 8110edc:	4606      	mov	r6, r0
 8110ede:	b928      	cbnz	r0, 8110eec <_calloc_r+0x1e>
 8110ee0:	2600      	movs	r6, #0
 8110ee2:	4630      	mov	r0, r6
 8110ee4:	bd70      	pop	{r4, r5, r6, pc}
 8110ee6:	220c      	movs	r2, #12
 8110ee8:	6002      	str	r2, [r0, #0]
 8110eea:	e7f9      	b.n	8110ee0 <_calloc_r+0x12>
 8110eec:	462a      	mov	r2, r5
 8110eee:	4621      	mov	r1, r4
 8110ef0:	f7fd f890 	bl	810e014 <memset>
 8110ef4:	e7f5      	b.n	8110ee2 <_calloc_r+0x14>

08110ef6 <rshift>:
 8110ef6:	6903      	ldr	r3, [r0, #16]
 8110ef8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8110efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8110f00:	ea4f 1261 	mov.w	r2, r1, asr #5
 8110f04:	f100 0414 	add.w	r4, r0, #20
 8110f08:	dd45      	ble.n	8110f96 <rshift+0xa0>
 8110f0a:	f011 011f 	ands.w	r1, r1, #31
 8110f0e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8110f12:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8110f16:	d10c      	bne.n	8110f32 <rshift+0x3c>
 8110f18:	f100 0710 	add.w	r7, r0, #16
 8110f1c:	4629      	mov	r1, r5
 8110f1e:	42b1      	cmp	r1, r6
 8110f20:	d334      	bcc.n	8110f8c <rshift+0x96>
 8110f22:	1a9b      	subs	r3, r3, r2
 8110f24:	009b      	lsls	r3, r3, #2
 8110f26:	1eea      	subs	r2, r5, #3
 8110f28:	4296      	cmp	r6, r2
 8110f2a:	bf38      	it	cc
 8110f2c:	2300      	movcc	r3, #0
 8110f2e:	4423      	add	r3, r4
 8110f30:	e015      	b.n	8110f5e <rshift+0x68>
 8110f32:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8110f36:	f1c1 0820 	rsb	r8, r1, #32
 8110f3a:	40cf      	lsrs	r7, r1
 8110f3c:	f105 0e04 	add.w	lr, r5, #4
 8110f40:	46a1      	mov	r9, r4
 8110f42:	4576      	cmp	r6, lr
 8110f44:	46f4      	mov	ip, lr
 8110f46:	d815      	bhi.n	8110f74 <rshift+0x7e>
 8110f48:	1a9a      	subs	r2, r3, r2
 8110f4a:	0092      	lsls	r2, r2, #2
 8110f4c:	3a04      	subs	r2, #4
 8110f4e:	3501      	adds	r5, #1
 8110f50:	42ae      	cmp	r6, r5
 8110f52:	bf38      	it	cc
 8110f54:	2200      	movcc	r2, #0
 8110f56:	18a3      	adds	r3, r4, r2
 8110f58:	50a7      	str	r7, [r4, r2]
 8110f5a:	b107      	cbz	r7, 8110f5e <rshift+0x68>
 8110f5c:	3304      	adds	r3, #4
 8110f5e:	1b1a      	subs	r2, r3, r4
 8110f60:	42a3      	cmp	r3, r4
 8110f62:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8110f66:	bf08      	it	eq
 8110f68:	2300      	moveq	r3, #0
 8110f6a:	6102      	str	r2, [r0, #16]
 8110f6c:	bf08      	it	eq
 8110f6e:	6143      	streq	r3, [r0, #20]
 8110f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8110f74:	f8dc c000 	ldr.w	ip, [ip]
 8110f78:	fa0c fc08 	lsl.w	ip, ip, r8
 8110f7c:	ea4c 0707 	orr.w	r7, ip, r7
 8110f80:	f849 7b04 	str.w	r7, [r9], #4
 8110f84:	f85e 7b04 	ldr.w	r7, [lr], #4
 8110f88:	40cf      	lsrs	r7, r1
 8110f8a:	e7da      	b.n	8110f42 <rshift+0x4c>
 8110f8c:	f851 cb04 	ldr.w	ip, [r1], #4
 8110f90:	f847 cf04 	str.w	ip, [r7, #4]!
 8110f94:	e7c3      	b.n	8110f1e <rshift+0x28>
 8110f96:	4623      	mov	r3, r4
 8110f98:	e7e1      	b.n	8110f5e <rshift+0x68>

08110f9a <__hexdig_fun>:
 8110f9a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8110f9e:	2b09      	cmp	r3, #9
 8110fa0:	d802      	bhi.n	8110fa8 <__hexdig_fun+0xe>
 8110fa2:	3820      	subs	r0, #32
 8110fa4:	b2c0      	uxtb	r0, r0
 8110fa6:	4770      	bx	lr
 8110fa8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8110fac:	2b05      	cmp	r3, #5
 8110fae:	d801      	bhi.n	8110fb4 <__hexdig_fun+0x1a>
 8110fb0:	3847      	subs	r0, #71	@ 0x47
 8110fb2:	e7f7      	b.n	8110fa4 <__hexdig_fun+0xa>
 8110fb4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8110fb8:	2b05      	cmp	r3, #5
 8110fba:	d801      	bhi.n	8110fc0 <__hexdig_fun+0x26>
 8110fbc:	3827      	subs	r0, #39	@ 0x27
 8110fbe:	e7f1      	b.n	8110fa4 <__hexdig_fun+0xa>
 8110fc0:	2000      	movs	r0, #0
 8110fc2:	4770      	bx	lr

08110fc4 <__gethex>:
 8110fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110fc8:	b085      	sub	sp, #20
 8110fca:	468a      	mov	sl, r1
 8110fcc:	9302      	str	r3, [sp, #8]
 8110fce:	680b      	ldr	r3, [r1, #0]
 8110fd0:	9001      	str	r0, [sp, #4]
 8110fd2:	4690      	mov	r8, r2
 8110fd4:	1c9c      	adds	r4, r3, #2
 8110fd6:	46a1      	mov	r9, r4
 8110fd8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8110fdc:	2830      	cmp	r0, #48	@ 0x30
 8110fde:	d0fa      	beq.n	8110fd6 <__gethex+0x12>
 8110fe0:	eba9 0303 	sub.w	r3, r9, r3
 8110fe4:	f1a3 0b02 	sub.w	fp, r3, #2
 8110fe8:	f7ff ffd7 	bl	8110f9a <__hexdig_fun>
 8110fec:	4605      	mov	r5, r0
 8110fee:	2800      	cmp	r0, #0
 8110ff0:	d168      	bne.n	81110c4 <__gethex+0x100>
 8110ff2:	49a0      	ldr	r1, [pc, #640]	@ (8111274 <__gethex+0x2b0>)
 8110ff4:	2201      	movs	r2, #1
 8110ff6:	4648      	mov	r0, r9
 8110ff8:	f7ff ff14 	bl	8110e24 <strncmp>
 8110ffc:	4607      	mov	r7, r0
 8110ffe:	2800      	cmp	r0, #0
 8111000:	d167      	bne.n	81110d2 <__gethex+0x10e>
 8111002:	f899 0001 	ldrb.w	r0, [r9, #1]
 8111006:	4626      	mov	r6, r4
 8111008:	f7ff ffc7 	bl	8110f9a <__hexdig_fun>
 811100c:	2800      	cmp	r0, #0
 811100e:	d062      	beq.n	81110d6 <__gethex+0x112>
 8111010:	4623      	mov	r3, r4
 8111012:	7818      	ldrb	r0, [r3, #0]
 8111014:	2830      	cmp	r0, #48	@ 0x30
 8111016:	4699      	mov	r9, r3
 8111018:	f103 0301 	add.w	r3, r3, #1
 811101c:	d0f9      	beq.n	8111012 <__gethex+0x4e>
 811101e:	f7ff ffbc 	bl	8110f9a <__hexdig_fun>
 8111022:	fab0 f580 	clz	r5, r0
 8111026:	096d      	lsrs	r5, r5, #5
 8111028:	f04f 0b01 	mov.w	fp, #1
 811102c:	464a      	mov	r2, r9
 811102e:	4616      	mov	r6, r2
 8111030:	3201      	adds	r2, #1
 8111032:	7830      	ldrb	r0, [r6, #0]
 8111034:	f7ff ffb1 	bl	8110f9a <__hexdig_fun>
 8111038:	2800      	cmp	r0, #0
 811103a:	d1f8      	bne.n	811102e <__gethex+0x6a>
 811103c:	498d      	ldr	r1, [pc, #564]	@ (8111274 <__gethex+0x2b0>)
 811103e:	2201      	movs	r2, #1
 8111040:	4630      	mov	r0, r6
 8111042:	f7ff feef 	bl	8110e24 <strncmp>
 8111046:	2800      	cmp	r0, #0
 8111048:	d13f      	bne.n	81110ca <__gethex+0x106>
 811104a:	b944      	cbnz	r4, 811105e <__gethex+0x9a>
 811104c:	1c74      	adds	r4, r6, #1
 811104e:	4622      	mov	r2, r4
 8111050:	4616      	mov	r6, r2
 8111052:	3201      	adds	r2, #1
 8111054:	7830      	ldrb	r0, [r6, #0]
 8111056:	f7ff ffa0 	bl	8110f9a <__hexdig_fun>
 811105a:	2800      	cmp	r0, #0
 811105c:	d1f8      	bne.n	8111050 <__gethex+0x8c>
 811105e:	1ba4      	subs	r4, r4, r6
 8111060:	00a7      	lsls	r7, r4, #2
 8111062:	7833      	ldrb	r3, [r6, #0]
 8111064:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8111068:	2b50      	cmp	r3, #80	@ 0x50
 811106a:	d13e      	bne.n	81110ea <__gethex+0x126>
 811106c:	7873      	ldrb	r3, [r6, #1]
 811106e:	2b2b      	cmp	r3, #43	@ 0x2b
 8111070:	d033      	beq.n	81110da <__gethex+0x116>
 8111072:	2b2d      	cmp	r3, #45	@ 0x2d
 8111074:	d034      	beq.n	81110e0 <__gethex+0x11c>
 8111076:	1c71      	adds	r1, r6, #1
 8111078:	2400      	movs	r4, #0
 811107a:	7808      	ldrb	r0, [r1, #0]
 811107c:	f7ff ff8d 	bl	8110f9a <__hexdig_fun>
 8111080:	1e43      	subs	r3, r0, #1
 8111082:	b2db      	uxtb	r3, r3
 8111084:	2b18      	cmp	r3, #24
 8111086:	d830      	bhi.n	81110ea <__gethex+0x126>
 8111088:	f1a0 0210 	sub.w	r2, r0, #16
 811108c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8111090:	f7ff ff83 	bl	8110f9a <__hexdig_fun>
 8111094:	f100 3cff 	add.w	ip, r0, #4294967295
 8111098:	fa5f fc8c 	uxtb.w	ip, ip
 811109c:	f1bc 0f18 	cmp.w	ip, #24
 81110a0:	f04f 030a 	mov.w	r3, #10
 81110a4:	d91e      	bls.n	81110e4 <__gethex+0x120>
 81110a6:	b104      	cbz	r4, 81110aa <__gethex+0xe6>
 81110a8:	4252      	negs	r2, r2
 81110aa:	4417      	add	r7, r2
 81110ac:	f8ca 1000 	str.w	r1, [sl]
 81110b0:	b1ed      	cbz	r5, 81110ee <__gethex+0x12a>
 81110b2:	f1bb 0f00 	cmp.w	fp, #0
 81110b6:	bf0c      	ite	eq
 81110b8:	2506      	moveq	r5, #6
 81110ba:	2500      	movne	r5, #0
 81110bc:	4628      	mov	r0, r5
 81110be:	b005      	add	sp, #20
 81110c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81110c4:	2500      	movs	r5, #0
 81110c6:	462c      	mov	r4, r5
 81110c8:	e7b0      	b.n	811102c <__gethex+0x68>
 81110ca:	2c00      	cmp	r4, #0
 81110cc:	d1c7      	bne.n	811105e <__gethex+0x9a>
 81110ce:	4627      	mov	r7, r4
 81110d0:	e7c7      	b.n	8111062 <__gethex+0x9e>
 81110d2:	464e      	mov	r6, r9
 81110d4:	462f      	mov	r7, r5
 81110d6:	2501      	movs	r5, #1
 81110d8:	e7c3      	b.n	8111062 <__gethex+0x9e>
 81110da:	2400      	movs	r4, #0
 81110dc:	1cb1      	adds	r1, r6, #2
 81110de:	e7cc      	b.n	811107a <__gethex+0xb6>
 81110e0:	2401      	movs	r4, #1
 81110e2:	e7fb      	b.n	81110dc <__gethex+0x118>
 81110e4:	fb03 0002 	mla	r0, r3, r2, r0
 81110e8:	e7ce      	b.n	8111088 <__gethex+0xc4>
 81110ea:	4631      	mov	r1, r6
 81110ec:	e7de      	b.n	81110ac <__gethex+0xe8>
 81110ee:	eba6 0309 	sub.w	r3, r6, r9
 81110f2:	3b01      	subs	r3, #1
 81110f4:	4629      	mov	r1, r5
 81110f6:	2b07      	cmp	r3, #7
 81110f8:	dc0a      	bgt.n	8111110 <__gethex+0x14c>
 81110fa:	9801      	ldr	r0, [sp, #4]
 81110fc:	f7fd ff88 	bl	810f010 <_Balloc>
 8111100:	4604      	mov	r4, r0
 8111102:	b940      	cbnz	r0, 8111116 <__gethex+0x152>
 8111104:	4b5c      	ldr	r3, [pc, #368]	@ (8111278 <__gethex+0x2b4>)
 8111106:	4602      	mov	r2, r0
 8111108:	21e4      	movs	r1, #228	@ 0xe4
 811110a:	485c      	ldr	r0, [pc, #368]	@ (811127c <__gethex+0x2b8>)
 811110c:	f7fd f816 	bl	810e13c <__assert_func>
 8111110:	3101      	adds	r1, #1
 8111112:	105b      	asrs	r3, r3, #1
 8111114:	e7ef      	b.n	81110f6 <__gethex+0x132>
 8111116:	f100 0a14 	add.w	sl, r0, #20
 811111a:	2300      	movs	r3, #0
 811111c:	4655      	mov	r5, sl
 811111e:	469b      	mov	fp, r3
 8111120:	45b1      	cmp	r9, r6
 8111122:	d337      	bcc.n	8111194 <__gethex+0x1d0>
 8111124:	f845 bb04 	str.w	fp, [r5], #4
 8111128:	eba5 050a 	sub.w	r5, r5, sl
 811112c:	10ad      	asrs	r5, r5, #2
 811112e:	6125      	str	r5, [r4, #16]
 8111130:	4658      	mov	r0, fp
 8111132:	f7fe f85f 	bl	810f1f4 <__hi0bits>
 8111136:	016d      	lsls	r5, r5, #5
 8111138:	f8d8 6000 	ldr.w	r6, [r8]
 811113c:	1a2d      	subs	r5, r5, r0
 811113e:	42b5      	cmp	r5, r6
 8111140:	dd54      	ble.n	81111ec <__gethex+0x228>
 8111142:	1bad      	subs	r5, r5, r6
 8111144:	4629      	mov	r1, r5
 8111146:	4620      	mov	r0, r4
 8111148:	f7fe fbf3 	bl	810f932 <__any_on>
 811114c:	4681      	mov	r9, r0
 811114e:	b178      	cbz	r0, 8111170 <__gethex+0x1ac>
 8111150:	1e6b      	subs	r3, r5, #1
 8111152:	1159      	asrs	r1, r3, #5
 8111154:	f003 021f 	and.w	r2, r3, #31
 8111158:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 811115c:	f04f 0901 	mov.w	r9, #1
 8111160:	fa09 f202 	lsl.w	r2, r9, r2
 8111164:	420a      	tst	r2, r1
 8111166:	d003      	beq.n	8111170 <__gethex+0x1ac>
 8111168:	454b      	cmp	r3, r9
 811116a:	dc36      	bgt.n	81111da <__gethex+0x216>
 811116c:	f04f 0902 	mov.w	r9, #2
 8111170:	4629      	mov	r1, r5
 8111172:	4620      	mov	r0, r4
 8111174:	f7ff febf 	bl	8110ef6 <rshift>
 8111178:	442f      	add	r7, r5
 811117a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 811117e:	42bb      	cmp	r3, r7
 8111180:	da42      	bge.n	8111208 <__gethex+0x244>
 8111182:	9801      	ldr	r0, [sp, #4]
 8111184:	4621      	mov	r1, r4
 8111186:	f7fd ff83 	bl	810f090 <_Bfree>
 811118a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 811118c:	2300      	movs	r3, #0
 811118e:	6013      	str	r3, [r2, #0]
 8111190:	25a3      	movs	r5, #163	@ 0xa3
 8111192:	e793      	b.n	81110bc <__gethex+0xf8>
 8111194:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8111198:	2a2e      	cmp	r2, #46	@ 0x2e
 811119a:	d012      	beq.n	81111c2 <__gethex+0x1fe>
 811119c:	2b20      	cmp	r3, #32
 811119e:	d104      	bne.n	81111aa <__gethex+0x1e6>
 81111a0:	f845 bb04 	str.w	fp, [r5], #4
 81111a4:	f04f 0b00 	mov.w	fp, #0
 81111a8:	465b      	mov	r3, fp
 81111aa:	7830      	ldrb	r0, [r6, #0]
 81111ac:	9303      	str	r3, [sp, #12]
 81111ae:	f7ff fef4 	bl	8110f9a <__hexdig_fun>
 81111b2:	9b03      	ldr	r3, [sp, #12]
 81111b4:	f000 000f 	and.w	r0, r0, #15
 81111b8:	4098      	lsls	r0, r3
 81111ba:	ea4b 0b00 	orr.w	fp, fp, r0
 81111be:	3304      	adds	r3, #4
 81111c0:	e7ae      	b.n	8111120 <__gethex+0x15c>
 81111c2:	45b1      	cmp	r9, r6
 81111c4:	d8ea      	bhi.n	811119c <__gethex+0x1d8>
 81111c6:	492b      	ldr	r1, [pc, #172]	@ (8111274 <__gethex+0x2b0>)
 81111c8:	9303      	str	r3, [sp, #12]
 81111ca:	2201      	movs	r2, #1
 81111cc:	4630      	mov	r0, r6
 81111ce:	f7ff fe29 	bl	8110e24 <strncmp>
 81111d2:	9b03      	ldr	r3, [sp, #12]
 81111d4:	2800      	cmp	r0, #0
 81111d6:	d1e1      	bne.n	811119c <__gethex+0x1d8>
 81111d8:	e7a2      	b.n	8111120 <__gethex+0x15c>
 81111da:	1ea9      	subs	r1, r5, #2
 81111dc:	4620      	mov	r0, r4
 81111de:	f7fe fba8 	bl	810f932 <__any_on>
 81111e2:	2800      	cmp	r0, #0
 81111e4:	d0c2      	beq.n	811116c <__gethex+0x1a8>
 81111e6:	f04f 0903 	mov.w	r9, #3
 81111ea:	e7c1      	b.n	8111170 <__gethex+0x1ac>
 81111ec:	da09      	bge.n	8111202 <__gethex+0x23e>
 81111ee:	1b75      	subs	r5, r6, r5
 81111f0:	4621      	mov	r1, r4
 81111f2:	9801      	ldr	r0, [sp, #4]
 81111f4:	462a      	mov	r2, r5
 81111f6:	f7fe f963 	bl	810f4c0 <__lshift>
 81111fa:	1b7f      	subs	r7, r7, r5
 81111fc:	4604      	mov	r4, r0
 81111fe:	f100 0a14 	add.w	sl, r0, #20
 8111202:	f04f 0900 	mov.w	r9, #0
 8111206:	e7b8      	b.n	811117a <__gethex+0x1b6>
 8111208:	f8d8 5004 	ldr.w	r5, [r8, #4]
 811120c:	42bd      	cmp	r5, r7
 811120e:	dd6f      	ble.n	81112f0 <__gethex+0x32c>
 8111210:	1bed      	subs	r5, r5, r7
 8111212:	42ae      	cmp	r6, r5
 8111214:	dc34      	bgt.n	8111280 <__gethex+0x2bc>
 8111216:	f8d8 300c 	ldr.w	r3, [r8, #12]
 811121a:	2b02      	cmp	r3, #2
 811121c:	d022      	beq.n	8111264 <__gethex+0x2a0>
 811121e:	2b03      	cmp	r3, #3
 8111220:	d024      	beq.n	811126c <__gethex+0x2a8>
 8111222:	2b01      	cmp	r3, #1
 8111224:	d115      	bne.n	8111252 <__gethex+0x28e>
 8111226:	42ae      	cmp	r6, r5
 8111228:	d113      	bne.n	8111252 <__gethex+0x28e>
 811122a:	2e01      	cmp	r6, #1
 811122c:	d10b      	bne.n	8111246 <__gethex+0x282>
 811122e:	9a02      	ldr	r2, [sp, #8]
 8111230:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8111234:	6013      	str	r3, [r2, #0]
 8111236:	2301      	movs	r3, #1
 8111238:	6123      	str	r3, [r4, #16]
 811123a:	f8ca 3000 	str.w	r3, [sl]
 811123e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8111240:	2562      	movs	r5, #98	@ 0x62
 8111242:	601c      	str	r4, [r3, #0]
 8111244:	e73a      	b.n	81110bc <__gethex+0xf8>
 8111246:	1e71      	subs	r1, r6, #1
 8111248:	4620      	mov	r0, r4
 811124a:	f7fe fb72 	bl	810f932 <__any_on>
 811124e:	2800      	cmp	r0, #0
 8111250:	d1ed      	bne.n	811122e <__gethex+0x26a>
 8111252:	9801      	ldr	r0, [sp, #4]
 8111254:	4621      	mov	r1, r4
 8111256:	f7fd ff1b 	bl	810f090 <_Bfree>
 811125a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 811125c:	2300      	movs	r3, #0
 811125e:	6013      	str	r3, [r2, #0]
 8111260:	2550      	movs	r5, #80	@ 0x50
 8111262:	e72b      	b.n	81110bc <__gethex+0xf8>
 8111264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8111266:	2b00      	cmp	r3, #0
 8111268:	d1f3      	bne.n	8111252 <__gethex+0x28e>
 811126a:	e7e0      	b.n	811122e <__gethex+0x26a>
 811126c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811126e:	2b00      	cmp	r3, #0
 8111270:	d1dd      	bne.n	811122e <__gethex+0x26a>
 8111272:	e7ee      	b.n	8111252 <__gethex+0x28e>
 8111274:	081119c8 	.word	0x081119c8
 8111278:	08111861 	.word	0x08111861
 811127c:	08111b3a 	.word	0x08111b3a
 8111280:	1e6f      	subs	r7, r5, #1
 8111282:	f1b9 0f00 	cmp.w	r9, #0
 8111286:	d130      	bne.n	81112ea <__gethex+0x326>
 8111288:	b127      	cbz	r7, 8111294 <__gethex+0x2d0>
 811128a:	4639      	mov	r1, r7
 811128c:	4620      	mov	r0, r4
 811128e:	f7fe fb50 	bl	810f932 <__any_on>
 8111292:	4681      	mov	r9, r0
 8111294:	117a      	asrs	r2, r7, #5
 8111296:	2301      	movs	r3, #1
 8111298:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 811129c:	f007 071f 	and.w	r7, r7, #31
 81112a0:	40bb      	lsls	r3, r7
 81112a2:	4213      	tst	r3, r2
 81112a4:	4629      	mov	r1, r5
 81112a6:	4620      	mov	r0, r4
 81112a8:	bf18      	it	ne
 81112aa:	f049 0902 	orrne.w	r9, r9, #2
 81112ae:	f7ff fe22 	bl	8110ef6 <rshift>
 81112b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 81112b6:	1b76      	subs	r6, r6, r5
 81112b8:	2502      	movs	r5, #2
 81112ba:	f1b9 0f00 	cmp.w	r9, #0
 81112be:	d047      	beq.n	8111350 <__gethex+0x38c>
 81112c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 81112c4:	2b02      	cmp	r3, #2
 81112c6:	d015      	beq.n	81112f4 <__gethex+0x330>
 81112c8:	2b03      	cmp	r3, #3
 81112ca:	d017      	beq.n	81112fc <__gethex+0x338>
 81112cc:	2b01      	cmp	r3, #1
 81112ce:	d109      	bne.n	81112e4 <__gethex+0x320>
 81112d0:	f019 0f02 	tst.w	r9, #2
 81112d4:	d006      	beq.n	81112e4 <__gethex+0x320>
 81112d6:	f8da 3000 	ldr.w	r3, [sl]
 81112da:	ea49 0903 	orr.w	r9, r9, r3
 81112de:	f019 0f01 	tst.w	r9, #1
 81112e2:	d10e      	bne.n	8111302 <__gethex+0x33e>
 81112e4:	f045 0510 	orr.w	r5, r5, #16
 81112e8:	e032      	b.n	8111350 <__gethex+0x38c>
 81112ea:	f04f 0901 	mov.w	r9, #1
 81112ee:	e7d1      	b.n	8111294 <__gethex+0x2d0>
 81112f0:	2501      	movs	r5, #1
 81112f2:	e7e2      	b.n	81112ba <__gethex+0x2f6>
 81112f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81112f6:	f1c3 0301 	rsb	r3, r3, #1
 81112fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 81112fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81112fe:	2b00      	cmp	r3, #0
 8111300:	d0f0      	beq.n	81112e4 <__gethex+0x320>
 8111302:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8111306:	f104 0314 	add.w	r3, r4, #20
 811130a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 811130e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8111312:	f04f 0c00 	mov.w	ip, #0
 8111316:	4618      	mov	r0, r3
 8111318:	f853 2b04 	ldr.w	r2, [r3], #4
 811131c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8111320:	d01b      	beq.n	811135a <__gethex+0x396>
 8111322:	3201      	adds	r2, #1
 8111324:	6002      	str	r2, [r0, #0]
 8111326:	2d02      	cmp	r5, #2
 8111328:	f104 0314 	add.w	r3, r4, #20
 811132c:	d13c      	bne.n	81113a8 <__gethex+0x3e4>
 811132e:	f8d8 2000 	ldr.w	r2, [r8]
 8111332:	3a01      	subs	r2, #1
 8111334:	42b2      	cmp	r2, r6
 8111336:	d109      	bne.n	811134c <__gethex+0x388>
 8111338:	1171      	asrs	r1, r6, #5
 811133a:	2201      	movs	r2, #1
 811133c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8111340:	f006 061f 	and.w	r6, r6, #31
 8111344:	fa02 f606 	lsl.w	r6, r2, r6
 8111348:	421e      	tst	r6, r3
 811134a:	d13a      	bne.n	81113c2 <__gethex+0x3fe>
 811134c:	f045 0520 	orr.w	r5, r5, #32
 8111350:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8111352:	601c      	str	r4, [r3, #0]
 8111354:	9b02      	ldr	r3, [sp, #8]
 8111356:	601f      	str	r7, [r3, #0]
 8111358:	e6b0      	b.n	81110bc <__gethex+0xf8>
 811135a:	4299      	cmp	r1, r3
 811135c:	f843 cc04 	str.w	ip, [r3, #-4]
 8111360:	d8d9      	bhi.n	8111316 <__gethex+0x352>
 8111362:	68a3      	ldr	r3, [r4, #8]
 8111364:	459b      	cmp	fp, r3
 8111366:	db17      	blt.n	8111398 <__gethex+0x3d4>
 8111368:	6861      	ldr	r1, [r4, #4]
 811136a:	9801      	ldr	r0, [sp, #4]
 811136c:	3101      	adds	r1, #1
 811136e:	f7fd fe4f 	bl	810f010 <_Balloc>
 8111372:	4681      	mov	r9, r0
 8111374:	b918      	cbnz	r0, 811137e <__gethex+0x3ba>
 8111376:	4b1a      	ldr	r3, [pc, #104]	@ (81113e0 <__gethex+0x41c>)
 8111378:	4602      	mov	r2, r0
 811137a:	2184      	movs	r1, #132	@ 0x84
 811137c:	e6c5      	b.n	811110a <__gethex+0x146>
 811137e:	6922      	ldr	r2, [r4, #16]
 8111380:	3202      	adds	r2, #2
 8111382:	f104 010c 	add.w	r1, r4, #12
 8111386:	0092      	lsls	r2, r2, #2
 8111388:	300c      	adds	r0, #12
 811138a:	f7fc fec2 	bl	810e112 <memcpy>
 811138e:	4621      	mov	r1, r4
 8111390:	9801      	ldr	r0, [sp, #4]
 8111392:	f7fd fe7d 	bl	810f090 <_Bfree>
 8111396:	464c      	mov	r4, r9
 8111398:	6923      	ldr	r3, [r4, #16]
 811139a:	1c5a      	adds	r2, r3, #1
 811139c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 81113a0:	6122      	str	r2, [r4, #16]
 81113a2:	2201      	movs	r2, #1
 81113a4:	615a      	str	r2, [r3, #20]
 81113a6:	e7be      	b.n	8111326 <__gethex+0x362>
 81113a8:	6922      	ldr	r2, [r4, #16]
 81113aa:	455a      	cmp	r2, fp
 81113ac:	dd0b      	ble.n	81113c6 <__gethex+0x402>
 81113ae:	2101      	movs	r1, #1
 81113b0:	4620      	mov	r0, r4
 81113b2:	f7ff fda0 	bl	8110ef6 <rshift>
 81113b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 81113ba:	3701      	adds	r7, #1
 81113bc:	42bb      	cmp	r3, r7
 81113be:	f6ff aee0 	blt.w	8111182 <__gethex+0x1be>
 81113c2:	2501      	movs	r5, #1
 81113c4:	e7c2      	b.n	811134c <__gethex+0x388>
 81113c6:	f016 061f 	ands.w	r6, r6, #31
 81113ca:	d0fa      	beq.n	81113c2 <__gethex+0x3fe>
 81113cc:	4453      	add	r3, sl
 81113ce:	f1c6 0620 	rsb	r6, r6, #32
 81113d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 81113d6:	f7fd ff0d 	bl	810f1f4 <__hi0bits>
 81113da:	42b0      	cmp	r0, r6
 81113dc:	dbe7      	blt.n	81113ae <__gethex+0x3ea>
 81113de:	e7f0      	b.n	81113c2 <__gethex+0x3fe>
 81113e0:	08111861 	.word	0x08111861

081113e4 <L_shift>:
 81113e4:	f1c2 0208 	rsb	r2, r2, #8
 81113e8:	0092      	lsls	r2, r2, #2
 81113ea:	b570      	push	{r4, r5, r6, lr}
 81113ec:	f1c2 0620 	rsb	r6, r2, #32
 81113f0:	6843      	ldr	r3, [r0, #4]
 81113f2:	6804      	ldr	r4, [r0, #0]
 81113f4:	fa03 f506 	lsl.w	r5, r3, r6
 81113f8:	432c      	orrs	r4, r5
 81113fa:	40d3      	lsrs	r3, r2
 81113fc:	6004      	str	r4, [r0, #0]
 81113fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8111402:	4288      	cmp	r0, r1
 8111404:	d3f4      	bcc.n	81113f0 <L_shift+0xc>
 8111406:	bd70      	pop	{r4, r5, r6, pc}

08111408 <__match>:
 8111408:	b530      	push	{r4, r5, lr}
 811140a:	6803      	ldr	r3, [r0, #0]
 811140c:	3301      	adds	r3, #1
 811140e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8111412:	b914      	cbnz	r4, 811141a <__match+0x12>
 8111414:	6003      	str	r3, [r0, #0]
 8111416:	2001      	movs	r0, #1
 8111418:	bd30      	pop	{r4, r5, pc}
 811141a:	f813 2b01 	ldrb.w	r2, [r3], #1
 811141e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8111422:	2d19      	cmp	r5, #25
 8111424:	bf98      	it	ls
 8111426:	3220      	addls	r2, #32
 8111428:	42a2      	cmp	r2, r4
 811142a:	d0f0      	beq.n	811140e <__match+0x6>
 811142c:	2000      	movs	r0, #0
 811142e:	e7f3      	b.n	8111418 <__match+0x10>

08111430 <__hexnan>:
 8111430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111434:	680b      	ldr	r3, [r1, #0]
 8111436:	6801      	ldr	r1, [r0, #0]
 8111438:	115e      	asrs	r6, r3, #5
 811143a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 811143e:	f013 031f 	ands.w	r3, r3, #31
 8111442:	b087      	sub	sp, #28
 8111444:	bf18      	it	ne
 8111446:	3604      	addne	r6, #4
 8111448:	2500      	movs	r5, #0
 811144a:	1f37      	subs	r7, r6, #4
 811144c:	4682      	mov	sl, r0
 811144e:	4690      	mov	r8, r2
 8111450:	9301      	str	r3, [sp, #4]
 8111452:	f846 5c04 	str.w	r5, [r6, #-4]
 8111456:	46b9      	mov	r9, r7
 8111458:	463c      	mov	r4, r7
 811145a:	9502      	str	r5, [sp, #8]
 811145c:	46ab      	mov	fp, r5
 811145e:	784a      	ldrb	r2, [r1, #1]
 8111460:	1c4b      	adds	r3, r1, #1
 8111462:	9303      	str	r3, [sp, #12]
 8111464:	b342      	cbz	r2, 81114b8 <__hexnan+0x88>
 8111466:	4610      	mov	r0, r2
 8111468:	9105      	str	r1, [sp, #20]
 811146a:	9204      	str	r2, [sp, #16]
 811146c:	f7ff fd95 	bl	8110f9a <__hexdig_fun>
 8111470:	2800      	cmp	r0, #0
 8111472:	d151      	bne.n	8111518 <__hexnan+0xe8>
 8111474:	9a04      	ldr	r2, [sp, #16]
 8111476:	9905      	ldr	r1, [sp, #20]
 8111478:	2a20      	cmp	r2, #32
 811147a:	d818      	bhi.n	81114ae <__hexnan+0x7e>
 811147c:	9b02      	ldr	r3, [sp, #8]
 811147e:	459b      	cmp	fp, r3
 8111480:	dd13      	ble.n	81114aa <__hexnan+0x7a>
 8111482:	454c      	cmp	r4, r9
 8111484:	d206      	bcs.n	8111494 <__hexnan+0x64>
 8111486:	2d07      	cmp	r5, #7
 8111488:	dc04      	bgt.n	8111494 <__hexnan+0x64>
 811148a:	462a      	mov	r2, r5
 811148c:	4649      	mov	r1, r9
 811148e:	4620      	mov	r0, r4
 8111490:	f7ff ffa8 	bl	81113e4 <L_shift>
 8111494:	4544      	cmp	r4, r8
 8111496:	d952      	bls.n	811153e <__hexnan+0x10e>
 8111498:	2300      	movs	r3, #0
 811149a:	f1a4 0904 	sub.w	r9, r4, #4
 811149e:	f844 3c04 	str.w	r3, [r4, #-4]
 81114a2:	f8cd b008 	str.w	fp, [sp, #8]
 81114a6:	464c      	mov	r4, r9
 81114a8:	461d      	mov	r5, r3
 81114aa:	9903      	ldr	r1, [sp, #12]
 81114ac:	e7d7      	b.n	811145e <__hexnan+0x2e>
 81114ae:	2a29      	cmp	r2, #41	@ 0x29
 81114b0:	d157      	bne.n	8111562 <__hexnan+0x132>
 81114b2:	3102      	adds	r1, #2
 81114b4:	f8ca 1000 	str.w	r1, [sl]
 81114b8:	f1bb 0f00 	cmp.w	fp, #0
 81114bc:	d051      	beq.n	8111562 <__hexnan+0x132>
 81114be:	454c      	cmp	r4, r9
 81114c0:	d206      	bcs.n	81114d0 <__hexnan+0xa0>
 81114c2:	2d07      	cmp	r5, #7
 81114c4:	dc04      	bgt.n	81114d0 <__hexnan+0xa0>
 81114c6:	462a      	mov	r2, r5
 81114c8:	4649      	mov	r1, r9
 81114ca:	4620      	mov	r0, r4
 81114cc:	f7ff ff8a 	bl	81113e4 <L_shift>
 81114d0:	4544      	cmp	r4, r8
 81114d2:	d936      	bls.n	8111542 <__hexnan+0x112>
 81114d4:	f1a8 0204 	sub.w	r2, r8, #4
 81114d8:	4623      	mov	r3, r4
 81114da:	f853 1b04 	ldr.w	r1, [r3], #4
 81114de:	f842 1f04 	str.w	r1, [r2, #4]!
 81114e2:	429f      	cmp	r7, r3
 81114e4:	d2f9      	bcs.n	81114da <__hexnan+0xaa>
 81114e6:	1b3b      	subs	r3, r7, r4
 81114e8:	f023 0303 	bic.w	r3, r3, #3
 81114ec:	3304      	adds	r3, #4
 81114ee:	3401      	adds	r4, #1
 81114f0:	3e03      	subs	r6, #3
 81114f2:	42b4      	cmp	r4, r6
 81114f4:	bf88      	it	hi
 81114f6:	2304      	movhi	r3, #4
 81114f8:	4443      	add	r3, r8
 81114fa:	2200      	movs	r2, #0
 81114fc:	f843 2b04 	str.w	r2, [r3], #4
 8111500:	429f      	cmp	r7, r3
 8111502:	d2fb      	bcs.n	81114fc <__hexnan+0xcc>
 8111504:	683b      	ldr	r3, [r7, #0]
 8111506:	b91b      	cbnz	r3, 8111510 <__hexnan+0xe0>
 8111508:	4547      	cmp	r7, r8
 811150a:	d128      	bne.n	811155e <__hexnan+0x12e>
 811150c:	2301      	movs	r3, #1
 811150e:	603b      	str	r3, [r7, #0]
 8111510:	2005      	movs	r0, #5
 8111512:	b007      	add	sp, #28
 8111514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111518:	3501      	adds	r5, #1
 811151a:	2d08      	cmp	r5, #8
 811151c:	f10b 0b01 	add.w	fp, fp, #1
 8111520:	dd06      	ble.n	8111530 <__hexnan+0x100>
 8111522:	4544      	cmp	r4, r8
 8111524:	d9c1      	bls.n	81114aa <__hexnan+0x7a>
 8111526:	2300      	movs	r3, #0
 8111528:	f844 3c04 	str.w	r3, [r4, #-4]
 811152c:	2501      	movs	r5, #1
 811152e:	3c04      	subs	r4, #4
 8111530:	6822      	ldr	r2, [r4, #0]
 8111532:	f000 000f 	and.w	r0, r0, #15
 8111536:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 811153a:	6020      	str	r0, [r4, #0]
 811153c:	e7b5      	b.n	81114aa <__hexnan+0x7a>
 811153e:	2508      	movs	r5, #8
 8111540:	e7b3      	b.n	81114aa <__hexnan+0x7a>
 8111542:	9b01      	ldr	r3, [sp, #4]
 8111544:	2b00      	cmp	r3, #0
 8111546:	d0dd      	beq.n	8111504 <__hexnan+0xd4>
 8111548:	f1c3 0320 	rsb	r3, r3, #32
 811154c:	f04f 32ff 	mov.w	r2, #4294967295
 8111550:	40da      	lsrs	r2, r3
 8111552:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8111556:	4013      	ands	r3, r2
 8111558:	f846 3c04 	str.w	r3, [r6, #-4]
 811155c:	e7d2      	b.n	8111504 <__hexnan+0xd4>
 811155e:	3f04      	subs	r7, #4
 8111560:	e7d0      	b.n	8111504 <__hexnan+0xd4>
 8111562:	2004      	movs	r0, #4
 8111564:	e7d5      	b.n	8111512 <__hexnan+0xe2>

08111566 <__ascii_mbtowc>:
 8111566:	b082      	sub	sp, #8
 8111568:	b901      	cbnz	r1, 811156c <__ascii_mbtowc+0x6>
 811156a:	a901      	add	r1, sp, #4
 811156c:	b142      	cbz	r2, 8111580 <__ascii_mbtowc+0x1a>
 811156e:	b14b      	cbz	r3, 8111584 <__ascii_mbtowc+0x1e>
 8111570:	7813      	ldrb	r3, [r2, #0]
 8111572:	600b      	str	r3, [r1, #0]
 8111574:	7812      	ldrb	r2, [r2, #0]
 8111576:	1e10      	subs	r0, r2, #0
 8111578:	bf18      	it	ne
 811157a:	2001      	movne	r0, #1
 811157c:	b002      	add	sp, #8
 811157e:	4770      	bx	lr
 8111580:	4610      	mov	r0, r2
 8111582:	e7fb      	b.n	811157c <__ascii_mbtowc+0x16>
 8111584:	f06f 0001 	mvn.w	r0, #1
 8111588:	e7f8      	b.n	811157c <__ascii_mbtowc+0x16>

0811158a <_realloc_r>:
 811158a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811158e:	4680      	mov	r8, r0
 8111590:	4615      	mov	r5, r2
 8111592:	460c      	mov	r4, r1
 8111594:	b921      	cbnz	r1, 81115a0 <_realloc_r+0x16>
 8111596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 811159a:	4611      	mov	r1, r2
 811159c:	f7fd bcac 	b.w	810eef8 <_malloc_r>
 81115a0:	b92a      	cbnz	r2, 81115ae <_realloc_r+0x24>
 81115a2:	f7fd fc35 	bl	810ee10 <_free_r>
 81115a6:	2400      	movs	r4, #0
 81115a8:	4620      	mov	r0, r4
 81115aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81115ae:	f000 f86b 	bl	8111688 <_malloc_usable_size_r>
 81115b2:	4285      	cmp	r5, r0
 81115b4:	4606      	mov	r6, r0
 81115b6:	d802      	bhi.n	81115be <_realloc_r+0x34>
 81115b8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 81115bc:	d8f4      	bhi.n	81115a8 <_realloc_r+0x1e>
 81115be:	4629      	mov	r1, r5
 81115c0:	4640      	mov	r0, r8
 81115c2:	f7fd fc99 	bl	810eef8 <_malloc_r>
 81115c6:	4607      	mov	r7, r0
 81115c8:	2800      	cmp	r0, #0
 81115ca:	d0ec      	beq.n	81115a6 <_realloc_r+0x1c>
 81115cc:	42b5      	cmp	r5, r6
 81115ce:	462a      	mov	r2, r5
 81115d0:	4621      	mov	r1, r4
 81115d2:	bf28      	it	cs
 81115d4:	4632      	movcs	r2, r6
 81115d6:	f7fc fd9c 	bl	810e112 <memcpy>
 81115da:	4621      	mov	r1, r4
 81115dc:	4640      	mov	r0, r8
 81115de:	f7fd fc17 	bl	810ee10 <_free_r>
 81115e2:	463c      	mov	r4, r7
 81115e4:	e7e0      	b.n	81115a8 <_realloc_r+0x1e>

081115e6 <__ascii_wctomb>:
 81115e6:	4603      	mov	r3, r0
 81115e8:	4608      	mov	r0, r1
 81115ea:	b141      	cbz	r1, 81115fe <__ascii_wctomb+0x18>
 81115ec:	2aff      	cmp	r2, #255	@ 0xff
 81115ee:	d904      	bls.n	81115fa <__ascii_wctomb+0x14>
 81115f0:	228a      	movs	r2, #138	@ 0x8a
 81115f2:	601a      	str	r2, [r3, #0]
 81115f4:	f04f 30ff 	mov.w	r0, #4294967295
 81115f8:	4770      	bx	lr
 81115fa:	700a      	strb	r2, [r1, #0]
 81115fc:	2001      	movs	r0, #1
 81115fe:	4770      	bx	lr

08111600 <_raise_r>:
 8111600:	291f      	cmp	r1, #31
 8111602:	b538      	push	{r3, r4, r5, lr}
 8111604:	4605      	mov	r5, r0
 8111606:	460c      	mov	r4, r1
 8111608:	d904      	bls.n	8111614 <_raise_r+0x14>
 811160a:	2316      	movs	r3, #22
 811160c:	6003      	str	r3, [r0, #0]
 811160e:	f04f 30ff 	mov.w	r0, #4294967295
 8111612:	bd38      	pop	{r3, r4, r5, pc}
 8111614:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8111616:	b112      	cbz	r2, 811161e <_raise_r+0x1e>
 8111618:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 811161c:	b94b      	cbnz	r3, 8111632 <_raise_r+0x32>
 811161e:	4628      	mov	r0, r5
 8111620:	f000 f830 	bl	8111684 <_getpid_r>
 8111624:	4622      	mov	r2, r4
 8111626:	4601      	mov	r1, r0
 8111628:	4628      	mov	r0, r5
 811162a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 811162e:	f000 b817 	b.w	8111660 <_kill_r>
 8111632:	2b01      	cmp	r3, #1
 8111634:	d00a      	beq.n	811164c <_raise_r+0x4c>
 8111636:	1c59      	adds	r1, r3, #1
 8111638:	d103      	bne.n	8111642 <_raise_r+0x42>
 811163a:	2316      	movs	r3, #22
 811163c:	6003      	str	r3, [r0, #0]
 811163e:	2001      	movs	r0, #1
 8111640:	e7e7      	b.n	8111612 <_raise_r+0x12>
 8111642:	2100      	movs	r1, #0
 8111644:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8111648:	4620      	mov	r0, r4
 811164a:	4798      	blx	r3
 811164c:	2000      	movs	r0, #0
 811164e:	e7e0      	b.n	8111612 <_raise_r+0x12>

08111650 <raise>:
 8111650:	4b02      	ldr	r3, [pc, #8]	@ (811165c <raise+0xc>)
 8111652:	4601      	mov	r1, r0
 8111654:	6818      	ldr	r0, [r3, #0]
 8111656:	f7ff bfd3 	b.w	8111600 <_raise_r>
 811165a:	bf00      	nop
 811165c:	100000a8 	.word	0x100000a8

08111660 <_kill_r>:
 8111660:	b538      	push	{r3, r4, r5, lr}
 8111662:	4d07      	ldr	r5, [pc, #28]	@ (8111680 <_kill_r+0x20>)
 8111664:	2300      	movs	r3, #0
 8111666:	4604      	mov	r4, r0
 8111668:	4608      	mov	r0, r1
 811166a:	4611      	mov	r1, r2
 811166c:	602b      	str	r3, [r5, #0]
 811166e:	f7f2 f949 	bl	8103904 <_kill>
 8111672:	1c43      	adds	r3, r0, #1
 8111674:	d102      	bne.n	811167c <_kill_r+0x1c>
 8111676:	682b      	ldr	r3, [r5, #0]
 8111678:	b103      	cbz	r3, 811167c <_kill_r+0x1c>
 811167a:	6023      	str	r3, [r4, #0]
 811167c:	bd38      	pop	{r3, r4, r5, pc}
 811167e:	bf00      	nop
 8111680:	10000a20 	.word	0x10000a20

08111684 <_getpid_r>:
 8111684:	f7f2 b936 	b.w	81038f4 <_getpid>

08111688 <_malloc_usable_size_r>:
 8111688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 811168c:	1f18      	subs	r0, r3, #4
 811168e:	2b00      	cmp	r3, #0
 8111690:	bfbc      	itt	lt
 8111692:	580b      	ldrlt	r3, [r1, r0]
 8111694:	18c0      	addlt	r0, r0, r3
 8111696:	4770      	bx	lr

08111698 <_init>:
 8111698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811169a:	bf00      	nop
 811169c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811169e:	bc08      	pop	{r3}
 81116a0:	469e      	mov	lr, r3
 81116a2:	4770      	bx	lr

081116a4 <_fini>:
 81116a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81116a6:	bf00      	nop
 81116a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81116aa:	bc08      	pop	{r3}
 81116ac:	469e      	mov	lr, r3
 81116ae:	4770      	bx	lr
