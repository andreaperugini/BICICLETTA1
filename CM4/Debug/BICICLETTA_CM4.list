
BICICLETTA_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016978  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  08116c18  08116c18  00017c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08117368  08117368  00018368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08117370  08117370  00018370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08117374  08117374  00018374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000026c  10000000  08117378  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000d2a4  10000270  081175e4  00019270  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  1000d514  081175e4  00019514  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001926c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002971e  00000000  00000000  0001929c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004b7a  00000000  00000000  000429ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d98  00000000  00000000  00047538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000167a  00000000  00000000  000492d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f8da  00000000  00000000  0004a94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00027815  00000000  00000000  0008a224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a3989  00000000  00000000  000b1a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  002553c2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009510  00000000  00000000  0025547c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  0025e98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000017d8  00000000  00000000  0025e9f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000070  00000000  00000000  002601ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000270 	.word	0x10000270
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08116c00 	.word	0x08116c00

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000274 	.word	0x10000274
 81002dc:	08116c00 	.word	0x08116c00

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a0 	b.w	81010f0 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	@ (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	460c      	mov	r4, r1
 8100e3c:	2b00      	cmp	r3, #0
 8100e3e:	d14e      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e40:	4694      	mov	ip, r2
 8100e42:	458c      	cmp	ip, r1
 8100e44:	4686      	mov	lr, r0
 8100e46:	fab2 f282 	clz	r2, r2
 8100e4a:	d962      	bls.n	8100f12 <__udivmoddi4+0xde>
 8100e4c:	b14a      	cbz	r2, 8100e62 <__udivmoddi4+0x2e>
 8100e4e:	f1c2 0320 	rsb	r3, r2, #32
 8100e52:	4091      	lsls	r1, r2
 8100e54:	fa20 f303 	lsr.w	r3, r0, r3
 8100e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5c:	4319      	orrs	r1, r3
 8100e5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8100e62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100e66:	fa1f f68c 	uxth.w	r6, ip
 8100e6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8100e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100e72:	fb07 1114 	mls	r1, r7, r4, r1
 8100e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e7a:	fb04 f106 	mul.w	r1, r4, r6
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f104 30ff 	add.w	r0, r4, #4294967295
 8100e8a:	f080 8112 	bcs.w	81010b2 <__udivmoddi4+0x27e>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 810f 	bls.w	81010b2 <__udivmoddi4+0x27e>
 8100e94:	3c02      	subs	r4, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a59      	subs	r1, r3, r1
 8100e9a:	fa1f f38e 	uxth.w	r3, lr
 8100e9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8100ea2:	fb07 1110 	mls	r1, r7, r0, r1
 8100ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100eaa:	fb00 f606 	mul.w	r6, r0, r6
 8100eae:	429e      	cmp	r6, r3
 8100eb0:	d90a      	bls.n	8100ec8 <__udivmoddi4+0x94>
 8100eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8100eb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8100eba:	f080 80fc 	bcs.w	81010b6 <__udivmoddi4+0x282>
 8100ebe:	429e      	cmp	r6, r3
 8100ec0:	f240 80f9 	bls.w	81010b6 <__udivmoddi4+0x282>
 8100ec4:	4463      	add	r3, ip
 8100ec6:	3802      	subs	r0, #2
 8100ec8:	1b9b      	subs	r3, r3, r6
 8100eca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100ece:	2100      	movs	r1, #0
 8100ed0:	b11d      	cbz	r5, 8100eda <__udivmoddi4+0xa6>
 8100ed2:	40d3      	lsrs	r3, r2
 8100ed4:	2200      	movs	r2, #0
 8100ed6:	e9c5 3200 	strd	r3, r2, [r5]
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d905      	bls.n	8100eee <__udivmoddi4+0xba>
 8100ee2:	b10d      	cbz	r5, 8100ee8 <__udivmoddi4+0xb4>
 8100ee4:	e9c5 0100 	strd	r0, r1, [r5]
 8100ee8:	2100      	movs	r1, #0
 8100eea:	4608      	mov	r0, r1
 8100eec:	e7f5      	b.n	8100eda <__udivmoddi4+0xa6>
 8100eee:	fab3 f183 	clz	r1, r3
 8100ef2:	2900      	cmp	r1, #0
 8100ef4:	d146      	bne.n	8100f84 <__udivmoddi4+0x150>
 8100ef6:	42a3      	cmp	r3, r4
 8100ef8:	d302      	bcc.n	8100f00 <__udivmoddi4+0xcc>
 8100efa:	4290      	cmp	r0, r2
 8100efc:	f0c0 80f0 	bcc.w	81010e0 <__udivmoddi4+0x2ac>
 8100f00:	1a86      	subs	r6, r0, r2
 8100f02:	eb64 0303 	sbc.w	r3, r4, r3
 8100f06:	2001      	movs	r0, #1
 8100f08:	2d00      	cmp	r5, #0
 8100f0a:	d0e6      	beq.n	8100eda <__udivmoddi4+0xa6>
 8100f0c:	e9c5 6300 	strd	r6, r3, [r5]
 8100f10:	e7e3      	b.n	8100eda <__udivmoddi4+0xa6>
 8100f12:	2a00      	cmp	r2, #0
 8100f14:	f040 8090 	bne.w	8101038 <__udivmoddi4+0x204>
 8100f18:	eba1 040c 	sub.w	r4, r1, ip
 8100f1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100f20:	fa1f f78c 	uxth.w	r7, ip
 8100f24:	2101      	movs	r1, #1
 8100f26:	fbb4 f6f8 	udiv	r6, r4, r8
 8100f2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100f2e:	fb08 4416 	mls	r4, r8, r6, r4
 8100f32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f36:	fb07 f006 	mul.w	r0, r7, r6
 8100f3a:	4298      	cmp	r0, r3
 8100f3c:	d908      	bls.n	8100f50 <__udivmoddi4+0x11c>
 8100f3e:	eb1c 0303 	adds.w	r3, ip, r3
 8100f42:	f106 34ff 	add.w	r4, r6, #4294967295
 8100f46:	d202      	bcs.n	8100f4e <__udivmoddi4+0x11a>
 8100f48:	4298      	cmp	r0, r3
 8100f4a:	f200 80cd 	bhi.w	81010e8 <__udivmoddi4+0x2b4>
 8100f4e:	4626      	mov	r6, r4
 8100f50:	1a1c      	subs	r4, r3, r0
 8100f52:	fa1f f38e 	uxth.w	r3, lr
 8100f56:	fbb4 f0f8 	udiv	r0, r4, r8
 8100f5a:	fb08 4410 	mls	r4, r8, r0, r4
 8100f5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f62:	fb00 f707 	mul.w	r7, r0, r7
 8100f66:	429f      	cmp	r7, r3
 8100f68:	d908      	bls.n	8100f7c <__udivmoddi4+0x148>
 8100f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8100f6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8100f72:	d202      	bcs.n	8100f7a <__udivmoddi4+0x146>
 8100f74:	429f      	cmp	r7, r3
 8100f76:	f200 80b0 	bhi.w	81010da <__udivmoddi4+0x2a6>
 8100f7a:	4620      	mov	r0, r4
 8100f7c:	1bdb      	subs	r3, r3, r7
 8100f7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100f82:	e7a5      	b.n	8100ed0 <__udivmoddi4+0x9c>
 8100f84:	f1c1 0620 	rsb	r6, r1, #32
 8100f88:	408b      	lsls	r3, r1
 8100f8a:	fa22 f706 	lsr.w	r7, r2, r6
 8100f8e:	431f      	orrs	r7, r3
 8100f90:	fa20 fc06 	lsr.w	ip, r0, r6
 8100f94:	fa04 f301 	lsl.w	r3, r4, r1
 8100f98:	ea43 030c 	orr.w	r3, r3, ip
 8100f9c:	40f4      	lsrs	r4, r6
 8100f9e:	fa00 f801 	lsl.w	r8, r0, r1
 8100fa2:	0c38      	lsrs	r0, r7, #16
 8100fa4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100fa8:	fbb4 fef0 	udiv	lr, r4, r0
 8100fac:	fa1f fc87 	uxth.w	ip, r7
 8100fb0:	fb00 441e 	mls	r4, r0, lr, r4
 8100fb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fb8:	fb0e f90c 	mul.w	r9, lr, ip
 8100fbc:	45a1      	cmp	r9, r4
 8100fbe:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc2:	d90a      	bls.n	8100fda <__udivmoddi4+0x1a6>
 8100fc4:	193c      	adds	r4, r7, r4
 8100fc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100fca:	f080 8084 	bcs.w	81010d6 <__udivmoddi4+0x2a2>
 8100fce:	45a1      	cmp	r9, r4
 8100fd0:	f240 8081 	bls.w	81010d6 <__udivmoddi4+0x2a2>
 8100fd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8100fd8:	443c      	add	r4, r7
 8100fda:	eba4 0409 	sub.w	r4, r4, r9
 8100fde:	fa1f f983 	uxth.w	r9, r3
 8100fe2:	fbb4 f3f0 	udiv	r3, r4, r0
 8100fe6:	fb00 4413 	mls	r4, r0, r3, r4
 8100fea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fee:	fb03 fc0c 	mul.w	ip, r3, ip
 8100ff2:	45a4      	cmp	ip, r4
 8100ff4:	d907      	bls.n	8101006 <__udivmoddi4+0x1d2>
 8100ff6:	193c      	adds	r4, r7, r4
 8100ff8:	f103 30ff 	add.w	r0, r3, #4294967295
 8100ffc:	d267      	bcs.n	81010ce <__udivmoddi4+0x29a>
 8100ffe:	45a4      	cmp	ip, r4
 8101000:	d965      	bls.n	81010ce <__udivmoddi4+0x29a>
 8101002:	3b02      	subs	r3, #2
 8101004:	443c      	add	r4, r7
 8101006:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 810100a:	fba0 9302 	umull	r9, r3, r0, r2
 810100e:	eba4 040c 	sub.w	r4, r4, ip
 8101012:	429c      	cmp	r4, r3
 8101014:	46ce      	mov	lr, r9
 8101016:	469c      	mov	ip, r3
 8101018:	d351      	bcc.n	81010be <__udivmoddi4+0x28a>
 810101a:	d04e      	beq.n	81010ba <__udivmoddi4+0x286>
 810101c:	b155      	cbz	r5, 8101034 <__udivmoddi4+0x200>
 810101e:	ebb8 030e 	subs.w	r3, r8, lr
 8101022:	eb64 040c 	sbc.w	r4, r4, ip
 8101026:	fa04 f606 	lsl.w	r6, r4, r6
 810102a:	40cb      	lsrs	r3, r1
 810102c:	431e      	orrs	r6, r3
 810102e:	40cc      	lsrs	r4, r1
 8101030:	e9c5 6400 	strd	r6, r4, [r5]
 8101034:	2100      	movs	r1, #0
 8101036:	e750      	b.n	8100eda <__udivmoddi4+0xa6>
 8101038:	f1c2 0320 	rsb	r3, r2, #32
 810103c:	fa20 f103 	lsr.w	r1, r0, r3
 8101040:	fa0c fc02 	lsl.w	ip, ip, r2
 8101044:	fa24 f303 	lsr.w	r3, r4, r3
 8101048:	4094      	lsls	r4, r2
 810104a:	430c      	orrs	r4, r1
 810104c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8101050:	fa00 fe02 	lsl.w	lr, r0, r2
 8101054:	fa1f f78c 	uxth.w	r7, ip
 8101058:	fbb3 f0f8 	udiv	r0, r3, r8
 810105c:	fb08 3110 	mls	r1, r8, r0, r3
 8101060:	0c23      	lsrs	r3, r4, #16
 8101062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8101066:	fb00 f107 	mul.w	r1, r0, r7
 810106a:	4299      	cmp	r1, r3
 810106c:	d908      	bls.n	8101080 <__udivmoddi4+0x24c>
 810106e:	eb1c 0303 	adds.w	r3, ip, r3
 8101072:	f100 36ff 	add.w	r6, r0, #4294967295
 8101076:	d22c      	bcs.n	81010d2 <__udivmoddi4+0x29e>
 8101078:	4299      	cmp	r1, r3
 810107a:	d92a      	bls.n	81010d2 <__udivmoddi4+0x29e>
 810107c:	3802      	subs	r0, #2
 810107e:	4463      	add	r3, ip
 8101080:	1a5b      	subs	r3, r3, r1
 8101082:	b2a4      	uxth	r4, r4
 8101084:	fbb3 f1f8 	udiv	r1, r3, r8
 8101088:	fb08 3311 	mls	r3, r8, r1, r3
 810108c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8101090:	fb01 f307 	mul.w	r3, r1, r7
 8101094:	42a3      	cmp	r3, r4
 8101096:	d908      	bls.n	81010aa <__udivmoddi4+0x276>
 8101098:	eb1c 0404 	adds.w	r4, ip, r4
 810109c:	f101 36ff 	add.w	r6, r1, #4294967295
 81010a0:	d213      	bcs.n	81010ca <__udivmoddi4+0x296>
 81010a2:	42a3      	cmp	r3, r4
 81010a4:	d911      	bls.n	81010ca <__udivmoddi4+0x296>
 81010a6:	3902      	subs	r1, #2
 81010a8:	4464      	add	r4, ip
 81010aa:	1ae4      	subs	r4, r4, r3
 81010ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 81010b0:	e739      	b.n	8100f26 <__udivmoddi4+0xf2>
 81010b2:	4604      	mov	r4, r0
 81010b4:	e6f0      	b.n	8100e98 <__udivmoddi4+0x64>
 81010b6:	4608      	mov	r0, r1
 81010b8:	e706      	b.n	8100ec8 <__udivmoddi4+0x94>
 81010ba:	45c8      	cmp	r8, r9
 81010bc:	d2ae      	bcs.n	810101c <__udivmoddi4+0x1e8>
 81010be:	ebb9 0e02 	subs.w	lr, r9, r2
 81010c2:	eb63 0c07 	sbc.w	ip, r3, r7
 81010c6:	3801      	subs	r0, #1
 81010c8:	e7a8      	b.n	810101c <__udivmoddi4+0x1e8>
 81010ca:	4631      	mov	r1, r6
 81010cc:	e7ed      	b.n	81010aa <__udivmoddi4+0x276>
 81010ce:	4603      	mov	r3, r0
 81010d0:	e799      	b.n	8101006 <__udivmoddi4+0x1d2>
 81010d2:	4630      	mov	r0, r6
 81010d4:	e7d4      	b.n	8101080 <__udivmoddi4+0x24c>
 81010d6:	46d6      	mov	lr, sl
 81010d8:	e77f      	b.n	8100fda <__udivmoddi4+0x1a6>
 81010da:	4463      	add	r3, ip
 81010dc:	3802      	subs	r0, #2
 81010de:	e74d      	b.n	8100f7c <__udivmoddi4+0x148>
 81010e0:	4606      	mov	r6, r0
 81010e2:	4623      	mov	r3, r4
 81010e4:	4608      	mov	r0, r1
 81010e6:	e70f      	b.n	8100f08 <__udivmoddi4+0xd4>
 81010e8:	3e02      	subs	r6, #2
 81010ea:	4463      	add	r3, ip
 81010ec:	e730      	b.n	8100f50 <__udivmoddi4+0x11c>
 81010ee:	bf00      	nop

081010f0 <__aeabi_idiv0>:
 81010f0:	4770      	bx	lr
 81010f2:	bf00      	nop

081010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81010f4:	b480      	push	{r7}
 81010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81010f8:	4b09      	ldr	r3, [pc, #36]	@ (8101120 <SystemInit+0x2c>)
 81010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81010fe:	4a08      	ldr	r2, [pc, #32]	@ (8101120 <SystemInit+0x2c>)
 8101100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101108:	4b05      	ldr	r3, [pc, #20]	@ (8101120 <SystemInit+0x2c>)
 810110a:	691b      	ldr	r3, [r3, #16]
 810110c:	4a04      	ldr	r2, [pc, #16]	@ (8101120 <SystemInit+0x2c>)
 810110e:	f043 0310 	orr.w	r3, r3, #16
 8101112:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101114:	bf00      	nop
 8101116:	46bd      	mov	sp, r7
 8101118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810111c:	4770      	bx	lr
 810111e:	bf00      	nop
 8101120:	e000ed00 	.word	0xe000ed00

08101124 <Voltage2Duty>:
	float speed_rpm = (speed_degsec * 60)/360;
	return speed_rpm;
}
*/

float Voltage2Duty(float u){
 8101124:	b480      	push	{r7}
 8101126:	b085      	sub	sp, #20
 8101128:	af00      	add	r7, sp, #0
 810112a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0){
 810112e:	edd7 7a01 	vldr	s15, [r7, #4]
 8101132:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8101136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810113a:	d805      	bhi.n	8101148 <Voltage2Duty+0x24>
		u = -u;
 810113c:	edd7 7a01 	vldr	s15, [r7, #4]
 8101140:	eef1 7a67 	vneg.f32	s15, s15
 8101144:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	float duty = 100 * u/V_MAX;
 8101148:	edd7 7a01 	vldr	s15, [r7, #4]
 810114c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 81011a0 <Voltage2Duty+0x7c>
 8101150:	ee27 7a87 	vmul.f32	s14, s15, s14
 8101154:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 8101158:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810115c:	edc7 7a03 	vstr	s15, [r7, #12]

	if (duty > 100){
 8101160:	edd7 7a03 	vldr	s15, [r7, #12]
 8101164:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 81011a0 <Voltage2Duty+0x7c>
 8101168:	eef4 7ac7 	vcmpe.f32	s15, s14
 810116c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101170:	dd02      	ble.n	8101178 <Voltage2Duty+0x54>
		duty = 100;
 8101172:	4b0c      	ldr	r3, [pc, #48]	@ (81011a4 <Voltage2Duty+0x80>)
 8101174:	60fb      	str	r3, [r7, #12]
 8101176:	e009      	b.n	810118c <Voltage2Duty+0x68>
	}else if(duty < 0){
 8101178:	edd7 7a03 	vldr	s15, [r7, #12]
 810117c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8101180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101184:	d502      	bpl.n	810118c <Voltage2Duty+0x68>
		duty = 0;
 8101186:	f04f 0300 	mov.w	r3, #0
 810118a:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 810118c:	68fb      	ldr	r3, [r7, #12]
 810118e:	ee07 3a90 	vmov	s15, r3
}
 8101192:	eeb0 0a67 	vmov.f32	s0, s15
 8101196:	3714      	adds	r7, #20
 8101198:	46bd      	mov	sp, r7
 810119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810119e:	4770      	bx	lr
 81011a0:	42c80000 	.word	0x42c80000
 81011a4:	42c80000 	.word	0x42c80000

081011a8 <Ref2Direction>:

uint8_t Ref2Direction(float y_ref){
 81011a8:	b480      	push	{r7}
 81011aa:	b085      	sub	sp, #20
 81011ac:	af00      	add	r7, sp, #0
 81011ae:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t direction;
	if(y_ref >= 0){
 81011b2:	edd7 7a01 	vldr	s15, [r7, #4]
 81011b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81011ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011be:	db02      	blt.n	81011c6 <Ref2Direction+0x1e>
		direction = 0;
 81011c0:	2300      	movs	r3, #0
 81011c2:	73fb      	strb	r3, [r7, #15]
 81011c4:	e001      	b.n	81011ca <Ref2Direction+0x22>
	} else {
		direction = 1;
 81011c6:	2301      	movs	r3, #1
 81011c8:	73fb      	strb	r3, [r7, #15]
	}
	return direction;
 81011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 81011cc:	4618      	mov	r0, r3
 81011ce:	3714      	adds	r7, #20
 81011d0:	46bd      	mov	sp, r7
 81011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011d6:	4770      	bx	lr

081011d8 <set_PWM_and_dir_back_wheel>:

void set_PWM_and_dir_back_wheel(float duty, uint8_t direction){
 81011d8:	b5b0      	push	{r4, r5, r7, lr}
 81011da:	b082      	sub	sp, #8
 81011dc:	af00      	add	r7, sp, #0
 81011de:	ed87 0a01 	vstr	s0, [r7, #4]
 81011e2:	4603      	mov	r3, r0
 81011e4:	70fb      	strb	r3, [r7, #3]
	TIM1 ->CCR1 = (duty/100.0)*TIM1->ARR;
 81011e6:	6878      	ldr	r0, [r7, #4]
 81011e8:	f7ff fa36 	bl	8100658 <__aeabi_f2d>
 81011ec:	f04f 0200 	mov.w	r2, #0
 81011f0:	4b17      	ldr	r3, [pc, #92]	@ (8101250 <set_PWM_and_dir_back_wheel+0x78>)
 81011f2:	f7ff fbb3 	bl	810095c <__aeabi_ddiv>
 81011f6:	4602      	mov	r2, r0
 81011f8:	460b      	mov	r3, r1
 81011fa:	4614      	mov	r4, r2
 81011fc:	461d      	mov	r5, r3
 81011fe:	4b15      	ldr	r3, [pc, #84]	@ (8101254 <set_PWM_and_dir_back_wheel+0x7c>)
 8101200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101202:	4618      	mov	r0, r3
 8101204:	f7ff fa06 	bl	8100614 <__aeabi_ui2d>
 8101208:	4602      	mov	r2, r0
 810120a:	460b      	mov	r3, r1
 810120c:	4620      	mov	r0, r4
 810120e:	4629      	mov	r1, r5
 8101210:	f7ff fa7a 	bl	8100708 <__aeabi_dmul>
 8101214:	4602      	mov	r2, r0
 8101216:	460b      	mov	r3, r1
 8101218:	4c0e      	ldr	r4, [pc, #56]	@ (8101254 <set_PWM_and_dir_back_wheel+0x7c>)
 810121a:	4610      	mov	r0, r2
 810121c:	4619      	mov	r1, r3
 810121e:	f7ff fd4b 	bl	8100cb8 <__aeabi_d2uiz>
 8101222:	4603      	mov	r3, r0
 8101224:	6363      	str	r3, [r4, #52]	@ 0x34

	if(direction == 0){
 8101226:	78fb      	ldrb	r3, [r7, #3]
 8101228:	2b00      	cmp	r3, #0
 810122a:	d105      	bne.n	8101238 <set_PWM_and_dir_back_wheel+0x60>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810122c:	2200      	movs	r2, #0
 810122e:	2110      	movs	r1, #16
 8101230:	4809      	ldr	r0, [pc, #36]	@ (8101258 <set_PWM_and_dir_back_wheel+0x80>)
 8101232:	f007 ff8d 	bl	8109150 <HAL_GPIO_WritePin>
	}else if(direction == 1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	}
}
 8101236:	e007      	b.n	8101248 <set_PWM_and_dir_back_wheel+0x70>
	}else if(direction == 1){
 8101238:	78fb      	ldrb	r3, [r7, #3]
 810123a:	2b01      	cmp	r3, #1
 810123c:	d104      	bne.n	8101248 <set_PWM_and_dir_back_wheel+0x70>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810123e:	2201      	movs	r2, #1
 8101240:	2110      	movs	r1, #16
 8101242:	4805      	ldr	r0, [pc, #20]	@ (8101258 <set_PWM_and_dir_back_wheel+0x80>)
 8101244:	f007 ff84 	bl	8109150 <HAL_GPIO_WritePin>
}
 8101248:	bf00      	nop
 810124a:	3708      	adds	r7, #8
 810124c:	46bd      	mov	sp, r7
 810124e:	bdb0      	pop	{r4, r5, r7, pc}
 8101250:	40590000 	.word	0x40590000
 8101254:	40010000 	.word	0x40010000
 8101258:	58020000 	.word	0x58020000

0810125c <set_PWM_and_dir_front_wheel>:

void set_PWM_and_dir_front_wheel (float duty, uint8_t dir){
 810125c:	b580      	push	{r7, lr}
 810125e:	b082      	sub	sp, #8
 8101260:	af00      	add	r7, sp, #0
 8101262:	ed87 0a01 	vstr	s0, [r7, #4]
 8101266:	4603      	mov	r3, r0
 8101268:	70fb      	strb	r3, [r7, #3]
	TIM3 -> CCR1 = (duty/100)*TIM3->ARR;
 810126a:	edd7 7a01 	vldr	s15, [r7, #4]
 810126e:	eddf 6a13 	vldr	s13, [pc, #76]	@ 81012bc <set_PWM_and_dir_front_wheel+0x60>
 8101272:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8101276:	4b12      	ldr	r3, [pc, #72]	@ (81012c0 <set_PWM_and_dir_front_wheel+0x64>)
 8101278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810127a:	ee07 3a90 	vmov	s15, r3
 810127e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101286:	4b0e      	ldr	r3, [pc, #56]	@ (81012c0 <set_PWM_and_dir_front_wheel+0x64>)
 8101288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810128c:	ee17 2a90 	vmov	r2, s15
 8101290:	635a      	str	r2, [r3, #52]	@ 0x34

	if (dir == 0){
 8101292:	78fb      	ldrb	r3, [r7, #3]
 8101294:	2b00      	cmp	r3, #0
 8101296:	d105      	bne.n	81012a4 <set_PWM_and_dir_front_wheel+0x48>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8101298:	2200      	movs	r2, #0
 810129a:	2120      	movs	r1, #32
 810129c:	4809      	ldr	r0, [pc, #36]	@ (81012c4 <set_PWM_and_dir_front_wheel+0x68>)
 810129e:	f007 ff57 	bl	8109150 <HAL_GPIO_WritePin>
	}else if (dir == 1){
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	}
}
 81012a2:	e007      	b.n	81012b4 <set_PWM_and_dir_front_wheel+0x58>
	}else if (dir == 1){
 81012a4:	78fb      	ldrb	r3, [r7, #3]
 81012a6:	2b01      	cmp	r3, #1
 81012a8:	d104      	bne.n	81012b4 <set_PWM_and_dir_front_wheel+0x58>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 81012aa:	2201      	movs	r2, #1
 81012ac:	2120      	movs	r1, #32
 81012ae:	4805      	ldr	r0, [pc, #20]	@ (81012c4 <set_PWM_and_dir_front_wheel+0x68>)
 81012b0:	f007 ff4e 	bl	8109150 <HAL_GPIO_WritePin>
}
 81012b4:	bf00      	nop
 81012b6:	3708      	adds	r7, #8
 81012b8:	46bd      	mov	sp, r7
 81012ba:	bd80      	pop	{r7, pc}
 81012bc:	42c80000 	.word	0x42c80000
 81012c0:	40000400 	.word	0x40000400
 81012c4:	58020000 	.word	0x58020000

081012c8 <init_PID>:
 *      Author: andre
 */

#include <PID.h>

void init_PID (PID* p, float Tc, float u_max, float u_min){
 81012c8:	b480      	push	{r7}
 81012ca:	b085      	sub	sp, #20
 81012cc:	af00      	add	r7, sp, #0
 81012ce:	60f8      	str	r0, [r7, #12]
 81012d0:	ed87 0a02 	vstr	s0, [r7, #8]
 81012d4:	edc7 0a01 	vstr	s1, [r7, #4]
 81012d8:	ed87 1a00 	vstr	s2, [r7]

	p->Tc = Tc;
 81012dc:	68fb      	ldr	r3, [r7, #12]
 81012de:	68ba      	ldr	r2, [r7, #8]
 81012e0:	60da      	str	r2, [r3, #12]
	p->u_max = u_max;
 81012e2:	68fb      	ldr	r3, [r7, #12]
 81012e4:	687a      	ldr	r2, [r7, #4]
 81012e6:	611a      	str	r2, [r3, #16]
	p->u_min = u_min;
 81012e8:	68fb      	ldr	r3, [r7, #12]
 81012ea:	683a      	ldr	r2, [r7, #0]
 81012ec:	615a      	str	r2, [r3, #20]
	p->e_old=0;
 81012ee:	68fb      	ldr	r3, [r7, #12]
 81012f0:	f04f 0200 	mov.w	r2, #0
 81012f4:	619a      	str	r2, [r3, #24]
	p->Iterm=0;
 81012f6:	68fb      	ldr	r3, [r7, #12]
 81012f8:	f04f 0200 	mov.w	r2, #0
 81012fc:	61da      	str	r2, [r3, #28]

}
 81012fe:	bf00      	nop
 8101300:	3714      	adds	r7, #20
 8101302:	46bd      	mov	sp, r7
 8101304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101308:	4770      	bx	lr

0810130a <tune_PID>:


void tune_PID (PID* p, float Kp, float Ki, float Kd){
 810130a:	b480      	push	{r7}
 810130c:	b085      	sub	sp, #20
 810130e:	af00      	add	r7, sp, #0
 8101310:	60f8      	str	r0, [r7, #12]
 8101312:	ed87 0a02 	vstr	s0, [r7, #8]
 8101316:	edc7 0a01 	vstr	s1, [r7, #4]
 810131a:	ed87 1a00 	vstr	s2, [r7]

	p->Kp = Kp;
 810131e:	68fb      	ldr	r3, [r7, #12]
 8101320:	68ba      	ldr	r2, [r7, #8]
 8101322:	601a      	str	r2, [r3, #0]
	p->Kd = Kd;
 8101324:	68fb      	ldr	r3, [r7, #12]
 8101326:	683a      	ldr	r2, [r7, #0]
 8101328:	609a      	str	r2, [r3, #8]
	p->Ki = Ki;
 810132a:	68fb      	ldr	r3, [r7, #12]
 810132c:	687a      	ldr	r2, [r7, #4]
 810132e:	605a      	str	r2, [r3, #4]
}
 8101330:	bf00      	nop
 8101332:	3714      	adds	r7, #20
 8101334:	46bd      	mov	sp, r7
 8101336:	f85d 7b04 	ldr.w	r7, [sp], #4
 810133a:	4770      	bx	lr

0810133c <PID_controller>:

float PID_controller (PID* p, float y, float r){
 810133c:	b480      	push	{r7}
 810133e:	b089      	sub	sp, #36	@ 0x24
 8101340:	af00      	add	r7, sp, #0
 8101342:	60f8      	str	r0, [r7, #12]
 8101344:	ed87 0a02 	vstr	s0, [r7, #8]
 8101348:	edc7 0a01 	vstr	s1, [r7, #4]

	float u;
	float newIterm;
	float e = r-y;
 810134c:	ed97 7a01 	vldr	s14, [r7, #4]
 8101350:	edd7 7a02 	vldr	s15, [r7, #8]
 8101354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101358:	edc7 7a06 	vstr	s15, [r7, #24]
	float Pterm = p-> Kp * e;
 810135c:	68fb      	ldr	r3, [r7, #12]
 810135e:	edd3 7a00 	vldr	s15, [r3]
 8101362:	ed97 7a06 	vldr	s14, [r7, #24]
 8101366:	ee67 7a27 	vmul.f32	s15, s14, s15
 810136a:	edc7 7a05 	vstr	s15, [r7, #20]

	newIterm = p->Iterm + (p->Ki)* p->Tc * p->e_old;
 810136e:	68fb      	ldr	r3, [r7, #12]
 8101370:	ed93 7a07 	vldr	s14, [r3, #28]
 8101374:	68fb      	ldr	r3, [r7, #12]
 8101376:	edd3 6a01 	vldr	s13, [r3, #4]
 810137a:	68fb      	ldr	r3, [r7, #12]
 810137c:	edd3 7a03 	vldr	s15, [r3, #12]
 8101380:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8101384:	68fb      	ldr	r3, [r7, #12]
 8101386:	edd3 7a06 	vldr	s15, [r3, #24]
 810138a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810138e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101392:	edc7 7a04 	vstr	s15, [r7, #16]
	p->e_old = e;
 8101396:	68fb      	ldr	r3, [r7, #12]
 8101398:	69ba      	ldr	r2, [r7, #24]
 810139a:	619a      	str	r2, [r3, #24]
	u = Pterm + newIterm;
 810139c:	ed97 7a05 	vldr	s14, [r7, #20]
 81013a0:	edd7 7a04 	vldr	s15, [r7, #16]
 81013a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 81013a8:	edc7 7a07 	vstr	s15, [r7, #28]




	if (u > p->u_max){
 81013ac:	68fb      	ldr	r3, [r7, #12]
 81013ae:	edd3 7a04 	vldr	s15, [r3, #16]
 81013b2:	ed97 7a07 	vldr	s14, [r7, #28]
 81013b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81013ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81013be:	dd03      	ble.n	81013c8 <PID_controller+0x8c>
		u = p->u_max;
 81013c0:	68fb      	ldr	r3, [r7, #12]
 81013c2:	691b      	ldr	r3, [r3, #16]
 81013c4:	61fb      	str	r3, [r7, #28]
 81013c6:	e010      	b.n	81013ea <PID_controller+0xae>
	}else if(u<p->u_min){
 81013c8:	68fb      	ldr	r3, [r7, #12]
 81013ca:	edd3 7a05 	vldr	s15, [r3, #20]
 81013ce:	ed97 7a07 	vldr	s14, [r7, #28]
 81013d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81013da:	d503      	bpl.n	81013e4 <PID_controller+0xa8>
		u = p->u_min;
 81013dc:	68fb      	ldr	r3, [r7, #12]
 81013de:	695b      	ldr	r3, [r3, #20]
 81013e0:	61fb      	str	r3, [r7, #28]
 81013e2:	e002      	b.n	81013ea <PID_controller+0xae>
	}else
	{
		p->Iterm = newIterm;
 81013e4:	68fb      	ldr	r3, [r7, #12]
 81013e6:	693a      	ldr	r2, [r7, #16]
 81013e8:	61da      	str	r2, [r3, #28]
	}

	return u;
 81013ea:	69fb      	ldr	r3, [r7, #28]
 81013ec:	ee07 3a90 	vmov	s15, r3

}
 81013f0:	eeb0 0a67 	vmov.f32	s0, s15
 81013f4:	3724      	adds	r7, #36	@ 0x24
 81013f6:	46bd      	mov	sp, r7
 81013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013fc:	4770      	bx	lr

081013fe <bno055_setPage>:
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

// Imposta la pagina di registro del sensore BNO055
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 81013fe:	b580      	push	{r7, lr}
 8101400:	b082      	sub	sp, #8
 8101402:	af00      	add	r7, sp, #0
 8101404:	4603      	mov	r3, r0
 8101406:	71fb      	strb	r3, [r7, #7]
 8101408:	79fb      	ldrb	r3, [r7, #7]
 810140a:	4619      	mov	r1, r3
 810140c:	2007      	movs	r0, #7
 810140e:	f000 fa31 	bl	8101874 <bno055_writeData>
 8101412:	bf00      	nop
 8101414:	3708      	adds	r7, #8
 8101416:	46bd      	mov	sp, r7
 8101418:	bd80      	pop	{r7, pc}

0810141a <bno055_setOperationMode>:
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

// Imposta la modalità operativa del sensore BNO055 e attende un ritardo in base alla modalità
void bno055_setOperationMode(bno055_opmode_t mode) {
 810141a:	b580      	push	{r7, lr}
 810141c:	b082      	sub	sp, #8
 810141e:	af00      	add	r7, sp, #0
 8101420:	4603      	mov	r3, r0
 8101422:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8101424:	79fb      	ldrb	r3, [r7, #7]
 8101426:	4619      	mov	r1, r3
 8101428:	203d      	movs	r0, #61	@ 0x3d
 810142a:	f000 fa23 	bl	8101874 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 810142e:	79fb      	ldrb	r3, [r7, #7]
 8101430:	2b00      	cmp	r3, #0
 8101432:	d103      	bne.n	810143c <bno055_setOperationMode+0x22>
    bno055_delay(100);
 8101434:	2064      	movs	r0, #100	@ 0x64
 8101436:	f000 fa11 	bl	810185c <bno055_delay>
  } else {
    bno055_delay(80);
  }
}
 810143a:	e002      	b.n	8101442 <bno055_setOperationMode+0x28>
    bno055_delay(80);
 810143c:	2050      	movs	r0, #80	@ 0x50
 810143e:	f000 fa0d 	bl	810185c <bno055_delay>
}
 8101442:	bf00      	nop
 8101444:	3708      	adds	r7, #8
 8101446:	46bd      	mov	sp, r7
 8101448:	bd80      	pop	{r7, pc}

0810144a <bno055_setOperationModeConfig>:

// NON FUSION MODE

// Imposta la modalità operativa del sensore BNO055 su configurazione
void bno055_setOperationModeConfig() {
 810144a:	b580      	push	{r7, lr}
 810144c:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 810144e:	2000      	movs	r0, #0
 8101450:	f7ff ffe3 	bl	810141a <bno055_setOperationMode>
}
 8101454:	bf00      	nop
 8101456:	bd80      	pop	{r7, pc}

08101458 <bno055_setOperationModeNDOF>:
void bno055_setOperationModeNDOF_FMC_OFF(){
	bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF_FMC_OFF);
}

// Imposta la modalità operativa del sensore BNO055 su NDOF (Nine Degrees of Freedom)
void bno055_setOperationModeNDOF() {
 8101458:	b580      	push	{r7, lr}
 810145a:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 810145c:	200c      	movs	r0, #12
 810145e:	f7ff ffdc 	bl	810141a <bno055_setOperationMode>
}
 8101462:	bf00      	nop
 8101464:	bd80      	pop	{r7, pc}

08101466 <bno055_reset>:
void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
// Disabilita l'uso di un cristallo esterno per il sensore BNO055
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

// Esegue una procedura di reset per il sensore BNO055
void bno055_reset() {
 8101466:	b580      	push	{r7, lr}
 8101468:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 810146a:	2120      	movs	r1, #32
 810146c:	203f      	movs	r0, #63	@ 0x3f
 810146e:	f000 fa01 	bl	8101874 <bno055_writeData>
  bno055_delay(700);
 8101472:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8101476:	f000 f9f1 	bl	810185c <bno055_delay>
}
 810147a:	bf00      	nop
 810147c:	bd80      	pop	{r7, pc}

0810147e <bno055_setup>:
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

// Inizializza il sensore BNO055 eseguendo una procedura di reset e configurazione iniziale
void bno055_setup() {
 810147e:	b580      	push	{r7, lr}
 8101480:	b082      	sub	sp, #8
 8101482:	af00      	add	r7, sp, #0
  bno055_reset();
 8101484:	f7ff ffef 	bl	8101466 <bno055_reset>

  uint8_t id = 0;
 8101488:	2300      	movs	r3, #0
 810148a:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 810148c:	1dfb      	adds	r3, r7, #7
 810148e:	2201      	movs	r2, #1
 8101490:	4619      	mov	r1, r3
 8101492:	2000      	movs	r0, #0
 8101494:	f000 fa22 	bl	81018dc <bno055_readData>
  if (id != BNO055_ID) {
    //printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
  }
  bno055_setPage(0);
 8101498:	2000      	movs	r0, #0
 810149a:	f7ff ffb0 	bl	81013fe <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 810149e:	2100      	movs	r1, #0
 81014a0:	203f      	movs	r0, #63	@ 0x3f
 81014a2:	f000 f9e7 	bl	8101874 <bno055_writeData>

  // Seleziona la modalità di configurazione del BNO055
  bno055_setOperationModeConfig();
 81014a6:	f7ff ffd0 	bl	810144a <bno055_setOperationModeConfig>
  bno055_delay(10);
 81014aa:	200a      	movs	r0, #10
 81014ac:	f000 f9d6 	bl	810185c <bno055_delay>
}
 81014b0:	bf00      	nop
 81014b2:	3708      	adds	r7, #8
 81014b4:	46bd      	mov	sp, r7
 81014b6:	bd80      	pop	{r7, pc}

081014b8 <bno055_getCalibrationState>:
  bno055_readData(BNO055_SYS_ERR, &tmp, 1);
  return tmp;
}

// Ottiene lo stato di calibrazione del sensore BNO055
bno055_calibration_state_t bno055_getCalibrationState() {
 81014b8:	b580      	push	{r7, lr}
 81014ba:	b084      	sub	sp, #16
 81014bc:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 81014be:	2000      	movs	r0, #0
 81014c0:	f7ff ff9d 	bl	81013fe <bno055_setPage>
  bno055_calibration_state_t cal = {.sys = 0, .gyro = 0, .mag = 0, .accel = 0};
 81014c4:	2300      	movs	r3, #0
 81014c6:	60bb      	str	r3, [r7, #8]
  uint8_t calState = 0;
 81014c8:	2300      	movs	r3, #0
 81014ca:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CALIB_STAT, &calState, 1);
 81014cc:	1dfb      	adds	r3, r7, #7
 81014ce:	2201      	movs	r2, #1
 81014d0:	4619      	mov	r1, r3
 81014d2:	2035      	movs	r0, #53	@ 0x35
 81014d4:	f000 fa02 	bl	81018dc <bno055_readData>
  cal.sys = (calState >> 6) & 0x03;
 81014d8:	79fb      	ldrb	r3, [r7, #7]
 81014da:	099b      	lsrs	r3, r3, #6
 81014dc:	b2db      	uxtb	r3, r3
 81014de:	723b      	strb	r3, [r7, #8]
  cal.gyro = (calState >> 4) & 0x03;
 81014e0:	79fb      	ldrb	r3, [r7, #7]
 81014e2:	091b      	lsrs	r3, r3, #4
 81014e4:	b2db      	uxtb	r3, r3
 81014e6:	f003 0303 	and.w	r3, r3, #3
 81014ea:	b2db      	uxtb	r3, r3
 81014ec:	727b      	strb	r3, [r7, #9]
  cal.accel = (calState >> 2) & 0x03;
 81014ee:	79fb      	ldrb	r3, [r7, #7]
 81014f0:	089b      	lsrs	r3, r3, #2
 81014f2:	b2db      	uxtb	r3, r3
 81014f4:	f003 0303 	and.w	r3, r3, #3
 81014f8:	b2db      	uxtb	r3, r3
 81014fa:	72fb      	strb	r3, [r7, #11]
  cal.mag = calState & 0x03;
 81014fc:	79fb      	ldrb	r3, [r7, #7]
 81014fe:	f003 0303 	and.w	r3, r3, #3
 8101502:	b2db      	uxtb	r3, r3
 8101504:	72bb      	strb	r3, [r7, #10]
  return cal;
 8101506:	68bb      	ldr	r3, [r7, #8]
 8101508:	60fb      	str	r3, [r7, #12]
 810150a:	2300      	movs	r3, #0
 810150c:	7b3a      	ldrb	r2, [r7, #12]
 810150e:	f362 0307 	bfi	r3, r2, #0, #8
 8101512:	7b7a      	ldrb	r2, [r7, #13]
 8101514:	f362 230f 	bfi	r3, r2, #8, #8
 8101518:	7bba      	ldrb	r2, [r7, #14]
 810151a:	f362 4317 	bfi	r3, r2, #16, #8
 810151e:	7bfa      	ldrb	r2, [r7, #15]
 8101520:	f362 631f 	bfi	r3, r2, #24, #8
}
 8101524:	4618      	mov	r0, r3
 8101526:	3710      	adds	r7, #16
 8101528:	46bd      	mov	sp, r7
 810152a:	bd80      	pop	{r7, pc}

0810152c <bno055_getVector>:

  bno055_setOperationMode(operationMode);
}

//Ottiene un vettore specifico dal sensore BNO055 con la possibilità di specificare la scala del vettore
bno055_vector_t bno055_getVector(uint8_t vec) {
 810152c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101530:	b09e      	sub	sp, #120	@ 0x78
 8101532:	af00      	add	r7, sp, #0
 8101534:	4603      	mov	r3, r0
 8101536:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 810153a:	2000      	movs	r0, #0
 810153c:	f7ff ff5f 	bl	81013fe <bno055_setPage>
  uint8_t buffer[8];    // I quaternioni richiedono 8 byte

  if (vec == BNO055_VECTOR_QUATERNION)
 8101540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101544:	2b20      	cmp	r3, #32
 8101546:	d108      	bne.n	810155a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8101548:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 810154c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101550:	2208      	movs	r2, #8
 8101552:	4618      	mov	r0, r3
 8101554:	f000 f9c2 	bl	81018dc <bno055_readData>
 8101558:	e007      	b.n	810156a <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 810155a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 810155e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101562:	2206      	movs	r2, #6
 8101564:	4618      	mov	r0, r3
 8101566:	f000 f9b9 	bl	81018dc <bno055_readData>

  double scale = 1;
 810156a:	f04f 0200 	mov.w	r2, #0
 810156e:	4b8b      	ldr	r3, [pc, #556]	@ (810179c <bno055_getVector+0x270>)
 8101570:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8101574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101578:	2b0e      	cmp	r3, #14
 810157a:	d109      	bne.n	8101590 <bno055_getVector+0x64>
    scale = magScale;
 810157c:	4b88      	ldr	r3, [pc, #544]	@ (81017a0 <bno055_getVector+0x274>)
 810157e:	881b      	ldrh	r3, [r3, #0]
 8101580:	4618      	mov	r0, r3
 8101582:	f7ff f847 	bl	8100614 <__aeabi_ui2d>
 8101586:	4602      	mov	r2, r0
 8101588:	460b      	mov	r3, r1
 810158a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 810158e:	e03e      	b.n	810160e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8101590:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101594:	2b08      	cmp	r3, #8
 8101596:	d007      	beq.n	81015a8 <bno055_getVector+0x7c>
 8101598:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810159c:	2b28      	cmp	r3, #40	@ 0x28
 810159e:	d003      	beq.n	81015a8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 81015a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015a4:	2b2e      	cmp	r3, #46	@ 0x2e
 81015a6:	d109      	bne.n	81015bc <bno055_getVector+0x90>
    scale = accelScale;
 81015a8:	4b7e      	ldr	r3, [pc, #504]	@ (81017a4 <bno055_getVector+0x278>)
 81015aa:	881b      	ldrh	r3, [r3, #0]
 81015ac:	4618      	mov	r0, r3
 81015ae:	f7ff f831 	bl	8100614 <__aeabi_ui2d>
 81015b2:	4602      	mov	r2, r0
 81015b4:	460b      	mov	r3, r1
 81015b6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81015ba:	e028      	b.n	810160e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 81015bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015c0:	2b14      	cmp	r3, #20
 81015c2:	d109      	bne.n	81015d8 <bno055_getVector+0xac>
    scale = angularRateScale;
 81015c4:	4b78      	ldr	r3, [pc, #480]	@ (81017a8 <bno055_getVector+0x27c>)
 81015c6:	881b      	ldrh	r3, [r3, #0]
 81015c8:	4618      	mov	r0, r3
 81015ca:	f7ff f823 	bl	8100614 <__aeabi_ui2d>
 81015ce:	4602      	mov	r2, r0
 81015d0:	460b      	mov	r3, r1
 81015d2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81015d6:	e01a      	b.n	810160e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 81015d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015dc:	2b1a      	cmp	r3, #26
 81015de:	d109      	bne.n	81015f4 <bno055_getVector+0xc8>
    scale = eulerScale;
 81015e0:	4b72      	ldr	r3, [pc, #456]	@ (81017ac <bno055_getVector+0x280>)
 81015e2:	881b      	ldrh	r3, [r3, #0]
 81015e4:	4618      	mov	r0, r3
 81015e6:	f7ff f815 	bl	8100614 <__aeabi_ui2d>
 81015ea:	4602      	mov	r2, r0
 81015ec:	460b      	mov	r3, r1
 81015ee:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81015f2:	e00c      	b.n	810160e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 81015f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015f8:	2b20      	cmp	r3, #32
 81015fa:	d108      	bne.n	810160e <bno055_getVector+0xe2>
    scale = quaScale;
 81015fc:	4b6c      	ldr	r3, [pc, #432]	@ (81017b0 <bno055_getVector+0x284>)
 81015fe:	881b      	ldrh	r3, [r3, #0]
 8101600:	4618      	mov	r0, r3
 8101602:	f7ff f807 	bl	8100614 <__aeabi_ui2d>
 8101606:	4602      	mov	r2, r0
 8101608:	460b      	mov	r3, r1
 810160a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 810160e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101612:	2220      	movs	r2, #32
 8101614:	2100      	movs	r1, #0
 8101616:	4618      	mov	r0, r3
 8101618:	f010 ff80 	bl	811251c <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 810161c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101620:	2b20      	cmp	r3, #32
 8101622:	d150      	bne.n	81016c6 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101624:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8101628:	021b      	lsls	r3, r3, #8
 810162a:	b21a      	sxth	r2, r3
 810162c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8101630:	b21b      	sxth	r3, r3
 8101632:	4313      	orrs	r3, r2
 8101634:	b21b      	sxth	r3, r3
 8101636:	4618      	mov	r0, r3
 8101638:	f7fe fffc 	bl	8100634 <__aeabi_i2d>
 810163c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101640:	f7ff f98c 	bl	810095c <__aeabi_ddiv>
 8101644:	4602      	mov	r2, r0
 8101646:	460b      	mov	r3, r1
 8101648:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810164c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8101650:	021b      	lsls	r3, r3, #8
 8101652:	b21a      	sxth	r2, r3
 8101654:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8101658:	b21b      	sxth	r3, r3
 810165a:	4313      	orrs	r3, r2
 810165c:	b21b      	sxth	r3, r3
 810165e:	4618      	mov	r0, r3
 8101660:	f7fe ffe8 	bl	8100634 <__aeabi_i2d>
 8101664:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101668:	f7ff f978 	bl	810095c <__aeabi_ddiv>
 810166c:	4602      	mov	r2, r0
 810166e:	460b      	mov	r3, r1
 8101670:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101674:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8101678:	021b      	lsls	r3, r3, #8
 810167a:	b21a      	sxth	r2, r3
 810167c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8101680:	b21b      	sxth	r3, r3
 8101682:	4313      	orrs	r3, r2
 8101684:	b21b      	sxth	r3, r3
 8101686:	4618      	mov	r0, r3
 8101688:	f7fe ffd4 	bl	8100634 <__aeabi_i2d>
 810168c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101690:	f7ff f964 	bl	810095c <__aeabi_ddiv>
 8101694:	4602      	mov	r2, r0
 8101696:	460b      	mov	r3, r1
 8101698:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 810169c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 81016a0:	021b      	lsls	r3, r3, #8
 81016a2:	b21a      	sxth	r2, r3
 81016a4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 81016a8:	b21b      	sxth	r3, r3
 81016aa:	4313      	orrs	r3, r2
 81016ac:	b21b      	sxth	r3, r3
 81016ae:	4618      	mov	r0, r3
 81016b0:	f7fe ffc0 	bl	8100634 <__aeabi_i2d>
 81016b4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81016b8:	f7ff f950 	bl	810095c <__aeabi_ddiv>
 81016bc:	4602      	mov	r2, r0
 81016be:	460b      	mov	r3, r1
 81016c0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 81016c4:	e03b      	b.n	810173e <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 81016c6:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 81016ca:	021b      	lsls	r3, r3, #8
 81016cc:	b21a      	sxth	r2, r3
 81016ce:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 81016d2:	b21b      	sxth	r3, r3
 81016d4:	4313      	orrs	r3, r2
 81016d6:	b21b      	sxth	r3, r3
 81016d8:	4618      	mov	r0, r3
 81016da:	f7fe ffab 	bl	8100634 <__aeabi_i2d>
 81016de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81016e2:	f7ff f93b 	bl	810095c <__aeabi_ddiv>
 81016e6:	4602      	mov	r2, r0
 81016e8:	460b      	mov	r3, r1
 81016ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 81016ee:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 81016f2:	021b      	lsls	r3, r3, #8
 81016f4:	b21a      	sxth	r2, r3
 81016f6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 81016fa:	b21b      	sxth	r3, r3
 81016fc:	4313      	orrs	r3, r2
 81016fe:	b21b      	sxth	r3, r3
 8101700:	4618      	mov	r0, r3
 8101702:	f7fe ff97 	bl	8100634 <__aeabi_i2d>
 8101706:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 810170a:	f7ff f927 	bl	810095c <__aeabi_ddiv>
 810170e:	4602      	mov	r2, r0
 8101710:	460b      	mov	r3, r1
 8101712:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101716:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 810171a:	021b      	lsls	r3, r3, #8
 810171c:	b21a      	sxth	r2, r3
 810171e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8101722:	b21b      	sxth	r3, r3
 8101724:	4313      	orrs	r3, r2
 8101726:	b21b      	sxth	r3, r3
 8101728:	4618      	mov	r0, r3
 810172a:	f7fe ff83 	bl	8100634 <__aeabi_i2d>
 810172e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101732:	f7ff f913 	bl	810095c <__aeabi_ddiv>
 8101736:	4602      	mov	r2, r0
 8101738:	460b      	mov	r3, r1
 810173a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 810173e:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8101742:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8101746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810174a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810174e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101752:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8101756:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 810175a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 810175e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8101762:	ec49 8b14 	vmov	d4, r8, r9
 8101766:	ec45 4b15 	vmov	d5, r4, r5
 810176a:	ec41 0b16 	vmov	d6, r0, r1
 810176e:	ec43 2b17 	vmov	d7, r2, r3
}
 8101772:	eeb0 0a44 	vmov.f32	s0, s8
 8101776:	eef0 0a64 	vmov.f32	s1, s9
 810177a:	eeb0 1a45 	vmov.f32	s2, s10
 810177e:	eef0 1a65 	vmov.f32	s3, s11
 8101782:	eeb0 2a46 	vmov.f32	s4, s12
 8101786:	eef0 2a66 	vmov.f32	s5, s13
 810178a:	eeb0 3a47 	vmov.f32	s6, s14
 810178e:	eef0 3a67 	vmov.f32	s7, s15
 8101792:	3778      	adds	r7, #120	@ 0x78
 8101794:	46bd      	mov	sp, r7
 8101796:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 810179a:	bf00      	nop
 810179c:	3ff00000 	.word	0x3ff00000
 81017a0:	1000000e 	.word	0x1000000e
 81017a4:	10000008 	.word	0x10000008
 81017a8:	1000000a 	.word	0x1000000a
 81017ac:	1000000c 	.word	0x1000000c
 81017b0:	10000010 	.word	0x10000010

081017b4 <bno055_getVectorEuler>:
// Ottiene un vettore giroscopico dal sensore BNO055
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
// Ottiene un vettore di angoli di Eulero dal sensore BNO055
bno055_vector_t bno055_getVectorEuler() {
 81017b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81017b8:	b090      	sub	sp, #64	@ 0x40
 81017ba:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 81017bc:	201a      	movs	r0, #26
 81017be:	f7ff feb5 	bl	810152c <bno055_getVector>
 81017c2:	eeb0 4a40 	vmov.f32	s8, s0
 81017c6:	eef0 4a60 	vmov.f32	s9, s1
 81017ca:	eeb0 5a41 	vmov.f32	s10, s2
 81017ce:	eef0 5a61 	vmov.f32	s11, s3
 81017d2:	eeb0 6a42 	vmov.f32	s12, s4
 81017d6:	eef0 6a62 	vmov.f32	s13, s5
 81017da:	eeb0 7a43 	vmov.f32	s14, s6
 81017de:	eef0 7a63 	vmov.f32	s15, s7
 81017e2:	ed87 4b08 	vstr	d4, [r7, #32]
 81017e6:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 81017ea:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 81017ee:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 81017f2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 81017f6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 81017fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 81017fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8101802:	ec49 8b14 	vmov	d4, r8, r9
 8101806:	ec45 4b15 	vmov	d5, r4, r5
 810180a:	ec41 0b16 	vmov	d6, r0, r1
 810180e:	ec43 2b17 	vmov	d7, r2, r3
}
 8101812:	eeb0 0a44 	vmov.f32	s0, s8
 8101816:	eef0 0a64 	vmov.f32	s1, s9
 810181a:	eeb0 1a45 	vmov.f32	s2, s10
 810181e:	eef0 1a65 	vmov.f32	s3, s11
 8101822:	eeb0 2a46 	vmov.f32	s4, s12
 8101826:	eef0 2a66 	vmov.f32	s5, s13
 810182a:	eeb0 3a47 	vmov.f32	s6, s14
 810182e:	eef0 3a67 	vmov.f32	s7, s15
 8101832:	3740      	adds	r7, #64	@ 0x40
 8101834:	46bd      	mov	sp, r7
 8101836:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0810183c <bno055_assignI2C>:
  uint8_t axisMapSign = (axis.x_sign << 2) | (axis.y_sign << 1) | (axis.z_sign);
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
}

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 810183c:	b480      	push	{r7}
 810183e:	b083      	sub	sp, #12
 8101840:	af00      	add	r7, sp, #0
 8101842:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8101844:	4a04      	ldr	r2, [pc, #16]	@ (8101858 <bno055_assignI2C+0x1c>)
 8101846:	687b      	ldr	r3, [r7, #4]
 8101848:	6013      	str	r3, [r2, #0]
}
 810184a:	bf00      	nop
 810184c:	370c      	adds	r7, #12
 810184e:	46bd      	mov	sp, r7
 8101850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101854:	4770      	bx	lr
 8101856:	bf00      	nop
 8101858:	1000028c 	.word	0x1000028c

0810185c <bno055_delay>:

void bno055_delay(int time) {
 810185c:	b580      	push	{r7, lr}
 810185e:	b082      	sub	sp, #8
 8101860:	af00      	add	r7, sp, #0
 8101862:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8101864:	687b      	ldr	r3, [r7, #4]
 8101866:	4618      	mov	r0, r3
 8101868:	f003 fa62 	bl	8104d30 <HAL_Delay>
#endif
}
 810186c:	bf00      	nop
 810186e:	3708      	adds	r7, #8
 8101870:	46bd      	mov	sp, r7
 8101872:	bd80      	pop	{r7, pc}

08101874 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8101874:	b580      	push	{r7, lr}
 8101876:	b088      	sub	sp, #32
 8101878:	af02      	add	r7, sp, #8
 810187a:	4603      	mov	r3, r0
 810187c:	460a      	mov	r2, r1
 810187e:	71fb      	strb	r3, [r7, #7]
 8101880:	4613      	mov	r3, r2
 8101882:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8101884:	79fb      	ldrb	r3, [r7, #7]
 8101886:	733b      	strb	r3, [r7, #12]
 8101888:	79bb      	ldrb	r3, [r7, #6]
 810188a:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 810188c:	4b12      	ldr	r3, [pc, #72]	@ (81018d8 <bno055_writeData+0x64>)
 810188e:	6818      	ldr	r0, [r3, #0]
 8101890:	f107 020c 	add.w	r2, r7, #12
 8101894:	230a      	movs	r3, #10
 8101896:	9300      	str	r3, [sp, #0]
 8101898:	2302      	movs	r3, #2
 810189a:	2150      	movs	r1, #80	@ 0x50
 810189c:	f007 fd3a 	bl	8109314 <HAL_I2C_Master_Transmit>
 81018a0:	4603      	mov	r3, r0
 81018a2:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);

  if (status == HAL_OK) {
 81018a4:	7dfb      	ldrb	r3, [r7, #23]
 81018a6:	2b00      	cmp	r3, #0
 81018a8:	d010      	beq.n	81018cc <bno055_writeData+0x58>
    //printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
  } else {
    //printf("Unknown status data %d", status);
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 81018aa:	4b0b      	ldr	r3, [pc, #44]	@ (81018d8 <bno055_writeData+0x64>)
 81018ac:	681b      	ldr	r3, [r3, #0]
 81018ae:	4618      	mov	r0, r3
 81018b0:	f007 ff4c 	bl	810974c <HAL_I2C_GetError>
 81018b4:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 81018b6:	693b      	ldr	r3, [r7, #16]
 81018b8:	2b00      	cmp	r3, #0
 81018ba:	d009      	beq.n	81018d0 <bno055_writeData+0x5c>
    //printf("HAL_I2C_ERROR_DMA\r\n");
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
    //printf("HAL_I2C_ERROR_TIMEOUT\r\n");
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 81018bc:	4b06      	ldr	r3, [pc, #24]	@ (81018d8 <bno055_writeData+0x64>)
 81018be:	681b      	ldr	r3, [r3, #0]
 81018c0:	4618      	mov	r0, r3
 81018c2:	f007 ff35 	bl	8109730 <HAL_I2C_GetState>
 81018c6:	4603      	mov	r3, r0
 81018c8:	73fb      	strb	r3, [r7, #15]
 81018ca:	e002      	b.n	81018d2 <bno055_writeData+0x5e>
    return;
 81018cc:	bf00      	nop
 81018ce:	e000      	b.n	81018d2 <bno055_writeData+0x5e>
    return;
 81018d0:	bf00      	nop



  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 81018d2:	3718      	adds	r7, #24
 81018d4:	46bd      	mov	sp, r7
 81018d6:	bd80      	pop	{r7, pc}
 81018d8:	1000028c 	.word	0x1000028c

081018dc <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 81018dc:	b580      	push	{r7, lr}
 81018de:	b086      	sub	sp, #24
 81018e0:	af02      	add	r7, sp, #8
 81018e2:	4603      	mov	r3, r0
 81018e4:	6039      	str	r1, [r7, #0]
 81018e6:	71fb      	strb	r3, [r7, #7]
 81018e8:	4613      	mov	r3, r2
 81018ea:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 81018ec:	4b0d      	ldr	r3, [pc, #52]	@ (8101924 <bno055_readData+0x48>)
 81018ee:	6818      	ldr	r0, [r3, #0]
 81018f0:	1dfa      	adds	r2, r7, #7
 81018f2:	2364      	movs	r3, #100	@ 0x64
 81018f4:	9300      	str	r3, [sp, #0]
 81018f6:	2301      	movs	r3, #1
 81018f8:	2150      	movs	r1, #80	@ 0x50
 81018fa:	f007 fd0b 	bl	8109314 <HAL_I2C_Master_Transmit>
 81018fe:	4603      	mov	r3, r0
 8101900:	73fb      	strb	r3, [r7, #15]
                          100);
	ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8101902:	4b08      	ldr	r3, [pc, #32]	@ (8101924 <bno055_readData+0x48>)
 8101904:	6818      	ldr	r0, [r3, #0]
 8101906:	79bb      	ldrb	r3, [r7, #6]
 8101908:	b29b      	uxth	r3, r3
 810190a:	2264      	movs	r2, #100	@ 0x64
 810190c:	9200      	str	r2, [sp, #0]
 810190e:	683a      	ldr	r2, [r7, #0]
 8101910:	2150      	movs	r1, #80	@ 0x50
 8101912:	f007 fe17 	bl	8109544 <HAL_I2C_Master_Receive>
 8101916:	4603      	mov	r3, r0
 8101918:	73fb      	strb	r3, [r7, #15]
                         100);
	  if (ret == HAL_OK) {
 810191a:	7bfb      	ldrb	r3, [r7, #15]
 810191c:	2b00      	cmp	r3, #0
	  } else {
	    //printf("Unknown status data %d", ret);
	  }
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 810191e:	3710      	adds	r7, #16
 8101920:	46bd      	mov	sp, r7
 8101922:	bd80      	pop	{r7, pc}
 8101924:	1000028c 	.word	0x1000028c

08101928 <bno055_setPowerMode>:
    bno055_writeData(BNO055_MAG_CONFIG, magConfigReg);
    bno055_setPage(0); //tornare in page 0
}

// Funzione per impostare la modalità energetica
void bno055_setPowerMode(PowerMode mode) {
 8101928:	b580      	push	{r7, lr}
 810192a:	b084      	sub	sp, #16
 810192c:	af00      	add	r7, sp, #0
 810192e:	4603      	mov	r3, r0
 8101930:	71fb      	strb	r3, [r7, #7]
    // Leggi il valore corrente di PWR_MODE
    uint8_t currentMode;
    bno055_readData(BNO055_PWR_MODE, &currentMode, 1);
 8101932:	f107 030f 	add.w	r3, r7, #15
 8101936:	2201      	movs	r2, #1
 8101938:	4619      	mov	r1, r3
 810193a:	203e      	movs	r0, #62	@ 0x3e
 810193c:	f7ff ffce 	bl	81018dc <bno055_readData>

    // Modifica solo i bit relativi alla modalità energetica
    currentMode &= 0xFC; // Azzera i primi due bit
 8101940:	7bfb      	ldrb	r3, [r7, #15]
 8101942:	f023 0303 	bic.w	r3, r3, #3
 8101946:	b2db      	uxtb	r3, r3
 8101948:	73fb      	strb	r3, [r7, #15]
    currentMode |= mode; // Imposta la nuova modalità energetica
 810194a:	7bfa      	ldrb	r2, [r7, #15]
 810194c:	79fb      	ldrb	r3, [r7, #7]
 810194e:	4313      	orrs	r3, r2
 8101950:	b2db      	uxtb	r3, r3
 8101952:	73fb      	strb	r3, [r7, #15]

    // Scrivi il nuovo valore in PWR_MODE
    bno055_writeData(BNO055_PWR_MODE, currentMode);
 8101954:	7bfb      	ldrb	r3, [r7, #15]
 8101956:	4619      	mov	r1, r3
 8101958:	203e      	movs	r0, #62	@ 0x3e
 810195a:	f7ff ff8b 	bl	8101874 <bno055_writeData>
}
 810195e:	bf00      	nop
 8101960:	3710      	adds	r7, #16
 8101962:	46bd      	mov	sp, r7
 8101964:	bd80      	pop	{r7, pc}

08101966 <bno055_getPowerMode>:

// Funzione per ottenere la modalità energetica attuale
PowerMode bno055_getPowerMode() {
 8101966:	b580      	push	{r7, lr}
 8101968:	b082      	sub	sp, #8
 810196a:	af00      	add	r7, sp, #0
    // Leggi il valore corrente di PWR_MODE
    uint8_t currentMode;
    bno055_readData(BNO055_PWR_MODE, &currentMode, 1);
 810196c:	1dfb      	adds	r3, r7, #7
 810196e:	2201      	movs	r2, #1
 8101970:	4619      	mov	r1, r3
 8101972:	203e      	movs	r0, #62	@ 0x3e
 8101974:	f7ff ffb2 	bl	81018dc <bno055_readData>

    // Estrai la modalità energetica dai primi due bit
    currentMode &= 0x03;
 8101978:	79fb      	ldrb	r3, [r7, #7]
 810197a:	f003 0303 	and.w	r3, r3, #3
 810197e:	b2db      	uxtb	r3, r3
 8101980:	71fb      	strb	r3, [r7, #7]

    // Restituisci la modalità energetica come enumerazione PowerMode
    return (PowerMode)currentMode;
 8101982:	79fb      	ldrb	r3, [r7, #7]
}
 8101984:	4618      	mov	r0, r3
 8101986:	3708      	adds	r7, #8
 8101988:	46bd      	mov	sp, r7
 810198a:	bd80      	pop	{r7, pc}

0810198c <kalman_filter_init>:
//dimensioni del sistema


void kalman_filter_init(KalmanFilter* kf, float32_t* A_data,float32_t* B_data,
		float32_t* H_data, float32_t* Q_data,float32_t* R_data,float32_t* P_data,
		float32_t* K_data, float32_t* x_data) {
 810198c:	b580      	push	{r7, lr}
 810198e:	b084      	sub	sp, #16
 8101990:	af00      	add	r7, sp, #0
 8101992:	60f8      	str	r0, [r7, #12]
 8101994:	60b9      	str	r1, [r7, #8]
 8101996:	607a      	str	r2, [r7, #4]
 8101998:	603b      	str	r3, [r7, #0]


    arm_mat_init_f32(&kf->A, state_dim, state_dim, (float32_t *)A_data);
 810199a:	68f8      	ldr	r0, [r7, #12]
 810199c:	68bb      	ldr	r3, [r7, #8]
 810199e:	2202      	movs	r2, #2
 81019a0:	2102      	movs	r1, #2
 81019a2:	f00f fcd7 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, state_dim, control_dim, (float32_t *)B_data);
 81019a6:	68fb      	ldr	r3, [r7, #12]
 81019a8:	f103 0008 	add.w	r0, r3, #8
 81019ac:	687b      	ldr	r3, [r7, #4]
 81019ae:	2201      	movs	r2, #1
 81019b0:	2102      	movs	r1, #2
 81019b2:	f00f fccf 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, measure_dim, state_dim, (float32_t *)H_data);
 81019b6:	68fb      	ldr	r3, [r7, #12]
 81019b8:	f103 0010 	add.w	r0, r3, #16
 81019bc:	683b      	ldr	r3, [r7, #0]
 81019be:	2202      	movs	r2, #2
 81019c0:	2102      	movs	r1, #2
 81019c2:	f00f fcc7 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, state_dim, state_dim, (float32_t *)Q_data);
 81019c6:	68fb      	ldr	r3, [r7, #12]
 81019c8:	f103 0018 	add.w	r0, r3, #24
 81019cc:	69bb      	ldr	r3, [r7, #24]
 81019ce:	2202      	movs	r2, #2
 81019d0:	2102      	movs	r1, #2
 81019d2:	f00f fcbf 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, measure_dim, measure_dim, (float32_t *)R_data);
 81019d6:	68fb      	ldr	r3, [r7, #12]
 81019d8:	f103 0020 	add.w	r0, r3, #32
 81019dc:	69fb      	ldr	r3, [r7, #28]
 81019de:	2202      	movs	r2, #2
 81019e0:	2102      	movs	r1, #2
 81019e2:	f00f fcb7 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, state_dim, state_dim, (float32_t *)P_data);
 81019e6:	68fb      	ldr	r3, [r7, #12]
 81019e8:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 81019ec:	6a3b      	ldr	r3, [r7, #32]
 81019ee:	2202      	movs	r2, #2
 81019f0:	2102      	movs	r1, #2
 81019f2:	f00f fcaf 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->x, state_dim, 1, (float32_t *)x_data);
 81019f6:	68fb      	ldr	r3, [r7, #12]
 81019f8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 81019fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81019fe:	2201      	movs	r2, #1
 8101a00:	2102      	movs	r1, #2
 8101a02:	f00f fca7 	bl	8111354 <arm_mat_init_f32>

    arm_mat_init_f32(&kf->K, state_dim, measure_dim, (float32_t *)&x_data);
 8101a06:	68fb      	ldr	r3, [r7, #12]
 8101a08:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8101a0c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101a10:	2202      	movs	r2, #2
 8101a12:	2102      	movs	r1, #2
 8101a14:	f00f fc9e 	bl	8111354 <arm_mat_init_f32>

}
 8101a18:	bf00      	nop
 8101a1a:	3710      	adds	r7, #16
 8101a1c:	46bd      	mov	sp, r7
 8101a1e:	bd80      	pop	{r7, pc}

08101a20 <kalman_predict>:
    }
}



void kalman_predict(KalmanFilter* kf, const arm_matrix_instance_f32* u) {
 8101a20:	b580      	push	{r7, lr}
 8101a22:	b09c      	sub	sp, #112	@ 0x70
 8101a24:	af00      	add	r7, sp, #0
 8101a26:	6078      	str	r0, [r7, #4]
 8101a28:	6039      	str	r1, [r7, #0]
	float32_t temp1_data[state_dim];
	float32_t temp2_data[state_dim];
	float32_t temp3_data[state_dim*state_dim];
	float32_t temp4_data[state_dim*state_dim];
	float32_t temp5_data[state_dim*state_dim];
    arm_mat_init_f32(&temp1, state_dim, 1, (float32_t *)&temp1_data);
 8101a2a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8101a2e:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8101a32:	2201      	movs	r2, #1
 8101a34:	2102      	movs	r1, #2
 8101a36:	f00f fc8d 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, state_dim, 1, (float32_t *)&temp2_data);
 8101a3a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8101a3e:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8101a42:	2201      	movs	r2, #1
 8101a44:	2102      	movs	r1, #2
 8101a46:	f00f fc85 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&temp3, state_dim, state_dim, (float32_t *)&temp3_data);
 8101a4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101a4e:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8101a52:	2202      	movs	r2, #2
 8101a54:	2102      	movs	r1, #2
 8101a56:	f00f fc7d 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&temp4, state_dim, state_dim, (float32_t *)&temp4_data);
 8101a5a:	f107 0318 	add.w	r3, r7, #24
 8101a5e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8101a62:	2202      	movs	r2, #2
 8101a64:	2102      	movs	r1, #2
 8101a66:	f00f fc75 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&temp5, state_dim, state_dim, (float32_t *)&temp5_data);
 8101a6a:	f107 0308 	add.w	r3, r7, #8
 8101a6e:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8101a72:	2202      	movs	r2, #2
 8101a74:	2102      	movs	r1, #2
 8101a76:	f00f fc6d 	bl	8111354 <arm_mat_init_f32>

    // x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &temp1);
 8101a7a:	6878      	ldr	r0, [r7, #4]
 8101a7c:	687b      	ldr	r3, [r7, #4]
 8101a7e:	3338      	adds	r3, #56	@ 0x38
 8101a80:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8101a84:	4619      	mov	r1, r3
 8101a86:	f00f fabf 	bl	8111008 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, u, &temp2);
 8101a8a:	687b      	ldr	r3, [r7, #4]
 8101a8c:	3308      	adds	r3, #8
 8101a8e:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8101a92:	6839      	ldr	r1, [r7, #0]
 8101a94:	4618      	mov	r0, r3
 8101a96:	f00f fab7 	bl	8111008 <arm_mat_mult_f32>
	arm_mat_add_f32(&temp1, &temp2,  &kf->x);
 8101a9a:	687b      	ldr	r3, [r7, #4]
 8101a9c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8101aa0:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8101aa4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8101aa8:	4618      	mov	r0, r3
 8101aaa:	f00f fc57 	bl	811135c <arm_mat_add_f32>


    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &temp4);
 8101aae:	6878      	ldr	r0, [r7, #4]
 8101ab0:	687b      	ldr	r3, [r7, #4]
 8101ab2:	3328      	adds	r3, #40	@ 0x28
 8101ab4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8101ab8:	4619      	mov	r1, r3
 8101aba:	f00f faa5 	bl	8111008 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &temp5);
 8101abe:	687b      	ldr	r3, [r7, #4]
 8101ac0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8101ac4:	4611      	mov	r1, r2
 8101ac6:	4618      	mov	r0, r3
 8101ac8:	f00f f9d8 	bl	8110e7c <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp4, &temp5, &temp3);
 8101acc:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8101ad0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8101ad4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8101ad8:	4618      	mov	r0, r3
 8101ada:	f00f fa95 	bl	8111008 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->Q, &kf->P);
 8101ade:	687b      	ldr	r3, [r7, #4]
 8101ae0:	f103 0118 	add.w	r1, r3, #24
 8101ae4:	687b      	ldr	r3, [r7, #4]
 8101ae6:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8101aea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8101aee:	4618      	mov	r0, r3
 8101af0:	f00f fc34 	bl	811135c <arm_mat_add_f32>


}
 8101af4:	bf00      	nop
 8101af6:	3770      	adds	r7, #112	@ 0x70
 8101af8:	46bd      	mov	sp, r7
 8101afa:	bd80      	pop	{r7, pc}

08101afc <kalman_update>:


void kalman_update(KalmanFilter* kf, const arm_matrix_instance_f32* z)
{
 8101afc:	b580      	push	{r7, lr}
 8101afe:	b0dc      	sub	sp, #368	@ 0x170
 8101b00:	af00      	add	r7, sp, #0
 8101b02:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b06:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101b0a:	6018      	str	r0, [r3, #0]
 8101b0c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b10:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8101b14:	6019      	str	r1, [r3, #0]
    float32_t temp12_data[measure_dim * state_dim];
    float32_t temp13_data[state_dim * measure_dim];
    float32_t temp14_data[measure_dim];
    float32_t temp15_data[measure_dim];
    float32_t temp16_data[state_dim];
    arm_mat_init_f32(&temp1, state_dim, measure_dim, temp1_data);
 8101b16:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8101b1a:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8101b1e:	2202      	movs	r2, #2
 8101b20:	2102      	movs	r1, #2
 8101b22:	f00f fc17 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, state_dim, measure_dim, temp2_data);
 8101b26:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8101b2a:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8101b2e:	2202      	movs	r2, #2
 8101b30:	2102      	movs	r1, #2
 8101b32:	f00f fc0f 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&temp3, measure_dim, measure_dim, temp3_data);
 8101b36:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8101b3a:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8101b3e:	2202      	movs	r2, #2
 8101b40:	2102      	movs	r1, #2
 8101b42:	f00f fc07 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&temp4, measure_dim, measure_dim, temp4_data);
 8101b46:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8101b4a:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8101b4e:	2202      	movs	r2, #2
 8101b50:	2102      	movs	r1, #2
 8101b52:	f00f fbff 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&temp5, measure_dim, measure_dim, temp5_data);
 8101b56:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8101b5a:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8101b5e:	2202      	movs	r2, #2
 8101b60:	2102      	movs	r1, #2
 8101b62:	f00f fbf7 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&temp6, state_dim, state_dim, temp6_data);
 8101b66:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8101b6a:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8101b6e:	2202      	movs	r2, #2
 8101b70:	2102      	movs	r1, #2
 8101b72:	f00f fbef 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&temp7, state_dim, state_dim, temp7_data);
 8101b76:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8101b7a:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8101b7e:	2202      	movs	r2, #2
 8101b80:	2102      	movs	r1, #2
 8101b82:	f00f fbe7 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&temp8, state_dim, state_dim, temp8_data);
 8101b86:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8101b8a:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8101b8e:	2202      	movs	r2, #2
 8101b90:	2102      	movs	r1, #2
 8101b92:	f00f fbdf 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&temp9, state_dim, measure_dim, temp9_data);
 8101b96:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8101b9a:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8101b9e:	2202      	movs	r2, #2
 8101ba0:	2102      	movs	r1, #2
 8101ba2:	f00f fbd7 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&temp10, state_dim, measure_dim, temp10_data);
 8101ba6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8101baa:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8101bae:	2202      	movs	r2, #2
 8101bb0:	2102      	movs	r1, #2
 8101bb2:	f00f fbcf 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&temp11, measure_dim,state_dim, temp11_data);
 8101bb6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8101bba:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8101bbe:	2202      	movs	r2, #2
 8101bc0:	2102      	movs	r1, #2
 8101bc2:	f00f fbc7 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&temp12, measure_dim, state_dim, temp12_data);
 8101bc6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101bca:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8101bce:	2202      	movs	r2, #2
 8101bd0:	2102      	movs	r1, #2
 8101bd2:	f00f fbbf 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&temp13, state_dim, measure_dim, temp13_data);
 8101bd6:	f107 0320 	add.w	r3, r7, #32
 8101bda:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8101bde:	2202      	movs	r2, #2
 8101be0:	2102      	movs	r1, #2
 8101be2:	f00f fbb7 	bl	8111354 <arm_mat_init_f32>
    arm_mat_init_f32(&temp14, measure_dim, 1, temp14_data);
 8101be6:	f107 0318 	add.w	r3, r7, #24
 8101bea:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8101bee:	2201      	movs	r2, #1
 8101bf0:	2102      	movs	r1, #2
 8101bf2:	f00f fbaf 	bl	8111354 <arm_mat_init_f32>
	arm_mat_init_f32(&temp15, measure_dim, 1, temp15_data);
 8101bf6:	f107 0310 	add.w	r3, r7, #16
 8101bfa:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 8101bfe:	2201      	movs	r2, #1
 8101c00:	2102      	movs	r1, #2
 8101c02:	f00f fba7 	bl	8111354 <arm_mat_init_f32>
	arm_mat_init_f32(&temp16, state_dim, 1, temp16_data);
 8101c06:	f107 0308 	add.w	r3, r7, #8
 8101c0a:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 8101c0e:	2201      	movs	r2, #1
 8101c10:	2102      	movs	r1, #2
 8101c12:	f00f fb9f 	bl	8111354 <arm_mat_init_f32>

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &temp1);
 8101c16:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c1a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c1e:	681b      	ldr	r3, [r3, #0]
 8101c20:	3310      	adds	r3, #16
 8101c22:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8101c26:	4611      	mov	r1, r2
 8101c28:	4618      	mov	r0, r3
 8101c2a:	f00f f927 	bl	8110e7c <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &temp1, &temp2);
 8101c2e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c32:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c36:	681b      	ldr	r3, [r3, #0]
 8101c38:	3328      	adds	r3, #40	@ 0x28
 8101c3a:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8101c3e:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8101c42:	4618      	mov	r0, r3
 8101c44:	f00f f9e0 	bl	8111008 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &temp2, &temp3);
 8101c48:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c4c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c50:	681b      	ldr	r3, [r3, #0]
 8101c52:	3310      	adds	r3, #16
 8101c54:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8101c58:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8101c5c:	4618      	mov	r0, r3
 8101c5e:	f00f f9d3 	bl	8111008 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->R, &temp4);
 8101c62:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c66:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c6a:	681b      	ldr	r3, [r3, #0]
 8101c6c:	f103 0120 	add.w	r1, r3, #32
 8101c70:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8101c74:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8101c78:	4618      	mov	r0, r3
 8101c7a:	f00f fb6f 	bl	811135c <arm_mat_add_f32>
    arm_mat_inverse_f32(&temp4, &temp5);
 8101c7e:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8101c82:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8101c86:	4611      	mov	r1, r2
 8101c88:	4618      	mov	r0, r3
 8101c8a:	f00f fa5d 	bl	8111148 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&temp2, &temp5, &kf->K);
 8101c8e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c92:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c96:	681b      	ldr	r3, [r3, #0]
 8101c98:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8101c9c:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8101ca0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8101ca4:	4618      	mov	r0, r3
 8101ca6:	f00f f9af 	bl	8111008 <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &temp14);
 8101caa:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cae:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cb2:	681b      	ldr	r3, [r3, #0]
 8101cb4:	f103 0010 	add.w	r0, r3, #16
 8101cb8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cbc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cc0:	681b      	ldr	r3, [r3, #0]
 8101cc2:	3338      	adds	r3, #56	@ 0x38
 8101cc4:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8101cc8:	4619      	mov	r1, r3
 8101cca:	f00f f99d 	bl	8111008 <arm_mat_mult_f32>
    arm_mat_sub_f32(z, &temp14, &temp15);
 8101cce:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8101cd2:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8101cd6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cda:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8101cde:	6818      	ldr	r0, [r3, #0]
 8101ce0:	f00f f928 	bl	8110f34 <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->K, &temp15, &temp16);
 8101ce4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101ce8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cec:	681b      	ldr	r3, [r3, #0]
 8101cee:	3330      	adds	r3, #48	@ 0x30
 8101cf0:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 8101cf4:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 8101cf8:	4618      	mov	r0, r3
 8101cfa:	f00f f985 	bl	8111008 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->x, &temp16, &kf->x);
 8101cfe:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d02:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d06:	681b      	ldr	r3, [r3, #0]
 8101d08:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8101d0c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d10:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d14:	681b      	ldr	r3, [r3, #0]
 8101d16:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8101d1a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8101d1e:	4619      	mov	r1, r3
 8101d20:	f00f fb1c 	bl	811135c <arm_mat_add_f32>

    // Aggiornamento di P
    // P = P - P*H'*K' - K*H*P + K*(H*P*H' + R)*K'

    // Prima parte: P * H'
    arm_mat_trans_f32(&kf->H, &temp9);
 8101d24:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d28:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d2c:	681b      	ldr	r3, [r3, #0]
 8101d2e:	3310      	adds	r3, #16
 8101d30:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8101d34:	4611      	mov	r1, r2
 8101d36:	4618      	mov	r0, r3
 8101d38:	f00f f8a0 	bl	8110e7c <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &temp9, &temp10);
 8101d3c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d40:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d44:	681b      	ldr	r3, [r3, #0]
 8101d46:	3328      	adds	r3, #40	@ 0x28
 8101d48:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8101d4c:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8101d50:	4618      	mov	r0, r3
 8101d52:	f00f f959 	bl	8111008 <arm_mat_mult_f32>
    // Seconda parte: P * H' * K'
    arm_mat_trans_f32(&kf->K, &temp11);
 8101d56:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d5a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d5e:	681b      	ldr	r3, [r3, #0]
 8101d60:	3330      	adds	r3, #48	@ 0x30
 8101d62:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8101d66:	4611      	mov	r1, r2
 8101d68:	4618      	mov	r0, r3
 8101d6a:	f00f f887 	bl	8110e7c <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp10, &temp11, &temp6);
 8101d6e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8101d72:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8101d76:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8101d7a:	4618      	mov	r0, r3
 8101d7c:	f00f f944 	bl	8111008 <arm_mat_mult_f32>
    // Terza parte: K * H * P
    arm_mat_mult_f32(&kf->H, &kf->P, &temp12);
 8101d80:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d84:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d88:	681b      	ldr	r3, [r3, #0]
 8101d8a:	f103 0010 	add.w	r0, r3, #16
 8101d8e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d92:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d96:	681b      	ldr	r3, [r3, #0]
 8101d98:	3328      	adds	r3, #40	@ 0x28
 8101d9a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8101d9e:	4619      	mov	r1, r3
 8101da0:	f00f f932 	bl	8111008 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->K, &temp12, &temp7);
 8101da4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101da8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dac:	681b      	ldr	r3, [r3, #0]
 8101dae:	3330      	adds	r3, #48	@ 0x30
 8101db0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8101db4:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8101db8:	4618      	mov	r0, r3
 8101dba:	f00f f925 	bl	8111008 <arm_mat_mult_f32>
    // Quarta parte: K * (H * P * H' + R) * K'
    arm_mat_mult_f32(&kf->H, &kf->P, &temp8);
 8101dbe:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101dc2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dc6:	681b      	ldr	r3, [r3, #0]
 8101dc8:	f103 0010 	add.w	r0, r3, #16
 8101dcc:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101dd0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dd4:	681b      	ldr	r3, [r3, #0]
 8101dd6:	3328      	adds	r3, #40	@ 0x28
 8101dd8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8101ddc:	4619      	mov	r1, r3
 8101dde:	f00f f913 	bl	8111008 <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp8, &temp9, &temp3);
 8101de2:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8101de6:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8101dea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8101dee:	4618      	mov	r0, r3
 8101df0:	f00f f90a 	bl	8111008 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->R, &temp4);
 8101df4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101df8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dfc:	681b      	ldr	r3, [r3, #0]
 8101dfe:	f103 0120 	add.w	r1, r3, #32
 8101e02:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8101e06:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8101e0a:	4618      	mov	r0, r3
 8101e0c:	f00f faa6 	bl	811135c <arm_mat_add_f32>
    arm_mat_mult_f32(&kf->K, &temp4, &temp13);
 8101e10:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e14:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e18:	681b      	ldr	r3, [r3, #0]
 8101e1a:	3330      	adds	r3, #48	@ 0x30
 8101e1c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8101e20:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8101e24:	4618      	mov	r0, r3
 8101e26:	f00f f8ef 	bl	8111008 <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp13, &temp11, &temp8);
 8101e2a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8101e2e:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8101e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8101e36:	4618      	mov	r0, r3
 8101e38:	f00f f8e6 	bl	8111008 <arm_mat_mult_f32>
    // Risultato finale: P = P - temp6 - temp7 + temp8
    arm_mat_sub_f32(&kf->P, &temp6, &temp12);
 8101e3c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e40:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e44:	681b      	ldr	r3, [r3, #0]
 8101e46:	3328      	adds	r3, #40	@ 0x28
 8101e48:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8101e4c:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8101e50:	4618      	mov	r0, r3
 8101e52:	f00f f86f 	bl	8110f34 <arm_mat_sub_f32>
    arm_mat_sub_f32(&temp12, &temp7, &temp6);
 8101e56:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8101e5a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8101e5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8101e62:	4618      	mov	r0, r3
 8101e64:	f00f f866 	bl	8110f34 <arm_mat_sub_f32>
    arm_mat_add_f32(&temp6, &temp8, &kf->P);
 8101e68:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e6c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e70:	681b      	ldr	r3, [r3, #0]
 8101e72:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8101e76:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8101e7a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8101e7e:	4618      	mov	r0, r3
 8101e80:	f00f fa6c 	bl	811135c <arm_mat_add_f32>


}
 8101e84:	bf00      	nop
 8101e86:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8101e8a:	46bd      	mov	sp, r7
 8101e8c:	bd80      	pop	{r7, pc}

08101e8e <voltToAmpere>:

	// Restituisci la media mobile
	return somma / count;
}

float voltToAmpere(float Volt, float a, float b) {
 8101e8e:	b480      	push	{r7}
 8101e90:	b087      	sub	sp, #28
 8101e92:	af00      	add	r7, sp, #0
 8101e94:	ed87 0a03 	vstr	s0, [r7, #12]
 8101e98:	edc7 0a02 	vstr	s1, [r7, #8]
 8101e9c:	ed87 1a01 	vstr	s2, [r7, #4]
	//float ampere = (Volt-2.47)/0.22;  //a3b RESISTENZA
	//float ampere = Volt*1.25994074 - 3.1119; //a3b MOTORE
	//float ampere = (Volt -2.53)/0.8 + 0.095 + 0.065 + 0.07 ;
	float ampere = (Volt - b) / a;
 8101ea0:	ed97 7a03 	vldr	s14, [r7, #12]
 8101ea4:	edd7 7a01 	vldr	s15, [r7, #4]
 8101ea8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8101eac:	ed97 7a02 	vldr	s14, [r7, #8]
 8101eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101eb4:	edc7 7a05 	vstr	s15, [r7, #20]

	//float ampere = 2.3*Volt - 5.75;   //a4b DA RIVEDERE
	//float ampere = (Volt-2.48)/0.185; //sensore ACS712 05b
	return ampere;
 8101eb8:	697b      	ldr	r3, [r7, #20]
 8101eba:	ee07 3a90 	vmov	s15, r3
}
 8101ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8101ec2:	371c      	adds	r7, #28
 8101ec4:	46bd      	mov	sp, r7
 8101ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eca:	4770      	bx	lr

08101ecc <getSpeed>:
	return ((float) rand() / RAND_MAX) * (max - min) + min;
}

//******************
//FUNZIONE PER VELOCITA DESIDERATA DELLA RUOTA DIETRO, INIZIALMENTE A RAMPA E POI COSTANTE
float getSpeed(float actual_speed) {
 8101ecc:	b480      	push	{r7}
 8101ece:	b085      	sub	sp, #20
 8101ed0:	af00      	add	r7, sp, #0
 8101ed2:	ed87 0a01 	vstr	s0, [r7, #4]
	float ramp_time = 2; //secondi di rampa
 8101ed6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8101eda:	60fb      	str	r3, [r7, #12]

	//speed è la velocita di regime (costante)
	if (actual_speed < speed) {
 8101edc:	4b11      	ldr	r3, [pc, #68]	@ (8101f24 <getSpeed+0x58>)
 8101ede:	edd3 7a00 	vldr	s15, [r3]
 8101ee2:	ed97 7a01 	vldr	s14, [r7, #4]
 8101ee6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101eee:	d50f      	bpl.n	8101f10 <getSpeed+0x44>
		return actual_speed + speed * dt / ramp_time;
 8101ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8101f24 <getSpeed+0x58>)
 8101ef2:	edd3 7a00 	vldr	s15, [r3]
 8101ef6:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8101f28 <getSpeed+0x5c>
 8101efa:	ee67 6a87 	vmul.f32	s13, s15, s14
 8101efe:	edd7 7a03 	vldr	s15, [r7, #12]
 8101f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8101f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101f0e:	e002      	b.n	8101f16 <getSpeed+0x4a>
	} else
		return speed;
 8101f10:	4b04      	ldr	r3, [pc, #16]	@ (8101f24 <getSpeed+0x58>)
 8101f12:	edd3 7a00 	vldr	s15, [r3]
}
 8101f16:	eeb0 0a67 	vmov.f32	s0, s15
 8101f1a:	3714      	adds	r7, #20
 8101f1c:	46bd      	mov	sp, r7
 8101f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f22:	4770      	bx	lr
 8101f24:	10000014 	.word	0x10000014
 8101f28:	3c23d70a 	.word	0x3c23d70a

08101f2c <filtro_media_mobile>:
//******************
// FUNZIONE PER IL FILTRO A MEDIA MOBILE
float filtro_media_mobile(float *vettorenuovo, float *vettorevecchio,
		float nuovamisurazione, int dimensione) {
 8101f2c:	b480      	push	{r7}
 8101f2e:	b089      	sub	sp, #36	@ 0x24
 8101f30:	af00      	add	r7, sp, #0
 8101f32:	60f8      	str	r0, [r7, #12]
 8101f34:	60b9      	str	r1, [r7, #8]
 8101f36:	ed87 0a01 	vstr	s0, [r7, #4]
 8101f3a:	603a      	str	r2, [r7, #0]
	vettorenuovo[0] = nuovamisurazione;
 8101f3c:	68fb      	ldr	r3, [r7, #12]
 8101f3e:	687a      	ldr	r2, [r7, #4]
 8101f40:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < dimensione - 1; i++) {
 8101f42:	2300      	movs	r3, #0
 8101f44:	61fb      	str	r3, [r7, #28]
 8101f46:	e00d      	b.n	8101f64 <filtro_media_mobile+0x38>
		vettorenuovo[i + 1] = vettorevecchio[i]; // dal 2 al n-1 esimo valore si ricopiano i valori vecchi
 8101f48:	69fb      	ldr	r3, [r7, #28]
 8101f4a:	009b      	lsls	r3, r3, #2
 8101f4c:	68ba      	ldr	r2, [r7, #8]
 8101f4e:	441a      	add	r2, r3
 8101f50:	69fb      	ldr	r3, [r7, #28]
 8101f52:	3301      	adds	r3, #1
 8101f54:	009b      	lsls	r3, r3, #2
 8101f56:	68f9      	ldr	r1, [r7, #12]
 8101f58:	440b      	add	r3, r1
 8101f5a:	6812      	ldr	r2, [r2, #0]
 8101f5c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < dimensione - 1; i++) {
 8101f5e:	69fb      	ldr	r3, [r7, #28]
 8101f60:	3301      	adds	r3, #1
 8101f62:	61fb      	str	r3, [r7, #28]
 8101f64:	683b      	ldr	r3, [r7, #0]
 8101f66:	3b01      	subs	r3, #1
 8101f68:	69fa      	ldr	r2, [r7, #28]
 8101f6a:	429a      	cmp	r2, r3
 8101f6c:	dbec      	blt.n	8101f48 <filtro_media_mobile+0x1c>
	}

	float somma = 0;
 8101f6e:	f04f 0300 	mov.w	r3, #0
 8101f72:	61bb      	str	r3, [r7, #24]
	float media;
	for (int i = 0; i < dimensione; i++) {
 8101f74:	2300      	movs	r3, #0
 8101f76:	617b      	str	r3, [r7, #20]
 8101f78:	e018      	b.n	8101fac <filtro_media_mobile+0x80>
		vettorevecchio[i] = vettorenuovo[i]; //copia il vettore nuovo nel vecchio
 8101f7a:	697b      	ldr	r3, [r7, #20]
 8101f7c:	009b      	lsls	r3, r3, #2
 8101f7e:	68fa      	ldr	r2, [r7, #12]
 8101f80:	441a      	add	r2, r3
 8101f82:	697b      	ldr	r3, [r7, #20]
 8101f84:	009b      	lsls	r3, r3, #2
 8101f86:	68b9      	ldr	r1, [r7, #8]
 8101f88:	440b      	add	r3, r1
 8101f8a:	6812      	ldr	r2, [r2, #0]
 8101f8c:	601a      	str	r2, [r3, #0]
		somma += vettorenuovo[i];           //calcola la somma di tutti i valori
 8101f8e:	697b      	ldr	r3, [r7, #20]
 8101f90:	009b      	lsls	r3, r3, #2
 8101f92:	68fa      	ldr	r2, [r7, #12]
 8101f94:	4413      	add	r3, r2
 8101f96:	edd3 7a00 	vldr	s15, [r3]
 8101f9a:	ed97 7a06 	vldr	s14, [r7, #24]
 8101f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101fa2:	edc7 7a06 	vstr	s15, [r7, #24]
	for (int i = 0; i < dimensione; i++) {
 8101fa6:	697b      	ldr	r3, [r7, #20]
 8101fa8:	3301      	adds	r3, #1
 8101faa:	617b      	str	r3, [r7, #20]
 8101fac:	697a      	ldr	r2, [r7, #20]
 8101fae:	683b      	ldr	r3, [r7, #0]
 8101fb0:	429a      	cmp	r2, r3
 8101fb2:	dbe2      	blt.n	8101f7a <filtro_media_mobile+0x4e>
		// printf("%f.3 vet ", vettorenuovo[i]);
	}

	media = somma / dimensione;
 8101fb4:	683b      	ldr	r3, [r7, #0]
 8101fb6:	ee07 3a90 	vmov	s15, r3
 8101fba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8101fbe:	edd7 6a06 	vldr	s13, [r7, #24]
 8101fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101fc6:	edc7 7a04 	vstr	s15, [r7, #16]
	return media;
 8101fca:	693b      	ldr	r3, [r7, #16]
 8101fcc:	ee07 3a90 	vmov	s15, r3
}
 8101fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8101fd4:	3724      	adds	r7, #36	@ 0x24
 8101fd6:	46bd      	mov	sp, r7
 8101fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fdc:	4770      	bx	lr
	...

08101fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101fe4:	b0cd      	sub	sp, #308	@ 0x134
 8101fe6:	af22      	add	r7, sp, #136	@ 0x88

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8101fe8:	4b9e      	ldr	r3, [pc, #632]	@ (8102264 <main+0x284>)
 8101fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101fee:	4a9d      	ldr	r2, [pc, #628]	@ (8102264 <main+0x284>)
 8101ff0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101ff8:	4b9a      	ldr	r3, [pc, #616]	@ (8102264 <main+0x284>)
 8101ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8102002:	673b      	str	r3, [r7, #112]	@ 0x70
 8102004:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102006:	2001      	movs	r0, #1
 8102008:	f007 f8d6 	bl	81091b8 <HAL_HSEM_ActivateNotification>
	/*
	 Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	 perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 810200c:	f007 ff62 	bl	8109ed4 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE,
 8102010:	2201      	movs	r2, #1
 8102012:	2102      	movs	r1, #2
 8102014:	2000      	movs	r0, #0
 8102016:	f007 fee3 	bl	8109de0 <HAL_PWREx_EnterSTOPMode>
	PWR_D2_DOMAIN);
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810201a:	4b93      	ldr	r3, [pc, #588]	@ (8102268 <main+0x288>)
 810201c:	681b      	ldr	r3, [r3, #0]
 810201e:	091b      	lsrs	r3, r3, #4
 8102020:	f003 030f 	and.w	r3, r3, #15
 8102024:	2b07      	cmp	r3, #7
 8102026:	d108      	bne.n	810203a <main+0x5a>
 8102028:	4b90      	ldr	r3, [pc, #576]	@ (810226c <main+0x28c>)
 810202a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810202e:	4a8f      	ldr	r2, [pc, #572]	@ (810226c <main+0x28c>)
 8102030:	f043 0301 	orr.w	r3, r3, #1
 8102034:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8102038:	e007      	b.n	810204a <main+0x6a>
 810203a:	4b8c      	ldr	r3, [pc, #560]	@ (810226c <main+0x28c>)
 810203c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8102040:	4a8a      	ldr	r2, [pc, #552]	@ (810226c <main+0x28c>)
 8102042:	f043 0301 	orr.w	r3, r3, #1
 8102046:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810204a:	f002 fdbd 	bl	8104bc8 <HAL_Init>

  /* USER CODE BEGIN Init */
	MX_GPIO_Init();
 810204e:	f001 fdbf 	bl	8103bd0 <MX_GPIO_Init>
  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */

	arm_fir_init_f32(&fir_instance, FIR_LENGHT, fir_coefficients, fir_state, 1);
 8102052:	2301      	movs	r3, #1
 8102054:	9300      	str	r3, [sp, #0]
 8102056:	4b86      	ldr	r3, [pc, #536]	@ (8102270 <main+0x290>)
 8102058:	4a86      	ldr	r2, [pc, #536]	@ (8102274 <main+0x294>)
 810205a:	2103      	movs	r1, #3
 810205c:	4886      	ldr	r0, [pc, #536]	@ (8102278 <main+0x298>)
 810205e:	f00f f9e7 	bl	8111430 <arm_fir_init_f32>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8102062:	f001 fd95 	bl	8103b90 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8102066:	f001 fcfb 	bl	8103a60 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 810206a:	f001 f991 	bl	8103390 <MX_I2C1_Init>
  MX_TIM1_Init();
 810206e:	f001 f9cf 	bl	8103410 <MX_TIM1_Init>
  MX_TIM2_Init();
 8102072:	f001 fa79 	bl	8103568 <MX_TIM2_Init>
  MX_TIM4_Init();
 8102076:	f001 fb3b 	bl	81036f0 <MX_TIM4_Init>
  MX_ADC1_Init();
 810207a:	f001 f903 	bl	8103284 <MX_ADC1_Init>
  MX_TIM3_Init();
 810207e:	f001 fac1 	bl	8103604 <MX_TIM3_Init>
  MX_TIM8_Init();
 8102082:	f001 fbf9 	bl	8103878 <MX_TIM8_Init>
  MX_TIM6_Init();
 8102086:	f001 fb89 	bl	810379c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 810208a:	f001 fc9d 	bl	81039c8 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 810208e:	f001 fbbd 	bl	810380c <MX_TIM7_Init>
  MX_TIM12_Init();
 8102092:	f001 fc4b 	bl	810392c <MX_TIM12_Init>
  MX_USART6_UART_Init();
 8102096:	f001 fd2f 	bl	8103af8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 810209a:	4878      	ldr	r0, [pc, #480]	@ (810227c <main+0x29c>)
 810209c:	f00a fec6 	bl	810ce2c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 81020a0:	2100      	movs	r1, #0
 81020a2:	4877      	ldr	r0, [pc, #476]	@ (8102280 <main+0x2a0>)
 81020a4:	f00a ff9c 	bl	810cfe0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 81020a8:	2100      	movs	r1, #0
 81020aa:	4876      	ldr	r0, [pc, #472]	@ (8102284 <main+0x2a4>)
 81020ac:	f00a ff98 	bl	810cfe0 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim4);
 81020b0:	4875      	ldr	r0, [pc, #468]	@ (8102288 <main+0x2a8>)
 81020b2:	f00a fe4b 	bl	810cd4c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 81020b6:	4875      	ldr	r0, [pc, #468]	@ (810228c <main+0x2ac>)
 81020b8:	f00a fe48 	bl	810cd4c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim12);
 81020bc:	4874      	ldr	r0, [pc, #464]	@ (8102290 <main+0x2b0>)
 81020be:	f00a feb5 	bl	810ce2c <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start_IT(&htim6);
 81020c2:	4874      	ldr	r0, [pc, #464]	@ (8102294 <main+0x2b4>)
 81020c4:	f00a feb2 	bl	810ce2c <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, 1);
 81020c8:	2201      	movs	r2, #1
 81020ca:	4973      	ldr	r1, [pc, #460]	@ (8102298 <main+0x2b8>)
 81020cc:	4873      	ldr	r0, [pc, #460]	@ (810229c <main+0x2bc>)
 81020ce:	f00c fb85 	bl	810e7dc <HAL_UART_Receive_IT>

	srand(1233);
 81020d2:	f240 40d1 	movw	r0, #1233	@ 0x4d1
 81020d6:	f00f f9bb 	bl	8111450 <srand>

	//*************************
	//BNO055
	bno055_assignI2C(&hi2c1);
 81020da:	4871      	ldr	r0, [pc, #452]	@ (81022a0 <main+0x2c0>)
 81020dc:	f7ff fbae 	bl	810183c <bno055_assignI2C>
	bno055_setup(); //il BNO055 viene inizializzato con questa funzione
 81020e0:	f7ff f9cd 	bl	810147e <bno055_setup>

	bno055_setPowerMode(NORMAL_MODE); //Inserire la modalita da impostare
 81020e4:	2000      	movs	r0, #0
 81020e6:	f7ff fc1f 	bl	8101928 <bno055_setPowerMode>
	PowerMode currentMode = bno055_getPowerMode(); //Metodo per ottenere la modalita impostata
 81020ea:	f7ff fc3c 	bl	8101966 <bno055_getPowerMode>
 81020ee:	4603      	mov	r3, r0
 81020f0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
	printf("Modalita energetica attuale: %d\r\n", currentMode);
 81020f4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 81020f8:	4619      	mov	r1, r3
 81020fa:	486a      	ldr	r0, [pc, #424]	@ (81022a4 <main+0x2c4>)
 81020fc:	f010 f904 	bl	8112308 <iprintf>

	//Per angoli di Eulero
	bno055_vector_t eul;
	bno055_setOperationModeNDOF();
 8102100:	f7ff f9aa 	bl	8101458 <bno055_setOperationModeNDOF>




	//calibrazione sensore???
	bno055_calibration_state_t cal = bno055_getCalibrationState();
 8102104:	f7ff f9d8 	bl	81014b8 <bno055_getCalibrationState>
 8102108:	4603      	mov	r3, r0
 810210a:	677b      	str	r3, [r7, #116]	@ 0x74
	//		cal.gyro, cal.accel, cal.mag, cal.sys);
	//*************************

	//*************************
	//PID motore ruota dietro
	init_PID(&pid_speed, dt, V_MAX, -V_MAX);
 810210c:	eddf 7a66 	vldr	s15, [pc, #408]	@ 81022a8 <main+0x2c8>
 8102110:	eebb 1a02 	vmov.f32	s2, #178	@ 0xc1900000 -18.0
 8102114:	eef3 0a02 	vmov.f32	s1, #50	@ 0x41900000  18.0
 8102118:	eeb0 0a67 	vmov.f32	s0, s15
 810211c:	4863      	ldr	r0, [pc, #396]	@ (81022ac <main+0x2cc>)
 810211e:	f7ff f8d3 	bl	81012c8 <init_PID>
	tune_PID(&pid_speed, 14, 40, 0);
 8102122:	ed9f 1a63 	vldr	s2, [pc, #396]	@ 81022b0 <main+0x2d0>
 8102126:	eddf 0a63 	vldr	s1, [pc, #396]	@ 81022b4 <main+0x2d4>
 810212a:	eeb2 0a0c 	vmov.f32	s0, #44	@ 0x41600000  14.0
 810212e:	485f      	ldr	r0, [pc, #380]	@ (81022ac <main+0x2cc>)
 8102130:	f7ff f8eb 	bl	810130a <tune_PID>
	//*************************

	init_PID(&pid_yaw_rate, dt, 45, -45);
 8102134:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 81022a8 <main+0x2c8>
 8102138:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 81022b8 <main+0x2d8>
 810213c:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 81022bc <main+0x2dc>
 8102140:	eeb0 0a67 	vmov.f32	s0, s15
 8102144:	485e      	ldr	r0, [pc, #376]	@ (81022c0 <main+0x2e0>)
 8102146:	f7ff f8bf 	bl	81012c8 <init_PID>
	tune_PID(&pid_yaw_rate, 1.1, 19, 0.12);
 810214a:	ed9f 1a5e 	vldr	s2, [pc, #376]	@ 81022c4 <main+0x2e4>
 810214e:	eef3 0a03 	vmov.f32	s1, #51	@ 0x41980000  19.0
 8102152:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 81022c8 <main+0x2e8>
 8102156:	485a      	ldr	r0, [pc, #360]	@ (81022c0 <main+0x2e0>)
 8102158:	f7ff f8d7 	bl	810130a <tune_PID>
	//*************************

	//PID angolo roll
	init_PID(&pid_roll, dt, 10 * K, -10 * K);
 810215c:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 81022a8 <main+0x2c8>
 8102160:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 81022cc <main+0x2ec>
 8102164:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8102168:	ee67 7a27 	vmul.f32	s15, s14, s15
 810216c:	eddf 6a57 	vldr	s13, [pc, #348]	@ 81022cc <main+0x2ec>
 8102170:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8102174:	ee26 7a87 	vmul.f32	s14, s13, s14
 8102178:	eeb0 1a47 	vmov.f32	s2, s14
 810217c:	eef0 0a67 	vmov.f32	s1, s15
 8102180:	eeb0 0a46 	vmov.f32	s0, s12
 8102184:	4852      	ldr	r0, [pc, #328]	@ (81022d0 <main+0x2f0>)
 8102186:	f7ff f89f 	bl	81012c8 <init_PID>


	//ULTIMO PID ROLL ATTIVO tune_PID(0.00015*1.5,0,0.00015*2*2);
	//nuovo pid roll
	roll_kp = 0.00015*2.5;
 810218a:	4b52      	ldr	r3, [pc, #328]	@ (81022d4 <main+0x2f4>)
 810218c:	4a52      	ldr	r2, [pc, #328]	@ (81022d8 <main+0x2f8>)
 810218e:	601a      	str	r2, [r3, #0]
	roll_ki =0;
 8102190:	4b52      	ldr	r3, [pc, #328]	@ (81022dc <main+0x2fc>)
 8102192:	f04f 0200 	mov.w	r2, #0
 8102196:	601a      	str	r2, [r3, #0]
	roll_kd= 0;
 8102198:	4b51      	ldr	r3, [pc, #324]	@ (81022e0 <main+0x300>)
 810219a:	f04f 0200 	mov.w	r2, #0
 810219e:	601a      	str	r2, [r3, #0]
	tune_PID(&pid_roll, roll_kp, roll_ki, roll_kd);
 81021a0:	4b4c      	ldr	r3, [pc, #304]	@ (81022d4 <main+0x2f4>)
 81021a2:	edd3 7a00 	vldr	s15, [r3]
 81021a6:	4b4d      	ldr	r3, [pc, #308]	@ (81022dc <main+0x2fc>)
 81021a8:	ed93 7a00 	vldr	s14, [r3]
 81021ac:	4b4c      	ldr	r3, [pc, #304]	@ (81022e0 <main+0x300>)
 81021ae:	edd3 6a00 	vldr	s13, [r3]
 81021b2:	eeb0 1a66 	vmov.f32	s2, s13
 81021b6:	eef0 0a47 	vmov.f32	s1, s14
 81021ba:	eeb0 0a67 	vmov.f32	s0, s15
 81021be:	4844      	ldr	r0, [pc, #272]	@ (81022d0 <main+0x2f0>)
 81021c0:	f7ff f8a3 	bl	810130a <tune_PID>
	//tune_PID(&pid_roll, 0.00015,0.00012/400,0.00012*225*10*3*5);
	//*************************

	//*************************
	//PID coppia manubrio
	init_PID(&pid_steering_torque, dt, V_MAX, -V_MAX);
 81021c4:	eddf 7a38 	vldr	s15, [pc, #224]	@ 81022a8 <main+0x2c8>
 81021c8:	eebb 1a02 	vmov.f32	s2, #178	@ 0xc1900000 -18.0
 81021cc:	eef3 0a02 	vmov.f32	s1, #50	@ 0x41900000  18.0
 81021d0:	eeb0 0a67 	vmov.f32	s0, s15
 81021d4:	4843      	ldr	r0, [pc, #268]	@ (81022e4 <main+0x304>)
 81021d6:	f7ff f877 	bl	81012c8 <init_PID>

	//*************************
	//nuovi tentativi
	//tune_PID(&pid_steering_torque,30000,5000,10000); // migliore con roll_pid_attuale
//grafico1
	tune_PID(&pid_steering_torque,42000,0,0); // migliore con roll_pid_attuale
 81021da:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 81022b0 <main+0x2d0>
 81021de:	eddf 0a34 	vldr	s1, [pc, #208]	@ 81022b0 <main+0x2d0>
 81021e2:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 81022e8 <main+0x308>
 81021e6:	483f      	ldr	r0, [pc, #252]	@ (81022e4 <main+0x304>)
 81021e8:	f7ff f88f 	bl	810130a <tune_PID>



	//*************************
	//Filtro di Kalman per corrente
	arm_mat_init_f32(&u, control_dim, 1, (float32_t*) &u_data); // Input di controllo
 81021ec:	4b3f      	ldr	r3, [pc, #252]	@ (81022ec <main+0x30c>)
 81021ee:	2201      	movs	r2, #1
 81021f0:	2101      	movs	r1, #1
 81021f2:	483f      	ldr	r0, [pc, #252]	@ (81022f0 <main+0x310>)
 81021f4:	f00f f8ae 	bl	8111354 <arm_mat_init_f32>
	arm_mat_init_f32(&z, measure_dim, 1, (float32_t*) &z_data);  // Misurazione
 81021f8:	4b3e      	ldr	r3, [pc, #248]	@ (81022f4 <main+0x314>)
 81021fa:	2201      	movs	r2, #1
 81021fc:	2102      	movs	r1, #2
 81021fe:	483e      	ldr	r0, [pc, #248]	@ (81022f8 <main+0x318>)
 8102200:	f00f f8a8 	bl	8111354 <arm_mat_init_f32>
	kalman_filter_init(&kf, &A_data, &B_data, &H_data, &Q_data, &R_data,
 8102204:	4b3d      	ldr	r3, [pc, #244]	@ (81022fc <main+0x31c>)
 8102206:	9304      	str	r3, [sp, #16]
 8102208:	4b3d      	ldr	r3, [pc, #244]	@ (8102300 <main+0x320>)
 810220a:	9303      	str	r3, [sp, #12]
 810220c:	4b3d      	ldr	r3, [pc, #244]	@ (8102304 <main+0x324>)
 810220e:	9302      	str	r3, [sp, #8]
 8102210:	4b3d      	ldr	r3, [pc, #244]	@ (8102308 <main+0x328>)
 8102212:	9301      	str	r3, [sp, #4]
 8102214:	4b3d      	ldr	r3, [pc, #244]	@ (810230c <main+0x32c>)
 8102216:	9300      	str	r3, [sp, #0]
 8102218:	4b3d      	ldr	r3, [pc, #244]	@ (8102310 <main+0x330>)
 810221a:	4a3e      	ldr	r2, [pc, #248]	@ (8102314 <main+0x334>)
 810221c:	493e      	ldr	r1, [pc, #248]	@ (8102318 <main+0x338>)
 810221e:	483f      	ldr	r0, [pc, #252]	@ (810231c <main+0x33c>)
 8102220:	f7ff fbb4 	bl	810198c <kalman_filter_init>
			&P_data, &K_data, &x_data);
	u_data[0] = (-dt * lambda * b / (1 - dt * lambda));
 8102224:	eddf 7a20 	vldr	s15, [pc, #128]	@ 81022a8 <main+0x2c8>
 8102228:	eef1 7a67 	vneg.f32	s15, s15
 810222c:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8102320 <main+0x340>
 8102230:	ee27 7a87 	vmul.f32	s14, s15, s14
 8102234:	4b3b      	ldr	r3, [pc, #236]	@ (8102324 <main+0x344>)
 8102236:	edd3 7a00 	vldr	s15, [r3]
 810223a:	ee67 6a27 	vmul.f32	s13, s14, s15
 810223e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 81022a8 <main+0x2c8>
 8102242:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8102320 <main+0x340>
 8102246:	ee67 7a27 	vmul.f32	s15, s14, s15
 810224a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810224e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8102252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102256:	4b25      	ldr	r3, [pc, #148]	@ (81022ec <main+0x30c>)
 8102258:	edc3 7a00 	vstr	s15, [r3]
	//u_data[0]=b;
	//*************************

	//SETTO D PER LE MISURE DELL'ADC
	for(int op = 0; op<20; op++)
 810225c:	2300      	movs	r3, #0
 810225e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8102262:	e09f      	b.n	81023a4 <main+0x3c4>
 8102264:	58024400 	.word	0x58024400
 8102268:	e000ed00 	.word	0xe000ed00
 810226c:	58026400 	.word	0x58026400
 8102270:	1000d3b4 	.word	0x1000d3b4
 8102274:	10000090 	.word	0x10000090
 8102278:	1000d3a8 	.word	0x1000d3a8
 810227c:	10000394 	.word	0x10000394
 8102280:	10000348 	.word	0x10000348
 8102284:	100003e0 	.word	0x100003e0
 8102288:	1000042c 	.word	0x1000042c
 810228c:	10000510 	.word	0x10000510
 8102290:	1000055c 	.word	0x1000055c
 8102294:	10000478 	.word	0x10000478
 8102298:	1000d2d4 	.word	0x1000d2d4
 810229c:	100005a8 	.word	0x100005a8
 81022a0:	100002f4 	.word	0x100002f4
 81022a4:	08116c18 	.word	0x08116c18
 81022a8:	3c23d70a 	.word	0x3c23d70a
 81022ac:	1000cf4c 	.word	0x1000cf4c
 81022b0:	00000000 	.word	0x00000000
 81022b4:	42200000 	.word	0x42200000
 81022b8:	c2340000 	.word	0xc2340000
 81022bc:	42340000 	.word	0x42340000
 81022c0:	1000cf6c 	.word	0x1000cf6c
 81022c4:	3df5c28f 	.word	0x3df5c28f
 81022c8:	3f8ccccd 	.word	0x3f8ccccd
 81022cc:	3cbfb15b 	.word	0x3cbfb15b
 81022d0:	1000cf8c 	.word	0x1000cf8c
 81022d4:	1000cfd8 	.word	0x1000cfd8
 81022d8:	39c49ba6 	.word	0x39c49ba6
 81022dc:	1000cfdc 	.word	0x1000cfdc
 81022e0:	1000cfe0 	.word	0x1000cfe0
 81022e4:	1000cfac 	.word	0x1000cfac
 81022e8:	47241000 	.word	0x47241000
 81022ec:	1000d390 	.word	0x1000d390
 81022f0:	1000d380 	.word	0x1000d380
 81022f4:	1000d394 	.word	0x1000d394
 81022f8:	1000d388 	.word	0x1000d388
 81022fc:	1000d378 	.word	0x1000d378
 8102300:	10000080 	.word	0x10000080
 8102304:	10000070 	.word	0x10000070
 8102308:	10000060 	.word	0x10000060
 810230c:	10000050 	.word	0x10000050
 8102310:	10000040 	.word	0x10000040
 8102314:	10000038 	.word	0x10000038
 8102318:	10000028 	.word	0x10000028
 810231c:	1000d338 	.word	0x1000d338
 8102320:	c96c3680 	.word	0xc96c3680
 8102324:	10000024 	.word	0x10000024
	{
		HAL_ADC_Start(&hadc1);
 8102328:	48bb      	ldr	r0, [pc, #748]	@ (8102618 <main+0x638>)
 810232a:	f003 f903 	bl	8105534 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, timeout);
 810232e:	4bbb      	ldr	r3, [pc, #748]	@ (810261c <main+0x63c>)
 8102330:	681b      	ldr	r3, [r3, #0]
 8102332:	4619      	mov	r1, r3
 8102334:	48b8      	ldr	r0, [pc, #736]	@ (8102618 <main+0x638>)
 8102336:	f003 f9fb 	bl	8105730 <HAL_ADC_PollForConversion>
		CountValue = HAL_ADC_GetValue(&hadc1);
 810233a:	48b7      	ldr	r0, [pc, #732]	@ (8102618 <main+0x638>)
 810233c:	f003 faec 	bl	8105918 <HAL_ADC_GetValue>
 8102340:	ee07 0a90 	vmov	s15, r0
 8102344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102348:	4bb5      	ldr	r3, [pc, #724]	@ (8102620 <main+0x640>)
 810234a:	edc3 7a00 	vstr	s15, [r3]
		volt_D[op] = ((float) CountValue) * Vref / (resolution);
 810234e:	4bb4      	ldr	r3, [pc, #720]	@ (8102620 <main+0x640>)
 8102350:	ed93 7a00 	vldr	s14, [r3]
 8102354:	4bb3      	ldr	r3, [pc, #716]	@ (8102624 <main+0x644>)
 8102356:	edd3 7a00 	vldr	s15, [r3]
 810235a:	ee67 6a27 	vmul.f32	s13, s14, s15
 810235e:	4bb2      	ldr	r3, [pc, #712]	@ (8102628 <main+0x648>)
 8102360:	ed93 7a00 	vldr	s14, [r3]
 8102364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102368:	4ab0      	ldr	r2, [pc, #704]	@ (810262c <main+0x64c>)
 810236a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 810236e:	009b      	lsls	r3, r3, #2
 8102370:	4413      	add	r3, r2
 8102372:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Stop(&hadc1);
 8102376:	48a8      	ldr	r0, [pc, #672]	@ (8102618 <main+0x638>)
 8102378:	f003 f9a6 	bl	81056c8 <HAL_ADC_Stop>
		sommaVolt +=volt_D[op];
 810237c:	4aab      	ldr	r2, [pc, #684]	@ (810262c <main+0x64c>)
 810237e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8102382:	009b      	lsls	r3, r3, #2
 8102384:	4413      	add	r3, r2
 8102386:	ed93 7a00 	vldr	s14, [r3]
 810238a:	4ba9      	ldr	r3, [pc, #676]	@ (8102630 <main+0x650>)
 810238c:	edd3 7a00 	vldr	s15, [r3]
 8102390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102394:	4ba6      	ldr	r3, [pc, #664]	@ (8102630 <main+0x650>)
 8102396:	edc3 7a00 	vstr	s15, [r3]
	for(int op = 0; op<20; op++)
 810239a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 810239e:	3301      	adds	r3, #1
 81023a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 81023a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 81023a8:	2b13      	cmp	r3, #19
 81023aa:	ddbd      	ble.n	8102328 <main+0x348>
	}



	//prendo 4 misurazione e faccio la media
	D = 1.68 - sommaVolt/20;
 81023ac:	4ba0      	ldr	r3, [pc, #640]	@ (8102630 <main+0x650>)
 81023ae:	edd3 7a00 	vldr	s15, [r3]
 81023b2:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 81023b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 81023ba:	ee16 0a90 	vmov	r0, s13
 81023be:	f7fe f94b 	bl	8100658 <__aeabi_f2d>
 81023c2:	4602      	mov	r2, r0
 81023c4:	460b      	mov	r3, r1
 81023c6:	a190      	add	r1, pc, #576	@ (adr r1, 8102608 <main+0x628>)
 81023c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 81023cc:	f7fd ffe4 	bl	8100398 <__aeabi_dsub>
 81023d0:	4602      	mov	r2, r0
 81023d2:	460b      	mov	r3, r1
 81023d4:	4610      	mov	r0, r2
 81023d6:	4619      	mov	r1, r3
 81023d8:	f7fe fc8e 	bl	8100cf8 <__aeabi_d2f>
 81023dc:	4603      	mov	r3, r0
 81023de:	4a95      	ldr	r2, [pc, #596]	@ (8102634 <main+0x654>)
 81023e0:	6013      	str	r3, [r2, #0]
	sommaVolt=0;
 81023e2:	4b93      	ldr	r3, [pc, #588]	@ (8102630 <main+0x650>)
 81023e4:	f04f 0200 	mov.w	r2, #0
 81023e8:	601a      	str	r2, [r3, #0]

    /* USER CODE BEGIN 3 */


		//printf("Inizio \r\n");
		if (flag_Tc == 1) {
 81023ea:	4b93      	ldr	r3, [pc, #588]	@ (8102638 <main+0x658>)
 81023ec:	edd3 7a00 	vldr	s15, [r3]
 81023f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81023f4:	eef4 7a47 	vcmp.f32	s15, s14
 81023f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81023fc:	f040 86ac 	bne.w	8103158 <main+0x1178>
			flag_Tc = 0;
 8102400:	4b8d      	ldr	r3, [pc, #564]	@ (8102638 <main+0x658>)
 8102402:	f04f 0200 	mov.w	r2, #0
 8102406:	601a      	str	r2, [r3, #0]
			//printf("1: %.3f\r\n", tempo_1ms);
			if ((tasto_premuto == 1) && (tasto_appena_premuto == 1)) {
 8102408:	4b8c      	ldr	r3, [pc, #560]	@ (810263c <main+0x65c>)
 810240a:	681b      	ldr	r3, [r3, #0]
 810240c:	2b01      	cmp	r3, #1
 810240e:	d113      	bne.n	8102438 <main+0x458>
 8102410:	4b8b      	ldr	r3, [pc, #556]	@ (8102640 <main+0x660>)
 8102412:	681b      	ldr	r3, [r3, #0]
 8102414:	2b01      	cmp	r3, #1
 8102416:	d10f      	bne.n	8102438 <main+0x458>
				tempo_iniziale = n_ref * dt;
 8102418:	4b8a      	ldr	r3, [pc, #552]	@ (8102644 <main+0x664>)
 810241a:	681b      	ldr	r3, [r3, #0]
 810241c:	ee07 3a90 	vmov	s15, r3
 8102420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102424:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8102648 <main+0x668>
 8102428:	ee67 7a87 	vmul.f32	s15, s15, s14
 810242c:	4b87      	ldr	r3, [pc, #540]	@ (810264c <main+0x66c>)
 810242e:	edc3 7a00 	vstr	s15, [r3]
				tasto_appena_premuto = 2;
 8102432:	4b83      	ldr	r3, [pc, #524]	@ (8102640 <main+0x660>)
 8102434:	2202      	movs	r2, #2
 8102436:	601a      	str	r2, [r3, #0]
			}

			if ((tasto_premuto == 1) && (tasto_appena_premuto == 2)) {
 8102438:	4b80      	ldr	r3, [pc, #512]	@ (810263c <main+0x65c>)
 810243a:	681b      	ldr	r3, [r3, #0]
 810243c:	2b01      	cmp	r3, #1
 810243e:	d146      	bne.n	81024ce <main+0x4ee>
 8102440:	4b7f      	ldr	r3, [pc, #508]	@ (8102640 <main+0x660>)
 8102442:	681b      	ldr	r3, [r3, #0]
 8102444:	2b02      	cmp	r3, #2
 8102446:	d142      	bne.n	81024ce <main+0x4ee>
				tempo_attuale = n_ref * dt;
 8102448:	4b7e      	ldr	r3, [pc, #504]	@ (8102644 <main+0x664>)
 810244a:	681b      	ldr	r3, [r3, #0]
 810244c:	ee07 3a90 	vmov	s15, r3
 8102450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102454:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8102648 <main+0x668>
 8102458:	ee67 7a87 	vmul.f32	s15, s15, s14
 810245c:	4b7c      	ldr	r3, [pc, #496]	@ (8102650 <main+0x670>)
 810245e:	edc3 7a00 	vstr	s15, [r3]
				if (tempo_attuale - tempo_iniziale >= 3) {
 8102462:	4b7b      	ldr	r3, [pc, #492]	@ (8102650 <main+0x670>)
 8102464:	ed93 7a00 	vldr	s14, [r3]
 8102468:	4b78      	ldr	r3, [pc, #480]	@ (810264c <main+0x66c>)
 810246a:	edd3 7a00 	vldr	s15, [r3]
 810246e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8102472:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8102476:	eef4 7ac7 	vcmpe.f32	s15, s14
 810247a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810247e:	db26      	blt.n	81024ce <main+0x4ee>
					sys_started++;
 8102480:	4b74      	ldr	r3, [pc, #464]	@ (8102654 <main+0x674>)
 8102482:	681b      	ldr	r3, [r3, #0]
 8102484:	3301      	adds	r3, #1
 8102486:	4a73      	ldr	r2, [pc, #460]	@ (8102654 <main+0x674>)
 8102488:	6013      	str	r3, [r2, #0]

					if (sys_started == 1) {
 810248a:	4b72      	ldr	r3, [pc, #456]	@ (8102654 <main+0x674>)
 810248c:	681b      	ldr	r3, [r3, #0]
 810248e:	2b01      	cmp	r3, #1
 8102490:	d105      	bne.n	810249e <main+0x4be>
						stadio = 0;
 8102492:	4b71      	ldr	r3, [pc, #452]	@ (8102658 <main+0x678>)
 8102494:	2200      	movs	r2, #0
 8102496:	601a      	str	r2, [r3, #0]
						n_ref = 0;
 8102498:	4b6a      	ldr	r3, [pc, #424]	@ (8102644 <main+0x664>)
 810249a:	2200      	movs	r2, #0
 810249c:	601a      	str	r2, [r3, #0]

					}
					if (sys_started == 2) {
 810249e:	4b6d      	ldr	r3, [pc, #436]	@ (8102654 <main+0x674>)
 81024a0:	681b      	ldr	r3, [r3, #0]
 81024a2:	2b02      	cmp	r3, #2
 81024a4:	d109      	bne.n	81024ba <main+0x4da>
						stadio = 0;
 81024a6:	4b6c      	ldr	r3, [pc, #432]	@ (8102658 <main+0x678>)
 81024a8:	2200      	movs	r2, #0
 81024aa:	601a      	str	r2, [r3, #0]
						n_ref = 0;
 81024ac:	4b65      	ldr	r3, [pc, #404]	@ (8102644 <main+0x664>)
 81024ae:	2200      	movs	r2, #0
 81024b0:	601a      	str	r2, [r3, #0]
						pid_roll.e_old=0;
 81024b2:	4b6a      	ldr	r3, [pc, #424]	@ (810265c <main+0x67c>)
 81024b4:	f04f 0200 	mov.w	r2, #0
 81024b8:	619a      	str	r2, [r3, #24]
					}
					if (sys_started == 3)
 81024ba:	4b66      	ldr	r3, [pc, #408]	@ (8102654 <main+0x674>)
 81024bc:	681b      	ldr	r3, [r3, #0]
 81024be:	2b03      	cmp	r3, #3
 81024c0:	d102      	bne.n	81024c8 <main+0x4e8>
						sys_started = 0;
 81024c2:	4b64      	ldr	r3, [pc, #400]	@ (8102654 <main+0x674>)
 81024c4:	2200      	movs	r2, #0
 81024c6:	601a      	str	r2, [r3, #0]
					tasto_premuto = 0;
 81024c8:	4b5c      	ldr	r3, [pc, #368]	@ (810263c <main+0x65c>)
 81024ca:	2200      	movs	r2, #0
 81024cc:	601a      	str	r2, [r3, #0]
			//##             BNO055			     ##
			//#####################################
			//*******************************
			//printf("2: %.3f\r\n", tempo_1ms);

			eul = bno055_getVectorEuler();
 81024ce:	f7ff f971 	bl	81017b4 <bno055_getVectorEuler>
 81024d2:	eeb0 4a40 	vmov.f32	s8, s0
 81024d6:	eef0 4a60 	vmov.f32	s9, s1
 81024da:	eeb0 5a41 	vmov.f32	s10, s2
 81024de:	eef0 5a61 	vmov.f32	s11, s3
 81024e2:	eeb0 6a42 	vmov.f32	s12, s4
 81024e6:	eef0 6a62 	vmov.f32	s13, s5
 81024ea:	eeb0 7a43 	vmov.f32	s14, s6
 81024ee:	eef0 7a63 	vmov.f32	s15, s7
 81024f2:	ed87 4b1e 	vstr	d4, [r7, #120]	@ 0x78
 81024f6:	ed87 5b20 	vstr	d5, [r7, #128]	@ 0x80
 81024fa:	ed87 6b22 	vstr	d6, [r7, #136]	@ 0x88
 81024fe:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
			//stampa angoli eulero
			//printf("Yaw: %+2.2f Roll: %+2.2f Pitch: %+2.2f \r\n", eul.x, eul.y, eul.z);

			roll = -eul.y + 1.6 - 5 + 2; //ottengo angolo di eulero (il sensore è leggermente inclinato rispetto al piano in cui giace la bicicletta)
 8102502:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8102506:	a142      	add	r1, pc, #264	@ (adr r1, 8102610 <main+0x630>)
 8102508:	e9d1 0100 	ldrd	r0, r1, [r1]
 810250c:	f7fd ff44 	bl	8100398 <__aeabi_dsub>
 8102510:	4602      	mov	r2, r0
 8102512:	460b      	mov	r3, r1
 8102514:	4610      	mov	r0, r2
 8102516:	4619      	mov	r1, r3
 8102518:	f04f 0200 	mov.w	r2, #0
 810251c:	4b50      	ldr	r3, [pc, #320]	@ (8102660 <main+0x680>)
 810251e:	f7fd ff3b 	bl	8100398 <__aeabi_dsub>
 8102522:	4602      	mov	r2, r0
 8102524:	460b      	mov	r3, r1
 8102526:	4610      	mov	r0, r2
 8102528:	4619      	mov	r1, r3
 810252a:	f04f 0200 	mov.w	r2, #0
 810252e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8102532:	f7fd ff33 	bl	810039c <__adddf3>
 8102536:	4602      	mov	r2, r0
 8102538:	460b      	mov	r3, r1
 810253a:	4610      	mov	r0, r2
 810253c:	4619      	mov	r1, r3
 810253e:	f7fe fbdb 	bl	8100cf8 <__aeabi_d2f>
 8102542:	4603      	mov	r3, r0
 8102544:	4a47      	ldr	r2, [pc, #284]	@ (8102664 <main+0x684>)
 8102546:	6013      	str	r3, [r2, #0]
			yaw = eul.x; //ottengo angolo di yaw
 8102548:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 810254c:	4610      	mov	r0, r2
 810254e:	4619      	mov	r1, r3
 8102550:	f7fe fbd2 	bl	8100cf8 <__aeabi_d2f>
 8102554:	4603      	mov	r3, r0
 8102556:	4a44      	ldr	r2, [pc, #272]	@ (8102668 <main+0x688>)
 8102558:	6013      	str	r3, [r2, #0]

			yaw_rate = (yaw - old_yaw) / dt;
 810255a:	4b43      	ldr	r3, [pc, #268]	@ (8102668 <main+0x688>)
 810255c:	ed93 7a00 	vldr	s14, [r3]
 8102560:	4b42      	ldr	r3, [pc, #264]	@ (810266c <main+0x68c>)
 8102562:	edd3 7a00 	vldr	s15, [r3]
 8102566:	ee37 7a67 	vsub.f32	s14, s14, s15
 810256a:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8102648 <main+0x668>
 810256e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102572:	4b3f      	ldr	r3, [pc, #252]	@ (8102670 <main+0x690>)
 8102574:	edc3 7a00 	vstr	s15, [r3]
			old_yaw = yaw;
 8102578:	4b3b      	ldr	r3, [pc, #236]	@ (8102668 <main+0x688>)
 810257a:	681b      	ldr	r3, [r3, #0]
 810257c:	4a3b      	ldr	r2, [pc, #236]	@ (810266c <main+0x68c>)
 810257e:	6013      	str	r3, [r2, #0]
			//printf("3: %.3f\r\n", tempo_1ms);

			//controllo angolo di roll, se è troppo grande ferma tutto
			if (roll >= roll_limite || roll <= -1 * roll_limite) {
 8102580:	4b38      	ldr	r3, [pc, #224]	@ (8102664 <main+0x684>)
 8102582:	edd3 7a00 	vldr	s15, [r3]
 8102586:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 810258a:	eef4 7ac7 	vcmpe.f32	s15, s14
 810258e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102592:	da09      	bge.n	81025a8 <main+0x5c8>
 8102594:	4b33      	ldr	r3, [pc, #204]	@ (8102664 <main+0x684>)
 8102596:	edd3 7a00 	vldr	s15, [r3]
 810259a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 810259e:	eef4 7ac7 	vcmpe.f32	s15, s14
 81025a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81025a6:	d802      	bhi.n	81025ae <main+0x5ce>
				sys_started = 0;
 81025a8:	4b2a      	ldr	r3, [pc, #168]	@ (8102654 <main+0x674>)
 81025aa:	2200      	movs	r2, #0
 81025ac:	601a      	str	r2, [r3, #0]
			//#####################################
			//##          RUOTA DIETRO		     ##
			//#####################################
			//*******************************
			//Ottengo velocita ruota dietro
			counts = (double) TIM4->CNT - (TIM4->ARR) / 2;
 81025ae:	4b31      	ldr	r3, [pc, #196]	@ (8102674 <main+0x694>)
 81025b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81025b2:	4618      	mov	r0, r3
 81025b4:	f7fe f82e 	bl	8100614 <__aeabi_ui2d>
 81025b8:	4604      	mov	r4, r0
 81025ba:	460d      	mov	r5, r1
 81025bc:	4b2d      	ldr	r3, [pc, #180]	@ (8102674 <main+0x694>)
 81025be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81025c0:	085b      	lsrs	r3, r3, #1
 81025c2:	4618      	mov	r0, r3
 81025c4:	f7fe f826 	bl	8100614 <__aeabi_ui2d>
 81025c8:	4602      	mov	r2, r0
 81025ca:	460b      	mov	r3, r1
 81025cc:	4620      	mov	r0, r4
 81025ce:	4629      	mov	r1, r5
 81025d0:	f7fd fee2 	bl	8100398 <__aeabi_dsub>
 81025d4:	4602      	mov	r2, r0
 81025d6:	460b      	mov	r3, r1
 81025d8:	4610      	mov	r0, r2
 81025da:	4619      	mov	r1, r3
 81025dc:	f7fe fb8c 	bl	8100cf8 <__aeabi_d2f>
 81025e0:	4603      	mov	r3, r0
 81025e2:	4a25      	ldr	r2, [pc, #148]	@ (8102678 <main+0x698>)
 81025e4:	6013      	str	r3, [r2, #0]
			TIM4->CNT = (TIM4->ARR) / 2;
 81025e6:	4b23      	ldr	r3, [pc, #140]	@ (8102674 <main+0x694>)
 81025e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81025ea:	4a22      	ldr	r2, [pc, #136]	@ (8102674 <main+0x694>)
 81025ec:	085b      	lsrs	r3, r3, #1
 81025ee:	6253      	str	r3, [r2, #36]	@ 0x24
			//velocita angolare
			//encoder ha risoluzione cpr 500, non 66
			delta_angle_degree = (counts * 360)
 81025f0:	4b21      	ldr	r3, [pc, #132]	@ (8102678 <main+0x698>)
 81025f2:	edd3 7a00 	vldr	s15, [r3]
 81025f6:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 810267c <main+0x69c>
 81025fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 81025fe:	ee17 0a90 	vmov	r0, s15
 8102602:	f7fe f829 	bl	8100658 <__aeabi_f2d>
 8102606:	e03b      	b.n	8102680 <main+0x6a0>
 8102608:	ae147ae1 	.word	0xae147ae1
 810260c:	3ffae147 	.word	0x3ffae147
 8102610:	9999999a 	.word	0x9999999a
 8102614:	3ff99999 	.word	0x3ff99999
 8102618:	10000290 	.word	0x10000290
 810261c:	10000018 	.word	0x10000018
 8102620:	1000d298 	.word	0x1000d298
 8102624:	10000020 	.word	0x10000020
 8102628:	1000001c 	.word	0x1000001c
 810262c:	1000d024 	.word	0x1000d024
 8102630:	1000d074 	.word	0x1000d074
 8102634:	1000d3a4 	.word	0x1000d3a4
 8102638:	1000cfcc 	.word	0x1000cfcc
 810263c:	1000d080 	.word	0x1000d080
 8102640:	1000d084 	.word	0x1000d084
 8102644:	1000d2cc 	.word	0x1000d2cc
 8102648:	3c23d70a 	.word	0x3c23d70a
 810264c:	1000d07c 	.word	0x1000d07c
 8102650:	1000d078 	.word	0x1000d078
 8102654:	1000d018 	.word	0x1000d018
 8102658:	1000d3a0 	.word	0x1000d3a0
 810265c:	1000cf8c 	.word	0x1000cf8c
 8102660:	40140000 	.word	0x40140000
 8102664:	1000d2a4 	.word	0x1000d2a4
 8102668:	1000d2a8 	.word	0x1000d2a8
 810266c:	1000d2ac 	.word	0x1000d2ac
 8102670:	1000d2a0 	.word	0x1000d2a0
 8102674:	40000800 	.word	0x40000800
 8102678:	1000cfe4 	.word	0x1000cfe4
 810267c:	43b40000 	.word	0x43b40000
					/ (ppr * gear_ratio * encoder_resolution); //del motore(davanti) 18 denti dietro (raggio)3.8cm ,28 denti davanti (raggio) 5.7cm
 8102680:	a3cd      	add	r3, pc, #820	@ (adr r3, 81029b8 <main+0x9d8>)
 8102682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102686:	f7fe f969 	bl	810095c <__aeabi_ddiv>
 810268a:	4602      	mov	r2, r0
 810268c:	460b      	mov	r3, r1
 810268e:	4610      	mov	r0, r2
 8102690:	4619      	mov	r1, r3
 8102692:	f7fe fb31 	bl	8100cf8 <__aeabi_d2f>
 8102696:	4603      	mov	r3, r0
			delta_angle_degree = (counts * 360)
 8102698:	4ac9      	ldr	r2, [pc, #804]	@ (81029c0 <main+0x9e0>)
 810269a:	6013      	str	r3, [r2, #0]
			speed_degsec = -1 * delta_angle_degree / dt;
 810269c:	4bc8      	ldr	r3, [pc, #800]	@ (81029c0 <main+0x9e0>)
 810269e:	edd3 7a00 	vldr	s15, [r3]
 81026a2:	eeb1 7a67 	vneg.f32	s14, s15
 81026a6:	eddf 6ac7 	vldr	s13, [pc, #796]	@ 81029c4 <main+0x9e4>
 81026aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81026ae:	4bc6      	ldr	r3, [pc, #792]	@ (81029c8 <main+0x9e8>)
 81026b0:	edc3 7a00 	vstr	s15, [r3]

			angle_degree += delta_angle_degree;
 81026b4:	4bc5      	ldr	r3, [pc, #788]	@ (81029cc <main+0x9ec>)
 81026b6:	ed93 7a00 	vldr	s14, [r3]
 81026ba:	4bc1      	ldr	r3, [pc, #772]	@ (81029c0 <main+0x9e0>)
 81026bc:	edd3 7a00 	vldr	s15, [r3]
 81026c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 81026c4:	4bc1      	ldr	r3, [pc, #772]	@ (81029cc <main+0x9ec>)
 81026c6:	edc3 7a00 	vstr	s15, [r3]
			//filtro media mobile
			speed_degsec_filtrata = filtro_media_mobile(velocitavecchia,
 81026ca:	4bbf      	ldr	r3, [pc, #764]	@ (81029c8 <main+0x9e8>)
 81026cc:	edd3 7a00 	vldr	s15, [r3]
 81026d0:	221e      	movs	r2, #30
 81026d2:	eeb0 0a67 	vmov.f32	s0, s15
 81026d6:	49be      	ldr	r1, [pc, #760]	@ (81029d0 <main+0x9f0>)
 81026d8:	48be      	ldr	r0, [pc, #760]	@ (81029d4 <main+0x9f4>)
 81026da:	f7ff fc27 	bl	8101f2c <filtro_media_mobile>
 81026de:	eef0 7a40 	vmov.f32	s15, s0
 81026e2:	4bbd      	ldr	r3, [pc, #756]	@ (81029d8 <main+0x9f8>)
 81026e4:	edc3 7a00 	vstr	s15, [r3]
					velocitanuova, speed_degsec, 30);
			//rapporto ruota posteriore
			speed_degsec_back = speed_degsec_filtrata
					* raggio_deragliatore_anteriore
 81026e8:	4bbb      	ldr	r3, [pc, #748]	@ (81029d8 <main+0x9f8>)
 81026ea:	681b      	ldr	r3, [r3, #0]
 81026ec:	4618      	mov	r0, r3
 81026ee:	f7fd ffb3 	bl	8100658 <__aeabi_f2d>
 81026f2:	a3a5      	add	r3, pc, #660	@ (adr r3, 8102988 <main+0x9a8>)
 81026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026f8:	f7fe f806 	bl	8100708 <__aeabi_dmul>
 81026fc:	4602      	mov	r2, r0
 81026fe:	460b      	mov	r3, r1
 8102700:	4610      	mov	r0, r2
 8102702:	4619      	mov	r1, r3
					/ raggio_deragliatore_posteriore; //rapporto velcoita angolare tra ruota dietro e avanti???
 8102704:	a3a2      	add	r3, pc, #648	@ (adr r3, 8102990 <main+0x9b0>)
 8102706:	e9d3 2300 	ldrd	r2, r3, [r3]
 810270a:	f7fe f927 	bl	810095c <__aeabi_ddiv>
 810270e:	4602      	mov	r2, r0
 8102710:	460b      	mov	r3, r1
 8102712:	4610      	mov	r0, r2
 8102714:	4619      	mov	r1, r3
 8102716:	f7fe faef 	bl	8100cf8 <__aeabi_d2f>
 810271a:	4603      	mov	r3, r0
			speed_degsec_back = speed_degsec_filtrata
 810271c:	4aaf      	ldr	r2, [pc, #700]	@ (81029dc <main+0x9fc>)
 810271e:	6013      	str	r3, [r2, #0]

			//velocita ruota dietro
			speed_metsec = speed_degsec_back / 180 * 3.14 * radius;
 8102720:	4bae      	ldr	r3, [pc, #696]	@ (81029dc <main+0x9fc>)
 8102722:	edd3 7a00 	vldr	s15, [r3]
 8102726:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 81029e0 <main+0xa00>
 810272a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 810272e:	ee16 0a90 	vmov	r0, s13
 8102732:	f7fd ff91 	bl	8100658 <__aeabi_f2d>
 8102736:	a398      	add	r3, pc, #608	@ (adr r3, 8102998 <main+0x9b8>)
 8102738:	e9d3 2300 	ldrd	r2, r3, [r3]
 810273c:	f7fd ffe4 	bl	8100708 <__aeabi_dmul>
 8102740:	4602      	mov	r2, r0
 8102742:	460b      	mov	r3, r1
 8102744:	4610      	mov	r0, r2
 8102746:	4619      	mov	r1, r3
 8102748:	a395      	add	r3, pc, #596	@ (adr r3, 81029a0 <main+0x9c0>)
 810274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810274e:	f7fd ffdb 	bl	8100708 <__aeabi_dmul>
 8102752:	4602      	mov	r2, r0
 8102754:	460b      	mov	r3, r1
 8102756:	4610      	mov	r0, r2
 8102758:	4619      	mov	r1, r3
 810275a:	f7fe facd 	bl	8100cf8 <__aeabi_d2f>
 810275e:	4603      	mov	r3, r0
 8102760:	4aa0      	ldr	r2, [pc, #640]	@ (81029e4 <main+0xa04>)
 8102762:	6013      	str	r3, [r2, #0]

			//angolo dietro
			angle_back_wheel += speed_degsec_back * dt;
 8102764:	4b9d      	ldr	r3, [pc, #628]	@ (81029dc <main+0x9fc>)
 8102766:	edd3 7a00 	vldr	s15, [r3]
 810276a:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 81029c4 <main+0x9e4>
 810276e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8102772:	4b9d      	ldr	r3, [pc, #628]	@ (81029e8 <main+0xa08>)
 8102774:	edd3 7a00 	vldr	s15, [r3]
 8102778:	ee77 7a27 	vadd.f32	s15, s14, s15
 810277c:	4b9a      	ldr	r3, [pc, #616]	@ (81029e8 <main+0xa08>)
 810277e:	edc3 7a00 	vstr	s15, [r3]
			//*******************************

			//******************************+
			//PID ruota dietro
			desired_speed_metsec = getSpeed(desired_speed_metsec); //funzione che crea un riferimento a rampa e poi costante per la velocita della ruota dietro
 8102782:	4b9a      	ldr	r3, [pc, #616]	@ (81029ec <main+0xa0c>)
 8102784:	edd3 7a00 	vldr	s15, [r3]
 8102788:	eeb0 0a67 	vmov.f32	s0, s15
 810278c:	f7ff fb9e 	bl	8101ecc <getSpeed>
 8102790:	eef0 7a40 	vmov.f32	s15, s0
 8102794:	4b95      	ldr	r3, [pc, #596]	@ (81029ec <main+0xa0c>)
 8102796:	edc3 7a00 	vstr	s15, [r3]
			u_back_wheel = PID_controller(&pid_speed, speed_metsec,	desired_speed_metsec);
 810279a:	4b92      	ldr	r3, [pc, #584]	@ (81029e4 <main+0xa04>)
 810279c:	edd3 7a00 	vldr	s15, [r3]
 81027a0:	4b92      	ldr	r3, [pc, #584]	@ (81029ec <main+0xa0c>)
 81027a2:	ed93 7a00 	vldr	s14, [r3]
 81027a6:	eef0 0a47 	vmov.f32	s1, s14
 81027aa:	eeb0 0a67 	vmov.f32	s0, s15
 81027ae:	4890      	ldr	r0, [pc, #576]	@ (81029f0 <main+0xa10>)
 81027b0:	f7fe fdc4 	bl	810133c <PID_controller>
 81027b4:	eef0 7a40 	vmov.f32	s15, s0
 81027b8:	4b8e      	ldr	r3, [pc, #568]	@ (81029f4 <main+0xa14>)
 81027ba:	edc3 7a00 	vstr	s15, [r3]
			u_back_wheel = 0;
 81027be:	4b8d      	ldr	r3, [pc, #564]	@ (81029f4 <main+0xa14>)
 81027c0:	f04f 0200 	mov.w	r2, #0
 81027c4:	601a      	str	r2, [r3, #0]
			//******************************


			if (sys_started == 0) {
 81027c6:	4b8c      	ldr	r3, [pc, #560]	@ (81029f8 <main+0xa18>)
 81027c8:	681b      	ldr	r3, [r3, #0]
 81027ca:	2b00      	cmp	r3, #0
 81027cc:	d107      	bne.n	81027de <main+0x7fe>
				u_front_wheel = 0;
 81027ce:	4b8b      	ldr	r3, [pc, #556]	@ (81029fc <main+0xa1c>)
 81027d0:	f04f 0200 	mov.w	r2, #0
 81027d4:	601a      	str	r2, [r3, #0]
				u_back_wheel = 0;
 81027d6:	4b87      	ldr	r3, [pc, #540]	@ (81029f4 <main+0xa14>)
 81027d8:	f04f 0200 	mov.w	r2, #0
 81027dc:	601a      	str	r2, [r3, #0]

			}
			if (sys_started == 1) {
 81027de:	4b86      	ldr	r3, [pc, #536]	@ (81029f8 <main+0xa18>)
 81027e0:	681b      	ldr	r3, [r3, #0]
 81027e2:	2b01      	cmp	r3, #1
 81027e4:	d108      	bne.n	81027f8 <main+0x818>

				//setto l'angolo del manubrio a 0
				angle_steer = 0;
 81027e6:	4b86      	ldr	r3, [pc, #536]	@ (8102a00 <main+0xa20>)
 81027e8:	f04f 0200 	mov.w	r2, #0
 81027ec:	601a      	str	r2, [r3, #0]



				sys_started++;
 81027ee:	4b82      	ldr	r3, [pc, #520]	@ (81029f8 <main+0xa18>)
 81027f0:	681b      	ldr	r3, [r3, #0]
 81027f2:	3301      	adds	r3, #1
 81027f4:	4a80      	ldr	r2, [pc, #512]	@ (81029f8 <main+0xa18>)
 81027f6:	6013      	str	r3, [r2, #0]
			}

			//settare duty e pwm driver
			duty_back_wheel = Voltage2Duty(u_back_wheel);
 81027f8:	4b7e      	ldr	r3, [pc, #504]	@ (81029f4 <main+0xa14>)
 81027fa:	edd3 7a00 	vldr	s15, [r3]
 81027fe:	eeb0 0a67 	vmov.f32	s0, s15
 8102802:	f7fe fc8f 	bl	8101124 <Voltage2Duty>
 8102806:	eef0 7a40 	vmov.f32	s15, s0
 810280a:	4b7e      	ldr	r3, [pc, #504]	@ (8102a04 <main+0xa24>)
 810280c:	edc3 7a00 	vstr	s15, [r3]
			direction_back_wheel = Ref2Direction(u_back_wheel);
 8102810:	4b78      	ldr	r3, [pc, #480]	@ (81029f4 <main+0xa14>)
 8102812:	edd3 7a00 	vldr	s15, [r3]
 8102816:	eeb0 0a67 	vmov.f32	s0, s15
 810281a:	f7fe fcc5 	bl	81011a8 <Ref2Direction>
 810281e:	4603      	mov	r3, r0
 8102820:	461a      	mov	r2, r3
 8102822:	4b79      	ldr	r3, [pc, #484]	@ (8102a08 <main+0xa28>)
 8102824:	601a      	str	r2, [r3, #0]
			set_PWM_and_dir_back_wheel(duty_back_wheel,
 8102826:	4b77      	ldr	r3, [pc, #476]	@ (8102a04 <main+0xa24>)
 8102828:	edd3 7a00 	vldr	s15, [r3]
 810282c:	4b76      	ldr	r3, [pc, #472]	@ (8102a08 <main+0xa28>)
 810282e:	681b      	ldr	r3, [r3, #0]
 8102830:	b2db      	uxtb	r3, r3
 8102832:	4618      	mov	r0, r3
 8102834:	eeb0 0a67 	vmov.f32	s0, s15
 8102838:	f7fe fcce 	bl	81011d8 <set_PWM_and_dir_back_wheel>

			//#####################################
			//##          PID YAW RATE		     ##
			//#####################################
			//******************************
			desired_yaw_rate = 0;
 810283c:	4b73      	ldr	r3, [pc, #460]	@ (8102a0c <main+0xa2c>)
 810283e:	f04f 0200 	mov.w	r2, #0
 8102842:	601a      	str	r2, [r3, #0]
			desired_roll = PID_controller(&pid_yaw_rate, yaw_rate,
 8102844:	4b72      	ldr	r3, [pc, #456]	@ (8102a10 <main+0xa30>)
 8102846:	edd3 7a00 	vldr	s15, [r3]
 810284a:	4b70      	ldr	r3, [pc, #448]	@ (8102a0c <main+0xa2c>)
 810284c:	ed93 7a00 	vldr	s14, [r3]
 8102850:	eef0 0a47 	vmov.f32	s1, s14
 8102854:	eeb0 0a67 	vmov.f32	s0, s15
 8102858:	486e      	ldr	r0, [pc, #440]	@ (8102a14 <main+0xa34>)
 810285a:	f7fe fd6f 	bl	810133c <PID_controller>
 810285e:	eef0 7a40 	vmov.f32	s15, s0
 8102862:	4b6d      	ldr	r3, [pc, #436]	@ (8102a18 <main+0xa38>)
 8102864:	edc3 7a00 	vstr	s15, [r3]
			//#####################################

			//******************************
			//prima di usare l'encoder

			desired_roll = 0; //l'angolo di equilibrio sono 2 gradi
 8102868:	4b6b      	ldr	r3, [pc, #428]	@ (8102a18 <main+0xa38>)
 810286a:	f04f 0200 	mov.w	r2, #0
 810286e:	601a      	str	r2, [r3, #0]
			if((int)trunc(tempo/5) % 2 == 0)
				desired_torque = 0.0015;

			else desired_torque = -0.0015;
*/
			periodi = 2;
 8102870:	4b6a      	ldr	r3, [pc, #424]	@ (8102a1c <main+0xa3c>)
 8102872:	2202      	movs	r2, #2
 8102874:	601a      	str	r2, [r3, #0]
			desired_torque = 0.003*sin(2*M_PI*tempo/periodi);
 8102876:	4b6a      	ldr	r3, [pc, #424]	@ (8102a20 <main+0xa40>)
 8102878:	681b      	ldr	r3, [r3, #0]
 810287a:	4618      	mov	r0, r3
 810287c:	f7fd feec 	bl	8100658 <__aeabi_f2d>
 8102880:	a349      	add	r3, pc, #292	@ (adr r3, 81029a8 <main+0x9c8>)
 8102882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102886:	f7fd ff3f 	bl	8100708 <__aeabi_dmul>
 810288a:	4602      	mov	r2, r0
 810288c:	460b      	mov	r3, r1
 810288e:	4614      	mov	r4, r2
 8102890:	461d      	mov	r5, r3
 8102892:	4b62      	ldr	r3, [pc, #392]	@ (8102a1c <main+0xa3c>)
 8102894:	681b      	ldr	r3, [r3, #0]
 8102896:	4618      	mov	r0, r3
 8102898:	f7fd fecc 	bl	8100634 <__aeabi_i2d>
 810289c:	4602      	mov	r2, r0
 810289e:	460b      	mov	r3, r1
 81028a0:	4620      	mov	r0, r4
 81028a2:	4629      	mov	r1, r5
 81028a4:	f7fe f85a 	bl	810095c <__aeabi_ddiv>
 81028a8:	4602      	mov	r2, r0
 81028aa:	460b      	mov	r3, r1
 81028ac:	ec43 2b17 	vmov	d7, r2, r3
 81028b0:	eeb0 0a47 	vmov.f32	s0, s14
 81028b4:	eef0 0a67 	vmov.f32	s1, s15
 81028b8:	f013 f972 	bl	8115ba0 <sin>
 81028bc:	ec51 0b10 	vmov	r0, r1, d0
 81028c0:	a33b      	add	r3, pc, #236	@ (adr r3, 81029b0 <main+0x9d0>)
 81028c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028c6:	f7fd ff1f 	bl	8100708 <__aeabi_dmul>
 81028ca:	4602      	mov	r2, r0
 81028cc:	460b      	mov	r3, r1
 81028ce:	4610      	mov	r0, r2
 81028d0:	4619      	mov	r1, r3
 81028d2:	f7fe fa11 	bl	8100cf8 <__aeabi_d2f>
 81028d6:	4603      	mov	r3, r0
 81028d8:	4a52      	ldr	r2, [pc, #328]	@ (8102a24 <main+0xa44>)
 81028da:	6013      	str	r3, [r2, #0]

			//******************************

			//encoder per ruota anteriore
			//ottengo i counts dell'encoder
			counts_steer = (double) TIM8->CNT - (TIM8->ARR) / 2; //credo cosi hai sia i conteggi negativi che positivi
 81028dc:	4b52      	ldr	r3, [pc, #328]	@ (8102a28 <main+0xa48>)
 81028de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81028e0:	4618      	mov	r0, r3
 81028e2:	f7fd fe97 	bl	8100614 <__aeabi_ui2d>
 81028e6:	4604      	mov	r4, r0
 81028e8:	460d      	mov	r5, r1
 81028ea:	4b4f      	ldr	r3, [pc, #316]	@ (8102a28 <main+0xa48>)
 81028ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81028ee:	085b      	lsrs	r3, r3, #1
 81028f0:	4618      	mov	r0, r3
 81028f2:	f7fd fe8f 	bl	8100614 <__aeabi_ui2d>
 81028f6:	4602      	mov	r2, r0
 81028f8:	460b      	mov	r3, r1
 81028fa:	4620      	mov	r0, r4
 81028fc:	4629      	mov	r1, r5
 81028fe:	f7fd fd4b 	bl	8100398 <__aeabi_dsub>
 8102902:	4602      	mov	r2, r0
 8102904:	460b      	mov	r3, r1
 8102906:	4610      	mov	r0, r2
 8102908:	4619      	mov	r1, r3
 810290a:	f7fe f9f5 	bl	8100cf8 <__aeabi_d2f>
 810290e:	4603      	mov	r3, r0
 8102910:	4a46      	ldr	r2, [pc, #280]	@ (8102a2c <main+0xa4c>)
 8102912:	6013      	str	r3, [r2, #0]
			TIM8->CNT = (TIM8->ARR) / 2;
 8102914:	4b44      	ldr	r3, [pc, #272]	@ (8102a28 <main+0xa48>)
 8102916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102918:	4a43      	ldr	r2, [pc, #268]	@ (8102a28 <main+0xa48>)
 810291a:	085b      	lsrs	r3, r3, #1
 810291c:	6253      	str	r3, [r2, #36]	@ 0x24
			//calcolo l'angolo dello sterzo
			delta_angle_degree_steer = (counts_steer * 360)
 810291e:	4b43      	ldr	r3, [pc, #268]	@ (8102a2c <main+0xa4c>)
 8102920:	edd3 7a00 	vldr	s15, [r3]
 8102924:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8102a30 <main+0xa50>
 8102928:	ee67 7a87 	vmul.f32	s15, s15, s14
 810292c:	ee17 0a90 	vmov	r0, s15
 8102930:	f7fd fe92 	bl	8100658 <__aeabi_f2d>
					/ (ppr * gear_ratio * encoder_resolution);
 8102934:	a320      	add	r3, pc, #128	@ (adr r3, 81029b8 <main+0x9d8>)
 8102936:	e9d3 2300 	ldrd	r2, r3, [r3]
 810293a:	f7fe f80f 	bl	810095c <__aeabi_ddiv>
 810293e:	4602      	mov	r2, r0
 8102940:	460b      	mov	r3, r1
 8102942:	4610      	mov	r0, r2
 8102944:	4619      	mov	r1, r3
 8102946:	f7fe f9d7 	bl	8100cf8 <__aeabi_d2f>
 810294a:	4603      	mov	r3, r0
			delta_angle_degree_steer = (counts_steer * 360)
 810294c:	4a39      	ldr	r2, [pc, #228]	@ (8102a34 <main+0xa54>)
 810294e:	6013      	str	r3, [r2, #0]

			angle_steer = angle_steer + delta_angle_degree_steer; //angolo sterzo
 8102950:	4b2b      	ldr	r3, [pc, #172]	@ (8102a00 <main+0xa20>)
 8102952:	ed93 7a00 	vldr	s14, [r3]
 8102956:	4b37      	ldr	r3, [pc, #220]	@ (8102a34 <main+0xa54>)
 8102958:	edd3 7a00 	vldr	s15, [r3]
 810295c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102960:	4b27      	ldr	r3, [pc, #156]	@ (8102a00 <main+0xa20>)
 8102962:	edc3 7a00 	vstr	s15, [r3]
			speed_degsec_steer = delta_angle_degree_steer / dt; //velocita sterzo
 8102966:	4b33      	ldr	r3, [pc, #204]	@ (8102a34 <main+0xa54>)
 8102968:	ed93 7a00 	vldr	s14, [r3]
 810296c:	eddf 6a15 	vldr	s13, [pc, #84]	@ 81029c4 <main+0x9e4>
 8102970:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102974:	4b30      	ldr	r3, [pc, #192]	@ (8102a38 <main+0xa58>)
 8102976:	edc3 7a00 	vstr	s15, [r3]

			speed_degsec_steer_filtrata = filtro_media_mobile(speedsteernuovo,
 810297a:	4b2f      	ldr	r3, [pc, #188]	@ (8102a38 <main+0xa58>)
 810297c:	edd3 7a00 	vldr	s15, [r3]
 8102980:	221e      	movs	r2, #30
 8102982:	e05b      	b.n	8102a3c <main+0xa5c>
 8102984:	f3af 8000 	nop.w
 8102988:	9fbe76c9 	.word	0x9fbe76c9
 810298c:	3fad2f1a 	.word	0x3fad2f1a
 8102990:	6a7ef9db 	.word	0x6a7ef9db
 8102994:	3fa374bc 	.word	0x3fa374bc
 8102998:	51eb851f 	.word	0x51eb851f
 810299c:	40091eb8 	.word	0x40091eb8
 81029a0:	70a3d70a 	.word	0x70a3d70a
 81029a4:	3fc70a3d 	.word	0x3fc70a3d
 81029a8:	54442d18 	.word	0x54442d18
 81029ac:	401921fb 	.word	0x401921fb
 81029b0:	bc6a7efa 	.word	0xbc6a7efa
 81029b4:	3f689374 	.word	0x3f689374
 81029b8:	66666666 	.word	0x66666666
 81029bc:	40ff8146 	.word	0x40ff8146
 81029c0:	1000cff4 	.word	0x1000cff4
 81029c4:	3c23d70a 	.word	0x3c23d70a
 81029c8:	1000cffc 	.word	0x1000cffc
 81029cc:	1000cff8 	.word	0x1000cff8
 81029d0:	1000d200 	.word	0x1000d200
 81029d4:	1000d188 	.word	0x1000d188
 81029d8:	1000d278 	.word	0x1000d278
 81029dc:	1000d01c 	.word	0x1000d01c
 81029e0:	43340000 	.word	0x43340000
 81029e4:	1000d004 	.word	0x1000d004
 81029e8:	1000d020 	.word	0x1000d020
 81029ec:	1000d000 	.word	0x1000d000
 81029f0:	1000cf4c 	.word	0x1000cf4c
 81029f4:	1000d008 	.word	0x1000d008
 81029f8:	1000d018 	.word	0x1000d018
 81029fc:	1000d2b0 	.word	0x1000d2b0
 8102a00:	1000cff0 	.word	0x1000cff0
 8102a04:	1000d00c 	.word	0x1000d00c
 8102a08:	1000d010 	.word	0x1000d010
 8102a0c:	1000d280 	.word	0x1000d280
 8102a10:	1000d2a0 	.word	0x1000d2a0
 8102a14:	1000cf6c 	.word	0x1000cf6c
 8102a18:	1000d284 	.word	0x1000d284
 8102a1c:	1000d39c 	.word	0x1000d39c
 8102a20:	1000cf18 	.word	0x1000cf18
 8102a24:	1000d288 	.word	0x1000d288
 8102a28:	40010400 	.word	0x40010400
 8102a2c:	1000cfe8 	.word	0x1000cfe8
 8102a30:	43b40000 	.word	0x43b40000
 8102a34:	1000cfec 	.word	0x1000cfec
 8102a38:	1000d014 	.word	0x1000d014
 8102a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8102a40:	4933      	ldr	r1, [pc, #204]	@ (8102b10 <main+0xb30>)
 8102a42:	4834      	ldr	r0, [pc, #208]	@ (8102b14 <main+0xb34>)
 8102a44:	f7ff fa72 	bl	8101f2c <filtro_media_mobile>
 8102a48:	eef0 7a40 	vmov.f32	s15, s0
 8102a4c:	4b32      	ldr	r3, [pc, #200]	@ (8102b18 <main+0xb38>)
 8102a4e:	edc3 7a00 	vstr	s15, [r3]
					speedsteervecchio, speed_degsec_steer, 30);
			angolo_sterzo += speed_degsec_steer_filtrata * dt;
 8102a52:	4b31      	ldr	r3, [pc, #196]	@ (8102b18 <main+0xb38>)
 8102a54:	edd3 7a00 	vldr	s15, [r3]
 8102a58:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8102b1c <main+0xb3c>
 8102a5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8102a60:	4b2f      	ldr	r3, [pc, #188]	@ (8102b20 <main+0xb40>)
 8102a62:	edd3 7a00 	vldr	s15, [r3]
 8102a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8102b20 <main+0xb40>)
 8102a6c:	edc3 7a00 	vstr	s15, [r3]
			//##         LOW-PASS FILTER	   	   ##
			//#####################################
			//******************************
			//filtro passa basso 1/s+1 discretizzato con Matlab

			desired_filtered_torque = 0.009516 * old_desired_filtered_torque
 8102a70:	4b2c      	ldr	r3, [pc, #176]	@ (8102b24 <main+0xb44>)
 8102a72:	681b      	ldr	r3, [r3, #0]
 8102a74:	4618      	mov	r0, r3
 8102a76:	f7fd fdef 	bl	8100658 <__aeabi_f2d>
 8102a7a:	a321      	add	r3, pc, #132	@ (adr r3, 8102b00 <main+0xb20>)
 8102a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a80:	f7fd fe42 	bl	8100708 <__aeabi_dmul>
 8102a84:	4602      	mov	r2, r0
 8102a86:	460b      	mov	r3, r1
 8102a88:	4614      	mov	r4, r2
 8102a8a:	461d      	mov	r5, r3
					+ 0.9048 * old_desired_torque; //questo è quello del prof
 8102a8c:	4b26      	ldr	r3, [pc, #152]	@ (8102b28 <main+0xb48>)
 8102a8e:	681b      	ldr	r3, [r3, #0]
 8102a90:	4618      	mov	r0, r3
 8102a92:	f7fd fde1 	bl	8100658 <__aeabi_f2d>
 8102a96:	a31c      	add	r3, pc, #112	@ (adr r3, 8102b08 <main+0xb28>)
 8102a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a9c:	f7fd fe34 	bl	8100708 <__aeabi_dmul>
 8102aa0:	4602      	mov	r2, r0
 8102aa2:	460b      	mov	r3, r1
 8102aa4:	4620      	mov	r0, r4
 8102aa6:	4629      	mov	r1, r5
 8102aa8:	f7fd fc78 	bl	810039c <__adddf3>
 8102aac:	4602      	mov	r2, r0
 8102aae:	460b      	mov	r3, r1
 8102ab0:	4610      	mov	r0, r2
 8102ab2:	4619      	mov	r1, r3
 8102ab4:	f7fe f920 	bl	8100cf8 <__aeabi_d2f>
 8102ab8:	4603      	mov	r3, r0
			desired_filtered_torque = 0.009516 * old_desired_filtered_torque
 8102aba:	4a1c      	ldr	r2, [pc, #112]	@ (8102b2c <main+0xb4c>)
 8102abc:	6013      	str	r3, [r2, #0]
			old_desired_torque = desired_torque;
 8102abe:	4b1c      	ldr	r3, [pc, #112]	@ (8102b30 <main+0xb50>)
 8102ac0:	681b      	ldr	r3, [r3, #0]
 8102ac2:	4a19      	ldr	r2, [pc, #100]	@ (8102b28 <main+0xb48>)
 8102ac4:	6013      	str	r3, [r2, #0]
			old_desired_filtered_torque = desired_filtered_torque;
 8102ac6:	4b19      	ldr	r3, [pc, #100]	@ (8102b2c <main+0xb4c>)
 8102ac8:	681b      	ldr	r3, [r3, #0]
 8102aca:	4a16      	ldr	r2, [pc, #88]	@ (8102b24 <main+0xb44>)
 8102acc:	6013      	str	r3, [r2, #0]


			desired_filtered_torque = desired_torque;
 8102ace:	4b18      	ldr	r3, [pc, #96]	@ (8102b30 <main+0xb50>)
 8102ad0:	681b      	ldr	r3, [r3, #0]
 8102ad2:	4a16      	ldr	r2, [pc, #88]	@ (8102b2c <main+0xb4c>)
 8102ad4:	6013      	str	r3, [r2, #0]
			//#####################################
			//##            STERZO			     ##
			//#####################################
			//******************************

			if(iterazione!= 0)	VoltSens = VoltSomma1ms/iterazione;
 8102ad6:	4b17      	ldr	r3, [pc, #92]	@ (8102b34 <main+0xb54>)
 8102ad8:	edd3 7a00 	vldr	s15, [r3]
 8102adc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8102ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102ae4:	d02c      	beq.n	8102b40 <main+0xb60>
 8102ae6:	4b14      	ldr	r3, [pc, #80]	@ (8102b38 <main+0xb58>)
 8102ae8:	edd3 6a00 	vldr	s13, [r3]
 8102aec:	4b11      	ldr	r3, [pc, #68]	@ (8102b34 <main+0xb54>)
 8102aee:	ed93 7a00 	vldr	s14, [r3]
 8102af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102af6:	4b11      	ldr	r3, [pc, #68]	@ (8102b3c <main+0xb5c>)
 8102af8:	edc3 7a00 	vstr	s15, [r3]
 8102afc:	e060      	b.n	8102bc0 <main+0xbe0>
 8102afe:	bf00      	nop
 8102b00:	e64f54d2 	.word	0xe64f54d2
 8102b04:	3f837d1f 	.word	0x3f837d1f
 8102b08:	212d7732 	.word	0x212d7732
 8102b0c:	3fecf41f 	.word	0x3fecf41f
 8102b10:	1000d108 	.word	0x1000d108
 8102b14:	1000d090 	.word	0x1000d090
 8102b18:	1000d08c 	.word	0x1000d08c
 8102b1c:	3c23d70a 	.word	0x3c23d70a
 8102b20:	1000d180 	.word	0x1000d180
 8102b24:	1000d290 	.word	0x1000d290
 8102b28:	1000d294 	.word	0x1000d294
 8102b2c:	1000d28c 	.word	0x1000d28c
 8102b30:	1000d288 	.word	0x1000d288
 8102b34:	1000d2c4 	.word	0x1000d2c4
 8102b38:	1000d2c8 	.word	0x1000d2c8
 8102b3c:	1000d2d0 	.word	0x1000d2d0
			else{
				//Calcolo valore corrente
				HAL_ADC_Start(&hadc1);
 8102b40:	48a9      	ldr	r0, [pc, #676]	@ (8102de8 <main+0xe08>)
 8102b42:	f002 fcf7 	bl	8105534 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, timeout);
 8102b46:	4ba9      	ldr	r3, [pc, #676]	@ (8102dec <main+0xe0c>)
 8102b48:	681b      	ldr	r3, [r3, #0]
 8102b4a:	4619      	mov	r1, r3
 8102b4c:	48a6      	ldr	r0, [pc, #664]	@ (8102de8 <main+0xe08>)
 8102b4e:	f002 fdef 	bl	8105730 <HAL_ADC_PollForConversion>
				CountValue = HAL_ADC_GetValue(&hadc1);
 8102b52:	48a5      	ldr	r0, [pc, #660]	@ (8102de8 <main+0xe08>)
 8102b54:	f002 fee0 	bl	8105918 <HAL_ADC_GetValue>
 8102b58:	ee07 0a90 	vmov	s15, r0
 8102b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b60:	4ba3      	ldr	r3, [pc, #652]	@ (8102df0 <main+0xe10>)
 8102b62:	edc3 7a00 	vstr	s15, [r3]
				volt = ((float) CountValue) * Vref / (resolution);
 8102b66:	4ba2      	ldr	r3, [pc, #648]	@ (8102df0 <main+0xe10>)
 8102b68:	ed93 7a00 	vldr	s14, [r3]
 8102b6c:	4ba1      	ldr	r3, [pc, #644]	@ (8102df4 <main+0xe14>)
 8102b6e:	edd3 7a00 	vldr	s15, [r3]
 8102b72:	ee67 6a27 	vmul.f32	s13, s14, s15
 8102b76:	4ba0      	ldr	r3, [pc, #640]	@ (8102df8 <main+0xe18>)
 8102b78:	ed93 7a00 	vldr	s14, [r3]
 8102b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102b80:	4b9e      	ldr	r3, [pc, #632]	@ (8102dfc <main+0xe1c>)
 8102b82:	edc3 7a00 	vstr	s15, [r3]
				HAL_ADC_Stop(&hadc1);
 8102b86:	4898      	ldr	r0, [pc, #608]	@ (8102de8 <main+0xe08>)
 8102b88:	f002 fd9e 	bl	81056c8 <HAL_ADC_Stop>
				VoltSens = (volt + D) * 1.5059;
 8102b8c:	4b9b      	ldr	r3, [pc, #620]	@ (8102dfc <main+0xe1c>)
 8102b8e:	ed93 7a00 	vldr	s14, [r3]
 8102b92:	4b9b      	ldr	r3, [pc, #620]	@ (8102e00 <main+0xe20>)
 8102b94:	edd3 7a00 	vldr	s15, [r3]
 8102b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102b9c:	ee17 0a90 	vmov	r0, s15
 8102ba0:	f7fd fd5a 	bl	8100658 <__aeabi_f2d>
 8102ba4:	a38a      	add	r3, pc, #552	@ (adr r3, 8102dd0 <main+0xdf0>)
 8102ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102baa:	f7fd fdad 	bl	8100708 <__aeabi_dmul>
 8102bae:	4602      	mov	r2, r0
 8102bb0:	460b      	mov	r3, r1
 8102bb2:	4610      	mov	r0, r2
 8102bb4:	4619      	mov	r1, r3
 8102bb6:	f7fe f89f 	bl	8100cf8 <__aeabi_d2f>
 8102bba:	4603      	mov	r3, r0
 8102bbc:	4a91      	ldr	r2, [pc, #580]	@ (8102e04 <main+0xe24>)
 8102bbe:	6013      	str	r3, [r2, #0]
			}


			iterazione=0;
 8102bc0:	4b91      	ldr	r3, [pc, #580]	@ (8102e08 <main+0xe28>)
 8102bc2:	f04f 0200 	mov.w	r2, #0
 8102bc6:	601a      	str	r2, [r3, #0]
			VoltSomma1ms=0;
 8102bc8:	4b90      	ldr	r3, [pc, #576]	@ (8102e0c <main+0xe2c>)
 8102bca:	f04f 0200 	mov.w	r2, #0
 8102bce:	601a      	str	r2, [r3, #0]

			corrente_non_filtrata = voltToAmpere(VoltSens, a, b);
 8102bd0:	4b8c      	ldr	r3, [pc, #560]	@ (8102e04 <main+0xe24>)
 8102bd2:	edd3 7a00 	vldr	s15, [r3]
 8102bd6:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 8102e10 <main+0xe30>
 8102bda:	4b8e      	ldr	r3, [pc, #568]	@ (8102e14 <main+0xe34>)
 8102bdc:	ed93 7a00 	vldr	s14, [r3]
 8102be0:	eeb0 1a47 	vmov.f32	s2, s14
 8102be4:	eef0 0a66 	vmov.f32	s1, s13
 8102be8:	eeb0 0a67 	vmov.f32	s0, s15
 8102bec:	f7ff f94f 	bl	8101e8e <voltToAmpere>
 8102bf0:	eef0 7a40 	vmov.f32	s15, s0
 8102bf4:	4b88      	ldr	r3, [pc, #544]	@ (8102e18 <main+0xe38>)
 8102bf6:	edc3 7a00 	vstr	s15, [r3]
			 */


			//Filtro di Kalman per corrente
			//setta i valori di input e di misura per il filtro di kalman
			z_data[0] = VoltSens; //misura del voltaggio del sensore di corrente
 8102bfa:	4b82      	ldr	r3, [pc, #520]	@ (8102e04 <main+0xe24>)
 8102bfc:	681b      	ldr	r3, [r3, #0]
 8102bfe:	4a87      	ldr	r2, [pc, #540]	@ (8102e1c <main+0xe3c>)
 8102c00:	6013      	str	r3, [r2, #0]
			z_data[1] = corrente_non_filtrata; //per non usare la misura I aggiuntiva, volendo si puo usare la formula V=IR del motore, adesso vedo come metterla
 8102c02:	4b85      	ldr	r3, [pc, #532]	@ (8102e18 <main+0xe38>)
 8102c04:	681b      	ldr	r3, [r3, #0]
 8102c06:	4a85      	ldr	r2, [pc, #532]	@ (8102e1c <main+0xe3c>)
 8102c08:	6053      	str	r3, [r2, #4]
			kalman_predict(&kf, &u);
 8102c0a:	4985      	ldr	r1, [pc, #532]	@ (8102e20 <main+0xe40>)
 8102c0c:	4885      	ldr	r0, [pc, #532]	@ (8102e24 <main+0xe44>)
 8102c0e:	f7fe ff07 	bl	8101a20 <kalman_predict>
			kalman_update(&kf, &z);
 8102c12:	4985      	ldr	r1, [pc, #532]	@ (8102e28 <main+0xe48>)
 8102c14:	4883      	ldr	r0, [pc, #524]	@ (8102e24 <main+0xe44>)
 8102c16:	f7fe ff71 	bl	8101afc <kalman_update>
			filtered_current_kalman = x_data[1];
 8102c1a:	4b84      	ldr	r3, [pc, #528]	@ (8102e2c <main+0xe4c>)
 8102c1c:	685b      	ldr	r3, [r3, #4]
 8102c1e:	4a84      	ldr	r2, [pc, #528]	@ (8102e30 <main+0xe50>)
 8102c20:	6013      	str	r3, [r2, #0]

			//filtered_current_kalman = filtro_media_mobile(corrente_vecchia, corrente_nuova, corrente_non_filtrata, 170);
			//calcolo coppia
			torque = filtered_current_kalman * K;
 8102c22:	4b83      	ldr	r3, [pc, #524]	@ (8102e30 <main+0xe50>)
 8102c24:	edd3 7a00 	vldr	s15, [r3]
 8102c28:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8102e34 <main+0xe54>
 8102c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102c30:	4b81      	ldr	r3, [pc, #516]	@ (8102e38 <main+0xe58>)
 8102c32:	edc3 7a00 	vstr	s15, [r3]
		*/




			u_front_wheel = PID_controller(&pid_steering_torque, torque,
 8102c36:	4b80      	ldr	r3, [pc, #512]	@ (8102e38 <main+0xe58>)
 8102c38:	edd3 7a00 	vldr	s15, [r3]
 8102c3c:	4b7f      	ldr	r3, [pc, #508]	@ (8102e3c <main+0xe5c>)
 8102c3e:	ed93 7a00 	vldr	s14, [r3]
 8102c42:	eef0 0a47 	vmov.f32	s1, s14
 8102c46:	eeb0 0a67 	vmov.f32	s0, s15
 8102c4a:	487d      	ldr	r0, [pc, #500]	@ (8102e40 <main+0xe60>)
 8102c4c:	f7fe fb76 	bl	810133c <PID_controller>
 8102c50:	eef0 7a40 	vmov.f32	s15, s0
 8102c54:	4b7b      	ldr	r3, [pc, #492]	@ (8102e44 <main+0xe64>)
 8102c56:	edc3 7a00 	vstr	s15, [r3]
			 }
			 */



			if (sys_started <= 1) {
 8102c5a:	4b7b      	ldr	r3, [pc, #492]	@ (8102e48 <main+0xe68>)
 8102c5c:	681b      	ldr	r3, [r3, #0]
 8102c5e:	2b01      	cmp	r3, #1
 8102c60:	dc0f      	bgt.n	8102c82 <main+0xca2>
				stadio = 1000; //utile se hai l'algoritmo per il segnale trapezoidale
 8102c62:	4b7a      	ldr	r3, [pc, #488]	@ (8102e4c <main+0xe6c>)
 8102c64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8102c68:	601a      	str	r2, [r3, #0]
				desired_speed_metsec = 0;
 8102c6a:	4b79      	ldr	r3, [pc, #484]	@ (8102e50 <main+0xe70>)
 8102c6c:	f04f 0200 	mov.w	r2, #0
 8102c70:	601a      	str	r2, [r3, #0]
				u_back_wheel = 0;
 8102c72:	4b78      	ldr	r3, [pc, #480]	@ (8102e54 <main+0xe74>)
 8102c74:	f04f 0200 	mov.w	r2, #0
 8102c78:	601a      	str	r2, [r3, #0]
				u_front_wheel = 0;
 8102c7a:	4b72      	ldr	r3, [pc, #456]	@ (8102e44 <main+0xe64>)
 8102c7c:	f04f 0200 	mov.w	r2, #0
 8102c80:	601a      	str	r2, [r3, #0]

			}


			u_f_p = u_front_wheel;
 8102c82:	4b70      	ldr	r3, [pc, #448]	@ (8102e44 <main+0xe64>)
 8102c84:	681b      	ldr	r3, [r3, #0]
 8102c86:	4a74      	ldr	r2, [pc, #464]	@ (8102e58 <main+0xe78>)
 8102c88:	6013      	str	r3, [r2, #0]

			duty_front_wheel = Voltage2Duty(u_front_wheel);
 8102c8a:	4b6e      	ldr	r3, [pc, #440]	@ (8102e44 <main+0xe64>)
 8102c8c:	edd3 7a00 	vldr	s15, [r3]
 8102c90:	eeb0 0a67 	vmov.f32	s0, s15
 8102c94:	f7fe fa46 	bl	8101124 <Voltage2Duty>
 8102c98:	eef0 7a40 	vmov.f32	s15, s0
 8102c9c:	4b6f      	ldr	r3, [pc, #444]	@ (8102e5c <main+0xe7c>)
 8102c9e:	edc3 7a00 	vstr	s15, [r3]
			dir_front_wheel = Ref2Direction(u_front_wheel);
 8102ca2:	4b68      	ldr	r3, [pc, #416]	@ (8102e44 <main+0xe64>)
 8102ca4:	edd3 7a00 	vldr	s15, [r3]
 8102ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8102cac:	f7fe fa7c 	bl	81011a8 <Ref2Direction>
 8102cb0:	4603      	mov	r3, r0
 8102cb2:	ee07 3a90 	vmov	s15, r3
 8102cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102cba:	4b69      	ldr	r3, [pc, #420]	@ (8102e60 <main+0xe80>)
 8102cbc:	edc3 7a00 	vstr	s15, [r3]
			set_PWM_and_dir_front_wheel(duty_front_wheel, dir_front_wheel);
 8102cc0:	4b66      	ldr	r3, [pc, #408]	@ (8102e5c <main+0xe7c>)
 8102cc2:	ed93 7a00 	vldr	s14, [r3]
 8102cc6:	4b66      	ldr	r3, [pc, #408]	@ (8102e60 <main+0xe80>)
 8102cc8:	edd3 7a00 	vldr	s15, [r3]
 8102ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102cd0:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
 8102cd4:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8102cd8:	b2db      	uxtb	r3, r3
 8102cda:	4618      	mov	r0, r3
 8102cdc:	eeb0 0a47 	vmov.f32	s0, s14
 8102ce0:	f7fe fabc 	bl	810125c <set_PWM_and_dir_front_wheel>
			 */
			//printf("\r\n");
			//******************************
			//per dati via bluetooth
			//raccolgo dati da mandare per 3 secondi
			dati.velocita = 100;
 8102ce4:	4b5f      	ldr	r3, [pc, #380]	@ (8102e64 <main+0xe84>)
 8102ce6:	2264      	movs	r2, #100	@ 0x64
 8102ce8:	601a      	str	r2, [r3, #0]
			dati.accelerazione = 9.82;
 8102cea:	495e      	ldr	r1, [pc, #376]	@ (8102e64 <main+0xe84>)
 8102cec:	a33a      	add	r3, pc, #232	@ (adr r3, 8102dd8 <main+0xdf8>)
 8102cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cf2:	e9c1 2302 	strd	r2, r3, [r1, #8]
			dati.tempo = 23.02;
 8102cf6:	495b      	ldr	r1, [pc, #364]	@ (8102e64 <main+0xe84>)
 8102cf8:	a339      	add	r3, pc, #228	@ (adr r3, 8102de0 <main+0xe00>)
 8102cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cfe:	e9c1 2304 	strd	r2, r3, [r1, #16]

			//angle_steer  = 100*sin(2*3.14/5*tempo);

			datibici.angle_steer = angle_steer;
 8102d02:	4b59      	ldr	r3, [pc, #356]	@ (8102e68 <main+0xe88>)
 8102d04:	681b      	ldr	r3, [r3, #0]
 8102d06:	4a59      	ldr	r2, [pc, #356]	@ (8102e6c <main+0xe8c>)
 8102d08:	6013      	str	r3, [r2, #0]
			datibici.desired_filtered_torque = desired_filtered_torque;
 8102d0a:	4b4c      	ldr	r3, [pc, #304]	@ (8102e3c <main+0xe5c>)
 8102d0c:	681b      	ldr	r3, [r3, #0]
 8102d0e:	4a57      	ldr	r2, [pc, #348]	@ (8102e6c <main+0xe8c>)
 8102d10:	6053      	str	r3, [r2, #4]
			datibici.desired_speed_metsec = desired_speed_metsec;
 8102d12:	4b4f      	ldr	r3, [pc, #316]	@ (8102e50 <main+0xe70>)
 8102d14:	681b      	ldr	r3, [r3, #0]
 8102d16:	4a55      	ldr	r2, [pc, #340]	@ (8102e6c <main+0xe8c>)
 8102d18:	6153      	str	r3, [r2, #20]
			datibici.roll = roll;
 8102d1a:	4b55      	ldr	r3, [pc, #340]	@ (8102e70 <main+0xe90>)
 8102d1c:	681b      	ldr	r3, [r3, #0]
 8102d1e:	4a53      	ldr	r2, [pc, #332]	@ (8102e6c <main+0xe8c>)
 8102d20:	6113      	str	r3, [r2, #16]
			datibici.speed_metsec = speed_metsec;
 8102d22:	4b54      	ldr	r3, [pc, #336]	@ (8102e74 <main+0xe94>)
 8102d24:	681b      	ldr	r3, [r3, #0]
 8102d26:	4a51      	ldr	r2, [pc, #324]	@ (8102e6c <main+0xe8c>)
 8102d28:	6193      	str	r3, [r2, #24]
			datibici.torque = torque;
 8102d2a:	4b43      	ldr	r3, [pc, #268]	@ (8102e38 <main+0xe58>)
 8102d2c:	681b      	ldr	r3, [r3, #0]
 8102d2e:	4a4f      	ldr	r2, [pc, #316]	@ (8102e6c <main+0xe8c>)
 8102d30:	6093      	str	r3, [r2, #8]
			datibici.u_back_wheel = u_back_wheel;
 8102d32:	4b48      	ldr	r3, [pc, #288]	@ (8102e54 <main+0xe74>)
 8102d34:	681b      	ldr	r3, [r3, #0]
 8102d36:	4a4d      	ldr	r2, [pc, #308]	@ (8102e6c <main+0xe8c>)
 8102d38:	61d3      	str	r3, [r2, #28]
			datibici.u_front_wheel = u_front_wheel;
 8102d3a:	4b42      	ldr	r3, [pc, #264]	@ (8102e44 <main+0xe64>)
 8102d3c:	681b      	ldr	r3, [r3, #0]
 8102d3e:	4a4b      	ldr	r2, [pc, #300]	@ (8102e6c <main+0xe8c>)
 8102d40:	60d3      	str	r3, [r2, #12]
			datibici.tempo = tempo_1ms;
 8102d42:	4b4d      	ldr	r3, [pc, #308]	@ (8102e78 <main+0xe98>)
 8102d44:	681b      	ldr	r3, [r3, #0]
 8102d46:	4a49      	ldr	r2, [pc, #292]	@ (8102e6c <main+0xe8c>)
 8102d48:	6213      	str	r3, [r2, #32]
			datibici.corrente_non_filtrata = corrente_non_filtrata;
 8102d4a:	4b33      	ldr	r3, [pc, #204]	@ (8102e18 <main+0xe38>)
 8102d4c:	681b      	ldr	r3, [r3, #0]
 8102d4e:	4a47      	ldr	r2, [pc, #284]	@ (8102e6c <main+0xe8c>)
 8102d50:	6253      	str	r3, [r2, #36]	@ 0x24
			datibici.corrente_filtrata = filtered_current_kalman;
 8102d52:	4b37      	ldr	r3, [pc, #220]	@ (8102e30 <main+0xe50>)
 8102d54:	681b      	ldr	r3, [r3, #0]
 8102d56:	4a45      	ldr	r2, [pc, #276]	@ (8102e6c <main+0xe8c>)
 8102d58:	6293      	str	r3, [r2, #40]	@ 0x28
			datibici.desired_torque = desired_torque;
 8102d5a:	4b48      	ldr	r3, [pc, #288]	@ (8102e7c <main+0xe9c>)
 8102d5c:	681b      	ldr	r3, [r3, #0]
 8102d5e:	4a43      	ldr	r2, [pc, #268]	@ (8102e6c <main+0xe8c>)
 8102d60:	62d3      	str	r3, [r2, #44]	@ 0x2c
			datibici.Volt_Adc = volt;
 8102d62:	4b26      	ldr	r3, [pc, #152]	@ (8102dfc <main+0xe1c>)
 8102d64:	681b      	ldr	r3, [r3, #0]
 8102d66:	4a41      	ldr	r2, [pc, #260]	@ (8102e6c <main+0xe8c>)
 8102d68:	6353      	str	r3, [r2, #52]	@ 0x34
			datibici.Volt_sens = VoltSens;
 8102d6a:	4b26      	ldr	r3, [pc, #152]	@ (8102e04 <main+0xe24>)
 8102d6c:	681b      	ldr	r3, [r3, #0]
 8102d6e:	4a3f      	ldr	r2, [pc, #252]	@ (8102e6c <main+0xe8c>)
 8102d70:	6393      	str	r3, [r2, #56]	@ 0x38
			datibici.costanteD = D;
 8102d72:	4b23      	ldr	r3, [pc, #140]	@ (8102e00 <main+0xe20>)
 8102d74:	681b      	ldr	r3, [r3, #0]
 8102d76:	4a3d      	ldr	r2, [pc, #244]	@ (8102e6c <main+0xe8c>)
 8102d78:	6313      	str	r3, [r2, #48]	@ 0x30

			datibici.Kp=roll_kp;
 8102d7a:	4b41      	ldr	r3, [pc, #260]	@ (8102e80 <main+0xea0>)
 8102d7c:	681b      	ldr	r3, [r3, #0]
 8102d7e:	4a3b      	ldr	r2, [pc, #236]	@ (8102e6c <main+0xe8c>)
 8102d80:	63d3      	str	r3, [r2, #60]	@ 0x3c
			datibici.Ki=roll_ki;
 8102d82:	4b40      	ldr	r3, [pc, #256]	@ (8102e84 <main+0xea4>)
 8102d84:	681b      	ldr	r3, [r3, #0]
 8102d86:	4a39      	ldr	r2, [pc, #228]	@ (8102e6c <main+0xe8c>)
 8102d88:	6413      	str	r3, [r2, #64]	@ 0x40
			datibici.Kd=roll_kd;
 8102d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8102e88 <main+0xea8>)
 8102d8c:	681b      	ldr	r3, [r3, #0]
 8102d8e:	4a37      	ldr	r2, [pc, #220]	@ (8102e6c <main+0xe8c>)
 8102d90:	6453      	str	r3, [r2, #68]	@ 0x44

			//printf("%f\r\n", tempo_1ms);
			/*stampa dati ogni 2 centesimi di secondi
			*/

			if(contatore_messaggi >= 20) //cioe ogni 20 millisecondi
 8102d92:	4b3e      	ldr	r3, [pc, #248]	@ (8102e8c <main+0xeac>)
 8102d94:	681b      	ldr	r3, [r3, #0]
 8102d96:	2b13      	cmp	r3, #19
 8102d98:	f340 8126 	ble.w	8102fe8 <main+0x1008>
			{
				contatore_messaggi = 0;
 8102d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8102e8c <main+0xeac>)
 8102d9e:	2200      	movs	r2, #0
 8102da0:	601a      	str	r2, [r3, #0]
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
									 datibici.angle_steer,
 8102da2:	4b32      	ldr	r3, [pc, #200]	@ (8102e6c <main+0xe8c>)
 8102da4:	681b      	ldr	r3, [r3, #0]
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102da6:	4618      	mov	r0, r3
 8102da8:	f7fd fc56 	bl	8100658 <__aeabi_f2d>
 8102dac:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
							 datibici.desired_filtered_torque,
 8102db0:	4b2e      	ldr	r3, [pc, #184]	@ (8102e6c <main+0xe8c>)
 8102db2:	685b      	ldr	r3, [r3, #4]
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102db4:	4618      	mov	r0, r3
 8102db6:	f7fd fc4f 	bl	8100658 <__aeabi_f2d>
 8102dba:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
							 datibici.desired_speed_metsec,
 8102dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8102e6c <main+0xe8c>)
 8102dc0:	695b      	ldr	r3, [r3, #20]
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102dc2:	4618      	mov	r0, r3
 8102dc4:	f7fd fc48 	bl	8100658 <__aeabi_f2d>
 8102dc8:	e062      	b.n	8102e90 <main+0xeb0>
 8102dca:	bf00      	nop
 8102dcc:	f3af 8000 	nop.w
 8102dd0:	9930be0e 	.word	0x9930be0e
 8102dd4:	3ff8182a 	.word	0x3ff8182a
 8102dd8:	0a3d70a4 	.word	0x0a3d70a4
 8102ddc:	4023a3d7 	.word	0x4023a3d7
 8102de0:	b851eb85 	.word	0xb851eb85
 8102de4:	4037051e 	.word	0x4037051e
 8102de8:	10000290 	.word	0x10000290
 8102dec:	10000018 	.word	0x10000018
 8102df0:	1000d298 	.word	0x1000d298
 8102df4:	10000020 	.word	0x10000020
 8102df8:	1000001c 	.word	0x1000001c
 8102dfc:	1000d29c 	.word	0x1000d29c
 8102e00:	1000d3a4 	.word	0x1000d3a4
 8102e04:	1000d2d0 	.word	0x1000d2d0
 8102e08:	1000d2c4 	.word	0x1000d2c4
 8102e0c:	1000d2c8 	.word	0x1000d2c8
 8102e10:	3f4b2fec 	.word	0x3f4b2fec
 8102e14:	10000024 	.word	0x10000024
 8102e18:	1000d27c 	.word	0x1000d27c
 8102e1c:	1000d394 	.word	0x1000d394
 8102e20:	1000d380 	.word	0x1000d380
 8102e24:	1000d338 	.word	0x1000d338
 8102e28:	1000d388 	.word	0x1000d388
 8102e2c:	1000d378 	.word	0x1000d378
 8102e30:	1000d2bc 	.word	0x1000d2bc
 8102e34:	3cbfb15b 	.word	0x3cbfb15b
 8102e38:	1000d2c0 	.word	0x1000d2c0
 8102e3c:	1000d28c 	.word	0x1000d28c
 8102e40:	1000cfac 	.word	0x1000cfac
 8102e44:	1000d2b0 	.word	0x1000d2b0
 8102e48:	1000d018 	.word	0x1000d018
 8102e4c:	1000d3a0 	.word	0x1000d3a0
 8102e50:	1000d000 	.word	0x1000d000
 8102e54:	1000d008 	.word	0x1000d008
 8102e58:	1000d184 	.word	0x1000d184
 8102e5c:	1000d2b8 	.word	0x1000d2b8
 8102e60:	1000d2b4 	.word	0x1000d2b4
 8102e64:	1000d2d8 	.word	0x1000d2d8
 8102e68:	1000cff0 	.word	0x1000cff0
 8102e6c:	1000d2f0 	.word	0x1000d2f0
 8102e70:	1000d2a4 	.word	0x1000d2a4
 8102e74:	1000d004 	.word	0x1000d004
 8102e78:	1000cf1c 	.word	0x1000cf1c
 8102e7c:	1000d288 	.word	0x1000d288
 8102e80:	1000cfd8 	.word	0x1000cfd8
 8102e84:	1000cfdc 	.word	0x1000cfdc
 8102e88:	1000cfe0 	.word	0x1000cfe0
 8102e8c:	1000cfd0 	.word	0x1000cfd0
 8102e90:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
							 datibici.roll,
 8102e94:	4ba9      	ldr	r3, [pc, #676]	@ (810313c <main+0x115c>)
 8102e96:	691b      	ldr	r3, [r3, #16]
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102e98:	4618      	mov	r0, r3
 8102e9a:	f7fd fbdd 	bl	8100658 <__aeabi_f2d>
 8102e9e:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
							 datibici.speed_metsec,
 8102ea2:	4ba6      	ldr	r3, [pc, #664]	@ (810313c <main+0x115c>)
 8102ea4:	699b      	ldr	r3, [r3, #24]
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102ea6:	4618      	mov	r0, r3
 8102ea8:	f7fd fbd6 	bl	8100658 <__aeabi_f2d>
 8102eac:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
							 datibici.torque,
 8102eb0:	4ba2      	ldr	r3, [pc, #648]	@ (810313c <main+0x115c>)
 8102eb2:	689b      	ldr	r3, [r3, #8]
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102eb4:	4618      	mov	r0, r3
 8102eb6:	f7fd fbcf 	bl	8100658 <__aeabi_f2d>
 8102eba:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
							 datibici.u_back_wheel,
 8102ebe:	4b9f      	ldr	r3, [pc, #636]	@ (810313c <main+0x115c>)
 8102ec0:	69db      	ldr	r3, [r3, #28]
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102ec2:	4618      	mov	r0, r3
 8102ec4:	f7fd fbc8 	bl	8100658 <__aeabi_f2d>
 8102ec8:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
							 datibici.u_front_wheel,
 8102ecc:	4b9b      	ldr	r3, [pc, #620]	@ (810313c <main+0x115c>)
 8102ece:	68db      	ldr	r3, [r3, #12]
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102ed0:	4618      	mov	r0, r3
 8102ed2:	f7fd fbc1 	bl	8100658 <__aeabi_f2d>
 8102ed6:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
							 datibici.tempo,
 8102eda:	4b98      	ldr	r3, [pc, #608]	@ (810313c <main+0x115c>)
 8102edc:	6a1b      	ldr	r3, [r3, #32]
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102ede:	4618      	mov	r0, r3
 8102ee0:	f7fd fbba 	bl	8100658 <__aeabi_f2d>
 8102ee4:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
							 datibici.corrente_non_filtrata,
 8102ee8:	4b94      	ldr	r3, [pc, #592]	@ (810313c <main+0x115c>)
 8102eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102eec:	4618      	mov	r0, r3
 8102eee:	f7fd fbb3 	bl	8100658 <__aeabi_f2d>
 8102ef2:	e9c7 0108 	strd	r0, r1, [r7, #32]
							 datibici.corrente_filtrata,
 8102ef6:	4b91      	ldr	r3, [pc, #580]	@ (810313c <main+0x115c>)
 8102ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102efa:	4618      	mov	r0, r3
 8102efc:	f7fd fbac 	bl	8100658 <__aeabi_f2d>
 8102f00:	e9c7 0106 	strd	r0, r1, [r7, #24]
			 	 	 	 	 datibici.desired_torque,
 8102f04:	4b8d      	ldr	r3, [pc, #564]	@ (810313c <main+0x115c>)
 8102f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102f08:	4618      	mov	r0, r3
 8102f0a:	f7fd fba5 	bl	8100658 <__aeabi_f2d>
 8102f0e:	e9c7 0104 	strd	r0, r1, [r7, #16]
							 datibici.Volt_Adc,
 8102f12:	4b8a      	ldr	r3, [pc, #552]	@ (810313c <main+0x115c>)
 8102f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102f16:	4618      	mov	r0, r3
 8102f18:	f7fd fb9e 	bl	8100658 <__aeabi_f2d>
 8102f1c:	e9c7 0102 	strd	r0, r1, [r7, #8]
							 datibici.Volt_sens,
 8102f20:	4b86      	ldr	r3, [pc, #536]	@ (810313c <main+0x115c>)
 8102f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102f24:	4618      	mov	r0, r3
 8102f26:	f7fd fb97 	bl	8100658 <__aeabi_f2d>
 8102f2a:	e9c7 0100 	strd	r0, r1, [r7]
							 datibici.costanteD,
 8102f2e:	4b83      	ldr	r3, [pc, #524]	@ (810313c <main+0x115c>)
 8102f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102f32:	4618      	mov	r0, r3
 8102f34:	f7fd fb90 	bl	8100658 <__aeabi_f2d>
 8102f38:	4682      	mov	sl, r0
 8102f3a:	468b      	mov	fp, r1
							 datibici.Kp,
 8102f3c:	4b7f      	ldr	r3, [pc, #508]	@ (810313c <main+0x115c>)
 8102f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102f40:	4618      	mov	r0, r3
 8102f42:	f7fd fb89 	bl	8100658 <__aeabi_f2d>
 8102f46:	4680      	mov	r8, r0
 8102f48:	4689      	mov	r9, r1
							 datibici.Ki,
 8102f4a:	4b7c      	ldr	r3, [pc, #496]	@ (810313c <main+0x115c>)
 8102f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102f4e:	4618      	mov	r0, r3
 8102f50:	f7fd fb82 	bl	8100658 <__aeabi_f2d>
 8102f54:	4604      	mov	r4, r0
 8102f56:	460d      	mov	r5, r1
							 datibici.Kd
 8102f58:	4b78      	ldr	r3, [pc, #480]	@ (810313c <main+0x115c>)
 8102f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102f5c:	4618      	mov	r0, r3
 8102f5e:	f7fd fb7b 	bl	8100658 <__aeabi_f2d>
 8102f62:	4602      	mov	r2, r0
 8102f64:	460b      	mov	r3, r1
 8102f66:	e9cd 2320 	strd	r2, r3, [sp, #128]	@ 0x80
 8102f6a:	e9cd 451e 	strd	r4, r5, [sp, #120]	@ 0x78
 8102f6e:	e9cd 891c 	strd	r8, r9, [sp, #112]	@ 0x70
 8102f72:	e9cd ab1a 	strd	sl, fp, [sp, #104]	@ 0x68
 8102f76:	ed97 7b00 	vldr	d7, [r7]
 8102f7a:	ed8d 7b18 	vstr	d7, [sp, #96]	@ 0x60
 8102f7e:	ed97 7b02 	vldr	d7, [r7, #8]
 8102f82:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 8102f86:	ed97 7b04 	vldr	d7, [r7, #16]
 8102f8a:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8102f8e:	ed97 7b06 	vldr	d7, [r7, #24]
 8102f92:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 8102f96:	ed97 7b08 	vldr	d7, [r7, #32]
 8102f9a:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8102f9e:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8102fa2:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8102fa6:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8102faa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8102fae:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8102fb2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8102fb6:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8102fba:	ed8d 7b08 	vstr	d7, [sp, #32]
 8102fbe:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8102fc2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8102fc6:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8102fca:	ed8d 7b04 	vstr	d7, [sp, #16]
 8102fce:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8102fd2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8102fd6:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8102fda:	ed8d 7b00 	vstr	d7, [sp]
 8102fde:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8102fe2:	4857      	ldr	r0, [pc, #348]	@ (8103140 <main+0x1160>)
 8102fe4:	f00f f990 	bl	8112308 <iprintf>
												 datibici.costanteD,
												 datibici.Kp,
												 datibici.Ki,
												 datibici.Kd);
*/
			int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102fe8:	4b56      	ldr	r3, [pc, #344]	@ (8103144 <main+0x1164>)
 8102fea:	681b      	ldr	r3, [r3, #0]
 8102fec:	4a56      	ldr	r2, [pc, #344]	@ (8103148 <main+0x1168>)
 8102fee:	189e      	adds	r6, r3, r2
								"%f,%f\r\n",
								datibici.tempo,
 8102ff0:	4b52      	ldr	r3, [pc, #328]	@ (810313c <main+0x115c>)
 8102ff2:	6a1b      	ldr	r3, [r3, #32]
			int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102ff4:	4618      	mov	r0, r3
 8102ff6:	f7fd fb2f 	bl	8100658 <__aeabi_f2d>
 8102ffa:	4604      	mov	r4, r0
 8102ffc:	460d      	mov	r5, r1
								datibici.torque);
 8102ffe:	4b4f      	ldr	r3, [pc, #316]	@ (810313c <main+0x115c>)
 8103000:	689b      	ldr	r3, [r3, #8]
			int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8103002:	4618      	mov	r0, r3
 8103004:	f7fd fb28 	bl	8100658 <__aeabi_f2d>
 8103008:	4602      	mov	r2, r0
 810300a:	460b      	mov	r3, r1
 810300c:	e9cd 2300 	strd	r2, r3, [sp]
 8103010:	4622      	mov	r2, r4
 8103012:	462b      	mov	r3, r5
 8103014:	494d      	ldr	r1, [pc, #308]	@ (810314c <main+0x116c>)
 8103016:	4630      	mov	r0, r6
 8103018:	f00f f988 	bl	811232c <siprintf>
 810301c:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c


			indiceBuffer += bytesWritten;
 8103020:	4b48      	ldr	r3, [pc, #288]	@ (8103144 <main+0x1164>)
 8103022:	681a      	ldr	r2, [r3, #0]
 8103024:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8103028:	4413      	add	r3, r2
 810302a:	4a46      	ldr	r2, [pc, #280]	@ (8103144 <main+0x1164>)
 810302c:	6013      	str	r3, [r2, #0]

			//printf("4: %.3f\r\n", tempo_1ms);

			if (trasmissione_attiva == 1) {
 810302e:	4b48      	ldr	r3, [pc, #288]	@ (8103150 <main+0x1170>)
 8103030:	781b      	ldrb	r3, [r3, #0]
 8103032:	2b01      	cmp	r3, #1
 8103034:	f47f a9d9 	bne.w	81023ea <main+0x40a>
				//dati bicicletta

				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8103038:	4b42      	ldr	r3, [pc, #264]	@ (8103144 <main+0x1164>)
 810303a:	681b      	ldr	r3, [r3, #0]
 810303c:	4a42      	ldr	r2, [pc, #264]	@ (8103148 <main+0x1168>)
 810303e:	189e      	adds	r6, r3, r2
						"%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\n",
						datibici.angle_steer, datibici.desired_filtered_torque,
 8103040:	4b3e      	ldr	r3, [pc, #248]	@ (810313c <main+0x115c>)
 8103042:	681b      	ldr	r3, [r3, #0]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8103044:	4618      	mov	r0, r3
 8103046:	f7fd fb07 	bl	8100658 <__aeabi_f2d>
 810304a:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
						datibici.angle_steer, datibici.desired_filtered_torque,
 810304e:	4b3b      	ldr	r3, [pc, #236]	@ (810313c <main+0x115c>)
 8103050:	685b      	ldr	r3, [r3, #4]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8103052:	4618      	mov	r0, r3
 8103054:	f7fd fb00 	bl	8100658 <__aeabi_f2d>
 8103058:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
						datibici.desired_speed_metsec, datibici.roll,
 810305c:	4b37      	ldr	r3, [pc, #220]	@ (810313c <main+0x115c>)
 810305e:	695b      	ldr	r3, [r3, #20]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8103060:	4618      	mov	r0, r3
 8103062:	f7fd faf9 	bl	8100658 <__aeabi_f2d>
 8103066:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
						datibici.desired_speed_metsec, datibici.roll,
 810306a:	4b34      	ldr	r3, [pc, #208]	@ (810313c <main+0x115c>)
 810306c:	691b      	ldr	r3, [r3, #16]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 810306e:	4618      	mov	r0, r3
 8103070:	f7fd faf2 	bl	8100658 <__aeabi_f2d>
 8103074:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
						datibici.speed_metsec, datibici.torque,
 8103078:	4b30      	ldr	r3, [pc, #192]	@ (810313c <main+0x115c>)
 810307a:	699b      	ldr	r3, [r3, #24]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 810307c:	4618      	mov	r0, r3
 810307e:	f7fd faeb 	bl	8100658 <__aeabi_f2d>
 8103082:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
						datibici.speed_metsec, datibici.torque,
 8103086:	4b2d      	ldr	r3, [pc, #180]	@ (810313c <main+0x115c>)
 8103088:	689b      	ldr	r3, [r3, #8]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 810308a:	4618      	mov	r0, r3
 810308c:	f7fd fae4 	bl	8100658 <__aeabi_f2d>
 8103090:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
						datibici.u_back_wheel, datibici.u_front_wheel,
 8103094:	4b29      	ldr	r3, [pc, #164]	@ (810313c <main+0x115c>)
 8103096:	69db      	ldr	r3, [r3, #28]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8103098:	4618      	mov	r0, r3
 810309a:	f7fd fadd 	bl	8100658 <__aeabi_f2d>
 810309e:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
						datibici.u_back_wheel, datibici.u_front_wheel,
 81030a2:	4b26      	ldr	r3, [pc, #152]	@ (810313c <main+0x115c>)
 81030a4:	68db      	ldr	r3, [r3, #12]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 81030a6:	4618      	mov	r0, r3
 81030a8:	f7fd fad6 	bl	8100658 <__aeabi_f2d>
 81030ac:	4682      	mov	sl, r0
 81030ae:	468b      	mov	fp, r1
						datibici.tempo, datibici.corrente_non_filtrata,
 81030b0:	4b22      	ldr	r3, [pc, #136]	@ (810313c <main+0x115c>)
 81030b2:	6a1b      	ldr	r3, [r3, #32]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 81030b4:	4618      	mov	r0, r3
 81030b6:	f7fd facf 	bl	8100658 <__aeabi_f2d>
 81030ba:	4680      	mov	r8, r0
 81030bc:	4689      	mov	r9, r1
						datibici.tempo, datibici.corrente_non_filtrata,
 81030be:	4b1f      	ldr	r3, [pc, #124]	@ (810313c <main+0x115c>)
 81030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 81030c2:	4618      	mov	r0, r3
 81030c4:	f7fd fac8 	bl	8100658 <__aeabi_f2d>
 81030c8:	4604      	mov	r4, r0
 81030ca:	460d      	mov	r5, r1
						datibici.corrente_filtrata);
 81030cc:	4b1b      	ldr	r3, [pc, #108]	@ (810313c <main+0x115c>)
 81030ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 81030d0:	4618      	mov	r0, r3
 81030d2:	f7fd fac1 	bl	8100658 <__aeabi_f2d>
 81030d6:	4602      	mov	r2, r0
 81030d8:	460b      	mov	r3, r1
 81030da:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 81030de:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 81030e2:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 81030e6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 81030ea:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 81030ee:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 81030f2:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 81030f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 81030fa:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 81030fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8103102:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8103106:	ed8d 7b04 	vstr	d7, [sp, #16]
 810310a:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 810310e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8103112:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8103116:	ed8d 7b00 	vstr	d7, [sp]
 810311a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 810311e:	490d      	ldr	r1, [pc, #52]	@ (8103154 <main+0x1174>)
 8103120:	4630      	mov	r0, r6
 8103122:	f00f f903 	bl	811232c <siprintf>
 8103126:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
				indiceBuffer += bytesWritten;
 810312a:	4b06      	ldr	r3, [pc, #24]	@ (8103144 <main+0x1164>)
 810312c:	681a      	ldr	r2, [r3, #0]
 810312e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8103132:	4413      	add	r3, r2
 8103134:	4a03      	ldr	r2, [pc, #12]	@ (8103144 <main+0x1164>)
 8103136:	6013      	str	r3, [r2, #0]
 8103138:	f7ff b957 	b.w	81023ea <main+0x40a>
 810313c:	1000d2f0 	.word	0x1000d2f0
 8103140:	08116c3c 	.word	0x08116c3c
 8103144:	1000cf14 	.word	0x1000cf14
 8103148:	100007dc 	.word	0x100007dc
 810314c:	08116c8c 	.word	0x08116c8c
 8103150:	1000d2d5 	.word	0x1000d2d5
 8103154:	08116c94 	.word	0x08116c94

			 //qua il calcolo della coppia, nella tesi avveniva solo una volta, successivamente
			// ho fatto in modo che venisse fatta piu frequentemente mettendola qui
			// PRO: segnale piu pulito CONTRO: non fa sempre la stessa quantita di misure, a volte
			//è piu pulito e a volte meno, l'idea è mettere un massimo di volte in cui fa le misurazioni, tipo max = 15
				if(iterazione <=15)
 8103158:	4b3d      	ldr	r3, [pc, #244]	@ (8103250 <main+0x1270>)
 810315a:	edd3 7a00 	vldr	s15, [r3]
 810315e:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8103162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8103166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810316a:	d869      	bhi.n	8103240 <main+0x1260>
				{
					//calcolo corrente
					HAL_ADC_Start(&hadc1);
 810316c:	4839      	ldr	r0, [pc, #228]	@ (8103254 <main+0x1274>)
 810316e:	f002 f9e1 	bl	8105534 <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc1, timeout);
 8103172:	4b39      	ldr	r3, [pc, #228]	@ (8103258 <main+0x1278>)
 8103174:	681b      	ldr	r3, [r3, #0]
 8103176:	4619      	mov	r1, r3
 8103178:	4836      	ldr	r0, [pc, #216]	@ (8103254 <main+0x1274>)
 810317a:	f002 fad9 	bl	8105730 <HAL_ADC_PollForConversion>
					CountValue = HAL_ADC_GetValue(&hadc1);
 810317e:	4835      	ldr	r0, [pc, #212]	@ (8103254 <main+0x1274>)
 8103180:	f002 fbca 	bl	8105918 <HAL_ADC_GetValue>
 8103184:	ee07 0a90 	vmov	s15, r0
 8103188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810318c:	4b33      	ldr	r3, [pc, #204]	@ (810325c <main+0x127c>)
 810318e:	edc3 7a00 	vstr	s15, [r3]
					volt = ((float) CountValue) * Vref / (resolution);
 8103192:	4b32      	ldr	r3, [pc, #200]	@ (810325c <main+0x127c>)
 8103194:	ed93 7a00 	vldr	s14, [r3]
 8103198:	4b31      	ldr	r3, [pc, #196]	@ (8103260 <main+0x1280>)
 810319a:	edd3 7a00 	vldr	s15, [r3]
 810319e:	ee67 6a27 	vmul.f32	s13, s14, s15
 81031a2:	4b30      	ldr	r3, [pc, #192]	@ (8103264 <main+0x1284>)
 81031a4:	ed93 7a00 	vldr	s14, [r3]
 81031a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81031ac:	4b2e      	ldr	r3, [pc, #184]	@ (8103268 <main+0x1288>)
 81031ae:	edc3 7a00 	vstr	s15, [r3]
					HAL_ADC_Stop(&hadc1);
 81031b2:	4828      	ldr	r0, [pc, #160]	@ (8103254 <main+0x1274>)
 81031b4:	f002 fa88 	bl	81056c8 <HAL_ADC_Stop>
					VoltSens = (volt + D) * 1.5059;
 81031b8:	4b2b      	ldr	r3, [pc, #172]	@ (8103268 <main+0x1288>)
 81031ba:	ed93 7a00 	vldr	s14, [r3]
 81031be:	4b2b      	ldr	r3, [pc, #172]	@ (810326c <main+0x128c>)
 81031c0:	edd3 7a00 	vldr	s15, [r3]
 81031c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 81031c8:	ee17 0a90 	vmov	r0, s15
 81031cc:	f7fd fa44 	bl	8100658 <__aeabi_f2d>
 81031d0:	a31d      	add	r3, pc, #116	@ (adr r3, 8103248 <main+0x1268>)
 81031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81031d6:	f7fd fa97 	bl	8100708 <__aeabi_dmul>
 81031da:	4602      	mov	r2, r0
 81031dc:	460b      	mov	r3, r1
 81031de:	4610      	mov	r0, r2
 81031e0:	4619      	mov	r1, r3
 81031e2:	f7fd fd89 	bl	8100cf8 <__aeabi_d2f>
 81031e6:	4603      	mov	r3, r0
 81031e8:	4a21      	ldr	r2, [pc, #132]	@ (8103270 <main+0x1290>)
 81031ea:	6013      	str	r3, [r2, #0]
					corrente_non_filtrata = voltToAmpere(VoltSens, a, b);
 81031ec:	4b20      	ldr	r3, [pc, #128]	@ (8103270 <main+0x1290>)
 81031ee:	edd3 7a00 	vldr	s15, [r3]
 81031f2:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8103274 <main+0x1294>
 81031f6:	4b20      	ldr	r3, [pc, #128]	@ (8103278 <main+0x1298>)
 81031f8:	ed93 7a00 	vldr	s14, [r3]
 81031fc:	eeb0 1a47 	vmov.f32	s2, s14
 8103200:	eef0 0a66 	vmov.f32	s1, s13
 8103204:	eeb0 0a67 	vmov.f32	s0, s15
 8103208:	f7fe fe41 	bl	8101e8e <voltToAmpere>
 810320c:	eef0 7a40 	vmov.f32	s15, s0
 8103210:	4b1a      	ldr	r3, [pc, #104]	@ (810327c <main+0x129c>)
 8103212:	edc3 7a00 	vstr	s15, [r3]

					VoltSomma1ms += VoltSens;
 8103216:	4b1a      	ldr	r3, [pc, #104]	@ (8103280 <main+0x12a0>)
 8103218:	ed93 7a00 	vldr	s14, [r3]
 810321c:	4b14      	ldr	r3, [pc, #80]	@ (8103270 <main+0x1290>)
 810321e:	edd3 7a00 	vldr	s15, [r3]
 8103222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8103226:	4b16      	ldr	r3, [pc, #88]	@ (8103280 <main+0x12a0>)
 8103228:	edc3 7a00 	vstr	s15, [r3]
					iterazione++;
 810322c:	4b08      	ldr	r3, [pc, #32]	@ (8103250 <main+0x1270>)
 810322e:	edd3 7a00 	vldr	s15, [r3]
 8103232:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103236:	ee77 7a87 	vadd.f32	s15, s15, s14
 810323a:	4b05      	ldr	r3, [pc, #20]	@ (8103250 <main+0x1270>)
 810323c:	edc3 7a00 	vstr	s15, [r3]
		if (flag_Tc == 1) {
 8103240:	f7ff b8d3 	b.w	81023ea <main+0x40a>
 8103244:	f3af 8000 	nop.w
 8103248:	9930be0e 	.word	0x9930be0e
 810324c:	3ff8182a 	.word	0x3ff8182a
 8103250:	1000d2c4 	.word	0x1000d2c4
 8103254:	10000290 	.word	0x10000290
 8103258:	10000018 	.word	0x10000018
 810325c:	1000d298 	.word	0x1000d298
 8103260:	10000020 	.word	0x10000020
 8103264:	1000001c 	.word	0x1000001c
 8103268:	1000d29c 	.word	0x1000d29c
 810326c:	1000d3a4 	.word	0x1000d3a4
 8103270:	1000d2d0 	.word	0x1000d2d0
 8103274:	3f4b2fec 	.word	0x3f4b2fec
 8103278:	10000024 	.word	0x10000024
 810327c:	1000d27c 	.word	0x1000d27c
 8103280:	1000d2c8 	.word	0x1000d2c8

08103284 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8103284:	b580      	push	{r7, lr}
 8103286:	b08a      	sub	sp, #40	@ 0x28
 8103288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 810328a:	f107 031c 	add.w	r3, r7, #28
 810328e:	2200      	movs	r2, #0
 8103290:	601a      	str	r2, [r3, #0]
 8103292:	605a      	str	r2, [r3, #4]
 8103294:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8103296:	463b      	mov	r3, r7
 8103298:	2200      	movs	r2, #0
 810329a:	601a      	str	r2, [r3, #0]
 810329c:	605a      	str	r2, [r3, #4]
 810329e:	609a      	str	r2, [r3, #8]
 81032a0:	60da      	str	r2, [r3, #12]
 81032a2:	611a      	str	r2, [r3, #16]
 81032a4:	615a      	str	r2, [r3, #20]
 81032a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 81032a8:	4b36      	ldr	r3, [pc, #216]	@ (8103384 <MX_ADC1_Init+0x100>)
 81032aa:	4a37      	ldr	r2, [pc, #220]	@ (8103388 <MX_ADC1_Init+0x104>)
 81032ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 81032ae:	4b35      	ldr	r3, [pc, #212]	@ (8103384 <MX_ADC1_Init+0x100>)
 81032b0:	2200      	movs	r2, #0
 81032b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 81032b4:	4b33      	ldr	r3, [pc, #204]	@ (8103384 <MX_ADC1_Init+0x100>)
 81032b6:	2200      	movs	r2, #0
 81032b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81032ba:	4b32      	ldr	r3, [pc, #200]	@ (8103384 <MX_ADC1_Init+0x100>)
 81032bc:	2200      	movs	r2, #0
 81032be:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81032c0:	4b30      	ldr	r3, [pc, #192]	@ (8103384 <MX_ADC1_Init+0x100>)
 81032c2:	2204      	movs	r2, #4
 81032c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 81032c6:	4b2f      	ldr	r3, [pc, #188]	@ (8103384 <MX_ADC1_Init+0x100>)
 81032c8:	2200      	movs	r2, #0
 81032ca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 81032cc:	4b2d      	ldr	r3, [pc, #180]	@ (8103384 <MX_ADC1_Init+0x100>)
 81032ce:	2200      	movs	r2, #0
 81032d0:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 81032d2:	4b2c      	ldr	r3, [pc, #176]	@ (8103384 <MX_ADC1_Init+0x100>)
 81032d4:	2201      	movs	r2, #1
 81032d6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 81032d8:	4b2a      	ldr	r3, [pc, #168]	@ (8103384 <MX_ADC1_Init+0x100>)
 81032da:	2200      	movs	r2, #0
 81032dc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 81032de:	4b29      	ldr	r3, [pc, #164]	@ (8103384 <MX_ADC1_Init+0x100>)
 81032e0:	2200      	movs	r2, #0
 81032e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 81032e4:	4b27      	ldr	r3, [pc, #156]	@ (8103384 <MX_ADC1_Init+0x100>)
 81032e6:	2200      	movs	r2, #0
 81032e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81032ea:	4b26      	ldr	r3, [pc, #152]	@ (8103384 <MX_ADC1_Init+0x100>)
 81032ec:	2200      	movs	r2, #0
 81032ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81032f0:	4b24      	ldr	r3, [pc, #144]	@ (8103384 <MX_ADC1_Init+0x100>)
 81032f2:	2200      	movs	r2, #0
 81032f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81032f6:	4b23      	ldr	r3, [pc, #140]	@ (8103384 <MX_ADC1_Init+0x100>)
 81032f8:	2200      	movs	r2, #0
 81032fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 81032fc:	4b21      	ldr	r3, [pc, #132]	@ (8103384 <MX_ADC1_Init+0x100>)
 81032fe:	2201      	movs	r2, #1
 8103300:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1024;
 8103304:	4b1f      	ldr	r3, [pc, #124]	@ (8103384 <MX_ADC1_Init+0x100>)
 8103306:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810330a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 810330c:	4b1d      	ldr	r3, [pc, #116]	@ (8103384 <MX_ADC1_Init+0x100>)
 810330e:	2200      	movs	r2, #0
 8103310:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8103312:	4b1c      	ldr	r3, [pc, #112]	@ (8103384 <MX_ADC1_Init+0x100>)
 8103314:	2200      	movs	r2, #0
 8103316:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8103318:	4b1a      	ldr	r3, [pc, #104]	@ (8103384 <MX_ADC1_Init+0x100>)
 810331a:	2201      	movs	r2, #1
 810331c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 810331e:	4819      	ldr	r0, [pc, #100]	@ (8103384 <MX_ADC1_Init+0x100>)
 8103320:	f001 ff66 	bl	81051f0 <HAL_ADC_Init>
 8103324:	4603      	mov	r3, r0
 8103326:	2b00      	cmp	r3, #0
 8103328:	d001      	beq.n	810332e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 810332a:	f000 fee7 	bl	81040fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 810332e:	2300      	movs	r3, #0
 8103330:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8103332:	f107 031c 	add.w	r3, r7, #28
 8103336:	4619      	mov	r1, r3
 8103338:	4812      	ldr	r0, [pc, #72]	@ (8103384 <MX_ADC1_Init+0x100>)
 810333a:	f003 f92f 	bl	810659c <HAL_ADCEx_MultiModeConfigChannel>
 810333e:	4603      	mov	r3, r0
 8103340:	2b00      	cmp	r3, #0
 8103342:	d001      	beq.n	8103348 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8103344:	f000 feda 	bl	81040fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8103348:	4b10      	ldr	r3, [pc, #64]	@ (810338c <MX_ADC1_Init+0x108>)
 810334a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 810334c:	2306      	movs	r3, #6
 810334e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8103350:	2300      	movs	r3, #0
 8103352:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8103354:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8103358:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 810335a:	2304      	movs	r3, #4
 810335c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 810335e:	2300      	movs	r3, #0
 8103360:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8103362:	2300      	movs	r3, #0
 8103364:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8103366:	463b      	mov	r3, r7
 8103368:	4619      	mov	r1, r3
 810336a:	4806      	ldr	r0, [pc, #24]	@ (8103384 <MX_ADC1_Init+0x100>)
 810336c:	f002 fae2 	bl	8105934 <HAL_ADC_ConfigChannel>
 8103370:	4603      	mov	r3, r0
 8103372:	2b00      	cmp	r3, #0
 8103374:	d001      	beq.n	810337a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8103376:	f000 fec1 	bl	81040fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 810337a:	bf00      	nop
 810337c:	3728      	adds	r7, #40	@ 0x28
 810337e:	46bd      	mov	sp, r7
 8103380:	bd80      	pop	{r7, pc}
 8103382:	bf00      	nop
 8103384:	10000290 	.word	0x10000290
 8103388:	40022000 	.word	0x40022000
 810338c:	08600004 	.word	0x08600004

08103390 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8103390:	b580      	push	{r7, lr}
 8103392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8103394:	4b1b      	ldr	r3, [pc, #108]	@ (8103404 <MX_I2C1_Init+0x74>)
 8103396:	4a1c      	ldr	r2, [pc, #112]	@ (8103408 <MX_I2C1_Init+0x78>)
 8103398:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 810339a:	4b1a      	ldr	r3, [pc, #104]	@ (8103404 <MX_I2C1_Init+0x74>)
 810339c:	4a1b      	ldr	r2, [pc, #108]	@ (810340c <MX_I2C1_Init+0x7c>)
 810339e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 81033a0:	4b18      	ldr	r3, [pc, #96]	@ (8103404 <MX_I2C1_Init+0x74>)
 81033a2:	2200      	movs	r2, #0
 81033a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81033a6:	4b17      	ldr	r3, [pc, #92]	@ (8103404 <MX_I2C1_Init+0x74>)
 81033a8:	2201      	movs	r2, #1
 81033aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81033ac:	4b15      	ldr	r3, [pc, #84]	@ (8103404 <MX_I2C1_Init+0x74>)
 81033ae:	2200      	movs	r2, #0
 81033b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 81033b2:	4b14      	ldr	r3, [pc, #80]	@ (8103404 <MX_I2C1_Init+0x74>)
 81033b4:	2200      	movs	r2, #0
 81033b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81033b8:	4b12      	ldr	r3, [pc, #72]	@ (8103404 <MX_I2C1_Init+0x74>)
 81033ba:	2200      	movs	r2, #0
 81033bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81033be:	4b11      	ldr	r3, [pc, #68]	@ (8103404 <MX_I2C1_Init+0x74>)
 81033c0:	2200      	movs	r2, #0
 81033c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81033c4:	4b0f      	ldr	r3, [pc, #60]	@ (8103404 <MX_I2C1_Init+0x74>)
 81033c6:	2200      	movs	r2, #0
 81033c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 81033ca:	480e      	ldr	r0, [pc, #56]	@ (8103404 <MX_I2C1_Init+0x74>)
 81033cc:	f005 ff06 	bl	81091dc <HAL_I2C_Init>
 81033d0:	4603      	mov	r3, r0
 81033d2:	2b00      	cmp	r3, #0
 81033d4:	d001      	beq.n	81033da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 81033d6:	f000 fe91 	bl	81040fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81033da:	2100      	movs	r1, #0
 81033dc:	4809      	ldr	r0, [pc, #36]	@ (8103404 <MX_I2C1_Init+0x74>)
 81033de:	f006 fc67 	bl	8109cb0 <HAL_I2CEx_ConfigAnalogFilter>
 81033e2:	4603      	mov	r3, r0
 81033e4:	2b00      	cmp	r3, #0
 81033e6:	d001      	beq.n	81033ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 81033e8:	f000 fe88 	bl	81040fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 81033ec:	2100      	movs	r1, #0
 81033ee:	4805      	ldr	r0, [pc, #20]	@ (8103404 <MX_I2C1_Init+0x74>)
 81033f0:	f006 fca9 	bl	8109d46 <HAL_I2CEx_ConfigDigitalFilter>
 81033f4:	4603      	mov	r3, r0
 81033f6:	2b00      	cmp	r3, #0
 81033f8:	d001      	beq.n	81033fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 81033fa:	f000 fe7f 	bl	81040fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 81033fe:	bf00      	nop
 8103400:	bd80      	pop	{r7, pc}
 8103402:	bf00      	nop
 8103404:	100002f4 	.word	0x100002f4
 8103408:	40005400 	.word	0x40005400
 810340c:	10c0ecff 	.word	0x10c0ecff

08103410 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8103410:	b580      	push	{r7, lr}
 8103412:	b09a      	sub	sp, #104	@ 0x68
 8103414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8103416:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 810341a:	2200      	movs	r2, #0
 810341c:	601a      	str	r2, [r3, #0]
 810341e:	605a      	str	r2, [r3, #4]
 8103420:	609a      	str	r2, [r3, #8]
 8103422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8103424:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8103428:	2200      	movs	r2, #0
 810342a:	601a      	str	r2, [r3, #0]
 810342c:	605a      	str	r2, [r3, #4]
 810342e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8103430:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8103434:	2200      	movs	r2, #0
 8103436:	601a      	str	r2, [r3, #0]
 8103438:	605a      	str	r2, [r3, #4]
 810343a:	609a      	str	r2, [r3, #8]
 810343c:	60da      	str	r2, [r3, #12]
 810343e:	611a      	str	r2, [r3, #16]
 8103440:	615a      	str	r2, [r3, #20]
 8103442:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8103444:	1d3b      	adds	r3, r7, #4
 8103446:	222c      	movs	r2, #44	@ 0x2c
 8103448:	2100      	movs	r1, #0
 810344a:	4618      	mov	r0, r3
 810344c:	f00f f866 	bl	811251c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8103450:	4b43      	ldr	r3, [pc, #268]	@ (8103560 <MX_TIM1_Init+0x150>)
 8103452:	4a44      	ldr	r2, [pc, #272]	@ (8103564 <MX_TIM1_Init+0x154>)
 8103454:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8103456:	4b42      	ldr	r3, [pc, #264]	@ (8103560 <MX_TIM1_Init+0x150>)
 8103458:	22c7      	movs	r2, #199	@ 0xc7
 810345a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 810345c:	4b40      	ldr	r3, [pc, #256]	@ (8103560 <MX_TIM1_Init+0x150>)
 810345e:	2200      	movs	r2, #0
 8103460:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50-1;
 8103462:	4b3f      	ldr	r3, [pc, #252]	@ (8103560 <MX_TIM1_Init+0x150>)
 8103464:	2231      	movs	r2, #49	@ 0x31
 8103466:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8103468:	4b3d      	ldr	r3, [pc, #244]	@ (8103560 <MX_TIM1_Init+0x150>)
 810346a:	2200      	movs	r2, #0
 810346c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 810346e:	4b3c      	ldr	r3, [pc, #240]	@ (8103560 <MX_TIM1_Init+0x150>)
 8103470:	2200      	movs	r2, #0
 8103472:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8103474:	4b3a      	ldr	r3, [pc, #232]	@ (8103560 <MX_TIM1_Init+0x150>)
 8103476:	2200      	movs	r2, #0
 8103478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 810347a:	4839      	ldr	r0, [pc, #228]	@ (8103560 <MX_TIM1_Init+0x150>)
 810347c:	f009 fc0e 	bl	810cc9c <HAL_TIM_Base_Init>
 8103480:	4603      	mov	r3, r0
 8103482:	2b00      	cmp	r3, #0
 8103484:	d001      	beq.n	810348a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8103486:	f000 fe39 	bl	81040fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810348a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810348e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8103490:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8103494:	4619      	mov	r1, r3
 8103496:	4832      	ldr	r0, [pc, #200]	@ (8103560 <MX_TIM1_Init+0x150>)
 8103498:	f00a f972 	bl	810d780 <HAL_TIM_ConfigClockSource>
 810349c:	4603      	mov	r3, r0
 810349e:	2b00      	cmp	r3, #0
 81034a0:	d001      	beq.n	81034a6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 81034a2:	f000 fe2b 	bl	81040fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 81034a6:	482e      	ldr	r0, [pc, #184]	@ (8103560 <MX_TIM1_Init+0x150>)
 81034a8:	f009 fd38 	bl	810cf1c <HAL_TIM_PWM_Init>
 81034ac:	4603      	mov	r3, r0
 81034ae:	2b00      	cmp	r3, #0
 81034b0:	d001      	beq.n	81034b6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 81034b2:	f000 fe23 	bl	81040fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81034b6:	2300      	movs	r3, #0
 81034b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81034ba:	2300      	movs	r3, #0
 81034bc:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81034be:	2300      	movs	r3, #0
 81034c0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 81034c2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 81034c6:	4619      	mov	r1, r3
 81034c8:	4825      	ldr	r0, [pc, #148]	@ (8103560 <MX_TIM1_Init+0x150>)
 81034ca:	f00a feb7 	bl	810e23c <HAL_TIMEx_MasterConfigSynchronization>
 81034ce:	4603      	mov	r3, r0
 81034d0:	2b00      	cmp	r3, #0
 81034d2:	d001      	beq.n	81034d8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 81034d4:	f000 fe12 	bl	81040fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81034d8:	2360      	movs	r3, #96	@ 0x60
 81034da:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 81034dc:	2300      	movs	r3, #0
 81034de:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81034e0:	2300      	movs	r3, #0
 81034e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 81034e4:	2300      	movs	r3, #0
 81034e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81034e8:	2300      	movs	r3, #0
 81034ea:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 81034ec:	2300      	movs	r3, #0
 81034ee:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 81034f0:	2300      	movs	r3, #0
 81034f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81034f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81034f8:	2200      	movs	r2, #0
 81034fa:	4619      	mov	r1, r3
 81034fc:	4818      	ldr	r0, [pc, #96]	@ (8103560 <MX_TIM1_Init+0x150>)
 81034fe:	f00a f82b 	bl	810d558 <HAL_TIM_PWM_ConfigChannel>
 8103502:	4603      	mov	r3, r0
 8103504:	2b00      	cmp	r3, #0
 8103506:	d001      	beq.n	810350c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8103508:	f000 fdf8 	bl	81040fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 810350c:	2300      	movs	r3, #0
 810350e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8103510:	2300      	movs	r3, #0
 8103512:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8103514:	2300      	movs	r3, #0
 8103516:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8103518:	2300      	movs	r3, #0
 810351a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 810351c:	2300      	movs	r3, #0
 810351e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8103520:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8103524:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8103526:	2300      	movs	r3, #0
 8103528:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 810352a:	2300      	movs	r3, #0
 810352c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 810352e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8103532:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8103534:	2300      	movs	r3, #0
 8103536:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8103538:	2300      	movs	r3, #0
 810353a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 810353c:	1d3b      	adds	r3, r7, #4
 810353e:	4619      	mov	r1, r3
 8103540:	4807      	ldr	r0, [pc, #28]	@ (8103560 <MX_TIM1_Init+0x150>)
 8103542:	f00a ff09 	bl	810e358 <HAL_TIMEx_ConfigBreakDeadTime>
 8103546:	4603      	mov	r3, r0
 8103548:	2b00      	cmp	r3, #0
 810354a:	d001      	beq.n	8103550 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 810354c:	f000 fdd6 	bl	81040fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8103550:	4803      	ldr	r0, [pc, #12]	@ (8103560 <MX_TIM1_Init+0x150>)
 8103552:	f001 f80b 	bl	810456c <HAL_TIM_MspPostInit>

}
 8103556:	bf00      	nop
 8103558:	3768      	adds	r7, #104	@ 0x68
 810355a:	46bd      	mov	sp, r7
 810355c:	bd80      	pop	{r7, pc}
 810355e:	bf00      	nop
 8103560:	10000348 	.word	0x10000348
 8103564:	40010000 	.word	0x40010000

08103568 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8103568:	b580      	push	{r7, lr}
 810356a:	b088      	sub	sp, #32
 810356c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810356e:	f107 0310 	add.w	r3, r7, #16
 8103572:	2200      	movs	r2, #0
 8103574:	601a      	str	r2, [r3, #0]
 8103576:	605a      	str	r2, [r3, #4]
 8103578:	609a      	str	r2, [r3, #8]
 810357a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810357c:	1d3b      	adds	r3, r7, #4
 810357e:	2200      	movs	r2, #0
 8103580:	601a      	str	r2, [r3, #0]
 8103582:	605a      	str	r2, [r3, #4]
 8103584:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8103586:	4b1e      	ldr	r3, [pc, #120]	@ (8103600 <MX_TIM2_Init+0x98>)
 8103588:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 810358c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 810358e:	4b1c      	ldr	r3, [pc, #112]	@ (8103600 <MX_TIM2_Init+0x98>)
 8103590:	22c7      	movs	r2, #199	@ 0xc7
 8103592:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8103594:	4b1a      	ldr	r3, [pc, #104]	@ (8103600 <MX_TIM2_Init+0x98>)
 8103596:	2200      	movs	r2, #0
 8103598:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 810359a:	4b19      	ldr	r3, [pc, #100]	@ (8103600 <MX_TIM2_Init+0x98>)
 810359c:	f242 720f 	movw	r2, #9999	@ 0x270f
 81035a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81035a2:	4b17      	ldr	r3, [pc, #92]	@ (8103600 <MX_TIM2_Init+0x98>)
 81035a4:	2200      	movs	r2, #0
 81035a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81035a8:	4b15      	ldr	r3, [pc, #84]	@ (8103600 <MX_TIM2_Init+0x98>)
 81035aa:	2200      	movs	r2, #0
 81035ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 81035ae:	4814      	ldr	r0, [pc, #80]	@ (8103600 <MX_TIM2_Init+0x98>)
 81035b0:	f009 fb74 	bl	810cc9c <HAL_TIM_Base_Init>
 81035b4:	4603      	mov	r3, r0
 81035b6:	2b00      	cmp	r3, #0
 81035b8:	d001      	beq.n	81035be <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 81035ba:	f000 fd9f 	bl	81040fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81035be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81035c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 81035c4:	f107 0310 	add.w	r3, r7, #16
 81035c8:	4619      	mov	r1, r3
 81035ca:	480d      	ldr	r0, [pc, #52]	@ (8103600 <MX_TIM2_Init+0x98>)
 81035cc:	f00a f8d8 	bl	810d780 <HAL_TIM_ConfigClockSource>
 81035d0:	4603      	mov	r3, r0
 81035d2:	2b00      	cmp	r3, #0
 81035d4:	d001      	beq.n	81035da <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 81035d6:	f000 fd91 	bl	81040fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81035da:	2300      	movs	r3, #0
 81035dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81035de:	2300      	movs	r3, #0
 81035e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 81035e2:	1d3b      	adds	r3, r7, #4
 81035e4:	4619      	mov	r1, r3
 81035e6:	4806      	ldr	r0, [pc, #24]	@ (8103600 <MX_TIM2_Init+0x98>)
 81035e8:	f00a fe28 	bl	810e23c <HAL_TIMEx_MasterConfigSynchronization>
 81035ec:	4603      	mov	r3, r0
 81035ee:	2b00      	cmp	r3, #0
 81035f0:	d001      	beq.n	81035f6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 81035f2:	f000 fd83 	bl	81040fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 81035f6:	bf00      	nop
 81035f8:	3720      	adds	r7, #32
 81035fa:	46bd      	mov	sp, r7
 81035fc:	bd80      	pop	{r7, pc}
 81035fe:	bf00      	nop
 8103600:	10000394 	.word	0x10000394

08103604 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8103604:	b580      	push	{r7, lr}
 8103606:	b08e      	sub	sp, #56	@ 0x38
 8103608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810360a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810360e:	2200      	movs	r2, #0
 8103610:	601a      	str	r2, [r3, #0]
 8103612:	605a      	str	r2, [r3, #4]
 8103614:	609a      	str	r2, [r3, #8]
 8103616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8103618:	f107 031c 	add.w	r3, r7, #28
 810361c:	2200      	movs	r2, #0
 810361e:	601a      	str	r2, [r3, #0]
 8103620:	605a      	str	r2, [r3, #4]
 8103622:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8103624:	463b      	mov	r3, r7
 8103626:	2200      	movs	r2, #0
 8103628:	601a      	str	r2, [r3, #0]
 810362a:	605a      	str	r2, [r3, #4]
 810362c:	609a      	str	r2, [r3, #8]
 810362e:	60da      	str	r2, [r3, #12]
 8103630:	611a      	str	r2, [r3, #16]
 8103632:	615a      	str	r2, [r3, #20]
 8103634:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8103636:	4b2c      	ldr	r3, [pc, #176]	@ (81036e8 <MX_TIM3_Init+0xe4>)
 8103638:	4a2c      	ldr	r2, [pc, #176]	@ (81036ec <MX_TIM3_Init+0xe8>)
 810363a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 810363c:	4b2a      	ldr	r3, [pc, #168]	@ (81036e8 <MX_TIM3_Init+0xe4>)
 810363e:	22c7      	movs	r2, #199	@ 0xc7
 8103640:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8103642:	4b29      	ldr	r3, [pc, #164]	@ (81036e8 <MX_TIM3_Init+0xe4>)
 8103644:	2200      	movs	r2, #0
 8103646:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50-1;
 8103648:	4b27      	ldr	r3, [pc, #156]	@ (81036e8 <MX_TIM3_Init+0xe4>)
 810364a:	2231      	movs	r2, #49	@ 0x31
 810364c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810364e:	4b26      	ldr	r3, [pc, #152]	@ (81036e8 <MX_TIM3_Init+0xe4>)
 8103650:	2200      	movs	r2, #0
 8103652:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8103654:	4b24      	ldr	r3, [pc, #144]	@ (81036e8 <MX_TIM3_Init+0xe4>)
 8103656:	2200      	movs	r2, #0
 8103658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 810365a:	4823      	ldr	r0, [pc, #140]	@ (81036e8 <MX_TIM3_Init+0xe4>)
 810365c:	f009 fb1e 	bl	810cc9c <HAL_TIM_Base_Init>
 8103660:	4603      	mov	r3, r0
 8103662:	2b00      	cmp	r3, #0
 8103664:	d001      	beq.n	810366a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8103666:	f000 fd49 	bl	81040fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810366a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810366e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8103670:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8103674:	4619      	mov	r1, r3
 8103676:	481c      	ldr	r0, [pc, #112]	@ (81036e8 <MX_TIM3_Init+0xe4>)
 8103678:	f00a f882 	bl	810d780 <HAL_TIM_ConfigClockSource>
 810367c:	4603      	mov	r3, r0
 810367e:	2b00      	cmp	r3, #0
 8103680:	d001      	beq.n	8103686 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8103682:	f000 fd3b 	bl	81040fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8103686:	4818      	ldr	r0, [pc, #96]	@ (81036e8 <MX_TIM3_Init+0xe4>)
 8103688:	f009 fc48 	bl	810cf1c <HAL_TIM_PWM_Init>
 810368c:	4603      	mov	r3, r0
 810368e:	2b00      	cmp	r3, #0
 8103690:	d001      	beq.n	8103696 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8103692:	f000 fd33 	bl	81040fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8103696:	2300      	movs	r3, #0
 8103698:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810369a:	2300      	movs	r3, #0
 810369c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 810369e:	f107 031c 	add.w	r3, r7, #28
 81036a2:	4619      	mov	r1, r3
 81036a4:	4810      	ldr	r0, [pc, #64]	@ (81036e8 <MX_TIM3_Init+0xe4>)
 81036a6:	f00a fdc9 	bl	810e23c <HAL_TIMEx_MasterConfigSynchronization>
 81036aa:	4603      	mov	r3, r0
 81036ac:	2b00      	cmp	r3, #0
 81036ae:	d001      	beq.n	81036b4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 81036b0:	f000 fd24 	bl	81040fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81036b4:	2360      	movs	r3, #96	@ 0x60
 81036b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 81036b8:	2300      	movs	r3, #0
 81036ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81036bc:	2300      	movs	r3, #0
 81036be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81036c0:	2300      	movs	r3, #0
 81036c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81036c4:	463b      	mov	r3, r7
 81036c6:	2200      	movs	r2, #0
 81036c8:	4619      	mov	r1, r3
 81036ca:	4807      	ldr	r0, [pc, #28]	@ (81036e8 <MX_TIM3_Init+0xe4>)
 81036cc:	f009 ff44 	bl	810d558 <HAL_TIM_PWM_ConfigChannel>
 81036d0:	4603      	mov	r3, r0
 81036d2:	2b00      	cmp	r3, #0
 81036d4:	d001      	beq.n	81036da <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 81036d6:	f000 fd11 	bl	81040fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 81036da:	4803      	ldr	r0, [pc, #12]	@ (81036e8 <MX_TIM3_Init+0xe4>)
 81036dc:	f000 ff46 	bl	810456c <HAL_TIM_MspPostInit>

}
 81036e0:	bf00      	nop
 81036e2:	3738      	adds	r7, #56	@ 0x38
 81036e4:	46bd      	mov	sp, r7
 81036e6:	bd80      	pop	{r7, pc}
 81036e8:	100003e0 	.word	0x100003e0
 81036ec:	40000400 	.word	0x40000400

081036f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 81036f0:	b580      	push	{r7, lr}
 81036f2:	b08c      	sub	sp, #48	@ 0x30
 81036f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 81036f6:	f107 030c 	add.w	r3, r7, #12
 81036fa:	2224      	movs	r2, #36	@ 0x24
 81036fc:	2100      	movs	r1, #0
 81036fe:	4618      	mov	r0, r3
 8103700:	f00e ff0c 	bl	811251c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8103704:	463b      	mov	r3, r7
 8103706:	2200      	movs	r2, #0
 8103708:	601a      	str	r2, [r3, #0]
 810370a:	605a      	str	r2, [r3, #4]
 810370c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 810370e:	4b21      	ldr	r3, [pc, #132]	@ (8103794 <MX_TIM4_Init+0xa4>)
 8103710:	4a21      	ldr	r2, [pc, #132]	@ (8103798 <MX_TIM4_Init+0xa8>)
 8103712:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8103714:	4b1f      	ldr	r3, [pc, #124]	@ (8103794 <MX_TIM4_Init+0xa4>)
 8103716:	2200      	movs	r2, #0
 8103718:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 810371a:	4b1e      	ldr	r3, [pc, #120]	@ (8103794 <MX_TIM4_Init+0xa4>)
 810371c:	2200      	movs	r2, #0
 810371e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3423-1;
 8103720:	4b1c      	ldr	r3, [pc, #112]	@ (8103794 <MX_TIM4_Init+0xa4>)
 8103722:	f640 525e 	movw	r2, #3422	@ 0xd5e
 8103726:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8103728:	4b1a      	ldr	r3, [pc, #104]	@ (8103794 <MX_TIM4_Init+0xa4>)
 810372a:	2200      	movs	r2, #0
 810372c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810372e:	4b19      	ldr	r3, [pc, #100]	@ (8103794 <MX_TIM4_Init+0xa4>)
 8103730:	2200      	movs	r2, #0
 8103732:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8103734:	2303      	movs	r3, #3
 8103736:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8103738:	2300      	movs	r3, #0
 810373a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 810373c:	2301      	movs	r3, #1
 810373e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8103740:	2300      	movs	r3, #0
 8103742:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8103744:	2300      	movs	r3, #0
 8103746:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8103748:	2300      	movs	r3, #0
 810374a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 810374c:	2301      	movs	r3, #1
 810374e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8103750:	2300      	movs	r3, #0
 8103752:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8103754:	2300      	movs	r3, #0
 8103756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8103758:	f107 030c 	add.w	r3, r7, #12
 810375c:	4619      	mov	r1, r3
 810375e:	480d      	ldr	r0, [pc, #52]	@ (8103794 <MX_TIM4_Init+0xa4>)
 8103760:	f009 fd4c 	bl	810d1fc <HAL_TIM_Encoder_Init>
 8103764:	4603      	mov	r3, r0
 8103766:	2b00      	cmp	r3, #0
 8103768:	d001      	beq.n	810376e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 810376a:	f000 fcc7 	bl	81040fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810376e:	2300      	movs	r3, #0
 8103770:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8103772:	2300      	movs	r3, #0
 8103774:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8103776:	463b      	mov	r3, r7
 8103778:	4619      	mov	r1, r3
 810377a:	4806      	ldr	r0, [pc, #24]	@ (8103794 <MX_TIM4_Init+0xa4>)
 810377c:	f00a fd5e 	bl	810e23c <HAL_TIMEx_MasterConfigSynchronization>
 8103780:	4603      	mov	r3, r0
 8103782:	2b00      	cmp	r3, #0
 8103784:	d001      	beq.n	810378a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8103786:	f000 fcb9 	bl	81040fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 810378a:	bf00      	nop
 810378c:	3730      	adds	r7, #48	@ 0x30
 810378e:	46bd      	mov	sp, r7
 8103790:	bd80      	pop	{r7, pc}
 8103792:	bf00      	nop
 8103794:	1000042c 	.word	0x1000042c
 8103798:	40000800 	.word	0x40000800

0810379c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 810379c:	b580      	push	{r7, lr}
 810379e:	b084      	sub	sp, #16
 81037a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81037a2:	1d3b      	adds	r3, r7, #4
 81037a4:	2200      	movs	r2, #0
 81037a6:	601a      	str	r2, [r3, #0]
 81037a8:	605a      	str	r2, [r3, #4]
 81037aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 81037ac:	4b15      	ldr	r3, [pc, #84]	@ (8103804 <MX_TIM6_Init+0x68>)
 81037ae:	4a16      	ldr	r2, [pc, #88]	@ (8103808 <MX_TIM6_Init+0x6c>)
 81037b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 20000-1;
 81037b2:	4b14      	ldr	r3, [pc, #80]	@ (8103804 <MX_TIM6_Init+0x68>)
 81037b4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 81037b8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 81037ba:	4b12      	ldr	r3, [pc, #72]	@ (8103804 <MX_TIM6_Init+0x68>)
 81037bc:	2200      	movs	r2, #0
 81037be:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 30000;
 81037c0:	4b10      	ldr	r3, [pc, #64]	@ (8103804 <MX_TIM6_Init+0x68>)
 81037c2:	f247 5230 	movw	r2, #30000	@ 0x7530
 81037c6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81037c8:	4b0e      	ldr	r3, [pc, #56]	@ (8103804 <MX_TIM6_Init+0x68>)
 81037ca:	2200      	movs	r2, #0
 81037cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 81037ce:	480d      	ldr	r0, [pc, #52]	@ (8103804 <MX_TIM6_Init+0x68>)
 81037d0:	f009 fa64 	bl	810cc9c <HAL_TIM_Base_Init>
 81037d4:	4603      	mov	r3, r0
 81037d6:	2b00      	cmp	r3, #0
 81037d8:	d001      	beq.n	81037de <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 81037da:	f000 fc8f 	bl	81040fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81037de:	2300      	movs	r3, #0
 81037e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81037e2:	2300      	movs	r3, #0
 81037e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 81037e6:	1d3b      	adds	r3, r7, #4
 81037e8:	4619      	mov	r1, r3
 81037ea:	4806      	ldr	r0, [pc, #24]	@ (8103804 <MX_TIM6_Init+0x68>)
 81037ec:	f00a fd26 	bl	810e23c <HAL_TIMEx_MasterConfigSynchronization>
 81037f0:	4603      	mov	r3, r0
 81037f2:	2b00      	cmp	r3, #0
 81037f4:	d001      	beq.n	81037fa <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 81037f6:	f000 fc81 	bl	81040fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 81037fa:	bf00      	nop
 81037fc:	3710      	adds	r7, #16
 81037fe:	46bd      	mov	sp, r7
 8103800:	bd80      	pop	{r7, pc}
 8103802:	bf00      	nop
 8103804:	10000478 	.word	0x10000478
 8103808:	40001000 	.word	0x40001000

0810380c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 810380c:	b580      	push	{r7, lr}
 810380e:	b084      	sub	sp, #16
 8103810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8103812:	1d3b      	adds	r3, r7, #4
 8103814:	2200      	movs	r2, #0
 8103816:	601a      	str	r2, [r3, #0]
 8103818:	605a      	str	r2, [r3, #4]
 810381a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 810381c:	4b14      	ldr	r3, [pc, #80]	@ (8103870 <MX_TIM7_Init+0x64>)
 810381e:	4a15      	ldr	r2, [pc, #84]	@ (8103874 <MX_TIM7_Init+0x68>)
 8103820:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8103822:	4b13      	ldr	r3, [pc, #76]	@ (8103870 <MX_TIM7_Init+0x64>)
 8103824:	22c7      	movs	r2, #199	@ 0xc7
 8103826:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8103828:	4b11      	ldr	r3, [pc, #68]	@ (8103870 <MX_TIM7_Init+0x64>)
 810382a:	2200      	movs	r2, #0
 810382c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 810382e:	4b10      	ldr	r3, [pc, #64]	@ (8103870 <MX_TIM7_Init+0x64>)
 8103830:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8103834:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8103836:	4b0e      	ldr	r3, [pc, #56]	@ (8103870 <MX_TIM7_Init+0x64>)
 8103838:	2200      	movs	r2, #0
 810383a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 810383c:	480c      	ldr	r0, [pc, #48]	@ (8103870 <MX_TIM7_Init+0x64>)
 810383e:	f009 fa2d 	bl	810cc9c <HAL_TIM_Base_Init>
 8103842:	4603      	mov	r3, r0
 8103844:	2b00      	cmp	r3, #0
 8103846:	d001      	beq.n	810384c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8103848:	f000 fc58 	bl	81040fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810384c:	2300      	movs	r3, #0
 810384e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8103850:	2300      	movs	r3, #0
 8103852:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8103854:	1d3b      	adds	r3, r7, #4
 8103856:	4619      	mov	r1, r3
 8103858:	4805      	ldr	r0, [pc, #20]	@ (8103870 <MX_TIM7_Init+0x64>)
 810385a:	f00a fcef 	bl	810e23c <HAL_TIMEx_MasterConfigSynchronization>
 810385e:	4603      	mov	r3, r0
 8103860:	2b00      	cmp	r3, #0
 8103862:	d001      	beq.n	8103868 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8103864:	f000 fc4a 	bl	81040fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8103868:	bf00      	nop
 810386a:	3710      	adds	r7, #16
 810386c:	46bd      	mov	sp, r7
 810386e:	bd80      	pop	{r7, pc}
 8103870:	100004c4 	.word	0x100004c4
 8103874:	40001400 	.word	0x40001400

08103878 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8103878:	b580      	push	{r7, lr}
 810387a:	b08c      	sub	sp, #48	@ 0x30
 810387c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 810387e:	f107 030c 	add.w	r3, r7, #12
 8103882:	2224      	movs	r2, #36	@ 0x24
 8103884:	2100      	movs	r1, #0
 8103886:	4618      	mov	r0, r3
 8103888:	f00e fe48 	bl	811251c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810388c:	463b      	mov	r3, r7
 810388e:	2200      	movs	r2, #0
 8103890:	601a      	str	r2, [r3, #0]
 8103892:	605a      	str	r2, [r3, #4]
 8103894:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8103896:	4b23      	ldr	r3, [pc, #140]	@ (8103924 <MX_TIM8_Init+0xac>)
 8103898:	4a23      	ldr	r2, [pc, #140]	@ (8103928 <MX_TIM8_Init+0xb0>)
 810389a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 810389c:	4b21      	ldr	r3, [pc, #132]	@ (8103924 <MX_TIM8_Init+0xac>)
 810389e:	2200      	movs	r2, #0
 81038a0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 81038a2:	4b20      	ldr	r3, [pc, #128]	@ (8103924 <MX_TIM8_Init+0xac>)
 81038a4:	2200      	movs	r2, #0
 81038a6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4000-1;
 81038a8:	4b1e      	ldr	r3, [pc, #120]	@ (8103924 <MX_TIM8_Init+0xac>)
 81038aa:	f640 729f 	movw	r2, #3999	@ 0xf9f
 81038ae:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81038b0:	4b1c      	ldr	r3, [pc, #112]	@ (8103924 <MX_TIM8_Init+0xac>)
 81038b2:	2200      	movs	r2, #0
 81038b4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 81038b6:	4b1b      	ldr	r3, [pc, #108]	@ (8103924 <MX_TIM8_Init+0xac>)
 81038b8:	2200      	movs	r2, #0
 81038ba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81038bc:	4b19      	ldr	r3, [pc, #100]	@ (8103924 <MX_TIM8_Init+0xac>)
 81038be:	2200      	movs	r2, #0
 81038c0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 81038c2:	2303      	movs	r3, #3
 81038c4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 81038c6:	2300      	movs	r3, #0
 81038c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 81038ca:	2301      	movs	r3, #1
 81038cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 81038ce:	2300      	movs	r3, #0
 81038d0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 81038d2:	230a      	movs	r3, #10
 81038d4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 81038d6:	2300      	movs	r3, #0
 81038d8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 81038da:	2301      	movs	r3, #1
 81038dc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 81038de:	2300      	movs	r3, #0
 81038e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 81038e2:	230a      	movs	r3, #10
 81038e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 81038e6:	f107 030c 	add.w	r3, r7, #12
 81038ea:	4619      	mov	r1, r3
 81038ec:	480d      	ldr	r0, [pc, #52]	@ (8103924 <MX_TIM8_Init+0xac>)
 81038ee:	f009 fc85 	bl	810d1fc <HAL_TIM_Encoder_Init>
 81038f2:	4603      	mov	r3, r0
 81038f4:	2b00      	cmp	r3, #0
 81038f6:	d001      	beq.n	81038fc <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 81038f8:	f000 fc00 	bl	81040fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81038fc:	2300      	movs	r3, #0
 81038fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8103900:	2300      	movs	r3, #0
 8103902:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8103904:	2300      	movs	r3, #0
 8103906:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8103908:	463b      	mov	r3, r7
 810390a:	4619      	mov	r1, r3
 810390c:	4805      	ldr	r0, [pc, #20]	@ (8103924 <MX_TIM8_Init+0xac>)
 810390e:	f00a fc95 	bl	810e23c <HAL_TIMEx_MasterConfigSynchronization>
 8103912:	4603      	mov	r3, r0
 8103914:	2b00      	cmp	r3, #0
 8103916:	d001      	beq.n	810391c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8103918:	f000 fbf0 	bl	81040fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 810391c:	bf00      	nop
 810391e:	3730      	adds	r7, #48	@ 0x30
 8103920:	46bd      	mov	sp, r7
 8103922:	bd80      	pop	{r7, pc}
 8103924:	10000510 	.word	0x10000510
 8103928:	40010400 	.word	0x40010400

0810392c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 810392c:	b580      	push	{r7, lr}
 810392e:	b088      	sub	sp, #32
 8103930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8103932:	f107 0310 	add.w	r3, r7, #16
 8103936:	2200      	movs	r2, #0
 8103938:	601a      	str	r2, [r3, #0]
 810393a:	605a      	str	r2, [r3, #4]
 810393c:	609a      	str	r2, [r3, #8]
 810393e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8103940:	1d3b      	adds	r3, r7, #4
 8103942:	2200      	movs	r2, #0
 8103944:	601a      	str	r2, [r3, #0]
 8103946:	605a      	str	r2, [r3, #4]
 8103948:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 810394a:	4b1d      	ldr	r3, [pc, #116]	@ (81039c0 <MX_TIM12_Init+0x94>)
 810394c:	4a1d      	ldr	r2, [pc, #116]	@ (81039c4 <MX_TIM12_Init+0x98>)
 810394e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8103950:	4b1b      	ldr	r3, [pc, #108]	@ (81039c0 <MX_TIM12_Init+0x94>)
 8103952:	22c7      	movs	r2, #199	@ 0xc7
 8103954:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8103956:	4b1a      	ldr	r3, [pc, #104]	@ (81039c0 <MX_TIM12_Init+0x94>)
 8103958:	2200      	movs	r2, #0
 810395a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 810395c:	4b18      	ldr	r3, [pc, #96]	@ (81039c0 <MX_TIM12_Init+0x94>)
 810395e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8103962:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8103964:	4b16      	ldr	r3, [pc, #88]	@ (81039c0 <MX_TIM12_Init+0x94>)
 8103966:	2200      	movs	r2, #0
 8103968:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810396a:	4b15      	ldr	r3, [pc, #84]	@ (81039c0 <MX_TIM12_Init+0x94>)
 810396c:	2200      	movs	r2, #0
 810396e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8103970:	4813      	ldr	r0, [pc, #76]	@ (81039c0 <MX_TIM12_Init+0x94>)
 8103972:	f009 f993 	bl	810cc9c <HAL_TIM_Base_Init>
 8103976:	4603      	mov	r3, r0
 8103978:	2b00      	cmp	r3, #0
 810397a:	d001      	beq.n	8103980 <MX_TIM12_Init+0x54>
  {
    Error_Handler();
 810397c:	f000 fbbe 	bl	81040fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8103980:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8103984:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8103986:	f107 0310 	add.w	r3, r7, #16
 810398a:	4619      	mov	r1, r3
 810398c:	480c      	ldr	r0, [pc, #48]	@ (81039c0 <MX_TIM12_Init+0x94>)
 810398e:	f009 fef7 	bl	810d780 <HAL_TIM_ConfigClockSource>
 8103992:	4603      	mov	r3, r0
 8103994:	2b00      	cmp	r3, #0
 8103996:	d001      	beq.n	810399c <MX_TIM12_Init+0x70>
  {
    Error_Handler();
 8103998:	f000 fbb0 	bl	81040fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810399c:	2300      	movs	r3, #0
 810399e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81039a0:	2300      	movs	r3, #0
 81039a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 81039a4:	1d3b      	adds	r3, r7, #4
 81039a6:	4619      	mov	r1, r3
 81039a8:	4805      	ldr	r0, [pc, #20]	@ (81039c0 <MX_TIM12_Init+0x94>)
 81039aa:	f00a fc47 	bl	810e23c <HAL_TIMEx_MasterConfigSynchronization>
 81039ae:	4603      	mov	r3, r0
 81039b0:	2b00      	cmp	r3, #0
 81039b2:	d001      	beq.n	81039b8 <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 81039b4:	f000 fba2 	bl	81040fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 81039b8:	bf00      	nop
 81039ba:	3720      	adds	r7, #32
 81039bc:	46bd      	mov	sp, r7
 81039be:	bd80      	pop	{r7, pc}
 81039c0:	1000055c 	.word	0x1000055c
 81039c4:	40001800 	.word	0x40001800

081039c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 81039c8:	b580      	push	{r7, lr}
 81039ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 81039cc:	4b22      	ldr	r3, [pc, #136]	@ (8103a58 <MX_USART2_UART_Init+0x90>)
 81039ce:	4a23      	ldr	r2, [pc, #140]	@ (8103a5c <MX_USART2_UART_Init+0x94>)
 81039d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 81039d2:	4b21      	ldr	r3, [pc, #132]	@ (8103a58 <MX_USART2_UART_Init+0x90>)
 81039d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 81039d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 81039da:	4b1f      	ldr	r3, [pc, #124]	@ (8103a58 <MX_USART2_UART_Init+0x90>)
 81039dc:	2200      	movs	r2, #0
 81039de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 81039e0:	4b1d      	ldr	r3, [pc, #116]	@ (8103a58 <MX_USART2_UART_Init+0x90>)
 81039e2:	2200      	movs	r2, #0
 81039e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 81039e6:	4b1c      	ldr	r3, [pc, #112]	@ (8103a58 <MX_USART2_UART_Init+0x90>)
 81039e8:	2200      	movs	r2, #0
 81039ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 81039ec:	4b1a      	ldr	r3, [pc, #104]	@ (8103a58 <MX_USART2_UART_Init+0x90>)
 81039ee:	220c      	movs	r2, #12
 81039f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81039f2:	4b19      	ldr	r3, [pc, #100]	@ (8103a58 <MX_USART2_UART_Init+0x90>)
 81039f4:	2200      	movs	r2, #0
 81039f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 81039f8:	4b17      	ldr	r3, [pc, #92]	@ (8103a58 <MX_USART2_UART_Init+0x90>)
 81039fa:	2200      	movs	r2, #0
 81039fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81039fe:	4b16      	ldr	r3, [pc, #88]	@ (8103a58 <MX_USART2_UART_Init+0x90>)
 8103a00:	2200      	movs	r2, #0
 8103a02:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8103a04:	4b14      	ldr	r3, [pc, #80]	@ (8103a58 <MX_USART2_UART_Init+0x90>)
 8103a06:	2200      	movs	r2, #0
 8103a08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8103a0a:	4b13      	ldr	r3, [pc, #76]	@ (8103a58 <MX_USART2_UART_Init+0x90>)
 8103a0c:	2200      	movs	r2, #0
 8103a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8103a10:	4811      	ldr	r0, [pc, #68]	@ (8103a58 <MX_USART2_UART_Init+0x90>)
 8103a12:	f00a fd3d 	bl	810e490 <HAL_UART_Init>
 8103a16:	4603      	mov	r3, r0
 8103a18:	2b00      	cmp	r3, #0
 8103a1a:	d001      	beq.n	8103a20 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8103a1c:	f000 fb6e 	bl	81040fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103a20:	2100      	movs	r1, #0
 8103a22:	480d      	ldr	r0, [pc, #52]	@ (8103a58 <MX_USART2_UART_Init+0x90>)
 8103a24:	f00d f95f 	bl	8110ce6 <HAL_UARTEx_SetTxFifoThreshold>
 8103a28:	4603      	mov	r3, r0
 8103a2a:	2b00      	cmp	r3, #0
 8103a2c:	d001      	beq.n	8103a32 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8103a2e:	f000 fb65 	bl	81040fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103a32:	2100      	movs	r1, #0
 8103a34:	4808      	ldr	r0, [pc, #32]	@ (8103a58 <MX_USART2_UART_Init+0x90>)
 8103a36:	f00d f994 	bl	8110d62 <HAL_UARTEx_SetRxFifoThreshold>
 8103a3a:	4603      	mov	r3, r0
 8103a3c:	2b00      	cmp	r3, #0
 8103a3e:	d001      	beq.n	8103a44 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8103a40:	f000 fb5c 	bl	81040fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8103a44:	4804      	ldr	r0, [pc, #16]	@ (8103a58 <MX_USART2_UART_Init+0x90>)
 8103a46:	f00d f915 	bl	8110c74 <HAL_UARTEx_DisableFifoMode>
 8103a4a:	4603      	mov	r3, r0
 8103a4c:	2b00      	cmp	r3, #0
 8103a4e:	d001      	beq.n	8103a54 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8103a50:	f000 fb54 	bl	81040fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8103a54:	bf00      	nop
 8103a56:	bd80      	pop	{r7, pc}
 8103a58:	100005a8 	.word	0x100005a8
 8103a5c:	40004400 	.word	0x40004400

08103a60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8103a60:	b580      	push	{r7, lr}
 8103a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8103a64:	4b22      	ldr	r3, [pc, #136]	@ (8103af0 <MX_USART3_UART_Init+0x90>)
 8103a66:	4a23      	ldr	r2, [pc, #140]	@ (8103af4 <MX_USART3_UART_Init+0x94>)
 8103a68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8103a6a:	4b21      	ldr	r3, [pc, #132]	@ (8103af0 <MX_USART3_UART_Init+0x90>)
 8103a6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8103a70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8103a72:	4b1f      	ldr	r3, [pc, #124]	@ (8103af0 <MX_USART3_UART_Init+0x90>)
 8103a74:	2200      	movs	r2, #0
 8103a76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8103a78:	4b1d      	ldr	r3, [pc, #116]	@ (8103af0 <MX_USART3_UART_Init+0x90>)
 8103a7a:	2200      	movs	r2, #0
 8103a7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8103a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8103af0 <MX_USART3_UART_Init+0x90>)
 8103a80:	2200      	movs	r2, #0
 8103a82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8103a84:	4b1a      	ldr	r3, [pc, #104]	@ (8103af0 <MX_USART3_UART_Init+0x90>)
 8103a86:	220c      	movs	r2, #12
 8103a88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8103a8a:	4b19      	ldr	r3, [pc, #100]	@ (8103af0 <MX_USART3_UART_Init+0x90>)
 8103a8c:	2200      	movs	r2, #0
 8103a8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8103a90:	4b17      	ldr	r3, [pc, #92]	@ (8103af0 <MX_USART3_UART_Init+0x90>)
 8103a92:	2200      	movs	r2, #0
 8103a94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8103a96:	4b16      	ldr	r3, [pc, #88]	@ (8103af0 <MX_USART3_UART_Init+0x90>)
 8103a98:	2200      	movs	r2, #0
 8103a9a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8103a9c:	4b14      	ldr	r3, [pc, #80]	@ (8103af0 <MX_USART3_UART_Init+0x90>)
 8103a9e:	2200      	movs	r2, #0
 8103aa0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8103aa2:	4b13      	ldr	r3, [pc, #76]	@ (8103af0 <MX_USART3_UART_Init+0x90>)
 8103aa4:	2200      	movs	r2, #0
 8103aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8103aa8:	4811      	ldr	r0, [pc, #68]	@ (8103af0 <MX_USART3_UART_Init+0x90>)
 8103aaa:	f00a fcf1 	bl	810e490 <HAL_UART_Init>
 8103aae:	4603      	mov	r3, r0
 8103ab0:	2b00      	cmp	r3, #0
 8103ab2:	d001      	beq.n	8103ab8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8103ab4:	f000 fb22 	bl	81040fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103ab8:	2100      	movs	r1, #0
 8103aba:	480d      	ldr	r0, [pc, #52]	@ (8103af0 <MX_USART3_UART_Init+0x90>)
 8103abc:	f00d f913 	bl	8110ce6 <HAL_UARTEx_SetTxFifoThreshold>
 8103ac0:	4603      	mov	r3, r0
 8103ac2:	2b00      	cmp	r3, #0
 8103ac4:	d001      	beq.n	8103aca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8103ac6:	f000 fb19 	bl	81040fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103aca:	2100      	movs	r1, #0
 8103acc:	4808      	ldr	r0, [pc, #32]	@ (8103af0 <MX_USART3_UART_Init+0x90>)
 8103ace:	f00d f948 	bl	8110d62 <HAL_UARTEx_SetRxFifoThreshold>
 8103ad2:	4603      	mov	r3, r0
 8103ad4:	2b00      	cmp	r3, #0
 8103ad6:	d001      	beq.n	8103adc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8103ad8:	f000 fb10 	bl	81040fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8103adc:	4804      	ldr	r0, [pc, #16]	@ (8103af0 <MX_USART3_UART_Init+0x90>)
 8103ade:	f00d f8c9 	bl	8110c74 <HAL_UARTEx_DisableFifoMode>
 8103ae2:	4603      	mov	r3, r0
 8103ae4:	2b00      	cmp	r3, #0
 8103ae6:	d001      	beq.n	8103aec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8103ae8:	f000 fb08 	bl	81040fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8103aec:	bf00      	nop
 8103aee:	bd80      	pop	{r7, pc}
 8103af0:	1000063c 	.word	0x1000063c
 8103af4:	40004800 	.word	0x40004800

08103af8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8103af8:	b580      	push	{r7, lr}
 8103afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8103afc:	4b22      	ldr	r3, [pc, #136]	@ (8103b88 <MX_USART6_UART_Init+0x90>)
 8103afe:	4a23      	ldr	r2, [pc, #140]	@ (8103b8c <MX_USART6_UART_Init+0x94>)
 8103b00:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8103b02:	4b21      	ldr	r3, [pc, #132]	@ (8103b88 <MX_USART6_UART_Init+0x90>)
 8103b04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8103b08:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8103b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8103b88 <MX_USART6_UART_Init+0x90>)
 8103b0c:	2200      	movs	r2, #0
 8103b0e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8103b10:	4b1d      	ldr	r3, [pc, #116]	@ (8103b88 <MX_USART6_UART_Init+0x90>)
 8103b12:	2200      	movs	r2, #0
 8103b14:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8103b16:	4b1c      	ldr	r3, [pc, #112]	@ (8103b88 <MX_USART6_UART_Init+0x90>)
 8103b18:	2200      	movs	r2, #0
 8103b1a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8103b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8103b88 <MX_USART6_UART_Init+0x90>)
 8103b1e:	220c      	movs	r2, #12
 8103b20:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8103b22:	4b19      	ldr	r3, [pc, #100]	@ (8103b88 <MX_USART6_UART_Init+0x90>)
 8103b24:	2200      	movs	r2, #0
 8103b26:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8103b28:	4b17      	ldr	r3, [pc, #92]	@ (8103b88 <MX_USART6_UART_Init+0x90>)
 8103b2a:	2200      	movs	r2, #0
 8103b2c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8103b2e:	4b16      	ldr	r3, [pc, #88]	@ (8103b88 <MX_USART6_UART_Init+0x90>)
 8103b30:	2200      	movs	r2, #0
 8103b32:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8103b34:	4b14      	ldr	r3, [pc, #80]	@ (8103b88 <MX_USART6_UART_Init+0x90>)
 8103b36:	2200      	movs	r2, #0
 8103b38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8103b3a:	4b13      	ldr	r3, [pc, #76]	@ (8103b88 <MX_USART6_UART_Init+0x90>)
 8103b3c:	2200      	movs	r2, #0
 8103b3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8103b40:	4811      	ldr	r0, [pc, #68]	@ (8103b88 <MX_USART6_UART_Init+0x90>)
 8103b42:	f00a fca5 	bl	810e490 <HAL_UART_Init>
 8103b46:	4603      	mov	r3, r0
 8103b48:	2b00      	cmp	r3, #0
 8103b4a:	d001      	beq.n	8103b50 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8103b4c:	f000 fad6 	bl	81040fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103b50:	2100      	movs	r1, #0
 8103b52:	480d      	ldr	r0, [pc, #52]	@ (8103b88 <MX_USART6_UART_Init+0x90>)
 8103b54:	f00d f8c7 	bl	8110ce6 <HAL_UARTEx_SetTxFifoThreshold>
 8103b58:	4603      	mov	r3, r0
 8103b5a:	2b00      	cmp	r3, #0
 8103b5c:	d001      	beq.n	8103b62 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8103b5e:	f000 facd 	bl	81040fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103b62:	2100      	movs	r1, #0
 8103b64:	4808      	ldr	r0, [pc, #32]	@ (8103b88 <MX_USART6_UART_Init+0x90>)
 8103b66:	f00d f8fc 	bl	8110d62 <HAL_UARTEx_SetRxFifoThreshold>
 8103b6a:	4603      	mov	r3, r0
 8103b6c:	2b00      	cmp	r3, #0
 8103b6e:	d001      	beq.n	8103b74 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8103b70:	f000 fac4 	bl	81040fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8103b74:	4804      	ldr	r0, [pc, #16]	@ (8103b88 <MX_USART6_UART_Init+0x90>)
 8103b76:	f00d f87d 	bl	8110c74 <HAL_UARTEx_DisableFifoMode>
 8103b7a:	4603      	mov	r3, r0
 8103b7c:	2b00      	cmp	r3, #0
 8103b7e:	d001      	beq.n	8103b84 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8103b80:	f000 fabc 	bl	81040fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8103b84:	bf00      	nop
 8103b86:	bd80      	pop	{r7, pc}
 8103b88:	100006d0 	.word	0x100006d0
 8103b8c:	40011400 	.word	0x40011400

08103b90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8103b90:	b580      	push	{r7, lr}
 8103b92:	b082      	sub	sp, #8
 8103b94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8103b96:	4b0d      	ldr	r3, [pc, #52]	@ (8103bcc <MX_DMA_Init+0x3c>)
 8103b98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8103bcc <MX_DMA_Init+0x3c>)
 8103b9e:	f043 0302 	orr.w	r3, r3, #2
 8103ba2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8103ba6:	4b09      	ldr	r3, [pc, #36]	@ (8103bcc <MX_DMA_Init+0x3c>)
 8103ba8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103bac:	f003 0302 	and.w	r3, r3, #2
 8103bb0:	607b      	str	r3, [r7, #4]
 8103bb2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8103bb4:	2200      	movs	r2, #0
 8103bb6:	2100      	movs	r1, #0
 8103bb8:	2039      	movs	r0, #57	@ 0x39
 8103bba:	f002 feac 	bl	8106916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8103bbe:	2039      	movs	r0, #57	@ 0x39
 8103bc0:	f002 fec3 	bl	810694a <HAL_NVIC_EnableIRQ>

}
 8103bc4:	bf00      	nop
 8103bc6:	3708      	adds	r7, #8
 8103bc8:	46bd      	mov	sp, r7
 8103bca:	bd80      	pop	{r7, pc}
 8103bcc:	58024400 	.word	0x58024400

08103bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8103bd0:	b580      	push	{r7, lr}
 8103bd2:	b08c      	sub	sp, #48	@ 0x30
 8103bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103bd6:	f107 031c 	add.w	r3, r7, #28
 8103bda:	2200      	movs	r2, #0
 8103bdc:	601a      	str	r2, [r3, #0]
 8103bde:	605a      	str	r2, [r3, #4]
 8103be0:	609a      	str	r2, [r3, #8]
 8103be2:	60da      	str	r2, [r3, #12]
 8103be4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8103be6:	4b55      	ldr	r3, [pc, #340]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103bec:	4a53      	ldr	r2, [pc, #332]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103bee:	f043 0304 	orr.w	r3, r3, #4
 8103bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103bf6:	4b51      	ldr	r3, [pc, #324]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103bfc:	f003 0304 	and.w	r3, r3, #4
 8103c00:	61bb      	str	r3, [r7, #24]
 8103c02:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8103c04:	4b4d      	ldr	r3, [pc, #308]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c0a:	4a4c      	ldr	r2, [pc, #304]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103c0c:	f043 0301 	orr.w	r3, r3, #1
 8103c10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103c14:	4b49      	ldr	r3, [pc, #292]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c1a:	f003 0301 	and.w	r3, r3, #1
 8103c1e:	617b      	str	r3, [r7, #20]
 8103c20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8103c22:	4b46      	ldr	r3, [pc, #280]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c28:	4a44      	ldr	r2, [pc, #272]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103c2a:	f043 0320 	orr.w	r3, r3, #32
 8103c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103c32:	4b42      	ldr	r3, [pc, #264]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c38:	f003 0320 	and.w	r3, r3, #32
 8103c3c:	613b      	str	r3, [r7, #16]
 8103c3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8103c40:	4b3e      	ldr	r3, [pc, #248]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c46:	4a3d      	ldr	r2, [pc, #244]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103c48:	f043 0310 	orr.w	r3, r3, #16
 8103c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103c50:	4b3a      	ldr	r3, [pc, #232]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c56:	f003 0310 	and.w	r3, r3, #16
 8103c5a:	60fb      	str	r3, [r7, #12]
 8103c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8103c5e:	4b37      	ldr	r3, [pc, #220]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c64:	4a35      	ldr	r2, [pc, #212]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103c66:	f043 0302 	orr.w	r3, r3, #2
 8103c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103c6e:	4b33      	ldr	r3, [pc, #204]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c74:	f003 0302 	and.w	r3, r3, #2
 8103c78:	60bb      	str	r3, [r7, #8]
 8103c7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8103c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c82:	4a2e      	ldr	r2, [pc, #184]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103c84:	f043 0308 	orr.w	r3, r3, #8
 8103c88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c92:	f003 0308 	and.w	r3, r3, #8
 8103c96:	607b      	str	r3, [r7, #4]
 8103c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8103c9a:	4b28      	ldr	r3, [pc, #160]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103ca0:	4a26      	ldr	r2, [pc, #152]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103ca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8103ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103caa:	4b24      	ldr	r3, [pc, #144]	@ (8103d3c <MX_GPIO_Init+0x16c>)
 8103cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103cb4:	603b      	str	r3, [r7, #0]
 8103cb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8103cb8:	2200      	movs	r2, #0
 8103cba:	2130      	movs	r1, #48	@ 0x30
 8103cbc:	4820      	ldr	r0, [pc, #128]	@ (8103d40 <MX_GPIO_Init+0x170>)
 8103cbe:	f005 fa47 	bl	8109150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8103cc2:	2200      	movs	r2, #0
 8103cc4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8103cc8:	481e      	ldr	r0, [pc, #120]	@ (8103d44 <MX_GPIO_Init+0x174>)
 8103cca:	f005 fa41 	bl	8109150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8103cce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8103cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8103cd4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8103cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103cda:	2300      	movs	r3, #0
 8103cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8103cde:	f107 031c 	add.w	r3, r7, #28
 8103ce2:	4619      	mov	r1, r3
 8103ce4:	4818      	ldr	r0, [pc, #96]	@ (8103d48 <MX_GPIO_Init+0x178>)
 8103ce6:	f005 f883 	bl	8108df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8103cea:	2330      	movs	r3, #48	@ 0x30
 8103cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8103cee:	2301      	movs	r3, #1
 8103cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103cf2:	2300      	movs	r3, #0
 8103cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103cf6:	2300      	movs	r3, #0
 8103cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8103cfa:	f107 031c 	add.w	r3, r7, #28
 8103cfe:	4619      	mov	r1, r3
 8103d00:	480f      	ldr	r0, [pc, #60]	@ (8103d40 <MX_GPIO_Init+0x170>)
 8103d02:	f005 f875 	bl	8108df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8103d06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8103d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8103d0c:	2301      	movs	r3, #1
 8103d0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103d10:	2300      	movs	r3, #0
 8103d12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103d14:	2300      	movs	r3, #0
 8103d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8103d18:	f107 031c 	add.w	r3, r7, #28
 8103d1c:	4619      	mov	r1, r3
 8103d1e:	4809      	ldr	r0, [pc, #36]	@ (8103d44 <MX_GPIO_Init+0x174>)
 8103d20:	f005 f866 	bl	8108df0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8103d24:	2200      	movs	r2, #0
 8103d26:	2100      	movs	r1, #0
 8103d28:	2028      	movs	r0, #40	@ 0x28
 8103d2a:	f002 fdf4 	bl	8106916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8103d2e:	2028      	movs	r0, #40	@ 0x28
 8103d30:	f002 fe0b 	bl	810694a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8103d34:	bf00      	nop
 8103d36:	3730      	adds	r7, #48	@ 0x30
 8103d38:	46bd      	mov	sp, r7
 8103d3a:	bd80      	pop	{r7, pc}
 8103d3c:	58024400 	.word	0x58024400
 8103d40:	58020000 	.word	0x58020000
 8103d44:	58020400 	.word	0x58020400
 8103d48:	58020800 	.word	0x58020800

08103d4c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//******************
//INTERRUPT PA3 SENSORE DATA READY
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8103d4c:	b480      	push	{r7}
 8103d4e:	b083      	sub	sp, #12
 8103d50:	af00      	add	r7, sp, #0
 8103d52:	4603      	mov	r3, r0
 8103d54:	80fb      	strh	r3, [r7, #6]

//FUNZIONE DI CALLBACK PULSANTE BLU
	if (GPIO_Pin == GPIO_PIN_13) {
 8103d56:	88fb      	ldrh	r3, [r7, #6]
 8103d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103d5c:	d105      	bne.n	8103d6a <HAL_GPIO_EXTI_Callback+0x1e>

		tasto_premuto = 1;
 8103d5e:	4b06      	ldr	r3, [pc, #24]	@ (8103d78 <HAL_GPIO_EXTI_Callback+0x2c>)
 8103d60:	2201      	movs	r2, #1
 8103d62:	601a      	str	r2, [r3, #0]
		tasto_appena_premuto = 1;
 8103d64:	4b05      	ldr	r3, [pc, #20]	@ (8103d7c <HAL_GPIO_EXTI_Callback+0x30>)
 8103d66:	2201      	movs	r2, #1
 8103d68:	601a      	str	r2, [r3, #0]

	}
}
 8103d6a:	bf00      	nop
 8103d6c:	370c      	adds	r7, #12
 8103d6e:	46bd      	mov	sp, r7
 8103d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d74:	4770      	bx	lr
 8103d76:	bf00      	nop
 8103d78:	1000d080 	.word	0x1000d080
 8103d7c:	1000d084 	.word	0x1000d084

08103d80 <HAL_TIM_PeriodElapsedCallback>:
//******************

//******************
//FUNZIONE DI CALLBACK PER IL TIMER 2
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8103d80:	b580      	push	{r7, lr}
 8103d82:	b082      	sub	sp, #8
 8103d84:	af00      	add	r7, sp, #0
 8103d86:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8103d88:	687b      	ldr	r3, [r7, #4]
 8103d8a:	4a53      	ldr	r2, [pc, #332]	@ (8103ed8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8103d8c:	4293      	cmp	r3, r2
 8103d8e:	d140      	bne.n	8103e12 <HAL_TIM_PeriodElapsedCallback+0x92>
		flag_Tc = 1; //Flag che permette di entrare nel ciclo del while ogni 0.01 secondi
 8103d90:	4b52      	ldr	r3, [pc, #328]	@ (8103edc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8103d92:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8103d96:	601a      	str	r2, [r3, #0]
		n_ref++;
 8103d98:	4b51      	ldr	r3, [pc, #324]	@ (8103ee0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8103d9a:	681b      	ldr	r3, [r3, #0]
 8103d9c:	3301      	adds	r3, #1
 8103d9e:	4a50      	ldr	r2, [pc, #320]	@ (8103ee0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8103da0:	6013      	str	r3, [r2, #0]
		tempo += 0.01;
 8103da2:	4b50      	ldr	r3, [pc, #320]	@ (8103ee4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8103da4:	681b      	ldr	r3, [r3, #0]
 8103da6:	4618      	mov	r0, r3
 8103da8:	f7fc fc56 	bl	8100658 <__aeabi_f2d>
 8103dac:	a348      	add	r3, pc, #288	@ (adr r3, 8103ed0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8103dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103db2:	f7fc faf3 	bl	810039c <__adddf3>
 8103db6:	4602      	mov	r2, r0
 8103db8:	460b      	mov	r3, r1
 8103dba:	4610      	mov	r0, r2
 8103dbc:	4619      	mov	r1, r3
 8103dbe:	f7fc ff9b 	bl	8100cf8 <__aeabi_d2f>
 8103dc2:	4603      	mov	r3, r0
 8103dc4:	4a47      	ldr	r2, [pc, #284]	@ (8103ee4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8103dc6:	6013      	str	r3, [r2, #0]
		if (n_ref > 100 * 500)
 8103dc8:	4b45      	ldr	r3, [pc, #276]	@ (8103ee0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8103dca:	681b      	ldr	r3, [r3, #0]
 8103dcc:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8103dd0:	4293      	cmp	r3, r2
 8103dd2:	dd02      	ble.n	8103dda <HAL_TIM_PeriodElapsedCallback+0x5a>
			n_ref = 0;
 8103dd4:	4b42      	ldr	r3, [pc, #264]	@ (8103ee0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8103dd6:	2200      	movs	r2, #0
 8103dd8:	601a      	str	r2, [r3, #0]

		if (tempo > 3600)
 8103dda:	4b42      	ldr	r3, [pc, #264]	@ (8103ee4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8103ddc:	edd3 7a00 	vldr	s15, [r3]
 8103de0:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8103ee8 <HAL_TIM_PeriodElapsedCallback+0x168>
 8103de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8103de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8103dec:	dd03      	ble.n	8103df6 <HAL_TIM_PeriodElapsedCallback+0x76>
			tempo = 0;
 8103dee:	4b3d      	ldr	r3, [pc, #244]	@ (8103ee4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8103df0:	f04f 0200 	mov.w	r2, #0
 8103df4:	601a      	str	r2, [r3, #0]

		contatore_esp320++;
 8103df6:	4b3d      	ldr	r3, [pc, #244]	@ (8103eec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8103df8:	681b      	ldr	r3, [r3, #0]
 8103dfa:	3301      	adds	r3, #1
 8103dfc:	4a3b      	ldr	r2, [pc, #236]	@ (8103eec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8103dfe:	6013      	str	r3, [r2, #0]
		if (contatore_esp320 > 3000)
 8103e00:	4b3a      	ldr	r3, [pc, #232]	@ (8103eec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8103e02:	681b      	ldr	r3, [r3, #0]
 8103e04:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8103e08:	4293      	cmp	r3, r2
 8103e0a:	dd02      	ble.n	8103e12 <HAL_TIM_PeriodElapsedCallback+0x92>
			contatore_esp320 = 0;
 8103e0c:	4b37      	ldr	r3, [pc, #220]	@ (8103eec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8103e0e:	2200      	movs	r2, #0
 8103e10:	601a      	str	r2, [r3, #0]

	}

	if (htim == &htim12){
 8103e12:	687b      	ldr	r3, [r7, #4]
 8103e14:	4a36      	ldr	r2, [pc, #216]	@ (8103ef0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8103e16:	4293      	cmp	r3, r2
 8103e18:	d12b      	bne.n	8103e72 <HAL_TIM_PeriodElapsedCallback+0xf2>
			flag_1ms = 1;
 8103e1a:	4b36      	ldr	r3, [pc, #216]	@ (8103ef4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8103e1c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8103e20:	601a      	str	r2, [r3, #0]
			if(tempo_1ms >1000) contatore_1ms = 0;
 8103e22:	4b35      	ldr	r3, [pc, #212]	@ (8103ef8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8103e24:	edd3 7a00 	vldr	s15, [r3]
 8103e28:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8103efc <HAL_TIM_PeriodElapsedCallback+0x17c>
 8103e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8103e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8103e34:	dd04      	ble.n	8103e40 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8103e36:	4b32      	ldr	r3, [pc, #200]	@ (8103f00 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8103e38:	f04f 0200 	mov.w	r2, #0
 8103e3c:	601a      	str	r2, [r3, #0]
 8103e3e:	e009      	b.n	8103e54 <HAL_TIM_PeriodElapsedCallback+0xd4>
			else contatore_1ms++;
 8103e40:	4b2f      	ldr	r3, [pc, #188]	@ (8103f00 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8103e42:	edd3 7a00 	vldr	s15, [r3]
 8103e46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103e4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8103e4e:	4b2c      	ldr	r3, [pc, #176]	@ (8103f00 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8103e50:	edc3 7a00 	vstr	s15, [r3]
			tempo_1ms = contatore_1ms/1000;
 8103e54:	4b2a      	ldr	r3, [pc, #168]	@ (8103f00 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8103e56:	ed93 7a00 	vldr	s14, [r3]
 8103e5a:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8103efc <HAL_TIM_PeriodElapsedCallback+0x17c>
 8103e5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8103e62:	4b25      	ldr	r3, [pc, #148]	@ (8103ef8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8103e64:	edc3 7a00 	vstr	s15, [r3]

			contatore_messaggi++;
 8103e68:	4b26      	ldr	r3, [pc, #152]	@ (8103f04 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8103e6a:	681b      	ldr	r3, [r3, #0]
 8103e6c:	3301      	adds	r3, #1
 8103e6e:	4a25      	ldr	r2, [pc, #148]	@ (8103f04 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8103e70:	6013      	str	r3, [r2, #0]



		}

	if (htim == &htim6) {
 8103e72:	687b      	ldr	r3, [r7, #4]
 8103e74:	4a24      	ldr	r2, [pc, #144]	@ (8103f08 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8103e76:	4293      	cmp	r3, r2
 8103e78:	d124      	bne.n	8103ec4 <HAL_TIM_PeriodElapsedCallback+0x144>

		// Gestione dell’invio periodico dei dati

		//printf(bufferDati,indiceBuffer);
		indiceBuffer = 0;
 8103e7a:	4b24      	ldr	r3, [pc, #144]	@ (8103f0c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8103e7c:	2200      	movs	r2, #0
 8103e7e:	601a      	str	r2, [r3, #0]
		memset(bufferDati, 0, sizeof(bufferDati));
 8103e80:	f24c 7238 	movw	r2, #51000	@ 0xc738
 8103e84:	2100      	movs	r1, #0
 8103e86:	4822      	ldr	r0, [pc, #136]	@ (8103f10 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8103e88:	f00e fb48 	bl	811251c <memset>

		if (trasmissione_attiva == 1) {
 8103e8c:	4b21      	ldr	r3, [pc, #132]	@ (8103f14 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8103e8e:	781b      	ldrb	r3, [r3, #0]
 8103e90:	2b01      	cmp	r3, #1
 8103e92:	d117      	bne.n	8103ec4 <HAL_TIM_PeriodElapsedCallback+0x144>
			 dati.accelerazione, dati.tempo);
			 printf("Dati trasmessi: %s\r\n", buffer);
			 //Trasmissione_dati(buffer, bytesWritten);
			 * */
			//printf("Dati trasmessi: %s\r\n", bufferDati);
			Trasmissione_dati(bufferDati, indiceBuffer);
 8103e94:	4b1d      	ldr	r3, [pc, #116]	@ (8103f0c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8103e96:	681b      	ldr	r3, [r3, #0]
 8103e98:	4619      	mov	r1, r3
 8103e9a:	481d      	ldr	r0, [pc, #116]	@ (8103f10 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8103e9c:	f000 f858 	bl	8103f50 <Trasmissione_dati>
			indiceBuffer = 0;
 8103ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8103f0c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8103ea2:	2200      	movs	r2, #0
 8103ea4:	601a      	str	r2, [r3, #0]
			//in genere indice buffer arriva a sui 15000 ogni 3 secondi
			if (indiceBuffer >= 30000) //se per qualche motivo non avviene l'azzeramento dell'indice
 8103ea6:	4b19      	ldr	r3, [pc, #100]	@ (8103f0c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8103ea8:	681b      	ldr	r3, [r3, #0]
 8103eaa:	f247 522f 	movw	r2, #29999	@ 0x752f
 8103eae:	4293      	cmp	r3, r2
 8103eb0:	dd02      	ble.n	8103eb8 <HAL_TIM_PeriodElapsedCallback+0x138>
				indiceBuffer = 0;
 8103eb2:	4b16      	ldr	r3, [pc, #88]	@ (8103f0c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8103eb4:	2200      	movs	r2, #0
 8103eb6:	601a      	str	r2, [r3, #0]
			memset(bufferDati, 0, sizeof(bufferDati));  // Pulizia buffer
 8103eb8:	f24c 7238 	movw	r2, #51000	@ 0xc738
 8103ebc:	2100      	movs	r1, #0
 8103ebe:	4814      	ldr	r0, [pc, #80]	@ (8103f10 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8103ec0:	f00e fb2c 	bl	811251c <memset>


	}


}
 8103ec4:	bf00      	nop
 8103ec6:	3708      	adds	r7, #8
 8103ec8:	46bd      	mov	sp, r7
 8103eca:	bd80      	pop	{r7, pc}
 8103ecc:	f3af 8000 	nop.w
 8103ed0:	47ae147b 	.word	0x47ae147b
 8103ed4:	3f847ae1 	.word	0x3f847ae1
 8103ed8:	10000394 	.word	0x10000394
 8103edc:	1000cfcc 	.word	0x1000cfcc
 8103ee0:	1000d2cc 	.word	0x1000d2cc
 8103ee4:	1000cf18 	.word	0x1000cf18
 8103ee8:	45610000 	.word	0x45610000
 8103eec:	1000d088 	.word	0x1000d088
 8103ef0:	1000055c 	.word	0x1000055c
 8103ef4:	1000cfd4 	.word	0x1000cfd4
 8103ef8:	1000cf1c 	.word	0x1000cf1c
 8103efc:	447a0000 	.word	0x447a0000
 8103f00:	1000cf20 	.word	0x1000cf20
 8103f04:	1000cfd0 	.word	0x1000cfd0
 8103f08:	10000478 	.word	0x10000478
 8103f0c:	1000cf14 	.word	0x1000cf14
 8103f10:	100007dc 	.word	0x100007dc
 8103f14:	1000d2d5 	.word	0x1000d2d5

08103f18 <__io_getchar>:
	//HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF); putty
	HAL_UART_Transmit(&huart6,(uint8_t*) &ch, 1, 0xFFFF);

	return ch;
}
int __io_getchar(void) {
 8103f18:	b580      	push	{r7, lr}
 8103f1a:	b082      	sub	sp, #8
 8103f1c:	af00      	add	r7, sp, #0
	uint8_t ch;
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8103f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8103f4c <__io_getchar+0x34>)
 8103f20:	681b      	ldr	r3, [r3, #0]
 8103f22:	2208      	movs	r2, #8
 8103f24:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8103f26:	1df9      	adds	r1, r7, #7
 8103f28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8103f2c:	2201      	movs	r2, #1
 8103f2e:	4807      	ldr	r0, [pc, #28]	@ (8103f4c <__io_getchar+0x34>)
 8103f30:	f00a fb8c 	bl	810e64c <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8103f34:	1df9      	adds	r1, r7, #7
 8103f36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8103f3a:	2201      	movs	r2, #1
 8103f3c:	4803      	ldr	r0, [pc, #12]	@ (8103f4c <__io_getchar+0x34>)
 8103f3e:	f00a faf7 	bl	810e530 <HAL_UART_Transmit>
	return ch;
 8103f42:	79fb      	ldrb	r3, [r7, #7]
}
 8103f44:	4618      	mov	r0, r3
 8103f46:	3708      	adds	r7, #8
 8103f48:	46bd      	mov	sp, r7
 8103f4a:	bd80      	pop	{r7, pc}
 8103f4c:	1000063c 	.word	0x1000063c

08103f50 <Trasmissione_dati>:
//******************

// Funzione per trasmettere dati tramite UART2
void Trasmissione_dati(void *data, size_t size) {
 8103f50:	b580      	push	{r7, lr}
 8103f52:	b082      	sub	sp, #8
 8103f54:	af00      	add	r7, sp, #0
 8103f56:	6078      	str	r0, [r7, #4]
 8103f58:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) data, size, HAL_MAX_DELAY);
 8103f5a:	683b      	ldr	r3, [r7, #0]
 8103f5c:	b29a      	uxth	r2, r3
 8103f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8103f62:	6879      	ldr	r1, [r7, #4]
 8103f64:	4803      	ldr	r0, [pc, #12]	@ (8103f74 <Trasmissione_dati+0x24>)
 8103f66:	f00a fae3 	bl	810e530 <HAL_UART_Transmit>
}
 8103f6a:	bf00      	nop
 8103f6c:	3708      	adds	r7, #8
 8103f6e:	46bd      	mov	sp, r7
 8103f70:	bd80      	pop	{r7, pc}
 8103f72:	bf00      	nop
 8103f74:	100005a8 	.word	0x100005a8

08103f78 <HAL_UART_RxCpltCallback>:

// Callback chiamata quando un byte viene ricevuto sulla UART2
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8103f78:	b580      	push	{r7, lr}
 8103f7a:	b082      	sub	sp, #8
 8103f7c:	af00      	add	r7, sp, #0
 8103f7e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8103f80:	687b      	ldr	r3, [r7, #4]
 8103f82:	4a46      	ldr	r2, [pc, #280]	@ (810409c <HAL_UART_RxCpltCallback+0x124>)
 8103f84:	4293      	cmp	r3, r2
 8103f86:	f040 8085 	bne.w	8104094 <HAL_UART_RxCpltCallback+0x11c>
		if (rx_buffer[0] == 'S') {
 8103f8a:	4b45      	ldr	r3, [pc, #276]	@ (81040a0 <HAL_UART_RxCpltCallback+0x128>)
 8103f8c:	781b      	ldrb	r3, [r3, #0]
 8103f8e:	2b53      	cmp	r3, #83	@ 0x53
 8103f90:	d109      	bne.n	8103fa6 <HAL_UART_RxCpltCallback+0x2e>
			// Interrompi la trasmissione
			printf("Arrivato: %c\r\n", rx_buffer[0]);
 8103f92:	4b43      	ldr	r3, [pc, #268]	@ (81040a0 <HAL_UART_RxCpltCallback+0x128>)
 8103f94:	781b      	ldrb	r3, [r3, #0]
 8103f96:	4619      	mov	r1, r3
 8103f98:	4842      	ldr	r0, [pc, #264]	@ (81040a4 <HAL_UART_RxCpltCallback+0x12c>)
 8103f9a:	f00e f9b5 	bl	8112308 <iprintf>
			trasmissione_attiva = 0;
 8103f9e:	4b42      	ldr	r3, [pc, #264]	@ (81040a8 <HAL_UART_RxCpltCallback+0x130>)
 8103fa0:	2200      	movs	r2, #0
 8103fa2:	701a      	strb	r2, [r3, #0]
 8103fa4:	e04c      	b.n	8104040 <HAL_UART_RxCpltCallback+0xc8>

		} else if (rx_buffer[0] == 'V') {
 8103fa6:	4b3e      	ldr	r3, [pc, #248]	@ (81040a0 <HAL_UART_RxCpltCallback+0x128>)
 8103fa8:	781b      	ldrb	r3, [r3, #0]
 8103faa:	2b56      	cmp	r3, #86	@ 0x56
 8103fac:	d109      	bne.n	8103fc2 <HAL_UART_RxCpltCallback+0x4a>
			// Avvia la trasmissione
			printf("Arrivato: %c\r\n", rx_buffer[0]);
 8103fae:	4b3c      	ldr	r3, [pc, #240]	@ (81040a0 <HAL_UART_RxCpltCallback+0x128>)
 8103fb0:	781b      	ldrb	r3, [r3, #0]
 8103fb2:	4619      	mov	r1, r3
 8103fb4:	483b      	ldr	r0, [pc, #236]	@ (81040a4 <HAL_UART_RxCpltCallback+0x12c>)
 8103fb6:	f00e f9a7 	bl	8112308 <iprintf>
			trasmissione_attiva = 1;
 8103fba:	4b3b      	ldr	r3, [pc, #236]	@ (81040a8 <HAL_UART_RxCpltCallback+0x130>)
 8103fbc:	2201      	movs	r2, #1
 8103fbe:	701a      	strb	r2, [r3, #0]
 8103fc0:	e03e      	b.n	8104040 <HAL_UART_RxCpltCallback+0xc8>
		} else if (rx_buffer[0] == 'P') {
 8103fc2:	4b37      	ldr	r3, [pc, #220]	@ (81040a0 <HAL_UART_RxCpltCallback+0x128>)
 8103fc4:	781b      	ldrb	r3, [r3, #0]
 8103fc6:	2b50      	cmp	r3, #80	@ 0x50
 8103fc8:	d13a      	bne.n	8104040 <HAL_UART_RxCpltCallback+0xc8>
			//HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, 1); //
			i = 1;
 8103fca:	4b38      	ldr	r3, [pc, #224]	@ (81040ac <HAL_UART_RxCpltCallback+0x134>)
 8103fcc:	2201      	movs	r2, #1
 8103fce:	601a      	str	r2, [r3, #0]
			// Ricevi 4 byte tramite UART (blocca fino a ricezione)
			HAL_UART_Receive_IT(&huart2, &bytesricevuti, 12);
 8103fd0:	220c      	movs	r2, #12
 8103fd2:	4937      	ldr	r1, [pc, #220]	@ (81040b0 <HAL_UART_RxCpltCallback+0x138>)
 8103fd4:	4831      	ldr	r0, [pc, #196]	@ (810409c <HAL_UART_RxCpltCallback+0x124>)
 8103fd6:	f00a fc01 	bl	810e7dc <HAL_UART_Receive_IT>
			rx_buffer[0] = 0;
 8103fda:	4b31      	ldr	r3, [pc, #196]	@ (81040a0 <HAL_UART_RxCpltCallback+0x128>)
 8103fdc:	2200      	movs	r2, #0
 8103fde:	701a      	strb	r2, [r3, #0]
			// Ricostruisci il float dai 4 byte ricevuti
			bytesricevuti1[0] = bytesricevuti[0];
 8103fe0:	4b33      	ldr	r3, [pc, #204]	@ (81040b0 <HAL_UART_RxCpltCallback+0x138>)
 8103fe2:	781a      	ldrb	r2, [r3, #0]
 8103fe4:	4b33      	ldr	r3, [pc, #204]	@ (81040b4 <HAL_UART_RxCpltCallback+0x13c>)
 8103fe6:	701a      	strb	r2, [r3, #0]
			bytesricevuti1[1] = bytesricevuti[1];
 8103fe8:	4b31      	ldr	r3, [pc, #196]	@ (81040b0 <HAL_UART_RxCpltCallback+0x138>)
 8103fea:	785a      	ldrb	r2, [r3, #1]
 8103fec:	4b31      	ldr	r3, [pc, #196]	@ (81040b4 <HAL_UART_RxCpltCallback+0x13c>)
 8103fee:	705a      	strb	r2, [r3, #1]
			bytesricevuti1[2] = bytesricevuti[2];
 8103ff0:	4b2f      	ldr	r3, [pc, #188]	@ (81040b0 <HAL_UART_RxCpltCallback+0x138>)
 8103ff2:	789a      	ldrb	r2, [r3, #2]
 8103ff4:	4b2f      	ldr	r3, [pc, #188]	@ (81040b4 <HAL_UART_RxCpltCallback+0x13c>)
 8103ff6:	709a      	strb	r2, [r3, #2]
			bytesricevuti1[3] = bytesricevuti[3];
 8103ff8:	4b2d      	ldr	r3, [pc, #180]	@ (81040b0 <HAL_UART_RxCpltCallback+0x138>)
 8103ffa:	78da      	ldrb	r2, [r3, #3]
 8103ffc:	4b2d      	ldr	r3, [pc, #180]	@ (81040b4 <HAL_UART_RxCpltCallback+0x13c>)
 8103ffe:	70da      	strb	r2, [r3, #3]
			bytesricevuti2[0] = bytesricevuti[4];
 8104000:	4b2b      	ldr	r3, [pc, #172]	@ (81040b0 <HAL_UART_RxCpltCallback+0x138>)
 8104002:	791a      	ldrb	r2, [r3, #4]
 8104004:	4b2c      	ldr	r3, [pc, #176]	@ (81040b8 <HAL_UART_RxCpltCallback+0x140>)
 8104006:	701a      	strb	r2, [r3, #0]
			bytesricevuti2[1] = bytesricevuti[5];
 8104008:	4b29      	ldr	r3, [pc, #164]	@ (81040b0 <HAL_UART_RxCpltCallback+0x138>)
 810400a:	795a      	ldrb	r2, [r3, #5]
 810400c:	4b2a      	ldr	r3, [pc, #168]	@ (81040b8 <HAL_UART_RxCpltCallback+0x140>)
 810400e:	705a      	strb	r2, [r3, #1]
			bytesricevuti2[2] = bytesricevuti[6];
 8104010:	4b27      	ldr	r3, [pc, #156]	@ (81040b0 <HAL_UART_RxCpltCallback+0x138>)
 8104012:	799a      	ldrb	r2, [r3, #6]
 8104014:	4b28      	ldr	r3, [pc, #160]	@ (81040b8 <HAL_UART_RxCpltCallback+0x140>)
 8104016:	709a      	strb	r2, [r3, #2]
			bytesricevuti2[3] = bytesricevuti[7];
 8104018:	4b25      	ldr	r3, [pc, #148]	@ (81040b0 <HAL_UART_RxCpltCallback+0x138>)
 810401a:	79da      	ldrb	r2, [r3, #7]
 810401c:	4b26      	ldr	r3, [pc, #152]	@ (81040b8 <HAL_UART_RxCpltCallback+0x140>)
 810401e:	70da      	strb	r2, [r3, #3]
			bytesricevuti3[0] = bytesricevuti[8];
 8104020:	4b23      	ldr	r3, [pc, #140]	@ (81040b0 <HAL_UART_RxCpltCallback+0x138>)
 8104022:	7a1a      	ldrb	r2, [r3, #8]
 8104024:	4b25      	ldr	r3, [pc, #148]	@ (81040bc <HAL_UART_RxCpltCallback+0x144>)
 8104026:	701a      	strb	r2, [r3, #0]
			bytesricevuti3[1] = bytesricevuti[9];
 8104028:	4b21      	ldr	r3, [pc, #132]	@ (81040b0 <HAL_UART_RxCpltCallback+0x138>)
 810402a:	7a5a      	ldrb	r2, [r3, #9]
 810402c:	4b23      	ldr	r3, [pc, #140]	@ (81040bc <HAL_UART_RxCpltCallback+0x144>)
 810402e:	705a      	strb	r2, [r3, #1]
			bytesricevuti3[2] = bytesricevuti[10];
 8104030:	4b1f      	ldr	r3, [pc, #124]	@ (81040b0 <HAL_UART_RxCpltCallback+0x138>)
 8104032:	7a9a      	ldrb	r2, [r3, #10]
 8104034:	4b21      	ldr	r3, [pc, #132]	@ (81040bc <HAL_UART_RxCpltCallback+0x144>)
 8104036:	709a      	strb	r2, [r3, #2]
			bytesricevuti3[3] = bytesricevuti[11];
 8104038:	4b1d      	ldr	r3, [pc, #116]	@ (81040b0 <HAL_UART_RxCpltCallback+0x138>)
 810403a:	7ada      	ldrb	r2, [r3, #11]
 810403c:	4b1f      	ldr	r3, [pc, #124]	@ (81040bc <HAL_UART_RxCpltCallback+0x144>)
 810403e:	70da      	strb	r2, [r3, #3]

			//printf("float: %f",floatricevuto);

		}

		HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, 1); //
 8104040:	2201      	movs	r2, #1
 8104042:	4917      	ldr	r1, [pc, #92]	@ (81040a0 <HAL_UART_RxCpltCallback+0x128>)
 8104044:	4815      	ldr	r0, [pc, #84]	@ (810409c <HAL_UART_RxCpltCallback+0x124>)
 8104046:	f00a fbc9 	bl	810e7dc <HAL_UART_Receive_IT>
		memcpy(&floatricevuto1, &bytesricevuti1, sizeof(float));
 810404a:	4b1a      	ldr	r3, [pc, #104]	@ (81040b4 <HAL_UART_RxCpltCallback+0x13c>)
 810404c:	681b      	ldr	r3, [r3, #0]
 810404e:	4a1c      	ldr	r2, [pc, #112]	@ (81040c0 <HAL_UART_RxCpltCallback+0x148>)
 8104050:	6013      	str	r3, [r2, #0]
		memcpy(&floatricevuto2, &bytesricevuti2, sizeof(float));
 8104052:	4b19      	ldr	r3, [pc, #100]	@ (81040b8 <HAL_UART_RxCpltCallback+0x140>)
 8104054:	681b      	ldr	r3, [r3, #0]
 8104056:	4a1b      	ldr	r2, [pc, #108]	@ (81040c4 <HAL_UART_RxCpltCallback+0x14c>)
 8104058:	6013      	str	r3, [r2, #0]
		memcpy(&floatricevuto3, &bytesricevuti3, sizeof(float));
 810405a:	4b18      	ldr	r3, [pc, #96]	@ (81040bc <HAL_UART_RxCpltCallback+0x144>)
 810405c:	681b      	ldr	r3, [r3, #0]
 810405e:	4a1a      	ldr	r2, [pc, #104]	@ (81040c8 <HAL_UART_RxCpltCallback+0x150>)
 8104060:	6013      	str	r3, [r2, #0]

		if (i == 1) {
 8104062:	4b12      	ldr	r3, [pc, #72]	@ (81040ac <HAL_UART_RxCpltCallback+0x134>)
 8104064:	681b      	ldr	r3, [r3, #0]
 8104066:	2b01      	cmp	r3, #1
 8104068:	d114      	bne.n	8104094 <HAL_UART_RxCpltCallback+0x11c>
			tune_PID(&pid_roll, floatricevuto1, floatricevuto2, floatricevuto3); //prova ad alzare
 810406a:	4b15      	ldr	r3, [pc, #84]	@ (81040c0 <HAL_UART_RxCpltCallback+0x148>)
 810406c:	edd3 7a00 	vldr	s15, [r3]
 8104070:	4b14      	ldr	r3, [pc, #80]	@ (81040c4 <HAL_UART_RxCpltCallback+0x14c>)
 8104072:	ed93 7a00 	vldr	s14, [r3]
 8104076:	4b14      	ldr	r3, [pc, #80]	@ (81040c8 <HAL_UART_RxCpltCallback+0x150>)
 8104078:	edd3 6a00 	vldr	s13, [r3]
 810407c:	eeb0 1a66 	vmov.f32	s2, s13
 8104080:	eef0 0a47 	vmov.f32	s1, s14
 8104084:	eeb0 0a67 	vmov.f32	s0, s15
 8104088:	4810      	ldr	r0, [pc, #64]	@ (81040cc <HAL_UART_RxCpltCallback+0x154>)
 810408a:	f7fd f93e 	bl	810130a <tune_PID>
			i = 0;
 810408e:	4b07      	ldr	r3, [pc, #28]	@ (81040ac <HAL_UART_RxCpltCallback+0x134>)
 8104090:	2200      	movs	r2, #0
 8104092:	601a      	str	r2, [r3, #0]

		}

	}
}
 8104094:	bf00      	nop
 8104096:	3708      	adds	r7, #8
 8104098:	46bd      	mov	sp, r7
 810409a:	bd80      	pop	{r7, pc}
 810409c:	100005a8 	.word	0x100005a8
 81040a0:	1000d2d4 	.word	0x1000d2d4
 81040a4:	08116cb8 	.word	0x08116cb8
 81040a8:	1000d2d5 	.word	0x1000d2d5
 81040ac:	1000cf48 	.word	0x1000cf48
 81040b0:	1000cf24 	.word	0x1000cf24
 81040b4:	1000cf30 	.word	0x1000cf30
 81040b8:	1000cf34 	.word	0x1000cf34
 81040bc:	1000cf38 	.word	0x1000cf38
 81040c0:	1000cf3c 	.word	0x1000cf3c
 81040c4:	1000cf40 	.word	0x1000cf40
 81040c8:	1000cf44 	.word	0x1000cf44
 81040cc:	1000cf8c 	.word	0x1000cf8c

081040d0 <_write>:

// Funzione di scrittura per printf
int _write(int file, char *ptr, int len) {
 81040d0:	b580      	push	{r7, lr}
 81040d2:	b084      	sub	sp, #16
 81040d4:	af00      	add	r7, sp, #0
 81040d6:	60f8      	str	r0, [r7, #12]
 81040d8:	60b9      	str	r1, [r7, #8]
 81040da:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 81040dc:	687b      	ldr	r3, [r7, #4]
 81040de:	b29a      	uxth	r2, r3
 81040e0:	f04f 33ff 	mov.w	r3, #4294967295
 81040e4:	68b9      	ldr	r1, [r7, #8]
 81040e6:	4804      	ldr	r0, [pc, #16]	@ (81040f8 <_write+0x28>)
 81040e8:	f00a fa22 	bl	810e530 <HAL_UART_Transmit>
	return len;
 81040ec:	687b      	ldr	r3, [r7, #4]
}
 81040ee:	4618      	mov	r0, r3
 81040f0:	3710      	adds	r7, #16
 81040f2:	46bd      	mov	sp, r7
 81040f4:	bd80      	pop	{r7, pc}
 81040f6:	bf00      	nop
 81040f8:	1000063c 	.word	0x1000063c

081040fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81040fc:	b480      	push	{r7}
 81040fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8104100:	b672      	cpsid	i
}
 8104102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8104104:	bf00      	nop
 8104106:	e7fd      	b.n	8104104 <Error_Handler+0x8>

08104108 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8104108:	b480      	push	{r7}
 810410a:	b083      	sub	sp, #12
 810410c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810410e:	4b0a      	ldr	r3, [pc, #40]	@ (8104138 <HAL_MspInit+0x30>)
 8104110:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8104114:	4a08      	ldr	r2, [pc, #32]	@ (8104138 <HAL_MspInit+0x30>)
 8104116:	f043 0302 	orr.w	r3, r3, #2
 810411a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810411e:	4b06      	ldr	r3, [pc, #24]	@ (8104138 <HAL_MspInit+0x30>)
 8104120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8104124:	f003 0302 	and.w	r3, r3, #2
 8104128:	607b      	str	r3, [r7, #4]
 810412a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810412c:	bf00      	nop
 810412e:	370c      	adds	r7, #12
 8104130:	46bd      	mov	sp, r7
 8104132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104136:	4770      	bx	lr
 8104138:	58024400 	.word	0x58024400

0810413c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 810413c:	b580      	push	{r7, lr}
 810413e:	b0ba      	sub	sp, #232	@ 0xe8
 8104140:	af00      	add	r7, sp, #0
 8104142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8104144:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8104148:	2200      	movs	r2, #0
 810414a:	601a      	str	r2, [r3, #0]
 810414c:	605a      	str	r2, [r3, #4]
 810414e:	609a      	str	r2, [r3, #8]
 8104150:	60da      	str	r2, [r3, #12]
 8104152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8104154:	f107 0310 	add.w	r3, r7, #16
 8104158:	22c0      	movs	r2, #192	@ 0xc0
 810415a:	2100      	movs	r1, #0
 810415c:	4618      	mov	r0, r3
 810415e:	f00e f9dd 	bl	811251c <memset>
  if(hadc->Instance==ADC1)
 8104162:	687b      	ldr	r3, [r7, #4]
 8104164:	681b      	ldr	r3, [r3, #0]
 8104166:	4a2c      	ldr	r2, [pc, #176]	@ (8104218 <HAL_ADC_MspInit+0xdc>)
 8104168:	4293      	cmp	r3, r2
 810416a:	d151      	bne.n	8104210 <HAL_ADC_MspInit+0xd4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 810416c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8104170:	f04f 0300 	mov.w	r3, #0
 8104174:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8104178:	2301      	movs	r3, #1
 810417a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 810417c:	2312      	movs	r3, #18
 810417e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8104180:	2302      	movs	r3, #2
 8104182:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8104184:	2302      	movs	r3, #2
 8104186:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8104188:	2302      	movs	r3, #2
 810418a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 810418c:	23c0      	movs	r3, #192	@ 0xc0
 810418e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8104190:	2320      	movs	r3, #32
 8104192:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8104194:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8104198:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 810419a:	2300      	movs	r3, #0
 810419c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81041a0:	f107 0310 	add.w	r3, r7, #16
 81041a4:	4618      	mov	r0, r3
 81041a6:	f006 f87b 	bl	810a2a0 <HAL_RCCEx_PeriphCLKConfig>
 81041aa:	4603      	mov	r3, r0
 81041ac:	2b00      	cmp	r3, #0
 81041ae:	d001      	beq.n	81041b4 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 81041b0:	f7ff ffa4 	bl	81040fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81041b4:	4b19      	ldr	r3, [pc, #100]	@ (810421c <HAL_ADC_MspInit+0xe0>)
 81041b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81041ba:	4a18      	ldr	r2, [pc, #96]	@ (810421c <HAL_ADC_MspInit+0xe0>)
 81041bc:	f043 0320 	orr.w	r3, r3, #32
 81041c0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81041c4:	4b15      	ldr	r3, [pc, #84]	@ (810421c <HAL_ADC_MspInit+0xe0>)
 81041c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81041ca:	f003 0320 	and.w	r3, r3, #32
 81041ce:	60fb      	str	r3, [r7, #12]
 81041d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 81041d2:	4b12      	ldr	r3, [pc, #72]	@ (810421c <HAL_ADC_MspInit+0xe0>)
 81041d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81041d8:	4a10      	ldr	r2, [pc, #64]	@ (810421c <HAL_ADC_MspInit+0xe0>)
 81041da:	f043 0320 	orr.w	r3, r3, #32
 81041de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81041e2:	4b0e      	ldr	r3, [pc, #56]	@ (810421c <HAL_ADC_MspInit+0xe0>)
 81041e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81041e8:	f003 0320 	and.w	r3, r3, #32
 81041ec:	60bb      	str	r3, [r7, #8]
 81041ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 81041f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81041f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81041f8:	2303      	movs	r3, #3
 81041fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81041fe:	2300      	movs	r3, #0
 8104200:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8104204:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8104208:	4619      	mov	r1, r3
 810420a:	4805      	ldr	r0, [pc, #20]	@ (8104220 <HAL_ADC_MspInit+0xe4>)
 810420c:	f004 fdf0 	bl	8108df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8104210:	bf00      	nop
 8104212:	37e8      	adds	r7, #232	@ 0xe8
 8104214:	46bd      	mov	sp, r7
 8104216:	bd80      	pop	{r7, pc}
 8104218:	40022000 	.word	0x40022000
 810421c:	58024400 	.word	0x58024400
 8104220:	58021400 	.word	0x58021400

08104224 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8104224:	b580      	push	{r7, lr}
 8104226:	b0ba      	sub	sp, #232	@ 0xe8
 8104228:	af00      	add	r7, sp, #0
 810422a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810422c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8104230:	2200      	movs	r2, #0
 8104232:	601a      	str	r2, [r3, #0]
 8104234:	605a      	str	r2, [r3, #4]
 8104236:	609a      	str	r2, [r3, #8]
 8104238:	60da      	str	r2, [r3, #12]
 810423a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810423c:	f107 0310 	add.w	r3, r7, #16
 8104240:	22c0      	movs	r2, #192	@ 0xc0
 8104242:	2100      	movs	r1, #0
 8104244:	4618      	mov	r0, r3
 8104246:	f00e f969 	bl	811251c <memset>
  if(hi2c->Instance==I2C1)
 810424a:	687b      	ldr	r3, [r7, #4]
 810424c:	681b      	ldr	r3, [r3, #0]
 810424e:	4a26      	ldr	r2, [pc, #152]	@ (81042e8 <HAL_I2C_MspInit+0xc4>)
 8104250:	4293      	cmp	r3, r2
 8104252:	d145      	bne.n	81042e0 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8104254:	f04f 0208 	mov.w	r2, #8
 8104258:	f04f 0300 	mov.w	r3, #0
 810425c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8104260:	2300      	movs	r3, #0
 8104262:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8104266:	f107 0310 	add.w	r3, r7, #16
 810426a:	4618      	mov	r0, r3
 810426c:	f006 f818 	bl	810a2a0 <HAL_RCCEx_PeriphCLKConfig>
 8104270:	4603      	mov	r3, r0
 8104272:	2b00      	cmp	r3, #0
 8104274:	d001      	beq.n	810427a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8104276:	f7ff ff41 	bl	81040fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810427a:	4b1c      	ldr	r3, [pc, #112]	@ (81042ec <HAL_I2C_MspInit+0xc8>)
 810427c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104280:	4a1a      	ldr	r2, [pc, #104]	@ (81042ec <HAL_I2C_MspInit+0xc8>)
 8104282:	f043 0302 	orr.w	r3, r3, #2
 8104286:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810428a:	4b18      	ldr	r3, [pc, #96]	@ (81042ec <HAL_I2C_MspInit+0xc8>)
 810428c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104290:	f003 0302 	and.w	r3, r3, #2
 8104294:	60fb      	str	r3, [r7, #12]
 8104296:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8104298:	23c0      	movs	r3, #192	@ 0xc0
 810429a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810429e:	2312      	movs	r3, #18
 81042a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81042a4:	2300      	movs	r3, #0
 81042a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81042aa:	2300      	movs	r3, #0
 81042ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 81042b0:	2304      	movs	r3, #4
 81042b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81042b6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81042ba:	4619      	mov	r1, r3
 81042bc:	480c      	ldr	r0, [pc, #48]	@ (81042f0 <HAL_I2C_MspInit+0xcc>)
 81042be:	f004 fd97 	bl	8108df0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 81042c2:	4b0a      	ldr	r3, [pc, #40]	@ (81042ec <HAL_I2C_MspInit+0xc8>)
 81042c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81042c8:	4a08      	ldr	r2, [pc, #32]	@ (81042ec <HAL_I2C_MspInit+0xc8>)
 81042ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81042ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81042d2:	4b06      	ldr	r3, [pc, #24]	@ (81042ec <HAL_I2C_MspInit+0xc8>)
 81042d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81042d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81042dc:	60bb      	str	r3, [r7, #8]
 81042de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 81042e0:	bf00      	nop
 81042e2:	37e8      	adds	r7, #232	@ 0xe8
 81042e4:	46bd      	mov	sp, r7
 81042e6:	bd80      	pop	{r7, pc}
 81042e8:	40005400 	.word	0x40005400
 81042ec:	58024400 	.word	0x58024400
 81042f0:	58020400 	.word	0x58020400

081042f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 81042f4:	b580      	push	{r7, lr}
 81042f6:	b088      	sub	sp, #32
 81042f8:	af00      	add	r7, sp, #0
 81042fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 81042fc:	687b      	ldr	r3, [r7, #4]
 81042fe:	681b      	ldr	r3, [r3, #0]
 8104300:	4a4f      	ldr	r2, [pc, #316]	@ (8104440 <HAL_TIM_Base_MspInit+0x14c>)
 8104302:	4293      	cmp	r3, r2
 8104304:	d10f      	bne.n	8104326 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8104306:	4b4f      	ldr	r3, [pc, #316]	@ (8104444 <HAL_TIM_Base_MspInit+0x150>)
 8104308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810430c:	4a4d      	ldr	r2, [pc, #308]	@ (8104444 <HAL_TIM_Base_MspInit+0x150>)
 810430e:	f043 0301 	orr.w	r3, r3, #1
 8104312:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8104316:	4b4b      	ldr	r3, [pc, #300]	@ (8104444 <HAL_TIM_Base_MspInit+0x150>)
 8104318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810431c:	f003 0301 	and.w	r3, r3, #1
 8104320:	61fb      	str	r3, [r7, #28]
 8104322:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8104324:	e087      	b.n	8104436 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM2)
 8104326:	687b      	ldr	r3, [r7, #4]
 8104328:	681b      	ldr	r3, [r3, #0]
 810432a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810432e:	d117      	bne.n	8104360 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8104330:	4b44      	ldr	r3, [pc, #272]	@ (8104444 <HAL_TIM_Base_MspInit+0x150>)
 8104332:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104336:	4a43      	ldr	r2, [pc, #268]	@ (8104444 <HAL_TIM_Base_MspInit+0x150>)
 8104338:	f043 0301 	orr.w	r3, r3, #1
 810433c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8104340:	4b40      	ldr	r3, [pc, #256]	@ (8104444 <HAL_TIM_Base_MspInit+0x150>)
 8104342:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104346:	f003 0301 	and.w	r3, r3, #1
 810434a:	61bb      	str	r3, [r7, #24]
 810434c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 810434e:	2200      	movs	r2, #0
 8104350:	2100      	movs	r1, #0
 8104352:	201c      	movs	r0, #28
 8104354:	f002 fadf 	bl	8106916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8104358:	201c      	movs	r0, #28
 810435a:	f002 faf6 	bl	810694a <HAL_NVIC_EnableIRQ>
}
 810435e:	e06a      	b.n	8104436 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM3)
 8104360:	687b      	ldr	r3, [r7, #4]
 8104362:	681b      	ldr	r3, [r3, #0]
 8104364:	4a38      	ldr	r2, [pc, #224]	@ (8104448 <HAL_TIM_Base_MspInit+0x154>)
 8104366:	4293      	cmp	r3, r2
 8104368:	d10f      	bne.n	810438a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 810436a:	4b36      	ldr	r3, [pc, #216]	@ (8104444 <HAL_TIM_Base_MspInit+0x150>)
 810436c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104370:	4a34      	ldr	r2, [pc, #208]	@ (8104444 <HAL_TIM_Base_MspInit+0x150>)
 8104372:	f043 0302 	orr.w	r3, r3, #2
 8104376:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810437a:	4b32      	ldr	r3, [pc, #200]	@ (8104444 <HAL_TIM_Base_MspInit+0x150>)
 810437c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104380:	f003 0302 	and.w	r3, r3, #2
 8104384:	617b      	str	r3, [r7, #20]
 8104386:	697b      	ldr	r3, [r7, #20]
}
 8104388:	e055      	b.n	8104436 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM6)
 810438a:	687b      	ldr	r3, [r7, #4]
 810438c:	681b      	ldr	r3, [r3, #0]
 810438e:	4a2f      	ldr	r2, [pc, #188]	@ (810444c <HAL_TIM_Base_MspInit+0x158>)
 8104390:	4293      	cmp	r3, r2
 8104392:	d117      	bne.n	81043c4 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8104394:	4b2b      	ldr	r3, [pc, #172]	@ (8104444 <HAL_TIM_Base_MspInit+0x150>)
 8104396:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810439a:	4a2a      	ldr	r2, [pc, #168]	@ (8104444 <HAL_TIM_Base_MspInit+0x150>)
 810439c:	f043 0310 	orr.w	r3, r3, #16
 81043a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81043a4:	4b27      	ldr	r3, [pc, #156]	@ (8104444 <HAL_TIM_Base_MspInit+0x150>)
 81043a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81043aa:	f003 0310 	and.w	r3, r3, #16
 81043ae:	613b      	str	r3, [r7, #16]
 81043b0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 81043b2:	2200      	movs	r2, #0
 81043b4:	2100      	movs	r1, #0
 81043b6:	2036      	movs	r0, #54	@ 0x36
 81043b8:	f002 faad 	bl	8106916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 81043bc:	2036      	movs	r0, #54	@ 0x36
 81043be:	f002 fac4 	bl	810694a <HAL_NVIC_EnableIRQ>
}
 81043c2:	e038      	b.n	8104436 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 81043c4:	687b      	ldr	r3, [r7, #4]
 81043c6:	681b      	ldr	r3, [r3, #0]
 81043c8:	4a21      	ldr	r2, [pc, #132]	@ (8104450 <HAL_TIM_Base_MspInit+0x15c>)
 81043ca:	4293      	cmp	r3, r2
 81043cc:	d117      	bne.n	81043fe <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 81043ce:	4b1d      	ldr	r3, [pc, #116]	@ (8104444 <HAL_TIM_Base_MspInit+0x150>)
 81043d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81043d4:	4a1b      	ldr	r2, [pc, #108]	@ (8104444 <HAL_TIM_Base_MspInit+0x150>)
 81043d6:	f043 0320 	orr.w	r3, r3, #32
 81043da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81043de:	4b19      	ldr	r3, [pc, #100]	@ (8104444 <HAL_TIM_Base_MspInit+0x150>)
 81043e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81043e4:	f003 0320 	and.w	r3, r3, #32
 81043e8:	60fb      	str	r3, [r7, #12]
 81043ea:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 81043ec:	2200      	movs	r2, #0
 81043ee:	2100      	movs	r1, #0
 81043f0:	2037      	movs	r0, #55	@ 0x37
 81043f2:	f002 fa90 	bl	8106916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 81043f6:	2037      	movs	r0, #55	@ 0x37
 81043f8:	f002 faa7 	bl	810694a <HAL_NVIC_EnableIRQ>
}
 81043fc:	e01b      	b.n	8104436 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM12)
 81043fe:	687b      	ldr	r3, [r7, #4]
 8104400:	681b      	ldr	r3, [r3, #0]
 8104402:	4a14      	ldr	r2, [pc, #80]	@ (8104454 <HAL_TIM_Base_MspInit+0x160>)
 8104404:	4293      	cmp	r3, r2
 8104406:	d116      	bne.n	8104436 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8104408:	4b0e      	ldr	r3, [pc, #56]	@ (8104444 <HAL_TIM_Base_MspInit+0x150>)
 810440a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810440e:	4a0d      	ldr	r2, [pc, #52]	@ (8104444 <HAL_TIM_Base_MspInit+0x150>)
 8104410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8104414:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8104418:	4b0a      	ldr	r3, [pc, #40]	@ (8104444 <HAL_TIM_Base_MspInit+0x150>)
 810441a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810441e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104422:	60bb      	str	r3, [r7, #8]
 8104424:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8104426:	2200      	movs	r2, #0
 8104428:	2100      	movs	r1, #0
 810442a:	202b      	movs	r0, #43	@ 0x2b
 810442c:	f002 fa73 	bl	8106916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8104430:	202b      	movs	r0, #43	@ 0x2b
 8104432:	f002 fa8a 	bl	810694a <HAL_NVIC_EnableIRQ>
}
 8104436:	bf00      	nop
 8104438:	3720      	adds	r7, #32
 810443a:	46bd      	mov	sp, r7
 810443c:	bd80      	pop	{r7, pc}
 810443e:	bf00      	nop
 8104440:	40010000 	.word	0x40010000
 8104444:	58024400 	.word	0x58024400
 8104448:	40000400 	.word	0x40000400
 810444c:	40001000 	.word	0x40001000
 8104450:	40001400 	.word	0x40001400
 8104454:	40001800 	.word	0x40001800

08104458 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8104458:	b580      	push	{r7, lr}
 810445a:	b08c      	sub	sp, #48	@ 0x30
 810445c:	af00      	add	r7, sp, #0
 810445e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8104460:	f107 031c 	add.w	r3, r7, #28
 8104464:	2200      	movs	r2, #0
 8104466:	601a      	str	r2, [r3, #0]
 8104468:	605a      	str	r2, [r3, #4]
 810446a:	609a      	str	r2, [r3, #8]
 810446c:	60da      	str	r2, [r3, #12]
 810446e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8104470:	687b      	ldr	r3, [r7, #4]
 8104472:	681b      	ldr	r3, [r3, #0]
 8104474:	4a38      	ldr	r2, [pc, #224]	@ (8104558 <HAL_TIM_Encoder_MspInit+0x100>)
 8104476:	4293      	cmp	r3, r2
 8104478:	d12f      	bne.n	81044da <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 810447a:	4b38      	ldr	r3, [pc, #224]	@ (810455c <HAL_TIM_Encoder_MspInit+0x104>)
 810447c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104480:	4a36      	ldr	r2, [pc, #216]	@ (810455c <HAL_TIM_Encoder_MspInit+0x104>)
 8104482:	f043 0304 	orr.w	r3, r3, #4
 8104486:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810448a:	4b34      	ldr	r3, [pc, #208]	@ (810455c <HAL_TIM_Encoder_MspInit+0x104>)
 810448c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104490:	f003 0304 	and.w	r3, r3, #4
 8104494:	61bb      	str	r3, [r7, #24]
 8104496:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8104498:	4b30      	ldr	r3, [pc, #192]	@ (810455c <HAL_TIM_Encoder_MspInit+0x104>)
 810449a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810449e:	4a2f      	ldr	r2, [pc, #188]	@ (810455c <HAL_TIM_Encoder_MspInit+0x104>)
 81044a0:	f043 0308 	orr.w	r3, r3, #8
 81044a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81044a8:	4b2c      	ldr	r3, [pc, #176]	@ (810455c <HAL_TIM_Encoder_MspInit+0x104>)
 81044aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81044ae:	f003 0308 	and.w	r3, r3, #8
 81044b2:	617b      	str	r3, [r7, #20]
 81044b4:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 81044b6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 81044ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81044bc:	2302      	movs	r3, #2
 81044be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81044c0:	2300      	movs	r3, #0
 81044c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81044c4:	2300      	movs	r3, #0
 81044c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 81044c8:	2302      	movs	r3, #2
 81044ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81044cc:	f107 031c 	add.w	r3, r7, #28
 81044d0:	4619      	mov	r1, r3
 81044d2:	4823      	ldr	r0, [pc, #140]	@ (8104560 <HAL_TIM_Encoder_MspInit+0x108>)
 81044d4:	f004 fc8c 	bl	8108df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 81044d8:	e03a      	b.n	8104550 <HAL_TIM_Encoder_MspInit+0xf8>
  else if(htim_encoder->Instance==TIM8)
 81044da:	687b      	ldr	r3, [r7, #4]
 81044dc:	681b      	ldr	r3, [r3, #0]
 81044de:	4a21      	ldr	r2, [pc, #132]	@ (8104564 <HAL_TIM_Encoder_MspInit+0x10c>)
 81044e0:	4293      	cmp	r3, r2
 81044e2:	d135      	bne.n	8104550 <HAL_TIM_Encoder_MspInit+0xf8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 81044e4:	4b1d      	ldr	r3, [pc, #116]	@ (810455c <HAL_TIM_Encoder_MspInit+0x104>)
 81044e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81044ea:	4a1c      	ldr	r2, [pc, #112]	@ (810455c <HAL_TIM_Encoder_MspInit+0x104>)
 81044ec:	f043 0302 	orr.w	r3, r3, #2
 81044f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81044f4:	4b19      	ldr	r3, [pc, #100]	@ (810455c <HAL_TIM_Encoder_MspInit+0x104>)
 81044f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81044fa:	f003 0302 	and.w	r3, r3, #2
 81044fe:	613b      	str	r3, [r7, #16]
 8104500:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8104502:	4b16      	ldr	r3, [pc, #88]	@ (810455c <HAL_TIM_Encoder_MspInit+0x104>)
 8104504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104508:	4a14      	ldr	r2, [pc, #80]	@ (810455c <HAL_TIM_Encoder_MspInit+0x104>)
 810450a:	f043 0304 	orr.w	r3, r3, #4
 810450e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104512:	4b12      	ldr	r3, [pc, #72]	@ (810455c <HAL_TIM_Encoder_MspInit+0x104>)
 8104514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104518:	f003 0304 	and.w	r3, r3, #4
 810451c:	60fb      	str	r3, [r7, #12]
 810451e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8104520:	23c0      	movs	r3, #192	@ 0xc0
 8104522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8104524:	2302      	movs	r3, #2
 8104526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8104528:	2300      	movs	r3, #0
 810452a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810452c:	2300      	movs	r3, #0
 810452e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8104530:	2303      	movs	r3, #3
 8104532:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8104534:	f107 031c 	add.w	r3, r7, #28
 8104538:	4619      	mov	r1, r3
 810453a:	480b      	ldr	r0, [pc, #44]	@ (8104568 <HAL_TIM_Encoder_MspInit+0x110>)
 810453c:	f004 fc58 	bl	8108df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8104540:	2200      	movs	r2, #0
 8104542:	2100      	movs	r1, #0
 8104544:	202b      	movs	r0, #43	@ 0x2b
 8104546:	f002 f9e6 	bl	8106916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 810454a:	202b      	movs	r0, #43	@ 0x2b
 810454c:	f002 f9fd 	bl	810694a <HAL_NVIC_EnableIRQ>
}
 8104550:	bf00      	nop
 8104552:	3730      	adds	r7, #48	@ 0x30
 8104554:	46bd      	mov	sp, r7
 8104556:	bd80      	pop	{r7, pc}
 8104558:	40000800 	.word	0x40000800
 810455c:	58024400 	.word	0x58024400
 8104560:	58020c00 	.word	0x58020c00
 8104564:	40010400 	.word	0x40010400
 8104568:	58020800 	.word	0x58020800

0810456c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 810456c:	b580      	push	{r7, lr}
 810456e:	b08a      	sub	sp, #40	@ 0x28
 8104570:	af00      	add	r7, sp, #0
 8104572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8104574:	f107 0314 	add.w	r3, r7, #20
 8104578:	2200      	movs	r2, #0
 810457a:	601a      	str	r2, [r3, #0]
 810457c:	605a      	str	r2, [r3, #4]
 810457e:	609a      	str	r2, [r3, #8]
 8104580:	60da      	str	r2, [r3, #12]
 8104582:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8104584:	687b      	ldr	r3, [r7, #4]
 8104586:	681b      	ldr	r3, [r3, #0]
 8104588:	4a25      	ldr	r2, [pc, #148]	@ (8104620 <HAL_TIM_MspPostInit+0xb4>)
 810458a:	4293      	cmp	r3, r2
 810458c:	d120      	bne.n	81045d0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 810458e:	4b25      	ldr	r3, [pc, #148]	@ (8104624 <HAL_TIM_MspPostInit+0xb8>)
 8104590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104594:	4a23      	ldr	r2, [pc, #140]	@ (8104624 <HAL_TIM_MspPostInit+0xb8>)
 8104596:	f043 0310 	orr.w	r3, r3, #16
 810459a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810459e:	4b21      	ldr	r3, [pc, #132]	@ (8104624 <HAL_TIM_MspPostInit+0xb8>)
 81045a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81045a4:	f003 0310 	and.w	r3, r3, #16
 81045a8:	613b      	str	r3, [r7, #16]
 81045aa:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 81045ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81045b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81045b2:	2302      	movs	r3, #2
 81045b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81045b6:	2300      	movs	r3, #0
 81045b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81045ba:	2300      	movs	r3, #0
 81045bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 81045be:	2301      	movs	r3, #1
 81045c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81045c2:	f107 0314 	add.w	r3, r7, #20
 81045c6:	4619      	mov	r1, r3
 81045c8:	4817      	ldr	r0, [pc, #92]	@ (8104628 <HAL_TIM_MspPostInit+0xbc>)
 81045ca:	f004 fc11 	bl	8108df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 81045ce:	e023      	b.n	8104618 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 81045d0:	687b      	ldr	r3, [r7, #4]
 81045d2:	681b      	ldr	r3, [r3, #0]
 81045d4:	4a15      	ldr	r2, [pc, #84]	@ (810462c <HAL_TIM_MspPostInit+0xc0>)
 81045d6:	4293      	cmp	r3, r2
 81045d8:	d11e      	bne.n	8104618 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81045da:	4b12      	ldr	r3, [pc, #72]	@ (8104624 <HAL_TIM_MspPostInit+0xb8>)
 81045dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81045e0:	4a10      	ldr	r2, [pc, #64]	@ (8104624 <HAL_TIM_MspPostInit+0xb8>)
 81045e2:	f043 0301 	orr.w	r3, r3, #1
 81045e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81045ea:	4b0e      	ldr	r3, [pc, #56]	@ (8104624 <HAL_TIM_MspPostInit+0xb8>)
 81045ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81045f0:	f003 0301 	and.w	r3, r3, #1
 81045f4:	60fb      	str	r3, [r7, #12]
 81045f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 81045f8:	2340      	movs	r3, #64	@ 0x40
 81045fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81045fc:	2302      	movs	r3, #2
 81045fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8104600:	2300      	movs	r3, #0
 8104602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8104604:	2300      	movs	r3, #0
 8104606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8104608:	2302      	movs	r3, #2
 810460a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810460c:	f107 0314 	add.w	r3, r7, #20
 8104610:	4619      	mov	r1, r3
 8104612:	4807      	ldr	r0, [pc, #28]	@ (8104630 <HAL_TIM_MspPostInit+0xc4>)
 8104614:	f004 fbec 	bl	8108df0 <HAL_GPIO_Init>
}
 8104618:	bf00      	nop
 810461a:	3728      	adds	r7, #40	@ 0x28
 810461c:	46bd      	mov	sp, r7
 810461e:	bd80      	pop	{r7, pc}
 8104620:	40010000 	.word	0x40010000
 8104624:	58024400 	.word	0x58024400
 8104628:	58021000 	.word	0x58021000
 810462c:	40000400 	.word	0x40000400
 8104630:	58020000 	.word	0x58020000

08104634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8104634:	b580      	push	{r7, lr}
 8104636:	b0c0      	sub	sp, #256	@ 0x100
 8104638:	af00      	add	r7, sp, #0
 810463a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810463c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8104640:	2200      	movs	r2, #0
 8104642:	601a      	str	r2, [r3, #0]
 8104644:	605a      	str	r2, [r3, #4]
 8104646:	609a      	str	r2, [r3, #8]
 8104648:	60da      	str	r2, [r3, #12]
 810464a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810464c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8104650:	22c0      	movs	r2, #192	@ 0xc0
 8104652:	2100      	movs	r1, #0
 8104654:	4618      	mov	r0, r3
 8104656:	f00d ff61 	bl	811251c <memset>
  if(huart->Instance==USART2)
 810465a:	687b      	ldr	r3, [r7, #4]
 810465c:	681b      	ldr	r3, [r3, #0]
 810465e:	4aa5      	ldr	r2, [pc, #660]	@ (81048f4 <HAL_UART_MspInit+0x2c0>)
 8104660:	4293      	cmp	r3, r2
 8104662:	d172      	bne.n	810474a <HAL_UART_MspInit+0x116>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8104664:	f04f 0202 	mov.w	r2, #2
 8104668:	f04f 0300 	mov.w	r3, #0
 810466c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8104670:	2300      	movs	r3, #0
 8104672:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8104676:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810467a:	4618      	mov	r0, r3
 810467c:	f005 fe10 	bl	810a2a0 <HAL_RCCEx_PeriphCLKConfig>
 8104680:	4603      	mov	r3, r0
 8104682:	2b00      	cmp	r3, #0
 8104684:	d001      	beq.n	810468a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8104686:	f7ff fd39 	bl	81040fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 810468a:	4b9b      	ldr	r3, [pc, #620]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 810468c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104690:	4a99      	ldr	r2, [pc, #612]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 8104692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104696:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810469a:	4b97      	ldr	r3, [pc, #604]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 810469c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81046a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81046a4:	627b      	str	r3, [r7, #36]	@ 0x24
 81046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81046a8:	4b93      	ldr	r3, [pc, #588]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 81046aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81046ae:	4a92      	ldr	r2, [pc, #584]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 81046b0:	f043 0301 	orr.w	r3, r3, #1
 81046b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81046b8:	4b8f      	ldr	r3, [pc, #572]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 81046ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81046be:	f003 0301 	and.w	r3, r3, #1
 81046c2:	623b      	str	r3, [r7, #32]
 81046c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81046c6:	4b8c      	ldr	r3, [pc, #560]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 81046c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81046cc:	4a8a      	ldr	r2, [pc, #552]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 81046ce:	f043 0308 	orr.w	r3, r3, #8
 81046d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81046d6:	4b88      	ldr	r3, [pc, #544]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 81046d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81046dc:	f003 0308 	and.w	r3, r3, #8
 81046e0:	61fb      	str	r3, [r7, #28]
 81046e2:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 81046e4:	2308      	movs	r3, #8
 81046e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81046ea:	2302      	movs	r3, #2
 81046ec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81046f0:	2300      	movs	r3, #0
 81046f2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81046f6:	2300      	movs	r3, #0
 81046f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 81046fc:	2307      	movs	r3, #7
 81046fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8104702:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8104706:	4619      	mov	r1, r3
 8104708:	487c      	ldr	r0, [pc, #496]	@ (81048fc <HAL_UART_MspInit+0x2c8>)
 810470a:	f004 fb71 	bl	8108df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 810470e:	2320      	movs	r3, #32
 8104710:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8104714:	2302      	movs	r3, #2
 8104716:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810471a:	2300      	movs	r3, #0
 810471c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8104720:	2300      	movs	r3, #0
 8104722:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8104726:	2307      	movs	r3, #7
 8104728:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810472c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8104730:	4619      	mov	r1, r3
 8104732:	4873      	ldr	r0, [pc, #460]	@ (8104900 <HAL_UART_MspInit+0x2cc>)
 8104734:	f004 fb5c 	bl	8108df0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8104738:	2200      	movs	r2, #0
 810473a:	2100      	movs	r1, #0
 810473c:	2026      	movs	r0, #38	@ 0x26
 810473e:	f002 f8ea 	bl	8106916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8104742:	2026      	movs	r0, #38	@ 0x26
 8104744:	f002 f901 	bl	810694a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8104748:	e0ce      	b.n	81048e8 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART3)
 810474a:	687b      	ldr	r3, [r7, #4]
 810474c:	681b      	ldr	r3, [r3, #0]
 810474e:	4a6d      	ldr	r2, [pc, #436]	@ (8104904 <HAL_UART_MspInit+0x2d0>)
 8104750:	4293      	cmp	r3, r2
 8104752:	d147      	bne.n	81047e4 <HAL_UART_MspInit+0x1b0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8104754:	f04f 0202 	mov.w	r2, #2
 8104758:	f04f 0300 	mov.w	r3, #0
 810475c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8104760:	2300      	movs	r3, #0
 8104762:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8104766:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810476a:	4618      	mov	r0, r3
 810476c:	f005 fd98 	bl	810a2a0 <HAL_RCCEx_PeriphCLKConfig>
 8104770:	4603      	mov	r3, r0
 8104772:	2b00      	cmp	r3, #0
 8104774:	d001      	beq.n	810477a <HAL_UART_MspInit+0x146>
      Error_Handler();
 8104776:	f7ff fcc1 	bl	81040fc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 810477a:	4b5f      	ldr	r3, [pc, #380]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 810477c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104780:	4a5d      	ldr	r2, [pc, #372]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 8104782:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8104786:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810478a:	4b5b      	ldr	r3, [pc, #364]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 810478c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104790:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8104794:	61bb      	str	r3, [r7, #24]
 8104796:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8104798:	4b57      	ldr	r3, [pc, #348]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 810479a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810479e:	4a56      	ldr	r2, [pc, #344]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 81047a0:	f043 0308 	orr.w	r3, r3, #8
 81047a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81047a8:	4b53      	ldr	r3, [pc, #332]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 81047aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81047ae:	f003 0308 	and.w	r3, r3, #8
 81047b2:	617b      	str	r3, [r7, #20]
 81047b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 81047b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 81047ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81047be:	2302      	movs	r3, #2
 81047c0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81047c4:	2300      	movs	r3, #0
 81047c6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81047ca:	2300      	movs	r3, #0
 81047cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81047d0:	2307      	movs	r3, #7
 81047d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81047d6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 81047da:	4619      	mov	r1, r3
 81047dc:	4848      	ldr	r0, [pc, #288]	@ (8104900 <HAL_UART_MspInit+0x2cc>)
 81047de:	f004 fb07 	bl	8108df0 <HAL_GPIO_Init>
}
 81047e2:	e081      	b.n	81048e8 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART6)
 81047e4:	687b      	ldr	r3, [r7, #4]
 81047e6:	681b      	ldr	r3, [r3, #0]
 81047e8:	4a47      	ldr	r2, [pc, #284]	@ (8104908 <HAL_UART_MspInit+0x2d4>)
 81047ea:	4293      	cmp	r3, r2
 81047ec:	d17c      	bne.n	81048e8 <HAL_UART_MspInit+0x2b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 81047ee:	f04f 0201 	mov.w	r2, #1
 81047f2:	f04f 0300 	mov.w	r3, #0
 81047f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 81047fa:	2300      	movs	r3, #0
 81047fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8104800:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8104804:	4618      	mov	r0, r3
 8104806:	f005 fd4b 	bl	810a2a0 <HAL_RCCEx_PeriphCLKConfig>
 810480a:	4603      	mov	r3, r0
 810480c:	2b00      	cmp	r3, #0
 810480e:	d001      	beq.n	8104814 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8104810:	f7ff fc74 	bl	81040fc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8104814:	4b38      	ldr	r3, [pc, #224]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 8104816:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810481a:	4a37      	ldr	r2, [pc, #220]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 810481c:	f043 0320 	orr.w	r3, r3, #32
 8104820:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8104824:	4b34      	ldr	r3, [pc, #208]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 8104826:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810482a:	f003 0320 	and.w	r3, r3, #32
 810482e:	613b      	str	r3, [r7, #16]
 8104830:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8104832:	4b31      	ldr	r3, [pc, #196]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 8104834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104838:	4a2f      	ldr	r2, [pc, #188]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 810483a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810483e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104842:	4b2d      	ldr	r3, [pc, #180]	@ (81048f8 <HAL_UART_MspInit+0x2c4>)
 8104844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810484c:	60fb      	str	r3, [r7, #12]
 810484e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8104850:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8104854:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8104858:	2302      	movs	r3, #2
 810485a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810485e:	2300      	movs	r3, #0
 8104860:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8104864:	2300      	movs	r3, #0
 8104866:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 810486a:	2307      	movs	r3, #7
 810486c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8104870:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8104874:	4619      	mov	r1, r3
 8104876:	4825      	ldr	r0, [pc, #148]	@ (810490c <HAL_UART_MspInit+0x2d8>)
 8104878:	f004 faba 	bl	8108df0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 810487c:	4b24      	ldr	r3, [pc, #144]	@ (8104910 <HAL_UART_MspInit+0x2dc>)
 810487e:	4a25      	ldr	r2, [pc, #148]	@ (8104914 <HAL_UART_MspInit+0x2e0>)
 8104880:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8104882:	4b23      	ldr	r3, [pc, #140]	@ (8104910 <HAL_UART_MspInit+0x2dc>)
 8104884:	2247      	movs	r2, #71	@ 0x47
 8104886:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8104888:	4b21      	ldr	r3, [pc, #132]	@ (8104910 <HAL_UART_MspInit+0x2dc>)
 810488a:	2200      	movs	r2, #0
 810488c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 810488e:	4b20      	ldr	r3, [pc, #128]	@ (8104910 <HAL_UART_MspInit+0x2dc>)
 8104890:	2200      	movs	r2, #0
 8104892:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8104894:	4b1e      	ldr	r3, [pc, #120]	@ (8104910 <HAL_UART_MspInit+0x2dc>)
 8104896:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810489a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810489c:	4b1c      	ldr	r3, [pc, #112]	@ (8104910 <HAL_UART_MspInit+0x2dc>)
 810489e:	2200      	movs	r2, #0
 81048a0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81048a2:	4b1b      	ldr	r3, [pc, #108]	@ (8104910 <HAL_UART_MspInit+0x2dc>)
 81048a4:	2200      	movs	r2, #0
 81048a6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 81048a8:	4b19      	ldr	r3, [pc, #100]	@ (8104910 <HAL_UART_MspInit+0x2dc>)
 81048aa:	2200      	movs	r2, #0
 81048ac:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 81048ae:	4b18      	ldr	r3, [pc, #96]	@ (8104910 <HAL_UART_MspInit+0x2dc>)
 81048b0:	2200      	movs	r2, #0
 81048b2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81048b4:	4b16      	ldr	r3, [pc, #88]	@ (8104910 <HAL_UART_MspInit+0x2dc>)
 81048b6:	2200      	movs	r2, #0
 81048b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 81048ba:	4815      	ldr	r0, [pc, #84]	@ (8104910 <HAL_UART_MspInit+0x2dc>)
 81048bc:	f002 f874 	bl	81069a8 <HAL_DMA_Init>
 81048c0:	4603      	mov	r3, r0
 81048c2:	2b00      	cmp	r3, #0
 81048c4:	d001      	beq.n	81048ca <HAL_UART_MspInit+0x296>
      Error_Handler();
 81048c6:	f7ff fc19 	bl	81040fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 81048ca:	687b      	ldr	r3, [r7, #4]
 81048cc:	4a10      	ldr	r2, [pc, #64]	@ (8104910 <HAL_UART_MspInit+0x2dc>)
 81048ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 81048d2:	4a0f      	ldr	r2, [pc, #60]	@ (8104910 <HAL_UART_MspInit+0x2dc>)
 81048d4:	687b      	ldr	r3, [r7, #4]
 81048d6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 81048d8:	2200      	movs	r2, #0
 81048da:	2100      	movs	r1, #0
 81048dc:	2047      	movs	r0, #71	@ 0x47
 81048de:	f002 f81a 	bl	8106916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 81048e2:	2047      	movs	r0, #71	@ 0x47
 81048e4:	f002 f831 	bl	810694a <HAL_NVIC_EnableIRQ>
}
 81048e8:	bf00      	nop
 81048ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 81048ee:	46bd      	mov	sp, r7
 81048f0:	bd80      	pop	{r7, pc}
 81048f2:	bf00      	nop
 81048f4:	40004400 	.word	0x40004400
 81048f8:	58024400 	.word	0x58024400
 81048fc:	58020000 	.word	0x58020000
 8104900:	58020c00 	.word	0x58020c00
 8104904:	40004800 	.word	0x40004800
 8104908:	40011400 	.word	0x40011400
 810490c:	58021800 	.word	0x58021800
 8104910:	10000764 	.word	0x10000764
 8104914:	40020428 	.word	0x40020428

08104918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8104918:	b480      	push	{r7}
 810491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 810491c:	bf00      	nop
 810491e:	e7fd      	b.n	810491c <NMI_Handler+0x4>

08104920 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8104920:	b480      	push	{r7}
 8104922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8104924:	bf00      	nop
 8104926:	e7fd      	b.n	8104924 <HardFault_Handler+0x4>

08104928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8104928:	b480      	push	{r7}
 810492a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810492c:	bf00      	nop
 810492e:	e7fd      	b.n	810492c <MemManage_Handler+0x4>

08104930 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8104930:	b480      	push	{r7}
 8104932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8104934:	bf00      	nop
 8104936:	e7fd      	b.n	8104934 <BusFault_Handler+0x4>

08104938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8104938:	b480      	push	{r7}
 810493a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810493c:	bf00      	nop
 810493e:	e7fd      	b.n	810493c <UsageFault_Handler+0x4>

08104940 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8104940:	b480      	push	{r7}
 8104942:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8104944:	bf00      	nop
 8104946:	46bd      	mov	sp, r7
 8104948:	f85d 7b04 	ldr.w	r7, [sp], #4
 810494c:	4770      	bx	lr

0810494e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810494e:	b480      	push	{r7}
 8104950:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8104952:	bf00      	nop
 8104954:	46bd      	mov	sp, r7
 8104956:	f85d 7b04 	ldr.w	r7, [sp], #4
 810495a:	4770      	bx	lr

0810495c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810495c:	b480      	push	{r7}
 810495e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8104960:	bf00      	nop
 8104962:	46bd      	mov	sp, r7
 8104964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104968:	4770      	bx	lr

0810496a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810496a:	b580      	push	{r7, lr}
 810496c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810496e:	f000 f9bf 	bl	8104cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8104972:	bf00      	nop
 8104974:	bd80      	pop	{r7, pc}
	...

08104978 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8104978:	b580      	push	{r7, lr}
 810497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 810497c:	4802      	ldr	r0, [pc, #8]	@ (8104988 <TIM2_IRQHandler+0x10>)
 810497e:	f008 fce3 	bl	810d348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8104982:	bf00      	nop
 8104984:	bd80      	pop	{r7, pc}
 8104986:	bf00      	nop
 8104988:	10000394 	.word	0x10000394

0810498c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 810498c:	b580      	push	{r7, lr}
 810498e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8104990:	4802      	ldr	r0, [pc, #8]	@ (810499c <USART2_IRQHandler+0x10>)
 8104992:	f009 ff6f 	bl	810e874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8104996:	bf00      	nop
 8104998:	bd80      	pop	{r7, pc}
 810499a:	bf00      	nop
 810499c:	100005a8 	.word	0x100005a8

081049a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 81049a0:	b580      	push	{r7, lr}
 81049a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 81049a4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 81049a8:	f004 fbeb 	bl	8109182 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 81049ac:	bf00      	nop
 81049ae:	bd80      	pop	{r7, pc}

081049b0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 81049b0:	b580      	push	{r7, lr}
 81049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 81049b4:	4803      	ldr	r0, [pc, #12]	@ (81049c4 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 81049b6:	f008 fcc7 	bl	810d348 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 81049ba:	4803      	ldr	r0, [pc, #12]	@ (81049c8 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 81049bc:	f008 fcc4 	bl	810d348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 81049c0:	bf00      	nop
 81049c2:	bd80      	pop	{r7, pc}
 81049c4:	10000510 	.word	0x10000510
 81049c8:	1000055c 	.word	0x1000055c

081049cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 81049cc:	b580      	push	{r7, lr}
 81049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 81049d0:	4802      	ldr	r0, [pc, #8]	@ (81049dc <TIM6_DAC_IRQHandler+0x10>)
 81049d2:	f008 fcb9 	bl	810d348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 81049d6:	bf00      	nop
 81049d8:	bd80      	pop	{r7, pc}
 81049da:	bf00      	nop
 81049dc:	10000478 	.word	0x10000478

081049e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 81049e0:	b580      	push	{r7, lr}
 81049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 81049e4:	4802      	ldr	r0, [pc, #8]	@ (81049f0 <TIM7_IRQHandler+0x10>)
 81049e6:	f008 fcaf 	bl	810d348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 81049ea:	bf00      	nop
 81049ec:	bd80      	pop	{r7, pc}
 81049ee:	bf00      	nop
 81049f0:	100004c4 	.word	0x100004c4

081049f4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 81049f4:	b580      	push	{r7, lr}
 81049f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 81049f8:	4802      	ldr	r0, [pc, #8]	@ (8104a04 <DMA2_Stream1_IRQHandler+0x10>)
 81049fa:	f003 f893 	bl	8107b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 81049fe:	bf00      	nop
 8104a00:	bd80      	pop	{r7, pc}
 8104a02:	bf00      	nop
 8104a04:	10000764 	.word	0x10000764

08104a08 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8104a08:	b580      	push	{r7, lr}
 8104a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8104a0c:	4802      	ldr	r0, [pc, #8]	@ (8104a18 <USART6_IRQHandler+0x10>)
 8104a0e:	f009 ff31 	bl	810e874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8104a12:	bf00      	nop
 8104a14:	bd80      	pop	{r7, pc}
 8104a16:	bf00      	nop
 8104a18:	100006d0 	.word	0x100006d0

08104a1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8104a1c:	b480      	push	{r7}
 8104a1e:	af00      	add	r7, sp, #0
  return 1;
 8104a20:	2301      	movs	r3, #1
}
 8104a22:	4618      	mov	r0, r3
 8104a24:	46bd      	mov	sp, r7
 8104a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a2a:	4770      	bx	lr

08104a2c <_kill>:

int _kill(int pid, int sig)
{
 8104a2c:	b580      	push	{r7, lr}
 8104a2e:	b082      	sub	sp, #8
 8104a30:	af00      	add	r7, sp, #0
 8104a32:	6078      	str	r0, [r7, #4]
 8104a34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8104a36:	f00d fdc3 	bl	81125c0 <__errno>
 8104a3a:	4603      	mov	r3, r0
 8104a3c:	2216      	movs	r2, #22
 8104a3e:	601a      	str	r2, [r3, #0]
  return -1;
 8104a40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8104a44:	4618      	mov	r0, r3
 8104a46:	3708      	adds	r7, #8
 8104a48:	46bd      	mov	sp, r7
 8104a4a:	bd80      	pop	{r7, pc}

08104a4c <_exit>:

void _exit (int status)
{
 8104a4c:	b580      	push	{r7, lr}
 8104a4e:	b082      	sub	sp, #8
 8104a50:	af00      	add	r7, sp, #0
 8104a52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8104a54:	f04f 31ff 	mov.w	r1, #4294967295
 8104a58:	6878      	ldr	r0, [r7, #4]
 8104a5a:	f7ff ffe7 	bl	8104a2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8104a5e:	bf00      	nop
 8104a60:	e7fd      	b.n	8104a5e <_exit+0x12>

08104a62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8104a62:	b580      	push	{r7, lr}
 8104a64:	b086      	sub	sp, #24
 8104a66:	af00      	add	r7, sp, #0
 8104a68:	60f8      	str	r0, [r7, #12]
 8104a6a:	60b9      	str	r1, [r7, #8]
 8104a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  len=1;
 8104a6e:	2301      	movs	r3, #1
 8104a70:	607b      	str	r3, [r7, #4]

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8104a72:	2300      	movs	r3, #0
 8104a74:	617b      	str	r3, [r7, #20]
 8104a76:	e00a      	b.n	8104a8e <_read+0x2c>
  {
    *ptr++ = __io_getchar();
 8104a78:	f7ff fa4e 	bl	8103f18 <__io_getchar>
 8104a7c:	4601      	mov	r1, r0
 8104a7e:	68bb      	ldr	r3, [r7, #8]
 8104a80:	1c5a      	adds	r2, r3, #1
 8104a82:	60ba      	str	r2, [r7, #8]
 8104a84:	b2ca      	uxtb	r2, r1
 8104a86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8104a88:	697b      	ldr	r3, [r7, #20]
 8104a8a:	3301      	adds	r3, #1
 8104a8c:	617b      	str	r3, [r7, #20]
 8104a8e:	697a      	ldr	r2, [r7, #20]
 8104a90:	687b      	ldr	r3, [r7, #4]
 8104a92:	429a      	cmp	r2, r3
 8104a94:	dbf0      	blt.n	8104a78 <_read+0x16>
  }

  return len;
 8104a96:	687b      	ldr	r3, [r7, #4]
}
 8104a98:	4618      	mov	r0, r3
 8104a9a:	3718      	adds	r7, #24
 8104a9c:	46bd      	mov	sp, r7
 8104a9e:	bd80      	pop	{r7, pc}

08104aa0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8104aa0:	b480      	push	{r7}
 8104aa2:	b083      	sub	sp, #12
 8104aa4:	af00      	add	r7, sp, #0
 8104aa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8104aa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8104aac:	4618      	mov	r0, r3
 8104aae:	370c      	adds	r7, #12
 8104ab0:	46bd      	mov	sp, r7
 8104ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ab6:	4770      	bx	lr

08104ab8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8104ab8:	b480      	push	{r7}
 8104aba:	b083      	sub	sp, #12
 8104abc:	af00      	add	r7, sp, #0
 8104abe:	6078      	str	r0, [r7, #4]
 8104ac0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8104ac2:	683b      	ldr	r3, [r7, #0]
 8104ac4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8104ac8:	605a      	str	r2, [r3, #4]
  return 0;
 8104aca:	2300      	movs	r3, #0
}
 8104acc:	4618      	mov	r0, r3
 8104ace:	370c      	adds	r7, #12
 8104ad0:	46bd      	mov	sp, r7
 8104ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ad6:	4770      	bx	lr

08104ad8 <_isatty>:

int _isatty(int file)
{
 8104ad8:	b480      	push	{r7}
 8104ada:	b083      	sub	sp, #12
 8104adc:	af00      	add	r7, sp, #0
 8104ade:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8104ae0:	2301      	movs	r3, #1
}
 8104ae2:	4618      	mov	r0, r3
 8104ae4:	370c      	adds	r7, #12
 8104ae6:	46bd      	mov	sp, r7
 8104ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104aec:	4770      	bx	lr

08104aee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8104aee:	b480      	push	{r7}
 8104af0:	b085      	sub	sp, #20
 8104af2:	af00      	add	r7, sp, #0
 8104af4:	60f8      	str	r0, [r7, #12]
 8104af6:	60b9      	str	r1, [r7, #8]
 8104af8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8104afa:	2300      	movs	r3, #0
}
 8104afc:	4618      	mov	r0, r3
 8104afe:	3714      	adds	r7, #20
 8104b00:	46bd      	mov	sp, r7
 8104b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b06:	4770      	bx	lr

08104b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8104b08:	b580      	push	{r7, lr}
 8104b0a:	b086      	sub	sp, #24
 8104b0c:	af00      	add	r7, sp, #0
 8104b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8104b10:	4a14      	ldr	r2, [pc, #80]	@ (8104b64 <_sbrk+0x5c>)
 8104b12:	4b15      	ldr	r3, [pc, #84]	@ (8104b68 <_sbrk+0x60>)
 8104b14:	1ad3      	subs	r3, r2, r3
 8104b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8104b18:	697b      	ldr	r3, [r7, #20]
 8104b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8104b1c:	4b13      	ldr	r3, [pc, #76]	@ (8104b6c <_sbrk+0x64>)
 8104b1e:	681b      	ldr	r3, [r3, #0]
 8104b20:	2b00      	cmp	r3, #0
 8104b22:	d102      	bne.n	8104b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8104b24:	4b11      	ldr	r3, [pc, #68]	@ (8104b6c <_sbrk+0x64>)
 8104b26:	4a12      	ldr	r2, [pc, #72]	@ (8104b70 <_sbrk+0x68>)
 8104b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8104b2a:	4b10      	ldr	r3, [pc, #64]	@ (8104b6c <_sbrk+0x64>)
 8104b2c:	681a      	ldr	r2, [r3, #0]
 8104b2e:	687b      	ldr	r3, [r7, #4]
 8104b30:	4413      	add	r3, r2
 8104b32:	693a      	ldr	r2, [r7, #16]
 8104b34:	429a      	cmp	r2, r3
 8104b36:	d207      	bcs.n	8104b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8104b38:	f00d fd42 	bl	81125c0 <__errno>
 8104b3c:	4603      	mov	r3, r0
 8104b3e:	220c      	movs	r2, #12
 8104b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8104b42:	f04f 33ff 	mov.w	r3, #4294967295
 8104b46:	e009      	b.n	8104b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8104b48:	4b08      	ldr	r3, [pc, #32]	@ (8104b6c <_sbrk+0x64>)
 8104b4a:	681b      	ldr	r3, [r3, #0]
 8104b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8104b4e:	4b07      	ldr	r3, [pc, #28]	@ (8104b6c <_sbrk+0x64>)
 8104b50:	681a      	ldr	r2, [r3, #0]
 8104b52:	687b      	ldr	r3, [r7, #4]
 8104b54:	4413      	add	r3, r2
 8104b56:	4a05      	ldr	r2, [pc, #20]	@ (8104b6c <_sbrk+0x64>)
 8104b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8104b5a:	68fb      	ldr	r3, [r7, #12]
}
 8104b5c:	4618      	mov	r0, r3
 8104b5e:	3718      	adds	r7, #24
 8104b60:	46bd      	mov	sp, r7
 8104b62:	bd80      	pop	{r7, pc}
 8104b64:	10048000 	.word	0x10048000
 8104b68:	00000400 	.word	0x00000400
 8104b6c:	1000d3c0 	.word	0x1000d3c0
 8104b70:	1000d518 	.word	0x1000d518

08104b74 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:



  ldr   sp, =_estack      /* set stack pointer */
 8104b74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8104bac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8104b78:	f7fc fabc 	bl	81010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8104b7c:	480c      	ldr	r0, [pc, #48]	@ (8104bb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8104b7e:	490d      	ldr	r1, [pc, #52]	@ (8104bb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8104b80:	4a0d      	ldr	r2, [pc, #52]	@ (8104bb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8104b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8104b84:	e002      	b.n	8104b8c <LoopCopyDataInit>

08104b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8104b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8104b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8104b8a:	3304      	adds	r3, #4

08104b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8104b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8104b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8104b90:	d3f9      	bcc.n	8104b86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8104b92:	4a0a      	ldr	r2, [pc, #40]	@ (8104bbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8104b94:	4c0a      	ldr	r4, [pc, #40]	@ (8104bc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8104b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8104b98:	e001      	b.n	8104b9e <LoopFillZerobss>

08104b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8104b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8104b9c:	3204      	adds	r2, #4

08104b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8104b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8104ba0:	d3fb      	bcc.n	8104b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8104ba2:	f00d fd13 	bl	81125cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8104ba6:	f7fd fa1b 	bl	8101fe0 <main>
  bx  lr
 8104baa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8104bac:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8104bb0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8104bb4:	1000026c 	.word	0x1000026c
  ldr r2, =_sidata
 8104bb8:	08117378 	.word	0x08117378
  ldr r2, =_sbss
 8104bbc:	10000270 	.word	0x10000270
  ldr r4, =_ebss
 8104bc0:	1000d514 	.word	0x1000d514

08104bc4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8104bc4:	e7fe      	b.n	8104bc4 <ADC3_IRQHandler>
	...

08104bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8104bc8:	b580      	push	{r7, lr}
 8104bca:	b082      	sub	sp, #8
 8104bcc:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8104bce:	4b28      	ldr	r3, [pc, #160]	@ (8104c70 <HAL_Init+0xa8>)
 8104bd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104bd4:	4a26      	ldr	r2, [pc, #152]	@ (8104c70 <HAL_Init+0xa8>)
 8104bd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8104bda:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8104bde:	4b24      	ldr	r3, [pc, #144]	@ (8104c70 <HAL_Init+0xa8>)
 8104be0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104be4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8104be8:	603b      	str	r3, [r7, #0]
 8104bea:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8104bec:	4b21      	ldr	r3, [pc, #132]	@ (8104c74 <HAL_Init+0xac>)
 8104bee:	681b      	ldr	r3, [r3, #0]
 8104bf0:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8104bf4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8104bf8:	4a1e      	ldr	r2, [pc, #120]	@ (8104c74 <HAL_Init+0xac>)
 8104bfa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8104bfe:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8104c00:	4b1c      	ldr	r3, [pc, #112]	@ (8104c74 <HAL_Init+0xac>)
 8104c02:	681b      	ldr	r3, [r3, #0]
 8104c04:	4a1b      	ldr	r2, [pc, #108]	@ (8104c74 <HAL_Init+0xac>)
 8104c06:	f043 0301 	orr.w	r3, r3, #1
 8104c0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8104c0c:	2003      	movs	r0, #3
 8104c0e:	f001 fe77 	bl	8106900 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8104c12:	f005 f96d 	bl	8109ef0 <HAL_RCC_GetSysClockFreq>
 8104c16:	4602      	mov	r2, r0
 8104c18:	4b15      	ldr	r3, [pc, #84]	@ (8104c70 <HAL_Init+0xa8>)
 8104c1a:	699b      	ldr	r3, [r3, #24]
 8104c1c:	0a1b      	lsrs	r3, r3, #8
 8104c1e:	f003 030f 	and.w	r3, r3, #15
 8104c22:	4915      	ldr	r1, [pc, #84]	@ (8104c78 <HAL_Init+0xb0>)
 8104c24:	5ccb      	ldrb	r3, [r1, r3]
 8104c26:	f003 031f 	and.w	r3, r3, #31
 8104c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8104c2e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104c30:	4b0f      	ldr	r3, [pc, #60]	@ (8104c70 <HAL_Init+0xa8>)
 8104c32:	699b      	ldr	r3, [r3, #24]
 8104c34:	f003 030f 	and.w	r3, r3, #15
 8104c38:	4a0f      	ldr	r2, [pc, #60]	@ (8104c78 <HAL_Init+0xb0>)
 8104c3a:	5cd3      	ldrb	r3, [r2, r3]
 8104c3c:	f003 031f 	and.w	r3, r3, #31
 8104c40:	687a      	ldr	r2, [r7, #4]
 8104c42:	fa22 f303 	lsr.w	r3, r2, r3
 8104c46:	4a0d      	ldr	r2, [pc, #52]	@ (8104c7c <HAL_Init+0xb4>)
 8104c48:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8104c7c <HAL_Init+0xb4>)
 8104c4c:	681b      	ldr	r3, [r3, #0]
 8104c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8104c80 <HAL_Init+0xb8>)
 8104c50:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8104c52:	2000      	movs	r0, #0
 8104c54:	f000 f816 	bl	8104c84 <HAL_InitTick>
 8104c58:	4603      	mov	r3, r0
 8104c5a:	2b00      	cmp	r3, #0
 8104c5c:	d001      	beq.n	8104c62 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8104c5e:	2301      	movs	r3, #1
 8104c60:	e002      	b.n	8104c68 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8104c62:	f7ff fa51 	bl	8104108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8104c66:	2300      	movs	r3, #0
}
 8104c68:	4618      	mov	r0, r3
 8104c6a:	3708      	adds	r7, #8
 8104c6c:	46bd      	mov	sp, r7
 8104c6e:	bd80      	pop	{r7, pc}
 8104c70:	58024400 	.word	0x58024400
 8104c74:	40024400 	.word	0x40024400
 8104c78:	08116cc8 	.word	0x08116cc8
 8104c7c:	10000004 	.word	0x10000004
 8104c80:	10000000 	.word	0x10000000

08104c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8104c84:	b580      	push	{r7, lr}
 8104c86:	b082      	sub	sp, #8
 8104c88:	af00      	add	r7, sp, #0
 8104c8a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8104c8c:	4b15      	ldr	r3, [pc, #84]	@ (8104ce4 <HAL_InitTick+0x60>)
 8104c8e:	781b      	ldrb	r3, [r3, #0]
 8104c90:	2b00      	cmp	r3, #0
 8104c92:	d101      	bne.n	8104c98 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8104c94:	2301      	movs	r3, #1
 8104c96:	e021      	b.n	8104cdc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8104c98:	4b13      	ldr	r3, [pc, #76]	@ (8104ce8 <HAL_InitTick+0x64>)
 8104c9a:	681a      	ldr	r2, [r3, #0]
 8104c9c:	4b11      	ldr	r3, [pc, #68]	@ (8104ce4 <HAL_InitTick+0x60>)
 8104c9e:	781b      	ldrb	r3, [r3, #0]
 8104ca0:	4619      	mov	r1, r3
 8104ca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8104ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8104caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8104cae:	4618      	mov	r0, r3
 8104cb0:	f001 fe59 	bl	8106966 <HAL_SYSTICK_Config>
 8104cb4:	4603      	mov	r3, r0
 8104cb6:	2b00      	cmp	r3, #0
 8104cb8:	d001      	beq.n	8104cbe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8104cba:	2301      	movs	r3, #1
 8104cbc:	e00e      	b.n	8104cdc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8104cbe:	687b      	ldr	r3, [r7, #4]
 8104cc0:	2b0f      	cmp	r3, #15
 8104cc2:	d80a      	bhi.n	8104cda <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8104cc4:	2200      	movs	r2, #0
 8104cc6:	6879      	ldr	r1, [r7, #4]
 8104cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8104ccc:	f001 fe23 	bl	8106916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8104cd0:	4a06      	ldr	r2, [pc, #24]	@ (8104cec <HAL_InitTick+0x68>)
 8104cd2:	687b      	ldr	r3, [r7, #4]
 8104cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8104cd6:	2300      	movs	r3, #0
 8104cd8:	e000      	b.n	8104cdc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8104cda:	2301      	movs	r3, #1
}
 8104cdc:	4618      	mov	r0, r3
 8104cde:	3708      	adds	r7, #8
 8104ce0:	46bd      	mov	sp, r7
 8104ce2:	bd80      	pop	{r7, pc}
 8104ce4:	100000a0 	.word	0x100000a0
 8104ce8:	10000000 	.word	0x10000000
 8104cec:	1000009c 	.word	0x1000009c

08104cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8104cf0:	b480      	push	{r7}
 8104cf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8104cf4:	4b06      	ldr	r3, [pc, #24]	@ (8104d10 <HAL_IncTick+0x20>)
 8104cf6:	781b      	ldrb	r3, [r3, #0]
 8104cf8:	461a      	mov	r2, r3
 8104cfa:	4b06      	ldr	r3, [pc, #24]	@ (8104d14 <HAL_IncTick+0x24>)
 8104cfc:	681b      	ldr	r3, [r3, #0]
 8104cfe:	4413      	add	r3, r2
 8104d00:	4a04      	ldr	r2, [pc, #16]	@ (8104d14 <HAL_IncTick+0x24>)
 8104d02:	6013      	str	r3, [r2, #0]
}
 8104d04:	bf00      	nop
 8104d06:	46bd      	mov	sp, r7
 8104d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d0c:	4770      	bx	lr
 8104d0e:	bf00      	nop
 8104d10:	100000a0 	.word	0x100000a0
 8104d14:	1000d3c4 	.word	0x1000d3c4

08104d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8104d18:	b480      	push	{r7}
 8104d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8104d1c:	4b03      	ldr	r3, [pc, #12]	@ (8104d2c <HAL_GetTick+0x14>)
 8104d1e:	681b      	ldr	r3, [r3, #0]
}
 8104d20:	4618      	mov	r0, r3
 8104d22:	46bd      	mov	sp, r7
 8104d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d28:	4770      	bx	lr
 8104d2a:	bf00      	nop
 8104d2c:	1000d3c4 	.word	0x1000d3c4

08104d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8104d30:	b580      	push	{r7, lr}
 8104d32:	b084      	sub	sp, #16
 8104d34:	af00      	add	r7, sp, #0
 8104d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8104d38:	f7ff ffee 	bl	8104d18 <HAL_GetTick>
 8104d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8104d3e:	687b      	ldr	r3, [r7, #4]
 8104d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8104d42:	68fb      	ldr	r3, [r7, #12]
 8104d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104d48:	d005      	beq.n	8104d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8104d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8104d74 <HAL_Delay+0x44>)
 8104d4c:	781b      	ldrb	r3, [r3, #0]
 8104d4e:	461a      	mov	r2, r3
 8104d50:	68fb      	ldr	r3, [r7, #12]
 8104d52:	4413      	add	r3, r2
 8104d54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8104d56:	bf00      	nop
 8104d58:	f7ff ffde 	bl	8104d18 <HAL_GetTick>
 8104d5c:	4602      	mov	r2, r0
 8104d5e:	68bb      	ldr	r3, [r7, #8]
 8104d60:	1ad3      	subs	r3, r2, r3
 8104d62:	68fa      	ldr	r2, [r7, #12]
 8104d64:	429a      	cmp	r2, r3
 8104d66:	d8f7      	bhi.n	8104d58 <HAL_Delay+0x28>
  {
  }
}
 8104d68:	bf00      	nop
 8104d6a:	bf00      	nop
 8104d6c:	3710      	adds	r7, #16
 8104d6e:	46bd      	mov	sp, r7
 8104d70:	bd80      	pop	{r7, pc}
 8104d72:	bf00      	nop
 8104d74:	100000a0 	.word	0x100000a0

08104d78 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8104d78:	b480      	push	{r7}
 8104d7a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8104d7c:	4b03      	ldr	r3, [pc, #12]	@ (8104d8c <HAL_GetREVID+0x14>)
 8104d7e:	681b      	ldr	r3, [r3, #0]
 8104d80:	0c1b      	lsrs	r3, r3, #16
}
 8104d82:	4618      	mov	r0, r3
 8104d84:	46bd      	mov	sp, r7
 8104d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d8a:	4770      	bx	lr
 8104d8c:	5c001000 	.word	0x5c001000

08104d90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8104d90:	b480      	push	{r7}
 8104d92:	b083      	sub	sp, #12
 8104d94:	af00      	add	r7, sp, #0
 8104d96:	6078      	str	r0, [r7, #4]
 8104d98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8104d9a:	687b      	ldr	r3, [r7, #4]
 8104d9c:	689b      	ldr	r3, [r3, #8]
 8104d9e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8104da2:	683b      	ldr	r3, [r7, #0]
 8104da4:	431a      	orrs	r2, r3
 8104da6:	687b      	ldr	r3, [r7, #4]
 8104da8:	609a      	str	r2, [r3, #8]
}
 8104daa:	bf00      	nop
 8104dac:	370c      	adds	r7, #12
 8104dae:	46bd      	mov	sp, r7
 8104db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104db4:	4770      	bx	lr

08104db6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8104db6:	b480      	push	{r7}
 8104db8:	b083      	sub	sp, #12
 8104dba:	af00      	add	r7, sp, #0
 8104dbc:	6078      	str	r0, [r7, #4]
 8104dbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8104dc0:	687b      	ldr	r3, [r7, #4]
 8104dc2:	689b      	ldr	r3, [r3, #8]
 8104dc4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8104dc8:	683b      	ldr	r3, [r7, #0]
 8104dca:	431a      	orrs	r2, r3
 8104dcc:	687b      	ldr	r3, [r7, #4]
 8104dce:	609a      	str	r2, [r3, #8]
}
 8104dd0:	bf00      	nop
 8104dd2:	370c      	adds	r7, #12
 8104dd4:	46bd      	mov	sp, r7
 8104dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dda:	4770      	bx	lr

08104ddc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8104ddc:	b480      	push	{r7}
 8104dde:	b083      	sub	sp, #12
 8104de0:	af00      	add	r7, sp, #0
 8104de2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8104de4:	687b      	ldr	r3, [r7, #4]
 8104de6:	689b      	ldr	r3, [r3, #8]
 8104de8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8104dec:	4618      	mov	r0, r3
 8104dee:	370c      	adds	r7, #12
 8104df0:	46bd      	mov	sp, r7
 8104df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104df6:	4770      	bx	lr

08104df8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8104df8:	b480      	push	{r7}
 8104dfa:	b087      	sub	sp, #28
 8104dfc:	af00      	add	r7, sp, #0
 8104dfe:	60f8      	str	r0, [r7, #12]
 8104e00:	60b9      	str	r1, [r7, #8]
 8104e02:	607a      	str	r2, [r7, #4]
 8104e04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8104e06:	68fb      	ldr	r3, [r7, #12]
 8104e08:	3360      	adds	r3, #96	@ 0x60
 8104e0a:	461a      	mov	r2, r3
 8104e0c:	68bb      	ldr	r3, [r7, #8]
 8104e0e:	009b      	lsls	r3, r3, #2
 8104e10:	4413      	add	r3, r2
 8104e12:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8104e14:	697b      	ldr	r3, [r7, #20]
 8104e16:	681b      	ldr	r3, [r3, #0]
 8104e18:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8104e1c:	687b      	ldr	r3, [r7, #4]
 8104e1e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8104e22:	683b      	ldr	r3, [r7, #0]
 8104e24:	430b      	orrs	r3, r1
 8104e26:	431a      	orrs	r2, r3
 8104e28:	697b      	ldr	r3, [r7, #20]
 8104e2a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8104e2c:	bf00      	nop
 8104e2e:	371c      	adds	r7, #28
 8104e30:	46bd      	mov	sp, r7
 8104e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e36:	4770      	bx	lr

08104e38 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8104e38:	b480      	push	{r7}
 8104e3a:	b085      	sub	sp, #20
 8104e3c:	af00      	add	r7, sp, #0
 8104e3e:	60f8      	str	r0, [r7, #12]
 8104e40:	60b9      	str	r1, [r7, #8]
 8104e42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8104e44:	68fb      	ldr	r3, [r7, #12]
 8104e46:	691b      	ldr	r3, [r3, #16]
 8104e48:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8104e4c:	68bb      	ldr	r3, [r7, #8]
 8104e4e:	f003 031f 	and.w	r3, r3, #31
 8104e52:	6879      	ldr	r1, [r7, #4]
 8104e54:	fa01 f303 	lsl.w	r3, r1, r3
 8104e58:	431a      	orrs	r2, r3
 8104e5a:	68fb      	ldr	r3, [r7, #12]
 8104e5c:	611a      	str	r2, [r3, #16]
}
 8104e5e:	bf00      	nop
 8104e60:	3714      	adds	r7, #20
 8104e62:	46bd      	mov	sp, r7
 8104e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e68:	4770      	bx	lr

08104e6a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8104e6a:	b480      	push	{r7}
 8104e6c:	b087      	sub	sp, #28
 8104e6e:	af00      	add	r7, sp, #0
 8104e70:	60f8      	str	r0, [r7, #12]
 8104e72:	60b9      	str	r1, [r7, #8]
 8104e74:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8104e76:	68fb      	ldr	r3, [r7, #12]
 8104e78:	3360      	adds	r3, #96	@ 0x60
 8104e7a:	461a      	mov	r2, r3
 8104e7c:	68bb      	ldr	r3, [r7, #8]
 8104e7e:	009b      	lsls	r3, r3, #2
 8104e80:	4413      	add	r3, r2
 8104e82:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8104e84:	697b      	ldr	r3, [r7, #20]
 8104e86:	681b      	ldr	r3, [r3, #0]
 8104e88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8104e8c:	687b      	ldr	r3, [r7, #4]
 8104e8e:	431a      	orrs	r2, r3
 8104e90:	697b      	ldr	r3, [r7, #20]
 8104e92:	601a      	str	r2, [r3, #0]
  }
}
 8104e94:	bf00      	nop
 8104e96:	371c      	adds	r7, #28
 8104e98:	46bd      	mov	sp, r7
 8104e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e9e:	4770      	bx	lr

08104ea0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8104ea0:	b480      	push	{r7}
 8104ea2:	b083      	sub	sp, #12
 8104ea4:	af00      	add	r7, sp, #0
 8104ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8104ea8:	687b      	ldr	r3, [r7, #4]
 8104eaa:	68db      	ldr	r3, [r3, #12]
 8104eac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8104eb0:	2b00      	cmp	r3, #0
 8104eb2:	d101      	bne.n	8104eb8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8104eb4:	2301      	movs	r3, #1
 8104eb6:	e000      	b.n	8104eba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8104eb8:	2300      	movs	r3, #0
}
 8104eba:	4618      	mov	r0, r3
 8104ebc:	370c      	adds	r7, #12
 8104ebe:	46bd      	mov	sp, r7
 8104ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ec4:	4770      	bx	lr

08104ec6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8104ec6:	b480      	push	{r7}
 8104ec8:	b087      	sub	sp, #28
 8104eca:	af00      	add	r7, sp, #0
 8104ecc:	60f8      	str	r0, [r7, #12]
 8104ece:	60b9      	str	r1, [r7, #8]
 8104ed0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8104ed2:	68fb      	ldr	r3, [r7, #12]
 8104ed4:	3330      	adds	r3, #48	@ 0x30
 8104ed6:	461a      	mov	r2, r3
 8104ed8:	68bb      	ldr	r3, [r7, #8]
 8104eda:	0a1b      	lsrs	r3, r3, #8
 8104edc:	009b      	lsls	r3, r3, #2
 8104ede:	f003 030c 	and.w	r3, r3, #12
 8104ee2:	4413      	add	r3, r2
 8104ee4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8104ee6:	697b      	ldr	r3, [r7, #20]
 8104ee8:	681a      	ldr	r2, [r3, #0]
 8104eea:	68bb      	ldr	r3, [r7, #8]
 8104eec:	f003 031f 	and.w	r3, r3, #31
 8104ef0:	211f      	movs	r1, #31
 8104ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8104ef6:	43db      	mvns	r3, r3
 8104ef8:	401a      	ands	r2, r3
 8104efa:	687b      	ldr	r3, [r7, #4]
 8104efc:	0e9b      	lsrs	r3, r3, #26
 8104efe:	f003 011f 	and.w	r1, r3, #31
 8104f02:	68bb      	ldr	r3, [r7, #8]
 8104f04:	f003 031f 	and.w	r3, r3, #31
 8104f08:	fa01 f303 	lsl.w	r3, r1, r3
 8104f0c:	431a      	orrs	r2, r3
 8104f0e:	697b      	ldr	r3, [r7, #20]
 8104f10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8104f12:	bf00      	nop
 8104f14:	371c      	adds	r7, #28
 8104f16:	46bd      	mov	sp, r7
 8104f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f1c:	4770      	bx	lr

08104f1e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8104f1e:	b480      	push	{r7}
 8104f20:	b087      	sub	sp, #28
 8104f22:	af00      	add	r7, sp, #0
 8104f24:	60f8      	str	r0, [r7, #12]
 8104f26:	60b9      	str	r1, [r7, #8]
 8104f28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8104f2a:	68fb      	ldr	r3, [r7, #12]
 8104f2c:	3314      	adds	r3, #20
 8104f2e:	461a      	mov	r2, r3
 8104f30:	68bb      	ldr	r3, [r7, #8]
 8104f32:	0e5b      	lsrs	r3, r3, #25
 8104f34:	009b      	lsls	r3, r3, #2
 8104f36:	f003 0304 	and.w	r3, r3, #4
 8104f3a:	4413      	add	r3, r2
 8104f3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8104f3e:	697b      	ldr	r3, [r7, #20]
 8104f40:	681a      	ldr	r2, [r3, #0]
 8104f42:	68bb      	ldr	r3, [r7, #8]
 8104f44:	0d1b      	lsrs	r3, r3, #20
 8104f46:	f003 031f 	and.w	r3, r3, #31
 8104f4a:	2107      	movs	r1, #7
 8104f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8104f50:	43db      	mvns	r3, r3
 8104f52:	401a      	ands	r2, r3
 8104f54:	68bb      	ldr	r3, [r7, #8]
 8104f56:	0d1b      	lsrs	r3, r3, #20
 8104f58:	f003 031f 	and.w	r3, r3, #31
 8104f5c:	6879      	ldr	r1, [r7, #4]
 8104f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8104f62:	431a      	orrs	r2, r3
 8104f64:	697b      	ldr	r3, [r7, #20]
 8104f66:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8104f68:	bf00      	nop
 8104f6a:	371c      	adds	r7, #28
 8104f6c:	46bd      	mov	sp, r7
 8104f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f72:	4770      	bx	lr

08104f74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8104f74:	b480      	push	{r7}
 8104f76:	b085      	sub	sp, #20
 8104f78:	af00      	add	r7, sp, #0
 8104f7a:	60f8      	str	r0, [r7, #12]
 8104f7c:	60b9      	str	r1, [r7, #8]
 8104f7e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8104f80:	68fb      	ldr	r3, [r7, #12]
 8104f82:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8104f86:	68bb      	ldr	r3, [r7, #8]
 8104f88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104f8c:	43db      	mvns	r3, r3
 8104f8e:	401a      	ands	r2, r3
 8104f90:	687b      	ldr	r3, [r7, #4]
 8104f92:	f003 0318 	and.w	r3, r3, #24
 8104f96:	4908      	ldr	r1, [pc, #32]	@ (8104fb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8104f98:	40d9      	lsrs	r1, r3
 8104f9a:	68bb      	ldr	r3, [r7, #8]
 8104f9c:	400b      	ands	r3, r1
 8104f9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104fa2:	431a      	orrs	r2, r3
 8104fa4:	68fb      	ldr	r3, [r7, #12]
 8104fa6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8104faa:	bf00      	nop
 8104fac:	3714      	adds	r7, #20
 8104fae:	46bd      	mov	sp, r7
 8104fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104fb4:	4770      	bx	lr
 8104fb6:	bf00      	nop
 8104fb8:	000fffff 	.word	0x000fffff

08104fbc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8104fbc:	b480      	push	{r7}
 8104fbe:	b083      	sub	sp, #12
 8104fc0:	af00      	add	r7, sp, #0
 8104fc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8104fc4:	687b      	ldr	r3, [r7, #4]
 8104fc6:	689b      	ldr	r3, [r3, #8]
 8104fc8:	f003 031f 	and.w	r3, r3, #31
}
 8104fcc:	4618      	mov	r0, r3
 8104fce:	370c      	adds	r7, #12
 8104fd0:	46bd      	mov	sp, r7
 8104fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104fd6:	4770      	bx	lr

08104fd8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8104fd8:	b480      	push	{r7}
 8104fda:	b083      	sub	sp, #12
 8104fdc:	af00      	add	r7, sp, #0
 8104fde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8104fe0:	687b      	ldr	r3, [r7, #4]
 8104fe2:	689b      	ldr	r3, [r3, #8]
 8104fe4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8104fe8:	4618      	mov	r0, r3
 8104fea:	370c      	adds	r7, #12
 8104fec:	46bd      	mov	sp, r7
 8104fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ff2:	4770      	bx	lr

08104ff4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8104ff4:	b480      	push	{r7}
 8104ff6:	b083      	sub	sp, #12
 8104ff8:	af00      	add	r7, sp, #0
 8104ffa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8104ffc:	687b      	ldr	r3, [r7, #4]
 8104ffe:	689b      	ldr	r3, [r3, #8]
 8105000:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8105004:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8105008:	687a      	ldr	r2, [r7, #4]
 810500a:	6093      	str	r3, [r2, #8]
}
 810500c:	bf00      	nop
 810500e:	370c      	adds	r7, #12
 8105010:	46bd      	mov	sp, r7
 8105012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105016:	4770      	bx	lr

08105018 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8105018:	b480      	push	{r7}
 810501a:	b083      	sub	sp, #12
 810501c:	af00      	add	r7, sp, #0
 810501e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8105020:	687b      	ldr	r3, [r7, #4]
 8105022:	689b      	ldr	r3, [r3, #8]
 8105024:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105028:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810502c:	d101      	bne.n	8105032 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 810502e:	2301      	movs	r3, #1
 8105030:	e000      	b.n	8105034 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8105032:	2300      	movs	r3, #0
}
 8105034:	4618      	mov	r0, r3
 8105036:	370c      	adds	r7, #12
 8105038:	46bd      	mov	sp, r7
 810503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810503e:	4770      	bx	lr

08105040 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8105040:	b480      	push	{r7}
 8105042:	b083      	sub	sp, #12
 8105044:	af00      	add	r7, sp, #0
 8105046:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8105048:	687b      	ldr	r3, [r7, #4]
 810504a:	689b      	ldr	r3, [r3, #8]
 810504c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8105050:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8105054:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8105058:	687b      	ldr	r3, [r7, #4]
 810505a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 810505c:	bf00      	nop
 810505e:	370c      	adds	r7, #12
 8105060:	46bd      	mov	sp, r7
 8105062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105066:	4770      	bx	lr

08105068 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8105068:	b480      	push	{r7}
 810506a:	b083      	sub	sp, #12
 810506c:	af00      	add	r7, sp, #0
 810506e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8105070:	687b      	ldr	r3, [r7, #4]
 8105072:	689b      	ldr	r3, [r3, #8]
 8105074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8105078:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810507c:	d101      	bne.n	8105082 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 810507e:	2301      	movs	r3, #1
 8105080:	e000      	b.n	8105084 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8105082:	2300      	movs	r3, #0
}
 8105084:	4618      	mov	r0, r3
 8105086:	370c      	adds	r7, #12
 8105088:	46bd      	mov	sp, r7
 810508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810508e:	4770      	bx	lr

08105090 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8105090:	b480      	push	{r7}
 8105092:	b083      	sub	sp, #12
 8105094:	af00      	add	r7, sp, #0
 8105096:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8105098:	687b      	ldr	r3, [r7, #4]
 810509a:	689b      	ldr	r3, [r3, #8]
 810509c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81050a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81050a4:	f043 0201 	orr.w	r2, r3, #1
 81050a8:	687b      	ldr	r3, [r7, #4]
 81050aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 81050ac:	bf00      	nop
 81050ae:	370c      	adds	r7, #12
 81050b0:	46bd      	mov	sp, r7
 81050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050b6:	4770      	bx	lr

081050b8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 81050b8:	b480      	push	{r7}
 81050ba:	b083      	sub	sp, #12
 81050bc:	af00      	add	r7, sp, #0
 81050be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81050c0:	687b      	ldr	r3, [r7, #4]
 81050c2:	689b      	ldr	r3, [r3, #8]
 81050c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81050c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81050cc:	f043 0202 	orr.w	r2, r3, #2
 81050d0:	687b      	ldr	r3, [r7, #4]
 81050d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 81050d4:	bf00      	nop
 81050d6:	370c      	adds	r7, #12
 81050d8:	46bd      	mov	sp, r7
 81050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050de:	4770      	bx	lr

081050e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 81050e0:	b480      	push	{r7}
 81050e2:	b083      	sub	sp, #12
 81050e4:	af00      	add	r7, sp, #0
 81050e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81050e8:	687b      	ldr	r3, [r7, #4]
 81050ea:	689b      	ldr	r3, [r3, #8]
 81050ec:	f003 0301 	and.w	r3, r3, #1
 81050f0:	2b01      	cmp	r3, #1
 81050f2:	d101      	bne.n	81050f8 <LL_ADC_IsEnabled+0x18>
 81050f4:	2301      	movs	r3, #1
 81050f6:	e000      	b.n	81050fa <LL_ADC_IsEnabled+0x1a>
 81050f8:	2300      	movs	r3, #0
}
 81050fa:	4618      	mov	r0, r3
 81050fc:	370c      	adds	r7, #12
 81050fe:	46bd      	mov	sp, r7
 8105100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105104:	4770      	bx	lr

08105106 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8105106:	b480      	push	{r7}
 8105108:	b083      	sub	sp, #12
 810510a:	af00      	add	r7, sp, #0
 810510c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 810510e:	687b      	ldr	r3, [r7, #4]
 8105110:	689b      	ldr	r3, [r3, #8]
 8105112:	f003 0302 	and.w	r3, r3, #2
 8105116:	2b02      	cmp	r3, #2
 8105118:	d101      	bne.n	810511e <LL_ADC_IsDisableOngoing+0x18>
 810511a:	2301      	movs	r3, #1
 810511c:	e000      	b.n	8105120 <LL_ADC_IsDisableOngoing+0x1a>
 810511e:	2300      	movs	r3, #0
}
 8105120:	4618      	mov	r0, r3
 8105122:	370c      	adds	r7, #12
 8105124:	46bd      	mov	sp, r7
 8105126:	f85d 7b04 	ldr.w	r7, [sp], #4
 810512a:	4770      	bx	lr

0810512c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 810512c:	b480      	push	{r7}
 810512e:	b083      	sub	sp, #12
 8105130:	af00      	add	r7, sp, #0
 8105132:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8105134:	687b      	ldr	r3, [r7, #4]
 8105136:	689b      	ldr	r3, [r3, #8]
 8105138:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810513c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8105140:	f043 0204 	orr.w	r2, r3, #4
 8105144:	687b      	ldr	r3, [r7, #4]
 8105146:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8105148:	bf00      	nop
 810514a:	370c      	adds	r7, #12
 810514c:	46bd      	mov	sp, r7
 810514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105152:	4770      	bx	lr

08105154 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8105154:	b480      	push	{r7}
 8105156:	b083      	sub	sp, #12
 8105158:	af00      	add	r7, sp, #0
 810515a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 810515c:	687b      	ldr	r3, [r7, #4]
 810515e:	689b      	ldr	r3, [r3, #8]
 8105160:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8105164:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8105168:	f043 0210 	orr.w	r2, r3, #16
 810516c:	687b      	ldr	r3, [r7, #4]
 810516e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8105170:	bf00      	nop
 8105172:	370c      	adds	r7, #12
 8105174:	46bd      	mov	sp, r7
 8105176:	f85d 7b04 	ldr.w	r7, [sp], #4
 810517a:	4770      	bx	lr

0810517c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 810517c:	b480      	push	{r7}
 810517e:	b083      	sub	sp, #12
 8105180:	af00      	add	r7, sp, #0
 8105182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8105184:	687b      	ldr	r3, [r7, #4]
 8105186:	689b      	ldr	r3, [r3, #8]
 8105188:	f003 0304 	and.w	r3, r3, #4
 810518c:	2b04      	cmp	r3, #4
 810518e:	d101      	bne.n	8105194 <LL_ADC_REG_IsConversionOngoing+0x18>
 8105190:	2301      	movs	r3, #1
 8105192:	e000      	b.n	8105196 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8105194:	2300      	movs	r3, #0
}
 8105196:	4618      	mov	r0, r3
 8105198:	370c      	adds	r7, #12
 810519a:	46bd      	mov	sp, r7
 810519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051a0:	4770      	bx	lr

081051a2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 81051a2:	b480      	push	{r7}
 81051a4:	b083      	sub	sp, #12
 81051a6:	af00      	add	r7, sp, #0
 81051a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81051aa:	687b      	ldr	r3, [r7, #4]
 81051ac:	689b      	ldr	r3, [r3, #8]
 81051ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81051b2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81051b6:	f043 0220 	orr.w	r2, r3, #32
 81051ba:	687b      	ldr	r3, [r7, #4]
 81051bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 81051be:	bf00      	nop
 81051c0:	370c      	adds	r7, #12
 81051c2:	46bd      	mov	sp, r7
 81051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051c8:	4770      	bx	lr

081051ca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81051ca:	b480      	push	{r7}
 81051cc:	b083      	sub	sp, #12
 81051ce:	af00      	add	r7, sp, #0
 81051d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 81051d2:	687b      	ldr	r3, [r7, #4]
 81051d4:	689b      	ldr	r3, [r3, #8]
 81051d6:	f003 0308 	and.w	r3, r3, #8
 81051da:	2b08      	cmp	r3, #8
 81051dc:	d101      	bne.n	81051e2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 81051de:	2301      	movs	r3, #1
 81051e0:	e000      	b.n	81051e4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 81051e2:	2300      	movs	r3, #0
}
 81051e4:	4618      	mov	r0, r3
 81051e6:	370c      	adds	r7, #12
 81051e8:	46bd      	mov	sp, r7
 81051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051ee:	4770      	bx	lr

081051f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81051f0:	b590      	push	{r4, r7, lr}
 81051f2:	b089      	sub	sp, #36	@ 0x24
 81051f4:	af00      	add	r7, sp, #0
 81051f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81051f8:	2300      	movs	r3, #0
 81051fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81051fc:	2300      	movs	r3, #0
 81051fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8105200:	687b      	ldr	r3, [r7, #4]
 8105202:	2b00      	cmp	r3, #0
 8105204:	d101      	bne.n	810520a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8105206:	2301      	movs	r3, #1
 8105208:	e18f      	b.n	810552a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 810520a:	687b      	ldr	r3, [r7, #4]
 810520c:	68db      	ldr	r3, [r3, #12]
 810520e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8105210:	687b      	ldr	r3, [r7, #4]
 8105212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105214:	2b00      	cmp	r3, #0
 8105216:	d109      	bne.n	810522c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8105218:	6878      	ldr	r0, [r7, #4]
 810521a:	f7fe ff8f 	bl	810413c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 810521e:	687b      	ldr	r3, [r7, #4]
 8105220:	2200      	movs	r2, #0
 8105222:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8105224:	687b      	ldr	r3, [r7, #4]
 8105226:	2200      	movs	r2, #0
 8105228:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 810522c:	687b      	ldr	r3, [r7, #4]
 810522e:	681b      	ldr	r3, [r3, #0]
 8105230:	4618      	mov	r0, r3
 8105232:	f7ff fef1 	bl	8105018 <LL_ADC_IsDeepPowerDownEnabled>
 8105236:	4603      	mov	r3, r0
 8105238:	2b00      	cmp	r3, #0
 810523a:	d004      	beq.n	8105246 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 810523c:	687b      	ldr	r3, [r7, #4]
 810523e:	681b      	ldr	r3, [r3, #0]
 8105240:	4618      	mov	r0, r3
 8105242:	f7ff fed7 	bl	8104ff4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8105246:	687b      	ldr	r3, [r7, #4]
 8105248:	681b      	ldr	r3, [r3, #0]
 810524a:	4618      	mov	r0, r3
 810524c:	f7ff ff0c 	bl	8105068 <LL_ADC_IsInternalRegulatorEnabled>
 8105250:	4603      	mov	r3, r0
 8105252:	2b00      	cmp	r3, #0
 8105254:	d114      	bne.n	8105280 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8105256:	687b      	ldr	r3, [r7, #4]
 8105258:	681b      	ldr	r3, [r3, #0]
 810525a:	4618      	mov	r0, r3
 810525c:	f7ff fef0 	bl	8105040 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8105260:	4b88      	ldr	r3, [pc, #544]	@ (8105484 <HAL_ADC_Init+0x294>)
 8105262:	681b      	ldr	r3, [r3, #0]
 8105264:	099b      	lsrs	r3, r3, #6
 8105266:	4a88      	ldr	r2, [pc, #544]	@ (8105488 <HAL_ADC_Init+0x298>)
 8105268:	fba2 2303 	umull	r2, r3, r2, r3
 810526c:	099b      	lsrs	r3, r3, #6
 810526e:	3301      	adds	r3, #1
 8105270:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8105272:	e002      	b.n	810527a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8105274:	68bb      	ldr	r3, [r7, #8]
 8105276:	3b01      	subs	r3, #1
 8105278:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810527a:	68bb      	ldr	r3, [r7, #8]
 810527c:	2b00      	cmp	r3, #0
 810527e:	d1f9      	bne.n	8105274 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8105280:	687b      	ldr	r3, [r7, #4]
 8105282:	681b      	ldr	r3, [r3, #0]
 8105284:	4618      	mov	r0, r3
 8105286:	f7ff feef 	bl	8105068 <LL_ADC_IsInternalRegulatorEnabled>
 810528a:	4603      	mov	r3, r0
 810528c:	2b00      	cmp	r3, #0
 810528e:	d10d      	bne.n	81052ac <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8105290:	687b      	ldr	r3, [r7, #4]
 8105292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105294:	f043 0210 	orr.w	r2, r3, #16
 8105298:	687b      	ldr	r3, [r7, #4]
 810529a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810529c:	687b      	ldr	r3, [r7, #4]
 810529e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81052a0:	f043 0201 	orr.w	r2, r3, #1
 81052a4:	687b      	ldr	r3, [r7, #4]
 81052a6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 81052a8:	2301      	movs	r3, #1
 81052aa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81052ac:	687b      	ldr	r3, [r7, #4]
 81052ae:	681b      	ldr	r3, [r3, #0]
 81052b0:	4618      	mov	r0, r3
 81052b2:	f7ff ff63 	bl	810517c <LL_ADC_REG_IsConversionOngoing>
 81052b6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81052b8:	687b      	ldr	r3, [r7, #4]
 81052ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81052bc:	f003 0310 	and.w	r3, r3, #16
 81052c0:	2b00      	cmp	r3, #0
 81052c2:	f040 8129 	bne.w	8105518 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 81052c6:	697b      	ldr	r3, [r7, #20]
 81052c8:	2b00      	cmp	r3, #0
 81052ca:	f040 8125 	bne.w	8105518 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 81052ce:	687b      	ldr	r3, [r7, #4]
 81052d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81052d2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 81052d6:	f043 0202 	orr.w	r2, r3, #2
 81052da:	687b      	ldr	r3, [r7, #4]
 81052dc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81052de:	687b      	ldr	r3, [r7, #4]
 81052e0:	681b      	ldr	r3, [r3, #0]
 81052e2:	4618      	mov	r0, r3
 81052e4:	f7ff fefc 	bl	81050e0 <LL_ADC_IsEnabled>
 81052e8:	4603      	mov	r3, r0
 81052ea:	2b00      	cmp	r3, #0
 81052ec:	d136      	bne.n	810535c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81052ee:	687b      	ldr	r3, [r7, #4]
 81052f0:	681b      	ldr	r3, [r3, #0]
 81052f2:	4a66      	ldr	r2, [pc, #408]	@ (810548c <HAL_ADC_Init+0x29c>)
 81052f4:	4293      	cmp	r3, r2
 81052f6:	d004      	beq.n	8105302 <HAL_ADC_Init+0x112>
 81052f8:	687b      	ldr	r3, [r7, #4]
 81052fa:	681b      	ldr	r3, [r3, #0]
 81052fc:	4a64      	ldr	r2, [pc, #400]	@ (8105490 <HAL_ADC_Init+0x2a0>)
 81052fe:	4293      	cmp	r3, r2
 8105300:	d10e      	bne.n	8105320 <HAL_ADC_Init+0x130>
 8105302:	4862      	ldr	r0, [pc, #392]	@ (810548c <HAL_ADC_Init+0x29c>)
 8105304:	f7ff feec 	bl	81050e0 <LL_ADC_IsEnabled>
 8105308:	4604      	mov	r4, r0
 810530a:	4861      	ldr	r0, [pc, #388]	@ (8105490 <HAL_ADC_Init+0x2a0>)
 810530c:	f7ff fee8 	bl	81050e0 <LL_ADC_IsEnabled>
 8105310:	4603      	mov	r3, r0
 8105312:	4323      	orrs	r3, r4
 8105314:	2b00      	cmp	r3, #0
 8105316:	bf0c      	ite	eq
 8105318:	2301      	moveq	r3, #1
 810531a:	2300      	movne	r3, #0
 810531c:	b2db      	uxtb	r3, r3
 810531e:	e008      	b.n	8105332 <HAL_ADC_Init+0x142>
 8105320:	485c      	ldr	r0, [pc, #368]	@ (8105494 <HAL_ADC_Init+0x2a4>)
 8105322:	f7ff fedd 	bl	81050e0 <LL_ADC_IsEnabled>
 8105326:	4603      	mov	r3, r0
 8105328:	2b00      	cmp	r3, #0
 810532a:	bf0c      	ite	eq
 810532c:	2301      	moveq	r3, #1
 810532e:	2300      	movne	r3, #0
 8105330:	b2db      	uxtb	r3, r3
 8105332:	2b00      	cmp	r3, #0
 8105334:	d012      	beq.n	810535c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8105336:	687b      	ldr	r3, [r7, #4]
 8105338:	681b      	ldr	r3, [r3, #0]
 810533a:	4a54      	ldr	r2, [pc, #336]	@ (810548c <HAL_ADC_Init+0x29c>)
 810533c:	4293      	cmp	r3, r2
 810533e:	d004      	beq.n	810534a <HAL_ADC_Init+0x15a>
 8105340:	687b      	ldr	r3, [r7, #4]
 8105342:	681b      	ldr	r3, [r3, #0]
 8105344:	4a52      	ldr	r2, [pc, #328]	@ (8105490 <HAL_ADC_Init+0x2a0>)
 8105346:	4293      	cmp	r3, r2
 8105348:	d101      	bne.n	810534e <HAL_ADC_Init+0x15e>
 810534a:	4a53      	ldr	r2, [pc, #332]	@ (8105498 <HAL_ADC_Init+0x2a8>)
 810534c:	e000      	b.n	8105350 <HAL_ADC_Init+0x160>
 810534e:	4a53      	ldr	r2, [pc, #332]	@ (810549c <HAL_ADC_Init+0x2ac>)
 8105350:	687b      	ldr	r3, [r7, #4]
 8105352:	685b      	ldr	r3, [r3, #4]
 8105354:	4619      	mov	r1, r3
 8105356:	4610      	mov	r0, r2
 8105358:	f7ff fd1a 	bl	8104d90 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 810535c:	f7ff fd0c 	bl	8104d78 <HAL_GetREVID>
 8105360:	4603      	mov	r3, r0
 8105362:	f241 0203 	movw	r2, #4099	@ 0x1003
 8105366:	4293      	cmp	r3, r2
 8105368:	d914      	bls.n	8105394 <HAL_ADC_Init+0x1a4>
 810536a:	687b      	ldr	r3, [r7, #4]
 810536c:	689b      	ldr	r3, [r3, #8]
 810536e:	2b10      	cmp	r3, #16
 8105370:	d110      	bne.n	8105394 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8105372:	687b      	ldr	r3, [r7, #4]
 8105374:	7d5b      	ldrb	r3, [r3, #21]
 8105376:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8105378:	687b      	ldr	r3, [r7, #4]
 810537a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810537c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810537e:	687b      	ldr	r3, [r7, #4]
 8105380:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8105382:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8105384:	687b      	ldr	r3, [r7, #4]
 8105386:	7f1b      	ldrb	r3, [r3, #28]
 8105388:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810538a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810538c:	f043 030c 	orr.w	r3, r3, #12
 8105390:	61bb      	str	r3, [r7, #24]
 8105392:	e00d      	b.n	81053b0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8105394:	687b      	ldr	r3, [r7, #4]
 8105396:	7d5b      	ldrb	r3, [r3, #21]
 8105398:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 810539a:	687b      	ldr	r3, [r7, #4]
 810539c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810539e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 81053a0:	687b      	ldr	r3, [r7, #4]
 81053a2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 81053a4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 81053a6:	687b      	ldr	r3, [r7, #4]
 81053a8:	7f1b      	ldrb	r3, [r3, #28]
 81053aa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81053ac:	4313      	orrs	r3, r2
 81053ae:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 81053b0:	687b      	ldr	r3, [r7, #4]
 81053b2:	7f1b      	ldrb	r3, [r3, #28]
 81053b4:	2b01      	cmp	r3, #1
 81053b6:	d106      	bne.n	81053c6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 81053b8:	687b      	ldr	r3, [r7, #4]
 81053ba:	6a1b      	ldr	r3, [r3, #32]
 81053bc:	3b01      	subs	r3, #1
 81053be:	045b      	lsls	r3, r3, #17
 81053c0:	69ba      	ldr	r2, [r7, #24]
 81053c2:	4313      	orrs	r3, r2
 81053c4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 81053c6:	687b      	ldr	r3, [r7, #4]
 81053c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81053ca:	2b00      	cmp	r3, #0
 81053cc:	d009      	beq.n	81053e2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81053ce:	687b      	ldr	r3, [r7, #4]
 81053d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81053d2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 81053d6:	687b      	ldr	r3, [r7, #4]
 81053d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81053da:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81053dc:	69ba      	ldr	r2, [r7, #24]
 81053de:	4313      	orrs	r3, r2
 81053e0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 81053e2:	687b      	ldr	r3, [r7, #4]
 81053e4:	681b      	ldr	r3, [r3, #0]
 81053e6:	68da      	ldr	r2, [r3, #12]
 81053e8:	4b2d      	ldr	r3, [pc, #180]	@ (81054a0 <HAL_ADC_Init+0x2b0>)
 81053ea:	4013      	ands	r3, r2
 81053ec:	687a      	ldr	r2, [r7, #4]
 81053ee:	6812      	ldr	r2, [r2, #0]
 81053f0:	69b9      	ldr	r1, [r7, #24]
 81053f2:	430b      	orrs	r3, r1
 81053f4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81053f6:	687b      	ldr	r3, [r7, #4]
 81053f8:	681b      	ldr	r3, [r3, #0]
 81053fa:	4618      	mov	r0, r3
 81053fc:	f7ff febe 	bl	810517c <LL_ADC_REG_IsConversionOngoing>
 8105400:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8105402:	687b      	ldr	r3, [r7, #4]
 8105404:	681b      	ldr	r3, [r3, #0]
 8105406:	4618      	mov	r0, r3
 8105408:	f7ff fedf 	bl	81051ca <LL_ADC_INJ_IsConversionOngoing>
 810540c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 810540e:	693b      	ldr	r3, [r7, #16]
 8105410:	2b00      	cmp	r3, #0
 8105412:	d15f      	bne.n	81054d4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8105414:	68fb      	ldr	r3, [r7, #12]
 8105416:	2b00      	cmp	r3, #0
 8105418:	d15c      	bne.n	81054d4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 810541a:	687b      	ldr	r3, [r7, #4]
 810541c:	7d1b      	ldrb	r3, [r3, #20]
 810541e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8105420:	687b      	ldr	r3, [r7, #4]
 8105422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8105424:	4313      	orrs	r3, r2
 8105426:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8105428:	687b      	ldr	r3, [r7, #4]
 810542a:	681b      	ldr	r3, [r3, #0]
 810542c:	68db      	ldr	r3, [r3, #12]
 810542e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8105432:	f023 0303 	bic.w	r3, r3, #3
 8105436:	687a      	ldr	r2, [r7, #4]
 8105438:	6812      	ldr	r2, [r2, #0]
 810543a:	69b9      	ldr	r1, [r7, #24]
 810543c:	430b      	orrs	r3, r1
 810543e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8105440:	687b      	ldr	r3, [r7, #4]
 8105442:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8105446:	2b01      	cmp	r3, #1
 8105448:	d12e      	bne.n	81054a8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 810544a:	687b      	ldr	r3, [r7, #4]
 810544c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810544e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8105450:	687b      	ldr	r3, [r7, #4]
 8105452:	681b      	ldr	r3, [r3, #0]
 8105454:	691a      	ldr	r2, [r3, #16]
 8105456:	4b13      	ldr	r3, [pc, #76]	@ (81054a4 <HAL_ADC_Init+0x2b4>)
 8105458:	4013      	ands	r3, r2
 810545a:	687a      	ldr	r2, [r7, #4]
 810545c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 810545e:	3a01      	subs	r2, #1
 8105460:	0411      	lsls	r1, r2, #16
 8105462:	687a      	ldr	r2, [r7, #4]
 8105464:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8105466:	4311      	orrs	r1, r2
 8105468:	687a      	ldr	r2, [r7, #4]
 810546a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 810546c:	4311      	orrs	r1, r2
 810546e:	687a      	ldr	r2, [r7, #4]
 8105470:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8105472:	430a      	orrs	r2, r1
 8105474:	431a      	orrs	r2, r3
 8105476:	687b      	ldr	r3, [r7, #4]
 8105478:	681b      	ldr	r3, [r3, #0]
 810547a:	f042 0201 	orr.w	r2, r2, #1
 810547e:	611a      	str	r2, [r3, #16]
 8105480:	e01a      	b.n	81054b8 <HAL_ADC_Init+0x2c8>
 8105482:	bf00      	nop
 8105484:	10000000 	.word	0x10000000
 8105488:	053e2d63 	.word	0x053e2d63
 810548c:	40022000 	.word	0x40022000
 8105490:	40022100 	.word	0x40022100
 8105494:	58026000 	.word	0x58026000
 8105498:	40022300 	.word	0x40022300
 810549c:	58026300 	.word	0x58026300
 81054a0:	fff0c003 	.word	0xfff0c003
 81054a4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 81054a8:	687b      	ldr	r3, [r7, #4]
 81054aa:	681b      	ldr	r3, [r3, #0]
 81054ac:	691a      	ldr	r2, [r3, #16]
 81054ae:	687b      	ldr	r3, [r7, #4]
 81054b0:	681b      	ldr	r3, [r3, #0]
 81054b2:	f022 0201 	bic.w	r2, r2, #1
 81054b6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 81054b8:	687b      	ldr	r3, [r7, #4]
 81054ba:	681b      	ldr	r3, [r3, #0]
 81054bc:	691b      	ldr	r3, [r3, #16]
 81054be:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 81054c2:	687b      	ldr	r3, [r7, #4]
 81054c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81054c6:	687b      	ldr	r3, [r7, #4]
 81054c8:	681b      	ldr	r3, [r3, #0]
 81054ca:	430a      	orrs	r2, r1
 81054cc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 81054ce:	6878      	ldr	r0, [r7, #4]
 81054d0:	f000 ff32 	bl	8106338 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 81054d4:	687b      	ldr	r3, [r7, #4]
 81054d6:	68db      	ldr	r3, [r3, #12]
 81054d8:	2b01      	cmp	r3, #1
 81054da:	d10c      	bne.n	81054f6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81054dc:	687b      	ldr	r3, [r7, #4]
 81054de:	681b      	ldr	r3, [r3, #0]
 81054e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81054e2:	f023 010f 	bic.w	r1, r3, #15
 81054e6:	687b      	ldr	r3, [r7, #4]
 81054e8:	699b      	ldr	r3, [r3, #24]
 81054ea:	1e5a      	subs	r2, r3, #1
 81054ec:	687b      	ldr	r3, [r7, #4]
 81054ee:	681b      	ldr	r3, [r3, #0]
 81054f0:	430a      	orrs	r2, r1
 81054f2:	631a      	str	r2, [r3, #48]	@ 0x30
 81054f4:	e007      	b.n	8105506 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81054f6:	687b      	ldr	r3, [r7, #4]
 81054f8:	681b      	ldr	r3, [r3, #0]
 81054fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81054fc:	687b      	ldr	r3, [r7, #4]
 81054fe:	681b      	ldr	r3, [r3, #0]
 8105500:	f022 020f 	bic.w	r2, r2, #15
 8105504:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8105506:	687b      	ldr	r3, [r7, #4]
 8105508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810550a:	f023 0303 	bic.w	r3, r3, #3
 810550e:	f043 0201 	orr.w	r2, r3, #1
 8105512:	687b      	ldr	r3, [r7, #4]
 8105514:	655a      	str	r2, [r3, #84]	@ 0x54
 8105516:	e007      	b.n	8105528 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8105518:	687b      	ldr	r3, [r7, #4]
 810551a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810551c:	f043 0210 	orr.w	r2, r3, #16
 8105520:	687b      	ldr	r3, [r7, #4]
 8105522:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8105524:	2301      	movs	r3, #1
 8105526:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8105528:	7ffb      	ldrb	r3, [r7, #31]
}
 810552a:	4618      	mov	r0, r3
 810552c:	3724      	adds	r7, #36	@ 0x24
 810552e:	46bd      	mov	sp, r7
 8105530:	bd90      	pop	{r4, r7, pc}
 8105532:	bf00      	nop

08105534 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8105534:	b580      	push	{r7, lr}
 8105536:	b086      	sub	sp, #24
 8105538:	af00      	add	r7, sp, #0
 810553a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810553c:	687b      	ldr	r3, [r7, #4]
 810553e:	681b      	ldr	r3, [r3, #0]
 8105540:	4a5d      	ldr	r2, [pc, #372]	@ (81056b8 <HAL_ADC_Start+0x184>)
 8105542:	4293      	cmp	r3, r2
 8105544:	d004      	beq.n	8105550 <HAL_ADC_Start+0x1c>
 8105546:	687b      	ldr	r3, [r7, #4]
 8105548:	681b      	ldr	r3, [r3, #0]
 810554a:	4a5c      	ldr	r2, [pc, #368]	@ (81056bc <HAL_ADC_Start+0x188>)
 810554c:	4293      	cmp	r3, r2
 810554e:	d101      	bne.n	8105554 <HAL_ADC_Start+0x20>
 8105550:	4b5b      	ldr	r3, [pc, #364]	@ (81056c0 <HAL_ADC_Start+0x18c>)
 8105552:	e000      	b.n	8105556 <HAL_ADC_Start+0x22>
 8105554:	4b5b      	ldr	r3, [pc, #364]	@ (81056c4 <HAL_ADC_Start+0x190>)
 8105556:	4618      	mov	r0, r3
 8105558:	f7ff fd30 	bl	8104fbc <LL_ADC_GetMultimode>
 810555c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	681b      	ldr	r3, [r3, #0]
 8105562:	4618      	mov	r0, r3
 8105564:	f7ff fe0a 	bl	810517c <LL_ADC_REG_IsConversionOngoing>
 8105568:	4603      	mov	r3, r0
 810556a:	2b00      	cmp	r3, #0
 810556c:	f040 809c 	bne.w	81056a8 <HAL_ADC_Start+0x174>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8105570:	687b      	ldr	r3, [r7, #4]
 8105572:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8105576:	2b01      	cmp	r3, #1
 8105578:	d101      	bne.n	810557e <HAL_ADC_Start+0x4a>
 810557a:	2302      	movs	r3, #2
 810557c:	e097      	b.n	81056ae <HAL_ADC_Start+0x17a>
 810557e:	687b      	ldr	r3, [r7, #4]
 8105580:	2201      	movs	r2, #1
 8105582:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8105586:	6878      	ldr	r0, [r7, #4]
 8105588:	f000 fdec 	bl	8106164 <ADC_Enable>
 810558c:	4603      	mov	r3, r0
 810558e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8105590:	7dfb      	ldrb	r3, [r7, #23]
 8105592:	2b00      	cmp	r3, #0
 8105594:	f040 8083 	bne.w	810569e <HAL_ADC_Start+0x16a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8105598:	687b      	ldr	r3, [r7, #4]
 810559a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810559c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81055a0:	f023 0301 	bic.w	r3, r3, #1
 81055a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81055a8:	687b      	ldr	r3, [r7, #4]
 81055aa:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81055ac:	687b      	ldr	r3, [r7, #4]
 81055ae:	681b      	ldr	r3, [r3, #0]
 81055b0:	4a42      	ldr	r2, [pc, #264]	@ (81056bc <HAL_ADC_Start+0x188>)
 81055b2:	4293      	cmp	r3, r2
 81055b4:	d002      	beq.n	81055bc <HAL_ADC_Start+0x88>
 81055b6:	687b      	ldr	r3, [r7, #4]
 81055b8:	681b      	ldr	r3, [r3, #0]
 81055ba:	e000      	b.n	81055be <HAL_ADC_Start+0x8a>
 81055bc:	4b3e      	ldr	r3, [pc, #248]	@ (81056b8 <HAL_ADC_Start+0x184>)
 81055be:	687a      	ldr	r2, [r7, #4]
 81055c0:	6812      	ldr	r2, [r2, #0]
 81055c2:	4293      	cmp	r3, r2
 81055c4:	d002      	beq.n	81055cc <HAL_ADC_Start+0x98>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81055c6:	693b      	ldr	r3, [r7, #16]
 81055c8:	2b00      	cmp	r3, #0
 81055ca:	d105      	bne.n	81055d8 <HAL_ADC_Start+0xa4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 81055cc:	687b      	ldr	r3, [r7, #4]
 81055ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81055d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 81055d4:	687b      	ldr	r3, [r7, #4]
 81055d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 81055d8:	687b      	ldr	r3, [r7, #4]
 81055da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81055dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81055e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81055e4:	d106      	bne.n	81055f4 <HAL_ADC_Start+0xc0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 81055e6:	687b      	ldr	r3, [r7, #4]
 81055e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81055ea:	f023 0206 	bic.w	r2, r3, #6
 81055ee:	687b      	ldr	r3, [r7, #4]
 81055f0:	659a      	str	r2, [r3, #88]	@ 0x58
 81055f2:	e002      	b.n	81055fa <HAL_ADC_Start+0xc6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 81055f4:	687b      	ldr	r3, [r7, #4]
 81055f6:	2200      	movs	r2, #0
 81055f8:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 81055fa:	687b      	ldr	r3, [r7, #4]
 81055fc:	681b      	ldr	r3, [r3, #0]
 81055fe:	221c      	movs	r2, #28
 8105600:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8105602:	687b      	ldr	r3, [r7, #4]
 8105604:	2200      	movs	r2, #0
 8105606:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 810560a:	687b      	ldr	r3, [r7, #4]
 810560c:	681b      	ldr	r3, [r3, #0]
 810560e:	4a2b      	ldr	r2, [pc, #172]	@ (81056bc <HAL_ADC_Start+0x188>)
 8105610:	4293      	cmp	r3, r2
 8105612:	d002      	beq.n	810561a <HAL_ADC_Start+0xe6>
 8105614:	687b      	ldr	r3, [r7, #4]
 8105616:	681b      	ldr	r3, [r3, #0]
 8105618:	e000      	b.n	810561c <HAL_ADC_Start+0xe8>
 810561a:	4b27      	ldr	r3, [pc, #156]	@ (81056b8 <HAL_ADC_Start+0x184>)
 810561c:	687a      	ldr	r2, [r7, #4]
 810561e:	6812      	ldr	r2, [r2, #0]
 8105620:	4293      	cmp	r3, r2
 8105622:	d008      	beq.n	8105636 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8105624:	693b      	ldr	r3, [r7, #16]
 8105626:	2b00      	cmp	r3, #0
 8105628:	d005      	beq.n	8105636 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 810562a:	693b      	ldr	r3, [r7, #16]
 810562c:	2b05      	cmp	r3, #5
 810562e:	d002      	beq.n	8105636 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8105630:	693b      	ldr	r3, [r7, #16]
 8105632:	2b09      	cmp	r3, #9
 8105634:	d114      	bne.n	8105660 <HAL_ADC_Start+0x12c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8105636:	687b      	ldr	r3, [r7, #4]
 8105638:	681b      	ldr	r3, [r3, #0]
 810563a:	68db      	ldr	r3, [r3, #12]
 810563c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105640:	2b00      	cmp	r3, #0
 8105642:	d007      	beq.n	8105654 <HAL_ADC_Start+0x120>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8105644:	687b      	ldr	r3, [r7, #4]
 8105646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105648:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 810564c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8105650:	687b      	ldr	r3, [r7, #4]
 8105652:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	681b      	ldr	r3, [r3, #0]
 8105658:	4618      	mov	r0, r3
 810565a:	f7ff fd67 	bl	810512c <LL_ADC_REG_StartConversion>
 810565e:	e025      	b.n	81056ac <HAL_ADC_Start+0x178>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8105660:	687b      	ldr	r3, [r7, #4]
 8105662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105664:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8105668:	687b      	ldr	r3, [r7, #4]
 810566a:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 810566c:	687b      	ldr	r3, [r7, #4]
 810566e:	681b      	ldr	r3, [r3, #0]
 8105670:	4a12      	ldr	r2, [pc, #72]	@ (81056bc <HAL_ADC_Start+0x188>)
 8105672:	4293      	cmp	r3, r2
 8105674:	d002      	beq.n	810567c <HAL_ADC_Start+0x148>
 8105676:	687b      	ldr	r3, [r7, #4]
 8105678:	681b      	ldr	r3, [r3, #0]
 810567a:	e000      	b.n	810567e <HAL_ADC_Start+0x14a>
 810567c:	4b0e      	ldr	r3, [pc, #56]	@ (81056b8 <HAL_ADC_Start+0x184>)
 810567e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8105680:	68fb      	ldr	r3, [r7, #12]
 8105682:	68db      	ldr	r3, [r3, #12]
 8105684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105688:	2b00      	cmp	r3, #0
 810568a:	d00f      	beq.n	81056ac <HAL_ADC_Start+0x178>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 810568c:	687b      	ldr	r3, [r7, #4]
 810568e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105690:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8105694:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8105698:	687b      	ldr	r3, [r7, #4]
 810569a:	655a      	str	r2, [r3, #84]	@ 0x54
 810569c:	e006      	b.n	81056ac <HAL_ADC_Start+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 810569e:	687b      	ldr	r3, [r7, #4]
 81056a0:	2200      	movs	r2, #0
 81056a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 81056a6:	e001      	b.n	81056ac <HAL_ADC_Start+0x178>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 81056a8:	2302      	movs	r3, #2
 81056aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 81056ac:	7dfb      	ldrb	r3, [r7, #23]
}
 81056ae:	4618      	mov	r0, r3
 81056b0:	3718      	adds	r7, #24
 81056b2:	46bd      	mov	sp, r7
 81056b4:	bd80      	pop	{r7, pc}
 81056b6:	bf00      	nop
 81056b8:	40022000 	.word	0x40022000
 81056bc:	40022100 	.word	0x40022100
 81056c0:	40022300 	.word	0x40022300
 81056c4:	58026300 	.word	0x58026300

081056c8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 81056c8:	b580      	push	{r7, lr}
 81056ca:	b084      	sub	sp, #16
 81056cc:	af00      	add	r7, sp, #0
 81056ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 81056d0:	687b      	ldr	r3, [r7, #4]
 81056d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 81056d6:	2b01      	cmp	r3, #1
 81056d8:	d101      	bne.n	81056de <HAL_ADC_Stop+0x16>
 81056da:	2302      	movs	r3, #2
 81056dc:	e023      	b.n	8105726 <HAL_ADC_Stop+0x5e>
 81056de:	687b      	ldr	r3, [r7, #4]
 81056e0:	2201      	movs	r2, #1
 81056e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 81056e6:	2103      	movs	r1, #3
 81056e8:	6878      	ldr	r0, [r7, #4]
 81056ea:	f000 fc7f 	bl	8105fec <ADC_ConversionStop>
 81056ee:	4603      	mov	r3, r0
 81056f0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 81056f2:	7bfb      	ldrb	r3, [r7, #15]
 81056f4:	2b00      	cmp	r3, #0
 81056f6:	d111      	bne.n	810571c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 81056f8:	6878      	ldr	r0, [r7, #4]
 81056fa:	f000 fdbd 	bl	8106278 <ADC_Disable>
 81056fe:	4603      	mov	r3, r0
 8105700:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8105702:	7bfb      	ldrb	r3, [r7, #15]
 8105704:	2b00      	cmp	r3, #0
 8105706:	d109      	bne.n	810571c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8105708:	687b      	ldr	r3, [r7, #4]
 810570a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810570c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8105710:	f023 0301 	bic.w	r3, r3, #1
 8105714:	f043 0201 	orr.w	r2, r3, #1
 8105718:	687b      	ldr	r3, [r7, #4]
 810571a:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 810571c:	687b      	ldr	r3, [r7, #4]
 810571e:	2200      	movs	r2, #0
 8105720:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8105724:	7bfb      	ldrb	r3, [r7, #15]
}
 8105726:	4618      	mov	r0, r3
 8105728:	3710      	adds	r7, #16
 810572a:	46bd      	mov	sp, r7
 810572c:	bd80      	pop	{r7, pc}
	...

08105730 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8105730:	b580      	push	{r7, lr}
 8105732:	b088      	sub	sp, #32
 8105734:	af00      	add	r7, sp, #0
 8105736:	6078      	str	r0, [r7, #4]
 8105738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810573a:	687b      	ldr	r3, [r7, #4]
 810573c:	681b      	ldr	r3, [r3, #0]
 810573e:	4a72      	ldr	r2, [pc, #456]	@ (8105908 <HAL_ADC_PollForConversion+0x1d8>)
 8105740:	4293      	cmp	r3, r2
 8105742:	d004      	beq.n	810574e <HAL_ADC_PollForConversion+0x1e>
 8105744:	687b      	ldr	r3, [r7, #4]
 8105746:	681b      	ldr	r3, [r3, #0]
 8105748:	4a70      	ldr	r2, [pc, #448]	@ (810590c <HAL_ADC_PollForConversion+0x1dc>)
 810574a:	4293      	cmp	r3, r2
 810574c:	d101      	bne.n	8105752 <HAL_ADC_PollForConversion+0x22>
 810574e:	4b70      	ldr	r3, [pc, #448]	@ (8105910 <HAL_ADC_PollForConversion+0x1e0>)
 8105750:	e000      	b.n	8105754 <HAL_ADC_PollForConversion+0x24>
 8105752:	4b70      	ldr	r3, [pc, #448]	@ (8105914 <HAL_ADC_PollForConversion+0x1e4>)
 8105754:	4618      	mov	r0, r3
 8105756:	f7ff fc31 	bl	8104fbc <LL_ADC_GetMultimode>
 810575a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 810575c:	687b      	ldr	r3, [r7, #4]
 810575e:	691b      	ldr	r3, [r3, #16]
 8105760:	2b08      	cmp	r3, #8
 8105762:	d102      	bne.n	810576a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8105764:	2308      	movs	r3, #8
 8105766:	61fb      	str	r3, [r7, #28]
 8105768:	e037      	b.n	81057da <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 810576a:	697b      	ldr	r3, [r7, #20]
 810576c:	2b00      	cmp	r3, #0
 810576e:	d005      	beq.n	810577c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8105770:	697b      	ldr	r3, [r7, #20]
 8105772:	2b05      	cmp	r3, #5
 8105774:	d002      	beq.n	810577c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8105776:	697b      	ldr	r3, [r7, #20]
 8105778:	2b09      	cmp	r3, #9
 810577a:	d111      	bne.n	81057a0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 810577c:	687b      	ldr	r3, [r7, #4]
 810577e:	681b      	ldr	r3, [r3, #0]
 8105780:	68db      	ldr	r3, [r3, #12]
 8105782:	f003 0301 	and.w	r3, r3, #1
 8105786:	2b00      	cmp	r3, #0
 8105788:	d007      	beq.n	810579a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810578a:	687b      	ldr	r3, [r7, #4]
 810578c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810578e:	f043 0220 	orr.w	r2, r3, #32
 8105792:	687b      	ldr	r3, [r7, #4]
 8105794:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8105796:	2301      	movs	r3, #1
 8105798:	e0b1      	b.n	81058fe <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 810579a:	2304      	movs	r3, #4
 810579c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 810579e:	e01c      	b.n	81057da <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 81057a0:	687b      	ldr	r3, [r7, #4]
 81057a2:	681b      	ldr	r3, [r3, #0]
 81057a4:	4a58      	ldr	r2, [pc, #352]	@ (8105908 <HAL_ADC_PollForConversion+0x1d8>)
 81057a6:	4293      	cmp	r3, r2
 81057a8:	d004      	beq.n	81057b4 <HAL_ADC_PollForConversion+0x84>
 81057aa:	687b      	ldr	r3, [r7, #4]
 81057ac:	681b      	ldr	r3, [r3, #0]
 81057ae:	4a57      	ldr	r2, [pc, #348]	@ (810590c <HAL_ADC_PollForConversion+0x1dc>)
 81057b0:	4293      	cmp	r3, r2
 81057b2:	d101      	bne.n	81057b8 <HAL_ADC_PollForConversion+0x88>
 81057b4:	4b56      	ldr	r3, [pc, #344]	@ (8105910 <HAL_ADC_PollForConversion+0x1e0>)
 81057b6:	e000      	b.n	81057ba <HAL_ADC_PollForConversion+0x8a>
 81057b8:	4b56      	ldr	r3, [pc, #344]	@ (8105914 <HAL_ADC_PollForConversion+0x1e4>)
 81057ba:	4618      	mov	r0, r3
 81057bc:	f7ff fc0c 	bl	8104fd8 <LL_ADC_GetMultiDMATransfer>
 81057c0:	4603      	mov	r3, r0
 81057c2:	2b00      	cmp	r3, #0
 81057c4:	d007      	beq.n	81057d6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81057c6:	687b      	ldr	r3, [r7, #4]
 81057c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81057ca:	f043 0220 	orr.w	r2, r3, #32
 81057ce:	687b      	ldr	r3, [r7, #4]
 81057d0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 81057d2:	2301      	movs	r3, #1
 81057d4:	e093      	b.n	81058fe <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 81057d6:	2304      	movs	r3, #4
 81057d8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 81057da:	f7ff fa9d 	bl	8104d18 <HAL_GetTick>
 81057de:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 81057e0:	e021      	b.n	8105826 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 81057e2:	683b      	ldr	r3, [r7, #0]
 81057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81057e8:	d01d      	beq.n	8105826 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 81057ea:	f7ff fa95 	bl	8104d18 <HAL_GetTick>
 81057ee:	4602      	mov	r2, r0
 81057f0:	693b      	ldr	r3, [r7, #16]
 81057f2:	1ad3      	subs	r3, r2, r3
 81057f4:	683a      	ldr	r2, [r7, #0]
 81057f6:	429a      	cmp	r2, r3
 81057f8:	d302      	bcc.n	8105800 <HAL_ADC_PollForConversion+0xd0>
 81057fa:	683b      	ldr	r3, [r7, #0]
 81057fc:	2b00      	cmp	r3, #0
 81057fe:	d112      	bne.n	8105826 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8105800:	687b      	ldr	r3, [r7, #4]
 8105802:	681b      	ldr	r3, [r3, #0]
 8105804:	681a      	ldr	r2, [r3, #0]
 8105806:	69fb      	ldr	r3, [r7, #28]
 8105808:	4013      	ands	r3, r2
 810580a:	2b00      	cmp	r3, #0
 810580c:	d10b      	bne.n	8105826 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 810580e:	687b      	ldr	r3, [r7, #4]
 8105810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105812:	f043 0204 	orr.w	r2, r3, #4
 8105816:	687b      	ldr	r3, [r7, #4]
 8105818:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 810581a:	687b      	ldr	r3, [r7, #4]
 810581c:	2200      	movs	r2, #0
 810581e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8105822:	2303      	movs	r3, #3
 8105824:	e06b      	b.n	81058fe <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8105826:	687b      	ldr	r3, [r7, #4]
 8105828:	681b      	ldr	r3, [r3, #0]
 810582a:	681a      	ldr	r2, [r3, #0]
 810582c:	69fb      	ldr	r3, [r7, #28]
 810582e:	4013      	ands	r3, r2
 8105830:	2b00      	cmp	r3, #0
 8105832:	d0d6      	beq.n	81057e2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8105834:	687b      	ldr	r3, [r7, #4]
 8105836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105838:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 810583c:	687b      	ldr	r3, [r7, #4]
 810583e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8105840:	687b      	ldr	r3, [r7, #4]
 8105842:	681b      	ldr	r3, [r3, #0]
 8105844:	4618      	mov	r0, r3
 8105846:	f7ff fb2b 	bl	8104ea0 <LL_ADC_REG_IsTriggerSourceSWStart>
 810584a:	4603      	mov	r3, r0
 810584c:	2b00      	cmp	r3, #0
 810584e:	d01c      	beq.n	810588a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8105850:	687b      	ldr	r3, [r7, #4]
 8105852:	7d5b      	ldrb	r3, [r3, #21]
 8105854:	2b00      	cmp	r3, #0
 8105856:	d118      	bne.n	810588a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8105858:	687b      	ldr	r3, [r7, #4]
 810585a:	681b      	ldr	r3, [r3, #0]
 810585c:	681b      	ldr	r3, [r3, #0]
 810585e:	f003 0308 	and.w	r3, r3, #8
 8105862:	2b08      	cmp	r3, #8
 8105864:	d111      	bne.n	810588a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8105866:	687b      	ldr	r3, [r7, #4]
 8105868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810586a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810586e:	687b      	ldr	r3, [r7, #4]
 8105870:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8105872:	687b      	ldr	r3, [r7, #4]
 8105874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105876:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810587a:	2b00      	cmp	r3, #0
 810587c:	d105      	bne.n	810588a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 810587e:	687b      	ldr	r3, [r7, #4]
 8105880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105882:	f043 0201 	orr.w	r2, r3, #1
 8105886:	687b      	ldr	r3, [r7, #4]
 8105888:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 810588a:	687b      	ldr	r3, [r7, #4]
 810588c:	681b      	ldr	r3, [r3, #0]
 810588e:	4a1f      	ldr	r2, [pc, #124]	@ (810590c <HAL_ADC_PollForConversion+0x1dc>)
 8105890:	4293      	cmp	r3, r2
 8105892:	d002      	beq.n	810589a <HAL_ADC_PollForConversion+0x16a>
 8105894:	687b      	ldr	r3, [r7, #4]
 8105896:	681b      	ldr	r3, [r3, #0]
 8105898:	e000      	b.n	810589c <HAL_ADC_PollForConversion+0x16c>
 810589a:	4b1b      	ldr	r3, [pc, #108]	@ (8105908 <HAL_ADC_PollForConversion+0x1d8>)
 810589c:	687a      	ldr	r2, [r7, #4]
 810589e:	6812      	ldr	r2, [r2, #0]
 81058a0:	4293      	cmp	r3, r2
 81058a2:	d008      	beq.n	81058b6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81058a4:	697b      	ldr	r3, [r7, #20]
 81058a6:	2b00      	cmp	r3, #0
 81058a8:	d005      	beq.n	81058b6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 81058aa:	697b      	ldr	r3, [r7, #20]
 81058ac:	2b05      	cmp	r3, #5
 81058ae:	d002      	beq.n	81058b6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81058b0:	697b      	ldr	r3, [r7, #20]
 81058b2:	2b09      	cmp	r3, #9
 81058b4:	d104      	bne.n	81058c0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 81058b6:	687b      	ldr	r3, [r7, #4]
 81058b8:	681b      	ldr	r3, [r3, #0]
 81058ba:	68db      	ldr	r3, [r3, #12]
 81058bc:	61bb      	str	r3, [r7, #24]
 81058be:	e00c      	b.n	81058da <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 81058c0:	687b      	ldr	r3, [r7, #4]
 81058c2:	681b      	ldr	r3, [r3, #0]
 81058c4:	4a11      	ldr	r2, [pc, #68]	@ (810590c <HAL_ADC_PollForConversion+0x1dc>)
 81058c6:	4293      	cmp	r3, r2
 81058c8:	d002      	beq.n	81058d0 <HAL_ADC_PollForConversion+0x1a0>
 81058ca:	687b      	ldr	r3, [r7, #4]
 81058cc:	681b      	ldr	r3, [r3, #0]
 81058ce:	e000      	b.n	81058d2 <HAL_ADC_PollForConversion+0x1a2>
 81058d0:	4b0d      	ldr	r3, [pc, #52]	@ (8105908 <HAL_ADC_PollForConversion+0x1d8>)
 81058d2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 81058d4:	68fb      	ldr	r3, [r7, #12]
 81058d6:	68db      	ldr	r3, [r3, #12]
 81058d8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 81058da:	69fb      	ldr	r3, [r7, #28]
 81058dc:	2b08      	cmp	r3, #8
 81058de:	d104      	bne.n	81058ea <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 81058e0:	687b      	ldr	r3, [r7, #4]
 81058e2:	681b      	ldr	r3, [r3, #0]
 81058e4:	2208      	movs	r2, #8
 81058e6:	601a      	str	r2, [r3, #0]
 81058e8:	e008      	b.n	81058fc <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 81058ea:	69bb      	ldr	r3, [r7, #24]
 81058ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81058f0:	2b00      	cmp	r3, #0
 81058f2:	d103      	bne.n	81058fc <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 81058f4:	687b      	ldr	r3, [r7, #4]
 81058f6:	681b      	ldr	r3, [r3, #0]
 81058f8:	220c      	movs	r2, #12
 81058fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 81058fc:	2300      	movs	r3, #0
}
 81058fe:	4618      	mov	r0, r3
 8105900:	3720      	adds	r7, #32
 8105902:	46bd      	mov	sp, r7
 8105904:	bd80      	pop	{r7, pc}
 8105906:	bf00      	nop
 8105908:	40022000 	.word	0x40022000
 810590c:	40022100 	.word	0x40022100
 8105910:	40022300 	.word	0x40022300
 8105914:	58026300 	.word	0x58026300

08105918 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8105918:	b480      	push	{r7}
 810591a:	b083      	sub	sp, #12
 810591c:	af00      	add	r7, sp, #0
 810591e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8105920:	687b      	ldr	r3, [r7, #4]
 8105922:	681b      	ldr	r3, [r3, #0]
 8105924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8105926:	4618      	mov	r0, r3
 8105928:	370c      	adds	r7, #12
 810592a:	46bd      	mov	sp, r7
 810592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105930:	4770      	bx	lr
	...

08105934 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8105934:	b590      	push	{r4, r7, lr}
 8105936:	b0a1      	sub	sp, #132	@ 0x84
 8105938:	af00      	add	r7, sp, #0
 810593a:	6078      	str	r0, [r7, #4]
 810593c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810593e:	2300      	movs	r3, #0
 8105940:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8105944:	2300      	movs	r3, #0
 8105946:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8105948:	683b      	ldr	r3, [r7, #0]
 810594a:	68db      	ldr	r3, [r3, #12]
 810594c:	4a65      	ldr	r2, [pc, #404]	@ (8105ae4 <HAL_ADC_ConfigChannel+0x1b0>)
 810594e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8105950:	687b      	ldr	r3, [r7, #4]
 8105952:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8105956:	2b01      	cmp	r3, #1
 8105958:	d101      	bne.n	810595e <HAL_ADC_ConfigChannel+0x2a>
 810595a:	2302      	movs	r3, #2
 810595c:	e32e      	b.n	8105fbc <HAL_ADC_ConfigChannel+0x688>
 810595e:	687b      	ldr	r3, [r7, #4]
 8105960:	2201      	movs	r2, #1
 8105962:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8105966:	687b      	ldr	r3, [r7, #4]
 8105968:	681b      	ldr	r3, [r3, #0]
 810596a:	4618      	mov	r0, r3
 810596c:	f7ff fc06 	bl	810517c <LL_ADC_REG_IsConversionOngoing>
 8105970:	4603      	mov	r3, r0
 8105972:	2b00      	cmp	r3, #0
 8105974:	f040 8313 	bne.w	8105f9e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8105978:	683b      	ldr	r3, [r7, #0]
 810597a:	681b      	ldr	r3, [r3, #0]
 810597c:	2b00      	cmp	r3, #0
 810597e:	db2c      	blt.n	81059da <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8105980:	683b      	ldr	r3, [r7, #0]
 8105982:	681b      	ldr	r3, [r3, #0]
 8105984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105988:	2b00      	cmp	r3, #0
 810598a:	d108      	bne.n	810599e <HAL_ADC_ConfigChannel+0x6a>
 810598c:	683b      	ldr	r3, [r7, #0]
 810598e:	681b      	ldr	r3, [r3, #0]
 8105990:	0e9b      	lsrs	r3, r3, #26
 8105992:	f003 031f 	and.w	r3, r3, #31
 8105996:	2201      	movs	r2, #1
 8105998:	fa02 f303 	lsl.w	r3, r2, r3
 810599c:	e016      	b.n	81059cc <HAL_ADC_ConfigChannel+0x98>
 810599e:	683b      	ldr	r3, [r7, #0]
 81059a0:	681b      	ldr	r3, [r3, #0]
 81059a2:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81059a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 81059a6:	fa93 f3a3 	rbit	r3, r3
 81059aa:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 81059ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 81059ae:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 81059b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 81059b2:	2b00      	cmp	r3, #0
 81059b4:	d101      	bne.n	81059ba <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 81059b6:	2320      	movs	r3, #32
 81059b8:	e003      	b.n	81059c2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 81059ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 81059bc:	fab3 f383 	clz	r3, r3
 81059c0:	b2db      	uxtb	r3, r3
 81059c2:	f003 031f 	and.w	r3, r3, #31
 81059c6:	2201      	movs	r2, #1
 81059c8:	fa02 f303 	lsl.w	r3, r2, r3
 81059cc:	687a      	ldr	r2, [r7, #4]
 81059ce:	6812      	ldr	r2, [r2, #0]
 81059d0:	69d1      	ldr	r1, [r2, #28]
 81059d2:	687a      	ldr	r2, [r7, #4]
 81059d4:	6812      	ldr	r2, [r2, #0]
 81059d6:	430b      	orrs	r3, r1
 81059d8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 81059da:	687b      	ldr	r3, [r7, #4]
 81059dc:	6818      	ldr	r0, [r3, #0]
 81059de:	683b      	ldr	r3, [r7, #0]
 81059e0:	6859      	ldr	r1, [r3, #4]
 81059e2:	683b      	ldr	r3, [r7, #0]
 81059e4:	681b      	ldr	r3, [r3, #0]
 81059e6:	461a      	mov	r2, r3
 81059e8:	f7ff fa6d 	bl	8104ec6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81059ec:	687b      	ldr	r3, [r7, #4]
 81059ee:	681b      	ldr	r3, [r3, #0]
 81059f0:	4618      	mov	r0, r3
 81059f2:	f7ff fbc3 	bl	810517c <LL_ADC_REG_IsConversionOngoing>
 81059f6:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81059f8:	687b      	ldr	r3, [r7, #4]
 81059fa:	681b      	ldr	r3, [r3, #0]
 81059fc:	4618      	mov	r0, r3
 81059fe:	f7ff fbe4 	bl	81051ca <LL_ADC_INJ_IsConversionOngoing>
 8105a02:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8105a04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8105a06:	2b00      	cmp	r3, #0
 8105a08:	f040 80b8 	bne.w	8105b7c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8105a0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8105a0e:	2b00      	cmp	r3, #0
 8105a10:	f040 80b4 	bne.w	8105b7c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8105a14:	687b      	ldr	r3, [r7, #4]
 8105a16:	6818      	ldr	r0, [r3, #0]
 8105a18:	683b      	ldr	r3, [r7, #0]
 8105a1a:	6819      	ldr	r1, [r3, #0]
 8105a1c:	683b      	ldr	r3, [r7, #0]
 8105a1e:	689b      	ldr	r3, [r3, #8]
 8105a20:	461a      	mov	r2, r3
 8105a22:	f7ff fa7c 	bl	8104f1e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8105a26:	4b30      	ldr	r3, [pc, #192]	@ (8105ae8 <HAL_ADC_ConfigChannel+0x1b4>)
 8105a28:	681b      	ldr	r3, [r3, #0]
 8105a2a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8105a2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105a32:	d10b      	bne.n	8105a4c <HAL_ADC_ConfigChannel+0x118>
 8105a34:	683b      	ldr	r3, [r7, #0]
 8105a36:	695a      	ldr	r2, [r3, #20]
 8105a38:	687b      	ldr	r3, [r7, #4]
 8105a3a:	681b      	ldr	r3, [r3, #0]
 8105a3c:	68db      	ldr	r3, [r3, #12]
 8105a3e:	089b      	lsrs	r3, r3, #2
 8105a40:	f003 0307 	and.w	r3, r3, #7
 8105a44:	005b      	lsls	r3, r3, #1
 8105a46:	fa02 f303 	lsl.w	r3, r2, r3
 8105a4a:	e01d      	b.n	8105a88 <HAL_ADC_ConfigChannel+0x154>
 8105a4c:	687b      	ldr	r3, [r7, #4]
 8105a4e:	681b      	ldr	r3, [r3, #0]
 8105a50:	68db      	ldr	r3, [r3, #12]
 8105a52:	f003 0310 	and.w	r3, r3, #16
 8105a56:	2b00      	cmp	r3, #0
 8105a58:	d10b      	bne.n	8105a72 <HAL_ADC_ConfigChannel+0x13e>
 8105a5a:	683b      	ldr	r3, [r7, #0]
 8105a5c:	695a      	ldr	r2, [r3, #20]
 8105a5e:	687b      	ldr	r3, [r7, #4]
 8105a60:	681b      	ldr	r3, [r3, #0]
 8105a62:	68db      	ldr	r3, [r3, #12]
 8105a64:	089b      	lsrs	r3, r3, #2
 8105a66:	f003 0307 	and.w	r3, r3, #7
 8105a6a:	005b      	lsls	r3, r3, #1
 8105a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8105a70:	e00a      	b.n	8105a88 <HAL_ADC_ConfigChannel+0x154>
 8105a72:	683b      	ldr	r3, [r7, #0]
 8105a74:	695a      	ldr	r2, [r3, #20]
 8105a76:	687b      	ldr	r3, [r7, #4]
 8105a78:	681b      	ldr	r3, [r3, #0]
 8105a7a:	68db      	ldr	r3, [r3, #12]
 8105a7c:	089b      	lsrs	r3, r3, #2
 8105a7e:	f003 0304 	and.w	r3, r3, #4
 8105a82:	005b      	lsls	r3, r3, #1
 8105a84:	fa02 f303 	lsl.w	r3, r2, r3
 8105a88:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8105a8a:	683b      	ldr	r3, [r7, #0]
 8105a8c:	691b      	ldr	r3, [r3, #16]
 8105a8e:	2b04      	cmp	r3, #4
 8105a90:	d02c      	beq.n	8105aec <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8105a92:	687b      	ldr	r3, [r7, #4]
 8105a94:	6818      	ldr	r0, [r3, #0]
 8105a96:	683b      	ldr	r3, [r7, #0]
 8105a98:	6919      	ldr	r1, [r3, #16]
 8105a9a:	683b      	ldr	r3, [r7, #0]
 8105a9c:	681a      	ldr	r2, [r3, #0]
 8105a9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8105aa0:	f7ff f9aa 	bl	8104df8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8105aa4:	687b      	ldr	r3, [r7, #4]
 8105aa6:	6818      	ldr	r0, [r3, #0]
 8105aa8:	683b      	ldr	r3, [r7, #0]
 8105aaa:	6919      	ldr	r1, [r3, #16]
 8105aac:	683b      	ldr	r3, [r7, #0]
 8105aae:	7e5b      	ldrb	r3, [r3, #25]
 8105ab0:	2b01      	cmp	r3, #1
 8105ab2:	d102      	bne.n	8105aba <HAL_ADC_ConfigChannel+0x186>
 8105ab4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8105ab8:	e000      	b.n	8105abc <HAL_ADC_ConfigChannel+0x188>
 8105aba:	2300      	movs	r3, #0
 8105abc:	461a      	mov	r2, r3
 8105abe:	f7ff f9d4 	bl	8104e6a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8105ac2:	687b      	ldr	r3, [r7, #4]
 8105ac4:	6818      	ldr	r0, [r3, #0]
 8105ac6:	683b      	ldr	r3, [r7, #0]
 8105ac8:	6919      	ldr	r1, [r3, #16]
 8105aca:	683b      	ldr	r3, [r7, #0]
 8105acc:	7e1b      	ldrb	r3, [r3, #24]
 8105ace:	2b01      	cmp	r3, #1
 8105ad0:	d102      	bne.n	8105ad8 <HAL_ADC_ConfigChannel+0x1a4>
 8105ad2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105ad6:	e000      	b.n	8105ada <HAL_ADC_ConfigChannel+0x1a6>
 8105ad8:	2300      	movs	r3, #0
 8105ada:	461a      	mov	r2, r3
 8105adc:	f7ff f9ac 	bl	8104e38 <LL_ADC_SetDataRightShift>
 8105ae0:	e04c      	b.n	8105b7c <HAL_ADC_ConfigChannel+0x248>
 8105ae2:	bf00      	nop
 8105ae4:	47ff0000 	.word	0x47ff0000
 8105ae8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8105aec:	687b      	ldr	r3, [r7, #4]
 8105aee:	681b      	ldr	r3, [r3, #0]
 8105af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105af2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105af6:	683b      	ldr	r3, [r7, #0]
 8105af8:	681b      	ldr	r3, [r3, #0]
 8105afa:	069b      	lsls	r3, r3, #26
 8105afc:	429a      	cmp	r2, r3
 8105afe:	d107      	bne.n	8105b10 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8105b00:	687b      	ldr	r3, [r7, #4]
 8105b02:	681b      	ldr	r3, [r3, #0]
 8105b04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8105b06:	687b      	ldr	r3, [r7, #4]
 8105b08:	681b      	ldr	r3, [r3, #0]
 8105b0a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8105b0e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8105b10:	687b      	ldr	r3, [r7, #4]
 8105b12:	681b      	ldr	r3, [r3, #0]
 8105b14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105b16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105b1a:	683b      	ldr	r3, [r7, #0]
 8105b1c:	681b      	ldr	r3, [r3, #0]
 8105b1e:	069b      	lsls	r3, r3, #26
 8105b20:	429a      	cmp	r2, r3
 8105b22:	d107      	bne.n	8105b34 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8105b24:	687b      	ldr	r3, [r7, #4]
 8105b26:	681b      	ldr	r3, [r3, #0]
 8105b28:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8105b2a:	687b      	ldr	r3, [r7, #4]
 8105b2c:	681b      	ldr	r3, [r3, #0]
 8105b2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8105b32:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8105b34:	687b      	ldr	r3, [r7, #4]
 8105b36:	681b      	ldr	r3, [r3, #0]
 8105b38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8105b3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105b3e:	683b      	ldr	r3, [r7, #0]
 8105b40:	681b      	ldr	r3, [r3, #0]
 8105b42:	069b      	lsls	r3, r3, #26
 8105b44:	429a      	cmp	r2, r3
 8105b46:	d107      	bne.n	8105b58 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8105b48:	687b      	ldr	r3, [r7, #4]
 8105b4a:	681b      	ldr	r3, [r3, #0]
 8105b4c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8105b4e:	687b      	ldr	r3, [r7, #4]
 8105b50:	681b      	ldr	r3, [r3, #0]
 8105b52:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8105b56:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8105b58:	687b      	ldr	r3, [r7, #4]
 8105b5a:	681b      	ldr	r3, [r3, #0]
 8105b5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105b5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105b62:	683b      	ldr	r3, [r7, #0]
 8105b64:	681b      	ldr	r3, [r3, #0]
 8105b66:	069b      	lsls	r3, r3, #26
 8105b68:	429a      	cmp	r2, r3
 8105b6a:	d107      	bne.n	8105b7c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8105b6c:	687b      	ldr	r3, [r7, #4]
 8105b6e:	681b      	ldr	r3, [r3, #0]
 8105b70:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8105b72:	687b      	ldr	r3, [r7, #4]
 8105b74:	681b      	ldr	r3, [r3, #0]
 8105b76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8105b7a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8105b7c:	687b      	ldr	r3, [r7, #4]
 8105b7e:	681b      	ldr	r3, [r3, #0]
 8105b80:	4618      	mov	r0, r3
 8105b82:	f7ff faad 	bl	81050e0 <LL_ADC_IsEnabled>
 8105b86:	4603      	mov	r3, r0
 8105b88:	2b00      	cmp	r3, #0
 8105b8a:	f040 8211 	bne.w	8105fb0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8105b8e:	687b      	ldr	r3, [r7, #4]
 8105b90:	6818      	ldr	r0, [r3, #0]
 8105b92:	683b      	ldr	r3, [r7, #0]
 8105b94:	6819      	ldr	r1, [r3, #0]
 8105b96:	683b      	ldr	r3, [r7, #0]
 8105b98:	68db      	ldr	r3, [r3, #12]
 8105b9a:	461a      	mov	r2, r3
 8105b9c:	f7ff f9ea 	bl	8104f74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8105ba0:	683b      	ldr	r3, [r7, #0]
 8105ba2:	68db      	ldr	r3, [r3, #12]
 8105ba4:	4aa1      	ldr	r2, [pc, #644]	@ (8105e2c <HAL_ADC_ConfigChannel+0x4f8>)
 8105ba6:	4293      	cmp	r3, r2
 8105ba8:	f040 812e 	bne.w	8105e08 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8105bac:	687b      	ldr	r3, [r7, #4]
 8105bae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8105bb0:	683b      	ldr	r3, [r7, #0]
 8105bb2:	681b      	ldr	r3, [r3, #0]
 8105bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105bb8:	2b00      	cmp	r3, #0
 8105bba:	d10b      	bne.n	8105bd4 <HAL_ADC_ConfigChannel+0x2a0>
 8105bbc:	683b      	ldr	r3, [r7, #0]
 8105bbe:	681b      	ldr	r3, [r3, #0]
 8105bc0:	0e9b      	lsrs	r3, r3, #26
 8105bc2:	3301      	adds	r3, #1
 8105bc4:	f003 031f 	and.w	r3, r3, #31
 8105bc8:	2b09      	cmp	r3, #9
 8105bca:	bf94      	ite	ls
 8105bcc:	2301      	movls	r3, #1
 8105bce:	2300      	movhi	r3, #0
 8105bd0:	b2db      	uxtb	r3, r3
 8105bd2:	e019      	b.n	8105c08 <HAL_ADC_ConfigChannel+0x2d4>
 8105bd4:	683b      	ldr	r3, [r7, #0]
 8105bd6:	681b      	ldr	r3, [r3, #0]
 8105bd8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105bda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8105bdc:	fa93 f3a3 	rbit	r3, r3
 8105be0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8105be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8105be4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8105be6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8105be8:	2b00      	cmp	r3, #0
 8105bea:	d101      	bne.n	8105bf0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8105bec:	2320      	movs	r3, #32
 8105bee:	e003      	b.n	8105bf8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8105bf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8105bf2:	fab3 f383 	clz	r3, r3
 8105bf6:	b2db      	uxtb	r3, r3
 8105bf8:	3301      	adds	r3, #1
 8105bfa:	f003 031f 	and.w	r3, r3, #31
 8105bfe:	2b09      	cmp	r3, #9
 8105c00:	bf94      	ite	ls
 8105c02:	2301      	movls	r3, #1
 8105c04:	2300      	movhi	r3, #0
 8105c06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8105c08:	2b00      	cmp	r3, #0
 8105c0a:	d079      	beq.n	8105d00 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8105c0c:	683b      	ldr	r3, [r7, #0]
 8105c0e:	681b      	ldr	r3, [r3, #0]
 8105c10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105c14:	2b00      	cmp	r3, #0
 8105c16:	d107      	bne.n	8105c28 <HAL_ADC_ConfigChannel+0x2f4>
 8105c18:	683b      	ldr	r3, [r7, #0]
 8105c1a:	681b      	ldr	r3, [r3, #0]
 8105c1c:	0e9b      	lsrs	r3, r3, #26
 8105c1e:	3301      	adds	r3, #1
 8105c20:	069b      	lsls	r3, r3, #26
 8105c22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105c26:	e015      	b.n	8105c54 <HAL_ADC_ConfigChannel+0x320>
 8105c28:	683b      	ldr	r3, [r7, #0]
 8105c2a:	681b      	ldr	r3, [r3, #0]
 8105c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105c2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8105c30:	fa93 f3a3 	rbit	r3, r3
 8105c34:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8105c36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8105c38:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8105c3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8105c3c:	2b00      	cmp	r3, #0
 8105c3e:	d101      	bne.n	8105c44 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8105c40:	2320      	movs	r3, #32
 8105c42:	e003      	b.n	8105c4c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8105c44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8105c46:	fab3 f383 	clz	r3, r3
 8105c4a:	b2db      	uxtb	r3, r3
 8105c4c:	3301      	adds	r3, #1
 8105c4e:	069b      	lsls	r3, r3, #26
 8105c50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105c54:	683b      	ldr	r3, [r7, #0]
 8105c56:	681b      	ldr	r3, [r3, #0]
 8105c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105c5c:	2b00      	cmp	r3, #0
 8105c5e:	d109      	bne.n	8105c74 <HAL_ADC_ConfigChannel+0x340>
 8105c60:	683b      	ldr	r3, [r7, #0]
 8105c62:	681b      	ldr	r3, [r3, #0]
 8105c64:	0e9b      	lsrs	r3, r3, #26
 8105c66:	3301      	adds	r3, #1
 8105c68:	f003 031f 	and.w	r3, r3, #31
 8105c6c:	2101      	movs	r1, #1
 8105c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8105c72:	e017      	b.n	8105ca4 <HAL_ADC_ConfigChannel+0x370>
 8105c74:	683b      	ldr	r3, [r7, #0]
 8105c76:	681b      	ldr	r3, [r3, #0]
 8105c78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8105c7c:	fa93 f3a3 	rbit	r3, r3
 8105c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8105c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105c84:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8105c86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8105c88:	2b00      	cmp	r3, #0
 8105c8a:	d101      	bne.n	8105c90 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8105c8c:	2320      	movs	r3, #32
 8105c8e:	e003      	b.n	8105c98 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8105c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8105c92:	fab3 f383 	clz	r3, r3
 8105c96:	b2db      	uxtb	r3, r3
 8105c98:	3301      	adds	r3, #1
 8105c9a:	f003 031f 	and.w	r3, r3, #31
 8105c9e:	2101      	movs	r1, #1
 8105ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8105ca4:	ea42 0103 	orr.w	r1, r2, r3
 8105ca8:	683b      	ldr	r3, [r7, #0]
 8105caa:	681b      	ldr	r3, [r3, #0]
 8105cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105cb0:	2b00      	cmp	r3, #0
 8105cb2:	d10a      	bne.n	8105cca <HAL_ADC_ConfigChannel+0x396>
 8105cb4:	683b      	ldr	r3, [r7, #0]
 8105cb6:	681b      	ldr	r3, [r3, #0]
 8105cb8:	0e9b      	lsrs	r3, r3, #26
 8105cba:	3301      	adds	r3, #1
 8105cbc:	f003 021f 	and.w	r2, r3, #31
 8105cc0:	4613      	mov	r3, r2
 8105cc2:	005b      	lsls	r3, r3, #1
 8105cc4:	4413      	add	r3, r2
 8105cc6:	051b      	lsls	r3, r3, #20
 8105cc8:	e018      	b.n	8105cfc <HAL_ADC_ConfigChannel+0x3c8>
 8105cca:	683b      	ldr	r3, [r7, #0]
 8105ccc:	681b      	ldr	r3, [r3, #0]
 8105cce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105cd2:	fa93 f3a3 	rbit	r3, r3
 8105cd6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8105cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105cda:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8105cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105cde:	2b00      	cmp	r3, #0
 8105ce0:	d101      	bne.n	8105ce6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8105ce2:	2320      	movs	r3, #32
 8105ce4:	e003      	b.n	8105cee <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8105ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105ce8:	fab3 f383 	clz	r3, r3
 8105cec:	b2db      	uxtb	r3, r3
 8105cee:	3301      	adds	r3, #1
 8105cf0:	f003 021f 	and.w	r2, r3, #31
 8105cf4:	4613      	mov	r3, r2
 8105cf6:	005b      	lsls	r3, r3, #1
 8105cf8:	4413      	add	r3, r2
 8105cfa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8105cfc:	430b      	orrs	r3, r1
 8105cfe:	e07e      	b.n	8105dfe <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8105d00:	683b      	ldr	r3, [r7, #0]
 8105d02:	681b      	ldr	r3, [r3, #0]
 8105d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105d08:	2b00      	cmp	r3, #0
 8105d0a:	d107      	bne.n	8105d1c <HAL_ADC_ConfigChannel+0x3e8>
 8105d0c:	683b      	ldr	r3, [r7, #0]
 8105d0e:	681b      	ldr	r3, [r3, #0]
 8105d10:	0e9b      	lsrs	r3, r3, #26
 8105d12:	3301      	adds	r3, #1
 8105d14:	069b      	lsls	r3, r3, #26
 8105d16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105d1a:	e015      	b.n	8105d48 <HAL_ADC_ConfigChannel+0x414>
 8105d1c:	683b      	ldr	r3, [r7, #0]
 8105d1e:	681b      	ldr	r3, [r3, #0]
 8105d20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105d24:	fa93 f3a3 	rbit	r3, r3
 8105d28:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8105d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8105d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105d30:	2b00      	cmp	r3, #0
 8105d32:	d101      	bne.n	8105d38 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8105d34:	2320      	movs	r3, #32
 8105d36:	e003      	b.n	8105d40 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8105d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105d3a:	fab3 f383 	clz	r3, r3
 8105d3e:	b2db      	uxtb	r3, r3
 8105d40:	3301      	adds	r3, #1
 8105d42:	069b      	lsls	r3, r3, #26
 8105d44:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105d48:	683b      	ldr	r3, [r7, #0]
 8105d4a:	681b      	ldr	r3, [r3, #0]
 8105d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105d50:	2b00      	cmp	r3, #0
 8105d52:	d109      	bne.n	8105d68 <HAL_ADC_ConfigChannel+0x434>
 8105d54:	683b      	ldr	r3, [r7, #0]
 8105d56:	681b      	ldr	r3, [r3, #0]
 8105d58:	0e9b      	lsrs	r3, r3, #26
 8105d5a:	3301      	adds	r3, #1
 8105d5c:	f003 031f 	and.w	r3, r3, #31
 8105d60:	2101      	movs	r1, #1
 8105d62:	fa01 f303 	lsl.w	r3, r1, r3
 8105d66:	e017      	b.n	8105d98 <HAL_ADC_ConfigChannel+0x464>
 8105d68:	683b      	ldr	r3, [r7, #0]
 8105d6a:	681b      	ldr	r3, [r3, #0]
 8105d6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105d6e:	69fb      	ldr	r3, [r7, #28]
 8105d70:	fa93 f3a3 	rbit	r3, r3
 8105d74:	61bb      	str	r3, [r7, #24]
  return result;
 8105d76:	69bb      	ldr	r3, [r7, #24]
 8105d78:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8105d7a:	6a3b      	ldr	r3, [r7, #32]
 8105d7c:	2b00      	cmp	r3, #0
 8105d7e:	d101      	bne.n	8105d84 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8105d80:	2320      	movs	r3, #32
 8105d82:	e003      	b.n	8105d8c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8105d84:	6a3b      	ldr	r3, [r7, #32]
 8105d86:	fab3 f383 	clz	r3, r3
 8105d8a:	b2db      	uxtb	r3, r3
 8105d8c:	3301      	adds	r3, #1
 8105d8e:	f003 031f 	and.w	r3, r3, #31
 8105d92:	2101      	movs	r1, #1
 8105d94:	fa01 f303 	lsl.w	r3, r1, r3
 8105d98:	ea42 0103 	orr.w	r1, r2, r3
 8105d9c:	683b      	ldr	r3, [r7, #0]
 8105d9e:	681b      	ldr	r3, [r3, #0]
 8105da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105da4:	2b00      	cmp	r3, #0
 8105da6:	d10d      	bne.n	8105dc4 <HAL_ADC_ConfigChannel+0x490>
 8105da8:	683b      	ldr	r3, [r7, #0]
 8105daa:	681b      	ldr	r3, [r3, #0]
 8105dac:	0e9b      	lsrs	r3, r3, #26
 8105dae:	3301      	adds	r3, #1
 8105db0:	f003 021f 	and.w	r2, r3, #31
 8105db4:	4613      	mov	r3, r2
 8105db6:	005b      	lsls	r3, r3, #1
 8105db8:	4413      	add	r3, r2
 8105dba:	3b1e      	subs	r3, #30
 8105dbc:	051b      	lsls	r3, r3, #20
 8105dbe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8105dc2:	e01b      	b.n	8105dfc <HAL_ADC_ConfigChannel+0x4c8>
 8105dc4:	683b      	ldr	r3, [r7, #0]
 8105dc6:	681b      	ldr	r3, [r3, #0]
 8105dc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105dca:	693b      	ldr	r3, [r7, #16]
 8105dcc:	fa93 f3a3 	rbit	r3, r3
 8105dd0:	60fb      	str	r3, [r7, #12]
  return result;
 8105dd2:	68fb      	ldr	r3, [r7, #12]
 8105dd4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8105dd6:	697b      	ldr	r3, [r7, #20]
 8105dd8:	2b00      	cmp	r3, #0
 8105dda:	d101      	bne.n	8105de0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8105ddc:	2320      	movs	r3, #32
 8105dde:	e003      	b.n	8105de8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8105de0:	697b      	ldr	r3, [r7, #20]
 8105de2:	fab3 f383 	clz	r3, r3
 8105de6:	b2db      	uxtb	r3, r3
 8105de8:	3301      	adds	r3, #1
 8105dea:	f003 021f 	and.w	r2, r3, #31
 8105dee:	4613      	mov	r3, r2
 8105df0:	005b      	lsls	r3, r3, #1
 8105df2:	4413      	add	r3, r2
 8105df4:	3b1e      	subs	r3, #30
 8105df6:	051b      	lsls	r3, r3, #20
 8105df8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8105dfc:	430b      	orrs	r3, r1
 8105dfe:	683a      	ldr	r2, [r7, #0]
 8105e00:	6892      	ldr	r2, [r2, #8]
 8105e02:	4619      	mov	r1, r3
 8105e04:	f7ff f88b 	bl	8104f1e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8105e08:	683b      	ldr	r3, [r7, #0]
 8105e0a:	681b      	ldr	r3, [r3, #0]
 8105e0c:	2b00      	cmp	r3, #0
 8105e0e:	f280 80cf 	bge.w	8105fb0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8105e12:	687b      	ldr	r3, [r7, #4]
 8105e14:	681b      	ldr	r3, [r3, #0]
 8105e16:	4a06      	ldr	r2, [pc, #24]	@ (8105e30 <HAL_ADC_ConfigChannel+0x4fc>)
 8105e18:	4293      	cmp	r3, r2
 8105e1a:	d004      	beq.n	8105e26 <HAL_ADC_ConfigChannel+0x4f2>
 8105e1c:	687b      	ldr	r3, [r7, #4]
 8105e1e:	681b      	ldr	r3, [r3, #0]
 8105e20:	4a04      	ldr	r2, [pc, #16]	@ (8105e34 <HAL_ADC_ConfigChannel+0x500>)
 8105e22:	4293      	cmp	r3, r2
 8105e24:	d10a      	bne.n	8105e3c <HAL_ADC_ConfigChannel+0x508>
 8105e26:	4b04      	ldr	r3, [pc, #16]	@ (8105e38 <HAL_ADC_ConfigChannel+0x504>)
 8105e28:	e009      	b.n	8105e3e <HAL_ADC_ConfigChannel+0x50a>
 8105e2a:	bf00      	nop
 8105e2c:	47ff0000 	.word	0x47ff0000
 8105e30:	40022000 	.word	0x40022000
 8105e34:	40022100 	.word	0x40022100
 8105e38:	40022300 	.word	0x40022300
 8105e3c:	4b61      	ldr	r3, [pc, #388]	@ (8105fc4 <HAL_ADC_ConfigChannel+0x690>)
 8105e3e:	4618      	mov	r0, r3
 8105e40:	f7fe ffcc 	bl	8104ddc <LL_ADC_GetCommonPathInternalCh>
 8105e44:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8105e46:	687b      	ldr	r3, [r7, #4]
 8105e48:	681b      	ldr	r3, [r3, #0]
 8105e4a:	4a5f      	ldr	r2, [pc, #380]	@ (8105fc8 <HAL_ADC_ConfigChannel+0x694>)
 8105e4c:	4293      	cmp	r3, r2
 8105e4e:	d004      	beq.n	8105e5a <HAL_ADC_ConfigChannel+0x526>
 8105e50:	687b      	ldr	r3, [r7, #4]
 8105e52:	681b      	ldr	r3, [r3, #0]
 8105e54:	4a5d      	ldr	r2, [pc, #372]	@ (8105fcc <HAL_ADC_ConfigChannel+0x698>)
 8105e56:	4293      	cmp	r3, r2
 8105e58:	d10e      	bne.n	8105e78 <HAL_ADC_ConfigChannel+0x544>
 8105e5a:	485b      	ldr	r0, [pc, #364]	@ (8105fc8 <HAL_ADC_ConfigChannel+0x694>)
 8105e5c:	f7ff f940 	bl	81050e0 <LL_ADC_IsEnabled>
 8105e60:	4604      	mov	r4, r0
 8105e62:	485a      	ldr	r0, [pc, #360]	@ (8105fcc <HAL_ADC_ConfigChannel+0x698>)
 8105e64:	f7ff f93c 	bl	81050e0 <LL_ADC_IsEnabled>
 8105e68:	4603      	mov	r3, r0
 8105e6a:	4323      	orrs	r3, r4
 8105e6c:	2b00      	cmp	r3, #0
 8105e6e:	bf0c      	ite	eq
 8105e70:	2301      	moveq	r3, #1
 8105e72:	2300      	movne	r3, #0
 8105e74:	b2db      	uxtb	r3, r3
 8105e76:	e008      	b.n	8105e8a <HAL_ADC_ConfigChannel+0x556>
 8105e78:	4855      	ldr	r0, [pc, #340]	@ (8105fd0 <HAL_ADC_ConfigChannel+0x69c>)
 8105e7a:	f7ff f931 	bl	81050e0 <LL_ADC_IsEnabled>
 8105e7e:	4603      	mov	r3, r0
 8105e80:	2b00      	cmp	r3, #0
 8105e82:	bf0c      	ite	eq
 8105e84:	2301      	moveq	r3, #1
 8105e86:	2300      	movne	r3, #0
 8105e88:	b2db      	uxtb	r3, r3
 8105e8a:	2b00      	cmp	r3, #0
 8105e8c:	d07d      	beq.n	8105f8a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8105e8e:	683b      	ldr	r3, [r7, #0]
 8105e90:	681b      	ldr	r3, [r3, #0]
 8105e92:	4a50      	ldr	r2, [pc, #320]	@ (8105fd4 <HAL_ADC_ConfigChannel+0x6a0>)
 8105e94:	4293      	cmp	r3, r2
 8105e96:	d130      	bne.n	8105efa <HAL_ADC_ConfigChannel+0x5c6>
 8105e98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105e9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8105e9e:	2b00      	cmp	r3, #0
 8105ea0:	d12b      	bne.n	8105efa <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8105ea2:	687b      	ldr	r3, [r7, #4]
 8105ea4:	681b      	ldr	r3, [r3, #0]
 8105ea6:	4a4a      	ldr	r2, [pc, #296]	@ (8105fd0 <HAL_ADC_ConfigChannel+0x69c>)
 8105ea8:	4293      	cmp	r3, r2
 8105eaa:	f040 8081 	bne.w	8105fb0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8105eae:	687b      	ldr	r3, [r7, #4]
 8105eb0:	681b      	ldr	r3, [r3, #0]
 8105eb2:	4a45      	ldr	r2, [pc, #276]	@ (8105fc8 <HAL_ADC_ConfigChannel+0x694>)
 8105eb4:	4293      	cmp	r3, r2
 8105eb6:	d004      	beq.n	8105ec2 <HAL_ADC_ConfigChannel+0x58e>
 8105eb8:	687b      	ldr	r3, [r7, #4]
 8105eba:	681b      	ldr	r3, [r3, #0]
 8105ebc:	4a43      	ldr	r2, [pc, #268]	@ (8105fcc <HAL_ADC_ConfigChannel+0x698>)
 8105ebe:	4293      	cmp	r3, r2
 8105ec0:	d101      	bne.n	8105ec6 <HAL_ADC_ConfigChannel+0x592>
 8105ec2:	4a45      	ldr	r2, [pc, #276]	@ (8105fd8 <HAL_ADC_ConfigChannel+0x6a4>)
 8105ec4:	e000      	b.n	8105ec8 <HAL_ADC_ConfigChannel+0x594>
 8105ec6:	4a3f      	ldr	r2, [pc, #252]	@ (8105fc4 <HAL_ADC_ConfigChannel+0x690>)
 8105ec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105eca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8105ece:	4619      	mov	r1, r3
 8105ed0:	4610      	mov	r0, r2
 8105ed2:	f7fe ff70 	bl	8104db6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8105ed6:	4b41      	ldr	r3, [pc, #260]	@ (8105fdc <HAL_ADC_ConfigChannel+0x6a8>)
 8105ed8:	681b      	ldr	r3, [r3, #0]
 8105eda:	099b      	lsrs	r3, r3, #6
 8105edc:	4a40      	ldr	r2, [pc, #256]	@ (8105fe0 <HAL_ADC_ConfigChannel+0x6ac>)
 8105ede:	fba2 2303 	umull	r2, r3, r2, r3
 8105ee2:	099b      	lsrs	r3, r3, #6
 8105ee4:	3301      	adds	r3, #1
 8105ee6:	005b      	lsls	r3, r3, #1
 8105ee8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8105eea:	e002      	b.n	8105ef2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8105eec:	68bb      	ldr	r3, [r7, #8]
 8105eee:	3b01      	subs	r3, #1
 8105ef0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8105ef2:	68bb      	ldr	r3, [r7, #8]
 8105ef4:	2b00      	cmp	r3, #0
 8105ef6:	d1f9      	bne.n	8105eec <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8105ef8:	e05a      	b.n	8105fb0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8105efa:	683b      	ldr	r3, [r7, #0]
 8105efc:	681b      	ldr	r3, [r3, #0]
 8105efe:	4a39      	ldr	r2, [pc, #228]	@ (8105fe4 <HAL_ADC_ConfigChannel+0x6b0>)
 8105f00:	4293      	cmp	r3, r2
 8105f02:	d11e      	bne.n	8105f42 <HAL_ADC_ConfigChannel+0x60e>
 8105f04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105f06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8105f0a:	2b00      	cmp	r3, #0
 8105f0c:	d119      	bne.n	8105f42 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8105f0e:	687b      	ldr	r3, [r7, #4]
 8105f10:	681b      	ldr	r3, [r3, #0]
 8105f12:	4a2f      	ldr	r2, [pc, #188]	@ (8105fd0 <HAL_ADC_ConfigChannel+0x69c>)
 8105f14:	4293      	cmp	r3, r2
 8105f16:	d14b      	bne.n	8105fb0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8105f18:	687b      	ldr	r3, [r7, #4]
 8105f1a:	681b      	ldr	r3, [r3, #0]
 8105f1c:	4a2a      	ldr	r2, [pc, #168]	@ (8105fc8 <HAL_ADC_ConfigChannel+0x694>)
 8105f1e:	4293      	cmp	r3, r2
 8105f20:	d004      	beq.n	8105f2c <HAL_ADC_ConfigChannel+0x5f8>
 8105f22:	687b      	ldr	r3, [r7, #4]
 8105f24:	681b      	ldr	r3, [r3, #0]
 8105f26:	4a29      	ldr	r2, [pc, #164]	@ (8105fcc <HAL_ADC_ConfigChannel+0x698>)
 8105f28:	4293      	cmp	r3, r2
 8105f2a:	d101      	bne.n	8105f30 <HAL_ADC_ConfigChannel+0x5fc>
 8105f2c:	4a2a      	ldr	r2, [pc, #168]	@ (8105fd8 <HAL_ADC_ConfigChannel+0x6a4>)
 8105f2e:	e000      	b.n	8105f32 <HAL_ADC_ConfigChannel+0x5fe>
 8105f30:	4a24      	ldr	r2, [pc, #144]	@ (8105fc4 <HAL_ADC_ConfigChannel+0x690>)
 8105f32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105f34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8105f38:	4619      	mov	r1, r3
 8105f3a:	4610      	mov	r0, r2
 8105f3c:	f7fe ff3b 	bl	8104db6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8105f40:	e036      	b.n	8105fb0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8105f42:	683b      	ldr	r3, [r7, #0]
 8105f44:	681b      	ldr	r3, [r3, #0]
 8105f46:	4a28      	ldr	r2, [pc, #160]	@ (8105fe8 <HAL_ADC_ConfigChannel+0x6b4>)
 8105f48:	4293      	cmp	r3, r2
 8105f4a:	d131      	bne.n	8105fb0 <HAL_ADC_ConfigChannel+0x67c>
 8105f4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8105f52:	2b00      	cmp	r3, #0
 8105f54:	d12c      	bne.n	8105fb0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8105f56:	687b      	ldr	r3, [r7, #4]
 8105f58:	681b      	ldr	r3, [r3, #0]
 8105f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8105fd0 <HAL_ADC_ConfigChannel+0x69c>)
 8105f5c:	4293      	cmp	r3, r2
 8105f5e:	d127      	bne.n	8105fb0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8105f60:	687b      	ldr	r3, [r7, #4]
 8105f62:	681b      	ldr	r3, [r3, #0]
 8105f64:	4a18      	ldr	r2, [pc, #96]	@ (8105fc8 <HAL_ADC_ConfigChannel+0x694>)
 8105f66:	4293      	cmp	r3, r2
 8105f68:	d004      	beq.n	8105f74 <HAL_ADC_ConfigChannel+0x640>
 8105f6a:	687b      	ldr	r3, [r7, #4]
 8105f6c:	681b      	ldr	r3, [r3, #0]
 8105f6e:	4a17      	ldr	r2, [pc, #92]	@ (8105fcc <HAL_ADC_ConfigChannel+0x698>)
 8105f70:	4293      	cmp	r3, r2
 8105f72:	d101      	bne.n	8105f78 <HAL_ADC_ConfigChannel+0x644>
 8105f74:	4a18      	ldr	r2, [pc, #96]	@ (8105fd8 <HAL_ADC_ConfigChannel+0x6a4>)
 8105f76:	e000      	b.n	8105f7a <HAL_ADC_ConfigChannel+0x646>
 8105f78:	4a12      	ldr	r2, [pc, #72]	@ (8105fc4 <HAL_ADC_ConfigChannel+0x690>)
 8105f7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105f7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8105f80:	4619      	mov	r1, r3
 8105f82:	4610      	mov	r0, r2
 8105f84:	f7fe ff17 	bl	8104db6 <LL_ADC_SetCommonPathInternalCh>
 8105f88:	e012      	b.n	8105fb0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8105f8a:	687b      	ldr	r3, [r7, #4]
 8105f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105f8e:	f043 0220 	orr.w	r2, r3, #32
 8105f92:	687b      	ldr	r3, [r7, #4]
 8105f94:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8105f96:	2301      	movs	r3, #1
 8105f98:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8105f9c:	e008      	b.n	8105fb0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8105f9e:	687b      	ldr	r3, [r7, #4]
 8105fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105fa2:	f043 0220 	orr.w	r2, r3, #32
 8105fa6:	687b      	ldr	r3, [r7, #4]
 8105fa8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8105faa:	2301      	movs	r3, #1
 8105fac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8105fb0:	687b      	ldr	r3, [r7, #4]
 8105fb2:	2200      	movs	r2, #0
 8105fb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8105fb8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8105fbc:	4618      	mov	r0, r3
 8105fbe:	3784      	adds	r7, #132	@ 0x84
 8105fc0:	46bd      	mov	sp, r7
 8105fc2:	bd90      	pop	{r4, r7, pc}
 8105fc4:	58026300 	.word	0x58026300
 8105fc8:	40022000 	.word	0x40022000
 8105fcc:	40022100 	.word	0x40022100
 8105fd0:	58026000 	.word	0x58026000
 8105fd4:	cb840000 	.word	0xcb840000
 8105fd8:	40022300 	.word	0x40022300
 8105fdc:	10000000 	.word	0x10000000
 8105fe0:	053e2d63 	.word	0x053e2d63
 8105fe4:	c7520000 	.word	0xc7520000
 8105fe8:	cfb80000 	.word	0xcfb80000

08105fec <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8105fec:	b580      	push	{r7, lr}
 8105fee:	b088      	sub	sp, #32
 8105ff0:	af00      	add	r7, sp, #0
 8105ff2:	6078      	str	r0, [r7, #4]
 8105ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8105ff6:	2300      	movs	r3, #0
 8105ff8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8105ffa:	683b      	ldr	r3, [r7, #0]
 8105ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8105ffe:	687b      	ldr	r3, [r7, #4]
 8106000:	681b      	ldr	r3, [r3, #0]
 8106002:	4618      	mov	r0, r3
 8106004:	f7ff f8ba 	bl	810517c <LL_ADC_REG_IsConversionOngoing>
 8106008:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 810600a:	687b      	ldr	r3, [r7, #4]
 810600c:	681b      	ldr	r3, [r3, #0]
 810600e:	4618      	mov	r0, r3
 8106010:	f7ff f8db 	bl	81051ca <LL_ADC_INJ_IsConversionOngoing>
 8106014:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8106016:	693b      	ldr	r3, [r7, #16]
 8106018:	2b00      	cmp	r3, #0
 810601a:	d103      	bne.n	8106024 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 810601c:	68fb      	ldr	r3, [r7, #12]
 810601e:	2b00      	cmp	r3, #0
 8106020:	f000 8098 	beq.w	8106154 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8106024:	687b      	ldr	r3, [r7, #4]
 8106026:	681b      	ldr	r3, [r3, #0]
 8106028:	68db      	ldr	r3, [r3, #12]
 810602a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810602e:	2b00      	cmp	r3, #0
 8106030:	d02a      	beq.n	8106088 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8106032:	687b      	ldr	r3, [r7, #4]
 8106034:	7d5b      	ldrb	r3, [r3, #21]
 8106036:	2b01      	cmp	r3, #1
 8106038:	d126      	bne.n	8106088 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 810603a:	687b      	ldr	r3, [r7, #4]
 810603c:	7d1b      	ldrb	r3, [r3, #20]
 810603e:	2b01      	cmp	r3, #1
 8106040:	d122      	bne.n	8106088 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8106042:	2301      	movs	r3, #1
 8106044:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8106046:	e014      	b.n	8106072 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8106048:	69fb      	ldr	r3, [r7, #28]
 810604a:	4a45      	ldr	r2, [pc, #276]	@ (8106160 <ADC_ConversionStop+0x174>)
 810604c:	4293      	cmp	r3, r2
 810604e:	d90d      	bls.n	810606c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8106050:	687b      	ldr	r3, [r7, #4]
 8106052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106054:	f043 0210 	orr.w	r2, r3, #16
 8106058:	687b      	ldr	r3, [r7, #4]
 810605a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810605c:	687b      	ldr	r3, [r7, #4]
 810605e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106060:	f043 0201 	orr.w	r2, r3, #1
 8106064:	687b      	ldr	r3, [r7, #4]
 8106066:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8106068:	2301      	movs	r3, #1
 810606a:	e074      	b.n	8106156 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 810606c:	69fb      	ldr	r3, [r7, #28]
 810606e:	3301      	adds	r3, #1
 8106070:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8106072:	687b      	ldr	r3, [r7, #4]
 8106074:	681b      	ldr	r3, [r3, #0]
 8106076:	681b      	ldr	r3, [r3, #0]
 8106078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810607c:	2b40      	cmp	r3, #64	@ 0x40
 810607e:	d1e3      	bne.n	8106048 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8106080:	687b      	ldr	r3, [r7, #4]
 8106082:	681b      	ldr	r3, [r3, #0]
 8106084:	2240      	movs	r2, #64	@ 0x40
 8106086:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8106088:	69bb      	ldr	r3, [r7, #24]
 810608a:	2b02      	cmp	r3, #2
 810608c:	d014      	beq.n	81060b8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 810608e:	687b      	ldr	r3, [r7, #4]
 8106090:	681b      	ldr	r3, [r3, #0]
 8106092:	4618      	mov	r0, r3
 8106094:	f7ff f872 	bl	810517c <LL_ADC_REG_IsConversionOngoing>
 8106098:	4603      	mov	r3, r0
 810609a:	2b00      	cmp	r3, #0
 810609c:	d00c      	beq.n	81060b8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 810609e:	687b      	ldr	r3, [r7, #4]
 81060a0:	681b      	ldr	r3, [r3, #0]
 81060a2:	4618      	mov	r0, r3
 81060a4:	f7ff f82f 	bl	8105106 <LL_ADC_IsDisableOngoing>
 81060a8:	4603      	mov	r3, r0
 81060aa:	2b00      	cmp	r3, #0
 81060ac:	d104      	bne.n	81060b8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 81060ae:	687b      	ldr	r3, [r7, #4]
 81060b0:	681b      	ldr	r3, [r3, #0]
 81060b2:	4618      	mov	r0, r3
 81060b4:	f7ff f84e 	bl	8105154 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 81060b8:	69bb      	ldr	r3, [r7, #24]
 81060ba:	2b01      	cmp	r3, #1
 81060bc:	d014      	beq.n	81060e8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 81060be:	687b      	ldr	r3, [r7, #4]
 81060c0:	681b      	ldr	r3, [r3, #0]
 81060c2:	4618      	mov	r0, r3
 81060c4:	f7ff f881 	bl	81051ca <LL_ADC_INJ_IsConversionOngoing>
 81060c8:	4603      	mov	r3, r0
 81060ca:	2b00      	cmp	r3, #0
 81060cc:	d00c      	beq.n	81060e8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 81060ce:	687b      	ldr	r3, [r7, #4]
 81060d0:	681b      	ldr	r3, [r3, #0]
 81060d2:	4618      	mov	r0, r3
 81060d4:	f7ff f817 	bl	8105106 <LL_ADC_IsDisableOngoing>
 81060d8:	4603      	mov	r3, r0
 81060da:	2b00      	cmp	r3, #0
 81060dc:	d104      	bne.n	81060e8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 81060de:	687b      	ldr	r3, [r7, #4]
 81060e0:	681b      	ldr	r3, [r3, #0]
 81060e2:	4618      	mov	r0, r3
 81060e4:	f7ff f85d 	bl	81051a2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 81060e8:	69bb      	ldr	r3, [r7, #24]
 81060ea:	2b02      	cmp	r3, #2
 81060ec:	d005      	beq.n	81060fa <ADC_ConversionStop+0x10e>
 81060ee:	69bb      	ldr	r3, [r7, #24]
 81060f0:	2b03      	cmp	r3, #3
 81060f2:	d105      	bne.n	8106100 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 81060f4:	230c      	movs	r3, #12
 81060f6:	617b      	str	r3, [r7, #20]
        break;
 81060f8:	e005      	b.n	8106106 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 81060fa:	2308      	movs	r3, #8
 81060fc:	617b      	str	r3, [r7, #20]
        break;
 81060fe:	e002      	b.n	8106106 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8106100:	2304      	movs	r3, #4
 8106102:	617b      	str	r3, [r7, #20]
        break;
 8106104:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8106106:	f7fe fe07 	bl	8104d18 <HAL_GetTick>
 810610a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 810610c:	e01b      	b.n	8106146 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 810610e:	f7fe fe03 	bl	8104d18 <HAL_GetTick>
 8106112:	4602      	mov	r2, r0
 8106114:	68bb      	ldr	r3, [r7, #8]
 8106116:	1ad3      	subs	r3, r2, r3
 8106118:	2b05      	cmp	r3, #5
 810611a:	d914      	bls.n	8106146 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 810611c:	687b      	ldr	r3, [r7, #4]
 810611e:	681b      	ldr	r3, [r3, #0]
 8106120:	689a      	ldr	r2, [r3, #8]
 8106122:	697b      	ldr	r3, [r7, #20]
 8106124:	4013      	ands	r3, r2
 8106126:	2b00      	cmp	r3, #0
 8106128:	d00d      	beq.n	8106146 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810612a:	687b      	ldr	r3, [r7, #4]
 810612c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810612e:	f043 0210 	orr.w	r2, r3, #16
 8106132:	687b      	ldr	r3, [r7, #4]
 8106134:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8106136:	687b      	ldr	r3, [r7, #4]
 8106138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810613a:	f043 0201 	orr.w	r2, r3, #1
 810613e:	687b      	ldr	r3, [r7, #4]
 8106140:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8106142:	2301      	movs	r3, #1
 8106144:	e007      	b.n	8106156 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8106146:	687b      	ldr	r3, [r7, #4]
 8106148:	681b      	ldr	r3, [r3, #0]
 810614a:	689a      	ldr	r2, [r3, #8]
 810614c:	697b      	ldr	r3, [r7, #20]
 810614e:	4013      	ands	r3, r2
 8106150:	2b00      	cmp	r3, #0
 8106152:	d1dc      	bne.n	810610e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8106154:	2300      	movs	r3, #0
}
 8106156:	4618      	mov	r0, r3
 8106158:	3720      	adds	r7, #32
 810615a:	46bd      	mov	sp, r7
 810615c:	bd80      	pop	{r7, pc}
 810615e:	bf00      	nop
 8106160:	000cdbff 	.word	0x000cdbff

08106164 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8106164:	b580      	push	{r7, lr}
 8106166:	b084      	sub	sp, #16
 8106168:	af00      	add	r7, sp, #0
 810616a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810616c:	687b      	ldr	r3, [r7, #4]
 810616e:	681b      	ldr	r3, [r3, #0]
 8106170:	4618      	mov	r0, r3
 8106172:	f7fe ffb5 	bl	81050e0 <LL_ADC_IsEnabled>
 8106176:	4603      	mov	r3, r0
 8106178:	2b00      	cmp	r3, #0
 810617a:	d16e      	bne.n	810625a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 810617c:	687b      	ldr	r3, [r7, #4]
 810617e:	681b      	ldr	r3, [r3, #0]
 8106180:	689a      	ldr	r2, [r3, #8]
 8106182:	4b38      	ldr	r3, [pc, #224]	@ (8106264 <ADC_Enable+0x100>)
 8106184:	4013      	ands	r3, r2
 8106186:	2b00      	cmp	r3, #0
 8106188:	d00d      	beq.n	81061a6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810618a:	687b      	ldr	r3, [r7, #4]
 810618c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810618e:	f043 0210 	orr.w	r2, r3, #16
 8106192:	687b      	ldr	r3, [r7, #4]
 8106194:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8106196:	687b      	ldr	r3, [r7, #4]
 8106198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810619a:	f043 0201 	orr.w	r2, r3, #1
 810619e:	687b      	ldr	r3, [r7, #4]
 81061a0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 81061a2:	2301      	movs	r3, #1
 81061a4:	e05a      	b.n	810625c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 81061a6:	687b      	ldr	r3, [r7, #4]
 81061a8:	681b      	ldr	r3, [r3, #0]
 81061aa:	4618      	mov	r0, r3
 81061ac:	f7fe ff70 	bl	8105090 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 81061b0:	f7fe fdb2 	bl	8104d18 <HAL_GetTick>
 81061b4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81061b6:	687b      	ldr	r3, [r7, #4]
 81061b8:	681b      	ldr	r3, [r3, #0]
 81061ba:	4a2b      	ldr	r2, [pc, #172]	@ (8106268 <ADC_Enable+0x104>)
 81061bc:	4293      	cmp	r3, r2
 81061be:	d004      	beq.n	81061ca <ADC_Enable+0x66>
 81061c0:	687b      	ldr	r3, [r7, #4]
 81061c2:	681b      	ldr	r3, [r3, #0]
 81061c4:	4a29      	ldr	r2, [pc, #164]	@ (810626c <ADC_Enable+0x108>)
 81061c6:	4293      	cmp	r3, r2
 81061c8:	d101      	bne.n	81061ce <ADC_Enable+0x6a>
 81061ca:	4b29      	ldr	r3, [pc, #164]	@ (8106270 <ADC_Enable+0x10c>)
 81061cc:	e000      	b.n	81061d0 <ADC_Enable+0x6c>
 81061ce:	4b29      	ldr	r3, [pc, #164]	@ (8106274 <ADC_Enable+0x110>)
 81061d0:	4618      	mov	r0, r3
 81061d2:	f7fe fef3 	bl	8104fbc <LL_ADC_GetMultimode>
 81061d6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81061d8:	687b      	ldr	r3, [r7, #4]
 81061da:	681b      	ldr	r3, [r3, #0]
 81061dc:	4a23      	ldr	r2, [pc, #140]	@ (810626c <ADC_Enable+0x108>)
 81061de:	4293      	cmp	r3, r2
 81061e0:	d002      	beq.n	81061e8 <ADC_Enable+0x84>
 81061e2:	687b      	ldr	r3, [r7, #4]
 81061e4:	681b      	ldr	r3, [r3, #0]
 81061e6:	e000      	b.n	81061ea <ADC_Enable+0x86>
 81061e8:	4b1f      	ldr	r3, [pc, #124]	@ (8106268 <ADC_Enable+0x104>)
 81061ea:	687a      	ldr	r2, [r7, #4]
 81061ec:	6812      	ldr	r2, [r2, #0]
 81061ee:	4293      	cmp	r3, r2
 81061f0:	d02c      	beq.n	810624c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81061f2:	68bb      	ldr	r3, [r7, #8]
 81061f4:	2b00      	cmp	r3, #0
 81061f6:	d130      	bne.n	810625a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 81061f8:	e028      	b.n	810624c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81061fa:	687b      	ldr	r3, [r7, #4]
 81061fc:	681b      	ldr	r3, [r3, #0]
 81061fe:	4618      	mov	r0, r3
 8106200:	f7fe ff6e 	bl	81050e0 <LL_ADC_IsEnabled>
 8106204:	4603      	mov	r3, r0
 8106206:	2b00      	cmp	r3, #0
 8106208:	d104      	bne.n	8106214 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 810620a:	687b      	ldr	r3, [r7, #4]
 810620c:	681b      	ldr	r3, [r3, #0]
 810620e:	4618      	mov	r0, r3
 8106210:	f7fe ff3e 	bl	8105090 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8106214:	f7fe fd80 	bl	8104d18 <HAL_GetTick>
 8106218:	4602      	mov	r2, r0
 810621a:	68fb      	ldr	r3, [r7, #12]
 810621c:	1ad3      	subs	r3, r2, r3
 810621e:	2b02      	cmp	r3, #2
 8106220:	d914      	bls.n	810624c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8106222:	687b      	ldr	r3, [r7, #4]
 8106224:	681b      	ldr	r3, [r3, #0]
 8106226:	681b      	ldr	r3, [r3, #0]
 8106228:	f003 0301 	and.w	r3, r3, #1
 810622c:	2b01      	cmp	r3, #1
 810622e:	d00d      	beq.n	810624c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8106230:	687b      	ldr	r3, [r7, #4]
 8106232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106234:	f043 0210 	orr.w	r2, r3, #16
 8106238:	687b      	ldr	r3, [r7, #4]
 810623a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810623c:	687b      	ldr	r3, [r7, #4]
 810623e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106240:	f043 0201 	orr.w	r2, r3, #1
 8106244:	687b      	ldr	r3, [r7, #4]
 8106246:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8106248:	2301      	movs	r3, #1
 810624a:	e007      	b.n	810625c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 810624c:	687b      	ldr	r3, [r7, #4]
 810624e:	681b      	ldr	r3, [r3, #0]
 8106250:	681b      	ldr	r3, [r3, #0]
 8106252:	f003 0301 	and.w	r3, r3, #1
 8106256:	2b01      	cmp	r3, #1
 8106258:	d1cf      	bne.n	81061fa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 810625a:	2300      	movs	r3, #0
}
 810625c:	4618      	mov	r0, r3
 810625e:	3710      	adds	r7, #16
 8106260:	46bd      	mov	sp, r7
 8106262:	bd80      	pop	{r7, pc}
 8106264:	8000003f 	.word	0x8000003f
 8106268:	40022000 	.word	0x40022000
 810626c:	40022100 	.word	0x40022100
 8106270:	40022300 	.word	0x40022300
 8106274:	58026300 	.word	0x58026300

08106278 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8106278:	b580      	push	{r7, lr}
 810627a:	b084      	sub	sp, #16
 810627c:	af00      	add	r7, sp, #0
 810627e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8106280:	687b      	ldr	r3, [r7, #4]
 8106282:	681b      	ldr	r3, [r3, #0]
 8106284:	4618      	mov	r0, r3
 8106286:	f7fe ff3e 	bl	8105106 <LL_ADC_IsDisableOngoing>
 810628a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 810628c:	687b      	ldr	r3, [r7, #4]
 810628e:	681b      	ldr	r3, [r3, #0]
 8106290:	4618      	mov	r0, r3
 8106292:	f7fe ff25 	bl	81050e0 <LL_ADC_IsEnabled>
 8106296:	4603      	mov	r3, r0
 8106298:	2b00      	cmp	r3, #0
 810629a:	d047      	beq.n	810632c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 810629c:	68fb      	ldr	r3, [r7, #12]
 810629e:	2b00      	cmp	r3, #0
 81062a0:	d144      	bne.n	810632c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 81062a2:	687b      	ldr	r3, [r7, #4]
 81062a4:	681b      	ldr	r3, [r3, #0]
 81062a6:	689b      	ldr	r3, [r3, #8]
 81062a8:	f003 030d 	and.w	r3, r3, #13
 81062ac:	2b01      	cmp	r3, #1
 81062ae:	d10c      	bne.n	81062ca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 81062b0:	687b      	ldr	r3, [r7, #4]
 81062b2:	681b      	ldr	r3, [r3, #0]
 81062b4:	4618      	mov	r0, r3
 81062b6:	f7fe feff 	bl	81050b8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 81062ba:	687b      	ldr	r3, [r7, #4]
 81062bc:	681b      	ldr	r3, [r3, #0]
 81062be:	2203      	movs	r2, #3
 81062c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 81062c2:	f7fe fd29 	bl	8104d18 <HAL_GetTick>
 81062c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 81062c8:	e029      	b.n	810631e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81062ca:	687b      	ldr	r3, [r7, #4]
 81062cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81062ce:	f043 0210 	orr.w	r2, r3, #16
 81062d2:	687b      	ldr	r3, [r7, #4]
 81062d4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81062d6:	687b      	ldr	r3, [r7, #4]
 81062d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81062da:	f043 0201 	orr.w	r2, r3, #1
 81062de:	687b      	ldr	r3, [r7, #4]
 81062e0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 81062e2:	2301      	movs	r3, #1
 81062e4:	e023      	b.n	810632e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 81062e6:	f7fe fd17 	bl	8104d18 <HAL_GetTick>
 81062ea:	4602      	mov	r2, r0
 81062ec:	68bb      	ldr	r3, [r7, #8]
 81062ee:	1ad3      	subs	r3, r2, r3
 81062f0:	2b02      	cmp	r3, #2
 81062f2:	d914      	bls.n	810631e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 81062f4:	687b      	ldr	r3, [r7, #4]
 81062f6:	681b      	ldr	r3, [r3, #0]
 81062f8:	689b      	ldr	r3, [r3, #8]
 81062fa:	f003 0301 	and.w	r3, r3, #1
 81062fe:	2b00      	cmp	r3, #0
 8106300:	d00d      	beq.n	810631e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8106302:	687b      	ldr	r3, [r7, #4]
 8106304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106306:	f043 0210 	orr.w	r2, r3, #16
 810630a:	687b      	ldr	r3, [r7, #4]
 810630c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810630e:	687b      	ldr	r3, [r7, #4]
 8106310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106312:	f043 0201 	orr.w	r2, r3, #1
 8106316:	687b      	ldr	r3, [r7, #4]
 8106318:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 810631a:	2301      	movs	r3, #1
 810631c:	e007      	b.n	810632e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 810631e:	687b      	ldr	r3, [r7, #4]
 8106320:	681b      	ldr	r3, [r3, #0]
 8106322:	689b      	ldr	r3, [r3, #8]
 8106324:	f003 0301 	and.w	r3, r3, #1
 8106328:	2b00      	cmp	r3, #0
 810632a:	d1dc      	bne.n	81062e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 810632c:	2300      	movs	r3, #0
}
 810632e:	4618      	mov	r0, r3
 8106330:	3710      	adds	r7, #16
 8106332:	46bd      	mov	sp, r7
 8106334:	bd80      	pop	{r7, pc}
	...

08106338 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8106338:	b580      	push	{r7, lr}
 810633a:	b084      	sub	sp, #16
 810633c:	af00      	add	r7, sp, #0
 810633e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8106340:	687b      	ldr	r3, [r7, #4]
 8106342:	681b      	ldr	r3, [r3, #0]
 8106344:	4a7a      	ldr	r2, [pc, #488]	@ (8106530 <ADC_ConfigureBoostMode+0x1f8>)
 8106346:	4293      	cmp	r3, r2
 8106348:	d004      	beq.n	8106354 <ADC_ConfigureBoostMode+0x1c>
 810634a:	687b      	ldr	r3, [r7, #4]
 810634c:	681b      	ldr	r3, [r3, #0]
 810634e:	4a79      	ldr	r2, [pc, #484]	@ (8106534 <ADC_ConfigureBoostMode+0x1fc>)
 8106350:	4293      	cmp	r3, r2
 8106352:	d109      	bne.n	8106368 <ADC_ConfigureBoostMode+0x30>
 8106354:	4b78      	ldr	r3, [pc, #480]	@ (8106538 <ADC_ConfigureBoostMode+0x200>)
 8106356:	689b      	ldr	r3, [r3, #8]
 8106358:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810635c:	2b00      	cmp	r3, #0
 810635e:	bf14      	ite	ne
 8106360:	2301      	movne	r3, #1
 8106362:	2300      	moveq	r3, #0
 8106364:	b2db      	uxtb	r3, r3
 8106366:	e008      	b.n	810637a <ADC_ConfigureBoostMode+0x42>
 8106368:	4b74      	ldr	r3, [pc, #464]	@ (810653c <ADC_ConfigureBoostMode+0x204>)
 810636a:	689b      	ldr	r3, [r3, #8]
 810636c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8106370:	2b00      	cmp	r3, #0
 8106372:	bf14      	ite	ne
 8106374:	2301      	movne	r3, #1
 8106376:	2300      	moveq	r3, #0
 8106378:	b2db      	uxtb	r3, r3
 810637a:	2b00      	cmp	r3, #0
 810637c:	d01c      	beq.n	81063b8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 810637e:	f003 ff31 	bl	810a1e4 <HAL_RCC_GetHCLKFreq>
 8106382:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8106384:	687b      	ldr	r3, [r7, #4]
 8106386:	685b      	ldr	r3, [r3, #4]
 8106388:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810638c:	d010      	beq.n	81063b0 <ADC_ConfigureBoostMode+0x78>
 810638e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106392:	d873      	bhi.n	810647c <ADC_ConfigureBoostMode+0x144>
 8106394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106398:	d002      	beq.n	81063a0 <ADC_ConfigureBoostMode+0x68>
 810639a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810639e:	d16d      	bne.n	810647c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 81063a0:	687b      	ldr	r3, [r7, #4]
 81063a2:	685b      	ldr	r3, [r3, #4]
 81063a4:	0c1b      	lsrs	r3, r3, #16
 81063a6:	68fa      	ldr	r2, [r7, #12]
 81063a8:	fbb2 f3f3 	udiv	r3, r2, r3
 81063ac:	60fb      	str	r3, [r7, #12]
        break;
 81063ae:	e068      	b.n	8106482 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 81063b0:	68fb      	ldr	r3, [r7, #12]
 81063b2:	089b      	lsrs	r3, r3, #2
 81063b4:	60fb      	str	r3, [r7, #12]
        break;
 81063b6:	e064      	b.n	8106482 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 81063b8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 81063bc:	f04f 0100 	mov.w	r1, #0
 81063c0:	f005 f978 	bl	810b6b4 <HAL_RCCEx_GetPeriphCLKFreq>
 81063c4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81063c6:	687b      	ldr	r3, [r7, #4]
 81063c8:	685b      	ldr	r3, [r3, #4]
 81063ca:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 81063ce:	d051      	beq.n	8106474 <ADC_ConfigureBoostMode+0x13c>
 81063d0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 81063d4:	d854      	bhi.n	8106480 <ADC_ConfigureBoostMode+0x148>
 81063d6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 81063da:	d047      	beq.n	810646c <ADC_ConfigureBoostMode+0x134>
 81063dc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 81063e0:	d84e      	bhi.n	8106480 <ADC_ConfigureBoostMode+0x148>
 81063e2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 81063e6:	d03d      	beq.n	8106464 <ADC_ConfigureBoostMode+0x12c>
 81063e8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 81063ec:	d848      	bhi.n	8106480 <ADC_ConfigureBoostMode+0x148>
 81063ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81063f2:	d033      	beq.n	810645c <ADC_ConfigureBoostMode+0x124>
 81063f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81063f8:	d842      	bhi.n	8106480 <ADC_ConfigureBoostMode+0x148>
 81063fa:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 81063fe:	d029      	beq.n	8106454 <ADC_ConfigureBoostMode+0x11c>
 8106400:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8106404:	d83c      	bhi.n	8106480 <ADC_ConfigureBoostMode+0x148>
 8106406:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 810640a:	d01a      	beq.n	8106442 <ADC_ConfigureBoostMode+0x10a>
 810640c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8106410:	d836      	bhi.n	8106480 <ADC_ConfigureBoostMode+0x148>
 8106412:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8106416:	d014      	beq.n	8106442 <ADC_ConfigureBoostMode+0x10a>
 8106418:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 810641c:	d830      	bhi.n	8106480 <ADC_ConfigureBoostMode+0x148>
 810641e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8106422:	d00e      	beq.n	8106442 <ADC_ConfigureBoostMode+0x10a>
 8106424:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8106428:	d82a      	bhi.n	8106480 <ADC_ConfigureBoostMode+0x148>
 810642a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 810642e:	d008      	beq.n	8106442 <ADC_ConfigureBoostMode+0x10a>
 8106430:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8106434:	d824      	bhi.n	8106480 <ADC_ConfigureBoostMode+0x148>
 8106436:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810643a:	d002      	beq.n	8106442 <ADC_ConfigureBoostMode+0x10a>
 810643c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8106440:	d11e      	bne.n	8106480 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8106442:	687b      	ldr	r3, [r7, #4]
 8106444:	685b      	ldr	r3, [r3, #4]
 8106446:	0c9b      	lsrs	r3, r3, #18
 8106448:	005b      	lsls	r3, r3, #1
 810644a:	68fa      	ldr	r2, [r7, #12]
 810644c:	fbb2 f3f3 	udiv	r3, r2, r3
 8106450:	60fb      	str	r3, [r7, #12]
        break;
 8106452:	e016      	b.n	8106482 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8106454:	68fb      	ldr	r3, [r7, #12]
 8106456:	091b      	lsrs	r3, r3, #4
 8106458:	60fb      	str	r3, [r7, #12]
        break;
 810645a:	e012      	b.n	8106482 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 810645c:	68fb      	ldr	r3, [r7, #12]
 810645e:	095b      	lsrs	r3, r3, #5
 8106460:	60fb      	str	r3, [r7, #12]
        break;
 8106462:	e00e      	b.n	8106482 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8106464:	68fb      	ldr	r3, [r7, #12]
 8106466:	099b      	lsrs	r3, r3, #6
 8106468:	60fb      	str	r3, [r7, #12]
        break;
 810646a:	e00a      	b.n	8106482 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 810646c:	68fb      	ldr	r3, [r7, #12]
 810646e:	09db      	lsrs	r3, r3, #7
 8106470:	60fb      	str	r3, [r7, #12]
        break;
 8106472:	e006      	b.n	8106482 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8106474:	68fb      	ldr	r3, [r7, #12]
 8106476:	0a1b      	lsrs	r3, r3, #8
 8106478:	60fb      	str	r3, [r7, #12]
        break;
 810647a:	e002      	b.n	8106482 <ADC_ConfigureBoostMode+0x14a>
        break;
 810647c:	bf00      	nop
 810647e:	e000      	b.n	8106482 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8106480:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8106482:	f7fe fc79 	bl	8104d78 <HAL_GetREVID>
 8106486:	4603      	mov	r3, r0
 8106488:	f241 0203 	movw	r2, #4099	@ 0x1003
 810648c:	4293      	cmp	r3, r2
 810648e:	d815      	bhi.n	81064bc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8106490:	68fb      	ldr	r3, [r7, #12]
 8106492:	4a2b      	ldr	r2, [pc, #172]	@ (8106540 <ADC_ConfigureBoostMode+0x208>)
 8106494:	4293      	cmp	r3, r2
 8106496:	d908      	bls.n	81064aa <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8106498:	687b      	ldr	r3, [r7, #4]
 810649a:	681b      	ldr	r3, [r3, #0]
 810649c:	689a      	ldr	r2, [r3, #8]
 810649e:	687b      	ldr	r3, [r7, #4]
 81064a0:	681b      	ldr	r3, [r3, #0]
 81064a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 81064a6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 81064a8:	e03e      	b.n	8106528 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81064aa:	687b      	ldr	r3, [r7, #4]
 81064ac:	681b      	ldr	r3, [r3, #0]
 81064ae:	689a      	ldr	r2, [r3, #8]
 81064b0:	687b      	ldr	r3, [r7, #4]
 81064b2:	681b      	ldr	r3, [r3, #0]
 81064b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81064b8:	609a      	str	r2, [r3, #8]
}
 81064ba:	e035      	b.n	8106528 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 81064bc:	68fb      	ldr	r3, [r7, #12]
 81064be:	085b      	lsrs	r3, r3, #1
 81064c0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 81064c2:	68fb      	ldr	r3, [r7, #12]
 81064c4:	4a1f      	ldr	r2, [pc, #124]	@ (8106544 <ADC_ConfigureBoostMode+0x20c>)
 81064c6:	4293      	cmp	r3, r2
 81064c8:	d808      	bhi.n	81064dc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 81064ca:	687b      	ldr	r3, [r7, #4]
 81064cc:	681b      	ldr	r3, [r3, #0]
 81064ce:	689a      	ldr	r2, [r3, #8]
 81064d0:	687b      	ldr	r3, [r7, #4]
 81064d2:	681b      	ldr	r3, [r3, #0]
 81064d4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 81064d8:	609a      	str	r2, [r3, #8]
}
 81064da:	e025      	b.n	8106528 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 81064dc:	68fb      	ldr	r3, [r7, #12]
 81064de:	4a1a      	ldr	r2, [pc, #104]	@ (8106548 <ADC_ConfigureBoostMode+0x210>)
 81064e0:	4293      	cmp	r3, r2
 81064e2:	d80a      	bhi.n	81064fa <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 81064e4:	687b      	ldr	r3, [r7, #4]
 81064e6:	681b      	ldr	r3, [r3, #0]
 81064e8:	689b      	ldr	r3, [r3, #8]
 81064ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 81064ee:	687b      	ldr	r3, [r7, #4]
 81064f0:	681b      	ldr	r3, [r3, #0]
 81064f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 81064f6:	609a      	str	r2, [r3, #8]
}
 81064f8:	e016      	b.n	8106528 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 81064fa:	68fb      	ldr	r3, [r7, #12]
 81064fc:	4a13      	ldr	r2, [pc, #76]	@ (810654c <ADC_ConfigureBoostMode+0x214>)
 81064fe:	4293      	cmp	r3, r2
 8106500:	d80a      	bhi.n	8106518 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8106502:	687b      	ldr	r3, [r7, #4]
 8106504:	681b      	ldr	r3, [r3, #0]
 8106506:	689b      	ldr	r3, [r3, #8]
 8106508:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810650c:	687b      	ldr	r3, [r7, #4]
 810650e:	681b      	ldr	r3, [r3, #0]
 8106510:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8106514:	609a      	str	r2, [r3, #8]
}
 8106516:	e007      	b.n	8106528 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8106518:	687b      	ldr	r3, [r7, #4]
 810651a:	681b      	ldr	r3, [r3, #0]
 810651c:	689a      	ldr	r2, [r3, #8]
 810651e:	687b      	ldr	r3, [r7, #4]
 8106520:	681b      	ldr	r3, [r3, #0]
 8106522:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8106526:	609a      	str	r2, [r3, #8]
}
 8106528:	bf00      	nop
 810652a:	3710      	adds	r7, #16
 810652c:	46bd      	mov	sp, r7
 810652e:	bd80      	pop	{r7, pc}
 8106530:	40022000 	.word	0x40022000
 8106534:	40022100 	.word	0x40022100
 8106538:	40022300 	.word	0x40022300
 810653c:	58026300 	.word	0x58026300
 8106540:	01312d00 	.word	0x01312d00
 8106544:	005f5e10 	.word	0x005f5e10
 8106548:	00bebc20 	.word	0x00bebc20
 810654c:	017d7840 	.word	0x017d7840

08106550 <LL_ADC_IsEnabled>:
{
 8106550:	b480      	push	{r7}
 8106552:	b083      	sub	sp, #12
 8106554:	af00      	add	r7, sp, #0
 8106556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8106558:	687b      	ldr	r3, [r7, #4]
 810655a:	689b      	ldr	r3, [r3, #8]
 810655c:	f003 0301 	and.w	r3, r3, #1
 8106560:	2b01      	cmp	r3, #1
 8106562:	d101      	bne.n	8106568 <LL_ADC_IsEnabled+0x18>
 8106564:	2301      	movs	r3, #1
 8106566:	e000      	b.n	810656a <LL_ADC_IsEnabled+0x1a>
 8106568:	2300      	movs	r3, #0
}
 810656a:	4618      	mov	r0, r3
 810656c:	370c      	adds	r7, #12
 810656e:	46bd      	mov	sp, r7
 8106570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106574:	4770      	bx	lr

08106576 <LL_ADC_REG_IsConversionOngoing>:
{
 8106576:	b480      	push	{r7}
 8106578:	b083      	sub	sp, #12
 810657a:	af00      	add	r7, sp, #0
 810657c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810657e:	687b      	ldr	r3, [r7, #4]
 8106580:	689b      	ldr	r3, [r3, #8]
 8106582:	f003 0304 	and.w	r3, r3, #4
 8106586:	2b04      	cmp	r3, #4
 8106588:	d101      	bne.n	810658e <LL_ADC_REG_IsConversionOngoing+0x18>
 810658a:	2301      	movs	r3, #1
 810658c:	e000      	b.n	8106590 <LL_ADC_REG_IsConversionOngoing+0x1a>
 810658e:	2300      	movs	r3, #0
}
 8106590:	4618      	mov	r0, r3
 8106592:	370c      	adds	r7, #12
 8106594:	46bd      	mov	sp, r7
 8106596:	f85d 7b04 	ldr.w	r7, [sp], #4
 810659a:	4770      	bx	lr

0810659c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 810659c:	b590      	push	{r4, r7, lr}
 810659e:	b09f      	sub	sp, #124	@ 0x7c
 81065a0:	af00      	add	r7, sp, #0
 81065a2:	6078      	str	r0, [r7, #4]
 81065a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81065a6:	2300      	movs	r3, #0
 81065a8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81065ac:	687b      	ldr	r3, [r7, #4]
 81065ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 81065b2:	2b01      	cmp	r3, #1
 81065b4:	d101      	bne.n	81065ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 81065b6:	2302      	movs	r3, #2
 81065b8:	e0c4      	b.n	8106744 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 81065ba:	687b      	ldr	r3, [r7, #4]
 81065bc:	2201      	movs	r2, #1
 81065be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 81065c2:	2300      	movs	r3, #0
 81065c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 81065c6:	2300      	movs	r3, #0
 81065c8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 81065ca:	687b      	ldr	r3, [r7, #4]
 81065cc:	681b      	ldr	r3, [r3, #0]
 81065ce:	4a5f      	ldr	r2, [pc, #380]	@ (810674c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81065d0:	4293      	cmp	r3, r2
 81065d2:	d102      	bne.n	81065da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 81065d4:	4b5e      	ldr	r3, [pc, #376]	@ (8106750 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81065d6:	60bb      	str	r3, [r7, #8]
 81065d8:	e001      	b.n	81065de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 81065da:	2300      	movs	r3, #0
 81065dc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 81065de:	68bb      	ldr	r3, [r7, #8]
 81065e0:	2b00      	cmp	r3, #0
 81065e2:	d10b      	bne.n	81065fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81065e4:	687b      	ldr	r3, [r7, #4]
 81065e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81065e8:	f043 0220 	orr.w	r2, r3, #32
 81065ec:	687b      	ldr	r3, [r7, #4]
 81065ee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 81065f0:	687b      	ldr	r3, [r7, #4]
 81065f2:	2200      	movs	r2, #0
 81065f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 81065f8:	2301      	movs	r3, #1
 81065fa:	e0a3      	b.n	8106744 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 81065fc:	68bb      	ldr	r3, [r7, #8]
 81065fe:	4618      	mov	r0, r3
 8106600:	f7ff ffb9 	bl	8106576 <LL_ADC_REG_IsConversionOngoing>
 8106604:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8106606:	687b      	ldr	r3, [r7, #4]
 8106608:	681b      	ldr	r3, [r3, #0]
 810660a:	4618      	mov	r0, r3
 810660c:	f7ff ffb3 	bl	8106576 <LL_ADC_REG_IsConversionOngoing>
 8106610:	4603      	mov	r3, r0
 8106612:	2b00      	cmp	r3, #0
 8106614:	f040 8085 	bne.w	8106722 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8106618:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810661a:	2b00      	cmp	r3, #0
 810661c:	f040 8081 	bne.w	8106722 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8106620:	687b      	ldr	r3, [r7, #4]
 8106622:	681b      	ldr	r3, [r3, #0]
 8106624:	4a49      	ldr	r2, [pc, #292]	@ (810674c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8106626:	4293      	cmp	r3, r2
 8106628:	d004      	beq.n	8106634 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 810662a:	687b      	ldr	r3, [r7, #4]
 810662c:	681b      	ldr	r3, [r3, #0]
 810662e:	4a48      	ldr	r2, [pc, #288]	@ (8106750 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8106630:	4293      	cmp	r3, r2
 8106632:	d101      	bne.n	8106638 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8106634:	4b47      	ldr	r3, [pc, #284]	@ (8106754 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8106636:	e000      	b.n	810663a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8106638:	4b47      	ldr	r3, [pc, #284]	@ (8106758 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 810663a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810663c:	683b      	ldr	r3, [r7, #0]
 810663e:	681b      	ldr	r3, [r3, #0]
 8106640:	2b00      	cmp	r3, #0
 8106642:	d03b      	beq.n	81066bc <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8106644:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8106646:	689b      	ldr	r3, [r3, #8]
 8106648:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 810664c:	683b      	ldr	r3, [r7, #0]
 810664e:	685b      	ldr	r3, [r3, #4]
 8106650:	431a      	orrs	r2, r3
 8106652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8106654:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8106656:	687b      	ldr	r3, [r7, #4]
 8106658:	681b      	ldr	r3, [r3, #0]
 810665a:	4a3c      	ldr	r2, [pc, #240]	@ (810674c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810665c:	4293      	cmp	r3, r2
 810665e:	d004      	beq.n	810666a <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8106660:	687b      	ldr	r3, [r7, #4]
 8106662:	681b      	ldr	r3, [r3, #0]
 8106664:	4a3a      	ldr	r2, [pc, #232]	@ (8106750 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8106666:	4293      	cmp	r3, r2
 8106668:	d10e      	bne.n	8106688 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 810666a:	4838      	ldr	r0, [pc, #224]	@ (810674c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810666c:	f7ff ff70 	bl	8106550 <LL_ADC_IsEnabled>
 8106670:	4604      	mov	r4, r0
 8106672:	4837      	ldr	r0, [pc, #220]	@ (8106750 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8106674:	f7ff ff6c 	bl	8106550 <LL_ADC_IsEnabled>
 8106678:	4603      	mov	r3, r0
 810667a:	4323      	orrs	r3, r4
 810667c:	2b00      	cmp	r3, #0
 810667e:	bf0c      	ite	eq
 8106680:	2301      	moveq	r3, #1
 8106682:	2300      	movne	r3, #0
 8106684:	b2db      	uxtb	r3, r3
 8106686:	e008      	b.n	810669a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8106688:	4834      	ldr	r0, [pc, #208]	@ (810675c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 810668a:	f7ff ff61 	bl	8106550 <LL_ADC_IsEnabled>
 810668e:	4603      	mov	r3, r0
 8106690:	2b00      	cmp	r3, #0
 8106692:	bf0c      	ite	eq
 8106694:	2301      	moveq	r3, #1
 8106696:	2300      	movne	r3, #0
 8106698:	b2db      	uxtb	r3, r3
 810669a:	2b00      	cmp	r3, #0
 810669c:	d04b      	beq.n	8106736 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 810669e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81066a0:	689b      	ldr	r3, [r3, #8]
 81066a2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 81066a6:	f023 030f 	bic.w	r3, r3, #15
 81066aa:	683a      	ldr	r2, [r7, #0]
 81066ac:	6811      	ldr	r1, [r2, #0]
 81066ae:	683a      	ldr	r2, [r7, #0]
 81066b0:	6892      	ldr	r2, [r2, #8]
 81066b2:	430a      	orrs	r2, r1
 81066b4:	431a      	orrs	r2, r3
 81066b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81066b8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81066ba:	e03c      	b.n	8106736 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 81066bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81066be:	689b      	ldr	r3, [r3, #8]
 81066c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 81066c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81066c6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81066c8:	687b      	ldr	r3, [r7, #4]
 81066ca:	681b      	ldr	r3, [r3, #0]
 81066cc:	4a1f      	ldr	r2, [pc, #124]	@ (810674c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81066ce:	4293      	cmp	r3, r2
 81066d0:	d004      	beq.n	81066dc <HAL_ADCEx_MultiModeConfigChannel+0x140>
 81066d2:	687b      	ldr	r3, [r7, #4]
 81066d4:	681b      	ldr	r3, [r3, #0]
 81066d6:	4a1e      	ldr	r2, [pc, #120]	@ (8106750 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81066d8:	4293      	cmp	r3, r2
 81066da:	d10e      	bne.n	81066fa <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 81066dc:	481b      	ldr	r0, [pc, #108]	@ (810674c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81066de:	f7ff ff37 	bl	8106550 <LL_ADC_IsEnabled>
 81066e2:	4604      	mov	r4, r0
 81066e4:	481a      	ldr	r0, [pc, #104]	@ (8106750 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81066e6:	f7ff ff33 	bl	8106550 <LL_ADC_IsEnabled>
 81066ea:	4603      	mov	r3, r0
 81066ec:	4323      	orrs	r3, r4
 81066ee:	2b00      	cmp	r3, #0
 81066f0:	bf0c      	ite	eq
 81066f2:	2301      	moveq	r3, #1
 81066f4:	2300      	movne	r3, #0
 81066f6:	b2db      	uxtb	r3, r3
 81066f8:	e008      	b.n	810670c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81066fa:	4818      	ldr	r0, [pc, #96]	@ (810675c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81066fc:	f7ff ff28 	bl	8106550 <LL_ADC_IsEnabled>
 8106700:	4603      	mov	r3, r0
 8106702:	2b00      	cmp	r3, #0
 8106704:	bf0c      	ite	eq
 8106706:	2301      	moveq	r3, #1
 8106708:	2300      	movne	r3, #0
 810670a:	b2db      	uxtb	r3, r3
 810670c:	2b00      	cmp	r3, #0
 810670e:	d012      	beq.n	8106736 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8106710:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8106712:	689b      	ldr	r3, [r3, #8]
 8106714:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8106718:	f023 030f 	bic.w	r3, r3, #15
 810671c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810671e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8106720:	e009      	b.n	8106736 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8106722:	687b      	ldr	r3, [r7, #4]
 8106724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106726:	f043 0220 	orr.w	r2, r3, #32
 810672a:	687b      	ldr	r3, [r7, #4]
 810672c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 810672e:	2301      	movs	r3, #1
 8106730:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8106734:	e000      	b.n	8106738 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8106736:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8106738:	687b      	ldr	r3, [r7, #4]
 810673a:	2200      	movs	r2, #0
 810673c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8106740:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8106744:	4618      	mov	r0, r3
 8106746:	377c      	adds	r7, #124	@ 0x7c
 8106748:	46bd      	mov	sp, r7
 810674a:	bd90      	pop	{r4, r7, pc}
 810674c:	40022000 	.word	0x40022000
 8106750:	40022100 	.word	0x40022100
 8106754:	40022300 	.word	0x40022300
 8106758:	58026300 	.word	0x58026300
 810675c:	58026000 	.word	0x58026000

08106760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8106760:	b480      	push	{r7}
 8106762:	b085      	sub	sp, #20
 8106764:	af00      	add	r7, sp, #0
 8106766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8106768:	687b      	ldr	r3, [r7, #4]
 810676a:	f003 0307 	and.w	r3, r3, #7
 810676e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8106770:	4b0c      	ldr	r3, [pc, #48]	@ (81067a4 <__NVIC_SetPriorityGrouping+0x44>)
 8106772:	68db      	ldr	r3, [r3, #12]
 8106774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8106776:	68ba      	ldr	r2, [r7, #8]
 8106778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 810677c:	4013      	ands	r3, r2
 810677e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8106780:	68fb      	ldr	r3, [r7, #12]
 8106782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8106784:	68bb      	ldr	r3, [r7, #8]
 8106786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8106788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 810678c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8106792:	4a04      	ldr	r2, [pc, #16]	@ (81067a4 <__NVIC_SetPriorityGrouping+0x44>)
 8106794:	68bb      	ldr	r3, [r7, #8]
 8106796:	60d3      	str	r3, [r2, #12]
}
 8106798:	bf00      	nop
 810679a:	3714      	adds	r7, #20
 810679c:	46bd      	mov	sp, r7
 810679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067a2:	4770      	bx	lr
 81067a4:	e000ed00 	.word	0xe000ed00

081067a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81067a8:	b480      	push	{r7}
 81067aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81067ac:	4b04      	ldr	r3, [pc, #16]	@ (81067c0 <__NVIC_GetPriorityGrouping+0x18>)
 81067ae:	68db      	ldr	r3, [r3, #12]
 81067b0:	0a1b      	lsrs	r3, r3, #8
 81067b2:	f003 0307 	and.w	r3, r3, #7
}
 81067b6:	4618      	mov	r0, r3
 81067b8:	46bd      	mov	sp, r7
 81067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067be:	4770      	bx	lr
 81067c0:	e000ed00 	.word	0xe000ed00

081067c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81067c4:	b480      	push	{r7}
 81067c6:	b083      	sub	sp, #12
 81067c8:	af00      	add	r7, sp, #0
 81067ca:	4603      	mov	r3, r0
 81067cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81067ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81067d2:	2b00      	cmp	r3, #0
 81067d4:	db0b      	blt.n	81067ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81067d6:	88fb      	ldrh	r3, [r7, #6]
 81067d8:	f003 021f 	and.w	r2, r3, #31
 81067dc:	4907      	ldr	r1, [pc, #28]	@ (81067fc <__NVIC_EnableIRQ+0x38>)
 81067de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81067e2:	095b      	lsrs	r3, r3, #5
 81067e4:	2001      	movs	r0, #1
 81067e6:	fa00 f202 	lsl.w	r2, r0, r2
 81067ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81067ee:	bf00      	nop
 81067f0:	370c      	adds	r7, #12
 81067f2:	46bd      	mov	sp, r7
 81067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067f8:	4770      	bx	lr
 81067fa:	bf00      	nop
 81067fc:	e000e100 	.word	0xe000e100

08106800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8106800:	b480      	push	{r7}
 8106802:	b083      	sub	sp, #12
 8106804:	af00      	add	r7, sp, #0
 8106806:	4603      	mov	r3, r0
 8106808:	6039      	str	r1, [r7, #0]
 810680a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810680c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8106810:	2b00      	cmp	r3, #0
 8106812:	db0a      	blt.n	810682a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8106814:	683b      	ldr	r3, [r7, #0]
 8106816:	b2da      	uxtb	r2, r3
 8106818:	490c      	ldr	r1, [pc, #48]	@ (810684c <__NVIC_SetPriority+0x4c>)
 810681a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810681e:	0112      	lsls	r2, r2, #4
 8106820:	b2d2      	uxtb	r2, r2
 8106822:	440b      	add	r3, r1
 8106824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8106828:	e00a      	b.n	8106840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810682a:	683b      	ldr	r3, [r7, #0]
 810682c:	b2da      	uxtb	r2, r3
 810682e:	4908      	ldr	r1, [pc, #32]	@ (8106850 <__NVIC_SetPriority+0x50>)
 8106830:	88fb      	ldrh	r3, [r7, #6]
 8106832:	f003 030f 	and.w	r3, r3, #15
 8106836:	3b04      	subs	r3, #4
 8106838:	0112      	lsls	r2, r2, #4
 810683a:	b2d2      	uxtb	r2, r2
 810683c:	440b      	add	r3, r1
 810683e:	761a      	strb	r2, [r3, #24]
}
 8106840:	bf00      	nop
 8106842:	370c      	adds	r7, #12
 8106844:	46bd      	mov	sp, r7
 8106846:	f85d 7b04 	ldr.w	r7, [sp], #4
 810684a:	4770      	bx	lr
 810684c:	e000e100 	.word	0xe000e100
 8106850:	e000ed00 	.word	0xe000ed00

08106854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8106854:	b480      	push	{r7}
 8106856:	b089      	sub	sp, #36	@ 0x24
 8106858:	af00      	add	r7, sp, #0
 810685a:	60f8      	str	r0, [r7, #12]
 810685c:	60b9      	str	r1, [r7, #8]
 810685e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8106860:	68fb      	ldr	r3, [r7, #12]
 8106862:	f003 0307 	and.w	r3, r3, #7
 8106866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8106868:	69fb      	ldr	r3, [r7, #28]
 810686a:	f1c3 0307 	rsb	r3, r3, #7
 810686e:	2b04      	cmp	r3, #4
 8106870:	bf28      	it	cs
 8106872:	2304      	movcs	r3, #4
 8106874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8106876:	69fb      	ldr	r3, [r7, #28]
 8106878:	3304      	adds	r3, #4
 810687a:	2b06      	cmp	r3, #6
 810687c:	d902      	bls.n	8106884 <NVIC_EncodePriority+0x30>
 810687e:	69fb      	ldr	r3, [r7, #28]
 8106880:	3b03      	subs	r3, #3
 8106882:	e000      	b.n	8106886 <NVIC_EncodePriority+0x32>
 8106884:	2300      	movs	r3, #0
 8106886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8106888:	f04f 32ff 	mov.w	r2, #4294967295
 810688c:	69bb      	ldr	r3, [r7, #24]
 810688e:	fa02 f303 	lsl.w	r3, r2, r3
 8106892:	43da      	mvns	r2, r3
 8106894:	68bb      	ldr	r3, [r7, #8]
 8106896:	401a      	ands	r2, r3
 8106898:	697b      	ldr	r3, [r7, #20]
 810689a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810689c:	f04f 31ff 	mov.w	r1, #4294967295
 81068a0:	697b      	ldr	r3, [r7, #20]
 81068a2:	fa01 f303 	lsl.w	r3, r1, r3
 81068a6:	43d9      	mvns	r1, r3
 81068a8:	687b      	ldr	r3, [r7, #4]
 81068aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81068ac:	4313      	orrs	r3, r2
         );
}
 81068ae:	4618      	mov	r0, r3
 81068b0:	3724      	adds	r7, #36	@ 0x24
 81068b2:	46bd      	mov	sp, r7
 81068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068b8:	4770      	bx	lr
	...

081068bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81068bc:	b580      	push	{r7, lr}
 81068be:	b082      	sub	sp, #8
 81068c0:	af00      	add	r7, sp, #0
 81068c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81068c4:	687b      	ldr	r3, [r7, #4]
 81068c6:	3b01      	subs	r3, #1
 81068c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81068cc:	d301      	bcc.n	81068d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81068ce:	2301      	movs	r3, #1
 81068d0:	e00f      	b.n	81068f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81068d2:	4a0a      	ldr	r2, [pc, #40]	@ (81068fc <SysTick_Config+0x40>)
 81068d4:	687b      	ldr	r3, [r7, #4]
 81068d6:	3b01      	subs	r3, #1
 81068d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81068da:	210f      	movs	r1, #15
 81068dc:	f04f 30ff 	mov.w	r0, #4294967295
 81068e0:	f7ff ff8e 	bl	8106800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81068e4:	4b05      	ldr	r3, [pc, #20]	@ (81068fc <SysTick_Config+0x40>)
 81068e6:	2200      	movs	r2, #0
 81068e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81068ea:	4b04      	ldr	r3, [pc, #16]	@ (81068fc <SysTick_Config+0x40>)
 81068ec:	2207      	movs	r2, #7
 81068ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81068f0:	2300      	movs	r3, #0
}
 81068f2:	4618      	mov	r0, r3
 81068f4:	3708      	adds	r7, #8
 81068f6:	46bd      	mov	sp, r7
 81068f8:	bd80      	pop	{r7, pc}
 81068fa:	bf00      	nop
 81068fc:	e000e010 	.word	0xe000e010

08106900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8106900:	b580      	push	{r7, lr}
 8106902:	b082      	sub	sp, #8
 8106904:	af00      	add	r7, sp, #0
 8106906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8106908:	6878      	ldr	r0, [r7, #4]
 810690a:	f7ff ff29 	bl	8106760 <__NVIC_SetPriorityGrouping>
}
 810690e:	bf00      	nop
 8106910:	3708      	adds	r7, #8
 8106912:	46bd      	mov	sp, r7
 8106914:	bd80      	pop	{r7, pc}

08106916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8106916:	b580      	push	{r7, lr}
 8106918:	b086      	sub	sp, #24
 810691a:	af00      	add	r7, sp, #0
 810691c:	4603      	mov	r3, r0
 810691e:	60b9      	str	r1, [r7, #8]
 8106920:	607a      	str	r2, [r7, #4]
 8106922:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8106924:	f7ff ff40 	bl	81067a8 <__NVIC_GetPriorityGrouping>
 8106928:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810692a:	687a      	ldr	r2, [r7, #4]
 810692c:	68b9      	ldr	r1, [r7, #8]
 810692e:	6978      	ldr	r0, [r7, #20]
 8106930:	f7ff ff90 	bl	8106854 <NVIC_EncodePriority>
 8106934:	4602      	mov	r2, r0
 8106936:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810693a:	4611      	mov	r1, r2
 810693c:	4618      	mov	r0, r3
 810693e:	f7ff ff5f 	bl	8106800 <__NVIC_SetPriority>
}
 8106942:	bf00      	nop
 8106944:	3718      	adds	r7, #24
 8106946:	46bd      	mov	sp, r7
 8106948:	bd80      	pop	{r7, pc}

0810694a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810694a:	b580      	push	{r7, lr}
 810694c:	b082      	sub	sp, #8
 810694e:	af00      	add	r7, sp, #0
 8106950:	4603      	mov	r3, r0
 8106952:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8106954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8106958:	4618      	mov	r0, r3
 810695a:	f7ff ff33 	bl	81067c4 <__NVIC_EnableIRQ>
}
 810695e:	bf00      	nop
 8106960:	3708      	adds	r7, #8
 8106962:	46bd      	mov	sp, r7
 8106964:	bd80      	pop	{r7, pc}

08106966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8106966:	b580      	push	{r7, lr}
 8106968:	b082      	sub	sp, #8
 810696a:	af00      	add	r7, sp, #0
 810696c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810696e:	6878      	ldr	r0, [r7, #4]
 8106970:	f7ff ffa4 	bl	81068bc <SysTick_Config>
 8106974:	4603      	mov	r3, r0
}
 8106976:	4618      	mov	r0, r3
 8106978:	3708      	adds	r7, #8
 810697a:	46bd      	mov	sp, r7
 810697c:	bd80      	pop	{r7, pc}
	...

08106980 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8106980:	b480      	push	{r7}
 8106982:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8106984:	4b07      	ldr	r3, [pc, #28]	@ (81069a4 <HAL_GetCurrentCPUID+0x24>)
 8106986:	681b      	ldr	r3, [r3, #0]
 8106988:	091b      	lsrs	r3, r3, #4
 810698a:	f003 030f 	and.w	r3, r3, #15
 810698e:	2b07      	cmp	r3, #7
 8106990:	d101      	bne.n	8106996 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8106992:	2303      	movs	r3, #3
 8106994:	e000      	b.n	8106998 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8106996:	2301      	movs	r3, #1
  }
}
 8106998:	4618      	mov	r0, r3
 810699a:	46bd      	mov	sp, r7
 810699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81069a0:	4770      	bx	lr
 81069a2:	bf00      	nop
 81069a4:	e000ed00 	.word	0xe000ed00

081069a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 81069a8:	b580      	push	{r7, lr}
 81069aa:	b086      	sub	sp, #24
 81069ac:	af00      	add	r7, sp, #0
 81069ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 81069b0:	f7fe f9b2 	bl	8104d18 <HAL_GetTick>
 81069b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81069b6:	687b      	ldr	r3, [r7, #4]
 81069b8:	2b00      	cmp	r3, #0
 81069ba:	d101      	bne.n	81069c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 81069bc:	2301      	movs	r3, #1
 81069be:	e314      	b.n	8106fea <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81069c0:	687b      	ldr	r3, [r7, #4]
 81069c2:	681b      	ldr	r3, [r3, #0]
 81069c4:	4a66      	ldr	r2, [pc, #408]	@ (8106b60 <HAL_DMA_Init+0x1b8>)
 81069c6:	4293      	cmp	r3, r2
 81069c8:	d04a      	beq.n	8106a60 <HAL_DMA_Init+0xb8>
 81069ca:	687b      	ldr	r3, [r7, #4]
 81069cc:	681b      	ldr	r3, [r3, #0]
 81069ce:	4a65      	ldr	r2, [pc, #404]	@ (8106b64 <HAL_DMA_Init+0x1bc>)
 81069d0:	4293      	cmp	r3, r2
 81069d2:	d045      	beq.n	8106a60 <HAL_DMA_Init+0xb8>
 81069d4:	687b      	ldr	r3, [r7, #4]
 81069d6:	681b      	ldr	r3, [r3, #0]
 81069d8:	4a63      	ldr	r2, [pc, #396]	@ (8106b68 <HAL_DMA_Init+0x1c0>)
 81069da:	4293      	cmp	r3, r2
 81069dc:	d040      	beq.n	8106a60 <HAL_DMA_Init+0xb8>
 81069de:	687b      	ldr	r3, [r7, #4]
 81069e0:	681b      	ldr	r3, [r3, #0]
 81069e2:	4a62      	ldr	r2, [pc, #392]	@ (8106b6c <HAL_DMA_Init+0x1c4>)
 81069e4:	4293      	cmp	r3, r2
 81069e6:	d03b      	beq.n	8106a60 <HAL_DMA_Init+0xb8>
 81069e8:	687b      	ldr	r3, [r7, #4]
 81069ea:	681b      	ldr	r3, [r3, #0]
 81069ec:	4a60      	ldr	r2, [pc, #384]	@ (8106b70 <HAL_DMA_Init+0x1c8>)
 81069ee:	4293      	cmp	r3, r2
 81069f0:	d036      	beq.n	8106a60 <HAL_DMA_Init+0xb8>
 81069f2:	687b      	ldr	r3, [r7, #4]
 81069f4:	681b      	ldr	r3, [r3, #0]
 81069f6:	4a5f      	ldr	r2, [pc, #380]	@ (8106b74 <HAL_DMA_Init+0x1cc>)
 81069f8:	4293      	cmp	r3, r2
 81069fa:	d031      	beq.n	8106a60 <HAL_DMA_Init+0xb8>
 81069fc:	687b      	ldr	r3, [r7, #4]
 81069fe:	681b      	ldr	r3, [r3, #0]
 8106a00:	4a5d      	ldr	r2, [pc, #372]	@ (8106b78 <HAL_DMA_Init+0x1d0>)
 8106a02:	4293      	cmp	r3, r2
 8106a04:	d02c      	beq.n	8106a60 <HAL_DMA_Init+0xb8>
 8106a06:	687b      	ldr	r3, [r7, #4]
 8106a08:	681b      	ldr	r3, [r3, #0]
 8106a0a:	4a5c      	ldr	r2, [pc, #368]	@ (8106b7c <HAL_DMA_Init+0x1d4>)
 8106a0c:	4293      	cmp	r3, r2
 8106a0e:	d027      	beq.n	8106a60 <HAL_DMA_Init+0xb8>
 8106a10:	687b      	ldr	r3, [r7, #4]
 8106a12:	681b      	ldr	r3, [r3, #0]
 8106a14:	4a5a      	ldr	r2, [pc, #360]	@ (8106b80 <HAL_DMA_Init+0x1d8>)
 8106a16:	4293      	cmp	r3, r2
 8106a18:	d022      	beq.n	8106a60 <HAL_DMA_Init+0xb8>
 8106a1a:	687b      	ldr	r3, [r7, #4]
 8106a1c:	681b      	ldr	r3, [r3, #0]
 8106a1e:	4a59      	ldr	r2, [pc, #356]	@ (8106b84 <HAL_DMA_Init+0x1dc>)
 8106a20:	4293      	cmp	r3, r2
 8106a22:	d01d      	beq.n	8106a60 <HAL_DMA_Init+0xb8>
 8106a24:	687b      	ldr	r3, [r7, #4]
 8106a26:	681b      	ldr	r3, [r3, #0]
 8106a28:	4a57      	ldr	r2, [pc, #348]	@ (8106b88 <HAL_DMA_Init+0x1e0>)
 8106a2a:	4293      	cmp	r3, r2
 8106a2c:	d018      	beq.n	8106a60 <HAL_DMA_Init+0xb8>
 8106a2e:	687b      	ldr	r3, [r7, #4]
 8106a30:	681b      	ldr	r3, [r3, #0]
 8106a32:	4a56      	ldr	r2, [pc, #344]	@ (8106b8c <HAL_DMA_Init+0x1e4>)
 8106a34:	4293      	cmp	r3, r2
 8106a36:	d013      	beq.n	8106a60 <HAL_DMA_Init+0xb8>
 8106a38:	687b      	ldr	r3, [r7, #4]
 8106a3a:	681b      	ldr	r3, [r3, #0]
 8106a3c:	4a54      	ldr	r2, [pc, #336]	@ (8106b90 <HAL_DMA_Init+0x1e8>)
 8106a3e:	4293      	cmp	r3, r2
 8106a40:	d00e      	beq.n	8106a60 <HAL_DMA_Init+0xb8>
 8106a42:	687b      	ldr	r3, [r7, #4]
 8106a44:	681b      	ldr	r3, [r3, #0]
 8106a46:	4a53      	ldr	r2, [pc, #332]	@ (8106b94 <HAL_DMA_Init+0x1ec>)
 8106a48:	4293      	cmp	r3, r2
 8106a4a:	d009      	beq.n	8106a60 <HAL_DMA_Init+0xb8>
 8106a4c:	687b      	ldr	r3, [r7, #4]
 8106a4e:	681b      	ldr	r3, [r3, #0]
 8106a50:	4a51      	ldr	r2, [pc, #324]	@ (8106b98 <HAL_DMA_Init+0x1f0>)
 8106a52:	4293      	cmp	r3, r2
 8106a54:	d004      	beq.n	8106a60 <HAL_DMA_Init+0xb8>
 8106a56:	687b      	ldr	r3, [r7, #4]
 8106a58:	681b      	ldr	r3, [r3, #0]
 8106a5a:	4a50      	ldr	r2, [pc, #320]	@ (8106b9c <HAL_DMA_Init+0x1f4>)
 8106a5c:	4293      	cmp	r3, r2
 8106a5e:	d101      	bne.n	8106a64 <HAL_DMA_Init+0xbc>
 8106a60:	2301      	movs	r3, #1
 8106a62:	e000      	b.n	8106a66 <HAL_DMA_Init+0xbe>
 8106a64:	2300      	movs	r3, #0
 8106a66:	2b00      	cmp	r3, #0
 8106a68:	f000 813b 	beq.w	8106ce2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8106a6c:	687b      	ldr	r3, [r7, #4]
 8106a6e:	2202      	movs	r2, #2
 8106a70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8106a74:	687b      	ldr	r3, [r7, #4]
 8106a76:	2200      	movs	r2, #0
 8106a78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8106a7c:	687b      	ldr	r3, [r7, #4]
 8106a7e:	681b      	ldr	r3, [r3, #0]
 8106a80:	4a37      	ldr	r2, [pc, #220]	@ (8106b60 <HAL_DMA_Init+0x1b8>)
 8106a82:	4293      	cmp	r3, r2
 8106a84:	d04a      	beq.n	8106b1c <HAL_DMA_Init+0x174>
 8106a86:	687b      	ldr	r3, [r7, #4]
 8106a88:	681b      	ldr	r3, [r3, #0]
 8106a8a:	4a36      	ldr	r2, [pc, #216]	@ (8106b64 <HAL_DMA_Init+0x1bc>)
 8106a8c:	4293      	cmp	r3, r2
 8106a8e:	d045      	beq.n	8106b1c <HAL_DMA_Init+0x174>
 8106a90:	687b      	ldr	r3, [r7, #4]
 8106a92:	681b      	ldr	r3, [r3, #0]
 8106a94:	4a34      	ldr	r2, [pc, #208]	@ (8106b68 <HAL_DMA_Init+0x1c0>)
 8106a96:	4293      	cmp	r3, r2
 8106a98:	d040      	beq.n	8106b1c <HAL_DMA_Init+0x174>
 8106a9a:	687b      	ldr	r3, [r7, #4]
 8106a9c:	681b      	ldr	r3, [r3, #0]
 8106a9e:	4a33      	ldr	r2, [pc, #204]	@ (8106b6c <HAL_DMA_Init+0x1c4>)
 8106aa0:	4293      	cmp	r3, r2
 8106aa2:	d03b      	beq.n	8106b1c <HAL_DMA_Init+0x174>
 8106aa4:	687b      	ldr	r3, [r7, #4]
 8106aa6:	681b      	ldr	r3, [r3, #0]
 8106aa8:	4a31      	ldr	r2, [pc, #196]	@ (8106b70 <HAL_DMA_Init+0x1c8>)
 8106aaa:	4293      	cmp	r3, r2
 8106aac:	d036      	beq.n	8106b1c <HAL_DMA_Init+0x174>
 8106aae:	687b      	ldr	r3, [r7, #4]
 8106ab0:	681b      	ldr	r3, [r3, #0]
 8106ab2:	4a30      	ldr	r2, [pc, #192]	@ (8106b74 <HAL_DMA_Init+0x1cc>)
 8106ab4:	4293      	cmp	r3, r2
 8106ab6:	d031      	beq.n	8106b1c <HAL_DMA_Init+0x174>
 8106ab8:	687b      	ldr	r3, [r7, #4]
 8106aba:	681b      	ldr	r3, [r3, #0]
 8106abc:	4a2e      	ldr	r2, [pc, #184]	@ (8106b78 <HAL_DMA_Init+0x1d0>)
 8106abe:	4293      	cmp	r3, r2
 8106ac0:	d02c      	beq.n	8106b1c <HAL_DMA_Init+0x174>
 8106ac2:	687b      	ldr	r3, [r7, #4]
 8106ac4:	681b      	ldr	r3, [r3, #0]
 8106ac6:	4a2d      	ldr	r2, [pc, #180]	@ (8106b7c <HAL_DMA_Init+0x1d4>)
 8106ac8:	4293      	cmp	r3, r2
 8106aca:	d027      	beq.n	8106b1c <HAL_DMA_Init+0x174>
 8106acc:	687b      	ldr	r3, [r7, #4]
 8106ace:	681b      	ldr	r3, [r3, #0]
 8106ad0:	4a2b      	ldr	r2, [pc, #172]	@ (8106b80 <HAL_DMA_Init+0x1d8>)
 8106ad2:	4293      	cmp	r3, r2
 8106ad4:	d022      	beq.n	8106b1c <HAL_DMA_Init+0x174>
 8106ad6:	687b      	ldr	r3, [r7, #4]
 8106ad8:	681b      	ldr	r3, [r3, #0]
 8106ada:	4a2a      	ldr	r2, [pc, #168]	@ (8106b84 <HAL_DMA_Init+0x1dc>)
 8106adc:	4293      	cmp	r3, r2
 8106ade:	d01d      	beq.n	8106b1c <HAL_DMA_Init+0x174>
 8106ae0:	687b      	ldr	r3, [r7, #4]
 8106ae2:	681b      	ldr	r3, [r3, #0]
 8106ae4:	4a28      	ldr	r2, [pc, #160]	@ (8106b88 <HAL_DMA_Init+0x1e0>)
 8106ae6:	4293      	cmp	r3, r2
 8106ae8:	d018      	beq.n	8106b1c <HAL_DMA_Init+0x174>
 8106aea:	687b      	ldr	r3, [r7, #4]
 8106aec:	681b      	ldr	r3, [r3, #0]
 8106aee:	4a27      	ldr	r2, [pc, #156]	@ (8106b8c <HAL_DMA_Init+0x1e4>)
 8106af0:	4293      	cmp	r3, r2
 8106af2:	d013      	beq.n	8106b1c <HAL_DMA_Init+0x174>
 8106af4:	687b      	ldr	r3, [r7, #4]
 8106af6:	681b      	ldr	r3, [r3, #0]
 8106af8:	4a25      	ldr	r2, [pc, #148]	@ (8106b90 <HAL_DMA_Init+0x1e8>)
 8106afa:	4293      	cmp	r3, r2
 8106afc:	d00e      	beq.n	8106b1c <HAL_DMA_Init+0x174>
 8106afe:	687b      	ldr	r3, [r7, #4]
 8106b00:	681b      	ldr	r3, [r3, #0]
 8106b02:	4a24      	ldr	r2, [pc, #144]	@ (8106b94 <HAL_DMA_Init+0x1ec>)
 8106b04:	4293      	cmp	r3, r2
 8106b06:	d009      	beq.n	8106b1c <HAL_DMA_Init+0x174>
 8106b08:	687b      	ldr	r3, [r7, #4]
 8106b0a:	681b      	ldr	r3, [r3, #0]
 8106b0c:	4a22      	ldr	r2, [pc, #136]	@ (8106b98 <HAL_DMA_Init+0x1f0>)
 8106b0e:	4293      	cmp	r3, r2
 8106b10:	d004      	beq.n	8106b1c <HAL_DMA_Init+0x174>
 8106b12:	687b      	ldr	r3, [r7, #4]
 8106b14:	681b      	ldr	r3, [r3, #0]
 8106b16:	4a21      	ldr	r2, [pc, #132]	@ (8106b9c <HAL_DMA_Init+0x1f4>)
 8106b18:	4293      	cmp	r3, r2
 8106b1a:	d108      	bne.n	8106b2e <HAL_DMA_Init+0x186>
 8106b1c:	687b      	ldr	r3, [r7, #4]
 8106b1e:	681b      	ldr	r3, [r3, #0]
 8106b20:	681a      	ldr	r2, [r3, #0]
 8106b22:	687b      	ldr	r3, [r7, #4]
 8106b24:	681b      	ldr	r3, [r3, #0]
 8106b26:	f022 0201 	bic.w	r2, r2, #1
 8106b2a:	601a      	str	r2, [r3, #0]
 8106b2c:	e007      	b.n	8106b3e <HAL_DMA_Init+0x196>
 8106b2e:	687b      	ldr	r3, [r7, #4]
 8106b30:	681b      	ldr	r3, [r3, #0]
 8106b32:	681a      	ldr	r2, [r3, #0]
 8106b34:	687b      	ldr	r3, [r7, #4]
 8106b36:	681b      	ldr	r3, [r3, #0]
 8106b38:	f022 0201 	bic.w	r2, r2, #1
 8106b3c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8106b3e:	e02f      	b.n	8106ba0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8106b40:	f7fe f8ea 	bl	8104d18 <HAL_GetTick>
 8106b44:	4602      	mov	r2, r0
 8106b46:	693b      	ldr	r3, [r7, #16]
 8106b48:	1ad3      	subs	r3, r2, r3
 8106b4a:	2b05      	cmp	r3, #5
 8106b4c:	d928      	bls.n	8106ba0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8106b4e:	687b      	ldr	r3, [r7, #4]
 8106b50:	2220      	movs	r2, #32
 8106b52:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8106b54:	687b      	ldr	r3, [r7, #4]
 8106b56:	2203      	movs	r2, #3
 8106b58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8106b5c:	2301      	movs	r3, #1
 8106b5e:	e244      	b.n	8106fea <HAL_DMA_Init+0x642>
 8106b60:	40020010 	.word	0x40020010
 8106b64:	40020028 	.word	0x40020028
 8106b68:	40020040 	.word	0x40020040
 8106b6c:	40020058 	.word	0x40020058
 8106b70:	40020070 	.word	0x40020070
 8106b74:	40020088 	.word	0x40020088
 8106b78:	400200a0 	.word	0x400200a0
 8106b7c:	400200b8 	.word	0x400200b8
 8106b80:	40020410 	.word	0x40020410
 8106b84:	40020428 	.word	0x40020428
 8106b88:	40020440 	.word	0x40020440
 8106b8c:	40020458 	.word	0x40020458
 8106b90:	40020470 	.word	0x40020470
 8106b94:	40020488 	.word	0x40020488
 8106b98:	400204a0 	.word	0x400204a0
 8106b9c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8106ba0:	687b      	ldr	r3, [r7, #4]
 8106ba2:	681b      	ldr	r3, [r3, #0]
 8106ba4:	681b      	ldr	r3, [r3, #0]
 8106ba6:	f003 0301 	and.w	r3, r3, #1
 8106baa:	2b00      	cmp	r3, #0
 8106bac:	d1c8      	bne.n	8106b40 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8106bae:	687b      	ldr	r3, [r7, #4]
 8106bb0:	681b      	ldr	r3, [r3, #0]
 8106bb2:	681b      	ldr	r3, [r3, #0]
 8106bb4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8106bb6:	697a      	ldr	r2, [r7, #20]
 8106bb8:	4b84      	ldr	r3, [pc, #528]	@ (8106dcc <HAL_DMA_Init+0x424>)
 8106bba:	4013      	ands	r3, r2
 8106bbc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8106bbe:	687b      	ldr	r3, [r7, #4]
 8106bc0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8106bc2:	687b      	ldr	r3, [r7, #4]
 8106bc4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8106bc6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8106bc8:	687b      	ldr	r3, [r7, #4]
 8106bca:	691b      	ldr	r3, [r3, #16]
 8106bcc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8106bce:	687b      	ldr	r3, [r7, #4]
 8106bd0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8106bd2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8106bd4:	687b      	ldr	r3, [r7, #4]
 8106bd6:	699b      	ldr	r3, [r3, #24]
 8106bd8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8106bda:	687b      	ldr	r3, [r7, #4]
 8106bdc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8106bde:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8106be0:	687b      	ldr	r3, [r7, #4]
 8106be2:	6a1b      	ldr	r3, [r3, #32]
 8106be4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8106be6:	697a      	ldr	r2, [r7, #20]
 8106be8:	4313      	orrs	r3, r2
 8106bea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8106bec:	687b      	ldr	r3, [r7, #4]
 8106bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106bf0:	2b04      	cmp	r3, #4
 8106bf2:	d107      	bne.n	8106c04 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8106bf4:	687b      	ldr	r3, [r7, #4]
 8106bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106bf8:	687b      	ldr	r3, [r7, #4]
 8106bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106bfc:	4313      	orrs	r3, r2
 8106bfe:	697a      	ldr	r2, [r7, #20]
 8106c00:	4313      	orrs	r3, r2
 8106c02:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8106c04:	4b72      	ldr	r3, [pc, #456]	@ (8106dd0 <HAL_DMA_Init+0x428>)
 8106c06:	681b      	ldr	r3, [r3, #0]
 8106c08:	0c1b      	lsrs	r3, r3, #16
 8106c0a:	041b      	lsls	r3, r3, #16
 8106c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106c10:	d328      	bcc.n	8106c64 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8106c12:	687b      	ldr	r3, [r7, #4]
 8106c14:	685b      	ldr	r3, [r3, #4]
 8106c16:	2b28      	cmp	r3, #40	@ 0x28
 8106c18:	d903      	bls.n	8106c22 <HAL_DMA_Init+0x27a>
 8106c1a:	687b      	ldr	r3, [r7, #4]
 8106c1c:	685b      	ldr	r3, [r3, #4]
 8106c1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8106c20:	d917      	bls.n	8106c52 <HAL_DMA_Init+0x2aa>
 8106c22:	687b      	ldr	r3, [r7, #4]
 8106c24:	685b      	ldr	r3, [r3, #4]
 8106c26:	2b3e      	cmp	r3, #62	@ 0x3e
 8106c28:	d903      	bls.n	8106c32 <HAL_DMA_Init+0x28a>
 8106c2a:	687b      	ldr	r3, [r7, #4]
 8106c2c:	685b      	ldr	r3, [r3, #4]
 8106c2e:	2b42      	cmp	r3, #66	@ 0x42
 8106c30:	d90f      	bls.n	8106c52 <HAL_DMA_Init+0x2aa>
 8106c32:	687b      	ldr	r3, [r7, #4]
 8106c34:	685b      	ldr	r3, [r3, #4]
 8106c36:	2b46      	cmp	r3, #70	@ 0x46
 8106c38:	d903      	bls.n	8106c42 <HAL_DMA_Init+0x29a>
 8106c3a:	687b      	ldr	r3, [r7, #4]
 8106c3c:	685b      	ldr	r3, [r3, #4]
 8106c3e:	2b48      	cmp	r3, #72	@ 0x48
 8106c40:	d907      	bls.n	8106c52 <HAL_DMA_Init+0x2aa>
 8106c42:	687b      	ldr	r3, [r7, #4]
 8106c44:	685b      	ldr	r3, [r3, #4]
 8106c46:	2b4e      	cmp	r3, #78	@ 0x4e
 8106c48:	d905      	bls.n	8106c56 <HAL_DMA_Init+0x2ae>
 8106c4a:	687b      	ldr	r3, [r7, #4]
 8106c4c:	685b      	ldr	r3, [r3, #4]
 8106c4e:	2b52      	cmp	r3, #82	@ 0x52
 8106c50:	d801      	bhi.n	8106c56 <HAL_DMA_Init+0x2ae>
 8106c52:	2301      	movs	r3, #1
 8106c54:	e000      	b.n	8106c58 <HAL_DMA_Init+0x2b0>
 8106c56:	2300      	movs	r3, #0
 8106c58:	2b00      	cmp	r3, #0
 8106c5a:	d003      	beq.n	8106c64 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8106c5c:	697b      	ldr	r3, [r7, #20]
 8106c5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8106c62:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8106c64:	687b      	ldr	r3, [r7, #4]
 8106c66:	681b      	ldr	r3, [r3, #0]
 8106c68:	697a      	ldr	r2, [r7, #20]
 8106c6a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8106c6c:	687b      	ldr	r3, [r7, #4]
 8106c6e:	681b      	ldr	r3, [r3, #0]
 8106c70:	695b      	ldr	r3, [r3, #20]
 8106c72:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8106c74:	697b      	ldr	r3, [r7, #20]
 8106c76:	f023 0307 	bic.w	r3, r3, #7
 8106c7a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8106c7c:	687b      	ldr	r3, [r7, #4]
 8106c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106c80:	697a      	ldr	r2, [r7, #20]
 8106c82:	4313      	orrs	r3, r2
 8106c84:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8106c86:	687b      	ldr	r3, [r7, #4]
 8106c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106c8a:	2b04      	cmp	r3, #4
 8106c8c:	d117      	bne.n	8106cbe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8106c8e:	687b      	ldr	r3, [r7, #4]
 8106c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106c92:	697a      	ldr	r2, [r7, #20]
 8106c94:	4313      	orrs	r3, r2
 8106c96:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8106c98:	687b      	ldr	r3, [r7, #4]
 8106c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106c9c:	2b00      	cmp	r3, #0
 8106c9e:	d00e      	beq.n	8106cbe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8106ca0:	6878      	ldr	r0, [r7, #4]
 8106ca2:	f001 ff1b 	bl	8108adc <DMA_CheckFifoParam>
 8106ca6:	4603      	mov	r3, r0
 8106ca8:	2b00      	cmp	r3, #0
 8106caa:	d008      	beq.n	8106cbe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8106cac:	687b      	ldr	r3, [r7, #4]
 8106cae:	2240      	movs	r2, #64	@ 0x40
 8106cb0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8106cb2:	687b      	ldr	r3, [r7, #4]
 8106cb4:	2201      	movs	r2, #1
 8106cb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8106cba:	2301      	movs	r3, #1
 8106cbc:	e195      	b.n	8106fea <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8106cbe:	687b      	ldr	r3, [r7, #4]
 8106cc0:	681b      	ldr	r3, [r3, #0]
 8106cc2:	697a      	ldr	r2, [r7, #20]
 8106cc4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8106cc6:	6878      	ldr	r0, [r7, #4]
 8106cc8:	f001 fe56 	bl	8108978 <DMA_CalcBaseAndBitshift>
 8106ccc:	4603      	mov	r3, r0
 8106cce:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8106cd0:	687b      	ldr	r3, [r7, #4]
 8106cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106cd4:	f003 031f 	and.w	r3, r3, #31
 8106cd8:	223f      	movs	r2, #63	@ 0x3f
 8106cda:	409a      	lsls	r2, r3
 8106cdc:	68bb      	ldr	r3, [r7, #8]
 8106cde:	609a      	str	r2, [r3, #8]
 8106ce0:	e0cb      	b.n	8106e7a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8106ce2:	687b      	ldr	r3, [r7, #4]
 8106ce4:	681b      	ldr	r3, [r3, #0]
 8106ce6:	4a3b      	ldr	r2, [pc, #236]	@ (8106dd4 <HAL_DMA_Init+0x42c>)
 8106ce8:	4293      	cmp	r3, r2
 8106cea:	d022      	beq.n	8106d32 <HAL_DMA_Init+0x38a>
 8106cec:	687b      	ldr	r3, [r7, #4]
 8106cee:	681b      	ldr	r3, [r3, #0]
 8106cf0:	4a39      	ldr	r2, [pc, #228]	@ (8106dd8 <HAL_DMA_Init+0x430>)
 8106cf2:	4293      	cmp	r3, r2
 8106cf4:	d01d      	beq.n	8106d32 <HAL_DMA_Init+0x38a>
 8106cf6:	687b      	ldr	r3, [r7, #4]
 8106cf8:	681b      	ldr	r3, [r3, #0]
 8106cfa:	4a38      	ldr	r2, [pc, #224]	@ (8106ddc <HAL_DMA_Init+0x434>)
 8106cfc:	4293      	cmp	r3, r2
 8106cfe:	d018      	beq.n	8106d32 <HAL_DMA_Init+0x38a>
 8106d00:	687b      	ldr	r3, [r7, #4]
 8106d02:	681b      	ldr	r3, [r3, #0]
 8106d04:	4a36      	ldr	r2, [pc, #216]	@ (8106de0 <HAL_DMA_Init+0x438>)
 8106d06:	4293      	cmp	r3, r2
 8106d08:	d013      	beq.n	8106d32 <HAL_DMA_Init+0x38a>
 8106d0a:	687b      	ldr	r3, [r7, #4]
 8106d0c:	681b      	ldr	r3, [r3, #0]
 8106d0e:	4a35      	ldr	r2, [pc, #212]	@ (8106de4 <HAL_DMA_Init+0x43c>)
 8106d10:	4293      	cmp	r3, r2
 8106d12:	d00e      	beq.n	8106d32 <HAL_DMA_Init+0x38a>
 8106d14:	687b      	ldr	r3, [r7, #4]
 8106d16:	681b      	ldr	r3, [r3, #0]
 8106d18:	4a33      	ldr	r2, [pc, #204]	@ (8106de8 <HAL_DMA_Init+0x440>)
 8106d1a:	4293      	cmp	r3, r2
 8106d1c:	d009      	beq.n	8106d32 <HAL_DMA_Init+0x38a>
 8106d1e:	687b      	ldr	r3, [r7, #4]
 8106d20:	681b      	ldr	r3, [r3, #0]
 8106d22:	4a32      	ldr	r2, [pc, #200]	@ (8106dec <HAL_DMA_Init+0x444>)
 8106d24:	4293      	cmp	r3, r2
 8106d26:	d004      	beq.n	8106d32 <HAL_DMA_Init+0x38a>
 8106d28:	687b      	ldr	r3, [r7, #4]
 8106d2a:	681b      	ldr	r3, [r3, #0]
 8106d2c:	4a30      	ldr	r2, [pc, #192]	@ (8106df0 <HAL_DMA_Init+0x448>)
 8106d2e:	4293      	cmp	r3, r2
 8106d30:	d101      	bne.n	8106d36 <HAL_DMA_Init+0x38e>
 8106d32:	2301      	movs	r3, #1
 8106d34:	e000      	b.n	8106d38 <HAL_DMA_Init+0x390>
 8106d36:	2300      	movs	r3, #0
 8106d38:	2b00      	cmp	r3, #0
 8106d3a:	f000 8095 	beq.w	8106e68 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106d3e:	687b      	ldr	r3, [r7, #4]
 8106d40:	681b      	ldr	r3, [r3, #0]
 8106d42:	4a24      	ldr	r2, [pc, #144]	@ (8106dd4 <HAL_DMA_Init+0x42c>)
 8106d44:	4293      	cmp	r3, r2
 8106d46:	d021      	beq.n	8106d8c <HAL_DMA_Init+0x3e4>
 8106d48:	687b      	ldr	r3, [r7, #4]
 8106d4a:	681b      	ldr	r3, [r3, #0]
 8106d4c:	4a22      	ldr	r2, [pc, #136]	@ (8106dd8 <HAL_DMA_Init+0x430>)
 8106d4e:	4293      	cmp	r3, r2
 8106d50:	d01c      	beq.n	8106d8c <HAL_DMA_Init+0x3e4>
 8106d52:	687b      	ldr	r3, [r7, #4]
 8106d54:	681b      	ldr	r3, [r3, #0]
 8106d56:	4a21      	ldr	r2, [pc, #132]	@ (8106ddc <HAL_DMA_Init+0x434>)
 8106d58:	4293      	cmp	r3, r2
 8106d5a:	d017      	beq.n	8106d8c <HAL_DMA_Init+0x3e4>
 8106d5c:	687b      	ldr	r3, [r7, #4]
 8106d5e:	681b      	ldr	r3, [r3, #0]
 8106d60:	4a1f      	ldr	r2, [pc, #124]	@ (8106de0 <HAL_DMA_Init+0x438>)
 8106d62:	4293      	cmp	r3, r2
 8106d64:	d012      	beq.n	8106d8c <HAL_DMA_Init+0x3e4>
 8106d66:	687b      	ldr	r3, [r7, #4]
 8106d68:	681b      	ldr	r3, [r3, #0]
 8106d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8106de4 <HAL_DMA_Init+0x43c>)
 8106d6c:	4293      	cmp	r3, r2
 8106d6e:	d00d      	beq.n	8106d8c <HAL_DMA_Init+0x3e4>
 8106d70:	687b      	ldr	r3, [r7, #4]
 8106d72:	681b      	ldr	r3, [r3, #0]
 8106d74:	4a1c      	ldr	r2, [pc, #112]	@ (8106de8 <HAL_DMA_Init+0x440>)
 8106d76:	4293      	cmp	r3, r2
 8106d78:	d008      	beq.n	8106d8c <HAL_DMA_Init+0x3e4>
 8106d7a:	687b      	ldr	r3, [r7, #4]
 8106d7c:	681b      	ldr	r3, [r3, #0]
 8106d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8106dec <HAL_DMA_Init+0x444>)
 8106d80:	4293      	cmp	r3, r2
 8106d82:	d003      	beq.n	8106d8c <HAL_DMA_Init+0x3e4>
 8106d84:	687b      	ldr	r3, [r7, #4]
 8106d86:	681b      	ldr	r3, [r3, #0]
 8106d88:	4a19      	ldr	r2, [pc, #100]	@ (8106df0 <HAL_DMA_Init+0x448>)
 8106d8a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8106d8c:	687b      	ldr	r3, [r7, #4]
 8106d8e:	2202      	movs	r2, #2
 8106d90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8106d94:	687b      	ldr	r3, [r7, #4]
 8106d96:	2200      	movs	r2, #0
 8106d98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8106d9c:	687b      	ldr	r3, [r7, #4]
 8106d9e:	681b      	ldr	r3, [r3, #0]
 8106da0:	681b      	ldr	r3, [r3, #0]
 8106da2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8106da4:	697b      	ldr	r3, [r7, #20]
 8106da6:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 8106daa:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 8106dae:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8106db0:	687b      	ldr	r3, [r7, #4]
 8106db2:	689b      	ldr	r3, [r3, #8]
 8106db4:	2b40      	cmp	r3, #64	@ 0x40
 8106db6:	d01d      	beq.n	8106df4 <HAL_DMA_Init+0x44c>
 8106db8:	687b      	ldr	r3, [r7, #4]
 8106dba:	689b      	ldr	r3, [r3, #8]
 8106dbc:	2b80      	cmp	r3, #128	@ 0x80
 8106dbe:	d102      	bne.n	8106dc6 <HAL_DMA_Init+0x41e>
 8106dc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8106dc4:	e017      	b.n	8106df6 <HAL_DMA_Init+0x44e>
 8106dc6:	2300      	movs	r3, #0
 8106dc8:	e015      	b.n	8106df6 <HAL_DMA_Init+0x44e>
 8106dca:	bf00      	nop
 8106dcc:	fe10803f 	.word	0xfe10803f
 8106dd0:	5c001000 	.word	0x5c001000
 8106dd4:	58025408 	.word	0x58025408
 8106dd8:	5802541c 	.word	0x5802541c
 8106ddc:	58025430 	.word	0x58025430
 8106de0:	58025444 	.word	0x58025444
 8106de4:	58025458 	.word	0x58025458
 8106de8:	5802546c 	.word	0x5802546c
 8106dec:	58025480 	.word	0x58025480
 8106df0:	58025494 	.word	0x58025494
 8106df4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8106df6:	687a      	ldr	r2, [r7, #4]
 8106df8:	68d2      	ldr	r2, [r2, #12]
 8106dfa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8106dfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8106dfe:	687b      	ldr	r3, [r7, #4]
 8106e00:	691b      	ldr	r3, [r3, #16]
 8106e02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8106e04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8106e06:	687b      	ldr	r3, [r7, #4]
 8106e08:	695b      	ldr	r3, [r3, #20]
 8106e0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8106e0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8106e0e:	687b      	ldr	r3, [r7, #4]
 8106e10:	699b      	ldr	r3, [r3, #24]
 8106e12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8106e14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8106e16:	687b      	ldr	r3, [r7, #4]
 8106e18:	69db      	ldr	r3, [r3, #28]
 8106e1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8106e1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8106e1e:	687b      	ldr	r3, [r7, #4]
 8106e20:	6a1b      	ldr	r3, [r3, #32]
 8106e22:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8106e24:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8106e26:	697a      	ldr	r2, [r7, #20]
 8106e28:	4313      	orrs	r3, r2
 8106e2a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8106e2c:	687b      	ldr	r3, [r7, #4]
 8106e2e:	681b      	ldr	r3, [r3, #0]
 8106e30:	697a      	ldr	r2, [r7, #20]
 8106e32:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8106e34:	687b      	ldr	r3, [r7, #4]
 8106e36:	681b      	ldr	r3, [r3, #0]
 8106e38:	461a      	mov	r2, r3
 8106e3a:	4b6e      	ldr	r3, [pc, #440]	@ (8106ff4 <HAL_DMA_Init+0x64c>)
 8106e3c:	4413      	add	r3, r2
 8106e3e:	4a6e      	ldr	r2, [pc, #440]	@ (8106ff8 <HAL_DMA_Init+0x650>)
 8106e40:	fba2 2303 	umull	r2, r3, r2, r3
 8106e44:	091b      	lsrs	r3, r3, #4
 8106e46:	009a      	lsls	r2, r3, #2
 8106e48:	687b      	ldr	r3, [r7, #4]
 8106e4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8106e4c:	6878      	ldr	r0, [r7, #4]
 8106e4e:	f001 fd93 	bl	8108978 <DMA_CalcBaseAndBitshift>
 8106e52:	4603      	mov	r3, r0
 8106e54:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8106e56:	687b      	ldr	r3, [r7, #4]
 8106e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106e5a:	f003 031f 	and.w	r3, r3, #31
 8106e5e:	2201      	movs	r2, #1
 8106e60:	409a      	lsls	r2, r3
 8106e62:	68fb      	ldr	r3, [r7, #12]
 8106e64:	605a      	str	r2, [r3, #4]
 8106e66:	e008      	b.n	8106e7a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8106e68:	687b      	ldr	r3, [r7, #4]
 8106e6a:	2240      	movs	r2, #64	@ 0x40
 8106e6c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8106e6e:	687b      	ldr	r3, [r7, #4]
 8106e70:	2203      	movs	r2, #3
 8106e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8106e76:	2301      	movs	r3, #1
 8106e78:	e0b7      	b.n	8106fea <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8106e7a:	687b      	ldr	r3, [r7, #4]
 8106e7c:	681b      	ldr	r3, [r3, #0]
 8106e7e:	4a5f      	ldr	r2, [pc, #380]	@ (8106ffc <HAL_DMA_Init+0x654>)
 8106e80:	4293      	cmp	r3, r2
 8106e82:	d072      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106e84:	687b      	ldr	r3, [r7, #4]
 8106e86:	681b      	ldr	r3, [r3, #0]
 8106e88:	4a5d      	ldr	r2, [pc, #372]	@ (8107000 <HAL_DMA_Init+0x658>)
 8106e8a:	4293      	cmp	r3, r2
 8106e8c:	d06d      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106e8e:	687b      	ldr	r3, [r7, #4]
 8106e90:	681b      	ldr	r3, [r3, #0]
 8106e92:	4a5c      	ldr	r2, [pc, #368]	@ (8107004 <HAL_DMA_Init+0x65c>)
 8106e94:	4293      	cmp	r3, r2
 8106e96:	d068      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106e98:	687b      	ldr	r3, [r7, #4]
 8106e9a:	681b      	ldr	r3, [r3, #0]
 8106e9c:	4a5a      	ldr	r2, [pc, #360]	@ (8107008 <HAL_DMA_Init+0x660>)
 8106e9e:	4293      	cmp	r3, r2
 8106ea0:	d063      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106ea2:	687b      	ldr	r3, [r7, #4]
 8106ea4:	681b      	ldr	r3, [r3, #0]
 8106ea6:	4a59      	ldr	r2, [pc, #356]	@ (810700c <HAL_DMA_Init+0x664>)
 8106ea8:	4293      	cmp	r3, r2
 8106eaa:	d05e      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106eac:	687b      	ldr	r3, [r7, #4]
 8106eae:	681b      	ldr	r3, [r3, #0]
 8106eb0:	4a57      	ldr	r2, [pc, #348]	@ (8107010 <HAL_DMA_Init+0x668>)
 8106eb2:	4293      	cmp	r3, r2
 8106eb4:	d059      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106eb6:	687b      	ldr	r3, [r7, #4]
 8106eb8:	681b      	ldr	r3, [r3, #0]
 8106eba:	4a56      	ldr	r2, [pc, #344]	@ (8107014 <HAL_DMA_Init+0x66c>)
 8106ebc:	4293      	cmp	r3, r2
 8106ebe:	d054      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106ec0:	687b      	ldr	r3, [r7, #4]
 8106ec2:	681b      	ldr	r3, [r3, #0]
 8106ec4:	4a54      	ldr	r2, [pc, #336]	@ (8107018 <HAL_DMA_Init+0x670>)
 8106ec6:	4293      	cmp	r3, r2
 8106ec8:	d04f      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106eca:	687b      	ldr	r3, [r7, #4]
 8106ecc:	681b      	ldr	r3, [r3, #0]
 8106ece:	4a53      	ldr	r2, [pc, #332]	@ (810701c <HAL_DMA_Init+0x674>)
 8106ed0:	4293      	cmp	r3, r2
 8106ed2:	d04a      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106ed4:	687b      	ldr	r3, [r7, #4]
 8106ed6:	681b      	ldr	r3, [r3, #0]
 8106ed8:	4a51      	ldr	r2, [pc, #324]	@ (8107020 <HAL_DMA_Init+0x678>)
 8106eda:	4293      	cmp	r3, r2
 8106edc:	d045      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106ede:	687b      	ldr	r3, [r7, #4]
 8106ee0:	681b      	ldr	r3, [r3, #0]
 8106ee2:	4a50      	ldr	r2, [pc, #320]	@ (8107024 <HAL_DMA_Init+0x67c>)
 8106ee4:	4293      	cmp	r3, r2
 8106ee6:	d040      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106ee8:	687b      	ldr	r3, [r7, #4]
 8106eea:	681b      	ldr	r3, [r3, #0]
 8106eec:	4a4e      	ldr	r2, [pc, #312]	@ (8107028 <HAL_DMA_Init+0x680>)
 8106eee:	4293      	cmp	r3, r2
 8106ef0:	d03b      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106ef2:	687b      	ldr	r3, [r7, #4]
 8106ef4:	681b      	ldr	r3, [r3, #0]
 8106ef6:	4a4d      	ldr	r2, [pc, #308]	@ (810702c <HAL_DMA_Init+0x684>)
 8106ef8:	4293      	cmp	r3, r2
 8106efa:	d036      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106efc:	687b      	ldr	r3, [r7, #4]
 8106efe:	681b      	ldr	r3, [r3, #0]
 8106f00:	4a4b      	ldr	r2, [pc, #300]	@ (8107030 <HAL_DMA_Init+0x688>)
 8106f02:	4293      	cmp	r3, r2
 8106f04:	d031      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106f06:	687b      	ldr	r3, [r7, #4]
 8106f08:	681b      	ldr	r3, [r3, #0]
 8106f0a:	4a4a      	ldr	r2, [pc, #296]	@ (8107034 <HAL_DMA_Init+0x68c>)
 8106f0c:	4293      	cmp	r3, r2
 8106f0e:	d02c      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106f10:	687b      	ldr	r3, [r7, #4]
 8106f12:	681b      	ldr	r3, [r3, #0]
 8106f14:	4a48      	ldr	r2, [pc, #288]	@ (8107038 <HAL_DMA_Init+0x690>)
 8106f16:	4293      	cmp	r3, r2
 8106f18:	d027      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106f1a:	687b      	ldr	r3, [r7, #4]
 8106f1c:	681b      	ldr	r3, [r3, #0]
 8106f1e:	4a47      	ldr	r2, [pc, #284]	@ (810703c <HAL_DMA_Init+0x694>)
 8106f20:	4293      	cmp	r3, r2
 8106f22:	d022      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106f24:	687b      	ldr	r3, [r7, #4]
 8106f26:	681b      	ldr	r3, [r3, #0]
 8106f28:	4a45      	ldr	r2, [pc, #276]	@ (8107040 <HAL_DMA_Init+0x698>)
 8106f2a:	4293      	cmp	r3, r2
 8106f2c:	d01d      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106f2e:	687b      	ldr	r3, [r7, #4]
 8106f30:	681b      	ldr	r3, [r3, #0]
 8106f32:	4a44      	ldr	r2, [pc, #272]	@ (8107044 <HAL_DMA_Init+0x69c>)
 8106f34:	4293      	cmp	r3, r2
 8106f36:	d018      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106f38:	687b      	ldr	r3, [r7, #4]
 8106f3a:	681b      	ldr	r3, [r3, #0]
 8106f3c:	4a42      	ldr	r2, [pc, #264]	@ (8107048 <HAL_DMA_Init+0x6a0>)
 8106f3e:	4293      	cmp	r3, r2
 8106f40:	d013      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106f42:	687b      	ldr	r3, [r7, #4]
 8106f44:	681b      	ldr	r3, [r3, #0]
 8106f46:	4a41      	ldr	r2, [pc, #260]	@ (810704c <HAL_DMA_Init+0x6a4>)
 8106f48:	4293      	cmp	r3, r2
 8106f4a:	d00e      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106f4c:	687b      	ldr	r3, [r7, #4]
 8106f4e:	681b      	ldr	r3, [r3, #0]
 8106f50:	4a3f      	ldr	r2, [pc, #252]	@ (8107050 <HAL_DMA_Init+0x6a8>)
 8106f52:	4293      	cmp	r3, r2
 8106f54:	d009      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106f56:	687b      	ldr	r3, [r7, #4]
 8106f58:	681b      	ldr	r3, [r3, #0]
 8106f5a:	4a3e      	ldr	r2, [pc, #248]	@ (8107054 <HAL_DMA_Init+0x6ac>)
 8106f5c:	4293      	cmp	r3, r2
 8106f5e:	d004      	beq.n	8106f6a <HAL_DMA_Init+0x5c2>
 8106f60:	687b      	ldr	r3, [r7, #4]
 8106f62:	681b      	ldr	r3, [r3, #0]
 8106f64:	4a3c      	ldr	r2, [pc, #240]	@ (8107058 <HAL_DMA_Init+0x6b0>)
 8106f66:	4293      	cmp	r3, r2
 8106f68:	d101      	bne.n	8106f6e <HAL_DMA_Init+0x5c6>
 8106f6a:	2301      	movs	r3, #1
 8106f6c:	e000      	b.n	8106f70 <HAL_DMA_Init+0x5c8>
 8106f6e:	2300      	movs	r3, #0
 8106f70:	2b00      	cmp	r3, #0
 8106f72:	d032      	beq.n	8106fda <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8106f74:	6878      	ldr	r0, [r7, #4]
 8106f76:	f001 fe2d 	bl	8108bd4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8106f7a:	687b      	ldr	r3, [r7, #4]
 8106f7c:	689b      	ldr	r3, [r3, #8]
 8106f7e:	2b80      	cmp	r3, #128	@ 0x80
 8106f80:	d102      	bne.n	8106f88 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8106f82:	687b      	ldr	r3, [r7, #4]
 8106f84:	2200      	movs	r2, #0
 8106f86:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8106f88:	687b      	ldr	r3, [r7, #4]
 8106f8a:	685a      	ldr	r2, [r3, #4]
 8106f8c:	687b      	ldr	r3, [r7, #4]
 8106f8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106f90:	b2d2      	uxtb	r2, r2
 8106f92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8106f94:	687b      	ldr	r3, [r7, #4]
 8106f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106f98:	687a      	ldr	r2, [r7, #4]
 8106f9a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8106f9c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8106f9e:	687b      	ldr	r3, [r7, #4]
 8106fa0:	685b      	ldr	r3, [r3, #4]
 8106fa2:	2b00      	cmp	r3, #0
 8106fa4:	d010      	beq.n	8106fc8 <HAL_DMA_Init+0x620>
 8106fa6:	687b      	ldr	r3, [r7, #4]
 8106fa8:	685b      	ldr	r3, [r3, #4]
 8106faa:	2b08      	cmp	r3, #8
 8106fac:	d80c      	bhi.n	8106fc8 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8106fae:	6878      	ldr	r0, [r7, #4]
 8106fb0:	f001 feaa 	bl	8108d08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8106fb4:	687b      	ldr	r3, [r7, #4]
 8106fb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106fb8:	2200      	movs	r2, #0
 8106fba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8106fbc:	687b      	ldr	r3, [r7, #4]
 8106fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106fc0:	687a      	ldr	r2, [r7, #4]
 8106fc2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8106fc4:	605a      	str	r2, [r3, #4]
 8106fc6:	e008      	b.n	8106fda <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8106fc8:	687b      	ldr	r3, [r7, #4]
 8106fca:	2200      	movs	r2, #0
 8106fcc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8106fce:	687b      	ldr	r3, [r7, #4]
 8106fd0:	2200      	movs	r2, #0
 8106fd2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8106fd4:	687b      	ldr	r3, [r7, #4]
 8106fd6:	2200      	movs	r2, #0
 8106fd8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8106fda:	687b      	ldr	r3, [r7, #4]
 8106fdc:	2200      	movs	r2, #0
 8106fde:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8106fe0:	687b      	ldr	r3, [r7, #4]
 8106fe2:	2201      	movs	r2, #1
 8106fe4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8106fe8:	2300      	movs	r3, #0
}
 8106fea:	4618      	mov	r0, r3
 8106fec:	3718      	adds	r7, #24
 8106fee:	46bd      	mov	sp, r7
 8106ff0:	bd80      	pop	{r7, pc}
 8106ff2:	bf00      	nop
 8106ff4:	a7fdabf8 	.word	0xa7fdabf8
 8106ff8:	cccccccd 	.word	0xcccccccd
 8106ffc:	40020010 	.word	0x40020010
 8107000:	40020028 	.word	0x40020028
 8107004:	40020040 	.word	0x40020040
 8107008:	40020058 	.word	0x40020058
 810700c:	40020070 	.word	0x40020070
 8107010:	40020088 	.word	0x40020088
 8107014:	400200a0 	.word	0x400200a0
 8107018:	400200b8 	.word	0x400200b8
 810701c:	40020410 	.word	0x40020410
 8107020:	40020428 	.word	0x40020428
 8107024:	40020440 	.word	0x40020440
 8107028:	40020458 	.word	0x40020458
 810702c:	40020470 	.word	0x40020470
 8107030:	40020488 	.word	0x40020488
 8107034:	400204a0 	.word	0x400204a0
 8107038:	400204b8 	.word	0x400204b8
 810703c:	58025408 	.word	0x58025408
 8107040:	5802541c 	.word	0x5802541c
 8107044:	58025430 	.word	0x58025430
 8107048:	58025444 	.word	0x58025444
 810704c:	58025458 	.word	0x58025458
 8107050:	5802546c 	.word	0x5802546c
 8107054:	58025480 	.word	0x58025480
 8107058:	58025494 	.word	0x58025494

0810705c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 810705c:	b580      	push	{r7, lr}
 810705e:	b086      	sub	sp, #24
 8107060:	af00      	add	r7, sp, #0
 8107062:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8107064:	f7fd fe58 	bl	8104d18 <HAL_GetTick>
 8107068:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810706a:	687b      	ldr	r3, [r7, #4]
 810706c:	2b00      	cmp	r3, #0
 810706e:	d101      	bne.n	8107074 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8107070:	2301      	movs	r3, #1
 8107072:	e2dc      	b.n	810762e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8107074:	687b      	ldr	r3, [r7, #4]
 8107076:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 810707a:	b2db      	uxtb	r3, r3
 810707c:	2b02      	cmp	r3, #2
 810707e:	d008      	beq.n	8107092 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8107080:	687b      	ldr	r3, [r7, #4]
 8107082:	2280      	movs	r2, #128	@ 0x80
 8107084:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8107086:	687b      	ldr	r3, [r7, #4]
 8107088:	2200      	movs	r2, #0
 810708a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 810708e:	2301      	movs	r3, #1
 8107090:	e2cd      	b.n	810762e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8107092:	687b      	ldr	r3, [r7, #4]
 8107094:	681b      	ldr	r3, [r3, #0]
 8107096:	4a76      	ldr	r2, [pc, #472]	@ (8107270 <HAL_DMA_Abort+0x214>)
 8107098:	4293      	cmp	r3, r2
 810709a:	d04a      	beq.n	8107132 <HAL_DMA_Abort+0xd6>
 810709c:	687b      	ldr	r3, [r7, #4]
 810709e:	681b      	ldr	r3, [r3, #0]
 81070a0:	4a74      	ldr	r2, [pc, #464]	@ (8107274 <HAL_DMA_Abort+0x218>)
 81070a2:	4293      	cmp	r3, r2
 81070a4:	d045      	beq.n	8107132 <HAL_DMA_Abort+0xd6>
 81070a6:	687b      	ldr	r3, [r7, #4]
 81070a8:	681b      	ldr	r3, [r3, #0]
 81070aa:	4a73      	ldr	r2, [pc, #460]	@ (8107278 <HAL_DMA_Abort+0x21c>)
 81070ac:	4293      	cmp	r3, r2
 81070ae:	d040      	beq.n	8107132 <HAL_DMA_Abort+0xd6>
 81070b0:	687b      	ldr	r3, [r7, #4]
 81070b2:	681b      	ldr	r3, [r3, #0]
 81070b4:	4a71      	ldr	r2, [pc, #452]	@ (810727c <HAL_DMA_Abort+0x220>)
 81070b6:	4293      	cmp	r3, r2
 81070b8:	d03b      	beq.n	8107132 <HAL_DMA_Abort+0xd6>
 81070ba:	687b      	ldr	r3, [r7, #4]
 81070bc:	681b      	ldr	r3, [r3, #0]
 81070be:	4a70      	ldr	r2, [pc, #448]	@ (8107280 <HAL_DMA_Abort+0x224>)
 81070c0:	4293      	cmp	r3, r2
 81070c2:	d036      	beq.n	8107132 <HAL_DMA_Abort+0xd6>
 81070c4:	687b      	ldr	r3, [r7, #4]
 81070c6:	681b      	ldr	r3, [r3, #0]
 81070c8:	4a6e      	ldr	r2, [pc, #440]	@ (8107284 <HAL_DMA_Abort+0x228>)
 81070ca:	4293      	cmp	r3, r2
 81070cc:	d031      	beq.n	8107132 <HAL_DMA_Abort+0xd6>
 81070ce:	687b      	ldr	r3, [r7, #4]
 81070d0:	681b      	ldr	r3, [r3, #0]
 81070d2:	4a6d      	ldr	r2, [pc, #436]	@ (8107288 <HAL_DMA_Abort+0x22c>)
 81070d4:	4293      	cmp	r3, r2
 81070d6:	d02c      	beq.n	8107132 <HAL_DMA_Abort+0xd6>
 81070d8:	687b      	ldr	r3, [r7, #4]
 81070da:	681b      	ldr	r3, [r3, #0]
 81070dc:	4a6b      	ldr	r2, [pc, #428]	@ (810728c <HAL_DMA_Abort+0x230>)
 81070de:	4293      	cmp	r3, r2
 81070e0:	d027      	beq.n	8107132 <HAL_DMA_Abort+0xd6>
 81070e2:	687b      	ldr	r3, [r7, #4]
 81070e4:	681b      	ldr	r3, [r3, #0]
 81070e6:	4a6a      	ldr	r2, [pc, #424]	@ (8107290 <HAL_DMA_Abort+0x234>)
 81070e8:	4293      	cmp	r3, r2
 81070ea:	d022      	beq.n	8107132 <HAL_DMA_Abort+0xd6>
 81070ec:	687b      	ldr	r3, [r7, #4]
 81070ee:	681b      	ldr	r3, [r3, #0]
 81070f0:	4a68      	ldr	r2, [pc, #416]	@ (8107294 <HAL_DMA_Abort+0x238>)
 81070f2:	4293      	cmp	r3, r2
 81070f4:	d01d      	beq.n	8107132 <HAL_DMA_Abort+0xd6>
 81070f6:	687b      	ldr	r3, [r7, #4]
 81070f8:	681b      	ldr	r3, [r3, #0]
 81070fa:	4a67      	ldr	r2, [pc, #412]	@ (8107298 <HAL_DMA_Abort+0x23c>)
 81070fc:	4293      	cmp	r3, r2
 81070fe:	d018      	beq.n	8107132 <HAL_DMA_Abort+0xd6>
 8107100:	687b      	ldr	r3, [r7, #4]
 8107102:	681b      	ldr	r3, [r3, #0]
 8107104:	4a65      	ldr	r2, [pc, #404]	@ (810729c <HAL_DMA_Abort+0x240>)
 8107106:	4293      	cmp	r3, r2
 8107108:	d013      	beq.n	8107132 <HAL_DMA_Abort+0xd6>
 810710a:	687b      	ldr	r3, [r7, #4]
 810710c:	681b      	ldr	r3, [r3, #0]
 810710e:	4a64      	ldr	r2, [pc, #400]	@ (81072a0 <HAL_DMA_Abort+0x244>)
 8107110:	4293      	cmp	r3, r2
 8107112:	d00e      	beq.n	8107132 <HAL_DMA_Abort+0xd6>
 8107114:	687b      	ldr	r3, [r7, #4]
 8107116:	681b      	ldr	r3, [r3, #0]
 8107118:	4a62      	ldr	r2, [pc, #392]	@ (81072a4 <HAL_DMA_Abort+0x248>)
 810711a:	4293      	cmp	r3, r2
 810711c:	d009      	beq.n	8107132 <HAL_DMA_Abort+0xd6>
 810711e:	687b      	ldr	r3, [r7, #4]
 8107120:	681b      	ldr	r3, [r3, #0]
 8107122:	4a61      	ldr	r2, [pc, #388]	@ (81072a8 <HAL_DMA_Abort+0x24c>)
 8107124:	4293      	cmp	r3, r2
 8107126:	d004      	beq.n	8107132 <HAL_DMA_Abort+0xd6>
 8107128:	687b      	ldr	r3, [r7, #4]
 810712a:	681b      	ldr	r3, [r3, #0]
 810712c:	4a5f      	ldr	r2, [pc, #380]	@ (81072ac <HAL_DMA_Abort+0x250>)
 810712e:	4293      	cmp	r3, r2
 8107130:	d101      	bne.n	8107136 <HAL_DMA_Abort+0xda>
 8107132:	2301      	movs	r3, #1
 8107134:	e000      	b.n	8107138 <HAL_DMA_Abort+0xdc>
 8107136:	2300      	movs	r3, #0
 8107138:	2b00      	cmp	r3, #0
 810713a:	d013      	beq.n	8107164 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 810713c:	687b      	ldr	r3, [r7, #4]
 810713e:	681b      	ldr	r3, [r3, #0]
 8107140:	681a      	ldr	r2, [r3, #0]
 8107142:	687b      	ldr	r3, [r7, #4]
 8107144:	681b      	ldr	r3, [r3, #0]
 8107146:	f022 021e 	bic.w	r2, r2, #30
 810714a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 810714c:	687b      	ldr	r3, [r7, #4]
 810714e:	681b      	ldr	r3, [r3, #0]
 8107150:	695a      	ldr	r2, [r3, #20]
 8107152:	687b      	ldr	r3, [r7, #4]
 8107154:	681b      	ldr	r3, [r3, #0]
 8107156:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 810715a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 810715c:	687b      	ldr	r3, [r7, #4]
 810715e:	681b      	ldr	r3, [r3, #0]
 8107160:	617b      	str	r3, [r7, #20]
 8107162:	e00a      	b.n	810717a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8107164:	687b      	ldr	r3, [r7, #4]
 8107166:	681b      	ldr	r3, [r3, #0]
 8107168:	681a      	ldr	r2, [r3, #0]
 810716a:	687b      	ldr	r3, [r7, #4]
 810716c:	681b      	ldr	r3, [r3, #0]
 810716e:	f022 020e 	bic.w	r2, r2, #14
 8107172:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8107174:	687b      	ldr	r3, [r7, #4]
 8107176:	681b      	ldr	r3, [r3, #0]
 8107178:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810717a:	687b      	ldr	r3, [r7, #4]
 810717c:	681b      	ldr	r3, [r3, #0]
 810717e:	4a3c      	ldr	r2, [pc, #240]	@ (8107270 <HAL_DMA_Abort+0x214>)
 8107180:	4293      	cmp	r3, r2
 8107182:	d072      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 8107184:	687b      	ldr	r3, [r7, #4]
 8107186:	681b      	ldr	r3, [r3, #0]
 8107188:	4a3a      	ldr	r2, [pc, #232]	@ (8107274 <HAL_DMA_Abort+0x218>)
 810718a:	4293      	cmp	r3, r2
 810718c:	d06d      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 810718e:	687b      	ldr	r3, [r7, #4]
 8107190:	681b      	ldr	r3, [r3, #0]
 8107192:	4a39      	ldr	r2, [pc, #228]	@ (8107278 <HAL_DMA_Abort+0x21c>)
 8107194:	4293      	cmp	r3, r2
 8107196:	d068      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 8107198:	687b      	ldr	r3, [r7, #4]
 810719a:	681b      	ldr	r3, [r3, #0]
 810719c:	4a37      	ldr	r2, [pc, #220]	@ (810727c <HAL_DMA_Abort+0x220>)
 810719e:	4293      	cmp	r3, r2
 81071a0:	d063      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 81071a2:	687b      	ldr	r3, [r7, #4]
 81071a4:	681b      	ldr	r3, [r3, #0]
 81071a6:	4a36      	ldr	r2, [pc, #216]	@ (8107280 <HAL_DMA_Abort+0x224>)
 81071a8:	4293      	cmp	r3, r2
 81071aa:	d05e      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 81071ac:	687b      	ldr	r3, [r7, #4]
 81071ae:	681b      	ldr	r3, [r3, #0]
 81071b0:	4a34      	ldr	r2, [pc, #208]	@ (8107284 <HAL_DMA_Abort+0x228>)
 81071b2:	4293      	cmp	r3, r2
 81071b4:	d059      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 81071b6:	687b      	ldr	r3, [r7, #4]
 81071b8:	681b      	ldr	r3, [r3, #0]
 81071ba:	4a33      	ldr	r2, [pc, #204]	@ (8107288 <HAL_DMA_Abort+0x22c>)
 81071bc:	4293      	cmp	r3, r2
 81071be:	d054      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 81071c0:	687b      	ldr	r3, [r7, #4]
 81071c2:	681b      	ldr	r3, [r3, #0]
 81071c4:	4a31      	ldr	r2, [pc, #196]	@ (810728c <HAL_DMA_Abort+0x230>)
 81071c6:	4293      	cmp	r3, r2
 81071c8:	d04f      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 81071ca:	687b      	ldr	r3, [r7, #4]
 81071cc:	681b      	ldr	r3, [r3, #0]
 81071ce:	4a30      	ldr	r2, [pc, #192]	@ (8107290 <HAL_DMA_Abort+0x234>)
 81071d0:	4293      	cmp	r3, r2
 81071d2:	d04a      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 81071d4:	687b      	ldr	r3, [r7, #4]
 81071d6:	681b      	ldr	r3, [r3, #0]
 81071d8:	4a2e      	ldr	r2, [pc, #184]	@ (8107294 <HAL_DMA_Abort+0x238>)
 81071da:	4293      	cmp	r3, r2
 81071dc:	d045      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 81071de:	687b      	ldr	r3, [r7, #4]
 81071e0:	681b      	ldr	r3, [r3, #0]
 81071e2:	4a2d      	ldr	r2, [pc, #180]	@ (8107298 <HAL_DMA_Abort+0x23c>)
 81071e4:	4293      	cmp	r3, r2
 81071e6:	d040      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 81071e8:	687b      	ldr	r3, [r7, #4]
 81071ea:	681b      	ldr	r3, [r3, #0]
 81071ec:	4a2b      	ldr	r2, [pc, #172]	@ (810729c <HAL_DMA_Abort+0x240>)
 81071ee:	4293      	cmp	r3, r2
 81071f0:	d03b      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 81071f2:	687b      	ldr	r3, [r7, #4]
 81071f4:	681b      	ldr	r3, [r3, #0]
 81071f6:	4a2a      	ldr	r2, [pc, #168]	@ (81072a0 <HAL_DMA_Abort+0x244>)
 81071f8:	4293      	cmp	r3, r2
 81071fa:	d036      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 81071fc:	687b      	ldr	r3, [r7, #4]
 81071fe:	681b      	ldr	r3, [r3, #0]
 8107200:	4a28      	ldr	r2, [pc, #160]	@ (81072a4 <HAL_DMA_Abort+0x248>)
 8107202:	4293      	cmp	r3, r2
 8107204:	d031      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 8107206:	687b      	ldr	r3, [r7, #4]
 8107208:	681b      	ldr	r3, [r3, #0]
 810720a:	4a27      	ldr	r2, [pc, #156]	@ (81072a8 <HAL_DMA_Abort+0x24c>)
 810720c:	4293      	cmp	r3, r2
 810720e:	d02c      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 8107210:	687b      	ldr	r3, [r7, #4]
 8107212:	681b      	ldr	r3, [r3, #0]
 8107214:	4a25      	ldr	r2, [pc, #148]	@ (81072ac <HAL_DMA_Abort+0x250>)
 8107216:	4293      	cmp	r3, r2
 8107218:	d027      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 810721a:	687b      	ldr	r3, [r7, #4]
 810721c:	681b      	ldr	r3, [r3, #0]
 810721e:	4a24      	ldr	r2, [pc, #144]	@ (81072b0 <HAL_DMA_Abort+0x254>)
 8107220:	4293      	cmp	r3, r2
 8107222:	d022      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 8107224:	687b      	ldr	r3, [r7, #4]
 8107226:	681b      	ldr	r3, [r3, #0]
 8107228:	4a22      	ldr	r2, [pc, #136]	@ (81072b4 <HAL_DMA_Abort+0x258>)
 810722a:	4293      	cmp	r3, r2
 810722c:	d01d      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 810722e:	687b      	ldr	r3, [r7, #4]
 8107230:	681b      	ldr	r3, [r3, #0]
 8107232:	4a21      	ldr	r2, [pc, #132]	@ (81072b8 <HAL_DMA_Abort+0x25c>)
 8107234:	4293      	cmp	r3, r2
 8107236:	d018      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 8107238:	687b      	ldr	r3, [r7, #4]
 810723a:	681b      	ldr	r3, [r3, #0]
 810723c:	4a1f      	ldr	r2, [pc, #124]	@ (81072bc <HAL_DMA_Abort+0x260>)
 810723e:	4293      	cmp	r3, r2
 8107240:	d013      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 8107242:	687b      	ldr	r3, [r7, #4]
 8107244:	681b      	ldr	r3, [r3, #0]
 8107246:	4a1e      	ldr	r2, [pc, #120]	@ (81072c0 <HAL_DMA_Abort+0x264>)
 8107248:	4293      	cmp	r3, r2
 810724a:	d00e      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 810724c:	687b      	ldr	r3, [r7, #4]
 810724e:	681b      	ldr	r3, [r3, #0]
 8107250:	4a1c      	ldr	r2, [pc, #112]	@ (81072c4 <HAL_DMA_Abort+0x268>)
 8107252:	4293      	cmp	r3, r2
 8107254:	d009      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 8107256:	687b      	ldr	r3, [r7, #4]
 8107258:	681b      	ldr	r3, [r3, #0]
 810725a:	4a1b      	ldr	r2, [pc, #108]	@ (81072c8 <HAL_DMA_Abort+0x26c>)
 810725c:	4293      	cmp	r3, r2
 810725e:	d004      	beq.n	810726a <HAL_DMA_Abort+0x20e>
 8107260:	687b      	ldr	r3, [r7, #4]
 8107262:	681b      	ldr	r3, [r3, #0]
 8107264:	4a19      	ldr	r2, [pc, #100]	@ (81072cc <HAL_DMA_Abort+0x270>)
 8107266:	4293      	cmp	r3, r2
 8107268:	d132      	bne.n	81072d0 <HAL_DMA_Abort+0x274>
 810726a:	2301      	movs	r3, #1
 810726c:	e031      	b.n	81072d2 <HAL_DMA_Abort+0x276>
 810726e:	bf00      	nop
 8107270:	40020010 	.word	0x40020010
 8107274:	40020028 	.word	0x40020028
 8107278:	40020040 	.word	0x40020040
 810727c:	40020058 	.word	0x40020058
 8107280:	40020070 	.word	0x40020070
 8107284:	40020088 	.word	0x40020088
 8107288:	400200a0 	.word	0x400200a0
 810728c:	400200b8 	.word	0x400200b8
 8107290:	40020410 	.word	0x40020410
 8107294:	40020428 	.word	0x40020428
 8107298:	40020440 	.word	0x40020440
 810729c:	40020458 	.word	0x40020458
 81072a0:	40020470 	.word	0x40020470
 81072a4:	40020488 	.word	0x40020488
 81072a8:	400204a0 	.word	0x400204a0
 81072ac:	400204b8 	.word	0x400204b8
 81072b0:	58025408 	.word	0x58025408
 81072b4:	5802541c 	.word	0x5802541c
 81072b8:	58025430 	.word	0x58025430
 81072bc:	58025444 	.word	0x58025444
 81072c0:	58025458 	.word	0x58025458
 81072c4:	5802546c 	.word	0x5802546c
 81072c8:	58025480 	.word	0x58025480
 81072cc:	58025494 	.word	0x58025494
 81072d0:	2300      	movs	r3, #0
 81072d2:	2b00      	cmp	r3, #0
 81072d4:	d007      	beq.n	81072e6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81072d6:	687b      	ldr	r3, [r7, #4]
 81072d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81072da:	681a      	ldr	r2, [r3, #0]
 81072dc:	687b      	ldr	r3, [r7, #4]
 81072de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81072e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81072e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 81072e6:	687b      	ldr	r3, [r7, #4]
 81072e8:	681b      	ldr	r3, [r3, #0]
 81072ea:	4a6d      	ldr	r2, [pc, #436]	@ (81074a0 <HAL_DMA_Abort+0x444>)
 81072ec:	4293      	cmp	r3, r2
 81072ee:	d04a      	beq.n	8107386 <HAL_DMA_Abort+0x32a>
 81072f0:	687b      	ldr	r3, [r7, #4]
 81072f2:	681b      	ldr	r3, [r3, #0]
 81072f4:	4a6b      	ldr	r2, [pc, #428]	@ (81074a4 <HAL_DMA_Abort+0x448>)
 81072f6:	4293      	cmp	r3, r2
 81072f8:	d045      	beq.n	8107386 <HAL_DMA_Abort+0x32a>
 81072fa:	687b      	ldr	r3, [r7, #4]
 81072fc:	681b      	ldr	r3, [r3, #0]
 81072fe:	4a6a      	ldr	r2, [pc, #424]	@ (81074a8 <HAL_DMA_Abort+0x44c>)
 8107300:	4293      	cmp	r3, r2
 8107302:	d040      	beq.n	8107386 <HAL_DMA_Abort+0x32a>
 8107304:	687b      	ldr	r3, [r7, #4]
 8107306:	681b      	ldr	r3, [r3, #0]
 8107308:	4a68      	ldr	r2, [pc, #416]	@ (81074ac <HAL_DMA_Abort+0x450>)
 810730a:	4293      	cmp	r3, r2
 810730c:	d03b      	beq.n	8107386 <HAL_DMA_Abort+0x32a>
 810730e:	687b      	ldr	r3, [r7, #4]
 8107310:	681b      	ldr	r3, [r3, #0]
 8107312:	4a67      	ldr	r2, [pc, #412]	@ (81074b0 <HAL_DMA_Abort+0x454>)
 8107314:	4293      	cmp	r3, r2
 8107316:	d036      	beq.n	8107386 <HAL_DMA_Abort+0x32a>
 8107318:	687b      	ldr	r3, [r7, #4]
 810731a:	681b      	ldr	r3, [r3, #0]
 810731c:	4a65      	ldr	r2, [pc, #404]	@ (81074b4 <HAL_DMA_Abort+0x458>)
 810731e:	4293      	cmp	r3, r2
 8107320:	d031      	beq.n	8107386 <HAL_DMA_Abort+0x32a>
 8107322:	687b      	ldr	r3, [r7, #4]
 8107324:	681b      	ldr	r3, [r3, #0]
 8107326:	4a64      	ldr	r2, [pc, #400]	@ (81074b8 <HAL_DMA_Abort+0x45c>)
 8107328:	4293      	cmp	r3, r2
 810732a:	d02c      	beq.n	8107386 <HAL_DMA_Abort+0x32a>
 810732c:	687b      	ldr	r3, [r7, #4]
 810732e:	681b      	ldr	r3, [r3, #0]
 8107330:	4a62      	ldr	r2, [pc, #392]	@ (81074bc <HAL_DMA_Abort+0x460>)
 8107332:	4293      	cmp	r3, r2
 8107334:	d027      	beq.n	8107386 <HAL_DMA_Abort+0x32a>
 8107336:	687b      	ldr	r3, [r7, #4]
 8107338:	681b      	ldr	r3, [r3, #0]
 810733a:	4a61      	ldr	r2, [pc, #388]	@ (81074c0 <HAL_DMA_Abort+0x464>)
 810733c:	4293      	cmp	r3, r2
 810733e:	d022      	beq.n	8107386 <HAL_DMA_Abort+0x32a>
 8107340:	687b      	ldr	r3, [r7, #4]
 8107342:	681b      	ldr	r3, [r3, #0]
 8107344:	4a5f      	ldr	r2, [pc, #380]	@ (81074c4 <HAL_DMA_Abort+0x468>)
 8107346:	4293      	cmp	r3, r2
 8107348:	d01d      	beq.n	8107386 <HAL_DMA_Abort+0x32a>
 810734a:	687b      	ldr	r3, [r7, #4]
 810734c:	681b      	ldr	r3, [r3, #0]
 810734e:	4a5e      	ldr	r2, [pc, #376]	@ (81074c8 <HAL_DMA_Abort+0x46c>)
 8107350:	4293      	cmp	r3, r2
 8107352:	d018      	beq.n	8107386 <HAL_DMA_Abort+0x32a>
 8107354:	687b      	ldr	r3, [r7, #4]
 8107356:	681b      	ldr	r3, [r3, #0]
 8107358:	4a5c      	ldr	r2, [pc, #368]	@ (81074cc <HAL_DMA_Abort+0x470>)
 810735a:	4293      	cmp	r3, r2
 810735c:	d013      	beq.n	8107386 <HAL_DMA_Abort+0x32a>
 810735e:	687b      	ldr	r3, [r7, #4]
 8107360:	681b      	ldr	r3, [r3, #0]
 8107362:	4a5b      	ldr	r2, [pc, #364]	@ (81074d0 <HAL_DMA_Abort+0x474>)
 8107364:	4293      	cmp	r3, r2
 8107366:	d00e      	beq.n	8107386 <HAL_DMA_Abort+0x32a>
 8107368:	687b      	ldr	r3, [r7, #4]
 810736a:	681b      	ldr	r3, [r3, #0]
 810736c:	4a59      	ldr	r2, [pc, #356]	@ (81074d4 <HAL_DMA_Abort+0x478>)
 810736e:	4293      	cmp	r3, r2
 8107370:	d009      	beq.n	8107386 <HAL_DMA_Abort+0x32a>
 8107372:	687b      	ldr	r3, [r7, #4]
 8107374:	681b      	ldr	r3, [r3, #0]
 8107376:	4a58      	ldr	r2, [pc, #352]	@ (81074d8 <HAL_DMA_Abort+0x47c>)
 8107378:	4293      	cmp	r3, r2
 810737a:	d004      	beq.n	8107386 <HAL_DMA_Abort+0x32a>
 810737c:	687b      	ldr	r3, [r7, #4]
 810737e:	681b      	ldr	r3, [r3, #0]
 8107380:	4a56      	ldr	r2, [pc, #344]	@ (81074dc <HAL_DMA_Abort+0x480>)
 8107382:	4293      	cmp	r3, r2
 8107384:	d108      	bne.n	8107398 <HAL_DMA_Abort+0x33c>
 8107386:	687b      	ldr	r3, [r7, #4]
 8107388:	681b      	ldr	r3, [r3, #0]
 810738a:	681a      	ldr	r2, [r3, #0]
 810738c:	687b      	ldr	r3, [r7, #4]
 810738e:	681b      	ldr	r3, [r3, #0]
 8107390:	f022 0201 	bic.w	r2, r2, #1
 8107394:	601a      	str	r2, [r3, #0]
 8107396:	e007      	b.n	81073a8 <HAL_DMA_Abort+0x34c>
 8107398:	687b      	ldr	r3, [r7, #4]
 810739a:	681b      	ldr	r3, [r3, #0]
 810739c:	681a      	ldr	r2, [r3, #0]
 810739e:	687b      	ldr	r3, [r7, #4]
 81073a0:	681b      	ldr	r3, [r3, #0]
 81073a2:	f022 0201 	bic.w	r2, r2, #1
 81073a6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 81073a8:	e013      	b.n	81073d2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81073aa:	f7fd fcb5 	bl	8104d18 <HAL_GetTick>
 81073ae:	4602      	mov	r2, r0
 81073b0:	693b      	ldr	r3, [r7, #16]
 81073b2:	1ad3      	subs	r3, r2, r3
 81073b4:	2b05      	cmp	r3, #5
 81073b6:	d90c      	bls.n	81073d2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81073b8:	687b      	ldr	r3, [r7, #4]
 81073ba:	2220      	movs	r2, #32
 81073bc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81073be:	687b      	ldr	r3, [r7, #4]
 81073c0:	2203      	movs	r2, #3
 81073c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81073c6:	687b      	ldr	r3, [r7, #4]
 81073c8:	2200      	movs	r2, #0
 81073ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 81073ce:	2301      	movs	r3, #1
 81073d0:	e12d      	b.n	810762e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 81073d2:	697b      	ldr	r3, [r7, #20]
 81073d4:	681b      	ldr	r3, [r3, #0]
 81073d6:	f003 0301 	and.w	r3, r3, #1
 81073da:	2b00      	cmp	r3, #0
 81073dc:	d1e5      	bne.n	81073aa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81073de:	687b      	ldr	r3, [r7, #4]
 81073e0:	681b      	ldr	r3, [r3, #0]
 81073e2:	4a2f      	ldr	r2, [pc, #188]	@ (81074a0 <HAL_DMA_Abort+0x444>)
 81073e4:	4293      	cmp	r3, r2
 81073e6:	d04a      	beq.n	810747e <HAL_DMA_Abort+0x422>
 81073e8:	687b      	ldr	r3, [r7, #4]
 81073ea:	681b      	ldr	r3, [r3, #0]
 81073ec:	4a2d      	ldr	r2, [pc, #180]	@ (81074a4 <HAL_DMA_Abort+0x448>)
 81073ee:	4293      	cmp	r3, r2
 81073f0:	d045      	beq.n	810747e <HAL_DMA_Abort+0x422>
 81073f2:	687b      	ldr	r3, [r7, #4]
 81073f4:	681b      	ldr	r3, [r3, #0]
 81073f6:	4a2c      	ldr	r2, [pc, #176]	@ (81074a8 <HAL_DMA_Abort+0x44c>)
 81073f8:	4293      	cmp	r3, r2
 81073fa:	d040      	beq.n	810747e <HAL_DMA_Abort+0x422>
 81073fc:	687b      	ldr	r3, [r7, #4]
 81073fe:	681b      	ldr	r3, [r3, #0]
 8107400:	4a2a      	ldr	r2, [pc, #168]	@ (81074ac <HAL_DMA_Abort+0x450>)
 8107402:	4293      	cmp	r3, r2
 8107404:	d03b      	beq.n	810747e <HAL_DMA_Abort+0x422>
 8107406:	687b      	ldr	r3, [r7, #4]
 8107408:	681b      	ldr	r3, [r3, #0]
 810740a:	4a29      	ldr	r2, [pc, #164]	@ (81074b0 <HAL_DMA_Abort+0x454>)
 810740c:	4293      	cmp	r3, r2
 810740e:	d036      	beq.n	810747e <HAL_DMA_Abort+0x422>
 8107410:	687b      	ldr	r3, [r7, #4]
 8107412:	681b      	ldr	r3, [r3, #0]
 8107414:	4a27      	ldr	r2, [pc, #156]	@ (81074b4 <HAL_DMA_Abort+0x458>)
 8107416:	4293      	cmp	r3, r2
 8107418:	d031      	beq.n	810747e <HAL_DMA_Abort+0x422>
 810741a:	687b      	ldr	r3, [r7, #4]
 810741c:	681b      	ldr	r3, [r3, #0]
 810741e:	4a26      	ldr	r2, [pc, #152]	@ (81074b8 <HAL_DMA_Abort+0x45c>)
 8107420:	4293      	cmp	r3, r2
 8107422:	d02c      	beq.n	810747e <HAL_DMA_Abort+0x422>
 8107424:	687b      	ldr	r3, [r7, #4]
 8107426:	681b      	ldr	r3, [r3, #0]
 8107428:	4a24      	ldr	r2, [pc, #144]	@ (81074bc <HAL_DMA_Abort+0x460>)
 810742a:	4293      	cmp	r3, r2
 810742c:	d027      	beq.n	810747e <HAL_DMA_Abort+0x422>
 810742e:	687b      	ldr	r3, [r7, #4]
 8107430:	681b      	ldr	r3, [r3, #0]
 8107432:	4a23      	ldr	r2, [pc, #140]	@ (81074c0 <HAL_DMA_Abort+0x464>)
 8107434:	4293      	cmp	r3, r2
 8107436:	d022      	beq.n	810747e <HAL_DMA_Abort+0x422>
 8107438:	687b      	ldr	r3, [r7, #4]
 810743a:	681b      	ldr	r3, [r3, #0]
 810743c:	4a21      	ldr	r2, [pc, #132]	@ (81074c4 <HAL_DMA_Abort+0x468>)
 810743e:	4293      	cmp	r3, r2
 8107440:	d01d      	beq.n	810747e <HAL_DMA_Abort+0x422>
 8107442:	687b      	ldr	r3, [r7, #4]
 8107444:	681b      	ldr	r3, [r3, #0]
 8107446:	4a20      	ldr	r2, [pc, #128]	@ (81074c8 <HAL_DMA_Abort+0x46c>)
 8107448:	4293      	cmp	r3, r2
 810744a:	d018      	beq.n	810747e <HAL_DMA_Abort+0x422>
 810744c:	687b      	ldr	r3, [r7, #4]
 810744e:	681b      	ldr	r3, [r3, #0]
 8107450:	4a1e      	ldr	r2, [pc, #120]	@ (81074cc <HAL_DMA_Abort+0x470>)
 8107452:	4293      	cmp	r3, r2
 8107454:	d013      	beq.n	810747e <HAL_DMA_Abort+0x422>
 8107456:	687b      	ldr	r3, [r7, #4]
 8107458:	681b      	ldr	r3, [r3, #0]
 810745a:	4a1d      	ldr	r2, [pc, #116]	@ (81074d0 <HAL_DMA_Abort+0x474>)
 810745c:	4293      	cmp	r3, r2
 810745e:	d00e      	beq.n	810747e <HAL_DMA_Abort+0x422>
 8107460:	687b      	ldr	r3, [r7, #4]
 8107462:	681b      	ldr	r3, [r3, #0]
 8107464:	4a1b      	ldr	r2, [pc, #108]	@ (81074d4 <HAL_DMA_Abort+0x478>)
 8107466:	4293      	cmp	r3, r2
 8107468:	d009      	beq.n	810747e <HAL_DMA_Abort+0x422>
 810746a:	687b      	ldr	r3, [r7, #4]
 810746c:	681b      	ldr	r3, [r3, #0]
 810746e:	4a1a      	ldr	r2, [pc, #104]	@ (81074d8 <HAL_DMA_Abort+0x47c>)
 8107470:	4293      	cmp	r3, r2
 8107472:	d004      	beq.n	810747e <HAL_DMA_Abort+0x422>
 8107474:	687b      	ldr	r3, [r7, #4]
 8107476:	681b      	ldr	r3, [r3, #0]
 8107478:	4a18      	ldr	r2, [pc, #96]	@ (81074dc <HAL_DMA_Abort+0x480>)
 810747a:	4293      	cmp	r3, r2
 810747c:	d101      	bne.n	8107482 <HAL_DMA_Abort+0x426>
 810747e:	2301      	movs	r3, #1
 8107480:	e000      	b.n	8107484 <HAL_DMA_Abort+0x428>
 8107482:	2300      	movs	r3, #0
 8107484:	2b00      	cmp	r3, #0
 8107486:	d02b      	beq.n	81074e0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8107488:	687b      	ldr	r3, [r7, #4]
 810748a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810748c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810748e:	687b      	ldr	r3, [r7, #4]
 8107490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107492:	f003 031f 	and.w	r3, r3, #31
 8107496:	223f      	movs	r2, #63	@ 0x3f
 8107498:	409a      	lsls	r2, r3
 810749a:	68bb      	ldr	r3, [r7, #8]
 810749c:	609a      	str	r2, [r3, #8]
 810749e:	e02a      	b.n	81074f6 <HAL_DMA_Abort+0x49a>
 81074a0:	40020010 	.word	0x40020010
 81074a4:	40020028 	.word	0x40020028
 81074a8:	40020040 	.word	0x40020040
 81074ac:	40020058 	.word	0x40020058
 81074b0:	40020070 	.word	0x40020070
 81074b4:	40020088 	.word	0x40020088
 81074b8:	400200a0 	.word	0x400200a0
 81074bc:	400200b8 	.word	0x400200b8
 81074c0:	40020410 	.word	0x40020410
 81074c4:	40020428 	.word	0x40020428
 81074c8:	40020440 	.word	0x40020440
 81074cc:	40020458 	.word	0x40020458
 81074d0:	40020470 	.word	0x40020470
 81074d4:	40020488 	.word	0x40020488
 81074d8:	400204a0 	.word	0x400204a0
 81074dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81074e0:	687b      	ldr	r3, [r7, #4]
 81074e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81074e4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81074e6:	687b      	ldr	r3, [r7, #4]
 81074e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81074ea:	f003 031f 	and.w	r3, r3, #31
 81074ee:	2201      	movs	r2, #1
 81074f0:	409a      	lsls	r2, r3
 81074f2:	68fb      	ldr	r3, [r7, #12]
 81074f4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81074f6:	687b      	ldr	r3, [r7, #4]
 81074f8:	681b      	ldr	r3, [r3, #0]
 81074fa:	4a4f      	ldr	r2, [pc, #316]	@ (8107638 <HAL_DMA_Abort+0x5dc>)
 81074fc:	4293      	cmp	r3, r2
 81074fe:	d072      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 8107500:	687b      	ldr	r3, [r7, #4]
 8107502:	681b      	ldr	r3, [r3, #0]
 8107504:	4a4d      	ldr	r2, [pc, #308]	@ (810763c <HAL_DMA_Abort+0x5e0>)
 8107506:	4293      	cmp	r3, r2
 8107508:	d06d      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 810750a:	687b      	ldr	r3, [r7, #4]
 810750c:	681b      	ldr	r3, [r3, #0]
 810750e:	4a4c      	ldr	r2, [pc, #304]	@ (8107640 <HAL_DMA_Abort+0x5e4>)
 8107510:	4293      	cmp	r3, r2
 8107512:	d068      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 8107514:	687b      	ldr	r3, [r7, #4]
 8107516:	681b      	ldr	r3, [r3, #0]
 8107518:	4a4a      	ldr	r2, [pc, #296]	@ (8107644 <HAL_DMA_Abort+0x5e8>)
 810751a:	4293      	cmp	r3, r2
 810751c:	d063      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 810751e:	687b      	ldr	r3, [r7, #4]
 8107520:	681b      	ldr	r3, [r3, #0]
 8107522:	4a49      	ldr	r2, [pc, #292]	@ (8107648 <HAL_DMA_Abort+0x5ec>)
 8107524:	4293      	cmp	r3, r2
 8107526:	d05e      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 8107528:	687b      	ldr	r3, [r7, #4]
 810752a:	681b      	ldr	r3, [r3, #0]
 810752c:	4a47      	ldr	r2, [pc, #284]	@ (810764c <HAL_DMA_Abort+0x5f0>)
 810752e:	4293      	cmp	r3, r2
 8107530:	d059      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 8107532:	687b      	ldr	r3, [r7, #4]
 8107534:	681b      	ldr	r3, [r3, #0]
 8107536:	4a46      	ldr	r2, [pc, #280]	@ (8107650 <HAL_DMA_Abort+0x5f4>)
 8107538:	4293      	cmp	r3, r2
 810753a:	d054      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 810753c:	687b      	ldr	r3, [r7, #4]
 810753e:	681b      	ldr	r3, [r3, #0]
 8107540:	4a44      	ldr	r2, [pc, #272]	@ (8107654 <HAL_DMA_Abort+0x5f8>)
 8107542:	4293      	cmp	r3, r2
 8107544:	d04f      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 8107546:	687b      	ldr	r3, [r7, #4]
 8107548:	681b      	ldr	r3, [r3, #0]
 810754a:	4a43      	ldr	r2, [pc, #268]	@ (8107658 <HAL_DMA_Abort+0x5fc>)
 810754c:	4293      	cmp	r3, r2
 810754e:	d04a      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 8107550:	687b      	ldr	r3, [r7, #4]
 8107552:	681b      	ldr	r3, [r3, #0]
 8107554:	4a41      	ldr	r2, [pc, #260]	@ (810765c <HAL_DMA_Abort+0x600>)
 8107556:	4293      	cmp	r3, r2
 8107558:	d045      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 810755a:	687b      	ldr	r3, [r7, #4]
 810755c:	681b      	ldr	r3, [r3, #0]
 810755e:	4a40      	ldr	r2, [pc, #256]	@ (8107660 <HAL_DMA_Abort+0x604>)
 8107560:	4293      	cmp	r3, r2
 8107562:	d040      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 8107564:	687b      	ldr	r3, [r7, #4]
 8107566:	681b      	ldr	r3, [r3, #0]
 8107568:	4a3e      	ldr	r2, [pc, #248]	@ (8107664 <HAL_DMA_Abort+0x608>)
 810756a:	4293      	cmp	r3, r2
 810756c:	d03b      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 810756e:	687b      	ldr	r3, [r7, #4]
 8107570:	681b      	ldr	r3, [r3, #0]
 8107572:	4a3d      	ldr	r2, [pc, #244]	@ (8107668 <HAL_DMA_Abort+0x60c>)
 8107574:	4293      	cmp	r3, r2
 8107576:	d036      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 8107578:	687b      	ldr	r3, [r7, #4]
 810757a:	681b      	ldr	r3, [r3, #0]
 810757c:	4a3b      	ldr	r2, [pc, #236]	@ (810766c <HAL_DMA_Abort+0x610>)
 810757e:	4293      	cmp	r3, r2
 8107580:	d031      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 8107582:	687b      	ldr	r3, [r7, #4]
 8107584:	681b      	ldr	r3, [r3, #0]
 8107586:	4a3a      	ldr	r2, [pc, #232]	@ (8107670 <HAL_DMA_Abort+0x614>)
 8107588:	4293      	cmp	r3, r2
 810758a:	d02c      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 810758c:	687b      	ldr	r3, [r7, #4]
 810758e:	681b      	ldr	r3, [r3, #0]
 8107590:	4a38      	ldr	r2, [pc, #224]	@ (8107674 <HAL_DMA_Abort+0x618>)
 8107592:	4293      	cmp	r3, r2
 8107594:	d027      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 8107596:	687b      	ldr	r3, [r7, #4]
 8107598:	681b      	ldr	r3, [r3, #0]
 810759a:	4a37      	ldr	r2, [pc, #220]	@ (8107678 <HAL_DMA_Abort+0x61c>)
 810759c:	4293      	cmp	r3, r2
 810759e:	d022      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 81075a0:	687b      	ldr	r3, [r7, #4]
 81075a2:	681b      	ldr	r3, [r3, #0]
 81075a4:	4a35      	ldr	r2, [pc, #212]	@ (810767c <HAL_DMA_Abort+0x620>)
 81075a6:	4293      	cmp	r3, r2
 81075a8:	d01d      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 81075aa:	687b      	ldr	r3, [r7, #4]
 81075ac:	681b      	ldr	r3, [r3, #0]
 81075ae:	4a34      	ldr	r2, [pc, #208]	@ (8107680 <HAL_DMA_Abort+0x624>)
 81075b0:	4293      	cmp	r3, r2
 81075b2:	d018      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 81075b4:	687b      	ldr	r3, [r7, #4]
 81075b6:	681b      	ldr	r3, [r3, #0]
 81075b8:	4a32      	ldr	r2, [pc, #200]	@ (8107684 <HAL_DMA_Abort+0x628>)
 81075ba:	4293      	cmp	r3, r2
 81075bc:	d013      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 81075be:	687b      	ldr	r3, [r7, #4]
 81075c0:	681b      	ldr	r3, [r3, #0]
 81075c2:	4a31      	ldr	r2, [pc, #196]	@ (8107688 <HAL_DMA_Abort+0x62c>)
 81075c4:	4293      	cmp	r3, r2
 81075c6:	d00e      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 81075c8:	687b      	ldr	r3, [r7, #4]
 81075ca:	681b      	ldr	r3, [r3, #0]
 81075cc:	4a2f      	ldr	r2, [pc, #188]	@ (810768c <HAL_DMA_Abort+0x630>)
 81075ce:	4293      	cmp	r3, r2
 81075d0:	d009      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 81075d2:	687b      	ldr	r3, [r7, #4]
 81075d4:	681b      	ldr	r3, [r3, #0]
 81075d6:	4a2e      	ldr	r2, [pc, #184]	@ (8107690 <HAL_DMA_Abort+0x634>)
 81075d8:	4293      	cmp	r3, r2
 81075da:	d004      	beq.n	81075e6 <HAL_DMA_Abort+0x58a>
 81075dc:	687b      	ldr	r3, [r7, #4]
 81075de:	681b      	ldr	r3, [r3, #0]
 81075e0:	4a2c      	ldr	r2, [pc, #176]	@ (8107694 <HAL_DMA_Abort+0x638>)
 81075e2:	4293      	cmp	r3, r2
 81075e4:	d101      	bne.n	81075ea <HAL_DMA_Abort+0x58e>
 81075e6:	2301      	movs	r3, #1
 81075e8:	e000      	b.n	81075ec <HAL_DMA_Abort+0x590>
 81075ea:	2300      	movs	r3, #0
 81075ec:	2b00      	cmp	r3, #0
 81075ee:	d015      	beq.n	810761c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81075f0:	687b      	ldr	r3, [r7, #4]
 81075f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81075f4:	687a      	ldr	r2, [r7, #4]
 81075f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 81075f8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 81075fa:	687b      	ldr	r3, [r7, #4]
 81075fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81075fe:	2b00      	cmp	r3, #0
 8107600:	d00c      	beq.n	810761c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8107602:	687b      	ldr	r3, [r7, #4]
 8107604:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107606:	681a      	ldr	r2, [r3, #0]
 8107608:	687b      	ldr	r3, [r7, #4]
 810760a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810760c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8107610:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8107612:	687b      	ldr	r3, [r7, #4]
 8107614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107616:	687a      	ldr	r2, [r7, #4]
 8107618:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 810761a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 810761c:	687b      	ldr	r3, [r7, #4]
 810761e:	2201      	movs	r2, #1
 8107620:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8107624:	687b      	ldr	r3, [r7, #4]
 8107626:	2200      	movs	r2, #0
 8107628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 810762c:	2300      	movs	r3, #0
}
 810762e:	4618      	mov	r0, r3
 8107630:	3718      	adds	r7, #24
 8107632:	46bd      	mov	sp, r7
 8107634:	bd80      	pop	{r7, pc}
 8107636:	bf00      	nop
 8107638:	40020010 	.word	0x40020010
 810763c:	40020028 	.word	0x40020028
 8107640:	40020040 	.word	0x40020040
 8107644:	40020058 	.word	0x40020058
 8107648:	40020070 	.word	0x40020070
 810764c:	40020088 	.word	0x40020088
 8107650:	400200a0 	.word	0x400200a0
 8107654:	400200b8 	.word	0x400200b8
 8107658:	40020410 	.word	0x40020410
 810765c:	40020428 	.word	0x40020428
 8107660:	40020440 	.word	0x40020440
 8107664:	40020458 	.word	0x40020458
 8107668:	40020470 	.word	0x40020470
 810766c:	40020488 	.word	0x40020488
 8107670:	400204a0 	.word	0x400204a0
 8107674:	400204b8 	.word	0x400204b8
 8107678:	58025408 	.word	0x58025408
 810767c:	5802541c 	.word	0x5802541c
 8107680:	58025430 	.word	0x58025430
 8107684:	58025444 	.word	0x58025444
 8107688:	58025458 	.word	0x58025458
 810768c:	5802546c 	.word	0x5802546c
 8107690:	58025480 	.word	0x58025480
 8107694:	58025494 	.word	0x58025494

08107698 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8107698:	b580      	push	{r7, lr}
 810769a:	b084      	sub	sp, #16
 810769c:	af00      	add	r7, sp, #0
 810769e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81076a0:	687b      	ldr	r3, [r7, #4]
 81076a2:	2b00      	cmp	r3, #0
 81076a4:	d101      	bne.n	81076aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81076a6:	2301      	movs	r3, #1
 81076a8:	e237      	b.n	8107b1a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81076aa:	687b      	ldr	r3, [r7, #4]
 81076ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 81076b0:	b2db      	uxtb	r3, r3
 81076b2:	2b02      	cmp	r3, #2
 81076b4:	d004      	beq.n	81076c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81076b6:	687b      	ldr	r3, [r7, #4]
 81076b8:	2280      	movs	r2, #128	@ 0x80
 81076ba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 81076bc:	2301      	movs	r3, #1
 81076be:	e22c      	b.n	8107b1a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81076c0:	687b      	ldr	r3, [r7, #4]
 81076c2:	681b      	ldr	r3, [r3, #0]
 81076c4:	4a5c      	ldr	r2, [pc, #368]	@ (8107838 <HAL_DMA_Abort_IT+0x1a0>)
 81076c6:	4293      	cmp	r3, r2
 81076c8:	d04a      	beq.n	8107760 <HAL_DMA_Abort_IT+0xc8>
 81076ca:	687b      	ldr	r3, [r7, #4]
 81076cc:	681b      	ldr	r3, [r3, #0]
 81076ce:	4a5b      	ldr	r2, [pc, #364]	@ (810783c <HAL_DMA_Abort_IT+0x1a4>)
 81076d0:	4293      	cmp	r3, r2
 81076d2:	d045      	beq.n	8107760 <HAL_DMA_Abort_IT+0xc8>
 81076d4:	687b      	ldr	r3, [r7, #4]
 81076d6:	681b      	ldr	r3, [r3, #0]
 81076d8:	4a59      	ldr	r2, [pc, #356]	@ (8107840 <HAL_DMA_Abort_IT+0x1a8>)
 81076da:	4293      	cmp	r3, r2
 81076dc:	d040      	beq.n	8107760 <HAL_DMA_Abort_IT+0xc8>
 81076de:	687b      	ldr	r3, [r7, #4]
 81076e0:	681b      	ldr	r3, [r3, #0]
 81076e2:	4a58      	ldr	r2, [pc, #352]	@ (8107844 <HAL_DMA_Abort_IT+0x1ac>)
 81076e4:	4293      	cmp	r3, r2
 81076e6:	d03b      	beq.n	8107760 <HAL_DMA_Abort_IT+0xc8>
 81076e8:	687b      	ldr	r3, [r7, #4]
 81076ea:	681b      	ldr	r3, [r3, #0]
 81076ec:	4a56      	ldr	r2, [pc, #344]	@ (8107848 <HAL_DMA_Abort_IT+0x1b0>)
 81076ee:	4293      	cmp	r3, r2
 81076f0:	d036      	beq.n	8107760 <HAL_DMA_Abort_IT+0xc8>
 81076f2:	687b      	ldr	r3, [r7, #4]
 81076f4:	681b      	ldr	r3, [r3, #0]
 81076f6:	4a55      	ldr	r2, [pc, #340]	@ (810784c <HAL_DMA_Abort_IT+0x1b4>)
 81076f8:	4293      	cmp	r3, r2
 81076fa:	d031      	beq.n	8107760 <HAL_DMA_Abort_IT+0xc8>
 81076fc:	687b      	ldr	r3, [r7, #4]
 81076fe:	681b      	ldr	r3, [r3, #0]
 8107700:	4a53      	ldr	r2, [pc, #332]	@ (8107850 <HAL_DMA_Abort_IT+0x1b8>)
 8107702:	4293      	cmp	r3, r2
 8107704:	d02c      	beq.n	8107760 <HAL_DMA_Abort_IT+0xc8>
 8107706:	687b      	ldr	r3, [r7, #4]
 8107708:	681b      	ldr	r3, [r3, #0]
 810770a:	4a52      	ldr	r2, [pc, #328]	@ (8107854 <HAL_DMA_Abort_IT+0x1bc>)
 810770c:	4293      	cmp	r3, r2
 810770e:	d027      	beq.n	8107760 <HAL_DMA_Abort_IT+0xc8>
 8107710:	687b      	ldr	r3, [r7, #4]
 8107712:	681b      	ldr	r3, [r3, #0]
 8107714:	4a50      	ldr	r2, [pc, #320]	@ (8107858 <HAL_DMA_Abort_IT+0x1c0>)
 8107716:	4293      	cmp	r3, r2
 8107718:	d022      	beq.n	8107760 <HAL_DMA_Abort_IT+0xc8>
 810771a:	687b      	ldr	r3, [r7, #4]
 810771c:	681b      	ldr	r3, [r3, #0]
 810771e:	4a4f      	ldr	r2, [pc, #316]	@ (810785c <HAL_DMA_Abort_IT+0x1c4>)
 8107720:	4293      	cmp	r3, r2
 8107722:	d01d      	beq.n	8107760 <HAL_DMA_Abort_IT+0xc8>
 8107724:	687b      	ldr	r3, [r7, #4]
 8107726:	681b      	ldr	r3, [r3, #0]
 8107728:	4a4d      	ldr	r2, [pc, #308]	@ (8107860 <HAL_DMA_Abort_IT+0x1c8>)
 810772a:	4293      	cmp	r3, r2
 810772c:	d018      	beq.n	8107760 <HAL_DMA_Abort_IT+0xc8>
 810772e:	687b      	ldr	r3, [r7, #4]
 8107730:	681b      	ldr	r3, [r3, #0]
 8107732:	4a4c      	ldr	r2, [pc, #304]	@ (8107864 <HAL_DMA_Abort_IT+0x1cc>)
 8107734:	4293      	cmp	r3, r2
 8107736:	d013      	beq.n	8107760 <HAL_DMA_Abort_IT+0xc8>
 8107738:	687b      	ldr	r3, [r7, #4]
 810773a:	681b      	ldr	r3, [r3, #0]
 810773c:	4a4a      	ldr	r2, [pc, #296]	@ (8107868 <HAL_DMA_Abort_IT+0x1d0>)
 810773e:	4293      	cmp	r3, r2
 8107740:	d00e      	beq.n	8107760 <HAL_DMA_Abort_IT+0xc8>
 8107742:	687b      	ldr	r3, [r7, #4]
 8107744:	681b      	ldr	r3, [r3, #0]
 8107746:	4a49      	ldr	r2, [pc, #292]	@ (810786c <HAL_DMA_Abort_IT+0x1d4>)
 8107748:	4293      	cmp	r3, r2
 810774a:	d009      	beq.n	8107760 <HAL_DMA_Abort_IT+0xc8>
 810774c:	687b      	ldr	r3, [r7, #4]
 810774e:	681b      	ldr	r3, [r3, #0]
 8107750:	4a47      	ldr	r2, [pc, #284]	@ (8107870 <HAL_DMA_Abort_IT+0x1d8>)
 8107752:	4293      	cmp	r3, r2
 8107754:	d004      	beq.n	8107760 <HAL_DMA_Abort_IT+0xc8>
 8107756:	687b      	ldr	r3, [r7, #4]
 8107758:	681b      	ldr	r3, [r3, #0]
 810775a:	4a46      	ldr	r2, [pc, #280]	@ (8107874 <HAL_DMA_Abort_IT+0x1dc>)
 810775c:	4293      	cmp	r3, r2
 810775e:	d101      	bne.n	8107764 <HAL_DMA_Abort_IT+0xcc>
 8107760:	2301      	movs	r3, #1
 8107762:	e000      	b.n	8107766 <HAL_DMA_Abort_IT+0xce>
 8107764:	2300      	movs	r3, #0
 8107766:	2b00      	cmp	r3, #0
 8107768:	f000 8086 	beq.w	8107878 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 810776c:	687b      	ldr	r3, [r7, #4]
 810776e:	2204      	movs	r2, #4
 8107770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8107774:	687b      	ldr	r3, [r7, #4]
 8107776:	681b      	ldr	r3, [r3, #0]
 8107778:	4a2f      	ldr	r2, [pc, #188]	@ (8107838 <HAL_DMA_Abort_IT+0x1a0>)
 810777a:	4293      	cmp	r3, r2
 810777c:	d04a      	beq.n	8107814 <HAL_DMA_Abort_IT+0x17c>
 810777e:	687b      	ldr	r3, [r7, #4]
 8107780:	681b      	ldr	r3, [r3, #0]
 8107782:	4a2e      	ldr	r2, [pc, #184]	@ (810783c <HAL_DMA_Abort_IT+0x1a4>)
 8107784:	4293      	cmp	r3, r2
 8107786:	d045      	beq.n	8107814 <HAL_DMA_Abort_IT+0x17c>
 8107788:	687b      	ldr	r3, [r7, #4]
 810778a:	681b      	ldr	r3, [r3, #0]
 810778c:	4a2c      	ldr	r2, [pc, #176]	@ (8107840 <HAL_DMA_Abort_IT+0x1a8>)
 810778e:	4293      	cmp	r3, r2
 8107790:	d040      	beq.n	8107814 <HAL_DMA_Abort_IT+0x17c>
 8107792:	687b      	ldr	r3, [r7, #4]
 8107794:	681b      	ldr	r3, [r3, #0]
 8107796:	4a2b      	ldr	r2, [pc, #172]	@ (8107844 <HAL_DMA_Abort_IT+0x1ac>)
 8107798:	4293      	cmp	r3, r2
 810779a:	d03b      	beq.n	8107814 <HAL_DMA_Abort_IT+0x17c>
 810779c:	687b      	ldr	r3, [r7, #4]
 810779e:	681b      	ldr	r3, [r3, #0]
 81077a0:	4a29      	ldr	r2, [pc, #164]	@ (8107848 <HAL_DMA_Abort_IT+0x1b0>)
 81077a2:	4293      	cmp	r3, r2
 81077a4:	d036      	beq.n	8107814 <HAL_DMA_Abort_IT+0x17c>
 81077a6:	687b      	ldr	r3, [r7, #4]
 81077a8:	681b      	ldr	r3, [r3, #0]
 81077aa:	4a28      	ldr	r2, [pc, #160]	@ (810784c <HAL_DMA_Abort_IT+0x1b4>)
 81077ac:	4293      	cmp	r3, r2
 81077ae:	d031      	beq.n	8107814 <HAL_DMA_Abort_IT+0x17c>
 81077b0:	687b      	ldr	r3, [r7, #4]
 81077b2:	681b      	ldr	r3, [r3, #0]
 81077b4:	4a26      	ldr	r2, [pc, #152]	@ (8107850 <HAL_DMA_Abort_IT+0x1b8>)
 81077b6:	4293      	cmp	r3, r2
 81077b8:	d02c      	beq.n	8107814 <HAL_DMA_Abort_IT+0x17c>
 81077ba:	687b      	ldr	r3, [r7, #4]
 81077bc:	681b      	ldr	r3, [r3, #0]
 81077be:	4a25      	ldr	r2, [pc, #148]	@ (8107854 <HAL_DMA_Abort_IT+0x1bc>)
 81077c0:	4293      	cmp	r3, r2
 81077c2:	d027      	beq.n	8107814 <HAL_DMA_Abort_IT+0x17c>
 81077c4:	687b      	ldr	r3, [r7, #4]
 81077c6:	681b      	ldr	r3, [r3, #0]
 81077c8:	4a23      	ldr	r2, [pc, #140]	@ (8107858 <HAL_DMA_Abort_IT+0x1c0>)
 81077ca:	4293      	cmp	r3, r2
 81077cc:	d022      	beq.n	8107814 <HAL_DMA_Abort_IT+0x17c>
 81077ce:	687b      	ldr	r3, [r7, #4]
 81077d0:	681b      	ldr	r3, [r3, #0]
 81077d2:	4a22      	ldr	r2, [pc, #136]	@ (810785c <HAL_DMA_Abort_IT+0x1c4>)
 81077d4:	4293      	cmp	r3, r2
 81077d6:	d01d      	beq.n	8107814 <HAL_DMA_Abort_IT+0x17c>
 81077d8:	687b      	ldr	r3, [r7, #4]
 81077da:	681b      	ldr	r3, [r3, #0]
 81077dc:	4a20      	ldr	r2, [pc, #128]	@ (8107860 <HAL_DMA_Abort_IT+0x1c8>)
 81077de:	4293      	cmp	r3, r2
 81077e0:	d018      	beq.n	8107814 <HAL_DMA_Abort_IT+0x17c>
 81077e2:	687b      	ldr	r3, [r7, #4]
 81077e4:	681b      	ldr	r3, [r3, #0]
 81077e6:	4a1f      	ldr	r2, [pc, #124]	@ (8107864 <HAL_DMA_Abort_IT+0x1cc>)
 81077e8:	4293      	cmp	r3, r2
 81077ea:	d013      	beq.n	8107814 <HAL_DMA_Abort_IT+0x17c>
 81077ec:	687b      	ldr	r3, [r7, #4]
 81077ee:	681b      	ldr	r3, [r3, #0]
 81077f0:	4a1d      	ldr	r2, [pc, #116]	@ (8107868 <HAL_DMA_Abort_IT+0x1d0>)
 81077f2:	4293      	cmp	r3, r2
 81077f4:	d00e      	beq.n	8107814 <HAL_DMA_Abort_IT+0x17c>
 81077f6:	687b      	ldr	r3, [r7, #4]
 81077f8:	681b      	ldr	r3, [r3, #0]
 81077fa:	4a1c      	ldr	r2, [pc, #112]	@ (810786c <HAL_DMA_Abort_IT+0x1d4>)
 81077fc:	4293      	cmp	r3, r2
 81077fe:	d009      	beq.n	8107814 <HAL_DMA_Abort_IT+0x17c>
 8107800:	687b      	ldr	r3, [r7, #4]
 8107802:	681b      	ldr	r3, [r3, #0]
 8107804:	4a1a      	ldr	r2, [pc, #104]	@ (8107870 <HAL_DMA_Abort_IT+0x1d8>)
 8107806:	4293      	cmp	r3, r2
 8107808:	d004      	beq.n	8107814 <HAL_DMA_Abort_IT+0x17c>
 810780a:	687b      	ldr	r3, [r7, #4]
 810780c:	681b      	ldr	r3, [r3, #0]
 810780e:	4a19      	ldr	r2, [pc, #100]	@ (8107874 <HAL_DMA_Abort_IT+0x1dc>)
 8107810:	4293      	cmp	r3, r2
 8107812:	d108      	bne.n	8107826 <HAL_DMA_Abort_IT+0x18e>
 8107814:	687b      	ldr	r3, [r7, #4]
 8107816:	681b      	ldr	r3, [r3, #0]
 8107818:	681a      	ldr	r2, [r3, #0]
 810781a:	687b      	ldr	r3, [r7, #4]
 810781c:	681b      	ldr	r3, [r3, #0]
 810781e:	f022 0201 	bic.w	r2, r2, #1
 8107822:	601a      	str	r2, [r3, #0]
 8107824:	e178      	b.n	8107b18 <HAL_DMA_Abort_IT+0x480>
 8107826:	687b      	ldr	r3, [r7, #4]
 8107828:	681b      	ldr	r3, [r3, #0]
 810782a:	681a      	ldr	r2, [r3, #0]
 810782c:	687b      	ldr	r3, [r7, #4]
 810782e:	681b      	ldr	r3, [r3, #0]
 8107830:	f022 0201 	bic.w	r2, r2, #1
 8107834:	601a      	str	r2, [r3, #0]
 8107836:	e16f      	b.n	8107b18 <HAL_DMA_Abort_IT+0x480>
 8107838:	40020010 	.word	0x40020010
 810783c:	40020028 	.word	0x40020028
 8107840:	40020040 	.word	0x40020040
 8107844:	40020058 	.word	0x40020058
 8107848:	40020070 	.word	0x40020070
 810784c:	40020088 	.word	0x40020088
 8107850:	400200a0 	.word	0x400200a0
 8107854:	400200b8 	.word	0x400200b8
 8107858:	40020410 	.word	0x40020410
 810785c:	40020428 	.word	0x40020428
 8107860:	40020440 	.word	0x40020440
 8107864:	40020458 	.word	0x40020458
 8107868:	40020470 	.word	0x40020470
 810786c:	40020488 	.word	0x40020488
 8107870:	400204a0 	.word	0x400204a0
 8107874:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8107878:	687b      	ldr	r3, [r7, #4]
 810787a:	681b      	ldr	r3, [r3, #0]
 810787c:	681a      	ldr	r2, [r3, #0]
 810787e:	687b      	ldr	r3, [r7, #4]
 8107880:	681b      	ldr	r3, [r3, #0]
 8107882:	f022 020e 	bic.w	r2, r2, #14
 8107886:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8107888:	687b      	ldr	r3, [r7, #4]
 810788a:	681b      	ldr	r3, [r3, #0]
 810788c:	4a6c      	ldr	r2, [pc, #432]	@ (8107a40 <HAL_DMA_Abort_IT+0x3a8>)
 810788e:	4293      	cmp	r3, r2
 8107890:	d04a      	beq.n	8107928 <HAL_DMA_Abort_IT+0x290>
 8107892:	687b      	ldr	r3, [r7, #4]
 8107894:	681b      	ldr	r3, [r3, #0]
 8107896:	4a6b      	ldr	r2, [pc, #428]	@ (8107a44 <HAL_DMA_Abort_IT+0x3ac>)
 8107898:	4293      	cmp	r3, r2
 810789a:	d045      	beq.n	8107928 <HAL_DMA_Abort_IT+0x290>
 810789c:	687b      	ldr	r3, [r7, #4]
 810789e:	681b      	ldr	r3, [r3, #0]
 81078a0:	4a69      	ldr	r2, [pc, #420]	@ (8107a48 <HAL_DMA_Abort_IT+0x3b0>)
 81078a2:	4293      	cmp	r3, r2
 81078a4:	d040      	beq.n	8107928 <HAL_DMA_Abort_IT+0x290>
 81078a6:	687b      	ldr	r3, [r7, #4]
 81078a8:	681b      	ldr	r3, [r3, #0]
 81078aa:	4a68      	ldr	r2, [pc, #416]	@ (8107a4c <HAL_DMA_Abort_IT+0x3b4>)
 81078ac:	4293      	cmp	r3, r2
 81078ae:	d03b      	beq.n	8107928 <HAL_DMA_Abort_IT+0x290>
 81078b0:	687b      	ldr	r3, [r7, #4]
 81078b2:	681b      	ldr	r3, [r3, #0]
 81078b4:	4a66      	ldr	r2, [pc, #408]	@ (8107a50 <HAL_DMA_Abort_IT+0x3b8>)
 81078b6:	4293      	cmp	r3, r2
 81078b8:	d036      	beq.n	8107928 <HAL_DMA_Abort_IT+0x290>
 81078ba:	687b      	ldr	r3, [r7, #4]
 81078bc:	681b      	ldr	r3, [r3, #0]
 81078be:	4a65      	ldr	r2, [pc, #404]	@ (8107a54 <HAL_DMA_Abort_IT+0x3bc>)
 81078c0:	4293      	cmp	r3, r2
 81078c2:	d031      	beq.n	8107928 <HAL_DMA_Abort_IT+0x290>
 81078c4:	687b      	ldr	r3, [r7, #4]
 81078c6:	681b      	ldr	r3, [r3, #0]
 81078c8:	4a63      	ldr	r2, [pc, #396]	@ (8107a58 <HAL_DMA_Abort_IT+0x3c0>)
 81078ca:	4293      	cmp	r3, r2
 81078cc:	d02c      	beq.n	8107928 <HAL_DMA_Abort_IT+0x290>
 81078ce:	687b      	ldr	r3, [r7, #4]
 81078d0:	681b      	ldr	r3, [r3, #0]
 81078d2:	4a62      	ldr	r2, [pc, #392]	@ (8107a5c <HAL_DMA_Abort_IT+0x3c4>)
 81078d4:	4293      	cmp	r3, r2
 81078d6:	d027      	beq.n	8107928 <HAL_DMA_Abort_IT+0x290>
 81078d8:	687b      	ldr	r3, [r7, #4]
 81078da:	681b      	ldr	r3, [r3, #0]
 81078dc:	4a60      	ldr	r2, [pc, #384]	@ (8107a60 <HAL_DMA_Abort_IT+0x3c8>)
 81078de:	4293      	cmp	r3, r2
 81078e0:	d022      	beq.n	8107928 <HAL_DMA_Abort_IT+0x290>
 81078e2:	687b      	ldr	r3, [r7, #4]
 81078e4:	681b      	ldr	r3, [r3, #0]
 81078e6:	4a5f      	ldr	r2, [pc, #380]	@ (8107a64 <HAL_DMA_Abort_IT+0x3cc>)
 81078e8:	4293      	cmp	r3, r2
 81078ea:	d01d      	beq.n	8107928 <HAL_DMA_Abort_IT+0x290>
 81078ec:	687b      	ldr	r3, [r7, #4]
 81078ee:	681b      	ldr	r3, [r3, #0]
 81078f0:	4a5d      	ldr	r2, [pc, #372]	@ (8107a68 <HAL_DMA_Abort_IT+0x3d0>)
 81078f2:	4293      	cmp	r3, r2
 81078f4:	d018      	beq.n	8107928 <HAL_DMA_Abort_IT+0x290>
 81078f6:	687b      	ldr	r3, [r7, #4]
 81078f8:	681b      	ldr	r3, [r3, #0]
 81078fa:	4a5c      	ldr	r2, [pc, #368]	@ (8107a6c <HAL_DMA_Abort_IT+0x3d4>)
 81078fc:	4293      	cmp	r3, r2
 81078fe:	d013      	beq.n	8107928 <HAL_DMA_Abort_IT+0x290>
 8107900:	687b      	ldr	r3, [r7, #4]
 8107902:	681b      	ldr	r3, [r3, #0]
 8107904:	4a5a      	ldr	r2, [pc, #360]	@ (8107a70 <HAL_DMA_Abort_IT+0x3d8>)
 8107906:	4293      	cmp	r3, r2
 8107908:	d00e      	beq.n	8107928 <HAL_DMA_Abort_IT+0x290>
 810790a:	687b      	ldr	r3, [r7, #4]
 810790c:	681b      	ldr	r3, [r3, #0]
 810790e:	4a59      	ldr	r2, [pc, #356]	@ (8107a74 <HAL_DMA_Abort_IT+0x3dc>)
 8107910:	4293      	cmp	r3, r2
 8107912:	d009      	beq.n	8107928 <HAL_DMA_Abort_IT+0x290>
 8107914:	687b      	ldr	r3, [r7, #4]
 8107916:	681b      	ldr	r3, [r3, #0]
 8107918:	4a57      	ldr	r2, [pc, #348]	@ (8107a78 <HAL_DMA_Abort_IT+0x3e0>)
 810791a:	4293      	cmp	r3, r2
 810791c:	d004      	beq.n	8107928 <HAL_DMA_Abort_IT+0x290>
 810791e:	687b      	ldr	r3, [r7, #4]
 8107920:	681b      	ldr	r3, [r3, #0]
 8107922:	4a56      	ldr	r2, [pc, #344]	@ (8107a7c <HAL_DMA_Abort_IT+0x3e4>)
 8107924:	4293      	cmp	r3, r2
 8107926:	d108      	bne.n	810793a <HAL_DMA_Abort_IT+0x2a2>
 8107928:	687b      	ldr	r3, [r7, #4]
 810792a:	681b      	ldr	r3, [r3, #0]
 810792c:	681a      	ldr	r2, [r3, #0]
 810792e:	687b      	ldr	r3, [r7, #4]
 8107930:	681b      	ldr	r3, [r3, #0]
 8107932:	f022 0201 	bic.w	r2, r2, #1
 8107936:	601a      	str	r2, [r3, #0]
 8107938:	e007      	b.n	810794a <HAL_DMA_Abort_IT+0x2b2>
 810793a:	687b      	ldr	r3, [r7, #4]
 810793c:	681b      	ldr	r3, [r3, #0]
 810793e:	681a      	ldr	r2, [r3, #0]
 8107940:	687b      	ldr	r3, [r7, #4]
 8107942:	681b      	ldr	r3, [r3, #0]
 8107944:	f022 0201 	bic.w	r2, r2, #1
 8107948:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810794a:	687b      	ldr	r3, [r7, #4]
 810794c:	681b      	ldr	r3, [r3, #0]
 810794e:	4a3c      	ldr	r2, [pc, #240]	@ (8107a40 <HAL_DMA_Abort_IT+0x3a8>)
 8107950:	4293      	cmp	r3, r2
 8107952:	d072      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 8107954:	687b      	ldr	r3, [r7, #4]
 8107956:	681b      	ldr	r3, [r3, #0]
 8107958:	4a3a      	ldr	r2, [pc, #232]	@ (8107a44 <HAL_DMA_Abort_IT+0x3ac>)
 810795a:	4293      	cmp	r3, r2
 810795c:	d06d      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 810795e:	687b      	ldr	r3, [r7, #4]
 8107960:	681b      	ldr	r3, [r3, #0]
 8107962:	4a39      	ldr	r2, [pc, #228]	@ (8107a48 <HAL_DMA_Abort_IT+0x3b0>)
 8107964:	4293      	cmp	r3, r2
 8107966:	d068      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 8107968:	687b      	ldr	r3, [r7, #4]
 810796a:	681b      	ldr	r3, [r3, #0]
 810796c:	4a37      	ldr	r2, [pc, #220]	@ (8107a4c <HAL_DMA_Abort_IT+0x3b4>)
 810796e:	4293      	cmp	r3, r2
 8107970:	d063      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 8107972:	687b      	ldr	r3, [r7, #4]
 8107974:	681b      	ldr	r3, [r3, #0]
 8107976:	4a36      	ldr	r2, [pc, #216]	@ (8107a50 <HAL_DMA_Abort_IT+0x3b8>)
 8107978:	4293      	cmp	r3, r2
 810797a:	d05e      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 810797c:	687b      	ldr	r3, [r7, #4]
 810797e:	681b      	ldr	r3, [r3, #0]
 8107980:	4a34      	ldr	r2, [pc, #208]	@ (8107a54 <HAL_DMA_Abort_IT+0x3bc>)
 8107982:	4293      	cmp	r3, r2
 8107984:	d059      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 8107986:	687b      	ldr	r3, [r7, #4]
 8107988:	681b      	ldr	r3, [r3, #0]
 810798a:	4a33      	ldr	r2, [pc, #204]	@ (8107a58 <HAL_DMA_Abort_IT+0x3c0>)
 810798c:	4293      	cmp	r3, r2
 810798e:	d054      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 8107990:	687b      	ldr	r3, [r7, #4]
 8107992:	681b      	ldr	r3, [r3, #0]
 8107994:	4a31      	ldr	r2, [pc, #196]	@ (8107a5c <HAL_DMA_Abort_IT+0x3c4>)
 8107996:	4293      	cmp	r3, r2
 8107998:	d04f      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 810799a:	687b      	ldr	r3, [r7, #4]
 810799c:	681b      	ldr	r3, [r3, #0]
 810799e:	4a30      	ldr	r2, [pc, #192]	@ (8107a60 <HAL_DMA_Abort_IT+0x3c8>)
 81079a0:	4293      	cmp	r3, r2
 81079a2:	d04a      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 81079a4:	687b      	ldr	r3, [r7, #4]
 81079a6:	681b      	ldr	r3, [r3, #0]
 81079a8:	4a2e      	ldr	r2, [pc, #184]	@ (8107a64 <HAL_DMA_Abort_IT+0x3cc>)
 81079aa:	4293      	cmp	r3, r2
 81079ac:	d045      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 81079ae:	687b      	ldr	r3, [r7, #4]
 81079b0:	681b      	ldr	r3, [r3, #0]
 81079b2:	4a2d      	ldr	r2, [pc, #180]	@ (8107a68 <HAL_DMA_Abort_IT+0x3d0>)
 81079b4:	4293      	cmp	r3, r2
 81079b6:	d040      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 81079b8:	687b      	ldr	r3, [r7, #4]
 81079ba:	681b      	ldr	r3, [r3, #0]
 81079bc:	4a2b      	ldr	r2, [pc, #172]	@ (8107a6c <HAL_DMA_Abort_IT+0x3d4>)
 81079be:	4293      	cmp	r3, r2
 81079c0:	d03b      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 81079c2:	687b      	ldr	r3, [r7, #4]
 81079c4:	681b      	ldr	r3, [r3, #0]
 81079c6:	4a2a      	ldr	r2, [pc, #168]	@ (8107a70 <HAL_DMA_Abort_IT+0x3d8>)
 81079c8:	4293      	cmp	r3, r2
 81079ca:	d036      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 81079cc:	687b      	ldr	r3, [r7, #4]
 81079ce:	681b      	ldr	r3, [r3, #0]
 81079d0:	4a28      	ldr	r2, [pc, #160]	@ (8107a74 <HAL_DMA_Abort_IT+0x3dc>)
 81079d2:	4293      	cmp	r3, r2
 81079d4:	d031      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 81079d6:	687b      	ldr	r3, [r7, #4]
 81079d8:	681b      	ldr	r3, [r3, #0]
 81079da:	4a27      	ldr	r2, [pc, #156]	@ (8107a78 <HAL_DMA_Abort_IT+0x3e0>)
 81079dc:	4293      	cmp	r3, r2
 81079de:	d02c      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 81079e0:	687b      	ldr	r3, [r7, #4]
 81079e2:	681b      	ldr	r3, [r3, #0]
 81079e4:	4a25      	ldr	r2, [pc, #148]	@ (8107a7c <HAL_DMA_Abort_IT+0x3e4>)
 81079e6:	4293      	cmp	r3, r2
 81079e8:	d027      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 81079ea:	687b      	ldr	r3, [r7, #4]
 81079ec:	681b      	ldr	r3, [r3, #0]
 81079ee:	4a24      	ldr	r2, [pc, #144]	@ (8107a80 <HAL_DMA_Abort_IT+0x3e8>)
 81079f0:	4293      	cmp	r3, r2
 81079f2:	d022      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 81079f4:	687b      	ldr	r3, [r7, #4]
 81079f6:	681b      	ldr	r3, [r3, #0]
 81079f8:	4a22      	ldr	r2, [pc, #136]	@ (8107a84 <HAL_DMA_Abort_IT+0x3ec>)
 81079fa:	4293      	cmp	r3, r2
 81079fc:	d01d      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 81079fe:	687b      	ldr	r3, [r7, #4]
 8107a00:	681b      	ldr	r3, [r3, #0]
 8107a02:	4a21      	ldr	r2, [pc, #132]	@ (8107a88 <HAL_DMA_Abort_IT+0x3f0>)
 8107a04:	4293      	cmp	r3, r2
 8107a06:	d018      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 8107a08:	687b      	ldr	r3, [r7, #4]
 8107a0a:	681b      	ldr	r3, [r3, #0]
 8107a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8107a8c <HAL_DMA_Abort_IT+0x3f4>)
 8107a0e:	4293      	cmp	r3, r2
 8107a10:	d013      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 8107a12:	687b      	ldr	r3, [r7, #4]
 8107a14:	681b      	ldr	r3, [r3, #0]
 8107a16:	4a1e      	ldr	r2, [pc, #120]	@ (8107a90 <HAL_DMA_Abort_IT+0x3f8>)
 8107a18:	4293      	cmp	r3, r2
 8107a1a:	d00e      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 8107a1c:	687b      	ldr	r3, [r7, #4]
 8107a1e:	681b      	ldr	r3, [r3, #0]
 8107a20:	4a1c      	ldr	r2, [pc, #112]	@ (8107a94 <HAL_DMA_Abort_IT+0x3fc>)
 8107a22:	4293      	cmp	r3, r2
 8107a24:	d009      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 8107a26:	687b      	ldr	r3, [r7, #4]
 8107a28:	681b      	ldr	r3, [r3, #0]
 8107a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8107a98 <HAL_DMA_Abort_IT+0x400>)
 8107a2c:	4293      	cmp	r3, r2
 8107a2e:	d004      	beq.n	8107a3a <HAL_DMA_Abort_IT+0x3a2>
 8107a30:	687b      	ldr	r3, [r7, #4]
 8107a32:	681b      	ldr	r3, [r3, #0]
 8107a34:	4a19      	ldr	r2, [pc, #100]	@ (8107a9c <HAL_DMA_Abort_IT+0x404>)
 8107a36:	4293      	cmp	r3, r2
 8107a38:	d132      	bne.n	8107aa0 <HAL_DMA_Abort_IT+0x408>
 8107a3a:	2301      	movs	r3, #1
 8107a3c:	e031      	b.n	8107aa2 <HAL_DMA_Abort_IT+0x40a>
 8107a3e:	bf00      	nop
 8107a40:	40020010 	.word	0x40020010
 8107a44:	40020028 	.word	0x40020028
 8107a48:	40020040 	.word	0x40020040
 8107a4c:	40020058 	.word	0x40020058
 8107a50:	40020070 	.word	0x40020070
 8107a54:	40020088 	.word	0x40020088
 8107a58:	400200a0 	.word	0x400200a0
 8107a5c:	400200b8 	.word	0x400200b8
 8107a60:	40020410 	.word	0x40020410
 8107a64:	40020428 	.word	0x40020428
 8107a68:	40020440 	.word	0x40020440
 8107a6c:	40020458 	.word	0x40020458
 8107a70:	40020470 	.word	0x40020470
 8107a74:	40020488 	.word	0x40020488
 8107a78:	400204a0 	.word	0x400204a0
 8107a7c:	400204b8 	.word	0x400204b8
 8107a80:	58025408 	.word	0x58025408
 8107a84:	5802541c 	.word	0x5802541c
 8107a88:	58025430 	.word	0x58025430
 8107a8c:	58025444 	.word	0x58025444
 8107a90:	58025458 	.word	0x58025458
 8107a94:	5802546c 	.word	0x5802546c
 8107a98:	58025480 	.word	0x58025480
 8107a9c:	58025494 	.word	0x58025494
 8107aa0:	2300      	movs	r3, #0
 8107aa2:	2b00      	cmp	r3, #0
 8107aa4:	d028      	beq.n	8107af8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8107aa6:	687b      	ldr	r3, [r7, #4]
 8107aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8107aaa:	681a      	ldr	r2, [r3, #0]
 8107aac:	687b      	ldr	r3, [r7, #4]
 8107aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8107ab0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8107ab4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8107ab6:	687b      	ldr	r3, [r7, #4]
 8107ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107aba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8107abc:	687b      	ldr	r3, [r7, #4]
 8107abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107ac0:	f003 031f 	and.w	r3, r3, #31
 8107ac4:	2201      	movs	r2, #1
 8107ac6:	409a      	lsls	r2, r3
 8107ac8:	68fb      	ldr	r3, [r7, #12]
 8107aca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8107acc:	687b      	ldr	r3, [r7, #4]
 8107ace:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107ad0:	687a      	ldr	r2, [r7, #4]
 8107ad2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8107ad4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8107ad6:	687b      	ldr	r3, [r7, #4]
 8107ad8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107ada:	2b00      	cmp	r3, #0
 8107adc:	d00c      	beq.n	8107af8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8107ade:	687b      	ldr	r3, [r7, #4]
 8107ae0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107ae2:	681a      	ldr	r2, [r3, #0]
 8107ae4:	687b      	ldr	r3, [r7, #4]
 8107ae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107ae8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8107aec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8107aee:	687b      	ldr	r3, [r7, #4]
 8107af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107af2:	687a      	ldr	r2, [r7, #4]
 8107af4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8107af6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8107af8:	687b      	ldr	r3, [r7, #4]
 8107afa:	2201      	movs	r2, #1
 8107afc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8107b00:	687b      	ldr	r3, [r7, #4]
 8107b02:	2200      	movs	r2, #0
 8107b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8107b08:	687b      	ldr	r3, [r7, #4]
 8107b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107b0c:	2b00      	cmp	r3, #0
 8107b0e:	d003      	beq.n	8107b18 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8107b10:	687b      	ldr	r3, [r7, #4]
 8107b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107b14:	6878      	ldr	r0, [r7, #4]
 8107b16:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8107b18:	2300      	movs	r3, #0
}
 8107b1a:	4618      	mov	r0, r3
 8107b1c:	3710      	adds	r7, #16
 8107b1e:	46bd      	mov	sp, r7
 8107b20:	bd80      	pop	{r7, pc}
 8107b22:	bf00      	nop

08107b24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8107b24:	b580      	push	{r7, lr}
 8107b26:	b08a      	sub	sp, #40	@ 0x28
 8107b28:	af00      	add	r7, sp, #0
 8107b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8107b2c:	2300      	movs	r3, #0
 8107b2e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8107b30:	4b67      	ldr	r3, [pc, #412]	@ (8107cd0 <HAL_DMA_IRQHandler+0x1ac>)
 8107b32:	681b      	ldr	r3, [r3, #0]
 8107b34:	4a67      	ldr	r2, [pc, #412]	@ (8107cd4 <HAL_DMA_IRQHandler+0x1b0>)
 8107b36:	fba2 2303 	umull	r2, r3, r2, r3
 8107b3a:	0a9b      	lsrs	r3, r3, #10
 8107b3c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8107b3e:	687b      	ldr	r3, [r7, #4]
 8107b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107b42:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8107b44:	687b      	ldr	r3, [r7, #4]
 8107b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107b48:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8107b4a:	6a3b      	ldr	r3, [r7, #32]
 8107b4c:	681b      	ldr	r3, [r3, #0]
 8107b4e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8107b50:	69fb      	ldr	r3, [r7, #28]
 8107b52:	681b      	ldr	r3, [r3, #0]
 8107b54:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8107b56:	687b      	ldr	r3, [r7, #4]
 8107b58:	681b      	ldr	r3, [r3, #0]
 8107b5a:	4a5f      	ldr	r2, [pc, #380]	@ (8107cd8 <HAL_DMA_IRQHandler+0x1b4>)
 8107b5c:	4293      	cmp	r3, r2
 8107b5e:	d04a      	beq.n	8107bf6 <HAL_DMA_IRQHandler+0xd2>
 8107b60:	687b      	ldr	r3, [r7, #4]
 8107b62:	681b      	ldr	r3, [r3, #0]
 8107b64:	4a5d      	ldr	r2, [pc, #372]	@ (8107cdc <HAL_DMA_IRQHandler+0x1b8>)
 8107b66:	4293      	cmp	r3, r2
 8107b68:	d045      	beq.n	8107bf6 <HAL_DMA_IRQHandler+0xd2>
 8107b6a:	687b      	ldr	r3, [r7, #4]
 8107b6c:	681b      	ldr	r3, [r3, #0]
 8107b6e:	4a5c      	ldr	r2, [pc, #368]	@ (8107ce0 <HAL_DMA_IRQHandler+0x1bc>)
 8107b70:	4293      	cmp	r3, r2
 8107b72:	d040      	beq.n	8107bf6 <HAL_DMA_IRQHandler+0xd2>
 8107b74:	687b      	ldr	r3, [r7, #4]
 8107b76:	681b      	ldr	r3, [r3, #0]
 8107b78:	4a5a      	ldr	r2, [pc, #360]	@ (8107ce4 <HAL_DMA_IRQHandler+0x1c0>)
 8107b7a:	4293      	cmp	r3, r2
 8107b7c:	d03b      	beq.n	8107bf6 <HAL_DMA_IRQHandler+0xd2>
 8107b7e:	687b      	ldr	r3, [r7, #4]
 8107b80:	681b      	ldr	r3, [r3, #0]
 8107b82:	4a59      	ldr	r2, [pc, #356]	@ (8107ce8 <HAL_DMA_IRQHandler+0x1c4>)
 8107b84:	4293      	cmp	r3, r2
 8107b86:	d036      	beq.n	8107bf6 <HAL_DMA_IRQHandler+0xd2>
 8107b88:	687b      	ldr	r3, [r7, #4]
 8107b8a:	681b      	ldr	r3, [r3, #0]
 8107b8c:	4a57      	ldr	r2, [pc, #348]	@ (8107cec <HAL_DMA_IRQHandler+0x1c8>)
 8107b8e:	4293      	cmp	r3, r2
 8107b90:	d031      	beq.n	8107bf6 <HAL_DMA_IRQHandler+0xd2>
 8107b92:	687b      	ldr	r3, [r7, #4]
 8107b94:	681b      	ldr	r3, [r3, #0]
 8107b96:	4a56      	ldr	r2, [pc, #344]	@ (8107cf0 <HAL_DMA_IRQHandler+0x1cc>)
 8107b98:	4293      	cmp	r3, r2
 8107b9a:	d02c      	beq.n	8107bf6 <HAL_DMA_IRQHandler+0xd2>
 8107b9c:	687b      	ldr	r3, [r7, #4]
 8107b9e:	681b      	ldr	r3, [r3, #0]
 8107ba0:	4a54      	ldr	r2, [pc, #336]	@ (8107cf4 <HAL_DMA_IRQHandler+0x1d0>)
 8107ba2:	4293      	cmp	r3, r2
 8107ba4:	d027      	beq.n	8107bf6 <HAL_DMA_IRQHandler+0xd2>
 8107ba6:	687b      	ldr	r3, [r7, #4]
 8107ba8:	681b      	ldr	r3, [r3, #0]
 8107baa:	4a53      	ldr	r2, [pc, #332]	@ (8107cf8 <HAL_DMA_IRQHandler+0x1d4>)
 8107bac:	4293      	cmp	r3, r2
 8107bae:	d022      	beq.n	8107bf6 <HAL_DMA_IRQHandler+0xd2>
 8107bb0:	687b      	ldr	r3, [r7, #4]
 8107bb2:	681b      	ldr	r3, [r3, #0]
 8107bb4:	4a51      	ldr	r2, [pc, #324]	@ (8107cfc <HAL_DMA_IRQHandler+0x1d8>)
 8107bb6:	4293      	cmp	r3, r2
 8107bb8:	d01d      	beq.n	8107bf6 <HAL_DMA_IRQHandler+0xd2>
 8107bba:	687b      	ldr	r3, [r7, #4]
 8107bbc:	681b      	ldr	r3, [r3, #0]
 8107bbe:	4a50      	ldr	r2, [pc, #320]	@ (8107d00 <HAL_DMA_IRQHandler+0x1dc>)
 8107bc0:	4293      	cmp	r3, r2
 8107bc2:	d018      	beq.n	8107bf6 <HAL_DMA_IRQHandler+0xd2>
 8107bc4:	687b      	ldr	r3, [r7, #4]
 8107bc6:	681b      	ldr	r3, [r3, #0]
 8107bc8:	4a4e      	ldr	r2, [pc, #312]	@ (8107d04 <HAL_DMA_IRQHandler+0x1e0>)
 8107bca:	4293      	cmp	r3, r2
 8107bcc:	d013      	beq.n	8107bf6 <HAL_DMA_IRQHandler+0xd2>
 8107bce:	687b      	ldr	r3, [r7, #4]
 8107bd0:	681b      	ldr	r3, [r3, #0]
 8107bd2:	4a4d      	ldr	r2, [pc, #308]	@ (8107d08 <HAL_DMA_IRQHandler+0x1e4>)
 8107bd4:	4293      	cmp	r3, r2
 8107bd6:	d00e      	beq.n	8107bf6 <HAL_DMA_IRQHandler+0xd2>
 8107bd8:	687b      	ldr	r3, [r7, #4]
 8107bda:	681b      	ldr	r3, [r3, #0]
 8107bdc:	4a4b      	ldr	r2, [pc, #300]	@ (8107d0c <HAL_DMA_IRQHandler+0x1e8>)
 8107bde:	4293      	cmp	r3, r2
 8107be0:	d009      	beq.n	8107bf6 <HAL_DMA_IRQHandler+0xd2>
 8107be2:	687b      	ldr	r3, [r7, #4]
 8107be4:	681b      	ldr	r3, [r3, #0]
 8107be6:	4a4a      	ldr	r2, [pc, #296]	@ (8107d10 <HAL_DMA_IRQHandler+0x1ec>)
 8107be8:	4293      	cmp	r3, r2
 8107bea:	d004      	beq.n	8107bf6 <HAL_DMA_IRQHandler+0xd2>
 8107bec:	687b      	ldr	r3, [r7, #4]
 8107bee:	681b      	ldr	r3, [r3, #0]
 8107bf0:	4a48      	ldr	r2, [pc, #288]	@ (8107d14 <HAL_DMA_IRQHandler+0x1f0>)
 8107bf2:	4293      	cmp	r3, r2
 8107bf4:	d101      	bne.n	8107bfa <HAL_DMA_IRQHandler+0xd6>
 8107bf6:	2301      	movs	r3, #1
 8107bf8:	e000      	b.n	8107bfc <HAL_DMA_IRQHandler+0xd8>
 8107bfa:	2300      	movs	r3, #0
 8107bfc:	2b00      	cmp	r3, #0
 8107bfe:	f000 842b 	beq.w	8108458 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8107c02:	687b      	ldr	r3, [r7, #4]
 8107c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107c06:	f003 031f 	and.w	r3, r3, #31
 8107c0a:	2208      	movs	r2, #8
 8107c0c:	409a      	lsls	r2, r3
 8107c0e:	69bb      	ldr	r3, [r7, #24]
 8107c10:	4013      	ands	r3, r2
 8107c12:	2b00      	cmp	r3, #0
 8107c14:	f000 80a2 	beq.w	8107d5c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8107c18:	687b      	ldr	r3, [r7, #4]
 8107c1a:	681b      	ldr	r3, [r3, #0]
 8107c1c:	4a2e      	ldr	r2, [pc, #184]	@ (8107cd8 <HAL_DMA_IRQHandler+0x1b4>)
 8107c1e:	4293      	cmp	r3, r2
 8107c20:	d04a      	beq.n	8107cb8 <HAL_DMA_IRQHandler+0x194>
 8107c22:	687b      	ldr	r3, [r7, #4]
 8107c24:	681b      	ldr	r3, [r3, #0]
 8107c26:	4a2d      	ldr	r2, [pc, #180]	@ (8107cdc <HAL_DMA_IRQHandler+0x1b8>)
 8107c28:	4293      	cmp	r3, r2
 8107c2a:	d045      	beq.n	8107cb8 <HAL_DMA_IRQHandler+0x194>
 8107c2c:	687b      	ldr	r3, [r7, #4]
 8107c2e:	681b      	ldr	r3, [r3, #0]
 8107c30:	4a2b      	ldr	r2, [pc, #172]	@ (8107ce0 <HAL_DMA_IRQHandler+0x1bc>)
 8107c32:	4293      	cmp	r3, r2
 8107c34:	d040      	beq.n	8107cb8 <HAL_DMA_IRQHandler+0x194>
 8107c36:	687b      	ldr	r3, [r7, #4]
 8107c38:	681b      	ldr	r3, [r3, #0]
 8107c3a:	4a2a      	ldr	r2, [pc, #168]	@ (8107ce4 <HAL_DMA_IRQHandler+0x1c0>)
 8107c3c:	4293      	cmp	r3, r2
 8107c3e:	d03b      	beq.n	8107cb8 <HAL_DMA_IRQHandler+0x194>
 8107c40:	687b      	ldr	r3, [r7, #4]
 8107c42:	681b      	ldr	r3, [r3, #0]
 8107c44:	4a28      	ldr	r2, [pc, #160]	@ (8107ce8 <HAL_DMA_IRQHandler+0x1c4>)
 8107c46:	4293      	cmp	r3, r2
 8107c48:	d036      	beq.n	8107cb8 <HAL_DMA_IRQHandler+0x194>
 8107c4a:	687b      	ldr	r3, [r7, #4]
 8107c4c:	681b      	ldr	r3, [r3, #0]
 8107c4e:	4a27      	ldr	r2, [pc, #156]	@ (8107cec <HAL_DMA_IRQHandler+0x1c8>)
 8107c50:	4293      	cmp	r3, r2
 8107c52:	d031      	beq.n	8107cb8 <HAL_DMA_IRQHandler+0x194>
 8107c54:	687b      	ldr	r3, [r7, #4]
 8107c56:	681b      	ldr	r3, [r3, #0]
 8107c58:	4a25      	ldr	r2, [pc, #148]	@ (8107cf0 <HAL_DMA_IRQHandler+0x1cc>)
 8107c5a:	4293      	cmp	r3, r2
 8107c5c:	d02c      	beq.n	8107cb8 <HAL_DMA_IRQHandler+0x194>
 8107c5e:	687b      	ldr	r3, [r7, #4]
 8107c60:	681b      	ldr	r3, [r3, #0]
 8107c62:	4a24      	ldr	r2, [pc, #144]	@ (8107cf4 <HAL_DMA_IRQHandler+0x1d0>)
 8107c64:	4293      	cmp	r3, r2
 8107c66:	d027      	beq.n	8107cb8 <HAL_DMA_IRQHandler+0x194>
 8107c68:	687b      	ldr	r3, [r7, #4]
 8107c6a:	681b      	ldr	r3, [r3, #0]
 8107c6c:	4a22      	ldr	r2, [pc, #136]	@ (8107cf8 <HAL_DMA_IRQHandler+0x1d4>)
 8107c6e:	4293      	cmp	r3, r2
 8107c70:	d022      	beq.n	8107cb8 <HAL_DMA_IRQHandler+0x194>
 8107c72:	687b      	ldr	r3, [r7, #4]
 8107c74:	681b      	ldr	r3, [r3, #0]
 8107c76:	4a21      	ldr	r2, [pc, #132]	@ (8107cfc <HAL_DMA_IRQHandler+0x1d8>)
 8107c78:	4293      	cmp	r3, r2
 8107c7a:	d01d      	beq.n	8107cb8 <HAL_DMA_IRQHandler+0x194>
 8107c7c:	687b      	ldr	r3, [r7, #4]
 8107c7e:	681b      	ldr	r3, [r3, #0]
 8107c80:	4a1f      	ldr	r2, [pc, #124]	@ (8107d00 <HAL_DMA_IRQHandler+0x1dc>)
 8107c82:	4293      	cmp	r3, r2
 8107c84:	d018      	beq.n	8107cb8 <HAL_DMA_IRQHandler+0x194>
 8107c86:	687b      	ldr	r3, [r7, #4]
 8107c88:	681b      	ldr	r3, [r3, #0]
 8107c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8107d04 <HAL_DMA_IRQHandler+0x1e0>)
 8107c8c:	4293      	cmp	r3, r2
 8107c8e:	d013      	beq.n	8107cb8 <HAL_DMA_IRQHandler+0x194>
 8107c90:	687b      	ldr	r3, [r7, #4]
 8107c92:	681b      	ldr	r3, [r3, #0]
 8107c94:	4a1c      	ldr	r2, [pc, #112]	@ (8107d08 <HAL_DMA_IRQHandler+0x1e4>)
 8107c96:	4293      	cmp	r3, r2
 8107c98:	d00e      	beq.n	8107cb8 <HAL_DMA_IRQHandler+0x194>
 8107c9a:	687b      	ldr	r3, [r7, #4]
 8107c9c:	681b      	ldr	r3, [r3, #0]
 8107c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8107d0c <HAL_DMA_IRQHandler+0x1e8>)
 8107ca0:	4293      	cmp	r3, r2
 8107ca2:	d009      	beq.n	8107cb8 <HAL_DMA_IRQHandler+0x194>
 8107ca4:	687b      	ldr	r3, [r7, #4]
 8107ca6:	681b      	ldr	r3, [r3, #0]
 8107ca8:	4a19      	ldr	r2, [pc, #100]	@ (8107d10 <HAL_DMA_IRQHandler+0x1ec>)
 8107caa:	4293      	cmp	r3, r2
 8107cac:	d004      	beq.n	8107cb8 <HAL_DMA_IRQHandler+0x194>
 8107cae:	687b      	ldr	r3, [r7, #4]
 8107cb0:	681b      	ldr	r3, [r3, #0]
 8107cb2:	4a18      	ldr	r2, [pc, #96]	@ (8107d14 <HAL_DMA_IRQHandler+0x1f0>)
 8107cb4:	4293      	cmp	r3, r2
 8107cb6:	d12f      	bne.n	8107d18 <HAL_DMA_IRQHandler+0x1f4>
 8107cb8:	687b      	ldr	r3, [r7, #4]
 8107cba:	681b      	ldr	r3, [r3, #0]
 8107cbc:	681b      	ldr	r3, [r3, #0]
 8107cbe:	f003 0304 	and.w	r3, r3, #4
 8107cc2:	2b00      	cmp	r3, #0
 8107cc4:	bf14      	ite	ne
 8107cc6:	2301      	movne	r3, #1
 8107cc8:	2300      	moveq	r3, #0
 8107cca:	b2db      	uxtb	r3, r3
 8107ccc:	e02e      	b.n	8107d2c <HAL_DMA_IRQHandler+0x208>
 8107cce:	bf00      	nop
 8107cd0:	10000000 	.word	0x10000000
 8107cd4:	1b4e81b5 	.word	0x1b4e81b5
 8107cd8:	40020010 	.word	0x40020010
 8107cdc:	40020028 	.word	0x40020028
 8107ce0:	40020040 	.word	0x40020040
 8107ce4:	40020058 	.word	0x40020058
 8107ce8:	40020070 	.word	0x40020070
 8107cec:	40020088 	.word	0x40020088
 8107cf0:	400200a0 	.word	0x400200a0
 8107cf4:	400200b8 	.word	0x400200b8
 8107cf8:	40020410 	.word	0x40020410
 8107cfc:	40020428 	.word	0x40020428
 8107d00:	40020440 	.word	0x40020440
 8107d04:	40020458 	.word	0x40020458
 8107d08:	40020470 	.word	0x40020470
 8107d0c:	40020488 	.word	0x40020488
 8107d10:	400204a0 	.word	0x400204a0
 8107d14:	400204b8 	.word	0x400204b8
 8107d18:	687b      	ldr	r3, [r7, #4]
 8107d1a:	681b      	ldr	r3, [r3, #0]
 8107d1c:	681b      	ldr	r3, [r3, #0]
 8107d1e:	f003 0308 	and.w	r3, r3, #8
 8107d22:	2b00      	cmp	r3, #0
 8107d24:	bf14      	ite	ne
 8107d26:	2301      	movne	r3, #1
 8107d28:	2300      	moveq	r3, #0
 8107d2a:	b2db      	uxtb	r3, r3
 8107d2c:	2b00      	cmp	r3, #0
 8107d2e:	d015      	beq.n	8107d5c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8107d30:	687b      	ldr	r3, [r7, #4]
 8107d32:	681b      	ldr	r3, [r3, #0]
 8107d34:	681a      	ldr	r2, [r3, #0]
 8107d36:	687b      	ldr	r3, [r7, #4]
 8107d38:	681b      	ldr	r3, [r3, #0]
 8107d3a:	f022 0204 	bic.w	r2, r2, #4
 8107d3e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8107d40:	687b      	ldr	r3, [r7, #4]
 8107d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107d44:	f003 031f 	and.w	r3, r3, #31
 8107d48:	2208      	movs	r2, #8
 8107d4a:	409a      	lsls	r2, r3
 8107d4c:	6a3b      	ldr	r3, [r7, #32]
 8107d4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8107d50:	687b      	ldr	r3, [r7, #4]
 8107d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107d54:	f043 0201 	orr.w	r2, r3, #1
 8107d58:	687b      	ldr	r3, [r7, #4]
 8107d5a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8107d5c:	687b      	ldr	r3, [r7, #4]
 8107d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107d60:	f003 031f 	and.w	r3, r3, #31
 8107d64:	69ba      	ldr	r2, [r7, #24]
 8107d66:	fa22 f303 	lsr.w	r3, r2, r3
 8107d6a:	f003 0301 	and.w	r3, r3, #1
 8107d6e:	2b00      	cmp	r3, #0
 8107d70:	d06e      	beq.n	8107e50 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8107d72:	687b      	ldr	r3, [r7, #4]
 8107d74:	681b      	ldr	r3, [r3, #0]
 8107d76:	4a69      	ldr	r2, [pc, #420]	@ (8107f1c <HAL_DMA_IRQHandler+0x3f8>)
 8107d78:	4293      	cmp	r3, r2
 8107d7a:	d04a      	beq.n	8107e12 <HAL_DMA_IRQHandler+0x2ee>
 8107d7c:	687b      	ldr	r3, [r7, #4]
 8107d7e:	681b      	ldr	r3, [r3, #0]
 8107d80:	4a67      	ldr	r2, [pc, #412]	@ (8107f20 <HAL_DMA_IRQHandler+0x3fc>)
 8107d82:	4293      	cmp	r3, r2
 8107d84:	d045      	beq.n	8107e12 <HAL_DMA_IRQHandler+0x2ee>
 8107d86:	687b      	ldr	r3, [r7, #4]
 8107d88:	681b      	ldr	r3, [r3, #0]
 8107d8a:	4a66      	ldr	r2, [pc, #408]	@ (8107f24 <HAL_DMA_IRQHandler+0x400>)
 8107d8c:	4293      	cmp	r3, r2
 8107d8e:	d040      	beq.n	8107e12 <HAL_DMA_IRQHandler+0x2ee>
 8107d90:	687b      	ldr	r3, [r7, #4]
 8107d92:	681b      	ldr	r3, [r3, #0]
 8107d94:	4a64      	ldr	r2, [pc, #400]	@ (8107f28 <HAL_DMA_IRQHandler+0x404>)
 8107d96:	4293      	cmp	r3, r2
 8107d98:	d03b      	beq.n	8107e12 <HAL_DMA_IRQHandler+0x2ee>
 8107d9a:	687b      	ldr	r3, [r7, #4]
 8107d9c:	681b      	ldr	r3, [r3, #0]
 8107d9e:	4a63      	ldr	r2, [pc, #396]	@ (8107f2c <HAL_DMA_IRQHandler+0x408>)
 8107da0:	4293      	cmp	r3, r2
 8107da2:	d036      	beq.n	8107e12 <HAL_DMA_IRQHandler+0x2ee>
 8107da4:	687b      	ldr	r3, [r7, #4]
 8107da6:	681b      	ldr	r3, [r3, #0]
 8107da8:	4a61      	ldr	r2, [pc, #388]	@ (8107f30 <HAL_DMA_IRQHandler+0x40c>)
 8107daa:	4293      	cmp	r3, r2
 8107dac:	d031      	beq.n	8107e12 <HAL_DMA_IRQHandler+0x2ee>
 8107dae:	687b      	ldr	r3, [r7, #4]
 8107db0:	681b      	ldr	r3, [r3, #0]
 8107db2:	4a60      	ldr	r2, [pc, #384]	@ (8107f34 <HAL_DMA_IRQHandler+0x410>)
 8107db4:	4293      	cmp	r3, r2
 8107db6:	d02c      	beq.n	8107e12 <HAL_DMA_IRQHandler+0x2ee>
 8107db8:	687b      	ldr	r3, [r7, #4]
 8107dba:	681b      	ldr	r3, [r3, #0]
 8107dbc:	4a5e      	ldr	r2, [pc, #376]	@ (8107f38 <HAL_DMA_IRQHandler+0x414>)
 8107dbe:	4293      	cmp	r3, r2
 8107dc0:	d027      	beq.n	8107e12 <HAL_DMA_IRQHandler+0x2ee>
 8107dc2:	687b      	ldr	r3, [r7, #4]
 8107dc4:	681b      	ldr	r3, [r3, #0]
 8107dc6:	4a5d      	ldr	r2, [pc, #372]	@ (8107f3c <HAL_DMA_IRQHandler+0x418>)
 8107dc8:	4293      	cmp	r3, r2
 8107dca:	d022      	beq.n	8107e12 <HAL_DMA_IRQHandler+0x2ee>
 8107dcc:	687b      	ldr	r3, [r7, #4]
 8107dce:	681b      	ldr	r3, [r3, #0]
 8107dd0:	4a5b      	ldr	r2, [pc, #364]	@ (8107f40 <HAL_DMA_IRQHandler+0x41c>)
 8107dd2:	4293      	cmp	r3, r2
 8107dd4:	d01d      	beq.n	8107e12 <HAL_DMA_IRQHandler+0x2ee>
 8107dd6:	687b      	ldr	r3, [r7, #4]
 8107dd8:	681b      	ldr	r3, [r3, #0]
 8107dda:	4a5a      	ldr	r2, [pc, #360]	@ (8107f44 <HAL_DMA_IRQHandler+0x420>)
 8107ddc:	4293      	cmp	r3, r2
 8107dde:	d018      	beq.n	8107e12 <HAL_DMA_IRQHandler+0x2ee>
 8107de0:	687b      	ldr	r3, [r7, #4]
 8107de2:	681b      	ldr	r3, [r3, #0]
 8107de4:	4a58      	ldr	r2, [pc, #352]	@ (8107f48 <HAL_DMA_IRQHandler+0x424>)
 8107de6:	4293      	cmp	r3, r2
 8107de8:	d013      	beq.n	8107e12 <HAL_DMA_IRQHandler+0x2ee>
 8107dea:	687b      	ldr	r3, [r7, #4]
 8107dec:	681b      	ldr	r3, [r3, #0]
 8107dee:	4a57      	ldr	r2, [pc, #348]	@ (8107f4c <HAL_DMA_IRQHandler+0x428>)
 8107df0:	4293      	cmp	r3, r2
 8107df2:	d00e      	beq.n	8107e12 <HAL_DMA_IRQHandler+0x2ee>
 8107df4:	687b      	ldr	r3, [r7, #4]
 8107df6:	681b      	ldr	r3, [r3, #0]
 8107df8:	4a55      	ldr	r2, [pc, #340]	@ (8107f50 <HAL_DMA_IRQHandler+0x42c>)
 8107dfa:	4293      	cmp	r3, r2
 8107dfc:	d009      	beq.n	8107e12 <HAL_DMA_IRQHandler+0x2ee>
 8107dfe:	687b      	ldr	r3, [r7, #4]
 8107e00:	681b      	ldr	r3, [r3, #0]
 8107e02:	4a54      	ldr	r2, [pc, #336]	@ (8107f54 <HAL_DMA_IRQHandler+0x430>)
 8107e04:	4293      	cmp	r3, r2
 8107e06:	d004      	beq.n	8107e12 <HAL_DMA_IRQHandler+0x2ee>
 8107e08:	687b      	ldr	r3, [r7, #4]
 8107e0a:	681b      	ldr	r3, [r3, #0]
 8107e0c:	4a52      	ldr	r2, [pc, #328]	@ (8107f58 <HAL_DMA_IRQHandler+0x434>)
 8107e0e:	4293      	cmp	r3, r2
 8107e10:	d10a      	bne.n	8107e28 <HAL_DMA_IRQHandler+0x304>
 8107e12:	687b      	ldr	r3, [r7, #4]
 8107e14:	681b      	ldr	r3, [r3, #0]
 8107e16:	695b      	ldr	r3, [r3, #20]
 8107e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8107e1c:	2b00      	cmp	r3, #0
 8107e1e:	bf14      	ite	ne
 8107e20:	2301      	movne	r3, #1
 8107e22:	2300      	moveq	r3, #0
 8107e24:	b2db      	uxtb	r3, r3
 8107e26:	e003      	b.n	8107e30 <HAL_DMA_IRQHandler+0x30c>
 8107e28:	687b      	ldr	r3, [r7, #4]
 8107e2a:	681b      	ldr	r3, [r3, #0]
 8107e2c:	681b      	ldr	r3, [r3, #0]
 8107e2e:	2300      	movs	r3, #0
 8107e30:	2b00      	cmp	r3, #0
 8107e32:	d00d      	beq.n	8107e50 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8107e34:	687b      	ldr	r3, [r7, #4]
 8107e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107e38:	f003 031f 	and.w	r3, r3, #31
 8107e3c:	2201      	movs	r2, #1
 8107e3e:	409a      	lsls	r2, r3
 8107e40:	6a3b      	ldr	r3, [r7, #32]
 8107e42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8107e44:	687b      	ldr	r3, [r7, #4]
 8107e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107e48:	f043 0202 	orr.w	r2, r3, #2
 8107e4c:	687b      	ldr	r3, [r7, #4]
 8107e4e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8107e50:	687b      	ldr	r3, [r7, #4]
 8107e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107e54:	f003 031f 	and.w	r3, r3, #31
 8107e58:	2204      	movs	r2, #4
 8107e5a:	409a      	lsls	r2, r3
 8107e5c:	69bb      	ldr	r3, [r7, #24]
 8107e5e:	4013      	ands	r3, r2
 8107e60:	2b00      	cmp	r3, #0
 8107e62:	f000 808f 	beq.w	8107f84 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8107e66:	687b      	ldr	r3, [r7, #4]
 8107e68:	681b      	ldr	r3, [r3, #0]
 8107e6a:	4a2c      	ldr	r2, [pc, #176]	@ (8107f1c <HAL_DMA_IRQHandler+0x3f8>)
 8107e6c:	4293      	cmp	r3, r2
 8107e6e:	d04a      	beq.n	8107f06 <HAL_DMA_IRQHandler+0x3e2>
 8107e70:	687b      	ldr	r3, [r7, #4]
 8107e72:	681b      	ldr	r3, [r3, #0]
 8107e74:	4a2a      	ldr	r2, [pc, #168]	@ (8107f20 <HAL_DMA_IRQHandler+0x3fc>)
 8107e76:	4293      	cmp	r3, r2
 8107e78:	d045      	beq.n	8107f06 <HAL_DMA_IRQHandler+0x3e2>
 8107e7a:	687b      	ldr	r3, [r7, #4]
 8107e7c:	681b      	ldr	r3, [r3, #0]
 8107e7e:	4a29      	ldr	r2, [pc, #164]	@ (8107f24 <HAL_DMA_IRQHandler+0x400>)
 8107e80:	4293      	cmp	r3, r2
 8107e82:	d040      	beq.n	8107f06 <HAL_DMA_IRQHandler+0x3e2>
 8107e84:	687b      	ldr	r3, [r7, #4]
 8107e86:	681b      	ldr	r3, [r3, #0]
 8107e88:	4a27      	ldr	r2, [pc, #156]	@ (8107f28 <HAL_DMA_IRQHandler+0x404>)
 8107e8a:	4293      	cmp	r3, r2
 8107e8c:	d03b      	beq.n	8107f06 <HAL_DMA_IRQHandler+0x3e2>
 8107e8e:	687b      	ldr	r3, [r7, #4]
 8107e90:	681b      	ldr	r3, [r3, #0]
 8107e92:	4a26      	ldr	r2, [pc, #152]	@ (8107f2c <HAL_DMA_IRQHandler+0x408>)
 8107e94:	4293      	cmp	r3, r2
 8107e96:	d036      	beq.n	8107f06 <HAL_DMA_IRQHandler+0x3e2>
 8107e98:	687b      	ldr	r3, [r7, #4]
 8107e9a:	681b      	ldr	r3, [r3, #0]
 8107e9c:	4a24      	ldr	r2, [pc, #144]	@ (8107f30 <HAL_DMA_IRQHandler+0x40c>)
 8107e9e:	4293      	cmp	r3, r2
 8107ea0:	d031      	beq.n	8107f06 <HAL_DMA_IRQHandler+0x3e2>
 8107ea2:	687b      	ldr	r3, [r7, #4]
 8107ea4:	681b      	ldr	r3, [r3, #0]
 8107ea6:	4a23      	ldr	r2, [pc, #140]	@ (8107f34 <HAL_DMA_IRQHandler+0x410>)
 8107ea8:	4293      	cmp	r3, r2
 8107eaa:	d02c      	beq.n	8107f06 <HAL_DMA_IRQHandler+0x3e2>
 8107eac:	687b      	ldr	r3, [r7, #4]
 8107eae:	681b      	ldr	r3, [r3, #0]
 8107eb0:	4a21      	ldr	r2, [pc, #132]	@ (8107f38 <HAL_DMA_IRQHandler+0x414>)
 8107eb2:	4293      	cmp	r3, r2
 8107eb4:	d027      	beq.n	8107f06 <HAL_DMA_IRQHandler+0x3e2>
 8107eb6:	687b      	ldr	r3, [r7, #4]
 8107eb8:	681b      	ldr	r3, [r3, #0]
 8107eba:	4a20      	ldr	r2, [pc, #128]	@ (8107f3c <HAL_DMA_IRQHandler+0x418>)
 8107ebc:	4293      	cmp	r3, r2
 8107ebe:	d022      	beq.n	8107f06 <HAL_DMA_IRQHandler+0x3e2>
 8107ec0:	687b      	ldr	r3, [r7, #4]
 8107ec2:	681b      	ldr	r3, [r3, #0]
 8107ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8107f40 <HAL_DMA_IRQHandler+0x41c>)
 8107ec6:	4293      	cmp	r3, r2
 8107ec8:	d01d      	beq.n	8107f06 <HAL_DMA_IRQHandler+0x3e2>
 8107eca:	687b      	ldr	r3, [r7, #4]
 8107ecc:	681b      	ldr	r3, [r3, #0]
 8107ece:	4a1d      	ldr	r2, [pc, #116]	@ (8107f44 <HAL_DMA_IRQHandler+0x420>)
 8107ed0:	4293      	cmp	r3, r2
 8107ed2:	d018      	beq.n	8107f06 <HAL_DMA_IRQHandler+0x3e2>
 8107ed4:	687b      	ldr	r3, [r7, #4]
 8107ed6:	681b      	ldr	r3, [r3, #0]
 8107ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8107f48 <HAL_DMA_IRQHandler+0x424>)
 8107eda:	4293      	cmp	r3, r2
 8107edc:	d013      	beq.n	8107f06 <HAL_DMA_IRQHandler+0x3e2>
 8107ede:	687b      	ldr	r3, [r7, #4]
 8107ee0:	681b      	ldr	r3, [r3, #0]
 8107ee2:	4a1a      	ldr	r2, [pc, #104]	@ (8107f4c <HAL_DMA_IRQHandler+0x428>)
 8107ee4:	4293      	cmp	r3, r2
 8107ee6:	d00e      	beq.n	8107f06 <HAL_DMA_IRQHandler+0x3e2>
 8107ee8:	687b      	ldr	r3, [r7, #4]
 8107eea:	681b      	ldr	r3, [r3, #0]
 8107eec:	4a18      	ldr	r2, [pc, #96]	@ (8107f50 <HAL_DMA_IRQHandler+0x42c>)
 8107eee:	4293      	cmp	r3, r2
 8107ef0:	d009      	beq.n	8107f06 <HAL_DMA_IRQHandler+0x3e2>
 8107ef2:	687b      	ldr	r3, [r7, #4]
 8107ef4:	681b      	ldr	r3, [r3, #0]
 8107ef6:	4a17      	ldr	r2, [pc, #92]	@ (8107f54 <HAL_DMA_IRQHandler+0x430>)
 8107ef8:	4293      	cmp	r3, r2
 8107efa:	d004      	beq.n	8107f06 <HAL_DMA_IRQHandler+0x3e2>
 8107efc:	687b      	ldr	r3, [r7, #4]
 8107efe:	681b      	ldr	r3, [r3, #0]
 8107f00:	4a15      	ldr	r2, [pc, #84]	@ (8107f58 <HAL_DMA_IRQHandler+0x434>)
 8107f02:	4293      	cmp	r3, r2
 8107f04:	d12a      	bne.n	8107f5c <HAL_DMA_IRQHandler+0x438>
 8107f06:	687b      	ldr	r3, [r7, #4]
 8107f08:	681b      	ldr	r3, [r3, #0]
 8107f0a:	681b      	ldr	r3, [r3, #0]
 8107f0c:	f003 0302 	and.w	r3, r3, #2
 8107f10:	2b00      	cmp	r3, #0
 8107f12:	bf14      	ite	ne
 8107f14:	2301      	movne	r3, #1
 8107f16:	2300      	moveq	r3, #0
 8107f18:	b2db      	uxtb	r3, r3
 8107f1a:	e023      	b.n	8107f64 <HAL_DMA_IRQHandler+0x440>
 8107f1c:	40020010 	.word	0x40020010
 8107f20:	40020028 	.word	0x40020028
 8107f24:	40020040 	.word	0x40020040
 8107f28:	40020058 	.word	0x40020058
 8107f2c:	40020070 	.word	0x40020070
 8107f30:	40020088 	.word	0x40020088
 8107f34:	400200a0 	.word	0x400200a0
 8107f38:	400200b8 	.word	0x400200b8
 8107f3c:	40020410 	.word	0x40020410
 8107f40:	40020428 	.word	0x40020428
 8107f44:	40020440 	.word	0x40020440
 8107f48:	40020458 	.word	0x40020458
 8107f4c:	40020470 	.word	0x40020470
 8107f50:	40020488 	.word	0x40020488
 8107f54:	400204a0 	.word	0x400204a0
 8107f58:	400204b8 	.word	0x400204b8
 8107f5c:	687b      	ldr	r3, [r7, #4]
 8107f5e:	681b      	ldr	r3, [r3, #0]
 8107f60:	681b      	ldr	r3, [r3, #0]
 8107f62:	2300      	movs	r3, #0
 8107f64:	2b00      	cmp	r3, #0
 8107f66:	d00d      	beq.n	8107f84 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8107f68:	687b      	ldr	r3, [r7, #4]
 8107f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107f6c:	f003 031f 	and.w	r3, r3, #31
 8107f70:	2204      	movs	r2, #4
 8107f72:	409a      	lsls	r2, r3
 8107f74:	6a3b      	ldr	r3, [r7, #32]
 8107f76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8107f78:	687b      	ldr	r3, [r7, #4]
 8107f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107f7c:	f043 0204 	orr.w	r2, r3, #4
 8107f80:	687b      	ldr	r3, [r7, #4]
 8107f82:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8107f84:	687b      	ldr	r3, [r7, #4]
 8107f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107f88:	f003 031f 	and.w	r3, r3, #31
 8107f8c:	2210      	movs	r2, #16
 8107f8e:	409a      	lsls	r2, r3
 8107f90:	69bb      	ldr	r3, [r7, #24]
 8107f92:	4013      	ands	r3, r2
 8107f94:	2b00      	cmp	r3, #0
 8107f96:	f000 80a6 	beq.w	81080e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8107f9a:	687b      	ldr	r3, [r7, #4]
 8107f9c:	681b      	ldr	r3, [r3, #0]
 8107f9e:	4a85      	ldr	r2, [pc, #532]	@ (81081b4 <HAL_DMA_IRQHandler+0x690>)
 8107fa0:	4293      	cmp	r3, r2
 8107fa2:	d04a      	beq.n	810803a <HAL_DMA_IRQHandler+0x516>
 8107fa4:	687b      	ldr	r3, [r7, #4]
 8107fa6:	681b      	ldr	r3, [r3, #0]
 8107fa8:	4a83      	ldr	r2, [pc, #524]	@ (81081b8 <HAL_DMA_IRQHandler+0x694>)
 8107faa:	4293      	cmp	r3, r2
 8107fac:	d045      	beq.n	810803a <HAL_DMA_IRQHandler+0x516>
 8107fae:	687b      	ldr	r3, [r7, #4]
 8107fb0:	681b      	ldr	r3, [r3, #0]
 8107fb2:	4a82      	ldr	r2, [pc, #520]	@ (81081bc <HAL_DMA_IRQHandler+0x698>)
 8107fb4:	4293      	cmp	r3, r2
 8107fb6:	d040      	beq.n	810803a <HAL_DMA_IRQHandler+0x516>
 8107fb8:	687b      	ldr	r3, [r7, #4]
 8107fba:	681b      	ldr	r3, [r3, #0]
 8107fbc:	4a80      	ldr	r2, [pc, #512]	@ (81081c0 <HAL_DMA_IRQHandler+0x69c>)
 8107fbe:	4293      	cmp	r3, r2
 8107fc0:	d03b      	beq.n	810803a <HAL_DMA_IRQHandler+0x516>
 8107fc2:	687b      	ldr	r3, [r7, #4]
 8107fc4:	681b      	ldr	r3, [r3, #0]
 8107fc6:	4a7f      	ldr	r2, [pc, #508]	@ (81081c4 <HAL_DMA_IRQHandler+0x6a0>)
 8107fc8:	4293      	cmp	r3, r2
 8107fca:	d036      	beq.n	810803a <HAL_DMA_IRQHandler+0x516>
 8107fcc:	687b      	ldr	r3, [r7, #4]
 8107fce:	681b      	ldr	r3, [r3, #0]
 8107fd0:	4a7d      	ldr	r2, [pc, #500]	@ (81081c8 <HAL_DMA_IRQHandler+0x6a4>)
 8107fd2:	4293      	cmp	r3, r2
 8107fd4:	d031      	beq.n	810803a <HAL_DMA_IRQHandler+0x516>
 8107fd6:	687b      	ldr	r3, [r7, #4]
 8107fd8:	681b      	ldr	r3, [r3, #0]
 8107fda:	4a7c      	ldr	r2, [pc, #496]	@ (81081cc <HAL_DMA_IRQHandler+0x6a8>)
 8107fdc:	4293      	cmp	r3, r2
 8107fde:	d02c      	beq.n	810803a <HAL_DMA_IRQHandler+0x516>
 8107fe0:	687b      	ldr	r3, [r7, #4]
 8107fe2:	681b      	ldr	r3, [r3, #0]
 8107fe4:	4a7a      	ldr	r2, [pc, #488]	@ (81081d0 <HAL_DMA_IRQHandler+0x6ac>)
 8107fe6:	4293      	cmp	r3, r2
 8107fe8:	d027      	beq.n	810803a <HAL_DMA_IRQHandler+0x516>
 8107fea:	687b      	ldr	r3, [r7, #4]
 8107fec:	681b      	ldr	r3, [r3, #0]
 8107fee:	4a79      	ldr	r2, [pc, #484]	@ (81081d4 <HAL_DMA_IRQHandler+0x6b0>)
 8107ff0:	4293      	cmp	r3, r2
 8107ff2:	d022      	beq.n	810803a <HAL_DMA_IRQHandler+0x516>
 8107ff4:	687b      	ldr	r3, [r7, #4]
 8107ff6:	681b      	ldr	r3, [r3, #0]
 8107ff8:	4a77      	ldr	r2, [pc, #476]	@ (81081d8 <HAL_DMA_IRQHandler+0x6b4>)
 8107ffa:	4293      	cmp	r3, r2
 8107ffc:	d01d      	beq.n	810803a <HAL_DMA_IRQHandler+0x516>
 8107ffe:	687b      	ldr	r3, [r7, #4]
 8108000:	681b      	ldr	r3, [r3, #0]
 8108002:	4a76      	ldr	r2, [pc, #472]	@ (81081dc <HAL_DMA_IRQHandler+0x6b8>)
 8108004:	4293      	cmp	r3, r2
 8108006:	d018      	beq.n	810803a <HAL_DMA_IRQHandler+0x516>
 8108008:	687b      	ldr	r3, [r7, #4]
 810800a:	681b      	ldr	r3, [r3, #0]
 810800c:	4a74      	ldr	r2, [pc, #464]	@ (81081e0 <HAL_DMA_IRQHandler+0x6bc>)
 810800e:	4293      	cmp	r3, r2
 8108010:	d013      	beq.n	810803a <HAL_DMA_IRQHandler+0x516>
 8108012:	687b      	ldr	r3, [r7, #4]
 8108014:	681b      	ldr	r3, [r3, #0]
 8108016:	4a73      	ldr	r2, [pc, #460]	@ (81081e4 <HAL_DMA_IRQHandler+0x6c0>)
 8108018:	4293      	cmp	r3, r2
 810801a:	d00e      	beq.n	810803a <HAL_DMA_IRQHandler+0x516>
 810801c:	687b      	ldr	r3, [r7, #4]
 810801e:	681b      	ldr	r3, [r3, #0]
 8108020:	4a71      	ldr	r2, [pc, #452]	@ (81081e8 <HAL_DMA_IRQHandler+0x6c4>)
 8108022:	4293      	cmp	r3, r2
 8108024:	d009      	beq.n	810803a <HAL_DMA_IRQHandler+0x516>
 8108026:	687b      	ldr	r3, [r7, #4]
 8108028:	681b      	ldr	r3, [r3, #0]
 810802a:	4a70      	ldr	r2, [pc, #448]	@ (81081ec <HAL_DMA_IRQHandler+0x6c8>)
 810802c:	4293      	cmp	r3, r2
 810802e:	d004      	beq.n	810803a <HAL_DMA_IRQHandler+0x516>
 8108030:	687b      	ldr	r3, [r7, #4]
 8108032:	681b      	ldr	r3, [r3, #0]
 8108034:	4a6e      	ldr	r2, [pc, #440]	@ (81081f0 <HAL_DMA_IRQHandler+0x6cc>)
 8108036:	4293      	cmp	r3, r2
 8108038:	d10a      	bne.n	8108050 <HAL_DMA_IRQHandler+0x52c>
 810803a:	687b      	ldr	r3, [r7, #4]
 810803c:	681b      	ldr	r3, [r3, #0]
 810803e:	681b      	ldr	r3, [r3, #0]
 8108040:	f003 0308 	and.w	r3, r3, #8
 8108044:	2b00      	cmp	r3, #0
 8108046:	bf14      	ite	ne
 8108048:	2301      	movne	r3, #1
 810804a:	2300      	moveq	r3, #0
 810804c:	b2db      	uxtb	r3, r3
 810804e:	e009      	b.n	8108064 <HAL_DMA_IRQHandler+0x540>
 8108050:	687b      	ldr	r3, [r7, #4]
 8108052:	681b      	ldr	r3, [r3, #0]
 8108054:	681b      	ldr	r3, [r3, #0]
 8108056:	f003 0304 	and.w	r3, r3, #4
 810805a:	2b00      	cmp	r3, #0
 810805c:	bf14      	ite	ne
 810805e:	2301      	movne	r3, #1
 8108060:	2300      	moveq	r3, #0
 8108062:	b2db      	uxtb	r3, r3
 8108064:	2b00      	cmp	r3, #0
 8108066:	d03e      	beq.n	81080e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8108068:	687b      	ldr	r3, [r7, #4]
 810806a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810806c:	f003 031f 	and.w	r3, r3, #31
 8108070:	2210      	movs	r2, #16
 8108072:	409a      	lsls	r2, r3
 8108074:	6a3b      	ldr	r3, [r7, #32]
 8108076:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8108078:	687b      	ldr	r3, [r7, #4]
 810807a:	681b      	ldr	r3, [r3, #0]
 810807c:	681b      	ldr	r3, [r3, #0]
 810807e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8108082:	2b00      	cmp	r3, #0
 8108084:	d018      	beq.n	81080b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8108086:	687b      	ldr	r3, [r7, #4]
 8108088:	681b      	ldr	r3, [r3, #0]
 810808a:	681b      	ldr	r3, [r3, #0]
 810808c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8108090:	2b00      	cmp	r3, #0
 8108092:	d108      	bne.n	81080a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8108094:	687b      	ldr	r3, [r7, #4]
 8108096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108098:	2b00      	cmp	r3, #0
 810809a:	d024      	beq.n	81080e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 810809c:	687b      	ldr	r3, [r7, #4]
 810809e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81080a0:	6878      	ldr	r0, [r7, #4]
 81080a2:	4798      	blx	r3
 81080a4:	e01f      	b.n	81080e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 81080a6:	687b      	ldr	r3, [r7, #4]
 81080a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81080aa:	2b00      	cmp	r3, #0
 81080ac:	d01b      	beq.n	81080e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 81080ae:	687b      	ldr	r3, [r7, #4]
 81080b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81080b2:	6878      	ldr	r0, [r7, #4]
 81080b4:	4798      	blx	r3
 81080b6:	e016      	b.n	81080e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81080b8:	687b      	ldr	r3, [r7, #4]
 81080ba:	681b      	ldr	r3, [r3, #0]
 81080bc:	681b      	ldr	r3, [r3, #0]
 81080be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81080c2:	2b00      	cmp	r3, #0
 81080c4:	d107      	bne.n	81080d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81080c6:	687b      	ldr	r3, [r7, #4]
 81080c8:	681b      	ldr	r3, [r3, #0]
 81080ca:	681a      	ldr	r2, [r3, #0]
 81080cc:	687b      	ldr	r3, [r7, #4]
 81080ce:	681b      	ldr	r3, [r3, #0]
 81080d0:	f022 0208 	bic.w	r2, r2, #8
 81080d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 81080d6:	687b      	ldr	r3, [r7, #4]
 81080d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81080da:	2b00      	cmp	r3, #0
 81080dc:	d003      	beq.n	81080e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 81080de:	687b      	ldr	r3, [r7, #4]
 81080e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81080e2:	6878      	ldr	r0, [r7, #4]
 81080e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81080e6:	687b      	ldr	r3, [r7, #4]
 81080e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81080ea:	f003 031f 	and.w	r3, r3, #31
 81080ee:	2220      	movs	r2, #32
 81080f0:	409a      	lsls	r2, r3
 81080f2:	69bb      	ldr	r3, [r7, #24]
 81080f4:	4013      	ands	r3, r2
 81080f6:	2b00      	cmp	r3, #0
 81080f8:	f000 8110 	beq.w	810831c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 81080fc:	687b      	ldr	r3, [r7, #4]
 81080fe:	681b      	ldr	r3, [r3, #0]
 8108100:	4a2c      	ldr	r2, [pc, #176]	@ (81081b4 <HAL_DMA_IRQHandler+0x690>)
 8108102:	4293      	cmp	r3, r2
 8108104:	d04a      	beq.n	810819c <HAL_DMA_IRQHandler+0x678>
 8108106:	687b      	ldr	r3, [r7, #4]
 8108108:	681b      	ldr	r3, [r3, #0]
 810810a:	4a2b      	ldr	r2, [pc, #172]	@ (81081b8 <HAL_DMA_IRQHandler+0x694>)
 810810c:	4293      	cmp	r3, r2
 810810e:	d045      	beq.n	810819c <HAL_DMA_IRQHandler+0x678>
 8108110:	687b      	ldr	r3, [r7, #4]
 8108112:	681b      	ldr	r3, [r3, #0]
 8108114:	4a29      	ldr	r2, [pc, #164]	@ (81081bc <HAL_DMA_IRQHandler+0x698>)
 8108116:	4293      	cmp	r3, r2
 8108118:	d040      	beq.n	810819c <HAL_DMA_IRQHandler+0x678>
 810811a:	687b      	ldr	r3, [r7, #4]
 810811c:	681b      	ldr	r3, [r3, #0]
 810811e:	4a28      	ldr	r2, [pc, #160]	@ (81081c0 <HAL_DMA_IRQHandler+0x69c>)
 8108120:	4293      	cmp	r3, r2
 8108122:	d03b      	beq.n	810819c <HAL_DMA_IRQHandler+0x678>
 8108124:	687b      	ldr	r3, [r7, #4]
 8108126:	681b      	ldr	r3, [r3, #0]
 8108128:	4a26      	ldr	r2, [pc, #152]	@ (81081c4 <HAL_DMA_IRQHandler+0x6a0>)
 810812a:	4293      	cmp	r3, r2
 810812c:	d036      	beq.n	810819c <HAL_DMA_IRQHandler+0x678>
 810812e:	687b      	ldr	r3, [r7, #4]
 8108130:	681b      	ldr	r3, [r3, #0]
 8108132:	4a25      	ldr	r2, [pc, #148]	@ (81081c8 <HAL_DMA_IRQHandler+0x6a4>)
 8108134:	4293      	cmp	r3, r2
 8108136:	d031      	beq.n	810819c <HAL_DMA_IRQHandler+0x678>
 8108138:	687b      	ldr	r3, [r7, #4]
 810813a:	681b      	ldr	r3, [r3, #0]
 810813c:	4a23      	ldr	r2, [pc, #140]	@ (81081cc <HAL_DMA_IRQHandler+0x6a8>)
 810813e:	4293      	cmp	r3, r2
 8108140:	d02c      	beq.n	810819c <HAL_DMA_IRQHandler+0x678>
 8108142:	687b      	ldr	r3, [r7, #4]
 8108144:	681b      	ldr	r3, [r3, #0]
 8108146:	4a22      	ldr	r2, [pc, #136]	@ (81081d0 <HAL_DMA_IRQHandler+0x6ac>)
 8108148:	4293      	cmp	r3, r2
 810814a:	d027      	beq.n	810819c <HAL_DMA_IRQHandler+0x678>
 810814c:	687b      	ldr	r3, [r7, #4]
 810814e:	681b      	ldr	r3, [r3, #0]
 8108150:	4a20      	ldr	r2, [pc, #128]	@ (81081d4 <HAL_DMA_IRQHandler+0x6b0>)
 8108152:	4293      	cmp	r3, r2
 8108154:	d022      	beq.n	810819c <HAL_DMA_IRQHandler+0x678>
 8108156:	687b      	ldr	r3, [r7, #4]
 8108158:	681b      	ldr	r3, [r3, #0]
 810815a:	4a1f      	ldr	r2, [pc, #124]	@ (81081d8 <HAL_DMA_IRQHandler+0x6b4>)
 810815c:	4293      	cmp	r3, r2
 810815e:	d01d      	beq.n	810819c <HAL_DMA_IRQHandler+0x678>
 8108160:	687b      	ldr	r3, [r7, #4]
 8108162:	681b      	ldr	r3, [r3, #0]
 8108164:	4a1d      	ldr	r2, [pc, #116]	@ (81081dc <HAL_DMA_IRQHandler+0x6b8>)
 8108166:	4293      	cmp	r3, r2
 8108168:	d018      	beq.n	810819c <HAL_DMA_IRQHandler+0x678>
 810816a:	687b      	ldr	r3, [r7, #4]
 810816c:	681b      	ldr	r3, [r3, #0]
 810816e:	4a1c      	ldr	r2, [pc, #112]	@ (81081e0 <HAL_DMA_IRQHandler+0x6bc>)
 8108170:	4293      	cmp	r3, r2
 8108172:	d013      	beq.n	810819c <HAL_DMA_IRQHandler+0x678>
 8108174:	687b      	ldr	r3, [r7, #4]
 8108176:	681b      	ldr	r3, [r3, #0]
 8108178:	4a1a      	ldr	r2, [pc, #104]	@ (81081e4 <HAL_DMA_IRQHandler+0x6c0>)
 810817a:	4293      	cmp	r3, r2
 810817c:	d00e      	beq.n	810819c <HAL_DMA_IRQHandler+0x678>
 810817e:	687b      	ldr	r3, [r7, #4]
 8108180:	681b      	ldr	r3, [r3, #0]
 8108182:	4a19      	ldr	r2, [pc, #100]	@ (81081e8 <HAL_DMA_IRQHandler+0x6c4>)
 8108184:	4293      	cmp	r3, r2
 8108186:	d009      	beq.n	810819c <HAL_DMA_IRQHandler+0x678>
 8108188:	687b      	ldr	r3, [r7, #4]
 810818a:	681b      	ldr	r3, [r3, #0]
 810818c:	4a17      	ldr	r2, [pc, #92]	@ (81081ec <HAL_DMA_IRQHandler+0x6c8>)
 810818e:	4293      	cmp	r3, r2
 8108190:	d004      	beq.n	810819c <HAL_DMA_IRQHandler+0x678>
 8108192:	687b      	ldr	r3, [r7, #4]
 8108194:	681b      	ldr	r3, [r3, #0]
 8108196:	4a16      	ldr	r2, [pc, #88]	@ (81081f0 <HAL_DMA_IRQHandler+0x6cc>)
 8108198:	4293      	cmp	r3, r2
 810819a:	d12b      	bne.n	81081f4 <HAL_DMA_IRQHandler+0x6d0>
 810819c:	687b      	ldr	r3, [r7, #4]
 810819e:	681b      	ldr	r3, [r3, #0]
 81081a0:	681b      	ldr	r3, [r3, #0]
 81081a2:	f003 0310 	and.w	r3, r3, #16
 81081a6:	2b00      	cmp	r3, #0
 81081a8:	bf14      	ite	ne
 81081aa:	2301      	movne	r3, #1
 81081ac:	2300      	moveq	r3, #0
 81081ae:	b2db      	uxtb	r3, r3
 81081b0:	e02a      	b.n	8108208 <HAL_DMA_IRQHandler+0x6e4>
 81081b2:	bf00      	nop
 81081b4:	40020010 	.word	0x40020010
 81081b8:	40020028 	.word	0x40020028
 81081bc:	40020040 	.word	0x40020040
 81081c0:	40020058 	.word	0x40020058
 81081c4:	40020070 	.word	0x40020070
 81081c8:	40020088 	.word	0x40020088
 81081cc:	400200a0 	.word	0x400200a0
 81081d0:	400200b8 	.word	0x400200b8
 81081d4:	40020410 	.word	0x40020410
 81081d8:	40020428 	.word	0x40020428
 81081dc:	40020440 	.word	0x40020440
 81081e0:	40020458 	.word	0x40020458
 81081e4:	40020470 	.word	0x40020470
 81081e8:	40020488 	.word	0x40020488
 81081ec:	400204a0 	.word	0x400204a0
 81081f0:	400204b8 	.word	0x400204b8
 81081f4:	687b      	ldr	r3, [r7, #4]
 81081f6:	681b      	ldr	r3, [r3, #0]
 81081f8:	681b      	ldr	r3, [r3, #0]
 81081fa:	f003 0302 	and.w	r3, r3, #2
 81081fe:	2b00      	cmp	r3, #0
 8108200:	bf14      	ite	ne
 8108202:	2301      	movne	r3, #1
 8108204:	2300      	moveq	r3, #0
 8108206:	b2db      	uxtb	r3, r3
 8108208:	2b00      	cmp	r3, #0
 810820a:	f000 8087 	beq.w	810831c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 810820e:	687b      	ldr	r3, [r7, #4]
 8108210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8108212:	f003 031f 	and.w	r3, r3, #31
 8108216:	2220      	movs	r2, #32
 8108218:	409a      	lsls	r2, r3
 810821a:	6a3b      	ldr	r3, [r7, #32]
 810821c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 810821e:	687b      	ldr	r3, [r7, #4]
 8108220:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8108224:	b2db      	uxtb	r3, r3
 8108226:	2b04      	cmp	r3, #4
 8108228:	d139      	bne.n	810829e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 810822a:	687b      	ldr	r3, [r7, #4]
 810822c:	681b      	ldr	r3, [r3, #0]
 810822e:	681a      	ldr	r2, [r3, #0]
 8108230:	687b      	ldr	r3, [r7, #4]
 8108232:	681b      	ldr	r3, [r3, #0]
 8108234:	f022 0216 	bic.w	r2, r2, #22
 8108238:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 810823a:	687b      	ldr	r3, [r7, #4]
 810823c:	681b      	ldr	r3, [r3, #0]
 810823e:	695a      	ldr	r2, [r3, #20]
 8108240:	687b      	ldr	r3, [r7, #4]
 8108242:	681b      	ldr	r3, [r3, #0]
 8108244:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8108248:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 810824a:	687b      	ldr	r3, [r7, #4]
 810824c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810824e:	2b00      	cmp	r3, #0
 8108250:	d103      	bne.n	810825a <HAL_DMA_IRQHandler+0x736>
 8108252:	687b      	ldr	r3, [r7, #4]
 8108254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8108256:	2b00      	cmp	r3, #0
 8108258:	d007      	beq.n	810826a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810825a:	687b      	ldr	r3, [r7, #4]
 810825c:	681b      	ldr	r3, [r3, #0]
 810825e:	681a      	ldr	r2, [r3, #0]
 8108260:	687b      	ldr	r3, [r7, #4]
 8108262:	681b      	ldr	r3, [r3, #0]
 8108264:	f022 0208 	bic.w	r2, r2, #8
 8108268:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810826a:	687b      	ldr	r3, [r7, #4]
 810826c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810826e:	f003 031f 	and.w	r3, r3, #31
 8108272:	223f      	movs	r2, #63	@ 0x3f
 8108274:	409a      	lsls	r2, r3
 8108276:	6a3b      	ldr	r3, [r7, #32]
 8108278:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810827a:	687b      	ldr	r3, [r7, #4]
 810827c:	2201      	movs	r2, #1
 810827e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8108282:	687b      	ldr	r3, [r7, #4]
 8108284:	2200      	movs	r2, #0
 8108286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 810828a:	687b      	ldr	r3, [r7, #4]
 810828c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810828e:	2b00      	cmp	r3, #0
 8108290:	f000 834a 	beq.w	8108928 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8108294:	687b      	ldr	r3, [r7, #4]
 8108296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108298:	6878      	ldr	r0, [r7, #4]
 810829a:	4798      	blx	r3
          }
          return;
 810829c:	e344      	b.n	8108928 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 810829e:	687b      	ldr	r3, [r7, #4]
 81082a0:	681b      	ldr	r3, [r3, #0]
 81082a2:	681b      	ldr	r3, [r3, #0]
 81082a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81082a8:	2b00      	cmp	r3, #0
 81082aa:	d018      	beq.n	81082de <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81082ac:	687b      	ldr	r3, [r7, #4]
 81082ae:	681b      	ldr	r3, [r3, #0]
 81082b0:	681b      	ldr	r3, [r3, #0]
 81082b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 81082b6:	2b00      	cmp	r3, #0
 81082b8:	d108      	bne.n	81082cc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 81082ba:	687b      	ldr	r3, [r7, #4]
 81082bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81082be:	2b00      	cmp	r3, #0
 81082c0:	d02c      	beq.n	810831c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 81082c2:	687b      	ldr	r3, [r7, #4]
 81082c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81082c6:	6878      	ldr	r0, [r7, #4]
 81082c8:	4798      	blx	r3
 81082ca:	e027      	b.n	810831c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 81082cc:	687b      	ldr	r3, [r7, #4]
 81082ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81082d0:	2b00      	cmp	r3, #0
 81082d2:	d023      	beq.n	810831c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 81082d4:	687b      	ldr	r3, [r7, #4]
 81082d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81082d8:	6878      	ldr	r0, [r7, #4]
 81082da:	4798      	blx	r3
 81082dc:	e01e      	b.n	810831c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81082de:	687b      	ldr	r3, [r7, #4]
 81082e0:	681b      	ldr	r3, [r3, #0]
 81082e2:	681b      	ldr	r3, [r3, #0]
 81082e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81082e8:	2b00      	cmp	r3, #0
 81082ea:	d10f      	bne.n	810830c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 81082ec:	687b      	ldr	r3, [r7, #4]
 81082ee:	681b      	ldr	r3, [r3, #0]
 81082f0:	681a      	ldr	r2, [r3, #0]
 81082f2:	687b      	ldr	r3, [r7, #4]
 81082f4:	681b      	ldr	r3, [r3, #0]
 81082f6:	f022 0210 	bic.w	r2, r2, #16
 81082fa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 81082fc:	687b      	ldr	r3, [r7, #4]
 81082fe:	2201      	movs	r2, #1
 8108300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8108304:	687b      	ldr	r3, [r7, #4]
 8108306:	2200      	movs	r2, #0
 8108308:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 810830c:	687b      	ldr	r3, [r7, #4]
 810830e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108310:	2b00      	cmp	r3, #0
 8108312:	d003      	beq.n	810831c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8108314:	687b      	ldr	r3, [r7, #4]
 8108316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108318:	6878      	ldr	r0, [r7, #4]
 810831a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 810831c:	687b      	ldr	r3, [r7, #4]
 810831e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108320:	2b00      	cmp	r3, #0
 8108322:	f000 8306 	beq.w	8108932 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8108326:	687b      	ldr	r3, [r7, #4]
 8108328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810832a:	f003 0301 	and.w	r3, r3, #1
 810832e:	2b00      	cmp	r3, #0
 8108330:	f000 8088 	beq.w	8108444 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8108334:	687b      	ldr	r3, [r7, #4]
 8108336:	2204      	movs	r2, #4
 8108338:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 810833c:	687b      	ldr	r3, [r7, #4]
 810833e:	681b      	ldr	r3, [r3, #0]
 8108340:	4a7a      	ldr	r2, [pc, #488]	@ (810852c <HAL_DMA_IRQHandler+0xa08>)
 8108342:	4293      	cmp	r3, r2
 8108344:	d04a      	beq.n	81083dc <HAL_DMA_IRQHandler+0x8b8>
 8108346:	687b      	ldr	r3, [r7, #4]
 8108348:	681b      	ldr	r3, [r3, #0]
 810834a:	4a79      	ldr	r2, [pc, #484]	@ (8108530 <HAL_DMA_IRQHandler+0xa0c>)
 810834c:	4293      	cmp	r3, r2
 810834e:	d045      	beq.n	81083dc <HAL_DMA_IRQHandler+0x8b8>
 8108350:	687b      	ldr	r3, [r7, #4]
 8108352:	681b      	ldr	r3, [r3, #0]
 8108354:	4a77      	ldr	r2, [pc, #476]	@ (8108534 <HAL_DMA_IRQHandler+0xa10>)
 8108356:	4293      	cmp	r3, r2
 8108358:	d040      	beq.n	81083dc <HAL_DMA_IRQHandler+0x8b8>
 810835a:	687b      	ldr	r3, [r7, #4]
 810835c:	681b      	ldr	r3, [r3, #0]
 810835e:	4a76      	ldr	r2, [pc, #472]	@ (8108538 <HAL_DMA_IRQHandler+0xa14>)
 8108360:	4293      	cmp	r3, r2
 8108362:	d03b      	beq.n	81083dc <HAL_DMA_IRQHandler+0x8b8>
 8108364:	687b      	ldr	r3, [r7, #4]
 8108366:	681b      	ldr	r3, [r3, #0]
 8108368:	4a74      	ldr	r2, [pc, #464]	@ (810853c <HAL_DMA_IRQHandler+0xa18>)
 810836a:	4293      	cmp	r3, r2
 810836c:	d036      	beq.n	81083dc <HAL_DMA_IRQHandler+0x8b8>
 810836e:	687b      	ldr	r3, [r7, #4]
 8108370:	681b      	ldr	r3, [r3, #0]
 8108372:	4a73      	ldr	r2, [pc, #460]	@ (8108540 <HAL_DMA_IRQHandler+0xa1c>)
 8108374:	4293      	cmp	r3, r2
 8108376:	d031      	beq.n	81083dc <HAL_DMA_IRQHandler+0x8b8>
 8108378:	687b      	ldr	r3, [r7, #4]
 810837a:	681b      	ldr	r3, [r3, #0]
 810837c:	4a71      	ldr	r2, [pc, #452]	@ (8108544 <HAL_DMA_IRQHandler+0xa20>)
 810837e:	4293      	cmp	r3, r2
 8108380:	d02c      	beq.n	81083dc <HAL_DMA_IRQHandler+0x8b8>
 8108382:	687b      	ldr	r3, [r7, #4]
 8108384:	681b      	ldr	r3, [r3, #0]
 8108386:	4a70      	ldr	r2, [pc, #448]	@ (8108548 <HAL_DMA_IRQHandler+0xa24>)
 8108388:	4293      	cmp	r3, r2
 810838a:	d027      	beq.n	81083dc <HAL_DMA_IRQHandler+0x8b8>
 810838c:	687b      	ldr	r3, [r7, #4]
 810838e:	681b      	ldr	r3, [r3, #0]
 8108390:	4a6e      	ldr	r2, [pc, #440]	@ (810854c <HAL_DMA_IRQHandler+0xa28>)
 8108392:	4293      	cmp	r3, r2
 8108394:	d022      	beq.n	81083dc <HAL_DMA_IRQHandler+0x8b8>
 8108396:	687b      	ldr	r3, [r7, #4]
 8108398:	681b      	ldr	r3, [r3, #0]
 810839a:	4a6d      	ldr	r2, [pc, #436]	@ (8108550 <HAL_DMA_IRQHandler+0xa2c>)
 810839c:	4293      	cmp	r3, r2
 810839e:	d01d      	beq.n	81083dc <HAL_DMA_IRQHandler+0x8b8>
 81083a0:	687b      	ldr	r3, [r7, #4]
 81083a2:	681b      	ldr	r3, [r3, #0]
 81083a4:	4a6b      	ldr	r2, [pc, #428]	@ (8108554 <HAL_DMA_IRQHandler+0xa30>)
 81083a6:	4293      	cmp	r3, r2
 81083a8:	d018      	beq.n	81083dc <HAL_DMA_IRQHandler+0x8b8>
 81083aa:	687b      	ldr	r3, [r7, #4]
 81083ac:	681b      	ldr	r3, [r3, #0]
 81083ae:	4a6a      	ldr	r2, [pc, #424]	@ (8108558 <HAL_DMA_IRQHandler+0xa34>)
 81083b0:	4293      	cmp	r3, r2
 81083b2:	d013      	beq.n	81083dc <HAL_DMA_IRQHandler+0x8b8>
 81083b4:	687b      	ldr	r3, [r7, #4]
 81083b6:	681b      	ldr	r3, [r3, #0]
 81083b8:	4a68      	ldr	r2, [pc, #416]	@ (810855c <HAL_DMA_IRQHandler+0xa38>)
 81083ba:	4293      	cmp	r3, r2
 81083bc:	d00e      	beq.n	81083dc <HAL_DMA_IRQHandler+0x8b8>
 81083be:	687b      	ldr	r3, [r7, #4]
 81083c0:	681b      	ldr	r3, [r3, #0]
 81083c2:	4a67      	ldr	r2, [pc, #412]	@ (8108560 <HAL_DMA_IRQHandler+0xa3c>)
 81083c4:	4293      	cmp	r3, r2
 81083c6:	d009      	beq.n	81083dc <HAL_DMA_IRQHandler+0x8b8>
 81083c8:	687b      	ldr	r3, [r7, #4]
 81083ca:	681b      	ldr	r3, [r3, #0]
 81083cc:	4a65      	ldr	r2, [pc, #404]	@ (8108564 <HAL_DMA_IRQHandler+0xa40>)
 81083ce:	4293      	cmp	r3, r2
 81083d0:	d004      	beq.n	81083dc <HAL_DMA_IRQHandler+0x8b8>
 81083d2:	687b      	ldr	r3, [r7, #4]
 81083d4:	681b      	ldr	r3, [r3, #0]
 81083d6:	4a64      	ldr	r2, [pc, #400]	@ (8108568 <HAL_DMA_IRQHandler+0xa44>)
 81083d8:	4293      	cmp	r3, r2
 81083da:	d108      	bne.n	81083ee <HAL_DMA_IRQHandler+0x8ca>
 81083dc:	687b      	ldr	r3, [r7, #4]
 81083de:	681b      	ldr	r3, [r3, #0]
 81083e0:	681a      	ldr	r2, [r3, #0]
 81083e2:	687b      	ldr	r3, [r7, #4]
 81083e4:	681b      	ldr	r3, [r3, #0]
 81083e6:	f022 0201 	bic.w	r2, r2, #1
 81083ea:	601a      	str	r2, [r3, #0]
 81083ec:	e007      	b.n	81083fe <HAL_DMA_IRQHandler+0x8da>
 81083ee:	687b      	ldr	r3, [r7, #4]
 81083f0:	681b      	ldr	r3, [r3, #0]
 81083f2:	681a      	ldr	r2, [r3, #0]
 81083f4:	687b      	ldr	r3, [r7, #4]
 81083f6:	681b      	ldr	r3, [r3, #0]
 81083f8:	f022 0201 	bic.w	r2, r2, #1
 81083fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 81083fe:	68fb      	ldr	r3, [r7, #12]
 8108400:	3301      	adds	r3, #1
 8108402:	60fb      	str	r3, [r7, #12]
 8108404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8108406:	429a      	cmp	r2, r3
 8108408:	d307      	bcc.n	810841a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 810840a:	687b      	ldr	r3, [r7, #4]
 810840c:	681b      	ldr	r3, [r3, #0]
 810840e:	681b      	ldr	r3, [r3, #0]
 8108410:	f003 0301 	and.w	r3, r3, #1
 8108414:	2b00      	cmp	r3, #0
 8108416:	d1f2      	bne.n	81083fe <HAL_DMA_IRQHandler+0x8da>
 8108418:	e000      	b.n	810841c <HAL_DMA_IRQHandler+0x8f8>
            break;
 810841a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810841c:	687b      	ldr	r3, [r7, #4]
 810841e:	681b      	ldr	r3, [r3, #0]
 8108420:	681b      	ldr	r3, [r3, #0]
 8108422:	f003 0301 	and.w	r3, r3, #1
 8108426:	2b00      	cmp	r3, #0
 8108428:	d004      	beq.n	8108434 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 810842a:	687b      	ldr	r3, [r7, #4]
 810842c:	2203      	movs	r2, #3
 810842e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8108432:	e003      	b.n	810843c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8108434:	687b      	ldr	r3, [r7, #4]
 8108436:	2201      	movs	r2, #1
 8108438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 810843c:	687b      	ldr	r3, [r7, #4]
 810843e:	2200      	movs	r2, #0
 8108440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8108444:	687b      	ldr	r3, [r7, #4]
 8108446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108448:	2b00      	cmp	r3, #0
 810844a:	f000 8272 	beq.w	8108932 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810844e:	687b      	ldr	r3, [r7, #4]
 8108450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108452:	6878      	ldr	r0, [r7, #4]
 8108454:	4798      	blx	r3
 8108456:	e26c      	b.n	8108932 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8108458:	687b      	ldr	r3, [r7, #4]
 810845a:	681b      	ldr	r3, [r3, #0]
 810845c:	4a43      	ldr	r2, [pc, #268]	@ (810856c <HAL_DMA_IRQHandler+0xa48>)
 810845e:	4293      	cmp	r3, r2
 8108460:	d022      	beq.n	81084a8 <HAL_DMA_IRQHandler+0x984>
 8108462:	687b      	ldr	r3, [r7, #4]
 8108464:	681b      	ldr	r3, [r3, #0]
 8108466:	4a42      	ldr	r2, [pc, #264]	@ (8108570 <HAL_DMA_IRQHandler+0xa4c>)
 8108468:	4293      	cmp	r3, r2
 810846a:	d01d      	beq.n	81084a8 <HAL_DMA_IRQHandler+0x984>
 810846c:	687b      	ldr	r3, [r7, #4]
 810846e:	681b      	ldr	r3, [r3, #0]
 8108470:	4a40      	ldr	r2, [pc, #256]	@ (8108574 <HAL_DMA_IRQHandler+0xa50>)
 8108472:	4293      	cmp	r3, r2
 8108474:	d018      	beq.n	81084a8 <HAL_DMA_IRQHandler+0x984>
 8108476:	687b      	ldr	r3, [r7, #4]
 8108478:	681b      	ldr	r3, [r3, #0]
 810847a:	4a3f      	ldr	r2, [pc, #252]	@ (8108578 <HAL_DMA_IRQHandler+0xa54>)
 810847c:	4293      	cmp	r3, r2
 810847e:	d013      	beq.n	81084a8 <HAL_DMA_IRQHandler+0x984>
 8108480:	687b      	ldr	r3, [r7, #4]
 8108482:	681b      	ldr	r3, [r3, #0]
 8108484:	4a3d      	ldr	r2, [pc, #244]	@ (810857c <HAL_DMA_IRQHandler+0xa58>)
 8108486:	4293      	cmp	r3, r2
 8108488:	d00e      	beq.n	81084a8 <HAL_DMA_IRQHandler+0x984>
 810848a:	687b      	ldr	r3, [r7, #4]
 810848c:	681b      	ldr	r3, [r3, #0]
 810848e:	4a3c      	ldr	r2, [pc, #240]	@ (8108580 <HAL_DMA_IRQHandler+0xa5c>)
 8108490:	4293      	cmp	r3, r2
 8108492:	d009      	beq.n	81084a8 <HAL_DMA_IRQHandler+0x984>
 8108494:	687b      	ldr	r3, [r7, #4]
 8108496:	681b      	ldr	r3, [r3, #0]
 8108498:	4a3a      	ldr	r2, [pc, #232]	@ (8108584 <HAL_DMA_IRQHandler+0xa60>)
 810849a:	4293      	cmp	r3, r2
 810849c:	d004      	beq.n	81084a8 <HAL_DMA_IRQHandler+0x984>
 810849e:	687b      	ldr	r3, [r7, #4]
 81084a0:	681b      	ldr	r3, [r3, #0]
 81084a2:	4a39      	ldr	r2, [pc, #228]	@ (8108588 <HAL_DMA_IRQHandler+0xa64>)
 81084a4:	4293      	cmp	r3, r2
 81084a6:	d101      	bne.n	81084ac <HAL_DMA_IRQHandler+0x988>
 81084a8:	2301      	movs	r3, #1
 81084aa:	e000      	b.n	81084ae <HAL_DMA_IRQHandler+0x98a>
 81084ac:	2300      	movs	r3, #0
 81084ae:	2b00      	cmp	r3, #0
 81084b0:	f000 823f 	beq.w	8108932 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 81084b4:	687b      	ldr	r3, [r7, #4]
 81084b6:	681b      	ldr	r3, [r3, #0]
 81084b8:	681b      	ldr	r3, [r3, #0]
 81084ba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81084bc:	687b      	ldr	r3, [r7, #4]
 81084be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81084c0:	f003 031f 	and.w	r3, r3, #31
 81084c4:	2204      	movs	r2, #4
 81084c6:	409a      	lsls	r2, r3
 81084c8:	697b      	ldr	r3, [r7, #20]
 81084ca:	4013      	ands	r3, r2
 81084cc:	2b00      	cmp	r3, #0
 81084ce:	f000 80cd 	beq.w	810866c <HAL_DMA_IRQHandler+0xb48>
 81084d2:	693b      	ldr	r3, [r7, #16]
 81084d4:	f003 0304 	and.w	r3, r3, #4
 81084d8:	2b00      	cmp	r3, #0
 81084da:	f000 80c7 	beq.w	810866c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 81084de:	687b      	ldr	r3, [r7, #4]
 81084e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81084e2:	f003 031f 	and.w	r3, r3, #31
 81084e6:	2204      	movs	r2, #4
 81084e8:	409a      	lsls	r2, r3
 81084ea:	69fb      	ldr	r3, [r7, #28]
 81084ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81084ee:	693b      	ldr	r3, [r7, #16]
 81084f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81084f4:	2b00      	cmp	r3, #0
 81084f6:	d049      	beq.n	810858c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81084f8:	693b      	ldr	r3, [r7, #16]
 81084fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81084fe:	2b00      	cmp	r3, #0
 8108500:	d109      	bne.n	8108516 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8108502:	687b      	ldr	r3, [r7, #4]
 8108504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8108506:	2b00      	cmp	r3, #0
 8108508:	f000 8210 	beq.w	810892c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 810850c:	687b      	ldr	r3, [r7, #4]
 810850e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8108510:	6878      	ldr	r0, [r7, #4]
 8108512:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8108514:	e20a      	b.n	810892c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8108516:	687b      	ldr	r3, [r7, #4]
 8108518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810851a:	2b00      	cmp	r3, #0
 810851c:	f000 8206 	beq.w	810892c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8108520:	687b      	ldr	r3, [r7, #4]
 8108522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108524:	6878      	ldr	r0, [r7, #4]
 8108526:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8108528:	e200      	b.n	810892c <HAL_DMA_IRQHandler+0xe08>
 810852a:	bf00      	nop
 810852c:	40020010 	.word	0x40020010
 8108530:	40020028 	.word	0x40020028
 8108534:	40020040 	.word	0x40020040
 8108538:	40020058 	.word	0x40020058
 810853c:	40020070 	.word	0x40020070
 8108540:	40020088 	.word	0x40020088
 8108544:	400200a0 	.word	0x400200a0
 8108548:	400200b8 	.word	0x400200b8
 810854c:	40020410 	.word	0x40020410
 8108550:	40020428 	.word	0x40020428
 8108554:	40020440 	.word	0x40020440
 8108558:	40020458 	.word	0x40020458
 810855c:	40020470 	.word	0x40020470
 8108560:	40020488 	.word	0x40020488
 8108564:	400204a0 	.word	0x400204a0
 8108568:	400204b8 	.word	0x400204b8
 810856c:	58025408 	.word	0x58025408
 8108570:	5802541c 	.word	0x5802541c
 8108574:	58025430 	.word	0x58025430
 8108578:	58025444 	.word	0x58025444
 810857c:	58025458 	.word	0x58025458
 8108580:	5802546c 	.word	0x5802546c
 8108584:	58025480 	.word	0x58025480
 8108588:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810858c:	693b      	ldr	r3, [r7, #16]
 810858e:	f003 0320 	and.w	r3, r3, #32
 8108592:	2b00      	cmp	r3, #0
 8108594:	d160      	bne.n	8108658 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8108596:	687b      	ldr	r3, [r7, #4]
 8108598:	681b      	ldr	r3, [r3, #0]
 810859a:	4a7f      	ldr	r2, [pc, #508]	@ (8108798 <HAL_DMA_IRQHandler+0xc74>)
 810859c:	4293      	cmp	r3, r2
 810859e:	d04a      	beq.n	8108636 <HAL_DMA_IRQHandler+0xb12>
 81085a0:	687b      	ldr	r3, [r7, #4]
 81085a2:	681b      	ldr	r3, [r3, #0]
 81085a4:	4a7d      	ldr	r2, [pc, #500]	@ (810879c <HAL_DMA_IRQHandler+0xc78>)
 81085a6:	4293      	cmp	r3, r2
 81085a8:	d045      	beq.n	8108636 <HAL_DMA_IRQHandler+0xb12>
 81085aa:	687b      	ldr	r3, [r7, #4]
 81085ac:	681b      	ldr	r3, [r3, #0]
 81085ae:	4a7c      	ldr	r2, [pc, #496]	@ (81087a0 <HAL_DMA_IRQHandler+0xc7c>)
 81085b0:	4293      	cmp	r3, r2
 81085b2:	d040      	beq.n	8108636 <HAL_DMA_IRQHandler+0xb12>
 81085b4:	687b      	ldr	r3, [r7, #4]
 81085b6:	681b      	ldr	r3, [r3, #0]
 81085b8:	4a7a      	ldr	r2, [pc, #488]	@ (81087a4 <HAL_DMA_IRQHandler+0xc80>)
 81085ba:	4293      	cmp	r3, r2
 81085bc:	d03b      	beq.n	8108636 <HAL_DMA_IRQHandler+0xb12>
 81085be:	687b      	ldr	r3, [r7, #4]
 81085c0:	681b      	ldr	r3, [r3, #0]
 81085c2:	4a79      	ldr	r2, [pc, #484]	@ (81087a8 <HAL_DMA_IRQHandler+0xc84>)
 81085c4:	4293      	cmp	r3, r2
 81085c6:	d036      	beq.n	8108636 <HAL_DMA_IRQHandler+0xb12>
 81085c8:	687b      	ldr	r3, [r7, #4]
 81085ca:	681b      	ldr	r3, [r3, #0]
 81085cc:	4a77      	ldr	r2, [pc, #476]	@ (81087ac <HAL_DMA_IRQHandler+0xc88>)
 81085ce:	4293      	cmp	r3, r2
 81085d0:	d031      	beq.n	8108636 <HAL_DMA_IRQHandler+0xb12>
 81085d2:	687b      	ldr	r3, [r7, #4]
 81085d4:	681b      	ldr	r3, [r3, #0]
 81085d6:	4a76      	ldr	r2, [pc, #472]	@ (81087b0 <HAL_DMA_IRQHandler+0xc8c>)
 81085d8:	4293      	cmp	r3, r2
 81085da:	d02c      	beq.n	8108636 <HAL_DMA_IRQHandler+0xb12>
 81085dc:	687b      	ldr	r3, [r7, #4]
 81085de:	681b      	ldr	r3, [r3, #0]
 81085e0:	4a74      	ldr	r2, [pc, #464]	@ (81087b4 <HAL_DMA_IRQHandler+0xc90>)
 81085e2:	4293      	cmp	r3, r2
 81085e4:	d027      	beq.n	8108636 <HAL_DMA_IRQHandler+0xb12>
 81085e6:	687b      	ldr	r3, [r7, #4]
 81085e8:	681b      	ldr	r3, [r3, #0]
 81085ea:	4a73      	ldr	r2, [pc, #460]	@ (81087b8 <HAL_DMA_IRQHandler+0xc94>)
 81085ec:	4293      	cmp	r3, r2
 81085ee:	d022      	beq.n	8108636 <HAL_DMA_IRQHandler+0xb12>
 81085f0:	687b      	ldr	r3, [r7, #4]
 81085f2:	681b      	ldr	r3, [r3, #0]
 81085f4:	4a71      	ldr	r2, [pc, #452]	@ (81087bc <HAL_DMA_IRQHandler+0xc98>)
 81085f6:	4293      	cmp	r3, r2
 81085f8:	d01d      	beq.n	8108636 <HAL_DMA_IRQHandler+0xb12>
 81085fa:	687b      	ldr	r3, [r7, #4]
 81085fc:	681b      	ldr	r3, [r3, #0]
 81085fe:	4a70      	ldr	r2, [pc, #448]	@ (81087c0 <HAL_DMA_IRQHandler+0xc9c>)
 8108600:	4293      	cmp	r3, r2
 8108602:	d018      	beq.n	8108636 <HAL_DMA_IRQHandler+0xb12>
 8108604:	687b      	ldr	r3, [r7, #4]
 8108606:	681b      	ldr	r3, [r3, #0]
 8108608:	4a6e      	ldr	r2, [pc, #440]	@ (81087c4 <HAL_DMA_IRQHandler+0xca0>)
 810860a:	4293      	cmp	r3, r2
 810860c:	d013      	beq.n	8108636 <HAL_DMA_IRQHandler+0xb12>
 810860e:	687b      	ldr	r3, [r7, #4]
 8108610:	681b      	ldr	r3, [r3, #0]
 8108612:	4a6d      	ldr	r2, [pc, #436]	@ (81087c8 <HAL_DMA_IRQHandler+0xca4>)
 8108614:	4293      	cmp	r3, r2
 8108616:	d00e      	beq.n	8108636 <HAL_DMA_IRQHandler+0xb12>
 8108618:	687b      	ldr	r3, [r7, #4]
 810861a:	681b      	ldr	r3, [r3, #0]
 810861c:	4a6b      	ldr	r2, [pc, #428]	@ (81087cc <HAL_DMA_IRQHandler+0xca8>)
 810861e:	4293      	cmp	r3, r2
 8108620:	d009      	beq.n	8108636 <HAL_DMA_IRQHandler+0xb12>
 8108622:	687b      	ldr	r3, [r7, #4]
 8108624:	681b      	ldr	r3, [r3, #0]
 8108626:	4a6a      	ldr	r2, [pc, #424]	@ (81087d0 <HAL_DMA_IRQHandler+0xcac>)
 8108628:	4293      	cmp	r3, r2
 810862a:	d004      	beq.n	8108636 <HAL_DMA_IRQHandler+0xb12>
 810862c:	687b      	ldr	r3, [r7, #4]
 810862e:	681b      	ldr	r3, [r3, #0]
 8108630:	4a68      	ldr	r2, [pc, #416]	@ (81087d4 <HAL_DMA_IRQHandler+0xcb0>)
 8108632:	4293      	cmp	r3, r2
 8108634:	d108      	bne.n	8108648 <HAL_DMA_IRQHandler+0xb24>
 8108636:	687b      	ldr	r3, [r7, #4]
 8108638:	681b      	ldr	r3, [r3, #0]
 810863a:	681a      	ldr	r2, [r3, #0]
 810863c:	687b      	ldr	r3, [r7, #4]
 810863e:	681b      	ldr	r3, [r3, #0]
 8108640:	f022 0208 	bic.w	r2, r2, #8
 8108644:	601a      	str	r2, [r3, #0]
 8108646:	e007      	b.n	8108658 <HAL_DMA_IRQHandler+0xb34>
 8108648:	687b      	ldr	r3, [r7, #4]
 810864a:	681b      	ldr	r3, [r3, #0]
 810864c:	681a      	ldr	r2, [r3, #0]
 810864e:	687b      	ldr	r3, [r7, #4]
 8108650:	681b      	ldr	r3, [r3, #0]
 8108652:	f022 0204 	bic.w	r2, r2, #4
 8108656:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8108658:	687b      	ldr	r3, [r7, #4]
 810865a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810865c:	2b00      	cmp	r3, #0
 810865e:	f000 8165 	beq.w	810892c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8108662:	687b      	ldr	r3, [r7, #4]
 8108664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108666:	6878      	ldr	r0, [r7, #4]
 8108668:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810866a:	e15f      	b.n	810892c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 810866c:	687b      	ldr	r3, [r7, #4]
 810866e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8108670:	f003 031f 	and.w	r3, r3, #31
 8108674:	2202      	movs	r2, #2
 8108676:	409a      	lsls	r2, r3
 8108678:	697b      	ldr	r3, [r7, #20]
 810867a:	4013      	ands	r3, r2
 810867c:	2b00      	cmp	r3, #0
 810867e:	f000 80c5 	beq.w	810880c <HAL_DMA_IRQHandler+0xce8>
 8108682:	693b      	ldr	r3, [r7, #16]
 8108684:	f003 0302 	and.w	r3, r3, #2
 8108688:	2b00      	cmp	r3, #0
 810868a:	f000 80bf 	beq.w	810880c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 810868e:	687b      	ldr	r3, [r7, #4]
 8108690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8108692:	f003 031f 	and.w	r3, r3, #31
 8108696:	2202      	movs	r2, #2
 8108698:	409a      	lsls	r2, r3
 810869a:	69fb      	ldr	r3, [r7, #28]
 810869c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810869e:	693b      	ldr	r3, [r7, #16]
 81086a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81086a4:	2b00      	cmp	r3, #0
 81086a6:	d018      	beq.n	81086da <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81086a8:	693b      	ldr	r3, [r7, #16]
 81086aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81086ae:	2b00      	cmp	r3, #0
 81086b0:	d109      	bne.n	81086c6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81086b2:	687b      	ldr	r3, [r7, #4]
 81086b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81086b6:	2b00      	cmp	r3, #0
 81086b8:	f000 813a 	beq.w	8108930 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81086bc:	687b      	ldr	r3, [r7, #4]
 81086be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81086c0:	6878      	ldr	r0, [r7, #4]
 81086c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81086c4:	e134      	b.n	8108930 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81086c6:	687b      	ldr	r3, [r7, #4]
 81086c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81086ca:	2b00      	cmp	r3, #0
 81086cc:	f000 8130 	beq.w	8108930 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 81086d0:	687b      	ldr	r3, [r7, #4]
 81086d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81086d4:	6878      	ldr	r0, [r7, #4]
 81086d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81086d8:	e12a      	b.n	8108930 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81086da:	693b      	ldr	r3, [r7, #16]
 81086dc:	f003 0320 	and.w	r3, r3, #32
 81086e0:	2b00      	cmp	r3, #0
 81086e2:	f040 8089 	bne.w	81087f8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 81086e6:	687b      	ldr	r3, [r7, #4]
 81086e8:	681b      	ldr	r3, [r3, #0]
 81086ea:	4a2b      	ldr	r2, [pc, #172]	@ (8108798 <HAL_DMA_IRQHandler+0xc74>)
 81086ec:	4293      	cmp	r3, r2
 81086ee:	d04a      	beq.n	8108786 <HAL_DMA_IRQHandler+0xc62>
 81086f0:	687b      	ldr	r3, [r7, #4]
 81086f2:	681b      	ldr	r3, [r3, #0]
 81086f4:	4a29      	ldr	r2, [pc, #164]	@ (810879c <HAL_DMA_IRQHandler+0xc78>)
 81086f6:	4293      	cmp	r3, r2
 81086f8:	d045      	beq.n	8108786 <HAL_DMA_IRQHandler+0xc62>
 81086fa:	687b      	ldr	r3, [r7, #4]
 81086fc:	681b      	ldr	r3, [r3, #0]
 81086fe:	4a28      	ldr	r2, [pc, #160]	@ (81087a0 <HAL_DMA_IRQHandler+0xc7c>)
 8108700:	4293      	cmp	r3, r2
 8108702:	d040      	beq.n	8108786 <HAL_DMA_IRQHandler+0xc62>
 8108704:	687b      	ldr	r3, [r7, #4]
 8108706:	681b      	ldr	r3, [r3, #0]
 8108708:	4a26      	ldr	r2, [pc, #152]	@ (81087a4 <HAL_DMA_IRQHandler+0xc80>)
 810870a:	4293      	cmp	r3, r2
 810870c:	d03b      	beq.n	8108786 <HAL_DMA_IRQHandler+0xc62>
 810870e:	687b      	ldr	r3, [r7, #4]
 8108710:	681b      	ldr	r3, [r3, #0]
 8108712:	4a25      	ldr	r2, [pc, #148]	@ (81087a8 <HAL_DMA_IRQHandler+0xc84>)
 8108714:	4293      	cmp	r3, r2
 8108716:	d036      	beq.n	8108786 <HAL_DMA_IRQHandler+0xc62>
 8108718:	687b      	ldr	r3, [r7, #4]
 810871a:	681b      	ldr	r3, [r3, #0]
 810871c:	4a23      	ldr	r2, [pc, #140]	@ (81087ac <HAL_DMA_IRQHandler+0xc88>)
 810871e:	4293      	cmp	r3, r2
 8108720:	d031      	beq.n	8108786 <HAL_DMA_IRQHandler+0xc62>
 8108722:	687b      	ldr	r3, [r7, #4]
 8108724:	681b      	ldr	r3, [r3, #0]
 8108726:	4a22      	ldr	r2, [pc, #136]	@ (81087b0 <HAL_DMA_IRQHandler+0xc8c>)
 8108728:	4293      	cmp	r3, r2
 810872a:	d02c      	beq.n	8108786 <HAL_DMA_IRQHandler+0xc62>
 810872c:	687b      	ldr	r3, [r7, #4]
 810872e:	681b      	ldr	r3, [r3, #0]
 8108730:	4a20      	ldr	r2, [pc, #128]	@ (81087b4 <HAL_DMA_IRQHandler+0xc90>)
 8108732:	4293      	cmp	r3, r2
 8108734:	d027      	beq.n	8108786 <HAL_DMA_IRQHandler+0xc62>
 8108736:	687b      	ldr	r3, [r7, #4]
 8108738:	681b      	ldr	r3, [r3, #0]
 810873a:	4a1f      	ldr	r2, [pc, #124]	@ (81087b8 <HAL_DMA_IRQHandler+0xc94>)
 810873c:	4293      	cmp	r3, r2
 810873e:	d022      	beq.n	8108786 <HAL_DMA_IRQHandler+0xc62>
 8108740:	687b      	ldr	r3, [r7, #4]
 8108742:	681b      	ldr	r3, [r3, #0]
 8108744:	4a1d      	ldr	r2, [pc, #116]	@ (81087bc <HAL_DMA_IRQHandler+0xc98>)
 8108746:	4293      	cmp	r3, r2
 8108748:	d01d      	beq.n	8108786 <HAL_DMA_IRQHandler+0xc62>
 810874a:	687b      	ldr	r3, [r7, #4]
 810874c:	681b      	ldr	r3, [r3, #0]
 810874e:	4a1c      	ldr	r2, [pc, #112]	@ (81087c0 <HAL_DMA_IRQHandler+0xc9c>)
 8108750:	4293      	cmp	r3, r2
 8108752:	d018      	beq.n	8108786 <HAL_DMA_IRQHandler+0xc62>
 8108754:	687b      	ldr	r3, [r7, #4]
 8108756:	681b      	ldr	r3, [r3, #0]
 8108758:	4a1a      	ldr	r2, [pc, #104]	@ (81087c4 <HAL_DMA_IRQHandler+0xca0>)
 810875a:	4293      	cmp	r3, r2
 810875c:	d013      	beq.n	8108786 <HAL_DMA_IRQHandler+0xc62>
 810875e:	687b      	ldr	r3, [r7, #4]
 8108760:	681b      	ldr	r3, [r3, #0]
 8108762:	4a19      	ldr	r2, [pc, #100]	@ (81087c8 <HAL_DMA_IRQHandler+0xca4>)
 8108764:	4293      	cmp	r3, r2
 8108766:	d00e      	beq.n	8108786 <HAL_DMA_IRQHandler+0xc62>
 8108768:	687b      	ldr	r3, [r7, #4]
 810876a:	681b      	ldr	r3, [r3, #0]
 810876c:	4a17      	ldr	r2, [pc, #92]	@ (81087cc <HAL_DMA_IRQHandler+0xca8>)
 810876e:	4293      	cmp	r3, r2
 8108770:	d009      	beq.n	8108786 <HAL_DMA_IRQHandler+0xc62>
 8108772:	687b      	ldr	r3, [r7, #4]
 8108774:	681b      	ldr	r3, [r3, #0]
 8108776:	4a16      	ldr	r2, [pc, #88]	@ (81087d0 <HAL_DMA_IRQHandler+0xcac>)
 8108778:	4293      	cmp	r3, r2
 810877a:	d004      	beq.n	8108786 <HAL_DMA_IRQHandler+0xc62>
 810877c:	687b      	ldr	r3, [r7, #4]
 810877e:	681b      	ldr	r3, [r3, #0]
 8108780:	4a14      	ldr	r2, [pc, #80]	@ (81087d4 <HAL_DMA_IRQHandler+0xcb0>)
 8108782:	4293      	cmp	r3, r2
 8108784:	d128      	bne.n	81087d8 <HAL_DMA_IRQHandler+0xcb4>
 8108786:	687b      	ldr	r3, [r7, #4]
 8108788:	681b      	ldr	r3, [r3, #0]
 810878a:	681a      	ldr	r2, [r3, #0]
 810878c:	687b      	ldr	r3, [r7, #4]
 810878e:	681b      	ldr	r3, [r3, #0]
 8108790:	f022 0214 	bic.w	r2, r2, #20
 8108794:	601a      	str	r2, [r3, #0]
 8108796:	e027      	b.n	81087e8 <HAL_DMA_IRQHandler+0xcc4>
 8108798:	40020010 	.word	0x40020010
 810879c:	40020028 	.word	0x40020028
 81087a0:	40020040 	.word	0x40020040
 81087a4:	40020058 	.word	0x40020058
 81087a8:	40020070 	.word	0x40020070
 81087ac:	40020088 	.word	0x40020088
 81087b0:	400200a0 	.word	0x400200a0
 81087b4:	400200b8 	.word	0x400200b8
 81087b8:	40020410 	.word	0x40020410
 81087bc:	40020428 	.word	0x40020428
 81087c0:	40020440 	.word	0x40020440
 81087c4:	40020458 	.word	0x40020458
 81087c8:	40020470 	.word	0x40020470
 81087cc:	40020488 	.word	0x40020488
 81087d0:	400204a0 	.word	0x400204a0
 81087d4:	400204b8 	.word	0x400204b8
 81087d8:	687b      	ldr	r3, [r7, #4]
 81087da:	681b      	ldr	r3, [r3, #0]
 81087dc:	681a      	ldr	r2, [r3, #0]
 81087de:	687b      	ldr	r3, [r7, #4]
 81087e0:	681b      	ldr	r3, [r3, #0]
 81087e2:	f022 020a 	bic.w	r2, r2, #10
 81087e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81087e8:	687b      	ldr	r3, [r7, #4]
 81087ea:	2201      	movs	r2, #1
 81087ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81087f0:	687b      	ldr	r3, [r7, #4]
 81087f2:	2200      	movs	r2, #0
 81087f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 81087f8:	687b      	ldr	r3, [r7, #4]
 81087fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81087fc:	2b00      	cmp	r3, #0
 81087fe:	f000 8097 	beq.w	8108930 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8108802:	687b      	ldr	r3, [r7, #4]
 8108804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108806:	6878      	ldr	r0, [r7, #4]
 8108808:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810880a:	e091      	b.n	8108930 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 810880c:	687b      	ldr	r3, [r7, #4]
 810880e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8108810:	f003 031f 	and.w	r3, r3, #31
 8108814:	2208      	movs	r2, #8
 8108816:	409a      	lsls	r2, r3
 8108818:	697b      	ldr	r3, [r7, #20]
 810881a:	4013      	ands	r3, r2
 810881c:	2b00      	cmp	r3, #0
 810881e:	f000 8088 	beq.w	8108932 <HAL_DMA_IRQHandler+0xe0e>
 8108822:	693b      	ldr	r3, [r7, #16]
 8108824:	f003 0308 	and.w	r3, r3, #8
 8108828:	2b00      	cmp	r3, #0
 810882a:	f000 8082 	beq.w	8108932 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 810882e:	687b      	ldr	r3, [r7, #4]
 8108830:	681b      	ldr	r3, [r3, #0]
 8108832:	4a41      	ldr	r2, [pc, #260]	@ (8108938 <HAL_DMA_IRQHandler+0xe14>)
 8108834:	4293      	cmp	r3, r2
 8108836:	d04a      	beq.n	81088ce <HAL_DMA_IRQHandler+0xdaa>
 8108838:	687b      	ldr	r3, [r7, #4]
 810883a:	681b      	ldr	r3, [r3, #0]
 810883c:	4a3f      	ldr	r2, [pc, #252]	@ (810893c <HAL_DMA_IRQHandler+0xe18>)
 810883e:	4293      	cmp	r3, r2
 8108840:	d045      	beq.n	81088ce <HAL_DMA_IRQHandler+0xdaa>
 8108842:	687b      	ldr	r3, [r7, #4]
 8108844:	681b      	ldr	r3, [r3, #0]
 8108846:	4a3e      	ldr	r2, [pc, #248]	@ (8108940 <HAL_DMA_IRQHandler+0xe1c>)
 8108848:	4293      	cmp	r3, r2
 810884a:	d040      	beq.n	81088ce <HAL_DMA_IRQHandler+0xdaa>
 810884c:	687b      	ldr	r3, [r7, #4]
 810884e:	681b      	ldr	r3, [r3, #0]
 8108850:	4a3c      	ldr	r2, [pc, #240]	@ (8108944 <HAL_DMA_IRQHandler+0xe20>)
 8108852:	4293      	cmp	r3, r2
 8108854:	d03b      	beq.n	81088ce <HAL_DMA_IRQHandler+0xdaa>
 8108856:	687b      	ldr	r3, [r7, #4]
 8108858:	681b      	ldr	r3, [r3, #0]
 810885a:	4a3b      	ldr	r2, [pc, #236]	@ (8108948 <HAL_DMA_IRQHandler+0xe24>)
 810885c:	4293      	cmp	r3, r2
 810885e:	d036      	beq.n	81088ce <HAL_DMA_IRQHandler+0xdaa>
 8108860:	687b      	ldr	r3, [r7, #4]
 8108862:	681b      	ldr	r3, [r3, #0]
 8108864:	4a39      	ldr	r2, [pc, #228]	@ (810894c <HAL_DMA_IRQHandler+0xe28>)
 8108866:	4293      	cmp	r3, r2
 8108868:	d031      	beq.n	81088ce <HAL_DMA_IRQHandler+0xdaa>
 810886a:	687b      	ldr	r3, [r7, #4]
 810886c:	681b      	ldr	r3, [r3, #0]
 810886e:	4a38      	ldr	r2, [pc, #224]	@ (8108950 <HAL_DMA_IRQHandler+0xe2c>)
 8108870:	4293      	cmp	r3, r2
 8108872:	d02c      	beq.n	81088ce <HAL_DMA_IRQHandler+0xdaa>
 8108874:	687b      	ldr	r3, [r7, #4]
 8108876:	681b      	ldr	r3, [r3, #0]
 8108878:	4a36      	ldr	r2, [pc, #216]	@ (8108954 <HAL_DMA_IRQHandler+0xe30>)
 810887a:	4293      	cmp	r3, r2
 810887c:	d027      	beq.n	81088ce <HAL_DMA_IRQHandler+0xdaa>
 810887e:	687b      	ldr	r3, [r7, #4]
 8108880:	681b      	ldr	r3, [r3, #0]
 8108882:	4a35      	ldr	r2, [pc, #212]	@ (8108958 <HAL_DMA_IRQHandler+0xe34>)
 8108884:	4293      	cmp	r3, r2
 8108886:	d022      	beq.n	81088ce <HAL_DMA_IRQHandler+0xdaa>
 8108888:	687b      	ldr	r3, [r7, #4]
 810888a:	681b      	ldr	r3, [r3, #0]
 810888c:	4a33      	ldr	r2, [pc, #204]	@ (810895c <HAL_DMA_IRQHandler+0xe38>)
 810888e:	4293      	cmp	r3, r2
 8108890:	d01d      	beq.n	81088ce <HAL_DMA_IRQHandler+0xdaa>
 8108892:	687b      	ldr	r3, [r7, #4]
 8108894:	681b      	ldr	r3, [r3, #0]
 8108896:	4a32      	ldr	r2, [pc, #200]	@ (8108960 <HAL_DMA_IRQHandler+0xe3c>)
 8108898:	4293      	cmp	r3, r2
 810889a:	d018      	beq.n	81088ce <HAL_DMA_IRQHandler+0xdaa>
 810889c:	687b      	ldr	r3, [r7, #4]
 810889e:	681b      	ldr	r3, [r3, #0]
 81088a0:	4a30      	ldr	r2, [pc, #192]	@ (8108964 <HAL_DMA_IRQHandler+0xe40>)
 81088a2:	4293      	cmp	r3, r2
 81088a4:	d013      	beq.n	81088ce <HAL_DMA_IRQHandler+0xdaa>
 81088a6:	687b      	ldr	r3, [r7, #4]
 81088a8:	681b      	ldr	r3, [r3, #0]
 81088aa:	4a2f      	ldr	r2, [pc, #188]	@ (8108968 <HAL_DMA_IRQHandler+0xe44>)
 81088ac:	4293      	cmp	r3, r2
 81088ae:	d00e      	beq.n	81088ce <HAL_DMA_IRQHandler+0xdaa>
 81088b0:	687b      	ldr	r3, [r7, #4]
 81088b2:	681b      	ldr	r3, [r3, #0]
 81088b4:	4a2d      	ldr	r2, [pc, #180]	@ (810896c <HAL_DMA_IRQHandler+0xe48>)
 81088b6:	4293      	cmp	r3, r2
 81088b8:	d009      	beq.n	81088ce <HAL_DMA_IRQHandler+0xdaa>
 81088ba:	687b      	ldr	r3, [r7, #4]
 81088bc:	681b      	ldr	r3, [r3, #0]
 81088be:	4a2c      	ldr	r2, [pc, #176]	@ (8108970 <HAL_DMA_IRQHandler+0xe4c>)
 81088c0:	4293      	cmp	r3, r2
 81088c2:	d004      	beq.n	81088ce <HAL_DMA_IRQHandler+0xdaa>
 81088c4:	687b      	ldr	r3, [r7, #4]
 81088c6:	681b      	ldr	r3, [r3, #0]
 81088c8:	4a2a      	ldr	r2, [pc, #168]	@ (8108974 <HAL_DMA_IRQHandler+0xe50>)
 81088ca:	4293      	cmp	r3, r2
 81088cc:	d108      	bne.n	81088e0 <HAL_DMA_IRQHandler+0xdbc>
 81088ce:	687b      	ldr	r3, [r7, #4]
 81088d0:	681b      	ldr	r3, [r3, #0]
 81088d2:	681a      	ldr	r2, [r3, #0]
 81088d4:	687b      	ldr	r3, [r7, #4]
 81088d6:	681b      	ldr	r3, [r3, #0]
 81088d8:	f022 021c 	bic.w	r2, r2, #28
 81088dc:	601a      	str	r2, [r3, #0]
 81088de:	e007      	b.n	81088f0 <HAL_DMA_IRQHandler+0xdcc>
 81088e0:	687b      	ldr	r3, [r7, #4]
 81088e2:	681b      	ldr	r3, [r3, #0]
 81088e4:	681a      	ldr	r2, [r3, #0]
 81088e6:	687b      	ldr	r3, [r7, #4]
 81088e8:	681b      	ldr	r3, [r3, #0]
 81088ea:	f022 020e 	bic.w	r2, r2, #14
 81088ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81088f0:	687b      	ldr	r3, [r7, #4]
 81088f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81088f4:	f003 031f 	and.w	r3, r3, #31
 81088f8:	2201      	movs	r2, #1
 81088fa:	409a      	lsls	r2, r3
 81088fc:	69fb      	ldr	r3, [r7, #28]
 81088fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8108900:	687b      	ldr	r3, [r7, #4]
 8108902:	2201      	movs	r2, #1
 8108904:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8108906:	687b      	ldr	r3, [r7, #4]
 8108908:	2201      	movs	r2, #1
 810890a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 810890e:	687b      	ldr	r3, [r7, #4]
 8108910:	2200      	movs	r2, #0
 8108912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8108916:	687b      	ldr	r3, [r7, #4]
 8108918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810891a:	2b00      	cmp	r3, #0
 810891c:	d009      	beq.n	8108932 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810891e:	687b      	ldr	r3, [r7, #4]
 8108920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108922:	6878      	ldr	r0, [r7, #4]
 8108924:	4798      	blx	r3
 8108926:	e004      	b.n	8108932 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8108928:	bf00      	nop
 810892a:	e002      	b.n	8108932 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810892c:	bf00      	nop
 810892e:	e000      	b.n	8108932 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8108930:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8108932:	3728      	adds	r7, #40	@ 0x28
 8108934:	46bd      	mov	sp, r7
 8108936:	bd80      	pop	{r7, pc}
 8108938:	40020010 	.word	0x40020010
 810893c:	40020028 	.word	0x40020028
 8108940:	40020040 	.word	0x40020040
 8108944:	40020058 	.word	0x40020058
 8108948:	40020070 	.word	0x40020070
 810894c:	40020088 	.word	0x40020088
 8108950:	400200a0 	.word	0x400200a0
 8108954:	400200b8 	.word	0x400200b8
 8108958:	40020410 	.word	0x40020410
 810895c:	40020428 	.word	0x40020428
 8108960:	40020440 	.word	0x40020440
 8108964:	40020458 	.word	0x40020458
 8108968:	40020470 	.word	0x40020470
 810896c:	40020488 	.word	0x40020488
 8108970:	400204a0 	.word	0x400204a0
 8108974:	400204b8 	.word	0x400204b8

08108978 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8108978:	b480      	push	{r7}
 810897a:	b085      	sub	sp, #20
 810897c:	af00      	add	r7, sp, #0
 810897e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8108980:	687b      	ldr	r3, [r7, #4]
 8108982:	681b      	ldr	r3, [r3, #0]
 8108984:	4a43      	ldr	r2, [pc, #268]	@ (8108a94 <DMA_CalcBaseAndBitshift+0x11c>)
 8108986:	4293      	cmp	r3, r2
 8108988:	d04a      	beq.n	8108a20 <DMA_CalcBaseAndBitshift+0xa8>
 810898a:	687b      	ldr	r3, [r7, #4]
 810898c:	681b      	ldr	r3, [r3, #0]
 810898e:	4a42      	ldr	r2, [pc, #264]	@ (8108a98 <DMA_CalcBaseAndBitshift+0x120>)
 8108990:	4293      	cmp	r3, r2
 8108992:	d045      	beq.n	8108a20 <DMA_CalcBaseAndBitshift+0xa8>
 8108994:	687b      	ldr	r3, [r7, #4]
 8108996:	681b      	ldr	r3, [r3, #0]
 8108998:	4a40      	ldr	r2, [pc, #256]	@ (8108a9c <DMA_CalcBaseAndBitshift+0x124>)
 810899a:	4293      	cmp	r3, r2
 810899c:	d040      	beq.n	8108a20 <DMA_CalcBaseAndBitshift+0xa8>
 810899e:	687b      	ldr	r3, [r7, #4]
 81089a0:	681b      	ldr	r3, [r3, #0]
 81089a2:	4a3f      	ldr	r2, [pc, #252]	@ (8108aa0 <DMA_CalcBaseAndBitshift+0x128>)
 81089a4:	4293      	cmp	r3, r2
 81089a6:	d03b      	beq.n	8108a20 <DMA_CalcBaseAndBitshift+0xa8>
 81089a8:	687b      	ldr	r3, [r7, #4]
 81089aa:	681b      	ldr	r3, [r3, #0]
 81089ac:	4a3d      	ldr	r2, [pc, #244]	@ (8108aa4 <DMA_CalcBaseAndBitshift+0x12c>)
 81089ae:	4293      	cmp	r3, r2
 81089b0:	d036      	beq.n	8108a20 <DMA_CalcBaseAndBitshift+0xa8>
 81089b2:	687b      	ldr	r3, [r7, #4]
 81089b4:	681b      	ldr	r3, [r3, #0]
 81089b6:	4a3c      	ldr	r2, [pc, #240]	@ (8108aa8 <DMA_CalcBaseAndBitshift+0x130>)
 81089b8:	4293      	cmp	r3, r2
 81089ba:	d031      	beq.n	8108a20 <DMA_CalcBaseAndBitshift+0xa8>
 81089bc:	687b      	ldr	r3, [r7, #4]
 81089be:	681b      	ldr	r3, [r3, #0]
 81089c0:	4a3a      	ldr	r2, [pc, #232]	@ (8108aac <DMA_CalcBaseAndBitshift+0x134>)
 81089c2:	4293      	cmp	r3, r2
 81089c4:	d02c      	beq.n	8108a20 <DMA_CalcBaseAndBitshift+0xa8>
 81089c6:	687b      	ldr	r3, [r7, #4]
 81089c8:	681b      	ldr	r3, [r3, #0]
 81089ca:	4a39      	ldr	r2, [pc, #228]	@ (8108ab0 <DMA_CalcBaseAndBitshift+0x138>)
 81089cc:	4293      	cmp	r3, r2
 81089ce:	d027      	beq.n	8108a20 <DMA_CalcBaseAndBitshift+0xa8>
 81089d0:	687b      	ldr	r3, [r7, #4]
 81089d2:	681b      	ldr	r3, [r3, #0]
 81089d4:	4a37      	ldr	r2, [pc, #220]	@ (8108ab4 <DMA_CalcBaseAndBitshift+0x13c>)
 81089d6:	4293      	cmp	r3, r2
 81089d8:	d022      	beq.n	8108a20 <DMA_CalcBaseAndBitshift+0xa8>
 81089da:	687b      	ldr	r3, [r7, #4]
 81089dc:	681b      	ldr	r3, [r3, #0]
 81089de:	4a36      	ldr	r2, [pc, #216]	@ (8108ab8 <DMA_CalcBaseAndBitshift+0x140>)
 81089e0:	4293      	cmp	r3, r2
 81089e2:	d01d      	beq.n	8108a20 <DMA_CalcBaseAndBitshift+0xa8>
 81089e4:	687b      	ldr	r3, [r7, #4]
 81089e6:	681b      	ldr	r3, [r3, #0]
 81089e8:	4a34      	ldr	r2, [pc, #208]	@ (8108abc <DMA_CalcBaseAndBitshift+0x144>)
 81089ea:	4293      	cmp	r3, r2
 81089ec:	d018      	beq.n	8108a20 <DMA_CalcBaseAndBitshift+0xa8>
 81089ee:	687b      	ldr	r3, [r7, #4]
 81089f0:	681b      	ldr	r3, [r3, #0]
 81089f2:	4a33      	ldr	r2, [pc, #204]	@ (8108ac0 <DMA_CalcBaseAndBitshift+0x148>)
 81089f4:	4293      	cmp	r3, r2
 81089f6:	d013      	beq.n	8108a20 <DMA_CalcBaseAndBitshift+0xa8>
 81089f8:	687b      	ldr	r3, [r7, #4]
 81089fa:	681b      	ldr	r3, [r3, #0]
 81089fc:	4a31      	ldr	r2, [pc, #196]	@ (8108ac4 <DMA_CalcBaseAndBitshift+0x14c>)
 81089fe:	4293      	cmp	r3, r2
 8108a00:	d00e      	beq.n	8108a20 <DMA_CalcBaseAndBitshift+0xa8>
 8108a02:	687b      	ldr	r3, [r7, #4]
 8108a04:	681b      	ldr	r3, [r3, #0]
 8108a06:	4a30      	ldr	r2, [pc, #192]	@ (8108ac8 <DMA_CalcBaseAndBitshift+0x150>)
 8108a08:	4293      	cmp	r3, r2
 8108a0a:	d009      	beq.n	8108a20 <DMA_CalcBaseAndBitshift+0xa8>
 8108a0c:	687b      	ldr	r3, [r7, #4]
 8108a0e:	681b      	ldr	r3, [r3, #0]
 8108a10:	4a2e      	ldr	r2, [pc, #184]	@ (8108acc <DMA_CalcBaseAndBitshift+0x154>)
 8108a12:	4293      	cmp	r3, r2
 8108a14:	d004      	beq.n	8108a20 <DMA_CalcBaseAndBitshift+0xa8>
 8108a16:	687b      	ldr	r3, [r7, #4]
 8108a18:	681b      	ldr	r3, [r3, #0]
 8108a1a:	4a2d      	ldr	r2, [pc, #180]	@ (8108ad0 <DMA_CalcBaseAndBitshift+0x158>)
 8108a1c:	4293      	cmp	r3, r2
 8108a1e:	d101      	bne.n	8108a24 <DMA_CalcBaseAndBitshift+0xac>
 8108a20:	2301      	movs	r3, #1
 8108a22:	e000      	b.n	8108a26 <DMA_CalcBaseAndBitshift+0xae>
 8108a24:	2300      	movs	r3, #0
 8108a26:	2b00      	cmp	r3, #0
 8108a28:	d026      	beq.n	8108a78 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8108a2a:	687b      	ldr	r3, [r7, #4]
 8108a2c:	681b      	ldr	r3, [r3, #0]
 8108a2e:	b2db      	uxtb	r3, r3
 8108a30:	3b10      	subs	r3, #16
 8108a32:	4a28      	ldr	r2, [pc, #160]	@ (8108ad4 <DMA_CalcBaseAndBitshift+0x15c>)
 8108a34:	fba2 2303 	umull	r2, r3, r2, r3
 8108a38:	091b      	lsrs	r3, r3, #4
 8108a3a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8108a3c:	68fb      	ldr	r3, [r7, #12]
 8108a3e:	f003 0307 	and.w	r3, r3, #7
 8108a42:	4a25      	ldr	r2, [pc, #148]	@ (8108ad8 <DMA_CalcBaseAndBitshift+0x160>)
 8108a44:	5cd3      	ldrb	r3, [r2, r3]
 8108a46:	461a      	mov	r2, r3
 8108a48:	687b      	ldr	r3, [r7, #4]
 8108a4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8108a4c:	68fb      	ldr	r3, [r7, #12]
 8108a4e:	2b03      	cmp	r3, #3
 8108a50:	d909      	bls.n	8108a66 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8108a52:	687b      	ldr	r3, [r7, #4]
 8108a54:	681b      	ldr	r3, [r3, #0]
 8108a56:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8108a5a:	f023 0303 	bic.w	r3, r3, #3
 8108a5e:	1d1a      	adds	r2, r3, #4
 8108a60:	687b      	ldr	r3, [r7, #4]
 8108a62:	659a      	str	r2, [r3, #88]	@ 0x58
 8108a64:	e00e      	b.n	8108a84 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8108a66:	687b      	ldr	r3, [r7, #4]
 8108a68:	681b      	ldr	r3, [r3, #0]
 8108a6a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8108a6e:	f023 0303 	bic.w	r3, r3, #3
 8108a72:	687a      	ldr	r2, [r7, #4]
 8108a74:	6593      	str	r3, [r2, #88]	@ 0x58
 8108a76:	e005      	b.n	8108a84 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8108a78:	687b      	ldr	r3, [r7, #4]
 8108a7a:	681b      	ldr	r3, [r3, #0]
 8108a7c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8108a80:	687b      	ldr	r3, [r7, #4]
 8108a82:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8108a84:	687b      	ldr	r3, [r7, #4]
 8108a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8108a88:	4618      	mov	r0, r3
 8108a8a:	3714      	adds	r7, #20
 8108a8c:	46bd      	mov	sp, r7
 8108a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a92:	4770      	bx	lr
 8108a94:	40020010 	.word	0x40020010
 8108a98:	40020028 	.word	0x40020028
 8108a9c:	40020040 	.word	0x40020040
 8108aa0:	40020058 	.word	0x40020058
 8108aa4:	40020070 	.word	0x40020070
 8108aa8:	40020088 	.word	0x40020088
 8108aac:	400200a0 	.word	0x400200a0
 8108ab0:	400200b8 	.word	0x400200b8
 8108ab4:	40020410 	.word	0x40020410
 8108ab8:	40020428 	.word	0x40020428
 8108abc:	40020440 	.word	0x40020440
 8108ac0:	40020458 	.word	0x40020458
 8108ac4:	40020470 	.word	0x40020470
 8108ac8:	40020488 	.word	0x40020488
 8108acc:	400204a0 	.word	0x400204a0
 8108ad0:	400204b8 	.word	0x400204b8
 8108ad4:	aaaaaaab 	.word	0xaaaaaaab
 8108ad8:	08116cd8 	.word	0x08116cd8

08108adc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8108adc:	b480      	push	{r7}
 8108ade:	b085      	sub	sp, #20
 8108ae0:	af00      	add	r7, sp, #0
 8108ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8108ae4:	2300      	movs	r3, #0
 8108ae6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8108ae8:	687b      	ldr	r3, [r7, #4]
 8108aea:	699b      	ldr	r3, [r3, #24]
 8108aec:	2b00      	cmp	r3, #0
 8108aee:	d120      	bne.n	8108b32 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8108af0:	687b      	ldr	r3, [r7, #4]
 8108af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108af4:	2b03      	cmp	r3, #3
 8108af6:	d858      	bhi.n	8108baa <DMA_CheckFifoParam+0xce>
 8108af8:	a201      	add	r2, pc, #4	@ (adr r2, 8108b00 <DMA_CheckFifoParam+0x24>)
 8108afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108afe:	bf00      	nop
 8108b00:	08108b11 	.word	0x08108b11
 8108b04:	08108b23 	.word	0x08108b23
 8108b08:	08108b11 	.word	0x08108b11
 8108b0c:	08108bab 	.word	0x08108bab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8108b10:	687b      	ldr	r3, [r7, #4]
 8108b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8108b18:	2b00      	cmp	r3, #0
 8108b1a:	d048      	beq.n	8108bae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8108b1c:	2301      	movs	r3, #1
 8108b1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8108b20:	e045      	b.n	8108bae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8108b22:	687b      	ldr	r3, [r7, #4]
 8108b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b26:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8108b2a:	d142      	bne.n	8108bb2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8108b2c:	2301      	movs	r3, #1
 8108b2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8108b30:	e03f      	b.n	8108bb2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8108b32:	687b      	ldr	r3, [r7, #4]
 8108b34:	699b      	ldr	r3, [r3, #24]
 8108b36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8108b3a:	d123      	bne.n	8108b84 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8108b3c:	687b      	ldr	r3, [r7, #4]
 8108b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108b40:	2b03      	cmp	r3, #3
 8108b42:	d838      	bhi.n	8108bb6 <DMA_CheckFifoParam+0xda>
 8108b44:	a201      	add	r2, pc, #4	@ (adr r2, 8108b4c <DMA_CheckFifoParam+0x70>)
 8108b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108b4a:	bf00      	nop
 8108b4c:	08108b5d 	.word	0x08108b5d
 8108b50:	08108b63 	.word	0x08108b63
 8108b54:	08108b5d 	.word	0x08108b5d
 8108b58:	08108b75 	.word	0x08108b75
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8108b5c:	2301      	movs	r3, #1
 8108b5e:	73fb      	strb	r3, [r7, #15]
        break;
 8108b60:	e030      	b.n	8108bc4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8108b62:	687b      	ldr	r3, [r7, #4]
 8108b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8108b6a:	2b00      	cmp	r3, #0
 8108b6c:	d025      	beq.n	8108bba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8108b6e:	2301      	movs	r3, #1
 8108b70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8108b72:	e022      	b.n	8108bba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8108b74:	687b      	ldr	r3, [r7, #4]
 8108b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b78:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8108b7c:	d11f      	bne.n	8108bbe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8108b7e:	2301      	movs	r3, #1
 8108b80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8108b82:	e01c      	b.n	8108bbe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8108b84:	687b      	ldr	r3, [r7, #4]
 8108b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108b88:	2b02      	cmp	r3, #2
 8108b8a:	d902      	bls.n	8108b92 <DMA_CheckFifoParam+0xb6>
 8108b8c:	2b03      	cmp	r3, #3
 8108b8e:	d003      	beq.n	8108b98 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8108b90:	e018      	b.n	8108bc4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8108b92:	2301      	movs	r3, #1
 8108b94:	73fb      	strb	r3, [r7, #15]
        break;
 8108b96:	e015      	b.n	8108bc4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8108b98:	687b      	ldr	r3, [r7, #4]
 8108b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8108ba0:	2b00      	cmp	r3, #0
 8108ba2:	d00e      	beq.n	8108bc2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8108ba4:	2301      	movs	r3, #1
 8108ba6:	73fb      	strb	r3, [r7, #15]
    break;
 8108ba8:	e00b      	b.n	8108bc2 <DMA_CheckFifoParam+0xe6>
        break;
 8108baa:	bf00      	nop
 8108bac:	e00a      	b.n	8108bc4 <DMA_CheckFifoParam+0xe8>
        break;
 8108bae:	bf00      	nop
 8108bb0:	e008      	b.n	8108bc4 <DMA_CheckFifoParam+0xe8>
        break;
 8108bb2:	bf00      	nop
 8108bb4:	e006      	b.n	8108bc4 <DMA_CheckFifoParam+0xe8>
        break;
 8108bb6:	bf00      	nop
 8108bb8:	e004      	b.n	8108bc4 <DMA_CheckFifoParam+0xe8>
        break;
 8108bba:	bf00      	nop
 8108bbc:	e002      	b.n	8108bc4 <DMA_CheckFifoParam+0xe8>
        break;
 8108bbe:	bf00      	nop
 8108bc0:	e000      	b.n	8108bc4 <DMA_CheckFifoParam+0xe8>
    break;
 8108bc2:	bf00      	nop
    }
  }

  return status;
 8108bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8108bc6:	4618      	mov	r0, r3
 8108bc8:	3714      	adds	r7, #20
 8108bca:	46bd      	mov	sp, r7
 8108bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108bd0:	4770      	bx	lr
 8108bd2:	bf00      	nop

08108bd4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8108bd4:	b480      	push	{r7}
 8108bd6:	b085      	sub	sp, #20
 8108bd8:	af00      	add	r7, sp, #0
 8108bda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8108bdc:	687b      	ldr	r3, [r7, #4]
 8108bde:	681b      	ldr	r3, [r3, #0]
 8108be0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8108be2:	687b      	ldr	r3, [r7, #4]
 8108be4:	681b      	ldr	r3, [r3, #0]
 8108be6:	4a3a      	ldr	r2, [pc, #232]	@ (8108cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8108be8:	4293      	cmp	r3, r2
 8108bea:	d022      	beq.n	8108c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8108bec:	687b      	ldr	r3, [r7, #4]
 8108bee:	681b      	ldr	r3, [r3, #0]
 8108bf0:	4a38      	ldr	r2, [pc, #224]	@ (8108cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8108bf2:	4293      	cmp	r3, r2
 8108bf4:	d01d      	beq.n	8108c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8108bf6:	687b      	ldr	r3, [r7, #4]
 8108bf8:	681b      	ldr	r3, [r3, #0]
 8108bfa:	4a37      	ldr	r2, [pc, #220]	@ (8108cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8108bfc:	4293      	cmp	r3, r2
 8108bfe:	d018      	beq.n	8108c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8108c00:	687b      	ldr	r3, [r7, #4]
 8108c02:	681b      	ldr	r3, [r3, #0]
 8108c04:	4a35      	ldr	r2, [pc, #212]	@ (8108cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8108c06:	4293      	cmp	r3, r2
 8108c08:	d013      	beq.n	8108c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8108c0a:	687b      	ldr	r3, [r7, #4]
 8108c0c:	681b      	ldr	r3, [r3, #0]
 8108c0e:	4a34      	ldr	r2, [pc, #208]	@ (8108ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8108c10:	4293      	cmp	r3, r2
 8108c12:	d00e      	beq.n	8108c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8108c14:	687b      	ldr	r3, [r7, #4]
 8108c16:	681b      	ldr	r3, [r3, #0]
 8108c18:	4a32      	ldr	r2, [pc, #200]	@ (8108ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8108c1a:	4293      	cmp	r3, r2
 8108c1c:	d009      	beq.n	8108c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8108c1e:	687b      	ldr	r3, [r7, #4]
 8108c20:	681b      	ldr	r3, [r3, #0]
 8108c22:	4a31      	ldr	r2, [pc, #196]	@ (8108ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8108c24:	4293      	cmp	r3, r2
 8108c26:	d004      	beq.n	8108c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8108c28:	687b      	ldr	r3, [r7, #4]
 8108c2a:	681b      	ldr	r3, [r3, #0]
 8108c2c:	4a2f      	ldr	r2, [pc, #188]	@ (8108cec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8108c2e:	4293      	cmp	r3, r2
 8108c30:	d101      	bne.n	8108c36 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8108c32:	2301      	movs	r3, #1
 8108c34:	e000      	b.n	8108c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8108c36:	2300      	movs	r3, #0
 8108c38:	2b00      	cmp	r3, #0
 8108c3a:	d01c      	beq.n	8108c76 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8108c3c:	687b      	ldr	r3, [r7, #4]
 8108c3e:	681b      	ldr	r3, [r3, #0]
 8108c40:	b2db      	uxtb	r3, r3
 8108c42:	3b08      	subs	r3, #8
 8108c44:	4a2a      	ldr	r2, [pc, #168]	@ (8108cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8108c46:	fba2 2303 	umull	r2, r3, r2, r3
 8108c4a:	091b      	lsrs	r3, r3, #4
 8108c4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8108c4e:	68fb      	ldr	r3, [r7, #12]
 8108c50:	f103 53b0 	add.w	r3, r3, #369098752	@ 0x16000000
 8108c54:	f503 4316 	add.w	r3, r3, #38400	@ 0x9600
 8108c58:	009b      	lsls	r3, r3, #2
 8108c5a:	461a      	mov	r2, r3
 8108c5c:	687b      	ldr	r3, [r7, #4]
 8108c5e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8108c60:	687b      	ldr	r3, [r7, #4]
 8108c62:	4a24      	ldr	r2, [pc, #144]	@ (8108cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8108c64:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8108c66:	68fb      	ldr	r3, [r7, #12]
 8108c68:	f003 031f 	and.w	r3, r3, #31
 8108c6c:	2201      	movs	r2, #1
 8108c6e:	409a      	lsls	r2, r3
 8108c70:	687b      	ldr	r3, [r7, #4]
 8108c72:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8108c74:	e026      	b.n	8108cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8108c76:	687b      	ldr	r3, [r7, #4]
 8108c78:	681b      	ldr	r3, [r3, #0]
 8108c7a:	b2db      	uxtb	r3, r3
 8108c7c:	3b10      	subs	r3, #16
 8108c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8108cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8108c80:	fba2 2303 	umull	r2, r3, r2, r3
 8108c84:	091b      	lsrs	r3, r3, #4
 8108c86:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8108c88:	68bb      	ldr	r3, [r7, #8]
 8108c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8108cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8108c8c:	4293      	cmp	r3, r2
 8108c8e:	d806      	bhi.n	8108c9e <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8108c90:	68bb      	ldr	r3, [r7, #8]
 8108c92:	4a1b      	ldr	r2, [pc, #108]	@ (8108d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8108c94:	4293      	cmp	r3, r2
 8108c96:	d902      	bls.n	8108c9e <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8108c98:	68fb      	ldr	r3, [r7, #12]
 8108c9a:	3308      	adds	r3, #8
 8108c9c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8108c9e:	68fb      	ldr	r3, [r7, #12]
 8108ca0:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8108ca4:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 8108ca8:	009b      	lsls	r3, r3, #2
 8108caa:	461a      	mov	r2, r3
 8108cac:	687b      	ldr	r3, [r7, #4]
 8108cae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8108cb0:	687b      	ldr	r3, [r7, #4]
 8108cb2:	4a14      	ldr	r2, [pc, #80]	@ (8108d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8108cb4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8108cb6:	68fb      	ldr	r3, [r7, #12]
 8108cb8:	f003 031f 	and.w	r3, r3, #31
 8108cbc:	2201      	movs	r2, #1
 8108cbe:	409a      	lsls	r2, r3
 8108cc0:	687b      	ldr	r3, [r7, #4]
 8108cc2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8108cc4:	bf00      	nop
 8108cc6:	3714      	adds	r7, #20
 8108cc8:	46bd      	mov	sp, r7
 8108cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cce:	4770      	bx	lr
 8108cd0:	58025408 	.word	0x58025408
 8108cd4:	5802541c 	.word	0x5802541c
 8108cd8:	58025430 	.word	0x58025430
 8108cdc:	58025444 	.word	0x58025444
 8108ce0:	58025458 	.word	0x58025458
 8108ce4:	5802546c 	.word	0x5802546c
 8108ce8:	58025480 	.word	0x58025480
 8108cec:	58025494 	.word	0x58025494
 8108cf0:	cccccccd 	.word	0xcccccccd
 8108cf4:	58025880 	.word	0x58025880
 8108cf8:	aaaaaaab 	.word	0xaaaaaaab
 8108cfc:	400204b8 	.word	0x400204b8
 8108d00:	4002040f 	.word	0x4002040f
 8108d04:	40020880 	.word	0x40020880

08108d08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8108d08:	b480      	push	{r7}
 8108d0a:	b085      	sub	sp, #20
 8108d0c:	af00      	add	r7, sp, #0
 8108d0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8108d10:	687b      	ldr	r3, [r7, #4]
 8108d12:	685b      	ldr	r3, [r3, #4]
 8108d14:	b2db      	uxtb	r3, r3
 8108d16:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8108d18:	68fb      	ldr	r3, [r7, #12]
 8108d1a:	2b00      	cmp	r3, #0
 8108d1c:	d04a      	beq.n	8108db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8108d1e:	68fb      	ldr	r3, [r7, #12]
 8108d20:	2b08      	cmp	r3, #8
 8108d22:	d847      	bhi.n	8108db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8108d24:	687b      	ldr	r3, [r7, #4]
 8108d26:	681b      	ldr	r3, [r3, #0]
 8108d28:	4a25      	ldr	r2, [pc, #148]	@ (8108dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8108d2a:	4293      	cmp	r3, r2
 8108d2c:	d022      	beq.n	8108d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8108d2e:	687b      	ldr	r3, [r7, #4]
 8108d30:	681b      	ldr	r3, [r3, #0]
 8108d32:	4a24      	ldr	r2, [pc, #144]	@ (8108dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8108d34:	4293      	cmp	r3, r2
 8108d36:	d01d      	beq.n	8108d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8108d38:	687b      	ldr	r3, [r7, #4]
 8108d3a:	681b      	ldr	r3, [r3, #0]
 8108d3c:	4a22      	ldr	r2, [pc, #136]	@ (8108dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8108d3e:	4293      	cmp	r3, r2
 8108d40:	d018      	beq.n	8108d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8108d42:	687b      	ldr	r3, [r7, #4]
 8108d44:	681b      	ldr	r3, [r3, #0]
 8108d46:	4a21      	ldr	r2, [pc, #132]	@ (8108dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8108d48:	4293      	cmp	r3, r2
 8108d4a:	d013      	beq.n	8108d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8108d4c:	687b      	ldr	r3, [r7, #4]
 8108d4e:	681b      	ldr	r3, [r3, #0]
 8108d50:	4a1f      	ldr	r2, [pc, #124]	@ (8108dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8108d52:	4293      	cmp	r3, r2
 8108d54:	d00e      	beq.n	8108d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8108d56:	687b      	ldr	r3, [r7, #4]
 8108d58:	681b      	ldr	r3, [r3, #0]
 8108d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8108dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8108d5c:	4293      	cmp	r3, r2
 8108d5e:	d009      	beq.n	8108d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8108d60:	687b      	ldr	r3, [r7, #4]
 8108d62:	681b      	ldr	r3, [r3, #0]
 8108d64:	4a1c      	ldr	r2, [pc, #112]	@ (8108dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8108d66:	4293      	cmp	r3, r2
 8108d68:	d004      	beq.n	8108d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8108d6a:	687b      	ldr	r3, [r7, #4]
 8108d6c:	681b      	ldr	r3, [r3, #0]
 8108d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8108ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8108d70:	4293      	cmp	r3, r2
 8108d72:	d101      	bne.n	8108d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8108d74:	2301      	movs	r3, #1
 8108d76:	e000      	b.n	8108d7a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8108d78:	2300      	movs	r3, #0
 8108d7a:	2b00      	cmp	r3, #0
 8108d7c:	d00a      	beq.n	8108d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8108d7e:	68fa      	ldr	r2, [r7, #12]
 8108d80:	4b17      	ldr	r3, [pc, #92]	@ (8108de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8108d82:	4413      	add	r3, r2
 8108d84:	009b      	lsls	r3, r3, #2
 8108d86:	461a      	mov	r2, r3
 8108d88:	687b      	ldr	r3, [r7, #4]
 8108d8a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8108d8c:	687b      	ldr	r3, [r7, #4]
 8108d8e:	4a15      	ldr	r2, [pc, #84]	@ (8108de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8108d90:	671a      	str	r2, [r3, #112]	@ 0x70
 8108d92:	e009      	b.n	8108da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8108d94:	68fa      	ldr	r2, [r7, #12]
 8108d96:	4b14      	ldr	r3, [pc, #80]	@ (8108de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8108d98:	4413      	add	r3, r2
 8108d9a:	009b      	lsls	r3, r3, #2
 8108d9c:	461a      	mov	r2, r3
 8108d9e:	687b      	ldr	r3, [r7, #4]
 8108da0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8108da2:	687b      	ldr	r3, [r7, #4]
 8108da4:	4a11      	ldr	r2, [pc, #68]	@ (8108dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8108da6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8108da8:	68fb      	ldr	r3, [r7, #12]
 8108daa:	3b01      	subs	r3, #1
 8108dac:	2201      	movs	r2, #1
 8108dae:	409a      	lsls	r2, r3
 8108db0:	687b      	ldr	r3, [r7, #4]
 8108db2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8108db4:	bf00      	nop
 8108db6:	3714      	adds	r7, #20
 8108db8:	46bd      	mov	sp, r7
 8108dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108dbe:	4770      	bx	lr
 8108dc0:	58025408 	.word	0x58025408
 8108dc4:	5802541c 	.word	0x5802541c
 8108dc8:	58025430 	.word	0x58025430
 8108dcc:	58025444 	.word	0x58025444
 8108dd0:	58025458 	.word	0x58025458
 8108dd4:	5802546c 	.word	0x5802546c
 8108dd8:	58025480 	.word	0x58025480
 8108ddc:	58025494 	.word	0x58025494
 8108de0:	1600963f 	.word	0x1600963f
 8108de4:	58025940 	.word	0x58025940
 8108de8:	1000823f 	.word	0x1000823f
 8108dec:	40020940 	.word	0x40020940

08108df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8108df0:	b480      	push	{r7}
 8108df2:	b089      	sub	sp, #36	@ 0x24
 8108df4:	af00      	add	r7, sp, #0
 8108df6:	6078      	str	r0, [r7, #4]
 8108df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8108dfa:	2300      	movs	r3, #0
 8108dfc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8108dfe:	4b89      	ldr	r3, [pc, #548]	@ (8109024 <HAL_GPIO_Init+0x234>)
 8108e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8108e02:	e194      	b.n	810912e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8108e04:	683b      	ldr	r3, [r7, #0]
 8108e06:	681a      	ldr	r2, [r3, #0]
 8108e08:	2101      	movs	r1, #1
 8108e0a:	69fb      	ldr	r3, [r7, #28]
 8108e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8108e10:	4013      	ands	r3, r2
 8108e12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8108e14:	693b      	ldr	r3, [r7, #16]
 8108e16:	2b00      	cmp	r3, #0
 8108e18:	f000 8186 	beq.w	8109128 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8108e1c:	683b      	ldr	r3, [r7, #0]
 8108e1e:	685b      	ldr	r3, [r3, #4]
 8108e20:	f003 0303 	and.w	r3, r3, #3
 8108e24:	2b01      	cmp	r3, #1
 8108e26:	d005      	beq.n	8108e34 <HAL_GPIO_Init+0x44>
 8108e28:	683b      	ldr	r3, [r7, #0]
 8108e2a:	685b      	ldr	r3, [r3, #4]
 8108e2c:	f003 0303 	and.w	r3, r3, #3
 8108e30:	2b02      	cmp	r3, #2
 8108e32:	d130      	bne.n	8108e96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8108e34:	687b      	ldr	r3, [r7, #4]
 8108e36:	689b      	ldr	r3, [r3, #8]
 8108e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8108e3a:	69fb      	ldr	r3, [r7, #28]
 8108e3c:	005b      	lsls	r3, r3, #1
 8108e3e:	2203      	movs	r2, #3
 8108e40:	fa02 f303 	lsl.w	r3, r2, r3
 8108e44:	43db      	mvns	r3, r3
 8108e46:	69ba      	ldr	r2, [r7, #24]
 8108e48:	4013      	ands	r3, r2
 8108e4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8108e4c:	683b      	ldr	r3, [r7, #0]
 8108e4e:	68da      	ldr	r2, [r3, #12]
 8108e50:	69fb      	ldr	r3, [r7, #28]
 8108e52:	005b      	lsls	r3, r3, #1
 8108e54:	fa02 f303 	lsl.w	r3, r2, r3
 8108e58:	69ba      	ldr	r2, [r7, #24]
 8108e5a:	4313      	orrs	r3, r2
 8108e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8108e5e:	687b      	ldr	r3, [r7, #4]
 8108e60:	69ba      	ldr	r2, [r7, #24]
 8108e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8108e64:	687b      	ldr	r3, [r7, #4]
 8108e66:	685b      	ldr	r3, [r3, #4]
 8108e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8108e6a:	2201      	movs	r2, #1
 8108e6c:	69fb      	ldr	r3, [r7, #28]
 8108e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8108e72:	43db      	mvns	r3, r3
 8108e74:	69ba      	ldr	r2, [r7, #24]
 8108e76:	4013      	ands	r3, r2
 8108e78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8108e7a:	683b      	ldr	r3, [r7, #0]
 8108e7c:	685b      	ldr	r3, [r3, #4]
 8108e7e:	091b      	lsrs	r3, r3, #4
 8108e80:	f003 0201 	and.w	r2, r3, #1
 8108e84:	69fb      	ldr	r3, [r7, #28]
 8108e86:	fa02 f303 	lsl.w	r3, r2, r3
 8108e8a:	69ba      	ldr	r2, [r7, #24]
 8108e8c:	4313      	orrs	r3, r2
 8108e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8108e90:	687b      	ldr	r3, [r7, #4]
 8108e92:	69ba      	ldr	r2, [r7, #24]
 8108e94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8108e96:	683b      	ldr	r3, [r7, #0]
 8108e98:	685b      	ldr	r3, [r3, #4]
 8108e9a:	f003 0303 	and.w	r3, r3, #3
 8108e9e:	2b03      	cmp	r3, #3
 8108ea0:	d017      	beq.n	8108ed2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8108ea2:	687b      	ldr	r3, [r7, #4]
 8108ea4:	68db      	ldr	r3, [r3, #12]
 8108ea6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8108ea8:	69fb      	ldr	r3, [r7, #28]
 8108eaa:	005b      	lsls	r3, r3, #1
 8108eac:	2203      	movs	r2, #3
 8108eae:	fa02 f303 	lsl.w	r3, r2, r3
 8108eb2:	43db      	mvns	r3, r3
 8108eb4:	69ba      	ldr	r2, [r7, #24]
 8108eb6:	4013      	ands	r3, r2
 8108eb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8108eba:	683b      	ldr	r3, [r7, #0]
 8108ebc:	689a      	ldr	r2, [r3, #8]
 8108ebe:	69fb      	ldr	r3, [r7, #28]
 8108ec0:	005b      	lsls	r3, r3, #1
 8108ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8108ec6:	69ba      	ldr	r2, [r7, #24]
 8108ec8:	4313      	orrs	r3, r2
 8108eca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8108ecc:	687b      	ldr	r3, [r7, #4]
 8108ece:	69ba      	ldr	r2, [r7, #24]
 8108ed0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8108ed2:	683b      	ldr	r3, [r7, #0]
 8108ed4:	685b      	ldr	r3, [r3, #4]
 8108ed6:	f003 0303 	and.w	r3, r3, #3
 8108eda:	2b02      	cmp	r3, #2
 8108edc:	d123      	bne.n	8108f26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8108ede:	69fb      	ldr	r3, [r7, #28]
 8108ee0:	08da      	lsrs	r2, r3, #3
 8108ee2:	687b      	ldr	r3, [r7, #4]
 8108ee4:	3208      	adds	r2, #8
 8108ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8108eec:	69fb      	ldr	r3, [r7, #28]
 8108eee:	f003 0307 	and.w	r3, r3, #7
 8108ef2:	009b      	lsls	r3, r3, #2
 8108ef4:	220f      	movs	r2, #15
 8108ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8108efa:	43db      	mvns	r3, r3
 8108efc:	69ba      	ldr	r2, [r7, #24]
 8108efe:	4013      	ands	r3, r2
 8108f00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8108f02:	683b      	ldr	r3, [r7, #0]
 8108f04:	691a      	ldr	r2, [r3, #16]
 8108f06:	69fb      	ldr	r3, [r7, #28]
 8108f08:	f003 0307 	and.w	r3, r3, #7
 8108f0c:	009b      	lsls	r3, r3, #2
 8108f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8108f12:	69ba      	ldr	r2, [r7, #24]
 8108f14:	4313      	orrs	r3, r2
 8108f16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8108f18:	69fb      	ldr	r3, [r7, #28]
 8108f1a:	08da      	lsrs	r2, r3, #3
 8108f1c:	687b      	ldr	r3, [r7, #4]
 8108f1e:	3208      	adds	r2, #8
 8108f20:	69b9      	ldr	r1, [r7, #24]
 8108f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8108f26:	687b      	ldr	r3, [r7, #4]
 8108f28:	681b      	ldr	r3, [r3, #0]
 8108f2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8108f2c:	69fb      	ldr	r3, [r7, #28]
 8108f2e:	005b      	lsls	r3, r3, #1
 8108f30:	2203      	movs	r2, #3
 8108f32:	fa02 f303 	lsl.w	r3, r2, r3
 8108f36:	43db      	mvns	r3, r3
 8108f38:	69ba      	ldr	r2, [r7, #24]
 8108f3a:	4013      	ands	r3, r2
 8108f3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8108f3e:	683b      	ldr	r3, [r7, #0]
 8108f40:	685b      	ldr	r3, [r3, #4]
 8108f42:	f003 0203 	and.w	r2, r3, #3
 8108f46:	69fb      	ldr	r3, [r7, #28]
 8108f48:	005b      	lsls	r3, r3, #1
 8108f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8108f4e:	69ba      	ldr	r2, [r7, #24]
 8108f50:	4313      	orrs	r3, r2
 8108f52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8108f54:	687b      	ldr	r3, [r7, #4]
 8108f56:	69ba      	ldr	r2, [r7, #24]
 8108f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8108f5a:	683b      	ldr	r3, [r7, #0]
 8108f5c:	685b      	ldr	r3, [r3, #4]
 8108f5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8108f62:	2b00      	cmp	r3, #0
 8108f64:	f000 80e0 	beq.w	8109128 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8108f68:	4b2f      	ldr	r3, [pc, #188]	@ (8109028 <HAL_GPIO_Init+0x238>)
 8108f6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8108f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8109028 <HAL_GPIO_Init+0x238>)
 8108f70:	f043 0302 	orr.w	r3, r3, #2
 8108f74:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8108f78:	4b2b      	ldr	r3, [pc, #172]	@ (8109028 <HAL_GPIO_Init+0x238>)
 8108f7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8108f7e:	f003 0302 	and.w	r3, r3, #2
 8108f82:	60fb      	str	r3, [r7, #12]
 8108f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8108f86:	4a29      	ldr	r2, [pc, #164]	@ (810902c <HAL_GPIO_Init+0x23c>)
 8108f88:	69fb      	ldr	r3, [r7, #28]
 8108f8a:	089b      	lsrs	r3, r3, #2
 8108f8c:	3302      	adds	r3, #2
 8108f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8108f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8108f94:	69fb      	ldr	r3, [r7, #28]
 8108f96:	f003 0303 	and.w	r3, r3, #3
 8108f9a:	009b      	lsls	r3, r3, #2
 8108f9c:	220f      	movs	r2, #15
 8108f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8108fa2:	43db      	mvns	r3, r3
 8108fa4:	69ba      	ldr	r2, [r7, #24]
 8108fa6:	4013      	ands	r3, r2
 8108fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8108faa:	687b      	ldr	r3, [r7, #4]
 8108fac:	4a20      	ldr	r2, [pc, #128]	@ (8109030 <HAL_GPIO_Init+0x240>)
 8108fae:	4293      	cmp	r3, r2
 8108fb0:	d052      	beq.n	8109058 <HAL_GPIO_Init+0x268>
 8108fb2:	687b      	ldr	r3, [r7, #4]
 8108fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8109034 <HAL_GPIO_Init+0x244>)
 8108fb6:	4293      	cmp	r3, r2
 8108fb8:	d031      	beq.n	810901e <HAL_GPIO_Init+0x22e>
 8108fba:	687b      	ldr	r3, [r7, #4]
 8108fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8109038 <HAL_GPIO_Init+0x248>)
 8108fbe:	4293      	cmp	r3, r2
 8108fc0:	d02b      	beq.n	810901a <HAL_GPIO_Init+0x22a>
 8108fc2:	687b      	ldr	r3, [r7, #4]
 8108fc4:	4a1d      	ldr	r2, [pc, #116]	@ (810903c <HAL_GPIO_Init+0x24c>)
 8108fc6:	4293      	cmp	r3, r2
 8108fc8:	d025      	beq.n	8109016 <HAL_GPIO_Init+0x226>
 8108fca:	687b      	ldr	r3, [r7, #4]
 8108fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8109040 <HAL_GPIO_Init+0x250>)
 8108fce:	4293      	cmp	r3, r2
 8108fd0:	d01f      	beq.n	8109012 <HAL_GPIO_Init+0x222>
 8108fd2:	687b      	ldr	r3, [r7, #4]
 8108fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8109044 <HAL_GPIO_Init+0x254>)
 8108fd6:	4293      	cmp	r3, r2
 8108fd8:	d019      	beq.n	810900e <HAL_GPIO_Init+0x21e>
 8108fda:	687b      	ldr	r3, [r7, #4]
 8108fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8109048 <HAL_GPIO_Init+0x258>)
 8108fde:	4293      	cmp	r3, r2
 8108fe0:	d013      	beq.n	810900a <HAL_GPIO_Init+0x21a>
 8108fe2:	687b      	ldr	r3, [r7, #4]
 8108fe4:	4a19      	ldr	r2, [pc, #100]	@ (810904c <HAL_GPIO_Init+0x25c>)
 8108fe6:	4293      	cmp	r3, r2
 8108fe8:	d00d      	beq.n	8109006 <HAL_GPIO_Init+0x216>
 8108fea:	687b      	ldr	r3, [r7, #4]
 8108fec:	4a18      	ldr	r2, [pc, #96]	@ (8109050 <HAL_GPIO_Init+0x260>)
 8108fee:	4293      	cmp	r3, r2
 8108ff0:	d007      	beq.n	8109002 <HAL_GPIO_Init+0x212>
 8108ff2:	687b      	ldr	r3, [r7, #4]
 8108ff4:	4a17      	ldr	r2, [pc, #92]	@ (8109054 <HAL_GPIO_Init+0x264>)
 8108ff6:	4293      	cmp	r3, r2
 8108ff8:	d101      	bne.n	8108ffe <HAL_GPIO_Init+0x20e>
 8108ffa:	2309      	movs	r3, #9
 8108ffc:	e02d      	b.n	810905a <HAL_GPIO_Init+0x26a>
 8108ffe:	230a      	movs	r3, #10
 8109000:	e02b      	b.n	810905a <HAL_GPIO_Init+0x26a>
 8109002:	2308      	movs	r3, #8
 8109004:	e029      	b.n	810905a <HAL_GPIO_Init+0x26a>
 8109006:	2307      	movs	r3, #7
 8109008:	e027      	b.n	810905a <HAL_GPIO_Init+0x26a>
 810900a:	2306      	movs	r3, #6
 810900c:	e025      	b.n	810905a <HAL_GPIO_Init+0x26a>
 810900e:	2305      	movs	r3, #5
 8109010:	e023      	b.n	810905a <HAL_GPIO_Init+0x26a>
 8109012:	2304      	movs	r3, #4
 8109014:	e021      	b.n	810905a <HAL_GPIO_Init+0x26a>
 8109016:	2303      	movs	r3, #3
 8109018:	e01f      	b.n	810905a <HAL_GPIO_Init+0x26a>
 810901a:	2302      	movs	r3, #2
 810901c:	e01d      	b.n	810905a <HAL_GPIO_Init+0x26a>
 810901e:	2301      	movs	r3, #1
 8109020:	e01b      	b.n	810905a <HAL_GPIO_Init+0x26a>
 8109022:	bf00      	nop
 8109024:	580000c0 	.word	0x580000c0
 8109028:	58024400 	.word	0x58024400
 810902c:	58000400 	.word	0x58000400
 8109030:	58020000 	.word	0x58020000
 8109034:	58020400 	.word	0x58020400
 8109038:	58020800 	.word	0x58020800
 810903c:	58020c00 	.word	0x58020c00
 8109040:	58021000 	.word	0x58021000
 8109044:	58021400 	.word	0x58021400
 8109048:	58021800 	.word	0x58021800
 810904c:	58021c00 	.word	0x58021c00
 8109050:	58022000 	.word	0x58022000
 8109054:	58022400 	.word	0x58022400
 8109058:	2300      	movs	r3, #0
 810905a:	69fa      	ldr	r2, [r7, #28]
 810905c:	f002 0203 	and.w	r2, r2, #3
 8109060:	0092      	lsls	r2, r2, #2
 8109062:	4093      	lsls	r3, r2
 8109064:	69ba      	ldr	r2, [r7, #24]
 8109066:	4313      	orrs	r3, r2
 8109068:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810906a:	4938      	ldr	r1, [pc, #224]	@ (810914c <HAL_GPIO_Init+0x35c>)
 810906c:	69fb      	ldr	r3, [r7, #28]
 810906e:	089b      	lsrs	r3, r3, #2
 8109070:	3302      	adds	r3, #2
 8109072:	69ba      	ldr	r2, [r7, #24]
 8109074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8109078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810907c:	681b      	ldr	r3, [r3, #0]
 810907e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8109080:	693b      	ldr	r3, [r7, #16]
 8109082:	43db      	mvns	r3, r3
 8109084:	69ba      	ldr	r2, [r7, #24]
 8109086:	4013      	ands	r3, r2
 8109088:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810908a:	683b      	ldr	r3, [r7, #0]
 810908c:	685b      	ldr	r3, [r3, #4]
 810908e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8109092:	2b00      	cmp	r3, #0
 8109094:	d003      	beq.n	810909e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8109096:	69ba      	ldr	r2, [r7, #24]
 8109098:	693b      	ldr	r3, [r7, #16]
 810909a:	4313      	orrs	r3, r2
 810909c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810909e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81090a2:	69bb      	ldr	r3, [r7, #24]
 81090a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81090a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81090aa:	685b      	ldr	r3, [r3, #4]
 81090ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81090ae:	693b      	ldr	r3, [r7, #16]
 81090b0:	43db      	mvns	r3, r3
 81090b2:	69ba      	ldr	r2, [r7, #24]
 81090b4:	4013      	ands	r3, r2
 81090b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81090b8:	683b      	ldr	r3, [r7, #0]
 81090ba:	685b      	ldr	r3, [r3, #4]
 81090bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81090c0:	2b00      	cmp	r3, #0
 81090c2:	d003      	beq.n	81090cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81090c4:	69ba      	ldr	r2, [r7, #24]
 81090c6:	693b      	ldr	r3, [r7, #16]
 81090c8:	4313      	orrs	r3, r2
 81090ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81090cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81090d0:	69bb      	ldr	r3, [r7, #24]
 81090d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81090d4:	697b      	ldr	r3, [r7, #20]
 81090d6:	685b      	ldr	r3, [r3, #4]
 81090d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81090da:	693b      	ldr	r3, [r7, #16]
 81090dc:	43db      	mvns	r3, r3
 81090de:	69ba      	ldr	r2, [r7, #24]
 81090e0:	4013      	ands	r3, r2
 81090e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81090e4:	683b      	ldr	r3, [r7, #0]
 81090e6:	685b      	ldr	r3, [r3, #4]
 81090e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81090ec:	2b00      	cmp	r3, #0
 81090ee:	d003      	beq.n	81090f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81090f0:	69ba      	ldr	r2, [r7, #24]
 81090f2:	693b      	ldr	r3, [r7, #16]
 81090f4:	4313      	orrs	r3, r2
 81090f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81090f8:	697b      	ldr	r3, [r7, #20]
 81090fa:	69ba      	ldr	r2, [r7, #24]
 81090fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81090fe:	697b      	ldr	r3, [r7, #20]
 8109100:	681b      	ldr	r3, [r3, #0]
 8109102:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8109104:	693b      	ldr	r3, [r7, #16]
 8109106:	43db      	mvns	r3, r3
 8109108:	69ba      	ldr	r2, [r7, #24]
 810910a:	4013      	ands	r3, r2
 810910c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810910e:	683b      	ldr	r3, [r7, #0]
 8109110:	685b      	ldr	r3, [r3, #4]
 8109112:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8109116:	2b00      	cmp	r3, #0
 8109118:	d003      	beq.n	8109122 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810911a:	69ba      	ldr	r2, [r7, #24]
 810911c:	693b      	ldr	r3, [r7, #16]
 810911e:	4313      	orrs	r3, r2
 8109120:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8109122:	697b      	ldr	r3, [r7, #20]
 8109124:	69ba      	ldr	r2, [r7, #24]
 8109126:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8109128:	69fb      	ldr	r3, [r7, #28]
 810912a:	3301      	adds	r3, #1
 810912c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810912e:	683b      	ldr	r3, [r7, #0]
 8109130:	681a      	ldr	r2, [r3, #0]
 8109132:	69fb      	ldr	r3, [r7, #28]
 8109134:	fa22 f303 	lsr.w	r3, r2, r3
 8109138:	2b00      	cmp	r3, #0
 810913a:	f47f ae63 	bne.w	8108e04 <HAL_GPIO_Init+0x14>
  }
}
 810913e:	bf00      	nop
 8109140:	bf00      	nop
 8109142:	3724      	adds	r7, #36	@ 0x24
 8109144:	46bd      	mov	sp, r7
 8109146:	f85d 7b04 	ldr.w	r7, [sp], #4
 810914a:	4770      	bx	lr
 810914c:	58000400 	.word	0x58000400

08109150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8109150:	b480      	push	{r7}
 8109152:	b083      	sub	sp, #12
 8109154:	af00      	add	r7, sp, #0
 8109156:	6078      	str	r0, [r7, #4]
 8109158:	460b      	mov	r3, r1
 810915a:	807b      	strh	r3, [r7, #2]
 810915c:	4613      	mov	r3, r2
 810915e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8109160:	787b      	ldrb	r3, [r7, #1]
 8109162:	2b00      	cmp	r3, #0
 8109164:	d003      	beq.n	810916e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8109166:	887a      	ldrh	r2, [r7, #2]
 8109168:	687b      	ldr	r3, [r7, #4]
 810916a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 810916c:	e003      	b.n	8109176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810916e:	887b      	ldrh	r3, [r7, #2]
 8109170:	041a      	lsls	r2, r3, #16
 8109172:	687b      	ldr	r3, [r7, #4]
 8109174:	619a      	str	r2, [r3, #24]
}
 8109176:	bf00      	nop
 8109178:	370c      	adds	r7, #12
 810917a:	46bd      	mov	sp, r7
 810917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109180:	4770      	bx	lr

08109182 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8109182:	b580      	push	{r7, lr}
 8109184:	b082      	sub	sp, #8
 8109186:	af00      	add	r7, sp, #0
 8109188:	4603      	mov	r3, r0
 810918a:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 810918c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8109190:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8109194:	88fb      	ldrh	r3, [r7, #6]
 8109196:	4013      	ands	r3, r2
 8109198:	2b00      	cmp	r3, #0
 810919a:	d008      	beq.n	81091ae <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 810919c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81091a0:	88fb      	ldrh	r3, [r7, #6]
 81091a2:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 81091a6:	88fb      	ldrh	r3, [r7, #6]
 81091a8:	4618      	mov	r0, r3
 81091aa:	f7fa fdcf 	bl	8103d4c <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 81091ae:	bf00      	nop
 81091b0:	3708      	adds	r7, #8
 81091b2:	46bd      	mov	sp, r7
 81091b4:	bd80      	pop	{r7, pc}
	...

081091b8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81091b8:	b480      	push	{r7}
 81091ba:	b083      	sub	sp, #12
 81091bc:	af00      	add	r7, sp, #0
 81091be:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81091c0:	4b05      	ldr	r3, [pc, #20]	@ (81091d8 <HAL_HSEM_ActivateNotification+0x20>)
 81091c2:	681a      	ldr	r2, [r3, #0]
 81091c4:	4904      	ldr	r1, [pc, #16]	@ (81091d8 <HAL_HSEM_ActivateNotification+0x20>)
 81091c6:	687b      	ldr	r3, [r7, #4]
 81091c8:	4313      	orrs	r3, r2
 81091ca:	600b      	str	r3, [r1, #0]
#endif
}
 81091cc:	bf00      	nop
 81091ce:	370c      	adds	r7, #12
 81091d0:	46bd      	mov	sp, r7
 81091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091d6:	4770      	bx	lr
 81091d8:	58026510 	.word	0x58026510

081091dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 81091dc:	b580      	push	{r7, lr}
 81091de:	b082      	sub	sp, #8
 81091e0:	af00      	add	r7, sp, #0
 81091e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 81091e4:	687b      	ldr	r3, [r7, #4]
 81091e6:	2b00      	cmp	r3, #0
 81091e8:	d101      	bne.n	81091ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 81091ea:	2301      	movs	r3, #1
 81091ec:	e08d      	b.n	810930a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 81091ee:	687b      	ldr	r3, [r7, #4]
 81091f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81091f4:	b2db      	uxtb	r3, r3
 81091f6:	2b00      	cmp	r3, #0
 81091f8:	d106      	bne.n	8109208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 81091fa:	687b      	ldr	r3, [r7, #4]
 81091fc:	2200      	movs	r2, #0
 81091fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8109202:	6878      	ldr	r0, [r7, #4]
 8109204:	f7fb f80e 	bl	8104224 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8109208:	687b      	ldr	r3, [r7, #4]
 810920a:	2224      	movs	r2, #36	@ 0x24
 810920c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8109210:	687b      	ldr	r3, [r7, #4]
 8109212:	681b      	ldr	r3, [r3, #0]
 8109214:	681a      	ldr	r2, [r3, #0]
 8109216:	687b      	ldr	r3, [r7, #4]
 8109218:	681b      	ldr	r3, [r3, #0]
 810921a:	f022 0201 	bic.w	r2, r2, #1
 810921e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8109220:	687b      	ldr	r3, [r7, #4]
 8109222:	685a      	ldr	r2, [r3, #4]
 8109224:	687b      	ldr	r3, [r7, #4]
 8109226:	681b      	ldr	r3, [r3, #0]
 8109228:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 810922c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810922e:	687b      	ldr	r3, [r7, #4]
 8109230:	681b      	ldr	r3, [r3, #0]
 8109232:	689a      	ldr	r2, [r3, #8]
 8109234:	687b      	ldr	r3, [r7, #4]
 8109236:	681b      	ldr	r3, [r3, #0]
 8109238:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 810923c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810923e:	687b      	ldr	r3, [r7, #4]
 8109240:	68db      	ldr	r3, [r3, #12]
 8109242:	2b01      	cmp	r3, #1
 8109244:	d107      	bne.n	8109256 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8109246:	687b      	ldr	r3, [r7, #4]
 8109248:	689a      	ldr	r2, [r3, #8]
 810924a:	687b      	ldr	r3, [r7, #4]
 810924c:	681b      	ldr	r3, [r3, #0]
 810924e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8109252:	609a      	str	r2, [r3, #8]
 8109254:	e006      	b.n	8109264 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8109256:	687b      	ldr	r3, [r7, #4]
 8109258:	689a      	ldr	r2, [r3, #8]
 810925a:	687b      	ldr	r3, [r7, #4]
 810925c:	681b      	ldr	r3, [r3, #0]
 810925e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8109262:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8109264:	687b      	ldr	r3, [r7, #4]
 8109266:	68db      	ldr	r3, [r3, #12]
 8109268:	2b02      	cmp	r3, #2
 810926a:	d108      	bne.n	810927e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 810926c:	687b      	ldr	r3, [r7, #4]
 810926e:	681b      	ldr	r3, [r3, #0]
 8109270:	685a      	ldr	r2, [r3, #4]
 8109272:	687b      	ldr	r3, [r7, #4]
 8109274:	681b      	ldr	r3, [r3, #0]
 8109276:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810927a:	605a      	str	r2, [r3, #4]
 810927c:	e007      	b.n	810928e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 810927e:	687b      	ldr	r3, [r7, #4]
 8109280:	681b      	ldr	r3, [r3, #0]
 8109282:	685a      	ldr	r2, [r3, #4]
 8109284:	687b      	ldr	r3, [r7, #4]
 8109286:	681b      	ldr	r3, [r3, #0]
 8109288:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 810928c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810928e:	687b      	ldr	r3, [r7, #4]
 8109290:	681b      	ldr	r3, [r3, #0]
 8109292:	685b      	ldr	r3, [r3, #4]
 8109294:	687a      	ldr	r2, [r7, #4]
 8109296:	6812      	ldr	r2, [r2, #0]
 8109298:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810929c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 81092a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81092a2:	687b      	ldr	r3, [r7, #4]
 81092a4:	681b      	ldr	r3, [r3, #0]
 81092a6:	68da      	ldr	r2, [r3, #12]
 81092a8:	687b      	ldr	r3, [r7, #4]
 81092aa:	681b      	ldr	r3, [r3, #0]
 81092ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 81092b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81092b2:	687b      	ldr	r3, [r7, #4]
 81092b4:	691a      	ldr	r2, [r3, #16]
 81092b6:	687b      	ldr	r3, [r7, #4]
 81092b8:	695b      	ldr	r3, [r3, #20]
 81092ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 81092be:	687b      	ldr	r3, [r7, #4]
 81092c0:	699b      	ldr	r3, [r3, #24]
 81092c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81092c4:	687b      	ldr	r3, [r7, #4]
 81092c6:	681b      	ldr	r3, [r3, #0]
 81092c8:	430a      	orrs	r2, r1
 81092ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81092cc:	687b      	ldr	r3, [r7, #4]
 81092ce:	69d9      	ldr	r1, [r3, #28]
 81092d0:	687b      	ldr	r3, [r7, #4]
 81092d2:	6a1a      	ldr	r2, [r3, #32]
 81092d4:	687b      	ldr	r3, [r7, #4]
 81092d6:	681b      	ldr	r3, [r3, #0]
 81092d8:	430a      	orrs	r2, r1
 81092da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81092dc:	687b      	ldr	r3, [r7, #4]
 81092de:	681b      	ldr	r3, [r3, #0]
 81092e0:	681a      	ldr	r2, [r3, #0]
 81092e2:	687b      	ldr	r3, [r7, #4]
 81092e4:	681b      	ldr	r3, [r3, #0]
 81092e6:	f042 0201 	orr.w	r2, r2, #1
 81092ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81092ec:	687b      	ldr	r3, [r7, #4]
 81092ee:	2200      	movs	r2, #0
 81092f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 81092f2:	687b      	ldr	r3, [r7, #4]
 81092f4:	2220      	movs	r2, #32
 81092f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 81092fa:	687b      	ldr	r3, [r7, #4]
 81092fc:	2200      	movs	r2, #0
 81092fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8109300:	687b      	ldr	r3, [r7, #4]
 8109302:	2200      	movs	r2, #0
 8109304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8109308:	2300      	movs	r3, #0
}
 810930a:	4618      	mov	r0, r3
 810930c:	3708      	adds	r7, #8
 810930e:	46bd      	mov	sp, r7
 8109310:	bd80      	pop	{r7, pc}
	...

08109314 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8109314:	b580      	push	{r7, lr}
 8109316:	b088      	sub	sp, #32
 8109318:	af02      	add	r7, sp, #8
 810931a:	60f8      	str	r0, [r7, #12]
 810931c:	607a      	str	r2, [r7, #4]
 810931e:	461a      	mov	r2, r3
 8109320:	460b      	mov	r3, r1
 8109322:	817b      	strh	r3, [r7, #10]
 8109324:	4613      	mov	r3, r2
 8109326:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8109328:	68fb      	ldr	r3, [r7, #12]
 810932a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810932e:	b2db      	uxtb	r3, r3
 8109330:	2b20      	cmp	r3, #32
 8109332:	f040 80fd 	bne.w	8109530 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8109336:	68fb      	ldr	r3, [r7, #12]
 8109338:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810933c:	2b01      	cmp	r3, #1
 810933e:	d101      	bne.n	8109344 <HAL_I2C_Master_Transmit+0x30>
 8109340:	2302      	movs	r3, #2
 8109342:	e0f6      	b.n	8109532 <HAL_I2C_Master_Transmit+0x21e>
 8109344:	68fb      	ldr	r3, [r7, #12]
 8109346:	2201      	movs	r2, #1
 8109348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810934c:	f7fb fce4 	bl	8104d18 <HAL_GetTick>
 8109350:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8109352:	693b      	ldr	r3, [r7, #16]
 8109354:	9300      	str	r3, [sp, #0]
 8109356:	2319      	movs	r3, #25
 8109358:	2201      	movs	r2, #1
 810935a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 810935e:	68f8      	ldr	r0, [r7, #12]
 8109360:	f000 fa24 	bl	81097ac <I2C_WaitOnFlagUntilTimeout>
 8109364:	4603      	mov	r3, r0
 8109366:	2b00      	cmp	r3, #0
 8109368:	d001      	beq.n	810936e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 810936a:	2301      	movs	r3, #1
 810936c:	e0e1      	b.n	8109532 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 810936e:	68fb      	ldr	r3, [r7, #12]
 8109370:	2221      	movs	r2, #33	@ 0x21
 8109372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8109376:	68fb      	ldr	r3, [r7, #12]
 8109378:	2210      	movs	r2, #16
 810937a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810937e:	68fb      	ldr	r3, [r7, #12]
 8109380:	2200      	movs	r2, #0
 8109382:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8109384:	68fb      	ldr	r3, [r7, #12]
 8109386:	687a      	ldr	r2, [r7, #4]
 8109388:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 810938a:	68fb      	ldr	r3, [r7, #12]
 810938c:	893a      	ldrh	r2, [r7, #8]
 810938e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8109390:	68fb      	ldr	r3, [r7, #12]
 8109392:	2200      	movs	r2, #0
 8109394:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8109396:	68fb      	ldr	r3, [r7, #12]
 8109398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810939a:	b29b      	uxth	r3, r3
 810939c:	2bff      	cmp	r3, #255	@ 0xff
 810939e:	d906      	bls.n	81093ae <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81093a0:	68fb      	ldr	r3, [r7, #12]
 81093a2:	22ff      	movs	r2, #255	@ 0xff
 81093a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 81093a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81093aa:	617b      	str	r3, [r7, #20]
 81093ac:	e007      	b.n	81093be <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81093ae:	68fb      	ldr	r3, [r7, #12]
 81093b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81093b2:	b29a      	uxth	r2, r3
 81093b4:	68fb      	ldr	r3, [r7, #12]
 81093b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 81093b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81093bc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 81093be:	68fb      	ldr	r3, [r7, #12]
 81093c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81093c2:	2b00      	cmp	r3, #0
 81093c4:	d024      	beq.n	8109410 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81093c6:	68fb      	ldr	r3, [r7, #12]
 81093c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81093ca:	781a      	ldrb	r2, [r3, #0]
 81093cc:	68fb      	ldr	r3, [r7, #12]
 81093ce:	681b      	ldr	r3, [r3, #0]
 81093d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81093d2:	68fb      	ldr	r3, [r7, #12]
 81093d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81093d6:	1c5a      	adds	r2, r3, #1
 81093d8:	68fb      	ldr	r3, [r7, #12]
 81093da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 81093dc:	68fb      	ldr	r3, [r7, #12]
 81093de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81093e0:	b29b      	uxth	r3, r3
 81093e2:	3b01      	subs	r3, #1
 81093e4:	b29a      	uxth	r2, r3
 81093e6:	68fb      	ldr	r3, [r7, #12]
 81093e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 81093ea:	68fb      	ldr	r3, [r7, #12]
 81093ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81093ee:	3b01      	subs	r3, #1
 81093f0:	b29a      	uxth	r2, r3
 81093f2:	68fb      	ldr	r3, [r7, #12]
 81093f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 81093f6:	68fb      	ldr	r3, [r7, #12]
 81093f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81093fa:	b2db      	uxtb	r3, r3
 81093fc:	3301      	adds	r3, #1
 81093fe:	b2da      	uxtb	r2, r3
 8109400:	8979      	ldrh	r1, [r7, #10]
 8109402:	4b4e      	ldr	r3, [pc, #312]	@ (810953c <HAL_I2C_Master_Transmit+0x228>)
 8109404:	9300      	str	r3, [sp, #0]
 8109406:	697b      	ldr	r3, [r7, #20]
 8109408:	68f8      	ldr	r0, [r7, #12]
 810940a:	f000 fc1f 	bl	8109c4c <I2C_TransferConfig>
 810940e:	e066      	b.n	81094de <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8109410:	68fb      	ldr	r3, [r7, #12]
 8109412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8109414:	b2da      	uxtb	r2, r3
 8109416:	8979      	ldrh	r1, [r7, #10]
 8109418:	4b48      	ldr	r3, [pc, #288]	@ (810953c <HAL_I2C_Master_Transmit+0x228>)
 810941a:	9300      	str	r3, [sp, #0]
 810941c:	697b      	ldr	r3, [r7, #20]
 810941e:	68f8      	ldr	r0, [r7, #12]
 8109420:	f000 fc14 	bl	8109c4c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8109424:	e05b      	b.n	81094de <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8109426:	693a      	ldr	r2, [r7, #16]
 8109428:	6a39      	ldr	r1, [r7, #32]
 810942a:	68f8      	ldr	r0, [r7, #12]
 810942c:	f000 fa17 	bl	810985e <I2C_WaitOnTXISFlagUntilTimeout>
 8109430:	4603      	mov	r3, r0
 8109432:	2b00      	cmp	r3, #0
 8109434:	d001      	beq.n	810943a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8109436:	2301      	movs	r3, #1
 8109438:	e07b      	b.n	8109532 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 810943a:	68fb      	ldr	r3, [r7, #12]
 810943c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810943e:	781a      	ldrb	r2, [r3, #0]
 8109440:	68fb      	ldr	r3, [r7, #12]
 8109442:	681b      	ldr	r3, [r3, #0]
 8109444:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8109446:	68fb      	ldr	r3, [r7, #12]
 8109448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810944a:	1c5a      	adds	r2, r3, #1
 810944c:	68fb      	ldr	r3, [r7, #12]
 810944e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8109450:	68fb      	ldr	r3, [r7, #12]
 8109452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8109454:	b29b      	uxth	r3, r3
 8109456:	3b01      	subs	r3, #1
 8109458:	b29a      	uxth	r2, r3
 810945a:	68fb      	ldr	r3, [r7, #12]
 810945c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 810945e:	68fb      	ldr	r3, [r7, #12]
 8109460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8109462:	3b01      	subs	r3, #1
 8109464:	b29a      	uxth	r2, r3
 8109466:	68fb      	ldr	r3, [r7, #12]
 8109468:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810946a:	68fb      	ldr	r3, [r7, #12]
 810946c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810946e:	b29b      	uxth	r3, r3
 8109470:	2b00      	cmp	r3, #0
 8109472:	d034      	beq.n	81094de <HAL_I2C_Master_Transmit+0x1ca>
 8109474:	68fb      	ldr	r3, [r7, #12]
 8109476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8109478:	2b00      	cmp	r3, #0
 810947a:	d130      	bne.n	81094de <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810947c:	693b      	ldr	r3, [r7, #16]
 810947e:	9300      	str	r3, [sp, #0]
 8109480:	6a3b      	ldr	r3, [r7, #32]
 8109482:	2200      	movs	r2, #0
 8109484:	2180      	movs	r1, #128	@ 0x80
 8109486:	68f8      	ldr	r0, [r7, #12]
 8109488:	f000 f990 	bl	81097ac <I2C_WaitOnFlagUntilTimeout>
 810948c:	4603      	mov	r3, r0
 810948e:	2b00      	cmp	r3, #0
 8109490:	d001      	beq.n	8109496 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8109492:	2301      	movs	r3, #1
 8109494:	e04d      	b.n	8109532 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8109496:	68fb      	ldr	r3, [r7, #12]
 8109498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810949a:	b29b      	uxth	r3, r3
 810949c:	2bff      	cmp	r3, #255	@ 0xff
 810949e:	d90e      	bls.n	81094be <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81094a0:	68fb      	ldr	r3, [r7, #12]
 81094a2:	22ff      	movs	r2, #255	@ 0xff
 81094a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81094a6:	68fb      	ldr	r3, [r7, #12]
 81094a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81094aa:	b2da      	uxtb	r2, r3
 81094ac:	8979      	ldrh	r1, [r7, #10]
 81094ae:	2300      	movs	r3, #0
 81094b0:	9300      	str	r3, [sp, #0]
 81094b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81094b6:	68f8      	ldr	r0, [r7, #12]
 81094b8:	f000 fbc8 	bl	8109c4c <I2C_TransferConfig>
 81094bc:	e00f      	b.n	81094de <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81094be:	68fb      	ldr	r3, [r7, #12]
 81094c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81094c2:	b29a      	uxth	r2, r3
 81094c4:	68fb      	ldr	r3, [r7, #12]
 81094c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81094c8:	68fb      	ldr	r3, [r7, #12]
 81094ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81094cc:	b2da      	uxtb	r2, r3
 81094ce:	8979      	ldrh	r1, [r7, #10]
 81094d0:	2300      	movs	r3, #0
 81094d2:	9300      	str	r3, [sp, #0]
 81094d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81094d8:	68f8      	ldr	r0, [r7, #12]
 81094da:	f000 fbb7 	bl	8109c4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81094de:	68fb      	ldr	r3, [r7, #12]
 81094e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81094e2:	b29b      	uxth	r3, r3
 81094e4:	2b00      	cmp	r3, #0
 81094e6:	d19e      	bne.n	8109426 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81094e8:	693a      	ldr	r2, [r7, #16]
 81094ea:	6a39      	ldr	r1, [r7, #32]
 81094ec:	68f8      	ldr	r0, [r7, #12]
 81094ee:	f000 f9fd 	bl	81098ec <I2C_WaitOnSTOPFlagUntilTimeout>
 81094f2:	4603      	mov	r3, r0
 81094f4:	2b00      	cmp	r3, #0
 81094f6:	d001      	beq.n	81094fc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 81094f8:	2301      	movs	r3, #1
 81094fa:	e01a      	b.n	8109532 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81094fc:	68fb      	ldr	r3, [r7, #12]
 81094fe:	681b      	ldr	r3, [r3, #0]
 8109500:	2220      	movs	r2, #32
 8109502:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8109504:	68fb      	ldr	r3, [r7, #12]
 8109506:	681b      	ldr	r3, [r3, #0]
 8109508:	6859      	ldr	r1, [r3, #4]
 810950a:	68fb      	ldr	r3, [r7, #12]
 810950c:	681a      	ldr	r2, [r3, #0]
 810950e:	4b0c      	ldr	r3, [pc, #48]	@ (8109540 <HAL_I2C_Master_Transmit+0x22c>)
 8109510:	400b      	ands	r3, r1
 8109512:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8109514:	68fb      	ldr	r3, [r7, #12]
 8109516:	2220      	movs	r2, #32
 8109518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810951c:	68fb      	ldr	r3, [r7, #12]
 810951e:	2200      	movs	r2, #0
 8109520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8109524:	68fb      	ldr	r3, [r7, #12]
 8109526:	2200      	movs	r2, #0
 8109528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 810952c:	2300      	movs	r3, #0
 810952e:	e000      	b.n	8109532 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8109530:	2302      	movs	r3, #2
  }
}
 8109532:	4618      	mov	r0, r3
 8109534:	3718      	adds	r7, #24
 8109536:	46bd      	mov	sp, r7
 8109538:	bd80      	pop	{r7, pc}
 810953a:	bf00      	nop
 810953c:	80002000 	.word	0x80002000
 8109540:	fe00e800 	.word	0xfe00e800

08109544 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8109544:	b580      	push	{r7, lr}
 8109546:	b088      	sub	sp, #32
 8109548:	af02      	add	r7, sp, #8
 810954a:	60f8      	str	r0, [r7, #12]
 810954c:	607a      	str	r2, [r7, #4]
 810954e:	461a      	mov	r2, r3
 8109550:	460b      	mov	r3, r1
 8109552:	817b      	strh	r3, [r7, #10]
 8109554:	4613      	mov	r3, r2
 8109556:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8109558:	68fb      	ldr	r3, [r7, #12]
 810955a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810955e:	b2db      	uxtb	r3, r3
 8109560:	2b20      	cmp	r3, #32
 8109562:	f040 80db 	bne.w	810971c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8109566:	68fb      	ldr	r3, [r7, #12]
 8109568:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810956c:	2b01      	cmp	r3, #1
 810956e:	d101      	bne.n	8109574 <HAL_I2C_Master_Receive+0x30>
 8109570:	2302      	movs	r3, #2
 8109572:	e0d4      	b.n	810971e <HAL_I2C_Master_Receive+0x1da>
 8109574:	68fb      	ldr	r3, [r7, #12]
 8109576:	2201      	movs	r2, #1
 8109578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810957c:	f7fb fbcc 	bl	8104d18 <HAL_GetTick>
 8109580:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8109582:	697b      	ldr	r3, [r7, #20]
 8109584:	9300      	str	r3, [sp, #0]
 8109586:	2319      	movs	r3, #25
 8109588:	2201      	movs	r2, #1
 810958a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 810958e:	68f8      	ldr	r0, [r7, #12]
 8109590:	f000 f90c 	bl	81097ac <I2C_WaitOnFlagUntilTimeout>
 8109594:	4603      	mov	r3, r0
 8109596:	2b00      	cmp	r3, #0
 8109598:	d001      	beq.n	810959e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 810959a:	2301      	movs	r3, #1
 810959c:	e0bf      	b.n	810971e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 810959e:	68fb      	ldr	r3, [r7, #12]
 81095a0:	2222      	movs	r2, #34	@ 0x22
 81095a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81095a6:	68fb      	ldr	r3, [r7, #12]
 81095a8:	2210      	movs	r2, #16
 81095aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81095ae:	68fb      	ldr	r3, [r7, #12]
 81095b0:	2200      	movs	r2, #0
 81095b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81095b4:	68fb      	ldr	r3, [r7, #12]
 81095b6:	687a      	ldr	r2, [r7, #4]
 81095b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 81095ba:	68fb      	ldr	r3, [r7, #12]
 81095bc:	893a      	ldrh	r2, [r7, #8]
 81095be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 81095c0:	68fb      	ldr	r3, [r7, #12]
 81095c2:	2200      	movs	r2, #0
 81095c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81095c6:	68fb      	ldr	r3, [r7, #12]
 81095c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81095ca:	b29b      	uxth	r3, r3
 81095cc:	2bff      	cmp	r3, #255	@ 0xff
 81095ce:	d90e      	bls.n	81095ee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81095d0:	68fb      	ldr	r3, [r7, #12]
 81095d2:	22ff      	movs	r2, #255	@ 0xff
 81095d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81095d6:	68fb      	ldr	r3, [r7, #12]
 81095d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81095da:	b2da      	uxtb	r2, r3
 81095dc:	8979      	ldrh	r1, [r7, #10]
 81095de:	4b52      	ldr	r3, [pc, #328]	@ (8109728 <HAL_I2C_Master_Receive+0x1e4>)
 81095e0:	9300      	str	r3, [sp, #0]
 81095e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81095e6:	68f8      	ldr	r0, [r7, #12]
 81095e8:	f000 fb30 	bl	8109c4c <I2C_TransferConfig>
 81095ec:	e06d      	b.n	81096ca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81095ee:	68fb      	ldr	r3, [r7, #12]
 81095f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81095f2:	b29a      	uxth	r2, r3
 81095f4:	68fb      	ldr	r3, [r7, #12]
 81095f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81095f8:	68fb      	ldr	r3, [r7, #12]
 81095fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81095fc:	b2da      	uxtb	r2, r3
 81095fe:	8979      	ldrh	r1, [r7, #10]
 8109600:	4b49      	ldr	r3, [pc, #292]	@ (8109728 <HAL_I2C_Master_Receive+0x1e4>)
 8109602:	9300      	str	r3, [sp, #0]
 8109604:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8109608:	68f8      	ldr	r0, [r7, #12]
 810960a:	f000 fb1f 	bl	8109c4c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 810960e:	e05c      	b.n	81096ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8109610:	697a      	ldr	r2, [r7, #20]
 8109612:	6a39      	ldr	r1, [r7, #32]
 8109614:	68f8      	ldr	r0, [r7, #12]
 8109616:	f000 f9ad 	bl	8109974 <I2C_WaitOnRXNEFlagUntilTimeout>
 810961a:	4603      	mov	r3, r0
 810961c:	2b00      	cmp	r3, #0
 810961e:	d001      	beq.n	8109624 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8109620:	2301      	movs	r3, #1
 8109622:	e07c      	b.n	810971e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8109624:	68fb      	ldr	r3, [r7, #12]
 8109626:	681b      	ldr	r3, [r3, #0]
 8109628:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810962a:	68fb      	ldr	r3, [r7, #12]
 810962c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810962e:	b2d2      	uxtb	r2, r2
 8109630:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8109632:	68fb      	ldr	r3, [r7, #12]
 8109634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109636:	1c5a      	adds	r2, r3, #1
 8109638:	68fb      	ldr	r3, [r7, #12]
 810963a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 810963c:	68fb      	ldr	r3, [r7, #12]
 810963e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8109640:	3b01      	subs	r3, #1
 8109642:	b29a      	uxth	r2, r3
 8109644:	68fb      	ldr	r3, [r7, #12]
 8109646:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8109648:	68fb      	ldr	r3, [r7, #12]
 810964a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810964c:	b29b      	uxth	r3, r3
 810964e:	3b01      	subs	r3, #1
 8109650:	b29a      	uxth	r2, r3
 8109652:	68fb      	ldr	r3, [r7, #12]
 8109654:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8109656:	68fb      	ldr	r3, [r7, #12]
 8109658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810965a:	b29b      	uxth	r3, r3
 810965c:	2b00      	cmp	r3, #0
 810965e:	d034      	beq.n	81096ca <HAL_I2C_Master_Receive+0x186>
 8109660:	68fb      	ldr	r3, [r7, #12]
 8109662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8109664:	2b00      	cmp	r3, #0
 8109666:	d130      	bne.n	81096ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8109668:	697b      	ldr	r3, [r7, #20]
 810966a:	9300      	str	r3, [sp, #0]
 810966c:	6a3b      	ldr	r3, [r7, #32]
 810966e:	2200      	movs	r2, #0
 8109670:	2180      	movs	r1, #128	@ 0x80
 8109672:	68f8      	ldr	r0, [r7, #12]
 8109674:	f000 f89a 	bl	81097ac <I2C_WaitOnFlagUntilTimeout>
 8109678:	4603      	mov	r3, r0
 810967a:	2b00      	cmp	r3, #0
 810967c:	d001      	beq.n	8109682 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 810967e:	2301      	movs	r3, #1
 8109680:	e04d      	b.n	810971e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8109682:	68fb      	ldr	r3, [r7, #12]
 8109684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8109686:	b29b      	uxth	r3, r3
 8109688:	2bff      	cmp	r3, #255	@ 0xff
 810968a:	d90e      	bls.n	81096aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810968c:	68fb      	ldr	r3, [r7, #12]
 810968e:	22ff      	movs	r2, #255	@ 0xff
 8109690:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8109692:	68fb      	ldr	r3, [r7, #12]
 8109694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8109696:	b2da      	uxtb	r2, r3
 8109698:	8979      	ldrh	r1, [r7, #10]
 810969a:	2300      	movs	r3, #0
 810969c:	9300      	str	r3, [sp, #0]
 810969e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81096a2:	68f8      	ldr	r0, [r7, #12]
 81096a4:	f000 fad2 	bl	8109c4c <I2C_TransferConfig>
 81096a8:	e00f      	b.n	81096ca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81096aa:	68fb      	ldr	r3, [r7, #12]
 81096ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81096ae:	b29a      	uxth	r2, r3
 81096b0:	68fb      	ldr	r3, [r7, #12]
 81096b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81096b4:	68fb      	ldr	r3, [r7, #12]
 81096b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81096b8:	b2da      	uxtb	r2, r3
 81096ba:	8979      	ldrh	r1, [r7, #10]
 81096bc:	2300      	movs	r3, #0
 81096be:	9300      	str	r3, [sp, #0]
 81096c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81096c4:	68f8      	ldr	r0, [r7, #12]
 81096c6:	f000 fac1 	bl	8109c4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81096ca:	68fb      	ldr	r3, [r7, #12]
 81096cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81096ce:	b29b      	uxth	r3, r3
 81096d0:	2b00      	cmp	r3, #0
 81096d2:	d19d      	bne.n	8109610 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81096d4:	697a      	ldr	r2, [r7, #20]
 81096d6:	6a39      	ldr	r1, [r7, #32]
 81096d8:	68f8      	ldr	r0, [r7, #12]
 81096da:	f000 f907 	bl	81098ec <I2C_WaitOnSTOPFlagUntilTimeout>
 81096de:	4603      	mov	r3, r0
 81096e0:	2b00      	cmp	r3, #0
 81096e2:	d001      	beq.n	81096e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 81096e4:	2301      	movs	r3, #1
 81096e6:	e01a      	b.n	810971e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81096e8:	68fb      	ldr	r3, [r7, #12]
 81096ea:	681b      	ldr	r3, [r3, #0]
 81096ec:	2220      	movs	r2, #32
 81096ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81096f0:	68fb      	ldr	r3, [r7, #12]
 81096f2:	681b      	ldr	r3, [r3, #0]
 81096f4:	6859      	ldr	r1, [r3, #4]
 81096f6:	68fb      	ldr	r3, [r7, #12]
 81096f8:	681a      	ldr	r2, [r3, #0]
 81096fa:	4b0c      	ldr	r3, [pc, #48]	@ (810972c <HAL_I2C_Master_Receive+0x1e8>)
 81096fc:	400b      	ands	r3, r1
 81096fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8109700:	68fb      	ldr	r3, [r7, #12]
 8109702:	2220      	movs	r2, #32
 8109704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8109708:	68fb      	ldr	r3, [r7, #12]
 810970a:	2200      	movs	r2, #0
 810970c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8109710:	68fb      	ldr	r3, [r7, #12]
 8109712:	2200      	movs	r2, #0
 8109714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8109718:	2300      	movs	r3, #0
 810971a:	e000      	b.n	810971e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 810971c:	2302      	movs	r3, #2
  }
}
 810971e:	4618      	mov	r0, r3
 8109720:	3718      	adds	r7, #24
 8109722:	46bd      	mov	sp, r7
 8109724:	bd80      	pop	{r7, pc}
 8109726:	bf00      	nop
 8109728:	80002400 	.word	0x80002400
 810972c:	fe00e800 	.word	0xfe00e800

08109730 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8109730:	b480      	push	{r7}
 8109732:	b083      	sub	sp, #12
 8109734:	af00      	add	r7, sp, #0
 8109736:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8109738:	687b      	ldr	r3, [r7, #4]
 810973a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810973e:	b2db      	uxtb	r3, r3
}
 8109740:	4618      	mov	r0, r3
 8109742:	370c      	adds	r7, #12
 8109744:	46bd      	mov	sp, r7
 8109746:	f85d 7b04 	ldr.w	r7, [sp], #4
 810974a:	4770      	bx	lr

0810974c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 810974c:	b480      	push	{r7}
 810974e:	b083      	sub	sp, #12
 8109750:	af00      	add	r7, sp, #0
 8109752:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8109754:	687b      	ldr	r3, [r7, #4]
 8109756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8109758:	4618      	mov	r0, r3
 810975a:	370c      	adds	r7, #12
 810975c:	46bd      	mov	sp, r7
 810975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109762:	4770      	bx	lr

08109764 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8109764:	b480      	push	{r7}
 8109766:	b083      	sub	sp, #12
 8109768:	af00      	add	r7, sp, #0
 810976a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 810976c:	687b      	ldr	r3, [r7, #4]
 810976e:	681b      	ldr	r3, [r3, #0]
 8109770:	699b      	ldr	r3, [r3, #24]
 8109772:	f003 0302 	and.w	r3, r3, #2
 8109776:	2b02      	cmp	r3, #2
 8109778:	d103      	bne.n	8109782 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 810977a:	687b      	ldr	r3, [r7, #4]
 810977c:	681b      	ldr	r3, [r3, #0]
 810977e:	2200      	movs	r2, #0
 8109780:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8109782:	687b      	ldr	r3, [r7, #4]
 8109784:	681b      	ldr	r3, [r3, #0]
 8109786:	699b      	ldr	r3, [r3, #24]
 8109788:	f003 0301 	and.w	r3, r3, #1
 810978c:	2b01      	cmp	r3, #1
 810978e:	d007      	beq.n	81097a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8109790:	687b      	ldr	r3, [r7, #4]
 8109792:	681b      	ldr	r3, [r3, #0]
 8109794:	699a      	ldr	r2, [r3, #24]
 8109796:	687b      	ldr	r3, [r7, #4]
 8109798:	681b      	ldr	r3, [r3, #0]
 810979a:	f042 0201 	orr.w	r2, r2, #1
 810979e:	619a      	str	r2, [r3, #24]
  }
}
 81097a0:	bf00      	nop
 81097a2:	370c      	adds	r7, #12
 81097a4:	46bd      	mov	sp, r7
 81097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81097aa:	4770      	bx	lr

081097ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81097ac:	b580      	push	{r7, lr}
 81097ae:	b084      	sub	sp, #16
 81097b0:	af00      	add	r7, sp, #0
 81097b2:	60f8      	str	r0, [r7, #12]
 81097b4:	60b9      	str	r1, [r7, #8]
 81097b6:	603b      	str	r3, [r7, #0]
 81097b8:	4613      	mov	r3, r2
 81097ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81097bc:	e03b      	b.n	8109836 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81097be:	69ba      	ldr	r2, [r7, #24]
 81097c0:	6839      	ldr	r1, [r7, #0]
 81097c2:	68f8      	ldr	r0, [r7, #12]
 81097c4:	f000 f962 	bl	8109a8c <I2C_IsErrorOccurred>
 81097c8:	4603      	mov	r3, r0
 81097ca:	2b00      	cmp	r3, #0
 81097cc:	d001      	beq.n	81097d2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 81097ce:	2301      	movs	r3, #1
 81097d0:	e041      	b.n	8109856 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81097d2:	683b      	ldr	r3, [r7, #0]
 81097d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81097d8:	d02d      	beq.n	8109836 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81097da:	f7fb fa9d 	bl	8104d18 <HAL_GetTick>
 81097de:	4602      	mov	r2, r0
 81097e0:	69bb      	ldr	r3, [r7, #24]
 81097e2:	1ad3      	subs	r3, r2, r3
 81097e4:	683a      	ldr	r2, [r7, #0]
 81097e6:	429a      	cmp	r2, r3
 81097e8:	d302      	bcc.n	81097f0 <I2C_WaitOnFlagUntilTimeout+0x44>
 81097ea:	683b      	ldr	r3, [r7, #0]
 81097ec:	2b00      	cmp	r3, #0
 81097ee:	d122      	bne.n	8109836 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 81097f0:	68fb      	ldr	r3, [r7, #12]
 81097f2:	681b      	ldr	r3, [r3, #0]
 81097f4:	699a      	ldr	r2, [r3, #24]
 81097f6:	68bb      	ldr	r3, [r7, #8]
 81097f8:	4013      	ands	r3, r2
 81097fa:	68ba      	ldr	r2, [r7, #8]
 81097fc:	429a      	cmp	r2, r3
 81097fe:	bf0c      	ite	eq
 8109800:	2301      	moveq	r3, #1
 8109802:	2300      	movne	r3, #0
 8109804:	b2db      	uxtb	r3, r3
 8109806:	461a      	mov	r2, r3
 8109808:	79fb      	ldrb	r3, [r7, #7]
 810980a:	429a      	cmp	r2, r3
 810980c:	d113      	bne.n	8109836 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810980e:	68fb      	ldr	r3, [r7, #12]
 8109810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109812:	f043 0220 	orr.w	r2, r3, #32
 8109816:	68fb      	ldr	r3, [r7, #12]
 8109818:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810981a:	68fb      	ldr	r3, [r7, #12]
 810981c:	2220      	movs	r2, #32
 810981e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8109822:	68fb      	ldr	r3, [r7, #12]
 8109824:	2200      	movs	r2, #0
 8109826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810982a:	68fb      	ldr	r3, [r7, #12]
 810982c:	2200      	movs	r2, #0
 810982e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8109832:	2301      	movs	r3, #1
 8109834:	e00f      	b.n	8109856 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8109836:	68fb      	ldr	r3, [r7, #12]
 8109838:	681b      	ldr	r3, [r3, #0]
 810983a:	699a      	ldr	r2, [r3, #24]
 810983c:	68bb      	ldr	r3, [r7, #8]
 810983e:	4013      	ands	r3, r2
 8109840:	68ba      	ldr	r2, [r7, #8]
 8109842:	429a      	cmp	r2, r3
 8109844:	bf0c      	ite	eq
 8109846:	2301      	moveq	r3, #1
 8109848:	2300      	movne	r3, #0
 810984a:	b2db      	uxtb	r3, r3
 810984c:	461a      	mov	r2, r3
 810984e:	79fb      	ldrb	r3, [r7, #7]
 8109850:	429a      	cmp	r2, r3
 8109852:	d0b4      	beq.n	81097be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8109854:	2300      	movs	r3, #0
}
 8109856:	4618      	mov	r0, r3
 8109858:	3710      	adds	r7, #16
 810985a:	46bd      	mov	sp, r7
 810985c:	bd80      	pop	{r7, pc}

0810985e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 810985e:	b580      	push	{r7, lr}
 8109860:	b084      	sub	sp, #16
 8109862:	af00      	add	r7, sp, #0
 8109864:	60f8      	str	r0, [r7, #12]
 8109866:	60b9      	str	r1, [r7, #8]
 8109868:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810986a:	e033      	b.n	81098d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810986c:	687a      	ldr	r2, [r7, #4]
 810986e:	68b9      	ldr	r1, [r7, #8]
 8109870:	68f8      	ldr	r0, [r7, #12]
 8109872:	f000 f90b 	bl	8109a8c <I2C_IsErrorOccurred>
 8109876:	4603      	mov	r3, r0
 8109878:	2b00      	cmp	r3, #0
 810987a:	d001      	beq.n	8109880 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810987c:	2301      	movs	r3, #1
 810987e:	e031      	b.n	81098e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8109880:	68bb      	ldr	r3, [r7, #8]
 8109882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109886:	d025      	beq.n	81098d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8109888:	f7fb fa46 	bl	8104d18 <HAL_GetTick>
 810988c:	4602      	mov	r2, r0
 810988e:	687b      	ldr	r3, [r7, #4]
 8109890:	1ad3      	subs	r3, r2, r3
 8109892:	68ba      	ldr	r2, [r7, #8]
 8109894:	429a      	cmp	r2, r3
 8109896:	d302      	bcc.n	810989e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8109898:	68bb      	ldr	r3, [r7, #8]
 810989a:	2b00      	cmp	r3, #0
 810989c:	d11a      	bne.n	81098d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 810989e:	68fb      	ldr	r3, [r7, #12]
 81098a0:	681b      	ldr	r3, [r3, #0]
 81098a2:	699b      	ldr	r3, [r3, #24]
 81098a4:	f003 0302 	and.w	r3, r3, #2
 81098a8:	2b02      	cmp	r3, #2
 81098aa:	d013      	beq.n	81098d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81098ac:	68fb      	ldr	r3, [r7, #12]
 81098ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81098b0:	f043 0220 	orr.w	r2, r3, #32
 81098b4:	68fb      	ldr	r3, [r7, #12]
 81098b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 81098b8:	68fb      	ldr	r3, [r7, #12]
 81098ba:	2220      	movs	r2, #32
 81098bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 81098c0:	68fb      	ldr	r3, [r7, #12]
 81098c2:	2200      	movs	r2, #0
 81098c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81098c8:	68fb      	ldr	r3, [r7, #12]
 81098ca:	2200      	movs	r2, #0
 81098cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 81098d0:	2301      	movs	r3, #1
 81098d2:	e007      	b.n	81098e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81098d4:	68fb      	ldr	r3, [r7, #12]
 81098d6:	681b      	ldr	r3, [r3, #0]
 81098d8:	699b      	ldr	r3, [r3, #24]
 81098da:	f003 0302 	and.w	r3, r3, #2
 81098de:	2b02      	cmp	r3, #2
 81098e0:	d1c4      	bne.n	810986c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 81098e2:	2300      	movs	r3, #0
}
 81098e4:	4618      	mov	r0, r3
 81098e6:	3710      	adds	r7, #16
 81098e8:	46bd      	mov	sp, r7
 81098ea:	bd80      	pop	{r7, pc}

081098ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81098ec:	b580      	push	{r7, lr}
 81098ee:	b084      	sub	sp, #16
 81098f0:	af00      	add	r7, sp, #0
 81098f2:	60f8      	str	r0, [r7, #12]
 81098f4:	60b9      	str	r1, [r7, #8]
 81098f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81098f8:	e02f      	b.n	810995a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81098fa:	687a      	ldr	r2, [r7, #4]
 81098fc:	68b9      	ldr	r1, [r7, #8]
 81098fe:	68f8      	ldr	r0, [r7, #12]
 8109900:	f000 f8c4 	bl	8109a8c <I2C_IsErrorOccurred>
 8109904:	4603      	mov	r3, r0
 8109906:	2b00      	cmp	r3, #0
 8109908:	d001      	beq.n	810990e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810990a:	2301      	movs	r3, #1
 810990c:	e02d      	b.n	810996a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810990e:	f7fb fa03 	bl	8104d18 <HAL_GetTick>
 8109912:	4602      	mov	r2, r0
 8109914:	687b      	ldr	r3, [r7, #4]
 8109916:	1ad3      	subs	r3, r2, r3
 8109918:	68ba      	ldr	r2, [r7, #8]
 810991a:	429a      	cmp	r2, r3
 810991c:	d302      	bcc.n	8109924 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 810991e:	68bb      	ldr	r3, [r7, #8]
 8109920:	2b00      	cmp	r3, #0
 8109922:	d11a      	bne.n	810995a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8109924:	68fb      	ldr	r3, [r7, #12]
 8109926:	681b      	ldr	r3, [r3, #0]
 8109928:	699b      	ldr	r3, [r3, #24]
 810992a:	f003 0320 	and.w	r3, r3, #32
 810992e:	2b20      	cmp	r3, #32
 8109930:	d013      	beq.n	810995a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8109932:	68fb      	ldr	r3, [r7, #12]
 8109934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109936:	f043 0220 	orr.w	r2, r3, #32
 810993a:	68fb      	ldr	r3, [r7, #12]
 810993c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810993e:	68fb      	ldr	r3, [r7, #12]
 8109940:	2220      	movs	r2, #32
 8109942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8109946:	68fb      	ldr	r3, [r7, #12]
 8109948:	2200      	movs	r2, #0
 810994a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810994e:	68fb      	ldr	r3, [r7, #12]
 8109950:	2200      	movs	r2, #0
 8109952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8109956:	2301      	movs	r3, #1
 8109958:	e007      	b.n	810996a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810995a:	68fb      	ldr	r3, [r7, #12]
 810995c:	681b      	ldr	r3, [r3, #0]
 810995e:	699b      	ldr	r3, [r3, #24]
 8109960:	f003 0320 	and.w	r3, r3, #32
 8109964:	2b20      	cmp	r3, #32
 8109966:	d1c8      	bne.n	81098fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8109968:	2300      	movs	r3, #0
}
 810996a:	4618      	mov	r0, r3
 810996c:	3710      	adds	r7, #16
 810996e:	46bd      	mov	sp, r7
 8109970:	bd80      	pop	{r7, pc}
	...

08109974 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8109974:	b580      	push	{r7, lr}
 8109976:	b086      	sub	sp, #24
 8109978:	af00      	add	r7, sp, #0
 810997a:	60f8      	str	r0, [r7, #12]
 810997c:	60b9      	str	r1, [r7, #8]
 810997e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8109980:	2300      	movs	r3, #0
 8109982:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8109984:	e071      	b.n	8109a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8109986:	687a      	ldr	r2, [r7, #4]
 8109988:	68b9      	ldr	r1, [r7, #8]
 810998a:	68f8      	ldr	r0, [r7, #12]
 810998c:	f000 f87e 	bl	8109a8c <I2C_IsErrorOccurred>
 8109990:	4603      	mov	r3, r0
 8109992:	2b00      	cmp	r3, #0
 8109994:	d001      	beq.n	810999a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8109996:	2301      	movs	r3, #1
 8109998:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 810999a:	68fb      	ldr	r3, [r7, #12]
 810999c:	681b      	ldr	r3, [r3, #0]
 810999e:	699b      	ldr	r3, [r3, #24]
 81099a0:	f003 0320 	and.w	r3, r3, #32
 81099a4:	2b20      	cmp	r3, #32
 81099a6:	d13b      	bne.n	8109a20 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 81099a8:	7dfb      	ldrb	r3, [r7, #23]
 81099aa:	2b00      	cmp	r3, #0
 81099ac:	d138      	bne.n	8109a20 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 81099ae:	68fb      	ldr	r3, [r7, #12]
 81099b0:	681b      	ldr	r3, [r3, #0]
 81099b2:	699b      	ldr	r3, [r3, #24]
 81099b4:	f003 0304 	and.w	r3, r3, #4
 81099b8:	2b04      	cmp	r3, #4
 81099ba:	d105      	bne.n	81099c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 81099bc:	68fb      	ldr	r3, [r7, #12]
 81099be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81099c0:	2b00      	cmp	r3, #0
 81099c2:	d001      	beq.n	81099c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 81099c4:	2300      	movs	r3, #0
 81099c6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81099c8:	68fb      	ldr	r3, [r7, #12]
 81099ca:	681b      	ldr	r3, [r3, #0]
 81099cc:	699b      	ldr	r3, [r3, #24]
 81099ce:	f003 0310 	and.w	r3, r3, #16
 81099d2:	2b10      	cmp	r3, #16
 81099d4:	d121      	bne.n	8109a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81099d6:	68fb      	ldr	r3, [r7, #12]
 81099d8:	681b      	ldr	r3, [r3, #0]
 81099da:	2210      	movs	r2, #16
 81099dc:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 81099de:	68fb      	ldr	r3, [r7, #12]
 81099e0:	2204      	movs	r2, #4
 81099e2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81099e4:	68fb      	ldr	r3, [r7, #12]
 81099e6:	681b      	ldr	r3, [r3, #0]
 81099e8:	2220      	movs	r2, #32
 81099ea:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 81099ec:	68fb      	ldr	r3, [r7, #12]
 81099ee:	681b      	ldr	r3, [r3, #0]
 81099f0:	6859      	ldr	r1, [r3, #4]
 81099f2:	68fb      	ldr	r3, [r7, #12]
 81099f4:	681a      	ldr	r2, [r3, #0]
 81099f6:	4b24      	ldr	r3, [pc, #144]	@ (8109a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 81099f8:	400b      	ands	r3, r1
 81099fa:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 81099fc:	68fb      	ldr	r3, [r7, #12]
 81099fe:	2220      	movs	r2, #32
 8109a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8109a04:	68fb      	ldr	r3, [r7, #12]
 8109a06:	2200      	movs	r2, #0
 8109a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8109a0c:	68fb      	ldr	r3, [r7, #12]
 8109a0e:	2200      	movs	r2, #0
 8109a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8109a14:	2301      	movs	r3, #1
 8109a16:	75fb      	strb	r3, [r7, #23]
 8109a18:	e002      	b.n	8109a20 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8109a1a:	68fb      	ldr	r3, [r7, #12]
 8109a1c:	2200      	movs	r2, #0
 8109a1e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8109a20:	f7fb f97a 	bl	8104d18 <HAL_GetTick>
 8109a24:	4602      	mov	r2, r0
 8109a26:	687b      	ldr	r3, [r7, #4]
 8109a28:	1ad3      	subs	r3, r2, r3
 8109a2a:	68ba      	ldr	r2, [r7, #8]
 8109a2c:	429a      	cmp	r2, r3
 8109a2e:	d302      	bcc.n	8109a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8109a30:	68bb      	ldr	r3, [r7, #8]
 8109a32:	2b00      	cmp	r3, #0
 8109a34:	d119      	bne.n	8109a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8109a36:	7dfb      	ldrb	r3, [r7, #23]
 8109a38:	2b00      	cmp	r3, #0
 8109a3a:	d116      	bne.n	8109a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8109a3c:	68fb      	ldr	r3, [r7, #12]
 8109a3e:	681b      	ldr	r3, [r3, #0]
 8109a40:	699b      	ldr	r3, [r3, #24]
 8109a42:	f003 0304 	and.w	r3, r3, #4
 8109a46:	2b04      	cmp	r3, #4
 8109a48:	d00f      	beq.n	8109a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8109a4a:	68fb      	ldr	r3, [r7, #12]
 8109a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109a4e:	f043 0220 	orr.w	r2, r3, #32
 8109a52:	68fb      	ldr	r3, [r7, #12]
 8109a54:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8109a56:	68fb      	ldr	r3, [r7, #12]
 8109a58:	2220      	movs	r2, #32
 8109a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8109a5e:	68fb      	ldr	r3, [r7, #12]
 8109a60:	2200      	movs	r2, #0
 8109a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8109a66:	2301      	movs	r3, #1
 8109a68:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8109a6a:	68fb      	ldr	r3, [r7, #12]
 8109a6c:	681b      	ldr	r3, [r3, #0]
 8109a6e:	699b      	ldr	r3, [r3, #24]
 8109a70:	f003 0304 	and.w	r3, r3, #4
 8109a74:	2b04      	cmp	r3, #4
 8109a76:	d002      	beq.n	8109a7e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8109a78:	7dfb      	ldrb	r3, [r7, #23]
 8109a7a:	2b00      	cmp	r3, #0
 8109a7c:	d083      	beq.n	8109986 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8109a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8109a80:	4618      	mov	r0, r3
 8109a82:	3718      	adds	r7, #24
 8109a84:	46bd      	mov	sp, r7
 8109a86:	bd80      	pop	{r7, pc}
 8109a88:	fe00e800 	.word	0xfe00e800

08109a8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8109a8c:	b580      	push	{r7, lr}
 8109a8e:	b08a      	sub	sp, #40	@ 0x28
 8109a90:	af00      	add	r7, sp, #0
 8109a92:	60f8      	str	r0, [r7, #12]
 8109a94:	60b9      	str	r1, [r7, #8]
 8109a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8109a98:	2300      	movs	r3, #0
 8109a9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8109a9e:	68fb      	ldr	r3, [r7, #12]
 8109aa0:	681b      	ldr	r3, [r3, #0]
 8109aa2:	699b      	ldr	r3, [r3, #24]
 8109aa4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8109aa6:	2300      	movs	r3, #0
 8109aa8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8109aaa:	687b      	ldr	r3, [r7, #4]
 8109aac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8109aae:	69bb      	ldr	r3, [r7, #24]
 8109ab0:	f003 0310 	and.w	r3, r3, #16
 8109ab4:	2b00      	cmp	r3, #0
 8109ab6:	d068      	beq.n	8109b8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8109ab8:	68fb      	ldr	r3, [r7, #12]
 8109aba:	681b      	ldr	r3, [r3, #0]
 8109abc:	2210      	movs	r2, #16
 8109abe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8109ac0:	e049      	b.n	8109b56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8109ac2:	68bb      	ldr	r3, [r7, #8]
 8109ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109ac8:	d045      	beq.n	8109b56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8109aca:	f7fb f925 	bl	8104d18 <HAL_GetTick>
 8109ace:	4602      	mov	r2, r0
 8109ad0:	69fb      	ldr	r3, [r7, #28]
 8109ad2:	1ad3      	subs	r3, r2, r3
 8109ad4:	68ba      	ldr	r2, [r7, #8]
 8109ad6:	429a      	cmp	r2, r3
 8109ad8:	d302      	bcc.n	8109ae0 <I2C_IsErrorOccurred+0x54>
 8109ada:	68bb      	ldr	r3, [r7, #8]
 8109adc:	2b00      	cmp	r3, #0
 8109ade:	d13a      	bne.n	8109b56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8109ae0:	68fb      	ldr	r3, [r7, #12]
 8109ae2:	681b      	ldr	r3, [r3, #0]
 8109ae4:	685b      	ldr	r3, [r3, #4]
 8109ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8109aea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8109aec:	68fb      	ldr	r3, [r7, #12]
 8109aee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8109af2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8109af4:	68fb      	ldr	r3, [r7, #12]
 8109af6:	681b      	ldr	r3, [r3, #0]
 8109af8:	699b      	ldr	r3, [r3, #24]
 8109afa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8109afe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8109b02:	d121      	bne.n	8109b48 <I2C_IsErrorOccurred+0xbc>
 8109b04:	697b      	ldr	r3, [r7, #20]
 8109b06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8109b0a:	d01d      	beq.n	8109b48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8109b0c:	7cfb      	ldrb	r3, [r7, #19]
 8109b0e:	2b20      	cmp	r3, #32
 8109b10:	d01a      	beq.n	8109b48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8109b12:	68fb      	ldr	r3, [r7, #12]
 8109b14:	681b      	ldr	r3, [r3, #0]
 8109b16:	685a      	ldr	r2, [r3, #4]
 8109b18:	68fb      	ldr	r3, [r7, #12]
 8109b1a:	681b      	ldr	r3, [r3, #0]
 8109b1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8109b20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8109b22:	f7fb f8f9 	bl	8104d18 <HAL_GetTick>
 8109b26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8109b28:	e00e      	b.n	8109b48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8109b2a:	f7fb f8f5 	bl	8104d18 <HAL_GetTick>
 8109b2e:	4602      	mov	r2, r0
 8109b30:	69fb      	ldr	r3, [r7, #28]
 8109b32:	1ad3      	subs	r3, r2, r3
 8109b34:	2b19      	cmp	r3, #25
 8109b36:	d907      	bls.n	8109b48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8109b38:	6a3b      	ldr	r3, [r7, #32]
 8109b3a:	f043 0320 	orr.w	r3, r3, #32
 8109b3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8109b40:	2301      	movs	r3, #1
 8109b42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8109b46:	e006      	b.n	8109b56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8109b48:	68fb      	ldr	r3, [r7, #12]
 8109b4a:	681b      	ldr	r3, [r3, #0]
 8109b4c:	699b      	ldr	r3, [r3, #24]
 8109b4e:	f003 0320 	and.w	r3, r3, #32
 8109b52:	2b20      	cmp	r3, #32
 8109b54:	d1e9      	bne.n	8109b2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8109b56:	68fb      	ldr	r3, [r7, #12]
 8109b58:	681b      	ldr	r3, [r3, #0]
 8109b5a:	699b      	ldr	r3, [r3, #24]
 8109b5c:	f003 0320 	and.w	r3, r3, #32
 8109b60:	2b20      	cmp	r3, #32
 8109b62:	d003      	beq.n	8109b6c <I2C_IsErrorOccurred+0xe0>
 8109b64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8109b68:	2b00      	cmp	r3, #0
 8109b6a:	d0aa      	beq.n	8109ac2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8109b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8109b70:	2b00      	cmp	r3, #0
 8109b72:	d103      	bne.n	8109b7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8109b74:	68fb      	ldr	r3, [r7, #12]
 8109b76:	681b      	ldr	r3, [r3, #0]
 8109b78:	2220      	movs	r2, #32
 8109b7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8109b7c:	6a3b      	ldr	r3, [r7, #32]
 8109b7e:	f043 0304 	orr.w	r3, r3, #4
 8109b82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8109b84:	2301      	movs	r3, #1
 8109b86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8109b8a:	68fb      	ldr	r3, [r7, #12]
 8109b8c:	681b      	ldr	r3, [r3, #0]
 8109b8e:	699b      	ldr	r3, [r3, #24]
 8109b90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8109b92:	69bb      	ldr	r3, [r7, #24]
 8109b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109b98:	2b00      	cmp	r3, #0
 8109b9a:	d00b      	beq.n	8109bb4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8109b9c:	6a3b      	ldr	r3, [r7, #32]
 8109b9e:	f043 0301 	orr.w	r3, r3, #1
 8109ba2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8109ba4:	68fb      	ldr	r3, [r7, #12]
 8109ba6:	681b      	ldr	r3, [r3, #0]
 8109ba8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8109bac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8109bae:	2301      	movs	r3, #1
 8109bb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8109bb4:	69bb      	ldr	r3, [r7, #24]
 8109bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8109bba:	2b00      	cmp	r3, #0
 8109bbc:	d00b      	beq.n	8109bd6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8109bbe:	6a3b      	ldr	r3, [r7, #32]
 8109bc0:	f043 0308 	orr.w	r3, r3, #8
 8109bc4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8109bc6:	68fb      	ldr	r3, [r7, #12]
 8109bc8:	681b      	ldr	r3, [r3, #0]
 8109bca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8109bce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8109bd0:	2301      	movs	r3, #1
 8109bd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8109bd6:	69bb      	ldr	r3, [r7, #24]
 8109bd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8109bdc:	2b00      	cmp	r3, #0
 8109bde:	d00b      	beq.n	8109bf8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8109be0:	6a3b      	ldr	r3, [r7, #32]
 8109be2:	f043 0302 	orr.w	r3, r3, #2
 8109be6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8109be8:	68fb      	ldr	r3, [r7, #12]
 8109bea:	681b      	ldr	r3, [r3, #0]
 8109bec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8109bf0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8109bf2:	2301      	movs	r3, #1
 8109bf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8109bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8109bfc:	2b00      	cmp	r3, #0
 8109bfe:	d01c      	beq.n	8109c3a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8109c00:	68f8      	ldr	r0, [r7, #12]
 8109c02:	f7ff fdaf 	bl	8109764 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8109c06:	68fb      	ldr	r3, [r7, #12]
 8109c08:	681b      	ldr	r3, [r3, #0]
 8109c0a:	6859      	ldr	r1, [r3, #4]
 8109c0c:	68fb      	ldr	r3, [r7, #12]
 8109c0e:	681a      	ldr	r2, [r3, #0]
 8109c10:	4b0d      	ldr	r3, [pc, #52]	@ (8109c48 <I2C_IsErrorOccurred+0x1bc>)
 8109c12:	400b      	ands	r3, r1
 8109c14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8109c16:	68fb      	ldr	r3, [r7, #12]
 8109c18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8109c1a:	6a3b      	ldr	r3, [r7, #32]
 8109c1c:	431a      	orrs	r2, r3
 8109c1e:	68fb      	ldr	r3, [r7, #12]
 8109c20:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8109c22:	68fb      	ldr	r3, [r7, #12]
 8109c24:	2220      	movs	r2, #32
 8109c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8109c2a:	68fb      	ldr	r3, [r7, #12]
 8109c2c:	2200      	movs	r2, #0
 8109c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8109c32:	68fb      	ldr	r3, [r7, #12]
 8109c34:	2200      	movs	r2, #0
 8109c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8109c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8109c3e:	4618      	mov	r0, r3
 8109c40:	3728      	adds	r7, #40	@ 0x28
 8109c42:	46bd      	mov	sp, r7
 8109c44:	bd80      	pop	{r7, pc}
 8109c46:	bf00      	nop
 8109c48:	fe00e800 	.word	0xfe00e800

08109c4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8109c4c:	b480      	push	{r7}
 8109c4e:	b087      	sub	sp, #28
 8109c50:	af00      	add	r7, sp, #0
 8109c52:	60f8      	str	r0, [r7, #12]
 8109c54:	607b      	str	r3, [r7, #4]
 8109c56:	460b      	mov	r3, r1
 8109c58:	817b      	strh	r3, [r7, #10]
 8109c5a:	4613      	mov	r3, r2
 8109c5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8109c5e:	897b      	ldrh	r3, [r7, #10]
 8109c60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8109c64:	7a7b      	ldrb	r3, [r7, #9]
 8109c66:	041b      	lsls	r3, r3, #16
 8109c68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8109c6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8109c6e:	687b      	ldr	r3, [r7, #4]
 8109c70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8109c72:	6a3b      	ldr	r3, [r7, #32]
 8109c74:	4313      	orrs	r3, r2
 8109c76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8109c7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8109c7c:	68fb      	ldr	r3, [r7, #12]
 8109c7e:	681b      	ldr	r3, [r3, #0]
 8109c80:	685a      	ldr	r2, [r3, #4]
 8109c82:	6a3b      	ldr	r3, [r7, #32]
 8109c84:	0d5b      	lsrs	r3, r3, #21
 8109c86:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8109c8a:	4b08      	ldr	r3, [pc, #32]	@ (8109cac <I2C_TransferConfig+0x60>)
 8109c8c:	430b      	orrs	r3, r1
 8109c8e:	43db      	mvns	r3, r3
 8109c90:	ea02 0103 	and.w	r1, r2, r3
 8109c94:	68fb      	ldr	r3, [r7, #12]
 8109c96:	681b      	ldr	r3, [r3, #0]
 8109c98:	697a      	ldr	r2, [r7, #20]
 8109c9a:	430a      	orrs	r2, r1
 8109c9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8109c9e:	bf00      	nop
 8109ca0:	371c      	adds	r7, #28
 8109ca2:	46bd      	mov	sp, r7
 8109ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ca8:	4770      	bx	lr
 8109caa:	bf00      	nop
 8109cac:	03ff63ff 	.word	0x03ff63ff

08109cb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8109cb0:	b480      	push	{r7}
 8109cb2:	b083      	sub	sp, #12
 8109cb4:	af00      	add	r7, sp, #0
 8109cb6:	6078      	str	r0, [r7, #4]
 8109cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8109cba:	687b      	ldr	r3, [r7, #4]
 8109cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8109cc0:	b2db      	uxtb	r3, r3
 8109cc2:	2b20      	cmp	r3, #32
 8109cc4:	d138      	bne.n	8109d38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8109cc6:	687b      	ldr	r3, [r7, #4]
 8109cc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8109ccc:	2b01      	cmp	r3, #1
 8109cce:	d101      	bne.n	8109cd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8109cd0:	2302      	movs	r3, #2
 8109cd2:	e032      	b.n	8109d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8109cd4:	687b      	ldr	r3, [r7, #4]
 8109cd6:	2201      	movs	r2, #1
 8109cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8109cdc:	687b      	ldr	r3, [r7, #4]
 8109cde:	2224      	movs	r2, #36	@ 0x24
 8109ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8109ce4:	687b      	ldr	r3, [r7, #4]
 8109ce6:	681b      	ldr	r3, [r3, #0]
 8109ce8:	681a      	ldr	r2, [r3, #0]
 8109cea:	687b      	ldr	r3, [r7, #4]
 8109cec:	681b      	ldr	r3, [r3, #0]
 8109cee:	f022 0201 	bic.w	r2, r2, #1
 8109cf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8109cf4:	687b      	ldr	r3, [r7, #4]
 8109cf6:	681b      	ldr	r3, [r3, #0]
 8109cf8:	681a      	ldr	r2, [r3, #0]
 8109cfa:	687b      	ldr	r3, [r7, #4]
 8109cfc:	681b      	ldr	r3, [r3, #0]
 8109cfe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8109d02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8109d04:	687b      	ldr	r3, [r7, #4]
 8109d06:	681b      	ldr	r3, [r3, #0]
 8109d08:	6819      	ldr	r1, [r3, #0]
 8109d0a:	687b      	ldr	r3, [r7, #4]
 8109d0c:	681b      	ldr	r3, [r3, #0]
 8109d0e:	683a      	ldr	r2, [r7, #0]
 8109d10:	430a      	orrs	r2, r1
 8109d12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8109d14:	687b      	ldr	r3, [r7, #4]
 8109d16:	681b      	ldr	r3, [r3, #0]
 8109d18:	681a      	ldr	r2, [r3, #0]
 8109d1a:	687b      	ldr	r3, [r7, #4]
 8109d1c:	681b      	ldr	r3, [r3, #0]
 8109d1e:	f042 0201 	orr.w	r2, r2, #1
 8109d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8109d24:	687b      	ldr	r3, [r7, #4]
 8109d26:	2220      	movs	r2, #32
 8109d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8109d2c:	687b      	ldr	r3, [r7, #4]
 8109d2e:	2200      	movs	r2, #0
 8109d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8109d34:	2300      	movs	r3, #0
 8109d36:	e000      	b.n	8109d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8109d38:	2302      	movs	r3, #2
  }
}
 8109d3a:	4618      	mov	r0, r3
 8109d3c:	370c      	adds	r7, #12
 8109d3e:	46bd      	mov	sp, r7
 8109d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d44:	4770      	bx	lr

08109d46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8109d46:	b480      	push	{r7}
 8109d48:	b085      	sub	sp, #20
 8109d4a:	af00      	add	r7, sp, #0
 8109d4c:	6078      	str	r0, [r7, #4]
 8109d4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8109d50:	687b      	ldr	r3, [r7, #4]
 8109d52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8109d56:	b2db      	uxtb	r3, r3
 8109d58:	2b20      	cmp	r3, #32
 8109d5a:	d139      	bne.n	8109dd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8109d5c:	687b      	ldr	r3, [r7, #4]
 8109d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8109d62:	2b01      	cmp	r3, #1
 8109d64:	d101      	bne.n	8109d6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8109d66:	2302      	movs	r3, #2
 8109d68:	e033      	b.n	8109dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8109d6a:	687b      	ldr	r3, [r7, #4]
 8109d6c:	2201      	movs	r2, #1
 8109d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8109d72:	687b      	ldr	r3, [r7, #4]
 8109d74:	2224      	movs	r2, #36	@ 0x24
 8109d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8109d7a:	687b      	ldr	r3, [r7, #4]
 8109d7c:	681b      	ldr	r3, [r3, #0]
 8109d7e:	681a      	ldr	r2, [r3, #0]
 8109d80:	687b      	ldr	r3, [r7, #4]
 8109d82:	681b      	ldr	r3, [r3, #0]
 8109d84:	f022 0201 	bic.w	r2, r2, #1
 8109d88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8109d8a:	687b      	ldr	r3, [r7, #4]
 8109d8c:	681b      	ldr	r3, [r3, #0]
 8109d8e:	681b      	ldr	r3, [r3, #0]
 8109d90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8109d92:	68fb      	ldr	r3, [r7, #12]
 8109d94:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8109d98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8109d9a:	683b      	ldr	r3, [r7, #0]
 8109d9c:	021b      	lsls	r3, r3, #8
 8109d9e:	68fa      	ldr	r2, [r7, #12]
 8109da0:	4313      	orrs	r3, r2
 8109da2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8109da4:	687b      	ldr	r3, [r7, #4]
 8109da6:	681b      	ldr	r3, [r3, #0]
 8109da8:	68fa      	ldr	r2, [r7, #12]
 8109daa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8109dac:	687b      	ldr	r3, [r7, #4]
 8109dae:	681b      	ldr	r3, [r3, #0]
 8109db0:	681a      	ldr	r2, [r3, #0]
 8109db2:	687b      	ldr	r3, [r7, #4]
 8109db4:	681b      	ldr	r3, [r3, #0]
 8109db6:	f042 0201 	orr.w	r2, r2, #1
 8109dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8109dbc:	687b      	ldr	r3, [r7, #4]
 8109dbe:	2220      	movs	r2, #32
 8109dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8109dc4:	687b      	ldr	r3, [r7, #4]
 8109dc6:	2200      	movs	r2, #0
 8109dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8109dcc:	2300      	movs	r3, #0
 8109dce:	e000      	b.n	8109dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8109dd0:	2302      	movs	r3, #2
  }
}
 8109dd2:	4618      	mov	r0, r3
 8109dd4:	3714      	adds	r7, #20
 8109dd6:	46bd      	mov	sp, r7
 8109dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ddc:	4770      	bx	lr
	...

08109de0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8109de0:	b580      	push	{r7, lr}
 8109de2:	b084      	sub	sp, #16
 8109de4:	af00      	add	r7, sp, #0
 8109de6:	60f8      	str	r0, [r7, #12]
 8109de8:	460b      	mov	r3, r1
 8109dea:	607a      	str	r2, [r7, #4]
 8109dec:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8109dee:	4b37      	ldr	r3, [pc, #220]	@ (8109ecc <HAL_PWREx_EnterSTOPMode+0xec>)
 8109df0:	681b      	ldr	r3, [r3, #0]
 8109df2:	f023 0201 	bic.w	r2, r3, #1
 8109df6:	4935      	ldr	r1, [pc, #212]	@ (8109ecc <HAL_PWREx_EnterSTOPMode+0xec>)
 8109df8:	68fb      	ldr	r3, [r7, #12]
 8109dfa:	4313      	orrs	r3, r2
 8109dfc:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8109dfe:	687b      	ldr	r3, [r7, #4]
 8109e00:	2b00      	cmp	r3, #0
 8109e02:	d123      	bne.n	8109e4c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8109e04:	f7fc fdbc 	bl	8106980 <HAL_GetCurrentCPUID>
 8109e08:	4603      	mov	r3, r0
 8109e0a:	2b03      	cmp	r3, #3
 8109e0c:	d158      	bne.n	8109ec0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8109e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8109ecc <HAL_PWREx_EnterSTOPMode+0xec>)
 8109e10:	691b      	ldr	r3, [r3, #16]
 8109e12:	4a2e      	ldr	r2, [pc, #184]	@ (8109ecc <HAL_PWREx_EnterSTOPMode+0xec>)
 8109e14:	f023 0301 	bic.w	r3, r3, #1
 8109e18:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8109ed0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e1c:	691b      	ldr	r3, [r3, #16]
 8109e1e:	4a2c      	ldr	r2, [pc, #176]	@ (8109ed0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e20:	f043 0304 	orr.w	r3, r3, #4
 8109e24:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8109e26:	f3bf 8f4f 	dsb	sy
}
 8109e2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8109e2c:	f3bf 8f6f 	isb	sy
}
 8109e30:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8109e32:	7afb      	ldrb	r3, [r7, #11]
 8109e34:	2b01      	cmp	r3, #1
 8109e36:	d101      	bne.n	8109e3c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8109e38:	bf30      	wfi
 8109e3a:	e000      	b.n	8109e3e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8109e3c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109e3e:	4b24      	ldr	r3, [pc, #144]	@ (8109ed0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e40:	691b      	ldr	r3, [r3, #16]
 8109e42:	4a23      	ldr	r2, [pc, #140]	@ (8109ed0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e44:	f023 0304 	bic.w	r3, r3, #4
 8109e48:	6113      	str	r3, [r2, #16]
 8109e4a:	e03c      	b.n	8109ec6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8109e4c:	687b      	ldr	r3, [r7, #4]
 8109e4e:	2b01      	cmp	r3, #1
 8109e50:	d123      	bne.n	8109e9a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8109e52:	f7fc fd95 	bl	8106980 <HAL_GetCurrentCPUID>
 8109e56:	4603      	mov	r3, r0
 8109e58:	2b01      	cmp	r3, #1
 8109e5a:	d133      	bne.n	8109ec4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8109e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8109ecc <HAL_PWREx_EnterSTOPMode+0xec>)
 8109e5e:	695b      	ldr	r3, [r3, #20]
 8109e60:	4a1a      	ldr	r2, [pc, #104]	@ (8109ecc <HAL_PWREx_EnterSTOPMode+0xec>)
 8109e62:	f023 0302 	bic.w	r3, r3, #2
 8109e66:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109e68:	4b19      	ldr	r3, [pc, #100]	@ (8109ed0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e6a:	691b      	ldr	r3, [r3, #16]
 8109e6c:	4a18      	ldr	r2, [pc, #96]	@ (8109ed0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e6e:	f043 0304 	orr.w	r3, r3, #4
 8109e72:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8109e74:	f3bf 8f4f 	dsb	sy
}
 8109e78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8109e7a:	f3bf 8f6f 	isb	sy
}
 8109e7e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8109e80:	7afb      	ldrb	r3, [r7, #11]
 8109e82:	2b01      	cmp	r3, #1
 8109e84:	d101      	bne.n	8109e8a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8109e86:	bf30      	wfi
 8109e88:	e000      	b.n	8109e8c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8109e8a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109e8c:	4b10      	ldr	r3, [pc, #64]	@ (8109ed0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e8e:	691b      	ldr	r3, [r3, #16]
 8109e90:	4a0f      	ldr	r2, [pc, #60]	@ (8109ed0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e92:	f023 0304 	bic.w	r3, r3, #4
 8109e96:	6113      	str	r3, [r2, #16]
 8109e98:	e015      	b.n	8109ec6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8109e9a:	f7fc fd71 	bl	8106980 <HAL_GetCurrentCPUID>
 8109e9e:	4603      	mov	r3, r0
 8109ea0:	2b03      	cmp	r3, #3
 8109ea2:	d106      	bne.n	8109eb2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8109ea4:	4b09      	ldr	r3, [pc, #36]	@ (8109ecc <HAL_PWREx_EnterSTOPMode+0xec>)
 8109ea6:	691b      	ldr	r3, [r3, #16]
 8109ea8:	4a08      	ldr	r2, [pc, #32]	@ (8109ecc <HAL_PWREx_EnterSTOPMode+0xec>)
 8109eaa:	f023 0304 	bic.w	r3, r3, #4
 8109eae:	6113      	str	r3, [r2, #16]
 8109eb0:	e009      	b.n	8109ec6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8109eb2:	4b06      	ldr	r3, [pc, #24]	@ (8109ecc <HAL_PWREx_EnterSTOPMode+0xec>)
 8109eb4:	695b      	ldr	r3, [r3, #20]
 8109eb6:	4a05      	ldr	r2, [pc, #20]	@ (8109ecc <HAL_PWREx_EnterSTOPMode+0xec>)
 8109eb8:	f023 0304 	bic.w	r3, r3, #4
 8109ebc:	6153      	str	r3, [r2, #20]
 8109ebe:	e002      	b.n	8109ec6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8109ec0:	bf00      	nop
 8109ec2:	e000      	b.n	8109ec6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8109ec4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8109ec6:	3710      	adds	r7, #16
 8109ec8:	46bd      	mov	sp, r7
 8109eca:	bd80      	pop	{r7, pc}
 8109ecc:	58024800 	.word	0x58024800
 8109ed0:	e000ed00 	.word	0xe000ed00

08109ed4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8109ed4:	b580      	push	{r7, lr}
 8109ed6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8109ed8:	f7fc fd52 	bl	8106980 <HAL_GetCurrentCPUID>
 8109edc:	4603      	mov	r3, r0
 8109ede:	2b03      	cmp	r3, #3
 8109ee0:	d101      	bne.n	8109ee6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8109ee2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8109ee4:	e001      	b.n	8109eea <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8109ee6:	bf40      	sev
    __WFE ();
 8109ee8:	bf20      	wfe
}
 8109eea:	bf00      	nop
 8109eec:	bd80      	pop	{r7, pc}
	...

08109ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8109ef0:	b480      	push	{r7}
 8109ef2:	b089      	sub	sp, #36	@ 0x24
 8109ef4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8109ef6:	4bb3      	ldr	r3, [pc, #716]	@ (810a1c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109ef8:	691b      	ldr	r3, [r3, #16]
 8109efa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8109efe:	2b18      	cmp	r3, #24
 8109f00:	f200 8155 	bhi.w	810a1ae <HAL_RCC_GetSysClockFreq+0x2be>
 8109f04:	a201      	add	r2, pc, #4	@ (adr r2, 8109f0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8109f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109f0a:	bf00      	nop
 8109f0c:	08109f71 	.word	0x08109f71
 8109f10:	0810a1af 	.word	0x0810a1af
 8109f14:	0810a1af 	.word	0x0810a1af
 8109f18:	0810a1af 	.word	0x0810a1af
 8109f1c:	0810a1af 	.word	0x0810a1af
 8109f20:	0810a1af 	.word	0x0810a1af
 8109f24:	0810a1af 	.word	0x0810a1af
 8109f28:	0810a1af 	.word	0x0810a1af
 8109f2c:	08109f97 	.word	0x08109f97
 8109f30:	0810a1af 	.word	0x0810a1af
 8109f34:	0810a1af 	.word	0x0810a1af
 8109f38:	0810a1af 	.word	0x0810a1af
 8109f3c:	0810a1af 	.word	0x0810a1af
 8109f40:	0810a1af 	.word	0x0810a1af
 8109f44:	0810a1af 	.word	0x0810a1af
 8109f48:	0810a1af 	.word	0x0810a1af
 8109f4c:	08109f9d 	.word	0x08109f9d
 8109f50:	0810a1af 	.word	0x0810a1af
 8109f54:	0810a1af 	.word	0x0810a1af
 8109f58:	0810a1af 	.word	0x0810a1af
 8109f5c:	0810a1af 	.word	0x0810a1af
 8109f60:	0810a1af 	.word	0x0810a1af
 8109f64:	0810a1af 	.word	0x0810a1af
 8109f68:	0810a1af 	.word	0x0810a1af
 8109f6c:	08109fa3 	.word	0x08109fa3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109f70:	4b94      	ldr	r3, [pc, #592]	@ (810a1c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109f72:	681b      	ldr	r3, [r3, #0]
 8109f74:	f003 0320 	and.w	r3, r3, #32
 8109f78:	2b00      	cmp	r3, #0
 8109f7a:	d009      	beq.n	8109f90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109f7c:	4b91      	ldr	r3, [pc, #580]	@ (810a1c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109f7e:	681b      	ldr	r3, [r3, #0]
 8109f80:	08db      	lsrs	r3, r3, #3
 8109f82:	f003 0303 	and.w	r3, r3, #3
 8109f86:	4a90      	ldr	r2, [pc, #576]	@ (810a1c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8109f88:	fa22 f303 	lsr.w	r3, r2, r3
 8109f8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8109f8e:	e111      	b.n	810a1b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8109f90:	4b8d      	ldr	r3, [pc, #564]	@ (810a1c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8109f92:	61bb      	str	r3, [r7, #24]
      break;
 8109f94:	e10e      	b.n	810a1b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8109f96:	4b8d      	ldr	r3, [pc, #564]	@ (810a1cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8109f98:	61bb      	str	r3, [r7, #24]
      break;
 8109f9a:	e10b      	b.n	810a1b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8109f9c:	4b8c      	ldr	r3, [pc, #560]	@ (810a1d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8109f9e:	61bb      	str	r3, [r7, #24]
      break;
 8109fa0:	e108      	b.n	810a1b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109fa2:	4b88      	ldr	r3, [pc, #544]	@ (810a1c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109fa6:	f003 0303 	and.w	r3, r3, #3
 8109faa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8109fac:	4b85      	ldr	r3, [pc, #532]	@ (810a1c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109fb0:	091b      	lsrs	r3, r3, #4
 8109fb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8109fb6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8109fb8:	4b82      	ldr	r3, [pc, #520]	@ (810a1c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109fbc:	f003 0301 	and.w	r3, r3, #1
 8109fc0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8109fc2:	4b80      	ldr	r3, [pc, #512]	@ (810a1c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109fc6:	08db      	lsrs	r3, r3, #3
 8109fc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109fcc:	68fa      	ldr	r2, [r7, #12]
 8109fce:	fb02 f303 	mul.w	r3, r2, r3
 8109fd2:	ee07 3a90 	vmov	s15, r3
 8109fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109fda:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8109fde:	693b      	ldr	r3, [r7, #16]
 8109fe0:	2b00      	cmp	r3, #0
 8109fe2:	f000 80e1 	beq.w	810a1a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8109fe6:	697b      	ldr	r3, [r7, #20]
 8109fe8:	2b02      	cmp	r3, #2
 8109fea:	f000 8083 	beq.w	810a0f4 <HAL_RCC_GetSysClockFreq+0x204>
 8109fee:	697b      	ldr	r3, [r7, #20]
 8109ff0:	2b02      	cmp	r3, #2
 8109ff2:	f200 80a1 	bhi.w	810a138 <HAL_RCC_GetSysClockFreq+0x248>
 8109ff6:	697b      	ldr	r3, [r7, #20]
 8109ff8:	2b00      	cmp	r3, #0
 8109ffa:	d003      	beq.n	810a004 <HAL_RCC_GetSysClockFreq+0x114>
 8109ffc:	697b      	ldr	r3, [r7, #20]
 8109ffe:	2b01      	cmp	r3, #1
 810a000:	d056      	beq.n	810a0b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 810a002:	e099      	b.n	810a138 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a004:	4b6f      	ldr	r3, [pc, #444]	@ (810a1c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a006:	681b      	ldr	r3, [r3, #0]
 810a008:	f003 0320 	and.w	r3, r3, #32
 810a00c:	2b00      	cmp	r3, #0
 810a00e:	d02d      	beq.n	810a06c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810a010:	4b6c      	ldr	r3, [pc, #432]	@ (810a1c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a012:	681b      	ldr	r3, [r3, #0]
 810a014:	08db      	lsrs	r3, r3, #3
 810a016:	f003 0303 	and.w	r3, r3, #3
 810a01a:	4a6b      	ldr	r2, [pc, #428]	@ (810a1c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810a01c:	fa22 f303 	lsr.w	r3, r2, r3
 810a020:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a022:	687b      	ldr	r3, [r7, #4]
 810a024:	ee07 3a90 	vmov	s15, r3
 810a028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a02c:	693b      	ldr	r3, [r7, #16]
 810a02e:	ee07 3a90 	vmov	s15, r3
 810a032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a03a:	4b62      	ldr	r3, [pc, #392]	@ (810a1c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a03c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a03e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a042:	ee07 3a90 	vmov	s15, r3
 810a046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a04a:	ed97 6a02 	vldr	s12, [r7, #8]
 810a04e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 810a1d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a05a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a05e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a062:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a066:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810a06a:	e087      	b.n	810a17c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a06c:	693b      	ldr	r3, [r7, #16]
 810a06e:	ee07 3a90 	vmov	s15, r3
 810a072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a076:	eddf 6a58 	vldr	s13, [pc, #352]	@ 810a1d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 810a07a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a07e:	4b51      	ldr	r3, [pc, #324]	@ (810a1c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a086:	ee07 3a90 	vmov	s15, r3
 810a08a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a08e:	ed97 6a02 	vldr	s12, [r7, #8]
 810a092:	eddf 5a50 	vldr	s11, [pc, #320]	@ 810a1d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a09a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a09e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a0a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a0a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a0aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810a0ae:	e065      	b.n	810a17c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a0b0:	693b      	ldr	r3, [r7, #16]
 810a0b2:	ee07 3a90 	vmov	s15, r3
 810a0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a0ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 810a1dc <HAL_RCC_GetSysClockFreq+0x2ec>
 810a0be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a0c2:	4b40      	ldr	r3, [pc, #256]	@ (810a1c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a0c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a0c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a0ca:	ee07 3a90 	vmov	s15, r3
 810a0ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a0d2:	ed97 6a02 	vldr	s12, [r7, #8]
 810a0d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 810a1d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a0da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a0de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a0e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a0e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a0ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a0ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810a0f2:	e043      	b.n	810a17c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a0f4:	693b      	ldr	r3, [r7, #16]
 810a0f6:	ee07 3a90 	vmov	s15, r3
 810a0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a0fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 810a1e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 810a102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a106:	4b2f      	ldr	r3, [pc, #188]	@ (810a1c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a10e:	ee07 3a90 	vmov	s15, r3
 810a112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a116:	ed97 6a02 	vldr	s12, [r7, #8]
 810a11a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 810a1d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a11e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a12a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a132:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810a136:	e021      	b.n	810a17c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a138:	693b      	ldr	r3, [r7, #16]
 810a13a:	ee07 3a90 	vmov	s15, r3
 810a13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a142:	eddf 6a26 	vldr	s13, [pc, #152]	@ 810a1dc <HAL_RCC_GetSysClockFreq+0x2ec>
 810a146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a14a:	4b1e      	ldr	r3, [pc, #120]	@ (810a1c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a14c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a14e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a152:	ee07 3a90 	vmov	s15, r3
 810a156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a15a:	ed97 6a02 	vldr	s12, [r7, #8]
 810a15e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 810a1d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a16a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a16e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a172:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a176:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810a17a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810a17c:	4b11      	ldr	r3, [pc, #68]	@ (810a1c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a17e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a180:	0a5b      	lsrs	r3, r3, #9
 810a182:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a186:	3301      	adds	r3, #1
 810a188:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810a18a:	683b      	ldr	r3, [r7, #0]
 810a18c:	ee07 3a90 	vmov	s15, r3
 810a190:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810a194:	edd7 6a07 	vldr	s13, [r7, #28]
 810a198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a19c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a1a0:	ee17 3a90 	vmov	r3, s15
 810a1a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810a1a6:	e005      	b.n	810a1b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 810a1a8:	2300      	movs	r3, #0
 810a1aa:	61bb      	str	r3, [r7, #24]
      break;
 810a1ac:	e002      	b.n	810a1b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810a1ae:	4b07      	ldr	r3, [pc, #28]	@ (810a1cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 810a1b0:	61bb      	str	r3, [r7, #24]
      break;
 810a1b2:	bf00      	nop
  }

  return sysclockfreq;
 810a1b4:	69bb      	ldr	r3, [r7, #24]
}
 810a1b6:	4618      	mov	r0, r3
 810a1b8:	3724      	adds	r7, #36	@ 0x24
 810a1ba:	46bd      	mov	sp, r7
 810a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a1c0:	4770      	bx	lr
 810a1c2:	bf00      	nop
 810a1c4:	58024400 	.word	0x58024400
 810a1c8:	03d09000 	.word	0x03d09000
 810a1cc:	003d0900 	.word	0x003d0900
 810a1d0:	007a1200 	.word	0x007a1200
 810a1d4:	46000000 	.word	0x46000000
 810a1d8:	4c742400 	.word	0x4c742400
 810a1dc:	4a742400 	.word	0x4a742400
 810a1e0:	4af42400 	.word	0x4af42400

0810a1e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810a1e4:	b580      	push	{r7, lr}
 810a1e6:	b082      	sub	sp, #8
 810a1e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810a1ea:	f7ff fe81 	bl	8109ef0 <HAL_RCC_GetSysClockFreq>
 810a1ee:	4602      	mov	r2, r0
 810a1f0:	4b11      	ldr	r3, [pc, #68]	@ (810a238 <HAL_RCC_GetHCLKFreq+0x54>)
 810a1f2:	699b      	ldr	r3, [r3, #24]
 810a1f4:	0a1b      	lsrs	r3, r3, #8
 810a1f6:	f003 030f 	and.w	r3, r3, #15
 810a1fa:	4910      	ldr	r1, [pc, #64]	@ (810a23c <HAL_RCC_GetHCLKFreq+0x58>)
 810a1fc:	5ccb      	ldrb	r3, [r1, r3]
 810a1fe:	f003 031f 	and.w	r3, r3, #31
 810a202:	fa22 f303 	lsr.w	r3, r2, r3
 810a206:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810a208:	4b0b      	ldr	r3, [pc, #44]	@ (810a238 <HAL_RCC_GetHCLKFreq+0x54>)
 810a20a:	699b      	ldr	r3, [r3, #24]
 810a20c:	f003 030f 	and.w	r3, r3, #15
 810a210:	4a0a      	ldr	r2, [pc, #40]	@ (810a23c <HAL_RCC_GetHCLKFreq+0x58>)
 810a212:	5cd3      	ldrb	r3, [r2, r3]
 810a214:	f003 031f 	and.w	r3, r3, #31
 810a218:	687a      	ldr	r2, [r7, #4]
 810a21a:	fa22 f303 	lsr.w	r3, r2, r3
 810a21e:	4a08      	ldr	r2, [pc, #32]	@ (810a240 <HAL_RCC_GetHCLKFreq+0x5c>)
 810a220:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810a222:	4b07      	ldr	r3, [pc, #28]	@ (810a240 <HAL_RCC_GetHCLKFreq+0x5c>)
 810a224:	681b      	ldr	r3, [r3, #0]
 810a226:	4a07      	ldr	r2, [pc, #28]	@ (810a244 <HAL_RCC_GetHCLKFreq+0x60>)
 810a228:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810a22a:	4b05      	ldr	r3, [pc, #20]	@ (810a240 <HAL_RCC_GetHCLKFreq+0x5c>)
 810a22c:	681b      	ldr	r3, [r3, #0]
}
 810a22e:	4618      	mov	r0, r3
 810a230:	3708      	adds	r7, #8
 810a232:	46bd      	mov	sp, r7
 810a234:	bd80      	pop	{r7, pc}
 810a236:	bf00      	nop
 810a238:	58024400 	.word	0x58024400
 810a23c:	08116cc8 	.word	0x08116cc8
 810a240:	10000004 	.word	0x10000004
 810a244:	10000000 	.word	0x10000000

0810a248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810a248:	b580      	push	{r7, lr}
 810a24a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810a24c:	f7ff ffca 	bl	810a1e4 <HAL_RCC_GetHCLKFreq>
 810a250:	4602      	mov	r2, r0
 810a252:	4b06      	ldr	r3, [pc, #24]	@ (810a26c <HAL_RCC_GetPCLK1Freq+0x24>)
 810a254:	69db      	ldr	r3, [r3, #28]
 810a256:	091b      	lsrs	r3, r3, #4
 810a258:	f003 0307 	and.w	r3, r3, #7
 810a25c:	4904      	ldr	r1, [pc, #16]	@ (810a270 <HAL_RCC_GetPCLK1Freq+0x28>)
 810a25e:	5ccb      	ldrb	r3, [r1, r3]
 810a260:	f003 031f 	and.w	r3, r3, #31
 810a264:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810a268:	4618      	mov	r0, r3
 810a26a:	bd80      	pop	{r7, pc}
 810a26c:	58024400 	.word	0x58024400
 810a270:	08116cc8 	.word	0x08116cc8

0810a274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 810a274:	b580      	push	{r7, lr}
 810a276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810a278:	f7ff ffb4 	bl	810a1e4 <HAL_RCC_GetHCLKFreq>
 810a27c:	4602      	mov	r2, r0
 810a27e:	4b06      	ldr	r3, [pc, #24]	@ (810a298 <HAL_RCC_GetPCLK2Freq+0x24>)
 810a280:	69db      	ldr	r3, [r3, #28]
 810a282:	0a1b      	lsrs	r3, r3, #8
 810a284:	f003 0307 	and.w	r3, r3, #7
 810a288:	4904      	ldr	r1, [pc, #16]	@ (810a29c <HAL_RCC_GetPCLK2Freq+0x28>)
 810a28a:	5ccb      	ldrb	r3, [r1, r3]
 810a28c:	f003 031f 	and.w	r3, r3, #31
 810a290:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 810a294:	4618      	mov	r0, r3
 810a296:	bd80      	pop	{r7, pc}
 810a298:	58024400 	.word	0x58024400
 810a29c:	08116cc8 	.word	0x08116cc8

0810a2a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810a2a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810a2a4:	b0ca      	sub	sp, #296	@ 0x128
 810a2a6:	af00      	add	r7, sp, #0
 810a2a8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810a2ac:	2300      	movs	r3, #0
 810a2ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810a2b2:	2300      	movs	r3, #0
 810a2b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810a2b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a2c0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 810a2c4:	2500      	movs	r5, #0
 810a2c6:	ea54 0305 	orrs.w	r3, r4, r5
 810a2ca:	d049      	beq.n	810a360 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 810a2cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a2d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810a2d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810a2d6:	d02f      	beq.n	810a338 <HAL_RCCEx_PeriphCLKConfig+0x98>
 810a2d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810a2dc:	d828      	bhi.n	810a330 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810a2de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810a2e2:	d01a      	beq.n	810a31a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 810a2e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810a2e8:	d822      	bhi.n	810a330 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810a2ea:	2b00      	cmp	r3, #0
 810a2ec:	d003      	beq.n	810a2f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810a2ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810a2f2:	d007      	beq.n	810a304 <HAL_RCCEx_PeriphCLKConfig+0x64>
 810a2f4:	e01c      	b.n	810a330 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a2f6:	4bb8      	ldr	r3, [pc, #736]	@ (810a5d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a2f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a2fa:	4ab7      	ldr	r2, [pc, #732]	@ (810a5d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a2fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a300:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810a302:	e01a      	b.n	810a33a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810a304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a308:	3308      	adds	r3, #8
 810a30a:	2102      	movs	r1, #2
 810a30c:	4618      	mov	r0, r3
 810a30e:	f002 fb61 	bl	810c9d4 <RCCEx_PLL2_Config>
 810a312:	4603      	mov	r3, r0
 810a314:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810a318:	e00f      	b.n	810a33a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810a31a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a31e:	3328      	adds	r3, #40	@ 0x28
 810a320:	2102      	movs	r1, #2
 810a322:	4618      	mov	r0, r3
 810a324:	f002 fc08 	bl	810cb38 <RCCEx_PLL3_Config>
 810a328:	4603      	mov	r3, r0
 810a32a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810a32e:	e004      	b.n	810a33a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a330:	2301      	movs	r3, #1
 810a332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a336:	e000      	b.n	810a33a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810a338:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a33a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a33e:	2b00      	cmp	r3, #0
 810a340:	d10a      	bne.n	810a358 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810a342:	4ba5      	ldr	r3, [pc, #660]	@ (810a5d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a346:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810a34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a34e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810a350:	4aa1      	ldr	r2, [pc, #644]	@ (810a5d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a352:	430b      	orrs	r3, r1
 810a354:	6513      	str	r3, [r2, #80]	@ 0x50
 810a356:	e003      	b.n	810a360 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a358:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a35c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810a360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a364:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a368:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 810a36c:	f04f 0900 	mov.w	r9, #0
 810a370:	ea58 0309 	orrs.w	r3, r8, r9
 810a374:	d047      	beq.n	810a406 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810a376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a37a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a37c:	2b04      	cmp	r3, #4
 810a37e:	d82a      	bhi.n	810a3d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 810a380:	a201      	add	r2, pc, #4	@ (adr r2, 810a388 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810a382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a386:	bf00      	nop
 810a388:	0810a39d 	.word	0x0810a39d
 810a38c:	0810a3ab 	.word	0x0810a3ab
 810a390:	0810a3c1 	.word	0x0810a3c1
 810a394:	0810a3df 	.word	0x0810a3df
 810a398:	0810a3df 	.word	0x0810a3df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a39c:	4b8e      	ldr	r3, [pc, #568]	@ (810a5d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a39e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a3a0:	4a8d      	ldr	r2, [pc, #564]	@ (810a5d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a3a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a3a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a3a8:	e01a      	b.n	810a3e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a3ae:	3308      	adds	r3, #8
 810a3b0:	2100      	movs	r1, #0
 810a3b2:	4618      	mov	r0, r3
 810a3b4:	f002 fb0e 	bl	810c9d4 <RCCEx_PLL2_Config>
 810a3b8:	4603      	mov	r3, r0
 810a3ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a3be:	e00f      	b.n	810a3e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a3c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a3c4:	3328      	adds	r3, #40	@ 0x28
 810a3c6:	2100      	movs	r1, #0
 810a3c8:	4618      	mov	r0, r3
 810a3ca:	f002 fbb5 	bl	810cb38 <RCCEx_PLL3_Config>
 810a3ce:	4603      	mov	r3, r0
 810a3d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a3d4:	e004      	b.n	810a3e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a3d6:	2301      	movs	r3, #1
 810a3d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a3dc:	e000      	b.n	810a3e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810a3de:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a3e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a3e4:	2b00      	cmp	r3, #0
 810a3e6:	d10a      	bne.n	810a3fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810a3e8:	4b7b      	ldr	r3, [pc, #492]	@ (810a5d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a3ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a3ec:	f023 0107 	bic.w	r1, r3, #7
 810a3f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a3f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a3f6:	4a78      	ldr	r2, [pc, #480]	@ (810a5d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a3f8:	430b      	orrs	r3, r1
 810a3fa:	6513      	str	r3, [r2, #80]	@ 0x50
 810a3fc:	e003      	b.n	810a406 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a3fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a402:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810a406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a40e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810a412:	f04f 0b00 	mov.w	fp, #0
 810a416:	ea5a 030b 	orrs.w	r3, sl, fp
 810a41a:	d04c      	beq.n	810a4b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 810a41c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810a422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a426:	d030      	beq.n	810a48a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 810a428:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a42c:	d829      	bhi.n	810a482 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810a42e:	2bc0      	cmp	r3, #192	@ 0xc0
 810a430:	d02d      	beq.n	810a48e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810a432:	2bc0      	cmp	r3, #192	@ 0xc0
 810a434:	d825      	bhi.n	810a482 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810a436:	2b80      	cmp	r3, #128	@ 0x80
 810a438:	d018      	beq.n	810a46c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810a43a:	2b80      	cmp	r3, #128	@ 0x80
 810a43c:	d821      	bhi.n	810a482 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810a43e:	2b00      	cmp	r3, #0
 810a440:	d002      	beq.n	810a448 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810a442:	2b40      	cmp	r3, #64	@ 0x40
 810a444:	d007      	beq.n	810a456 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810a446:	e01c      	b.n	810a482 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a448:	4b63      	ldr	r3, [pc, #396]	@ (810a5d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a44a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a44c:	4a62      	ldr	r2, [pc, #392]	@ (810a5d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a44e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a452:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810a454:	e01c      	b.n	810a490 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a45a:	3308      	adds	r3, #8
 810a45c:	2100      	movs	r1, #0
 810a45e:	4618      	mov	r0, r3
 810a460:	f002 fab8 	bl	810c9d4 <RCCEx_PLL2_Config>
 810a464:	4603      	mov	r3, r0
 810a466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810a46a:	e011      	b.n	810a490 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a46c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a470:	3328      	adds	r3, #40	@ 0x28
 810a472:	2100      	movs	r1, #0
 810a474:	4618      	mov	r0, r3
 810a476:	f002 fb5f 	bl	810cb38 <RCCEx_PLL3_Config>
 810a47a:	4603      	mov	r3, r0
 810a47c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810a480:	e006      	b.n	810a490 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a482:	2301      	movs	r3, #1
 810a484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a488:	e002      	b.n	810a490 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810a48a:	bf00      	nop
 810a48c:	e000      	b.n	810a490 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810a48e:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a490:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a494:	2b00      	cmp	r3, #0
 810a496:	d10a      	bne.n	810a4ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810a498:	4b4f      	ldr	r3, [pc, #316]	@ (810a5d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a49a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a49c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 810a4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a4a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810a4a6:	4a4c      	ldr	r2, [pc, #304]	@ (810a5d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a4a8:	430b      	orrs	r3, r1
 810a4aa:	6513      	str	r3, [r2, #80]	@ 0x50
 810a4ac:	e003      	b.n	810a4b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a4ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a4b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810a4b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a4be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810a4c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 810a4c6:	2300      	movs	r3, #0
 810a4c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 810a4cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 810a4d0:	460b      	mov	r3, r1
 810a4d2:	4313      	orrs	r3, r2
 810a4d4:	d053      	beq.n	810a57e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810a4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a4da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810a4de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810a4e2:	d035      	beq.n	810a550 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 810a4e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810a4e8:	d82e      	bhi.n	810a548 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810a4ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810a4ee:	d031      	beq.n	810a554 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810a4f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810a4f4:	d828      	bhi.n	810a548 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810a4f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810a4fa:	d01a      	beq.n	810a532 <HAL_RCCEx_PeriphCLKConfig+0x292>
 810a4fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810a500:	d822      	bhi.n	810a548 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810a502:	2b00      	cmp	r3, #0
 810a504:	d003      	beq.n	810a50e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810a506:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810a50a:	d007      	beq.n	810a51c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810a50c:	e01c      	b.n	810a548 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a50e:	4b32      	ldr	r3, [pc, #200]	@ (810a5d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a512:	4a31      	ldr	r2, [pc, #196]	@ (810a5d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a518:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a51a:	e01c      	b.n	810a556 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a51c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a520:	3308      	adds	r3, #8
 810a522:	2100      	movs	r1, #0
 810a524:	4618      	mov	r0, r3
 810a526:	f002 fa55 	bl	810c9d4 <RCCEx_PLL2_Config>
 810a52a:	4603      	mov	r3, r0
 810a52c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810a530:	e011      	b.n	810a556 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a536:	3328      	adds	r3, #40	@ 0x28
 810a538:	2100      	movs	r1, #0
 810a53a:	4618      	mov	r0, r3
 810a53c:	f002 fafc 	bl	810cb38 <RCCEx_PLL3_Config>
 810a540:	4603      	mov	r3, r0
 810a542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a546:	e006      	b.n	810a556 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810a548:	2301      	movs	r3, #1
 810a54a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a54e:	e002      	b.n	810a556 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810a550:	bf00      	nop
 810a552:	e000      	b.n	810a556 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810a554:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a55a:	2b00      	cmp	r3, #0
 810a55c:	d10b      	bne.n	810a576 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810a55e:	4b1e      	ldr	r3, [pc, #120]	@ (810a5d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a562:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810a566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a56a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810a56e:	4a1a      	ldr	r2, [pc, #104]	@ (810a5d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a570:	430b      	orrs	r3, r1
 810a572:	6593      	str	r3, [r2, #88]	@ 0x58
 810a574:	e003      	b.n	810a57e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a57a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810a57e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a586:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810a58a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810a58e:	2300      	movs	r3, #0
 810a590:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 810a594:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810a598:	460b      	mov	r3, r1
 810a59a:	4313      	orrs	r3, r2
 810a59c:	d056      	beq.n	810a64c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810a59e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a5a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810a5a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810a5aa:	d038      	beq.n	810a61e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 810a5ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810a5b0:	d831      	bhi.n	810a616 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a5b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810a5b6:	d034      	beq.n	810a622 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810a5b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810a5bc:	d82b      	bhi.n	810a616 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a5be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810a5c2:	d01d      	beq.n	810a600 <HAL_RCCEx_PeriphCLKConfig+0x360>
 810a5c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810a5c8:	d825      	bhi.n	810a616 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a5ca:	2b00      	cmp	r3, #0
 810a5cc:	d006      	beq.n	810a5dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810a5ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810a5d2:	d00a      	beq.n	810a5ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810a5d4:	e01f      	b.n	810a616 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a5d6:	bf00      	nop
 810a5d8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a5dc:	4ba2      	ldr	r3, [pc, #648]	@ (810a868 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a5de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a5e0:	4aa1      	ldr	r2, [pc, #644]	@ (810a868 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a5e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a5e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a5e8:	e01c      	b.n	810a624 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a5ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a5ee:	3308      	adds	r3, #8
 810a5f0:	2100      	movs	r1, #0
 810a5f2:	4618      	mov	r0, r3
 810a5f4:	f002 f9ee 	bl	810c9d4 <RCCEx_PLL2_Config>
 810a5f8:	4603      	mov	r3, r0
 810a5fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810a5fe:	e011      	b.n	810a624 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a604:	3328      	adds	r3, #40	@ 0x28
 810a606:	2100      	movs	r1, #0
 810a608:	4618      	mov	r0, r3
 810a60a:	f002 fa95 	bl	810cb38 <RCCEx_PLL3_Config>
 810a60e:	4603      	mov	r3, r0
 810a610:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a614:	e006      	b.n	810a624 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810a616:	2301      	movs	r3, #1
 810a618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a61c:	e002      	b.n	810a624 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810a61e:	bf00      	nop
 810a620:	e000      	b.n	810a624 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810a622:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a624:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a628:	2b00      	cmp	r3, #0
 810a62a:	d10b      	bne.n	810a644 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810a62c:	4b8e      	ldr	r3, [pc, #568]	@ (810a868 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a62e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a630:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 810a634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a638:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810a63c:	4a8a      	ldr	r2, [pc, #552]	@ (810a868 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a63e:	430b      	orrs	r3, r1
 810a640:	6593      	str	r3, [r2, #88]	@ 0x58
 810a642:	e003      	b.n	810a64c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a648:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810a64c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a650:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a654:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 810a658:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 810a65c:	2300      	movs	r3, #0
 810a65e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 810a662:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 810a666:	460b      	mov	r3, r1
 810a668:	4313      	orrs	r3, r2
 810a66a:	d03a      	beq.n	810a6e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 810a66c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a672:	2b30      	cmp	r3, #48	@ 0x30
 810a674:	d01f      	beq.n	810a6b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 810a676:	2b30      	cmp	r3, #48	@ 0x30
 810a678:	d819      	bhi.n	810a6ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810a67a:	2b20      	cmp	r3, #32
 810a67c:	d00c      	beq.n	810a698 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810a67e:	2b20      	cmp	r3, #32
 810a680:	d815      	bhi.n	810a6ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810a682:	2b00      	cmp	r3, #0
 810a684:	d019      	beq.n	810a6ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810a686:	2b10      	cmp	r3, #16
 810a688:	d111      	bne.n	810a6ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a68a:	4b77      	ldr	r3, [pc, #476]	@ (810a868 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a68c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a68e:	4a76      	ldr	r2, [pc, #472]	@ (810a868 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a694:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810a696:	e011      	b.n	810a6bc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810a698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a69c:	3308      	adds	r3, #8
 810a69e:	2102      	movs	r1, #2
 810a6a0:	4618      	mov	r0, r3
 810a6a2:	f002 f997 	bl	810c9d4 <RCCEx_PLL2_Config>
 810a6a6:	4603      	mov	r3, r0
 810a6a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810a6ac:	e006      	b.n	810a6bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810a6ae:	2301      	movs	r3, #1
 810a6b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a6b4:	e002      	b.n	810a6bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810a6b6:	bf00      	nop
 810a6b8:	e000      	b.n	810a6bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810a6ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a6bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a6c0:	2b00      	cmp	r3, #0
 810a6c2:	d10a      	bne.n	810a6da <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810a6c4:	4b68      	ldr	r3, [pc, #416]	@ (810a868 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a6c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a6c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 810a6cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a6d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a6d2:	4a65      	ldr	r2, [pc, #404]	@ (810a868 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a6d4:	430b      	orrs	r3, r1
 810a6d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810a6d8:	e003      	b.n	810a6e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a6da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a6de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810a6e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a6ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 810a6ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810a6f2:	2300      	movs	r3, #0
 810a6f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 810a6f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 810a6fc:	460b      	mov	r3, r1
 810a6fe:	4313      	orrs	r3, r2
 810a700:	d051      	beq.n	810a7a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810a702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810a708:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810a70c:	d035      	beq.n	810a77a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810a70e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810a712:	d82e      	bhi.n	810a772 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810a714:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810a718:	d031      	beq.n	810a77e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810a71a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810a71e:	d828      	bhi.n	810a772 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810a720:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810a724:	d01a      	beq.n	810a75c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 810a726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810a72a:	d822      	bhi.n	810a772 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810a72c:	2b00      	cmp	r3, #0
 810a72e:	d003      	beq.n	810a738 <HAL_RCCEx_PeriphCLKConfig+0x498>
 810a730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a734:	d007      	beq.n	810a746 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 810a736:	e01c      	b.n	810a772 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a738:	4b4b      	ldr	r3, [pc, #300]	@ (810a868 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a73a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a73c:	4a4a      	ldr	r2, [pc, #296]	@ (810a868 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a73e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a742:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810a744:	e01c      	b.n	810a780 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a74a:	3308      	adds	r3, #8
 810a74c:	2100      	movs	r1, #0
 810a74e:	4618      	mov	r0, r3
 810a750:	f002 f940 	bl	810c9d4 <RCCEx_PLL2_Config>
 810a754:	4603      	mov	r3, r0
 810a756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810a75a:	e011      	b.n	810a780 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a75c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a760:	3328      	adds	r3, #40	@ 0x28
 810a762:	2100      	movs	r1, #0
 810a764:	4618      	mov	r0, r3
 810a766:	f002 f9e7 	bl	810cb38 <RCCEx_PLL3_Config>
 810a76a:	4603      	mov	r3, r0
 810a76c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810a770:	e006      	b.n	810a780 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a772:	2301      	movs	r3, #1
 810a774:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a778:	e002      	b.n	810a780 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810a77a:	bf00      	nop
 810a77c:	e000      	b.n	810a780 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810a77e:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a784:	2b00      	cmp	r3, #0
 810a786:	d10a      	bne.n	810a79e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810a788:	4b37      	ldr	r3, [pc, #220]	@ (810a868 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a78a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a78c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 810a790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810a796:	4a34      	ldr	r2, [pc, #208]	@ (810a868 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a798:	430b      	orrs	r3, r1
 810a79a:	6513      	str	r3, [r2, #80]	@ 0x50
 810a79c:	e003      	b.n	810a7a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a79e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a7a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810a7a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a7ae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810a7b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810a7b6:	2300      	movs	r3, #0
 810a7b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 810a7bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 810a7c0:	460b      	mov	r3, r1
 810a7c2:	4313      	orrs	r3, r2
 810a7c4:	d056      	beq.n	810a874 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810a7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a7ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810a7cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810a7d0:	d033      	beq.n	810a83a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810a7d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810a7d6:	d82c      	bhi.n	810a832 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a7d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810a7dc:	d02f      	beq.n	810a83e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810a7de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810a7e2:	d826      	bhi.n	810a832 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a7e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810a7e8:	d02b      	beq.n	810a842 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810a7ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810a7ee:	d820      	bhi.n	810a832 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a7f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810a7f4:	d012      	beq.n	810a81c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810a7f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810a7fa:	d81a      	bhi.n	810a832 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a7fc:	2b00      	cmp	r3, #0
 810a7fe:	d022      	beq.n	810a846 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810a800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810a804:	d115      	bne.n	810a832 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a80a:	3308      	adds	r3, #8
 810a80c:	2101      	movs	r1, #1
 810a80e:	4618      	mov	r0, r3
 810a810:	f002 f8e0 	bl	810c9d4 <RCCEx_PLL2_Config>
 810a814:	4603      	mov	r3, r0
 810a816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810a81a:	e015      	b.n	810a848 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810a81c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a820:	3328      	adds	r3, #40	@ 0x28
 810a822:	2101      	movs	r1, #1
 810a824:	4618      	mov	r0, r3
 810a826:	f002 f987 	bl	810cb38 <RCCEx_PLL3_Config>
 810a82a:	4603      	mov	r3, r0
 810a82c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810a830:	e00a      	b.n	810a848 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a832:	2301      	movs	r3, #1
 810a834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a838:	e006      	b.n	810a848 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a83a:	bf00      	nop
 810a83c:	e004      	b.n	810a848 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a83e:	bf00      	nop
 810a840:	e002      	b.n	810a848 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a842:	bf00      	nop
 810a844:	e000      	b.n	810a848 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a846:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a84c:	2b00      	cmp	r3, #0
 810a84e:	d10d      	bne.n	810a86c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810a850:	4b05      	ldr	r3, [pc, #20]	@ (810a868 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a854:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 810a858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a85c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810a85e:	4a02      	ldr	r2, [pc, #8]	@ (810a868 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a860:	430b      	orrs	r3, r1
 810a862:	6513      	str	r3, [r2, #80]	@ 0x50
 810a864:	e006      	b.n	810a874 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810a866:	bf00      	nop
 810a868:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a86c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a870:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810a874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a878:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a87c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 810a880:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 810a884:	2300      	movs	r3, #0
 810a886:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810a88a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810a88e:	460b      	mov	r3, r1
 810a890:	4313      	orrs	r3, r2
 810a892:	d055      	beq.n	810a940 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 810a894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a898:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810a89c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810a8a0:	d033      	beq.n	810a90a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810a8a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810a8a6:	d82c      	bhi.n	810a902 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810a8a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a8ac:	d02f      	beq.n	810a90e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810a8ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a8b2:	d826      	bhi.n	810a902 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810a8b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810a8b8:	d02b      	beq.n	810a912 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810a8ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810a8be:	d820      	bhi.n	810a902 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810a8c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a8c4:	d012      	beq.n	810a8ec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810a8c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a8ca:	d81a      	bhi.n	810a902 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810a8cc:	2b00      	cmp	r3, #0
 810a8ce:	d022      	beq.n	810a916 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810a8d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810a8d4:	d115      	bne.n	810a902 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a8d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a8da:	3308      	adds	r3, #8
 810a8dc:	2101      	movs	r1, #1
 810a8de:	4618      	mov	r0, r3
 810a8e0:	f002 f878 	bl	810c9d4 <RCCEx_PLL2_Config>
 810a8e4:	4603      	mov	r3, r0
 810a8e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810a8ea:	e015      	b.n	810a918 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810a8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a8f0:	3328      	adds	r3, #40	@ 0x28
 810a8f2:	2101      	movs	r1, #1
 810a8f4:	4618      	mov	r0, r3
 810a8f6:	f002 f91f 	bl	810cb38 <RCCEx_PLL3_Config>
 810a8fa:	4603      	mov	r3, r0
 810a8fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810a900:	e00a      	b.n	810a918 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810a902:	2301      	movs	r3, #1
 810a904:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a908:	e006      	b.n	810a918 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810a90a:	bf00      	nop
 810a90c:	e004      	b.n	810a918 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810a90e:	bf00      	nop
 810a910:	e002      	b.n	810a918 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810a912:	bf00      	nop
 810a914:	e000      	b.n	810a918 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810a916:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a91c:	2b00      	cmp	r3, #0
 810a91e:	d10b      	bne.n	810a938 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810a920:	4ba4      	ldr	r3, [pc, #656]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810a922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a924:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810a928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a92c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810a930:	4aa0      	ldr	r2, [pc, #640]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810a932:	430b      	orrs	r3, r1
 810a934:	6593      	str	r3, [r2, #88]	@ 0x58
 810a936:	e003      	b.n	810a940 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a938:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a93c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810a940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a948:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 810a94c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 810a950:	2300      	movs	r3, #0
 810a952:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 810a956:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 810a95a:	460b      	mov	r3, r1
 810a95c:	4313      	orrs	r3, r2
 810a95e:	d037      	beq.n	810a9d0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810a960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810a966:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a96a:	d00e      	beq.n	810a98a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 810a96c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a970:	d816      	bhi.n	810a9a0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 810a972:	2b00      	cmp	r3, #0
 810a974:	d018      	beq.n	810a9a8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 810a976:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810a97a:	d111      	bne.n	810a9a0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a97c:	4b8d      	ldr	r3, [pc, #564]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810a97e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a980:	4a8c      	ldr	r2, [pc, #560]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810a982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810a988:	e00f      	b.n	810a9aa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a98a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a98e:	3308      	adds	r3, #8
 810a990:	2101      	movs	r1, #1
 810a992:	4618      	mov	r0, r3
 810a994:	f002 f81e 	bl	810c9d4 <RCCEx_PLL2_Config>
 810a998:	4603      	mov	r3, r0
 810a99a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810a99e:	e004      	b.n	810a9aa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a9a0:	2301      	movs	r3, #1
 810a9a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a9a6:	e000      	b.n	810a9aa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 810a9a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a9aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a9ae:	2b00      	cmp	r3, #0
 810a9b0:	d10a      	bne.n	810a9c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810a9b2:	4b80      	ldr	r3, [pc, #512]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810a9b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a9b6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810a9ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a9be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810a9c0:	4a7c      	ldr	r2, [pc, #496]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810a9c2:	430b      	orrs	r3, r1
 810a9c4:	6513      	str	r3, [r2, #80]	@ 0x50
 810a9c6:	e003      	b.n	810a9d0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a9c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a9cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810a9d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a9d8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 810a9dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810a9e0:	2300      	movs	r3, #0
 810a9e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810a9e6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810a9ea:	460b      	mov	r3, r1
 810a9ec:	4313      	orrs	r3, r2
 810a9ee:	d039      	beq.n	810aa64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 810a9f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a9f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810a9f6:	2b03      	cmp	r3, #3
 810a9f8:	d81c      	bhi.n	810aa34 <HAL_RCCEx_PeriphCLKConfig+0x794>
 810a9fa:	a201      	add	r2, pc, #4	@ (adr r2, 810aa00 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 810a9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810aa00:	0810aa3d 	.word	0x0810aa3d
 810aa04:	0810aa11 	.word	0x0810aa11
 810aa08:	0810aa1f 	.word	0x0810aa1f
 810aa0c:	0810aa3d 	.word	0x0810aa3d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810aa10:	4b68      	ldr	r3, [pc, #416]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aa12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810aa14:	4a67      	ldr	r2, [pc, #412]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aa16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810aa1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 810aa1c:	e00f      	b.n	810aa3e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810aa1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810aa22:	3308      	adds	r3, #8
 810aa24:	2102      	movs	r1, #2
 810aa26:	4618      	mov	r0, r3
 810aa28:	f001 ffd4 	bl	810c9d4 <RCCEx_PLL2_Config>
 810aa2c:	4603      	mov	r3, r0
 810aa2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 810aa32:	e004      	b.n	810aa3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810aa34:	2301      	movs	r3, #1
 810aa36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810aa3a:	e000      	b.n	810aa3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 810aa3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810aa3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810aa42:	2b00      	cmp	r3, #0
 810aa44:	d10a      	bne.n	810aa5c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810aa46:	4b5b      	ldr	r3, [pc, #364]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aa48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810aa4a:	f023 0103 	bic.w	r1, r3, #3
 810aa4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810aa52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810aa54:	4a57      	ldr	r2, [pc, #348]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aa56:	430b      	orrs	r3, r1
 810aa58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810aa5a:	e003      	b.n	810aa64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810aa5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810aa60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810aa64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810aa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aa6c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 810aa70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810aa74:	2300      	movs	r3, #0
 810aa76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 810aa7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 810aa7e:	460b      	mov	r3, r1
 810aa80:	4313      	orrs	r3, r2
 810aa82:	f000 809f 	beq.w	810abc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810aa86:	4b4c      	ldr	r3, [pc, #304]	@ (810abb8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810aa88:	681b      	ldr	r3, [r3, #0]
 810aa8a:	4a4b      	ldr	r2, [pc, #300]	@ (810abb8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810aa8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810aa90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810aa92:	f7fa f941 	bl	8104d18 <HAL_GetTick>
 810aa96:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810aa9a:	e00b      	b.n	810aab4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810aa9c:	f7fa f93c 	bl	8104d18 <HAL_GetTick>
 810aaa0:	4602      	mov	r2, r0
 810aaa2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810aaa6:	1ad3      	subs	r3, r2, r3
 810aaa8:	2b64      	cmp	r3, #100	@ 0x64
 810aaaa:	d903      	bls.n	810aab4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 810aaac:	2303      	movs	r3, #3
 810aaae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810aab2:	e005      	b.n	810aac0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810aab4:	4b40      	ldr	r3, [pc, #256]	@ (810abb8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810aab6:	681b      	ldr	r3, [r3, #0]
 810aab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810aabc:	2b00      	cmp	r3, #0
 810aabe:	d0ed      	beq.n	810aa9c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 810aac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810aac4:	2b00      	cmp	r3, #0
 810aac6:	d179      	bne.n	810abbc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810aac8:	4b3a      	ldr	r3, [pc, #232]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aaca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810aacc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810aad0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810aad4:	4053      	eors	r3, r2
 810aad6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810aada:	2b00      	cmp	r3, #0
 810aadc:	d015      	beq.n	810ab0a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810aade:	4b35      	ldr	r3, [pc, #212]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810aae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810aae6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810aaea:	4b32      	ldr	r3, [pc, #200]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aaec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810aaee:	4a31      	ldr	r2, [pc, #196]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aaf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810aaf4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810aaf6:	4b2f      	ldr	r3, [pc, #188]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aaf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810aafa:	4a2e      	ldr	r2, [pc, #184]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aafc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810ab00:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810ab02:	4a2c      	ldr	r2, [pc, #176]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810ab04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ab08:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810ab0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ab0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810ab12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810ab16:	d118      	bne.n	810ab4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810ab18:	f7fa f8fe 	bl	8104d18 <HAL_GetTick>
 810ab1c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810ab20:	e00d      	b.n	810ab3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810ab22:	f7fa f8f9 	bl	8104d18 <HAL_GetTick>
 810ab26:	4602      	mov	r2, r0
 810ab28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810ab2c:	1ad2      	subs	r2, r2, r3
 810ab2e:	f241 3388 	movw	r3, #5000	@ 0x1388
 810ab32:	429a      	cmp	r2, r3
 810ab34:	d903      	bls.n	810ab3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 810ab36:	2303      	movs	r3, #3
 810ab38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 810ab3c:	e005      	b.n	810ab4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810ab3e:	4b1d      	ldr	r3, [pc, #116]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810ab40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810ab42:	f003 0302 	and.w	r3, r3, #2
 810ab46:	2b00      	cmp	r3, #0
 810ab48:	d0eb      	beq.n	810ab22 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 810ab4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810ab4e:	2b00      	cmp	r3, #0
 810ab50:	d12b      	bne.n	810abaa <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810ab52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ab56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810ab5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810ab5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810ab62:	d110      	bne.n	810ab86 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 810ab64:	4b13      	ldr	r3, [pc, #76]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810ab66:	691b      	ldr	r3, [r3, #16]
 810ab68:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 810ab6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ab70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810ab74:	091b      	lsrs	r3, r3, #4
 810ab76:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 810ab7a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 810ab7e:	4a0d      	ldr	r2, [pc, #52]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810ab80:	430b      	orrs	r3, r1
 810ab82:	6113      	str	r3, [r2, #16]
 810ab84:	e005      	b.n	810ab92 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 810ab86:	4b0b      	ldr	r3, [pc, #44]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810ab88:	691b      	ldr	r3, [r3, #16]
 810ab8a:	4a0a      	ldr	r2, [pc, #40]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810ab8c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 810ab90:	6113      	str	r3, [r2, #16]
 810ab92:	4b08      	ldr	r3, [pc, #32]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810ab94:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810ab96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ab9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810ab9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810aba2:	4a04      	ldr	r2, [pc, #16]	@ (810abb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aba4:	430b      	orrs	r3, r1
 810aba6:	6713      	str	r3, [r2, #112]	@ 0x70
 810aba8:	e00c      	b.n	810abc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810abaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810abae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 810abb2:	e007      	b.n	810abc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 810abb4:	58024400 	.word	0x58024400
 810abb8:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810abbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810abc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810abc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810abc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810abcc:	f002 0301 	and.w	r3, r2, #1
 810abd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810abd4:	2300      	movs	r3, #0
 810abd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810abda:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 810abde:	460b      	mov	r3, r1
 810abe0:	4313      	orrs	r3, r2
 810abe2:	f000 8089 	beq.w	810acf8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810abe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810abea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810abec:	2b28      	cmp	r3, #40	@ 0x28
 810abee:	d86b      	bhi.n	810acc8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 810abf0:	a201      	add	r2, pc, #4	@ (adr r2, 810abf8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 810abf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810abf6:	bf00      	nop
 810abf8:	0810acd1 	.word	0x0810acd1
 810abfc:	0810acc9 	.word	0x0810acc9
 810ac00:	0810acc9 	.word	0x0810acc9
 810ac04:	0810acc9 	.word	0x0810acc9
 810ac08:	0810acc9 	.word	0x0810acc9
 810ac0c:	0810acc9 	.word	0x0810acc9
 810ac10:	0810acc9 	.word	0x0810acc9
 810ac14:	0810acc9 	.word	0x0810acc9
 810ac18:	0810ac9d 	.word	0x0810ac9d
 810ac1c:	0810acc9 	.word	0x0810acc9
 810ac20:	0810acc9 	.word	0x0810acc9
 810ac24:	0810acc9 	.word	0x0810acc9
 810ac28:	0810acc9 	.word	0x0810acc9
 810ac2c:	0810acc9 	.word	0x0810acc9
 810ac30:	0810acc9 	.word	0x0810acc9
 810ac34:	0810acc9 	.word	0x0810acc9
 810ac38:	0810acb3 	.word	0x0810acb3
 810ac3c:	0810acc9 	.word	0x0810acc9
 810ac40:	0810acc9 	.word	0x0810acc9
 810ac44:	0810acc9 	.word	0x0810acc9
 810ac48:	0810acc9 	.word	0x0810acc9
 810ac4c:	0810acc9 	.word	0x0810acc9
 810ac50:	0810acc9 	.word	0x0810acc9
 810ac54:	0810acc9 	.word	0x0810acc9
 810ac58:	0810acd1 	.word	0x0810acd1
 810ac5c:	0810acc9 	.word	0x0810acc9
 810ac60:	0810acc9 	.word	0x0810acc9
 810ac64:	0810acc9 	.word	0x0810acc9
 810ac68:	0810acc9 	.word	0x0810acc9
 810ac6c:	0810acc9 	.word	0x0810acc9
 810ac70:	0810acc9 	.word	0x0810acc9
 810ac74:	0810acc9 	.word	0x0810acc9
 810ac78:	0810acd1 	.word	0x0810acd1
 810ac7c:	0810acc9 	.word	0x0810acc9
 810ac80:	0810acc9 	.word	0x0810acc9
 810ac84:	0810acc9 	.word	0x0810acc9
 810ac88:	0810acc9 	.word	0x0810acc9
 810ac8c:	0810acc9 	.word	0x0810acc9
 810ac90:	0810acc9 	.word	0x0810acc9
 810ac94:	0810acc9 	.word	0x0810acc9
 810ac98:	0810acd1 	.word	0x0810acd1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810ac9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810aca0:	3308      	adds	r3, #8
 810aca2:	2101      	movs	r1, #1
 810aca4:	4618      	mov	r0, r3
 810aca6:	f001 fe95 	bl	810c9d4 <RCCEx_PLL2_Config>
 810acaa:	4603      	mov	r3, r0
 810acac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810acb0:	e00f      	b.n	810acd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810acb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810acb6:	3328      	adds	r3, #40	@ 0x28
 810acb8:	2101      	movs	r1, #1
 810acba:	4618      	mov	r0, r3
 810acbc:	f001 ff3c 	bl	810cb38 <RCCEx_PLL3_Config>
 810acc0:	4603      	mov	r3, r0
 810acc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810acc6:	e004      	b.n	810acd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810acc8:	2301      	movs	r3, #1
 810acca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810acce:	e000      	b.n	810acd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 810acd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 810acd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810acd6:	2b00      	cmp	r3, #0
 810acd8:	d10a      	bne.n	810acf0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810acda:	4bbf      	ldr	r3, [pc, #764]	@ (810afd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810acdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810acde:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 810ace2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ace6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810ace8:	4abb      	ldr	r2, [pc, #748]	@ (810afd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810acea:	430b      	orrs	r3, r1
 810acec:	6553      	str	r3, [r2, #84]	@ 0x54
 810acee:	e003      	b.n	810acf8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810acf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810acf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810acf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810acfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ad00:	f002 0302 	and.w	r3, r2, #2
 810ad04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810ad08:	2300      	movs	r3, #0
 810ad0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 810ad0e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 810ad12:	460b      	mov	r3, r1
 810ad14:	4313      	orrs	r3, r2
 810ad16:	d041      	beq.n	810ad9c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810ad18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ad1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810ad1e:	2b05      	cmp	r3, #5
 810ad20:	d824      	bhi.n	810ad6c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 810ad22:	a201      	add	r2, pc, #4	@ (adr r2, 810ad28 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 810ad24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ad28:	0810ad75 	.word	0x0810ad75
 810ad2c:	0810ad41 	.word	0x0810ad41
 810ad30:	0810ad57 	.word	0x0810ad57
 810ad34:	0810ad75 	.word	0x0810ad75
 810ad38:	0810ad75 	.word	0x0810ad75
 810ad3c:	0810ad75 	.word	0x0810ad75
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810ad40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ad44:	3308      	adds	r3, #8
 810ad46:	2101      	movs	r1, #1
 810ad48:	4618      	mov	r0, r3
 810ad4a:	f001 fe43 	bl	810c9d4 <RCCEx_PLL2_Config>
 810ad4e:	4603      	mov	r3, r0
 810ad50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810ad54:	e00f      	b.n	810ad76 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810ad56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ad5a:	3328      	adds	r3, #40	@ 0x28
 810ad5c:	2101      	movs	r1, #1
 810ad5e:	4618      	mov	r0, r3
 810ad60:	f001 feea 	bl	810cb38 <RCCEx_PLL3_Config>
 810ad64:	4603      	mov	r3, r0
 810ad66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810ad6a:	e004      	b.n	810ad76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810ad6c:	2301      	movs	r3, #1
 810ad6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810ad72:	e000      	b.n	810ad76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 810ad74:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ad76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810ad7a:	2b00      	cmp	r3, #0
 810ad7c:	d10a      	bne.n	810ad94 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810ad7e:	4b96      	ldr	r3, [pc, #600]	@ (810afd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810ad80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ad82:	f023 0107 	bic.w	r1, r3, #7
 810ad86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ad8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810ad8c:	4a92      	ldr	r2, [pc, #584]	@ (810afd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810ad8e:	430b      	orrs	r3, r1
 810ad90:	6553      	str	r3, [r2, #84]	@ 0x54
 810ad92:	e003      	b.n	810ad9c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ad94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810ad98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810ad9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ada0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ada4:	f002 0304 	and.w	r3, r2, #4
 810ada8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810adac:	2300      	movs	r3, #0
 810adae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810adb2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810adb6:	460b      	mov	r3, r1
 810adb8:	4313      	orrs	r3, r2
 810adba:	d044      	beq.n	810ae46 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 810adbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810adc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810adc4:	2b05      	cmp	r3, #5
 810adc6:	d825      	bhi.n	810ae14 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 810adc8:	a201      	add	r2, pc, #4	@ (adr r2, 810add0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 810adca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810adce:	bf00      	nop
 810add0:	0810ae1d 	.word	0x0810ae1d
 810add4:	0810ade9 	.word	0x0810ade9
 810add8:	0810adff 	.word	0x0810adff
 810addc:	0810ae1d 	.word	0x0810ae1d
 810ade0:	0810ae1d 	.word	0x0810ae1d
 810ade4:	0810ae1d 	.word	0x0810ae1d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810ade8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810adec:	3308      	adds	r3, #8
 810adee:	2101      	movs	r1, #1
 810adf0:	4618      	mov	r0, r3
 810adf2:	f001 fdef 	bl	810c9d4 <RCCEx_PLL2_Config>
 810adf6:	4603      	mov	r3, r0
 810adf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810adfc:	e00f      	b.n	810ae1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810adfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ae02:	3328      	adds	r3, #40	@ 0x28
 810ae04:	2101      	movs	r1, #1
 810ae06:	4618      	mov	r0, r3
 810ae08:	f001 fe96 	bl	810cb38 <RCCEx_PLL3_Config>
 810ae0c:	4603      	mov	r3, r0
 810ae0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810ae12:	e004      	b.n	810ae1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810ae14:	2301      	movs	r3, #1
 810ae16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810ae1a:	e000      	b.n	810ae1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 810ae1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ae1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810ae22:	2b00      	cmp	r3, #0
 810ae24:	d10b      	bne.n	810ae3e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810ae26:	4b6c      	ldr	r3, [pc, #432]	@ (810afd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810ae28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810ae2a:	f023 0107 	bic.w	r1, r3, #7
 810ae2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ae32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810ae36:	4a68      	ldr	r2, [pc, #416]	@ (810afd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810ae38:	430b      	orrs	r3, r1
 810ae3a:	6593      	str	r3, [r2, #88]	@ 0x58
 810ae3c:	e003      	b.n	810ae46 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ae3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810ae42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810ae46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ae4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ae4e:	f002 0320 	and.w	r3, r2, #32
 810ae52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810ae56:	2300      	movs	r3, #0
 810ae58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810ae5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 810ae60:	460b      	mov	r3, r1
 810ae62:	4313      	orrs	r3, r2
 810ae64:	d055      	beq.n	810af12 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810ae66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ae6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810ae6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810ae72:	d033      	beq.n	810aedc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 810ae74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810ae78:	d82c      	bhi.n	810aed4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810ae7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810ae7e:	d02f      	beq.n	810aee0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 810ae80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810ae84:	d826      	bhi.n	810aed4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810ae86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810ae8a:	d02b      	beq.n	810aee4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 810ae8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810ae90:	d820      	bhi.n	810aed4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810ae92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ae96:	d012      	beq.n	810aebe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 810ae98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ae9c:	d81a      	bhi.n	810aed4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810ae9e:	2b00      	cmp	r3, #0
 810aea0:	d022      	beq.n	810aee8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 810aea2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810aea6:	d115      	bne.n	810aed4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810aea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810aeac:	3308      	adds	r3, #8
 810aeae:	2100      	movs	r1, #0
 810aeb0:	4618      	mov	r0, r3
 810aeb2:	f001 fd8f 	bl	810c9d4 <RCCEx_PLL2_Config>
 810aeb6:	4603      	mov	r3, r0
 810aeb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810aebc:	e015      	b.n	810aeea <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810aebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810aec2:	3328      	adds	r3, #40	@ 0x28
 810aec4:	2102      	movs	r1, #2
 810aec6:	4618      	mov	r0, r3
 810aec8:	f001 fe36 	bl	810cb38 <RCCEx_PLL3_Config>
 810aecc:	4603      	mov	r3, r0
 810aece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810aed2:	e00a      	b.n	810aeea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810aed4:	2301      	movs	r3, #1
 810aed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810aeda:	e006      	b.n	810aeea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810aedc:	bf00      	nop
 810aede:	e004      	b.n	810aeea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810aee0:	bf00      	nop
 810aee2:	e002      	b.n	810aeea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810aee4:	bf00      	nop
 810aee6:	e000      	b.n	810aeea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810aee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 810aeea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810aeee:	2b00      	cmp	r3, #0
 810aef0:	d10b      	bne.n	810af0a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810aef2:	4b39      	ldr	r3, [pc, #228]	@ (810afd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810aef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810aef6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810aefa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810aefe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810af02:	4a35      	ldr	r2, [pc, #212]	@ (810afd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810af04:	430b      	orrs	r3, r1
 810af06:	6553      	str	r3, [r2, #84]	@ 0x54
 810af08:	e003      	b.n	810af12 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810af0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810af0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810af12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810af16:	e9d3 2300 	ldrd	r2, r3, [r3]
 810af1a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 810af1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 810af22:	2300      	movs	r3, #0
 810af24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 810af28:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 810af2c:	460b      	mov	r3, r1
 810af2e:	4313      	orrs	r3, r2
 810af30:	d058      	beq.n	810afe4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810af32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810af36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810af3a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810af3e:	d033      	beq.n	810afa8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 810af40:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810af44:	d82c      	bhi.n	810afa0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810af46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810af4a:	d02f      	beq.n	810afac <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 810af4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810af50:	d826      	bhi.n	810afa0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810af52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810af56:	d02b      	beq.n	810afb0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 810af58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810af5c:	d820      	bhi.n	810afa0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810af5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810af62:	d012      	beq.n	810af8a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 810af64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810af68:	d81a      	bhi.n	810afa0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810af6a:	2b00      	cmp	r3, #0
 810af6c:	d022      	beq.n	810afb4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 810af6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810af72:	d115      	bne.n	810afa0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810af74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810af78:	3308      	adds	r3, #8
 810af7a:	2100      	movs	r1, #0
 810af7c:	4618      	mov	r0, r3
 810af7e:	f001 fd29 	bl	810c9d4 <RCCEx_PLL2_Config>
 810af82:	4603      	mov	r3, r0
 810af84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810af88:	e015      	b.n	810afb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810af8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810af8e:	3328      	adds	r3, #40	@ 0x28
 810af90:	2102      	movs	r1, #2
 810af92:	4618      	mov	r0, r3
 810af94:	f001 fdd0 	bl	810cb38 <RCCEx_PLL3_Config>
 810af98:	4603      	mov	r3, r0
 810af9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810af9e:	e00a      	b.n	810afb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810afa0:	2301      	movs	r3, #1
 810afa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810afa6:	e006      	b.n	810afb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810afa8:	bf00      	nop
 810afaa:	e004      	b.n	810afb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810afac:	bf00      	nop
 810afae:	e002      	b.n	810afb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810afb0:	bf00      	nop
 810afb2:	e000      	b.n	810afb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810afb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 810afb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810afba:	2b00      	cmp	r3, #0
 810afbc:	d10e      	bne.n	810afdc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810afbe:	4b06      	ldr	r3, [pc, #24]	@ (810afd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810afc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810afc2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810afc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810afca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810afce:	4a02      	ldr	r2, [pc, #8]	@ (810afd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810afd0:	430b      	orrs	r3, r1
 810afd2:	6593      	str	r3, [r2, #88]	@ 0x58
 810afd4:	e006      	b.n	810afe4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 810afd6:	bf00      	nop
 810afd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810afdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810afe0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810afe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810afe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810afec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 810aff0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810aff4:	2300      	movs	r3, #0
 810aff6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810affa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 810affe:	460b      	mov	r3, r1
 810b000:	4313      	orrs	r3, r2
 810b002:	d055      	beq.n	810b0b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 810b004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b008:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810b00c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810b010:	d033      	beq.n	810b07a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 810b012:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810b016:	d82c      	bhi.n	810b072 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810b018:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810b01c:	d02f      	beq.n	810b07e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 810b01e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810b022:	d826      	bhi.n	810b072 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810b024:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810b028:	d02b      	beq.n	810b082 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 810b02a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810b02e:	d820      	bhi.n	810b072 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810b030:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810b034:	d012      	beq.n	810b05c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 810b036:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810b03a:	d81a      	bhi.n	810b072 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810b03c:	2b00      	cmp	r3, #0
 810b03e:	d022      	beq.n	810b086 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 810b040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810b044:	d115      	bne.n	810b072 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b04a:	3308      	adds	r3, #8
 810b04c:	2100      	movs	r1, #0
 810b04e:	4618      	mov	r0, r3
 810b050:	f001 fcc0 	bl	810c9d4 <RCCEx_PLL2_Config>
 810b054:	4603      	mov	r3, r0
 810b056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810b05a:	e015      	b.n	810b088 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810b05c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b060:	3328      	adds	r3, #40	@ 0x28
 810b062:	2102      	movs	r1, #2
 810b064:	4618      	mov	r0, r3
 810b066:	f001 fd67 	bl	810cb38 <RCCEx_PLL3_Config>
 810b06a:	4603      	mov	r3, r0
 810b06c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810b070:	e00a      	b.n	810b088 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b072:	2301      	movs	r3, #1
 810b074:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810b078:	e006      	b.n	810b088 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810b07a:	bf00      	nop
 810b07c:	e004      	b.n	810b088 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810b07e:	bf00      	nop
 810b080:	e002      	b.n	810b088 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810b082:	bf00      	nop
 810b084:	e000      	b.n	810b088 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810b086:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b08c:	2b00      	cmp	r3, #0
 810b08e:	d10b      	bne.n	810b0a8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810b090:	4ba1      	ldr	r3, [pc, #644]	@ (810b318 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b094:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 810b098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b09c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810b0a0:	4a9d      	ldr	r2, [pc, #628]	@ (810b318 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b0a2:	430b      	orrs	r3, r1
 810b0a4:	6593      	str	r3, [r2, #88]	@ 0x58
 810b0a6:	e003      	b.n	810b0b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b0a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b0ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810b0b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b0b8:	f002 0308 	and.w	r3, r2, #8
 810b0bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810b0c0:	2300      	movs	r3, #0
 810b0c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810b0c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 810b0ca:	460b      	mov	r3, r1
 810b0cc:	4313      	orrs	r3, r2
 810b0ce:	d01e      	beq.n	810b10e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810b0d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b0d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810b0d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b0dc:	d10c      	bne.n	810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810b0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b0e2:	3328      	adds	r3, #40	@ 0x28
 810b0e4:	2102      	movs	r1, #2
 810b0e6:	4618      	mov	r0, r3
 810b0e8:	f001 fd26 	bl	810cb38 <RCCEx_PLL3_Config>
 810b0ec:	4603      	mov	r3, r0
 810b0ee:	2b00      	cmp	r3, #0
 810b0f0:	d002      	beq.n	810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 810b0f2:	2301      	movs	r3, #1
 810b0f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810b0f8:	4b87      	ldr	r3, [pc, #540]	@ (810b318 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b0fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b0fc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810b100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b104:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810b108:	4a83      	ldr	r2, [pc, #524]	@ (810b318 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b10a:	430b      	orrs	r3, r1
 810b10c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810b10e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b112:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b116:	f002 0310 	and.w	r3, r2, #16
 810b11a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810b11e:	2300      	movs	r3, #0
 810b120:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810b124:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 810b128:	460b      	mov	r3, r1
 810b12a:	4313      	orrs	r3, r2
 810b12c:	d01e      	beq.n	810b16c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810b12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b132:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810b136:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b13a:	d10c      	bne.n	810b156 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810b13c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b140:	3328      	adds	r3, #40	@ 0x28
 810b142:	2102      	movs	r1, #2
 810b144:	4618      	mov	r0, r3
 810b146:	f001 fcf7 	bl	810cb38 <RCCEx_PLL3_Config>
 810b14a:	4603      	mov	r3, r0
 810b14c:	2b00      	cmp	r3, #0
 810b14e:	d002      	beq.n	810b156 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 810b150:	2301      	movs	r3, #1
 810b152:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810b156:	4b70      	ldr	r3, [pc, #448]	@ (810b318 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b15a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810b15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b162:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810b166:	4a6c      	ldr	r2, [pc, #432]	@ (810b318 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b168:	430b      	orrs	r3, r1
 810b16a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810b16c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b170:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b174:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 810b178:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810b17c:	2300      	movs	r3, #0
 810b17e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810b182:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 810b186:	460b      	mov	r3, r1
 810b188:	4313      	orrs	r3, r2
 810b18a:	d03e      	beq.n	810b20a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810b18c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b190:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810b194:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b198:	d022      	beq.n	810b1e0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 810b19a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b19e:	d81b      	bhi.n	810b1d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 810b1a0:	2b00      	cmp	r3, #0
 810b1a2:	d003      	beq.n	810b1ac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 810b1a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810b1a8:	d00b      	beq.n	810b1c2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 810b1aa:	e015      	b.n	810b1d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b1b0:	3308      	adds	r3, #8
 810b1b2:	2100      	movs	r1, #0
 810b1b4:	4618      	mov	r0, r3
 810b1b6:	f001 fc0d 	bl	810c9d4 <RCCEx_PLL2_Config>
 810b1ba:	4603      	mov	r3, r0
 810b1bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810b1c0:	e00f      	b.n	810b1e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810b1c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b1c6:	3328      	adds	r3, #40	@ 0x28
 810b1c8:	2102      	movs	r1, #2
 810b1ca:	4618      	mov	r0, r3
 810b1cc:	f001 fcb4 	bl	810cb38 <RCCEx_PLL3_Config>
 810b1d0:	4603      	mov	r3, r0
 810b1d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810b1d6:	e004      	b.n	810b1e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b1d8:	2301      	movs	r3, #1
 810b1da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810b1de:	e000      	b.n	810b1e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 810b1e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b1e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b1e6:	2b00      	cmp	r3, #0
 810b1e8:	d10b      	bne.n	810b202 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810b1ea:	4b4b      	ldr	r3, [pc, #300]	@ (810b318 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b1ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b1ee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 810b1f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b1f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810b1fa:	4a47      	ldr	r2, [pc, #284]	@ (810b318 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b1fc:	430b      	orrs	r3, r1
 810b1fe:	6593      	str	r3, [r2, #88]	@ 0x58
 810b200:	e003      	b.n	810b20a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b206:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810b20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b212:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 810b216:	67bb      	str	r3, [r7, #120]	@ 0x78
 810b218:	2300      	movs	r3, #0
 810b21a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810b21c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 810b220:	460b      	mov	r3, r1
 810b222:	4313      	orrs	r3, r2
 810b224:	d03b      	beq.n	810b29e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810b226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b22a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810b22e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810b232:	d01f      	beq.n	810b274 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 810b234:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810b238:	d818      	bhi.n	810b26c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 810b23a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810b23e:	d003      	beq.n	810b248 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 810b240:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810b244:	d007      	beq.n	810b256 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810b246:	e011      	b.n	810b26c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810b248:	4b33      	ldr	r3, [pc, #204]	@ (810b318 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b24a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b24c:	4a32      	ldr	r2, [pc, #200]	@ (810b318 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b24e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810b252:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 810b254:	e00f      	b.n	810b276 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810b256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b25a:	3328      	adds	r3, #40	@ 0x28
 810b25c:	2101      	movs	r1, #1
 810b25e:	4618      	mov	r0, r3
 810b260:	f001 fc6a 	bl	810cb38 <RCCEx_PLL3_Config>
 810b264:	4603      	mov	r3, r0
 810b266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810b26a:	e004      	b.n	810b276 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b26c:	2301      	movs	r3, #1
 810b26e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810b272:	e000      	b.n	810b276 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 810b274:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b27a:	2b00      	cmp	r3, #0
 810b27c:	d10b      	bne.n	810b296 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810b27e:	4b26      	ldr	r3, [pc, #152]	@ (810b318 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b282:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810b286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b28a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810b28e:	4a22      	ldr	r2, [pc, #136]	@ (810b318 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b290:	430b      	orrs	r3, r1
 810b292:	6553      	str	r3, [r2, #84]	@ 0x54
 810b294:	e003      	b.n	810b29e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b29a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810b29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b2a6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810b2aa:	673b      	str	r3, [r7, #112]	@ 0x70
 810b2ac:	2300      	movs	r3, #0
 810b2ae:	677b      	str	r3, [r7, #116]	@ 0x74
 810b2b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 810b2b4:	460b      	mov	r3, r1
 810b2b6:	4313      	orrs	r3, r2
 810b2b8:	d034      	beq.n	810b324 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810b2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b2be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b2c0:	2b00      	cmp	r3, #0
 810b2c2:	d003      	beq.n	810b2cc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 810b2c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810b2c8:	d007      	beq.n	810b2da <HAL_RCCEx_PeriphCLKConfig+0x103a>
 810b2ca:	e011      	b.n	810b2f0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810b2cc:	4b12      	ldr	r3, [pc, #72]	@ (810b318 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b2d0:	4a11      	ldr	r2, [pc, #68]	@ (810b318 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b2d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810b2d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810b2d8:	e00e      	b.n	810b2f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810b2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b2de:	3308      	adds	r3, #8
 810b2e0:	2102      	movs	r1, #2
 810b2e2:	4618      	mov	r0, r3
 810b2e4:	f001 fb76 	bl	810c9d4 <RCCEx_PLL2_Config>
 810b2e8:	4603      	mov	r3, r0
 810b2ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810b2ee:	e003      	b.n	810b2f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 810b2f0:	2301      	movs	r3, #1
 810b2f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810b2f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b2f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b2fc:	2b00      	cmp	r3, #0
 810b2fe:	d10d      	bne.n	810b31c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810b300:	4b05      	ldr	r3, [pc, #20]	@ (810b318 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810b304:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810b308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b30c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b30e:	4a02      	ldr	r2, [pc, #8]	@ (810b318 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b310:	430b      	orrs	r3, r1
 810b312:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810b314:	e006      	b.n	810b324 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 810b316:	bf00      	nop
 810b318:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b31c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b320:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810b324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b328:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b32c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 810b330:	66bb      	str	r3, [r7, #104]	@ 0x68
 810b332:	2300      	movs	r3, #0
 810b334:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810b336:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810b33a:	460b      	mov	r3, r1
 810b33c:	4313      	orrs	r3, r2
 810b33e:	d00c      	beq.n	810b35a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810b340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b344:	3328      	adds	r3, #40	@ 0x28
 810b346:	2102      	movs	r1, #2
 810b348:	4618      	mov	r0, r3
 810b34a:	f001 fbf5 	bl	810cb38 <RCCEx_PLL3_Config>
 810b34e:	4603      	mov	r3, r0
 810b350:	2b00      	cmp	r3, #0
 810b352:	d002      	beq.n	810b35a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 810b354:	2301      	movs	r3, #1
 810b356:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810b35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b362:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810b366:	663b      	str	r3, [r7, #96]	@ 0x60
 810b368:	2300      	movs	r3, #0
 810b36a:	667b      	str	r3, [r7, #100]	@ 0x64
 810b36c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 810b370:	460b      	mov	r3, r1
 810b372:	4313      	orrs	r3, r2
 810b374:	d038      	beq.n	810b3e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 810b376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b37a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810b37e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810b382:	d018      	beq.n	810b3b6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 810b384:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810b388:	d811      	bhi.n	810b3ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810b38a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810b38e:	d014      	beq.n	810b3ba <HAL_RCCEx_PeriphCLKConfig+0x111a>
 810b390:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810b394:	d80b      	bhi.n	810b3ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810b396:	2b00      	cmp	r3, #0
 810b398:	d011      	beq.n	810b3be <HAL_RCCEx_PeriphCLKConfig+0x111e>
 810b39a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b39e:	d106      	bne.n	810b3ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810b3a0:	4bc3      	ldr	r3, [pc, #780]	@ (810b6b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b3a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b3a4:	4ac2      	ldr	r2, [pc, #776]	@ (810b6b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b3a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810b3aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 810b3ac:	e008      	b.n	810b3c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b3ae:	2301      	movs	r3, #1
 810b3b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810b3b4:	e004      	b.n	810b3c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810b3b6:	bf00      	nop
 810b3b8:	e002      	b.n	810b3c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810b3ba:	bf00      	nop
 810b3bc:	e000      	b.n	810b3c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810b3be:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b3c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b3c4:	2b00      	cmp	r3, #0
 810b3c6:	d10b      	bne.n	810b3e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810b3c8:	4bb9      	ldr	r3, [pc, #740]	@ (810b6b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b3ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b3cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810b3d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b3d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810b3d8:	4ab5      	ldr	r2, [pc, #724]	@ (810b6b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b3da:	430b      	orrs	r3, r1
 810b3dc:	6553      	str	r3, [r2, #84]	@ 0x54
 810b3de:	e003      	b.n	810b3e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b3e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b3e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810b3e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b3f0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 810b3f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 810b3f6:	2300      	movs	r3, #0
 810b3f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810b3fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 810b3fe:	460b      	mov	r3, r1
 810b400:	4313      	orrs	r3, r2
 810b402:	d009      	beq.n	810b418 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810b404:	4baa      	ldr	r3, [pc, #680]	@ (810b6b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b408:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810b40c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810b412:	4aa7      	ldr	r2, [pc, #668]	@ (810b6b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b414:	430b      	orrs	r3, r1
 810b416:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810b418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b420:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 810b424:	653b      	str	r3, [r7, #80]	@ 0x50
 810b426:	2300      	movs	r3, #0
 810b428:	657b      	str	r3, [r7, #84]	@ 0x54
 810b42a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810b42e:	460b      	mov	r3, r1
 810b430:	4313      	orrs	r3, r2
 810b432:	d00a      	beq.n	810b44a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810b434:	4b9e      	ldr	r3, [pc, #632]	@ (810b6b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b436:	691b      	ldr	r3, [r3, #16]
 810b438:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 810b43c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b440:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810b444:	4a9a      	ldr	r2, [pc, #616]	@ (810b6b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b446:	430b      	orrs	r3, r1
 810b448:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810b44a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b452:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810b456:	64bb      	str	r3, [r7, #72]	@ 0x48
 810b458:	2300      	movs	r3, #0
 810b45a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810b45c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 810b460:	460b      	mov	r3, r1
 810b462:	4313      	orrs	r3, r2
 810b464:	d009      	beq.n	810b47a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810b466:	4b92      	ldr	r3, [pc, #584]	@ (810b6b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b46a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810b46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b474:	4a8e      	ldr	r2, [pc, #568]	@ (810b6b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b476:	430b      	orrs	r3, r1
 810b478:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810b47a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b482:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810b486:	643b      	str	r3, [r7, #64]	@ 0x40
 810b488:	2300      	movs	r3, #0
 810b48a:	647b      	str	r3, [r7, #68]	@ 0x44
 810b48c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 810b490:	460b      	mov	r3, r1
 810b492:	4313      	orrs	r3, r2
 810b494:	d00e      	beq.n	810b4b4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810b496:	4b86      	ldr	r3, [pc, #536]	@ (810b6b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b498:	691b      	ldr	r3, [r3, #16]
 810b49a:	4a85      	ldr	r2, [pc, #532]	@ (810b6b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b49c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 810b4a0:	6113      	str	r3, [r2, #16]
 810b4a2:	4b83      	ldr	r3, [pc, #524]	@ (810b6b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b4a4:	6919      	ldr	r1, [r3, #16]
 810b4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b4aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810b4ae:	4a80      	ldr	r2, [pc, #512]	@ (810b6b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b4b0:	430b      	orrs	r3, r1
 810b4b2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810b4b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b4bc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 810b4c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 810b4c2:	2300      	movs	r3, #0
 810b4c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b4c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 810b4ca:	460b      	mov	r3, r1
 810b4cc:	4313      	orrs	r3, r2
 810b4ce:	d009      	beq.n	810b4e4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810b4d0:	4b77      	ldr	r3, [pc, #476]	@ (810b6b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b4d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810b4d4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810b4d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b4dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b4de:	4a74      	ldr	r2, [pc, #464]	@ (810b6b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b4e0:	430b      	orrs	r3, r1
 810b4e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810b4e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b4ec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 810b4f0:	633b      	str	r3, [r7, #48]	@ 0x30
 810b4f2:	2300      	movs	r3, #0
 810b4f4:	637b      	str	r3, [r7, #52]	@ 0x34
 810b4f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 810b4fa:	460b      	mov	r3, r1
 810b4fc:	4313      	orrs	r3, r2
 810b4fe:	d00a      	beq.n	810b516 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810b500:	4b6b      	ldr	r3, [pc, #428]	@ (810b6b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b504:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 810b508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b50c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b510:	4a67      	ldr	r2, [pc, #412]	@ (810b6b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b512:	430b      	orrs	r3, r1
 810b514:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810b516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b51e:	2100      	movs	r1, #0
 810b520:	62b9      	str	r1, [r7, #40]	@ 0x28
 810b522:	f003 0301 	and.w	r3, r3, #1
 810b526:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810b528:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 810b52c:	460b      	mov	r3, r1
 810b52e:	4313      	orrs	r3, r2
 810b530:	d011      	beq.n	810b556 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b536:	3308      	adds	r3, #8
 810b538:	2100      	movs	r1, #0
 810b53a:	4618      	mov	r0, r3
 810b53c:	f001 fa4a 	bl	810c9d4 <RCCEx_PLL2_Config>
 810b540:	4603      	mov	r3, r0
 810b542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810b546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b54a:	2b00      	cmp	r3, #0
 810b54c:	d003      	beq.n	810b556 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b54e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b552:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810b556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b55e:	2100      	movs	r1, #0
 810b560:	6239      	str	r1, [r7, #32]
 810b562:	f003 0302 	and.w	r3, r3, #2
 810b566:	627b      	str	r3, [r7, #36]	@ 0x24
 810b568:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 810b56c:	460b      	mov	r3, r1
 810b56e:	4313      	orrs	r3, r2
 810b570:	d011      	beq.n	810b596 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810b572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b576:	3308      	adds	r3, #8
 810b578:	2101      	movs	r1, #1
 810b57a:	4618      	mov	r0, r3
 810b57c:	f001 fa2a 	bl	810c9d4 <RCCEx_PLL2_Config>
 810b580:	4603      	mov	r3, r0
 810b582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810b586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b58a:	2b00      	cmp	r3, #0
 810b58c:	d003      	beq.n	810b596 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b58e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b592:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810b596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b59e:	2100      	movs	r1, #0
 810b5a0:	61b9      	str	r1, [r7, #24]
 810b5a2:	f003 0304 	and.w	r3, r3, #4
 810b5a6:	61fb      	str	r3, [r7, #28]
 810b5a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810b5ac:	460b      	mov	r3, r1
 810b5ae:	4313      	orrs	r3, r2
 810b5b0:	d011      	beq.n	810b5d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810b5b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b5b6:	3308      	adds	r3, #8
 810b5b8:	2102      	movs	r1, #2
 810b5ba:	4618      	mov	r0, r3
 810b5bc:	f001 fa0a 	bl	810c9d4 <RCCEx_PLL2_Config>
 810b5c0:	4603      	mov	r3, r0
 810b5c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810b5c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b5ca:	2b00      	cmp	r3, #0
 810b5cc:	d003      	beq.n	810b5d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b5ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b5d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810b5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b5de:	2100      	movs	r1, #0
 810b5e0:	6139      	str	r1, [r7, #16]
 810b5e2:	f003 0308 	and.w	r3, r3, #8
 810b5e6:	617b      	str	r3, [r7, #20]
 810b5e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810b5ec:	460b      	mov	r3, r1
 810b5ee:	4313      	orrs	r3, r2
 810b5f0:	d011      	beq.n	810b616 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810b5f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b5f6:	3328      	adds	r3, #40	@ 0x28
 810b5f8:	2100      	movs	r1, #0
 810b5fa:	4618      	mov	r0, r3
 810b5fc:	f001 fa9c 	bl	810cb38 <RCCEx_PLL3_Config>
 810b600:	4603      	mov	r3, r0
 810b602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 810b606:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b60a:	2b00      	cmp	r3, #0
 810b60c:	d003      	beq.n	810b616 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b60e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b612:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810b616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b61e:	2100      	movs	r1, #0
 810b620:	60b9      	str	r1, [r7, #8]
 810b622:	f003 0310 	and.w	r3, r3, #16
 810b626:	60fb      	str	r3, [r7, #12]
 810b628:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 810b62c:	460b      	mov	r3, r1
 810b62e:	4313      	orrs	r3, r2
 810b630:	d011      	beq.n	810b656 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810b632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b636:	3328      	adds	r3, #40	@ 0x28
 810b638:	2101      	movs	r1, #1
 810b63a:	4618      	mov	r0, r3
 810b63c:	f001 fa7c 	bl	810cb38 <RCCEx_PLL3_Config>
 810b640:	4603      	mov	r3, r0
 810b642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810b646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b64a:	2b00      	cmp	r3, #0
 810b64c:	d003      	beq.n	810b656 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b64e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b652:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810b656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b65e:	2100      	movs	r1, #0
 810b660:	6039      	str	r1, [r7, #0]
 810b662:	f003 0320 	and.w	r3, r3, #32
 810b666:	607b      	str	r3, [r7, #4]
 810b668:	e9d7 1200 	ldrd	r1, r2, [r7]
 810b66c:	460b      	mov	r3, r1
 810b66e:	4313      	orrs	r3, r2
 810b670:	d011      	beq.n	810b696 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810b672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b676:	3328      	adds	r3, #40	@ 0x28
 810b678:	2102      	movs	r1, #2
 810b67a:	4618      	mov	r0, r3
 810b67c:	f001 fa5c 	bl	810cb38 <RCCEx_PLL3_Config>
 810b680:	4603      	mov	r3, r0
 810b682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810b686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b68a:	2b00      	cmp	r3, #0
 810b68c:	d003      	beq.n	810b696 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b68e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 810b696:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 810b69a:	2b00      	cmp	r3, #0
 810b69c:	d101      	bne.n	810b6a2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 810b69e:	2300      	movs	r3, #0
 810b6a0:	e000      	b.n	810b6a4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 810b6a2:	2301      	movs	r3, #1
}
 810b6a4:	4618      	mov	r0, r3
 810b6a6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 810b6aa:	46bd      	mov	sp, r7
 810b6ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810b6b0:	58024400 	.word	0x58024400

0810b6b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 810b6b4:	b580      	push	{r7, lr}
 810b6b6:	b090      	sub	sp, #64	@ 0x40
 810b6b8:	af00      	add	r7, sp, #0
 810b6ba:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810b6be:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b6c2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 810b6c6:	430b      	orrs	r3, r1
 810b6c8:	f040 8094 	bne.w	810b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 810b6cc:	4b9e      	ldr	r3, [pc, #632]	@ (810b948 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b6ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b6d0:	f003 0307 	and.w	r3, r3, #7
 810b6d4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810b6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b6d8:	2b04      	cmp	r3, #4
 810b6da:	f200 8087 	bhi.w	810b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 810b6de:	a201      	add	r2, pc, #4	@ (adr r2, 810b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 810b6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b6e4:	0810b6f9 	.word	0x0810b6f9
 810b6e8:	0810b721 	.word	0x0810b721
 810b6ec:	0810b749 	.word	0x0810b749
 810b6f0:	0810b7e5 	.word	0x0810b7e5
 810b6f4:	0810b771 	.word	0x0810b771
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b6f8:	4b93      	ldr	r3, [pc, #588]	@ (810b948 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b6fa:	681b      	ldr	r3, [r3, #0]
 810b6fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810b700:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810b704:	d108      	bne.n	810b718 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b70a:	4618      	mov	r0, r3
 810b70c:	f001 f810 	bl	810c730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b714:	f000 bd45 	b.w	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b718:	2300      	movs	r3, #0
 810b71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b71c:	f000 bd41 	b.w	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b720:	4b89      	ldr	r3, [pc, #548]	@ (810b948 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b722:	681b      	ldr	r3, [r3, #0]
 810b724:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810b728:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810b72c:	d108      	bne.n	810b740 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b72e:	f107 0318 	add.w	r3, r7, #24
 810b732:	4618      	mov	r0, r3
 810b734:	f000 fd54 	bl	810c1e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b738:	69bb      	ldr	r3, [r7, #24]
 810b73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b73c:	f000 bd31 	b.w	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b740:	2300      	movs	r3, #0
 810b742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b744:	f000 bd2d 	b.w	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b748:	4b7f      	ldr	r3, [pc, #508]	@ (810b948 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b74a:	681b      	ldr	r3, [r3, #0]
 810b74c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810b750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b754:	d108      	bne.n	810b768 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b756:	f107 030c 	add.w	r3, r7, #12
 810b75a:	4618      	mov	r0, r3
 810b75c:	f000 fe94 	bl	810c488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810b760:	68fb      	ldr	r3, [r7, #12]
 810b762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b764:	f000 bd1d 	b.w	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b768:	2300      	movs	r3, #0
 810b76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b76c:	f000 bd19 	b.w	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810b770:	4b75      	ldr	r3, [pc, #468]	@ (810b948 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810b774:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810b778:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b77a:	4b73      	ldr	r3, [pc, #460]	@ (810b948 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b77c:	681b      	ldr	r3, [r3, #0]
 810b77e:	f003 0304 	and.w	r3, r3, #4
 810b782:	2b04      	cmp	r3, #4
 810b784:	d10c      	bne.n	810b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 810b786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b788:	2b00      	cmp	r3, #0
 810b78a:	d109      	bne.n	810b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810b78c:	4b6e      	ldr	r3, [pc, #440]	@ (810b948 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b78e:	681b      	ldr	r3, [r3, #0]
 810b790:	08db      	lsrs	r3, r3, #3
 810b792:	f003 0303 	and.w	r3, r3, #3
 810b796:	4a6d      	ldr	r2, [pc, #436]	@ (810b94c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810b798:	fa22 f303 	lsr.w	r3, r2, r3
 810b79c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b79e:	e01f      	b.n	810b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b7a0:	4b69      	ldr	r3, [pc, #420]	@ (810b948 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b7a2:	681b      	ldr	r3, [r3, #0]
 810b7a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b7a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b7ac:	d106      	bne.n	810b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 810b7ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b7b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810b7b4:	d102      	bne.n	810b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810b7b6:	4b66      	ldr	r3, [pc, #408]	@ (810b950 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810b7b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b7ba:	e011      	b.n	810b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b7bc:	4b62      	ldr	r3, [pc, #392]	@ (810b948 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b7be:	681b      	ldr	r3, [r3, #0]
 810b7c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810b7c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b7c8:	d106      	bne.n	810b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 810b7ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b7cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b7d0:	d102      	bne.n	810b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810b7d2:	4b60      	ldr	r3, [pc, #384]	@ (810b954 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810b7d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b7d6:	e003      	b.n	810b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810b7d8:	2300      	movs	r3, #0
 810b7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810b7dc:	f000 bce1 	b.w	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810b7e0:	f000 bcdf 	b.w	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810b7e4:	4b5c      	ldr	r3, [pc, #368]	@ (810b958 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810b7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b7e8:	f000 bcdb 	b.w	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810b7ec:	2300      	movs	r3, #0
 810b7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b7f0:	f000 bcd7 	b.w	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 810b7f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b7f8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 810b7fc:	430b      	orrs	r3, r1
 810b7fe:	f040 80ad 	bne.w	810b95c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 810b802:	4b51      	ldr	r3, [pc, #324]	@ (810b948 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b806:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 810b80a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810b80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b80e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b812:	d056      	beq.n	810b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 810b814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b81a:	f200 8090 	bhi.w	810b93e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810b81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b820:	2bc0      	cmp	r3, #192	@ 0xc0
 810b822:	f000 8088 	beq.w	810b936 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 810b826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b828:	2bc0      	cmp	r3, #192	@ 0xc0
 810b82a:	f200 8088 	bhi.w	810b93e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810b82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b830:	2b80      	cmp	r3, #128	@ 0x80
 810b832:	d032      	beq.n	810b89a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 810b834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b836:	2b80      	cmp	r3, #128	@ 0x80
 810b838:	f200 8081 	bhi.w	810b93e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810b83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b83e:	2b00      	cmp	r3, #0
 810b840:	d003      	beq.n	810b84a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 810b842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b844:	2b40      	cmp	r3, #64	@ 0x40
 810b846:	d014      	beq.n	810b872 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 810b848:	e079      	b.n	810b93e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b84a:	4b3f      	ldr	r3, [pc, #252]	@ (810b948 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b84c:	681b      	ldr	r3, [r3, #0]
 810b84e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810b852:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810b856:	d108      	bne.n	810b86a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b85c:	4618      	mov	r0, r3
 810b85e:	f000 ff67 	bl	810c730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b866:	f000 bc9c 	b.w	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b86a:	2300      	movs	r3, #0
 810b86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b86e:	f000 bc98 	b.w	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b872:	4b35      	ldr	r3, [pc, #212]	@ (810b948 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b874:	681b      	ldr	r3, [r3, #0]
 810b876:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810b87a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810b87e:	d108      	bne.n	810b892 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b880:	f107 0318 	add.w	r3, r7, #24
 810b884:	4618      	mov	r0, r3
 810b886:	f000 fcab 	bl	810c1e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b88a:	69bb      	ldr	r3, [r7, #24]
 810b88c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b88e:	f000 bc88 	b.w	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b892:	2300      	movs	r3, #0
 810b894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b896:	f000 bc84 	b.w	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b89a:	4b2b      	ldr	r3, [pc, #172]	@ (810b948 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b89c:	681b      	ldr	r3, [r3, #0]
 810b89e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810b8a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b8a6:	d108      	bne.n	810b8ba <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b8a8:	f107 030c 	add.w	r3, r7, #12
 810b8ac:	4618      	mov	r0, r3
 810b8ae:	f000 fdeb 	bl	810c488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810b8b2:	68fb      	ldr	r3, [r7, #12]
 810b8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b8b6:	f000 bc74 	b.w	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b8ba:	2300      	movs	r3, #0
 810b8bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b8be:	f000 bc70 	b.w	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810b8c2:	4b21      	ldr	r3, [pc, #132]	@ (810b948 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b8c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810b8c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810b8ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b8cc:	4b1e      	ldr	r3, [pc, #120]	@ (810b948 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b8ce:	681b      	ldr	r3, [r3, #0]
 810b8d0:	f003 0304 	and.w	r3, r3, #4
 810b8d4:	2b04      	cmp	r3, #4
 810b8d6:	d10c      	bne.n	810b8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 810b8d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b8da:	2b00      	cmp	r3, #0
 810b8dc:	d109      	bne.n	810b8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810b8de:	4b1a      	ldr	r3, [pc, #104]	@ (810b948 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b8e0:	681b      	ldr	r3, [r3, #0]
 810b8e2:	08db      	lsrs	r3, r3, #3
 810b8e4:	f003 0303 	and.w	r3, r3, #3
 810b8e8:	4a18      	ldr	r2, [pc, #96]	@ (810b94c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810b8ea:	fa22 f303 	lsr.w	r3, r2, r3
 810b8ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b8f0:	e01f      	b.n	810b932 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b8f2:	4b15      	ldr	r3, [pc, #84]	@ (810b948 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b8f4:	681b      	ldr	r3, [r3, #0]
 810b8f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b8fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b8fe:	d106      	bne.n	810b90e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 810b900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b902:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810b906:	d102      	bne.n	810b90e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810b908:	4b11      	ldr	r3, [pc, #68]	@ (810b950 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810b90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b90c:	e011      	b.n	810b932 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b90e:	4b0e      	ldr	r3, [pc, #56]	@ (810b948 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b910:	681b      	ldr	r3, [r3, #0]
 810b912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810b916:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b91a:	d106      	bne.n	810b92a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 810b91c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b91e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b922:	d102      	bne.n	810b92a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810b924:	4b0b      	ldr	r3, [pc, #44]	@ (810b954 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810b926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b928:	e003      	b.n	810b932 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810b92a:	2300      	movs	r3, #0
 810b92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810b92e:	f000 bc38 	b.w	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810b932:	f000 bc36 	b.w	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810b936:	4b08      	ldr	r3, [pc, #32]	@ (810b958 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810b938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b93a:	f000 bc32 	b.w	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810b93e:	2300      	movs	r3, #0
 810b940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b942:	f000 bc2e 	b.w	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810b946:	bf00      	nop
 810b948:	58024400 	.word	0x58024400
 810b94c:	03d09000 	.word	0x03d09000
 810b950:	003d0900 	.word	0x003d0900
 810b954:	007a1200 	.word	0x007a1200
 810b958:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 810b95c:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b960:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 810b964:	430b      	orrs	r3, r1
 810b966:	f040 809c 	bne.w	810baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 810b96a:	4b9e      	ldr	r3, [pc, #632]	@ (810bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b96c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b96e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 810b972:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810b974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b976:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810b97a:	d054      	beq.n	810ba26 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 810b97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b97e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810b982:	f200 808b 	bhi.w	810ba9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810b986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b988:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810b98c:	f000 8083 	beq.w	810ba96 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 810b990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b992:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810b996:	f200 8081 	bhi.w	810ba9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810b99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b99c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810b9a0:	d02f      	beq.n	810ba02 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 810b9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b9a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810b9a8:	d878      	bhi.n	810ba9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810b9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b9ac:	2b00      	cmp	r3, #0
 810b9ae:	d004      	beq.n	810b9ba <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 810b9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b9b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810b9b6:	d012      	beq.n	810b9de <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 810b9b8:	e070      	b.n	810ba9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b9ba:	4b8a      	ldr	r3, [pc, #552]	@ (810bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b9bc:	681b      	ldr	r3, [r3, #0]
 810b9be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810b9c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810b9c6:	d107      	bne.n	810b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b9c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b9cc:	4618      	mov	r0, r3
 810b9ce:	f000 feaf 	bl	810c730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b9d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b9d6:	e3e4      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b9d8:	2300      	movs	r3, #0
 810b9da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b9dc:	e3e1      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b9de:	4b81      	ldr	r3, [pc, #516]	@ (810bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b9e0:	681b      	ldr	r3, [r3, #0]
 810b9e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810b9e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810b9ea:	d107      	bne.n	810b9fc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b9ec:	f107 0318 	add.w	r3, r7, #24
 810b9f0:	4618      	mov	r0, r3
 810b9f2:	f000 fbf5 	bl	810c1e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b9f6:	69bb      	ldr	r3, [r7, #24]
 810b9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b9fa:	e3d2      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b9fc:	2300      	movs	r3, #0
 810b9fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ba00:	e3cf      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810ba02:	4b78      	ldr	r3, [pc, #480]	@ (810bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ba04:	681b      	ldr	r3, [r3, #0]
 810ba06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810ba0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ba0e:	d107      	bne.n	810ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810ba10:	f107 030c 	add.w	r3, r7, #12
 810ba14:	4618      	mov	r0, r3
 810ba16:	f000 fd37 	bl	810c488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810ba1a:	68fb      	ldr	r3, [r7, #12]
 810ba1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810ba1e:	e3c0      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810ba20:	2300      	movs	r3, #0
 810ba22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ba24:	e3bd      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810ba26:	4b6f      	ldr	r3, [pc, #444]	@ (810bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ba28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810ba2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810ba2e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810ba30:	4b6c      	ldr	r3, [pc, #432]	@ (810bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ba32:	681b      	ldr	r3, [r3, #0]
 810ba34:	f003 0304 	and.w	r3, r3, #4
 810ba38:	2b04      	cmp	r3, #4
 810ba3a:	d10c      	bne.n	810ba56 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 810ba3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ba3e:	2b00      	cmp	r3, #0
 810ba40:	d109      	bne.n	810ba56 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810ba42:	4b68      	ldr	r3, [pc, #416]	@ (810bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ba44:	681b      	ldr	r3, [r3, #0]
 810ba46:	08db      	lsrs	r3, r3, #3
 810ba48:	f003 0303 	and.w	r3, r3, #3
 810ba4c:	4a66      	ldr	r2, [pc, #408]	@ (810bbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810ba4e:	fa22 f303 	lsr.w	r3, r2, r3
 810ba52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810ba54:	e01e      	b.n	810ba94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810ba56:	4b63      	ldr	r3, [pc, #396]	@ (810bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ba58:	681b      	ldr	r3, [r3, #0]
 810ba5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810ba5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810ba62:	d106      	bne.n	810ba72 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 810ba64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ba66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810ba6a:	d102      	bne.n	810ba72 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810ba6c:	4b5f      	ldr	r3, [pc, #380]	@ (810bbec <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810ba6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810ba70:	e010      	b.n	810ba94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810ba72:	4b5c      	ldr	r3, [pc, #368]	@ (810bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ba74:	681b      	ldr	r3, [r3, #0]
 810ba76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810ba7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810ba7e:	d106      	bne.n	810ba8e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 810ba80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ba82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ba86:	d102      	bne.n	810ba8e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810ba88:	4b59      	ldr	r3, [pc, #356]	@ (810bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810ba8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810ba8c:	e002      	b.n	810ba94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810ba8e:	2300      	movs	r3, #0
 810ba90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810ba92:	e386      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810ba94:	e385      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810ba96:	4b57      	ldr	r3, [pc, #348]	@ (810bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 810ba98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ba9a:	e382      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810ba9c:	2300      	movs	r3, #0
 810ba9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810baa0:	e37f      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 810baa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 810baa6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 810baaa:	430b      	orrs	r3, r1
 810baac:	f040 80a7 	bne.w	810bbfe <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 810bab0:	4b4c      	ldr	r3, [pc, #304]	@ (810bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810bab4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 810bab8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810baba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810babc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810bac0:	d055      	beq.n	810bb6e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 810bac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bac4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810bac8:	f200 8096 	bhi.w	810bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810bacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bace:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810bad2:	f000 8084 	beq.w	810bbde <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 810bad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bad8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810badc:	f200 808c 	bhi.w	810bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810bae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bae2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810bae6:	d030      	beq.n	810bb4a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 810bae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810baea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810baee:	f200 8083 	bhi.w	810bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810baf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810baf4:	2b00      	cmp	r3, #0
 810baf6:	d004      	beq.n	810bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 810baf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bafa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810bafe:	d012      	beq.n	810bb26 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 810bb00:	e07a      	b.n	810bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810bb02:	4b38      	ldr	r3, [pc, #224]	@ (810bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bb04:	681b      	ldr	r3, [r3, #0]
 810bb06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810bb0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810bb0e:	d107      	bne.n	810bb20 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810bb10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810bb14:	4618      	mov	r0, r3
 810bb16:	f000 fe0b 	bl	810c730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810bb1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bb1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bb1e:	e340      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bb20:	2300      	movs	r3, #0
 810bb22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bb24:	e33d      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810bb26:	4b2f      	ldr	r3, [pc, #188]	@ (810bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bb28:	681b      	ldr	r3, [r3, #0]
 810bb2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810bb2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810bb32:	d107      	bne.n	810bb44 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bb34:	f107 0318 	add.w	r3, r7, #24
 810bb38:	4618      	mov	r0, r3
 810bb3a:	f000 fb51 	bl	810c1e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810bb3e:	69bb      	ldr	r3, [r7, #24]
 810bb40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bb42:	e32e      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bb44:	2300      	movs	r3, #0
 810bb46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bb48:	e32b      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810bb4a:	4b26      	ldr	r3, [pc, #152]	@ (810bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bb4c:	681b      	ldr	r3, [r3, #0]
 810bb4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810bb52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bb56:	d107      	bne.n	810bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bb58:	f107 030c 	add.w	r3, r7, #12
 810bb5c:	4618      	mov	r0, r3
 810bb5e:	f000 fc93 	bl	810c488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810bb62:	68fb      	ldr	r3, [r7, #12]
 810bb64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bb66:	e31c      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bb68:	2300      	movs	r3, #0
 810bb6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bb6c:	e319      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810bb6e:	4b1d      	ldr	r3, [pc, #116]	@ (810bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bb70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810bb72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810bb76:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810bb78:	4b1a      	ldr	r3, [pc, #104]	@ (810bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bb7a:	681b      	ldr	r3, [r3, #0]
 810bb7c:	f003 0304 	and.w	r3, r3, #4
 810bb80:	2b04      	cmp	r3, #4
 810bb82:	d10c      	bne.n	810bb9e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 810bb84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bb86:	2b00      	cmp	r3, #0
 810bb88:	d109      	bne.n	810bb9e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810bb8a:	4b16      	ldr	r3, [pc, #88]	@ (810bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bb8c:	681b      	ldr	r3, [r3, #0]
 810bb8e:	08db      	lsrs	r3, r3, #3
 810bb90:	f003 0303 	and.w	r3, r3, #3
 810bb94:	4a14      	ldr	r2, [pc, #80]	@ (810bbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810bb96:	fa22 f303 	lsr.w	r3, r2, r3
 810bb9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bb9c:	e01e      	b.n	810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810bb9e:	4b11      	ldr	r3, [pc, #68]	@ (810bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bba0:	681b      	ldr	r3, [r3, #0]
 810bba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810bba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810bbaa:	d106      	bne.n	810bbba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 810bbac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bbae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810bbb2:	d102      	bne.n	810bbba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810bbb4:	4b0d      	ldr	r3, [pc, #52]	@ (810bbec <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810bbb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bbb8:	e010      	b.n	810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810bbba:	4b0a      	ldr	r3, [pc, #40]	@ (810bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bbbc:	681b      	ldr	r3, [r3, #0]
 810bbbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810bbc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810bbc6:	d106      	bne.n	810bbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 810bbc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bbca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bbce:	d102      	bne.n	810bbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810bbd0:	4b07      	ldr	r3, [pc, #28]	@ (810bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810bbd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bbd4:	e002      	b.n	810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810bbd6:	2300      	movs	r3, #0
 810bbd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810bbda:	e2e2      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810bbdc:	e2e1      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810bbde:	4b05      	ldr	r3, [pc, #20]	@ (810bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 810bbe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bbe2:	e2de      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810bbe4:	58024400 	.word	0x58024400
 810bbe8:	03d09000 	.word	0x03d09000
 810bbec:	003d0900 	.word	0x003d0900
 810bbf0:	007a1200 	.word	0x007a1200
 810bbf4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 810bbf8:	2300      	movs	r3, #0
 810bbfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bbfc:	e2d1      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810bbfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 810bc02:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 810bc06:	430b      	orrs	r3, r1
 810bc08:	f040 809c 	bne.w	810bd44 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 810bc0c:	4b93      	ldr	r3, [pc, #588]	@ (810be5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bc0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810bc10:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 810bc14:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810bc16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810bc1c:	d054      	beq.n	810bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 810bc1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810bc24:	f200 808b 	bhi.w	810bd3e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810bc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810bc2e:	f000 8083 	beq.w	810bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 810bc32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810bc38:	f200 8081 	bhi.w	810bd3e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810bc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810bc42:	d02f      	beq.n	810bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 810bc44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810bc4a:	d878      	bhi.n	810bd3e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810bc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc4e:	2b00      	cmp	r3, #0
 810bc50:	d004      	beq.n	810bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 810bc52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810bc58:	d012      	beq.n	810bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 810bc5a:	e070      	b.n	810bd3e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810bc5c:	4b7f      	ldr	r3, [pc, #508]	@ (810be5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bc5e:	681b      	ldr	r3, [r3, #0]
 810bc60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810bc64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810bc68:	d107      	bne.n	810bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810bc6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810bc6e:	4618      	mov	r0, r3
 810bc70:	f000 fd5e 	bl	810c730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810bc74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bc76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bc78:	e293      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bc7a:	2300      	movs	r3, #0
 810bc7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bc7e:	e290      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810bc80:	4b76      	ldr	r3, [pc, #472]	@ (810be5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bc82:	681b      	ldr	r3, [r3, #0]
 810bc84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810bc88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810bc8c:	d107      	bne.n	810bc9e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bc8e:	f107 0318 	add.w	r3, r7, #24
 810bc92:	4618      	mov	r0, r3
 810bc94:	f000 faa4 	bl	810c1e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810bc98:	69bb      	ldr	r3, [r7, #24]
 810bc9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bc9c:	e281      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bc9e:	2300      	movs	r3, #0
 810bca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bca2:	e27e      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810bca4:	4b6d      	ldr	r3, [pc, #436]	@ (810be5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bca6:	681b      	ldr	r3, [r3, #0]
 810bca8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810bcac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bcb0:	d107      	bne.n	810bcc2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bcb2:	f107 030c 	add.w	r3, r7, #12
 810bcb6:	4618      	mov	r0, r3
 810bcb8:	f000 fbe6 	bl	810c488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810bcbc:	68fb      	ldr	r3, [r7, #12]
 810bcbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bcc0:	e26f      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bcc2:	2300      	movs	r3, #0
 810bcc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bcc6:	e26c      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810bcc8:	4b64      	ldr	r3, [pc, #400]	@ (810be5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bcca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810bccc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810bcd0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810bcd2:	4b62      	ldr	r3, [pc, #392]	@ (810be5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bcd4:	681b      	ldr	r3, [r3, #0]
 810bcd6:	f003 0304 	and.w	r3, r3, #4
 810bcda:	2b04      	cmp	r3, #4
 810bcdc:	d10c      	bne.n	810bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 810bcde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bce0:	2b00      	cmp	r3, #0
 810bce2:	d109      	bne.n	810bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810bce4:	4b5d      	ldr	r3, [pc, #372]	@ (810be5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bce6:	681b      	ldr	r3, [r3, #0]
 810bce8:	08db      	lsrs	r3, r3, #3
 810bcea:	f003 0303 	and.w	r3, r3, #3
 810bcee:	4a5c      	ldr	r2, [pc, #368]	@ (810be60 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 810bcf0:	fa22 f303 	lsr.w	r3, r2, r3
 810bcf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bcf6:	e01e      	b.n	810bd36 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810bcf8:	4b58      	ldr	r3, [pc, #352]	@ (810be5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bcfa:	681b      	ldr	r3, [r3, #0]
 810bcfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810bd00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810bd04:	d106      	bne.n	810bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 810bd06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bd08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810bd0c:	d102      	bne.n	810bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810bd0e:	4b55      	ldr	r3, [pc, #340]	@ (810be64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810bd10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bd12:	e010      	b.n	810bd36 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810bd14:	4b51      	ldr	r3, [pc, #324]	@ (810be5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bd16:	681b      	ldr	r3, [r3, #0]
 810bd18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810bd1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810bd20:	d106      	bne.n	810bd30 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 810bd22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bd24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bd28:	d102      	bne.n	810bd30 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810bd2a:	4b4f      	ldr	r3, [pc, #316]	@ (810be68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 810bd2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bd2e:	e002      	b.n	810bd36 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810bd30:	2300      	movs	r3, #0
 810bd32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810bd34:	e235      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810bd36:	e234      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810bd38:	4b4c      	ldr	r3, [pc, #304]	@ (810be6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 810bd3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bd3c:	e231      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810bd3e:	2300      	movs	r3, #0
 810bd40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bd42:	e22e      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 810bd44:	e9d7 2300 	ldrd	r2, r3, [r7]
 810bd48:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 810bd4c:	430b      	orrs	r3, r1
 810bd4e:	f040 808f 	bne.w	810be70 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 810bd52:	4b42      	ldr	r3, [pc, #264]	@ (810be5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bd54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810bd56:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 810bd5a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 810bd5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810bd62:	d06b      	beq.n	810be3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 810bd64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810bd6a:	d874      	bhi.n	810be56 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810bd6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810bd72:	d056      	beq.n	810be22 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 810bd74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810bd7a:	d86c      	bhi.n	810be56 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810bd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810bd82:	d03b      	beq.n	810bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 810bd84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810bd8a:	d864      	bhi.n	810be56 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810bd8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810bd92:	d021      	beq.n	810bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 810bd94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810bd9a:	d85c      	bhi.n	810be56 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810bd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd9e:	2b00      	cmp	r3, #0
 810bda0:	d004      	beq.n	810bdac <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 810bda2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bda4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810bda8:	d004      	beq.n	810bdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 810bdaa:	e054      	b.n	810be56 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 810bdac:	f7fe fa4c 	bl	810a248 <HAL_RCC_GetPCLK1Freq>
 810bdb0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810bdb2:	e1f6      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810bdb4:	4b29      	ldr	r3, [pc, #164]	@ (810be5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bdb6:	681b      	ldr	r3, [r3, #0]
 810bdb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810bdbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810bdc0:	d107      	bne.n	810bdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bdc2:	f107 0318 	add.w	r3, r7, #24
 810bdc6:	4618      	mov	r0, r3
 810bdc8:	f000 fa0a 	bl	810c1e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810bdcc:	69fb      	ldr	r3, [r7, #28]
 810bdce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bdd0:	e1e7      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bdd2:	2300      	movs	r3, #0
 810bdd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bdd6:	e1e4      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810bdd8:	4b20      	ldr	r3, [pc, #128]	@ (810be5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bdda:	681b      	ldr	r3, [r3, #0]
 810bddc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810bde0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bde4:	d107      	bne.n	810bdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bde6:	f107 030c 	add.w	r3, r7, #12
 810bdea:	4618      	mov	r0, r3
 810bdec:	f000 fb4c 	bl	810c488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810bdf0:	693b      	ldr	r3, [r7, #16]
 810bdf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bdf4:	e1d5      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bdf6:	2300      	movs	r3, #0
 810bdf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bdfa:	e1d2      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810bdfc:	4b17      	ldr	r3, [pc, #92]	@ (810be5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bdfe:	681b      	ldr	r3, [r3, #0]
 810be00:	f003 0304 	and.w	r3, r3, #4
 810be04:	2b04      	cmp	r3, #4
 810be06:	d109      	bne.n	810be1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810be08:	4b14      	ldr	r3, [pc, #80]	@ (810be5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810be0a:	681b      	ldr	r3, [r3, #0]
 810be0c:	08db      	lsrs	r3, r3, #3
 810be0e:	f003 0303 	and.w	r3, r3, #3
 810be12:	4a13      	ldr	r2, [pc, #76]	@ (810be60 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 810be14:	fa22 f303 	lsr.w	r3, r2, r3
 810be18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810be1a:	e1c2      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810be1c:	2300      	movs	r3, #0
 810be1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810be20:	e1bf      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810be22:	4b0e      	ldr	r3, [pc, #56]	@ (810be5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810be24:	681b      	ldr	r3, [r3, #0]
 810be26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810be2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810be2e:	d102      	bne.n	810be36 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 810be30:	4b0c      	ldr	r3, [pc, #48]	@ (810be64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810be32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810be34:	e1b5      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810be36:	2300      	movs	r3, #0
 810be38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810be3a:	e1b2      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810be3c:	4b07      	ldr	r3, [pc, #28]	@ (810be5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810be3e:	681b      	ldr	r3, [r3, #0]
 810be40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810be44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810be48:	d102      	bne.n	810be50 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 810be4a:	4b07      	ldr	r3, [pc, #28]	@ (810be68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 810be4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810be4e:	e1a8      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810be50:	2300      	movs	r3, #0
 810be52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810be54:	e1a5      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810be56:	2300      	movs	r3, #0
 810be58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810be5a:	e1a2      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810be5c:	58024400 	.word	0x58024400
 810be60:	03d09000 	.word	0x03d09000
 810be64:	003d0900 	.word	0x003d0900
 810be68:	007a1200 	.word	0x007a1200
 810be6c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 810be70:	e9d7 2300 	ldrd	r2, r3, [r7]
 810be74:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 810be78:	430b      	orrs	r3, r1
 810be7a:	d173      	bne.n	810bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 810be7c:	4b9c      	ldr	r3, [pc, #624]	@ (810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810be7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810be80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810be84:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810be86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810be88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810be8c:	d02f      	beq.n	810beee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 810be8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810be90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810be94:	d863      	bhi.n	810bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 810be96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810be98:	2b00      	cmp	r3, #0
 810be9a:	d004      	beq.n	810bea6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 810be9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810be9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810bea2:	d012      	beq.n	810beca <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 810bea4:	e05b      	b.n	810bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810bea6:	4b92      	ldr	r3, [pc, #584]	@ (810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bea8:	681b      	ldr	r3, [r3, #0]
 810beaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810beae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810beb2:	d107      	bne.n	810bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810beb4:	f107 0318 	add.w	r3, r7, #24
 810beb8:	4618      	mov	r0, r3
 810beba:	f000 f991 	bl	810c1e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810bebe:	69bb      	ldr	r3, [r7, #24]
 810bec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bec2:	e16e      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bec4:	2300      	movs	r3, #0
 810bec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bec8:	e16b      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810beca:	4b89      	ldr	r3, [pc, #548]	@ (810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810becc:	681b      	ldr	r3, [r3, #0]
 810bece:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810bed2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bed6:	d107      	bne.n	810bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bed8:	f107 030c 	add.w	r3, r7, #12
 810bedc:	4618      	mov	r0, r3
 810bede:	f000 fad3 	bl	810c488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810bee2:	697b      	ldr	r3, [r7, #20]
 810bee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bee6:	e15c      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bee8:	2300      	movs	r3, #0
 810beea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810beec:	e159      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810beee:	4b80      	ldr	r3, [pc, #512]	@ (810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810bef2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810bef6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810bef8:	4b7d      	ldr	r3, [pc, #500]	@ (810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810befa:	681b      	ldr	r3, [r3, #0]
 810befc:	f003 0304 	and.w	r3, r3, #4
 810bf00:	2b04      	cmp	r3, #4
 810bf02:	d10c      	bne.n	810bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 810bf04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bf06:	2b00      	cmp	r3, #0
 810bf08:	d109      	bne.n	810bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810bf0a:	4b79      	ldr	r3, [pc, #484]	@ (810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bf0c:	681b      	ldr	r3, [r3, #0]
 810bf0e:	08db      	lsrs	r3, r3, #3
 810bf10:	f003 0303 	and.w	r3, r3, #3
 810bf14:	4a77      	ldr	r2, [pc, #476]	@ (810c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810bf16:	fa22 f303 	lsr.w	r3, r2, r3
 810bf1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bf1c:	e01e      	b.n	810bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810bf1e:	4b74      	ldr	r3, [pc, #464]	@ (810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bf20:	681b      	ldr	r3, [r3, #0]
 810bf22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810bf26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810bf2a:	d106      	bne.n	810bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 810bf2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bf2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810bf32:	d102      	bne.n	810bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810bf34:	4b70      	ldr	r3, [pc, #448]	@ (810c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810bf36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bf38:	e010      	b.n	810bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810bf3a:	4b6d      	ldr	r3, [pc, #436]	@ (810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bf3c:	681b      	ldr	r3, [r3, #0]
 810bf3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810bf42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810bf46:	d106      	bne.n	810bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 810bf48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bf4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bf4e:	d102      	bne.n	810bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810bf50:	4b6a      	ldr	r3, [pc, #424]	@ (810c0fc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810bf52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bf54:	e002      	b.n	810bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810bf56:	2300      	movs	r3, #0
 810bf58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810bf5a:	e122      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810bf5c:	e121      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810bf5e:	2300      	movs	r3, #0
 810bf60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bf62:	e11e      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 810bf64:	e9d7 2300 	ldrd	r2, r3, [r7]
 810bf68:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 810bf6c:	430b      	orrs	r3, r1
 810bf6e:	d133      	bne.n	810bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 810bf70:	4b5f      	ldr	r3, [pc, #380]	@ (810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bf72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810bf74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810bf78:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810bf7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bf7c:	2b00      	cmp	r3, #0
 810bf7e:	d004      	beq.n	810bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 810bf80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bf82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810bf86:	d012      	beq.n	810bfae <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 810bf88:	e023      	b.n	810bfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810bf8a:	4b59      	ldr	r3, [pc, #356]	@ (810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bf8c:	681b      	ldr	r3, [r3, #0]
 810bf8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810bf92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810bf96:	d107      	bne.n	810bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810bf98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810bf9c:	4618      	mov	r0, r3
 810bf9e:	f000 fbc7 	bl	810c730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810bfa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bfa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bfa6:	e0fc      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bfa8:	2300      	movs	r3, #0
 810bfaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bfac:	e0f9      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810bfae:	4b50      	ldr	r3, [pc, #320]	@ (810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bfb0:	681b      	ldr	r3, [r3, #0]
 810bfb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810bfb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810bfba:	d107      	bne.n	810bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bfbc:	f107 0318 	add.w	r3, r7, #24
 810bfc0:	4618      	mov	r0, r3
 810bfc2:	f000 f90d 	bl	810c1e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810bfc6:	6a3b      	ldr	r3, [r7, #32]
 810bfc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bfca:	e0ea      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bfcc:	2300      	movs	r3, #0
 810bfce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bfd0:	e0e7      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810bfd2:	2300      	movs	r3, #0
 810bfd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bfd6:	e0e4      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810bfd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 810bfdc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 810bfe0:	430b      	orrs	r3, r1
 810bfe2:	f040 808d 	bne.w	810c100 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 810bfe6:	4b42      	ldr	r3, [pc, #264]	@ (810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bfe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810bfea:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 810bfee:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810bff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810bff6:	d06b      	beq.n	810c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 810bff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810bffe:	d874      	bhi.n	810c0ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810c000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810c006:	d056      	beq.n	810c0b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 810c008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c00a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810c00e:	d86c      	bhi.n	810c0ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810c010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c012:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810c016:	d03b      	beq.n	810c090 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 810c018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c01a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810c01e:	d864      	bhi.n	810c0ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810c020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c022:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810c026:	d021      	beq.n	810c06c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 810c028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c02a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810c02e:	d85c      	bhi.n	810c0ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810c030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c032:	2b00      	cmp	r3, #0
 810c034:	d004      	beq.n	810c040 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 810c036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c038:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810c03c:	d004      	beq.n	810c048 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 810c03e:	e054      	b.n	810c0ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810c040:	f000 f8b8 	bl	810c1b4 <HAL_RCCEx_GetD3PCLK1Freq>
 810c044:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810c046:	e0ac      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810c048:	4b29      	ldr	r3, [pc, #164]	@ (810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810c04a:	681b      	ldr	r3, [r3, #0]
 810c04c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810c050:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810c054:	d107      	bne.n	810c066 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810c056:	f107 0318 	add.w	r3, r7, #24
 810c05a:	4618      	mov	r0, r3
 810c05c:	f000 f8c0 	bl	810c1e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810c060:	69fb      	ldr	r3, [r7, #28]
 810c062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c064:	e09d      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c066:	2300      	movs	r3, #0
 810c068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c06a:	e09a      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810c06c:	4b20      	ldr	r3, [pc, #128]	@ (810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810c06e:	681b      	ldr	r3, [r3, #0]
 810c070:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810c074:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810c078:	d107      	bne.n	810c08a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810c07a:	f107 030c 	add.w	r3, r7, #12
 810c07e:	4618      	mov	r0, r3
 810c080:	f000 fa02 	bl	810c488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810c084:	693b      	ldr	r3, [r7, #16]
 810c086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c088:	e08b      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c08a:	2300      	movs	r3, #0
 810c08c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c08e:	e088      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810c090:	4b17      	ldr	r3, [pc, #92]	@ (810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810c092:	681b      	ldr	r3, [r3, #0]
 810c094:	f003 0304 	and.w	r3, r3, #4
 810c098:	2b04      	cmp	r3, #4
 810c09a:	d109      	bne.n	810c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810c09c:	4b14      	ldr	r3, [pc, #80]	@ (810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810c09e:	681b      	ldr	r3, [r3, #0]
 810c0a0:	08db      	lsrs	r3, r3, #3
 810c0a2:	f003 0303 	and.w	r3, r3, #3
 810c0a6:	4a13      	ldr	r2, [pc, #76]	@ (810c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810c0a8:	fa22 f303 	lsr.w	r3, r2, r3
 810c0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c0ae:	e078      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c0b0:	2300      	movs	r3, #0
 810c0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c0b4:	e075      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810c0b6:	4b0e      	ldr	r3, [pc, #56]	@ (810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810c0b8:	681b      	ldr	r3, [r3, #0]
 810c0ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810c0be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810c0c2:	d102      	bne.n	810c0ca <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 810c0c4:	4b0c      	ldr	r3, [pc, #48]	@ (810c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810c0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c0c8:	e06b      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c0ca:	2300      	movs	r3, #0
 810c0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c0ce:	e068      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810c0d0:	4b07      	ldr	r3, [pc, #28]	@ (810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810c0d2:	681b      	ldr	r3, [r3, #0]
 810c0d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810c0d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810c0dc:	d102      	bne.n	810c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 810c0de:	4b07      	ldr	r3, [pc, #28]	@ (810c0fc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810c0e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c0e2:	e05e      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c0e4:	2300      	movs	r3, #0
 810c0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c0e8:	e05b      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 810c0ea:	2300      	movs	r3, #0
 810c0ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c0ee:	e058      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810c0f0:	58024400 	.word	0x58024400
 810c0f4:	03d09000 	.word	0x03d09000
 810c0f8:	003d0900 	.word	0x003d0900
 810c0fc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810c100:	e9d7 2300 	ldrd	r2, r3, [r7]
 810c104:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 810c108:	430b      	orrs	r3, r1
 810c10a:	d148      	bne.n	810c19e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 810c10c:	4b27      	ldr	r3, [pc, #156]	@ (810c1ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810c10e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810c110:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810c114:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810c116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c118:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810c11c:	d02a      	beq.n	810c174 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 810c11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c120:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810c124:	d838      	bhi.n	810c198 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 810c126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c128:	2b00      	cmp	r3, #0
 810c12a:	d004      	beq.n	810c136 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 810c12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c12e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810c132:	d00d      	beq.n	810c150 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 810c134:	e030      	b.n	810c198 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810c136:	4b1d      	ldr	r3, [pc, #116]	@ (810c1ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810c138:	681b      	ldr	r3, [r3, #0]
 810c13a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810c13e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810c142:	d102      	bne.n	810c14a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 810c144:	4b1a      	ldr	r3, [pc, #104]	@ (810c1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 810c146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c148:	e02b      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c14a:	2300      	movs	r3, #0
 810c14c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c14e:	e028      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810c150:	4b16      	ldr	r3, [pc, #88]	@ (810c1ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810c152:	681b      	ldr	r3, [r3, #0]
 810c154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810c158:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810c15c:	d107      	bne.n	810c16e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810c15e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810c162:	4618      	mov	r0, r3
 810c164:	f000 fae4 	bl	810c730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810c168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c16c:	e019      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c16e:	2300      	movs	r3, #0
 810c170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c172:	e016      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810c174:	4b0d      	ldr	r3, [pc, #52]	@ (810c1ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810c176:	681b      	ldr	r3, [r3, #0]
 810c178:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810c17c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810c180:	d107      	bne.n	810c192 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810c182:	f107 0318 	add.w	r3, r7, #24
 810c186:	4618      	mov	r0, r3
 810c188:	f000 f82a 	bl	810c1e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810c18c:	69fb      	ldr	r3, [r7, #28]
 810c18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c190:	e007      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c192:	2300      	movs	r3, #0
 810c194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c196:	e004      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810c198:	2300      	movs	r3, #0
 810c19a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c19c:	e001      	b.n	810c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 810c19e:	2300      	movs	r3, #0
 810c1a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 810c1a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 810c1a4:	4618      	mov	r0, r3
 810c1a6:	3740      	adds	r7, #64	@ 0x40
 810c1a8:	46bd      	mov	sp, r7
 810c1aa:	bd80      	pop	{r7, pc}
 810c1ac:	58024400 	.word	0x58024400
 810c1b0:	007a1200 	.word	0x007a1200

0810c1b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810c1b4:	b580      	push	{r7, lr}
 810c1b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810c1b8:	f7fe f814 	bl	810a1e4 <HAL_RCC_GetHCLKFreq>
 810c1bc:	4602      	mov	r2, r0
 810c1be:	4b06      	ldr	r3, [pc, #24]	@ (810c1d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810c1c0:	6a1b      	ldr	r3, [r3, #32]
 810c1c2:	091b      	lsrs	r3, r3, #4
 810c1c4:	f003 0307 	and.w	r3, r3, #7
 810c1c8:	4904      	ldr	r1, [pc, #16]	@ (810c1dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810c1ca:	5ccb      	ldrb	r3, [r1, r3]
 810c1cc:	f003 031f 	and.w	r3, r3, #31
 810c1d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810c1d4:	4618      	mov	r0, r3
 810c1d6:	bd80      	pop	{r7, pc}
 810c1d8:	58024400 	.word	0x58024400
 810c1dc:	08116cc8 	.word	0x08116cc8

0810c1e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 810c1e0:	b480      	push	{r7}
 810c1e2:	b089      	sub	sp, #36	@ 0x24
 810c1e4:	af00      	add	r7, sp, #0
 810c1e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810c1e8:	4ba1      	ldr	r3, [pc, #644]	@ (810c470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c1ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c1ec:	f003 0303 	and.w	r3, r3, #3
 810c1f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 810c1f2:	4b9f      	ldr	r3, [pc, #636]	@ (810c470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c1f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c1f6:	0b1b      	lsrs	r3, r3, #12
 810c1f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810c1fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810c1fe:	4b9c      	ldr	r3, [pc, #624]	@ (810c470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c202:	091b      	lsrs	r3, r3, #4
 810c204:	f003 0301 	and.w	r3, r3, #1
 810c208:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810c20a:	4b99      	ldr	r3, [pc, #612]	@ (810c470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c20c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810c20e:	08db      	lsrs	r3, r3, #3
 810c210:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810c214:	693a      	ldr	r2, [r7, #16]
 810c216:	fb02 f303 	mul.w	r3, r2, r3
 810c21a:	ee07 3a90 	vmov	s15, r3
 810c21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c222:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810c226:	697b      	ldr	r3, [r7, #20]
 810c228:	2b00      	cmp	r3, #0
 810c22a:	f000 8111 	beq.w	810c450 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810c22e:	69bb      	ldr	r3, [r7, #24]
 810c230:	2b02      	cmp	r3, #2
 810c232:	f000 8083 	beq.w	810c33c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810c236:	69bb      	ldr	r3, [r7, #24]
 810c238:	2b02      	cmp	r3, #2
 810c23a:	f200 80a1 	bhi.w	810c380 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810c23e:	69bb      	ldr	r3, [r7, #24]
 810c240:	2b00      	cmp	r3, #0
 810c242:	d003      	beq.n	810c24c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810c244:	69bb      	ldr	r3, [r7, #24]
 810c246:	2b01      	cmp	r3, #1
 810c248:	d056      	beq.n	810c2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810c24a:	e099      	b.n	810c380 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c24c:	4b88      	ldr	r3, [pc, #544]	@ (810c470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c24e:	681b      	ldr	r3, [r3, #0]
 810c250:	f003 0320 	and.w	r3, r3, #32
 810c254:	2b00      	cmp	r3, #0
 810c256:	d02d      	beq.n	810c2b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810c258:	4b85      	ldr	r3, [pc, #532]	@ (810c470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c25a:	681b      	ldr	r3, [r3, #0]
 810c25c:	08db      	lsrs	r3, r3, #3
 810c25e:	f003 0303 	and.w	r3, r3, #3
 810c262:	4a84      	ldr	r2, [pc, #528]	@ (810c474 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810c264:	fa22 f303 	lsr.w	r3, r2, r3
 810c268:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810c26a:	68bb      	ldr	r3, [r7, #8]
 810c26c:	ee07 3a90 	vmov	s15, r3
 810c270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c274:	697b      	ldr	r3, [r7, #20]
 810c276:	ee07 3a90 	vmov	s15, r3
 810c27a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c27e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c282:	4b7b      	ldr	r3, [pc, #492]	@ (810c470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c28a:	ee07 3a90 	vmov	s15, r3
 810c28e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c292:	ed97 6a03 	vldr	s12, [r7, #12]
 810c296:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810c478 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810c29a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c29e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c2a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c2a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c2aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c2ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810c2b2:	e087      	b.n	810c3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810c2b4:	697b      	ldr	r3, [r7, #20]
 810c2b6:	ee07 3a90 	vmov	s15, r3
 810c2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c2be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810c47c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810c2c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c2c6:	4b6a      	ldr	r3, [pc, #424]	@ (810c470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c2c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c2ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c2ce:	ee07 3a90 	vmov	s15, r3
 810c2d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c2d6:	ed97 6a03 	vldr	s12, [r7, #12]
 810c2da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810c478 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810c2de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c2e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c2e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c2ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c2ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c2f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c2f6:	e065      	b.n	810c3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810c2f8:	697b      	ldr	r3, [r7, #20]
 810c2fa:	ee07 3a90 	vmov	s15, r3
 810c2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c302:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810c480 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810c306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c30a:	4b59      	ldr	r3, [pc, #356]	@ (810c470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c30c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c312:	ee07 3a90 	vmov	s15, r3
 810c316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c31a:	ed97 6a03 	vldr	s12, [r7, #12]
 810c31e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810c478 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810c322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c32a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c32e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c332:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c33a:	e043      	b.n	810c3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810c33c:	697b      	ldr	r3, [r7, #20]
 810c33e:	ee07 3a90 	vmov	s15, r3
 810c342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c346:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810c484 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810c34a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c34e:	4b48      	ldr	r3, [pc, #288]	@ (810c470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c356:	ee07 3a90 	vmov	s15, r3
 810c35a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c35e:	ed97 6a03 	vldr	s12, [r7, #12]
 810c362:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810c478 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810c366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c36a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c36e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c376:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c37a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c37e:	e021      	b.n	810c3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810c380:	697b      	ldr	r3, [r7, #20]
 810c382:	ee07 3a90 	vmov	s15, r3
 810c386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c38a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810c480 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810c38e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c392:	4b37      	ldr	r3, [pc, #220]	@ (810c470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c39a:	ee07 3a90 	vmov	s15, r3
 810c39e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c3a2:	ed97 6a03 	vldr	s12, [r7, #12]
 810c3a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810c478 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810c3aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c3ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c3b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c3b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c3ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c3be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c3c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 810c3c4:	4b2a      	ldr	r3, [pc, #168]	@ (810c470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c3c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c3c8:	0a5b      	lsrs	r3, r3, #9
 810c3ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c3ce:	ee07 3a90 	vmov	s15, r3
 810c3d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c3d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c3da:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c3de:	edd7 6a07 	vldr	s13, [r7, #28]
 810c3e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c3e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c3ea:	ee17 2a90 	vmov	r2, s15
 810c3ee:	687b      	ldr	r3, [r7, #4]
 810c3f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 810c3f2:	4b1f      	ldr	r3, [pc, #124]	@ (810c470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c3f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c3f6:	0c1b      	lsrs	r3, r3, #16
 810c3f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c3fc:	ee07 3a90 	vmov	s15, r3
 810c400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c404:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c408:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c40c:	edd7 6a07 	vldr	s13, [r7, #28]
 810c410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c418:	ee17 2a90 	vmov	r2, s15
 810c41c:	687b      	ldr	r3, [r7, #4]
 810c41e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 810c420:	4b13      	ldr	r3, [pc, #76]	@ (810c470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c424:	0e1b      	lsrs	r3, r3, #24
 810c426:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c42a:	ee07 3a90 	vmov	s15, r3
 810c42e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c432:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c436:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c43a:	edd7 6a07 	vldr	s13, [r7, #28]
 810c43e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c446:	ee17 2a90 	vmov	r2, s15
 810c44a:	687b      	ldr	r3, [r7, #4]
 810c44c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810c44e:	e008      	b.n	810c462 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810c450:	687b      	ldr	r3, [r7, #4]
 810c452:	2200      	movs	r2, #0
 810c454:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810c456:	687b      	ldr	r3, [r7, #4]
 810c458:	2200      	movs	r2, #0
 810c45a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810c45c:	687b      	ldr	r3, [r7, #4]
 810c45e:	2200      	movs	r2, #0
 810c460:	609a      	str	r2, [r3, #8]
}
 810c462:	bf00      	nop
 810c464:	3724      	adds	r7, #36	@ 0x24
 810c466:	46bd      	mov	sp, r7
 810c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c46c:	4770      	bx	lr
 810c46e:	bf00      	nop
 810c470:	58024400 	.word	0x58024400
 810c474:	03d09000 	.word	0x03d09000
 810c478:	46000000 	.word	0x46000000
 810c47c:	4c742400 	.word	0x4c742400
 810c480:	4a742400 	.word	0x4a742400
 810c484:	4af42400 	.word	0x4af42400

0810c488 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 810c488:	b480      	push	{r7}
 810c48a:	b089      	sub	sp, #36	@ 0x24
 810c48c:	af00      	add	r7, sp, #0
 810c48e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810c490:	4ba1      	ldr	r3, [pc, #644]	@ (810c718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c494:	f003 0303 	and.w	r3, r3, #3
 810c498:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810c49a:	4b9f      	ldr	r3, [pc, #636]	@ (810c718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c49c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c49e:	0d1b      	lsrs	r3, r3, #20
 810c4a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810c4a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810c4a6:	4b9c      	ldr	r3, [pc, #624]	@ (810c718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c4a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c4aa:	0a1b      	lsrs	r3, r3, #8
 810c4ac:	f003 0301 	and.w	r3, r3, #1
 810c4b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810c4b2:	4b99      	ldr	r3, [pc, #612]	@ (810c718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c4b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810c4b6:	08db      	lsrs	r3, r3, #3
 810c4b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810c4bc:	693a      	ldr	r2, [r7, #16]
 810c4be:	fb02 f303 	mul.w	r3, r2, r3
 810c4c2:	ee07 3a90 	vmov	s15, r3
 810c4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c4ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810c4ce:	697b      	ldr	r3, [r7, #20]
 810c4d0:	2b00      	cmp	r3, #0
 810c4d2:	f000 8111 	beq.w	810c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810c4d6:	69bb      	ldr	r3, [r7, #24]
 810c4d8:	2b02      	cmp	r3, #2
 810c4da:	f000 8083 	beq.w	810c5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810c4de:	69bb      	ldr	r3, [r7, #24]
 810c4e0:	2b02      	cmp	r3, #2
 810c4e2:	f200 80a1 	bhi.w	810c628 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810c4e6:	69bb      	ldr	r3, [r7, #24]
 810c4e8:	2b00      	cmp	r3, #0
 810c4ea:	d003      	beq.n	810c4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810c4ec:	69bb      	ldr	r3, [r7, #24]
 810c4ee:	2b01      	cmp	r3, #1
 810c4f0:	d056      	beq.n	810c5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810c4f2:	e099      	b.n	810c628 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c4f4:	4b88      	ldr	r3, [pc, #544]	@ (810c718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c4f6:	681b      	ldr	r3, [r3, #0]
 810c4f8:	f003 0320 	and.w	r3, r3, #32
 810c4fc:	2b00      	cmp	r3, #0
 810c4fe:	d02d      	beq.n	810c55c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810c500:	4b85      	ldr	r3, [pc, #532]	@ (810c718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c502:	681b      	ldr	r3, [r3, #0]
 810c504:	08db      	lsrs	r3, r3, #3
 810c506:	f003 0303 	and.w	r3, r3, #3
 810c50a:	4a84      	ldr	r2, [pc, #528]	@ (810c71c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810c50c:	fa22 f303 	lsr.w	r3, r2, r3
 810c510:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810c512:	68bb      	ldr	r3, [r7, #8]
 810c514:	ee07 3a90 	vmov	s15, r3
 810c518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c51c:	697b      	ldr	r3, [r7, #20]
 810c51e:	ee07 3a90 	vmov	s15, r3
 810c522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c52a:	4b7b      	ldr	r3, [pc, #492]	@ (810c718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c52c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c52e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c532:	ee07 3a90 	vmov	s15, r3
 810c536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c53a:	ed97 6a03 	vldr	s12, [r7, #12]
 810c53e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810c720 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810c542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c54a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c54e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c552:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c556:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810c55a:	e087      	b.n	810c66c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810c55c:	697b      	ldr	r3, [r7, #20]
 810c55e:	ee07 3a90 	vmov	s15, r3
 810c562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c566:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810c724 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810c56a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c56e:	4b6a      	ldr	r3, [pc, #424]	@ (810c718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c576:	ee07 3a90 	vmov	s15, r3
 810c57a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c57e:	ed97 6a03 	vldr	s12, [r7, #12]
 810c582:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810c720 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810c586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c58a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c58e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c596:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c59a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c59e:	e065      	b.n	810c66c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810c5a0:	697b      	ldr	r3, [r7, #20]
 810c5a2:	ee07 3a90 	vmov	s15, r3
 810c5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c5aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810c728 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810c5ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c5b2:	4b59      	ldr	r3, [pc, #356]	@ (810c718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c5b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c5ba:	ee07 3a90 	vmov	s15, r3
 810c5be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c5c2:	ed97 6a03 	vldr	s12, [r7, #12]
 810c5c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810c720 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810c5ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c5ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c5d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c5d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c5da:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c5de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c5e2:	e043      	b.n	810c66c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810c5e4:	697b      	ldr	r3, [r7, #20]
 810c5e6:	ee07 3a90 	vmov	s15, r3
 810c5ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c5ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810c72c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810c5f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c5f6:	4b48      	ldr	r3, [pc, #288]	@ (810c718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c5f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c5fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c5fe:	ee07 3a90 	vmov	s15, r3
 810c602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c606:	ed97 6a03 	vldr	s12, [r7, #12]
 810c60a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810c720 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810c60e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c61a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c61e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c622:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c626:	e021      	b.n	810c66c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810c628:	697b      	ldr	r3, [r7, #20]
 810c62a:	ee07 3a90 	vmov	s15, r3
 810c62e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c632:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810c728 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810c636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c63a:	4b37      	ldr	r3, [pc, #220]	@ (810c718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c63c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c63e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c642:	ee07 3a90 	vmov	s15, r3
 810c646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c64a:	ed97 6a03 	vldr	s12, [r7, #12]
 810c64e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810c720 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810c652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c65a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c65e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c662:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c666:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c66a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 810c66c:	4b2a      	ldr	r3, [pc, #168]	@ (810c718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c66e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c670:	0a5b      	lsrs	r3, r3, #9
 810c672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c676:	ee07 3a90 	vmov	s15, r3
 810c67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c67e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c682:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c686:	edd7 6a07 	vldr	s13, [r7, #28]
 810c68a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c68e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c692:	ee17 2a90 	vmov	r2, s15
 810c696:	687b      	ldr	r3, [r7, #4]
 810c698:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810c69a:	4b1f      	ldr	r3, [pc, #124]	@ (810c718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c69c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c69e:	0c1b      	lsrs	r3, r3, #16
 810c6a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c6a4:	ee07 3a90 	vmov	s15, r3
 810c6a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c6ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c6b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c6b4:	edd7 6a07 	vldr	s13, [r7, #28]
 810c6b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c6bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c6c0:	ee17 2a90 	vmov	r2, s15
 810c6c4:	687b      	ldr	r3, [r7, #4]
 810c6c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810c6c8:	4b13      	ldr	r3, [pc, #76]	@ (810c718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c6ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c6cc:	0e1b      	lsrs	r3, r3, #24
 810c6ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c6d2:	ee07 3a90 	vmov	s15, r3
 810c6d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c6da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c6de:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c6e2:	edd7 6a07 	vldr	s13, [r7, #28]
 810c6e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c6ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c6ee:	ee17 2a90 	vmov	r2, s15
 810c6f2:	687b      	ldr	r3, [r7, #4]
 810c6f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810c6f6:	e008      	b.n	810c70a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810c6f8:	687b      	ldr	r3, [r7, #4]
 810c6fa:	2200      	movs	r2, #0
 810c6fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810c6fe:	687b      	ldr	r3, [r7, #4]
 810c700:	2200      	movs	r2, #0
 810c702:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810c704:	687b      	ldr	r3, [r7, #4]
 810c706:	2200      	movs	r2, #0
 810c708:	609a      	str	r2, [r3, #8]
}
 810c70a:	bf00      	nop
 810c70c:	3724      	adds	r7, #36	@ 0x24
 810c70e:	46bd      	mov	sp, r7
 810c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c714:	4770      	bx	lr
 810c716:	bf00      	nop
 810c718:	58024400 	.word	0x58024400
 810c71c:	03d09000 	.word	0x03d09000
 810c720:	46000000 	.word	0x46000000
 810c724:	4c742400 	.word	0x4c742400
 810c728:	4a742400 	.word	0x4a742400
 810c72c:	4af42400 	.word	0x4af42400

0810c730 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 810c730:	b480      	push	{r7}
 810c732:	b089      	sub	sp, #36	@ 0x24
 810c734:	af00      	add	r7, sp, #0
 810c736:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810c738:	4ba0      	ldr	r3, [pc, #640]	@ (810c9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c73a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c73c:	f003 0303 	and.w	r3, r3, #3
 810c740:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 810c742:	4b9e      	ldr	r3, [pc, #632]	@ (810c9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c746:	091b      	lsrs	r3, r3, #4
 810c748:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810c74c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810c74e:	4b9b      	ldr	r3, [pc, #620]	@ (810c9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c752:	f003 0301 	and.w	r3, r3, #1
 810c756:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810c758:	4b98      	ldr	r3, [pc, #608]	@ (810c9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c75a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c75c:	08db      	lsrs	r3, r3, #3
 810c75e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810c762:	693a      	ldr	r2, [r7, #16]
 810c764:	fb02 f303 	mul.w	r3, r2, r3
 810c768:	ee07 3a90 	vmov	s15, r3
 810c76c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c770:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 810c774:	697b      	ldr	r3, [r7, #20]
 810c776:	2b00      	cmp	r3, #0
 810c778:	f000 8111 	beq.w	810c99e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 810c77c:	69bb      	ldr	r3, [r7, #24]
 810c77e:	2b02      	cmp	r3, #2
 810c780:	f000 8083 	beq.w	810c88a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 810c784:	69bb      	ldr	r3, [r7, #24]
 810c786:	2b02      	cmp	r3, #2
 810c788:	f200 80a1 	bhi.w	810c8ce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 810c78c:	69bb      	ldr	r3, [r7, #24]
 810c78e:	2b00      	cmp	r3, #0
 810c790:	d003      	beq.n	810c79a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 810c792:	69bb      	ldr	r3, [r7, #24]
 810c794:	2b01      	cmp	r3, #1
 810c796:	d056      	beq.n	810c846 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 810c798:	e099      	b.n	810c8ce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c79a:	4b88      	ldr	r3, [pc, #544]	@ (810c9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c79c:	681b      	ldr	r3, [r3, #0]
 810c79e:	f003 0320 	and.w	r3, r3, #32
 810c7a2:	2b00      	cmp	r3, #0
 810c7a4:	d02d      	beq.n	810c802 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810c7a6:	4b85      	ldr	r3, [pc, #532]	@ (810c9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c7a8:	681b      	ldr	r3, [r3, #0]
 810c7aa:	08db      	lsrs	r3, r3, #3
 810c7ac:	f003 0303 	and.w	r3, r3, #3
 810c7b0:	4a83      	ldr	r2, [pc, #524]	@ (810c9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 810c7b2:	fa22 f303 	lsr.w	r3, r2, r3
 810c7b6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c7b8:	68bb      	ldr	r3, [r7, #8]
 810c7ba:	ee07 3a90 	vmov	s15, r3
 810c7be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c7c2:	697b      	ldr	r3, [r7, #20]
 810c7c4:	ee07 3a90 	vmov	s15, r3
 810c7c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c7cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c7d0:	4b7a      	ldr	r3, [pc, #488]	@ (810c9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c7d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c7d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c7d8:	ee07 3a90 	vmov	s15, r3
 810c7dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c7e0:	ed97 6a03 	vldr	s12, [r7, #12]
 810c7e4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 810c9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c7e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c7ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c7f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c7f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c7f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c7fc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810c800:	e087      	b.n	810c912 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c802:	697b      	ldr	r3, [r7, #20]
 810c804:	ee07 3a90 	vmov	s15, r3
 810c808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c80c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 810c9c8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810c810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c814:	4b69      	ldr	r3, [pc, #420]	@ (810c9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c81c:	ee07 3a90 	vmov	s15, r3
 810c820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c824:	ed97 6a03 	vldr	s12, [r7, #12]
 810c828:	eddf 5a66 	vldr	s11, [pc, #408]	@ 810c9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c82c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c830:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c834:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c838:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c83c:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c840:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c844:	e065      	b.n	810c912 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c846:	697b      	ldr	r3, [r7, #20]
 810c848:	ee07 3a90 	vmov	s15, r3
 810c84c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c850:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 810c9cc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 810c854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c858:	4b58      	ldr	r3, [pc, #352]	@ (810c9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c85a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c85c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c860:	ee07 3a90 	vmov	s15, r3
 810c864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c868:	ed97 6a03 	vldr	s12, [r7, #12]
 810c86c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 810c9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c870:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c874:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c878:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c87c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c880:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c884:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c888:	e043      	b.n	810c912 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c88a:	697b      	ldr	r3, [r7, #20]
 810c88c:	ee07 3a90 	vmov	s15, r3
 810c890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c894:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 810c9d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810c898:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c89c:	4b47      	ldr	r3, [pc, #284]	@ (810c9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c89e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c8a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c8a4:	ee07 3a90 	vmov	s15, r3
 810c8a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c8ac:	ed97 6a03 	vldr	s12, [r7, #12]
 810c8b0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 810c9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c8b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c8b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c8bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c8c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c8c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c8c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c8cc:	e021      	b.n	810c912 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c8ce:	697b      	ldr	r3, [r7, #20]
 810c8d0:	ee07 3a90 	vmov	s15, r3
 810c8d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c8d8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 810c9c8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810c8dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c8e0:	4b36      	ldr	r3, [pc, #216]	@ (810c9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c8e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c8e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c8e8:	ee07 3a90 	vmov	s15, r3
 810c8ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c8f0:	ed97 6a03 	vldr	s12, [r7, #12]
 810c8f4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 810c9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c8f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c8fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c900:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c904:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c908:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c90c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c910:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 810c912:	4b2a      	ldr	r3, [pc, #168]	@ (810c9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c916:	0a5b      	lsrs	r3, r3, #9
 810c918:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c91c:	ee07 3a90 	vmov	s15, r3
 810c920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c924:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c928:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c92c:	edd7 6a07 	vldr	s13, [r7, #28]
 810c930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c938:	ee17 2a90 	vmov	r2, s15
 810c93c:	687b      	ldr	r3, [r7, #4]
 810c93e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 810c940:	4b1e      	ldr	r3, [pc, #120]	@ (810c9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c944:	0c1b      	lsrs	r3, r3, #16
 810c946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c94a:	ee07 3a90 	vmov	s15, r3
 810c94e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c952:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c956:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c95a:	edd7 6a07 	vldr	s13, [r7, #28]
 810c95e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c966:	ee17 2a90 	vmov	r2, s15
 810c96a:	687b      	ldr	r3, [r7, #4]
 810c96c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 810c96e:	4b13      	ldr	r3, [pc, #76]	@ (810c9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c972:	0e1b      	lsrs	r3, r3, #24
 810c974:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c978:	ee07 3a90 	vmov	s15, r3
 810c97c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c980:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c984:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c988:	edd7 6a07 	vldr	s13, [r7, #28]
 810c98c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c994:	ee17 2a90 	vmov	r2, s15
 810c998:	687b      	ldr	r3, [r7, #4]
 810c99a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 810c99c:	e008      	b.n	810c9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810c99e:	687b      	ldr	r3, [r7, #4]
 810c9a0:	2200      	movs	r2, #0
 810c9a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 810c9a4:	687b      	ldr	r3, [r7, #4]
 810c9a6:	2200      	movs	r2, #0
 810c9a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810c9aa:	687b      	ldr	r3, [r7, #4]
 810c9ac:	2200      	movs	r2, #0
 810c9ae:	609a      	str	r2, [r3, #8]
}
 810c9b0:	bf00      	nop
 810c9b2:	3724      	adds	r7, #36	@ 0x24
 810c9b4:	46bd      	mov	sp, r7
 810c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c9ba:	4770      	bx	lr
 810c9bc:	58024400 	.word	0x58024400
 810c9c0:	03d09000 	.word	0x03d09000
 810c9c4:	46000000 	.word	0x46000000
 810c9c8:	4c742400 	.word	0x4c742400
 810c9cc:	4a742400 	.word	0x4a742400
 810c9d0:	4af42400 	.word	0x4af42400

0810c9d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810c9d4:	b580      	push	{r7, lr}
 810c9d6:	b084      	sub	sp, #16
 810c9d8:	af00      	add	r7, sp, #0
 810c9da:	6078      	str	r0, [r7, #4]
 810c9dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810c9de:	2300      	movs	r3, #0
 810c9e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810c9e2:	4b54      	ldr	r3, [pc, #336]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810c9e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c9e6:	f003 0303 	and.w	r3, r3, #3
 810c9ea:	2b03      	cmp	r3, #3
 810c9ec:	d101      	bne.n	810c9f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810c9ee:	2301      	movs	r3, #1
 810c9f0:	e09b      	b.n	810cb2a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810c9f2:	4b50      	ldr	r3, [pc, #320]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810c9f4:	681b      	ldr	r3, [r3, #0]
 810c9f6:	4a4f      	ldr	r2, [pc, #316]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810c9f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810c9fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810c9fe:	f7f8 f98b 	bl	8104d18 <HAL_GetTick>
 810ca02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810ca04:	e008      	b.n	810ca18 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810ca06:	f7f8 f987 	bl	8104d18 <HAL_GetTick>
 810ca0a:	4602      	mov	r2, r0
 810ca0c:	68bb      	ldr	r3, [r7, #8]
 810ca0e:	1ad3      	subs	r3, r2, r3
 810ca10:	2b02      	cmp	r3, #2
 810ca12:	d901      	bls.n	810ca18 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810ca14:	2303      	movs	r3, #3
 810ca16:	e088      	b.n	810cb2a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810ca18:	4b46      	ldr	r3, [pc, #280]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810ca1a:	681b      	ldr	r3, [r3, #0]
 810ca1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810ca20:	2b00      	cmp	r3, #0
 810ca22:	d1f0      	bne.n	810ca06 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810ca24:	4b43      	ldr	r3, [pc, #268]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810ca26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ca28:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 810ca2c:	687b      	ldr	r3, [r7, #4]
 810ca2e:	681b      	ldr	r3, [r3, #0]
 810ca30:	031b      	lsls	r3, r3, #12
 810ca32:	4940      	ldr	r1, [pc, #256]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810ca34:	4313      	orrs	r3, r2
 810ca36:	628b      	str	r3, [r1, #40]	@ 0x28
 810ca38:	687b      	ldr	r3, [r7, #4]
 810ca3a:	685b      	ldr	r3, [r3, #4]
 810ca3c:	3b01      	subs	r3, #1
 810ca3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810ca42:	687b      	ldr	r3, [r7, #4]
 810ca44:	689b      	ldr	r3, [r3, #8]
 810ca46:	3b01      	subs	r3, #1
 810ca48:	025b      	lsls	r3, r3, #9
 810ca4a:	b29b      	uxth	r3, r3
 810ca4c:	431a      	orrs	r2, r3
 810ca4e:	687b      	ldr	r3, [r7, #4]
 810ca50:	68db      	ldr	r3, [r3, #12]
 810ca52:	3b01      	subs	r3, #1
 810ca54:	041b      	lsls	r3, r3, #16
 810ca56:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810ca5a:	431a      	orrs	r2, r3
 810ca5c:	687b      	ldr	r3, [r7, #4]
 810ca5e:	691b      	ldr	r3, [r3, #16]
 810ca60:	3b01      	subs	r3, #1
 810ca62:	061b      	lsls	r3, r3, #24
 810ca64:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810ca68:	4932      	ldr	r1, [pc, #200]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810ca6a:	4313      	orrs	r3, r2
 810ca6c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810ca6e:	4b31      	ldr	r3, [pc, #196]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810ca70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ca72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810ca76:	687b      	ldr	r3, [r7, #4]
 810ca78:	695b      	ldr	r3, [r3, #20]
 810ca7a:	492e      	ldr	r1, [pc, #184]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810ca7c:	4313      	orrs	r3, r2
 810ca7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810ca80:	4b2c      	ldr	r3, [pc, #176]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810ca82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ca84:	f023 0220 	bic.w	r2, r3, #32
 810ca88:	687b      	ldr	r3, [r7, #4]
 810ca8a:	699b      	ldr	r3, [r3, #24]
 810ca8c:	4929      	ldr	r1, [pc, #164]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810ca8e:	4313      	orrs	r3, r2
 810ca90:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810ca92:	4b28      	ldr	r3, [pc, #160]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810ca94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ca96:	4a27      	ldr	r2, [pc, #156]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810ca98:	f023 0310 	bic.w	r3, r3, #16
 810ca9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810ca9e:	4b25      	ldr	r3, [pc, #148]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810caa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810caa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810caa6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810caaa:	687a      	ldr	r2, [r7, #4]
 810caac:	69d2      	ldr	r2, [r2, #28]
 810caae:	00d2      	lsls	r2, r2, #3
 810cab0:	4920      	ldr	r1, [pc, #128]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810cab2:	4313      	orrs	r3, r2
 810cab4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810cab6:	4b1f      	ldr	r3, [pc, #124]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810cab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810caba:	4a1e      	ldr	r2, [pc, #120]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810cabc:	f043 0310 	orr.w	r3, r3, #16
 810cac0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810cac2:	683b      	ldr	r3, [r7, #0]
 810cac4:	2b00      	cmp	r3, #0
 810cac6:	d106      	bne.n	810cad6 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810cac8:	4b1a      	ldr	r3, [pc, #104]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810caca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cacc:	4a19      	ldr	r2, [pc, #100]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810cace:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810cad2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810cad4:	e00f      	b.n	810caf6 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810cad6:	683b      	ldr	r3, [r7, #0]
 810cad8:	2b01      	cmp	r3, #1
 810cada:	d106      	bne.n	810caea <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810cadc:	4b15      	ldr	r3, [pc, #84]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810cade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cae0:	4a14      	ldr	r2, [pc, #80]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810cae2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810cae6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810cae8:	e005      	b.n	810caf6 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810caea:	4b12      	ldr	r3, [pc, #72]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810caec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810caee:	4a11      	ldr	r2, [pc, #68]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810caf0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810caf4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810caf6:	4b0f      	ldr	r3, [pc, #60]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810caf8:	681b      	ldr	r3, [r3, #0]
 810cafa:	4a0e      	ldr	r2, [pc, #56]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810cafc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810cb00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810cb02:	f7f8 f909 	bl	8104d18 <HAL_GetTick>
 810cb06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810cb08:	e008      	b.n	810cb1c <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810cb0a:	f7f8 f905 	bl	8104d18 <HAL_GetTick>
 810cb0e:	4602      	mov	r2, r0
 810cb10:	68bb      	ldr	r3, [r7, #8]
 810cb12:	1ad3      	subs	r3, r2, r3
 810cb14:	2b02      	cmp	r3, #2
 810cb16:	d901      	bls.n	810cb1c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810cb18:	2303      	movs	r3, #3
 810cb1a:	e006      	b.n	810cb2a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810cb1c:	4b05      	ldr	r3, [pc, #20]	@ (810cb34 <RCCEx_PLL2_Config+0x160>)
 810cb1e:	681b      	ldr	r3, [r3, #0]
 810cb20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810cb24:	2b00      	cmp	r3, #0
 810cb26:	d0f0      	beq.n	810cb0a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810cb28:	7bfb      	ldrb	r3, [r7, #15]
}
 810cb2a:	4618      	mov	r0, r3
 810cb2c:	3710      	adds	r7, #16
 810cb2e:	46bd      	mov	sp, r7
 810cb30:	bd80      	pop	{r7, pc}
 810cb32:	bf00      	nop
 810cb34:	58024400 	.word	0x58024400

0810cb38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810cb38:	b580      	push	{r7, lr}
 810cb3a:	b084      	sub	sp, #16
 810cb3c:	af00      	add	r7, sp, #0
 810cb3e:	6078      	str	r0, [r7, #4]
 810cb40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810cb42:	2300      	movs	r3, #0
 810cb44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810cb46:	4b54      	ldr	r3, [pc, #336]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cb48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810cb4a:	f003 0303 	and.w	r3, r3, #3
 810cb4e:	2b03      	cmp	r3, #3
 810cb50:	d101      	bne.n	810cb56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810cb52:	2301      	movs	r3, #1
 810cb54:	e09b      	b.n	810cc8e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810cb56:	4b50      	ldr	r3, [pc, #320]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cb58:	681b      	ldr	r3, [r3, #0]
 810cb5a:	4a4f      	ldr	r2, [pc, #316]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cb5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810cb60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810cb62:	f7f8 f8d9 	bl	8104d18 <HAL_GetTick>
 810cb66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810cb68:	e008      	b.n	810cb7c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810cb6a:	f7f8 f8d5 	bl	8104d18 <HAL_GetTick>
 810cb6e:	4602      	mov	r2, r0
 810cb70:	68bb      	ldr	r3, [r7, #8]
 810cb72:	1ad3      	subs	r3, r2, r3
 810cb74:	2b02      	cmp	r3, #2
 810cb76:	d901      	bls.n	810cb7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810cb78:	2303      	movs	r3, #3
 810cb7a:	e088      	b.n	810cc8e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810cb7c:	4b46      	ldr	r3, [pc, #280]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cb7e:	681b      	ldr	r3, [r3, #0]
 810cb80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810cb84:	2b00      	cmp	r3, #0
 810cb86:	d1f0      	bne.n	810cb6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810cb88:	4b43      	ldr	r3, [pc, #268]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cb8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810cb8c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 810cb90:	687b      	ldr	r3, [r7, #4]
 810cb92:	681b      	ldr	r3, [r3, #0]
 810cb94:	051b      	lsls	r3, r3, #20
 810cb96:	4940      	ldr	r1, [pc, #256]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cb98:	4313      	orrs	r3, r2
 810cb9a:	628b      	str	r3, [r1, #40]	@ 0x28
 810cb9c:	687b      	ldr	r3, [r7, #4]
 810cb9e:	685b      	ldr	r3, [r3, #4]
 810cba0:	3b01      	subs	r3, #1
 810cba2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810cba6:	687b      	ldr	r3, [r7, #4]
 810cba8:	689b      	ldr	r3, [r3, #8]
 810cbaa:	3b01      	subs	r3, #1
 810cbac:	025b      	lsls	r3, r3, #9
 810cbae:	b29b      	uxth	r3, r3
 810cbb0:	431a      	orrs	r2, r3
 810cbb2:	687b      	ldr	r3, [r7, #4]
 810cbb4:	68db      	ldr	r3, [r3, #12]
 810cbb6:	3b01      	subs	r3, #1
 810cbb8:	041b      	lsls	r3, r3, #16
 810cbba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810cbbe:	431a      	orrs	r2, r3
 810cbc0:	687b      	ldr	r3, [r7, #4]
 810cbc2:	691b      	ldr	r3, [r3, #16]
 810cbc4:	3b01      	subs	r3, #1
 810cbc6:	061b      	lsls	r3, r3, #24
 810cbc8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810cbcc:	4932      	ldr	r1, [pc, #200]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cbce:	4313      	orrs	r3, r2
 810cbd0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810cbd2:	4b31      	ldr	r3, [pc, #196]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cbd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cbd6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810cbda:	687b      	ldr	r3, [r7, #4]
 810cbdc:	695b      	ldr	r3, [r3, #20]
 810cbde:	492e      	ldr	r1, [pc, #184]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cbe0:	4313      	orrs	r3, r2
 810cbe2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810cbe4:	4b2c      	ldr	r3, [pc, #176]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cbe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cbe8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 810cbec:	687b      	ldr	r3, [r7, #4]
 810cbee:	699b      	ldr	r3, [r3, #24]
 810cbf0:	4929      	ldr	r1, [pc, #164]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cbf2:	4313      	orrs	r3, r2
 810cbf4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810cbf6:	4b28      	ldr	r3, [pc, #160]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cbf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cbfa:	4a27      	ldr	r2, [pc, #156]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cbfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810cc00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810cc02:	4b25      	ldr	r3, [pc, #148]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cc04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810cc06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810cc0a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810cc0e:	687a      	ldr	r2, [r7, #4]
 810cc10:	69d2      	ldr	r2, [r2, #28]
 810cc12:	00d2      	lsls	r2, r2, #3
 810cc14:	4920      	ldr	r1, [pc, #128]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cc16:	4313      	orrs	r3, r2
 810cc18:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810cc1a:	4b1f      	ldr	r3, [pc, #124]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cc1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cc1e:	4a1e      	ldr	r2, [pc, #120]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cc20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810cc24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810cc26:	683b      	ldr	r3, [r7, #0]
 810cc28:	2b00      	cmp	r3, #0
 810cc2a:	d106      	bne.n	810cc3a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810cc2c:	4b1a      	ldr	r3, [pc, #104]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cc2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cc30:	4a19      	ldr	r2, [pc, #100]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cc32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810cc36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810cc38:	e00f      	b.n	810cc5a <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810cc3a:	683b      	ldr	r3, [r7, #0]
 810cc3c:	2b01      	cmp	r3, #1
 810cc3e:	d106      	bne.n	810cc4e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810cc40:	4b15      	ldr	r3, [pc, #84]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cc42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cc44:	4a14      	ldr	r2, [pc, #80]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cc46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810cc4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810cc4c:	e005      	b.n	810cc5a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810cc4e:	4b12      	ldr	r3, [pc, #72]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cc50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cc52:	4a11      	ldr	r2, [pc, #68]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cc54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810cc58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810cc5a:	4b0f      	ldr	r3, [pc, #60]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cc5c:	681b      	ldr	r3, [r3, #0]
 810cc5e:	4a0e      	ldr	r2, [pc, #56]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cc60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810cc64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810cc66:	f7f8 f857 	bl	8104d18 <HAL_GetTick>
 810cc6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810cc6c:	e008      	b.n	810cc80 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810cc6e:	f7f8 f853 	bl	8104d18 <HAL_GetTick>
 810cc72:	4602      	mov	r2, r0
 810cc74:	68bb      	ldr	r3, [r7, #8]
 810cc76:	1ad3      	subs	r3, r2, r3
 810cc78:	2b02      	cmp	r3, #2
 810cc7a:	d901      	bls.n	810cc80 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810cc7c:	2303      	movs	r3, #3
 810cc7e:	e006      	b.n	810cc8e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810cc80:	4b05      	ldr	r3, [pc, #20]	@ (810cc98 <RCCEx_PLL3_Config+0x160>)
 810cc82:	681b      	ldr	r3, [r3, #0]
 810cc84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810cc88:	2b00      	cmp	r3, #0
 810cc8a:	d0f0      	beq.n	810cc6e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810cc8c:	7bfb      	ldrb	r3, [r7, #15]
}
 810cc8e:	4618      	mov	r0, r3
 810cc90:	3710      	adds	r7, #16
 810cc92:	46bd      	mov	sp, r7
 810cc94:	bd80      	pop	{r7, pc}
 810cc96:	bf00      	nop
 810cc98:	58024400 	.word	0x58024400

0810cc9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810cc9c:	b580      	push	{r7, lr}
 810cc9e:	b082      	sub	sp, #8
 810cca0:	af00      	add	r7, sp, #0
 810cca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810cca4:	687b      	ldr	r3, [r7, #4]
 810cca6:	2b00      	cmp	r3, #0
 810cca8:	d101      	bne.n	810ccae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810ccaa:	2301      	movs	r3, #1
 810ccac:	e049      	b.n	810cd42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810ccae:	687b      	ldr	r3, [r7, #4]
 810ccb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810ccb4:	b2db      	uxtb	r3, r3
 810ccb6:	2b00      	cmp	r3, #0
 810ccb8:	d106      	bne.n	810ccc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810ccba:	687b      	ldr	r3, [r7, #4]
 810ccbc:	2200      	movs	r2, #0
 810ccbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810ccc2:	6878      	ldr	r0, [r7, #4]
 810ccc4:	f7f7 fb16 	bl	81042f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ccc8:	687b      	ldr	r3, [r7, #4]
 810ccca:	2202      	movs	r2, #2
 810cccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810ccd0:	687b      	ldr	r3, [r7, #4]
 810ccd2:	681a      	ldr	r2, [r3, #0]
 810ccd4:	687b      	ldr	r3, [r7, #4]
 810ccd6:	3304      	adds	r3, #4
 810ccd8:	4619      	mov	r1, r3
 810ccda:	4610      	mov	r0, r2
 810ccdc:	f000 fe70 	bl	810d9c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810cce0:	687b      	ldr	r3, [r7, #4]
 810cce2:	2201      	movs	r2, #1
 810cce4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810cce8:	687b      	ldr	r3, [r7, #4]
 810ccea:	2201      	movs	r2, #1
 810ccec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810ccf0:	687b      	ldr	r3, [r7, #4]
 810ccf2:	2201      	movs	r2, #1
 810ccf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810ccf8:	687b      	ldr	r3, [r7, #4]
 810ccfa:	2201      	movs	r2, #1
 810ccfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810cd00:	687b      	ldr	r3, [r7, #4]
 810cd02:	2201      	movs	r2, #1
 810cd04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810cd08:	687b      	ldr	r3, [r7, #4]
 810cd0a:	2201      	movs	r2, #1
 810cd0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810cd10:	687b      	ldr	r3, [r7, #4]
 810cd12:	2201      	movs	r2, #1
 810cd14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810cd18:	687b      	ldr	r3, [r7, #4]
 810cd1a:	2201      	movs	r2, #1
 810cd1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810cd20:	687b      	ldr	r3, [r7, #4]
 810cd22:	2201      	movs	r2, #1
 810cd24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810cd28:	687b      	ldr	r3, [r7, #4]
 810cd2a:	2201      	movs	r2, #1
 810cd2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810cd30:	687b      	ldr	r3, [r7, #4]
 810cd32:	2201      	movs	r2, #1
 810cd34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810cd38:	687b      	ldr	r3, [r7, #4]
 810cd3a:	2201      	movs	r2, #1
 810cd3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810cd40:	2300      	movs	r3, #0
}
 810cd42:	4618      	mov	r0, r3
 810cd44:	3708      	adds	r7, #8
 810cd46:	46bd      	mov	sp, r7
 810cd48:	bd80      	pop	{r7, pc}
	...

0810cd4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 810cd4c:	b480      	push	{r7}
 810cd4e:	b085      	sub	sp, #20
 810cd50:	af00      	add	r7, sp, #0
 810cd52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810cd54:	687b      	ldr	r3, [r7, #4]
 810cd56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810cd5a:	b2db      	uxtb	r3, r3
 810cd5c:	2b01      	cmp	r3, #1
 810cd5e:	d001      	beq.n	810cd64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 810cd60:	2301      	movs	r3, #1
 810cd62:	e04c      	b.n	810cdfe <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810cd64:	687b      	ldr	r3, [r7, #4]
 810cd66:	2202      	movs	r2, #2
 810cd68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810cd6c:	687b      	ldr	r3, [r7, #4]
 810cd6e:	681b      	ldr	r3, [r3, #0]
 810cd70:	4a26      	ldr	r2, [pc, #152]	@ (810ce0c <HAL_TIM_Base_Start+0xc0>)
 810cd72:	4293      	cmp	r3, r2
 810cd74:	d022      	beq.n	810cdbc <HAL_TIM_Base_Start+0x70>
 810cd76:	687b      	ldr	r3, [r7, #4]
 810cd78:	681b      	ldr	r3, [r3, #0]
 810cd7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810cd7e:	d01d      	beq.n	810cdbc <HAL_TIM_Base_Start+0x70>
 810cd80:	687b      	ldr	r3, [r7, #4]
 810cd82:	681b      	ldr	r3, [r3, #0]
 810cd84:	4a22      	ldr	r2, [pc, #136]	@ (810ce10 <HAL_TIM_Base_Start+0xc4>)
 810cd86:	4293      	cmp	r3, r2
 810cd88:	d018      	beq.n	810cdbc <HAL_TIM_Base_Start+0x70>
 810cd8a:	687b      	ldr	r3, [r7, #4]
 810cd8c:	681b      	ldr	r3, [r3, #0]
 810cd8e:	4a21      	ldr	r2, [pc, #132]	@ (810ce14 <HAL_TIM_Base_Start+0xc8>)
 810cd90:	4293      	cmp	r3, r2
 810cd92:	d013      	beq.n	810cdbc <HAL_TIM_Base_Start+0x70>
 810cd94:	687b      	ldr	r3, [r7, #4]
 810cd96:	681b      	ldr	r3, [r3, #0]
 810cd98:	4a1f      	ldr	r2, [pc, #124]	@ (810ce18 <HAL_TIM_Base_Start+0xcc>)
 810cd9a:	4293      	cmp	r3, r2
 810cd9c:	d00e      	beq.n	810cdbc <HAL_TIM_Base_Start+0x70>
 810cd9e:	687b      	ldr	r3, [r7, #4]
 810cda0:	681b      	ldr	r3, [r3, #0]
 810cda2:	4a1e      	ldr	r2, [pc, #120]	@ (810ce1c <HAL_TIM_Base_Start+0xd0>)
 810cda4:	4293      	cmp	r3, r2
 810cda6:	d009      	beq.n	810cdbc <HAL_TIM_Base_Start+0x70>
 810cda8:	687b      	ldr	r3, [r7, #4]
 810cdaa:	681b      	ldr	r3, [r3, #0]
 810cdac:	4a1c      	ldr	r2, [pc, #112]	@ (810ce20 <HAL_TIM_Base_Start+0xd4>)
 810cdae:	4293      	cmp	r3, r2
 810cdb0:	d004      	beq.n	810cdbc <HAL_TIM_Base_Start+0x70>
 810cdb2:	687b      	ldr	r3, [r7, #4]
 810cdb4:	681b      	ldr	r3, [r3, #0]
 810cdb6:	4a1b      	ldr	r2, [pc, #108]	@ (810ce24 <HAL_TIM_Base_Start+0xd8>)
 810cdb8:	4293      	cmp	r3, r2
 810cdba:	d115      	bne.n	810cde8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810cdbc:	687b      	ldr	r3, [r7, #4]
 810cdbe:	681b      	ldr	r3, [r3, #0]
 810cdc0:	689a      	ldr	r2, [r3, #8]
 810cdc2:	4b19      	ldr	r3, [pc, #100]	@ (810ce28 <HAL_TIM_Base_Start+0xdc>)
 810cdc4:	4013      	ands	r3, r2
 810cdc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810cdc8:	68fb      	ldr	r3, [r7, #12]
 810cdca:	2b06      	cmp	r3, #6
 810cdcc:	d015      	beq.n	810cdfa <HAL_TIM_Base_Start+0xae>
 810cdce:	68fb      	ldr	r3, [r7, #12]
 810cdd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810cdd4:	d011      	beq.n	810cdfa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 810cdd6:	687b      	ldr	r3, [r7, #4]
 810cdd8:	681b      	ldr	r3, [r3, #0]
 810cdda:	681a      	ldr	r2, [r3, #0]
 810cddc:	687b      	ldr	r3, [r7, #4]
 810cdde:	681b      	ldr	r3, [r3, #0]
 810cde0:	f042 0201 	orr.w	r2, r2, #1
 810cde4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810cde6:	e008      	b.n	810cdfa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810cde8:	687b      	ldr	r3, [r7, #4]
 810cdea:	681b      	ldr	r3, [r3, #0]
 810cdec:	681a      	ldr	r2, [r3, #0]
 810cdee:	687b      	ldr	r3, [r7, #4]
 810cdf0:	681b      	ldr	r3, [r3, #0]
 810cdf2:	f042 0201 	orr.w	r2, r2, #1
 810cdf6:	601a      	str	r2, [r3, #0]
 810cdf8:	e000      	b.n	810cdfc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810cdfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810cdfc:	2300      	movs	r3, #0
}
 810cdfe:	4618      	mov	r0, r3
 810ce00:	3714      	adds	r7, #20
 810ce02:	46bd      	mov	sp, r7
 810ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce08:	4770      	bx	lr
 810ce0a:	bf00      	nop
 810ce0c:	40010000 	.word	0x40010000
 810ce10:	40000400 	.word	0x40000400
 810ce14:	40000800 	.word	0x40000800
 810ce18:	40000c00 	.word	0x40000c00
 810ce1c:	40010400 	.word	0x40010400
 810ce20:	40001800 	.word	0x40001800
 810ce24:	40014000 	.word	0x40014000
 810ce28:	00010007 	.word	0x00010007

0810ce2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810ce2c:	b480      	push	{r7}
 810ce2e:	b085      	sub	sp, #20
 810ce30:	af00      	add	r7, sp, #0
 810ce32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810ce34:	687b      	ldr	r3, [r7, #4]
 810ce36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810ce3a:	b2db      	uxtb	r3, r3
 810ce3c:	2b01      	cmp	r3, #1
 810ce3e:	d001      	beq.n	810ce44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810ce40:	2301      	movs	r3, #1
 810ce42:	e054      	b.n	810ceee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ce44:	687b      	ldr	r3, [r7, #4]
 810ce46:	2202      	movs	r2, #2
 810ce48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810ce4c:	687b      	ldr	r3, [r7, #4]
 810ce4e:	681b      	ldr	r3, [r3, #0]
 810ce50:	68da      	ldr	r2, [r3, #12]
 810ce52:	687b      	ldr	r3, [r7, #4]
 810ce54:	681b      	ldr	r3, [r3, #0]
 810ce56:	f042 0201 	orr.w	r2, r2, #1
 810ce5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810ce5c:	687b      	ldr	r3, [r7, #4]
 810ce5e:	681b      	ldr	r3, [r3, #0]
 810ce60:	4a26      	ldr	r2, [pc, #152]	@ (810cefc <HAL_TIM_Base_Start_IT+0xd0>)
 810ce62:	4293      	cmp	r3, r2
 810ce64:	d022      	beq.n	810ceac <HAL_TIM_Base_Start_IT+0x80>
 810ce66:	687b      	ldr	r3, [r7, #4]
 810ce68:	681b      	ldr	r3, [r3, #0]
 810ce6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810ce6e:	d01d      	beq.n	810ceac <HAL_TIM_Base_Start_IT+0x80>
 810ce70:	687b      	ldr	r3, [r7, #4]
 810ce72:	681b      	ldr	r3, [r3, #0]
 810ce74:	4a22      	ldr	r2, [pc, #136]	@ (810cf00 <HAL_TIM_Base_Start_IT+0xd4>)
 810ce76:	4293      	cmp	r3, r2
 810ce78:	d018      	beq.n	810ceac <HAL_TIM_Base_Start_IT+0x80>
 810ce7a:	687b      	ldr	r3, [r7, #4]
 810ce7c:	681b      	ldr	r3, [r3, #0]
 810ce7e:	4a21      	ldr	r2, [pc, #132]	@ (810cf04 <HAL_TIM_Base_Start_IT+0xd8>)
 810ce80:	4293      	cmp	r3, r2
 810ce82:	d013      	beq.n	810ceac <HAL_TIM_Base_Start_IT+0x80>
 810ce84:	687b      	ldr	r3, [r7, #4]
 810ce86:	681b      	ldr	r3, [r3, #0]
 810ce88:	4a1f      	ldr	r2, [pc, #124]	@ (810cf08 <HAL_TIM_Base_Start_IT+0xdc>)
 810ce8a:	4293      	cmp	r3, r2
 810ce8c:	d00e      	beq.n	810ceac <HAL_TIM_Base_Start_IT+0x80>
 810ce8e:	687b      	ldr	r3, [r7, #4]
 810ce90:	681b      	ldr	r3, [r3, #0]
 810ce92:	4a1e      	ldr	r2, [pc, #120]	@ (810cf0c <HAL_TIM_Base_Start_IT+0xe0>)
 810ce94:	4293      	cmp	r3, r2
 810ce96:	d009      	beq.n	810ceac <HAL_TIM_Base_Start_IT+0x80>
 810ce98:	687b      	ldr	r3, [r7, #4]
 810ce9a:	681b      	ldr	r3, [r3, #0]
 810ce9c:	4a1c      	ldr	r2, [pc, #112]	@ (810cf10 <HAL_TIM_Base_Start_IT+0xe4>)
 810ce9e:	4293      	cmp	r3, r2
 810cea0:	d004      	beq.n	810ceac <HAL_TIM_Base_Start_IT+0x80>
 810cea2:	687b      	ldr	r3, [r7, #4]
 810cea4:	681b      	ldr	r3, [r3, #0]
 810cea6:	4a1b      	ldr	r2, [pc, #108]	@ (810cf14 <HAL_TIM_Base_Start_IT+0xe8>)
 810cea8:	4293      	cmp	r3, r2
 810ceaa:	d115      	bne.n	810ced8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810ceac:	687b      	ldr	r3, [r7, #4]
 810ceae:	681b      	ldr	r3, [r3, #0]
 810ceb0:	689a      	ldr	r2, [r3, #8]
 810ceb2:	4b19      	ldr	r3, [pc, #100]	@ (810cf18 <HAL_TIM_Base_Start_IT+0xec>)
 810ceb4:	4013      	ands	r3, r2
 810ceb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ceb8:	68fb      	ldr	r3, [r7, #12]
 810ceba:	2b06      	cmp	r3, #6
 810cebc:	d015      	beq.n	810ceea <HAL_TIM_Base_Start_IT+0xbe>
 810cebe:	68fb      	ldr	r3, [r7, #12]
 810cec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810cec4:	d011      	beq.n	810ceea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810cec6:	687b      	ldr	r3, [r7, #4]
 810cec8:	681b      	ldr	r3, [r3, #0]
 810ceca:	681a      	ldr	r2, [r3, #0]
 810cecc:	687b      	ldr	r3, [r7, #4]
 810cece:	681b      	ldr	r3, [r3, #0]
 810ced0:	f042 0201 	orr.w	r2, r2, #1
 810ced4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ced6:	e008      	b.n	810ceea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810ced8:	687b      	ldr	r3, [r7, #4]
 810ceda:	681b      	ldr	r3, [r3, #0]
 810cedc:	681a      	ldr	r2, [r3, #0]
 810cede:	687b      	ldr	r3, [r7, #4]
 810cee0:	681b      	ldr	r3, [r3, #0]
 810cee2:	f042 0201 	orr.w	r2, r2, #1
 810cee6:	601a      	str	r2, [r3, #0]
 810cee8:	e000      	b.n	810ceec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ceea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810ceec:	2300      	movs	r3, #0
}
 810ceee:	4618      	mov	r0, r3
 810cef0:	3714      	adds	r7, #20
 810cef2:	46bd      	mov	sp, r7
 810cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cef8:	4770      	bx	lr
 810cefa:	bf00      	nop
 810cefc:	40010000 	.word	0x40010000
 810cf00:	40000400 	.word	0x40000400
 810cf04:	40000800 	.word	0x40000800
 810cf08:	40000c00 	.word	0x40000c00
 810cf0c:	40010400 	.word	0x40010400
 810cf10:	40001800 	.word	0x40001800
 810cf14:	40014000 	.word	0x40014000
 810cf18:	00010007 	.word	0x00010007

0810cf1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 810cf1c:	b580      	push	{r7, lr}
 810cf1e:	b082      	sub	sp, #8
 810cf20:	af00      	add	r7, sp, #0
 810cf22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810cf24:	687b      	ldr	r3, [r7, #4]
 810cf26:	2b00      	cmp	r3, #0
 810cf28:	d101      	bne.n	810cf2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810cf2a:	2301      	movs	r3, #1
 810cf2c:	e049      	b.n	810cfc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810cf2e:	687b      	ldr	r3, [r7, #4]
 810cf30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810cf34:	b2db      	uxtb	r3, r3
 810cf36:	2b00      	cmp	r3, #0
 810cf38:	d106      	bne.n	810cf48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810cf3a:	687b      	ldr	r3, [r7, #4]
 810cf3c:	2200      	movs	r2, #0
 810cf3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 810cf42:	6878      	ldr	r0, [r7, #4]
 810cf44:	f000 f841 	bl	810cfca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810cf48:	687b      	ldr	r3, [r7, #4]
 810cf4a:	2202      	movs	r2, #2
 810cf4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810cf50:	687b      	ldr	r3, [r7, #4]
 810cf52:	681a      	ldr	r2, [r3, #0]
 810cf54:	687b      	ldr	r3, [r7, #4]
 810cf56:	3304      	adds	r3, #4
 810cf58:	4619      	mov	r1, r3
 810cf5a:	4610      	mov	r0, r2
 810cf5c:	f000 fd30 	bl	810d9c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810cf60:	687b      	ldr	r3, [r7, #4]
 810cf62:	2201      	movs	r2, #1
 810cf64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810cf68:	687b      	ldr	r3, [r7, #4]
 810cf6a:	2201      	movs	r2, #1
 810cf6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810cf70:	687b      	ldr	r3, [r7, #4]
 810cf72:	2201      	movs	r2, #1
 810cf74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810cf78:	687b      	ldr	r3, [r7, #4]
 810cf7a:	2201      	movs	r2, #1
 810cf7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810cf80:	687b      	ldr	r3, [r7, #4]
 810cf82:	2201      	movs	r2, #1
 810cf84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810cf88:	687b      	ldr	r3, [r7, #4]
 810cf8a:	2201      	movs	r2, #1
 810cf8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810cf90:	687b      	ldr	r3, [r7, #4]
 810cf92:	2201      	movs	r2, #1
 810cf94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810cf98:	687b      	ldr	r3, [r7, #4]
 810cf9a:	2201      	movs	r2, #1
 810cf9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810cfa0:	687b      	ldr	r3, [r7, #4]
 810cfa2:	2201      	movs	r2, #1
 810cfa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810cfa8:	687b      	ldr	r3, [r7, #4]
 810cfaa:	2201      	movs	r2, #1
 810cfac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810cfb0:	687b      	ldr	r3, [r7, #4]
 810cfb2:	2201      	movs	r2, #1
 810cfb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810cfb8:	687b      	ldr	r3, [r7, #4]
 810cfba:	2201      	movs	r2, #1
 810cfbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810cfc0:	2300      	movs	r3, #0
}
 810cfc2:	4618      	mov	r0, r3
 810cfc4:	3708      	adds	r7, #8
 810cfc6:	46bd      	mov	sp, r7
 810cfc8:	bd80      	pop	{r7, pc}

0810cfca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 810cfca:	b480      	push	{r7}
 810cfcc:	b083      	sub	sp, #12
 810cfce:	af00      	add	r7, sp, #0
 810cfd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 810cfd2:	bf00      	nop
 810cfd4:	370c      	adds	r7, #12
 810cfd6:	46bd      	mov	sp, r7
 810cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cfdc:	4770      	bx	lr
	...

0810cfe0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 810cfe0:	b580      	push	{r7, lr}
 810cfe2:	b084      	sub	sp, #16
 810cfe4:	af00      	add	r7, sp, #0
 810cfe6:	6078      	str	r0, [r7, #4]
 810cfe8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 810cfea:	683b      	ldr	r3, [r7, #0]
 810cfec:	2b00      	cmp	r3, #0
 810cfee:	d109      	bne.n	810d004 <HAL_TIM_PWM_Start+0x24>
 810cff0:	687b      	ldr	r3, [r7, #4]
 810cff2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 810cff6:	b2db      	uxtb	r3, r3
 810cff8:	2b01      	cmp	r3, #1
 810cffa:	bf14      	ite	ne
 810cffc:	2301      	movne	r3, #1
 810cffe:	2300      	moveq	r3, #0
 810d000:	b2db      	uxtb	r3, r3
 810d002:	e03c      	b.n	810d07e <HAL_TIM_PWM_Start+0x9e>
 810d004:	683b      	ldr	r3, [r7, #0]
 810d006:	2b04      	cmp	r3, #4
 810d008:	d109      	bne.n	810d01e <HAL_TIM_PWM_Start+0x3e>
 810d00a:	687b      	ldr	r3, [r7, #4]
 810d00c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 810d010:	b2db      	uxtb	r3, r3
 810d012:	2b01      	cmp	r3, #1
 810d014:	bf14      	ite	ne
 810d016:	2301      	movne	r3, #1
 810d018:	2300      	moveq	r3, #0
 810d01a:	b2db      	uxtb	r3, r3
 810d01c:	e02f      	b.n	810d07e <HAL_TIM_PWM_Start+0x9e>
 810d01e:	683b      	ldr	r3, [r7, #0]
 810d020:	2b08      	cmp	r3, #8
 810d022:	d109      	bne.n	810d038 <HAL_TIM_PWM_Start+0x58>
 810d024:	687b      	ldr	r3, [r7, #4]
 810d026:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810d02a:	b2db      	uxtb	r3, r3
 810d02c:	2b01      	cmp	r3, #1
 810d02e:	bf14      	ite	ne
 810d030:	2301      	movne	r3, #1
 810d032:	2300      	moveq	r3, #0
 810d034:	b2db      	uxtb	r3, r3
 810d036:	e022      	b.n	810d07e <HAL_TIM_PWM_Start+0x9e>
 810d038:	683b      	ldr	r3, [r7, #0]
 810d03a:	2b0c      	cmp	r3, #12
 810d03c:	d109      	bne.n	810d052 <HAL_TIM_PWM_Start+0x72>
 810d03e:	687b      	ldr	r3, [r7, #4]
 810d040:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810d044:	b2db      	uxtb	r3, r3
 810d046:	2b01      	cmp	r3, #1
 810d048:	bf14      	ite	ne
 810d04a:	2301      	movne	r3, #1
 810d04c:	2300      	moveq	r3, #0
 810d04e:	b2db      	uxtb	r3, r3
 810d050:	e015      	b.n	810d07e <HAL_TIM_PWM_Start+0x9e>
 810d052:	683b      	ldr	r3, [r7, #0]
 810d054:	2b10      	cmp	r3, #16
 810d056:	d109      	bne.n	810d06c <HAL_TIM_PWM_Start+0x8c>
 810d058:	687b      	ldr	r3, [r7, #4]
 810d05a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 810d05e:	b2db      	uxtb	r3, r3
 810d060:	2b01      	cmp	r3, #1
 810d062:	bf14      	ite	ne
 810d064:	2301      	movne	r3, #1
 810d066:	2300      	moveq	r3, #0
 810d068:	b2db      	uxtb	r3, r3
 810d06a:	e008      	b.n	810d07e <HAL_TIM_PWM_Start+0x9e>
 810d06c:	687b      	ldr	r3, [r7, #4]
 810d06e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 810d072:	b2db      	uxtb	r3, r3
 810d074:	2b01      	cmp	r3, #1
 810d076:	bf14      	ite	ne
 810d078:	2301      	movne	r3, #1
 810d07a:	2300      	moveq	r3, #0
 810d07c:	b2db      	uxtb	r3, r3
 810d07e:	2b00      	cmp	r3, #0
 810d080:	d001      	beq.n	810d086 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 810d082:	2301      	movs	r3, #1
 810d084:	e0a1      	b.n	810d1ca <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 810d086:	683b      	ldr	r3, [r7, #0]
 810d088:	2b00      	cmp	r3, #0
 810d08a:	d104      	bne.n	810d096 <HAL_TIM_PWM_Start+0xb6>
 810d08c:	687b      	ldr	r3, [r7, #4]
 810d08e:	2202      	movs	r2, #2
 810d090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810d094:	e023      	b.n	810d0de <HAL_TIM_PWM_Start+0xfe>
 810d096:	683b      	ldr	r3, [r7, #0]
 810d098:	2b04      	cmp	r3, #4
 810d09a:	d104      	bne.n	810d0a6 <HAL_TIM_PWM_Start+0xc6>
 810d09c:	687b      	ldr	r3, [r7, #4]
 810d09e:	2202      	movs	r2, #2
 810d0a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810d0a4:	e01b      	b.n	810d0de <HAL_TIM_PWM_Start+0xfe>
 810d0a6:	683b      	ldr	r3, [r7, #0]
 810d0a8:	2b08      	cmp	r3, #8
 810d0aa:	d104      	bne.n	810d0b6 <HAL_TIM_PWM_Start+0xd6>
 810d0ac:	687b      	ldr	r3, [r7, #4]
 810d0ae:	2202      	movs	r2, #2
 810d0b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810d0b4:	e013      	b.n	810d0de <HAL_TIM_PWM_Start+0xfe>
 810d0b6:	683b      	ldr	r3, [r7, #0]
 810d0b8:	2b0c      	cmp	r3, #12
 810d0ba:	d104      	bne.n	810d0c6 <HAL_TIM_PWM_Start+0xe6>
 810d0bc:	687b      	ldr	r3, [r7, #4]
 810d0be:	2202      	movs	r2, #2
 810d0c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810d0c4:	e00b      	b.n	810d0de <HAL_TIM_PWM_Start+0xfe>
 810d0c6:	683b      	ldr	r3, [r7, #0]
 810d0c8:	2b10      	cmp	r3, #16
 810d0ca:	d104      	bne.n	810d0d6 <HAL_TIM_PWM_Start+0xf6>
 810d0cc:	687b      	ldr	r3, [r7, #4]
 810d0ce:	2202      	movs	r2, #2
 810d0d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810d0d4:	e003      	b.n	810d0de <HAL_TIM_PWM_Start+0xfe>
 810d0d6:	687b      	ldr	r3, [r7, #4]
 810d0d8:	2202      	movs	r2, #2
 810d0da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 810d0de:	687b      	ldr	r3, [r7, #4]
 810d0e0:	681b      	ldr	r3, [r3, #0]
 810d0e2:	2201      	movs	r2, #1
 810d0e4:	6839      	ldr	r1, [r7, #0]
 810d0e6:	4618      	mov	r0, r3
 810d0e8:	f001 f882 	bl	810e1f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 810d0ec:	687b      	ldr	r3, [r7, #4]
 810d0ee:	681b      	ldr	r3, [r3, #0]
 810d0f0:	4a38      	ldr	r2, [pc, #224]	@ (810d1d4 <HAL_TIM_PWM_Start+0x1f4>)
 810d0f2:	4293      	cmp	r3, r2
 810d0f4:	d013      	beq.n	810d11e <HAL_TIM_PWM_Start+0x13e>
 810d0f6:	687b      	ldr	r3, [r7, #4]
 810d0f8:	681b      	ldr	r3, [r3, #0]
 810d0fa:	4a37      	ldr	r2, [pc, #220]	@ (810d1d8 <HAL_TIM_PWM_Start+0x1f8>)
 810d0fc:	4293      	cmp	r3, r2
 810d0fe:	d00e      	beq.n	810d11e <HAL_TIM_PWM_Start+0x13e>
 810d100:	687b      	ldr	r3, [r7, #4]
 810d102:	681b      	ldr	r3, [r3, #0]
 810d104:	4a35      	ldr	r2, [pc, #212]	@ (810d1dc <HAL_TIM_PWM_Start+0x1fc>)
 810d106:	4293      	cmp	r3, r2
 810d108:	d009      	beq.n	810d11e <HAL_TIM_PWM_Start+0x13e>
 810d10a:	687b      	ldr	r3, [r7, #4]
 810d10c:	681b      	ldr	r3, [r3, #0]
 810d10e:	4a34      	ldr	r2, [pc, #208]	@ (810d1e0 <HAL_TIM_PWM_Start+0x200>)
 810d110:	4293      	cmp	r3, r2
 810d112:	d004      	beq.n	810d11e <HAL_TIM_PWM_Start+0x13e>
 810d114:	687b      	ldr	r3, [r7, #4]
 810d116:	681b      	ldr	r3, [r3, #0]
 810d118:	4a32      	ldr	r2, [pc, #200]	@ (810d1e4 <HAL_TIM_PWM_Start+0x204>)
 810d11a:	4293      	cmp	r3, r2
 810d11c:	d101      	bne.n	810d122 <HAL_TIM_PWM_Start+0x142>
 810d11e:	2301      	movs	r3, #1
 810d120:	e000      	b.n	810d124 <HAL_TIM_PWM_Start+0x144>
 810d122:	2300      	movs	r3, #0
 810d124:	2b00      	cmp	r3, #0
 810d126:	d007      	beq.n	810d138 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 810d128:	687b      	ldr	r3, [r7, #4]
 810d12a:	681b      	ldr	r3, [r3, #0]
 810d12c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810d12e:	687b      	ldr	r3, [r7, #4]
 810d130:	681b      	ldr	r3, [r3, #0]
 810d132:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 810d136:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810d138:	687b      	ldr	r3, [r7, #4]
 810d13a:	681b      	ldr	r3, [r3, #0]
 810d13c:	4a25      	ldr	r2, [pc, #148]	@ (810d1d4 <HAL_TIM_PWM_Start+0x1f4>)
 810d13e:	4293      	cmp	r3, r2
 810d140:	d022      	beq.n	810d188 <HAL_TIM_PWM_Start+0x1a8>
 810d142:	687b      	ldr	r3, [r7, #4]
 810d144:	681b      	ldr	r3, [r3, #0]
 810d146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810d14a:	d01d      	beq.n	810d188 <HAL_TIM_PWM_Start+0x1a8>
 810d14c:	687b      	ldr	r3, [r7, #4]
 810d14e:	681b      	ldr	r3, [r3, #0]
 810d150:	4a25      	ldr	r2, [pc, #148]	@ (810d1e8 <HAL_TIM_PWM_Start+0x208>)
 810d152:	4293      	cmp	r3, r2
 810d154:	d018      	beq.n	810d188 <HAL_TIM_PWM_Start+0x1a8>
 810d156:	687b      	ldr	r3, [r7, #4]
 810d158:	681b      	ldr	r3, [r3, #0]
 810d15a:	4a24      	ldr	r2, [pc, #144]	@ (810d1ec <HAL_TIM_PWM_Start+0x20c>)
 810d15c:	4293      	cmp	r3, r2
 810d15e:	d013      	beq.n	810d188 <HAL_TIM_PWM_Start+0x1a8>
 810d160:	687b      	ldr	r3, [r7, #4]
 810d162:	681b      	ldr	r3, [r3, #0]
 810d164:	4a22      	ldr	r2, [pc, #136]	@ (810d1f0 <HAL_TIM_PWM_Start+0x210>)
 810d166:	4293      	cmp	r3, r2
 810d168:	d00e      	beq.n	810d188 <HAL_TIM_PWM_Start+0x1a8>
 810d16a:	687b      	ldr	r3, [r7, #4]
 810d16c:	681b      	ldr	r3, [r3, #0]
 810d16e:	4a1a      	ldr	r2, [pc, #104]	@ (810d1d8 <HAL_TIM_PWM_Start+0x1f8>)
 810d170:	4293      	cmp	r3, r2
 810d172:	d009      	beq.n	810d188 <HAL_TIM_PWM_Start+0x1a8>
 810d174:	687b      	ldr	r3, [r7, #4]
 810d176:	681b      	ldr	r3, [r3, #0]
 810d178:	4a1e      	ldr	r2, [pc, #120]	@ (810d1f4 <HAL_TIM_PWM_Start+0x214>)
 810d17a:	4293      	cmp	r3, r2
 810d17c:	d004      	beq.n	810d188 <HAL_TIM_PWM_Start+0x1a8>
 810d17e:	687b      	ldr	r3, [r7, #4]
 810d180:	681b      	ldr	r3, [r3, #0]
 810d182:	4a16      	ldr	r2, [pc, #88]	@ (810d1dc <HAL_TIM_PWM_Start+0x1fc>)
 810d184:	4293      	cmp	r3, r2
 810d186:	d115      	bne.n	810d1b4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810d188:	687b      	ldr	r3, [r7, #4]
 810d18a:	681b      	ldr	r3, [r3, #0]
 810d18c:	689a      	ldr	r2, [r3, #8]
 810d18e:	4b1a      	ldr	r3, [pc, #104]	@ (810d1f8 <HAL_TIM_PWM_Start+0x218>)
 810d190:	4013      	ands	r3, r2
 810d192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810d194:	68fb      	ldr	r3, [r7, #12]
 810d196:	2b06      	cmp	r3, #6
 810d198:	d015      	beq.n	810d1c6 <HAL_TIM_PWM_Start+0x1e6>
 810d19a:	68fb      	ldr	r3, [r7, #12]
 810d19c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810d1a0:	d011      	beq.n	810d1c6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 810d1a2:	687b      	ldr	r3, [r7, #4]
 810d1a4:	681b      	ldr	r3, [r3, #0]
 810d1a6:	681a      	ldr	r2, [r3, #0]
 810d1a8:	687b      	ldr	r3, [r7, #4]
 810d1aa:	681b      	ldr	r3, [r3, #0]
 810d1ac:	f042 0201 	orr.w	r2, r2, #1
 810d1b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810d1b2:	e008      	b.n	810d1c6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810d1b4:	687b      	ldr	r3, [r7, #4]
 810d1b6:	681b      	ldr	r3, [r3, #0]
 810d1b8:	681a      	ldr	r2, [r3, #0]
 810d1ba:	687b      	ldr	r3, [r7, #4]
 810d1bc:	681b      	ldr	r3, [r3, #0]
 810d1be:	f042 0201 	orr.w	r2, r2, #1
 810d1c2:	601a      	str	r2, [r3, #0]
 810d1c4:	e000      	b.n	810d1c8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810d1c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810d1c8:	2300      	movs	r3, #0
}
 810d1ca:	4618      	mov	r0, r3
 810d1cc:	3710      	adds	r7, #16
 810d1ce:	46bd      	mov	sp, r7
 810d1d0:	bd80      	pop	{r7, pc}
 810d1d2:	bf00      	nop
 810d1d4:	40010000 	.word	0x40010000
 810d1d8:	40010400 	.word	0x40010400
 810d1dc:	40014000 	.word	0x40014000
 810d1e0:	40014400 	.word	0x40014400
 810d1e4:	40014800 	.word	0x40014800
 810d1e8:	40000400 	.word	0x40000400
 810d1ec:	40000800 	.word	0x40000800
 810d1f0:	40000c00 	.word	0x40000c00
 810d1f4:	40001800 	.word	0x40001800
 810d1f8:	00010007 	.word	0x00010007

0810d1fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 810d1fc:	b580      	push	{r7, lr}
 810d1fe:	b086      	sub	sp, #24
 810d200:	af00      	add	r7, sp, #0
 810d202:	6078      	str	r0, [r7, #4]
 810d204:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 810d206:	687b      	ldr	r3, [r7, #4]
 810d208:	2b00      	cmp	r3, #0
 810d20a:	d101      	bne.n	810d210 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 810d20c:	2301      	movs	r3, #1
 810d20e:	e097      	b.n	810d340 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 810d210:	687b      	ldr	r3, [r7, #4]
 810d212:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810d216:	b2db      	uxtb	r3, r3
 810d218:	2b00      	cmp	r3, #0
 810d21a:	d106      	bne.n	810d22a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810d21c:	687b      	ldr	r3, [r7, #4]
 810d21e:	2200      	movs	r2, #0
 810d220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 810d224:	6878      	ldr	r0, [r7, #4]
 810d226:	f7f7 f917 	bl	8104458 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810d22a:	687b      	ldr	r3, [r7, #4]
 810d22c:	2202      	movs	r2, #2
 810d22e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 810d232:	687b      	ldr	r3, [r7, #4]
 810d234:	681b      	ldr	r3, [r3, #0]
 810d236:	689b      	ldr	r3, [r3, #8]
 810d238:	687a      	ldr	r2, [r7, #4]
 810d23a:	6812      	ldr	r2, [r2, #0]
 810d23c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 810d240:	f023 0307 	bic.w	r3, r3, #7
 810d244:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810d246:	687b      	ldr	r3, [r7, #4]
 810d248:	681a      	ldr	r2, [r3, #0]
 810d24a:	687b      	ldr	r3, [r7, #4]
 810d24c:	3304      	adds	r3, #4
 810d24e:	4619      	mov	r1, r3
 810d250:	4610      	mov	r0, r2
 810d252:	f000 fbb5 	bl	810d9c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810d256:	687b      	ldr	r3, [r7, #4]
 810d258:	681b      	ldr	r3, [r3, #0]
 810d25a:	689b      	ldr	r3, [r3, #8]
 810d25c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 810d25e:	687b      	ldr	r3, [r7, #4]
 810d260:	681b      	ldr	r3, [r3, #0]
 810d262:	699b      	ldr	r3, [r3, #24]
 810d264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 810d266:	687b      	ldr	r3, [r7, #4]
 810d268:	681b      	ldr	r3, [r3, #0]
 810d26a:	6a1b      	ldr	r3, [r3, #32]
 810d26c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 810d26e:	683b      	ldr	r3, [r7, #0]
 810d270:	681b      	ldr	r3, [r3, #0]
 810d272:	697a      	ldr	r2, [r7, #20]
 810d274:	4313      	orrs	r3, r2
 810d276:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 810d278:	693b      	ldr	r3, [r7, #16]
 810d27a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810d27e:	f023 0303 	bic.w	r3, r3, #3
 810d282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 810d284:	683b      	ldr	r3, [r7, #0]
 810d286:	689a      	ldr	r2, [r3, #8]
 810d288:	683b      	ldr	r3, [r7, #0]
 810d28a:	699b      	ldr	r3, [r3, #24]
 810d28c:	021b      	lsls	r3, r3, #8
 810d28e:	4313      	orrs	r3, r2
 810d290:	693a      	ldr	r2, [r7, #16]
 810d292:	4313      	orrs	r3, r2
 810d294:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 810d296:	693b      	ldr	r3, [r7, #16]
 810d298:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 810d29c:	f023 030c 	bic.w	r3, r3, #12
 810d2a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 810d2a2:	693b      	ldr	r3, [r7, #16]
 810d2a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810d2a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810d2ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 810d2ae:	683b      	ldr	r3, [r7, #0]
 810d2b0:	68da      	ldr	r2, [r3, #12]
 810d2b2:	683b      	ldr	r3, [r7, #0]
 810d2b4:	69db      	ldr	r3, [r3, #28]
 810d2b6:	021b      	lsls	r3, r3, #8
 810d2b8:	4313      	orrs	r3, r2
 810d2ba:	693a      	ldr	r2, [r7, #16]
 810d2bc:	4313      	orrs	r3, r2
 810d2be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 810d2c0:	683b      	ldr	r3, [r7, #0]
 810d2c2:	691b      	ldr	r3, [r3, #16]
 810d2c4:	011a      	lsls	r2, r3, #4
 810d2c6:	683b      	ldr	r3, [r7, #0]
 810d2c8:	6a1b      	ldr	r3, [r3, #32]
 810d2ca:	031b      	lsls	r3, r3, #12
 810d2cc:	4313      	orrs	r3, r2
 810d2ce:	693a      	ldr	r2, [r7, #16]
 810d2d0:	4313      	orrs	r3, r2
 810d2d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 810d2d4:	68fb      	ldr	r3, [r7, #12]
 810d2d6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 810d2da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 810d2dc:	68fb      	ldr	r3, [r7, #12]
 810d2de:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 810d2e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 810d2e4:	683b      	ldr	r3, [r7, #0]
 810d2e6:	685a      	ldr	r2, [r3, #4]
 810d2e8:	683b      	ldr	r3, [r7, #0]
 810d2ea:	695b      	ldr	r3, [r3, #20]
 810d2ec:	011b      	lsls	r3, r3, #4
 810d2ee:	4313      	orrs	r3, r2
 810d2f0:	68fa      	ldr	r2, [r7, #12]
 810d2f2:	4313      	orrs	r3, r2
 810d2f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 810d2f6:	687b      	ldr	r3, [r7, #4]
 810d2f8:	681b      	ldr	r3, [r3, #0]
 810d2fa:	697a      	ldr	r2, [r7, #20]
 810d2fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 810d2fe:	687b      	ldr	r3, [r7, #4]
 810d300:	681b      	ldr	r3, [r3, #0]
 810d302:	693a      	ldr	r2, [r7, #16]
 810d304:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 810d306:	687b      	ldr	r3, [r7, #4]
 810d308:	681b      	ldr	r3, [r3, #0]
 810d30a:	68fa      	ldr	r2, [r7, #12]
 810d30c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810d30e:	687b      	ldr	r3, [r7, #4]
 810d310:	2201      	movs	r2, #1
 810d312:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 810d316:	687b      	ldr	r3, [r7, #4]
 810d318:	2201      	movs	r2, #1
 810d31a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810d31e:	687b      	ldr	r3, [r7, #4]
 810d320:	2201      	movs	r2, #1
 810d322:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 810d326:	687b      	ldr	r3, [r7, #4]
 810d328:	2201      	movs	r2, #1
 810d32a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810d32e:	687b      	ldr	r3, [r7, #4]
 810d330:	2201      	movs	r2, #1
 810d332:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810d336:	687b      	ldr	r3, [r7, #4]
 810d338:	2201      	movs	r2, #1
 810d33a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810d33e:	2300      	movs	r3, #0
}
 810d340:	4618      	mov	r0, r3
 810d342:	3718      	adds	r7, #24
 810d344:	46bd      	mov	sp, r7
 810d346:	bd80      	pop	{r7, pc}

0810d348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810d348:	b580      	push	{r7, lr}
 810d34a:	b084      	sub	sp, #16
 810d34c:	af00      	add	r7, sp, #0
 810d34e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 810d350:	687b      	ldr	r3, [r7, #4]
 810d352:	681b      	ldr	r3, [r3, #0]
 810d354:	68db      	ldr	r3, [r3, #12]
 810d356:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 810d358:	687b      	ldr	r3, [r7, #4]
 810d35a:	681b      	ldr	r3, [r3, #0]
 810d35c:	691b      	ldr	r3, [r3, #16]
 810d35e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 810d360:	68bb      	ldr	r3, [r7, #8]
 810d362:	f003 0302 	and.w	r3, r3, #2
 810d366:	2b00      	cmp	r3, #0
 810d368:	d020      	beq.n	810d3ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 810d36a:	68fb      	ldr	r3, [r7, #12]
 810d36c:	f003 0302 	and.w	r3, r3, #2
 810d370:	2b00      	cmp	r3, #0
 810d372:	d01b      	beq.n	810d3ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 810d374:	687b      	ldr	r3, [r7, #4]
 810d376:	681b      	ldr	r3, [r3, #0]
 810d378:	f06f 0202 	mvn.w	r2, #2
 810d37c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810d37e:	687b      	ldr	r3, [r7, #4]
 810d380:	2201      	movs	r2, #1
 810d382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810d384:	687b      	ldr	r3, [r7, #4]
 810d386:	681b      	ldr	r3, [r3, #0]
 810d388:	699b      	ldr	r3, [r3, #24]
 810d38a:	f003 0303 	and.w	r3, r3, #3
 810d38e:	2b00      	cmp	r3, #0
 810d390:	d003      	beq.n	810d39a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810d392:	6878      	ldr	r0, [r7, #4]
 810d394:	f000 faf6 	bl	810d984 <HAL_TIM_IC_CaptureCallback>
 810d398:	e005      	b.n	810d3a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810d39a:	6878      	ldr	r0, [r7, #4]
 810d39c:	f000 fae8 	bl	810d970 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810d3a0:	6878      	ldr	r0, [r7, #4]
 810d3a2:	f000 faf9 	bl	810d998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810d3a6:	687b      	ldr	r3, [r7, #4]
 810d3a8:	2200      	movs	r2, #0
 810d3aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 810d3ac:	68bb      	ldr	r3, [r7, #8]
 810d3ae:	f003 0304 	and.w	r3, r3, #4
 810d3b2:	2b00      	cmp	r3, #0
 810d3b4:	d020      	beq.n	810d3f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 810d3b6:	68fb      	ldr	r3, [r7, #12]
 810d3b8:	f003 0304 	and.w	r3, r3, #4
 810d3bc:	2b00      	cmp	r3, #0
 810d3be:	d01b      	beq.n	810d3f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 810d3c0:	687b      	ldr	r3, [r7, #4]
 810d3c2:	681b      	ldr	r3, [r3, #0]
 810d3c4:	f06f 0204 	mvn.w	r2, #4
 810d3c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810d3ca:	687b      	ldr	r3, [r7, #4]
 810d3cc:	2202      	movs	r2, #2
 810d3ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810d3d0:	687b      	ldr	r3, [r7, #4]
 810d3d2:	681b      	ldr	r3, [r3, #0]
 810d3d4:	699b      	ldr	r3, [r3, #24]
 810d3d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810d3da:	2b00      	cmp	r3, #0
 810d3dc:	d003      	beq.n	810d3e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810d3de:	6878      	ldr	r0, [r7, #4]
 810d3e0:	f000 fad0 	bl	810d984 <HAL_TIM_IC_CaptureCallback>
 810d3e4:	e005      	b.n	810d3f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810d3e6:	6878      	ldr	r0, [r7, #4]
 810d3e8:	f000 fac2 	bl	810d970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810d3ec:	6878      	ldr	r0, [r7, #4]
 810d3ee:	f000 fad3 	bl	810d998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810d3f2:	687b      	ldr	r3, [r7, #4]
 810d3f4:	2200      	movs	r2, #0
 810d3f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 810d3f8:	68bb      	ldr	r3, [r7, #8]
 810d3fa:	f003 0308 	and.w	r3, r3, #8
 810d3fe:	2b00      	cmp	r3, #0
 810d400:	d020      	beq.n	810d444 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 810d402:	68fb      	ldr	r3, [r7, #12]
 810d404:	f003 0308 	and.w	r3, r3, #8
 810d408:	2b00      	cmp	r3, #0
 810d40a:	d01b      	beq.n	810d444 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 810d40c:	687b      	ldr	r3, [r7, #4]
 810d40e:	681b      	ldr	r3, [r3, #0]
 810d410:	f06f 0208 	mvn.w	r2, #8
 810d414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810d416:	687b      	ldr	r3, [r7, #4]
 810d418:	2204      	movs	r2, #4
 810d41a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810d41c:	687b      	ldr	r3, [r7, #4]
 810d41e:	681b      	ldr	r3, [r3, #0]
 810d420:	69db      	ldr	r3, [r3, #28]
 810d422:	f003 0303 	and.w	r3, r3, #3
 810d426:	2b00      	cmp	r3, #0
 810d428:	d003      	beq.n	810d432 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810d42a:	6878      	ldr	r0, [r7, #4]
 810d42c:	f000 faaa 	bl	810d984 <HAL_TIM_IC_CaptureCallback>
 810d430:	e005      	b.n	810d43e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810d432:	6878      	ldr	r0, [r7, #4]
 810d434:	f000 fa9c 	bl	810d970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810d438:	6878      	ldr	r0, [r7, #4]
 810d43a:	f000 faad 	bl	810d998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810d43e:	687b      	ldr	r3, [r7, #4]
 810d440:	2200      	movs	r2, #0
 810d442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 810d444:	68bb      	ldr	r3, [r7, #8]
 810d446:	f003 0310 	and.w	r3, r3, #16
 810d44a:	2b00      	cmp	r3, #0
 810d44c:	d020      	beq.n	810d490 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810d44e:	68fb      	ldr	r3, [r7, #12]
 810d450:	f003 0310 	and.w	r3, r3, #16
 810d454:	2b00      	cmp	r3, #0
 810d456:	d01b      	beq.n	810d490 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 810d458:	687b      	ldr	r3, [r7, #4]
 810d45a:	681b      	ldr	r3, [r3, #0]
 810d45c:	f06f 0210 	mvn.w	r2, #16
 810d460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810d462:	687b      	ldr	r3, [r7, #4]
 810d464:	2208      	movs	r2, #8
 810d466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810d468:	687b      	ldr	r3, [r7, #4]
 810d46a:	681b      	ldr	r3, [r3, #0]
 810d46c:	69db      	ldr	r3, [r3, #28]
 810d46e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810d472:	2b00      	cmp	r3, #0
 810d474:	d003      	beq.n	810d47e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810d476:	6878      	ldr	r0, [r7, #4]
 810d478:	f000 fa84 	bl	810d984 <HAL_TIM_IC_CaptureCallback>
 810d47c:	e005      	b.n	810d48a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810d47e:	6878      	ldr	r0, [r7, #4]
 810d480:	f000 fa76 	bl	810d970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810d484:	6878      	ldr	r0, [r7, #4]
 810d486:	f000 fa87 	bl	810d998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810d48a:	687b      	ldr	r3, [r7, #4]
 810d48c:	2200      	movs	r2, #0
 810d48e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 810d490:	68bb      	ldr	r3, [r7, #8]
 810d492:	f003 0301 	and.w	r3, r3, #1
 810d496:	2b00      	cmp	r3, #0
 810d498:	d00c      	beq.n	810d4b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 810d49a:	68fb      	ldr	r3, [r7, #12]
 810d49c:	f003 0301 	and.w	r3, r3, #1
 810d4a0:	2b00      	cmp	r3, #0
 810d4a2:	d007      	beq.n	810d4b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 810d4a4:	687b      	ldr	r3, [r7, #4]
 810d4a6:	681b      	ldr	r3, [r3, #0]
 810d4a8:	f06f 0201 	mvn.w	r2, #1
 810d4ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810d4ae:	6878      	ldr	r0, [r7, #4]
 810d4b0:	f7f6 fc66 	bl	8103d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810d4b4:	68bb      	ldr	r3, [r7, #8]
 810d4b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810d4ba:	2b00      	cmp	r3, #0
 810d4bc:	d104      	bne.n	810d4c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810d4be:	68bb      	ldr	r3, [r7, #8]
 810d4c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810d4c4:	2b00      	cmp	r3, #0
 810d4c6:	d00c      	beq.n	810d4e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810d4c8:	68fb      	ldr	r3, [r7, #12]
 810d4ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810d4ce:	2b00      	cmp	r3, #0
 810d4d0:	d007      	beq.n	810d4e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 810d4d2:	687b      	ldr	r3, [r7, #4]
 810d4d4:	681b      	ldr	r3, [r3, #0]
 810d4d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810d4da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810d4dc:	6878      	ldr	r0, [r7, #4]
 810d4de:	f000 ffc3 	bl	810e468 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 810d4e2:	68bb      	ldr	r3, [r7, #8]
 810d4e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810d4e8:	2b00      	cmp	r3, #0
 810d4ea:	d00c      	beq.n	810d506 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810d4ec:	68fb      	ldr	r3, [r7, #12]
 810d4ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810d4f2:	2b00      	cmp	r3, #0
 810d4f4:	d007      	beq.n	810d506 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810d4f6:	687b      	ldr	r3, [r7, #4]
 810d4f8:	681b      	ldr	r3, [r3, #0]
 810d4fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810d4fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810d500:	6878      	ldr	r0, [r7, #4]
 810d502:	f000 ffbb 	bl	810e47c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 810d506:	68bb      	ldr	r3, [r7, #8]
 810d508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810d50c:	2b00      	cmp	r3, #0
 810d50e:	d00c      	beq.n	810d52a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 810d510:	68fb      	ldr	r3, [r7, #12]
 810d512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810d516:	2b00      	cmp	r3, #0
 810d518:	d007      	beq.n	810d52a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 810d51a:	687b      	ldr	r3, [r7, #4]
 810d51c:	681b      	ldr	r3, [r3, #0]
 810d51e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 810d522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810d524:	6878      	ldr	r0, [r7, #4]
 810d526:	f000 fa41 	bl	810d9ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 810d52a:	68bb      	ldr	r3, [r7, #8]
 810d52c:	f003 0320 	and.w	r3, r3, #32
 810d530:	2b00      	cmp	r3, #0
 810d532:	d00c      	beq.n	810d54e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 810d534:	68fb      	ldr	r3, [r7, #12]
 810d536:	f003 0320 	and.w	r3, r3, #32
 810d53a:	2b00      	cmp	r3, #0
 810d53c:	d007      	beq.n	810d54e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810d53e:	687b      	ldr	r3, [r7, #4]
 810d540:	681b      	ldr	r3, [r3, #0]
 810d542:	f06f 0220 	mvn.w	r2, #32
 810d546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810d548:	6878      	ldr	r0, [r7, #4]
 810d54a:	f000 ff83 	bl	810e454 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810d54e:	bf00      	nop
 810d550:	3710      	adds	r7, #16
 810d552:	46bd      	mov	sp, r7
 810d554:	bd80      	pop	{r7, pc}
	...

0810d558 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 810d558:	b580      	push	{r7, lr}
 810d55a:	b086      	sub	sp, #24
 810d55c:	af00      	add	r7, sp, #0
 810d55e:	60f8      	str	r0, [r7, #12]
 810d560:	60b9      	str	r1, [r7, #8]
 810d562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810d564:	2300      	movs	r3, #0
 810d566:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 810d568:	68fb      	ldr	r3, [r7, #12]
 810d56a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810d56e:	2b01      	cmp	r3, #1
 810d570:	d101      	bne.n	810d576 <HAL_TIM_PWM_ConfigChannel+0x1e>
 810d572:	2302      	movs	r3, #2
 810d574:	e0ff      	b.n	810d776 <HAL_TIM_PWM_ConfigChannel+0x21e>
 810d576:	68fb      	ldr	r3, [r7, #12]
 810d578:	2201      	movs	r2, #1
 810d57a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 810d57e:	687b      	ldr	r3, [r7, #4]
 810d580:	2b14      	cmp	r3, #20
 810d582:	f200 80f0 	bhi.w	810d766 <HAL_TIM_PWM_ConfigChannel+0x20e>
 810d586:	a201      	add	r2, pc, #4	@ (adr r2, 810d58c <HAL_TIM_PWM_ConfigChannel+0x34>)
 810d588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d58c:	0810d5e1 	.word	0x0810d5e1
 810d590:	0810d767 	.word	0x0810d767
 810d594:	0810d767 	.word	0x0810d767
 810d598:	0810d767 	.word	0x0810d767
 810d59c:	0810d621 	.word	0x0810d621
 810d5a0:	0810d767 	.word	0x0810d767
 810d5a4:	0810d767 	.word	0x0810d767
 810d5a8:	0810d767 	.word	0x0810d767
 810d5ac:	0810d663 	.word	0x0810d663
 810d5b0:	0810d767 	.word	0x0810d767
 810d5b4:	0810d767 	.word	0x0810d767
 810d5b8:	0810d767 	.word	0x0810d767
 810d5bc:	0810d6a3 	.word	0x0810d6a3
 810d5c0:	0810d767 	.word	0x0810d767
 810d5c4:	0810d767 	.word	0x0810d767
 810d5c8:	0810d767 	.word	0x0810d767
 810d5cc:	0810d6e5 	.word	0x0810d6e5
 810d5d0:	0810d767 	.word	0x0810d767
 810d5d4:	0810d767 	.word	0x0810d767
 810d5d8:	0810d767 	.word	0x0810d767
 810d5dc:	0810d725 	.word	0x0810d725
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810d5e0:	68fb      	ldr	r3, [r7, #12]
 810d5e2:	681b      	ldr	r3, [r3, #0]
 810d5e4:	68b9      	ldr	r1, [r7, #8]
 810d5e6:	4618      	mov	r0, r3
 810d5e8:	f000 fa90 	bl	810db0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810d5ec:	68fb      	ldr	r3, [r7, #12]
 810d5ee:	681b      	ldr	r3, [r3, #0]
 810d5f0:	699a      	ldr	r2, [r3, #24]
 810d5f2:	68fb      	ldr	r3, [r7, #12]
 810d5f4:	681b      	ldr	r3, [r3, #0]
 810d5f6:	f042 0208 	orr.w	r2, r2, #8
 810d5fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810d5fc:	68fb      	ldr	r3, [r7, #12]
 810d5fe:	681b      	ldr	r3, [r3, #0]
 810d600:	699a      	ldr	r2, [r3, #24]
 810d602:	68fb      	ldr	r3, [r7, #12]
 810d604:	681b      	ldr	r3, [r3, #0]
 810d606:	f022 0204 	bic.w	r2, r2, #4
 810d60a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810d60c:	68fb      	ldr	r3, [r7, #12]
 810d60e:	681b      	ldr	r3, [r3, #0]
 810d610:	6999      	ldr	r1, [r3, #24]
 810d612:	68bb      	ldr	r3, [r7, #8]
 810d614:	691a      	ldr	r2, [r3, #16]
 810d616:	68fb      	ldr	r3, [r7, #12]
 810d618:	681b      	ldr	r3, [r3, #0]
 810d61a:	430a      	orrs	r2, r1
 810d61c:	619a      	str	r2, [r3, #24]
      break;
 810d61e:	e0a5      	b.n	810d76c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810d620:	68fb      	ldr	r3, [r7, #12]
 810d622:	681b      	ldr	r3, [r3, #0]
 810d624:	68b9      	ldr	r1, [r7, #8]
 810d626:	4618      	mov	r0, r3
 810d628:	f000 fb00 	bl	810dc2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810d62c:	68fb      	ldr	r3, [r7, #12]
 810d62e:	681b      	ldr	r3, [r3, #0]
 810d630:	699a      	ldr	r2, [r3, #24]
 810d632:	68fb      	ldr	r3, [r7, #12]
 810d634:	681b      	ldr	r3, [r3, #0]
 810d636:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810d63a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810d63c:	68fb      	ldr	r3, [r7, #12]
 810d63e:	681b      	ldr	r3, [r3, #0]
 810d640:	699a      	ldr	r2, [r3, #24]
 810d642:	68fb      	ldr	r3, [r7, #12]
 810d644:	681b      	ldr	r3, [r3, #0]
 810d646:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810d64a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810d64c:	68fb      	ldr	r3, [r7, #12]
 810d64e:	681b      	ldr	r3, [r3, #0]
 810d650:	6999      	ldr	r1, [r3, #24]
 810d652:	68bb      	ldr	r3, [r7, #8]
 810d654:	691b      	ldr	r3, [r3, #16]
 810d656:	021a      	lsls	r2, r3, #8
 810d658:	68fb      	ldr	r3, [r7, #12]
 810d65a:	681b      	ldr	r3, [r3, #0]
 810d65c:	430a      	orrs	r2, r1
 810d65e:	619a      	str	r2, [r3, #24]
      break;
 810d660:	e084      	b.n	810d76c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810d662:	68fb      	ldr	r3, [r7, #12]
 810d664:	681b      	ldr	r3, [r3, #0]
 810d666:	68b9      	ldr	r1, [r7, #8]
 810d668:	4618      	mov	r0, r3
 810d66a:	f000 fb69 	bl	810dd40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810d66e:	68fb      	ldr	r3, [r7, #12]
 810d670:	681b      	ldr	r3, [r3, #0]
 810d672:	69da      	ldr	r2, [r3, #28]
 810d674:	68fb      	ldr	r3, [r7, #12]
 810d676:	681b      	ldr	r3, [r3, #0]
 810d678:	f042 0208 	orr.w	r2, r2, #8
 810d67c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810d67e:	68fb      	ldr	r3, [r7, #12]
 810d680:	681b      	ldr	r3, [r3, #0]
 810d682:	69da      	ldr	r2, [r3, #28]
 810d684:	68fb      	ldr	r3, [r7, #12]
 810d686:	681b      	ldr	r3, [r3, #0]
 810d688:	f022 0204 	bic.w	r2, r2, #4
 810d68c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810d68e:	68fb      	ldr	r3, [r7, #12]
 810d690:	681b      	ldr	r3, [r3, #0]
 810d692:	69d9      	ldr	r1, [r3, #28]
 810d694:	68bb      	ldr	r3, [r7, #8]
 810d696:	691a      	ldr	r2, [r3, #16]
 810d698:	68fb      	ldr	r3, [r7, #12]
 810d69a:	681b      	ldr	r3, [r3, #0]
 810d69c:	430a      	orrs	r2, r1
 810d69e:	61da      	str	r2, [r3, #28]
      break;
 810d6a0:	e064      	b.n	810d76c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810d6a2:	68fb      	ldr	r3, [r7, #12]
 810d6a4:	681b      	ldr	r3, [r3, #0]
 810d6a6:	68b9      	ldr	r1, [r7, #8]
 810d6a8:	4618      	mov	r0, r3
 810d6aa:	f000 fbd1 	bl	810de50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810d6ae:	68fb      	ldr	r3, [r7, #12]
 810d6b0:	681b      	ldr	r3, [r3, #0]
 810d6b2:	69da      	ldr	r2, [r3, #28]
 810d6b4:	68fb      	ldr	r3, [r7, #12]
 810d6b6:	681b      	ldr	r3, [r3, #0]
 810d6b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810d6bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810d6be:	68fb      	ldr	r3, [r7, #12]
 810d6c0:	681b      	ldr	r3, [r3, #0]
 810d6c2:	69da      	ldr	r2, [r3, #28]
 810d6c4:	68fb      	ldr	r3, [r7, #12]
 810d6c6:	681b      	ldr	r3, [r3, #0]
 810d6c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810d6cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810d6ce:	68fb      	ldr	r3, [r7, #12]
 810d6d0:	681b      	ldr	r3, [r3, #0]
 810d6d2:	69d9      	ldr	r1, [r3, #28]
 810d6d4:	68bb      	ldr	r3, [r7, #8]
 810d6d6:	691b      	ldr	r3, [r3, #16]
 810d6d8:	021a      	lsls	r2, r3, #8
 810d6da:	68fb      	ldr	r3, [r7, #12]
 810d6dc:	681b      	ldr	r3, [r3, #0]
 810d6de:	430a      	orrs	r2, r1
 810d6e0:	61da      	str	r2, [r3, #28]
      break;
 810d6e2:	e043      	b.n	810d76c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810d6e4:	68fb      	ldr	r3, [r7, #12]
 810d6e6:	681b      	ldr	r3, [r3, #0]
 810d6e8:	68b9      	ldr	r1, [r7, #8]
 810d6ea:	4618      	mov	r0, r3
 810d6ec:	f000 fc1a 	bl	810df24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 810d6f0:	68fb      	ldr	r3, [r7, #12]
 810d6f2:	681b      	ldr	r3, [r3, #0]
 810d6f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810d6f6:	68fb      	ldr	r3, [r7, #12]
 810d6f8:	681b      	ldr	r3, [r3, #0]
 810d6fa:	f042 0208 	orr.w	r2, r2, #8
 810d6fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 810d700:	68fb      	ldr	r3, [r7, #12]
 810d702:	681b      	ldr	r3, [r3, #0]
 810d704:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810d706:	68fb      	ldr	r3, [r7, #12]
 810d708:	681b      	ldr	r3, [r3, #0]
 810d70a:	f022 0204 	bic.w	r2, r2, #4
 810d70e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810d710:	68fb      	ldr	r3, [r7, #12]
 810d712:	681b      	ldr	r3, [r3, #0]
 810d714:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810d716:	68bb      	ldr	r3, [r7, #8]
 810d718:	691a      	ldr	r2, [r3, #16]
 810d71a:	68fb      	ldr	r3, [r7, #12]
 810d71c:	681b      	ldr	r3, [r3, #0]
 810d71e:	430a      	orrs	r2, r1
 810d720:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810d722:	e023      	b.n	810d76c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810d724:	68fb      	ldr	r3, [r7, #12]
 810d726:	681b      	ldr	r3, [r3, #0]
 810d728:	68b9      	ldr	r1, [r7, #8]
 810d72a:	4618      	mov	r0, r3
 810d72c:	f000 fc5e 	bl	810dfec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 810d730:	68fb      	ldr	r3, [r7, #12]
 810d732:	681b      	ldr	r3, [r3, #0]
 810d734:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810d736:	68fb      	ldr	r3, [r7, #12]
 810d738:	681b      	ldr	r3, [r3, #0]
 810d73a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810d73e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 810d740:	68fb      	ldr	r3, [r7, #12]
 810d742:	681b      	ldr	r3, [r3, #0]
 810d744:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810d746:	68fb      	ldr	r3, [r7, #12]
 810d748:	681b      	ldr	r3, [r3, #0]
 810d74a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810d74e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810d750:	68fb      	ldr	r3, [r7, #12]
 810d752:	681b      	ldr	r3, [r3, #0]
 810d754:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810d756:	68bb      	ldr	r3, [r7, #8]
 810d758:	691b      	ldr	r3, [r3, #16]
 810d75a:	021a      	lsls	r2, r3, #8
 810d75c:	68fb      	ldr	r3, [r7, #12]
 810d75e:	681b      	ldr	r3, [r3, #0]
 810d760:	430a      	orrs	r2, r1
 810d762:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810d764:	e002      	b.n	810d76c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810d766:	2301      	movs	r3, #1
 810d768:	75fb      	strb	r3, [r7, #23]
      break;
 810d76a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810d76c:	68fb      	ldr	r3, [r7, #12]
 810d76e:	2200      	movs	r2, #0
 810d770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810d774:	7dfb      	ldrb	r3, [r7, #23]
}
 810d776:	4618      	mov	r0, r3
 810d778:	3718      	adds	r7, #24
 810d77a:	46bd      	mov	sp, r7
 810d77c:	bd80      	pop	{r7, pc}
 810d77e:	bf00      	nop

0810d780 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 810d780:	b580      	push	{r7, lr}
 810d782:	b084      	sub	sp, #16
 810d784:	af00      	add	r7, sp, #0
 810d786:	6078      	str	r0, [r7, #4]
 810d788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810d78a:	2300      	movs	r3, #0
 810d78c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810d78e:	687b      	ldr	r3, [r7, #4]
 810d790:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810d794:	2b01      	cmp	r3, #1
 810d796:	d101      	bne.n	810d79c <HAL_TIM_ConfigClockSource+0x1c>
 810d798:	2302      	movs	r3, #2
 810d79a:	e0de      	b.n	810d95a <HAL_TIM_ConfigClockSource+0x1da>
 810d79c:	687b      	ldr	r3, [r7, #4]
 810d79e:	2201      	movs	r2, #1
 810d7a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 810d7a4:	687b      	ldr	r3, [r7, #4]
 810d7a6:	2202      	movs	r2, #2
 810d7a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 810d7ac:	687b      	ldr	r3, [r7, #4]
 810d7ae:	681b      	ldr	r3, [r3, #0]
 810d7b0:	689b      	ldr	r3, [r3, #8]
 810d7b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 810d7b4:	68bb      	ldr	r3, [r7, #8]
 810d7b6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 810d7ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 810d7be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810d7c0:	68bb      	ldr	r3, [r7, #8]
 810d7c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810d7c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 810d7c8:	687b      	ldr	r3, [r7, #4]
 810d7ca:	681b      	ldr	r3, [r3, #0]
 810d7cc:	68ba      	ldr	r2, [r7, #8]
 810d7ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 810d7d0:	683b      	ldr	r3, [r7, #0]
 810d7d2:	681b      	ldr	r3, [r3, #0]
 810d7d4:	4a63      	ldr	r2, [pc, #396]	@ (810d964 <HAL_TIM_ConfigClockSource+0x1e4>)
 810d7d6:	4293      	cmp	r3, r2
 810d7d8:	f000 80a9 	beq.w	810d92e <HAL_TIM_ConfigClockSource+0x1ae>
 810d7dc:	4a61      	ldr	r2, [pc, #388]	@ (810d964 <HAL_TIM_ConfigClockSource+0x1e4>)
 810d7de:	4293      	cmp	r3, r2
 810d7e0:	f200 80ae 	bhi.w	810d940 <HAL_TIM_ConfigClockSource+0x1c0>
 810d7e4:	4a60      	ldr	r2, [pc, #384]	@ (810d968 <HAL_TIM_ConfigClockSource+0x1e8>)
 810d7e6:	4293      	cmp	r3, r2
 810d7e8:	f000 80a1 	beq.w	810d92e <HAL_TIM_ConfigClockSource+0x1ae>
 810d7ec:	4a5e      	ldr	r2, [pc, #376]	@ (810d968 <HAL_TIM_ConfigClockSource+0x1e8>)
 810d7ee:	4293      	cmp	r3, r2
 810d7f0:	f200 80a6 	bhi.w	810d940 <HAL_TIM_ConfigClockSource+0x1c0>
 810d7f4:	4a5d      	ldr	r2, [pc, #372]	@ (810d96c <HAL_TIM_ConfigClockSource+0x1ec>)
 810d7f6:	4293      	cmp	r3, r2
 810d7f8:	f000 8099 	beq.w	810d92e <HAL_TIM_ConfigClockSource+0x1ae>
 810d7fc:	4a5b      	ldr	r2, [pc, #364]	@ (810d96c <HAL_TIM_ConfigClockSource+0x1ec>)
 810d7fe:	4293      	cmp	r3, r2
 810d800:	f200 809e 	bhi.w	810d940 <HAL_TIM_ConfigClockSource+0x1c0>
 810d804:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 810d808:	f000 8091 	beq.w	810d92e <HAL_TIM_ConfigClockSource+0x1ae>
 810d80c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 810d810:	f200 8096 	bhi.w	810d940 <HAL_TIM_ConfigClockSource+0x1c0>
 810d814:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810d818:	f000 8089 	beq.w	810d92e <HAL_TIM_ConfigClockSource+0x1ae>
 810d81c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810d820:	f200 808e 	bhi.w	810d940 <HAL_TIM_ConfigClockSource+0x1c0>
 810d824:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810d828:	d03e      	beq.n	810d8a8 <HAL_TIM_ConfigClockSource+0x128>
 810d82a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810d82e:	f200 8087 	bhi.w	810d940 <HAL_TIM_ConfigClockSource+0x1c0>
 810d832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810d836:	f000 8086 	beq.w	810d946 <HAL_TIM_ConfigClockSource+0x1c6>
 810d83a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810d83e:	d87f      	bhi.n	810d940 <HAL_TIM_ConfigClockSource+0x1c0>
 810d840:	2b70      	cmp	r3, #112	@ 0x70
 810d842:	d01a      	beq.n	810d87a <HAL_TIM_ConfigClockSource+0xfa>
 810d844:	2b70      	cmp	r3, #112	@ 0x70
 810d846:	d87b      	bhi.n	810d940 <HAL_TIM_ConfigClockSource+0x1c0>
 810d848:	2b60      	cmp	r3, #96	@ 0x60
 810d84a:	d050      	beq.n	810d8ee <HAL_TIM_ConfigClockSource+0x16e>
 810d84c:	2b60      	cmp	r3, #96	@ 0x60
 810d84e:	d877      	bhi.n	810d940 <HAL_TIM_ConfigClockSource+0x1c0>
 810d850:	2b50      	cmp	r3, #80	@ 0x50
 810d852:	d03c      	beq.n	810d8ce <HAL_TIM_ConfigClockSource+0x14e>
 810d854:	2b50      	cmp	r3, #80	@ 0x50
 810d856:	d873      	bhi.n	810d940 <HAL_TIM_ConfigClockSource+0x1c0>
 810d858:	2b40      	cmp	r3, #64	@ 0x40
 810d85a:	d058      	beq.n	810d90e <HAL_TIM_ConfigClockSource+0x18e>
 810d85c:	2b40      	cmp	r3, #64	@ 0x40
 810d85e:	d86f      	bhi.n	810d940 <HAL_TIM_ConfigClockSource+0x1c0>
 810d860:	2b30      	cmp	r3, #48	@ 0x30
 810d862:	d064      	beq.n	810d92e <HAL_TIM_ConfigClockSource+0x1ae>
 810d864:	2b30      	cmp	r3, #48	@ 0x30
 810d866:	d86b      	bhi.n	810d940 <HAL_TIM_ConfigClockSource+0x1c0>
 810d868:	2b20      	cmp	r3, #32
 810d86a:	d060      	beq.n	810d92e <HAL_TIM_ConfigClockSource+0x1ae>
 810d86c:	2b20      	cmp	r3, #32
 810d86e:	d867      	bhi.n	810d940 <HAL_TIM_ConfigClockSource+0x1c0>
 810d870:	2b00      	cmp	r3, #0
 810d872:	d05c      	beq.n	810d92e <HAL_TIM_ConfigClockSource+0x1ae>
 810d874:	2b10      	cmp	r3, #16
 810d876:	d05a      	beq.n	810d92e <HAL_TIM_ConfigClockSource+0x1ae>
 810d878:	e062      	b.n	810d940 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810d87a:	687b      	ldr	r3, [r7, #4]
 810d87c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810d87e:	683b      	ldr	r3, [r7, #0]
 810d880:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810d882:	683b      	ldr	r3, [r7, #0]
 810d884:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810d886:	683b      	ldr	r3, [r7, #0]
 810d888:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810d88a:	f000 fc91 	bl	810e1b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 810d88e:	687b      	ldr	r3, [r7, #4]
 810d890:	681b      	ldr	r3, [r3, #0]
 810d892:	689b      	ldr	r3, [r3, #8]
 810d894:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810d896:	68bb      	ldr	r3, [r7, #8]
 810d898:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 810d89c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 810d89e:	687b      	ldr	r3, [r7, #4]
 810d8a0:	681b      	ldr	r3, [r3, #0]
 810d8a2:	68ba      	ldr	r2, [r7, #8]
 810d8a4:	609a      	str	r2, [r3, #8]
      break;
 810d8a6:	e04f      	b.n	810d948 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810d8a8:	687b      	ldr	r3, [r7, #4]
 810d8aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810d8ac:	683b      	ldr	r3, [r7, #0]
 810d8ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810d8b0:	683b      	ldr	r3, [r7, #0]
 810d8b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810d8b4:	683b      	ldr	r3, [r7, #0]
 810d8b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810d8b8:	f000 fc7a 	bl	810e1b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810d8bc:	687b      	ldr	r3, [r7, #4]
 810d8be:	681b      	ldr	r3, [r3, #0]
 810d8c0:	689a      	ldr	r2, [r3, #8]
 810d8c2:	687b      	ldr	r3, [r7, #4]
 810d8c4:	681b      	ldr	r3, [r3, #0]
 810d8c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810d8ca:	609a      	str	r2, [r3, #8]
      break;
 810d8cc:	e03c      	b.n	810d948 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810d8ce:	687b      	ldr	r3, [r7, #4]
 810d8d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810d8d2:	683b      	ldr	r3, [r7, #0]
 810d8d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810d8d6:	683b      	ldr	r3, [r7, #0]
 810d8d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810d8da:	461a      	mov	r2, r3
 810d8dc:	f000 fbec 	bl	810e0b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 810d8e0:	687b      	ldr	r3, [r7, #4]
 810d8e2:	681b      	ldr	r3, [r3, #0]
 810d8e4:	2150      	movs	r1, #80	@ 0x50
 810d8e6:	4618      	mov	r0, r3
 810d8e8:	f000 fc45 	bl	810e176 <TIM_ITRx_SetConfig>
      break;
 810d8ec:	e02c      	b.n	810d948 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 810d8ee:	687b      	ldr	r3, [r7, #4]
 810d8f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810d8f2:	683b      	ldr	r3, [r7, #0]
 810d8f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810d8f6:	683b      	ldr	r3, [r7, #0]
 810d8f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 810d8fa:	461a      	mov	r2, r3
 810d8fc:	f000 fc0b 	bl	810e116 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 810d900:	687b      	ldr	r3, [r7, #4]
 810d902:	681b      	ldr	r3, [r3, #0]
 810d904:	2160      	movs	r1, #96	@ 0x60
 810d906:	4618      	mov	r0, r3
 810d908:	f000 fc35 	bl	810e176 <TIM_ITRx_SetConfig>
      break;
 810d90c:	e01c      	b.n	810d948 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810d90e:	687b      	ldr	r3, [r7, #4]
 810d910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810d912:	683b      	ldr	r3, [r7, #0]
 810d914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810d916:	683b      	ldr	r3, [r7, #0]
 810d918:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810d91a:	461a      	mov	r2, r3
 810d91c:	f000 fbcc 	bl	810e0b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 810d920:	687b      	ldr	r3, [r7, #4]
 810d922:	681b      	ldr	r3, [r3, #0]
 810d924:	2140      	movs	r1, #64	@ 0x40
 810d926:	4618      	mov	r0, r3
 810d928:	f000 fc25 	bl	810e176 <TIM_ITRx_SetConfig>
      break;
 810d92c:	e00c      	b.n	810d948 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810d92e:	687b      	ldr	r3, [r7, #4]
 810d930:	681a      	ldr	r2, [r3, #0]
 810d932:	683b      	ldr	r3, [r7, #0]
 810d934:	681b      	ldr	r3, [r3, #0]
 810d936:	4619      	mov	r1, r3
 810d938:	4610      	mov	r0, r2
 810d93a:	f000 fc1c 	bl	810e176 <TIM_ITRx_SetConfig>
      break;
 810d93e:	e003      	b.n	810d948 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 810d940:	2301      	movs	r3, #1
 810d942:	73fb      	strb	r3, [r7, #15]
      break;
 810d944:	e000      	b.n	810d948 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810d946:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 810d948:	687b      	ldr	r3, [r7, #4]
 810d94a:	2201      	movs	r2, #1
 810d94c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810d950:	687b      	ldr	r3, [r7, #4]
 810d952:	2200      	movs	r2, #0
 810d954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810d958:	7bfb      	ldrb	r3, [r7, #15]
}
 810d95a:	4618      	mov	r0, r3
 810d95c:	3710      	adds	r7, #16
 810d95e:	46bd      	mov	sp, r7
 810d960:	bd80      	pop	{r7, pc}
 810d962:	bf00      	nop
 810d964:	00100040 	.word	0x00100040
 810d968:	00100030 	.word	0x00100030
 810d96c:	00100020 	.word	0x00100020

0810d970 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810d970:	b480      	push	{r7}
 810d972:	b083      	sub	sp, #12
 810d974:	af00      	add	r7, sp, #0
 810d976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810d978:	bf00      	nop
 810d97a:	370c      	adds	r7, #12
 810d97c:	46bd      	mov	sp, r7
 810d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d982:	4770      	bx	lr

0810d984 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810d984:	b480      	push	{r7}
 810d986:	b083      	sub	sp, #12
 810d988:	af00      	add	r7, sp, #0
 810d98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810d98c:	bf00      	nop
 810d98e:	370c      	adds	r7, #12
 810d990:	46bd      	mov	sp, r7
 810d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d996:	4770      	bx	lr

0810d998 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810d998:	b480      	push	{r7}
 810d99a:	b083      	sub	sp, #12
 810d99c:	af00      	add	r7, sp, #0
 810d99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810d9a0:	bf00      	nop
 810d9a2:	370c      	adds	r7, #12
 810d9a4:	46bd      	mov	sp, r7
 810d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d9aa:	4770      	bx	lr

0810d9ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810d9ac:	b480      	push	{r7}
 810d9ae:	b083      	sub	sp, #12
 810d9b0:	af00      	add	r7, sp, #0
 810d9b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810d9b4:	bf00      	nop
 810d9b6:	370c      	adds	r7, #12
 810d9b8:	46bd      	mov	sp, r7
 810d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d9be:	4770      	bx	lr

0810d9c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810d9c0:	b480      	push	{r7}
 810d9c2:	b085      	sub	sp, #20
 810d9c4:	af00      	add	r7, sp, #0
 810d9c6:	6078      	str	r0, [r7, #4]
 810d9c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810d9ca:	687b      	ldr	r3, [r7, #4]
 810d9cc:	681b      	ldr	r3, [r3, #0]
 810d9ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810d9d0:	687b      	ldr	r3, [r7, #4]
 810d9d2:	4a46      	ldr	r2, [pc, #280]	@ (810daec <TIM_Base_SetConfig+0x12c>)
 810d9d4:	4293      	cmp	r3, r2
 810d9d6:	d013      	beq.n	810da00 <TIM_Base_SetConfig+0x40>
 810d9d8:	687b      	ldr	r3, [r7, #4]
 810d9da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810d9de:	d00f      	beq.n	810da00 <TIM_Base_SetConfig+0x40>
 810d9e0:	687b      	ldr	r3, [r7, #4]
 810d9e2:	4a43      	ldr	r2, [pc, #268]	@ (810daf0 <TIM_Base_SetConfig+0x130>)
 810d9e4:	4293      	cmp	r3, r2
 810d9e6:	d00b      	beq.n	810da00 <TIM_Base_SetConfig+0x40>
 810d9e8:	687b      	ldr	r3, [r7, #4]
 810d9ea:	4a42      	ldr	r2, [pc, #264]	@ (810daf4 <TIM_Base_SetConfig+0x134>)
 810d9ec:	4293      	cmp	r3, r2
 810d9ee:	d007      	beq.n	810da00 <TIM_Base_SetConfig+0x40>
 810d9f0:	687b      	ldr	r3, [r7, #4]
 810d9f2:	4a41      	ldr	r2, [pc, #260]	@ (810daf8 <TIM_Base_SetConfig+0x138>)
 810d9f4:	4293      	cmp	r3, r2
 810d9f6:	d003      	beq.n	810da00 <TIM_Base_SetConfig+0x40>
 810d9f8:	687b      	ldr	r3, [r7, #4]
 810d9fa:	4a40      	ldr	r2, [pc, #256]	@ (810dafc <TIM_Base_SetConfig+0x13c>)
 810d9fc:	4293      	cmp	r3, r2
 810d9fe:	d108      	bne.n	810da12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810da00:	68fb      	ldr	r3, [r7, #12]
 810da02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810da06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810da08:	683b      	ldr	r3, [r7, #0]
 810da0a:	685b      	ldr	r3, [r3, #4]
 810da0c:	68fa      	ldr	r2, [r7, #12]
 810da0e:	4313      	orrs	r3, r2
 810da10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810da12:	687b      	ldr	r3, [r7, #4]
 810da14:	4a35      	ldr	r2, [pc, #212]	@ (810daec <TIM_Base_SetConfig+0x12c>)
 810da16:	4293      	cmp	r3, r2
 810da18:	d01f      	beq.n	810da5a <TIM_Base_SetConfig+0x9a>
 810da1a:	687b      	ldr	r3, [r7, #4]
 810da1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810da20:	d01b      	beq.n	810da5a <TIM_Base_SetConfig+0x9a>
 810da22:	687b      	ldr	r3, [r7, #4]
 810da24:	4a32      	ldr	r2, [pc, #200]	@ (810daf0 <TIM_Base_SetConfig+0x130>)
 810da26:	4293      	cmp	r3, r2
 810da28:	d017      	beq.n	810da5a <TIM_Base_SetConfig+0x9a>
 810da2a:	687b      	ldr	r3, [r7, #4]
 810da2c:	4a31      	ldr	r2, [pc, #196]	@ (810daf4 <TIM_Base_SetConfig+0x134>)
 810da2e:	4293      	cmp	r3, r2
 810da30:	d013      	beq.n	810da5a <TIM_Base_SetConfig+0x9a>
 810da32:	687b      	ldr	r3, [r7, #4]
 810da34:	4a30      	ldr	r2, [pc, #192]	@ (810daf8 <TIM_Base_SetConfig+0x138>)
 810da36:	4293      	cmp	r3, r2
 810da38:	d00f      	beq.n	810da5a <TIM_Base_SetConfig+0x9a>
 810da3a:	687b      	ldr	r3, [r7, #4]
 810da3c:	4a2f      	ldr	r2, [pc, #188]	@ (810dafc <TIM_Base_SetConfig+0x13c>)
 810da3e:	4293      	cmp	r3, r2
 810da40:	d00b      	beq.n	810da5a <TIM_Base_SetConfig+0x9a>
 810da42:	687b      	ldr	r3, [r7, #4]
 810da44:	4a2e      	ldr	r2, [pc, #184]	@ (810db00 <TIM_Base_SetConfig+0x140>)
 810da46:	4293      	cmp	r3, r2
 810da48:	d007      	beq.n	810da5a <TIM_Base_SetConfig+0x9a>
 810da4a:	687b      	ldr	r3, [r7, #4]
 810da4c:	4a2d      	ldr	r2, [pc, #180]	@ (810db04 <TIM_Base_SetConfig+0x144>)
 810da4e:	4293      	cmp	r3, r2
 810da50:	d003      	beq.n	810da5a <TIM_Base_SetConfig+0x9a>
 810da52:	687b      	ldr	r3, [r7, #4]
 810da54:	4a2c      	ldr	r2, [pc, #176]	@ (810db08 <TIM_Base_SetConfig+0x148>)
 810da56:	4293      	cmp	r3, r2
 810da58:	d108      	bne.n	810da6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810da5a:	68fb      	ldr	r3, [r7, #12]
 810da5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810da60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810da62:	683b      	ldr	r3, [r7, #0]
 810da64:	68db      	ldr	r3, [r3, #12]
 810da66:	68fa      	ldr	r2, [r7, #12]
 810da68:	4313      	orrs	r3, r2
 810da6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810da6c:	68fb      	ldr	r3, [r7, #12]
 810da6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810da72:	683b      	ldr	r3, [r7, #0]
 810da74:	695b      	ldr	r3, [r3, #20]
 810da76:	4313      	orrs	r3, r2
 810da78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810da7a:	687b      	ldr	r3, [r7, #4]
 810da7c:	68fa      	ldr	r2, [r7, #12]
 810da7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810da80:	683b      	ldr	r3, [r7, #0]
 810da82:	689a      	ldr	r2, [r3, #8]
 810da84:	687b      	ldr	r3, [r7, #4]
 810da86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810da88:	683b      	ldr	r3, [r7, #0]
 810da8a:	681a      	ldr	r2, [r3, #0]
 810da8c:	687b      	ldr	r3, [r7, #4]
 810da8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810da90:	687b      	ldr	r3, [r7, #4]
 810da92:	4a16      	ldr	r2, [pc, #88]	@ (810daec <TIM_Base_SetConfig+0x12c>)
 810da94:	4293      	cmp	r3, r2
 810da96:	d00f      	beq.n	810dab8 <TIM_Base_SetConfig+0xf8>
 810da98:	687b      	ldr	r3, [r7, #4]
 810da9a:	4a18      	ldr	r2, [pc, #96]	@ (810dafc <TIM_Base_SetConfig+0x13c>)
 810da9c:	4293      	cmp	r3, r2
 810da9e:	d00b      	beq.n	810dab8 <TIM_Base_SetConfig+0xf8>
 810daa0:	687b      	ldr	r3, [r7, #4]
 810daa2:	4a17      	ldr	r2, [pc, #92]	@ (810db00 <TIM_Base_SetConfig+0x140>)
 810daa4:	4293      	cmp	r3, r2
 810daa6:	d007      	beq.n	810dab8 <TIM_Base_SetConfig+0xf8>
 810daa8:	687b      	ldr	r3, [r7, #4]
 810daaa:	4a16      	ldr	r2, [pc, #88]	@ (810db04 <TIM_Base_SetConfig+0x144>)
 810daac:	4293      	cmp	r3, r2
 810daae:	d003      	beq.n	810dab8 <TIM_Base_SetConfig+0xf8>
 810dab0:	687b      	ldr	r3, [r7, #4]
 810dab2:	4a15      	ldr	r2, [pc, #84]	@ (810db08 <TIM_Base_SetConfig+0x148>)
 810dab4:	4293      	cmp	r3, r2
 810dab6:	d103      	bne.n	810dac0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810dab8:	683b      	ldr	r3, [r7, #0]
 810daba:	691a      	ldr	r2, [r3, #16]
 810dabc:	687b      	ldr	r3, [r7, #4]
 810dabe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810dac0:	687b      	ldr	r3, [r7, #4]
 810dac2:	2201      	movs	r2, #1
 810dac4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 810dac6:	687b      	ldr	r3, [r7, #4]
 810dac8:	691b      	ldr	r3, [r3, #16]
 810daca:	f003 0301 	and.w	r3, r3, #1
 810dace:	2b01      	cmp	r3, #1
 810dad0:	d105      	bne.n	810dade <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 810dad2:	687b      	ldr	r3, [r7, #4]
 810dad4:	691b      	ldr	r3, [r3, #16]
 810dad6:	f023 0201 	bic.w	r2, r3, #1
 810dada:	687b      	ldr	r3, [r7, #4]
 810dadc:	611a      	str	r2, [r3, #16]
  }
}
 810dade:	bf00      	nop
 810dae0:	3714      	adds	r7, #20
 810dae2:	46bd      	mov	sp, r7
 810dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dae8:	4770      	bx	lr
 810daea:	bf00      	nop
 810daec:	40010000 	.word	0x40010000
 810daf0:	40000400 	.word	0x40000400
 810daf4:	40000800 	.word	0x40000800
 810daf8:	40000c00 	.word	0x40000c00
 810dafc:	40010400 	.word	0x40010400
 810db00:	40014000 	.word	0x40014000
 810db04:	40014400 	.word	0x40014400
 810db08:	40014800 	.word	0x40014800

0810db0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810db0c:	b480      	push	{r7}
 810db0e:	b087      	sub	sp, #28
 810db10:	af00      	add	r7, sp, #0
 810db12:	6078      	str	r0, [r7, #4]
 810db14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810db16:	687b      	ldr	r3, [r7, #4]
 810db18:	6a1b      	ldr	r3, [r3, #32]
 810db1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810db1c:	687b      	ldr	r3, [r7, #4]
 810db1e:	6a1b      	ldr	r3, [r3, #32]
 810db20:	f023 0201 	bic.w	r2, r3, #1
 810db24:	687b      	ldr	r3, [r7, #4]
 810db26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810db28:	687b      	ldr	r3, [r7, #4]
 810db2a:	685b      	ldr	r3, [r3, #4]
 810db2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810db2e:	687b      	ldr	r3, [r7, #4]
 810db30:	699b      	ldr	r3, [r3, #24]
 810db32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810db34:	68fb      	ldr	r3, [r7, #12]
 810db36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810db3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810db3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810db40:	68fb      	ldr	r3, [r7, #12]
 810db42:	f023 0303 	bic.w	r3, r3, #3
 810db46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810db48:	683b      	ldr	r3, [r7, #0]
 810db4a:	681b      	ldr	r3, [r3, #0]
 810db4c:	68fa      	ldr	r2, [r7, #12]
 810db4e:	4313      	orrs	r3, r2
 810db50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810db52:	697b      	ldr	r3, [r7, #20]
 810db54:	f023 0302 	bic.w	r3, r3, #2
 810db58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810db5a:	683b      	ldr	r3, [r7, #0]
 810db5c:	689b      	ldr	r3, [r3, #8]
 810db5e:	697a      	ldr	r2, [r7, #20]
 810db60:	4313      	orrs	r3, r2
 810db62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810db64:	687b      	ldr	r3, [r7, #4]
 810db66:	4a2c      	ldr	r2, [pc, #176]	@ (810dc18 <TIM_OC1_SetConfig+0x10c>)
 810db68:	4293      	cmp	r3, r2
 810db6a:	d00f      	beq.n	810db8c <TIM_OC1_SetConfig+0x80>
 810db6c:	687b      	ldr	r3, [r7, #4]
 810db6e:	4a2b      	ldr	r2, [pc, #172]	@ (810dc1c <TIM_OC1_SetConfig+0x110>)
 810db70:	4293      	cmp	r3, r2
 810db72:	d00b      	beq.n	810db8c <TIM_OC1_SetConfig+0x80>
 810db74:	687b      	ldr	r3, [r7, #4]
 810db76:	4a2a      	ldr	r2, [pc, #168]	@ (810dc20 <TIM_OC1_SetConfig+0x114>)
 810db78:	4293      	cmp	r3, r2
 810db7a:	d007      	beq.n	810db8c <TIM_OC1_SetConfig+0x80>
 810db7c:	687b      	ldr	r3, [r7, #4]
 810db7e:	4a29      	ldr	r2, [pc, #164]	@ (810dc24 <TIM_OC1_SetConfig+0x118>)
 810db80:	4293      	cmp	r3, r2
 810db82:	d003      	beq.n	810db8c <TIM_OC1_SetConfig+0x80>
 810db84:	687b      	ldr	r3, [r7, #4]
 810db86:	4a28      	ldr	r2, [pc, #160]	@ (810dc28 <TIM_OC1_SetConfig+0x11c>)
 810db88:	4293      	cmp	r3, r2
 810db8a:	d10c      	bne.n	810dba6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810db8c:	697b      	ldr	r3, [r7, #20]
 810db8e:	f023 0308 	bic.w	r3, r3, #8
 810db92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810db94:	683b      	ldr	r3, [r7, #0]
 810db96:	68db      	ldr	r3, [r3, #12]
 810db98:	697a      	ldr	r2, [r7, #20]
 810db9a:	4313      	orrs	r3, r2
 810db9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810db9e:	697b      	ldr	r3, [r7, #20]
 810dba0:	f023 0304 	bic.w	r3, r3, #4
 810dba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810dba6:	687b      	ldr	r3, [r7, #4]
 810dba8:	4a1b      	ldr	r2, [pc, #108]	@ (810dc18 <TIM_OC1_SetConfig+0x10c>)
 810dbaa:	4293      	cmp	r3, r2
 810dbac:	d00f      	beq.n	810dbce <TIM_OC1_SetConfig+0xc2>
 810dbae:	687b      	ldr	r3, [r7, #4]
 810dbb0:	4a1a      	ldr	r2, [pc, #104]	@ (810dc1c <TIM_OC1_SetConfig+0x110>)
 810dbb2:	4293      	cmp	r3, r2
 810dbb4:	d00b      	beq.n	810dbce <TIM_OC1_SetConfig+0xc2>
 810dbb6:	687b      	ldr	r3, [r7, #4]
 810dbb8:	4a19      	ldr	r2, [pc, #100]	@ (810dc20 <TIM_OC1_SetConfig+0x114>)
 810dbba:	4293      	cmp	r3, r2
 810dbbc:	d007      	beq.n	810dbce <TIM_OC1_SetConfig+0xc2>
 810dbbe:	687b      	ldr	r3, [r7, #4]
 810dbc0:	4a18      	ldr	r2, [pc, #96]	@ (810dc24 <TIM_OC1_SetConfig+0x118>)
 810dbc2:	4293      	cmp	r3, r2
 810dbc4:	d003      	beq.n	810dbce <TIM_OC1_SetConfig+0xc2>
 810dbc6:	687b      	ldr	r3, [r7, #4]
 810dbc8:	4a17      	ldr	r2, [pc, #92]	@ (810dc28 <TIM_OC1_SetConfig+0x11c>)
 810dbca:	4293      	cmp	r3, r2
 810dbcc:	d111      	bne.n	810dbf2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810dbce:	693b      	ldr	r3, [r7, #16]
 810dbd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810dbd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810dbd6:	693b      	ldr	r3, [r7, #16]
 810dbd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810dbdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810dbde:	683b      	ldr	r3, [r7, #0]
 810dbe0:	695b      	ldr	r3, [r3, #20]
 810dbe2:	693a      	ldr	r2, [r7, #16]
 810dbe4:	4313      	orrs	r3, r2
 810dbe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810dbe8:	683b      	ldr	r3, [r7, #0]
 810dbea:	699b      	ldr	r3, [r3, #24]
 810dbec:	693a      	ldr	r2, [r7, #16]
 810dbee:	4313      	orrs	r3, r2
 810dbf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810dbf2:	687b      	ldr	r3, [r7, #4]
 810dbf4:	693a      	ldr	r2, [r7, #16]
 810dbf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810dbf8:	687b      	ldr	r3, [r7, #4]
 810dbfa:	68fa      	ldr	r2, [r7, #12]
 810dbfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810dbfe:	683b      	ldr	r3, [r7, #0]
 810dc00:	685a      	ldr	r2, [r3, #4]
 810dc02:	687b      	ldr	r3, [r7, #4]
 810dc04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810dc06:	687b      	ldr	r3, [r7, #4]
 810dc08:	697a      	ldr	r2, [r7, #20]
 810dc0a:	621a      	str	r2, [r3, #32]
}
 810dc0c:	bf00      	nop
 810dc0e:	371c      	adds	r7, #28
 810dc10:	46bd      	mov	sp, r7
 810dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dc16:	4770      	bx	lr
 810dc18:	40010000 	.word	0x40010000
 810dc1c:	40010400 	.word	0x40010400
 810dc20:	40014000 	.word	0x40014000
 810dc24:	40014400 	.word	0x40014400
 810dc28:	40014800 	.word	0x40014800

0810dc2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810dc2c:	b480      	push	{r7}
 810dc2e:	b087      	sub	sp, #28
 810dc30:	af00      	add	r7, sp, #0
 810dc32:	6078      	str	r0, [r7, #4]
 810dc34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810dc36:	687b      	ldr	r3, [r7, #4]
 810dc38:	6a1b      	ldr	r3, [r3, #32]
 810dc3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810dc3c:	687b      	ldr	r3, [r7, #4]
 810dc3e:	6a1b      	ldr	r3, [r3, #32]
 810dc40:	f023 0210 	bic.w	r2, r3, #16
 810dc44:	687b      	ldr	r3, [r7, #4]
 810dc46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810dc48:	687b      	ldr	r3, [r7, #4]
 810dc4a:	685b      	ldr	r3, [r3, #4]
 810dc4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810dc4e:	687b      	ldr	r3, [r7, #4]
 810dc50:	699b      	ldr	r3, [r3, #24]
 810dc52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810dc54:	68fb      	ldr	r3, [r7, #12]
 810dc56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810dc5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810dc5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810dc60:	68fb      	ldr	r3, [r7, #12]
 810dc62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810dc66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810dc68:	683b      	ldr	r3, [r7, #0]
 810dc6a:	681b      	ldr	r3, [r3, #0]
 810dc6c:	021b      	lsls	r3, r3, #8
 810dc6e:	68fa      	ldr	r2, [r7, #12]
 810dc70:	4313      	orrs	r3, r2
 810dc72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810dc74:	697b      	ldr	r3, [r7, #20]
 810dc76:	f023 0320 	bic.w	r3, r3, #32
 810dc7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810dc7c:	683b      	ldr	r3, [r7, #0]
 810dc7e:	689b      	ldr	r3, [r3, #8]
 810dc80:	011b      	lsls	r3, r3, #4
 810dc82:	697a      	ldr	r2, [r7, #20]
 810dc84:	4313      	orrs	r3, r2
 810dc86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810dc88:	687b      	ldr	r3, [r7, #4]
 810dc8a:	4a28      	ldr	r2, [pc, #160]	@ (810dd2c <TIM_OC2_SetConfig+0x100>)
 810dc8c:	4293      	cmp	r3, r2
 810dc8e:	d003      	beq.n	810dc98 <TIM_OC2_SetConfig+0x6c>
 810dc90:	687b      	ldr	r3, [r7, #4]
 810dc92:	4a27      	ldr	r2, [pc, #156]	@ (810dd30 <TIM_OC2_SetConfig+0x104>)
 810dc94:	4293      	cmp	r3, r2
 810dc96:	d10d      	bne.n	810dcb4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810dc98:	697b      	ldr	r3, [r7, #20]
 810dc9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810dc9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810dca0:	683b      	ldr	r3, [r7, #0]
 810dca2:	68db      	ldr	r3, [r3, #12]
 810dca4:	011b      	lsls	r3, r3, #4
 810dca6:	697a      	ldr	r2, [r7, #20]
 810dca8:	4313      	orrs	r3, r2
 810dcaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810dcac:	697b      	ldr	r3, [r7, #20]
 810dcae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810dcb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810dcb4:	687b      	ldr	r3, [r7, #4]
 810dcb6:	4a1d      	ldr	r2, [pc, #116]	@ (810dd2c <TIM_OC2_SetConfig+0x100>)
 810dcb8:	4293      	cmp	r3, r2
 810dcba:	d00f      	beq.n	810dcdc <TIM_OC2_SetConfig+0xb0>
 810dcbc:	687b      	ldr	r3, [r7, #4]
 810dcbe:	4a1c      	ldr	r2, [pc, #112]	@ (810dd30 <TIM_OC2_SetConfig+0x104>)
 810dcc0:	4293      	cmp	r3, r2
 810dcc2:	d00b      	beq.n	810dcdc <TIM_OC2_SetConfig+0xb0>
 810dcc4:	687b      	ldr	r3, [r7, #4]
 810dcc6:	4a1b      	ldr	r2, [pc, #108]	@ (810dd34 <TIM_OC2_SetConfig+0x108>)
 810dcc8:	4293      	cmp	r3, r2
 810dcca:	d007      	beq.n	810dcdc <TIM_OC2_SetConfig+0xb0>
 810dccc:	687b      	ldr	r3, [r7, #4]
 810dcce:	4a1a      	ldr	r2, [pc, #104]	@ (810dd38 <TIM_OC2_SetConfig+0x10c>)
 810dcd0:	4293      	cmp	r3, r2
 810dcd2:	d003      	beq.n	810dcdc <TIM_OC2_SetConfig+0xb0>
 810dcd4:	687b      	ldr	r3, [r7, #4]
 810dcd6:	4a19      	ldr	r2, [pc, #100]	@ (810dd3c <TIM_OC2_SetConfig+0x110>)
 810dcd8:	4293      	cmp	r3, r2
 810dcda:	d113      	bne.n	810dd04 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810dcdc:	693b      	ldr	r3, [r7, #16]
 810dcde:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810dce2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810dce4:	693b      	ldr	r3, [r7, #16]
 810dce6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810dcea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810dcec:	683b      	ldr	r3, [r7, #0]
 810dcee:	695b      	ldr	r3, [r3, #20]
 810dcf0:	009b      	lsls	r3, r3, #2
 810dcf2:	693a      	ldr	r2, [r7, #16]
 810dcf4:	4313      	orrs	r3, r2
 810dcf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810dcf8:	683b      	ldr	r3, [r7, #0]
 810dcfa:	699b      	ldr	r3, [r3, #24]
 810dcfc:	009b      	lsls	r3, r3, #2
 810dcfe:	693a      	ldr	r2, [r7, #16]
 810dd00:	4313      	orrs	r3, r2
 810dd02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810dd04:	687b      	ldr	r3, [r7, #4]
 810dd06:	693a      	ldr	r2, [r7, #16]
 810dd08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810dd0a:	687b      	ldr	r3, [r7, #4]
 810dd0c:	68fa      	ldr	r2, [r7, #12]
 810dd0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810dd10:	683b      	ldr	r3, [r7, #0]
 810dd12:	685a      	ldr	r2, [r3, #4]
 810dd14:	687b      	ldr	r3, [r7, #4]
 810dd16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810dd18:	687b      	ldr	r3, [r7, #4]
 810dd1a:	697a      	ldr	r2, [r7, #20]
 810dd1c:	621a      	str	r2, [r3, #32]
}
 810dd1e:	bf00      	nop
 810dd20:	371c      	adds	r7, #28
 810dd22:	46bd      	mov	sp, r7
 810dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dd28:	4770      	bx	lr
 810dd2a:	bf00      	nop
 810dd2c:	40010000 	.word	0x40010000
 810dd30:	40010400 	.word	0x40010400
 810dd34:	40014000 	.word	0x40014000
 810dd38:	40014400 	.word	0x40014400
 810dd3c:	40014800 	.word	0x40014800

0810dd40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810dd40:	b480      	push	{r7}
 810dd42:	b087      	sub	sp, #28
 810dd44:	af00      	add	r7, sp, #0
 810dd46:	6078      	str	r0, [r7, #4]
 810dd48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810dd4a:	687b      	ldr	r3, [r7, #4]
 810dd4c:	6a1b      	ldr	r3, [r3, #32]
 810dd4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810dd50:	687b      	ldr	r3, [r7, #4]
 810dd52:	6a1b      	ldr	r3, [r3, #32]
 810dd54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810dd58:	687b      	ldr	r3, [r7, #4]
 810dd5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810dd5c:	687b      	ldr	r3, [r7, #4]
 810dd5e:	685b      	ldr	r3, [r3, #4]
 810dd60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810dd62:	687b      	ldr	r3, [r7, #4]
 810dd64:	69db      	ldr	r3, [r3, #28]
 810dd66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810dd68:	68fb      	ldr	r3, [r7, #12]
 810dd6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810dd6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810dd72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810dd74:	68fb      	ldr	r3, [r7, #12]
 810dd76:	f023 0303 	bic.w	r3, r3, #3
 810dd7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810dd7c:	683b      	ldr	r3, [r7, #0]
 810dd7e:	681b      	ldr	r3, [r3, #0]
 810dd80:	68fa      	ldr	r2, [r7, #12]
 810dd82:	4313      	orrs	r3, r2
 810dd84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810dd86:	697b      	ldr	r3, [r7, #20]
 810dd88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810dd8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810dd8e:	683b      	ldr	r3, [r7, #0]
 810dd90:	689b      	ldr	r3, [r3, #8]
 810dd92:	021b      	lsls	r3, r3, #8
 810dd94:	697a      	ldr	r2, [r7, #20]
 810dd96:	4313      	orrs	r3, r2
 810dd98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810dd9a:	687b      	ldr	r3, [r7, #4]
 810dd9c:	4a27      	ldr	r2, [pc, #156]	@ (810de3c <TIM_OC3_SetConfig+0xfc>)
 810dd9e:	4293      	cmp	r3, r2
 810dda0:	d003      	beq.n	810ddaa <TIM_OC3_SetConfig+0x6a>
 810dda2:	687b      	ldr	r3, [r7, #4]
 810dda4:	4a26      	ldr	r2, [pc, #152]	@ (810de40 <TIM_OC3_SetConfig+0x100>)
 810dda6:	4293      	cmp	r3, r2
 810dda8:	d10d      	bne.n	810ddc6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810ddaa:	697b      	ldr	r3, [r7, #20]
 810ddac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810ddb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810ddb2:	683b      	ldr	r3, [r7, #0]
 810ddb4:	68db      	ldr	r3, [r3, #12]
 810ddb6:	021b      	lsls	r3, r3, #8
 810ddb8:	697a      	ldr	r2, [r7, #20]
 810ddba:	4313      	orrs	r3, r2
 810ddbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810ddbe:	697b      	ldr	r3, [r7, #20]
 810ddc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810ddc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810ddc6:	687b      	ldr	r3, [r7, #4]
 810ddc8:	4a1c      	ldr	r2, [pc, #112]	@ (810de3c <TIM_OC3_SetConfig+0xfc>)
 810ddca:	4293      	cmp	r3, r2
 810ddcc:	d00f      	beq.n	810ddee <TIM_OC3_SetConfig+0xae>
 810ddce:	687b      	ldr	r3, [r7, #4]
 810ddd0:	4a1b      	ldr	r2, [pc, #108]	@ (810de40 <TIM_OC3_SetConfig+0x100>)
 810ddd2:	4293      	cmp	r3, r2
 810ddd4:	d00b      	beq.n	810ddee <TIM_OC3_SetConfig+0xae>
 810ddd6:	687b      	ldr	r3, [r7, #4]
 810ddd8:	4a1a      	ldr	r2, [pc, #104]	@ (810de44 <TIM_OC3_SetConfig+0x104>)
 810ddda:	4293      	cmp	r3, r2
 810dddc:	d007      	beq.n	810ddee <TIM_OC3_SetConfig+0xae>
 810ddde:	687b      	ldr	r3, [r7, #4]
 810dde0:	4a19      	ldr	r2, [pc, #100]	@ (810de48 <TIM_OC3_SetConfig+0x108>)
 810dde2:	4293      	cmp	r3, r2
 810dde4:	d003      	beq.n	810ddee <TIM_OC3_SetConfig+0xae>
 810dde6:	687b      	ldr	r3, [r7, #4]
 810dde8:	4a18      	ldr	r2, [pc, #96]	@ (810de4c <TIM_OC3_SetConfig+0x10c>)
 810ddea:	4293      	cmp	r3, r2
 810ddec:	d113      	bne.n	810de16 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810ddee:	693b      	ldr	r3, [r7, #16]
 810ddf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810ddf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810ddf6:	693b      	ldr	r3, [r7, #16]
 810ddf8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810ddfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810ddfe:	683b      	ldr	r3, [r7, #0]
 810de00:	695b      	ldr	r3, [r3, #20]
 810de02:	011b      	lsls	r3, r3, #4
 810de04:	693a      	ldr	r2, [r7, #16]
 810de06:	4313      	orrs	r3, r2
 810de08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810de0a:	683b      	ldr	r3, [r7, #0]
 810de0c:	699b      	ldr	r3, [r3, #24]
 810de0e:	011b      	lsls	r3, r3, #4
 810de10:	693a      	ldr	r2, [r7, #16]
 810de12:	4313      	orrs	r3, r2
 810de14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810de16:	687b      	ldr	r3, [r7, #4]
 810de18:	693a      	ldr	r2, [r7, #16]
 810de1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810de1c:	687b      	ldr	r3, [r7, #4]
 810de1e:	68fa      	ldr	r2, [r7, #12]
 810de20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810de22:	683b      	ldr	r3, [r7, #0]
 810de24:	685a      	ldr	r2, [r3, #4]
 810de26:	687b      	ldr	r3, [r7, #4]
 810de28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810de2a:	687b      	ldr	r3, [r7, #4]
 810de2c:	697a      	ldr	r2, [r7, #20]
 810de2e:	621a      	str	r2, [r3, #32]
}
 810de30:	bf00      	nop
 810de32:	371c      	adds	r7, #28
 810de34:	46bd      	mov	sp, r7
 810de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 810de3a:	4770      	bx	lr
 810de3c:	40010000 	.word	0x40010000
 810de40:	40010400 	.word	0x40010400
 810de44:	40014000 	.word	0x40014000
 810de48:	40014400 	.word	0x40014400
 810de4c:	40014800 	.word	0x40014800

0810de50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810de50:	b480      	push	{r7}
 810de52:	b087      	sub	sp, #28
 810de54:	af00      	add	r7, sp, #0
 810de56:	6078      	str	r0, [r7, #4]
 810de58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810de5a:	687b      	ldr	r3, [r7, #4]
 810de5c:	6a1b      	ldr	r3, [r3, #32]
 810de5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810de60:	687b      	ldr	r3, [r7, #4]
 810de62:	6a1b      	ldr	r3, [r3, #32]
 810de64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810de68:	687b      	ldr	r3, [r7, #4]
 810de6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810de6c:	687b      	ldr	r3, [r7, #4]
 810de6e:	685b      	ldr	r3, [r3, #4]
 810de70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810de72:	687b      	ldr	r3, [r7, #4]
 810de74:	69db      	ldr	r3, [r3, #28]
 810de76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810de78:	68fb      	ldr	r3, [r7, #12]
 810de7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810de7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810de82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810de84:	68fb      	ldr	r3, [r7, #12]
 810de86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810de8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810de8c:	683b      	ldr	r3, [r7, #0]
 810de8e:	681b      	ldr	r3, [r3, #0]
 810de90:	021b      	lsls	r3, r3, #8
 810de92:	68fa      	ldr	r2, [r7, #12]
 810de94:	4313      	orrs	r3, r2
 810de96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810de98:	693b      	ldr	r3, [r7, #16]
 810de9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810de9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810dea0:	683b      	ldr	r3, [r7, #0]
 810dea2:	689b      	ldr	r3, [r3, #8]
 810dea4:	031b      	lsls	r3, r3, #12
 810dea6:	693a      	ldr	r2, [r7, #16]
 810dea8:	4313      	orrs	r3, r2
 810deaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810deac:	687b      	ldr	r3, [r7, #4]
 810deae:	4a18      	ldr	r2, [pc, #96]	@ (810df10 <TIM_OC4_SetConfig+0xc0>)
 810deb0:	4293      	cmp	r3, r2
 810deb2:	d00f      	beq.n	810ded4 <TIM_OC4_SetConfig+0x84>
 810deb4:	687b      	ldr	r3, [r7, #4]
 810deb6:	4a17      	ldr	r2, [pc, #92]	@ (810df14 <TIM_OC4_SetConfig+0xc4>)
 810deb8:	4293      	cmp	r3, r2
 810deba:	d00b      	beq.n	810ded4 <TIM_OC4_SetConfig+0x84>
 810debc:	687b      	ldr	r3, [r7, #4]
 810debe:	4a16      	ldr	r2, [pc, #88]	@ (810df18 <TIM_OC4_SetConfig+0xc8>)
 810dec0:	4293      	cmp	r3, r2
 810dec2:	d007      	beq.n	810ded4 <TIM_OC4_SetConfig+0x84>
 810dec4:	687b      	ldr	r3, [r7, #4]
 810dec6:	4a15      	ldr	r2, [pc, #84]	@ (810df1c <TIM_OC4_SetConfig+0xcc>)
 810dec8:	4293      	cmp	r3, r2
 810deca:	d003      	beq.n	810ded4 <TIM_OC4_SetConfig+0x84>
 810decc:	687b      	ldr	r3, [r7, #4]
 810dece:	4a14      	ldr	r2, [pc, #80]	@ (810df20 <TIM_OC4_SetConfig+0xd0>)
 810ded0:	4293      	cmp	r3, r2
 810ded2:	d109      	bne.n	810dee8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810ded4:	697b      	ldr	r3, [r7, #20]
 810ded6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 810deda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810dedc:	683b      	ldr	r3, [r7, #0]
 810dede:	695b      	ldr	r3, [r3, #20]
 810dee0:	019b      	lsls	r3, r3, #6
 810dee2:	697a      	ldr	r2, [r7, #20]
 810dee4:	4313      	orrs	r3, r2
 810dee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810dee8:	687b      	ldr	r3, [r7, #4]
 810deea:	697a      	ldr	r2, [r7, #20]
 810deec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810deee:	687b      	ldr	r3, [r7, #4]
 810def0:	68fa      	ldr	r2, [r7, #12]
 810def2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810def4:	683b      	ldr	r3, [r7, #0]
 810def6:	685a      	ldr	r2, [r3, #4]
 810def8:	687b      	ldr	r3, [r7, #4]
 810defa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810defc:	687b      	ldr	r3, [r7, #4]
 810defe:	693a      	ldr	r2, [r7, #16]
 810df00:	621a      	str	r2, [r3, #32]
}
 810df02:	bf00      	nop
 810df04:	371c      	adds	r7, #28
 810df06:	46bd      	mov	sp, r7
 810df08:	f85d 7b04 	ldr.w	r7, [sp], #4
 810df0c:	4770      	bx	lr
 810df0e:	bf00      	nop
 810df10:	40010000 	.word	0x40010000
 810df14:	40010400 	.word	0x40010400
 810df18:	40014000 	.word	0x40014000
 810df1c:	40014400 	.word	0x40014400
 810df20:	40014800 	.word	0x40014800

0810df24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810df24:	b480      	push	{r7}
 810df26:	b087      	sub	sp, #28
 810df28:	af00      	add	r7, sp, #0
 810df2a:	6078      	str	r0, [r7, #4]
 810df2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810df2e:	687b      	ldr	r3, [r7, #4]
 810df30:	6a1b      	ldr	r3, [r3, #32]
 810df32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810df34:	687b      	ldr	r3, [r7, #4]
 810df36:	6a1b      	ldr	r3, [r3, #32]
 810df38:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810df3c:	687b      	ldr	r3, [r7, #4]
 810df3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810df40:	687b      	ldr	r3, [r7, #4]
 810df42:	685b      	ldr	r3, [r3, #4]
 810df44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810df46:	687b      	ldr	r3, [r7, #4]
 810df48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810df4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810df4c:	68fb      	ldr	r3, [r7, #12]
 810df4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810df52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810df56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810df58:	683b      	ldr	r3, [r7, #0]
 810df5a:	681b      	ldr	r3, [r3, #0]
 810df5c:	68fa      	ldr	r2, [r7, #12]
 810df5e:	4313      	orrs	r3, r2
 810df60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810df62:	693b      	ldr	r3, [r7, #16]
 810df64:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 810df68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810df6a:	683b      	ldr	r3, [r7, #0]
 810df6c:	689b      	ldr	r3, [r3, #8]
 810df6e:	041b      	lsls	r3, r3, #16
 810df70:	693a      	ldr	r2, [r7, #16]
 810df72:	4313      	orrs	r3, r2
 810df74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810df76:	687b      	ldr	r3, [r7, #4]
 810df78:	4a17      	ldr	r2, [pc, #92]	@ (810dfd8 <TIM_OC5_SetConfig+0xb4>)
 810df7a:	4293      	cmp	r3, r2
 810df7c:	d00f      	beq.n	810df9e <TIM_OC5_SetConfig+0x7a>
 810df7e:	687b      	ldr	r3, [r7, #4]
 810df80:	4a16      	ldr	r2, [pc, #88]	@ (810dfdc <TIM_OC5_SetConfig+0xb8>)
 810df82:	4293      	cmp	r3, r2
 810df84:	d00b      	beq.n	810df9e <TIM_OC5_SetConfig+0x7a>
 810df86:	687b      	ldr	r3, [r7, #4]
 810df88:	4a15      	ldr	r2, [pc, #84]	@ (810dfe0 <TIM_OC5_SetConfig+0xbc>)
 810df8a:	4293      	cmp	r3, r2
 810df8c:	d007      	beq.n	810df9e <TIM_OC5_SetConfig+0x7a>
 810df8e:	687b      	ldr	r3, [r7, #4]
 810df90:	4a14      	ldr	r2, [pc, #80]	@ (810dfe4 <TIM_OC5_SetConfig+0xc0>)
 810df92:	4293      	cmp	r3, r2
 810df94:	d003      	beq.n	810df9e <TIM_OC5_SetConfig+0x7a>
 810df96:	687b      	ldr	r3, [r7, #4]
 810df98:	4a13      	ldr	r2, [pc, #76]	@ (810dfe8 <TIM_OC5_SetConfig+0xc4>)
 810df9a:	4293      	cmp	r3, r2
 810df9c:	d109      	bne.n	810dfb2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810df9e:	697b      	ldr	r3, [r7, #20]
 810dfa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810dfa4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810dfa6:	683b      	ldr	r3, [r7, #0]
 810dfa8:	695b      	ldr	r3, [r3, #20]
 810dfaa:	021b      	lsls	r3, r3, #8
 810dfac:	697a      	ldr	r2, [r7, #20]
 810dfae:	4313      	orrs	r3, r2
 810dfb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810dfb2:	687b      	ldr	r3, [r7, #4]
 810dfb4:	697a      	ldr	r2, [r7, #20]
 810dfb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810dfb8:	687b      	ldr	r3, [r7, #4]
 810dfba:	68fa      	ldr	r2, [r7, #12]
 810dfbc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810dfbe:	683b      	ldr	r3, [r7, #0]
 810dfc0:	685a      	ldr	r2, [r3, #4]
 810dfc2:	687b      	ldr	r3, [r7, #4]
 810dfc4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810dfc6:	687b      	ldr	r3, [r7, #4]
 810dfc8:	693a      	ldr	r2, [r7, #16]
 810dfca:	621a      	str	r2, [r3, #32]
}
 810dfcc:	bf00      	nop
 810dfce:	371c      	adds	r7, #28
 810dfd0:	46bd      	mov	sp, r7
 810dfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dfd6:	4770      	bx	lr
 810dfd8:	40010000 	.word	0x40010000
 810dfdc:	40010400 	.word	0x40010400
 810dfe0:	40014000 	.word	0x40014000
 810dfe4:	40014400 	.word	0x40014400
 810dfe8:	40014800 	.word	0x40014800

0810dfec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810dfec:	b480      	push	{r7}
 810dfee:	b087      	sub	sp, #28
 810dff0:	af00      	add	r7, sp, #0
 810dff2:	6078      	str	r0, [r7, #4]
 810dff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810dff6:	687b      	ldr	r3, [r7, #4]
 810dff8:	6a1b      	ldr	r3, [r3, #32]
 810dffa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810dffc:	687b      	ldr	r3, [r7, #4]
 810dffe:	6a1b      	ldr	r3, [r3, #32]
 810e000:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 810e004:	687b      	ldr	r3, [r7, #4]
 810e006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810e008:	687b      	ldr	r3, [r7, #4]
 810e00a:	685b      	ldr	r3, [r3, #4]
 810e00c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810e00e:	687b      	ldr	r3, [r7, #4]
 810e010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810e012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810e014:	68fb      	ldr	r3, [r7, #12]
 810e016:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810e01a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810e01e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810e020:	683b      	ldr	r3, [r7, #0]
 810e022:	681b      	ldr	r3, [r3, #0]
 810e024:	021b      	lsls	r3, r3, #8
 810e026:	68fa      	ldr	r2, [r7, #12]
 810e028:	4313      	orrs	r3, r2
 810e02a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810e02c:	693b      	ldr	r3, [r7, #16]
 810e02e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810e032:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810e034:	683b      	ldr	r3, [r7, #0]
 810e036:	689b      	ldr	r3, [r3, #8]
 810e038:	051b      	lsls	r3, r3, #20
 810e03a:	693a      	ldr	r2, [r7, #16]
 810e03c:	4313      	orrs	r3, r2
 810e03e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810e040:	687b      	ldr	r3, [r7, #4]
 810e042:	4a18      	ldr	r2, [pc, #96]	@ (810e0a4 <TIM_OC6_SetConfig+0xb8>)
 810e044:	4293      	cmp	r3, r2
 810e046:	d00f      	beq.n	810e068 <TIM_OC6_SetConfig+0x7c>
 810e048:	687b      	ldr	r3, [r7, #4]
 810e04a:	4a17      	ldr	r2, [pc, #92]	@ (810e0a8 <TIM_OC6_SetConfig+0xbc>)
 810e04c:	4293      	cmp	r3, r2
 810e04e:	d00b      	beq.n	810e068 <TIM_OC6_SetConfig+0x7c>
 810e050:	687b      	ldr	r3, [r7, #4]
 810e052:	4a16      	ldr	r2, [pc, #88]	@ (810e0ac <TIM_OC6_SetConfig+0xc0>)
 810e054:	4293      	cmp	r3, r2
 810e056:	d007      	beq.n	810e068 <TIM_OC6_SetConfig+0x7c>
 810e058:	687b      	ldr	r3, [r7, #4]
 810e05a:	4a15      	ldr	r2, [pc, #84]	@ (810e0b0 <TIM_OC6_SetConfig+0xc4>)
 810e05c:	4293      	cmp	r3, r2
 810e05e:	d003      	beq.n	810e068 <TIM_OC6_SetConfig+0x7c>
 810e060:	687b      	ldr	r3, [r7, #4]
 810e062:	4a14      	ldr	r2, [pc, #80]	@ (810e0b4 <TIM_OC6_SetConfig+0xc8>)
 810e064:	4293      	cmp	r3, r2
 810e066:	d109      	bne.n	810e07c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810e068:	697b      	ldr	r3, [r7, #20]
 810e06a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 810e06e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810e070:	683b      	ldr	r3, [r7, #0]
 810e072:	695b      	ldr	r3, [r3, #20]
 810e074:	029b      	lsls	r3, r3, #10
 810e076:	697a      	ldr	r2, [r7, #20]
 810e078:	4313      	orrs	r3, r2
 810e07a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810e07c:	687b      	ldr	r3, [r7, #4]
 810e07e:	697a      	ldr	r2, [r7, #20]
 810e080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810e082:	687b      	ldr	r3, [r7, #4]
 810e084:	68fa      	ldr	r2, [r7, #12]
 810e086:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810e088:	683b      	ldr	r3, [r7, #0]
 810e08a:	685a      	ldr	r2, [r3, #4]
 810e08c:	687b      	ldr	r3, [r7, #4]
 810e08e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810e090:	687b      	ldr	r3, [r7, #4]
 810e092:	693a      	ldr	r2, [r7, #16]
 810e094:	621a      	str	r2, [r3, #32]
}
 810e096:	bf00      	nop
 810e098:	371c      	adds	r7, #28
 810e09a:	46bd      	mov	sp, r7
 810e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e0a0:	4770      	bx	lr
 810e0a2:	bf00      	nop
 810e0a4:	40010000 	.word	0x40010000
 810e0a8:	40010400 	.word	0x40010400
 810e0ac:	40014000 	.word	0x40014000
 810e0b0:	40014400 	.word	0x40014400
 810e0b4:	40014800 	.word	0x40014800

0810e0b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810e0b8:	b480      	push	{r7}
 810e0ba:	b087      	sub	sp, #28
 810e0bc:	af00      	add	r7, sp, #0
 810e0be:	60f8      	str	r0, [r7, #12]
 810e0c0:	60b9      	str	r1, [r7, #8]
 810e0c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810e0c4:	68fb      	ldr	r3, [r7, #12]
 810e0c6:	6a1b      	ldr	r3, [r3, #32]
 810e0c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810e0ca:	68fb      	ldr	r3, [r7, #12]
 810e0cc:	6a1b      	ldr	r3, [r3, #32]
 810e0ce:	f023 0201 	bic.w	r2, r3, #1
 810e0d2:	68fb      	ldr	r3, [r7, #12]
 810e0d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810e0d6:	68fb      	ldr	r3, [r7, #12]
 810e0d8:	699b      	ldr	r3, [r3, #24]
 810e0da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810e0dc:	693b      	ldr	r3, [r7, #16]
 810e0de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810e0e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 810e0e4:	687b      	ldr	r3, [r7, #4]
 810e0e6:	011b      	lsls	r3, r3, #4
 810e0e8:	693a      	ldr	r2, [r7, #16]
 810e0ea:	4313      	orrs	r3, r2
 810e0ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810e0ee:	697b      	ldr	r3, [r7, #20]
 810e0f0:	f023 030a 	bic.w	r3, r3, #10
 810e0f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810e0f6:	697a      	ldr	r2, [r7, #20]
 810e0f8:	68bb      	ldr	r3, [r7, #8]
 810e0fa:	4313      	orrs	r3, r2
 810e0fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810e0fe:	68fb      	ldr	r3, [r7, #12]
 810e100:	693a      	ldr	r2, [r7, #16]
 810e102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810e104:	68fb      	ldr	r3, [r7, #12]
 810e106:	697a      	ldr	r2, [r7, #20]
 810e108:	621a      	str	r2, [r3, #32]
}
 810e10a:	bf00      	nop
 810e10c:	371c      	adds	r7, #28
 810e10e:	46bd      	mov	sp, r7
 810e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e114:	4770      	bx	lr

0810e116 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810e116:	b480      	push	{r7}
 810e118:	b087      	sub	sp, #28
 810e11a:	af00      	add	r7, sp, #0
 810e11c:	60f8      	str	r0, [r7, #12]
 810e11e:	60b9      	str	r1, [r7, #8]
 810e120:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 810e122:	68fb      	ldr	r3, [r7, #12]
 810e124:	6a1b      	ldr	r3, [r3, #32]
 810e126:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810e128:	68fb      	ldr	r3, [r7, #12]
 810e12a:	6a1b      	ldr	r3, [r3, #32]
 810e12c:	f023 0210 	bic.w	r2, r3, #16
 810e130:	68fb      	ldr	r3, [r7, #12]
 810e132:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810e134:	68fb      	ldr	r3, [r7, #12]
 810e136:	699b      	ldr	r3, [r3, #24]
 810e138:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810e13a:	693b      	ldr	r3, [r7, #16]
 810e13c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810e140:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810e142:	687b      	ldr	r3, [r7, #4]
 810e144:	031b      	lsls	r3, r3, #12
 810e146:	693a      	ldr	r2, [r7, #16]
 810e148:	4313      	orrs	r3, r2
 810e14a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810e14c:	697b      	ldr	r3, [r7, #20]
 810e14e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 810e152:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 810e154:	68bb      	ldr	r3, [r7, #8]
 810e156:	011b      	lsls	r3, r3, #4
 810e158:	697a      	ldr	r2, [r7, #20]
 810e15a:	4313      	orrs	r3, r2
 810e15c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810e15e:	68fb      	ldr	r3, [r7, #12]
 810e160:	693a      	ldr	r2, [r7, #16]
 810e162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810e164:	68fb      	ldr	r3, [r7, #12]
 810e166:	697a      	ldr	r2, [r7, #20]
 810e168:	621a      	str	r2, [r3, #32]
}
 810e16a:	bf00      	nop
 810e16c:	371c      	adds	r7, #28
 810e16e:	46bd      	mov	sp, r7
 810e170:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e174:	4770      	bx	lr

0810e176 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810e176:	b480      	push	{r7}
 810e178:	b085      	sub	sp, #20
 810e17a:	af00      	add	r7, sp, #0
 810e17c:	6078      	str	r0, [r7, #4]
 810e17e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 810e180:	687b      	ldr	r3, [r7, #4]
 810e182:	689b      	ldr	r3, [r3, #8]
 810e184:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810e186:	68fb      	ldr	r3, [r7, #12]
 810e188:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 810e18c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810e190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810e192:	683a      	ldr	r2, [r7, #0]
 810e194:	68fb      	ldr	r3, [r7, #12]
 810e196:	4313      	orrs	r3, r2
 810e198:	f043 0307 	orr.w	r3, r3, #7
 810e19c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810e19e:	687b      	ldr	r3, [r7, #4]
 810e1a0:	68fa      	ldr	r2, [r7, #12]
 810e1a2:	609a      	str	r2, [r3, #8]
}
 810e1a4:	bf00      	nop
 810e1a6:	3714      	adds	r7, #20
 810e1a8:	46bd      	mov	sp, r7
 810e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e1ae:	4770      	bx	lr

0810e1b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 810e1b0:	b480      	push	{r7}
 810e1b2:	b087      	sub	sp, #28
 810e1b4:	af00      	add	r7, sp, #0
 810e1b6:	60f8      	str	r0, [r7, #12]
 810e1b8:	60b9      	str	r1, [r7, #8]
 810e1ba:	607a      	str	r2, [r7, #4]
 810e1bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810e1be:	68fb      	ldr	r3, [r7, #12]
 810e1c0:	689b      	ldr	r3, [r3, #8]
 810e1c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810e1c4:	697b      	ldr	r3, [r7, #20]
 810e1c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810e1ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810e1cc:	683b      	ldr	r3, [r7, #0]
 810e1ce:	021a      	lsls	r2, r3, #8
 810e1d0:	687b      	ldr	r3, [r7, #4]
 810e1d2:	431a      	orrs	r2, r3
 810e1d4:	68bb      	ldr	r3, [r7, #8]
 810e1d6:	4313      	orrs	r3, r2
 810e1d8:	697a      	ldr	r2, [r7, #20]
 810e1da:	4313      	orrs	r3, r2
 810e1dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810e1de:	68fb      	ldr	r3, [r7, #12]
 810e1e0:	697a      	ldr	r2, [r7, #20]
 810e1e2:	609a      	str	r2, [r3, #8]
}
 810e1e4:	bf00      	nop
 810e1e6:	371c      	adds	r7, #28
 810e1e8:	46bd      	mov	sp, r7
 810e1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e1ee:	4770      	bx	lr

0810e1f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 810e1f0:	b480      	push	{r7}
 810e1f2:	b087      	sub	sp, #28
 810e1f4:	af00      	add	r7, sp, #0
 810e1f6:	60f8      	str	r0, [r7, #12]
 810e1f8:	60b9      	str	r1, [r7, #8]
 810e1fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 810e1fc:	68bb      	ldr	r3, [r7, #8]
 810e1fe:	f003 031f 	and.w	r3, r3, #31
 810e202:	2201      	movs	r2, #1
 810e204:	fa02 f303 	lsl.w	r3, r2, r3
 810e208:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 810e20a:	68fb      	ldr	r3, [r7, #12]
 810e20c:	6a1a      	ldr	r2, [r3, #32]
 810e20e:	697b      	ldr	r3, [r7, #20]
 810e210:	43db      	mvns	r3, r3
 810e212:	401a      	ands	r2, r3
 810e214:	68fb      	ldr	r3, [r7, #12]
 810e216:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 810e218:	68fb      	ldr	r3, [r7, #12]
 810e21a:	6a1a      	ldr	r2, [r3, #32]
 810e21c:	68bb      	ldr	r3, [r7, #8]
 810e21e:	f003 031f 	and.w	r3, r3, #31
 810e222:	6879      	ldr	r1, [r7, #4]
 810e224:	fa01 f303 	lsl.w	r3, r1, r3
 810e228:	431a      	orrs	r2, r3
 810e22a:	68fb      	ldr	r3, [r7, #12]
 810e22c:	621a      	str	r2, [r3, #32]
}
 810e22e:	bf00      	nop
 810e230:	371c      	adds	r7, #28
 810e232:	46bd      	mov	sp, r7
 810e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e238:	4770      	bx	lr
	...

0810e23c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810e23c:	b480      	push	{r7}
 810e23e:	b085      	sub	sp, #20
 810e240:	af00      	add	r7, sp, #0
 810e242:	6078      	str	r0, [r7, #4]
 810e244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810e246:	687b      	ldr	r3, [r7, #4]
 810e248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810e24c:	2b01      	cmp	r3, #1
 810e24e:	d101      	bne.n	810e254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810e250:	2302      	movs	r3, #2
 810e252:	e06d      	b.n	810e330 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810e254:	687b      	ldr	r3, [r7, #4]
 810e256:	2201      	movs	r2, #1
 810e258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810e25c:	687b      	ldr	r3, [r7, #4]
 810e25e:	2202      	movs	r2, #2
 810e260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810e264:	687b      	ldr	r3, [r7, #4]
 810e266:	681b      	ldr	r3, [r3, #0]
 810e268:	685b      	ldr	r3, [r3, #4]
 810e26a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810e26c:	687b      	ldr	r3, [r7, #4]
 810e26e:	681b      	ldr	r3, [r3, #0]
 810e270:	689b      	ldr	r3, [r3, #8]
 810e272:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810e274:	687b      	ldr	r3, [r7, #4]
 810e276:	681b      	ldr	r3, [r3, #0]
 810e278:	4a30      	ldr	r2, [pc, #192]	@ (810e33c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810e27a:	4293      	cmp	r3, r2
 810e27c:	d004      	beq.n	810e288 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810e27e:	687b      	ldr	r3, [r7, #4]
 810e280:	681b      	ldr	r3, [r3, #0]
 810e282:	4a2f      	ldr	r2, [pc, #188]	@ (810e340 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810e284:	4293      	cmp	r3, r2
 810e286:	d108      	bne.n	810e29a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810e288:	68fb      	ldr	r3, [r7, #12]
 810e28a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810e28e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810e290:	683b      	ldr	r3, [r7, #0]
 810e292:	685b      	ldr	r3, [r3, #4]
 810e294:	68fa      	ldr	r2, [r7, #12]
 810e296:	4313      	orrs	r3, r2
 810e298:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810e29a:	68fb      	ldr	r3, [r7, #12]
 810e29c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810e2a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810e2a2:	683b      	ldr	r3, [r7, #0]
 810e2a4:	681b      	ldr	r3, [r3, #0]
 810e2a6:	68fa      	ldr	r2, [r7, #12]
 810e2a8:	4313      	orrs	r3, r2
 810e2aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810e2ac:	687b      	ldr	r3, [r7, #4]
 810e2ae:	681b      	ldr	r3, [r3, #0]
 810e2b0:	68fa      	ldr	r2, [r7, #12]
 810e2b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810e2b4:	687b      	ldr	r3, [r7, #4]
 810e2b6:	681b      	ldr	r3, [r3, #0]
 810e2b8:	4a20      	ldr	r2, [pc, #128]	@ (810e33c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810e2ba:	4293      	cmp	r3, r2
 810e2bc:	d022      	beq.n	810e304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810e2be:	687b      	ldr	r3, [r7, #4]
 810e2c0:	681b      	ldr	r3, [r3, #0]
 810e2c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810e2c6:	d01d      	beq.n	810e304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810e2c8:	687b      	ldr	r3, [r7, #4]
 810e2ca:	681b      	ldr	r3, [r3, #0]
 810e2cc:	4a1d      	ldr	r2, [pc, #116]	@ (810e344 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810e2ce:	4293      	cmp	r3, r2
 810e2d0:	d018      	beq.n	810e304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810e2d2:	687b      	ldr	r3, [r7, #4]
 810e2d4:	681b      	ldr	r3, [r3, #0]
 810e2d6:	4a1c      	ldr	r2, [pc, #112]	@ (810e348 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810e2d8:	4293      	cmp	r3, r2
 810e2da:	d013      	beq.n	810e304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810e2dc:	687b      	ldr	r3, [r7, #4]
 810e2de:	681b      	ldr	r3, [r3, #0]
 810e2e0:	4a1a      	ldr	r2, [pc, #104]	@ (810e34c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810e2e2:	4293      	cmp	r3, r2
 810e2e4:	d00e      	beq.n	810e304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810e2e6:	687b      	ldr	r3, [r7, #4]
 810e2e8:	681b      	ldr	r3, [r3, #0]
 810e2ea:	4a15      	ldr	r2, [pc, #84]	@ (810e340 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810e2ec:	4293      	cmp	r3, r2
 810e2ee:	d009      	beq.n	810e304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810e2f0:	687b      	ldr	r3, [r7, #4]
 810e2f2:	681b      	ldr	r3, [r3, #0]
 810e2f4:	4a16      	ldr	r2, [pc, #88]	@ (810e350 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810e2f6:	4293      	cmp	r3, r2
 810e2f8:	d004      	beq.n	810e304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810e2fa:	687b      	ldr	r3, [r7, #4]
 810e2fc:	681b      	ldr	r3, [r3, #0]
 810e2fe:	4a15      	ldr	r2, [pc, #84]	@ (810e354 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810e300:	4293      	cmp	r3, r2
 810e302:	d10c      	bne.n	810e31e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810e304:	68bb      	ldr	r3, [r7, #8]
 810e306:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810e30a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810e30c:	683b      	ldr	r3, [r7, #0]
 810e30e:	689b      	ldr	r3, [r3, #8]
 810e310:	68ba      	ldr	r2, [r7, #8]
 810e312:	4313      	orrs	r3, r2
 810e314:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810e316:	687b      	ldr	r3, [r7, #4]
 810e318:	681b      	ldr	r3, [r3, #0]
 810e31a:	68ba      	ldr	r2, [r7, #8]
 810e31c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810e31e:	687b      	ldr	r3, [r7, #4]
 810e320:	2201      	movs	r2, #1
 810e322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810e326:	687b      	ldr	r3, [r7, #4]
 810e328:	2200      	movs	r2, #0
 810e32a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810e32e:	2300      	movs	r3, #0
}
 810e330:	4618      	mov	r0, r3
 810e332:	3714      	adds	r7, #20
 810e334:	46bd      	mov	sp, r7
 810e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e33a:	4770      	bx	lr
 810e33c:	40010000 	.word	0x40010000
 810e340:	40010400 	.word	0x40010400
 810e344:	40000400 	.word	0x40000400
 810e348:	40000800 	.word	0x40000800
 810e34c:	40000c00 	.word	0x40000c00
 810e350:	40001800 	.word	0x40001800
 810e354:	40014000 	.word	0x40014000

0810e358 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810e358:	b480      	push	{r7}
 810e35a:	b085      	sub	sp, #20
 810e35c:	af00      	add	r7, sp, #0
 810e35e:	6078      	str	r0, [r7, #4]
 810e360:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810e362:	2300      	movs	r3, #0
 810e364:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 810e366:	687b      	ldr	r3, [r7, #4]
 810e368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810e36c:	2b01      	cmp	r3, #1
 810e36e:	d101      	bne.n	810e374 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810e370:	2302      	movs	r3, #2
 810e372:	e065      	b.n	810e440 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810e374:	687b      	ldr	r3, [r7, #4]
 810e376:	2201      	movs	r2, #1
 810e378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810e37c:	68fb      	ldr	r3, [r7, #12]
 810e37e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810e382:	683b      	ldr	r3, [r7, #0]
 810e384:	68db      	ldr	r3, [r3, #12]
 810e386:	4313      	orrs	r3, r2
 810e388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810e38a:	68fb      	ldr	r3, [r7, #12]
 810e38c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810e390:	683b      	ldr	r3, [r7, #0]
 810e392:	689b      	ldr	r3, [r3, #8]
 810e394:	4313      	orrs	r3, r2
 810e396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810e398:	68fb      	ldr	r3, [r7, #12]
 810e39a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 810e39e:	683b      	ldr	r3, [r7, #0]
 810e3a0:	685b      	ldr	r3, [r3, #4]
 810e3a2:	4313      	orrs	r3, r2
 810e3a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810e3a6:	68fb      	ldr	r3, [r7, #12]
 810e3a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 810e3ac:	683b      	ldr	r3, [r7, #0]
 810e3ae:	681b      	ldr	r3, [r3, #0]
 810e3b0:	4313      	orrs	r3, r2
 810e3b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810e3b4:	68fb      	ldr	r3, [r7, #12]
 810e3b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810e3ba:	683b      	ldr	r3, [r7, #0]
 810e3bc:	691b      	ldr	r3, [r3, #16]
 810e3be:	4313      	orrs	r3, r2
 810e3c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810e3c2:	68fb      	ldr	r3, [r7, #12]
 810e3c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 810e3c8:	683b      	ldr	r3, [r7, #0]
 810e3ca:	695b      	ldr	r3, [r3, #20]
 810e3cc:	4313      	orrs	r3, r2
 810e3ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810e3d0:	68fb      	ldr	r3, [r7, #12]
 810e3d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 810e3d6:	683b      	ldr	r3, [r7, #0]
 810e3d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810e3da:	4313      	orrs	r3, r2
 810e3dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810e3de:	68fb      	ldr	r3, [r7, #12]
 810e3e0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 810e3e4:	683b      	ldr	r3, [r7, #0]
 810e3e6:	699b      	ldr	r3, [r3, #24]
 810e3e8:	041b      	lsls	r3, r3, #16
 810e3ea:	4313      	orrs	r3, r2
 810e3ec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810e3ee:	687b      	ldr	r3, [r7, #4]
 810e3f0:	681b      	ldr	r3, [r3, #0]
 810e3f2:	4a16      	ldr	r2, [pc, #88]	@ (810e44c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810e3f4:	4293      	cmp	r3, r2
 810e3f6:	d004      	beq.n	810e402 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810e3f8:	687b      	ldr	r3, [r7, #4]
 810e3fa:	681b      	ldr	r3, [r3, #0]
 810e3fc:	4a14      	ldr	r2, [pc, #80]	@ (810e450 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810e3fe:	4293      	cmp	r3, r2
 810e400:	d115      	bne.n	810e42e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810e402:	68fb      	ldr	r3, [r7, #12]
 810e404:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 810e408:	683b      	ldr	r3, [r7, #0]
 810e40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e40c:	051b      	lsls	r3, r3, #20
 810e40e:	4313      	orrs	r3, r2
 810e410:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810e412:	68fb      	ldr	r3, [r7, #12]
 810e414:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 810e418:	683b      	ldr	r3, [r7, #0]
 810e41a:	69db      	ldr	r3, [r3, #28]
 810e41c:	4313      	orrs	r3, r2
 810e41e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810e420:	68fb      	ldr	r3, [r7, #12]
 810e422:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 810e426:	683b      	ldr	r3, [r7, #0]
 810e428:	6a1b      	ldr	r3, [r3, #32]
 810e42a:	4313      	orrs	r3, r2
 810e42c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810e42e:	687b      	ldr	r3, [r7, #4]
 810e430:	681b      	ldr	r3, [r3, #0]
 810e432:	68fa      	ldr	r2, [r7, #12]
 810e434:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 810e436:	687b      	ldr	r3, [r7, #4]
 810e438:	2200      	movs	r2, #0
 810e43a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810e43e:	2300      	movs	r3, #0
}
 810e440:	4618      	mov	r0, r3
 810e442:	3714      	adds	r7, #20
 810e444:	46bd      	mov	sp, r7
 810e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e44a:	4770      	bx	lr
 810e44c:	40010000 	.word	0x40010000
 810e450:	40010400 	.word	0x40010400

0810e454 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810e454:	b480      	push	{r7}
 810e456:	b083      	sub	sp, #12
 810e458:	af00      	add	r7, sp, #0
 810e45a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810e45c:	bf00      	nop
 810e45e:	370c      	adds	r7, #12
 810e460:	46bd      	mov	sp, r7
 810e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e466:	4770      	bx	lr

0810e468 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810e468:	b480      	push	{r7}
 810e46a:	b083      	sub	sp, #12
 810e46c:	af00      	add	r7, sp, #0
 810e46e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810e470:	bf00      	nop
 810e472:	370c      	adds	r7, #12
 810e474:	46bd      	mov	sp, r7
 810e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e47a:	4770      	bx	lr

0810e47c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810e47c:	b480      	push	{r7}
 810e47e:	b083      	sub	sp, #12
 810e480:	af00      	add	r7, sp, #0
 810e482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810e484:	bf00      	nop
 810e486:	370c      	adds	r7, #12
 810e488:	46bd      	mov	sp, r7
 810e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e48e:	4770      	bx	lr

0810e490 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810e490:	b580      	push	{r7, lr}
 810e492:	b082      	sub	sp, #8
 810e494:	af00      	add	r7, sp, #0
 810e496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810e498:	687b      	ldr	r3, [r7, #4]
 810e49a:	2b00      	cmp	r3, #0
 810e49c:	d101      	bne.n	810e4a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810e49e:	2301      	movs	r3, #1
 810e4a0:	e042      	b.n	810e528 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810e4a2:	687b      	ldr	r3, [r7, #4]
 810e4a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810e4a8:	2b00      	cmp	r3, #0
 810e4aa:	d106      	bne.n	810e4ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810e4ac:	687b      	ldr	r3, [r7, #4]
 810e4ae:	2200      	movs	r2, #0
 810e4b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810e4b4:	6878      	ldr	r0, [r7, #4]
 810e4b6:	f7f6 f8bd 	bl	8104634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810e4ba:	687b      	ldr	r3, [r7, #4]
 810e4bc:	2224      	movs	r2, #36	@ 0x24
 810e4be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810e4c2:	687b      	ldr	r3, [r7, #4]
 810e4c4:	681b      	ldr	r3, [r3, #0]
 810e4c6:	681a      	ldr	r2, [r3, #0]
 810e4c8:	687b      	ldr	r3, [r7, #4]
 810e4ca:	681b      	ldr	r3, [r3, #0]
 810e4cc:	f022 0201 	bic.w	r2, r2, #1
 810e4d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810e4d2:	687b      	ldr	r3, [r7, #4]
 810e4d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810e4d6:	2b00      	cmp	r3, #0
 810e4d8:	d002      	beq.n	810e4e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810e4da:	6878      	ldr	r0, [r7, #4]
 810e4dc:	f001 fb0c 	bl	810faf8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810e4e0:	6878      	ldr	r0, [r7, #4]
 810e4e2:	f000 fda1 	bl	810f028 <UART_SetConfig>
 810e4e6:	4603      	mov	r3, r0
 810e4e8:	2b01      	cmp	r3, #1
 810e4ea:	d101      	bne.n	810e4f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 810e4ec:	2301      	movs	r3, #1
 810e4ee:	e01b      	b.n	810e528 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810e4f0:	687b      	ldr	r3, [r7, #4]
 810e4f2:	681b      	ldr	r3, [r3, #0]
 810e4f4:	685a      	ldr	r2, [r3, #4]
 810e4f6:	687b      	ldr	r3, [r7, #4]
 810e4f8:	681b      	ldr	r3, [r3, #0]
 810e4fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810e4fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810e500:	687b      	ldr	r3, [r7, #4]
 810e502:	681b      	ldr	r3, [r3, #0]
 810e504:	689a      	ldr	r2, [r3, #8]
 810e506:	687b      	ldr	r3, [r7, #4]
 810e508:	681b      	ldr	r3, [r3, #0]
 810e50a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810e50e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810e510:	687b      	ldr	r3, [r7, #4]
 810e512:	681b      	ldr	r3, [r3, #0]
 810e514:	681a      	ldr	r2, [r3, #0]
 810e516:	687b      	ldr	r3, [r7, #4]
 810e518:	681b      	ldr	r3, [r3, #0]
 810e51a:	f042 0201 	orr.w	r2, r2, #1
 810e51e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810e520:	6878      	ldr	r0, [r7, #4]
 810e522:	f001 fb8b 	bl	810fc3c <UART_CheckIdleState>
 810e526:	4603      	mov	r3, r0
}
 810e528:	4618      	mov	r0, r3
 810e52a:	3708      	adds	r7, #8
 810e52c:	46bd      	mov	sp, r7
 810e52e:	bd80      	pop	{r7, pc}

0810e530 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810e530:	b580      	push	{r7, lr}
 810e532:	b08a      	sub	sp, #40	@ 0x28
 810e534:	af02      	add	r7, sp, #8
 810e536:	60f8      	str	r0, [r7, #12]
 810e538:	60b9      	str	r1, [r7, #8]
 810e53a:	603b      	str	r3, [r7, #0]
 810e53c:	4613      	mov	r3, r2
 810e53e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810e540:	68fb      	ldr	r3, [r7, #12]
 810e542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810e546:	2b20      	cmp	r3, #32
 810e548:	d17b      	bne.n	810e642 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 810e54a:	68bb      	ldr	r3, [r7, #8]
 810e54c:	2b00      	cmp	r3, #0
 810e54e:	d002      	beq.n	810e556 <HAL_UART_Transmit+0x26>
 810e550:	88fb      	ldrh	r3, [r7, #6]
 810e552:	2b00      	cmp	r3, #0
 810e554:	d101      	bne.n	810e55a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810e556:	2301      	movs	r3, #1
 810e558:	e074      	b.n	810e644 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810e55a:	68fb      	ldr	r3, [r7, #12]
 810e55c:	2200      	movs	r2, #0
 810e55e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810e562:	68fb      	ldr	r3, [r7, #12]
 810e564:	2221      	movs	r2, #33	@ 0x21
 810e566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810e56a:	f7f6 fbd5 	bl	8104d18 <HAL_GetTick>
 810e56e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810e570:	68fb      	ldr	r3, [r7, #12]
 810e572:	88fa      	ldrh	r2, [r7, #6]
 810e574:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 810e578:	68fb      	ldr	r3, [r7, #12]
 810e57a:	88fa      	ldrh	r2, [r7, #6]
 810e57c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810e580:	68fb      	ldr	r3, [r7, #12]
 810e582:	689b      	ldr	r3, [r3, #8]
 810e584:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810e588:	d108      	bne.n	810e59c <HAL_UART_Transmit+0x6c>
 810e58a:	68fb      	ldr	r3, [r7, #12]
 810e58c:	691b      	ldr	r3, [r3, #16]
 810e58e:	2b00      	cmp	r3, #0
 810e590:	d104      	bne.n	810e59c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810e592:	2300      	movs	r3, #0
 810e594:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810e596:	68bb      	ldr	r3, [r7, #8]
 810e598:	61bb      	str	r3, [r7, #24]
 810e59a:	e003      	b.n	810e5a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 810e59c:	68bb      	ldr	r3, [r7, #8]
 810e59e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810e5a0:	2300      	movs	r3, #0
 810e5a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 810e5a4:	e030      	b.n	810e608 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810e5a6:	683b      	ldr	r3, [r7, #0]
 810e5a8:	9300      	str	r3, [sp, #0]
 810e5aa:	697b      	ldr	r3, [r7, #20]
 810e5ac:	2200      	movs	r2, #0
 810e5ae:	2180      	movs	r1, #128	@ 0x80
 810e5b0:	68f8      	ldr	r0, [r7, #12]
 810e5b2:	f001 fbed 	bl	810fd90 <UART_WaitOnFlagUntilTimeout>
 810e5b6:	4603      	mov	r3, r0
 810e5b8:	2b00      	cmp	r3, #0
 810e5ba:	d005      	beq.n	810e5c8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 810e5bc:	68fb      	ldr	r3, [r7, #12]
 810e5be:	2220      	movs	r2, #32
 810e5c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 810e5c4:	2303      	movs	r3, #3
 810e5c6:	e03d      	b.n	810e644 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 810e5c8:	69fb      	ldr	r3, [r7, #28]
 810e5ca:	2b00      	cmp	r3, #0
 810e5cc:	d10b      	bne.n	810e5e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810e5ce:	69bb      	ldr	r3, [r7, #24]
 810e5d0:	881b      	ldrh	r3, [r3, #0]
 810e5d2:	461a      	mov	r2, r3
 810e5d4:	68fb      	ldr	r3, [r7, #12]
 810e5d6:	681b      	ldr	r3, [r3, #0]
 810e5d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810e5dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 810e5de:	69bb      	ldr	r3, [r7, #24]
 810e5e0:	3302      	adds	r3, #2
 810e5e2:	61bb      	str	r3, [r7, #24]
 810e5e4:	e007      	b.n	810e5f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810e5e6:	69fb      	ldr	r3, [r7, #28]
 810e5e8:	781a      	ldrb	r2, [r3, #0]
 810e5ea:	68fb      	ldr	r3, [r7, #12]
 810e5ec:	681b      	ldr	r3, [r3, #0]
 810e5ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 810e5f0:	69fb      	ldr	r3, [r7, #28]
 810e5f2:	3301      	adds	r3, #1
 810e5f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810e5f6:	68fb      	ldr	r3, [r7, #12]
 810e5f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810e5fc:	b29b      	uxth	r3, r3
 810e5fe:	3b01      	subs	r3, #1
 810e600:	b29a      	uxth	r2, r3
 810e602:	68fb      	ldr	r3, [r7, #12]
 810e604:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 810e608:	68fb      	ldr	r3, [r7, #12]
 810e60a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810e60e:	b29b      	uxth	r3, r3
 810e610:	2b00      	cmp	r3, #0
 810e612:	d1c8      	bne.n	810e5a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810e614:	683b      	ldr	r3, [r7, #0]
 810e616:	9300      	str	r3, [sp, #0]
 810e618:	697b      	ldr	r3, [r7, #20]
 810e61a:	2200      	movs	r2, #0
 810e61c:	2140      	movs	r1, #64	@ 0x40
 810e61e:	68f8      	ldr	r0, [r7, #12]
 810e620:	f001 fbb6 	bl	810fd90 <UART_WaitOnFlagUntilTimeout>
 810e624:	4603      	mov	r3, r0
 810e626:	2b00      	cmp	r3, #0
 810e628:	d005      	beq.n	810e636 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 810e62a:	68fb      	ldr	r3, [r7, #12]
 810e62c:	2220      	movs	r2, #32
 810e62e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810e632:	2303      	movs	r3, #3
 810e634:	e006      	b.n	810e644 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810e636:	68fb      	ldr	r3, [r7, #12]
 810e638:	2220      	movs	r2, #32
 810e63a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 810e63e:	2300      	movs	r3, #0
 810e640:	e000      	b.n	810e644 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810e642:	2302      	movs	r3, #2
  }
}
 810e644:	4618      	mov	r0, r3
 810e646:	3720      	adds	r7, #32
 810e648:	46bd      	mov	sp, r7
 810e64a:	bd80      	pop	{r7, pc}

0810e64c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810e64c:	b580      	push	{r7, lr}
 810e64e:	b08a      	sub	sp, #40	@ 0x28
 810e650:	af02      	add	r7, sp, #8
 810e652:	60f8      	str	r0, [r7, #12]
 810e654:	60b9      	str	r1, [r7, #8]
 810e656:	603b      	str	r3, [r7, #0]
 810e658:	4613      	mov	r3, r2
 810e65a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810e65c:	68fb      	ldr	r3, [r7, #12]
 810e65e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810e662:	2b20      	cmp	r3, #32
 810e664:	f040 80b5 	bne.w	810e7d2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 810e668:	68bb      	ldr	r3, [r7, #8]
 810e66a:	2b00      	cmp	r3, #0
 810e66c:	d002      	beq.n	810e674 <HAL_UART_Receive+0x28>
 810e66e:	88fb      	ldrh	r3, [r7, #6]
 810e670:	2b00      	cmp	r3, #0
 810e672:	d101      	bne.n	810e678 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 810e674:	2301      	movs	r3, #1
 810e676:	e0ad      	b.n	810e7d4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810e678:	68fb      	ldr	r3, [r7, #12]
 810e67a:	2200      	movs	r2, #0
 810e67c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 810e680:	68fb      	ldr	r3, [r7, #12]
 810e682:	2222      	movs	r2, #34	@ 0x22
 810e684:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810e688:	68fb      	ldr	r3, [r7, #12]
 810e68a:	2200      	movs	r2, #0
 810e68c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810e68e:	f7f6 fb43 	bl	8104d18 <HAL_GetTick>
 810e692:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 810e694:	68fb      	ldr	r3, [r7, #12]
 810e696:	88fa      	ldrh	r2, [r7, #6]
 810e698:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 810e69c:	68fb      	ldr	r3, [r7, #12]
 810e69e:	88fa      	ldrh	r2, [r7, #6]
 810e6a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 810e6a4:	68fb      	ldr	r3, [r7, #12]
 810e6a6:	689b      	ldr	r3, [r3, #8]
 810e6a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810e6ac:	d10e      	bne.n	810e6cc <HAL_UART_Receive+0x80>
 810e6ae:	68fb      	ldr	r3, [r7, #12]
 810e6b0:	691b      	ldr	r3, [r3, #16]
 810e6b2:	2b00      	cmp	r3, #0
 810e6b4:	d105      	bne.n	810e6c2 <HAL_UART_Receive+0x76>
 810e6b6:	68fb      	ldr	r3, [r7, #12]
 810e6b8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 810e6bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810e6c0:	e02d      	b.n	810e71e <HAL_UART_Receive+0xd2>
 810e6c2:	68fb      	ldr	r3, [r7, #12]
 810e6c4:	22ff      	movs	r2, #255	@ 0xff
 810e6c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810e6ca:	e028      	b.n	810e71e <HAL_UART_Receive+0xd2>
 810e6cc:	68fb      	ldr	r3, [r7, #12]
 810e6ce:	689b      	ldr	r3, [r3, #8]
 810e6d0:	2b00      	cmp	r3, #0
 810e6d2:	d10d      	bne.n	810e6f0 <HAL_UART_Receive+0xa4>
 810e6d4:	68fb      	ldr	r3, [r7, #12]
 810e6d6:	691b      	ldr	r3, [r3, #16]
 810e6d8:	2b00      	cmp	r3, #0
 810e6da:	d104      	bne.n	810e6e6 <HAL_UART_Receive+0x9a>
 810e6dc:	68fb      	ldr	r3, [r7, #12]
 810e6de:	22ff      	movs	r2, #255	@ 0xff
 810e6e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810e6e4:	e01b      	b.n	810e71e <HAL_UART_Receive+0xd2>
 810e6e6:	68fb      	ldr	r3, [r7, #12]
 810e6e8:	227f      	movs	r2, #127	@ 0x7f
 810e6ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810e6ee:	e016      	b.n	810e71e <HAL_UART_Receive+0xd2>
 810e6f0:	68fb      	ldr	r3, [r7, #12]
 810e6f2:	689b      	ldr	r3, [r3, #8]
 810e6f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810e6f8:	d10d      	bne.n	810e716 <HAL_UART_Receive+0xca>
 810e6fa:	68fb      	ldr	r3, [r7, #12]
 810e6fc:	691b      	ldr	r3, [r3, #16]
 810e6fe:	2b00      	cmp	r3, #0
 810e700:	d104      	bne.n	810e70c <HAL_UART_Receive+0xc0>
 810e702:	68fb      	ldr	r3, [r7, #12]
 810e704:	227f      	movs	r2, #127	@ 0x7f
 810e706:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810e70a:	e008      	b.n	810e71e <HAL_UART_Receive+0xd2>
 810e70c:	68fb      	ldr	r3, [r7, #12]
 810e70e:	223f      	movs	r2, #63	@ 0x3f
 810e710:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810e714:	e003      	b.n	810e71e <HAL_UART_Receive+0xd2>
 810e716:	68fb      	ldr	r3, [r7, #12]
 810e718:	2200      	movs	r2, #0
 810e71a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 810e71e:	68fb      	ldr	r3, [r7, #12]
 810e720:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810e724:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810e726:	68fb      	ldr	r3, [r7, #12]
 810e728:	689b      	ldr	r3, [r3, #8]
 810e72a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810e72e:	d108      	bne.n	810e742 <HAL_UART_Receive+0xf6>
 810e730:	68fb      	ldr	r3, [r7, #12]
 810e732:	691b      	ldr	r3, [r3, #16]
 810e734:	2b00      	cmp	r3, #0
 810e736:	d104      	bne.n	810e742 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 810e738:	2300      	movs	r3, #0
 810e73a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 810e73c:	68bb      	ldr	r3, [r7, #8]
 810e73e:	61bb      	str	r3, [r7, #24]
 810e740:	e003      	b.n	810e74a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 810e742:	68bb      	ldr	r3, [r7, #8]
 810e744:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810e746:	2300      	movs	r3, #0
 810e748:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 810e74a:	e036      	b.n	810e7ba <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 810e74c:	683b      	ldr	r3, [r7, #0]
 810e74e:	9300      	str	r3, [sp, #0]
 810e750:	697b      	ldr	r3, [r7, #20]
 810e752:	2200      	movs	r2, #0
 810e754:	2120      	movs	r1, #32
 810e756:	68f8      	ldr	r0, [r7, #12]
 810e758:	f001 fb1a 	bl	810fd90 <UART_WaitOnFlagUntilTimeout>
 810e75c:	4603      	mov	r3, r0
 810e75e:	2b00      	cmp	r3, #0
 810e760:	d005      	beq.n	810e76e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 810e762:	68fb      	ldr	r3, [r7, #12]
 810e764:	2220      	movs	r2, #32
 810e766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 810e76a:	2303      	movs	r3, #3
 810e76c:	e032      	b.n	810e7d4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 810e76e:	69fb      	ldr	r3, [r7, #28]
 810e770:	2b00      	cmp	r3, #0
 810e772:	d10c      	bne.n	810e78e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 810e774:	68fb      	ldr	r3, [r7, #12]
 810e776:	681b      	ldr	r3, [r3, #0]
 810e778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e77a:	b29a      	uxth	r2, r3
 810e77c:	8a7b      	ldrh	r3, [r7, #18]
 810e77e:	4013      	ands	r3, r2
 810e780:	b29a      	uxth	r2, r3
 810e782:	69bb      	ldr	r3, [r7, #24]
 810e784:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 810e786:	69bb      	ldr	r3, [r7, #24]
 810e788:	3302      	adds	r3, #2
 810e78a:	61bb      	str	r3, [r7, #24]
 810e78c:	e00c      	b.n	810e7a8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 810e78e:	68fb      	ldr	r3, [r7, #12]
 810e790:	681b      	ldr	r3, [r3, #0]
 810e792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e794:	b2da      	uxtb	r2, r3
 810e796:	8a7b      	ldrh	r3, [r7, #18]
 810e798:	b2db      	uxtb	r3, r3
 810e79a:	4013      	ands	r3, r2
 810e79c:	b2da      	uxtb	r2, r3
 810e79e:	69fb      	ldr	r3, [r7, #28]
 810e7a0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 810e7a2:	69fb      	ldr	r3, [r7, #28]
 810e7a4:	3301      	adds	r3, #1
 810e7a6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 810e7a8:	68fb      	ldr	r3, [r7, #12]
 810e7aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e7ae:	b29b      	uxth	r3, r3
 810e7b0:	3b01      	subs	r3, #1
 810e7b2:	b29a      	uxth	r2, r3
 810e7b4:	68fb      	ldr	r3, [r7, #12]
 810e7b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 810e7ba:	68fb      	ldr	r3, [r7, #12]
 810e7bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e7c0:	b29b      	uxth	r3, r3
 810e7c2:	2b00      	cmp	r3, #0
 810e7c4:	d1c2      	bne.n	810e74c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810e7c6:	68fb      	ldr	r3, [r7, #12]
 810e7c8:	2220      	movs	r2, #32
 810e7ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 810e7ce:	2300      	movs	r3, #0
 810e7d0:	e000      	b.n	810e7d4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 810e7d2:	2302      	movs	r3, #2
  }
}
 810e7d4:	4618      	mov	r0, r3
 810e7d6:	3720      	adds	r7, #32
 810e7d8:	46bd      	mov	sp, r7
 810e7da:	bd80      	pop	{r7, pc}

0810e7dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810e7dc:	b580      	push	{r7, lr}
 810e7de:	b08a      	sub	sp, #40	@ 0x28
 810e7e0:	af00      	add	r7, sp, #0
 810e7e2:	60f8      	str	r0, [r7, #12]
 810e7e4:	60b9      	str	r1, [r7, #8]
 810e7e6:	4613      	mov	r3, r2
 810e7e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810e7ea:	68fb      	ldr	r3, [r7, #12]
 810e7ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810e7f0:	2b20      	cmp	r3, #32
 810e7f2:	d137      	bne.n	810e864 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 810e7f4:	68bb      	ldr	r3, [r7, #8]
 810e7f6:	2b00      	cmp	r3, #0
 810e7f8:	d002      	beq.n	810e800 <HAL_UART_Receive_IT+0x24>
 810e7fa:	88fb      	ldrh	r3, [r7, #6]
 810e7fc:	2b00      	cmp	r3, #0
 810e7fe:	d101      	bne.n	810e804 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 810e800:	2301      	movs	r3, #1
 810e802:	e030      	b.n	810e866 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810e804:	68fb      	ldr	r3, [r7, #12]
 810e806:	2200      	movs	r2, #0
 810e808:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810e80a:	68fb      	ldr	r3, [r7, #12]
 810e80c:	681b      	ldr	r3, [r3, #0]
 810e80e:	4a18      	ldr	r2, [pc, #96]	@ (810e870 <HAL_UART_Receive_IT+0x94>)
 810e810:	4293      	cmp	r3, r2
 810e812:	d01f      	beq.n	810e854 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810e814:	68fb      	ldr	r3, [r7, #12]
 810e816:	681b      	ldr	r3, [r3, #0]
 810e818:	685b      	ldr	r3, [r3, #4]
 810e81a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810e81e:	2b00      	cmp	r3, #0
 810e820:	d018      	beq.n	810e854 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810e822:	68fb      	ldr	r3, [r7, #12]
 810e824:	681b      	ldr	r3, [r3, #0]
 810e826:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e828:	697b      	ldr	r3, [r7, #20]
 810e82a:	e853 3f00 	ldrex	r3, [r3]
 810e82e:	613b      	str	r3, [r7, #16]
   return(result);
 810e830:	693b      	ldr	r3, [r7, #16]
 810e832:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810e836:	627b      	str	r3, [r7, #36]	@ 0x24
 810e838:	68fb      	ldr	r3, [r7, #12]
 810e83a:	681b      	ldr	r3, [r3, #0]
 810e83c:	461a      	mov	r2, r3
 810e83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e840:	623b      	str	r3, [r7, #32]
 810e842:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e844:	69f9      	ldr	r1, [r7, #28]
 810e846:	6a3a      	ldr	r2, [r7, #32]
 810e848:	e841 2300 	strex	r3, r2, [r1]
 810e84c:	61bb      	str	r3, [r7, #24]
   return(result);
 810e84e:	69bb      	ldr	r3, [r7, #24]
 810e850:	2b00      	cmp	r3, #0
 810e852:	d1e6      	bne.n	810e822 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 810e854:	88fb      	ldrh	r3, [r7, #6]
 810e856:	461a      	mov	r2, r3
 810e858:	68b9      	ldr	r1, [r7, #8]
 810e85a:	68f8      	ldr	r0, [r7, #12]
 810e85c:	f001 fb06 	bl	810fe6c <UART_Start_Receive_IT>
 810e860:	4603      	mov	r3, r0
 810e862:	e000      	b.n	810e866 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810e864:	2302      	movs	r3, #2
  }
}
 810e866:	4618      	mov	r0, r3
 810e868:	3728      	adds	r7, #40	@ 0x28
 810e86a:	46bd      	mov	sp, r7
 810e86c:	bd80      	pop	{r7, pc}
 810e86e:	bf00      	nop
 810e870:	58000c00 	.word	0x58000c00

0810e874 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810e874:	b580      	push	{r7, lr}
 810e876:	b0ba      	sub	sp, #232	@ 0xe8
 810e878:	af00      	add	r7, sp, #0
 810e87a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 810e87c:	687b      	ldr	r3, [r7, #4]
 810e87e:	681b      	ldr	r3, [r3, #0]
 810e880:	69db      	ldr	r3, [r3, #28]
 810e882:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810e886:	687b      	ldr	r3, [r7, #4]
 810e888:	681b      	ldr	r3, [r3, #0]
 810e88a:	681b      	ldr	r3, [r3, #0]
 810e88c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810e890:	687b      	ldr	r3, [r7, #4]
 810e892:	681b      	ldr	r3, [r3, #0]
 810e894:	689b      	ldr	r3, [r3, #8]
 810e896:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810e89a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 810e89e:	f640 030f 	movw	r3, #2063	@ 0x80f
 810e8a2:	4013      	ands	r3, r2
 810e8a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 810e8a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 810e8ac:	2b00      	cmp	r3, #0
 810e8ae:	d11b      	bne.n	810e8e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810e8b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810e8b4:	f003 0320 	and.w	r3, r3, #32
 810e8b8:	2b00      	cmp	r3, #0
 810e8ba:	d015      	beq.n	810e8e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810e8bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810e8c0:	f003 0320 	and.w	r3, r3, #32
 810e8c4:	2b00      	cmp	r3, #0
 810e8c6:	d105      	bne.n	810e8d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810e8c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810e8cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810e8d0:	2b00      	cmp	r3, #0
 810e8d2:	d009      	beq.n	810e8e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 810e8d4:	687b      	ldr	r3, [r7, #4]
 810e8d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810e8d8:	2b00      	cmp	r3, #0
 810e8da:	f000 8379 	beq.w	810efd0 <HAL_UART_IRQHandler+0x75c>
      {
        huart->RxISR(huart);
 810e8de:	687b      	ldr	r3, [r7, #4]
 810e8e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810e8e2:	6878      	ldr	r0, [r7, #4]
 810e8e4:	4798      	blx	r3
      }
      return;
 810e8e6:	e373      	b.n	810efd0 <HAL_UART_IRQHandler+0x75c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810e8e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 810e8ec:	2b00      	cmp	r3, #0
 810e8ee:	f000 8123 	beq.w	810eb38 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810e8f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 810e8f6:	4b8d      	ldr	r3, [pc, #564]	@ (810eb2c <HAL_UART_IRQHandler+0x2b8>)
 810e8f8:	4013      	ands	r3, r2
 810e8fa:	2b00      	cmp	r3, #0
 810e8fc:	d106      	bne.n	810e90c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810e8fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 810e902:	4b8b      	ldr	r3, [pc, #556]	@ (810eb30 <HAL_UART_IRQHandler+0x2bc>)
 810e904:	4013      	ands	r3, r2
 810e906:	2b00      	cmp	r3, #0
 810e908:	f000 8116 	beq.w	810eb38 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810e90c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810e910:	f003 0301 	and.w	r3, r3, #1
 810e914:	2b00      	cmp	r3, #0
 810e916:	d011      	beq.n	810e93c <HAL_UART_IRQHandler+0xc8>
 810e918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810e91c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810e920:	2b00      	cmp	r3, #0
 810e922:	d00b      	beq.n	810e93c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810e924:	687b      	ldr	r3, [r7, #4]
 810e926:	681b      	ldr	r3, [r3, #0]
 810e928:	2201      	movs	r2, #1
 810e92a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810e92c:	687b      	ldr	r3, [r7, #4]
 810e92e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e932:	f043 0201 	orr.w	r2, r3, #1
 810e936:	687b      	ldr	r3, [r7, #4]
 810e938:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810e93c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810e940:	f003 0302 	and.w	r3, r3, #2
 810e944:	2b00      	cmp	r3, #0
 810e946:	d011      	beq.n	810e96c <HAL_UART_IRQHandler+0xf8>
 810e948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810e94c:	f003 0301 	and.w	r3, r3, #1
 810e950:	2b00      	cmp	r3, #0
 810e952:	d00b      	beq.n	810e96c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810e954:	687b      	ldr	r3, [r7, #4]
 810e956:	681b      	ldr	r3, [r3, #0]
 810e958:	2202      	movs	r2, #2
 810e95a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810e95c:	687b      	ldr	r3, [r7, #4]
 810e95e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e962:	f043 0204 	orr.w	r2, r3, #4
 810e966:	687b      	ldr	r3, [r7, #4]
 810e968:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810e96c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810e970:	f003 0304 	and.w	r3, r3, #4
 810e974:	2b00      	cmp	r3, #0
 810e976:	d011      	beq.n	810e99c <HAL_UART_IRQHandler+0x128>
 810e978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810e97c:	f003 0301 	and.w	r3, r3, #1
 810e980:	2b00      	cmp	r3, #0
 810e982:	d00b      	beq.n	810e99c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810e984:	687b      	ldr	r3, [r7, #4]
 810e986:	681b      	ldr	r3, [r3, #0]
 810e988:	2204      	movs	r2, #4
 810e98a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810e98c:	687b      	ldr	r3, [r7, #4]
 810e98e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e992:	f043 0202 	orr.w	r2, r3, #2
 810e996:	687b      	ldr	r3, [r7, #4]
 810e998:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 810e99c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810e9a0:	f003 0308 	and.w	r3, r3, #8
 810e9a4:	2b00      	cmp	r3, #0
 810e9a6:	d017      	beq.n	810e9d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810e9a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810e9ac:	f003 0320 	and.w	r3, r3, #32
 810e9b0:	2b00      	cmp	r3, #0
 810e9b2:	d105      	bne.n	810e9c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 810e9b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 810e9b8:	4b5c      	ldr	r3, [pc, #368]	@ (810eb2c <HAL_UART_IRQHandler+0x2b8>)
 810e9ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810e9bc:	2b00      	cmp	r3, #0
 810e9be:	d00b      	beq.n	810e9d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810e9c0:	687b      	ldr	r3, [r7, #4]
 810e9c2:	681b      	ldr	r3, [r3, #0]
 810e9c4:	2208      	movs	r2, #8
 810e9c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810e9c8:	687b      	ldr	r3, [r7, #4]
 810e9ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e9ce:	f043 0208 	orr.w	r2, r3, #8
 810e9d2:	687b      	ldr	r3, [r7, #4]
 810e9d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810e9d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810e9dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810e9e0:	2b00      	cmp	r3, #0
 810e9e2:	d012      	beq.n	810ea0a <HAL_UART_IRQHandler+0x196>
 810e9e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810e9e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 810e9ec:	2b00      	cmp	r3, #0
 810e9ee:	d00c      	beq.n	810ea0a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810e9f0:	687b      	ldr	r3, [r7, #4]
 810e9f2:	681b      	ldr	r3, [r3, #0]
 810e9f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810e9f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810e9fa:	687b      	ldr	r3, [r7, #4]
 810e9fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810ea00:	f043 0220 	orr.w	r2, r3, #32
 810ea04:	687b      	ldr	r3, [r7, #4]
 810ea06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810ea0a:	687b      	ldr	r3, [r7, #4]
 810ea0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810ea10:	2b00      	cmp	r3, #0
 810ea12:	f000 82df 	beq.w	810efd4 <HAL_UART_IRQHandler+0x760>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810ea16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810ea1a:	f003 0320 	and.w	r3, r3, #32
 810ea1e:	2b00      	cmp	r3, #0
 810ea20:	d013      	beq.n	810ea4a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810ea22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810ea26:	f003 0320 	and.w	r3, r3, #32
 810ea2a:	2b00      	cmp	r3, #0
 810ea2c:	d105      	bne.n	810ea3a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810ea2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810ea32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810ea36:	2b00      	cmp	r3, #0
 810ea38:	d007      	beq.n	810ea4a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 810ea3a:	687b      	ldr	r3, [r7, #4]
 810ea3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810ea3e:	2b00      	cmp	r3, #0
 810ea40:	d003      	beq.n	810ea4a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 810ea42:	687b      	ldr	r3, [r7, #4]
 810ea44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810ea46:	6878      	ldr	r0, [r7, #4]
 810ea48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810ea4a:	687b      	ldr	r3, [r7, #4]
 810ea4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810ea50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810ea54:	687b      	ldr	r3, [r7, #4]
 810ea56:	681b      	ldr	r3, [r3, #0]
 810ea58:	689b      	ldr	r3, [r3, #8]
 810ea5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810ea5e:	2b40      	cmp	r3, #64	@ 0x40
 810ea60:	d005      	beq.n	810ea6e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810ea62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 810ea66:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810ea6a:	2b00      	cmp	r3, #0
 810ea6c:	d054      	beq.n	810eb18 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810ea6e:	6878      	ldr	r0, [r7, #4]
 810ea70:	f001 fb1e 	bl	81100b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810ea74:	687b      	ldr	r3, [r7, #4]
 810ea76:	681b      	ldr	r3, [r3, #0]
 810ea78:	689b      	ldr	r3, [r3, #8]
 810ea7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810ea7e:	2b40      	cmp	r3, #64	@ 0x40
 810ea80:	d146      	bne.n	810eb10 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810ea82:	687b      	ldr	r3, [r7, #4]
 810ea84:	681b      	ldr	r3, [r3, #0]
 810ea86:	3308      	adds	r3, #8
 810ea88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ea8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 810ea90:	e853 3f00 	ldrex	r3, [r3]
 810ea94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 810ea98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 810ea9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810eaa0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810eaa4:	687b      	ldr	r3, [r7, #4]
 810eaa6:	681b      	ldr	r3, [r3, #0]
 810eaa8:	3308      	adds	r3, #8
 810eaaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 810eaae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 810eab2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810eab6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 810eaba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 810eabe:	e841 2300 	strex	r3, r2, [r1]
 810eac2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 810eac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810eaca:	2b00      	cmp	r3, #0
 810eacc:	d1d9      	bne.n	810ea82 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810eace:	687b      	ldr	r3, [r7, #4]
 810ead0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ead4:	2b00      	cmp	r3, #0
 810ead6:	d017      	beq.n	810eb08 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810ead8:	687b      	ldr	r3, [r7, #4]
 810eada:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810eade:	4a15      	ldr	r2, [pc, #84]	@ (810eb34 <HAL_UART_IRQHandler+0x2c0>)
 810eae0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810eae2:	687b      	ldr	r3, [r7, #4]
 810eae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810eae8:	4618      	mov	r0, r3
 810eaea:	f7f8 fdd5 	bl	8107698 <HAL_DMA_Abort_IT>
 810eaee:	4603      	mov	r3, r0
 810eaf0:	2b00      	cmp	r3, #0
 810eaf2:	d019      	beq.n	810eb28 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810eaf4:	687b      	ldr	r3, [r7, #4]
 810eaf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810eafa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810eafc:	687a      	ldr	r2, [r7, #4]
 810eafe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 810eb02:	4610      	mov	r0, r2
 810eb04:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810eb06:	e00f      	b.n	810eb28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810eb08:	6878      	ldr	r0, [r7, #4]
 810eb0a:	f000 fa77 	bl	810effc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810eb0e:	e00b      	b.n	810eb28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810eb10:	6878      	ldr	r0, [r7, #4]
 810eb12:	f000 fa73 	bl	810effc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810eb16:	e007      	b.n	810eb28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810eb18:	6878      	ldr	r0, [r7, #4]
 810eb1a:	f000 fa6f 	bl	810effc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810eb1e:	687b      	ldr	r3, [r7, #4]
 810eb20:	2200      	movs	r2, #0
 810eb22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 810eb26:	e255      	b.n	810efd4 <HAL_UART_IRQHandler+0x760>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810eb28:	bf00      	nop
    return;
 810eb2a:	e253      	b.n	810efd4 <HAL_UART_IRQHandler+0x760>
 810eb2c:	10000001 	.word	0x10000001
 810eb30:	04000120 	.word	0x04000120
 810eb34:	0811017d 	.word	0x0811017d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810eb38:	687b      	ldr	r3, [r7, #4]
 810eb3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810eb3c:	2b01      	cmp	r3, #1
 810eb3e:	f040 81e9 	bne.w	810ef14 <HAL_UART_IRQHandler+0x6a0>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810eb42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810eb46:	f003 0310 	and.w	r3, r3, #16
 810eb4a:	2b00      	cmp	r3, #0
 810eb4c:	f000 81e2 	beq.w	810ef14 <HAL_UART_IRQHandler+0x6a0>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810eb50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810eb54:	f003 0310 	and.w	r3, r3, #16
 810eb58:	2b00      	cmp	r3, #0
 810eb5a:	f000 81db 	beq.w	810ef14 <HAL_UART_IRQHandler+0x6a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810eb5e:	687b      	ldr	r3, [r7, #4]
 810eb60:	681b      	ldr	r3, [r3, #0]
 810eb62:	2210      	movs	r2, #16
 810eb64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810eb66:	687b      	ldr	r3, [r7, #4]
 810eb68:	681b      	ldr	r3, [r3, #0]
 810eb6a:	689b      	ldr	r3, [r3, #8]
 810eb6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810eb70:	2b40      	cmp	r3, #64	@ 0x40
 810eb72:	f040 8151 	bne.w	810ee18 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810eb76:	687b      	ldr	r3, [r7, #4]
 810eb78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810eb7c:	681b      	ldr	r3, [r3, #0]
 810eb7e:	4a96      	ldr	r2, [pc, #600]	@ (810edd8 <HAL_UART_IRQHandler+0x564>)
 810eb80:	4293      	cmp	r3, r2
 810eb82:	d068      	beq.n	810ec56 <HAL_UART_IRQHandler+0x3e2>
 810eb84:	687b      	ldr	r3, [r7, #4]
 810eb86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810eb8a:	681b      	ldr	r3, [r3, #0]
 810eb8c:	4a93      	ldr	r2, [pc, #588]	@ (810eddc <HAL_UART_IRQHandler+0x568>)
 810eb8e:	4293      	cmp	r3, r2
 810eb90:	d061      	beq.n	810ec56 <HAL_UART_IRQHandler+0x3e2>
 810eb92:	687b      	ldr	r3, [r7, #4]
 810eb94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810eb98:	681b      	ldr	r3, [r3, #0]
 810eb9a:	4a91      	ldr	r2, [pc, #580]	@ (810ede0 <HAL_UART_IRQHandler+0x56c>)
 810eb9c:	4293      	cmp	r3, r2
 810eb9e:	d05a      	beq.n	810ec56 <HAL_UART_IRQHandler+0x3e2>
 810eba0:	687b      	ldr	r3, [r7, #4]
 810eba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810eba6:	681b      	ldr	r3, [r3, #0]
 810eba8:	4a8e      	ldr	r2, [pc, #568]	@ (810ede4 <HAL_UART_IRQHandler+0x570>)
 810ebaa:	4293      	cmp	r3, r2
 810ebac:	d053      	beq.n	810ec56 <HAL_UART_IRQHandler+0x3e2>
 810ebae:	687b      	ldr	r3, [r7, #4]
 810ebb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ebb4:	681b      	ldr	r3, [r3, #0]
 810ebb6:	4a8c      	ldr	r2, [pc, #560]	@ (810ede8 <HAL_UART_IRQHandler+0x574>)
 810ebb8:	4293      	cmp	r3, r2
 810ebba:	d04c      	beq.n	810ec56 <HAL_UART_IRQHandler+0x3e2>
 810ebbc:	687b      	ldr	r3, [r7, #4]
 810ebbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ebc2:	681b      	ldr	r3, [r3, #0]
 810ebc4:	4a89      	ldr	r2, [pc, #548]	@ (810edec <HAL_UART_IRQHandler+0x578>)
 810ebc6:	4293      	cmp	r3, r2
 810ebc8:	d045      	beq.n	810ec56 <HAL_UART_IRQHandler+0x3e2>
 810ebca:	687b      	ldr	r3, [r7, #4]
 810ebcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ebd0:	681b      	ldr	r3, [r3, #0]
 810ebd2:	4a87      	ldr	r2, [pc, #540]	@ (810edf0 <HAL_UART_IRQHandler+0x57c>)
 810ebd4:	4293      	cmp	r3, r2
 810ebd6:	d03e      	beq.n	810ec56 <HAL_UART_IRQHandler+0x3e2>
 810ebd8:	687b      	ldr	r3, [r7, #4]
 810ebda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ebde:	681b      	ldr	r3, [r3, #0]
 810ebe0:	4a84      	ldr	r2, [pc, #528]	@ (810edf4 <HAL_UART_IRQHandler+0x580>)
 810ebe2:	4293      	cmp	r3, r2
 810ebe4:	d037      	beq.n	810ec56 <HAL_UART_IRQHandler+0x3e2>
 810ebe6:	687b      	ldr	r3, [r7, #4]
 810ebe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ebec:	681b      	ldr	r3, [r3, #0]
 810ebee:	4a82      	ldr	r2, [pc, #520]	@ (810edf8 <HAL_UART_IRQHandler+0x584>)
 810ebf0:	4293      	cmp	r3, r2
 810ebf2:	d030      	beq.n	810ec56 <HAL_UART_IRQHandler+0x3e2>
 810ebf4:	687b      	ldr	r3, [r7, #4]
 810ebf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ebfa:	681b      	ldr	r3, [r3, #0]
 810ebfc:	4a7f      	ldr	r2, [pc, #508]	@ (810edfc <HAL_UART_IRQHandler+0x588>)
 810ebfe:	4293      	cmp	r3, r2
 810ec00:	d029      	beq.n	810ec56 <HAL_UART_IRQHandler+0x3e2>
 810ec02:	687b      	ldr	r3, [r7, #4]
 810ec04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ec08:	681b      	ldr	r3, [r3, #0]
 810ec0a:	4a7d      	ldr	r2, [pc, #500]	@ (810ee00 <HAL_UART_IRQHandler+0x58c>)
 810ec0c:	4293      	cmp	r3, r2
 810ec0e:	d022      	beq.n	810ec56 <HAL_UART_IRQHandler+0x3e2>
 810ec10:	687b      	ldr	r3, [r7, #4]
 810ec12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ec16:	681b      	ldr	r3, [r3, #0]
 810ec18:	4a7a      	ldr	r2, [pc, #488]	@ (810ee04 <HAL_UART_IRQHandler+0x590>)
 810ec1a:	4293      	cmp	r3, r2
 810ec1c:	d01b      	beq.n	810ec56 <HAL_UART_IRQHandler+0x3e2>
 810ec1e:	687b      	ldr	r3, [r7, #4]
 810ec20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ec24:	681b      	ldr	r3, [r3, #0]
 810ec26:	4a78      	ldr	r2, [pc, #480]	@ (810ee08 <HAL_UART_IRQHandler+0x594>)
 810ec28:	4293      	cmp	r3, r2
 810ec2a:	d014      	beq.n	810ec56 <HAL_UART_IRQHandler+0x3e2>
 810ec2c:	687b      	ldr	r3, [r7, #4]
 810ec2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ec32:	681b      	ldr	r3, [r3, #0]
 810ec34:	4a75      	ldr	r2, [pc, #468]	@ (810ee0c <HAL_UART_IRQHandler+0x598>)
 810ec36:	4293      	cmp	r3, r2
 810ec38:	d00d      	beq.n	810ec56 <HAL_UART_IRQHandler+0x3e2>
 810ec3a:	687b      	ldr	r3, [r7, #4]
 810ec3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ec40:	681b      	ldr	r3, [r3, #0]
 810ec42:	4a73      	ldr	r2, [pc, #460]	@ (810ee10 <HAL_UART_IRQHandler+0x59c>)
 810ec44:	4293      	cmp	r3, r2
 810ec46:	d006      	beq.n	810ec56 <HAL_UART_IRQHandler+0x3e2>
 810ec48:	687b      	ldr	r3, [r7, #4]
 810ec4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ec4e:	681b      	ldr	r3, [r3, #0]
 810ec50:	4a70      	ldr	r2, [pc, #448]	@ (810ee14 <HAL_UART_IRQHandler+0x5a0>)
 810ec52:	4293      	cmp	r3, r2
 810ec54:	d106      	bne.n	810ec64 <HAL_UART_IRQHandler+0x3f0>
 810ec56:	687b      	ldr	r3, [r7, #4]
 810ec58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ec5c:	681b      	ldr	r3, [r3, #0]
 810ec5e:	685b      	ldr	r3, [r3, #4]
 810ec60:	b29b      	uxth	r3, r3
 810ec62:	e005      	b.n	810ec70 <HAL_UART_IRQHandler+0x3fc>
 810ec64:	687b      	ldr	r3, [r7, #4]
 810ec66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ec6a:	681b      	ldr	r3, [r3, #0]
 810ec6c:	685b      	ldr	r3, [r3, #4]
 810ec6e:	b29b      	uxth	r3, r3
 810ec70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 810ec74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 810ec78:	2b00      	cmp	r3, #0
 810ec7a:	f000 81ad 	beq.w	810efd8 <HAL_UART_IRQHandler+0x764>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810ec7e:	687b      	ldr	r3, [r7, #4]
 810ec80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810ec84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 810ec88:	429a      	cmp	r2, r3
 810ec8a:	f080 81a5 	bcs.w	810efd8 <HAL_UART_IRQHandler+0x764>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810ec8e:	687b      	ldr	r3, [r7, #4]
 810ec90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 810ec94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810ec98:	687b      	ldr	r3, [r7, #4]
 810ec9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ec9e:	69db      	ldr	r3, [r3, #28]
 810eca0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810eca4:	f000 8087 	beq.w	810edb6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810eca8:	687b      	ldr	r3, [r7, #4]
 810ecaa:	681b      	ldr	r3, [r3, #0]
 810ecac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ecb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 810ecb4:	e853 3f00 	ldrex	r3, [r3]
 810ecb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 810ecbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 810ecc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810ecc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810ecc8:	687b      	ldr	r3, [r7, #4]
 810ecca:	681b      	ldr	r3, [r3, #0]
 810eccc:	461a      	mov	r2, r3
 810ecce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 810ecd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810ecd6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ecda:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 810ecde:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 810ece2:	e841 2300 	strex	r3, r2, [r1]
 810ece6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 810ecea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 810ecee:	2b00      	cmp	r3, #0
 810ecf0:	d1da      	bne.n	810eca8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810ecf2:	687b      	ldr	r3, [r7, #4]
 810ecf4:	681b      	ldr	r3, [r3, #0]
 810ecf6:	3308      	adds	r3, #8
 810ecf8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ecfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810ecfc:	e853 3f00 	ldrex	r3, [r3]
 810ed00:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 810ed02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810ed04:	f023 0301 	bic.w	r3, r3, #1
 810ed08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810ed0c:	687b      	ldr	r3, [r7, #4]
 810ed0e:	681b      	ldr	r3, [r3, #0]
 810ed10:	3308      	adds	r3, #8
 810ed12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 810ed16:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 810ed1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ed1c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 810ed1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 810ed22:	e841 2300 	strex	r3, r2, [r1]
 810ed26:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 810ed28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810ed2a:	2b00      	cmp	r3, #0
 810ed2c:	d1e1      	bne.n	810ecf2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810ed2e:	687b      	ldr	r3, [r7, #4]
 810ed30:	681b      	ldr	r3, [r3, #0]
 810ed32:	3308      	adds	r3, #8
 810ed34:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ed36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810ed38:	e853 3f00 	ldrex	r3, [r3]
 810ed3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 810ed3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810ed40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810ed44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810ed48:	687b      	ldr	r3, [r7, #4]
 810ed4a:	681b      	ldr	r3, [r3, #0]
 810ed4c:	3308      	adds	r3, #8
 810ed4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 810ed52:	66fa      	str	r2, [r7, #108]	@ 0x6c
 810ed54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ed56:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 810ed58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810ed5a:	e841 2300 	strex	r3, r2, [r1]
 810ed5e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 810ed60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810ed62:	2b00      	cmp	r3, #0
 810ed64:	d1e3      	bne.n	810ed2e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810ed66:	687b      	ldr	r3, [r7, #4]
 810ed68:	2220      	movs	r2, #32
 810ed6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810ed6e:	687b      	ldr	r3, [r7, #4]
 810ed70:	2200      	movs	r2, #0
 810ed72:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810ed74:	687b      	ldr	r3, [r7, #4]
 810ed76:	681b      	ldr	r3, [r3, #0]
 810ed78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ed7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810ed7c:	e853 3f00 	ldrex	r3, [r3]
 810ed80:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810ed82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810ed84:	f023 0310 	bic.w	r3, r3, #16
 810ed88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810ed8c:	687b      	ldr	r3, [r7, #4]
 810ed8e:	681b      	ldr	r3, [r3, #0]
 810ed90:	461a      	mov	r2, r3
 810ed92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810ed96:	65bb      	str	r3, [r7, #88]	@ 0x58
 810ed98:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ed9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810ed9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810ed9e:	e841 2300 	strex	r3, r2, [r1]
 810eda2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810eda4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810eda6:	2b00      	cmp	r3, #0
 810eda8:	d1e4      	bne.n	810ed74 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810edaa:	687b      	ldr	r3, [r7, #4]
 810edac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810edb0:	4618      	mov	r0, r3
 810edb2:	f7f8 f953 	bl	810705c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810edb6:	687b      	ldr	r3, [r7, #4]
 810edb8:	2202      	movs	r2, #2
 810edba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810edbc:	687b      	ldr	r3, [r7, #4]
 810edbe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 810edc2:	687b      	ldr	r3, [r7, #4]
 810edc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810edc8:	b29b      	uxth	r3, r3
 810edca:	1ad3      	subs	r3, r2, r3
 810edcc:	b29b      	uxth	r3, r3
 810edce:	4619      	mov	r1, r3
 810edd0:	6878      	ldr	r0, [r7, #4]
 810edd2:	f000 f91d 	bl	810f010 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810edd6:	e0ff      	b.n	810efd8 <HAL_UART_IRQHandler+0x764>
 810edd8:	40020010 	.word	0x40020010
 810eddc:	40020028 	.word	0x40020028
 810ede0:	40020040 	.word	0x40020040
 810ede4:	40020058 	.word	0x40020058
 810ede8:	40020070 	.word	0x40020070
 810edec:	40020088 	.word	0x40020088
 810edf0:	400200a0 	.word	0x400200a0
 810edf4:	400200b8 	.word	0x400200b8
 810edf8:	40020410 	.word	0x40020410
 810edfc:	40020428 	.word	0x40020428
 810ee00:	40020440 	.word	0x40020440
 810ee04:	40020458 	.word	0x40020458
 810ee08:	40020470 	.word	0x40020470
 810ee0c:	40020488 	.word	0x40020488
 810ee10:	400204a0 	.word	0x400204a0
 810ee14:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810ee18:	687b      	ldr	r3, [r7, #4]
 810ee1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 810ee1e:	687b      	ldr	r3, [r7, #4]
 810ee20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810ee24:	b29b      	uxth	r3, r3
 810ee26:	1ad3      	subs	r3, r2, r3
 810ee28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 810ee2c:	687b      	ldr	r3, [r7, #4]
 810ee2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810ee32:	b29b      	uxth	r3, r3
 810ee34:	2b00      	cmp	r3, #0
 810ee36:	f000 80d1 	beq.w	810efdc <HAL_UART_IRQHandler+0x768>
          && (nb_rx_data > 0U))
 810ee3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 810ee3e:	2b00      	cmp	r3, #0
 810ee40:	f000 80cc 	beq.w	810efdc <HAL_UART_IRQHandler+0x768>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810ee44:	687b      	ldr	r3, [r7, #4]
 810ee46:	681b      	ldr	r3, [r3, #0]
 810ee48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ee4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ee4c:	e853 3f00 	ldrex	r3, [r3]
 810ee50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810ee52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ee54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810ee58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810ee5c:	687b      	ldr	r3, [r7, #4]
 810ee5e:	681b      	ldr	r3, [r3, #0]
 810ee60:	461a      	mov	r2, r3
 810ee62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 810ee66:	647b      	str	r3, [r7, #68]	@ 0x44
 810ee68:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ee6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810ee6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810ee6e:	e841 2300 	strex	r3, r2, [r1]
 810ee72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810ee74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ee76:	2b00      	cmp	r3, #0
 810ee78:	d1e4      	bne.n	810ee44 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810ee7a:	687b      	ldr	r3, [r7, #4]
 810ee7c:	681b      	ldr	r3, [r3, #0]
 810ee7e:	3308      	adds	r3, #8
 810ee80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ee82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ee84:	e853 3f00 	ldrex	r3, [r3]
 810ee88:	623b      	str	r3, [r7, #32]
   return(result);
 810ee8a:	6a3b      	ldr	r3, [r7, #32]
 810ee8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810ee90:	f023 0301 	bic.w	r3, r3, #1
 810ee94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810ee98:	687b      	ldr	r3, [r7, #4]
 810ee9a:	681b      	ldr	r3, [r3, #0]
 810ee9c:	3308      	adds	r3, #8
 810ee9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 810eea2:	633a      	str	r2, [r7, #48]	@ 0x30
 810eea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810eea6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810eea8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810eeaa:	e841 2300 	strex	r3, r2, [r1]
 810eeae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810eeb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810eeb2:	2b00      	cmp	r3, #0
 810eeb4:	d1e1      	bne.n	810ee7a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810eeb6:	687b      	ldr	r3, [r7, #4]
 810eeb8:	2220      	movs	r2, #32
 810eeba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810eebe:	687b      	ldr	r3, [r7, #4]
 810eec0:	2200      	movs	r2, #0
 810eec2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810eec4:	687b      	ldr	r3, [r7, #4]
 810eec6:	2200      	movs	r2, #0
 810eec8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810eeca:	687b      	ldr	r3, [r7, #4]
 810eecc:	681b      	ldr	r3, [r3, #0]
 810eece:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810eed0:	693b      	ldr	r3, [r7, #16]
 810eed2:	e853 3f00 	ldrex	r3, [r3]
 810eed6:	60fb      	str	r3, [r7, #12]
   return(result);
 810eed8:	68fb      	ldr	r3, [r7, #12]
 810eeda:	f023 0310 	bic.w	r3, r3, #16
 810eede:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810eee2:	687b      	ldr	r3, [r7, #4]
 810eee4:	681b      	ldr	r3, [r3, #0]
 810eee6:	461a      	mov	r2, r3
 810eee8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 810eeec:	61fb      	str	r3, [r7, #28]
 810eeee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810eef0:	69b9      	ldr	r1, [r7, #24]
 810eef2:	69fa      	ldr	r2, [r7, #28]
 810eef4:	e841 2300 	strex	r3, r2, [r1]
 810eef8:	617b      	str	r3, [r7, #20]
   return(result);
 810eefa:	697b      	ldr	r3, [r7, #20]
 810eefc:	2b00      	cmp	r3, #0
 810eefe:	d1e4      	bne.n	810eeca <HAL_UART_IRQHandler+0x656>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810ef00:	687b      	ldr	r3, [r7, #4]
 810ef02:	2202      	movs	r2, #2
 810ef04:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810ef06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 810ef0a:	4619      	mov	r1, r3
 810ef0c:	6878      	ldr	r0, [r7, #4]
 810ef0e:	f000 f87f 	bl	810f010 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810ef12:	e063      	b.n	810efdc <HAL_UART_IRQHandler+0x768>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810ef14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810ef18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810ef1c:	2b00      	cmp	r3, #0
 810ef1e:	d00e      	beq.n	810ef3e <HAL_UART_IRQHandler+0x6ca>
 810ef20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810ef24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810ef28:	2b00      	cmp	r3, #0
 810ef2a:	d008      	beq.n	810ef3e <HAL_UART_IRQHandler+0x6ca>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810ef2c:	687b      	ldr	r3, [r7, #4]
 810ef2e:	681b      	ldr	r3, [r3, #0]
 810ef30:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 810ef34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810ef36:	6878      	ldr	r0, [r7, #4]
 810ef38:	f001 fe7e 	bl	8110c38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810ef3c:	e051      	b.n	810efe2 <HAL_UART_IRQHandler+0x76e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810ef3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810ef42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810ef46:	2b00      	cmp	r3, #0
 810ef48:	d014      	beq.n	810ef74 <HAL_UART_IRQHandler+0x700>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810ef4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810ef4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810ef52:	2b00      	cmp	r3, #0
 810ef54:	d105      	bne.n	810ef62 <HAL_UART_IRQHandler+0x6ee>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810ef56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810ef5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810ef5e:	2b00      	cmp	r3, #0
 810ef60:	d008      	beq.n	810ef74 <HAL_UART_IRQHandler+0x700>
  {
    if (huart->TxISR != NULL)
 810ef62:	687b      	ldr	r3, [r7, #4]
 810ef64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810ef66:	2b00      	cmp	r3, #0
 810ef68:	d03a      	beq.n	810efe0 <HAL_UART_IRQHandler+0x76c>
    {
      huart->TxISR(huart);
 810ef6a:	687b      	ldr	r3, [r7, #4]
 810ef6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810ef6e:	6878      	ldr	r0, [r7, #4]
 810ef70:	4798      	blx	r3
    }
    return;
 810ef72:	e035      	b.n	810efe0 <HAL_UART_IRQHandler+0x76c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810ef74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810ef78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810ef7c:	2b00      	cmp	r3, #0
 810ef7e:	d009      	beq.n	810ef94 <HAL_UART_IRQHandler+0x720>
 810ef80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810ef84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810ef88:	2b00      	cmp	r3, #0
 810ef8a:	d003      	beq.n	810ef94 <HAL_UART_IRQHandler+0x720>
  {
    UART_EndTransmit_IT(huart);
 810ef8c:	6878      	ldr	r0, [r7, #4]
 810ef8e:	f001 f90b 	bl	81101a8 <UART_EndTransmit_IT>
    return;
 810ef92:	e026      	b.n	810efe2 <HAL_UART_IRQHandler+0x76e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810ef94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810ef98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810ef9c:	2b00      	cmp	r3, #0
 810ef9e:	d009      	beq.n	810efb4 <HAL_UART_IRQHandler+0x740>
 810efa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810efa4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810efa8:	2b00      	cmp	r3, #0
 810efaa:	d003      	beq.n	810efb4 <HAL_UART_IRQHandler+0x740>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810efac:	6878      	ldr	r0, [r7, #4]
 810efae:	f001 fe57 	bl	8110c60 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810efb2:	e016      	b.n	810efe2 <HAL_UART_IRQHandler+0x76e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810efb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810efb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810efbc:	2b00      	cmp	r3, #0
 810efbe:	d010      	beq.n	810efe2 <HAL_UART_IRQHandler+0x76e>
 810efc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810efc4:	2b00      	cmp	r3, #0
 810efc6:	da0c      	bge.n	810efe2 <HAL_UART_IRQHandler+0x76e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810efc8:	6878      	ldr	r0, [r7, #4]
 810efca:	f001 fe3f 	bl	8110c4c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810efce:	e008      	b.n	810efe2 <HAL_UART_IRQHandler+0x76e>
      return;
 810efd0:	bf00      	nop
 810efd2:	e006      	b.n	810efe2 <HAL_UART_IRQHandler+0x76e>
    return;
 810efd4:	bf00      	nop
 810efd6:	e004      	b.n	810efe2 <HAL_UART_IRQHandler+0x76e>
      return;
 810efd8:	bf00      	nop
 810efda:	e002      	b.n	810efe2 <HAL_UART_IRQHandler+0x76e>
      return;
 810efdc:	bf00      	nop
 810efde:	e000      	b.n	810efe2 <HAL_UART_IRQHandler+0x76e>
    return;
 810efe0:	bf00      	nop
  }
}
 810efe2:	37e8      	adds	r7, #232	@ 0xe8
 810efe4:	46bd      	mov	sp, r7
 810efe6:	bd80      	pop	{r7, pc}

0810efe8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 810efe8:	b480      	push	{r7}
 810efea:	b083      	sub	sp, #12
 810efec:	af00      	add	r7, sp, #0
 810efee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 810eff0:	bf00      	nop
 810eff2:	370c      	adds	r7, #12
 810eff4:	46bd      	mov	sp, r7
 810eff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810effa:	4770      	bx	lr

0810effc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810effc:	b480      	push	{r7}
 810effe:	b083      	sub	sp, #12
 810f000:	af00      	add	r7, sp, #0
 810f002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810f004:	bf00      	nop
 810f006:	370c      	adds	r7, #12
 810f008:	46bd      	mov	sp, r7
 810f00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f00e:	4770      	bx	lr

0810f010 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810f010:	b480      	push	{r7}
 810f012:	b083      	sub	sp, #12
 810f014:	af00      	add	r7, sp, #0
 810f016:	6078      	str	r0, [r7, #4]
 810f018:	460b      	mov	r3, r1
 810f01a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810f01c:	bf00      	nop
 810f01e:	370c      	adds	r7, #12
 810f020:	46bd      	mov	sp, r7
 810f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f026:	4770      	bx	lr

0810f028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810f028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810f02c:	b092      	sub	sp, #72	@ 0x48
 810f02e:	af00      	add	r7, sp, #0
 810f030:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810f032:	2300      	movs	r3, #0
 810f034:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810f038:	697b      	ldr	r3, [r7, #20]
 810f03a:	689a      	ldr	r2, [r3, #8]
 810f03c:	697b      	ldr	r3, [r7, #20]
 810f03e:	691b      	ldr	r3, [r3, #16]
 810f040:	431a      	orrs	r2, r3
 810f042:	697b      	ldr	r3, [r7, #20]
 810f044:	695b      	ldr	r3, [r3, #20]
 810f046:	431a      	orrs	r2, r3
 810f048:	697b      	ldr	r3, [r7, #20]
 810f04a:	69db      	ldr	r3, [r3, #28]
 810f04c:	4313      	orrs	r3, r2
 810f04e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810f050:	697b      	ldr	r3, [r7, #20]
 810f052:	681b      	ldr	r3, [r3, #0]
 810f054:	681a      	ldr	r2, [r3, #0]
 810f056:	4bbd      	ldr	r3, [pc, #756]	@ (810f34c <UART_SetConfig+0x324>)
 810f058:	4013      	ands	r3, r2
 810f05a:	697a      	ldr	r2, [r7, #20]
 810f05c:	6812      	ldr	r2, [r2, #0]
 810f05e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810f060:	430b      	orrs	r3, r1
 810f062:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810f064:	697b      	ldr	r3, [r7, #20]
 810f066:	681b      	ldr	r3, [r3, #0]
 810f068:	685b      	ldr	r3, [r3, #4]
 810f06a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810f06e:	697b      	ldr	r3, [r7, #20]
 810f070:	68da      	ldr	r2, [r3, #12]
 810f072:	697b      	ldr	r3, [r7, #20]
 810f074:	681b      	ldr	r3, [r3, #0]
 810f076:	430a      	orrs	r2, r1
 810f078:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810f07a:	697b      	ldr	r3, [r7, #20]
 810f07c:	699b      	ldr	r3, [r3, #24]
 810f07e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810f080:	697b      	ldr	r3, [r7, #20]
 810f082:	681b      	ldr	r3, [r3, #0]
 810f084:	4ab2      	ldr	r2, [pc, #712]	@ (810f350 <UART_SetConfig+0x328>)
 810f086:	4293      	cmp	r3, r2
 810f088:	d004      	beq.n	810f094 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810f08a:	697b      	ldr	r3, [r7, #20]
 810f08c:	6a1b      	ldr	r3, [r3, #32]
 810f08e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810f090:	4313      	orrs	r3, r2
 810f092:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810f094:	697b      	ldr	r3, [r7, #20]
 810f096:	681b      	ldr	r3, [r3, #0]
 810f098:	689b      	ldr	r3, [r3, #8]
 810f09a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810f09e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810f0a2:	697a      	ldr	r2, [r7, #20]
 810f0a4:	6812      	ldr	r2, [r2, #0]
 810f0a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810f0a8:	430b      	orrs	r3, r1
 810f0aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810f0ac:	697b      	ldr	r3, [r7, #20]
 810f0ae:	681b      	ldr	r3, [r3, #0]
 810f0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f0b2:	f023 010f 	bic.w	r1, r3, #15
 810f0b6:	697b      	ldr	r3, [r7, #20]
 810f0b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810f0ba:	697b      	ldr	r3, [r7, #20]
 810f0bc:	681b      	ldr	r3, [r3, #0]
 810f0be:	430a      	orrs	r2, r1
 810f0c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810f0c2:	697b      	ldr	r3, [r7, #20]
 810f0c4:	681b      	ldr	r3, [r3, #0]
 810f0c6:	4aa3      	ldr	r2, [pc, #652]	@ (810f354 <UART_SetConfig+0x32c>)
 810f0c8:	4293      	cmp	r3, r2
 810f0ca:	d177      	bne.n	810f1bc <UART_SetConfig+0x194>
 810f0cc:	4ba2      	ldr	r3, [pc, #648]	@ (810f358 <UART_SetConfig+0x330>)
 810f0ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810f0d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810f0d4:	2b28      	cmp	r3, #40	@ 0x28
 810f0d6:	d86d      	bhi.n	810f1b4 <UART_SetConfig+0x18c>
 810f0d8:	a201      	add	r2, pc, #4	@ (adr r2, 810f0e0 <UART_SetConfig+0xb8>)
 810f0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f0de:	bf00      	nop
 810f0e0:	0810f185 	.word	0x0810f185
 810f0e4:	0810f1b5 	.word	0x0810f1b5
 810f0e8:	0810f1b5 	.word	0x0810f1b5
 810f0ec:	0810f1b5 	.word	0x0810f1b5
 810f0f0:	0810f1b5 	.word	0x0810f1b5
 810f0f4:	0810f1b5 	.word	0x0810f1b5
 810f0f8:	0810f1b5 	.word	0x0810f1b5
 810f0fc:	0810f1b5 	.word	0x0810f1b5
 810f100:	0810f18d 	.word	0x0810f18d
 810f104:	0810f1b5 	.word	0x0810f1b5
 810f108:	0810f1b5 	.word	0x0810f1b5
 810f10c:	0810f1b5 	.word	0x0810f1b5
 810f110:	0810f1b5 	.word	0x0810f1b5
 810f114:	0810f1b5 	.word	0x0810f1b5
 810f118:	0810f1b5 	.word	0x0810f1b5
 810f11c:	0810f1b5 	.word	0x0810f1b5
 810f120:	0810f195 	.word	0x0810f195
 810f124:	0810f1b5 	.word	0x0810f1b5
 810f128:	0810f1b5 	.word	0x0810f1b5
 810f12c:	0810f1b5 	.word	0x0810f1b5
 810f130:	0810f1b5 	.word	0x0810f1b5
 810f134:	0810f1b5 	.word	0x0810f1b5
 810f138:	0810f1b5 	.word	0x0810f1b5
 810f13c:	0810f1b5 	.word	0x0810f1b5
 810f140:	0810f19d 	.word	0x0810f19d
 810f144:	0810f1b5 	.word	0x0810f1b5
 810f148:	0810f1b5 	.word	0x0810f1b5
 810f14c:	0810f1b5 	.word	0x0810f1b5
 810f150:	0810f1b5 	.word	0x0810f1b5
 810f154:	0810f1b5 	.word	0x0810f1b5
 810f158:	0810f1b5 	.word	0x0810f1b5
 810f15c:	0810f1b5 	.word	0x0810f1b5
 810f160:	0810f1a5 	.word	0x0810f1a5
 810f164:	0810f1b5 	.word	0x0810f1b5
 810f168:	0810f1b5 	.word	0x0810f1b5
 810f16c:	0810f1b5 	.word	0x0810f1b5
 810f170:	0810f1b5 	.word	0x0810f1b5
 810f174:	0810f1b5 	.word	0x0810f1b5
 810f178:	0810f1b5 	.word	0x0810f1b5
 810f17c:	0810f1b5 	.word	0x0810f1b5
 810f180:	0810f1ad 	.word	0x0810f1ad
 810f184:	2301      	movs	r3, #1
 810f186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f18a:	e220      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f18c:	2304      	movs	r3, #4
 810f18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f192:	e21c      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f194:	2308      	movs	r3, #8
 810f196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f19a:	e218      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f19c:	2310      	movs	r3, #16
 810f19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f1a2:	e214      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f1a4:	2320      	movs	r3, #32
 810f1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f1aa:	e210      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f1ac:	2340      	movs	r3, #64	@ 0x40
 810f1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f1b2:	e20c      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f1b4:	2380      	movs	r3, #128	@ 0x80
 810f1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f1ba:	e208      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f1bc:	697b      	ldr	r3, [r7, #20]
 810f1be:	681b      	ldr	r3, [r3, #0]
 810f1c0:	4a66      	ldr	r2, [pc, #408]	@ (810f35c <UART_SetConfig+0x334>)
 810f1c2:	4293      	cmp	r3, r2
 810f1c4:	d130      	bne.n	810f228 <UART_SetConfig+0x200>
 810f1c6:	4b64      	ldr	r3, [pc, #400]	@ (810f358 <UART_SetConfig+0x330>)
 810f1c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810f1ca:	f003 0307 	and.w	r3, r3, #7
 810f1ce:	2b05      	cmp	r3, #5
 810f1d0:	d826      	bhi.n	810f220 <UART_SetConfig+0x1f8>
 810f1d2:	a201      	add	r2, pc, #4	@ (adr r2, 810f1d8 <UART_SetConfig+0x1b0>)
 810f1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f1d8:	0810f1f1 	.word	0x0810f1f1
 810f1dc:	0810f1f9 	.word	0x0810f1f9
 810f1e0:	0810f201 	.word	0x0810f201
 810f1e4:	0810f209 	.word	0x0810f209
 810f1e8:	0810f211 	.word	0x0810f211
 810f1ec:	0810f219 	.word	0x0810f219
 810f1f0:	2300      	movs	r3, #0
 810f1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f1f6:	e1ea      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f1f8:	2304      	movs	r3, #4
 810f1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f1fe:	e1e6      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f200:	2308      	movs	r3, #8
 810f202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f206:	e1e2      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f208:	2310      	movs	r3, #16
 810f20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f20e:	e1de      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f210:	2320      	movs	r3, #32
 810f212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f216:	e1da      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f218:	2340      	movs	r3, #64	@ 0x40
 810f21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f21e:	e1d6      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f220:	2380      	movs	r3, #128	@ 0x80
 810f222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f226:	e1d2      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f228:	697b      	ldr	r3, [r7, #20]
 810f22a:	681b      	ldr	r3, [r3, #0]
 810f22c:	4a4c      	ldr	r2, [pc, #304]	@ (810f360 <UART_SetConfig+0x338>)
 810f22e:	4293      	cmp	r3, r2
 810f230:	d130      	bne.n	810f294 <UART_SetConfig+0x26c>
 810f232:	4b49      	ldr	r3, [pc, #292]	@ (810f358 <UART_SetConfig+0x330>)
 810f234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810f236:	f003 0307 	and.w	r3, r3, #7
 810f23a:	2b05      	cmp	r3, #5
 810f23c:	d826      	bhi.n	810f28c <UART_SetConfig+0x264>
 810f23e:	a201      	add	r2, pc, #4	@ (adr r2, 810f244 <UART_SetConfig+0x21c>)
 810f240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f244:	0810f25d 	.word	0x0810f25d
 810f248:	0810f265 	.word	0x0810f265
 810f24c:	0810f26d 	.word	0x0810f26d
 810f250:	0810f275 	.word	0x0810f275
 810f254:	0810f27d 	.word	0x0810f27d
 810f258:	0810f285 	.word	0x0810f285
 810f25c:	2300      	movs	r3, #0
 810f25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f262:	e1b4      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f264:	2304      	movs	r3, #4
 810f266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f26a:	e1b0      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f26c:	2308      	movs	r3, #8
 810f26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f272:	e1ac      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f274:	2310      	movs	r3, #16
 810f276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f27a:	e1a8      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f27c:	2320      	movs	r3, #32
 810f27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f282:	e1a4      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f284:	2340      	movs	r3, #64	@ 0x40
 810f286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f28a:	e1a0      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f28c:	2380      	movs	r3, #128	@ 0x80
 810f28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f292:	e19c      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f294:	697b      	ldr	r3, [r7, #20]
 810f296:	681b      	ldr	r3, [r3, #0]
 810f298:	4a32      	ldr	r2, [pc, #200]	@ (810f364 <UART_SetConfig+0x33c>)
 810f29a:	4293      	cmp	r3, r2
 810f29c:	d130      	bne.n	810f300 <UART_SetConfig+0x2d8>
 810f29e:	4b2e      	ldr	r3, [pc, #184]	@ (810f358 <UART_SetConfig+0x330>)
 810f2a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810f2a2:	f003 0307 	and.w	r3, r3, #7
 810f2a6:	2b05      	cmp	r3, #5
 810f2a8:	d826      	bhi.n	810f2f8 <UART_SetConfig+0x2d0>
 810f2aa:	a201      	add	r2, pc, #4	@ (adr r2, 810f2b0 <UART_SetConfig+0x288>)
 810f2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f2b0:	0810f2c9 	.word	0x0810f2c9
 810f2b4:	0810f2d1 	.word	0x0810f2d1
 810f2b8:	0810f2d9 	.word	0x0810f2d9
 810f2bc:	0810f2e1 	.word	0x0810f2e1
 810f2c0:	0810f2e9 	.word	0x0810f2e9
 810f2c4:	0810f2f1 	.word	0x0810f2f1
 810f2c8:	2300      	movs	r3, #0
 810f2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f2ce:	e17e      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f2d0:	2304      	movs	r3, #4
 810f2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f2d6:	e17a      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f2d8:	2308      	movs	r3, #8
 810f2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f2de:	e176      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f2e0:	2310      	movs	r3, #16
 810f2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f2e6:	e172      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f2e8:	2320      	movs	r3, #32
 810f2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f2ee:	e16e      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f2f0:	2340      	movs	r3, #64	@ 0x40
 810f2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f2f6:	e16a      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f2f8:	2380      	movs	r3, #128	@ 0x80
 810f2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f2fe:	e166      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f300:	697b      	ldr	r3, [r7, #20]
 810f302:	681b      	ldr	r3, [r3, #0]
 810f304:	4a18      	ldr	r2, [pc, #96]	@ (810f368 <UART_SetConfig+0x340>)
 810f306:	4293      	cmp	r3, r2
 810f308:	d140      	bne.n	810f38c <UART_SetConfig+0x364>
 810f30a:	4b13      	ldr	r3, [pc, #76]	@ (810f358 <UART_SetConfig+0x330>)
 810f30c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810f30e:	f003 0307 	and.w	r3, r3, #7
 810f312:	2b05      	cmp	r3, #5
 810f314:	d836      	bhi.n	810f384 <UART_SetConfig+0x35c>
 810f316:	a201      	add	r2, pc, #4	@ (adr r2, 810f31c <UART_SetConfig+0x2f4>)
 810f318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f31c:	0810f335 	.word	0x0810f335
 810f320:	0810f33d 	.word	0x0810f33d
 810f324:	0810f345 	.word	0x0810f345
 810f328:	0810f36d 	.word	0x0810f36d
 810f32c:	0810f375 	.word	0x0810f375
 810f330:	0810f37d 	.word	0x0810f37d
 810f334:	2300      	movs	r3, #0
 810f336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f33a:	e148      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f33c:	2304      	movs	r3, #4
 810f33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f342:	e144      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f344:	2308      	movs	r3, #8
 810f346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f34a:	e140      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f34c:	cfff69f3 	.word	0xcfff69f3
 810f350:	58000c00 	.word	0x58000c00
 810f354:	40011000 	.word	0x40011000
 810f358:	58024400 	.word	0x58024400
 810f35c:	40004400 	.word	0x40004400
 810f360:	40004800 	.word	0x40004800
 810f364:	40004c00 	.word	0x40004c00
 810f368:	40005000 	.word	0x40005000
 810f36c:	2310      	movs	r3, #16
 810f36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f372:	e12c      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f374:	2320      	movs	r3, #32
 810f376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f37a:	e128      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f37c:	2340      	movs	r3, #64	@ 0x40
 810f37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f382:	e124      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f384:	2380      	movs	r3, #128	@ 0x80
 810f386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f38a:	e120      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f38c:	697b      	ldr	r3, [r7, #20]
 810f38e:	681b      	ldr	r3, [r3, #0]
 810f390:	4acb      	ldr	r2, [pc, #812]	@ (810f6c0 <UART_SetConfig+0x698>)
 810f392:	4293      	cmp	r3, r2
 810f394:	d176      	bne.n	810f484 <UART_SetConfig+0x45c>
 810f396:	4bcb      	ldr	r3, [pc, #812]	@ (810f6c4 <UART_SetConfig+0x69c>)
 810f398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810f39a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810f39e:	2b28      	cmp	r3, #40	@ 0x28
 810f3a0:	d86c      	bhi.n	810f47c <UART_SetConfig+0x454>
 810f3a2:	a201      	add	r2, pc, #4	@ (adr r2, 810f3a8 <UART_SetConfig+0x380>)
 810f3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f3a8:	0810f44d 	.word	0x0810f44d
 810f3ac:	0810f47d 	.word	0x0810f47d
 810f3b0:	0810f47d 	.word	0x0810f47d
 810f3b4:	0810f47d 	.word	0x0810f47d
 810f3b8:	0810f47d 	.word	0x0810f47d
 810f3bc:	0810f47d 	.word	0x0810f47d
 810f3c0:	0810f47d 	.word	0x0810f47d
 810f3c4:	0810f47d 	.word	0x0810f47d
 810f3c8:	0810f455 	.word	0x0810f455
 810f3cc:	0810f47d 	.word	0x0810f47d
 810f3d0:	0810f47d 	.word	0x0810f47d
 810f3d4:	0810f47d 	.word	0x0810f47d
 810f3d8:	0810f47d 	.word	0x0810f47d
 810f3dc:	0810f47d 	.word	0x0810f47d
 810f3e0:	0810f47d 	.word	0x0810f47d
 810f3e4:	0810f47d 	.word	0x0810f47d
 810f3e8:	0810f45d 	.word	0x0810f45d
 810f3ec:	0810f47d 	.word	0x0810f47d
 810f3f0:	0810f47d 	.word	0x0810f47d
 810f3f4:	0810f47d 	.word	0x0810f47d
 810f3f8:	0810f47d 	.word	0x0810f47d
 810f3fc:	0810f47d 	.word	0x0810f47d
 810f400:	0810f47d 	.word	0x0810f47d
 810f404:	0810f47d 	.word	0x0810f47d
 810f408:	0810f465 	.word	0x0810f465
 810f40c:	0810f47d 	.word	0x0810f47d
 810f410:	0810f47d 	.word	0x0810f47d
 810f414:	0810f47d 	.word	0x0810f47d
 810f418:	0810f47d 	.word	0x0810f47d
 810f41c:	0810f47d 	.word	0x0810f47d
 810f420:	0810f47d 	.word	0x0810f47d
 810f424:	0810f47d 	.word	0x0810f47d
 810f428:	0810f46d 	.word	0x0810f46d
 810f42c:	0810f47d 	.word	0x0810f47d
 810f430:	0810f47d 	.word	0x0810f47d
 810f434:	0810f47d 	.word	0x0810f47d
 810f438:	0810f47d 	.word	0x0810f47d
 810f43c:	0810f47d 	.word	0x0810f47d
 810f440:	0810f47d 	.word	0x0810f47d
 810f444:	0810f47d 	.word	0x0810f47d
 810f448:	0810f475 	.word	0x0810f475
 810f44c:	2301      	movs	r3, #1
 810f44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f452:	e0bc      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f454:	2304      	movs	r3, #4
 810f456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f45a:	e0b8      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f45c:	2308      	movs	r3, #8
 810f45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f462:	e0b4      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f464:	2310      	movs	r3, #16
 810f466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f46a:	e0b0      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f46c:	2320      	movs	r3, #32
 810f46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f472:	e0ac      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f474:	2340      	movs	r3, #64	@ 0x40
 810f476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f47a:	e0a8      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f47c:	2380      	movs	r3, #128	@ 0x80
 810f47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f482:	e0a4      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f484:	697b      	ldr	r3, [r7, #20]
 810f486:	681b      	ldr	r3, [r3, #0]
 810f488:	4a8f      	ldr	r2, [pc, #572]	@ (810f6c8 <UART_SetConfig+0x6a0>)
 810f48a:	4293      	cmp	r3, r2
 810f48c:	d130      	bne.n	810f4f0 <UART_SetConfig+0x4c8>
 810f48e:	4b8d      	ldr	r3, [pc, #564]	@ (810f6c4 <UART_SetConfig+0x69c>)
 810f490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810f492:	f003 0307 	and.w	r3, r3, #7
 810f496:	2b05      	cmp	r3, #5
 810f498:	d826      	bhi.n	810f4e8 <UART_SetConfig+0x4c0>
 810f49a:	a201      	add	r2, pc, #4	@ (adr r2, 810f4a0 <UART_SetConfig+0x478>)
 810f49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f4a0:	0810f4b9 	.word	0x0810f4b9
 810f4a4:	0810f4c1 	.word	0x0810f4c1
 810f4a8:	0810f4c9 	.word	0x0810f4c9
 810f4ac:	0810f4d1 	.word	0x0810f4d1
 810f4b0:	0810f4d9 	.word	0x0810f4d9
 810f4b4:	0810f4e1 	.word	0x0810f4e1
 810f4b8:	2300      	movs	r3, #0
 810f4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f4be:	e086      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f4c0:	2304      	movs	r3, #4
 810f4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f4c6:	e082      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f4c8:	2308      	movs	r3, #8
 810f4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f4ce:	e07e      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f4d0:	2310      	movs	r3, #16
 810f4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f4d6:	e07a      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f4d8:	2320      	movs	r3, #32
 810f4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f4de:	e076      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f4e0:	2340      	movs	r3, #64	@ 0x40
 810f4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f4e6:	e072      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f4e8:	2380      	movs	r3, #128	@ 0x80
 810f4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f4ee:	e06e      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f4f0:	697b      	ldr	r3, [r7, #20]
 810f4f2:	681b      	ldr	r3, [r3, #0]
 810f4f4:	4a75      	ldr	r2, [pc, #468]	@ (810f6cc <UART_SetConfig+0x6a4>)
 810f4f6:	4293      	cmp	r3, r2
 810f4f8:	d130      	bne.n	810f55c <UART_SetConfig+0x534>
 810f4fa:	4b72      	ldr	r3, [pc, #456]	@ (810f6c4 <UART_SetConfig+0x69c>)
 810f4fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810f4fe:	f003 0307 	and.w	r3, r3, #7
 810f502:	2b05      	cmp	r3, #5
 810f504:	d826      	bhi.n	810f554 <UART_SetConfig+0x52c>
 810f506:	a201      	add	r2, pc, #4	@ (adr r2, 810f50c <UART_SetConfig+0x4e4>)
 810f508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f50c:	0810f525 	.word	0x0810f525
 810f510:	0810f52d 	.word	0x0810f52d
 810f514:	0810f535 	.word	0x0810f535
 810f518:	0810f53d 	.word	0x0810f53d
 810f51c:	0810f545 	.word	0x0810f545
 810f520:	0810f54d 	.word	0x0810f54d
 810f524:	2300      	movs	r3, #0
 810f526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f52a:	e050      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f52c:	2304      	movs	r3, #4
 810f52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f532:	e04c      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f534:	2308      	movs	r3, #8
 810f536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f53a:	e048      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f53c:	2310      	movs	r3, #16
 810f53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f542:	e044      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f544:	2320      	movs	r3, #32
 810f546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f54a:	e040      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f54c:	2340      	movs	r3, #64	@ 0x40
 810f54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f552:	e03c      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f554:	2380      	movs	r3, #128	@ 0x80
 810f556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f55a:	e038      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f55c:	697b      	ldr	r3, [r7, #20]
 810f55e:	681b      	ldr	r3, [r3, #0]
 810f560:	4a5b      	ldr	r2, [pc, #364]	@ (810f6d0 <UART_SetConfig+0x6a8>)
 810f562:	4293      	cmp	r3, r2
 810f564:	d130      	bne.n	810f5c8 <UART_SetConfig+0x5a0>
 810f566:	4b57      	ldr	r3, [pc, #348]	@ (810f6c4 <UART_SetConfig+0x69c>)
 810f568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810f56a:	f003 0307 	and.w	r3, r3, #7
 810f56e:	2b05      	cmp	r3, #5
 810f570:	d826      	bhi.n	810f5c0 <UART_SetConfig+0x598>
 810f572:	a201      	add	r2, pc, #4	@ (adr r2, 810f578 <UART_SetConfig+0x550>)
 810f574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f578:	0810f591 	.word	0x0810f591
 810f57c:	0810f599 	.word	0x0810f599
 810f580:	0810f5a1 	.word	0x0810f5a1
 810f584:	0810f5a9 	.word	0x0810f5a9
 810f588:	0810f5b1 	.word	0x0810f5b1
 810f58c:	0810f5b9 	.word	0x0810f5b9
 810f590:	2302      	movs	r3, #2
 810f592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f596:	e01a      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f598:	2304      	movs	r3, #4
 810f59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f59e:	e016      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f5a0:	2308      	movs	r3, #8
 810f5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f5a6:	e012      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f5a8:	2310      	movs	r3, #16
 810f5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f5ae:	e00e      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f5b0:	2320      	movs	r3, #32
 810f5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f5b6:	e00a      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f5b8:	2340      	movs	r3, #64	@ 0x40
 810f5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f5be:	e006      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f5c0:	2380      	movs	r3, #128	@ 0x80
 810f5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f5c6:	e002      	b.n	810f5ce <UART_SetConfig+0x5a6>
 810f5c8:	2380      	movs	r3, #128	@ 0x80
 810f5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810f5ce:	697b      	ldr	r3, [r7, #20]
 810f5d0:	681b      	ldr	r3, [r3, #0]
 810f5d2:	4a3f      	ldr	r2, [pc, #252]	@ (810f6d0 <UART_SetConfig+0x6a8>)
 810f5d4:	4293      	cmp	r3, r2
 810f5d6:	f040 80f8 	bne.w	810f7ca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810f5da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810f5de:	2b20      	cmp	r3, #32
 810f5e0:	dc46      	bgt.n	810f670 <UART_SetConfig+0x648>
 810f5e2:	2b02      	cmp	r3, #2
 810f5e4:	f2c0 8082 	blt.w	810f6ec <UART_SetConfig+0x6c4>
 810f5e8:	3b02      	subs	r3, #2
 810f5ea:	2b1e      	cmp	r3, #30
 810f5ec:	d87e      	bhi.n	810f6ec <UART_SetConfig+0x6c4>
 810f5ee:	a201      	add	r2, pc, #4	@ (adr r2, 810f5f4 <UART_SetConfig+0x5cc>)
 810f5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f5f4:	0810f677 	.word	0x0810f677
 810f5f8:	0810f6ed 	.word	0x0810f6ed
 810f5fc:	0810f67f 	.word	0x0810f67f
 810f600:	0810f6ed 	.word	0x0810f6ed
 810f604:	0810f6ed 	.word	0x0810f6ed
 810f608:	0810f6ed 	.word	0x0810f6ed
 810f60c:	0810f68f 	.word	0x0810f68f
 810f610:	0810f6ed 	.word	0x0810f6ed
 810f614:	0810f6ed 	.word	0x0810f6ed
 810f618:	0810f6ed 	.word	0x0810f6ed
 810f61c:	0810f6ed 	.word	0x0810f6ed
 810f620:	0810f6ed 	.word	0x0810f6ed
 810f624:	0810f6ed 	.word	0x0810f6ed
 810f628:	0810f6ed 	.word	0x0810f6ed
 810f62c:	0810f69f 	.word	0x0810f69f
 810f630:	0810f6ed 	.word	0x0810f6ed
 810f634:	0810f6ed 	.word	0x0810f6ed
 810f638:	0810f6ed 	.word	0x0810f6ed
 810f63c:	0810f6ed 	.word	0x0810f6ed
 810f640:	0810f6ed 	.word	0x0810f6ed
 810f644:	0810f6ed 	.word	0x0810f6ed
 810f648:	0810f6ed 	.word	0x0810f6ed
 810f64c:	0810f6ed 	.word	0x0810f6ed
 810f650:	0810f6ed 	.word	0x0810f6ed
 810f654:	0810f6ed 	.word	0x0810f6ed
 810f658:	0810f6ed 	.word	0x0810f6ed
 810f65c:	0810f6ed 	.word	0x0810f6ed
 810f660:	0810f6ed 	.word	0x0810f6ed
 810f664:	0810f6ed 	.word	0x0810f6ed
 810f668:	0810f6ed 	.word	0x0810f6ed
 810f66c:	0810f6df 	.word	0x0810f6df
 810f670:	2b40      	cmp	r3, #64	@ 0x40
 810f672:	d037      	beq.n	810f6e4 <UART_SetConfig+0x6bc>
 810f674:	e03a      	b.n	810f6ec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810f676:	f7fc fd9d 	bl	810c1b4 <HAL_RCCEx_GetD3PCLK1Freq>
 810f67a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810f67c:	e03c      	b.n	810f6f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810f67e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810f682:	4618      	mov	r0, r3
 810f684:	f7fc fdac 	bl	810c1e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810f688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f68a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f68c:	e034      	b.n	810f6f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810f68e:	f107 0318 	add.w	r3, r7, #24
 810f692:	4618      	mov	r0, r3
 810f694:	f7fc fef8 	bl	810c488 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810f698:	69fb      	ldr	r3, [r7, #28]
 810f69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f69c:	e02c      	b.n	810f6f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810f69e:	4b09      	ldr	r3, [pc, #36]	@ (810f6c4 <UART_SetConfig+0x69c>)
 810f6a0:	681b      	ldr	r3, [r3, #0]
 810f6a2:	f003 0320 	and.w	r3, r3, #32
 810f6a6:	2b00      	cmp	r3, #0
 810f6a8:	d016      	beq.n	810f6d8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810f6aa:	4b06      	ldr	r3, [pc, #24]	@ (810f6c4 <UART_SetConfig+0x69c>)
 810f6ac:	681b      	ldr	r3, [r3, #0]
 810f6ae:	08db      	lsrs	r3, r3, #3
 810f6b0:	f003 0303 	and.w	r3, r3, #3
 810f6b4:	4a07      	ldr	r2, [pc, #28]	@ (810f6d4 <UART_SetConfig+0x6ac>)
 810f6b6:	fa22 f303 	lsr.w	r3, r2, r3
 810f6ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810f6bc:	e01c      	b.n	810f6f8 <UART_SetConfig+0x6d0>
 810f6be:	bf00      	nop
 810f6c0:	40011400 	.word	0x40011400
 810f6c4:	58024400 	.word	0x58024400
 810f6c8:	40007800 	.word	0x40007800
 810f6cc:	40007c00 	.word	0x40007c00
 810f6d0:	58000c00 	.word	0x58000c00
 810f6d4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810f6d8:	4b9d      	ldr	r3, [pc, #628]	@ (810f950 <UART_SetConfig+0x928>)
 810f6da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f6dc:	e00c      	b.n	810f6f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810f6de:	4b9d      	ldr	r3, [pc, #628]	@ (810f954 <UART_SetConfig+0x92c>)
 810f6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f6e2:	e009      	b.n	810f6f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810f6e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810f6e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f6ea:	e005      	b.n	810f6f8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810f6ec:	2300      	movs	r3, #0
 810f6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810f6f0:	2301      	movs	r3, #1
 810f6f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810f6f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810f6f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810f6fa:	2b00      	cmp	r3, #0
 810f6fc:	f000 81de 	beq.w	810fabc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810f700:	697b      	ldr	r3, [r7, #20]
 810f702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810f704:	4a94      	ldr	r2, [pc, #592]	@ (810f958 <UART_SetConfig+0x930>)
 810f706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810f70a:	461a      	mov	r2, r3
 810f70c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810f70e:	fbb3 f3f2 	udiv	r3, r3, r2
 810f712:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810f714:	697b      	ldr	r3, [r7, #20]
 810f716:	685a      	ldr	r2, [r3, #4]
 810f718:	4613      	mov	r3, r2
 810f71a:	005b      	lsls	r3, r3, #1
 810f71c:	4413      	add	r3, r2
 810f71e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810f720:	429a      	cmp	r2, r3
 810f722:	d305      	bcc.n	810f730 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810f724:	697b      	ldr	r3, [r7, #20]
 810f726:	685b      	ldr	r3, [r3, #4]
 810f728:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810f72a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810f72c:	429a      	cmp	r2, r3
 810f72e:	d903      	bls.n	810f738 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810f730:	2301      	movs	r3, #1
 810f732:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810f736:	e1c1      	b.n	810fabc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810f738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810f73a:	2200      	movs	r2, #0
 810f73c:	60bb      	str	r3, [r7, #8]
 810f73e:	60fa      	str	r2, [r7, #12]
 810f740:	697b      	ldr	r3, [r7, #20]
 810f742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810f744:	4a84      	ldr	r2, [pc, #528]	@ (810f958 <UART_SetConfig+0x930>)
 810f746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810f74a:	b29b      	uxth	r3, r3
 810f74c:	2200      	movs	r2, #0
 810f74e:	603b      	str	r3, [r7, #0]
 810f750:	607a      	str	r2, [r7, #4]
 810f752:	e9d7 2300 	ldrd	r2, r3, [r7]
 810f756:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810f75a:	f7f1 fb1d 	bl	8100d98 <__aeabi_uldivmod>
 810f75e:	4602      	mov	r2, r0
 810f760:	460b      	mov	r3, r1
 810f762:	4610      	mov	r0, r2
 810f764:	4619      	mov	r1, r3
 810f766:	f04f 0200 	mov.w	r2, #0
 810f76a:	f04f 0300 	mov.w	r3, #0
 810f76e:	020b      	lsls	r3, r1, #8
 810f770:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810f774:	0202      	lsls	r2, r0, #8
 810f776:	6979      	ldr	r1, [r7, #20]
 810f778:	6849      	ldr	r1, [r1, #4]
 810f77a:	0849      	lsrs	r1, r1, #1
 810f77c:	2000      	movs	r0, #0
 810f77e:	460c      	mov	r4, r1
 810f780:	4605      	mov	r5, r0
 810f782:	eb12 0804 	adds.w	r8, r2, r4
 810f786:	eb43 0905 	adc.w	r9, r3, r5
 810f78a:	697b      	ldr	r3, [r7, #20]
 810f78c:	685b      	ldr	r3, [r3, #4]
 810f78e:	2200      	movs	r2, #0
 810f790:	469a      	mov	sl, r3
 810f792:	4693      	mov	fp, r2
 810f794:	4652      	mov	r2, sl
 810f796:	465b      	mov	r3, fp
 810f798:	4640      	mov	r0, r8
 810f79a:	4649      	mov	r1, r9
 810f79c:	f7f1 fafc 	bl	8100d98 <__aeabi_uldivmod>
 810f7a0:	4602      	mov	r2, r0
 810f7a2:	460b      	mov	r3, r1
 810f7a4:	4613      	mov	r3, r2
 810f7a6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810f7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f7aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810f7ae:	d308      	bcc.n	810f7c2 <UART_SetConfig+0x79a>
 810f7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f7b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810f7b6:	d204      	bcs.n	810f7c2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810f7b8:	697b      	ldr	r3, [r7, #20]
 810f7ba:	681b      	ldr	r3, [r3, #0]
 810f7bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810f7be:	60da      	str	r2, [r3, #12]
 810f7c0:	e17c      	b.n	810fabc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810f7c2:	2301      	movs	r3, #1
 810f7c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810f7c8:	e178      	b.n	810fabc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810f7ca:	697b      	ldr	r3, [r7, #20]
 810f7cc:	69db      	ldr	r3, [r3, #28]
 810f7ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810f7d2:	f040 80c5 	bne.w	810f960 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810f7d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810f7da:	2b20      	cmp	r3, #32
 810f7dc:	dc48      	bgt.n	810f870 <UART_SetConfig+0x848>
 810f7de:	2b00      	cmp	r3, #0
 810f7e0:	db7b      	blt.n	810f8da <UART_SetConfig+0x8b2>
 810f7e2:	2b20      	cmp	r3, #32
 810f7e4:	d879      	bhi.n	810f8da <UART_SetConfig+0x8b2>
 810f7e6:	a201      	add	r2, pc, #4	@ (adr r2, 810f7ec <UART_SetConfig+0x7c4>)
 810f7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f7ec:	0810f877 	.word	0x0810f877
 810f7f0:	0810f87f 	.word	0x0810f87f
 810f7f4:	0810f8db 	.word	0x0810f8db
 810f7f8:	0810f8db 	.word	0x0810f8db
 810f7fc:	0810f887 	.word	0x0810f887
 810f800:	0810f8db 	.word	0x0810f8db
 810f804:	0810f8db 	.word	0x0810f8db
 810f808:	0810f8db 	.word	0x0810f8db
 810f80c:	0810f897 	.word	0x0810f897
 810f810:	0810f8db 	.word	0x0810f8db
 810f814:	0810f8db 	.word	0x0810f8db
 810f818:	0810f8db 	.word	0x0810f8db
 810f81c:	0810f8db 	.word	0x0810f8db
 810f820:	0810f8db 	.word	0x0810f8db
 810f824:	0810f8db 	.word	0x0810f8db
 810f828:	0810f8db 	.word	0x0810f8db
 810f82c:	0810f8a7 	.word	0x0810f8a7
 810f830:	0810f8db 	.word	0x0810f8db
 810f834:	0810f8db 	.word	0x0810f8db
 810f838:	0810f8db 	.word	0x0810f8db
 810f83c:	0810f8db 	.word	0x0810f8db
 810f840:	0810f8db 	.word	0x0810f8db
 810f844:	0810f8db 	.word	0x0810f8db
 810f848:	0810f8db 	.word	0x0810f8db
 810f84c:	0810f8db 	.word	0x0810f8db
 810f850:	0810f8db 	.word	0x0810f8db
 810f854:	0810f8db 	.word	0x0810f8db
 810f858:	0810f8db 	.word	0x0810f8db
 810f85c:	0810f8db 	.word	0x0810f8db
 810f860:	0810f8db 	.word	0x0810f8db
 810f864:	0810f8db 	.word	0x0810f8db
 810f868:	0810f8db 	.word	0x0810f8db
 810f86c:	0810f8cd 	.word	0x0810f8cd
 810f870:	2b40      	cmp	r3, #64	@ 0x40
 810f872:	d02e      	beq.n	810f8d2 <UART_SetConfig+0x8aa>
 810f874:	e031      	b.n	810f8da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810f876:	f7fa fce7 	bl	810a248 <HAL_RCC_GetPCLK1Freq>
 810f87a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810f87c:	e033      	b.n	810f8e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810f87e:	f7fa fcf9 	bl	810a274 <HAL_RCC_GetPCLK2Freq>
 810f882:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810f884:	e02f      	b.n	810f8e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810f886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810f88a:	4618      	mov	r0, r3
 810f88c:	f7fc fca8 	bl	810c1e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810f890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f894:	e027      	b.n	810f8e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810f896:	f107 0318 	add.w	r3, r7, #24
 810f89a:	4618      	mov	r0, r3
 810f89c:	f7fc fdf4 	bl	810c488 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810f8a0:	69fb      	ldr	r3, [r7, #28]
 810f8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f8a4:	e01f      	b.n	810f8e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810f8a6:	4b2d      	ldr	r3, [pc, #180]	@ (810f95c <UART_SetConfig+0x934>)
 810f8a8:	681b      	ldr	r3, [r3, #0]
 810f8aa:	f003 0320 	and.w	r3, r3, #32
 810f8ae:	2b00      	cmp	r3, #0
 810f8b0:	d009      	beq.n	810f8c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810f8b2:	4b2a      	ldr	r3, [pc, #168]	@ (810f95c <UART_SetConfig+0x934>)
 810f8b4:	681b      	ldr	r3, [r3, #0]
 810f8b6:	08db      	lsrs	r3, r3, #3
 810f8b8:	f003 0303 	and.w	r3, r3, #3
 810f8bc:	4a24      	ldr	r2, [pc, #144]	@ (810f950 <UART_SetConfig+0x928>)
 810f8be:	fa22 f303 	lsr.w	r3, r2, r3
 810f8c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810f8c4:	e00f      	b.n	810f8e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810f8c6:	4b22      	ldr	r3, [pc, #136]	@ (810f950 <UART_SetConfig+0x928>)
 810f8c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f8ca:	e00c      	b.n	810f8e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810f8cc:	4b21      	ldr	r3, [pc, #132]	@ (810f954 <UART_SetConfig+0x92c>)
 810f8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f8d0:	e009      	b.n	810f8e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810f8d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810f8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f8d8:	e005      	b.n	810f8e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810f8da:	2300      	movs	r3, #0
 810f8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810f8de:	2301      	movs	r3, #1
 810f8e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810f8e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810f8e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810f8e8:	2b00      	cmp	r3, #0
 810f8ea:	f000 80e7 	beq.w	810fabc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810f8ee:	697b      	ldr	r3, [r7, #20]
 810f8f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810f8f2:	4a19      	ldr	r2, [pc, #100]	@ (810f958 <UART_SetConfig+0x930>)
 810f8f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810f8f8:	461a      	mov	r2, r3
 810f8fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810f8fc:	fbb3 f3f2 	udiv	r3, r3, r2
 810f900:	005a      	lsls	r2, r3, #1
 810f902:	697b      	ldr	r3, [r7, #20]
 810f904:	685b      	ldr	r3, [r3, #4]
 810f906:	085b      	lsrs	r3, r3, #1
 810f908:	441a      	add	r2, r3
 810f90a:	697b      	ldr	r3, [r7, #20]
 810f90c:	685b      	ldr	r3, [r3, #4]
 810f90e:	fbb2 f3f3 	udiv	r3, r2, r3
 810f912:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810f914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f916:	2b0f      	cmp	r3, #15
 810f918:	d916      	bls.n	810f948 <UART_SetConfig+0x920>
 810f91a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f91c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810f920:	d212      	bcs.n	810f948 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810f922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f924:	b29b      	uxth	r3, r3
 810f926:	f023 030f 	bic.w	r3, r3, #15
 810f92a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810f92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f92e:	085b      	lsrs	r3, r3, #1
 810f930:	b29b      	uxth	r3, r3
 810f932:	f003 0307 	and.w	r3, r3, #7
 810f936:	b29a      	uxth	r2, r3
 810f938:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810f93a:	4313      	orrs	r3, r2
 810f93c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810f93e:	697b      	ldr	r3, [r7, #20]
 810f940:	681b      	ldr	r3, [r3, #0]
 810f942:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810f944:	60da      	str	r2, [r3, #12]
 810f946:	e0b9      	b.n	810fabc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810f948:	2301      	movs	r3, #1
 810f94a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810f94e:	e0b5      	b.n	810fabc <UART_SetConfig+0xa94>
 810f950:	03d09000 	.word	0x03d09000
 810f954:	003d0900 	.word	0x003d0900
 810f958:	08116ce0 	.word	0x08116ce0
 810f95c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810f960:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810f964:	2b20      	cmp	r3, #32
 810f966:	dc49      	bgt.n	810f9fc <UART_SetConfig+0x9d4>
 810f968:	2b00      	cmp	r3, #0
 810f96a:	db7c      	blt.n	810fa66 <UART_SetConfig+0xa3e>
 810f96c:	2b20      	cmp	r3, #32
 810f96e:	d87a      	bhi.n	810fa66 <UART_SetConfig+0xa3e>
 810f970:	a201      	add	r2, pc, #4	@ (adr r2, 810f978 <UART_SetConfig+0x950>)
 810f972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f976:	bf00      	nop
 810f978:	0810fa03 	.word	0x0810fa03
 810f97c:	0810fa0b 	.word	0x0810fa0b
 810f980:	0810fa67 	.word	0x0810fa67
 810f984:	0810fa67 	.word	0x0810fa67
 810f988:	0810fa13 	.word	0x0810fa13
 810f98c:	0810fa67 	.word	0x0810fa67
 810f990:	0810fa67 	.word	0x0810fa67
 810f994:	0810fa67 	.word	0x0810fa67
 810f998:	0810fa23 	.word	0x0810fa23
 810f99c:	0810fa67 	.word	0x0810fa67
 810f9a0:	0810fa67 	.word	0x0810fa67
 810f9a4:	0810fa67 	.word	0x0810fa67
 810f9a8:	0810fa67 	.word	0x0810fa67
 810f9ac:	0810fa67 	.word	0x0810fa67
 810f9b0:	0810fa67 	.word	0x0810fa67
 810f9b4:	0810fa67 	.word	0x0810fa67
 810f9b8:	0810fa33 	.word	0x0810fa33
 810f9bc:	0810fa67 	.word	0x0810fa67
 810f9c0:	0810fa67 	.word	0x0810fa67
 810f9c4:	0810fa67 	.word	0x0810fa67
 810f9c8:	0810fa67 	.word	0x0810fa67
 810f9cc:	0810fa67 	.word	0x0810fa67
 810f9d0:	0810fa67 	.word	0x0810fa67
 810f9d4:	0810fa67 	.word	0x0810fa67
 810f9d8:	0810fa67 	.word	0x0810fa67
 810f9dc:	0810fa67 	.word	0x0810fa67
 810f9e0:	0810fa67 	.word	0x0810fa67
 810f9e4:	0810fa67 	.word	0x0810fa67
 810f9e8:	0810fa67 	.word	0x0810fa67
 810f9ec:	0810fa67 	.word	0x0810fa67
 810f9f0:	0810fa67 	.word	0x0810fa67
 810f9f4:	0810fa67 	.word	0x0810fa67
 810f9f8:	0810fa59 	.word	0x0810fa59
 810f9fc:	2b40      	cmp	r3, #64	@ 0x40
 810f9fe:	d02e      	beq.n	810fa5e <UART_SetConfig+0xa36>
 810fa00:	e031      	b.n	810fa66 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810fa02:	f7fa fc21 	bl	810a248 <HAL_RCC_GetPCLK1Freq>
 810fa06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810fa08:	e033      	b.n	810fa72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810fa0a:	f7fa fc33 	bl	810a274 <HAL_RCC_GetPCLK2Freq>
 810fa0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810fa10:	e02f      	b.n	810fa72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810fa12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810fa16:	4618      	mov	r0, r3
 810fa18:	f7fc fbe2 	bl	810c1e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810fa1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fa1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810fa20:	e027      	b.n	810fa72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810fa22:	f107 0318 	add.w	r3, r7, #24
 810fa26:	4618      	mov	r0, r3
 810fa28:	f7fc fd2e 	bl	810c488 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810fa2c:	69fb      	ldr	r3, [r7, #28]
 810fa2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810fa30:	e01f      	b.n	810fa72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810fa32:	4b2d      	ldr	r3, [pc, #180]	@ (810fae8 <UART_SetConfig+0xac0>)
 810fa34:	681b      	ldr	r3, [r3, #0]
 810fa36:	f003 0320 	and.w	r3, r3, #32
 810fa3a:	2b00      	cmp	r3, #0
 810fa3c:	d009      	beq.n	810fa52 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810fa3e:	4b2a      	ldr	r3, [pc, #168]	@ (810fae8 <UART_SetConfig+0xac0>)
 810fa40:	681b      	ldr	r3, [r3, #0]
 810fa42:	08db      	lsrs	r3, r3, #3
 810fa44:	f003 0303 	and.w	r3, r3, #3
 810fa48:	4a28      	ldr	r2, [pc, #160]	@ (810faec <UART_SetConfig+0xac4>)
 810fa4a:	fa22 f303 	lsr.w	r3, r2, r3
 810fa4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810fa50:	e00f      	b.n	810fa72 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810fa52:	4b26      	ldr	r3, [pc, #152]	@ (810faec <UART_SetConfig+0xac4>)
 810fa54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810fa56:	e00c      	b.n	810fa72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810fa58:	4b25      	ldr	r3, [pc, #148]	@ (810faf0 <UART_SetConfig+0xac8>)
 810fa5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810fa5c:	e009      	b.n	810fa72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810fa5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810fa62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810fa64:	e005      	b.n	810fa72 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810fa66:	2300      	movs	r3, #0
 810fa68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810fa6a:	2301      	movs	r3, #1
 810fa6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810fa70:	bf00      	nop
    }

    if (pclk != 0U)
 810fa72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810fa74:	2b00      	cmp	r3, #0
 810fa76:	d021      	beq.n	810fabc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810fa78:	697b      	ldr	r3, [r7, #20]
 810fa7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810fa7c:	4a1d      	ldr	r2, [pc, #116]	@ (810faf4 <UART_SetConfig+0xacc>)
 810fa7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810fa82:	461a      	mov	r2, r3
 810fa84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810fa86:	fbb3 f2f2 	udiv	r2, r3, r2
 810fa8a:	697b      	ldr	r3, [r7, #20]
 810fa8c:	685b      	ldr	r3, [r3, #4]
 810fa8e:	085b      	lsrs	r3, r3, #1
 810fa90:	441a      	add	r2, r3
 810fa92:	697b      	ldr	r3, [r7, #20]
 810fa94:	685b      	ldr	r3, [r3, #4]
 810fa96:	fbb2 f3f3 	udiv	r3, r2, r3
 810fa9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810fa9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810fa9e:	2b0f      	cmp	r3, #15
 810faa0:	d909      	bls.n	810fab6 <UART_SetConfig+0xa8e>
 810faa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810faa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810faa8:	d205      	bcs.n	810fab6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810faaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810faac:	b29a      	uxth	r2, r3
 810faae:	697b      	ldr	r3, [r7, #20]
 810fab0:	681b      	ldr	r3, [r3, #0]
 810fab2:	60da      	str	r2, [r3, #12]
 810fab4:	e002      	b.n	810fabc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810fab6:	2301      	movs	r3, #1
 810fab8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810fabc:	697b      	ldr	r3, [r7, #20]
 810fabe:	2201      	movs	r2, #1
 810fac0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810fac4:	697b      	ldr	r3, [r7, #20]
 810fac6:	2201      	movs	r2, #1
 810fac8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810facc:	697b      	ldr	r3, [r7, #20]
 810face:	2200      	movs	r2, #0
 810fad0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810fad2:	697b      	ldr	r3, [r7, #20]
 810fad4:	2200      	movs	r2, #0
 810fad6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810fad8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810fadc:	4618      	mov	r0, r3
 810fade:	3748      	adds	r7, #72	@ 0x48
 810fae0:	46bd      	mov	sp, r7
 810fae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810fae6:	bf00      	nop
 810fae8:	58024400 	.word	0x58024400
 810faec:	03d09000 	.word	0x03d09000
 810faf0:	003d0900 	.word	0x003d0900
 810faf4:	08116ce0 	.word	0x08116ce0

0810faf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810faf8:	b480      	push	{r7}
 810fafa:	b083      	sub	sp, #12
 810fafc:	af00      	add	r7, sp, #0
 810fafe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810fb00:	687b      	ldr	r3, [r7, #4]
 810fb02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810fb04:	f003 0308 	and.w	r3, r3, #8
 810fb08:	2b00      	cmp	r3, #0
 810fb0a:	d00a      	beq.n	810fb22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810fb0c:	687b      	ldr	r3, [r7, #4]
 810fb0e:	681b      	ldr	r3, [r3, #0]
 810fb10:	685b      	ldr	r3, [r3, #4]
 810fb12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810fb16:	687b      	ldr	r3, [r7, #4]
 810fb18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810fb1a:	687b      	ldr	r3, [r7, #4]
 810fb1c:	681b      	ldr	r3, [r3, #0]
 810fb1e:	430a      	orrs	r2, r1
 810fb20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810fb22:	687b      	ldr	r3, [r7, #4]
 810fb24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810fb26:	f003 0301 	and.w	r3, r3, #1
 810fb2a:	2b00      	cmp	r3, #0
 810fb2c:	d00a      	beq.n	810fb44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810fb2e:	687b      	ldr	r3, [r7, #4]
 810fb30:	681b      	ldr	r3, [r3, #0]
 810fb32:	685b      	ldr	r3, [r3, #4]
 810fb34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810fb38:	687b      	ldr	r3, [r7, #4]
 810fb3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fb3c:	687b      	ldr	r3, [r7, #4]
 810fb3e:	681b      	ldr	r3, [r3, #0]
 810fb40:	430a      	orrs	r2, r1
 810fb42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810fb44:	687b      	ldr	r3, [r7, #4]
 810fb46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810fb48:	f003 0302 	and.w	r3, r3, #2
 810fb4c:	2b00      	cmp	r3, #0
 810fb4e:	d00a      	beq.n	810fb66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810fb50:	687b      	ldr	r3, [r7, #4]
 810fb52:	681b      	ldr	r3, [r3, #0]
 810fb54:	685b      	ldr	r3, [r3, #4]
 810fb56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810fb5a:	687b      	ldr	r3, [r7, #4]
 810fb5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810fb5e:	687b      	ldr	r3, [r7, #4]
 810fb60:	681b      	ldr	r3, [r3, #0]
 810fb62:	430a      	orrs	r2, r1
 810fb64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810fb66:	687b      	ldr	r3, [r7, #4]
 810fb68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810fb6a:	f003 0304 	and.w	r3, r3, #4
 810fb6e:	2b00      	cmp	r3, #0
 810fb70:	d00a      	beq.n	810fb88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810fb72:	687b      	ldr	r3, [r7, #4]
 810fb74:	681b      	ldr	r3, [r3, #0]
 810fb76:	685b      	ldr	r3, [r3, #4]
 810fb78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810fb7c:	687b      	ldr	r3, [r7, #4]
 810fb7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810fb80:	687b      	ldr	r3, [r7, #4]
 810fb82:	681b      	ldr	r3, [r3, #0]
 810fb84:	430a      	orrs	r2, r1
 810fb86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810fb88:	687b      	ldr	r3, [r7, #4]
 810fb8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810fb8c:	f003 0310 	and.w	r3, r3, #16
 810fb90:	2b00      	cmp	r3, #0
 810fb92:	d00a      	beq.n	810fbaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810fb94:	687b      	ldr	r3, [r7, #4]
 810fb96:	681b      	ldr	r3, [r3, #0]
 810fb98:	689b      	ldr	r3, [r3, #8]
 810fb9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810fb9e:	687b      	ldr	r3, [r7, #4]
 810fba0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810fba2:	687b      	ldr	r3, [r7, #4]
 810fba4:	681b      	ldr	r3, [r3, #0]
 810fba6:	430a      	orrs	r2, r1
 810fba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810fbaa:	687b      	ldr	r3, [r7, #4]
 810fbac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810fbae:	f003 0320 	and.w	r3, r3, #32
 810fbb2:	2b00      	cmp	r3, #0
 810fbb4:	d00a      	beq.n	810fbcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810fbb6:	687b      	ldr	r3, [r7, #4]
 810fbb8:	681b      	ldr	r3, [r3, #0]
 810fbba:	689b      	ldr	r3, [r3, #8]
 810fbbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810fbc0:	687b      	ldr	r3, [r7, #4]
 810fbc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810fbc4:	687b      	ldr	r3, [r7, #4]
 810fbc6:	681b      	ldr	r3, [r3, #0]
 810fbc8:	430a      	orrs	r2, r1
 810fbca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810fbcc:	687b      	ldr	r3, [r7, #4]
 810fbce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810fbd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810fbd4:	2b00      	cmp	r3, #0
 810fbd6:	d01a      	beq.n	810fc0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810fbd8:	687b      	ldr	r3, [r7, #4]
 810fbda:	681b      	ldr	r3, [r3, #0]
 810fbdc:	685b      	ldr	r3, [r3, #4]
 810fbde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810fbe2:	687b      	ldr	r3, [r7, #4]
 810fbe4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810fbe6:	687b      	ldr	r3, [r7, #4]
 810fbe8:	681b      	ldr	r3, [r3, #0]
 810fbea:	430a      	orrs	r2, r1
 810fbec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810fbee:	687b      	ldr	r3, [r7, #4]
 810fbf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810fbf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810fbf6:	d10a      	bne.n	810fc0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810fbf8:	687b      	ldr	r3, [r7, #4]
 810fbfa:	681b      	ldr	r3, [r3, #0]
 810fbfc:	685b      	ldr	r3, [r3, #4]
 810fbfe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810fc02:	687b      	ldr	r3, [r7, #4]
 810fc04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810fc06:	687b      	ldr	r3, [r7, #4]
 810fc08:	681b      	ldr	r3, [r3, #0]
 810fc0a:	430a      	orrs	r2, r1
 810fc0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810fc0e:	687b      	ldr	r3, [r7, #4]
 810fc10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810fc12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810fc16:	2b00      	cmp	r3, #0
 810fc18:	d00a      	beq.n	810fc30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810fc1a:	687b      	ldr	r3, [r7, #4]
 810fc1c:	681b      	ldr	r3, [r3, #0]
 810fc1e:	685b      	ldr	r3, [r3, #4]
 810fc20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810fc24:	687b      	ldr	r3, [r7, #4]
 810fc26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810fc28:	687b      	ldr	r3, [r7, #4]
 810fc2a:	681b      	ldr	r3, [r3, #0]
 810fc2c:	430a      	orrs	r2, r1
 810fc2e:	605a      	str	r2, [r3, #4]
  }
}
 810fc30:	bf00      	nop
 810fc32:	370c      	adds	r7, #12
 810fc34:	46bd      	mov	sp, r7
 810fc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fc3a:	4770      	bx	lr

0810fc3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810fc3c:	b580      	push	{r7, lr}
 810fc3e:	b098      	sub	sp, #96	@ 0x60
 810fc40:	af02      	add	r7, sp, #8
 810fc42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810fc44:	687b      	ldr	r3, [r7, #4]
 810fc46:	2200      	movs	r2, #0
 810fc48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810fc4c:	f7f5 f864 	bl	8104d18 <HAL_GetTick>
 810fc50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810fc52:	687b      	ldr	r3, [r7, #4]
 810fc54:	681b      	ldr	r3, [r3, #0]
 810fc56:	681b      	ldr	r3, [r3, #0]
 810fc58:	f003 0308 	and.w	r3, r3, #8
 810fc5c:	2b08      	cmp	r3, #8
 810fc5e:	d12f      	bne.n	810fcc0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810fc60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810fc64:	9300      	str	r3, [sp, #0]
 810fc66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810fc68:	2200      	movs	r2, #0
 810fc6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810fc6e:	6878      	ldr	r0, [r7, #4]
 810fc70:	f000 f88e 	bl	810fd90 <UART_WaitOnFlagUntilTimeout>
 810fc74:	4603      	mov	r3, r0
 810fc76:	2b00      	cmp	r3, #0
 810fc78:	d022      	beq.n	810fcc0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810fc7a:	687b      	ldr	r3, [r7, #4]
 810fc7c:	681b      	ldr	r3, [r3, #0]
 810fc7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810fc80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810fc82:	e853 3f00 	ldrex	r3, [r3]
 810fc86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810fc88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810fc8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810fc8e:	653b      	str	r3, [r7, #80]	@ 0x50
 810fc90:	687b      	ldr	r3, [r7, #4]
 810fc92:	681b      	ldr	r3, [r3, #0]
 810fc94:	461a      	mov	r2, r3
 810fc96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810fc98:	647b      	str	r3, [r7, #68]	@ 0x44
 810fc9a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810fc9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810fc9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810fca0:	e841 2300 	strex	r3, r2, [r1]
 810fca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810fca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810fca8:	2b00      	cmp	r3, #0
 810fcaa:	d1e6      	bne.n	810fc7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810fcac:	687b      	ldr	r3, [r7, #4]
 810fcae:	2220      	movs	r2, #32
 810fcb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810fcb4:	687b      	ldr	r3, [r7, #4]
 810fcb6:	2200      	movs	r2, #0
 810fcb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810fcbc:	2303      	movs	r3, #3
 810fcbe:	e063      	b.n	810fd88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810fcc0:	687b      	ldr	r3, [r7, #4]
 810fcc2:	681b      	ldr	r3, [r3, #0]
 810fcc4:	681b      	ldr	r3, [r3, #0]
 810fcc6:	f003 0304 	and.w	r3, r3, #4
 810fcca:	2b04      	cmp	r3, #4
 810fccc:	d149      	bne.n	810fd62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810fcce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810fcd2:	9300      	str	r3, [sp, #0]
 810fcd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810fcd6:	2200      	movs	r2, #0
 810fcd8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810fcdc:	6878      	ldr	r0, [r7, #4]
 810fcde:	f000 f857 	bl	810fd90 <UART_WaitOnFlagUntilTimeout>
 810fce2:	4603      	mov	r3, r0
 810fce4:	2b00      	cmp	r3, #0
 810fce6:	d03c      	beq.n	810fd62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810fce8:	687b      	ldr	r3, [r7, #4]
 810fcea:	681b      	ldr	r3, [r3, #0]
 810fcec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810fcee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810fcf0:	e853 3f00 	ldrex	r3, [r3]
 810fcf4:	623b      	str	r3, [r7, #32]
   return(result);
 810fcf6:	6a3b      	ldr	r3, [r7, #32]
 810fcf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810fcfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810fcfe:	687b      	ldr	r3, [r7, #4]
 810fd00:	681b      	ldr	r3, [r3, #0]
 810fd02:	461a      	mov	r2, r3
 810fd04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810fd06:	633b      	str	r3, [r7, #48]	@ 0x30
 810fd08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810fd0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810fd0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810fd0e:	e841 2300 	strex	r3, r2, [r1]
 810fd12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810fd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fd16:	2b00      	cmp	r3, #0
 810fd18:	d1e6      	bne.n	810fce8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810fd1a:	687b      	ldr	r3, [r7, #4]
 810fd1c:	681b      	ldr	r3, [r3, #0]
 810fd1e:	3308      	adds	r3, #8
 810fd20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810fd22:	693b      	ldr	r3, [r7, #16]
 810fd24:	e853 3f00 	ldrex	r3, [r3]
 810fd28:	60fb      	str	r3, [r7, #12]
   return(result);
 810fd2a:	68fb      	ldr	r3, [r7, #12]
 810fd2c:	f023 0301 	bic.w	r3, r3, #1
 810fd30:	64bb      	str	r3, [r7, #72]	@ 0x48
 810fd32:	687b      	ldr	r3, [r7, #4]
 810fd34:	681b      	ldr	r3, [r3, #0]
 810fd36:	3308      	adds	r3, #8
 810fd38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810fd3a:	61fa      	str	r2, [r7, #28]
 810fd3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810fd3e:	69b9      	ldr	r1, [r7, #24]
 810fd40:	69fa      	ldr	r2, [r7, #28]
 810fd42:	e841 2300 	strex	r3, r2, [r1]
 810fd46:	617b      	str	r3, [r7, #20]
   return(result);
 810fd48:	697b      	ldr	r3, [r7, #20]
 810fd4a:	2b00      	cmp	r3, #0
 810fd4c:	d1e5      	bne.n	810fd1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810fd4e:	687b      	ldr	r3, [r7, #4]
 810fd50:	2220      	movs	r2, #32
 810fd52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810fd56:	687b      	ldr	r3, [r7, #4]
 810fd58:	2200      	movs	r2, #0
 810fd5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810fd5e:	2303      	movs	r3, #3
 810fd60:	e012      	b.n	810fd88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810fd62:	687b      	ldr	r3, [r7, #4]
 810fd64:	2220      	movs	r2, #32
 810fd66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810fd6a:	687b      	ldr	r3, [r7, #4]
 810fd6c:	2220      	movs	r2, #32
 810fd6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810fd72:	687b      	ldr	r3, [r7, #4]
 810fd74:	2200      	movs	r2, #0
 810fd76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810fd78:	687b      	ldr	r3, [r7, #4]
 810fd7a:	2200      	movs	r2, #0
 810fd7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810fd7e:	687b      	ldr	r3, [r7, #4]
 810fd80:	2200      	movs	r2, #0
 810fd82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810fd86:	2300      	movs	r3, #0
}
 810fd88:	4618      	mov	r0, r3
 810fd8a:	3758      	adds	r7, #88	@ 0x58
 810fd8c:	46bd      	mov	sp, r7
 810fd8e:	bd80      	pop	{r7, pc}

0810fd90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810fd90:	b580      	push	{r7, lr}
 810fd92:	b084      	sub	sp, #16
 810fd94:	af00      	add	r7, sp, #0
 810fd96:	60f8      	str	r0, [r7, #12]
 810fd98:	60b9      	str	r1, [r7, #8]
 810fd9a:	603b      	str	r3, [r7, #0]
 810fd9c:	4613      	mov	r3, r2
 810fd9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810fda0:	e04f      	b.n	810fe42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810fda2:	69bb      	ldr	r3, [r7, #24]
 810fda4:	f1b3 3fff 	cmp.w	r3, #4294967295
 810fda8:	d04b      	beq.n	810fe42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810fdaa:	f7f4 ffb5 	bl	8104d18 <HAL_GetTick>
 810fdae:	4602      	mov	r2, r0
 810fdb0:	683b      	ldr	r3, [r7, #0]
 810fdb2:	1ad3      	subs	r3, r2, r3
 810fdb4:	69ba      	ldr	r2, [r7, #24]
 810fdb6:	429a      	cmp	r2, r3
 810fdb8:	d302      	bcc.n	810fdc0 <UART_WaitOnFlagUntilTimeout+0x30>
 810fdba:	69bb      	ldr	r3, [r7, #24]
 810fdbc:	2b00      	cmp	r3, #0
 810fdbe:	d101      	bne.n	810fdc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810fdc0:	2303      	movs	r3, #3
 810fdc2:	e04e      	b.n	810fe62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810fdc4:	68fb      	ldr	r3, [r7, #12]
 810fdc6:	681b      	ldr	r3, [r3, #0]
 810fdc8:	681b      	ldr	r3, [r3, #0]
 810fdca:	f003 0304 	and.w	r3, r3, #4
 810fdce:	2b00      	cmp	r3, #0
 810fdd0:	d037      	beq.n	810fe42 <UART_WaitOnFlagUntilTimeout+0xb2>
 810fdd2:	68bb      	ldr	r3, [r7, #8]
 810fdd4:	2b80      	cmp	r3, #128	@ 0x80
 810fdd6:	d034      	beq.n	810fe42 <UART_WaitOnFlagUntilTimeout+0xb2>
 810fdd8:	68bb      	ldr	r3, [r7, #8]
 810fdda:	2b40      	cmp	r3, #64	@ 0x40
 810fddc:	d031      	beq.n	810fe42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810fdde:	68fb      	ldr	r3, [r7, #12]
 810fde0:	681b      	ldr	r3, [r3, #0]
 810fde2:	69db      	ldr	r3, [r3, #28]
 810fde4:	f003 0308 	and.w	r3, r3, #8
 810fde8:	2b08      	cmp	r3, #8
 810fdea:	d110      	bne.n	810fe0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810fdec:	68fb      	ldr	r3, [r7, #12]
 810fdee:	681b      	ldr	r3, [r3, #0]
 810fdf0:	2208      	movs	r2, #8
 810fdf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810fdf4:	68f8      	ldr	r0, [r7, #12]
 810fdf6:	f000 f95b 	bl	81100b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810fdfa:	68fb      	ldr	r3, [r7, #12]
 810fdfc:	2208      	movs	r2, #8
 810fdfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810fe02:	68fb      	ldr	r3, [r7, #12]
 810fe04:	2200      	movs	r2, #0
 810fe06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810fe0a:	2301      	movs	r3, #1
 810fe0c:	e029      	b.n	810fe62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810fe0e:	68fb      	ldr	r3, [r7, #12]
 810fe10:	681b      	ldr	r3, [r3, #0]
 810fe12:	69db      	ldr	r3, [r3, #28]
 810fe14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810fe18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810fe1c:	d111      	bne.n	810fe42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810fe1e:	68fb      	ldr	r3, [r7, #12]
 810fe20:	681b      	ldr	r3, [r3, #0]
 810fe22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810fe26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810fe28:	68f8      	ldr	r0, [r7, #12]
 810fe2a:	f000 f941 	bl	81100b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810fe2e:	68fb      	ldr	r3, [r7, #12]
 810fe30:	2220      	movs	r2, #32
 810fe32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810fe36:	68fb      	ldr	r3, [r7, #12]
 810fe38:	2200      	movs	r2, #0
 810fe3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810fe3e:	2303      	movs	r3, #3
 810fe40:	e00f      	b.n	810fe62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810fe42:	68fb      	ldr	r3, [r7, #12]
 810fe44:	681b      	ldr	r3, [r3, #0]
 810fe46:	69da      	ldr	r2, [r3, #28]
 810fe48:	68bb      	ldr	r3, [r7, #8]
 810fe4a:	4013      	ands	r3, r2
 810fe4c:	68ba      	ldr	r2, [r7, #8]
 810fe4e:	429a      	cmp	r2, r3
 810fe50:	bf0c      	ite	eq
 810fe52:	2301      	moveq	r3, #1
 810fe54:	2300      	movne	r3, #0
 810fe56:	b2db      	uxtb	r3, r3
 810fe58:	461a      	mov	r2, r3
 810fe5a:	79fb      	ldrb	r3, [r7, #7]
 810fe5c:	429a      	cmp	r2, r3
 810fe5e:	d0a0      	beq.n	810fda2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810fe60:	2300      	movs	r3, #0
}
 810fe62:	4618      	mov	r0, r3
 810fe64:	3710      	adds	r7, #16
 810fe66:	46bd      	mov	sp, r7
 810fe68:	bd80      	pop	{r7, pc}
	...

0810fe6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810fe6c:	b480      	push	{r7}
 810fe6e:	b0a3      	sub	sp, #140	@ 0x8c
 810fe70:	af00      	add	r7, sp, #0
 810fe72:	60f8      	str	r0, [r7, #12]
 810fe74:	60b9      	str	r1, [r7, #8]
 810fe76:	4613      	mov	r3, r2
 810fe78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 810fe7a:	68fb      	ldr	r3, [r7, #12]
 810fe7c:	68ba      	ldr	r2, [r7, #8]
 810fe7e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 810fe80:	68fb      	ldr	r3, [r7, #12]
 810fe82:	88fa      	ldrh	r2, [r7, #6]
 810fe84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 810fe88:	68fb      	ldr	r3, [r7, #12]
 810fe8a:	88fa      	ldrh	r2, [r7, #6]
 810fe8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 810fe90:	68fb      	ldr	r3, [r7, #12]
 810fe92:	2200      	movs	r2, #0
 810fe94:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 810fe96:	68fb      	ldr	r3, [r7, #12]
 810fe98:	689b      	ldr	r3, [r3, #8]
 810fe9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810fe9e:	d10e      	bne.n	810febe <UART_Start_Receive_IT+0x52>
 810fea0:	68fb      	ldr	r3, [r7, #12]
 810fea2:	691b      	ldr	r3, [r3, #16]
 810fea4:	2b00      	cmp	r3, #0
 810fea6:	d105      	bne.n	810feb4 <UART_Start_Receive_IT+0x48>
 810fea8:	68fb      	ldr	r3, [r7, #12]
 810feaa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 810feae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810feb2:	e02d      	b.n	810ff10 <UART_Start_Receive_IT+0xa4>
 810feb4:	68fb      	ldr	r3, [r7, #12]
 810feb6:	22ff      	movs	r2, #255	@ 0xff
 810feb8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810febc:	e028      	b.n	810ff10 <UART_Start_Receive_IT+0xa4>
 810febe:	68fb      	ldr	r3, [r7, #12]
 810fec0:	689b      	ldr	r3, [r3, #8]
 810fec2:	2b00      	cmp	r3, #0
 810fec4:	d10d      	bne.n	810fee2 <UART_Start_Receive_IT+0x76>
 810fec6:	68fb      	ldr	r3, [r7, #12]
 810fec8:	691b      	ldr	r3, [r3, #16]
 810feca:	2b00      	cmp	r3, #0
 810fecc:	d104      	bne.n	810fed8 <UART_Start_Receive_IT+0x6c>
 810fece:	68fb      	ldr	r3, [r7, #12]
 810fed0:	22ff      	movs	r2, #255	@ 0xff
 810fed2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810fed6:	e01b      	b.n	810ff10 <UART_Start_Receive_IT+0xa4>
 810fed8:	68fb      	ldr	r3, [r7, #12]
 810feda:	227f      	movs	r2, #127	@ 0x7f
 810fedc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810fee0:	e016      	b.n	810ff10 <UART_Start_Receive_IT+0xa4>
 810fee2:	68fb      	ldr	r3, [r7, #12]
 810fee4:	689b      	ldr	r3, [r3, #8]
 810fee6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810feea:	d10d      	bne.n	810ff08 <UART_Start_Receive_IT+0x9c>
 810feec:	68fb      	ldr	r3, [r7, #12]
 810feee:	691b      	ldr	r3, [r3, #16]
 810fef0:	2b00      	cmp	r3, #0
 810fef2:	d104      	bne.n	810fefe <UART_Start_Receive_IT+0x92>
 810fef4:	68fb      	ldr	r3, [r7, #12]
 810fef6:	227f      	movs	r2, #127	@ 0x7f
 810fef8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810fefc:	e008      	b.n	810ff10 <UART_Start_Receive_IT+0xa4>
 810fefe:	68fb      	ldr	r3, [r7, #12]
 810ff00:	223f      	movs	r2, #63	@ 0x3f
 810ff02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810ff06:	e003      	b.n	810ff10 <UART_Start_Receive_IT+0xa4>
 810ff08:	68fb      	ldr	r3, [r7, #12]
 810ff0a:	2200      	movs	r2, #0
 810ff0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810ff10:	68fb      	ldr	r3, [r7, #12]
 810ff12:	2200      	movs	r2, #0
 810ff14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810ff18:	68fb      	ldr	r3, [r7, #12]
 810ff1a:	2222      	movs	r2, #34	@ 0x22
 810ff1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810ff20:	68fb      	ldr	r3, [r7, #12]
 810ff22:	681b      	ldr	r3, [r3, #0]
 810ff24:	3308      	adds	r3, #8
 810ff26:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ff28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810ff2a:	e853 3f00 	ldrex	r3, [r3]
 810ff2e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 810ff30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810ff32:	f043 0301 	orr.w	r3, r3, #1
 810ff36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810ff3a:	68fb      	ldr	r3, [r7, #12]
 810ff3c:	681b      	ldr	r3, [r3, #0]
 810ff3e:	3308      	adds	r3, #8
 810ff40:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 810ff44:	673a      	str	r2, [r7, #112]	@ 0x70
 810ff46:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ff48:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 810ff4a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 810ff4c:	e841 2300 	strex	r3, r2, [r1]
 810ff50:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 810ff52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810ff54:	2b00      	cmp	r3, #0
 810ff56:	d1e3      	bne.n	810ff20 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 810ff58:	68fb      	ldr	r3, [r7, #12]
 810ff5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810ff5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ff60:	d14f      	bne.n	8110002 <UART_Start_Receive_IT+0x196>
 810ff62:	68fb      	ldr	r3, [r7, #12]
 810ff64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810ff68:	88fa      	ldrh	r2, [r7, #6]
 810ff6a:	429a      	cmp	r2, r3
 810ff6c:	d349      	bcc.n	8110002 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810ff6e:	68fb      	ldr	r3, [r7, #12]
 810ff70:	689b      	ldr	r3, [r3, #8]
 810ff72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810ff76:	d107      	bne.n	810ff88 <UART_Start_Receive_IT+0x11c>
 810ff78:	68fb      	ldr	r3, [r7, #12]
 810ff7a:	691b      	ldr	r3, [r3, #16]
 810ff7c:	2b00      	cmp	r3, #0
 810ff7e:	d103      	bne.n	810ff88 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 810ff80:	68fb      	ldr	r3, [r7, #12]
 810ff82:	4a47      	ldr	r2, [pc, #284]	@ (81100a0 <UART_Start_Receive_IT+0x234>)
 810ff84:	675a      	str	r2, [r3, #116]	@ 0x74
 810ff86:	e002      	b.n	810ff8e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 810ff88:	68fb      	ldr	r3, [r7, #12]
 810ff8a:	4a46      	ldr	r2, [pc, #280]	@ (81100a4 <UART_Start_Receive_IT+0x238>)
 810ff8c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 810ff8e:	68fb      	ldr	r3, [r7, #12]
 810ff90:	691b      	ldr	r3, [r3, #16]
 810ff92:	2b00      	cmp	r3, #0
 810ff94:	d01a      	beq.n	810ffcc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810ff96:	68fb      	ldr	r3, [r7, #12]
 810ff98:	681b      	ldr	r3, [r3, #0]
 810ff9a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ff9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810ff9e:	e853 3f00 	ldrex	r3, [r3]
 810ffa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810ffa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810ffa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810ffaa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810ffae:	68fb      	ldr	r3, [r7, #12]
 810ffb0:	681b      	ldr	r3, [r3, #0]
 810ffb2:	461a      	mov	r2, r3
 810ffb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 810ffb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810ffba:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ffbc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 810ffbe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 810ffc0:	e841 2300 	strex	r3, r2, [r1]
 810ffc4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 810ffc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810ffc8:	2b00      	cmp	r3, #0
 810ffca:	d1e4      	bne.n	810ff96 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810ffcc:	68fb      	ldr	r3, [r7, #12]
 810ffce:	681b      	ldr	r3, [r3, #0]
 810ffd0:	3308      	adds	r3, #8
 810ffd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ffd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ffd6:	e853 3f00 	ldrex	r3, [r3]
 810ffda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810ffdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ffde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810ffe2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810ffe4:	68fb      	ldr	r3, [r7, #12]
 810ffe6:	681b      	ldr	r3, [r3, #0]
 810ffe8:	3308      	adds	r3, #8
 810ffea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 810ffec:	64ba      	str	r2, [r7, #72]	@ 0x48
 810ffee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810fff0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810fff2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810fff4:	e841 2300 	strex	r3, r2, [r1]
 810fff8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 810fffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810fffc:	2b00      	cmp	r3, #0
 810fffe:	d1e5      	bne.n	810ffcc <UART_Start_Receive_IT+0x160>
 8110000:	e046      	b.n	8110090 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8110002:	68fb      	ldr	r3, [r7, #12]
 8110004:	689b      	ldr	r3, [r3, #8]
 8110006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 811000a:	d107      	bne.n	811001c <UART_Start_Receive_IT+0x1b0>
 811000c:	68fb      	ldr	r3, [r7, #12]
 811000e:	691b      	ldr	r3, [r3, #16]
 8110010:	2b00      	cmp	r3, #0
 8110012:	d103      	bne.n	811001c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8110014:	68fb      	ldr	r3, [r7, #12]
 8110016:	4a24      	ldr	r2, [pc, #144]	@ (81100a8 <UART_Start_Receive_IT+0x23c>)
 8110018:	675a      	str	r2, [r3, #116]	@ 0x74
 811001a:	e002      	b.n	8110022 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 811001c:	68fb      	ldr	r3, [r7, #12]
 811001e:	4a23      	ldr	r2, [pc, #140]	@ (81100ac <UART_Start_Receive_IT+0x240>)
 8110020:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8110022:	68fb      	ldr	r3, [r7, #12]
 8110024:	691b      	ldr	r3, [r3, #16]
 8110026:	2b00      	cmp	r3, #0
 8110028:	d019      	beq.n	811005e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 811002a:	68fb      	ldr	r3, [r7, #12]
 811002c:	681b      	ldr	r3, [r3, #0]
 811002e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110032:	e853 3f00 	ldrex	r3, [r3]
 8110036:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8110038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811003a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 811003e:	677b      	str	r3, [r7, #116]	@ 0x74
 8110040:	68fb      	ldr	r3, [r7, #12]
 8110042:	681b      	ldr	r3, [r3, #0]
 8110044:	461a      	mov	r2, r3
 8110046:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8110048:	637b      	str	r3, [r7, #52]	@ 0x34
 811004a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 811004c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 811004e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8110050:	e841 2300 	strex	r3, r2, [r1]
 8110054:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8110056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110058:	2b00      	cmp	r3, #0
 811005a:	d1e6      	bne.n	811002a <UART_Start_Receive_IT+0x1be>
 811005c:	e018      	b.n	8110090 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 811005e:	68fb      	ldr	r3, [r7, #12]
 8110060:	681b      	ldr	r3, [r3, #0]
 8110062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110064:	697b      	ldr	r3, [r7, #20]
 8110066:	e853 3f00 	ldrex	r3, [r3]
 811006a:	613b      	str	r3, [r7, #16]
   return(result);
 811006c:	693b      	ldr	r3, [r7, #16]
 811006e:	f043 0320 	orr.w	r3, r3, #32
 8110072:	67bb      	str	r3, [r7, #120]	@ 0x78
 8110074:	68fb      	ldr	r3, [r7, #12]
 8110076:	681b      	ldr	r3, [r3, #0]
 8110078:	461a      	mov	r2, r3
 811007a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 811007c:	623b      	str	r3, [r7, #32]
 811007e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110080:	69f9      	ldr	r1, [r7, #28]
 8110082:	6a3a      	ldr	r2, [r7, #32]
 8110084:	e841 2300 	strex	r3, r2, [r1]
 8110088:	61bb      	str	r3, [r7, #24]
   return(result);
 811008a:	69bb      	ldr	r3, [r7, #24]
 811008c:	2b00      	cmp	r3, #0
 811008e:	d1e6      	bne.n	811005e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8110090:	2300      	movs	r3, #0
}
 8110092:	4618      	mov	r0, r3
 8110094:	378c      	adds	r7, #140	@ 0x8c
 8110096:	46bd      	mov	sp, r7
 8110098:	f85d 7b04 	ldr.w	r7, [sp], #4
 811009c:	4770      	bx	lr
 811009e:	bf00      	nop
 81100a0:	081108d1 	.word	0x081108d1
 81100a4:	08110571 	.word	0x08110571
 81100a8:	081103b9 	.word	0x081103b9
 81100ac:	08110201 	.word	0x08110201

081100b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81100b0:	b480      	push	{r7}
 81100b2:	b095      	sub	sp, #84	@ 0x54
 81100b4:	af00      	add	r7, sp, #0
 81100b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81100b8:	687b      	ldr	r3, [r7, #4]
 81100ba:	681b      	ldr	r3, [r3, #0]
 81100bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81100be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81100c0:	e853 3f00 	ldrex	r3, [r3]
 81100c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 81100c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81100c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 81100cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81100ce:	687b      	ldr	r3, [r7, #4]
 81100d0:	681b      	ldr	r3, [r3, #0]
 81100d2:	461a      	mov	r2, r3
 81100d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81100d6:	643b      	str	r3, [r7, #64]	@ 0x40
 81100d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81100da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 81100dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 81100de:	e841 2300 	strex	r3, r2, [r1]
 81100e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 81100e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81100e6:	2b00      	cmp	r3, #0
 81100e8:	d1e6      	bne.n	81100b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81100ea:	687b      	ldr	r3, [r7, #4]
 81100ec:	681b      	ldr	r3, [r3, #0]
 81100ee:	3308      	adds	r3, #8
 81100f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81100f2:	6a3b      	ldr	r3, [r7, #32]
 81100f4:	e853 3f00 	ldrex	r3, [r3]
 81100f8:	61fb      	str	r3, [r7, #28]
   return(result);
 81100fa:	69fb      	ldr	r3, [r7, #28]
 81100fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8110100:	f023 0301 	bic.w	r3, r3, #1
 8110104:	64bb      	str	r3, [r7, #72]	@ 0x48
 8110106:	687b      	ldr	r3, [r7, #4]
 8110108:	681b      	ldr	r3, [r3, #0]
 811010a:	3308      	adds	r3, #8
 811010c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 811010e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8110110:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110112:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8110114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8110116:	e841 2300 	strex	r3, r2, [r1]
 811011a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 811011c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811011e:	2b00      	cmp	r3, #0
 8110120:	d1e3      	bne.n	81100ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8110122:	687b      	ldr	r3, [r7, #4]
 8110124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110126:	2b01      	cmp	r3, #1
 8110128:	d118      	bne.n	811015c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 811012a:	687b      	ldr	r3, [r7, #4]
 811012c:	681b      	ldr	r3, [r3, #0]
 811012e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110130:	68fb      	ldr	r3, [r7, #12]
 8110132:	e853 3f00 	ldrex	r3, [r3]
 8110136:	60bb      	str	r3, [r7, #8]
   return(result);
 8110138:	68bb      	ldr	r3, [r7, #8]
 811013a:	f023 0310 	bic.w	r3, r3, #16
 811013e:	647b      	str	r3, [r7, #68]	@ 0x44
 8110140:	687b      	ldr	r3, [r7, #4]
 8110142:	681b      	ldr	r3, [r3, #0]
 8110144:	461a      	mov	r2, r3
 8110146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110148:	61bb      	str	r3, [r7, #24]
 811014a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 811014c:	6979      	ldr	r1, [r7, #20]
 811014e:	69ba      	ldr	r2, [r7, #24]
 8110150:	e841 2300 	strex	r3, r2, [r1]
 8110154:	613b      	str	r3, [r7, #16]
   return(result);
 8110156:	693b      	ldr	r3, [r7, #16]
 8110158:	2b00      	cmp	r3, #0
 811015a:	d1e6      	bne.n	811012a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 811015c:	687b      	ldr	r3, [r7, #4]
 811015e:	2220      	movs	r2, #32
 8110160:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8110164:	687b      	ldr	r3, [r7, #4]
 8110166:	2200      	movs	r2, #0
 8110168:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 811016a:	687b      	ldr	r3, [r7, #4]
 811016c:	2200      	movs	r2, #0
 811016e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8110170:	bf00      	nop
 8110172:	3754      	adds	r7, #84	@ 0x54
 8110174:	46bd      	mov	sp, r7
 8110176:	f85d 7b04 	ldr.w	r7, [sp], #4
 811017a:	4770      	bx	lr

0811017c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 811017c:	b580      	push	{r7, lr}
 811017e:	b084      	sub	sp, #16
 8110180:	af00      	add	r7, sp, #0
 8110182:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8110184:	687b      	ldr	r3, [r7, #4]
 8110186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8110188:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 811018a:	68fb      	ldr	r3, [r7, #12]
 811018c:	2200      	movs	r2, #0
 811018e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8110192:	68fb      	ldr	r3, [r7, #12]
 8110194:	2200      	movs	r2, #0
 8110196:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 811019a:	68f8      	ldr	r0, [r7, #12]
 811019c:	f7fe ff2e 	bl	810effc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81101a0:	bf00      	nop
 81101a2:	3710      	adds	r7, #16
 81101a4:	46bd      	mov	sp, r7
 81101a6:	bd80      	pop	{r7, pc}

081101a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 81101a8:	b580      	push	{r7, lr}
 81101aa:	b088      	sub	sp, #32
 81101ac:	af00      	add	r7, sp, #0
 81101ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 81101b0:	687b      	ldr	r3, [r7, #4]
 81101b2:	681b      	ldr	r3, [r3, #0]
 81101b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81101b6:	68fb      	ldr	r3, [r7, #12]
 81101b8:	e853 3f00 	ldrex	r3, [r3]
 81101bc:	60bb      	str	r3, [r7, #8]
   return(result);
 81101be:	68bb      	ldr	r3, [r7, #8]
 81101c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 81101c4:	61fb      	str	r3, [r7, #28]
 81101c6:	687b      	ldr	r3, [r7, #4]
 81101c8:	681b      	ldr	r3, [r3, #0]
 81101ca:	461a      	mov	r2, r3
 81101cc:	69fb      	ldr	r3, [r7, #28]
 81101ce:	61bb      	str	r3, [r7, #24]
 81101d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81101d2:	6979      	ldr	r1, [r7, #20]
 81101d4:	69ba      	ldr	r2, [r7, #24]
 81101d6:	e841 2300 	strex	r3, r2, [r1]
 81101da:	613b      	str	r3, [r7, #16]
   return(result);
 81101dc:	693b      	ldr	r3, [r7, #16]
 81101de:	2b00      	cmp	r3, #0
 81101e0:	d1e6      	bne.n	81101b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 81101e2:	687b      	ldr	r3, [r7, #4]
 81101e4:	2220      	movs	r2, #32
 81101e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 81101ea:	687b      	ldr	r3, [r7, #4]
 81101ec:	2200      	movs	r2, #0
 81101ee:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 81101f0:	6878      	ldr	r0, [r7, #4]
 81101f2:	f7fe fef9 	bl	810efe8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81101f6:	bf00      	nop
 81101f8:	3720      	adds	r7, #32
 81101fa:	46bd      	mov	sp, r7
 81101fc:	bd80      	pop	{r7, pc}
	...

08110200 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8110200:	b580      	push	{r7, lr}
 8110202:	b09c      	sub	sp, #112	@ 0x70
 8110204:	af00      	add	r7, sp, #0
 8110206:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8110208:	687b      	ldr	r3, [r7, #4]
 811020a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811020e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8110212:	687b      	ldr	r3, [r7, #4]
 8110214:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8110218:	2b22      	cmp	r3, #34	@ 0x22
 811021a:	f040 80be 	bne.w	811039a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 811021e:	687b      	ldr	r3, [r7, #4]
 8110220:	681b      	ldr	r3, [r3, #0]
 8110222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8110224:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8110228:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 811022c:	b2d9      	uxtb	r1, r3
 811022e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8110232:	b2da      	uxtb	r2, r3
 8110234:	687b      	ldr	r3, [r7, #4]
 8110236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8110238:	400a      	ands	r2, r1
 811023a:	b2d2      	uxtb	r2, r2
 811023c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 811023e:	687b      	ldr	r3, [r7, #4]
 8110240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8110242:	1c5a      	adds	r2, r3, #1
 8110244:	687b      	ldr	r3, [r7, #4]
 8110246:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8110248:	687b      	ldr	r3, [r7, #4]
 811024a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 811024e:	b29b      	uxth	r3, r3
 8110250:	3b01      	subs	r3, #1
 8110252:	b29a      	uxth	r2, r3
 8110254:	687b      	ldr	r3, [r7, #4]
 8110256:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 811025a:	687b      	ldr	r3, [r7, #4]
 811025c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8110260:	b29b      	uxth	r3, r3
 8110262:	2b00      	cmp	r3, #0
 8110264:	f040 80a1 	bne.w	81103aa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8110268:	687b      	ldr	r3, [r7, #4]
 811026a:	681b      	ldr	r3, [r3, #0]
 811026c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 811026e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8110270:	e853 3f00 	ldrex	r3, [r3]
 8110274:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8110276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8110278:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 811027c:	66bb      	str	r3, [r7, #104]	@ 0x68
 811027e:	687b      	ldr	r3, [r7, #4]
 8110280:	681b      	ldr	r3, [r3, #0]
 8110282:	461a      	mov	r2, r3
 8110284:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8110286:	65bb      	str	r3, [r7, #88]	@ 0x58
 8110288:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 811028a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 811028c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 811028e:	e841 2300 	strex	r3, r2, [r1]
 8110292:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8110294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8110296:	2b00      	cmp	r3, #0
 8110298:	d1e6      	bne.n	8110268 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 811029a:	687b      	ldr	r3, [r7, #4]
 811029c:	681b      	ldr	r3, [r3, #0]
 811029e:	3308      	adds	r3, #8
 81102a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81102a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81102a4:	e853 3f00 	ldrex	r3, [r3]
 81102a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 81102aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81102ac:	f023 0301 	bic.w	r3, r3, #1
 81102b0:	667b      	str	r3, [r7, #100]	@ 0x64
 81102b2:	687b      	ldr	r3, [r7, #4]
 81102b4:	681b      	ldr	r3, [r3, #0]
 81102b6:	3308      	adds	r3, #8
 81102b8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 81102ba:	647a      	str	r2, [r7, #68]	@ 0x44
 81102bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81102be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 81102c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81102c2:	e841 2300 	strex	r3, r2, [r1]
 81102c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 81102c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81102ca:	2b00      	cmp	r3, #0
 81102cc:	d1e5      	bne.n	811029a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 81102ce:	687b      	ldr	r3, [r7, #4]
 81102d0:	2220      	movs	r2, #32
 81102d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 81102d6:	687b      	ldr	r3, [r7, #4]
 81102d8:	2200      	movs	r2, #0
 81102da:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 81102dc:	687b      	ldr	r3, [r7, #4]
 81102de:	2200      	movs	r2, #0
 81102e0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 81102e2:	687b      	ldr	r3, [r7, #4]
 81102e4:	681b      	ldr	r3, [r3, #0]
 81102e6:	4a33      	ldr	r2, [pc, #204]	@ (81103b4 <UART_RxISR_8BIT+0x1b4>)
 81102e8:	4293      	cmp	r3, r2
 81102ea:	d01f      	beq.n	811032c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 81102ec:	687b      	ldr	r3, [r7, #4]
 81102ee:	681b      	ldr	r3, [r3, #0]
 81102f0:	685b      	ldr	r3, [r3, #4]
 81102f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81102f6:	2b00      	cmp	r3, #0
 81102f8:	d018      	beq.n	811032c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 81102fa:	687b      	ldr	r3, [r7, #4]
 81102fc:	681b      	ldr	r3, [r3, #0]
 81102fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110302:	e853 3f00 	ldrex	r3, [r3]
 8110306:	623b      	str	r3, [r7, #32]
   return(result);
 8110308:	6a3b      	ldr	r3, [r7, #32]
 811030a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 811030e:	663b      	str	r3, [r7, #96]	@ 0x60
 8110310:	687b      	ldr	r3, [r7, #4]
 8110312:	681b      	ldr	r3, [r3, #0]
 8110314:	461a      	mov	r2, r3
 8110316:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8110318:	633b      	str	r3, [r7, #48]	@ 0x30
 811031a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 811031c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 811031e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8110320:	e841 2300 	strex	r3, r2, [r1]
 8110324:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8110326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110328:	2b00      	cmp	r3, #0
 811032a:	d1e6      	bne.n	81102fa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 811032c:	687b      	ldr	r3, [r7, #4]
 811032e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110330:	2b01      	cmp	r3, #1
 8110332:	d12e      	bne.n	8110392 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8110334:	687b      	ldr	r3, [r7, #4]
 8110336:	2200      	movs	r2, #0
 8110338:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 811033a:	687b      	ldr	r3, [r7, #4]
 811033c:	681b      	ldr	r3, [r3, #0]
 811033e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110340:	693b      	ldr	r3, [r7, #16]
 8110342:	e853 3f00 	ldrex	r3, [r3]
 8110346:	60fb      	str	r3, [r7, #12]
   return(result);
 8110348:	68fb      	ldr	r3, [r7, #12]
 811034a:	f023 0310 	bic.w	r3, r3, #16
 811034e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8110350:	687b      	ldr	r3, [r7, #4]
 8110352:	681b      	ldr	r3, [r3, #0]
 8110354:	461a      	mov	r2, r3
 8110356:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8110358:	61fb      	str	r3, [r7, #28]
 811035a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 811035c:	69b9      	ldr	r1, [r7, #24]
 811035e:	69fa      	ldr	r2, [r7, #28]
 8110360:	e841 2300 	strex	r3, r2, [r1]
 8110364:	617b      	str	r3, [r7, #20]
   return(result);
 8110366:	697b      	ldr	r3, [r7, #20]
 8110368:	2b00      	cmp	r3, #0
 811036a:	d1e6      	bne.n	811033a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 811036c:	687b      	ldr	r3, [r7, #4]
 811036e:	681b      	ldr	r3, [r3, #0]
 8110370:	69db      	ldr	r3, [r3, #28]
 8110372:	f003 0310 	and.w	r3, r3, #16
 8110376:	2b10      	cmp	r3, #16
 8110378:	d103      	bne.n	8110382 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 811037a:	687b      	ldr	r3, [r7, #4]
 811037c:	681b      	ldr	r3, [r3, #0]
 811037e:	2210      	movs	r2, #16
 8110380:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8110382:	687b      	ldr	r3, [r7, #4]
 8110384:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8110388:	4619      	mov	r1, r3
 811038a:	6878      	ldr	r0, [r7, #4]
 811038c:	f7fe fe40 	bl	810f010 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8110390:	e00b      	b.n	81103aa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8110392:	6878      	ldr	r0, [r7, #4]
 8110394:	f7f3 fdf0 	bl	8103f78 <HAL_UART_RxCpltCallback>
}
 8110398:	e007      	b.n	81103aa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 811039a:	687b      	ldr	r3, [r7, #4]
 811039c:	681b      	ldr	r3, [r3, #0]
 811039e:	699a      	ldr	r2, [r3, #24]
 81103a0:	687b      	ldr	r3, [r7, #4]
 81103a2:	681b      	ldr	r3, [r3, #0]
 81103a4:	f042 0208 	orr.w	r2, r2, #8
 81103a8:	619a      	str	r2, [r3, #24]
}
 81103aa:	bf00      	nop
 81103ac:	3770      	adds	r7, #112	@ 0x70
 81103ae:	46bd      	mov	sp, r7
 81103b0:	bd80      	pop	{r7, pc}
 81103b2:	bf00      	nop
 81103b4:	58000c00 	.word	0x58000c00

081103b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 81103b8:	b580      	push	{r7, lr}
 81103ba:	b09c      	sub	sp, #112	@ 0x70
 81103bc:	af00      	add	r7, sp, #0
 81103be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 81103c0:	687b      	ldr	r3, [r7, #4]
 81103c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 81103c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 81103ca:	687b      	ldr	r3, [r7, #4]
 81103cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81103d0:	2b22      	cmp	r3, #34	@ 0x22
 81103d2:	f040 80be 	bne.w	8110552 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 81103d6:	687b      	ldr	r3, [r7, #4]
 81103d8:	681b      	ldr	r3, [r3, #0]
 81103da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81103dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 81103e0:	687b      	ldr	r3, [r7, #4]
 81103e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81103e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 81103e6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 81103ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 81103ee:	4013      	ands	r3, r2
 81103f0:	b29a      	uxth	r2, r3
 81103f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 81103f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 81103f6:	687b      	ldr	r3, [r7, #4]
 81103f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81103fa:	1c9a      	adds	r2, r3, #2
 81103fc:	687b      	ldr	r3, [r7, #4]
 81103fe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8110400:	687b      	ldr	r3, [r7, #4]
 8110402:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8110406:	b29b      	uxth	r3, r3
 8110408:	3b01      	subs	r3, #1
 811040a:	b29a      	uxth	r2, r3
 811040c:	687b      	ldr	r3, [r7, #4]
 811040e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8110412:	687b      	ldr	r3, [r7, #4]
 8110414:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8110418:	b29b      	uxth	r3, r3
 811041a:	2b00      	cmp	r3, #0
 811041c:	f040 80a1 	bne.w	8110562 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8110420:	687b      	ldr	r3, [r7, #4]
 8110422:	681b      	ldr	r3, [r3, #0]
 8110424:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8110428:	e853 3f00 	ldrex	r3, [r3]
 811042c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 811042e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110430:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8110434:	667b      	str	r3, [r7, #100]	@ 0x64
 8110436:	687b      	ldr	r3, [r7, #4]
 8110438:	681b      	ldr	r3, [r3, #0]
 811043a:	461a      	mov	r2, r3
 811043c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 811043e:	657b      	str	r3, [r7, #84]	@ 0x54
 8110440:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110442:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8110444:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8110446:	e841 2300 	strex	r3, r2, [r1]
 811044a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 811044c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811044e:	2b00      	cmp	r3, #0
 8110450:	d1e6      	bne.n	8110420 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8110452:	687b      	ldr	r3, [r7, #4]
 8110454:	681b      	ldr	r3, [r3, #0]
 8110456:	3308      	adds	r3, #8
 8110458:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 811045a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811045c:	e853 3f00 	ldrex	r3, [r3]
 8110460:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8110462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110464:	f023 0301 	bic.w	r3, r3, #1
 8110468:	663b      	str	r3, [r7, #96]	@ 0x60
 811046a:	687b      	ldr	r3, [r7, #4]
 811046c:	681b      	ldr	r3, [r3, #0]
 811046e:	3308      	adds	r3, #8
 8110470:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8110472:	643a      	str	r2, [r7, #64]	@ 0x40
 8110474:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110476:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8110478:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 811047a:	e841 2300 	strex	r3, r2, [r1]
 811047e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8110480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8110482:	2b00      	cmp	r3, #0
 8110484:	d1e5      	bne.n	8110452 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8110486:	687b      	ldr	r3, [r7, #4]
 8110488:	2220      	movs	r2, #32
 811048a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 811048e:	687b      	ldr	r3, [r7, #4]
 8110490:	2200      	movs	r2, #0
 8110492:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8110494:	687b      	ldr	r3, [r7, #4]
 8110496:	2200      	movs	r2, #0
 8110498:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 811049a:	687b      	ldr	r3, [r7, #4]
 811049c:	681b      	ldr	r3, [r3, #0]
 811049e:	4a33      	ldr	r2, [pc, #204]	@ (811056c <UART_RxISR_16BIT+0x1b4>)
 81104a0:	4293      	cmp	r3, r2
 81104a2:	d01f      	beq.n	81104e4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 81104a4:	687b      	ldr	r3, [r7, #4]
 81104a6:	681b      	ldr	r3, [r3, #0]
 81104a8:	685b      	ldr	r3, [r3, #4]
 81104aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81104ae:	2b00      	cmp	r3, #0
 81104b0:	d018      	beq.n	81104e4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 81104b2:	687b      	ldr	r3, [r7, #4]
 81104b4:	681b      	ldr	r3, [r3, #0]
 81104b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81104b8:	6a3b      	ldr	r3, [r7, #32]
 81104ba:	e853 3f00 	ldrex	r3, [r3]
 81104be:	61fb      	str	r3, [r7, #28]
   return(result);
 81104c0:	69fb      	ldr	r3, [r7, #28]
 81104c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 81104c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81104c8:	687b      	ldr	r3, [r7, #4]
 81104ca:	681b      	ldr	r3, [r3, #0]
 81104cc:	461a      	mov	r2, r3
 81104ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 81104d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81104d2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81104d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 81104d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81104d8:	e841 2300 	strex	r3, r2, [r1]
 81104dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 81104de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81104e0:	2b00      	cmp	r3, #0
 81104e2:	d1e6      	bne.n	81104b2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81104e4:	687b      	ldr	r3, [r7, #4]
 81104e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81104e8:	2b01      	cmp	r3, #1
 81104ea:	d12e      	bne.n	811054a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81104ec:	687b      	ldr	r3, [r7, #4]
 81104ee:	2200      	movs	r2, #0
 81104f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81104f2:	687b      	ldr	r3, [r7, #4]
 81104f4:	681b      	ldr	r3, [r3, #0]
 81104f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81104f8:	68fb      	ldr	r3, [r7, #12]
 81104fa:	e853 3f00 	ldrex	r3, [r3]
 81104fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8110500:	68bb      	ldr	r3, [r7, #8]
 8110502:	f023 0310 	bic.w	r3, r3, #16
 8110506:	65bb      	str	r3, [r7, #88]	@ 0x58
 8110508:	687b      	ldr	r3, [r7, #4]
 811050a:	681b      	ldr	r3, [r3, #0]
 811050c:	461a      	mov	r2, r3
 811050e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8110510:	61bb      	str	r3, [r7, #24]
 8110512:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110514:	6979      	ldr	r1, [r7, #20]
 8110516:	69ba      	ldr	r2, [r7, #24]
 8110518:	e841 2300 	strex	r3, r2, [r1]
 811051c:	613b      	str	r3, [r7, #16]
   return(result);
 811051e:	693b      	ldr	r3, [r7, #16]
 8110520:	2b00      	cmp	r3, #0
 8110522:	d1e6      	bne.n	81104f2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8110524:	687b      	ldr	r3, [r7, #4]
 8110526:	681b      	ldr	r3, [r3, #0]
 8110528:	69db      	ldr	r3, [r3, #28]
 811052a:	f003 0310 	and.w	r3, r3, #16
 811052e:	2b10      	cmp	r3, #16
 8110530:	d103      	bne.n	811053a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8110532:	687b      	ldr	r3, [r7, #4]
 8110534:	681b      	ldr	r3, [r3, #0]
 8110536:	2210      	movs	r2, #16
 8110538:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 811053a:	687b      	ldr	r3, [r7, #4]
 811053c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8110540:	4619      	mov	r1, r3
 8110542:	6878      	ldr	r0, [r7, #4]
 8110544:	f7fe fd64 	bl	810f010 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8110548:	e00b      	b.n	8110562 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 811054a:	6878      	ldr	r0, [r7, #4]
 811054c:	f7f3 fd14 	bl	8103f78 <HAL_UART_RxCpltCallback>
}
 8110550:	e007      	b.n	8110562 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8110552:	687b      	ldr	r3, [r7, #4]
 8110554:	681b      	ldr	r3, [r3, #0]
 8110556:	699a      	ldr	r2, [r3, #24]
 8110558:	687b      	ldr	r3, [r7, #4]
 811055a:	681b      	ldr	r3, [r3, #0]
 811055c:	f042 0208 	orr.w	r2, r2, #8
 8110560:	619a      	str	r2, [r3, #24]
}
 8110562:	bf00      	nop
 8110564:	3770      	adds	r7, #112	@ 0x70
 8110566:	46bd      	mov	sp, r7
 8110568:	bd80      	pop	{r7, pc}
 811056a:	bf00      	nop
 811056c:	58000c00 	.word	0x58000c00

08110570 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8110570:	b580      	push	{r7, lr}
 8110572:	b0ac      	sub	sp, #176	@ 0xb0
 8110574:	af00      	add	r7, sp, #0
 8110576:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8110578:	687b      	ldr	r3, [r7, #4]
 811057a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811057e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8110582:	687b      	ldr	r3, [r7, #4]
 8110584:	681b      	ldr	r3, [r3, #0]
 8110586:	69db      	ldr	r3, [r3, #28]
 8110588:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 811058c:	687b      	ldr	r3, [r7, #4]
 811058e:	681b      	ldr	r3, [r3, #0]
 8110590:	681b      	ldr	r3, [r3, #0]
 8110592:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8110596:	687b      	ldr	r3, [r7, #4]
 8110598:	681b      	ldr	r3, [r3, #0]
 811059a:	689b      	ldr	r3, [r3, #8]
 811059c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 81105a0:	687b      	ldr	r3, [r7, #4]
 81105a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81105a6:	2b22      	cmp	r3, #34	@ 0x22
 81105a8:	f040 8182 	bne.w	81108b0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 81105ac:	687b      	ldr	r3, [r7, #4]
 81105ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 81105b2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 81105b6:	e125      	b.n	8110804 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 81105b8:	687b      	ldr	r3, [r7, #4]
 81105ba:	681b      	ldr	r3, [r3, #0]
 81105bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81105be:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 81105c2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 81105c6:	b2d9      	uxtb	r1, r3
 81105c8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 81105cc:	b2da      	uxtb	r2, r3
 81105ce:	687b      	ldr	r3, [r7, #4]
 81105d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81105d2:	400a      	ands	r2, r1
 81105d4:	b2d2      	uxtb	r2, r2
 81105d6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 81105d8:	687b      	ldr	r3, [r7, #4]
 81105da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81105dc:	1c5a      	adds	r2, r3, #1
 81105de:	687b      	ldr	r3, [r7, #4]
 81105e0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 81105e2:	687b      	ldr	r3, [r7, #4]
 81105e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 81105e8:	b29b      	uxth	r3, r3
 81105ea:	3b01      	subs	r3, #1
 81105ec:	b29a      	uxth	r2, r3
 81105ee:	687b      	ldr	r3, [r7, #4]
 81105f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 81105f4:	687b      	ldr	r3, [r7, #4]
 81105f6:	681b      	ldr	r3, [r3, #0]
 81105f8:	69db      	ldr	r3, [r3, #28]
 81105fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 81105fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8110602:	f003 0307 	and.w	r3, r3, #7
 8110606:	2b00      	cmp	r3, #0
 8110608:	d053      	beq.n	81106b2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 811060a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 811060e:	f003 0301 	and.w	r3, r3, #1
 8110612:	2b00      	cmp	r3, #0
 8110614:	d011      	beq.n	811063a <UART_RxISR_8BIT_FIFOEN+0xca>
 8110616:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 811061a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 811061e:	2b00      	cmp	r3, #0
 8110620:	d00b      	beq.n	811063a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8110622:	687b      	ldr	r3, [r7, #4]
 8110624:	681b      	ldr	r3, [r3, #0]
 8110626:	2201      	movs	r2, #1
 8110628:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 811062a:	687b      	ldr	r3, [r7, #4]
 811062c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8110630:	f043 0201 	orr.w	r2, r3, #1
 8110634:	687b      	ldr	r3, [r7, #4]
 8110636:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 811063a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 811063e:	f003 0302 	and.w	r3, r3, #2
 8110642:	2b00      	cmp	r3, #0
 8110644:	d011      	beq.n	811066a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8110646:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 811064a:	f003 0301 	and.w	r3, r3, #1
 811064e:	2b00      	cmp	r3, #0
 8110650:	d00b      	beq.n	811066a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8110652:	687b      	ldr	r3, [r7, #4]
 8110654:	681b      	ldr	r3, [r3, #0]
 8110656:	2202      	movs	r2, #2
 8110658:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 811065a:	687b      	ldr	r3, [r7, #4]
 811065c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8110660:	f043 0204 	orr.w	r2, r3, #4
 8110664:	687b      	ldr	r3, [r7, #4]
 8110666:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 811066a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 811066e:	f003 0304 	and.w	r3, r3, #4
 8110672:	2b00      	cmp	r3, #0
 8110674:	d011      	beq.n	811069a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8110676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 811067a:	f003 0301 	and.w	r3, r3, #1
 811067e:	2b00      	cmp	r3, #0
 8110680:	d00b      	beq.n	811069a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8110682:	687b      	ldr	r3, [r7, #4]
 8110684:	681b      	ldr	r3, [r3, #0]
 8110686:	2204      	movs	r2, #4
 8110688:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 811068a:	687b      	ldr	r3, [r7, #4]
 811068c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8110690:	f043 0202 	orr.w	r2, r3, #2
 8110694:	687b      	ldr	r3, [r7, #4]
 8110696:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 811069a:	687b      	ldr	r3, [r7, #4]
 811069c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81106a0:	2b00      	cmp	r3, #0
 81106a2:	d006      	beq.n	81106b2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 81106a4:	6878      	ldr	r0, [r7, #4]
 81106a6:	f7fe fca9 	bl	810effc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 81106aa:	687b      	ldr	r3, [r7, #4]
 81106ac:	2200      	movs	r2, #0
 81106ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 81106b2:	687b      	ldr	r3, [r7, #4]
 81106b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 81106b8:	b29b      	uxth	r3, r3
 81106ba:	2b00      	cmp	r3, #0
 81106bc:	f040 80a2 	bne.w	8110804 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 81106c0:	687b      	ldr	r3, [r7, #4]
 81106c2:	681b      	ldr	r3, [r3, #0]
 81106c4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81106c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 81106c8:	e853 3f00 	ldrex	r3, [r3]
 81106cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 81106ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81106d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81106d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 81106d8:	687b      	ldr	r3, [r7, #4]
 81106da:	681b      	ldr	r3, [r3, #0]
 81106dc:	461a      	mov	r2, r3
 81106de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 81106e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81106e4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81106e6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 81106e8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 81106ea:	e841 2300 	strex	r3, r2, [r1]
 81106ee:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 81106f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 81106f2:	2b00      	cmp	r3, #0
 81106f4:	d1e4      	bne.n	81106c0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81106f6:	687b      	ldr	r3, [r7, #4]
 81106f8:	681b      	ldr	r3, [r3, #0]
 81106fa:	3308      	adds	r3, #8
 81106fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81106fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8110700:	e853 3f00 	ldrex	r3, [r3]
 8110704:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8110706:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8110708:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 811070c:	f023 0301 	bic.w	r3, r3, #1
 8110710:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8110714:	687b      	ldr	r3, [r7, #4]
 8110716:	681b      	ldr	r3, [r3, #0]
 8110718:	3308      	adds	r3, #8
 811071a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 811071e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8110720:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110722:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8110724:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8110726:	e841 2300 	strex	r3, r2, [r1]
 811072a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 811072c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 811072e:	2b00      	cmp	r3, #0
 8110730:	d1e1      	bne.n	81106f6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8110732:	687b      	ldr	r3, [r7, #4]
 8110734:	2220      	movs	r2, #32
 8110736:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 811073a:	687b      	ldr	r3, [r7, #4]
 811073c:	2200      	movs	r2, #0
 811073e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8110740:	687b      	ldr	r3, [r7, #4]
 8110742:	2200      	movs	r2, #0
 8110744:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8110746:	687b      	ldr	r3, [r7, #4]
 8110748:	681b      	ldr	r3, [r3, #0]
 811074a:	4a5f      	ldr	r2, [pc, #380]	@ (81108c8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 811074c:	4293      	cmp	r3, r2
 811074e:	d021      	beq.n	8110794 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8110750:	687b      	ldr	r3, [r7, #4]
 8110752:	681b      	ldr	r3, [r3, #0]
 8110754:	685b      	ldr	r3, [r3, #4]
 8110756:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 811075a:	2b00      	cmp	r3, #0
 811075c:	d01a      	beq.n	8110794 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 811075e:	687b      	ldr	r3, [r7, #4]
 8110760:	681b      	ldr	r3, [r3, #0]
 8110762:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8110766:	e853 3f00 	ldrex	r3, [r3]
 811076a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 811076c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811076e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8110772:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8110776:	687b      	ldr	r3, [r7, #4]
 8110778:	681b      	ldr	r3, [r3, #0]
 811077a:	461a      	mov	r2, r3
 811077c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8110780:	657b      	str	r3, [r7, #84]	@ 0x54
 8110782:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110784:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8110786:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8110788:	e841 2300 	strex	r3, r2, [r1]
 811078c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 811078e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8110790:	2b00      	cmp	r3, #0
 8110792:	d1e4      	bne.n	811075e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8110794:	687b      	ldr	r3, [r7, #4]
 8110796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110798:	2b01      	cmp	r3, #1
 811079a:	d130      	bne.n	81107fe <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 811079c:	687b      	ldr	r3, [r7, #4]
 811079e:	2200      	movs	r2, #0
 81107a0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81107a2:	687b      	ldr	r3, [r7, #4]
 81107a4:	681b      	ldr	r3, [r3, #0]
 81107a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81107a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81107aa:	e853 3f00 	ldrex	r3, [r3]
 81107ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 81107b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81107b2:	f023 0310 	bic.w	r3, r3, #16
 81107b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81107ba:	687b      	ldr	r3, [r7, #4]
 81107bc:	681b      	ldr	r3, [r3, #0]
 81107be:	461a      	mov	r2, r3
 81107c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 81107c4:	643b      	str	r3, [r7, #64]	@ 0x40
 81107c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81107c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 81107ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 81107cc:	e841 2300 	strex	r3, r2, [r1]
 81107d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 81107d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81107d4:	2b00      	cmp	r3, #0
 81107d6:	d1e4      	bne.n	81107a2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 81107d8:	687b      	ldr	r3, [r7, #4]
 81107da:	681b      	ldr	r3, [r3, #0]
 81107dc:	69db      	ldr	r3, [r3, #28]
 81107de:	f003 0310 	and.w	r3, r3, #16
 81107e2:	2b10      	cmp	r3, #16
 81107e4:	d103      	bne.n	81107ee <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 81107e6:	687b      	ldr	r3, [r7, #4]
 81107e8:	681b      	ldr	r3, [r3, #0]
 81107ea:	2210      	movs	r2, #16
 81107ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 81107ee:	687b      	ldr	r3, [r7, #4]
 81107f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 81107f4:	4619      	mov	r1, r3
 81107f6:	6878      	ldr	r0, [r7, #4]
 81107f8:	f7fe fc0a 	bl	810f010 <HAL_UARTEx_RxEventCallback>
 81107fc:	e002      	b.n	8110804 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 81107fe:	6878      	ldr	r0, [r7, #4]
 8110800:	f7f3 fbba 	bl	8103f78 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8110804:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8110808:	2b00      	cmp	r3, #0
 811080a:	d006      	beq.n	811081a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 811080c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8110810:	f003 0320 	and.w	r3, r3, #32
 8110814:	2b00      	cmp	r3, #0
 8110816:	f47f aecf 	bne.w	81105b8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 811081a:	687b      	ldr	r3, [r7, #4]
 811081c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8110820:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8110824:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8110828:	2b00      	cmp	r3, #0
 811082a:	d049      	beq.n	81108c0 <UART_RxISR_8BIT_FIFOEN+0x350>
 811082c:	687b      	ldr	r3, [r7, #4]
 811082e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8110832:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8110836:	429a      	cmp	r2, r3
 8110838:	d242      	bcs.n	81108c0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 811083a:	687b      	ldr	r3, [r7, #4]
 811083c:	681b      	ldr	r3, [r3, #0]
 811083e:	3308      	adds	r3, #8
 8110840:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110842:	6a3b      	ldr	r3, [r7, #32]
 8110844:	e853 3f00 	ldrex	r3, [r3]
 8110848:	61fb      	str	r3, [r7, #28]
   return(result);
 811084a:	69fb      	ldr	r3, [r7, #28]
 811084c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8110850:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8110854:	687b      	ldr	r3, [r7, #4]
 8110856:	681b      	ldr	r3, [r3, #0]
 8110858:	3308      	adds	r3, #8
 811085a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 811085e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8110860:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110862:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8110864:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8110866:	e841 2300 	strex	r3, r2, [r1]
 811086a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 811086c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811086e:	2b00      	cmp	r3, #0
 8110870:	d1e3      	bne.n	811083a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8110872:	687b      	ldr	r3, [r7, #4]
 8110874:	4a15      	ldr	r2, [pc, #84]	@ (81108cc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8110876:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8110878:	687b      	ldr	r3, [r7, #4]
 811087a:	681b      	ldr	r3, [r3, #0]
 811087c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 811087e:	68fb      	ldr	r3, [r7, #12]
 8110880:	e853 3f00 	ldrex	r3, [r3]
 8110884:	60bb      	str	r3, [r7, #8]
   return(result);
 8110886:	68bb      	ldr	r3, [r7, #8]
 8110888:	f043 0320 	orr.w	r3, r3, #32
 811088c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8110890:	687b      	ldr	r3, [r7, #4]
 8110892:	681b      	ldr	r3, [r3, #0]
 8110894:	461a      	mov	r2, r3
 8110896:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 811089a:	61bb      	str	r3, [r7, #24]
 811089c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 811089e:	6979      	ldr	r1, [r7, #20]
 81108a0:	69ba      	ldr	r2, [r7, #24]
 81108a2:	e841 2300 	strex	r3, r2, [r1]
 81108a6:	613b      	str	r3, [r7, #16]
   return(result);
 81108a8:	693b      	ldr	r3, [r7, #16]
 81108aa:	2b00      	cmp	r3, #0
 81108ac:	d1e4      	bne.n	8110878 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 81108ae:	e007      	b.n	81108c0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 81108b0:	687b      	ldr	r3, [r7, #4]
 81108b2:	681b      	ldr	r3, [r3, #0]
 81108b4:	699a      	ldr	r2, [r3, #24]
 81108b6:	687b      	ldr	r3, [r7, #4]
 81108b8:	681b      	ldr	r3, [r3, #0]
 81108ba:	f042 0208 	orr.w	r2, r2, #8
 81108be:	619a      	str	r2, [r3, #24]
}
 81108c0:	bf00      	nop
 81108c2:	37b0      	adds	r7, #176	@ 0xb0
 81108c4:	46bd      	mov	sp, r7
 81108c6:	bd80      	pop	{r7, pc}
 81108c8:	58000c00 	.word	0x58000c00
 81108cc:	08110201 	.word	0x08110201

081108d0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 81108d0:	b580      	push	{r7, lr}
 81108d2:	b0ae      	sub	sp, #184	@ 0xb8
 81108d4:	af00      	add	r7, sp, #0
 81108d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 81108d8:	687b      	ldr	r3, [r7, #4]
 81108da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 81108de:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 81108e2:	687b      	ldr	r3, [r7, #4]
 81108e4:	681b      	ldr	r3, [r3, #0]
 81108e6:	69db      	ldr	r3, [r3, #28]
 81108e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 81108ec:	687b      	ldr	r3, [r7, #4]
 81108ee:	681b      	ldr	r3, [r3, #0]
 81108f0:	681b      	ldr	r3, [r3, #0]
 81108f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 81108f6:	687b      	ldr	r3, [r7, #4]
 81108f8:	681b      	ldr	r3, [r3, #0]
 81108fa:	689b      	ldr	r3, [r3, #8]
 81108fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8110900:	687b      	ldr	r3, [r7, #4]
 8110902:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8110906:	2b22      	cmp	r3, #34	@ 0x22
 8110908:	f040 8186 	bne.w	8110c18 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 811090c:	687b      	ldr	r3, [r7, #4]
 811090e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8110912:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8110916:	e129      	b.n	8110b6c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8110918:	687b      	ldr	r3, [r7, #4]
 811091a:	681b      	ldr	r3, [r3, #0]
 811091c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811091e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8110922:	687b      	ldr	r3, [r7, #4]
 8110924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8110926:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 811092a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 811092e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8110932:	4013      	ands	r3, r2
 8110934:	b29a      	uxth	r2, r3
 8110936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 811093a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 811093c:	687b      	ldr	r3, [r7, #4]
 811093e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8110940:	1c9a      	adds	r2, r3, #2
 8110942:	687b      	ldr	r3, [r7, #4]
 8110944:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8110946:	687b      	ldr	r3, [r7, #4]
 8110948:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 811094c:	b29b      	uxth	r3, r3
 811094e:	3b01      	subs	r3, #1
 8110950:	b29a      	uxth	r2, r3
 8110952:	687b      	ldr	r3, [r7, #4]
 8110954:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8110958:	687b      	ldr	r3, [r7, #4]
 811095a:	681b      	ldr	r3, [r3, #0]
 811095c:	69db      	ldr	r3, [r3, #28]
 811095e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8110962:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8110966:	f003 0307 	and.w	r3, r3, #7
 811096a:	2b00      	cmp	r3, #0
 811096c:	d053      	beq.n	8110a16 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 811096e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8110972:	f003 0301 	and.w	r3, r3, #1
 8110976:	2b00      	cmp	r3, #0
 8110978:	d011      	beq.n	811099e <UART_RxISR_16BIT_FIFOEN+0xce>
 811097a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 811097e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8110982:	2b00      	cmp	r3, #0
 8110984:	d00b      	beq.n	811099e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8110986:	687b      	ldr	r3, [r7, #4]
 8110988:	681b      	ldr	r3, [r3, #0]
 811098a:	2201      	movs	r2, #1
 811098c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 811098e:	687b      	ldr	r3, [r7, #4]
 8110990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8110994:	f043 0201 	orr.w	r2, r3, #1
 8110998:	687b      	ldr	r3, [r7, #4]
 811099a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 811099e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 81109a2:	f003 0302 	and.w	r3, r3, #2
 81109a6:	2b00      	cmp	r3, #0
 81109a8:	d011      	beq.n	81109ce <UART_RxISR_16BIT_FIFOEN+0xfe>
 81109aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 81109ae:	f003 0301 	and.w	r3, r3, #1
 81109b2:	2b00      	cmp	r3, #0
 81109b4:	d00b      	beq.n	81109ce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 81109b6:	687b      	ldr	r3, [r7, #4]
 81109b8:	681b      	ldr	r3, [r3, #0]
 81109ba:	2202      	movs	r2, #2
 81109bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 81109be:	687b      	ldr	r3, [r7, #4]
 81109c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81109c4:	f043 0204 	orr.w	r2, r3, #4
 81109c8:	687b      	ldr	r3, [r7, #4]
 81109ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81109ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 81109d2:	f003 0304 	and.w	r3, r3, #4
 81109d6:	2b00      	cmp	r3, #0
 81109d8:	d011      	beq.n	81109fe <UART_RxISR_16BIT_FIFOEN+0x12e>
 81109da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 81109de:	f003 0301 	and.w	r3, r3, #1
 81109e2:	2b00      	cmp	r3, #0
 81109e4:	d00b      	beq.n	81109fe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 81109e6:	687b      	ldr	r3, [r7, #4]
 81109e8:	681b      	ldr	r3, [r3, #0]
 81109ea:	2204      	movs	r2, #4
 81109ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 81109ee:	687b      	ldr	r3, [r7, #4]
 81109f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81109f4:	f043 0202 	orr.w	r2, r3, #2
 81109f8:	687b      	ldr	r3, [r7, #4]
 81109fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 81109fe:	687b      	ldr	r3, [r7, #4]
 8110a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8110a04:	2b00      	cmp	r3, #0
 8110a06:	d006      	beq.n	8110a16 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8110a08:	6878      	ldr	r0, [r7, #4]
 8110a0a:	f7fe faf7 	bl	810effc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8110a0e:	687b      	ldr	r3, [r7, #4]
 8110a10:	2200      	movs	r2, #0
 8110a12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8110a16:	687b      	ldr	r3, [r7, #4]
 8110a18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8110a1c:	b29b      	uxth	r3, r3
 8110a1e:	2b00      	cmp	r3, #0
 8110a20:	f040 80a4 	bne.w	8110b6c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8110a24:	687b      	ldr	r3, [r7, #4]
 8110a26:	681b      	ldr	r3, [r3, #0]
 8110a28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110a2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8110a2c:	e853 3f00 	ldrex	r3, [r3]
 8110a30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8110a32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8110a34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8110a38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8110a3c:	687b      	ldr	r3, [r7, #4]
 8110a3e:	681b      	ldr	r3, [r3, #0]
 8110a40:	461a      	mov	r2, r3
 8110a42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8110a46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8110a4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110a4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8110a4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8110a52:	e841 2300 	strex	r3, r2, [r1]
 8110a56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8110a58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8110a5a:	2b00      	cmp	r3, #0
 8110a5c:	d1e2      	bne.n	8110a24 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8110a5e:	687b      	ldr	r3, [r7, #4]
 8110a60:	681b      	ldr	r3, [r3, #0]
 8110a62:	3308      	adds	r3, #8
 8110a64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110a66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8110a68:	e853 3f00 	ldrex	r3, [r3]
 8110a6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8110a6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8110a70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8110a74:	f023 0301 	bic.w	r3, r3, #1
 8110a78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8110a7c:	687b      	ldr	r3, [r7, #4]
 8110a7e:	681b      	ldr	r3, [r3, #0]
 8110a80:	3308      	adds	r3, #8
 8110a82:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8110a86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8110a88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110a8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8110a8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8110a8e:	e841 2300 	strex	r3, r2, [r1]
 8110a92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8110a94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8110a96:	2b00      	cmp	r3, #0
 8110a98:	d1e1      	bne.n	8110a5e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8110a9a:	687b      	ldr	r3, [r7, #4]
 8110a9c:	2220      	movs	r2, #32
 8110a9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8110aa2:	687b      	ldr	r3, [r7, #4]
 8110aa4:	2200      	movs	r2, #0
 8110aa6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8110aa8:	687b      	ldr	r3, [r7, #4]
 8110aaa:	2200      	movs	r2, #0
 8110aac:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8110aae:	687b      	ldr	r3, [r7, #4]
 8110ab0:	681b      	ldr	r3, [r3, #0]
 8110ab2:	4a5f      	ldr	r2, [pc, #380]	@ (8110c30 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8110ab4:	4293      	cmp	r3, r2
 8110ab6:	d021      	beq.n	8110afc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8110ab8:	687b      	ldr	r3, [r7, #4]
 8110aba:	681b      	ldr	r3, [r3, #0]
 8110abc:	685b      	ldr	r3, [r3, #4]
 8110abe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8110ac2:	2b00      	cmp	r3, #0
 8110ac4:	d01a      	beq.n	8110afc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8110ac6:	687b      	ldr	r3, [r7, #4]
 8110ac8:	681b      	ldr	r3, [r3, #0]
 8110aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110acc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8110ace:	e853 3f00 	ldrex	r3, [r3]
 8110ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8110ad4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8110ad6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8110ada:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8110ade:	687b      	ldr	r3, [r7, #4]
 8110ae0:	681b      	ldr	r3, [r3, #0]
 8110ae2:	461a      	mov	r2, r3
 8110ae4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8110ae8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8110aea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110aec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8110aee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8110af0:	e841 2300 	strex	r3, r2, [r1]
 8110af4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8110af6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8110af8:	2b00      	cmp	r3, #0
 8110afa:	d1e4      	bne.n	8110ac6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8110afc:	687b      	ldr	r3, [r7, #4]
 8110afe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110b00:	2b01      	cmp	r3, #1
 8110b02:	d130      	bne.n	8110b66 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8110b04:	687b      	ldr	r3, [r7, #4]
 8110b06:	2200      	movs	r2, #0
 8110b08:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8110b0a:	687b      	ldr	r3, [r7, #4]
 8110b0c:	681b      	ldr	r3, [r3, #0]
 8110b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8110b12:	e853 3f00 	ldrex	r3, [r3]
 8110b16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8110b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110b1a:	f023 0310 	bic.w	r3, r3, #16
 8110b1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8110b22:	687b      	ldr	r3, [r7, #4]
 8110b24:	681b      	ldr	r3, [r3, #0]
 8110b26:	461a      	mov	r2, r3
 8110b28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8110b2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8110b2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110b30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8110b32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8110b34:	e841 2300 	strex	r3, r2, [r1]
 8110b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8110b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8110b3c:	2b00      	cmp	r3, #0
 8110b3e:	d1e4      	bne.n	8110b0a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8110b40:	687b      	ldr	r3, [r7, #4]
 8110b42:	681b      	ldr	r3, [r3, #0]
 8110b44:	69db      	ldr	r3, [r3, #28]
 8110b46:	f003 0310 	and.w	r3, r3, #16
 8110b4a:	2b10      	cmp	r3, #16
 8110b4c:	d103      	bne.n	8110b56 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8110b4e:	687b      	ldr	r3, [r7, #4]
 8110b50:	681b      	ldr	r3, [r3, #0]
 8110b52:	2210      	movs	r2, #16
 8110b54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8110b56:	687b      	ldr	r3, [r7, #4]
 8110b58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8110b5c:	4619      	mov	r1, r3
 8110b5e:	6878      	ldr	r0, [r7, #4]
 8110b60:	f7fe fa56 	bl	810f010 <HAL_UARTEx_RxEventCallback>
 8110b64:	e002      	b.n	8110b6c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8110b66:	6878      	ldr	r0, [r7, #4]
 8110b68:	f7f3 fa06 	bl	8103f78 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8110b6c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8110b70:	2b00      	cmp	r3, #0
 8110b72:	d006      	beq.n	8110b82 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8110b74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8110b78:	f003 0320 	and.w	r3, r3, #32
 8110b7c:	2b00      	cmp	r3, #0
 8110b7e:	f47f aecb 	bne.w	8110918 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8110b82:	687b      	ldr	r3, [r7, #4]
 8110b84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8110b88:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8110b8c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8110b90:	2b00      	cmp	r3, #0
 8110b92:	d049      	beq.n	8110c28 <UART_RxISR_16BIT_FIFOEN+0x358>
 8110b94:	687b      	ldr	r3, [r7, #4]
 8110b96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8110b9a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8110b9e:	429a      	cmp	r2, r3
 8110ba0:	d242      	bcs.n	8110c28 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8110ba2:	687b      	ldr	r3, [r7, #4]
 8110ba4:	681b      	ldr	r3, [r3, #0]
 8110ba6:	3308      	adds	r3, #8
 8110ba8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110bac:	e853 3f00 	ldrex	r3, [r3]
 8110bb0:	623b      	str	r3, [r7, #32]
   return(result);
 8110bb2:	6a3b      	ldr	r3, [r7, #32]
 8110bb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8110bb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8110bbc:	687b      	ldr	r3, [r7, #4]
 8110bbe:	681b      	ldr	r3, [r3, #0]
 8110bc0:	3308      	adds	r3, #8
 8110bc2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8110bc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8110bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110bca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8110bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8110bce:	e841 2300 	strex	r3, r2, [r1]
 8110bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8110bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110bd6:	2b00      	cmp	r3, #0
 8110bd8:	d1e3      	bne.n	8110ba2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8110bda:	687b      	ldr	r3, [r7, #4]
 8110bdc:	4a15      	ldr	r2, [pc, #84]	@ (8110c34 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8110bde:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8110be0:	687b      	ldr	r3, [r7, #4]
 8110be2:	681b      	ldr	r3, [r3, #0]
 8110be4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110be6:	693b      	ldr	r3, [r7, #16]
 8110be8:	e853 3f00 	ldrex	r3, [r3]
 8110bec:	60fb      	str	r3, [r7, #12]
   return(result);
 8110bee:	68fb      	ldr	r3, [r7, #12]
 8110bf0:	f043 0320 	orr.w	r3, r3, #32
 8110bf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8110bf8:	687b      	ldr	r3, [r7, #4]
 8110bfa:	681b      	ldr	r3, [r3, #0]
 8110bfc:	461a      	mov	r2, r3
 8110bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8110c02:	61fb      	str	r3, [r7, #28]
 8110c04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110c06:	69b9      	ldr	r1, [r7, #24]
 8110c08:	69fa      	ldr	r2, [r7, #28]
 8110c0a:	e841 2300 	strex	r3, r2, [r1]
 8110c0e:	617b      	str	r3, [r7, #20]
   return(result);
 8110c10:	697b      	ldr	r3, [r7, #20]
 8110c12:	2b00      	cmp	r3, #0
 8110c14:	d1e4      	bne.n	8110be0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8110c16:	e007      	b.n	8110c28 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8110c18:	687b      	ldr	r3, [r7, #4]
 8110c1a:	681b      	ldr	r3, [r3, #0]
 8110c1c:	699a      	ldr	r2, [r3, #24]
 8110c1e:	687b      	ldr	r3, [r7, #4]
 8110c20:	681b      	ldr	r3, [r3, #0]
 8110c22:	f042 0208 	orr.w	r2, r2, #8
 8110c26:	619a      	str	r2, [r3, #24]
}
 8110c28:	bf00      	nop
 8110c2a:	37b8      	adds	r7, #184	@ 0xb8
 8110c2c:	46bd      	mov	sp, r7
 8110c2e:	bd80      	pop	{r7, pc}
 8110c30:	58000c00 	.word	0x58000c00
 8110c34:	081103b9 	.word	0x081103b9

08110c38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8110c38:	b480      	push	{r7}
 8110c3a:	b083      	sub	sp, #12
 8110c3c:	af00      	add	r7, sp, #0
 8110c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8110c40:	bf00      	nop
 8110c42:	370c      	adds	r7, #12
 8110c44:	46bd      	mov	sp, r7
 8110c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110c4a:	4770      	bx	lr

08110c4c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8110c4c:	b480      	push	{r7}
 8110c4e:	b083      	sub	sp, #12
 8110c50:	af00      	add	r7, sp, #0
 8110c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8110c54:	bf00      	nop
 8110c56:	370c      	adds	r7, #12
 8110c58:	46bd      	mov	sp, r7
 8110c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110c5e:	4770      	bx	lr

08110c60 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8110c60:	b480      	push	{r7}
 8110c62:	b083      	sub	sp, #12
 8110c64:	af00      	add	r7, sp, #0
 8110c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8110c68:	bf00      	nop
 8110c6a:	370c      	adds	r7, #12
 8110c6c:	46bd      	mov	sp, r7
 8110c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110c72:	4770      	bx	lr

08110c74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8110c74:	b480      	push	{r7}
 8110c76:	b085      	sub	sp, #20
 8110c78:	af00      	add	r7, sp, #0
 8110c7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8110c7c:	687b      	ldr	r3, [r7, #4]
 8110c7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8110c82:	2b01      	cmp	r3, #1
 8110c84:	d101      	bne.n	8110c8a <HAL_UARTEx_DisableFifoMode+0x16>
 8110c86:	2302      	movs	r3, #2
 8110c88:	e027      	b.n	8110cda <HAL_UARTEx_DisableFifoMode+0x66>
 8110c8a:	687b      	ldr	r3, [r7, #4]
 8110c8c:	2201      	movs	r2, #1
 8110c8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8110c92:	687b      	ldr	r3, [r7, #4]
 8110c94:	2224      	movs	r2, #36	@ 0x24
 8110c96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8110c9a:	687b      	ldr	r3, [r7, #4]
 8110c9c:	681b      	ldr	r3, [r3, #0]
 8110c9e:	681b      	ldr	r3, [r3, #0]
 8110ca0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8110ca2:	687b      	ldr	r3, [r7, #4]
 8110ca4:	681b      	ldr	r3, [r3, #0]
 8110ca6:	681a      	ldr	r2, [r3, #0]
 8110ca8:	687b      	ldr	r3, [r7, #4]
 8110caa:	681b      	ldr	r3, [r3, #0]
 8110cac:	f022 0201 	bic.w	r2, r2, #1
 8110cb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8110cb2:	68fb      	ldr	r3, [r7, #12]
 8110cb4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8110cb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8110cba:	687b      	ldr	r3, [r7, #4]
 8110cbc:	2200      	movs	r2, #0
 8110cbe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8110cc0:	687b      	ldr	r3, [r7, #4]
 8110cc2:	681b      	ldr	r3, [r3, #0]
 8110cc4:	68fa      	ldr	r2, [r7, #12]
 8110cc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8110cc8:	687b      	ldr	r3, [r7, #4]
 8110cca:	2220      	movs	r2, #32
 8110ccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8110cd0:	687b      	ldr	r3, [r7, #4]
 8110cd2:	2200      	movs	r2, #0
 8110cd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8110cd8:	2300      	movs	r3, #0
}
 8110cda:	4618      	mov	r0, r3
 8110cdc:	3714      	adds	r7, #20
 8110cde:	46bd      	mov	sp, r7
 8110ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110ce4:	4770      	bx	lr

08110ce6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8110ce6:	b580      	push	{r7, lr}
 8110ce8:	b084      	sub	sp, #16
 8110cea:	af00      	add	r7, sp, #0
 8110cec:	6078      	str	r0, [r7, #4]
 8110cee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8110cf0:	687b      	ldr	r3, [r7, #4]
 8110cf2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8110cf6:	2b01      	cmp	r3, #1
 8110cf8:	d101      	bne.n	8110cfe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8110cfa:	2302      	movs	r3, #2
 8110cfc:	e02d      	b.n	8110d5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8110cfe:	687b      	ldr	r3, [r7, #4]
 8110d00:	2201      	movs	r2, #1
 8110d02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8110d06:	687b      	ldr	r3, [r7, #4]
 8110d08:	2224      	movs	r2, #36	@ 0x24
 8110d0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8110d0e:	687b      	ldr	r3, [r7, #4]
 8110d10:	681b      	ldr	r3, [r3, #0]
 8110d12:	681b      	ldr	r3, [r3, #0]
 8110d14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8110d16:	687b      	ldr	r3, [r7, #4]
 8110d18:	681b      	ldr	r3, [r3, #0]
 8110d1a:	681a      	ldr	r2, [r3, #0]
 8110d1c:	687b      	ldr	r3, [r7, #4]
 8110d1e:	681b      	ldr	r3, [r3, #0]
 8110d20:	f022 0201 	bic.w	r2, r2, #1
 8110d24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8110d26:	687b      	ldr	r3, [r7, #4]
 8110d28:	681b      	ldr	r3, [r3, #0]
 8110d2a:	689b      	ldr	r3, [r3, #8]
 8110d2c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8110d30:	687b      	ldr	r3, [r7, #4]
 8110d32:	681b      	ldr	r3, [r3, #0]
 8110d34:	683a      	ldr	r2, [r7, #0]
 8110d36:	430a      	orrs	r2, r1
 8110d38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8110d3a:	6878      	ldr	r0, [r7, #4]
 8110d3c:	f000 f850 	bl	8110de0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8110d40:	687b      	ldr	r3, [r7, #4]
 8110d42:	681b      	ldr	r3, [r3, #0]
 8110d44:	68fa      	ldr	r2, [r7, #12]
 8110d46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8110d48:	687b      	ldr	r3, [r7, #4]
 8110d4a:	2220      	movs	r2, #32
 8110d4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8110d50:	687b      	ldr	r3, [r7, #4]
 8110d52:	2200      	movs	r2, #0
 8110d54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8110d58:	2300      	movs	r3, #0
}
 8110d5a:	4618      	mov	r0, r3
 8110d5c:	3710      	adds	r7, #16
 8110d5e:	46bd      	mov	sp, r7
 8110d60:	bd80      	pop	{r7, pc}

08110d62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8110d62:	b580      	push	{r7, lr}
 8110d64:	b084      	sub	sp, #16
 8110d66:	af00      	add	r7, sp, #0
 8110d68:	6078      	str	r0, [r7, #4]
 8110d6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8110d6c:	687b      	ldr	r3, [r7, #4]
 8110d6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8110d72:	2b01      	cmp	r3, #1
 8110d74:	d101      	bne.n	8110d7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8110d76:	2302      	movs	r3, #2
 8110d78:	e02d      	b.n	8110dd6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8110d7a:	687b      	ldr	r3, [r7, #4]
 8110d7c:	2201      	movs	r2, #1
 8110d7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8110d82:	687b      	ldr	r3, [r7, #4]
 8110d84:	2224      	movs	r2, #36	@ 0x24
 8110d86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8110d8a:	687b      	ldr	r3, [r7, #4]
 8110d8c:	681b      	ldr	r3, [r3, #0]
 8110d8e:	681b      	ldr	r3, [r3, #0]
 8110d90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8110d92:	687b      	ldr	r3, [r7, #4]
 8110d94:	681b      	ldr	r3, [r3, #0]
 8110d96:	681a      	ldr	r2, [r3, #0]
 8110d98:	687b      	ldr	r3, [r7, #4]
 8110d9a:	681b      	ldr	r3, [r3, #0]
 8110d9c:	f022 0201 	bic.w	r2, r2, #1
 8110da0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8110da2:	687b      	ldr	r3, [r7, #4]
 8110da4:	681b      	ldr	r3, [r3, #0]
 8110da6:	689b      	ldr	r3, [r3, #8]
 8110da8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8110dac:	687b      	ldr	r3, [r7, #4]
 8110dae:	681b      	ldr	r3, [r3, #0]
 8110db0:	683a      	ldr	r2, [r7, #0]
 8110db2:	430a      	orrs	r2, r1
 8110db4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8110db6:	6878      	ldr	r0, [r7, #4]
 8110db8:	f000 f812 	bl	8110de0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8110dbc:	687b      	ldr	r3, [r7, #4]
 8110dbe:	681b      	ldr	r3, [r3, #0]
 8110dc0:	68fa      	ldr	r2, [r7, #12]
 8110dc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8110dc4:	687b      	ldr	r3, [r7, #4]
 8110dc6:	2220      	movs	r2, #32
 8110dc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8110dcc:	687b      	ldr	r3, [r7, #4]
 8110dce:	2200      	movs	r2, #0
 8110dd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8110dd4:	2300      	movs	r3, #0
}
 8110dd6:	4618      	mov	r0, r3
 8110dd8:	3710      	adds	r7, #16
 8110dda:	46bd      	mov	sp, r7
 8110ddc:	bd80      	pop	{r7, pc}
	...

08110de0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8110de0:	b480      	push	{r7}
 8110de2:	b085      	sub	sp, #20
 8110de4:	af00      	add	r7, sp, #0
 8110de6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8110de8:	687b      	ldr	r3, [r7, #4]
 8110dea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8110dec:	2b00      	cmp	r3, #0
 8110dee:	d108      	bne.n	8110e02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8110df0:	687b      	ldr	r3, [r7, #4]
 8110df2:	2201      	movs	r2, #1
 8110df4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8110df8:	687b      	ldr	r3, [r7, #4]
 8110dfa:	2201      	movs	r2, #1
 8110dfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8110e00:	e031      	b.n	8110e66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8110e02:	2310      	movs	r3, #16
 8110e04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8110e06:	2310      	movs	r3, #16
 8110e08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8110e0a:	687b      	ldr	r3, [r7, #4]
 8110e0c:	681b      	ldr	r3, [r3, #0]
 8110e0e:	689b      	ldr	r3, [r3, #8]
 8110e10:	0e5b      	lsrs	r3, r3, #25
 8110e12:	b2db      	uxtb	r3, r3
 8110e14:	f003 0307 	and.w	r3, r3, #7
 8110e18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8110e1a:	687b      	ldr	r3, [r7, #4]
 8110e1c:	681b      	ldr	r3, [r3, #0]
 8110e1e:	689b      	ldr	r3, [r3, #8]
 8110e20:	0f5b      	lsrs	r3, r3, #29
 8110e22:	b2db      	uxtb	r3, r3
 8110e24:	f003 0307 	and.w	r3, r3, #7
 8110e28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8110e2a:	7bbb      	ldrb	r3, [r7, #14]
 8110e2c:	7b3a      	ldrb	r2, [r7, #12]
 8110e2e:	4911      	ldr	r1, [pc, #68]	@ (8110e74 <UARTEx_SetNbDataToProcess+0x94>)
 8110e30:	5c8a      	ldrb	r2, [r1, r2]
 8110e32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8110e36:	7b3a      	ldrb	r2, [r7, #12]
 8110e38:	490f      	ldr	r1, [pc, #60]	@ (8110e78 <UARTEx_SetNbDataToProcess+0x98>)
 8110e3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8110e3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8110e40:	b29a      	uxth	r2, r3
 8110e42:	687b      	ldr	r3, [r7, #4]
 8110e44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8110e48:	7bfb      	ldrb	r3, [r7, #15]
 8110e4a:	7b7a      	ldrb	r2, [r7, #13]
 8110e4c:	4909      	ldr	r1, [pc, #36]	@ (8110e74 <UARTEx_SetNbDataToProcess+0x94>)
 8110e4e:	5c8a      	ldrb	r2, [r1, r2]
 8110e50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8110e54:	7b7a      	ldrb	r2, [r7, #13]
 8110e56:	4908      	ldr	r1, [pc, #32]	@ (8110e78 <UARTEx_SetNbDataToProcess+0x98>)
 8110e58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8110e5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8110e5e:	b29a      	uxth	r2, r3
 8110e60:	687b      	ldr	r3, [r7, #4]
 8110e62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8110e66:	bf00      	nop
 8110e68:	3714      	adds	r7, #20
 8110e6a:	46bd      	mov	sp, r7
 8110e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110e70:	4770      	bx	lr
 8110e72:	bf00      	nop
 8110e74:	08116cf8 	.word	0x08116cf8
 8110e78:	08116d00 	.word	0x08116d00

08110e7c <arm_mat_trans_f32>:
 8110e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110e80:	8802      	ldrh	r2, [r0, #0]
 8110e82:	884b      	ldrh	r3, [r1, #2]
 8110e84:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8110e88:	684f      	ldr	r7, [r1, #4]
 8110e8a:	8840      	ldrh	r0, [r0, #2]
 8110e8c:	4293      	cmp	r3, r2
 8110e8e:	b083      	sub	sp, #12
 8110e90:	d14c      	bne.n	8110f2c <arm_mat_trans_f32+0xb0>
 8110e92:	f8b1 e000 	ldrh.w	lr, [r1]
 8110e96:	4586      	cmp	lr, r0
 8110e98:	d148      	bne.n	8110f2c <arm_mat_trans_f32+0xb0>
 8110e9a:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8110e9e:	009c      	lsls	r4, r3, #2
 8110ea0:	f00e 0e03 	and.w	lr, lr, #3
 8110ea4:	fb08 f904 	mul.w	r9, r8, r4
 8110ea8:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8110eac:	011d      	lsls	r5, r3, #4
 8110eae:	00db      	lsls	r3, r3, #3
 8110eb0:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8110eb4:	eb07 0a04 	add.w	sl, r7, r4
 8110eb8:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8110ebc:	9201      	str	r2, [sp, #4]
 8110ebe:	9300      	str	r3, [sp, #0]
 8110ec0:	463b      	mov	r3, r7
 8110ec2:	f1b8 0f00 	cmp.w	r8, #0
 8110ec6:	d01d      	beq.n	8110f04 <arm_mat_trans_f32+0x88>
 8110ec8:	9900      	ldr	r1, [sp, #0]
 8110eca:	f10c 0210 	add.w	r2, ip, #16
 8110ece:	4439      	add	r1, r7
 8110ed0:	4640      	mov	r0, r8
 8110ed2:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8110ed6:	601e      	str	r6, [r3, #0]
 8110ed8:	ed52 7a03 	vldr	s15, [r2, #-12]
 8110edc:	191e      	adds	r6, r3, r4
 8110ede:	edc6 7a00 	vstr	s15, [r6]
 8110ee2:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8110ee6:	600e      	str	r6, [r1, #0]
 8110ee8:	ed52 7a01 	vldr	s15, [r2, #-4]
 8110eec:	190e      	adds	r6, r1, r4
 8110eee:	3801      	subs	r0, #1
 8110ef0:	442b      	add	r3, r5
 8110ef2:	f102 0210 	add.w	r2, r2, #16
 8110ef6:	edc6 7a00 	vstr	s15, [r6]
 8110efa:	4429      	add	r1, r5
 8110efc:	d1e9      	bne.n	8110ed2 <arm_mat_trans_f32+0x56>
 8110efe:	44dc      	add	ip, fp
 8110f00:	eb09 0307 	add.w	r3, r9, r7
 8110f04:	f1be 0f00 	cmp.w	lr, #0
 8110f08:	d009      	beq.n	8110f1e <arm_mat_trans_f32+0xa2>
 8110f0a:	4672      	mov	r2, lr
 8110f0c:	4661      	mov	r1, ip
 8110f0e:	f851 0b04 	ldr.w	r0, [r1], #4
 8110f12:	6018      	str	r0, [r3, #0]
 8110f14:	3a01      	subs	r2, #1
 8110f16:	4423      	add	r3, r4
 8110f18:	d1f9      	bne.n	8110f0e <arm_mat_trans_f32+0x92>
 8110f1a:	9b01      	ldr	r3, [sp, #4]
 8110f1c:	449c      	add	ip, r3
 8110f1e:	3704      	adds	r7, #4
 8110f20:	4557      	cmp	r7, sl
 8110f22:	d1cd      	bne.n	8110ec0 <arm_mat_trans_f32+0x44>
 8110f24:	2000      	movs	r0, #0
 8110f26:	b003      	add	sp, #12
 8110f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110f2c:	f06f 0002 	mvn.w	r0, #2
 8110f30:	e7f9      	b.n	8110f26 <arm_mat_trans_f32+0xaa>
 8110f32:	bf00      	nop

08110f34 <arm_mat_sub_f32>:
 8110f34:	b4f0      	push	{r4, r5, r6, r7}
 8110f36:	e9d1 4700 	ldrd	r4, r7, [r1]
 8110f3a:	6803      	ldr	r3, [r0, #0]
 8110f3c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8110f40:	6856      	ldr	r6, [r2, #4]
 8110f42:	42a3      	cmp	r3, r4
 8110f44:	d15d      	bne.n	8111002 <arm_mat_sub_f32+0xce>
 8110f46:	6812      	ldr	r2, [r2, #0]
 8110f48:	4293      	cmp	r3, r2
 8110f4a:	d15a      	bne.n	8111002 <arm_mat_sub_f32+0xce>
 8110f4c:	8803      	ldrh	r3, [r0, #0]
 8110f4e:	8844      	ldrh	r4, [r0, #2]
 8110f50:	fb04 f403 	mul.w	r4, r4, r3
 8110f54:	08a5      	lsrs	r5, r4, #2
 8110f56:	d032      	beq.n	8110fbe <arm_mat_sub_f32+0x8a>
 8110f58:	f10c 0110 	add.w	r1, ip, #16
 8110f5c:	f107 0210 	add.w	r2, r7, #16
 8110f60:	f106 0310 	add.w	r3, r6, #16
 8110f64:	4628      	mov	r0, r5
 8110f66:	ed12 7a04 	vldr	s14, [r2, #-16]
 8110f6a:	ed51 7a04 	vldr	s15, [r1, #-16]
 8110f6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8110f72:	3801      	subs	r0, #1
 8110f74:	ed43 7a04 	vstr	s15, [r3, #-16]
 8110f78:	ed12 7a03 	vldr	s14, [r2, #-12]
 8110f7c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8110f80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8110f84:	f101 0110 	add.w	r1, r1, #16
 8110f88:	ed43 7a03 	vstr	s15, [r3, #-12]
 8110f8c:	ed12 7a02 	vldr	s14, [r2, #-8]
 8110f90:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 8110f94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8110f98:	f102 0210 	add.w	r2, r2, #16
 8110f9c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8110fa0:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 8110fa4:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8110fa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8110fac:	f103 0310 	add.w	r3, r3, #16
 8110fb0:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8110fb4:	d1d7      	bne.n	8110f66 <arm_mat_sub_f32+0x32>
 8110fb6:	012b      	lsls	r3, r5, #4
 8110fb8:	449c      	add	ip, r3
 8110fba:	441f      	add	r7, r3
 8110fbc:	441e      	add	r6, r3
 8110fbe:	f014 0403 	ands.w	r4, r4, #3
 8110fc2:	d01b      	beq.n	8110ffc <arm_mat_sub_f32+0xc8>
 8110fc4:	eddc 7a00 	vldr	s15, [ip]
 8110fc8:	ed97 7a00 	vldr	s14, [r7]
 8110fcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8110fd0:	3c01      	subs	r4, #1
 8110fd2:	edc6 7a00 	vstr	s15, [r6]
 8110fd6:	d011      	beq.n	8110ffc <arm_mat_sub_f32+0xc8>
 8110fd8:	eddc 7a01 	vldr	s15, [ip, #4]
 8110fdc:	ed97 7a01 	vldr	s14, [r7, #4]
 8110fe0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8110fe4:	2c01      	cmp	r4, #1
 8110fe6:	edc6 7a01 	vstr	s15, [r6, #4]
 8110fea:	d007      	beq.n	8110ffc <arm_mat_sub_f32+0xc8>
 8110fec:	eddc 7a02 	vldr	s15, [ip, #8]
 8110ff0:	ed97 7a02 	vldr	s14, [r7, #8]
 8110ff4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8110ff8:	edc6 7a02 	vstr	s15, [r6, #8]
 8110ffc:	2000      	movs	r0, #0
 8110ffe:	bcf0      	pop	{r4, r5, r6, r7}
 8111000:	4770      	bx	lr
 8111002:	f06f 0002 	mvn.w	r0, #2
 8111006:	e7fa      	b.n	8110ffe <arm_mat_sub_f32+0xca>

08111008 <arm_mat_mult_f32>:
 8111008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811100c:	8845      	ldrh	r5, [r0, #2]
 811100e:	880b      	ldrh	r3, [r1, #0]
 8111010:	8806      	ldrh	r6, [r0, #0]
 8111012:	6847      	ldr	r7, [r0, #4]
 8111014:	6854      	ldr	r4, [r2, #4]
 8111016:	6848      	ldr	r0, [r1, #4]
 8111018:	b08b      	sub	sp, #44	@ 0x2c
 811101a:	42ab      	cmp	r3, r5
 811101c:	9109      	str	r1, [sp, #36]	@ 0x24
 811101e:	9604      	str	r6, [sp, #16]
 8111020:	8849      	ldrh	r1, [r1, #2]
 8111022:	f040 808a 	bne.w	811113a <arm_mat_mult_f32+0x132>
 8111026:	8815      	ldrh	r5, [r2, #0]
 8111028:	42b5      	cmp	r5, r6
 811102a:	f040 8086 	bne.w	811113a <arm_mat_mult_f32+0x132>
 811102e:	8852      	ldrh	r2, [r2, #2]
 8111030:	428a      	cmp	r2, r1
 8111032:	f040 8082 	bne.w	811113a <arm_mat_mult_f32+0x132>
 8111036:	ea4f 0893 	mov.w	r8, r3, lsr #2
 811103a:	1d01      	adds	r1, r0, #4
 811103c:	0116      	lsls	r6, r2, #4
 811103e:	9108      	str	r1, [sp, #32]
 8111040:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8111044:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8111048:	9101      	str	r1, [sp, #4]
 811104a:	fb06 f108 	mul.w	r1, r6, r8
 811104e:	0095      	lsls	r5, r2, #2
 8111050:	9103      	str	r1, [sp, #12]
 8111052:	00d2      	lsls	r2, r2, #3
 8111054:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8111058:	f003 0903 	and.w	r9, r3, #3
 811105c:	009b      	lsls	r3, r3, #2
 811105e:	f107 0b10 	add.w	fp, r7, #16
 8111062:	eb04 0a05 	add.w	sl, r4, r5
 8111066:	9107      	str	r1, [sp, #28]
 8111068:	9202      	str	r2, [sp, #8]
 811106a:	9306      	str	r3, [sp, #24]
 811106c:	f1ab 0310 	sub.w	r3, fp, #16
 8111070:	9305      	str	r3, [sp, #20]
 8111072:	9b07      	ldr	r3, [sp, #28]
 8111074:	f8dd e020 	ldr.w	lr, [sp, #32]
 8111078:	eb03 0c0a 	add.w	ip, r3, sl
 811107c:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8111144 <arm_mat_mult_f32+0x13c>
 8111080:	f1b8 0f00 	cmp.w	r8, #0
 8111084:	d053      	beq.n	811112e <arm_mat_mult_f32+0x126>
 8111086:	9b02      	ldr	r3, [sp, #8]
 8111088:	4644      	mov	r4, r8
 811108a:	18c1      	adds	r1, r0, r3
 811108c:	4602      	mov	r2, r0
 811108e:	465b      	mov	r3, fp
 8111090:	ed92 6a00 	vldr	s12, [r2]
 8111094:	ed13 7a04 	vldr	s14, [r3, #-16]
 8111098:	ed53 4a03 	vldr	s9, [r3, #-12]
 811109c:	ed53 6a02 	vldr	s13, [r3, #-8]
 81110a0:	ed91 5a00 	vldr	s10, [r1]
 81110a4:	ed53 5a01 	vldr	s11, [r3, #-4]
 81110a8:	1957      	adds	r7, r2, r5
 81110aa:	ee27 7a06 	vmul.f32	s14, s14, s12
 81110ae:	ed97 6a00 	vldr	s12, [r7]
 81110b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 81110b6:	ee26 6a24 	vmul.f32	s12, s12, s9
 81110ba:	194f      	adds	r7, r1, r5
 81110bc:	ee36 6a27 	vadd.f32	s12, s12, s15
 81110c0:	ee26 7a85 	vmul.f32	s14, s13, s10
 81110c4:	edd7 7a00 	vldr	s15, [r7]
 81110c8:	ee37 7a06 	vadd.f32	s14, s14, s12
 81110cc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 81110d0:	3c01      	subs	r4, #1
 81110d2:	4432      	add	r2, r6
 81110d4:	4431      	add	r1, r6
 81110d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 81110da:	f103 0310 	add.w	r3, r3, #16
 81110de:	d1d7      	bne.n	8111090 <arm_mat_mult_f32+0x88>
 81110e0:	9b03      	ldr	r3, [sp, #12]
 81110e2:	9a01      	ldr	r2, [sp, #4]
 81110e4:	4418      	add	r0, r3
 81110e6:	f1b9 0f00 	cmp.w	r9, #0
 81110ea:	d00b      	beq.n	8111104 <arm_mat_mult_f32+0xfc>
 81110ec:	464b      	mov	r3, r9
 81110ee:	edd0 6a00 	vldr	s13, [r0]
 81110f2:	ecb2 7a01 	vldmia	r2!, {s14}
 81110f6:	ee27 7a26 	vmul.f32	s14, s14, s13
 81110fa:	3b01      	subs	r3, #1
 81110fc:	4428      	add	r0, r5
 81110fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8111102:	d1f4      	bne.n	81110ee <arm_mat_mult_f32+0xe6>
 8111104:	ecec 7a01 	vstmia	ip!, {s15}
 8111108:	45d4      	cmp	ip, sl
 811110a:	4670      	mov	r0, lr
 811110c:	f10e 0e04 	add.w	lr, lr, #4
 8111110:	d1b4      	bne.n	811107c <arm_mat_mult_f32+0x74>
 8111112:	9a01      	ldr	r2, [sp, #4]
 8111114:	9b06      	ldr	r3, [sp, #24]
 8111116:	4611      	mov	r1, r2
 8111118:	4419      	add	r1, r3
 811111a:	449b      	add	fp, r3
 811111c:	9b04      	ldr	r3, [sp, #16]
 811111e:	9101      	str	r1, [sp, #4]
 8111120:	3b01      	subs	r3, #1
 8111122:	44aa      	add	sl, r5
 8111124:	9304      	str	r3, [sp, #16]
 8111126:	d004      	beq.n	8111132 <arm_mat_mult_f32+0x12a>
 8111128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811112a:	6858      	ldr	r0, [r3, #4]
 811112c:	e79e      	b.n	811106c <arm_mat_mult_f32+0x64>
 811112e:	9a05      	ldr	r2, [sp, #20]
 8111130:	e7d9      	b.n	81110e6 <arm_mat_mult_f32+0xde>
 8111132:	4618      	mov	r0, r3
 8111134:	b00b      	add	sp, #44	@ 0x2c
 8111136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811113a:	f06f 0002 	mvn.w	r0, #2
 811113e:	b00b      	add	sp, #44	@ 0x2c
 8111140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111144:	00000000 	.word	0x00000000

08111148 <arm_mat_inverse_f32>:
 8111148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811114c:	8843      	ldrh	r3, [r0, #2]
 811114e:	8804      	ldrh	r4, [r0, #0]
 8111150:	684e      	ldr	r6, [r1, #4]
 8111152:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8111156:	b087      	sub	sp, #28
 8111158:	429c      	cmp	r4, r3
 811115a:	9301      	str	r3, [sp, #4]
 811115c:	9603      	str	r6, [sp, #12]
 811115e:	f040 80ea 	bne.w	8111336 <arm_mat_inverse_f32+0x1ee>
 8111162:	880a      	ldrh	r2, [r1, #0]
 8111164:	884b      	ldrh	r3, [r1, #2]
 8111166:	4293      	cmp	r3, r2
 8111168:	f040 80e5 	bne.w	8111336 <arm_mat_inverse_f32+0x1ee>
 811116c:	429c      	cmp	r4, r3
 811116e:	f040 80e2 	bne.w	8111336 <arm_mat_inverse_f32+0x1ee>
 8111172:	9005      	str	r0, [sp, #20]
 8111174:	b30c      	cbz	r4, 81111ba <arm_mat_inverse_f32+0x72>
 8111176:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 811117a:	1e67      	subs	r7, r4, #1
 811117c:	f846 bb04 	str.w	fp, [r6], #4
 8111180:	d01b      	beq.n	81111ba <arm_mat_inverse_f32+0x72>
 8111182:	f04f 0801 	mov.w	r8, #1
 8111186:	00ba      	lsls	r2, r7, #2
 8111188:	eb06 0a02 	add.w	sl, r6, r2
 811118c:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8111190:	4630      	mov	r0, r6
 8111192:	2100      	movs	r1, #0
 8111194:	f001 f9c2 	bl	811251c <memset>
 8111198:	eb0a 0605 	add.w	r6, sl, r5
 811119c:	462a      	mov	r2, r5
 811119e:	2100      	movs	r1, #0
 81111a0:	4650      	mov	r0, sl
 81111a2:	f1b8 0f00 	cmp.w	r8, #0
 81111a6:	f000 80cb 	beq.w	8111340 <arm_mat_inverse_f32+0x1f8>
 81111aa:	f001 f9b7 	bl	811251c <memset>
 81111ae:	3f01      	subs	r7, #1
 81111b0:	f108 0801 	add.w	r8, r8, #1
 81111b4:	f846 bb04 	str.w	fp, [r6], #4
 81111b8:	d1e5      	bne.n	8111186 <arm_mat_inverse_f32+0x3e>
 81111ba:	9b01      	ldr	r3, [sp, #4]
 81111bc:	2b00      	cmp	r3, #0
 81111be:	f000 80b5 	beq.w	811132c <arm_mat_inverse_f32+0x1e4>
 81111c2:	009d      	lsls	r5, r3, #2
 81111c4:	eb09 0205 	add.w	r2, r9, r5
 81111c8:	46cc      	mov	ip, r9
 81111ca:	9202      	str	r2, [sp, #8]
 81111cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 81111d0:	1d2a      	adds	r2, r5, #4
 81111d2:	9204      	str	r2, [sp, #16]
 81111d4:	462f      	mov	r7, r5
 81111d6:	469e      	mov	lr, r3
 81111d8:	2600      	movs	r6, #0
 81111da:	9b02      	ldr	r3, [sp, #8]
 81111dc:	eddc 6a00 	vldr	s13, [ip]
 81111e0:	42b4      	cmp	r4, r6
 81111e2:	eba3 0b07 	sub.w	fp, r3, r7
 81111e6:	f000 80a1 	beq.w	811132c <arm_mat_inverse_f32+0x1e4>
 81111ea:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8111350 <arm_mat_inverse_f32+0x208>
 81111ee:	4632      	mov	r2, r6
 81111f0:	4663      	mov	r3, ip
 81111f2:	e00b      	b.n	811120c <arm_mat_inverse_f32+0xc4>
 81111f4:	eef4 7a47 	vcmp.f32	s15, s14
 81111f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81111fc:	f102 0201 	add.w	r2, r2, #1
 8111200:	bfc8      	it	gt
 8111202:	eeb0 7a67 	vmovgt.f32	s14, s15
 8111206:	42a2      	cmp	r2, r4
 8111208:	442b      	add	r3, r5
 811120a:	d014      	beq.n	8111236 <arm_mat_inverse_f32+0xee>
 811120c:	edd3 7a00 	vldr	s15, [r3]
 8111210:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8111214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8111218:	eeb1 6a67 	vneg.f32	s12, s15
 811121c:	dcea      	bgt.n	81111f4 <arm_mat_inverse_f32+0xac>
 811121e:	eeb4 6a47 	vcmp.f32	s12, s14
 8111222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8111226:	f102 0201 	add.w	r2, r2, #1
 811122a:	bfc8      	it	gt
 811122c:	eeb0 7a46 	vmovgt.f32	s14, s12
 8111230:	42a2      	cmp	r2, r4
 8111232:	442b      	add	r3, r5
 8111234:	d1ea      	bne.n	811120c <arm_mat_inverse_f32+0xc4>
 8111236:	eeb5 7a40 	vcmp.f32	s14, #0.0
 811123a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 811123e:	d075      	beq.n	811132c <arm_mat_inverse_f32+0x1e4>
 8111240:	eef5 6a40 	vcmp.f32	s13, #0.0
 8111244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8111248:	d070      	beq.n	811132c <arm_mat_inverse_f32+0x1e4>
 811124a:	4672      	mov	r2, lr
 811124c:	4663      	mov	r3, ip
 811124e:	ed93 7a00 	vldr	s14, [r3]
 8111252:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8111256:	3a01      	subs	r2, #1
 8111258:	ece3 7a01 	vstmia	r3!, {s15}
 811125c:	d1f7      	bne.n	811124e <arm_mat_inverse_f32+0x106>
 811125e:	9901      	ldr	r1, [sp, #4]
 8111260:	464b      	mov	r3, r9
 8111262:	ed93 7a00 	vldr	s14, [r3]
 8111266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 811126a:	3901      	subs	r1, #1
 811126c:	ece3 7a01 	vstmia	r3!, {s15}
 8111270:	d1f7      	bne.n	8111262 <arm_mat_inverse_f32+0x11a>
 8111272:	9803      	ldr	r0, [sp, #12]
 8111274:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8111278:	42b1      	cmp	r1, r6
 811127a:	d039      	beq.n	81112f0 <arm_mat_inverse_f32+0x1a8>
 811127c:	eddb 6a00 	vldr	s13, [fp]
 8111280:	465a      	mov	r2, fp
 8111282:	4673      	mov	r3, lr
 8111284:	46e2      	mov	sl, ip
 8111286:	ecba 7a01 	vldmia	sl!, {s14}
 811128a:	edd2 7a00 	vldr	s15, [r2]
 811128e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8111292:	3b01      	subs	r3, #1
 8111294:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8111298:	ece2 7a01 	vstmia	r2!, {s15}
 811129c:	d1f3      	bne.n	8111286 <arm_mat_inverse_f32+0x13e>
 811129e:	9b01      	ldr	r3, [sp, #4]
 81112a0:	44bb      	add	fp, r7
 81112a2:	4602      	mov	r2, r0
 81112a4:	46ca      	mov	sl, r9
 81112a6:	ecba 7a01 	vldmia	sl!, {s14}
 81112aa:	edd2 7a00 	vldr	s15, [r2]
 81112ae:	ee26 7a87 	vmul.f32	s14, s13, s14
 81112b2:	3b01      	subs	r3, #1
 81112b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 81112b8:	ece2 7a01 	vstmia	r2!, {s15}
 81112bc:	d1f3      	bne.n	81112a6 <arm_mat_inverse_f32+0x15e>
 81112be:	4428      	add	r0, r5
 81112c0:	3101      	adds	r1, #1
 81112c2:	428c      	cmp	r4, r1
 81112c4:	44c3      	add	fp, r8
 81112c6:	d1d7      	bne.n	8111278 <arm_mat_inverse_f32+0x130>
 81112c8:	9b04      	ldr	r3, [sp, #16]
 81112ca:	f1be 0e01 	subs.w	lr, lr, #1
 81112ce:	f106 0601 	add.w	r6, r6, #1
 81112d2:	449c      	add	ip, r3
 81112d4:	f1a7 0704 	sub.w	r7, r7, #4
 81112d8:	44a9      	add	r9, r5
 81112da:	f47f af7e 	bne.w	81111da <arm_mat_inverse_f32+0x92>
 81112de:	eef5 6a40 	vcmp.f32	s13, #0.0
 81112e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81112e6:	d006      	beq.n	81112f6 <arm_mat_inverse_f32+0x1ae>
 81112e8:	2000      	movs	r0, #0
 81112ea:	b007      	add	sp, #28
 81112ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81112f0:	44bb      	add	fp, r7
 81112f2:	4428      	add	r0, r5
 81112f4:	e7e4      	b.n	81112c0 <arm_mat_inverse_f32+0x178>
 81112f6:	9b05      	ldr	r3, [sp, #20]
 81112f8:	9a01      	ldr	r2, [sp, #4]
 81112fa:	685b      	ldr	r3, [r3, #4]
 81112fc:	edd3 7a00 	vldr	s15, [r3]
 8111300:	eef5 7a40 	vcmp.f32	s15, #0.0
 8111304:	fb02 f204 	mul.w	r2, r2, r4
 8111308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 811130c:	4614      	mov	r4, r2
 811130e:	bf08      	it	eq
 8111310:	3304      	addeq	r3, #4
 8111312:	d007      	beq.n	8111324 <arm_mat_inverse_f32+0x1dc>
 8111314:	e7e8      	b.n	81112e8 <arm_mat_inverse_f32+0x1a0>
 8111316:	ecf3 7a01 	vldmia	r3!, {s15}
 811131a:	eef5 7a40 	vcmp.f32	s15, #0.0
 811131e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8111322:	d1e1      	bne.n	81112e8 <arm_mat_inverse_f32+0x1a0>
 8111324:	f10e 0e01 	add.w	lr, lr, #1
 8111328:	4574      	cmp	r4, lr
 811132a:	d1f4      	bne.n	8111316 <arm_mat_inverse_f32+0x1ce>
 811132c:	f06f 0004 	mvn.w	r0, #4
 8111330:	b007      	add	sp, #28
 8111332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111336:	f06f 0002 	mvn.w	r0, #2
 811133a:	b007      	add	sp, #28
 811133c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111340:	4656      	mov	r6, sl
 8111342:	3f01      	subs	r7, #1
 8111344:	f846 bb04 	str.w	fp, [r6], #4
 8111348:	f47f af1b 	bne.w	8111182 <arm_mat_inverse_f32+0x3a>
 811134c:	e735      	b.n	81111ba <arm_mat_inverse_f32+0x72>
 811134e:	bf00      	nop
 8111350:	00000000 	.word	0x00000000

08111354 <arm_mat_init_f32>:
 8111354:	8001      	strh	r1, [r0, #0]
 8111356:	8042      	strh	r2, [r0, #2]
 8111358:	6043      	str	r3, [r0, #4]
 811135a:	4770      	bx	lr

0811135c <arm_mat_add_f32>:
 811135c:	b4f0      	push	{r4, r5, r6, r7}
 811135e:	e9d1 4700 	ldrd	r4, r7, [r1]
 8111362:	6803      	ldr	r3, [r0, #0]
 8111364:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8111368:	6856      	ldr	r6, [r2, #4]
 811136a:	42a3      	cmp	r3, r4
 811136c:	d15d      	bne.n	811142a <arm_mat_add_f32+0xce>
 811136e:	6812      	ldr	r2, [r2, #0]
 8111370:	4293      	cmp	r3, r2
 8111372:	d15a      	bne.n	811142a <arm_mat_add_f32+0xce>
 8111374:	8803      	ldrh	r3, [r0, #0]
 8111376:	8844      	ldrh	r4, [r0, #2]
 8111378:	fb04 f403 	mul.w	r4, r4, r3
 811137c:	08a5      	lsrs	r5, r4, #2
 811137e:	d032      	beq.n	81113e6 <arm_mat_add_f32+0x8a>
 8111380:	f10c 0110 	add.w	r1, ip, #16
 8111384:	f107 0210 	add.w	r2, r7, #16
 8111388:	f106 0310 	add.w	r3, r6, #16
 811138c:	4628      	mov	r0, r5
 811138e:	ed12 7a04 	vldr	s14, [r2, #-16]
 8111392:	ed51 7a04 	vldr	s15, [r1, #-16]
 8111396:	ee77 7a87 	vadd.f32	s15, s15, s14
 811139a:	3801      	subs	r0, #1
 811139c:	ed43 7a04 	vstr	s15, [r3, #-16]
 81113a0:	ed12 7a03 	vldr	s14, [r2, #-12]
 81113a4:	ed51 7a03 	vldr	s15, [r1, #-12]
 81113a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 81113ac:	f101 0110 	add.w	r1, r1, #16
 81113b0:	ed43 7a03 	vstr	s15, [r3, #-12]
 81113b4:	ed12 7a02 	vldr	s14, [r2, #-8]
 81113b8:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 81113bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 81113c0:	f102 0210 	add.w	r2, r2, #16
 81113c4:	ed43 7a02 	vstr	s15, [r3, #-8]
 81113c8:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 81113cc:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 81113d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 81113d4:	f103 0310 	add.w	r3, r3, #16
 81113d8:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 81113dc:	d1d7      	bne.n	811138e <arm_mat_add_f32+0x32>
 81113de:	012b      	lsls	r3, r5, #4
 81113e0:	449c      	add	ip, r3
 81113e2:	441f      	add	r7, r3
 81113e4:	441e      	add	r6, r3
 81113e6:	f014 0403 	ands.w	r4, r4, #3
 81113ea:	d01b      	beq.n	8111424 <arm_mat_add_f32+0xc8>
 81113ec:	edd7 7a00 	vldr	s15, [r7]
 81113f0:	ed9c 7a00 	vldr	s14, [ip]
 81113f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 81113f8:	3c01      	subs	r4, #1
 81113fa:	edc6 7a00 	vstr	s15, [r6]
 81113fe:	d011      	beq.n	8111424 <arm_mat_add_f32+0xc8>
 8111400:	eddc 7a01 	vldr	s15, [ip, #4]
 8111404:	ed97 7a01 	vldr	s14, [r7, #4]
 8111408:	ee77 7a87 	vadd.f32	s15, s15, s14
 811140c:	2c01      	cmp	r4, #1
 811140e:	edc6 7a01 	vstr	s15, [r6, #4]
 8111412:	d007      	beq.n	8111424 <arm_mat_add_f32+0xc8>
 8111414:	eddc 7a02 	vldr	s15, [ip, #8]
 8111418:	ed97 7a02 	vldr	s14, [r7, #8]
 811141c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8111420:	edc6 7a02 	vstr	s15, [r6, #8]
 8111424:	2000      	movs	r0, #0
 8111426:	bcf0      	pop	{r4, r5, r6, r7}
 8111428:	4770      	bx	lr
 811142a:	f06f 0002 	mvn.w	r0, #2
 811142e:	e7fa      	b.n	8111426 <arm_mat_add_f32+0xca>

08111430 <arm_fir_init_f32>:
 8111430:	b538      	push	{r3, r4, r5, lr}
 8111432:	9c04      	ldr	r4, [sp, #16]
 8111434:	6082      	str	r2, [r0, #8]
 8111436:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 811143a:	3c01      	subs	r4, #1
 811143c:	440c      	add	r4, r1
 811143e:	8001      	strh	r1, [r0, #0]
 8111440:	4605      	mov	r5, r0
 8111442:	00a2      	lsls	r2, r4, #2
 8111444:	4618      	mov	r0, r3
 8111446:	2100      	movs	r1, #0
 8111448:	f001 f868 	bl	811251c <memset>
 811144c:	6068      	str	r0, [r5, #4]
 811144e:	bd38      	pop	{r3, r4, r5, pc}

08111450 <srand>:
 8111450:	b538      	push	{r3, r4, r5, lr}
 8111452:	4b10      	ldr	r3, [pc, #64]	@ (8111494 <srand+0x44>)
 8111454:	681d      	ldr	r5, [r3, #0]
 8111456:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8111458:	4604      	mov	r4, r0
 811145a:	b9b3      	cbnz	r3, 811148a <srand+0x3a>
 811145c:	2018      	movs	r0, #24
 811145e:	f001 ffa5 	bl	81133ac <malloc>
 8111462:	4602      	mov	r2, r0
 8111464:	6328      	str	r0, [r5, #48]	@ 0x30
 8111466:	b920      	cbnz	r0, 8111472 <srand+0x22>
 8111468:	4b0b      	ldr	r3, [pc, #44]	@ (8111498 <srand+0x48>)
 811146a:	480c      	ldr	r0, [pc, #48]	@ (811149c <srand+0x4c>)
 811146c:	2146      	movs	r1, #70	@ 0x46
 811146e:	f001 f8e9 	bl	8112644 <__assert_func>
 8111472:	490b      	ldr	r1, [pc, #44]	@ (81114a0 <srand+0x50>)
 8111474:	4b0b      	ldr	r3, [pc, #44]	@ (81114a4 <srand+0x54>)
 8111476:	e9c0 1300 	strd	r1, r3, [r0]
 811147a:	4b0b      	ldr	r3, [pc, #44]	@ (81114a8 <srand+0x58>)
 811147c:	6083      	str	r3, [r0, #8]
 811147e:	230b      	movs	r3, #11
 8111480:	8183      	strh	r3, [r0, #12]
 8111482:	2100      	movs	r1, #0
 8111484:	2001      	movs	r0, #1
 8111486:	e9c2 0104 	strd	r0, r1, [r2, #16]
 811148a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 811148c:	2200      	movs	r2, #0
 811148e:	611c      	str	r4, [r3, #16]
 8111490:	615a      	str	r2, [r3, #20]
 8111492:	bd38      	pop	{r3, r4, r5, pc}
 8111494:	100000b0 	.word	0x100000b0
 8111498:	08116d08 	.word	0x08116d08
 811149c:	08116d1f 	.word	0x08116d1f
 81114a0:	abcd330e 	.word	0xabcd330e
 81114a4:	e66d1234 	.word	0xe66d1234
 81114a8:	0005deec 	.word	0x0005deec

081114ac <__cvt>:
 81114ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81114b0:	ec57 6b10 	vmov	r6, r7, d0
 81114b4:	2f00      	cmp	r7, #0
 81114b6:	460c      	mov	r4, r1
 81114b8:	4619      	mov	r1, r3
 81114ba:	463b      	mov	r3, r7
 81114bc:	bfbb      	ittet	lt
 81114be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 81114c2:	461f      	movlt	r7, r3
 81114c4:	2300      	movge	r3, #0
 81114c6:	232d      	movlt	r3, #45	@ 0x2d
 81114c8:	700b      	strb	r3, [r1, #0]
 81114ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 81114cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 81114d0:	4691      	mov	r9, r2
 81114d2:	f023 0820 	bic.w	r8, r3, #32
 81114d6:	bfbc      	itt	lt
 81114d8:	4632      	movlt	r2, r6
 81114da:	4616      	movlt	r6, r2
 81114dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 81114e0:	d005      	beq.n	81114ee <__cvt+0x42>
 81114e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 81114e6:	d100      	bne.n	81114ea <__cvt+0x3e>
 81114e8:	3401      	adds	r4, #1
 81114ea:	2102      	movs	r1, #2
 81114ec:	e000      	b.n	81114f0 <__cvt+0x44>
 81114ee:	2103      	movs	r1, #3
 81114f0:	ab03      	add	r3, sp, #12
 81114f2:	9301      	str	r3, [sp, #4]
 81114f4:	ab02      	add	r3, sp, #8
 81114f6:	9300      	str	r3, [sp, #0]
 81114f8:	ec47 6b10 	vmov	d0, r6, r7
 81114fc:	4653      	mov	r3, sl
 81114fe:	4622      	mov	r2, r4
 8111500:	f001 f946 	bl	8112790 <_dtoa_r>
 8111504:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8111508:	4605      	mov	r5, r0
 811150a:	d119      	bne.n	8111540 <__cvt+0x94>
 811150c:	f019 0f01 	tst.w	r9, #1
 8111510:	d00e      	beq.n	8111530 <__cvt+0x84>
 8111512:	eb00 0904 	add.w	r9, r0, r4
 8111516:	2200      	movs	r2, #0
 8111518:	2300      	movs	r3, #0
 811151a:	4630      	mov	r0, r6
 811151c:	4639      	mov	r1, r7
 811151e:	f7ef fb5b 	bl	8100bd8 <__aeabi_dcmpeq>
 8111522:	b108      	cbz	r0, 8111528 <__cvt+0x7c>
 8111524:	f8cd 900c 	str.w	r9, [sp, #12]
 8111528:	2230      	movs	r2, #48	@ 0x30
 811152a:	9b03      	ldr	r3, [sp, #12]
 811152c:	454b      	cmp	r3, r9
 811152e:	d31e      	bcc.n	811156e <__cvt+0xc2>
 8111530:	9b03      	ldr	r3, [sp, #12]
 8111532:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8111534:	1b5b      	subs	r3, r3, r5
 8111536:	4628      	mov	r0, r5
 8111538:	6013      	str	r3, [r2, #0]
 811153a:	b004      	add	sp, #16
 811153c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8111540:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8111544:	eb00 0904 	add.w	r9, r0, r4
 8111548:	d1e5      	bne.n	8111516 <__cvt+0x6a>
 811154a:	7803      	ldrb	r3, [r0, #0]
 811154c:	2b30      	cmp	r3, #48	@ 0x30
 811154e:	d10a      	bne.n	8111566 <__cvt+0xba>
 8111550:	2200      	movs	r2, #0
 8111552:	2300      	movs	r3, #0
 8111554:	4630      	mov	r0, r6
 8111556:	4639      	mov	r1, r7
 8111558:	f7ef fb3e 	bl	8100bd8 <__aeabi_dcmpeq>
 811155c:	b918      	cbnz	r0, 8111566 <__cvt+0xba>
 811155e:	f1c4 0401 	rsb	r4, r4, #1
 8111562:	f8ca 4000 	str.w	r4, [sl]
 8111566:	f8da 3000 	ldr.w	r3, [sl]
 811156a:	4499      	add	r9, r3
 811156c:	e7d3      	b.n	8111516 <__cvt+0x6a>
 811156e:	1c59      	adds	r1, r3, #1
 8111570:	9103      	str	r1, [sp, #12]
 8111572:	701a      	strb	r2, [r3, #0]
 8111574:	e7d9      	b.n	811152a <__cvt+0x7e>

08111576 <__exponent>:
 8111576:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8111578:	2900      	cmp	r1, #0
 811157a:	bfba      	itte	lt
 811157c:	4249      	neglt	r1, r1
 811157e:	232d      	movlt	r3, #45	@ 0x2d
 8111580:	232b      	movge	r3, #43	@ 0x2b
 8111582:	2909      	cmp	r1, #9
 8111584:	7002      	strb	r2, [r0, #0]
 8111586:	7043      	strb	r3, [r0, #1]
 8111588:	dd29      	ble.n	81115de <__exponent+0x68>
 811158a:	f10d 0307 	add.w	r3, sp, #7
 811158e:	461d      	mov	r5, r3
 8111590:	270a      	movs	r7, #10
 8111592:	461a      	mov	r2, r3
 8111594:	fbb1 f6f7 	udiv	r6, r1, r7
 8111598:	fb07 1416 	mls	r4, r7, r6, r1
 811159c:	3430      	adds	r4, #48	@ 0x30
 811159e:	f802 4c01 	strb.w	r4, [r2, #-1]
 81115a2:	460c      	mov	r4, r1
 81115a4:	2c63      	cmp	r4, #99	@ 0x63
 81115a6:	f103 33ff 	add.w	r3, r3, #4294967295
 81115aa:	4631      	mov	r1, r6
 81115ac:	dcf1      	bgt.n	8111592 <__exponent+0x1c>
 81115ae:	3130      	adds	r1, #48	@ 0x30
 81115b0:	1e94      	subs	r4, r2, #2
 81115b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 81115b6:	1c41      	adds	r1, r0, #1
 81115b8:	4623      	mov	r3, r4
 81115ba:	42ab      	cmp	r3, r5
 81115bc:	d30a      	bcc.n	81115d4 <__exponent+0x5e>
 81115be:	f10d 0309 	add.w	r3, sp, #9
 81115c2:	1a9b      	subs	r3, r3, r2
 81115c4:	42ac      	cmp	r4, r5
 81115c6:	bf88      	it	hi
 81115c8:	2300      	movhi	r3, #0
 81115ca:	3302      	adds	r3, #2
 81115cc:	4403      	add	r3, r0
 81115ce:	1a18      	subs	r0, r3, r0
 81115d0:	b003      	add	sp, #12
 81115d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81115d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 81115d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 81115dc:	e7ed      	b.n	81115ba <__exponent+0x44>
 81115de:	2330      	movs	r3, #48	@ 0x30
 81115e0:	3130      	adds	r1, #48	@ 0x30
 81115e2:	7083      	strb	r3, [r0, #2]
 81115e4:	70c1      	strb	r1, [r0, #3]
 81115e6:	1d03      	adds	r3, r0, #4
 81115e8:	e7f1      	b.n	81115ce <__exponent+0x58>
	...

081115ec <_printf_float>:
 81115ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81115f0:	b08d      	sub	sp, #52	@ 0x34
 81115f2:	460c      	mov	r4, r1
 81115f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 81115f8:	4616      	mov	r6, r2
 81115fa:	461f      	mov	r7, r3
 81115fc:	4605      	mov	r5, r0
 81115fe:	f000 ff95 	bl	811252c <_localeconv_r>
 8111602:	6803      	ldr	r3, [r0, #0]
 8111604:	9304      	str	r3, [sp, #16]
 8111606:	4618      	mov	r0, r3
 8111608:	f7ee feba 	bl	8100380 <strlen>
 811160c:	2300      	movs	r3, #0
 811160e:	930a      	str	r3, [sp, #40]	@ 0x28
 8111610:	f8d8 3000 	ldr.w	r3, [r8]
 8111614:	9005      	str	r0, [sp, #20]
 8111616:	3307      	adds	r3, #7
 8111618:	f023 0307 	bic.w	r3, r3, #7
 811161c:	f103 0208 	add.w	r2, r3, #8
 8111620:	f894 a018 	ldrb.w	sl, [r4, #24]
 8111624:	f8d4 b000 	ldr.w	fp, [r4]
 8111628:	f8c8 2000 	str.w	r2, [r8]
 811162c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8111630:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8111634:	9307      	str	r3, [sp, #28]
 8111636:	f8cd 8018 	str.w	r8, [sp, #24]
 811163a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 811163e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8111642:	4b9c      	ldr	r3, [pc, #624]	@ (81118b4 <_printf_float+0x2c8>)
 8111644:	f04f 32ff 	mov.w	r2, #4294967295
 8111648:	f7ef faf8 	bl	8100c3c <__aeabi_dcmpun>
 811164c:	bb70      	cbnz	r0, 81116ac <_printf_float+0xc0>
 811164e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8111652:	4b98      	ldr	r3, [pc, #608]	@ (81118b4 <_printf_float+0x2c8>)
 8111654:	f04f 32ff 	mov.w	r2, #4294967295
 8111658:	f7ef fad2 	bl	8100c00 <__aeabi_dcmple>
 811165c:	bb30      	cbnz	r0, 81116ac <_printf_float+0xc0>
 811165e:	2200      	movs	r2, #0
 8111660:	2300      	movs	r3, #0
 8111662:	4640      	mov	r0, r8
 8111664:	4649      	mov	r1, r9
 8111666:	f7ef fac1 	bl	8100bec <__aeabi_dcmplt>
 811166a:	b110      	cbz	r0, 8111672 <_printf_float+0x86>
 811166c:	232d      	movs	r3, #45	@ 0x2d
 811166e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8111672:	4a91      	ldr	r2, [pc, #580]	@ (81118b8 <_printf_float+0x2cc>)
 8111674:	4b91      	ldr	r3, [pc, #580]	@ (81118bc <_printf_float+0x2d0>)
 8111676:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 811167a:	bf94      	ite	ls
 811167c:	4690      	movls	r8, r2
 811167e:	4698      	movhi	r8, r3
 8111680:	2303      	movs	r3, #3
 8111682:	6123      	str	r3, [r4, #16]
 8111684:	f02b 0304 	bic.w	r3, fp, #4
 8111688:	6023      	str	r3, [r4, #0]
 811168a:	f04f 0900 	mov.w	r9, #0
 811168e:	9700      	str	r7, [sp, #0]
 8111690:	4633      	mov	r3, r6
 8111692:	aa0b      	add	r2, sp, #44	@ 0x2c
 8111694:	4621      	mov	r1, r4
 8111696:	4628      	mov	r0, r5
 8111698:	f000 f9d2 	bl	8111a40 <_printf_common>
 811169c:	3001      	adds	r0, #1
 811169e:	f040 808d 	bne.w	81117bc <_printf_float+0x1d0>
 81116a2:	f04f 30ff 	mov.w	r0, #4294967295
 81116a6:	b00d      	add	sp, #52	@ 0x34
 81116a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81116ac:	4642      	mov	r2, r8
 81116ae:	464b      	mov	r3, r9
 81116b0:	4640      	mov	r0, r8
 81116b2:	4649      	mov	r1, r9
 81116b4:	f7ef fac2 	bl	8100c3c <__aeabi_dcmpun>
 81116b8:	b140      	cbz	r0, 81116cc <_printf_float+0xe0>
 81116ba:	464b      	mov	r3, r9
 81116bc:	2b00      	cmp	r3, #0
 81116be:	bfbc      	itt	lt
 81116c0:	232d      	movlt	r3, #45	@ 0x2d
 81116c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 81116c6:	4a7e      	ldr	r2, [pc, #504]	@ (81118c0 <_printf_float+0x2d4>)
 81116c8:	4b7e      	ldr	r3, [pc, #504]	@ (81118c4 <_printf_float+0x2d8>)
 81116ca:	e7d4      	b.n	8111676 <_printf_float+0x8a>
 81116cc:	6863      	ldr	r3, [r4, #4]
 81116ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 81116d2:	9206      	str	r2, [sp, #24]
 81116d4:	1c5a      	adds	r2, r3, #1
 81116d6:	d13b      	bne.n	8111750 <_printf_float+0x164>
 81116d8:	2306      	movs	r3, #6
 81116da:	6063      	str	r3, [r4, #4]
 81116dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 81116e0:	2300      	movs	r3, #0
 81116e2:	6022      	str	r2, [r4, #0]
 81116e4:	9303      	str	r3, [sp, #12]
 81116e6:	ab0a      	add	r3, sp, #40	@ 0x28
 81116e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 81116ec:	ab09      	add	r3, sp, #36	@ 0x24
 81116ee:	9300      	str	r3, [sp, #0]
 81116f0:	6861      	ldr	r1, [r4, #4]
 81116f2:	ec49 8b10 	vmov	d0, r8, r9
 81116f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 81116fa:	4628      	mov	r0, r5
 81116fc:	f7ff fed6 	bl	81114ac <__cvt>
 8111700:	9b06      	ldr	r3, [sp, #24]
 8111702:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8111704:	2b47      	cmp	r3, #71	@ 0x47
 8111706:	4680      	mov	r8, r0
 8111708:	d129      	bne.n	811175e <_printf_float+0x172>
 811170a:	1cc8      	adds	r0, r1, #3
 811170c:	db02      	blt.n	8111714 <_printf_float+0x128>
 811170e:	6863      	ldr	r3, [r4, #4]
 8111710:	4299      	cmp	r1, r3
 8111712:	dd41      	ble.n	8111798 <_printf_float+0x1ac>
 8111714:	f1aa 0a02 	sub.w	sl, sl, #2
 8111718:	fa5f fa8a 	uxtb.w	sl, sl
 811171c:	3901      	subs	r1, #1
 811171e:	4652      	mov	r2, sl
 8111720:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8111724:	9109      	str	r1, [sp, #36]	@ 0x24
 8111726:	f7ff ff26 	bl	8111576 <__exponent>
 811172a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 811172c:	1813      	adds	r3, r2, r0
 811172e:	2a01      	cmp	r2, #1
 8111730:	4681      	mov	r9, r0
 8111732:	6123      	str	r3, [r4, #16]
 8111734:	dc02      	bgt.n	811173c <_printf_float+0x150>
 8111736:	6822      	ldr	r2, [r4, #0]
 8111738:	07d2      	lsls	r2, r2, #31
 811173a:	d501      	bpl.n	8111740 <_printf_float+0x154>
 811173c:	3301      	adds	r3, #1
 811173e:	6123      	str	r3, [r4, #16]
 8111740:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8111744:	2b00      	cmp	r3, #0
 8111746:	d0a2      	beq.n	811168e <_printf_float+0xa2>
 8111748:	232d      	movs	r3, #45	@ 0x2d
 811174a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 811174e:	e79e      	b.n	811168e <_printf_float+0xa2>
 8111750:	9a06      	ldr	r2, [sp, #24]
 8111752:	2a47      	cmp	r2, #71	@ 0x47
 8111754:	d1c2      	bne.n	81116dc <_printf_float+0xf0>
 8111756:	2b00      	cmp	r3, #0
 8111758:	d1c0      	bne.n	81116dc <_printf_float+0xf0>
 811175a:	2301      	movs	r3, #1
 811175c:	e7bd      	b.n	81116da <_printf_float+0xee>
 811175e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8111762:	d9db      	bls.n	811171c <_printf_float+0x130>
 8111764:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8111768:	d118      	bne.n	811179c <_printf_float+0x1b0>
 811176a:	2900      	cmp	r1, #0
 811176c:	6863      	ldr	r3, [r4, #4]
 811176e:	dd0b      	ble.n	8111788 <_printf_float+0x19c>
 8111770:	6121      	str	r1, [r4, #16]
 8111772:	b913      	cbnz	r3, 811177a <_printf_float+0x18e>
 8111774:	6822      	ldr	r2, [r4, #0]
 8111776:	07d0      	lsls	r0, r2, #31
 8111778:	d502      	bpl.n	8111780 <_printf_float+0x194>
 811177a:	3301      	adds	r3, #1
 811177c:	440b      	add	r3, r1
 811177e:	6123      	str	r3, [r4, #16]
 8111780:	65a1      	str	r1, [r4, #88]	@ 0x58
 8111782:	f04f 0900 	mov.w	r9, #0
 8111786:	e7db      	b.n	8111740 <_printf_float+0x154>
 8111788:	b913      	cbnz	r3, 8111790 <_printf_float+0x1a4>
 811178a:	6822      	ldr	r2, [r4, #0]
 811178c:	07d2      	lsls	r2, r2, #31
 811178e:	d501      	bpl.n	8111794 <_printf_float+0x1a8>
 8111790:	3302      	adds	r3, #2
 8111792:	e7f4      	b.n	811177e <_printf_float+0x192>
 8111794:	2301      	movs	r3, #1
 8111796:	e7f2      	b.n	811177e <_printf_float+0x192>
 8111798:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 811179c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 811179e:	4299      	cmp	r1, r3
 81117a0:	db05      	blt.n	81117ae <_printf_float+0x1c2>
 81117a2:	6823      	ldr	r3, [r4, #0]
 81117a4:	6121      	str	r1, [r4, #16]
 81117a6:	07d8      	lsls	r0, r3, #31
 81117a8:	d5ea      	bpl.n	8111780 <_printf_float+0x194>
 81117aa:	1c4b      	adds	r3, r1, #1
 81117ac:	e7e7      	b.n	811177e <_printf_float+0x192>
 81117ae:	2900      	cmp	r1, #0
 81117b0:	bfd4      	ite	le
 81117b2:	f1c1 0202 	rsble	r2, r1, #2
 81117b6:	2201      	movgt	r2, #1
 81117b8:	4413      	add	r3, r2
 81117ba:	e7e0      	b.n	811177e <_printf_float+0x192>
 81117bc:	6823      	ldr	r3, [r4, #0]
 81117be:	055a      	lsls	r2, r3, #21
 81117c0:	d407      	bmi.n	81117d2 <_printf_float+0x1e6>
 81117c2:	6923      	ldr	r3, [r4, #16]
 81117c4:	4642      	mov	r2, r8
 81117c6:	4631      	mov	r1, r6
 81117c8:	4628      	mov	r0, r5
 81117ca:	47b8      	blx	r7
 81117cc:	3001      	adds	r0, #1
 81117ce:	d12b      	bne.n	8111828 <_printf_float+0x23c>
 81117d0:	e767      	b.n	81116a2 <_printf_float+0xb6>
 81117d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 81117d6:	f240 80dd 	bls.w	8111994 <_printf_float+0x3a8>
 81117da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 81117de:	2200      	movs	r2, #0
 81117e0:	2300      	movs	r3, #0
 81117e2:	f7ef f9f9 	bl	8100bd8 <__aeabi_dcmpeq>
 81117e6:	2800      	cmp	r0, #0
 81117e8:	d033      	beq.n	8111852 <_printf_float+0x266>
 81117ea:	4a37      	ldr	r2, [pc, #220]	@ (81118c8 <_printf_float+0x2dc>)
 81117ec:	2301      	movs	r3, #1
 81117ee:	4631      	mov	r1, r6
 81117f0:	4628      	mov	r0, r5
 81117f2:	47b8      	blx	r7
 81117f4:	3001      	adds	r0, #1
 81117f6:	f43f af54 	beq.w	81116a2 <_printf_float+0xb6>
 81117fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 81117fe:	4543      	cmp	r3, r8
 8111800:	db02      	blt.n	8111808 <_printf_float+0x21c>
 8111802:	6823      	ldr	r3, [r4, #0]
 8111804:	07d8      	lsls	r0, r3, #31
 8111806:	d50f      	bpl.n	8111828 <_printf_float+0x23c>
 8111808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 811180c:	4631      	mov	r1, r6
 811180e:	4628      	mov	r0, r5
 8111810:	47b8      	blx	r7
 8111812:	3001      	adds	r0, #1
 8111814:	f43f af45 	beq.w	81116a2 <_printf_float+0xb6>
 8111818:	f04f 0900 	mov.w	r9, #0
 811181c:	f108 38ff 	add.w	r8, r8, #4294967295
 8111820:	f104 0a1a 	add.w	sl, r4, #26
 8111824:	45c8      	cmp	r8, r9
 8111826:	dc09      	bgt.n	811183c <_printf_float+0x250>
 8111828:	6823      	ldr	r3, [r4, #0]
 811182a:	079b      	lsls	r3, r3, #30
 811182c:	f100 8103 	bmi.w	8111a36 <_printf_float+0x44a>
 8111830:	68e0      	ldr	r0, [r4, #12]
 8111832:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8111834:	4298      	cmp	r0, r3
 8111836:	bfb8      	it	lt
 8111838:	4618      	movlt	r0, r3
 811183a:	e734      	b.n	81116a6 <_printf_float+0xba>
 811183c:	2301      	movs	r3, #1
 811183e:	4652      	mov	r2, sl
 8111840:	4631      	mov	r1, r6
 8111842:	4628      	mov	r0, r5
 8111844:	47b8      	blx	r7
 8111846:	3001      	adds	r0, #1
 8111848:	f43f af2b 	beq.w	81116a2 <_printf_float+0xb6>
 811184c:	f109 0901 	add.w	r9, r9, #1
 8111850:	e7e8      	b.n	8111824 <_printf_float+0x238>
 8111852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8111854:	2b00      	cmp	r3, #0
 8111856:	dc39      	bgt.n	81118cc <_printf_float+0x2e0>
 8111858:	4a1b      	ldr	r2, [pc, #108]	@ (81118c8 <_printf_float+0x2dc>)
 811185a:	2301      	movs	r3, #1
 811185c:	4631      	mov	r1, r6
 811185e:	4628      	mov	r0, r5
 8111860:	47b8      	blx	r7
 8111862:	3001      	adds	r0, #1
 8111864:	f43f af1d 	beq.w	81116a2 <_printf_float+0xb6>
 8111868:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 811186c:	ea59 0303 	orrs.w	r3, r9, r3
 8111870:	d102      	bne.n	8111878 <_printf_float+0x28c>
 8111872:	6823      	ldr	r3, [r4, #0]
 8111874:	07d9      	lsls	r1, r3, #31
 8111876:	d5d7      	bpl.n	8111828 <_printf_float+0x23c>
 8111878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 811187c:	4631      	mov	r1, r6
 811187e:	4628      	mov	r0, r5
 8111880:	47b8      	blx	r7
 8111882:	3001      	adds	r0, #1
 8111884:	f43f af0d 	beq.w	81116a2 <_printf_float+0xb6>
 8111888:	f04f 0a00 	mov.w	sl, #0
 811188c:	f104 0b1a 	add.w	fp, r4, #26
 8111890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8111892:	425b      	negs	r3, r3
 8111894:	4553      	cmp	r3, sl
 8111896:	dc01      	bgt.n	811189c <_printf_float+0x2b0>
 8111898:	464b      	mov	r3, r9
 811189a:	e793      	b.n	81117c4 <_printf_float+0x1d8>
 811189c:	2301      	movs	r3, #1
 811189e:	465a      	mov	r2, fp
 81118a0:	4631      	mov	r1, r6
 81118a2:	4628      	mov	r0, r5
 81118a4:	47b8      	blx	r7
 81118a6:	3001      	adds	r0, #1
 81118a8:	f43f aefb 	beq.w	81116a2 <_printf_float+0xb6>
 81118ac:	f10a 0a01 	add.w	sl, sl, #1
 81118b0:	e7ee      	b.n	8111890 <_printf_float+0x2a4>
 81118b2:	bf00      	nop
 81118b4:	7fefffff 	.word	0x7fefffff
 81118b8:	08116d77 	.word	0x08116d77
 81118bc:	08116d7b 	.word	0x08116d7b
 81118c0:	08116d7f 	.word	0x08116d7f
 81118c4:	08116d83 	.word	0x08116d83
 81118c8:	08116d87 	.word	0x08116d87
 81118cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 81118ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 81118d2:	4553      	cmp	r3, sl
 81118d4:	bfa8      	it	ge
 81118d6:	4653      	movge	r3, sl
 81118d8:	2b00      	cmp	r3, #0
 81118da:	4699      	mov	r9, r3
 81118dc:	dc36      	bgt.n	811194c <_printf_float+0x360>
 81118de:	f04f 0b00 	mov.w	fp, #0
 81118e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81118e6:	f104 021a 	add.w	r2, r4, #26
 81118ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 81118ec:	9306      	str	r3, [sp, #24]
 81118ee:	eba3 0309 	sub.w	r3, r3, r9
 81118f2:	455b      	cmp	r3, fp
 81118f4:	dc31      	bgt.n	811195a <_printf_float+0x36e>
 81118f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81118f8:	459a      	cmp	sl, r3
 81118fa:	dc3a      	bgt.n	8111972 <_printf_float+0x386>
 81118fc:	6823      	ldr	r3, [r4, #0]
 81118fe:	07da      	lsls	r2, r3, #31
 8111900:	d437      	bmi.n	8111972 <_printf_float+0x386>
 8111902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8111904:	ebaa 0903 	sub.w	r9, sl, r3
 8111908:	9b06      	ldr	r3, [sp, #24]
 811190a:	ebaa 0303 	sub.w	r3, sl, r3
 811190e:	4599      	cmp	r9, r3
 8111910:	bfa8      	it	ge
 8111912:	4699      	movge	r9, r3
 8111914:	f1b9 0f00 	cmp.w	r9, #0
 8111918:	dc33      	bgt.n	8111982 <_printf_float+0x396>
 811191a:	f04f 0800 	mov.w	r8, #0
 811191e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8111922:	f104 0b1a 	add.w	fp, r4, #26
 8111926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8111928:	ebaa 0303 	sub.w	r3, sl, r3
 811192c:	eba3 0309 	sub.w	r3, r3, r9
 8111930:	4543      	cmp	r3, r8
 8111932:	f77f af79 	ble.w	8111828 <_printf_float+0x23c>
 8111936:	2301      	movs	r3, #1
 8111938:	465a      	mov	r2, fp
 811193a:	4631      	mov	r1, r6
 811193c:	4628      	mov	r0, r5
 811193e:	47b8      	blx	r7
 8111940:	3001      	adds	r0, #1
 8111942:	f43f aeae 	beq.w	81116a2 <_printf_float+0xb6>
 8111946:	f108 0801 	add.w	r8, r8, #1
 811194a:	e7ec      	b.n	8111926 <_printf_float+0x33a>
 811194c:	4642      	mov	r2, r8
 811194e:	4631      	mov	r1, r6
 8111950:	4628      	mov	r0, r5
 8111952:	47b8      	blx	r7
 8111954:	3001      	adds	r0, #1
 8111956:	d1c2      	bne.n	81118de <_printf_float+0x2f2>
 8111958:	e6a3      	b.n	81116a2 <_printf_float+0xb6>
 811195a:	2301      	movs	r3, #1
 811195c:	4631      	mov	r1, r6
 811195e:	4628      	mov	r0, r5
 8111960:	9206      	str	r2, [sp, #24]
 8111962:	47b8      	blx	r7
 8111964:	3001      	adds	r0, #1
 8111966:	f43f ae9c 	beq.w	81116a2 <_printf_float+0xb6>
 811196a:	9a06      	ldr	r2, [sp, #24]
 811196c:	f10b 0b01 	add.w	fp, fp, #1
 8111970:	e7bb      	b.n	81118ea <_printf_float+0x2fe>
 8111972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8111976:	4631      	mov	r1, r6
 8111978:	4628      	mov	r0, r5
 811197a:	47b8      	blx	r7
 811197c:	3001      	adds	r0, #1
 811197e:	d1c0      	bne.n	8111902 <_printf_float+0x316>
 8111980:	e68f      	b.n	81116a2 <_printf_float+0xb6>
 8111982:	9a06      	ldr	r2, [sp, #24]
 8111984:	464b      	mov	r3, r9
 8111986:	4442      	add	r2, r8
 8111988:	4631      	mov	r1, r6
 811198a:	4628      	mov	r0, r5
 811198c:	47b8      	blx	r7
 811198e:	3001      	adds	r0, #1
 8111990:	d1c3      	bne.n	811191a <_printf_float+0x32e>
 8111992:	e686      	b.n	81116a2 <_printf_float+0xb6>
 8111994:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8111998:	f1ba 0f01 	cmp.w	sl, #1
 811199c:	dc01      	bgt.n	81119a2 <_printf_float+0x3b6>
 811199e:	07db      	lsls	r3, r3, #31
 81119a0:	d536      	bpl.n	8111a10 <_printf_float+0x424>
 81119a2:	2301      	movs	r3, #1
 81119a4:	4642      	mov	r2, r8
 81119a6:	4631      	mov	r1, r6
 81119a8:	4628      	mov	r0, r5
 81119aa:	47b8      	blx	r7
 81119ac:	3001      	adds	r0, #1
 81119ae:	f43f ae78 	beq.w	81116a2 <_printf_float+0xb6>
 81119b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81119b6:	4631      	mov	r1, r6
 81119b8:	4628      	mov	r0, r5
 81119ba:	47b8      	blx	r7
 81119bc:	3001      	adds	r0, #1
 81119be:	f43f ae70 	beq.w	81116a2 <_printf_float+0xb6>
 81119c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 81119c6:	2200      	movs	r2, #0
 81119c8:	2300      	movs	r3, #0
 81119ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 81119ce:	f7ef f903 	bl	8100bd8 <__aeabi_dcmpeq>
 81119d2:	b9c0      	cbnz	r0, 8111a06 <_printf_float+0x41a>
 81119d4:	4653      	mov	r3, sl
 81119d6:	f108 0201 	add.w	r2, r8, #1
 81119da:	4631      	mov	r1, r6
 81119dc:	4628      	mov	r0, r5
 81119de:	47b8      	blx	r7
 81119e0:	3001      	adds	r0, #1
 81119e2:	d10c      	bne.n	81119fe <_printf_float+0x412>
 81119e4:	e65d      	b.n	81116a2 <_printf_float+0xb6>
 81119e6:	2301      	movs	r3, #1
 81119e8:	465a      	mov	r2, fp
 81119ea:	4631      	mov	r1, r6
 81119ec:	4628      	mov	r0, r5
 81119ee:	47b8      	blx	r7
 81119f0:	3001      	adds	r0, #1
 81119f2:	f43f ae56 	beq.w	81116a2 <_printf_float+0xb6>
 81119f6:	f108 0801 	add.w	r8, r8, #1
 81119fa:	45d0      	cmp	r8, sl
 81119fc:	dbf3      	blt.n	81119e6 <_printf_float+0x3fa>
 81119fe:	464b      	mov	r3, r9
 8111a00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8111a04:	e6df      	b.n	81117c6 <_printf_float+0x1da>
 8111a06:	f04f 0800 	mov.w	r8, #0
 8111a0a:	f104 0b1a 	add.w	fp, r4, #26
 8111a0e:	e7f4      	b.n	81119fa <_printf_float+0x40e>
 8111a10:	2301      	movs	r3, #1
 8111a12:	4642      	mov	r2, r8
 8111a14:	e7e1      	b.n	81119da <_printf_float+0x3ee>
 8111a16:	2301      	movs	r3, #1
 8111a18:	464a      	mov	r2, r9
 8111a1a:	4631      	mov	r1, r6
 8111a1c:	4628      	mov	r0, r5
 8111a1e:	47b8      	blx	r7
 8111a20:	3001      	adds	r0, #1
 8111a22:	f43f ae3e 	beq.w	81116a2 <_printf_float+0xb6>
 8111a26:	f108 0801 	add.w	r8, r8, #1
 8111a2a:	68e3      	ldr	r3, [r4, #12]
 8111a2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8111a2e:	1a5b      	subs	r3, r3, r1
 8111a30:	4543      	cmp	r3, r8
 8111a32:	dcf0      	bgt.n	8111a16 <_printf_float+0x42a>
 8111a34:	e6fc      	b.n	8111830 <_printf_float+0x244>
 8111a36:	f04f 0800 	mov.w	r8, #0
 8111a3a:	f104 0919 	add.w	r9, r4, #25
 8111a3e:	e7f4      	b.n	8111a2a <_printf_float+0x43e>

08111a40 <_printf_common>:
 8111a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8111a44:	4616      	mov	r6, r2
 8111a46:	4698      	mov	r8, r3
 8111a48:	688a      	ldr	r2, [r1, #8]
 8111a4a:	690b      	ldr	r3, [r1, #16]
 8111a4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8111a50:	4293      	cmp	r3, r2
 8111a52:	bfb8      	it	lt
 8111a54:	4613      	movlt	r3, r2
 8111a56:	6033      	str	r3, [r6, #0]
 8111a58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8111a5c:	4607      	mov	r7, r0
 8111a5e:	460c      	mov	r4, r1
 8111a60:	b10a      	cbz	r2, 8111a66 <_printf_common+0x26>
 8111a62:	3301      	adds	r3, #1
 8111a64:	6033      	str	r3, [r6, #0]
 8111a66:	6823      	ldr	r3, [r4, #0]
 8111a68:	0699      	lsls	r1, r3, #26
 8111a6a:	bf42      	ittt	mi
 8111a6c:	6833      	ldrmi	r3, [r6, #0]
 8111a6e:	3302      	addmi	r3, #2
 8111a70:	6033      	strmi	r3, [r6, #0]
 8111a72:	6825      	ldr	r5, [r4, #0]
 8111a74:	f015 0506 	ands.w	r5, r5, #6
 8111a78:	d106      	bne.n	8111a88 <_printf_common+0x48>
 8111a7a:	f104 0a19 	add.w	sl, r4, #25
 8111a7e:	68e3      	ldr	r3, [r4, #12]
 8111a80:	6832      	ldr	r2, [r6, #0]
 8111a82:	1a9b      	subs	r3, r3, r2
 8111a84:	42ab      	cmp	r3, r5
 8111a86:	dc26      	bgt.n	8111ad6 <_printf_common+0x96>
 8111a88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8111a8c:	6822      	ldr	r2, [r4, #0]
 8111a8e:	3b00      	subs	r3, #0
 8111a90:	bf18      	it	ne
 8111a92:	2301      	movne	r3, #1
 8111a94:	0692      	lsls	r2, r2, #26
 8111a96:	d42b      	bmi.n	8111af0 <_printf_common+0xb0>
 8111a98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8111a9c:	4641      	mov	r1, r8
 8111a9e:	4638      	mov	r0, r7
 8111aa0:	47c8      	blx	r9
 8111aa2:	3001      	adds	r0, #1
 8111aa4:	d01e      	beq.n	8111ae4 <_printf_common+0xa4>
 8111aa6:	6823      	ldr	r3, [r4, #0]
 8111aa8:	6922      	ldr	r2, [r4, #16]
 8111aaa:	f003 0306 	and.w	r3, r3, #6
 8111aae:	2b04      	cmp	r3, #4
 8111ab0:	bf02      	ittt	eq
 8111ab2:	68e5      	ldreq	r5, [r4, #12]
 8111ab4:	6833      	ldreq	r3, [r6, #0]
 8111ab6:	1aed      	subeq	r5, r5, r3
 8111ab8:	68a3      	ldr	r3, [r4, #8]
 8111aba:	bf0c      	ite	eq
 8111abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8111ac0:	2500      	movne	r5, #0
 8111ac2:	4293      	cmp	r3, r2
 8111ac4:	bfc4      	itt	gt
 8111ac6:	1a9b      	subgt	r3, r3, r2
 8111ac8:	18ed      	addgt	r5, r5, r3
 8111aca:	2600      	movs	r6, #0
 8111acc:	341a      	adds	r4, #26
 8111ace:	42b5      	cmp	r5, r6
 8111ad0:	d11a      	bne.n	8111b08 <_printf_common+0xc8>
 8111ad2:	2000      	movs	r0, #0
 8111ad4:	e008      	b.n	8111ae8 <_printf_common+0xa8>
 8111ad6:	2301      	movs	r3, #1
 8111ad8:	4652      	mov	r2, sl
 8111ada:	4641      	mov	r1, r8
 8111adc:	4638      	mov	r0, r7
 8111ade:	47c8      	blx	r9
 8111ae0:	3001      	adds	r0, #1
 8111ae2:	d103      	bne.n	8111aec <_printf_common+0xac>
 8111ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8111ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8111aec:	3501      	adds	r5, #1
 8111aee:	e7c6      	b.n	8111a7e <_printf_common+0x3e>
 8111af0:	18e1      	adds	r1, r4, r3
 8111af2:	1c5a      	adds	r2, r3, #1
 8111af4:	2030      	movs	r0, #48	@ 0x30
 8111af6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8111afa:	4422      	add	r2, r4
 8111afc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8111b00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8111b04:	3302      	adds	r3, #2
 8111b06:	e7c7      	b.n	8111a98 <_printf_common+0x58>
 8111b08:	2301      	movs	r3, #1
 8111b0a:	4622      	mov	r2, r4
 8111b0c:	4641      	mov	r1, r8
 8111b0e:	4638      	mov	r0, r7
 8111b10:	47c8      	blx	r9
 8111b12:	3001      	adds	r0, #1
 8111b14:	d0e6      	beq.n	8111ae4 <_printf_common+0xa4>
 8111b16:	3601      	adds	r6, #1
 8111b18:	e7d9      	b.n	8111ace <_printf_common+0x8e>
	...

08111b1c <_printf_i>:
 8111b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8111b20:	7e0f      	ldrb	r7, [r1, #24]
 8111b22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8111b24:	2f78      	cmp	r7, #120	@ 0x78
 8111b26:	4691      	mov	r9, r2
 8111b28:	4680      	mov	r8, r0
 8111b2a:	460c      	mov	r4, r1
 8111b2c:	469a      	mov	sl, r3
 8111b2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8111b32:	d807      	bhi.n	8111b44 <_printf_i+0x28>
 8111b34:	2f62      	cmp	r7, #98	@ 0x62
 8111b36:	d80a      	bhi.n	8111b4e <_printf_i+0x32>
 8111b38:	2f00      	cmp	r7, #0
 8111b3a:	f000 80d2 	beq.w	8111ce2 <_printf_i+0x1c6>
 8111b3e:	2f58      	cmp	r7, #88	@ 0x58
 8111b40:	f000 80b9 	beq.w	8111cb6 <_printf_i+0x19a>
 8111b44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8111b48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8111b4c:	e03a      	b.n	8111bc4 <_printf_i+0xa8>
 8111b4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8111b52:	2b15      	cmp	r3, #21
 8111b54:	d8f6      	bhi.n	8111b44 <_printf_i+0x28>
 8111b56:	a101      	add	r1, pc, #4	@ (adr r1, 8111b5c <_printf_i+0x40>)
 8111b58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8111b5c:	08111bb5 	.word	0x08111bb5
 8111b60:	08111bc9 	.word	0x08111bc9
 8111b64:	08111b45 	.word	0x08111b45
 8111b68:	08111b45 	.word	0x08111b45
 8111b6c:	08111b45 	.word	0x08111b45
 8111b70:	08111b45 	.word	0x08111b45
 8111b74:	08111bc9 	.word	0x08111bc9
 8111b78:	08111b45 	.word	0x08111b45
 8111b7c:	08111b45 	.word	0x08111b45
 8111b80:	08111b45 	.word	0x08111b45
 8111b84:	08111b45 	.word	0x08111b45
 8111b88:	08111cc9 	.word	0x08111cc9
 8111b8c:	08111bf3 	.word	0x08111bf3
 8111b90:	08111c83 	.word	0x08111c83
 8111b94:	08111b45 	.word	0x08111b45
 8111b98:	08111b45 	.word	0x08111b45
 8111b9c:	08111ceb 	.word	0x08111ceb
 8111ba0:	08111b45 	.word	0x08111b45
 8111ba4:	08111bf3 	.word	0x08111bf3
 8111ba8:	08111b45 	.word	0x08111b45
 8111bac:	08111b45 	.word	0x08111b45
 8111bb0:	08111c8b 	.word	0x08111c8b
 8111bb4:	6833      	ldr	r3, [r6, #0]
 8111bb6:	1d1a      	adds	r2, r3, #4
 8111bb8:	681b      	ldr	r3, [r3, #0]
 8111bba:	6032      	str	r2, [r6, #0]
 8111bbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8111bc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8111bc4:	2301      	movs	r3, #1
 8111bc6:	e09d      	b.n	8111d04 <_printf_i+0x1e8>
 8111bc8:	6833      	ldr	r3, [r6, #0]
 8111bca:	6820      	ldr	r0, [r4, #0]
 8111bcc:	1d19      	adds	r1, r3, #4
 8111bce:	6031      	str	r1, [r6, #0]
 8111bd0:	0606      	lsls	r6, r0, #24
 8111bd2:	d501      	bpl.n	8111bd8 <_printf_i+0xbc>
 8111bd4:	681d      	ldr	r5, [r3, #0]
 8111bd6:	e003      	b.n	8111be0 <_printf_i+0xc4>
 8111bd8:	0645      	lsls	r5, r0, #25
 8111bda:	d5fb      	bpl.n	8111bd4 <_printf_i+0xb8>
 8111bdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8111be0:	2d00      	cmp	r5, #0
 8111be2:	da03      	bge.n	8111bec <_printf_i+0xd0>
 8111be4:	232d      	movs	r3, #45	@ 0x2d
 8111be6:	426d      	negs	r5, r5
 8111be8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8111bec:	4859      	ldr	r0, [pc, #356]	@ (8111d54 <_printf_i+0x238>)
 8111bee:	230a      	movs	r3, #10
 8111bf0:	e011      	b.n	8111c16 <_printf_i+0xfa>
 8111bf2:	6821      	ldr	r1, [r4, #0]
 8111bf4:	6833      	ldr	r3, [r6, #0]
 8111bf6:	0608      	lsls	r0, r1, #24
 8111bf8:	f853 5b04 	ldr.w	r5, [r3], #4
 8111bfc:	d402      	bmi.n	8111c04 <_printf_i+0xe8>
 8111bfe:	0649      	lsls	r1, r1, #25
 8111c00:	bf48      	it	mi
 8111c02:	b2ad      	uxthmi	r5, r5
 8111c04:	2f6f      	cmp	r7, #111	@ 0x6f
 8111c06:	4853      	ldr	r0, [pc, #332]	@ (8111d54 <_printf_i+0x238>)
 8111c08:	6033      	str	r3, [r6, #0]
 8111c0a:	bf14      	ite	ne
 8111c0c:	230a      	movne	r3, #10
 8111c0e:	2308      	moveq	r3, #8
 8111c10:	2100      	movs	r1, #0
 8111c12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8111c16:	6866      	ldr	r6, [r4, #4]
 8111c18:	60a6      	str	r6, [r4, #8]
 8111c1a:	2e00      	cmp	r6, #0
 8111c1c:	bfa2      	ittt	ge
 8111c1e:	6821      	ldrge	r1, [r4, #0]
 8111c20:	f021 0104 	bicge.w	r1, r1, #4
 8111c24:	6021      	strge	r1, [r4, #0]
 8111c26:	b90d      	cbnz	r5, 8111c2c <_printf_i+0x110>
 8111c28:	2e00      	cmp	r6, #0
 8111c2a:	d04b      	beq.n	8111cc4 <_printf_i+0x1a8>
 8111c2c:	4616      	mov	r6, r2
 8111c2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8111c32:	fb03 5711 	mls	r7, r3, r1, r5
 8111c36:	5dc7      	ldrb	r7, [r0, r7]
 8111c38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8111c3c:	462f      	mov	r7, r5
 8111c3e:	42bb      	cmp	r3, r7
 8111c40:	460d      	mov	r5, r1
 8111c42:	d9f4      	bls.n	8111c2e <_printf_i+0x112>
 8111c44:	2b08      	cmp	r3, #8
 8111c46:	d10b      	bne.n	8111c60 <_printf_i+0x144>
 8111c48:	6823      	ldr	r3, [r4, #0]
 8111c4a:	07df      	lsls	r7, r3, #31
 8111c4c:	d508      	bpl.n	8111c60 <_printf_i+0x144>
 8111c4e:	6923      	ldr	r3, [r4, #16]
 8111c50:	6861      	ldr	r1, [r4, #4]
 8111c52:	4299      	cmp	r1, r3
 8111c54:	bfde      	ittt	le
 8111c56:	2330      	movle	r3, #48	@ 0x30
 8111c58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8111c5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8111c60:	1b92      	subs	r2, r2, r6
 8111c62:	6122      	str	r2, [r4, #16]
 8111c64:	f8cd a000 	str.w	sl, [sp]
 8111c68:	464b      	mov	r3, r9
 8111c6a:	aa03      	add	r2, sp, #12
 8111c6c:	4621      	mov	r1, r4
 8111c6e:	4640      	mov	r0, r8
 8111c70:	f7ff fee6 	bl	8111a40 <_printf_common>
 8111c74:	3001      	adds	r0, #1
 8111c76:	d14a      	bne.n	8111d0e <_printf_i+0x1f2>
 8111c78:	f04f 30ff 	mov.w	r0, #4294967295
 8111c7c:	b004      	add	sp, #16
 8111c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8111c82:	6823      	ldr	r3, [r4, #0]
 8111c84:	f043 0320 	orr.w	r3, r3, #32
 8111c88:	6023      	str	r3, [r4, #0]
 8111c8a:	4833      	ldr	r0, [pc, #204]	@ (8111d58 <_printf_i+0x23c>)
 8111c8c:	2778      	movs	r7, #120	@ 0x78
 8111c8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8111c92:	6823      	ldr	r3, [r4, #0]
 8111c94:	6831      	ldr	r1, [r6, #0]
 8111c96:	061f      	lsls	r7, r3, #24
 8111c98:	f851 5b04 	ldr.w	r5, [r1], #4
 8111c9c:	d402      	bmi.n	8111ca4 <_printf_i+0x188>
 8111c9e:	065f      	lsls	r7, r3, #25
 8111ca0:	bf48      	it	mi
 8111ca2:	b2ad      	uxthmi	r5, r5
 8111ca4:	6031      	str	r1, [r6, #0]
 8111ca6:	07d9      	lsls	r1, r3, #31
 8111ca8:	bf44      	itt	mi
 8111caa:	f043 0320 	orrmi.w	r3, r3, #32
 8111cae:	6023      	strmi	r3, [r4, #0]
 8111cb0:	b11d      	cbz	r5, 8111cba <_printf_i+0x19e>
 8111cb2:	2310      	movs	r3, #16
 8111cb4:	e7ac      	b.n	8111c10 <_printf_i+0xf4>
 8111cb6:	4827      	ldr	r0, [pc, #156]	@ (8111d54 <_printf_i+0x238>)
 8111cb8:	e7e9      	b.n	8111c8e <_printf_i+0x172>
 8111cba:	6823      	ldr	r3, [r4, #0]
 8111cbc:	f023 0320 	bic.w	r3, r3, #32
 8111cc0:	6023      	str	r3, [r4, #0]
 8111cc2:	e7f6      	b.n	8111cb2 <_printf_i+0x196>
 8111cc4:	4616      	mov	r6, r2
 8111cc6:	e7bd      	b.n	8111c44 <_printf_i+0x128>
 8111cc8:	6833      	ldr	r3, [r6, #0]
 8111cca:	6825      	ldr	r5, [r4, #0]
 8111ccc:	6961      	ldr	r1, [r4, #20]
 8111cce:	1d18      	adds	r0, r3, #4
 8111cd0:	6030      	str	r0, [r6, #0]
 8111cd2:	062e      	lsls	r6, r5, #24
 8111cd4:	681b      	ldr	r3, [r3, #0]
 8111cd6:	d501      	bpl.n	8111cdc <_printf_i+0x1c0>
 8111cd8:	6019      	str	r1, [r3, #0]
 8111cda:	e002      	b.n	8111ce2 <_printf_i+0x1c6>
 8111cdc:	0668      	lsls	r0, r5, #25
 8111cde:	d5fb      	bpl.n	8111cd8 <_printf_i+0x1bc>
 8111ce0:	8019      	strh	r1, [r3, #0]
 8111ce2:	2300      	movs	r3, #0
 8111ce4:	6123      	str	r3, [r4, #16]
 8111ce6:	4616      	mov	r6, r2
 8111ce8:	e7bc      	b.n	8111c64 <_printf_i+0x148>
 8111cea:	6833      	ldr	r3, [r6, #0]
 8111cec:	1d1a      	adds	r2, r3, #4
 8111cee:	6032      	str	r2, [r6, #0]
 8111cf0:	681e      	ldr	r6, [r3, #0]
 8111cf2:	6862      	ldr	r2, [r4, #4]
 8111cf4:	2100      	movs	r1, #0
 8111cf6:	4630      	mov	r0, r6
 8111cf8:	f7ee faf2 	bl	81002e0 <memchr>
 8111cfc:	b108      	cbz	r0, 8111d02 <_printf_i+0x1e6>
 8111cfe:	1b80      	subs	r0, r0, r6
 8111d00:	6060      	str	r0, [r4, #4]
 8111d02:	6863      	ldr	r3, [r4, #4]
 8111d04:	6123      	str	r3, [r4, #16]
 8111d06:	2300      	movs	r3, #0
 8111d08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8111d0c:	e7aa      	b.n	8111c64 <_printf_i+0x148>
 8111d0e:	6923      	ldr	r3, [r4, #16]
 8111d10:	4632      	mov	r2, r6
 8111d12:	4649      	mov	r1, r9
 8111d14:	4640      	mov	r0, r8
 8111d16:	47d0      	blx	sl
 8111d18:	3001      	adds	r0, #1
 8111d1a:	d0ad      	beq.n	8111c78 <_printf_i+0x15c>
 8111d1c:	6823      	ldr	r3, [r4, #0]
 8111d1e:	079b      	lsls	r3, r3, #30
 8111d20:	d413      	bmi.n	8111d4a <_printf_i+0x22e>
 8111d22:	68e0      	ldr	r0, [r4, #12]
 8111d24:	9b03      	ldr	r3, [sp, #12]
 8111d26:	4298      	cmp	r0, r3
 8111d28:	bfb8      	it	lt
 8111d2a:	4618      	movlt	r0, r3
 8111d2c:	e7a6      	b.n	8111c7c <_printf_i+0x160>
 8111d2e:	2301      	movs	r3, #1
 8111d30:	4632      	mov	r2, r6
 8111d32:	4649      	mov	r1, r9
 8111d34:	4640      	mov	r0, r8
 8111d36:	47d0      	blx	sl
 8111d38:	3001      	adds	r0, #1
 8111d3a:	d09d      	beq.n	8111c78 <_printf_i+0x15c>
 8111d3c:	3501      	adds	r5, #1
 8111d3e:	68e3      	ldr	r3, [r4, #12]
 8111d40:	9903      	ldr	r1, [sp, #12]
 8111d42:	1a5b      	subs	r3, r3, r1
 8111d44:	42ab      	cmp	r3, r5
 8111d46:	dcf2      	bgt.n	8111d2e <_printf_i+0x212>
 8111d48:	e7eb      	b.n	8111d22 <_printf_i+0x206>
 8111d4a:	2500      	movs	r5, #0
 8111d4c:	f104 0619 	add.w	r6, r4, #25
 8111d50:	e7f5      	b.n	8111d3e <_printf_i+0x222>
 8111d52:	bf00      	nop
 8111d54:	08116d89 	.word	0x08116d89
 8111d58:	08116d9a 	.word	0x08116d9a

08111d5c <_scanf_float>:
 8111d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111d60:	b087      	sub	sp, #28
 8111d62:	4617      	mov	r7, r2
 8111d64:	9303      	str	r3, [sp, #12]
 8111d66:	688b      	ldr	r3, [r1, #8]
 8111d68:	1e5a      	subs	r2, r3, #1
 8111d6a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8111d6e:	bf81      	itttt	hi
 8111d70:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8111d74:	eb03 0b05 	addhi.w	fp, r3, r5
 8111d78:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8111d7c:	608b      	strhi	r3, [r1, #8]
 8111d7e:	680b      	ldr	r3, [r1, #0]
 8111d80:	460a      	mov	r2, r1
 8111d82:	f04f 0500 	mov.w	r5, #0
 8111d86:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8111d8a:	f842 3b1c 	str.w	r3, [r2], #28
 8111d8e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8111d92:	4680      	mov	r8, r0
 8111d94:	460c      	mov	r4, r1
 8111d96:	bf98      	it	ls
 8111d98:	f04f 0b00 	movls.w	fp, #0
 8111d9c:	9201      	str	r2, [sp, #4]
 8111d9e:	4616      	mov	r6, r2
 8111da0:	46aa      	mov	sl, r5
 8111da2:	46a9      	mov	r9, r5
 8111da4:	9502      	str	r5, [sp, #8]
 8111da6:	68a2      	ldr	r2, [r4, #8]
 8111da8:	b152      	cbz	r2, 8111dc0 <_scanf_float+0x64>
 8111daa:	683b      	ldr	r3, [r7, #0]
 8111dac:	781b      	ldrb	r3, [r3, #0]
 8111dae:	2b4e      	cmp	r3, #78	@ 0x4e
 8111db0:	d864      	bhi.n	8111e7c <_scanf_float+0x120>
 8111db2:	2b40      	cmp	r3, #64	@ 0x40
 8111db4:	d83c      	bhi.n	8111e30 <_scanf_float+0xd4>
 8111db6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8111dba:	b2c8      	uxtb	r0, r1
 8111dbc:	280e      	cmp	r0, #14
 8111dbe:	d93a      	bls.n	8111e36 <_scanf_float+0xda>
 8111dc0:	f1b9 0f00 	cmp.w	r9, #0
 8111dc4:	d003      	beq.n	8111dce <_scanf_float+0x72>
 8111dc6:	6823      	ldr	r3, [r4, #0]
 8111dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8111dcc:	6023      	str	r3, [r4, #0]
 8111dce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8111dd2:	f1ba 0f01 	cmp.w	sl, #1
 8111dd6:	f200 8117 	bhi.w	8112008 <_scanf_float+0x2ac>
 8111dda:	9b01      	ldr	r3, [sp, #4]
 8111ddc:	429e      	cmp	r6, r3
 8111dde:	f200 8108 	bhi.w	8111ff2 <_scanf_float+0x296>
 8111de2:	2001      	movs	r0, #1
 8111de4:	b007      	add	sp, #28
 8111de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111dea:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8111dee:	2a0d      	cmp	r2, #13
 8111df0:	d8e6      	bhi.n	8111dc0 <_scanf_float+0x64>
 8111df2:	a101      	add	r1, pc, #4	@ (adr r1, 8111df8 <_scanf_float+0x9c>)
 8111df4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8111df8:	08111f3f 	.word	0x08111f3f
 8111dfc:	08111dc1 	.word	0x08111dc1
 8111e00:	08111dc1 	.word	0x08111dc1
 8111e04:	08111dc1 	.word	0x08111dc1
 8111e08:	08111f9f 	.word	0x08111f9f
 8111e0c:	08111f77 	.word	0x08111f77
 8111e10:	08111dc1 	.word	0x08111dc1
 8111e14:	08111dc1 	.word	0x08111dc1
 8111e18:	08111f4d 	.word	0x08111f4d
 8111e1c:	08111dc1 	.word	0x08111dc1
 8111e20:	08111dc1 	.word	0x08111dc1
 8111e24:	08111dc1 	.word	0x08111dc1
 8111e28:	08111dc1 	.word	0x08111dc1
 8111e2c:	08111f05 	.word	0x08111f05
 8111e30:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8111e34:	e7db      	b.n	8111dee <_scanf_float+0x92>
 8111e36:	290e      	cmp	r1, #14
 8111e38:	d8c2      	bhi.n	8111dc0 <_scanf_float+0x64>
 8111e3a:	a001      	add	r0, pc, #4	@ (adr r0, 8111e40 <_scanf_float+0xe4>)
 8111e3c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8111e40:	08111ef5 	.word	0x08111ef5
 8111e44:	08111dc1 	.word	0x08111dc1
 8111e48:	08111ef5 	.word	0x08111ef5
 8111e4c:	08111f8b 	.word	0x08111f8b
 8111e50:	08111dc1 	.word	0x08111dc1
 8111e54:	08111e9d 	.word	0x08111e9d
 8111e58:	08111edb 	.word	0x08111edb
 8111e5c:	08111edb 	.word	0x08111edb
 8111e60:	08111edb 	.word	0x08111edb
 8111e64:	08111edb 	.word	0x08111edb
 8111e68:	08111edb 	.word	0x08111edb
 8111e6c:	08111edb 	.word	0x08111edb
 8111e70:	08111edb 	.word	0x08111edb
 8111e74:	08111edb 	.word	0x08111edb
 8111e78:	08111edb 	.word	0x08111edb
 8111e7c:	2b6e      	cmp	r3, #110	@ 0x6e
 8111e7e:	d809      	bhi.n	8111e94 <_scanf_float+0x138>
 8111e80:	2b60      	cmp	r3, #96	@ 0x60
 8111e82:	d8b2      	bhi.n	8111dea <_scanf_float+0x8e>
 8111e84:	2b54      	cmp	r3, #84	@ 0x54
 8111e86:	d07b      	beq.n	8111f80 <_scanf_float+0x224>
 8111e88:	2b59      	cmp	r3, #89	@ 0x59
 8111e8a:	d199      	bne.n	8111dc0 <_scanf_float+0x64>
 8111e8c:	2d07      	cmp	r5, #7
 8111e8e:	d197      	bne.n	8111dc0 <_scanf_float+0x64>
 8111e90:	2508      	movs	r5, #8
 8111e92:	e02c      	b.n	8111eee <_scanf_float+0x192>
 8111e94:	2b74      	cmp	r3, #116	@ 0x74
 8111e96:	d073      	beq.n	8111f80 <_scanf_float+0x224>
 8111e98:	2b79      	cmp	r3, #121	@ 0x79
 8111e9a:	e7f6      	b.n	8111e8a <_scanf_float+0x12e>
 8111e9c:	6821      	ldr	r1, [r4, #0]
 8111e9e:	05c8      	lsls	r0, r1, #23
 8111ea0:	d51b      	bpl.n	8111eda <_scanf_float+0x17e>
 8111ea2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8111ea6:	6021      	str	r1, [r4, #0]
 8111ea8:	f109 0901 	add.w	r9, r9, #1
 8111eac:	f1bb 0f00 	cmp.w	fp, #0
 8111eb0:	d003      	beq.n	8111eba <_scanf_float+0x15e>
 8111eb2:	3201      	adds	r2, #1
 8111eb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8111eb8:	60a2      	str	r2, [r4, #8]
 8111eba:	68a3      	ldr	r3, [r4, #8]
 8111ebc:	3b01      	subs	r3, #1
 8111ebe:	60a3      	str	r3, [r4, #8]
 8111ec0:	6923      	ldr	r3, [r4, #16]
 8111ec2:	3301      	adds	r3, #1
 8111ec4:	6123      	str	r3, [r4, #16]
 8111ec6:	687b      	ldr	r3, [r7, #4]
 8111ec8:	3b01      	subs	r3, #1
 8111eca:	2b00      	cmp	r3, #0
 8111ecc:	607b      	str	r3, [r7, #4]
 8111ece:	f340 8087 	ble.w	8111fe0 <_scanf_float+0x284>
 8111ed2:	683b      	ldr	r3, [r7, #0]
 8111ed4:	3301      	adds	r3, #1
 8111ed6:	603b      	str	r3, [r7, #0]
 8111ed8:	e765      	b.n	8111da6 <_scanf_float+0x4a>
 8111eda:	eb1a 0105 	adds.w	r1, sl, r5
 8111ede:	f47f af6f 	bne.w	8111dc0 <_scanf_float+0x64>
 8111ee2:	6822      	ldr	r2, [r4, #0]
 8111ee4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8111ee8:	6022      	str	r2, [r4, #0]
 8111eea:	460d      	mov	r5, r1
 8111eec:	468a      	mov	sl, r1
 8111eee:	f806 3b01 	strb.w	r3, [r6], #1
 8111ef2:	e7e2      	b.n	8111eba <_scanf_float+0x15e>
 8111ef4:	6822      	ldr	r2, [r4, #0]
 8111ef6:	0610      	lsls	r0, r2, #24
 8111ef8:	f57f af62 	bpl.w	8111dc0 <_scanf_float+0x64>
 8111efc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8111f00:	6022      	str	r2, [r4, #0]
 8111f02:	e7f4      	b.n	8111eee <_scanf_float+0x192>
 8111f04:	f1ba 0f00 	cmp.w	sl, #0
 8111f08:	d10e      	bne.n	8111f28 <_scanf_float+0x1cc>
 8111f0a:	f1b9 0f00 	cmp.w	r9, #0
 8111f0e:	d10e      	bne.n	8111f2e <_scanf_float+0x1d2>
 8111f10:	6822      	ldr	r2, [r4, #0]
 8111f12:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8111f16:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8111f1a:	d108      	bne.n	8111f2e <_scanf_float+0x1d2>
 8111f1c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8111f20:	6022      	str	r2, [r4, #0]
 8111f22:	f04f 0a01 	mov.w	sl, #1
 8111f26:	e7e2      	b.n	8111eee <_scanf_float+0x192>
 8111f28:	f1ba 0f02 	cmp.w	sl, #2
 8111f2c:	d055      	beq.n	8111fda <_scanf_float+0x27e>
 8111f2e:	2d01      	cmp	r5, #1
 8111f30:	d002      	beq.n	8111f38 <_scanf_float+0x1dc>
 8111f32:	2d04      	cmp	r5, #4
 8111f34:	f47f af44 	bne.w	8111dc0 <_scanf_float+0x64>
 8111f38:	3501      	adds	r5, #1
 8111f3a:	b2ed      	uxtb	r5, r5
 8111f3c:	e7d7      	b.n	8111eee <_scanf_float+0x192>
 8111f3e:	f1ba 0f01 	cmp.w	sl, #1
 8111f42:	f47f af3d 	bne.w	8111dc0 <_scanf_float+0x64>
 8111f46:	f04f 0a02 	mov.w	sl, #2
 8111f4a:	e7d0      	b.n	8111eee <_scanf_float+0x192>
 8111f4c:	b97d      	cbnz	r5, 8111f6e <_scanf_float+0x212>
 8111f4e:	f1b9 0f00 	cmp.w	r9, #0
 8111f52:	f47f af38 	bne.w	8111dc6 <_scanf_float+0x6a>
 8111f56:	6822      	ldr	r2, [r4, #0]
 8111f58:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8111f5c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8111f60:	f040 8108 	bne.w	8112174 <_scanf_float+0x418>
 8111f64:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8111f68:	6022      	str	r2, [r4, #0]
 8111f6a:	2501      	movs	r5, #1
 8111f6c:	e7bf      	b.n	8111eee <_scanf_float+0x192>
 8111f6e:	2d03      	cmp	r5, #3
 8111f70:	d0e2      	beq.n	8111f38 <_scanf_float+0x1dc>
 8111f72:	2d05      	cmp	r5, #5
 8111f74:	e7de      	b.n	8111f34 <_scanf_float+0x1d8>
 8111f76:	2d02      	cmp	r5, #2
 8111f78:	f47f af22 	bne.w	8111dc0 <_scanf_float+0x64>
 8111f7c:	2503      	movs	r5, #3
 8111f7e:	e7b6      	b.n	8111eee <_scanf_float+0x192>
 8111f80:	2d06      	cmp	r5, #6
 8111f82:	f47f af1d 	bne.w	8111dc0 <_scanf_float+0x64>
 8111f86:	2507      	movs	r5, #7
 8111f88:	e7b1      	b.n	8111eee <_scanf_float+0x192>
 8111f8a:	6822      	ldr	r2, [r4, #0]
 8111f8c:	0591      	lsls	r1, r2, #22
 8111f8e:	f57f af17 	bpl.w	8111dc0 <_scanf_float+0x64>
 8111f92:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8111f96:	6022      	str	r2, [r4, #0]
 8111f98:	f8cd 9008 	str.w	r9, [sp, #8]
 8111f9c:	e7a7      	b.n	8111eee <_scanf_float+0x192>
 8111f9e:	6822      	ldr	r2, [r4, #0]
 8111fa0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8111fa4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8111fa8:	d006      	beq.n	8111fb8 <_scanf_float+0x25c>
 8111faa:	0550      	lsls	r0, r2, #21
 8111fac:	f57f af08 	bpl.w	8111dc0 <_scanf_float+0x64>
 8111fb0:	f1b9 0f00 	cmp.w	r9, #0
 8111fb4:	f000 80de 	beq.w	8112174 <_scanf_float+0x418>
 8111fb8:	0591      	lsls	r1, r2, #22
 8111fba:	bf58      	it	pl
 8111fbc:	9902      	ldrpl	r1, [sp, #8]
 8111fbe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8111fc2:	bf58      	it	pl
 8111fc4:	eba9 0101 	subpl.w	r1, r9, r1
 8111fc8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8111fcc:	bf58      	it	pl
 8111fce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8111fd2:	6022      	str	r2, [r4, #0]
 8111fd4:	f04f 0900 	mov.w	r9, #0
 8111fd8:	e789      	b.n	8111eee <_scanf_float+0x192>
 8111fda:	f04f 0a03 	mov.w	sl, #3
 8111fde:	e786      	b.n	8111eee <_scanf_float+0x192>
 8111fe0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8111fe4:	4639      	mov	r1, r7
 8111fe6:	4640      	mov	r0, r8
 8111fe8:	4798      	blx	r3
 8111fea:	2800      	cmp	r0, #0
 8111fec:	f43f aedb 	beq.w	8111da6 <_scanf_float+0x4a>
 8111ff0:	e6e6      	b.n	8111dc0 <_scanf_float+0x64>
 8111ff2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8111ff6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8111ffa:	463a      	mov	r2, r7
 8111ffc:	4640      	mov	r0, r8
 8111ffe:	4798      	blx	r3
 8112000:	6923      	ldr	r3, [r4, #16]
 8112002:	3b01      	subs	r3, #1
 8112004:	6123      	str	r3, [r4, #16]
 8112006:	e6e8      	b.n	8111dda <_scanf_float+0x7e>
 8112008:	1e6b      	subs	r3, r5, #1
 811200a:	2b06      	cmp	r3, #6
 811200c:	d824      	bhi.n	8112058 <_scanf_float+0x2fc>
 811200e:	2d02      	cmp	r5, #2
 8112010:	d836      	bhi.n	8112080 <_scanf_float+0x324>
 8112012:	9b01      	ldr	r3, [sp, #4]
 8112014:	429e      	cmp	r6, r3
 8112016:	f67f aee4 	bls.w	8111de2 <_scanf_float+0x86>
 811201a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 811201e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8112022:	463a      	mov	r2, r7
 8112024:	4640      	mov	r0, r8
 8112026:	4798      	blx	r3
 8112028:	6923      	ldr	r3, [r4, #16]
 811202a:	3b01      	subs	r3, #1
 811202c:	6123      	str	r3, [r4, #16]
 811202e:	e7f0      	b.n	8112012 <_scanf_float+0x2b6>
 8112030:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8112034:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8112038:	463a      	mov	r2, r7
 811203a:	4640      	mov	r0, r8
 811203c:	4798      	blx	r3
 811203e:	6923      	ldr	r3, [r4, #16]
 8112040:	3b01      	subs	r3, #1
 8112042:	6123      	str	r3, [r4, #16]
 8112044:	f10a 3aff 	add.w	sl, sl, #4294967295
 8112048:	fa5f fa8a 	uxtb.w	sl, sl
 811204c:	f1ba 0f02 	cmp.w	sl, #2
 8112050:	d1ee      	bne.n	8112030 <_scanf_float+0x2d4>
 8112052:	3d03      	subs	r5, #3
 8112054:	b2ed      	uxtb	r5, r5
 8112056:	1b76      	subs	r6, r6, r5
 8112058:	6823      	ldr	r3, [r4, #0]
 811205a:	05da      	lsls	r2, r3, #23
 811205c:	d530      	bpl.n	81120c0 <_scanf_float+0x364>
 811205e:	055b      	lsls	r3, r3, #21
 8112060:	d511      	bpl.n	8112086 <_scanf_float+0x32a>
 8112062:	9b01      	ldr	r3, [sp, #4]
 8112064:	429e      	cmp	r6, r3
 8112066:	f67f aebc 	bls.w	8111de2 <_scanf_float+0x86>
 811206a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 811206e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8112072:	463a      	mov	r2, r7
 8112074:	4640      	mov	r0, r8
 8112076:	4798      	blx	r3
 8112078:	6923      	ldr	r3, [r4, #16]
 811207a:	3b01      	subs	r3, #1
 811207c:	6123      	str	r3, [r4, #16]
 811207e:	e7f0      	b.n	8112062 <_scanf_float+0x306>
 8112080:	46aa      	mov	sl, r5
 8112082:	46b3      	mov	fp, r6
 8112084:	e7de      	b.n	8112044 <_scanf_float+0x2e8>
 8112086:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 811208a:	6923      	ldr	r3, [r4, #16]
 811208c:	2965      	cmp	r1, #101	@ 0x65
 811208e:	f103 33ff 	add.w	r3, r3, #4294967295
 8112092:	f106 35ff 	add.w	r5, r6, #4294967295
 8112096:	6123      	str	r3, [r4, #16]
 8112098:	d00c      	beq.n	81120b4 <_scanf_float+0x358>
 811209a:	2945      	cmp	r1, #69	@ 0x45
 811209c:	d00a      	beq.n	81120b4 <_scanf_float+0x358>
 811209e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 81120a2:	463a      	mov	r2, r7
 81120a4:	4640      	mov	r0, r8
 81120a6:	4798      	blx	r3
 81120a8:	6923      	ldr	r3, [r4, #16]
 81120aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 81120ae:	3b01      	subs	r3, #1
 81120b0:	1eb5      	subs	r5, r6, #2
 81120b2:	6123      	str	r3, [r4, #16]
 81120b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 81120b8:	463a      	mov	r2, r7
 81120ba:	4640      	mov	r0, r8
 81120bc:	4798      	blx	r3
 81120be:	462e      	mov	r6, r5
 81120c0:	6822      	ldr	r2, [r4, #0]
 81120c2:	f012 0210 	ands.w	r2, r2, #16
 81120c6:	d001      	beq.n	81120cc <_scanf_float+0x370>
 81120c8:	2000      	movs	r0, #0
 81120ca:	e68b      	b.n	8111de4 <_scanf_float+0x88>
 81120cc:	7032      	strb	r2, [r6, #0]
 81120ce:	6823      	ldr	r3, [r4, #0]
 81120d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 81120d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81120d8:	d11c      	bne.n	8112114 <_scanf_float+0x3b8>
 81120da:	9b02      	ldr	r3, [sp, #8]
 81120dc:	454b      	cmp	r3, r9
 81120de:	eba3 0209 	sub.w	r2, r3, r9
 81120e2:	d123      	bne.n	811212c <_scanf_float+0x3d0>
 81120e4:	9901      	ldr	r1, [sp, #4]
 81120e6:	2200      	movs	r2, #0
 81120e8:	4640      	mov	r0, r8
 81120ea:	f002 fcc9 	bl	8114a80 <_strtod_r>
 81120ee:	9b03      	ldr	r3, [sp, #12]
 81120f0:	6821      	ldr	r1, [r4, #0]
 81120f2:	681b      	ldr	r3, [r3, #0]
 81120f4:	f011 0f02 	tst.w	r1, #2
 81120f8:	ec57 6b10 	vmov	r6, r7, d0
 81120fc:	f103 0204 	add.w	r2, r3, #4
 8112100:	d01f      	beq.n	8112142 <_scanf_float+0x3e6>
 8112102:	9903      	ldr	r1, [sp, #12]
 8112104:	600a      	str	r2, [r1, #0]
 8112106:	681b      	ldr	r3, [r3, #0]
 8112108:	e9c3 6700 	strd	r6, r7, [r3]
 811210c:	68e3      	ldr	r3, [r4, #12]
 811210e:	3301      	adds	r3, #1
 8112110:	60e3      	str	r3, [r4, #12]
 8112112:	e7d9      	b.n	81120c8 <_scanf_float+0x36c>
 8112114:	9b04      	ldr	r3, [sp, #16]
 8112116:	2b00      	cmp	r3, #0
 8112118:	d0e4      	beq.n	81120e4 <_scanf_float+0x388>
 811211a:	9905      	ldr	r1, [sp, #20]
 811211c:	230a      	movs	r3, #10
 811211e:	3101      	adds	r1, #1
 8112120:	4640      	mov	r0, r8
 8112122:	f002 fd2d 	bl	8114b80 <_strtol_r>
 8112126:	9b04      	ldr	r3, [sp, #16]
 8112128:	9e05      	ldr	r6, [sp, #20]
 811212a:	1ac2      	subs	r2, r0, r3
 811212c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8112130:	429e      	cmp	r6, r3
 8112132:	bf28      	it	cs
 8112134:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8112138:	4910      	ldr	r1, [pc, #64]	@ (811217c <_scanf_float+0x420>)
 811213a:	4630      	mov	r0, r6
 811213c:	f000 f8f6 	bl	811232c <siprintf>
 8112140:	e7d0      	b.n	81120e4 <_scanf_float+0x388>
 8112142:	f011 0f04 	tst.w	r1, #4
 8112146:	9903      	ldr	r1, [sp, #12]
 8112148:	600a      	str	r2, [r1, #0]
 811214a:	d1dc      	bne.n	8112106 <_scanf_float+0x3aa>
 811214c:	681d      	ldr	r5, [r3, #0]
 811214e:	4632      	mov	r2, r6
 8112150:	463b      	mov	r3, r7
 8112152:	4630      	mov	r0, r6
 8112154:	4639      	mov	r1, r7
 8112156:	f7ee fd71 	bl	8100c3c <__aeabi_dcmpun>
 811215a:	b128      	cbz	r0, 8112168 <_scanf_float+0x40c>
 811215c:	4808      	ldr	r0, [pc, #32]	@ (8112180 <_scanf_float+0x424>)
 811215e:	f000 fa6b 	bl	8112638 <nanf>
 8112162:	ed85 0a00 	vstr	s0, [r5]
 8112166:	e7d1      	b.n	811210c <_scanf_float+0x3b0>
 8112168:	4630      	mov	r0, r6
 811216a:	4639      	mov	r1, r7
 811216c:	f7ee fdc4 	bl	8100cf8 <__aeabi_d2f>
 8112170:	6028      	str	r0, [r5, #0]
 8112172:	e7cb      	b.n	811210c <_scanf_float+0x3b0>
 8112174:	f04f 0900 	mov.w	r9, #0
 8112178:	e629      	b.n	8111dce <_scanf_float+0x72>
 811217a:	bf00      	nop
 811217c:	08116dab 	.word	0x08116dab
 8112180:	08116deb 	.word	0x08116deb

08112184 <std>:
 8112184:	2300      	movs	r3, #0
 8112186:	b510      	push	{r4, lr}
 8112188:	4604      	mov	r4, r0
 811218a:	e9c0 3300 	strd	r3, r3, [r0]
 811218e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8112192:	6083      	str	r3, [r0, #8]
 8112194:	8181      	strh	r1, [r0, #12]
 8112196:	6643      	str	r3, [r0, #100]	@ 0x64
 8112198:	81c2      	strh	r2, [r0, #14]
 811219a:	6183      	str	r3, [r0, #24]
 811219c:	4619      	mov	r1, r3
 811219e:	2208      	movs	r2, #8
 81121a0:	305c      	adds	r0, #92	@ 0x5c
 81121a2:	f000 f9bb 	bl	811251c <memset>
 81121a6:	4b0d      	ldr	r3, [pc, #52]	@ (81121dc <std+0x58>)
 81121a8:	6263      	str	r3, [r4, #36]	@ 0x24
 81121aa:	4b0d      	ldr	r3, [pc, #52]	@ (81121e0 <std+0x5c>)
 81121ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 81121ae:	4b0d      	ldr	r3, [pc, #52]	@ (81121e4 <std+0x60>)
 81121b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 81121b2:	4b0d      	ldr	r3, [pc, #52]	@ (81121e8 <std+0x64>)
 81121b4:	6323      	str	r3, [r4, #48]	@ 0x30
 81121b6:	4b0d      	ldr	r3, [pc, #52]	@ (81121ec <std+0x68>)
 81121b8:	6224      	str	r4, [r4, #32]
 81121ba:	429c      	cmp	r4, r3
 81121bc:	d006      	beq.n	81121cc <std+0x48>
 81121be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 81121c2:	4294      	cmp	r4, r2
 81121c4:	d002      	beq.n	81121cc <std+0x48>
 81121c6:	33d0      	adds	r3, #208	@ 0xd0
 81121c8:	429c      	cmp	r4, r3
 81121ca:	d105      	bne.n	81121d8 <std+0x54>
 81121cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 81121d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81121d4:	f000 ba1e 	b.w	8112614 <__retarget_lock_init_recursive>
 81121d8:	bd10      	pop	{r4, pc}
 81121da:	bf00      	nop
 81121dc:	0811236d 	.word	0x0811236d
 81121e0:	0811238f 	.word	0x0811238f
 81121e4:	081123c7 	.word	0x081123c7
 81121e8:	081123eb 	.word	0x081123eb
 81121ec:	1000d3c8 	.word	0x1000d3c8

081121f0 <stdio_exit_handler>:
 81121f0:	4a02      	ldr	r2, [pc, #8]	@ (81121fc <stdio_exit_handler+0xc>)
 81121f2:	4903      	ldr	r1, [pc, #12]	@ (8112200 <stdio_exit_handler+0x10>)
 81121f4:	4803      	ldr	r0, [pc, #12]	@ (8112204 <stdio_exit_handler+0x14>)
 81121f6:	f000 b869 	b.w	81122cc <_fwalk_sglue>
 81121fa:	bf00      	nop
 81121fc:	100000a4 	.word	0x100000a4
 8112200:	081151c1 	.word	0x081151c1
 8112204:	100000b4 	.word	0x100000b4

08112208 <cleanup_stdio>:
 8112208:	6841      	ldr	r1, [r0, #4]
 811220a:	4b0c      	ldr	r3, [pc, #48]	@ (811223c <cleanup_stdio+0x34>)
 811220c:	4299      	cmp	r1, r3
 811220e:	b510      	push	{r4, lr}
 8112210:	4604      	mov	r4, r0
 8112212:	d001      	beq.n	8112218 <cleanup_stdio+0x10>
 8112214:	f002 ffd4 	bl	81151c0 <_fflush_r>
 8112218:	68a1      	ldr	r1, [r4, #8]
 811221a:	4b09      	ldr	r3, [pc, #36]	@ (8112240 <cleanup_stdio+0x38>)
 811221c:	4299      	cmp	r1, r3
 811221e:	d002      	beq.n	8112226 <cleanup_stdio+0x1e>
 8112220:	4620      	mov	r0, r4
 8112222:	f002 ffcd 	bl	81151c0 <_fflush_r>
 8112226:	68e1      	ldr	r1, [r4, #12]
 8112228:	4b06      	ldr	r3, [pc, #24]	@ (8112244 <cleanup_stdio+0x3c>)
 811222a:	4299      	cmp	r1, r3
 811222c:	d004      	beq.n	8112238 <cleanup_stdio+0x30>
 811222e:	4620      	mov	r0, r4
 8112230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8112234:	f002 bfc4 	b.w	81151c0 <_fflush_r>
 8112238:	bd10      	pop	{r4, pc}
 811223a:	bf00      	nop
 811223c:	1000d3c8 	.word	0x1000d3c8
 8112240:	1000d430 	.word	0x1000d430
 8112244:	1000d498 	.word	0x1000d498

08112248 <global_stdio_init.part.0>:
 8112248:	b510      	push	{r4, lr}
 811224a:	4b0b      	ldr	r3, [pc, #44]	@ (8112278 <global_stdio_init.part.0+0x30>)
 811224c:	4c0b      	ldr	r4, [pc, #44]	@ (811227c <global_stdio_init.part.0+0x34>)
 811224e:	4a0c      	ldr	r2, [pc, #48]	@ (8112280 <global_stdio_init.part.0+0x38>)
 8112250:	601a      	str	r2, [r3, #0]
 8112252:	4620      	mov	r0, r4
 8112254:	2200      	movs	r2, #0
 8112256:	2104      	movs	r1, #4
 8112258:	f7ff ff94 	bl	8112184 <std>
 811225c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8112260:	2201      	movs	r2, #1
 8112262:	2109      	movs	r1, #9
 8112264:	f7ff ff8e 	bl	8112184 <std>
 8112268:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 811226c:	2202      	movs	r2, #2
 811226e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8112272:	2112      	movs	r1, #18
 8112274:	f7ff bf86 	b.w	8112184 <std>
 8112278:	1000d500 	.word	0x1000d500
 811227c:	1000d3c8 	.word	0x1000d3c8
 8112280:	081121f1 	.word	0x081121f1

08112284 <__sfp_lock_acquire>:
 8112284:	4801      	ldr	r0, [pc, #4]	@ (811228c <__sfp_lock_acquire+0x8>)
 8112286:	f000 b9c6 	b.w	8112616 <__retarget_lock_acquire_recursive>
 811228a:	bf00      	nop
 811228c:	1000d509 	.word	0x1000d509

08112290 <__sfp_lock_release>:
 8112290:	4801      	ldr	r0, [pc, #4]	@ (8112298 <__sfp_lock_release+0x8>)
 8112292:	f000 b9c1 	b.w	8112618 <__retarget_lock_release_recursive>
 8112296:	bf00      	nop
 8112298:	1000d509 	.word	0x1000d509

0811229c <__sinit>:
 811229c:	b510      	push	{r4, lr}
 811229e:	4604      	mov	r4, r0
 81122a0:	f7ff fff0 	bl	8112284 <__sfp_lock_acquire>
 81122a4:	6a23      	ldr	r3, [r4, #32]
 81122a6:	b11b      	cbz	r3, 81122b0 <__sinit+0x14>
 81122a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81122ac:	f7ff bff0 	b.w	8112290 <__sfp_lock_release>
 81122b0:	4b04      	ldr	r3, [pc, #16]	@ (81122c4 <__sinit+0x28>)
 81122b2:	6223      	str	r3, [r4, #32]
 81122b4:	4b04      	ldr	r3, [pc, #16]	@ (81122c8 <__sinit+0x2c>)
 81122b6:	681b      	ldr	r3, [r3, #0]
 81122b8:	2b00      	cmp	r3, #0
 81122ba:	d1f5      	bne.n	81122a8 <__sinit+0xc>
 81122bc:	f7ff ffc4 	bl	8112248 <global_stdio_init.part.0>
 81122c0:	e7f2      	b.n	81122a8 <__sinit+0xc>
 81122c2:	bf00      	nop
 81122c4:	08112209 	.word	0x08112209
 81122c8:	1000d500 	.word	0x1000d500

081122cc <_fwalk_sglue>:
 81122cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81122d0:	4607      	mov	r7, r0
 81122d2:	4688      	mov	r8, r1
 81122d4:	4614      	mov	r4, r2
 81122d6:	2600      	movs	r6, #0
 81122d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 81122dc:	f1b9 0901 	subs.w	r9, r9, #1
 81122e0:	d505      	bpl.n	81122ee <_fwalk_sglue+0x22>
 81122e2:	6824      	ldr	r4, [r4, #0]
 81122e4:	2c00      	cmp	r4, #0
 81122e6:	d1f7      	bne.n	81122d8 <_fwalk_sglue+0xc>
 81122e8:	4630      	mov	r0, r6
 81122ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81122ee:	89ab      	ldrh	r3, [r5, #12]
 81122f0:	2b01      	cmp	r3, #1
 81122f2:	d907      	bls.n	8112304 <_fwalk_sglue+0x38>
 81122f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 81122f8:	3301      	adds	r3, #1
 81122fa:	d003      	beq.n	8112304 <_fwalk_sglue+0x38>
 81122fc:	4629      	mov	r1, r5
 81122fe:	4638      	mov	r0, r7
 8112300:	47c0      	blx	r8
 8112302:	4306      	orrs	r6, r0
 8112304:	3568      	adds	r5, #104	@ 0x68
 8112306:	e7e9      	b.n	81122dc <_fwalk_sglue+0x10>

08112308 <iprintf>:
 8112308:	b40f      	push	{r0, r1, r2, r3}
 811230a:	b507      	push	{r0, r1, r2, lr}
 811230c:	4906      	ldr	r1, [pc, #24]	@ (8112328 <iprintf+0x20>)
 811230e:	ab04      	add	r3, sp, #16
 8112310:	6808      	ldr	r0, [r1, #0]
 8112312:	f853 2b04 	ldr.w	r2, [r3], #4
 8112316:	6881      	ldr	r1, [r0, #8]
 8112318:	9301      	str	r3, [sp, #4]
 811231a:	f002 fdb5 	bl	8114e88 <_vfiprintf_r>
 811231e:	b003      	add	sp, #12
 8112320:	f85d eb04 	ldr.w	lr, [sp], #4
 8112324:	b004      	add	sp, #16
 8112326:	4770      	bx	lr
 8112328:	100000b0 	.word	0x100000b0

0811232c <siprintf>:
 811232c:	b40e      	push	{r1, r2, r3}
 811232e:	b500      	push	{lr}
 8112330:	b09c      	sub	sp, #112	@ 0x70
 8112332:	ab1d      	add	r3, sp, #116	@ 0x74
 8112334:	9002      	str	r0, [sp, #8]
 8112336:	9006      	str	r0, [sp, #24]
 8112338:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 811233c:	4809      	ldr	r0, [pc, #36]	@ (8112364 <siprintf+0x38>)
 811233e:	9107      	str	r1, [sp, #28]
 8112340:	9104      	str	r1, [sp, #16]
 8112342:	4909      	ldr	r1, [pc, #36]	@ (8112368 <siprintf+0x3c>)
 8112344:	f853 2b04 	ldr.w	r2, [r3], #4
 8112348:	9105      	str	r1, [sp, #20]
 811234a:	6800      	ldr	r0, [r0, #0]
 811234c:	9301      	str	r3, [sp, #4]
 811234e:	a902      	add	r1, sp, #8
 8112350:	f002 fc74 	bl	8114c3c <_svfiprintf_r>
 8112354:	9b02      	ldr	r3, [sp, #8]
 8112356:	2200      	movs	r2, #0
 8112358:	701a      	strb	r2, [r3, #0]
 811235a:	b01c      	add	sp, #112	@ 0x70
 811235c:	f85d eb04 	ldr.w	lr, [sp], #4
 8112360:	b003      	add	sp, #12
 8112362:	4770      	bx	lr
 8112364:	100000b0 	.word	0x100000b0
 8112368:	ffff0208 	.word	0xffff0208

0811236c <__sread>:
 811236c:	b510      	push	{r4, lr}
 811236e:	460c      	mov	r4, r1
 8112370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8112374:	f000 f900 	bl	8112578 <_read_r>
 8112378:	2800      	cmp	r0, #0
 811237a:	bfab      	itete	ge
 811237c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 811237e:	89a3      	ldrhlt	r3, [r4, #12]
 8112380:	181b      	addge	r3, r3, r0
 8112382:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8112386:	bfac      	ite	ge
 8112388:	6563      	strge	r3, [r4, #84]	@ 0x54
 811238a:	81a3      	strhlt	r3, [r4, #12]
 811238c:	bd10      	pop	{r4, pc}

0811238e <__swrite>:
 811238e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8112392:	461f      	mov	r7, r3
 8112394:	898b      	ldrh	r3, [r1, #12]
 8112396:	05db      	lsls	r3, r3, #23
 8112398:	4605      	mov	r5, r0
 811239a:	460c      	mov	r4, r1
 811239c:	4616      	mov	r6, r2
 811239e:	d505      	bpl.n	81123ac <__swrite+0x1e>
 81123a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81123a4:	2302      	movs	r3, #2
 81123a6:	2200      	movs	r2, #0
 81123a8:	f000 f8d4 	bl	8112554 <_lseek_r>
 81123ac:	89a3      	ldrh	r3, [r4, #12]
 81123ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81123b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 81123b6:	81a3      	strh	r3, [r4, #12]
 81123b8:	4632      	mov	r2, r6
 81123ba:	463b      	mov	r3, r7
 81123bc:	4628      	mov	r0, r5
 81123be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81123c2:	f000 b8eb 	b.w	811259c <_write_r>

081123c6 <__sseek>:
 81123c6:	b510      	push	{r4, lr}
 81123c8:	460c      	mov	r4, r1
 81123ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81123ce:	f000 f8c1 	bl	8112554 <_lseek_r>
 81123d2:	1c43      	adds	r3, r0, #1
 81123d4:	89a3      	ldrh	r3, [r4, #12]
 81123d6:	bf15      	itete	ne
 81123d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 81123da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 81123de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 81123e2:	81a3      	strheq	r3, [r4, #12]
 81123e4:	bf18      	it	ne
 81123e6:	81a3      	strhne	r3, [r4, #12]
 81123e8:	bd10      	pop	{r4, pc}

081123ea <__sclose>:
 81123ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81123ee:	f000 b8a1 	b.w	8112534 <_close_r>

081123f2 <__swbuf_r>:
 81123f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81123f4:	460e      	mov	r6, r1
 81123f6:	4614      	mov	r4, r2
 81123f8:	4605      	mov	r5, r0
 81123fa:	b118      	cbz	r0, 8112404 <__swbuf_r+0x12>
 81123fc:	6a03      	ldr	r3, [r0, #32]
 81123fe:	b90b      	cbnz	r3, 8112404 <__swbuf_r+0x12>
 8112400:	f7ff ff4c 	bl	811229c <__sinit>
 8112404:	69a3      	ldr	r3, [r4, #24]
 8112406:	60a3      	str	r3, [r4, #8]
 8112408:	89a3      	ldrh	r3, [r4, #12]
 811240a:	071a      	lsls	r2, r3, #28
 811240c:	d501      	bpl.n	8112412 <__swbuf_r+0x20>
 811240e:	6923      	ldr	r3, [r4, #16]
 8112410:	b943      	cbnz	r3, 8112424 <__swbuf_r+0x32>
 8112412:	4621      	mov	r1, r4
 8112414:	4628      	mov	r0, r5
 8112416:	f000 f82b 	bl	8112470 <__swsetup_r>
 811241a:	b118      	cbz	r0, 8112424 <__swbuf_r+0x32>
 811241c:	f04f 37ff 	mov.w	r7, #4294967295
 8112420:	4638      	mov	r0, r7
 8112422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8112424:	6823      	ldr	r3, [r4, #0]
 8112426:	6922      	ldr	r2, [r4, #16]
 8112428:	1a98      	subs	r0, r3, r2
 811242a:	6963      	ldr	r3, [r4, #20]
 811242c:	b2f6      	uxtb	r6, r6
 811242e:	4283      	cmp	r3, r0
 8112430:	4637      	mov	r7, r6
 8112432:	dc05      	bgt.n	8112440 <__swbuf_r+0x4e>
 8112434:	4621      	mov	r1, r4
 8112436:	4628      	mov	r0, r5
 8112438:	f002 fec2 	bl	81151c0 <_fflush_r>
 811243c:	2800      	cmp	r0, #0
 811243e:	d1ed      	bne.n	811241c <__swbuf_r+0x2a>
 8112440:	68a3      	ldr	r3, [r4, #8]
 8112442:	3b01      	subs	r3, #1
 8112444:	60a3      	str	r3, [r4, #8]
 8112446:	6823      	ldr	r3, [r4, #0]
 8112448:	1c5a      	adds	r2, r3, #1
 811244a:	6022      	str	r2, [r4, #0]
 811244c:	701e      	strb	r6, [r3, #0]
 811244e:	6962      	ldr	r2, [r4, #20]
 8112450:	1c43      	adds	r3, r0, #1
 8112452:	429a      	cmp	r2, r3
 8112454:	d004      	beq.n	8112460 <__swbuf_r+0x6e>
 8112456:	89a3      	ldrh	r3, [r4, #12]
 8112458:	07db      	lsls	r3, r3, #31
 811245a:	d5e1      	bpl.n	8112420 <__swbuf_r+0x2e>
 811245c:	2e0a      	cmp	r6, #10
 811245e:	d1df      	bne.n	8112420 <__swbuf_r+0x2e>
 8112460:	4621      	mov	r1, r4
 8112462:	4628      	mov	r0, r5
 8112464:	f002 feac 	bl	81151c0 <_fflush_r>
 8112468:	2800      	cmp	r0, #0
 811246a:	d0d9      	beq.n	8112420 <__swbuf_r+0x2e>
 811246c:	e7d6      	b.n	811241c <__swbuf_r+0x2a>
	...

08112470 <__swsetup_r>:
 8112470:	b538      	push	{r3, r4, r5, lr}
 8112472:	4b29      	ldr	r3, [pc, #164]	@ (8112518 <__swsetup_r+0xa8>)
 8112474:	4605      	mov	r5, r0
 8112476:	6818      	ldr	r0, [r3, #0]
 8112478:	460c      	mov	r4, r1
 811247a:	b118      	cbz	r0, 8112484 <__swsetup_r+0x14>
 811247c:	6a03      	ldr	r3, [r0, #32]
 811247e:	b90b      	cbnz	r3, 8112484 <__swsetup_r+0x14>
 8112480:	f7ff ff0c 	bl	811229c <__sinit>
 8112484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8112488:	0719      	lsls	r1, r3, #28
 811248a:	d422      	bmi.n	81124d2 <__swsetup_r+0x62>
 811248c:	06da      	lsls	r2, r3, #27
 811248e:	d407      	bmi.n	81124a0 <__swsetup_r+0x30>
 8112490:	2209      	movs	r2, #9
 8112492:	602a      	str	r2, [r5, #0]
 8112494:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8112498:	81a3      	strh	r3, [r4, #12]
 811249a:	f04f 30ff 	mov.w	r0, #4294967295
 811249e:	e033      	b.n	8112508 <__swsetup_r+0x98>
 81124a0:	0758      	lsls	r0, r3, #29
 81124a2:	d512      	bpl.n	81124ca <__swsetup_r+0x5a>
 81124a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81124a6:	b141      	cbz	r1, 81124ba <__swsetup_r+0x4a>
 81124a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81124ac:	4299      	cmp	r1, r3
 81124ae:	d002      	beq.n	81124b6 <__swsetup_r+0x46>
 81124b0:	4628      	mov	r0, r5
 81124b2:	f000 ff31 	bl	8113318 <_free_r>
 81124b6:	2300      	movs	r3, #0
 81124b8:	6363      	str	r3, [r4, #52]	@ 0x34
 81124ba:	89a3      	ldrh	r3, [r4, #12]
 81124bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 81124c0:	81a3      	strh	r3, [r4, #12]
 81124c2:	2300      	movs	r3, #0
 81124c4:	6063      	str	r3, [r4, #4]
 81124c6:	6923      	ldr	r3, [r4, #16]
 81124c8:	6023      	str	r3, [r4, #0]
 81124ca:	89a3      	ldrh	r3, [r4, #12]
 81124cc:	f043 0308 	orr.w	r3, r3, #8
 81124d0:	81a3      	strh	r3, [r4, #12]
 81124d2:	6923      	ldr	r3, [r4, #16]
 81124d4:	b94b      	cbnz	r3, 81124ea <__swsetup_r+0x7a>
 81124d6:	89a3      	ldrh	r3, [r4, #12]
 81124d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 81124dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81124e0:	d003      	beq.n	81124ea <__swsetup_r+0x7a>
 81124e2:	4621      	mov	r1, r4
 81124e4:	4628      	mov	r0, r5
 81124e6:	f002 fecb 	bl	8115280 <__smakebuf_r>
 81124ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81124ee:	f013 0201 	ands.w	r2, r3, #1
 81124f2:	d00a      	beq.n	811250a <__swsetup_r+0x9a>
 81124f4:	2200      	movs	r2, #0
 81124f6:	60a2      	str	r2, [r4, #8]
 81124f8:	6962      	ldr	r2, [r4, #20]
 81124fa:	4252      	negs	r2, r2
 81124fc:	61a2      	str	r2, [r4, #24]
 81124fe:	6922      	ldr	r2, [r4, #16]
 8112500:	b942      	cbnz	r2, 8112514 <__swsetup_r+0xa4>
 8112502:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8112506:	d1c5      	bne.n	8112494 <__swsetup_r+0x24>
 8112508:	bd38      	pop	{r3, r4, r5, pc}
 811250a:	0799      	lsls	r1, r3, #30
 811250c:	bf58      	it	pl
 811250e:	6962      	ldrpl	r2, [r4, #20]
 8112510:	60a2      	str	r2, [r4, #8]
 8112512:	e7f4      	b.n	81124fe <__swsetup_r+0x8e>
 8112514:	2000      	movs	r0, #0
 8112516:	e7f7      	b.n	8112508 <__swsetup_r+0x98>
 8112518:	100000b0 	.word	0x100000b0

0811251c <memset>:
 811251c:	4402      	add	r2, r0
 811251e:	4603      	mov	r3, r0
 8112520:	4293      	cmp	r3, r2
 8112522:	d100      	bne.n	8112526 <memset+0xa>
 8112524:	4770      	bx	lr
 8112526:	f803 1b01 	strb.w	r1, [r3], #1
 811252a:	e7f9      	b.n	8112520 <memset+0x4>

0811252c <_localeconv_r>:
 811252c:	4800      	ldr	r0, [pc, #0]	@ (8112530 <_localeconv_r+0x4>)
 811252e:	4770      	bx	lr
 8112530:	100001f0 	.word	0x100001f0

08112534 <_close_r>:
 8112534:	b538      	push	{r3, r4, r5, lr}
 8112536:	4d06      	ldr	r5, [pc, #24]	@ (8112550 <_close_r+0x1c>)
 8112538:	2300      	movs	r3, #0
 811253a:	4604      	mov	r4, r0
 811253c:	4608      	mov	r0, r1
 811253e:	602b      	str	r3, [r5, #0]
 8112540:	f7f2 faae 	bl	8104aa0 <_close>
 8112544:	1c43      	adds	r3, r0, #1
 8112546:	d102      	bne.n	811254e <_close_r+0x1a>
 8112548:	682b      	ldr	r3, [r5, #0]
 811254a:	b103      	cbz	r3, 811254e <_close_r+0x1a>
 811254c:	6023      	str	r3, [r4, #0]
 811254e:	bd38      	pop	{r3, r4, r5, pc}
 8112550:	1000d504 	.word	0x1000d504

08112554 <_lseek_r>:
 8112554:	b538      	push	{r3, r4, r5, lr}
 8112556:	4d07      	ldr	r5, [pc, #28]	@ (8112574 <_lseek_r+0x20>)
 8112558:	4604      	mov	r4, r0
 811255a:	4608      	mov	r0, r1
 811255c:	4611      	mov	r1, r2
 811255e:	2200      	movs	r2, #0
 8112560:	602a      	str	r2, [r5, #0]
 8112562:	461a      	mov	r2, r3
 8112564:	f7f2 fac3 	bl	8104aee <_lseek>
 8112568:	1c43      	adds	r3, r0, #1
 811256a:	d102      	bne.n	8112572 <_lseek_r+0x1e>
 811256c:	682b      	ldr	r3, [r5, #0]
 811256e:	b103      	cbz	r3, 8112572 <_lseek_r+0x1e>
 8112570:	6023      	str	r3, [r4, #0]
 8112572:	bd38      	pop	{r3, r4, r5, pc}
 8112574:	1000d504 	.word	0x1000d504

08112578 <_read_r>:
 8112578:	b538      	push	{r3, r4, r5, lr}
 811257a:	4d07      	ldr	r5, [pc, #28]	@ (8112598 <_read_r+0x20>)
 811257c:	4604      	mov	r4, r0
 811257e:	4608      	mov	r0, r1
 8112580:	4611      	mov	r1, r2
 8112582:	2200      	movs	r2, #0
 8112584:	602a      	str	r2, [r5, #0]
 8112586:	461a      	mov	r2, r3
 8112588:	f7f2 fa6b 	bl	8104a62 <_read>
 811258c:	1c43      	adds	r3, r0, #1
 811258e:	d102      	bne.n	8112596 <_read_r+0x1e>
 8112590:	682b      	ldr	r3, [r5, #0]
 8112592:	b103      	cbz	r3, 8112596 <_read_r+0x1e>
 8112594:	6023      	str	r3, [r4, #0]
 8112596:	bd38      	pop	{r3, r4, r5, pc}
 8112598:	1000d504 	.word	0x1000d504

0811259c <_write_r>:
 811259c:	b538      	push	{r3, r4, r5, lr}
 811259e:	4d07      	ldr	r5, [pc, #28]	@ (81125bc <_write_r+0x20>)
 81125a0:	4604      	mov	r4, r0
 81125a2:	4608      	mov	r0, r1
 81125a4:	4611      	mov	r1, r2
 81125a6:	2200      	movs	r2, #0
 81125a8:	602a      	str	r2, [r5, #0]
 81125aa:	461a      	mov	r2, r3
 81125ac:	f7f1 fd90 	bl	81040d0 <_write>
 81125b0:	1c43      	adds	r3, r0, #1
 81125b2:	d102      	bne.n	81125ba <_write_r+0x1e>
 81125b4:	682b      	ldr	r3, [r5, #0]
 81125b6:	b103      	cbz	r3, 81125ba <_write_r+0x1e>
 81125b8:	6023      	str	r3, [r4, #0]
 81125ba:	bd38      	pop	{r3, r4, r5, pc}
 81125bc:	1000d504 	.word	0x1000d504

081125c0 <__errno>:
 81125c0:	4b01      	ldr	r3, [pc, #4]	@ (81125c8 <__errno+0x8>)
 81125c2:	6818      	ldr	r0, [r3, #0]
 81125c4:	4770      	bx	lr
 81125c6:	bf00      	nop
 81125c8:	100000b0 	.word	0x100000b0

081125cc <__libc_init_array>:
 81125cc:	b570      	push	{r4, r5, r6, lr}
 81125ce:	4d0d      	ldr	r5, [pc, #52]	@ (8112604 <__libc_init_array+0x38>)
 81125d0:	4c0d      	ldr	r4, [pc, #52]	@ (8112608 <__libc_init_array+0x3c>)
 81125d2:	1b64      	subs	r4, r4, r5
 81125d4:	10a4      	asrs	r4, r4, #2
 81125d6:	2600      	movs	r6, #0
 81125d8:	42a6      	cmp	r6, r4
 81125da:	d109      	bne.n	81125f0 <__libc_init_array+0x24>
 81125dc:	4d0b      	ldr	r5, [pc, #44]	@ (811260c <__libc_init_array+0x40>)
 81125de:	4c0c      	ldr	r4, [pc, #48]	@ (8112610 <__libc_init_array+0x44>)
 81125e0:	f004 fb0e 	bl	8116c00 <_init>
 81125e4:	1b64      	subs	r4, r4, r5
 81125e6:	10a4      	asrs	r4, r4, #2
 81125e8:	2600      	movs	r6, #0
 81125ea:	42a6      	cmp	r6, r4
 81125ec:	d105      	bne.n	81125fa <__libc_init_array+0x2e>
 81125ee:	bd70      	pop	{r4, r5, r6, pc}
 81125f0:	f855 3b04 	ldr.w	r3, [r5], #4
 81125f4:	4798      	blx	r3
 81125f6:	3601      	adds	r6, #1
 81125f8:	e7ee      	b.n	81125d8 <__libc_init_array+0xc>
 81125fa:	f855 3b04 	ldr.w	r3, [r5], #4
 81125fe:	4798      	blx	r3
 8112600:	3601      	adds	r6, #1
 8112602:	e7f2      	b.n	81125ea <__libc_init_array+0x1e>
 8112604:	08117370 	.word	0x08117370
 8112608:	08117370 	.word	0x08117370
 811260c:	08117370 	.word	0x08117370
 8112610:	08117374 	.word	0x08117374

08112614 <__retarget_lock_init_recursive>:
 8112614:	4770      	bx	lr

08112616 <__retarget_lock_acquire_recursive>:
 8112616:	4770      	bx	lr

08112618 <__retarget_lock_release_recursive>:
 8112618:	4770      	bx	lr

0811261a <memcpy>:
 811261a:	440a      	add	r2, r1
 811261c:	4291      	cmp	r1, r2
 811261e:	f100 33ff 	add.w	r3, r0, #4294967295
 8112622:	d100      	bne.n	8112626 <memcpy+0xc>
 8112624:	4770      	bx	lr
 8112626:	b510      	push	{r4, lr}
 8112628:	f811 4b01 	ldrb.w	r4, [r1], #1
 811262c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8112630:	4291      	cmp	r1, r2
 8112632:	d1f9      	bne.n	8112628 <memcpy+0xe>
 8112634:	bd10      	pop	{r4, pc}
	...

08112638 <nanf>:
 8112638:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8112640 <nanf+0x8>
 811263c:	4770      	bx	lr
 811263e:	bf00      	nop
 8112640:	7fc00000 	.word	0x7fc00000

08112644 <__assert_func>:
 8112644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8112646:	4614      	mov	r4, r2
 8112648:	461a      	mov	r2, r3
 811264a:	4b09      	ldr	r3, [pc, #36]	@ (8112670 <__assert_func+0x2c>)
 811264c:	681b      	ldr	r3, [r3, #0]
 811264e:	4605      	mov	r5, r0
 8112650:	68d8      	ldr	r0, [r3, #12]
 8112652:	b954      	cbnz	r4, 811266a <__assert_func+0x26>
 8112654:	4b07      	ldr	r3, [pc, #28]	@ (8112674 <__assert_func+0x30>)
 8112656:	461c      	mov	r4, r3
 8112658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 811265c:	9100      	str	r1, [sp, #0]
 811265e:	462b      	mov	r3, r5
 8112660:	4905      	ldr	r1, [pc, #20]	@ (8112678 <__assert_func+0x34>)
 8112662:	f002 fdd5 	bl	8115210 <fiprintf>
 8112666:	f002 feaf 	bl	81153c8 <abort>
 811266a:	4b04      	ldr	r3, [pc, #16]	@ (811267c <__assert_func+0x38>)
 811266c:	e7f4      	b.n	8112658 <__assert_func+0x14>
 811266e:	bf00      	nop
 8112670:	100000b0 	.word	0x100000b0
 8112674:	08116deb 	.word	0x08116deb
 8112678:	08116dbd 	.word	0x08116dbd
 811267c:	08116db0 	.word	0x08116db0

08112680 <quorem>:
 8112680:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112684:	6903      	ldr	r3, [r0, #16]
 8112686:	690c      	ldr	r4, [r1, #16]
 8112688:	42a3      	cmp	r3, r4
 811268a:	4607      	mov	r7, r0
 811268c:	db7e      	blt.n	811278c <quorem+0x10c>
 811268e:	3c01      	subs	r4, #1
 8112690:	f101 0814 	add.w	r8, r1, #20
 8112694:	00a3      	lsls	r3, r4, #2
 8112696:	f100 0514 	add.w	r5, r0, #20
 811269a:	9300      	str	r3, [sp, #0]
 811269c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 81126a0:	9301      	str	r3, [sp, #4]
 81126a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 81126a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 81126aa:	3301      	adds	r3, #1
 81126ac:	429a      	cmp	r2, r3
 81126ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 81126b2:	fbb2 f6f3 	udiv	r6, r2, r3
 81126b6:	d32e      	bcc.n	8112716 <quorem+0x96>
 81126b8:	f04f 0a00 	mov.w	sl, #0
 81126bc:	46c4      	mov	ip, r8
 81126be:	46ae      	mov	lr, r5
 81126c0:	46d3      	mov	fp, sl
 81126c2:	f85c 3b04 	ldr.w	r3, [ip], #4
 81126c6:	b298      	uxth	r0, r3
 81126c8:	fb06 a000 	mla	r0, r6, r0, sl
 81126cc:	0c02      	lsrs	r2, r0, #16
 81126ce:	0c1b      	lsrs	r3, r3, #16
 81126d0:	fb06 2303 	mla	r3, r6, r3, r2
 81126d4:	f8de 2000 	ldr.w	r2, [lr]
 81126d8:	b280      	uxth	r0, r0
 81126da:	b292      	uxth	r2, r2
 81126dc:	1a12      	subs	r2, r2, r0
 81126de:	445a      	add	r2, fp
 81126e0:	f8de 0000 	ldr.w	r0, [lr]
 81126e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 81126e8:	b29b      	uxth	r3, r3
 81126ea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 81126ee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 81126f2:	b292      	uxth	r2, r2
 81126f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 81126f8:	45e1      	cmp	r9, ip
 81126fa:	f84e 2b04 	str.w	r2, [lr], #4
 81126fe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8112702:	d2de      	bcs.n	81126c2 <quorem+0x42>
 8112704:	9b00      	ldr	r3, [sp, #0]
 8112706:	58eb      	ldr	r3, [r5, r3]
 8112708:	b92b      	cbnz	r3, 8112716 <quorem+0x96>
 811270a:	9b01      	ldr	r3, [sp, #4]
 811270c:	3b04      	subs	r3, #4
 811270e:	429d      	cmp	r5, r3
 8112710:	461a      	mov	r2, r3
 8112712:	d32f      	bcc.n	8112774 <quorem+0xf4>
 8112714:	613c      	str	r4, [r7, #16]
 8112716:	4638      	mov	r0, r7
 8112718:	f001 f9c2 	bl	8113aa0 <__mcmp>
 811271c:	2800      	cmp	r0, #0
 811271e:	db25      	blt.n	811276c <quorem+0xec>
 8112720:	4629      	mov	r1, r5
 8112722:	2000      	movs	r0, #0
 8112724:	f858 2b04 	ldr.w	r2, [r8], #4
 8112728:	f8d1 c000 	ldr.w	ip, [r1]
 811272c:	fa1f fe82 	uxth.w	lr, r2
 8112730:	fa1f f38c 	uxth.w	r3, ip
 8112734:	eba3 030e 	sub.w	r3, r3, lr
 8112738:	4403      	add	r3, r0
 811273a:	0c12      	lsrs	r2, r2, #16
 811273c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8112740:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8112744:	b29b      	uxth	r3, r3
 8112746:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 811274a:	45c1      	cmp	r9, r8
 811274c:	f841 3b04 	str.w	r3, [r1], #4
 8112750:	ea4f 4022 	mov.w	r0, r2, asr #16
 8112754:	d2e6      	bcs.n	8112724 <quorem+0xa4>
 8112756:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 811275a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 811275e:	b922      	cbnz	r2, 811276a <quorem+0xea>
 8112760:	3b04      	subs	r3, #4
 8112762:	429d      	cmp	r5, r3
 8112764:	461a      	mov	r2, r3
 8112766:	d30b      	bcc.n	8112780 <quorem+0x100>
 8112768:	613c      	str	r4, [r7, #16]
 811276a:	3601      	adds	r6, #1
 811276c:	4630      	mov	r0, r6
 811276e:	b003      	add	sp, #12
 8112770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8112774:	6812      	ldr	r2, [r2, #0]
 8112776:	3b04      	subs	r3, #4
 8112778:	2a00      	cmp	r2, #0
 811277a:	d1cb      	bne.n	8112714 <quorem+0x94>
 811277c:	3c01      	subs	r4, #1
 811277e:	e7c6      	b.n	811270e <quorem+0x8e>
 8112780:	6812      	ldr	r2, [r2, #0]
 8112782:	3b04      	subs	r3, #4
 8112784:	2a00      	cmp	r2, #0
 8112786:	d1ef      	bne.n	8112768 <quorem+0xe8>
 8112788:	3c01      	subs	r4, #1
 811278a:	e7ea      	b.n	8112762 <quorem+0xe2>
 811278c:	2000      	movs	r0, #0
 811278e:	e7ee      	b.n	811276e <quorem+0xee>

08112790 <_dtoa_r>:
 8112790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112794:	69c7      	ldr	r7, [r0, #28]
 8112796:	b099      	sub	sp, #100	@ 0x64
 8112798:	ed8d 0b02 	vstr	d0, [sp, #8]
 811279c:	ec55 4b10 	vmov	r4, r5, d0
 81127a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 81127a2:	9109      	str	r1, [sp, #36]	@ 0x24
 81127a4:	4683      	mov	fp, r0
 81127a6:	920e      	str	r2, [sp, #56]	@ 0x38
 81127a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 81127aa:	b97f      	cbnz	r7, 81127cc <_dtoa_r+0x3c>
 81127ac:	2010      	movs	r0, #16
 81127ae:	f000 fdfd 	bl	81133ac <malloc>
 81127b2:	4602      	mov	r2, r0
 81127b4:	f8cb 001c 	str.w	r0, [fp, #28]
 81127b8:	b920      	cbnz	r0, 81127c4 <_dtoa_r+0x34>
 81127ba:	4ba7      	ldr	r3, [pc, #668]	@ (8112a58 <_dtoa_r+0x2c8>)
 81127bc:	21ef      	movs	r1, #239	@ 0xef
 81127be:	48a7      	ldr	r0, [pc, #668]	@ (8112a5c <_dtoa_r+0x2cc>)
 81127c0:	f7ff ff40 	bl	8112644 <__assert_func>
 81127c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 81127c8:	6007      	str	r7, [r0, #0]
 81127ca:	60c7      	str	r7, [r0, #12]
 81127cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 81127d0:	6819      	ldr	r1, [r3, #0]
 81127d2:	b159      	cbz	r1, 81127ec <_dtoa_r+0x5c>
 81127d4:	685a      	ldr	r2, [r3, #4]
 81127d6:	604a      	str	r2, [r1, #4]
 81127d8:	2301      	movs	r3, #1
 81127da:	4093      	lsls	r3, r2
 81127dc:	608b      	str	r3, [r1, #8]
 81127de:	4658      	mov	r0, fp
 81127e0:	f000 feda 	bl	8113598 <_Bfree>
 81127e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 81127e8:	2200      	movs	r2, #0
 81127ea:	601a      	str	r2, [r3, #0]
 81127ec:	1e2b      	subs	r3, r5, #0
 81127ee:	bfb9      	ittee	lt
 81127f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 81127f4:	9303      	strlt	r3, [sp, #12]
 81127f6:	2300      	movge	r3, #0
 81127f8:	6033      	strge	r3, [r6, #0]
 81127fa:	9f03      	ldr	r7, [sp, #12]
 81127fc:	4b98      	ldr	r3, [pc, #608]	@ (8112a60 <_dtoa_r+0x2d0>)
 81127fe:	bfbc      	itt	lt
 8112800:	2201      	movlt	r2, #1
 8112802:	6032      	strlt	r2, [r6, #0]
 8112804:	43bb      	bics	r3, r7
 8112806:	d112      	bne.n	811282e <_dtoa_r+0x9e>
 8112808:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 811280a:	f242 730f 	movw	r3, #9999	@ 0x270f
 811280e:	6013      	str	r3, [r2, #0]
 8112810:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8112814:	4323      	orrs	r3, r4
 8112816:	f000 854d 	beq.w	81132b4 <_dtoa_r+0xb24>
 811281a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 811281c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8112a74 <_dtoa_r+0x2e4>
 8112820:	2b00      	cmp	r3, #0
 8112822:	f000 854f 	beq.w	81132c4 <_dtoa_r+0xb34>
 8112826:	f10a 0303 	add.w	r3, sl, #3
 811282a:	f000 bd49 	b.w	81132c0 <_dtoa_r+0xb30>
 811282e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8112832:	2200      	movs	r2, #0
 8112834:	ec51 0b17 	vmov	r0, r1, d7
 8112838:	2300      	movs	r3, #0
 811283a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 811283e:	f7ee f9cb 	bl	8100bd8 <__aeabi_dcmpeq>
 8112842:	4680      	mov	r8, r0
 8112844:	b158      	cbz	r0, 811285e <_dtoa_r+0xce>
 8112846:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8112848:	2301      	movs	r3, #1
 811284a:	6013      	str	r3, [r2, #0]
 811284c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 811284e:	b113      	cbz	r3, 8112856 <_dtoa_r+0xc6>
 8112850:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8112852:	4b84      	ldr	r3, [pc, #528]	@ (8112a64 <_dtoa_r+0x2d4>)
 8112854:	6013      	str	r3, [r2, #0]
 8112856:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8112a78 <_dtoa_r+0x2e8>
 811285a:	f000 bd33 	b.w	81132c4 <_dtoa_r+0xb34>
 811285e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8112862:	aa16      	add	r2, sp, #88	@ 0x58
 8112864:	a917      	add	r1, sp, #92	@ 0x5c
 8112866:	4658      	mov	r0, fp
 8112868:	f001 fa3a 	bl	8113ce0 <__d2b>
 811286c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8112870:	4681      	mov	r9, r0
 8112872:	2e00      	cmp	r6, #0
 8112874:	d077      	beq.n	8112966 <_dtoa_r+0x1d6>
 8112876:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8112878:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 811287c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8112880:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8112884:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8112888:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 811288c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8112890:	4619      	mov	r1, r3
 8112892:	2200      	movs	r2, #0
 8112894:	4b74      	ldr	r3, [pc, #464]	@ (8112a68 <_dtoa_r+0x2d8>)
 8112896:	f7ed fd7f 	bl	8100398 <__aeabi_dsub>
 811289a:	a369      	add	r3, pc, #420	@ (adr r3, 8112a40 <_dtoa_r+0x2b0>)
 811289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81128a0:	f7ed ff32 	bl	8100708 <__aeabi_dmul>
 81128a4:	a368      	add	r3, pc, #416	@ (adr r3, 8112a48 <_dtoa_r+0x2b8>)
 81128a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81128aa:	f7ed fd77 	bl	810039c <__adddf3>
 81128ae:	4604      	mov	r4, r0
 81128b0:	4630      	mov	r0, r6
 81128b2:	460d      	mov	r5, r1
 81128b4:	f7ed febe 	bl	8100634 <__aeabi_i2d>
 81128b8:	a365      	add	r3, pc, #404	@ (adr r3, 8112a50 <_dtoa_r+0x2c0>)
 81128ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81128be:	f7ed ff23 	bl	8100708 <__aeabi_dmul>
 81128c2:	4602      	mov	r2, r0
 81128c4:	460b      	mov	r3, r1
 81128c6:	4620      	mov	r0, r4
 81128c8:	4629      	mov	r1, r5
 81128ca:	f7ed fd67 	bl	810039c <__adddf3>
 81128ce:	4604      	mov	r4, r0
 81128d0:	460d      	mov	r5, r1
 81128d2:	f7ee f9c9 	bl	8100c68 <__aeabi_d2iz>
 81128d6:	2200      	movs	r2, #0
 81128d8:	4607      	mov	r7, r0
 81128da:	2300      	movs	r3, #0
 81128dc:	4620      	mov	r0, r4
 81128de:	4629      	mov	r1, r5
 81128e0:	f7ee f984 	bl	8100bec <__aeabi_dcmplt>
 81128e4:	b140      	cbz	r0, 81128f8 <_dtoa_r+0x168>
 81128e6:	4638      	mov	r0, r7
 81128e8:	f7ed fea4 	bl	8100634 <__aeabi_i2d>
 81128ec:	4622      	mov	r2, r4
 81128ee:	462b      	mov	r3, r5
 81128f0:	f7ee f972 	bl	8100bd8 <__aeabi_dcmpeq>
 81128f4:	b900      	cbnz	r0, 81128f8 <_dtoa_r+0x168>
 81128f6:	3f01      	subs	r7, #1
 81128f8:	2f16      	cmp	r7, #22
 81128fa:	d851      	bhi.n	81129a0 <_dtoa_r+0x210>
 81128fc:	4b5b      	ldr	r3, [pc, #364]	@ (8112a6c <_dtoa_r+0x2dc>)
 81128fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8112902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112906:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 811290a:	f7ee f96f 	bl	8100bec <__aeabi_dcmplt>
 811290e:	2800      	cmp	r0, #0
 8112910:	d048      	beq.n	81129a4 <_dtoa_r+0x214>
 8112912:	3f01      	subs	r7, #1
 8112914:	2300      	movs	r3, #0
 8112916:	9312      	str	r3, [sp, #72]	@ 0x48
 8112918:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 811291a:	1b9b      	subs	r3, r3, r6
 811291c:	1e5a      	subs	r2, r3, #1
 811291e:	bf44      	itt	mi
 8112920:	f1c3 0801 	rsbmi	r8, r3, #1
 8112924:	2300      	movmi	r3, #0
 8112926:	9208      	str	r2, [sp, #32]
 8112928:	bf54      	ite	pl
 811292a:	f04f 0800 	movpl.w	r8, #0
 811292e:	9308      	strmi	r3, [sp, #32]
 8112930:	2f00      	cmp	r7, #0
 8112932:	db39      	blt.n	81129a8 <_dtoa_r+0x218>
 8112934:	9b08      	ldr	r3, [sp, #32]
 8112936:	970f      	str	r7, [sp, #60]	@ 0x3c
 8112938:	443b      	add	r3, r7
 811293a:	9308      	str	r3, [sp, #32]
 811293c:	2300      	movs	r3, #0
 811293e:	930a      	str	r3, [sp, #40]	@ 0x28
 8112940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8112942:	2b09      	cmp	r3, #9
 8112944:	d864      	bhi.n	8112a10 <_dtoa_r+0x280>
 8112946:	2b05      	cmp	r3, #5
 8112948:	bfc4      	itt	gt
 811294a:	3b04      	subgt	r3, #4
 811294c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 811294e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8112950:	f1a3 0302 	sub.w	r3, r3, #2
 8112954:	bfcc      	ite	gt
 8112956:	2400      	movgt	r4, #0
 8112958:	2401      	movle	r4, #1
 811295a:	2b03      	cmp	r3, #3
 811295c:	d863      	bhi.n	8112a26 <_dtoa_r+0x296>
 811295e:	e8df f003 	tbb	[pc, r3]
 8112962:	372a      	.short	0x372a
 8112964:	5535      	.short	0x5535
 8112966:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 811296a:	441e      	add	r6, r3
 811296c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8112970:	2b20      	cmp	r3, #32
 8112972:	bfc1      	itttt	gt
 8112974:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8112978:	409f      	lslgt	r7, r3
 811297a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 811297e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8112982:	bfd6      	itet	le
 8112984:	f1c3 0320 	rsble	r3, r3, #32
 8112988:	ea47 0003 	orrgt.w	r0, r7, r3
 811298c:	fa04 f003 	lslle.w	r0, r4, r3
 8112990:	f7ed fe40 	bl	8100614 <__aeabi_ui2d>
 8112994:	2201      	movs	r2, #1
 8112996:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 811299a:	3e01      	subs	r6, #1
 811299c:	9214      	str	r2, [sp, #80]	@ 0x50
 811299e:	e777      	b.n	8112890 <_dtoa_r+0x100>
 81129a0:	2301      	movs	r3, #1
 81129a2:	e7b8      	b.n	8112916 <_dtoa_r+0x186>
 81129a4:	9012      	str	r0, [sp, #72]	@ 0x48
 81129a6:	e7b7      	b.n	8112918 <_dtoa_r+0x188>
 81129a8:	427b      	negs	r3, r7
 81129aa:	930a      	str	r3, [sp, #40]	@ 0x28
 81129ac:	2300      	movs	r3, #0
 81129ae:	eba8 0807 	sub.w	r8, r8, r7
 81129b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 81129b4:	e7c4      	b.n	8112940 <_dtoa_r+0x1b0>
 81129b6:	2300      	movs	r3, #0
 81129b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 81129ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81129bc:	2b00      	cmp	r3, #0
 81129be:	dc35      	bgt.n	8112a2c <_dtoa_r+0x29c>
 81129c0:	2301      	movs	r3, #1
 81129c2:	9300      	str	r3, [sp, #0]
 81129c4:	9307      	str	r3, [sp, #28]
 81129c6:	461a      	mov	r2, r3
 81129c8:	920e      	str	r2, [sp, #56]	@ 0x38
 81129ca:	e00b      	b.n	81129e4 <_dtoa_r+0x254>
 81129cc:	2301      	movs	r3, #1
 81129ce:	e7f3      	b.n	81129b8 <_dtoa_r+0x228>
 81129d0:	2300      	movs	r3, #0
 81129d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 81129d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81129d6:	18fb      	adds	r3, r7, r3
 81129d8:	9300      	str	r3, [sp, #0]
 81129da:	3301      	adds	r3, #1
 81129dc:	2b01      	cmp	r3, #1
 81129de:	9307      	str	r3, [sp, #28]
 81129e0:	bfb8      	it	lt
 81129e2:	2301      	movlt	r3, #1
 81129e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 81129e8:	2100      	movs	r1, #0
 81129ea:	2204      	movs	r2, #4
 81129ec:	f102 0514 	add.w	r5, r2, #20
 81129f0:	429d      	cmp	r5, r3
 81129f2:	d91f      	bls.n	8112a34 <_dtoa_r+0x2a4>
 81129f4:	6041      	str	r1, [r0, #4]
 81129f6:	4658      	mov	r0, fp
 81129f8:	f000 fd8e 	bl	8113518 <_Balloc>
 81129fc:	4682      	mov	sl, r0
 81129fe:	2800      	cmp	r0, #0
 8112a00:	d13c      	bne.n	8112a7c <_dtoa_r+0x2ec>
 8112a02:	4b1b      	ldr	r3, [pc, #108]	@ (8112a70 <_dtoa_r+0x2e0>)
 8112a04:	4602      	mov	r2, r0
 8112a06:	f240 11af 	movw	r1, #431	@ 0x1af
 8112a0a:	e6d8      	b.n	81127be <_dtoa_r+0x2e>
 8112a0c:	2301      	movs	r3, #1
 8112a0e:	e7e0      	b.n	81129d2 <_dtoa_r+0x242>
 8112a10:	2401      	movs	r4, #1
 8112a12:	2300      	movs	r3, #0
 8112a14:	9309      	str	r3, [sp, #36]	@ 0x24
 8112a16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8112a18:	f04f 33ff 	mov.w	r3, #4294967295
 8112a1c:	9300      	str	r3, [sp, #0]
 8112a1e:	9307      	str	r3, [sp, #28]
 8112a20:	2200      	movs	r2, #0
 8112a22:	2312      	movs	r3, #18
 8112a24:	e7d0      	b.n	81129c8 <_dtoa_r+0x238>
 8112a26:	2301      	movs	r3, #1
 8112a28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8112a2a:	e7f5      	b.n	8112a18 <_dtoa_r+0x288>
 8112a2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8112a2e:	9300      	str	r3, [sp, #0]
 8112a30:	9307      	str	r3, [sp, #28]
 8112a32:	e7d7      	b.n	81129e4 <_dtoa_r+0x254>
 8112a34:	3101      	adds	r1, #1
 8112a36:	0052      	lsls	r2, r2, #1
 8112a38:	e7d8      	b.n	81129ec <_dtoa_r+0x25c>
 8112a3a:	bf00      	nop
 8112a3c:	f3af 8000 	nop.w
 8112a40:	636f4361 	.word	0x636f4361
 8112a44:	3fd287a7 	.word	0x3fd287a7
 8112a48:	8b60c8b3 	.word	0x8b60c8b3
 8112a4c:	3fc68a28 	.word	0x3fc68a28
 8112a50:	509f79fb 	.word	0x509f79fb
 8112a54:	3fd34413 	.word	0x3fd34413
 8112a58:	08116d08 	.word	0x08116d08
 8112a5c:	08116df9 	.word	0x08116df9
 8112a60:	7ff00000 	.word	0x7ff00000
 8112a64:	08116d88 	.word	0x08116d88
 8112a68:	3ff80000 	.word	0x3ff80000
 8112a6c:	08116ef0 	.word	0x08116ef0
 8112a70:	08116e51 	.word	0x08116e51
 8112a74:	08116df5 	.word	0x08116df5
 8112a78:	08116d87 	.word	0x08116d87
 8112a7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8112a80:	6018      	str	r0, [r3, #0]
 8112a82:	9b07      	ldr	r3, [sp, #28]
 8112a84:	2b0e      	cmp	r3, #14
 8112a86:	f200 80a4 	bhi.w	8112bd2 <_dtoa_r+0x442>
 8112a8a:	2c00      	cmp	r4, #0
 8112a8c:	f000 80a1 	beq.w	8112bd2 <_dtoa_r+0x442>
 8112a90:	2f00      	cmp	r7, #0
 8112a92:	dd33      	ble.n	8112afc <_dtoa_r+0x36c>
 8112a94:	4bad      	ldr	r3, [pc, #692]	@ (8112d4c <_dtoa_r+0x5bc>)
 8112a96:	f007 020f 	and.w	r2, r7, #15
 8112a9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8112a9e:	ed93 7b00 	vldr	d7, [r3]
 8112aa2:	05f8      	lsls	r0, r7, #23
 8112aa4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8112aa8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8112aac:	d516      	bpl.n	8112adc <_dtoa_r+0x34c>
 8112aae:	4ba8      	ldr	r3, [pc, #672]	@ (8112d50 <_dtoa_r+0x5c0>)
 8112ab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8112ab4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8112ab8:	f7ed ff50 	bl	810095c <__aeabi_ddiv>
 8112abc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8112ac0:	f004 040f 	and.w	r4, r4, #15
 8112ac4:	2603      	movs	r6, #3
 8112ac6:	4da2      	ldr	r5, [pc, #648]	@ (8112d50 <_dtoa_r+0x5c0>)
 8112ac8:	b954      	cbnz	r4, 8112ae0 <_dtoa_r+0x350>
 8112aca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8112ace:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8112ad2:	f7ed ff43 	bl	810095c <__aeabi_ddiv>
 8112ad6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8112ada:	e028      	b.n	8112b2e <_dtoa_r+0x39e>
 8112adc:	2602      	movs	r6, #2
 8112ade:	e7f2      	b.n	8112ac6 <_dtoa_r+0x336>
 8112ae0:	07e1      	lsls	r1, r4, #31
 8112ae2:	d508      	bpl.n	8112af6 <_dtoa_r+0x366>
 8112ae4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8112ae8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8112aec:	f7ed fe0c 	bl	8100708 <__aeabi_dmul>
 8112af0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8112af4:	3601      	adds	r6, #1
 8112af6:	1064      	asrs	r4, r4, #1
 8112af8:	3508      	adds	r5, #8
 8112afa:	e7e5      	b.n	8112ac8 <_dtoa_r+0x338>
 8112afc:	f000 80d2 	beq.w	8112ca4 <_dtoa_r+0x514>
 8112b00:	427c      	negs	r4, r7
 8112b02:	4b92      	ldr	r3, [pc, #584]	@ (8112d4c <_dtoa_r+0x5bc>)
 8112b04:	4d92      	ldr	r5, [pc, #584]	@ (8112d50 <_dtoa_r+0x5c0>)
 8112b06:	f004 020f 	and.w	r2, r4, #15
 8112b0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8112b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112b12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8112b16:	f7ed fdf7 	bl	8100708 <__aeabi_dmul>
 8112b1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8112b1e:	1124      	asrs	r4, r4, #4
 8112b20:	2300      	movs	r3, #0
 8112b22:	2602      	movs	r6, #2
 8112b24:	2c00      	cmp	r4, #0
 8112b26:	f040 80b2 	bne.w	8112c8e <_dtoa_r+0x4fe>
 8112b2a:	2b00      	cmp	r3, #0
 8112b2c:	d1d3      	bne.n	8112ad6 <_dtoa_r+0x346>
 8112b2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8112b30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8112b34:	2b00      	cmp	r3, #0
 8112b36:	f000 80b7 	beq.w	8112ca8 <_dtoa_r+0x518>
 8112b3a:	4b86      	ldr	r3, [pc, #536]	@ (8112d54 <_dtoa_r+0x5c4>)
 8112b3c:	2200      	movs	r2, #0
 8112b3e:	4620      	mov	r0, r4
 8112b40:	4629      	mov	r1, r5
 8112b42:	f7ee f853 	bl	8100bec <__aeabi_dcmplt>
 8112b46:	2800      	cmp	r0, #0
 8112b48:	f000 80ae 	beq.w	8112ca8 <_dtoa_r+0x518>
 8112b4c:	9b07      	ldr	r3, [sp, #28]
 8112b4e:	2b00      	cmp	r3, #0
 8112b50:	f000 80aa 	beq.w	8112ca8 <_dtoa_r+0x518>
 8112b54:	9b00      	ldr	r3, [sp, #0]
 8112b56:	2b00      	cmp	r3, #0
 8112b58:	dd37      	ble.n	8112bca <_dtoa_r+0x43a>
 8112b5a:	1e7b      	subs	r3, r7, #1
 8112b5c:	9304      	str	r3, [sp, #16]
 8112b5e:	4620      	mov	r0, r4
 8112b60:	4b7d      	ldr	r3, [pc, #500]	@ (8112d58 <_dtoa_r+0x5c8>)
 8112b62:	2200      	movs	r2, #0
 8112b64:	4629      	mov	r1, r5
 8112b66:	f7ed fdcf 	bl	8100708 <__aeabi_dmul>
 8112b6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8112b6e:	9c00      	ldr	r4, [sp, #0]
 8112b70:	3601      	adds	r6, #1
 8112b72:	4630      	mov	r0, r6
 8112b74:	f7ed fd5e 	bl	8100634 <__aeabi_i2d>
 8112b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8112b7c:	f7ed fdc4 	bl	8100708 <__aeabi_dmul>
 8112b80:	4b76      	ldr	r3, [pc, #472]	@ (8112d5c <_dtoa_r+0x5cc>)
 8112b82:	2200      	movs	r2, #0
 8112b84:	f7ed fc0a 	bl	810039c <__adddf3>
 8112b88:	4605      	mov	r5, r0
 8112b8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8112b8e:	2c00      	cmp	r4, #0
 8112b90:	f040 808d 	bne.w	8112cae <_dtoa_r+0x51e>
 8112b94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8112b98:	4b71      	ldr	r3, [pc, #452]	@ (8112d60 <_dtoa_r+0x5d0>)
 8112b9a:	2200      	movs	r2, #0
 8112b9c:	f7ed fbfc 	bl	8100398 <__aeabi_dsub>
 8112ba0:	4602      	mov	r2, r0
 8112ba2:	460b      	mov	r3, r1
 8112ba4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8112ba8:	462a      	mov	r2, r5
 8112baa:	4633      	mov	r3, r6
 8112bac:	f7ee f83c 	bl	8100c28 <__aeabi_dcmpgt>
 8112bb0:	2800      	cmp	r0, #0
 8112bb2:	f040 828b 	bne.w	81130cc <_dtoa_r+0x93c>
 8112bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8112bba:	462a      	mov	r2, r5
 8112bbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8112bc0:	f7ee f814 	bl	8100bec <__aeabi_dcmplt>
 8112bc4:	2800      	cmp	r0, #0
 8112bc6:	f040 8128 	bne.w	8112e1a <_dtoa_r+0x68a>
 8112bca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8112bce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8112bd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8112bd4:	2b00      	cmp	r3, #0
 8112bd6:	f2c0 815a 	blt.w	8112e8e <_dtoa_r+0x6fe>
 8112bda:	2f0e      	cmp	r7, #14
 8112bdc:	f300 8157 	bgt.w	8112e8e <_dtoa_r+0x6fe>
 8112be0:	4b5a      	ldr	r3, [pc, #360]	@ (8112d4c <_dtoa_r+0x5bc>)
 8112be2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8112be6:	ed93 7b00 	vldr	d7, [r3]
 8112bea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8112bec:	2b00      	cmp	r3, #0
 8112bee:	ed8d 7b00 	vstr	d7, [sp]
 8112bf2:	da03      	bge.n	8112bfc <_dtoa_r+0x46c>
 8112bf4:	9b07      	ldr	r3, [sp, #28]
 8112bf6:	2b00      	cmp	r3, #0
 8112bf8:	f340 8101 	ble.w	8112dfe <_dtoa_r+0x66e>
 8112bfc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8112c00:	4656      	mov	r6, sl
 8112c02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8112c06:	4620      	mov	r0, r4
 8112c08:	4629      	mov	r1, r5
 8112c0a:	f7ed fea7 	bl	810095c <__aeabi_ddiv>
 8112c0e:	f7ee f82b 	bl	8100c68 <__aeabi_d2iz>
 8112c12:	4680      	mov	r8, r0
 8112c14:	f7ed fd0e 	bl	8100634 <__aeabi_i2d>
 8112c18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8112c1c:	f7ed fd74 	bl	8100708 <__aeabi_dmul>
 8112c20:	4602      	mov	r2, r0
 8112c22:	460b      	mov	r3, r1
 8112c24:	4620      	mov	r0, r4
 8112c26:	4629      	mov	r1, r5
 8112c28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8112c2c:	f7ed fbb4 	bl	8100398 <__aeabi_dsub>
 8112c30:	f806 4b01 	strb.w	r4, [r6], #1
 8112c34:	9d07      	ldr	r5, [sp, #28]
 8112c36:	eba6 040a 	sub.w	r4, r6, sl
 8112c3a:	42a5      	cmp	r5, r4
 8112c3c:	4602      	mov	r2, r0
 8112c3e:	460b      	mov	r3, r1
 8112c40:	f040 8117 	bne.w	8112e72 <_dtoa_r+0x6e2>
 8112c44:	f7ed fbaa 	bl	810039c <__adddf3>
 8112c48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8112c4c:	4604      	mov	r4, r0
 8112c4e:	460d      	mov	r5, r1
 8112c50:	f7ed ffea 	bl	8100c28 <__aeabi_dcmpgt>
 8112c54:	2800      	cmp	r0, #0
 8112c56:	f040 80f9 	bne.w	8112e4c <_dtoa_r+0x6bc>
 8112c5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8112c5e:	4620      	mov	r0, r4
 8112c60:	4629      	mov	r1, r5
 8112c62:	f7ed ffb9 	bl	8100bd8 <__aeabi_dcmpeq>
 8112c66:	b118      	cbz	r0, 8112c70 <_dtoa_r+0x4e0>
 8112c68:	f018 0f01 	tst.w	r8, #1
 8112c6c:	f040 80ee 	bne.w	8112e4c <_dtoa_r+0x6bc>
 8112c70:	4649      	mov	r1, r9
 8112c72:	4658      	mov	r0, fp
 8112c74:	f000 fc90 	bl	8113598 <_Bfree>
 8112c78:	2300      	movs	r3, #0
 8112c7a:	7033      	strb	r3, [r6, #0]
 8112c7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8112c7e:	3701      	adds	r7, #1
 8112c80:	601f      	str	r7, [r3, #0]
 8112c82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8112c84:	2b00      	cmp	r3, #0
 8112c86:	f000 831d 	beq.w	81132c4 <_dtoa_r+0xb34>
 8112c8a:	601e      	str	r6, [r3, #0]
 8112c8c:	e31a      	b.n	81132c4 <_dtoa_r+0xb34>
 8112c8e:	07e2      	lsls	r2, r4, #31
 8112c90:	d505      	bpl.n	8112c9e <_dtoa_r+0x50e>
 8112c92:	e9d5 2300 	ldrd	r2, r3, [r5]
 8112c96:	f7ed fd37 	bl	8100708 <__aeabi_dmul>
 8112c9a:	3601      	adds	r6, #1
 8112c9c:	2301      	movs	r3, #1
 8112c9e:	1064      	asrs	r4, r4, #1
 8112ca0:	3508      	adds	r5, #8
 8112ca2:	e73f      	b.n	8112b24 <_dtoa_r+0x394>
 8112ca4:	2602      	movs	r6, #2
 8112ca6:	e742      	b.n	8112b2e <_dtoa_r+0x39e>
 8112ca8:	9c07      	ldr	r4, [sp, #28]
 8112caa:	9704      	str	r7, [sp, #16]
 8112cac:	e761      	b.n	8112b72 <_dtoa_r+0x3e2>
 8112cae:	4b27      	ldr	r3, [pc, #156]	@ (8112d4c <_dtoa_r+0x5bc>)
 8112cb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8112cb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8112cb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8112cba:	4454      	add	r4, sl
 8112cbc:	2900      	cmp	r1, #0
 8112cbe:	d053      	beq.n	8112d68 <_dtoa_r+0x5d8>
 8112cc0:	4928      	ldr	r1, [pc, #160]	@ (8112d64 <_dtoa_r+0x5d4>)
 8112cc2:	2000      	movs	r0, #0
 8112cc4:	f7ed fe4a 	bl	810095c <__aeabi_ddiv>
 8112cc8:	4633      	mov	r3, r6
 8112cca:	462a      	mov	r2, r5
 8112ccc:	f7ed fb64 	bl	8100398 <__aeabi_dsub>
 8112cd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8112cd4:	4656      	mov	r6, sl
 8112cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8112cda:	f7ed ffc5 	bl	8100c68 <__aeabi_d2iz>
 8112cde:	4605      	mov	r5, r0
 8112ce0:	f7ed fca8 	bl	8100634 <__aeabi_i2d>
 8112ce4:	4602      	mov	r2, r0
 8112ce6:	460b      	mov	r3, r1
 8112ce8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8112cec:	f7ed fb54 	bl	8100398 <__aeabi_dsub>
 8112cf0:	3530      	adds	r5, #48	@ 0x30
 8112cf2:	4602      	mov	r2, r0
 8112cf4:	460b      	mov	r3, r1
 8112cf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8112cfa:	f806 5b01 	strb.w	r5, [r6], #1
 8112cfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8112d02:	f7ed ff73 	bl	8100bec <__aeabi_dcmplt>
 8112d06:	2800      	cmp	r0, #0
 8112d08:	d171      	bne.n	8112dee <_dtoa_r+0x65e>
 8112d0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8112d0e:	4911      	ldr	r1, [pc, #68]	@ (8112d54 <_dtoa_r+0x5c4>)
 8112d10:	2000      	movs	r0, #0
 8112d12:	f7ed fb41 	bl	8100398 <__aeabi_dsub>
 8112d16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8112d1a:	f7ed ff67 	bl	8100bec <__aeabi_dcmplt>
 8112d1e:	2800      	cmp	r0, #0
 8112d20:	f040 8095 	bne.w	8112e4e <_dtoa_r+0x6be>
 8112d24:	42a6      	cmp	r6, r4
 8112d26:	f43f af50 	beq.w	8112bca <_dtoa_r+0x43a>
 8112d2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8112d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8112d58 <_dtoa_r+0x5c8>)
 8112d30:	2200      	movs	r2, #0
 8112d32:	f7ed fce9 	bl	8100708 <__aeabi_dmul>
 8112d36:	4b08      	ldr	r3, [pc, #32]	@ (8112d58 <_dtoa_r+0x5c8>)
 8112d38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8112d3c:	2200      	movs	r2, #0
 8112d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8112d42:	f7ed fce1 	bl	8100708 <__aeabi_dmul>
 8112d46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8112d4a:	e7c4      	b.n	8112cd6 <_dtoa_r+0x546>
 8112d4c:	08116ef0 	.word	0x08116ef0
 8112d50:	08116ec8 	.word	0x08116ec8
 8112d54:	3ff00000 	.word	0x3ff00000
 8112d58:	40240000 	.word	0x40240000
 8112d5c:	401c0000 	.word	0x401c0000
 8112d60:	40140000 	.word	0x40140000
 8112d64:	3fe00000 	.word	0x3fe00000
 8112d68:	4631      	mov	r1, r6
 8112d6a:	4628      	mov	r0, r5
 8112d6c:	f7ed fccc 	bl	8100708 <__aeabi_dmul>
 8112d70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8112d74:	9415      	str	r4, [sp, #84]	@ 0x54
 8112d76:	4656      	mov	r6, sl
 8112d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8112d7c:	f7ed ff74 	bl	8100c68 <__aeabi_d2iz>
 8112d80:	4605      	mov	r5, r0
 8112d82:	f7ed fc57 	bl	8100634 <__aeabi_i2d>
 8112d86:	4602      	mov	r2, r0
 8112d88:	460b      	mov	r3, r1
 8112d8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8112d8e:	f7ed fb03 	bl	8100398 <__aeabi_dsub>
 8112d92:	3530      	adds	r5, #48	@ 0x30
 8112d94:	f806 5b01 	strb.w	r5, [r6], #1
 8112d98:	4602      	mov	r2, r0
 8112d9a:	460b      	mov	r3, r1
 8112d9c:	42a6      	cmp	r6, r4
 8112d9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8112da2:	f04f 0200 	mov.w	r2, #0
 8112da6:	d124      	bne.n	8112df2 <_dtoa_r+0x662>
 8112da8:	4bac      	ldr	r3, [pc, #688]	@ (811305c <_dtoa_r+0x8cc>)
 8112daa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8112dae:	f7ed faf5 	bl	810039c <__adddf3>
 8112db2:	4602      	mov	r2, r0
 8112db4:	460b      	mov	r3, r1
 8112db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8112dba:	f7ed ff35 	bl	8100c28 <__aeabi_dcmpgt>
 8112dbe:	2800      	cmp	r0, #0
 8112dc0:	d145      	bne.n	8112e4e <_dtoa_r+0x6be>
 8112dc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8112dc6:	49a5      	ldr	r1, [pc, #660]	@ (811305c <_dtoa_r+0x8cc>)
 8112dc8:	2000      	movs	r0, #0
 8112dca:	f7ed fae5 	bl	8100398 <__aeabi_dsub>
 8112dce:	4602      	mov	r2, r0
 8112dd0:	460b      	mov	r3, r1
 8112dd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8112dd6:	f7ed ff09 	bl	8100bec <__aeabi_dcmplt>
 8112dda:	2800      	cmp	r0, #0
 8112ddc:	f43f aef5 	beq.w	8112bca <_dtoa_r+0x43a>
 8112de0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8112de2:	1e73      	subs	r3, r6, #1
 8112de4:	9315      	str	r3, [sp, #84]	@ 0x54
 8112de6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8112dea:	2b30      	cmp	r3, #48	@ 0x30
 8112dec:	d0f8      	beq.n	8112de0 <_dtoa_r+0x650>
 8112dee:	9f04      	ldr	r7, [sp, #16]
 8112df0:	e73e      	b.n	8112c70 <_dtoa_r+0x4e0>
 8112df2:	4b9b      	ldr	r3, [pc, #620]	@ (8113060 <_dtoa_r+0x8d0>)
 8112df4:	f7ed fc88 	bl	8100708 <__aeabi_dmul>
 8112df8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8112dfc:	e7bc      	b.n	8112d78 <_dtoa_r+0x5e8>
 8112dfe:	d10c      	bne.n	8112e1a <_dtoa_r+0x68a>
 8112e00:	4b98      	ldr	r3, [pc, #608]	@ (8113064 <_dtoa_r+0x8d4>)
 8112e02:	2200      	movs	r2, #0
 8112e04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8112e08:	f7ed fc7e 	bl	8100708 <__aeabi_dmul>
 8112e0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8112e10:	f7ed ff00 	bl	8100c14 <__aeabi_dcmpge>
 8112e14:	2800      	cmp	r0, #0
 8112e16:	f000 8157 	beq.w	81130c8 <_dtoa_r+0x938>
 8112e1a:	2400      	movs	r4, #0
 8112e1c:	4625      	mov	r5, r4
 8112e1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8112e20:	43db      	mvns	r3, r3
 8112e22:	9304      	str	r3, [sp, #16]
 8112e24:	4656      	mov	r6, sl
 8112e26:	2700      	movs	r7, #0
 8112e28:	4621      	mov	r1, r4
 8112e2a:	4658      	mov	r0, fp
 8112e2c:	f000 fbb4 	bl	8113598 <_Bfree>
 8112e30:	2d00      	cmp	r5, #0
 8112e32:	d0dc      	beq.n	8112dee <_dtoa_r+0x65e>
 8112e34:	b12f      	cbz	r7, 8112e42 <_dtoa_r+0x6b2>
 8112e36:	42af      	cmp	r7, r5
 8112e38:	d003      	beq.n	8112e42 <_dtoa_r+0x6b2>
 8112e3a:	4639      	mov	r1, r7
 8112e3c:	4658      	mov	r0, fp
 8112e3e:	f000 fbab 	bl	8113598 <_Bfree>
 8112e42:	4629      	mov	r1, r5
 8112e44:	4658      	mov	r0, fp
 8112e46:	f000 fba7 	bl	8113598 <_Bfree>
 8112e4a:	e7d0      	b.n	8112dee <_dtoa_r+0x65e>
 8112e4c:	9704      	str	r7, [sp, #16]
 8112e4e:	4633      	mov	r3, r6
 8112e50:	461e      	mov	r6, r3
 8112e52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8112e56:	2a39      	cmp	r2, #57	@ 0x39
 8112e58:	d107      	bne.n	8112e6a <_dtoa_r+0x6da>
 8112e5a:	459a      	cmp	sl, r3
 8112e5c:	d1f8      	bne.n	8112e50 <_dtoa_r+0x6c0>
 8112e5e:	9a04      	ldr	r2, [sp, #16]
 8112e60:	3201      	adds	r2, #1
 8112e62:	9204      	str	r2, [sp, #16]
 8112e64:	2230      	movs	r2, #48	@ 0x30
 8112e66:	f88a 2000 	strb.w	r2, [sl]
 8112e6a:	781a      	ldrb	r2, [r3, #0]
 8112e6c:	3201      	adds	r2, #1
 8112e6e:	701a      	strb	r2, [r3, #0]
 8112e70:	e7bd      	b.n	8112dee <_dtoa_r+0x65e>
 8112e72:	4b7b      	ldr	r3, [pc, #492]	@ (8113060 <_dtoa_r+0x8d0>)
 8112e74:	2200      	movs	r2, #0
 8112e76:	f7ed fc47 	bl	8100708 <__aeabi_dmul>
 8112e7a:	2200      	movs	r2, #0
 8112e7c:	2300      	movs	r3, #0
 8112e7e:	4604      	mov	r4, r0
 8112e80:	460d      	mov	r5, r1
 8112e82:	f7ed fea9 	bl	8100bd8 <__aeabi_dcmpeq>
 8112e86:	2800      	cmp	r0, #0
 8112e88:	f43f aebb 	beq.w	8112c02 <_dtoa_r+0x472>
 8112e8c:	e6f0      	b.n	8112c70 <_dtoa_r+0x4e0>
 8112e8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8112e90:	2a00      	cmp	r2, #0
 8112e92:	f000 80db 	beq.w	811304c <_dtoa_r+0x8bc>
 8112e96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8112e98:	2a01      	cmp	r2, #1
 8112e9a:	f300 80bf 	bgt.w	811301c <_dtoa_r+0x88c>
 8112e9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8112ea0:	2a00      	cmp	r2, #0
 8112ea2:	f000 80b7 	beq.w	8113014 <_dtoa_r+0x884>
 8112ea6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8112eaa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8112eac:	4646      	mov	r6, r8
 8112eae:	9a08      	ldr	r2, [sp, #32]
 8112eb0:	2101      	movs	r1, #1
 8112eb2:	441a      	add	r2, r3
 8112eb4:	4658      	mov	r0, fp
 8112eb6:	4498      	add	r8, r3
 8112eb8:	9208      	str	r2, [sp, #32]
 8112eba:	f000 fc6b 	bl	8113794 <__i2b>
 8112ebe:	4605      	mov	r5, r0
 8112ec0:	b15e      	cbz	r6, 8112eda <_dtoa_r+0x74a>
 8112ec2:	9b08      	ldr	r3, [sp, #32]
 8112ec4:	2b00      	cmp	r3, #0
 8112ec6:	dd08      	ble.n	8112eda <_dtoa_r+0x74a>
 8112ec8:	42b3      	cmp	r3, r6
 8112eca:	9a08      	ldr	r2, [sp, #32]
 8112ecc:	bfa8      	it	ge
 8112ece:	4633      	movge	r3, r6
 8112ed0:	eba8 0803 	sub.w	r8, r8, r3
 8112ed4:	1af6      	subs	r6, r6, r3
 8112ed6:	1ad3      	subs	r3, r2, r3
 8112ed8:	9308      	str	r3, [sp, #32]
 8112eda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8112edc:	b1f3      	cbz	r3, 8112f1c <_dtoa_r+0x78c>
 8112ede:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8112ee0:	2b00      	cmp	r3, #0
 8112ee2:	f000 80b7 	beq.w	8113054 <_dtoa_r+0x8c4>
 8112ee6:	b18c      	cbz	r4, 8112f0c <_dtoa_r+0x77c>
 8112ee8:	4629      	mov	r1, r5
 8112eea:	4622      	mov	r2, r4
 8112eec:	4658      	mov	r0, fp
 8112eee:	f000 fd11 	bl	8113914 <__pow5mult>
 8112ef2:	464a      	mov	r2, r9
 8112ef4:	4601      	mov	r1, r0
 8112ef6:	4605      	mov	r5, r0
 8112ef8:	4658      	mov	r0, fp
 8112efa:	f000 fc61 	bl	81137c0 <__multiply>
 8112efe:	4649      	mov	r1, r9
 8112f00:	9004      	str	r0, [sp, #16]
 8112f02:	4658      	mov	r0, fp
 8112f04:	f000 fb48 	bl	8113598 <_Bfree>
 8112f08:	9b04      	ldr	r3, [sp, #16]
 8112f0a:	4699      	mov	r9, r3
 8112f0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8112f0e:	1b1a      	subs	r2, r3, r4
 8112f10:	d004      	beq.n	8112f1c <_dtoa_r+0x78c>
 8112f12:	4649      	mov	r1, r9
 8112f14:	4658      	mov	r0, fp
 8112f16:	f000 fcfd 	bl	8113914 <__pow5mult>
 8112f1a:	4681      	mov	r9, r0
 8112f1c:	2101      	movs	r1, #1
 8112f1e:	4658      	mov	r0, fp
 8112f20:	f000 fc38 	bl	8113794 <__i2b>
 8112f24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8112f26:	4604      	mov	r4, r0
 8112f28:	2b00      	cmp	r3, #0
 8112f2a:	f000 81cf 	beq.w	81132cc <_dtoa_r+0xb3c>
 8112f2e:	461a      	mov	r2, r3
 8112f30:	4601      	mov	r1, r0
 8112f32:	4658      	mov	r0, fp
 8112f34:	f000 fcee 	bl	8113914 <__pow5mult>
 8112f38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8112f3a:	2b01      	cmp	r3, #1
 8112f3c:	4604      	mov	r4, r0
 8112f3e:	f300 8095 	bgt.w	811306c <_dtoa_r+0x8dc>
 8112f42:	9b02      	ldr	r3, [sp, #8]
 8112f44:	2b00      	cmp	r3, #0
 8112f46:	f040 8087 	bne.w	8113058 <_dtoa_r+0x8c8>
 8112f4a:	9b03      	ldr	r3, [sp, #12]
 8112f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8112f50:	2b00      	cmp	r3, #0
 8112f52:	f040 8089 	bne.w	8113068 <_dtoa_r+0x8d8>
 8112f56:	9b03      	ldr	r3, [sp, #12]
 8112f58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8112f5c:	0d1b      	lsrs	r3, r3, #20
 8112f5e:	051b      	lsls	r3, r3, #20
 8112f60:	b12b      	cbz	r3, 8112f6e <_dtoa_r+0x7de>
 8112f62:	9b08      	ldr	r3, [sp, #32]
 8112f64:	3301      	adds	r3, #1
 8112f66:	9308      	str	r3, [sp, #32]
 8112f68:	f108 0801 	add.w	r8, r8, #1
 8112f6c:	2301      	movs	r3, #1
 8112f6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8112f70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8112f72:	2b00      	cmp	r3, #0
 8112f74:	f000 81b0 	beq.w	81132d8 <_dtoa_r+0xb48>
 8112f78:	6923      	ldr	r3, [r4, #16]
 8112f7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8112f7e:	6918      	ldr	r0, [r3, #16]
 8112f80:	f000 fbbc 	bl	81136fc <__hi0bits>
 8112f84:	f1c0 0020 	rsb	r0, r0, #32
 8112f88:	9b08      	ldr	r3, [sp, #32]
 8112f8a:	4418      	add	r0, r3
 8112f8c:	f010 001f 	ands.w	r0, r0, #31
 8112f90:	d077      	beq.n	8113082 <_dtoa_r+0x8f2>
 8112f92:	f1c0 0320 	rsb	r3, r0, #32
 8112f96:	2b04      	cmp	r3, #4
 8112f98:	dd6b      	ble.n	8113072 <_dtoa_r+0x8e2>
 8112f9a:	9b08      	ldr	r3, [sp, #32]
 8112f9c:	f1c0 001c 	rsb	r0, r0, #28
 8112fa0:	4403      	add	r3, r0
 8112fa2:	4480      	add	r8, r0
 8112fa4:	4406      	add	r6, r0
 8112fa6:	9308      	str	r3, [sp, #32]
 8112fa8:	f1b8 0f00 	cmp.w	r8, #0
 8112fac:	dd05      	ble.n	8112fba <_dtoa_r+0x82a>
 8112fae:	4649      	mov	r1, r9
 8112fb0:	4642      	mov	r2, r8
 8112fb2:	4658      	mov	r0, fp
 8112fb4:	f000 fd08 	bl	81139c8 <__lshift>
 8112fb8:	4681      	mov	r9, r0
 8112fba:	9b08      	ldr	r3, [sp, #32]
 8112fbc:	2b00      	cmp	r3, #0
 8112fbe:	dd05      	ble.n	8112fcc <_dtoa_r+0x83c>
 8112fc0:	4621      	mov	r1, r4
 8112fc2:	461a      	mov	r2, r3
 8112fc4:	4658      	mov	r0, fp
 8112fc6:	f000 fcff 	bl	81139c8 <__lshift>
 8112fca:	4604      	mov	r4, r0
 8112fcc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8112fce:	2b00      	cmp	r3, #0
 8112fd0:	d059      	beq.n	8113086 <_dtoa_r+0x8f6>
 8112fd2:	4621      	mov	r1, r4
 8112fd4:	4648      	mov	r0, r9
 8112fd6:	f000 fd63 	bl	8113aa0 <__mcmp>
 8112fda:	2800      	cmp	r0, #0
 8112fdc:	da53      	bge.n	8113086 <_dtoa_r+0x8f6>
 8112fde:	1e7b      	subs	r3, r7, #1
 8112fe0:	9304      	str	r3, [sp, #16]
 8112fe2:	4649      	mov	r1, r9
 8112fe4:	2300      	movs	r3, #0
 8112fe6:	220a      	movs	r2, #10
 8112fe8:	4658      	mov	r0, fp
 8112fea:	f000 faf7 	bl	81135dc <__multadd>
 8112fee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8112ff0:	4681      	mov	r9, r0
 8112ff2:	2b00      	cmp	r3, #0
 8112ff4:	f000 8172 	beq.w	81132dc <_dtoa_r+0xb4c>
 8112ff8:	2300      	movs	r3, #0
 8112ffa:	4629      	mov	r1, r5
 8112ffc:	220a      	movs	r2, #10
 8112ffe:	4658      	mov	r0, fp
 8113000:	f000 faec 	bl	81135dc <__multadd>
 8113004:	9b00      	ldr	r3, [sp, #0]
 8113006:	2b00      	cmp	r3, #0
 8113008:	4605      	mov	r5, r0
 811300a:	dc67      	bgt.n	81130dc <_dtoa_r+0x94c>
 811300c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811300e:	2b02      	cmp	r3, #2
 8113010:	dc41      	bgt.n	8113096 <_dtoa_r+0x906>
 8113012:	e063      	b.n	81130dc <_dtoa_r+0x94c>
 8113014:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8113016:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 811301a:	e746      	b.n	8112eaa <_dtoa_r+0x71a>
 811301c:	9b07      	ldr	r3, [sp, #28]
 811301e:	1e5c      	subs	r4, r3, #1
 8113020:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8113022:	42a3      	cmp	r3, r4
 8113024:	bfbf      	itttt	lt
 8113026:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8113028:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 811302a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 811302c:	1ae3      	sublt	r3, r4, r3
 811302e:	bfb4      	ite	lt
 8113030:	18d2      	addlt	r2, r2, r3
 8113032:	1b1c      	subge	r4, r3, r4
 8113034:	9b07      	ldr	r3, [sp, #28]
 8113036:	bfbc      	itt	lt
 8113038:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 811303a:	2400      	movlt	r4, #0
 811303c:	2b00      	cmp	r3, #0
 811303e:	bfb5      	itete	lt
 8113040:	eba8 0603 	sublt.w	r6, r8, r3
 8113044:	9b07      	ldrge	r3, [sp, #28]
 8113046:	2300      	movlt	r3, #0
 8113048:	4646      	movge	r6, r8
 811304a:	e730      	b.n	8112eae <_dtoa_r+0x71e>
 811304c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 811304e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8113050:	4646      	mov	r6, r8
 8113052:	e735      	b.n	8112ec0 <_dtoa_r+0x730>
 8113054:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8113056:	e75c      	b.n	8112f12 <_dtoa_r+0x782>
 8113058:	2300      	movs	r3, #0
 811305a:	e788      	b.n	8112f6e <_dtoa_r+0x7de>
 811305c:	3fe00000 	.word	0x3fe00000
 8113060:	40240000 	.word	0x40240000
 8113064:	40140000 	.word	0x40140000
 8113068:	9b02      	ldr	r3, [sp, #8]
 811306a:	e780      	b.n	8112f6e <_dtoa_r+0x7de>
 811306c:	2300      	movs	r3, #0
 811306e:	930a      	str	r3, [sp, #40]	@ 0x28
 8113070:	e782      	b.n	8112f78 <_dtoa_r+0x7e8>
 8113072:	d099      	beq.n	8112fa8 <_dtoa_r+0x818>
 8113074:	9a08      	ldr	r2, [sp, #32]
 8113076:	331c      	adds	r3, #28
 8113078:	441a      	add	r2, r3
 811307a:	4498      	add	r8, r3
 811307c:	441e      	add	r6, r3
 811307e:	9208      	str	r2, [sp, #32]
 8113080:	e792      	b.n	8112fa8 <_dtoa_r+0x818>
 8113082:	4603      	mov	r3, r0
 8113084:	e7f6      	b.n	8113074 <_dtoa_r+0x8e4>
 8113086:	9b07      	ldr	r3, [sp, #28]
 8113088:	9704      	str	r7, [sp, #16]
 811308a:	2b00      	cmp	r3, #0
 811308c:	dc20      	bgt.n	81130d0 <_dtoa_r+0x940>
 811308e:	9300      	str	r3, [sp, #0]
 8113090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8113092:	2b02      	cmp	r3, #2
 8113094:	dd1e      	ble.n	81130d4 <_dtoa_r+0x944>
 8113096:	9b00      	ldr	r3, [sp, #0]
 8113098:	2b00      	cmp	r3, #0
 811309a:	f47f aec0 	bne.w	8112e1e <_dtoa_r+0x68e>
 811309e:	4621      	mov	r1, r4
 81130a0:	2205      	movs	r2, #5
 81130a2:	4658      	mov	r0, fp
 81130a4:	f000 fa9a 	bl	81135dc <__multadd>
 81130a8:	4601      	mov	r1, r0
 81130aa:	4604      	mov	r4, r0
 81130ac:	4648      	mov	r0, r9
 81130ae:	f000 fcf7 	bl	8113aa0 <__mcmp>
 81130b2:	2800      	cmp	r0, #0
 81130b4:	f77f aeb3 	ble.w	8112e1e <_dtoa_r+0x68e>
 81130b8:	4656      	mov	r6, sl
 81130ba:	2331      	movs	r3, #49	@ 0x31
 81130bc:	f806 3b01 	strb.w	r3, [r6], #1
 81130c0:	9b04      	ldr	r3, [sp, #16]
 81130c2:	3301      	adds	r3, #1
 81130c4:	9304      	str	r3, [sp, #16]
 81130c6:	e6ae      	b.n	8112e26 <_dtoa_r+0x696>
 81130c8:	9c07      	ldr	r4, [sp, #28]
 81130ca:	9704      	str	r7, [sp, #16]
 81130cc:	4625      	mov	r5, r4
 81130ce:	e7f3      	b.n	81130b8 <_dtoa_r+0x928>
 81130d0:	9b07      	ldr	r3, [sp, #28]
 81130d2:	9300      	str	r3, [sp, #0]
 81130d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 81130d6:	2b00      	cmp	r3, #0
 81130d8:	f000 8104 	beq.w	81132e4 <_dtoa_r+0xb54>
 81130dc:	2e00      	cmp	r6, #0
 81130de:	dd05      	ble.n	81130ec <_dtoa_r+0x95c>
 81130e0:	4629      	mov	r1, r5
 81130e2:	4632      	mov	r2, r6
 81130e4:	4658      	mov	r0, fp
 81130e6:	f000 fc6f 	bl	81139c8 <__lshift>
 81130ea:	4605      	mov	r5, r0
 81130ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81130ee:	2b00      	cmp	r3, #0
 81130f0:	d05a      	beq.n	81131a8 <_dtoa_r+0xa18>
 81130f2:	6869      	ldr	r1, [r5, #4]
 81130f4:	4658      	mov	r0, fp
 81130f6:	f000 fa0f 	bl	8113518 <_Balloc>
 81130fa:	4606      	mov	r6, r0
 81130fc:	b928      	cbnz	r0, 811310a <_dtoa_r+0x97a>
 81130fe:	4b84      	ldr	r3, [pc, #528]	@ (8113310 <_dtoa_r+0xb80>)
 8113100:	4602      	mov	r2, r0
 8113102:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8113106:	f7ff bb5a 	b.w	81127be <_dtoa_r+0x2e>
 811310a:	692a      	ldr	r2, [r5, #16]
 811310c:	3202      	adds	r2, #2
 811310e:	0092      	lsls	r2, r2, #2
 8113110:	f105 010c 	add.w	r1, r5, #12
 8113114:	300c      	adds	r0, #12
 8113116:	f7ff fa80 	bl	811261a <memcpy>
 811311a:	2201      	movs	r2, #1
 811311c:	4631      	mov	r1, r6
 811311e:	4658      	mov	r0, fp
 8113120:	f000 fc52 	bl	81139c8 <__lshift>
 8113124:	f10a 0301 	add.w	r3, sl, #1
 8113128:	9307      	str	r3, [sp, #28]
 811312a:	9b00      	ldr	r3, [sp, #0]
 811312c:	4453      	add	r3, sl
 811312e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8113130:	9b02      	ldr	r3, [sp, #8]
 8113132:	f003 0301 	and.w	r3, r3, #1
 8113136:	462f      	mov	r7, r5
 8113138:	930a      	str	r3, [sp, #40]	@ 0x28
 811313a:	4605      	mov	r5, r0
 811313c:	9b07      	ldr	r3, [sp, #28]
 811313e:	4621      	mov	r1, r4
 8113140:	3b01      	subs	r3, #1
 8113142:	4648      	mov	r0, r9
 8113144:	9300      	str	r3, [sp, #0]
 8113146:	f7ff fa9b 	bl	8112680 <quorem>
 811314a:	4639      	mov	r1, r7
 811314c:	9002      	str	r0, [sp, #8]
 811314e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8113152:	4648      	mov	r0, r9
 8113154:	f000 fca4 	bl	8113aa0 <__mcmp>
 8113158:	462a      	mov	r2, r5
 811315a:	9008      	str	r0, [sp, #32]
 811315c:	4621      	mov	r1, r4
 811315e:	4658      	mov	r0, fp
 8113160:	f000 fcba 	bl	8113ad8 <__mdiff>
 8113164:	68c2      	ldr	r2, [r0, #12]
 8113166:	4606      	mov	r6, r0
 8113168:	bb02      	cbnz	r2, 81131ac <_dtoa_r+0xa1c>
 811316a:	4601      	mov	r1, r0
 811316c:	4648      	mov	r0, r9
 811316e:	f000 fc97 	bl	8113aa0 <__mcmp>
 8113172:	4602      	mov	r2, r0
 8113174:	4631      	mov	r1, r6
 8113176:	4658      	mov	r0, fp
 8113178:	920e      	str	r2, [sp, #56]	@ 0x38
 811317a:	f000 fa0d 	bl	8113598 <_Bfree>
 811317e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8113180:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8113182:	9e07      	ldr	r6, [sp, #28]
 8113184:	ea43 0102 	orr.w	r1, r3, r2
 8113188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 811318a:	4319      	orrs	r1, r3
 811318c:	d110      	bne.n	81131b0 <_dtoa_r+0xa20>
 811318e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8113192:	d029      	beq.n	81131e8 <_dtoa_r+0xa58>
 8113194:	9b08      	ldr	r3, [sp, #32]
 8113196:	2b00      	cmp	r3, #0
 8113198:	dd02      	ble.n	81131a0 <_dtoa_r+0xa10>
 811319a:	9b02      	ldr	r3, [sp, #8]
 811319c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 81131a0:	9b00      	ldr	r3, [sp, #0]
 81131a2:	f883 8000 	strb.w	r8, [r3]
 81131a6:	e63f      	b.n	8112e28 <_dtoa_r+0x698>
 81131a8:	4628      	mov	r0, r5
 81131aa:	e7bb      	b.n	8113124 <_dtoa_r+0x994>
 81131ac:	2201      	movs	r2, #1
 81131ae:	e7e1      	b.n	8113174 <_dtoa_r+0x9e4>
 81131b0:	9b08      	ldr	r3, [sp, #32]
 81131b2:	2b00      	cmp	r3, #0
 81131b4:	db04      	blt.n	81131c0 <_dtoa_r+0xa30>
 81131b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 81131b8:	430b      	orrs	r3, r1
 81131ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 81131bc:	430b      	orrs	r3, r1
 81131be:	d120      	bne.n	8113202 <_dtoa_r+0xa72>
 81131c0:	2a00      	cmp	r2, #0
 81131c2:	dded      	ble.n	81131a0 <_dtoa_r+0xa10>
 81131c4:	4649      	mov	r1, r9
 81131c6:	2201      	movs	r2, #1
 81131c8:	4658      	mov	r0, fp
 81131ca:	f000 fbfd 	bl	81139c8 <__lshift>
 81131ce:	4621      	mov	r1, r4
 81131d0:	4681      	mov	r9, r0
 81131d2:	f000 fc65 	bl	8113aa0 <__mcmp>
 81131d6:	2800      	cmp	r0, #0
 81131d8:	dc03      	bgt.n	81131e2 <_dtoa_r+0xa52>
 81131da:	d1e1      	bne.n	81131a0 <_dtoa_r+0xa10>
 81131dc:	f018 0f01 	tst.w	r8, #1
 81131e0:	d0de      	beq.n	81131a0 <_dtoa_r+0xa10>
 81131e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 81131e6:	d1d8      	bne.n	811319a <_dtoa_r+0xa0a>
 81131e8:	9a00      	ldr	r2, [sp, #0]
 81131ea:	2339      	movs	r3, #57	@ 0x39
 81131ec:	7013      	strb	r3, [r2, #0]
 81131ee:	4633      	mov	r3, r6
 81131f0:	461e      	mov	r6, r3
 81131f2:	3b01      	subs	r3, #1
 81131f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 81131f8:	2a39      	cmp	r2, #57	@ 0x39
 81131fa:	d052      	beq.n	81132a2 <_dtoa_r+0xb12>
 81131fc:	3201      	adds	r2, #1
 81131fe:	701a      	strb	r2, [r3, #0]
 8113200:	e612      	b.n	8112e28 <_dtoa_r+0x698>
 8113202:	2a00      	cmp	r2, #0
 8113204:	dd07      	ble.n	8113216 <_dtoa_r+0xa86>
 8113206:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 811320a:	d0ed      	beq.n	81131e8 <_dtoa_r+0xa58>
 811320c:	9a00      	ldr	r2, [sp, #0]
 811320e:	f108 0301 	add.w	r3, r8, #1
 8113212:	7013      	strb	r3, [r2, #0]
 8113214:	e608      	b.n	8112e28 <_dtoa_r+0x698>
 8113216:	9b07      	ldr	r3, [sp, #28]
 8113218:	9a07      	ldr	r2, [sp, #28]
 811321a:	f803 8c01 	strb.w	r8, [r3, #-1]
 811321e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8113220:	4293      	cmp	r3, r2
 8113222:	d028      	beq.n	8113276 <_dtoa_r+0xae6>
 8113224:	4649      	mov	r1, r9
 8113226:	2300      	movs	r3, #0
 8113228:	220a      	movs	r2, #10
 811322a:	4658      	mov	r0, fp
 811322c:	f000 f9d6 	bl	81135dc <__multadd>
 8113230:	42af      	cmp	r7, r5
 8113232:	4681      	mov	r9, r0
 8113234:	f04f 0300 	mov.w	r3, #0
 8113238:	f04f 020a 	mov.w	r2, #10
 811323c:	4639      	mov	r1, r7
 811323e:	4658      	mov	r0, fp
 8113240:	d107      	bne.n	8113252 <_dtoa_r+0xac2>
 8113242:	f000 f9cb 	bl	81135dc <__multadd>
 8113246:	4607      	mov	r7, r0
 8113248:	4605      	mov	r5, r0
 811324a:	9b07      	ldr	r3, [sp, #28]
 811324c:	3301      	adds	r3, #1
 811324e:	9307      	str	r3, [sp, #28]
 8113250:	e774      	b.n	811313c <_dtoa_r+0x9ac>
 8113252:	f000 f9c3 	bl	81135dc <__multadd>
 8113256:	4629      	mov	r1, r5
 8113258:	4607      	mov	r7, r0
 811325a:	2300      	movs	r3, #0
 811325c:	220a      	movs	r2, #10
 811325e:	4658      	mov	r0, fp
 8113260:	f000 f9bc 	bl	81135dc <__multadd>
 8113264:	4605      	mov	r5, r0
 8113266:	e7f0      	b.n	811324a <_dtoa_r+0xaba>
 8113268:	9b00      	ldr	r3, [sp, #0]
 811326a:	2b00      	cmp	r3, #0
 811326c:	bfcc      	ite	gt
 811326e:	461e      	movgt	r6, r3
 8113270:	2601      	movle	r6, #1
 8113272:	4456      	add	r6, sl
 8113274:	2700      	movs	r7, #0
 8113276:	4649      	mov	r1, r9
 8113278:	2201      	movs	r2, #1
 811327a:	4658      	mov	r0, fp
 811327c:	f000 fba4 	bl	81139c8 <__lshift>
 8113280:	4621      	mov	r1, r4
 8113282:	4681      	mov	r9, r0
 8113284:	f000 fc0c 	bl	8113aa0 <__mcmp>
 8113288:	2800      	cmp	r0, #0
 811328a:	dcb0      	bgt.n	81131ee <_dtoa_r+0xa5e>
 811328c:	d102      	bne.n	8113294 <_dtoa_r+0xb04>
 811328e:	f018 0f01 	tst.w	r8, #1
 8113292:	d1ac      	bne.n	81131ee <_dtoa_r+0xa5e>
 8113294:	4633      	mov	r3, r6
 8113296:	461e      	mov	r6, r3
 8113298:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 811329c:	2a30      	cmp	r2, #48	@ 0x30
 811329e:	d0fa      	beq.n	8113296 <_dtoa_r+0xb06>
 81132a0:	e5c2      	b.n	8112e28 <_dtoa_r+0x698>
 81132a2:	459a      	cmp	sl, r3
 81132a4:	d1a4      	bne.n	81131f0 <_dtoa_r+0xa60>
 81132a6:	9b04      	ldr	r3, [sp, #16]
 81132a8:	3301      	adds	r3, #1
 81132aa:	9304      	str	r3, [sp, #16]
 81132ac:	2331      	movs	r3, #49	@ 0x31
 81132ae:	f88a 3000 	strb.w	r3, [sl]
 81132b2:	e5b9      	b.n	8112e28 <_dtoa_r+0x698>
 81132b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 81132b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8113314 <_dtoa_r+0xb84>
 81132ba:	b11b      	cbz	r3, 81132c4 <_dtoa_r+0xb34>
 81132bc:	f10a 0308 	add.w	r3, sl, #8
 81132c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 81132c2:	6013      	str	r3, [r2, #0]
 81132c4:	4650      	mov	r0, sl
 81132c6:	b019      	add	sp, #100	@ 0x64
 81132c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81132cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81132ce:	2b01      	cmp	r3, #1
 81132d0:	f77f ae37 	ble.w	8112f42 <_dtoa_r+0x7b2>
 81132d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81132d6:	930a      	str	r3, [sp, #40]	@ 0x28
 81132d8:	2001      	movs	r0, #1
 81132da:	e655      	b.n	8112f88 <_dtoa_r+0x7f8>
 81132dc:	9b00      	ldr	r3, [sp, #0]
 81132de:	2b00      	cmp	r3, #0
 81132e0:	f77f aed6 	ble.w	8113090 <_dtoa_r+0x900>
 81132e4:	4656      	mov	r6, sl
 81132e6:	4621      	mov	r1, r4
 81132e8:	4648      	mov	r0, r9
 81132ea:	f7ff f9c9 	bl	8112680 <quorem>
 81132ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 81132f2:	f806 8b01 	strb.w	r8, [r6], #1
 81132f6:	9b00      	ldr	r3, [sp, #0]
 81132f8:	eba6 020a 	sub.w	r2, r6, sl
 81132fc:	4293      	cmp	r3, r2
 81132fe:	ddb3      	ble.n	8113268 <_dtoa_r+0xad8>
 8113300:	4649      	mov	r1, r9
 8113302:	2300      	movs	r3, #0
 8113304:	220a      	movs	r2, #10
 8113306:	4658      	mov	r0, fp
 8113308:	f000 f968 	bl	81135dc <__multadd>
 811330c:	4681      	mov	r9, r0
 811330e:	e7ea      	b.n	81132e6 <_dtoa_r+0xb56>
 8113310:	08116e51 	.word	0x08116e51
 8113314:	08116dec 	.word	0x08116dec

08113318 <_free_r>:
 8113318:	b538      	push	{r3, r4, r5, lr}
 811331a:	4605      	mov	r5, r0
 811331c:	2900      	cmp	r1, #0
 811331e:	d041      	beq.n	81133a4 <_free_r+0x8c>
 8113320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8113324:	1f0c      	subs	r4, r1, #4
 8113326:	2b00      	cmp	r3, #0
 8113328:	bfb8      	it	lt
 811332a:	18e4      	addlt	r4, r4, r3
 811332c:	f000 f8e8 	bl	8113500 <__malloc_lock>
 8113330:	4a1d      	ldr	r2, [pc, #116]	@ (81133a8 <_free_r+0x90>)
 8113332:	6813      	ldr	r3, [r2, #0]
 8113334:	b933      	cbnz	r3, 8113344 <_free_r+0x2c>
 8113336:	6063      	str	r3, [r4, #4]
 8113338:	6014      	str	r4, [r2, #0]
 811333a:	4628      	mov	r0, r5
 811333c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8113340:	f000 b8e4 	b.w	811350c <__malloc_unlock>
 8113344:	42a3      	cmp	r3, r4
 8113346:	d908      	bls.n	811335a <_free_r+0x42>
 8113348:	6820      	ldr	r0, [r4, #0]
 811334a:	1821      	adds	r1, r4, r0
 811334c:	428b      	cmp	r3, r1
 811334e:	bf01      	itttt	eq
 8113350:	6819      	ldreq	r1, [r3, #0]
 8113352:	685b      	ldreq	r3, [r3, #4]
 8113354:	1809      	addeq	r1, r1, r0
 8113356:	6021      	streq	r1, [r4, #0]
 8113358:	e7ed      	b.n	8113336 <_free_r+0x1e>
 811335a:	461a      	mov	r2, r3
 811335c:	685b      	ldr	r3, [r3, #4]
 811335e:	b10b      	cbz	r3, 8113364 <_free_r+0x4c>
 8113360:	42a3      	cmp	r3, r4
 8113362:	d9fa      	bls.n	811335a <_free_r+0x42>
 8113364:	6811      	ldr	r1, [r2, #0]
 8113366:	1850      	adds	r0, r2, r1
 8113368:	42a0      	cmp	r0, r4
 811336a:	d10b      	bne.n	8113384 <_free_r+0x6c>
 811336c:	6820      	ldr	r0, [r4, #0]
 811336e:	4401      	add	r1, r0
 8113370:	1850      	adds	r0, r2, r1
 8113372:	4283      	cmp	r3, r0
 8113374:	6011      	str	r1, [r2, #0]
 8113376:	d1e0      	bne.n	811333a <_free_r+0x22>
 8113378:	6818      	ldr	r0, [r3, #0]
 811337a:	685b      	ldr	r3, [r3, #4]
 811337c:	6053      	str	r3, [r2, #4]
 811337e:	4408      	add	r0, r1
 8113380:	6010      	str	r0, [r2, #0]
 8113382:	e7da      	b.n	811333a <_free_r+0x22>
 8113384:	d902      	bls.n	811338c <_free_r+0x74>
 8113386:	230c      	movs	r3, #12
 8113388:	602b      	str	r3, [r5, #0]
 811338a:	e7d6      	b.n	811333a <_free_r+0x22>
 811338c:	6820      	ldr	r0, [r4, #0]
 811338e:	1821      	adds	r1, r4, r0
 8113390:	428b      	cmp	r3, r1
 8113392:	bf04      	itt	eq
 8113394:	6819      	ldreq	r1, [r3, #0]
 8113396:	685b      	ldreq	r3, [r3, #4]
 8113398:	6063      	str	r3, [r4, #4]
 811339a:	bf04      	itt	eq
 811339c:	1809      	addeq	r1, r1, r0
 811339e:	6021      	streq	r1, [r4, #0]
 81133a0:	6054      	str	r4, [r2, #4]
 81133a2:	e7ca      	b.n	811333a <_free_r+0x22>
 81133a4:	bd38      	pop	{r3, r4, r5, pc}
 81133a6:	bf00      	nop
 81133a8:	1000d510 	.word	0x1000d510

081133ac <malloc>:
 81133ac:	4b02      	ldr	r3, [pc, #8]	@ (81133b8 <malloc+0xc>)
 81133ae:	4601      	mov	r1, r0
 81133b0:	6818      	ldr	r0, [r3, #0]
 81133b2:	f000 b825 	b.w	8113400 <_malloc_r>
 81133b6:	bf00      	nop
 81133b8:	100000b0 	.word	0x100000b0

081133bc <sbrk_aligned>:
 81133bc:	b570      	push	{r4, r5, r6, lr}
 81133be:	4e0f      	ldr	r6, [pc, #60]	@ (81133fc <sbrk_aligned+0x40>)
 81133c0:	460c      	mov	r4, r1
 81133c2:	6831      	ldr	r1, [r6, #0]
 81133c4:	4605      	mov	r5, r0
 81133c6:	b911      	cbnz	r1, 81133ce <sbrk_aligned+0x12>
 81133c8:	f001 ffe4 	bl	8115394 <_sbrk_r>
 81133cc:	6030      	str	r0, [r6, #0]
 81133ce:	4621      	mov	r1, r4
 81133d0:	4628      	mov	r0, r5
 81133d2:	f001 ffdf 	bl	8115394 <_sbrk_r>
 81133d6:	1c43      	adds	r3, r0, #1
 81133d8:	d103      	bne.n	81133e2 <sbrk_aligned+0x26>
 81133da:	f04f 34ff 	mov.w	r4, #4294967295
 81133de:	4620      	mov	r0, r4
 81133e0:	bd70      	pop	{r4, r5, r6, pc}
 81133e2:	1cc4      	adds	r4, r0, #3
 81133e4:	f024 0403 	bic.w	r4, r4, #3
 81133e8:	42a0      	cmp	r0, r4
 81133ea:	d0f8      	beq.n	81133de <sbrk_aligned+0x22>
 81133ec:	1a21      	subs	r1, r4, r0
 81133ee:	4628      	mov	r0, r5
 81133f0:	f001 ffd0 	bl	8115394 <_sbrk_r>
 81133f4:	3001      	adds	r0, #1
 81133f6:	d1f2      	bne.n	81133de <sbrk_aligned+0x22>
 81133f8:	e7ef      	b.n	81133da <sbrk_aligned+0x1e>
 81133fa:	bf00      	nop
 81133fc:	1000d50c 	.word	0x1000d50c

08113400 <_malloc_r>:
 8113400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8113404:	1ccd      	adds	r5, r1, #3
 8113406:	f025 0503 	bic.w	r5, r5, #3
 811340a:	3508      	adds	r5, #8
 811340c:	2d0c      	cmp	r5, #12
 811340e:	bf38      	it	cc
 8113410:	250c      	movcc	r5, #12
 8113412:	2d00      	cmp	r5, #0
 8113414:	4606      	mov	r6, r0
 8113416:	db01      	blt.n	811341c <_malloc_r+0x1c>
 8113418:	42a9      	cmp	r1, r5
 811341a:	d904      	bls.n	8113426 <_malloc_r+0x26>
 811341c:	230c      	movs	r3, #12
 811341e:	6033      	str	r3, [r6, #0]
 8113420:	2000      	movs	r0, #0
 8113422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8113426:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 81134fc <_malloc_r+0xfc>
 811342a:	f000 f869 	bl	8113500 <__malloc_lock>
 811342e:	f8d8 3000 	ldr.w	r3, [r8]
 8113432:	461c      	mov	r4, r3
 8113434:	bb44      	cbnz	r4, 8113488 <_malloc_r+0x88>
 8113436:	4629      	mov	r1, r5
 8113438:	4630      	mov	r0, r6
 811343a:	f7ff ffbf 	bl	81133bc <sbrk_aligned>
 811343e:	1c43      	adds	r3, r0, #1
 8113440:	4604      	mov	r4, r0
 8113442:	d158      	bne.n	81134f6 <_malloc_r+0xf6>
 8113444:	f8d8 4000 	ldr.w	r4, [r8]
 8113448:	4627      	mov	r7, r4
 811344a:	2f00      	cmp	r7, #0
 811344c:	d143      	bne.n	81134d6 <_malloc_r+0xd6>
 811344e:	2c00      	cmp	r4, #0
 8113450:	d04b      	beq.n	81134ea <_malloc_r+0xea>
 8113452:	6823      	ldr	r3, [r4, #0]
 8113454:	4639      	mov	r1, r7
 8113456:	4630      	mov	r0, r6
 8113458:	eb04 0903 	add.w	r9, r4, r3
 811345c:	f001 ff9a 	bl	8115394 <_sbrk_r>
 8113460:	4581      	cmp	r9, r0
 8113462:	d142      	bne.n	81134ea <_malloc_r+0xea>
 8113464:	6821      	ldr	r1, [r4, #0]
 8113466:	1a6d      	subs	r5, r5, r1
 8113468:	4629      	mov	r1, r5
 811346a:	4630      	mov	r0, r6
 811346c:	f7ff ffa6 	bl	81133bc <sbrk_aligned>
 8113470:	3001      	adds	r0, #1
 8113472:	d03a      	beq.n	81134ea <_malloc_r+0xea>
 8113474:	6823      	ldr	r3, [r4, #0]
 8113476:	442b      	add	r3, r5
 8113478:	6023      	str	r3, [r4, #0]
 811347a:	f8d8 3000 	ldr.w	r3, [r8]
 811347e:	685a      	ldr	r2, [r3, #4]
 8113480:	bb62      	cbnz	r2, 81134dc <_malloc_r+0xdc>
 8113482:	f8c8 7000 	str.w	r7, [r8]
 8113486:	e00f      	b.n	81134a8 <_malloc_r+0xa8>
 8113488:	6822      	ldr	r2, [r4, #0]
 811348a:	1b52      	subs	r2, r2, r5
 811348c:	d420      	bmi.n	81134d0 <_malloc_r+0xd0>
 811348e:	2a0b      	cmp	r2, #11
 8113490:	d917      	bls.n	81134c2 <_malloc_r+0xc2>
 8113492:	1961      	adds	r1, r4, r5
 8113494:	42a3      	cmp	r3, r4
 8113496:	6025      	str	r5, [r4, #0]
 8113498:	bf18      	it	ne
 811349a:	6059      	strne	r1, [r3, #4]
 811349c:	6863      	ldr	r3, [r4, #4]
 811349e:	bf08      	it	eq
 81134a0:	f8c8 1000 	streq.w	r1, [r8]
 81134a4:	5162      	str	r2, [r4, r5]
 81134a6:	604b      	str	r3, [r1, #4]
 81134a8:	4630      	mov	r0, r6
 81134aa:	f000 f82f 	bl	811350c <__malloc_unlock>
 81134ae:	f104 000b 	add.w	r0, r4, #11
 81134b2:	1d23      	adds	r3, r4, #4
 81134b4:	f020 0007 	bic.w	r0, r0, #7
 81134b8:	1ac2      	subs	r2, r0, r3
 81134ba:	bf1c      	itt	ne
 81134bc:	1a1b      	subne	r3, r3, r0
 81134be:	50a3      	strne	r3, [r4, r2]
 81134c0:	e7af      	b.n	8113422 <_malloc_r+0x22>
 81134c2:	6862      	ldr	r2, [r4, #4]
 81134c4:	42a3      	cmp	r3, r4
 81134c6:	bf0c      	ite	eq
 81134c8:	f8c8 2000 	streq.w	r2, [r8]
 81134cc:	605a      	strne	r2, [r3, #4]
 81134ce:	e7eb      	b.n	81134a8 <_malloc_r+0xa8>
 81134d0:	4623      	mov	r3, r4
 81134d2:	6864      	ldr	r4, [r4, #4]
 81134d4:	e7ae      	b.n	8113434 <_malloc_r+0x34>
 81134d6:	463c      	mov	r4, r7
 81134d8:	687f      	ldr	r7, [r7, #4]
 81134da:	e7b6      	b.n	811344a <_malloc_r+0x4a>
 81134dc:	461a      	mov	r2, r3
 81134de:	685b      	ldr	r3, [r3, #4]
 81134e0:	42a3      	cmp	r3, r4
 81134e2:	d1fb      	bne.n	81134dc <_malloc_r+0xdc>
 81134e4:	2300      	movs	r3, #0
 81134e6:	6053      	str	r3, [r2, #4]
 81134e8:	e7de      	b.n	81134a8 <_malloc_r+0xa8>
 81134ea:	230c      	movs	r3, #12
 81134ec:	6033      	str	r3, [r6, #0]
 81134ee:	4630      	mov	r0, r6
 81134f0:	f000 f80c 	bl	811350c <__malloc_unlock>
 81134f4:	e794      	b.n	8113420 <_malloc_r+0x20>
 81134f6:	6005      	str	r5, [r0, #0]
 81134f8:	e7d6      	b.n	81134a8 <_malloc_r+0xa8>
 81134fa:	bf00      	nop
 81134fc:	1000d510 	.word	0x1000d510

08113500 <__malloc_lock>:
 8113500:	4801      	ldr	r0, [pc, #4]	@ (8113508 <__malloc_lock+0x8>)
 8113502:	f7ff b888 	b.w	8112616 <__retarget_lock_acquire_recursive>
 8113506:	bf00      	nop
 8113508:	1000d508 	.word	0x1000d508

0811350c <__malloc_unlock>:
 811350c:	4801      	ldr	r0, [pc, #4]	@ (8113514 <__malloc_unlock+0x8>)
 811350e:	f7ff b883 	b.w	8112618 <__retarget_lock_release_recursive>
 8113512:	bf00      	nop
 8113514:	1000d508 	.word	0x1000d508

08113518 <_Balloc>:
 8113518:	b570      	push	{r4, r5, r6, lr}
 811351a:	69c6      	ldr	r6, [r0, #28]
 811351c:	4604      	mov	r4, r0
 811351e:	460d      	mov	r5, r1
 8113520:	b976      	cbnz	r6, 8113540 <_Balloc+0x28>
 8113522:	2010      	movs	r0, #16
 8113524:	f7ff ff42 	bl	81133ac <malloc>
 8113528:	4602      	mov	r2, r0
 811352a:	61e0      	str	r0, [r4, #28]
 811352c:	b920      	cbnz	r0, 8113538 <_Balloc+0x20>
 811352e:	4b18      	ldr	r3, [pc, #96]	@ (8113590 <_Balloc+0x78>)
 8113530:	4818      	ldr	r0, [pc, #96]	@ (8113594 <_Balloc+0x7c>)
 8113532:	216b      	movs	r1, #107	@ 0x6b
 8113534:	f7ff f886 	bl	8112644 <__assert_func>
 8113538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 811353c:	6006      	str	r6, [r0, #0]
 811353e:	60c6      	str	r6, [r0, #12]
 8113540:	69e6      	ldr	r6, [r4, #28]
 8113542:	68f3      	ldr	r3, [r6, #12]
 8113544:	b183      	cbz	r3, 8113568 <_Balloc+0x50>
 8113546:	69e3      	ldr	r3, [r4, #28]
 8113548:	68db      	ldr	r3, [r3, #12]
 811354a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 811354e:	b9b8      	cbnz	r0, 8113580 <_Balloc+0x68>
 8113550:	2101      	movs	r1, #1
 8113552:	fa01 f605 	lsl.w	r6, r1, r5
 8113556:	1d72      	adds	r2, r6, #5
 8113558:	0092      	lsls	r2, r2, #2
 811355a:	4620      	mov	r0, r4
 811355c:	f001 ff3b 	bl	81153d6 <_calloc_r>
 8113560:	b160      	cbz	r0, 811357c <_Balloc+0x64>
 8113562:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8113566:	e00e      	b.n	8113586 <_Balloc+0x6e>
 8113568:	2221      	movs	r2, #33	@ 0x21
 811356a:	2104      	movs	r1, #4
 811356c:	4620      	mov	r0, r4
 811356e:	f001 ff32 	bl	81153d6 <_calloc_r>
 8113572:	69e3      	ldr	r3, [r4, #28]
 8113574:	60f0      	str	r0, [r6, #12]
 8113576:	68db      	ldr	r3, [r3, #12]
 8113578:	2b00      	cmp	r3, #0
 811357a:	d1e4      	bne.n	8113546 <_Balloc+0x2e>
 811357c:	2000      	movs	r0, #0
 811357e:	bd70      	pop	{r4, r5, r6, pc}
 8113580:	6802      	ldr	r2, [r0, #0]
 8113582:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8113586:	2300      	movs	r3, #0
 8113588:	e9c0 3303 	strd	r3, r3, [r0, #12]
 811358c:	e7f7      	b.n	811357e <_Balloc+0x66>
 811358e:	bf00      	nop
 8113590:	08116d08 	.word	0x08116d08
 8113594:	08116e62 	.word	0x08116e62

08113598 <_Bfree>:
 8113598:	b570      	push	{r4, r5, r6, lr}
 811359a:	69c6      	ldr	r6, [r0, #28]
 811359c:	4605      	mov	r5, r0
 811359e:	460c      	mov	r4, r1
 81135a0:	b976      	cbnz	r6, 81135c0 <_Bfree+0x28>
 81135a2:	2010      	movs	r0, #16
 81135a4:	f7ff ff02 	bl	81133ac <malloc>
 81135a8:	4602      	mov	r2, r0
 81135aa:	61e8      	str	r0, [r5, #28]
 81135ac:	b920      	cbnz	r0, 81135b8 <_Bfree+0x20>
 81135ae:	4b09      	ldr	r3, [pc, #36]	@ (81135d4 <_Bfree+0x3c>)
 81135b0:	4809      	ldr	r0, [pc, #36]	@ (81135d8 <_Bfree+0x40>)
 81135b2:	218f      	movs	r1, #143	@ 0x8f
 81135b4:	f7ff f846 	bl	8112644 <__assert_func>
 81135b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 81135bc:	6006      	str	r6, [r0, #0]
 81135be:	60c6      	str	r6, [r0, #12]
 81135c0:	b13c      	cbz	r4, 81135d2 <_Bfree+0x3a>
 81135c2:	69eb      	ldr	r3, [r5, #28]
 81135c4:	6862      	ldr	r2, [r4, #4]
 81135c6:	68db      	ldr	r3, [r3, #12]
 81135c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 81135cc:	6021      	str	r1, [r4, #0]
 81135ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 81135d2:	bd70      	pop	{r4, r5, r6, pc}
 81135d4:	08116d08 	.word	0x08116d08
 81135d8:	08116e62 	.word	0x08116e62

081135dc <__multadd>:
 81135dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81135e0:	690d      	ldr	r5, [r1, #16]
 81135e2:	4607      	mov	r7, r0
 81135e4:	460c      	mov	r4, r1
 81135e6:	461e      	mov	r6, r3
 81135e8:	f101 0c14 	add.w	ip, r1, #20
 81135ec:	2000      	movs	r0, #0
 81135ee:	f8dc 3000 	ldr.w	r3, [ip]
 81135f2:	b299      	uxth	r1, r3
 81135f4:	fb02 6101 	mla	r1, r2, r1, r6
 81135f8:	0c1e      	lsrs	r6, r3, #16
 81135fa:	0c0b      	lsrs	r3, r1, #16
 81135fc:	fb02 3306 	mla	r3, r2, r6, r3
 8113600:	b289      	uxth	r1, r1
 8113602:	3001      	adds	r0, #1
 8113604:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8113608:	4285      	cmp	r5, r0
 811360a:	f84c 1b04 	str.w	r1, [ip], #4
 811360e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8113612:	dcec      	bgt.n	81135ee <__multadd+0x12>
 8113614:	b30e      	cbz	r6, 811365a <__multadd+0x7e>
 8113616:	68a3      	ldr	r3, [r4, #8]
 8113618:	42ab      	cmp	r3, r5
 811361a:	dc19      	bgt.n	8113650 <__multadd+0x74>
 811361c:	6861      	ldr	r1, [r4, #4]
 811361e:	4638      	mov	r0, r7
 8113620:	3101      	adds	r1, #1
 8113622:	f7ff ff79 	bl	8113518 <_Balloc>
 8113626:	4680      	mov	r8, r0
 8113628:	b928      	cbnz	r0, 8113636 <__multadd+0x5a>
 811362a:	4602      	mov	r2, r0
 811362c:	4b0c      	ldr	r3, [pc, #48]	@ (8113660 <__multadd+0x84>)
 811362e:	480d      	ldr	r0, [pc, #52]	@ (8113664 <__multadd+0x88>)
 8113630:	21ba      	movs	r1, #186	@ 0xba
 8113632:	f7ff f807 	bl	8112644 <__assert_func>
 8113636:	6922      	ldr	r2, [r4, #16]
 8113638:	3202      	adds	r2, #2
 811363a:	f104 010c 	add.w	r1, r4, #12
 811363e:	0092      	lsls	r2, r2, #2
 8113640:	300c      	adds	r0, #12
 8113642:	f7fe ffea 	bl	811261a <memcpy>
 8113646:	4621      	mov	r1, r4
 8113648:	4638      	mov	r0, r7
 811364a:	f7ff ffa5 	bl	8113598 <_Bfree>
 811364e:	4644      	mov	r4, r8
 8113650:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8113654:	3501      	adds	r5, #1
 8113656:	615e      	str	r6, [r3, #20]
 8113658:	6125      	str	r5, [r4, #16]
 811365a:	4620      	mov	r0, r4
 811365c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8113660:	08116e51 	.word	0x08116e51
 8113664:	08116e62 	.word	0x08116e62

08113668 <__s2b>:
 8113668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811366c:	460c      	mov	r4, r1
 811366e:	4615      	mov	r5, r2
 8113670:	461f      	mov	r7, r3
 8113672:	2209      	movs	r2, #9
 8113674:	3308      	adds	r3, #8
 8113676:	4606      	mov	r6, r0
 8113678:	fb93 f3f2 	sdiv	r3, r3, r2
 811367c:	2100      	movs	r1, #0
 811367e:	2201      	movs	r2, #1
 8113680:	429a      	cmp	r2, r3
 8113682:	db09      	blt.n	8113698 <__s2b+0x30>
 8113684:	4630      	mov	r0, r6
 8113686:	f7ff ff47 	bl	8113518 <_Balloc>
 811368a:	b940      	cbnz	r0, 811369e <__s2b+0x36>
 811368c:	4602      	mov	r2, r0
 811368e:	4b19      	ldr	r3, [pc, #100]	@ (81136f4 <__s2b+0x8c>)
 8113690:	4819      	ldr	r0, [pc, #100]	@ (81136f8 <__s2b+0x90>)
 8113692:	21d3      	movs	r1, #211	@ 0xd3
 8113694:	f7fe ffd6 	bl	8112644 <__assert_func>
 8113698:	0052      	lsls	r2, r2, #1
 811369a:	3101      	adds	r1, #1
 811369c:	e7f0      	b.n	8113680 <__s2b+0x18>
 811369e:	9b08      	ldr	r3, [sp, #32]
 81136a0:	6143      	str	r3, [r0, #20]
 81136a2:	2d09      	cmp	r5, #9
 81136a4:	f04f 0301 	mov.w	r3, #1
 81136a8:	6103      	str	r3, [r0, #16]
 81136aa:	dd16      	ble.n	81136da <__s2b+0x72>
 81136ac:	f104 0909 	add.w	r9, r4, #9
 81136b0:	46c8      	mov	r8, r9
 81136b2:	442c      	add	r4, r5
 81136b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 81136b8:	4601      	mov	r1, r0
 81136ba:	3b30      	subs	r3, #48	@ 0x30
 81136bc:	220a      	movs	r2, #10
 81136be:	4630      	mov	r0, r6
 81136c0:	f7ff ff8c 	bl	81135dc <__multadd>
 81136c4:	45a0      	cmp	r8, r4
 81136c6:	d1f5      	bne.n	81136b4 <__s2b+0x4c>
 81136c8:	f1a5 0408 	sub.w	r4, r5, #8
 81136cc:	444c      	add	r4, r9
 81136ce:	1b2d      	subs	r5, r5, r4
 81136d0:	1963      	adds	r3, r4, r5
 81136d2:	42bb      	cmp	r3, r7
 81136d4:	db04      	blt.n	81136e0 <__s2b+0x78>
 81136d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81136da:	340a      	adds	r4, #10
 81136dc:	2509      	movs	r5, #9
 81136de:	e7f6      	b.n	81136ce <__s2b+0x66>
 81136e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 81136e4:	4601      	mov	r1, r0
 81136e6:	3b30      	subs	r3, #48	@ 0x30
 81136e8:	220a      	movs	r2, #10
 81136ea:	4630      	mov	r0, r6
 81136ec:	f7ff ff76 	bl	81135dc <__multadd>
 81136f0:	e7ee      	b.n	81136d0 <__s2b+0x68>
 81136f2:	bf00      	nop
 81136f4:	08116e51 	.word	0x08116e51
 81136f8:	08116e62 	.word	0x08116e62

081136fc <__hi0bits>:
 81136fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8113700:	4603      	mov	r3, r0
 8113702:	bf36      	itet	cc
 8113704:	0403      	lslcc	r3, r0, #16
 8113706:	2000      	movcs	r0, #0
 8113708:	2010      	movcc	r0, #16
 811370a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 811370e:	bf3c      	itt	cc
 8113710:	021b      	lslcc	r3, r3, #8
 8113712:	3008      	addcc	r0, #8
 8113714:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8113718:	bf3c      	itt	cc
 811371a:	011b      	lslcc	r3, r3, #4
 811371c:	3004      	addcc	r0, #4
 811371e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8113722:	bf3c      	itt	cc
 8113724:	009b      	lslcc	r3, r3, #2
 8113726:	3002      	addcc	r0, #2
 8113728:	2b00      	cmp	r3, #0
 811372a:	db05      	blt.n	8113738 <__hi0bits+0x3c>
 811372c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8113730:	f100 0001 	add.w	r0, r0, #1
 8113734:	bf08      	it	eq
 8113736:	2020      	moveq	r0, #32
 8113738:	4770      	bx	lr

0811373a <__lo0bits>:
 811373a:	6803      	ldr	r3, [r0, #0]
 811373c:	4602      	mov	r2, r0
 811373e:	f013 0007 	ands.w	r0, r3, #7
 8113742:	d00b      	beq.n	811375c <__lo0bits+0x22>
 8113744:	07d9      	lsls	r1, r3, #31
 8113746:	d421      	bmi.n	811378c <__lo0bits+0x52>
 8113748:	0798      	lsls	r0, r3, #30
 811374a:	bf49      	itett	mi
 811374c:	085b      	lsrmi	r3, r3, #1
 811374e:	089b      	lsrpl	r3, r3, #2
 8113750:	2001      	movmi	r0, #1
 8113752:	6013      	strmi	r3, [r2, #0]
 8113754:	bf5c      	itt	pl
 8113756:	6013      	strpl	r3, [r2, #0]
 8113758:	2002      	movpl	r0, #2
 811375a:	4770      	bx	lr
 811375c:	b299      	uxth	r1, r3
 811375e:	b909      	cbnz	r1, 8113764 <__lo0bits+0x2a>
 8113760:	0c1b      	lsrs	r3, r3, #16
 8113762:	2010      	movs	r0, #16
 8113764:	b2d9      	uxtb	r1, r3
 8113766:	b909      	cbnz	r1, 811376c <__lo0bits+0x32>
 8113768:	3008      	adds	r0, #8
 811376a:	0a1b      	lsrs	r3, r3, #8
 811376c:	0719      	lsls	r1, r3, #28
 811376e:	bf04      	itt	eq
 8113770:	091b      	lsreq	r3, r3, #4
 8113772:	3004      	addeq	r0, #4
 8113774:	0799      	lsls	r1, r3, #30
 8113776:	bf04      	itt	eq
 8113778:	089b      	lsreq	r3, r3, #2
 811377a:	3002      	addeq	r0, #2
 811377c:	07d9      	lsls	r1, r3, #31
 811377e:	d403      	bmi.n	8113788 <__lo0bits+0x4e>
 8113780:	085b      	lsrs	r3, r3, #1
 8113782:	f100 0001 	add.w	r0, r0, #1
 8113786:	d003      	beq.n	8113790 <__lo0bits+0x56>
 8113788:	6013      	str	r3, [r2, #0]
 811378a:	4770      	bx	lr
 811378c:	2000      	movs	r0, #0
 811378e:	4770      	bx	lr
 8113790:	2020      	movs	r0, #32
 8113792:	4770      	bx	lr

08113794 <__i2b>:
 8113794:	b510      	push	{r4, lr}
 8113796:	460c      	mov	r4, r1
 8113798:	2101      	movs	r1, #1
 811379a:	f7ff febd 	bl	8113518 <_Balloc>
 811379e:	4602      	mov	r2, r0
 81137a0:	b928      	cbnz	r0, 81137ae <__i2b+0x1a>
 81137a2:	4b05      	ldr	r3, [pc, #20]	@ (81137b8 <__i2b+0x24>)
 81137a4:	4805      	ldr	r0, [pc, #20]	@ (81137bc <__i2b+0x28>)
 81137a6:	f240 1145 	movw	r1, #325	@ 0x145
 81137aa:	f7fe ff4b 	bl	8112644 <__assert_func>
 81137ae:	2301      	movs	r3, #1
 81137b0:	6144      	str	r4, [r0, #20]
 81137b2:	6103      	str	r3, [r0, #16]
 81137b4:	bd10      	pop	{r4, pc}
 81137b6:	bf00      	nop
 81137b8:	08116e51 	.word	0x08116e51
 81137bc:	08116e62 	.word	0x08116e62

081137c0 <__multiply>:
 81137c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81137c4:	4614      	mov	r4, r2
 81137c6:	690a      	ldr	r2, [r1, #16]
 81137c8:	6923      	ldr	r3, [r4, #16]
 81137ca:	429a      	cmp	r2, r3
 81137cc:	bfa8      	it	ge
 81137ce:	4623      	movge	r3, r4
 81137d0:	460f      	mov	r7, r1
 81137d2:	bfa4      	itt	ge
 81137d4:	460c      	movge	r4, r1
 81137d6:	461f      	movge	r7, r3
 81137d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 81137dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 81137e0:	68a3      	ldr	r3, [r4, #8]
 81137e2:	6861      	ldr	r1, [r4, #4]
 81137e4:	eb0a 0609 	add.w	r6, sl, r9
 81137e8:	42b3      	cmp	r3, r6
 81137ea:	b085      	sub	sp, #20
 81137ec:	bfb8      	it	lt
 81137ee:	3101      	addlt	r1, #1
 81137f0:	f7ff fe92 	bl	8113518 <_Balloc>
 81137f4:	b930      	cbnz	r0, 8113804 <__multiply+0x44>
 81137f6:	4602      	mov	r2, r0
 81137f8:	4b44      	ldr	r3, [pc, #272]	@ (811390c <__multiply+0x14c>)
 81137fa:	4845      	ldr	r0, [pc, #276]	@ (8113910 <__multiply+0x150>)
 81137fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8113800:	f7fe ff20 	bl	8112644 <__assert_func>
 8113804:	f100 0514 	add.w	r5, r0, #20
 8113808:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 811380c:	462b      	mov	r3, r5
 811380e:	2200      	movs	r2, #0
 8113810:	4543      	cmp	r3, r8
 8113812:	d321      	bcc.n	8113858 <__multiply+0x98>
 8113814:	f107 0114 	add.w	r1, r7, #20
 8113818:	f104 0214 	add.w	r2, r4, #20
 811381c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8113820:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8113824:	9302      	str	r3, [sp, #8]
 8113826:	1b13      	subs	r3, r2, r4
 8113828:	3b15      	subs	r3, #21
 811382a:	f023 0303 	bic.w	r3, r3, #3
 811382e:	3304      	adds	r3, #4
 8113830:	f104 0715 	add.w	r7, r4, #21
 8113834:	42ba      	cmp	r2, r7
 8113836:	bf38      	it	cc
 8113838:	2304      	movcc	r3, #4
 811383a:	9301      	str	r3, [sp, #4]
 811383c:	9b02      	ldr	r3, [sp, #8]
 811383e:	9103      	str	r1, [sp, #12]
 8113840:	428b      	cmp	r3, r1
 8113842:	d80c      	bhi.n	811385e <__multiply+0x9e>
 8113844:	2e00      	cmp	r6, #0
 8113846:	dd03      	ble.n	8113850 <__multiply+0x90>
 8113848:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 811384c:	2b00      	cmp	r3, #0
 811384e:	d05b      	beq.n	8113908 <__multiply+0x148>
 8113850:	6106      	str	r6, [r0, #16]
 8113852:	b005      	add	sp, #20
 8113854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8113858:	f843 2b04 	str.w	r2, [r3], #4
 811385c:	e7d8      	b.n	8113810 <__multiply+0x50>
 811385e:	f8b1 a000 	ldrh.w	sl, [r1]
 8113862:	f1ba 0f00 	cmp.w	sl, #0
 8113866:	d024      	beq.n	81138b2 <__multiply+0xf2>
 8113868:	f104 0e14 	add.w	lr, r4, #20
 811386c:	46a9      	mov	r9, r5
 811386e:	f04f 0c00 	mov.w	ip, #0
 8113872:	f85e 7b04 	ldr.w	r7, [lr], #4
 8113876:	f8d9 3000 	ldr.w	r3, [r9]
 811387a:	fa1f fb87 	uxth.w	fp, r7
 811387e:	b29b      	uxth	r3, r3
 8113880:	fb0a 330b 	mla	r3, sl, fp, r3
 8113884:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8113888:	f8d9 7000 	ldr.w	r7, [r9]
 811388c:	4463      	add	r3, ip
 811388e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8113892:	fb0a c70b 	mla	r7, sl, fp, ip
 8113896:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 811389a:	b29b      	uxth	r3, r3
 811389c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 81138a0:	4572      	cmp	r2, lr
 81138a2:	f849 3b04 	str.w	r3, [r9], #4
 81138a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 81138aa:	d8e2      	bhi.n	8113872 <__multiply+0xb2>
 81138ac:	9b01      	ldr	r3, [sp, #4]
 81138ae:	f845 c003 	str.w	ip, [r5, r3]
 81138b2:	9b03      	ldr	r3, [sp, #12]
 81138b4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 81138b8:	3104      	adds	r1, #4
 81138ba:	f1b9 0f00 	cmp.w	r9, #0
 81138be:	d021      	beq.n	8113904 <__multiply+0x144>
 81138c0:	682b      	ldr	r3, [r5, #0]
 81138c2:	f104 0c14 	add.w	ip, r4, #20
 81138c6:	46ae      	mov	lr, r5
 81138c8:	f04f 0a00 	mov.w	sl, #0
 81138cc:	f8bc b000 	ldrh.w	fp, [ip]
 81138d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 81138d4:	fb09 770b 	mla	r7, r9, fp, r7
 81138d8:	4457      	add	r7, sl
 81138da:	b29b      	uxth	r3, r3
 81138dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 81138e0:	f84e 3b04 	str.w	r3, [lr], #4
 81138e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 81138e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 81138ec:	f8be 3000 	ldrh.w	r3, [lr]
 81138f0:	fb09 330a 	mla	r3, r9, sl, r3
 81138f4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 81138f8:	4562      	cmp	r2, ip
 81138fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 81138fe:	d8e5      	bhi.n	81138cc <__multiply+0x10c>
 8113900:	9f01      	ldr	r7, [sp, #4]
 8113902:	51eb      	str	r3, [r5, r7]
 8113904:	3504      	adds	r5, #4
 8113906:	e799      	b.n	811383c <__multiply+0x7c>
 8113908:	3e01      	subs	r6, #1
 811390a:	e79b      	b.n	8113844 <__multiply+0x84>
 811390c:	08116e51 	.word	0x08116e51
 8113910:	08116e62 	.word	0x08116e62

08113914 <__pow5mult>:
 8113914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8113918:	4615      	mov	r5, r2
 811391a:	f012 0203 	ands.w	r2, r2, #3
 811391e:	4607      	mov	r7, r0
 8113920:	460e      	mov	r6, r1
 8113922:	d007      	beq.n	8113934 <__pow5mult+0x20>
 8113924:	4c25      	ldr	r4, [pc, #148]	@ (81139bc <__pow5mult+0xa8>)
 8113926:	3a01      	subs	r2, #1
 8113928:	2300      	movs	r3, #0
 811392a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 811392e:	f7ff fe55 	bl	81135dc <__multadd>
 8113932:	4606      	mov	r6, r0
 8113934:	10ad      	asrs	r5, r5, #2
 8113936:	d03d      	beq.n	81139b4 <__pow5mult+0xa0>
 8113938:	69fc      	ldr	r4, [r7, #28]
 811393a:	b97c      	cbnz	r4, 811395c <__pow5mult+0x48>
 811393c:	2010      	movs	r0, #16
 811393e:	f7ff fd35 	bl	81133ac <malloc>
 8113942:	4602      	mov	r2, r0
 8113944:	61f8      	str	r0, [r7, #28]
 8113946:	b928      	cbnz	r0, 8113954 <__pow5mult+0x40>
 8113948:	4b1d      	ldr	r3, [pc, #116]	@ (81139c0 <__pow5mult+0xac>)
 811394a:	481e      	ldr	r0, [pc, #120]	@ (81139c4 <__pow5mult+0xb0>)
 811394c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8113950:	f7fe fe78 	bl	8112644 <__assert_func>
 8113954:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8113958:	6004      	str	r4, [r0, #0]
 811395a:	60c4      	str	r4, [r0, #12]
 811395c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8113960:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8113964:	b94c      	cbnz	r4, 811397a <__pow5mult+0x66>
 8113966:	f240 2171 	movw	r1, #625	@ 0x271
 811396a:	4638      	mov	r0, r7
 811396c:	f7ff ff12 	bl	8113794 <__i2b>
 8113970:	2300      	movs	r3, #0
 8113972:	f8c8 0008 	str.w	r0, [r8, #8]
 8113976:	4604      	mov	r4, r0
 8113978:	6003      	str	r3, [r0, #0]
 811397a:	f04f 0900 	mov.w	r9, #0
 811397e:	07eb      	lsls	r3, r5, #31
 8113980:	d50a      	bpl.n	8113998 <__pow5mult+0x84>
 8113982:	4631      	mov	r1, r6
 8113984:	4622      	mov	r2, r4
 8113986:	4638      	mov	r0, r7
 8113988:	f7ff ff1a 	bl	81137c0 <__multiply>
 811398c:	4631      	mov	r1, r6
 811398e:	4680      	mov	r8, r0
 8113990:	4638      	mov	r0, r7
 8113992:	f7ff fe01 	bl	8113598 <_Bfree>
 8113996:	4646      	mov	r6, r8
 8113998:	106d      	asrs	r5, r5, #1
 811399a:	d00b      	beq.n	81139b4 <__pow5mult+0xa0>
 811399c:	6820      	ldr	r0, [r4, #0]
 811399e:	b938      	cbnz	r0, 81139b0 <__pow5mult+0x9c>
 81139a0:	4622      	mov	r2, r4
 81139a2:	4621      	mov	r1, r4
 81139a4:	4638      	mov	r0, r7
 81139a6:	f7ff ff0b 	bl	81137c0 <__multiply>
 81139aa:	6020      	str	r0, [r4, #0]
 81139ac:	f8c0 9000 	str.w	r9, [r0]
 81139b0:	4604      	mov	r4, r0
 81139b2:	e7e4      	b.n	811397e <__pow5mult+0x6a>
 81139b4:	4630      	mov	r0, r6
 81139b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81139ba:	bf00      	nop
 81139bc:	08116ebc 	.word	0x08116ebc
 81139c0:	08116d08 	.word	0x08116d08
 81139c4:	08116e62 	.word	0x08116e62

081139c8 <__lshift>:
 81139c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81139cc:	460c      	mov	r4, r1
 81139ce:	6849      	ldr	r1, [r1, #4]
 81139d0:	6923      	ldr	r3, [r4, #16]
 81139d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 81139d6:	68a3      	ldr	r3, [r4, #8]
 81139d8:	4607      	mov	r7, r0
 81139da:	4691      	mov	r9, r2
 81139dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 81139e0:	f108 0601 	add.w	r6, r8, #1
 81139e4:	42b3      	cmp	r3, r6
 81139e6:	db0b      	blt.n	8113a00 <__lshift+0x38>
 81139e8:	4638      	mov	r0, r7
 81139ea:	f7ff fd95 	bl	8113518 <_Balloc>
 81139ee:	4605      	mov	r5, r0
 81139f0:	b948      	cbnz	r0, 8113a06 <__lshift+0x3e>
 81139f2:	4602      	mov	r2, r0
 81139f4:	4b28      	ldr	r3, [pc, #160]	@ (8113a98 <__lshift+0xd0>)
 81139f6:	4829      	ldr	r0, [pc, #164]	@ (8113a9c <__lshift+0xd4>)
 81139f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 81139fc:	f7fe fe22 	bl	8112644 <__assert_func>
 8113a00:	3101      	adds	r1, #1
 8113a02:	005b      	lsls	r3, r3, #1
 8113a04:	e7ee      	b.n	81139e4 <__lshift+0x1c>
 8113a06:	2300      	movs	r3, #0
 8113a08:	f100 0114 	add.w	r1, r0, #20
 8113a0c:	f100 0210 	add.w	r2, r0, #16
 8113a10:	4618      	mov	r0, r3
 8113a12:	4553      	cmp	r3, sl
 8113a14:	db33      	blt.n	8113a7e <__lshift+0xb6>
 8113a16:	6920      	ldr	r0, [r4, #16]
 8113a18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8113a1c:	f104 0314 	add.w	r3, r4, #20
 8113a20:	f019 091f 	ands.w	r9, r9, #31
 8113a24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8113a28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8113a2c:	d02b      	beq.n	8113a86 <__lshift+0xbe>
 8113a2e:	f1c9 0e20 	rsb	lr, r9, #32
 8113a32:	468a      	mov	sl, r1
 8113a34:	2200      	movs	r2, #0
 8113a36:	6818      	ldr	r0, [r3, #0]
 8113a38:	fa00 f009 	lsl.w	r0, r0, r9
 8113a3c:	4310      	orrs	r0, r2
 8113a3e:	f84a 0b04 	str.w	r0, [sl], #4
 8113a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8113a46:	459c      	cmp	ip, r3
 8113a48:	fa22 f20e 	lsr.w	r2, r2, lr
 8113a4c:	d8f3      	bhi.n	8113a36 <__lshift+0x6e>
 8113a4e:	ebac 0304 	sub.w	r3, ip, r4
 8113a52:	3b15      	subs	r3, #21
 8113a54:	f023 0303 	bic.w	r3, r3, #3
 8113a58:	3304      	adds	r3, #4
 8113a5a:	f104 0015 	add.w	r0, r4, #21
 8113a5e:	4584      	cmp	ip, r0
 8113a60:	bf38      	it	cc
 8113a62:	2304      	movcc	r3, #4
 8113a64:	50ca      	str	r2, [r1, r3]
 8113a66:	b10a      	cbz	r2, 8113a6c <__lshift+0xa4>
 8113a68:	f108 0602 	add.w	r6, r8, #2
 8113a6c:	3e01      	subs	r6, #1
 8113a6e:	4638      	mov	r0, r7
 8113a70:	612e      	str	r6, [r5, #16]
 8113a72:	4621      	mov	r1, r4
 8113a74:	f7ff fd90 	bl	8113598 <_Bfree>
 8113a78:	4628      	mov	r0, r5
 8113a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8113a7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8113a82:	3301      	adds	r3, #1
 8113a84:	e7c5      	b.n	8113a12 <__lshift+0x4a>
 8113a86:	3904      	subs	r1, #4
 8113a88:	f853 2b04 	ldr.w	r2, [r3], #4
 8113a8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8113a90:	459c      	cmp	ip, r3
 8113a92:	d8f9      	bhi.n	8113a88 <__lshift+0xc0>
 8113a94:	e7ea      	b.n	8113a6c <__lshift+0xa4>
 8113a96:	bf00      	nop
 8113a98:	08116e51 	.word	0x08116e51
 8113a9c:	08116e62 	.word	0x08116e62

08113aa0 <__mcmp>:
 8113aa0:	690a      	ldr	r2, [r1, #16]
 8113aa2:	4603      	mov	r3, r0
 8113aa4:	6900      	ldr	r0, [r0, #16]
 8113aa6:	1a80      	subs	r0, r0, r2
 8113aa8:	b530      	push	{r4, r5, lr}
 8113aaa:	d10e      	bne.n	8113aca <__mcmp+0x2a>
 8113aac:	3314      	adds	r3, #20
 8113aae:	3114      	adds	r1, #20
 8113ab0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8113ab4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8113ab8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8113abc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8113ac0:	4295      	cmp	r5, r2
 8113ac2:	d003      	beq.n	8113acc <__mcmp+0x2c>
 8113ac4:	d205      	bcs.n	8113ad2 <__mcmp+0x32>
 8113ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8113aca:	bd30      	pop	{r4, r5, pc}
 8113acc:	42a3      	cmp	r3, r4
 8113ace:	d3f3      	bcc.n	8113ab8 <__mcmp+0x18>
 8113ad0:	e7fb      	b.n	8113aca <__mcmp+0x2a>
 8113ad2:	2001      	movs	r0, #1
 8113ad4:	e7f9      	b.n	8113aca <__mcmp+0x2a>
	...

08113ad8 <__mdiff>:
 8113ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8113adc:	4689      	mov	r9, r1
 8113ade:	4606      	mov	r6, r0
 8113ae0:	4611      	mov	r1, r2
 8113ae2:	4648      	mov	r0, r9
 8113ae4:	4614      	mov	r4, r2
 8113ae6:	f7ff ffdb 	bl	8113aa0 <__mcmp>
 8113aea:	1e05      	subs	r5, r0, #0
 8113aec:	d112      	bne.n	8113b14 <__mdiff+0x3c>
 8113aee:	4629      	mov	r1, r5
 8113af0:	4630      	mov	r0, r6
 8113af2:	f7ff fd11 	bl	8113518 <_Balloc>
 8113af6:	4602      	mov	r2, r0
 8113af8:	b928      	cbnz	r0, 8113b06 <__mdiff+0x2e>
 8113afa:	4b3f      	ldr	r3, [pc, #252]	@ (8113bf8 <__mdiff+0x120>)
 8113afc:	f240 2137 	movw	r1, #567	@ 0x237
 8113b00:	483e      	ldr	r0, [pc, #248]	@ (8113bfc <__mdiff+0x124>)
 8113b02:	f7fe fd9f 	bl	8112644 <__assert_func>
 8113b06:	2301      	movs	r3, #1
 8113b08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8113b0c:	4610      	mov	r0, r2
 8113b0e:	b003      	add	sp, #12
 8113b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8113b14:	bfbc      	itt	lt
 8113b16:	464b      	movlt	r3, r9
 8113b18:	46a1      	movlt	r9, r4
 8113b1a:	4630      	mov	r0, r6
 8113b1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8113b20:	bfba      	itte	lt
 8113b22:	461c      	movlt	r4, r3
 8113b24:	2501      	movlt	r5, #1
 8113b26:	2500      	movge	r5, #0
 8113b28:	f7ff fcf6 	bl	8113518 <_Balloc>
 8113b2c:	4602      	mov	r2, r0
 8113b2e:	b918      	cbnz	r0, 8113b38 <__mdiff+0x60>
 8113b30:	4b31      	ldr	r3, [pc, #196]	@ (8113bf8 <__mdiff+0x120>)
 8113b32:	f240 2145 	movw	r1, #581	@ 0x245
 8113b36:	e7e3      	b.n	8113b00 <__mdiff+0x28>
 8113b38:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8113b3c:	6926      	ldr	r6, [r4, #16]
 8113b3e:	60c5      	str	r5, [r0, #12]
 8113b40:	f109 0310 	add.w	r3, r9, #16
 8113b44:	f109 0514 	add.w	r5, r9, #20
 8113b48:	f104 0e14 	add.w	lr, r4, #20
 8113b4c:	f100 0b14 	add.w	fp, r0, #20
 8113b50:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8113b54:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8113b58:	9301      	str	r3, [sp, #4]
 8113b5a:	46d9      	mov	r9, fp
 8113b5c:	f04f 0c00 	mov.w	ip, #0
 8113b60:	9b01      	ldr	r3, [sp, #4]
 8113b62:	f85e 0b04 	ldr.w	r0, [lr], #4
 8113b66:	f853 af04 	ldr.w	sl, [r3, #4]!
 8113b6a:	9301      	str	r3, [sp, #4]
 8113b6c:	fa1f f38a 	uxth.w	r3, sl
 8113b70:	4619      	mov	r1, r3
 8113b72:	b283      	uxth	r3, r0
 8113b74:	1acb      	subs	r3, r1, r3
 8113b76:	0c00      	lsrs	r0, r0, #16
 8113b78:	4463      	add	r3, ip
 8113b7a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8113b7e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8113b82:	b29b      	uxth	r3, r3
 8113b84:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8113b88:	4576      	cmp	r6, lr
 8113b8a:	f849 3b04 	str.w	r3, [r9], #4
 8113b8e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8113b92:	d8e5      	bhi.n	8113b60 <__mdiff+0x88>
 8113b94:	1b33      	subs	r3, r6, r4
 8113b96:	3b15      	subs	r3, #21
 8113b98:	f023 0303 	bic.w	r3, r3, #3
 8113b9c:	3415      	adds	r4, #21
 8113b9e:	3304      	adds	r3, #4
 8113ba0:	42a6      	cmp	r6, r4
 8113ba2:	bf38      	it	cc
 8113ba4:	2304      	movcc	r3, #4
 8113ba6:	441d      	add	r5, r3
 8113ba8:	445b      	add	r3, fp
 8113baa:	461e      	mov	r6, r3
 8113bac:	462c      	mov	r4, r5
 8113bae:	4544      	cmp	r4, r8
 8113bb0:	d30e      	bcc.n	8113bd0 <__mdiff+0xf8>
 8113bb2:	f108 0103 	add.w	r1, r8, #3
 8113bb6:	1b49      	subs	r1, r1, r5
 8113bb8:	f021 0103 	bic.w	r1, r1, #3
 8113bbc:	3d03      	subs	r5, #3
 8113bbe:	45a8      	cmp	r8, r5
 8113bc0:	bf38      	it	cc
 8113bc2:	2100      	movcc	r1, #0
 8113bc4:	440b      	add	r3, r1
 8113bc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8113bca:	b191      	cbz	r1, 8113bf2 <__mdiff+0x11a>
 8113bcc:	6117      	str	r7, [r2, #16]
 8113bce:	e79d      	b.n	8113b0c <__mdiff+0x34>
 8113bd0:	f854 1b04 	ldr.w	r1, [r4], #4
 8113bd4:	46e6      	mov	lr, ip
 8113bd6:	0c08      	lsrs	r0, r1, #16
 8113bd8:	fa1c fc81 	uxtah	ip, ip, r1
 8113bdc:	4471      	add	r1, lr
 8113bde:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8113be2:	b289      	uxth	r1, r1
 8113be4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8113be8:	f846 1b04 	str.w	r1, [r6], #4
 8113bec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8113bf0:	e7dd      	b.n	8113bae <__mdiff+0xd6>
 8113bf2:	3f01      	subs	r7, #1
 8113bf4:	e7e7      	b.n	8113bc6 <__mdiff+0xee>
 8113bf6:	bf00      	nop
 8113bf8:	08116e51 	.word	0x08116e51
 8113bfc:	08116e62 	.word	0x08116e62

08113c00 <__ulp>:
 8113c00:	b082      	sub	sp, #8
 8113c02:	ed8d 0b00 	vstr	d0, [sp]
 8113c06:	9a01      	ldr	r2, [sp, #4]
 8113c08:	4b0f      	ldr	r3, [pc, #60]	@ (8113c48 <__ulp+0x48>)
 8113c0a:	4013      	ands	r3, r2
 8113c0c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8113c10:	2b00      	cmp	r3, #0
 8113c12:	dc08      	bgt.n	8113c26 <__ulp+0x26>
 8113c14:	425b      	negs	r3, r3
 8113c16:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8113c1a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8113c1e:	da04      	bge.n	8113c2a <__ulp+0x2a>
 8113c20:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8113c24:	4113      	asrs	r3, r2
 8113c26:	2200      	movs	r2, #0
 8113c28:	e008      	b.n	8113c3c <__ulp+0x3c>
 8113c2a:	f1a2 0314 	sub.w	r3, r2, #20
 8113c2e:	2b1e      	cmp	r3, #30
 8113c30:	bfda      	itte	le
 8113c32:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8113c36:	40da      	lsrle	r2, r3
 8113c38:	2201      	movgt	r2, #1
 8113c3a:	2300      	movs	r3, #0
 8113c3c:	4619      	mov	r1, r3
 8113c3e:	4610      	mov	r0, r2
 8113c40:	ec41 0b10 	vmov	d0, r0, r1
 8113c44:	b002      	add	sp, #8
 8113c46:	4770      	bx	lr
 8113c48:	7ff00000 	.word	0x7ff00000

08113c4c <__b2d>:
 8113c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8113c50:	6906      	ldr	r6, [r0, #16]
 8113c52:	f100 0814 	add.w	r8, r0, #20
 8113c56:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8113c5a:	1f37      	subs	r7, r6, #4
 8113c5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8113c60:	4610      	mov	r0, r2
 8113c62:	f7ff fd4b 	bl	81136fc <__hi0bits>
 8113c66:	f1c0 0320 	rsb	r3, r0, #32
 8113c6a:	280a      	cmp	r0, #10
 8113c6c:	600b      	str	r3, [r1, #0]
 8113c6e:	491b      	ldr	r1, [pc, #108]	@ (8113cdc <__b2d+0x90>)
 8113c70:	dc15      	bgt.n	8113c9e <__b2d+0x52>
 8113c72:	f1c0 0c0b 	rsb	ip, r0, #11
 8113c76:	fa22 f30c 	lsr.w	r3, r2, ip
 8113c7a:	45b8      	cmp	r8, r7
 8113c7c:	ea43 0501 	orr.w	r5, r3, r1
 8113c80:	bf34      	ite	cc
 8113c82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8113c86:	2300      	movcs	r3, #0
 8113c88:	3015      	adds	r0, #21
 8113c8a:	fa02 f000 	lsl.w	r0, r2, r0
 8113c8e:	fa23 f30c 	lsr.w	r3, r3, ip
 8113c92:	4303      	orrs	r3, r0
 8113c94:	461c      	mov	r4, r3
 8113c96:	ec45 4b10 	vmov	d0, r4, r5
 8113c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8113c9e:	45b8      	cmp	r8, r7
 8113ca0:	bf3a      	itte	cc
 8113ca2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8113ca6:	f1a6 0708 	subcc.w	r7, r6, #8
 8113caa:	2300      	movcs	r3, #0
 8113cac:	380b      	subs	r0, #11
 8113cae:	d012      	beq.n	8113cd6 <__b2d+0x8a>
 8113cb0:	f1c0 0120 	rsb	r1, r0, #32
 8113cb4:	fa23 f401 	lsr.w	r4, r3, r1
 8113cb8:	4082      	lsls	r2, r0
 8113cba:	4322      	orrs	r2, r4
 8113cbc:	4547      	cmp	r7, r8
 8113cbe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8113cc2:	bf8c      	ite	hi
 8113cc4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8113cc8:	2200      	movls	r2, #0
 8113cca:	4083      	lsls	r3, r0
 8113ccc:	40ca      	lsrs	r2, r1
 8113cce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8113cd2:	4313      	orrs	r3, r2
 8113cd4:	e7de      	b.n	8113c94 <__b2d+0x48>
 8113cd6:	ea42 0501 	orr.w	r5, r2, r1
 8113cda:	e7db      	b.n	8113c94 <__b2d+0x48>
 8113cdc:	3ff00000 	.word	0x3ff00000

08113ce0 <__d2b>:
 8113ce0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8113ce4:	460f      	mov	r7, r1
 8113ce6:	2101      	movs	r1, #1
 8113ce8:	ec59 8b10 	vmov	r8, r9, d0
 8113cec:	4616      	mov	r6, r2
 8113cee:	f7ff fc13 	bl	8113518 <_Balloc>
 8113cf2:	4604      	mov	r4, r0
 8113cf4:	b930      	cbnz	r0, 8113d04 <__d2b+0x24>
 8113cf6:	4602      	mov	r2, r0
 8113cf8:	4b23      	ldr	r3, [pc, #140]	@ (8113d88 <__d2b+0xa8>)
 8113cfa:	4824      	ldr	r0, [pc, #144]	@ (8113d8c <__d2b+0xac>)
 8113cfc:	f240 310f 	movw	r1, #783	@ 0x30f
 8113d00:	f7fe fca0 	bl	8112644 <__assert_func>
 8113d04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8113d08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8113d0c:	b10d      	cbz	r5, 8113d12 <__d2b+0x32>
 8113d0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8113d12:	9301      	str	r3, [sp, #4]
 8113d14:	f1b8 0300 	subs.w	r3, r8, #0
 8113d18:	d023      	beq.n	8113d62 <__d2b+0x82>
 8113d1a:	4668      	mov	r0, sp
 8113d1c:	9300      	str	r3, [sp, #0]
 8113d1e:	f7ff fd0c 	bl	811373a <__lo0bits>
 8113d22:	e9dd 1200 	ldrd	r1, r2, [sp]
 8113d26:	b1d0      	cbz	r0, 8113d5e <__d2b+0x7e>
 8113d28:	f1c0 0320 	rsb	r3, r0, #32
 8113d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8113d30:	430b      	orrs	r3, r1
 8113d32:	40c2      	lsrs	r2, r0
 8113d34:	6163      	str	r3, [r4, #20]
 8113d36:	9201      	str	r2, [sp, #4]
 8113d38:	9b01      	ldr	r3, [sp, #4]
 8113d3a:	61a3      	str	r3, [r4, #24]
 8113d3c:	2b00      	cmp	r3, #0
 8113d3e:	bf0c      	ite	eq
 8113d40:	2201      	moveq	r2, #1
 8113d42:	2202      	movne	r2, #2
 8113d44:	6122      	str	r2, [r4, #16]
 8113d46:	b1a5      	cbz	r5, 8113d72 <__d2b+0x92>
 8113d48:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8113d4c:	4405      	add	r5, r0
 8113d4e:	603d      	str	r5, [r7, #0]
 8113d50:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8113d54:	6030      	str	r0, [r6, #0]
 8113d56:	4620      	mov	r0, r4
 8113d58:	b003      	add	sp, #12
 8113d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8113d5e:	6161      	str	r1, [r4, #20]
 8113d60:	e7ea      	b.n	8113d38 <__d2b+0x58>
 8113d62:	a801      	add	r0, sp, #4
 8113d64:	f7ff fce9 	bl	811373a <__lo0bits>
 8113d68:	9b01      	ldr	r3, [sp, #4]
 8113d6a:	6163      	str	r3, [r4, #20]
 8113d6c:	3020      	adds	r0, #32
 8113d6e:	2201      	movs	r2, #1
 8113d70:	e7e8      	b.n	8113d44 <__d2b+0x64>
 8113d72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8113d76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8113d7a:	6038      	str	r0, [r7, #0]
 8113d7c:	6918      	ldr	r0, [r3, #16]
 8113d7e:	f7ff fcbd 	bl	81136fc <__hi0bits>
 8113d82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8113d86:	e7e5      	b.n	8113d54 <__d2b+0x74>
 8113d88:	08116e51 	.word	0x08116e51
 8113d8c:	08116e62 	.word	0x08116e62

08113d90 <__ratio>:
 8113d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8113d94:	b085      	sub	sp, #20
 8113d96:	e9cd 1000 	strd	r1, r0, [sp]
 8113d9a:	a902      	add	r1, sp, #8
 8113d9c:	f7ff ff56 	bl	8113c4c <__b2d>
 8113da0:	9800      	ldr	r0, [sp, #0]
 8113da2:	a903      	add	r1, sp, #12
 8113da4:	ec55 4b10 	vmov	r4, r5, d0
 8113da8:	f7ff ff50 	bl	8113c4c <__b2d>
 8113dac:	9b01      	ldr	r3, [sp, #4]
 8113dae:	6919      	ldr	r1, [r3, #16]
 8113db0:	9b00      	ldr	r3, [sp, #0]
 8113db2:	691b      	ldr	r3, [r3, #16]
 8113db4:	1ac9      	subs	r1, r1, r3
 8113db6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8113dba:	1a9b      	subs	r3, r3, r2
 8113dbc:	ec5b ab10 	vmov	sl, fp, d0
 8113dc0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8113dc4:	2b00      	cmp	r3, #0
 8113dc6:	bfce      	itee	gt
 8113dc8:	462a      	movgt	r2, r5
 8113dca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8113dce:	465a      	movle	r2, fp
 8113dd0:	462f      	mov	r7, r5
 8113dd2:	46d9      	mov	r9, fp
 8113dd4:	bfcc      	ite	gt
 8113dd6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8113dda:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8113dde:	464b      	mov	r3, r9
 8113de0:	4652      	mov	r2, sl
 8113de2:	4620      	mov	r0, r4
 8113de4:	4639      	mov	r1, r7
 8113de6:	f7ec fdb9 	bl	810095c <__aeabi_ddiv>
 8113dea:	ec41 0b10 	vmov	d0, r0, r1
 8113dee:	b005      	add	sp, #20
 8113df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08113df4 <__copybits>:
 8113df4:	3901      	subs	r1, #1
 8113df6:	b570      	push	{r4, r5, r6, lr}
 8113df8:	1149      	asrs	r1, r1, #5
 8113dfa:	6914      	ldr	r4, [r2, #16]
 8113dfc:	3101      	adds	r1, #1
 8113dfe:	f102 0314 	add.w	r3, r2, #20
 8113e02:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8113e06:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8113e0a:	1f05      	subs	r5, r0, #4
 8113e0c:	42a3      	cmp	r3, r4
 8113e0e:	d30c      	bcc.n	8113e2a <__copybits+0x36>
 8113e10:	1aa3      	subs	r3, r4, r2
 8113e12:	3b11      	subs	r3, #17
 8113e14:	f023 0303 	bic.w	r3, r3, #3
 8113e18:	3211      	adds	r2, #17
 8113e1a:	42a2      	cmp	r2, r4
 8113e1c:	bf88      	it	hi
 8113e1e:	2300      	movhi	r3, #0
 8113e20:	4418      	add	r0, r3
 8113e22:	2300      	movs	r3, #0
 8113e24:	4288      	cmp	r0, r1
 8113e26:	d305      	bcc.n	8113e34 <__copybits+0x40>
 8113e28:	bd70      	pop	{r4, r5, r6, pc}
 8113e2a:	f853 6b04 	ldr.w	r6, [r3], #4
 8113e2e:	f845 6f04 	str.w	r6, [r5, #4]!
 8113e32:	e7eb      	b.n	8113e0c <__copybits+0x18>
 8113e34:	f840 3b04 	str.w	r3, [r0], #4
 8113e38:	e7f4      	b.n	8113e24 <__copybits+0x30>

08113e3a <__any_on>:
 8113e3a:	f100 0214 	add.w	r2, r0, #20
 8113e3e:	6900      	ldr	r0, [r0, #16]
 8113e40:	114b      	asrs	r3, r1, #5
 8113e42:	4298      	cmp	r0, r3
 8113e44:	b510      	push	{r4, lr}
 8113e46:	db11      	blt.n	8113e6c <__any_on+0x32>
 8113e48:	dd0a      	ble.n	8113e60 <__any_on+0x26>
 8113e4a:	f011 011f 	ands.w	r1, r1, #31
 8113e4e:	d007      	beq.n	8113e60 <__any_on+0x26>
 8113e50:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8113e54:	fa24 f001 	lsr.w	r0, r4, r1
 8113e58:	fa00 f101 	lsl.w	r1, r0, r1
 8113e5c:	428c      	cmp	r4, r1
 8113e5e:	d10b      	bne.n	8113e78 <__any_on+0x3e>
 8113e60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8113e64:	4293      	cmp	r3, r2
 8113e66:	d803      	bhi.n	8113e70 <__any_on+0x36>
 8113e68:	2000      	movs	r0, #0
 8113e6a:	bd10      	pop	{r4, pc}
 8113e6c:	4603      	mov	r3, r0
 8113e6e:	e7f7      	b.n	8113e60 <__any_on+0x26>
 8113e70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8113e74:	2900      	cmp	r1, #0
 8113e76:	d0f5      	beq.n	8113e64 <__any_on+0x2a>
 8113e78:	2001      	movs	r0, #1
 8113e7a:	e7f6      	b.n	8113e6a <__any_on+0x30>

08113e7c <sulp>:
 8113e7c:	b570      	push	{r4, r5, r6, lr}
 8113e7e:	4604      	mov	r4, r0
 8113e80:	460d      	mov	r5, r1
 8113e82:	ec45 4b10 	vmov	d0, r4, r5
 8113e86:	4616      	mov	r6, r2
 8113e88:	f7ff feba 	bl	8113c00 <__ulp>
 8113e8c:	ec51 0b10 	vmov	r0, r1, d0
 8113e90:	b17e      	cbz	r6, 8113eb2 <sulp+0x36>
 8113e92:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8113e96:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8113e9a:	2b00      	cmp	r3, #0
 8113e9c:	dd09      	ble.n	8113eb2 <sulp+0x36>
 8113e9e:	051b      	lsls	r3, r3, #20
 8113ea0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8113ea4:	2400      	movs	r4, #0
 8113ea6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8113eaa:	4622      	mov	r2, r4
 8113eac:	462b      	mov	r3, r5
 8113eae:	f7ec fc2b 	bl	8100708 <__aeabi_dmul>
 8113eb2:	ec41 0b10 	vmov	d0, r0, r1
 8113eb6:	bd70      	pop	{r4, r5, r6, pc}

08113eb8 <_strtod_l>:
 8113eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8113ebc:	b09f      	sub	sp, #124	@ 0x7c
 8113ebe:	460c      	mov	r4, r1
 8113ec0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8113ec2:	2200      	movs	r2, #0
 8113ec4:	921a      	str	r2, [sp, #104]	@ 0x68
 8113ec6:	9005      	str	r0, [sp, #20]
 8113ec8:	f04f 0a00 	mov.w	sl, #0
 8113ecc:	f04f 0b00 	mov.w	fp, #0
 8113ed0:	460a      	mov	r2, r1
 8113ed2:	9219      	str	r2, [sp, #100]	@ 0x64
 8113ed4:	7811      	ldrb	r1, [r2, #0]
 8113ed6:	292b      	cmp	r1, #43	@ 0x2b
 8113ed8:	d04a      	beq.n	8113f70 <_strtod_l+0xb8>
 8113eda:	d838      	bhi.n	8113f4e <_strtod_l+0x96>
 8113edc:	290d      	cmp	r1, #13
 8113ede:	d832      	bhi.n	8113f46 <_strtod_l+0x8e>
 8113ee0:	2908      	cmp	r1, #8
 8113ee2:	d832      	bhi.n	8113f4a <_strtod_l+0x92>
 8113ee4:	2900      	cmp	r1, #0
 8113ee6:	d03b      	beq.n	8113f60 <_strtod_l+0xa8>
 8113ee8:	2200      	movs	r2, #0
 8113eea:	920b      	str	r2, [sp, #44]	@ 0x2c
 8113eec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8113eee:	782a      	ldrb	r2, [r5, #0]
 8113ef0:	2a30      	cmp	r2, #48	@ 0x30
 8113ef2:	f040 80b3 	bne.w	811405c <_strtod_l+0x1a4>
 8113ef6:	786a      	ldrb	r2, [r5, #1]
 8113ef8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8113efc:	2a58      	cmp	r2, #88	@ 0x58
 8113efe:	d16e      	bne.n	8113fde <_strtod_l+0x126>
 8113f00:	9302      	str	r3, [sp, #8]
 8113f02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8113f04:	9301      	str	r3, [sp, #4]
 8113f06:	ab1a      	add	r3, sp, #104	@ 0x68
 8113f08:	9300      	str	r3, [sp, #0]
 8113f0a:	4a8e      	ldr	r2, [pc, #568]	@ (8114144 <_strtod_l+0x28c>)
 8113f0c:	9805      	ldr	r0, [sp, #20]
 8113f0e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8113f10:	a919      	add	r1, sp, #100	@ 0x64
 8113f12:	f001 fadb 	bl	81154cc <__gethex>
 8113f16:	f010 060f 	ands.w	r6, r0, #15
 8113f1a:	4604      	mov	r4, r0
 8113f1c:	d005      	beq.n	8113f2a <_strtod_l+0x72>
 8113f1e:	2e06      	cmp	r6, #6
 8113f20:	d128      	bne.n	8113f74 <_strtod_l+0xbc>
 8113f22:	3501      	adds	r5, #1
 8113f24:	2300      	movs	r3, #0
 8113f26:	9519      	str	r5, [sp, #100]	@ 0x64
 8113f28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8113f2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8113f2c:	2b00      	cmp	r3, #0
 8113f2e:	f040 858e 	bne.w	8114a4e <_strtod_l+0xb96>
 8113f32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8113f34:	b1cb      	cbz	r3, 8113f6a <_strtod_l+0xb2>
 8113f36:	4652      	mov	r2, sl
 8113f38:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8113f3c:	ec43 2b10 	vmov	d0, r2, r3
 8113f40:	b01f      	add	sp, #124	@ 0x7c
 8113f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8113f46:	2920      	cmp	r1, #32
 8113f48:	d1ce      	bne.n	8113ee8 <_strtod_l+0x30>
 8113f4a:	3201      	adds	r2, #1
 8113f4c:	e7c1      	b.n	8113ed2 <_strtod_l+0x1a>
 8113f4e:	292d      	cmp	r1, #45	@ 0x2d
 8113f50:	d1ca      	bne.n	8113ee8 <_strtod_l+0x30>
 8113f52:	2101      	movs	r1, #1
 8113f54:	910b      	str	r1, [sp, #44]	@ 0x2c
 8113f56:	1c51      	adds	r1, r2, #1
 8113f58:	9119      	str	r1, [sp, #100]	@ 0x64
 8113f5a:	7852      	ldrb	r2, [r2, #1]
 8113f5c:	2a00      	cmp	r2, #0
 8113f5e:	d1c5      	bne.n	8113eec <_strtod_l+0x34>
 8113f60:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8113f62:	9419      	str	r4, [sp, #100]	@ 0x64
 8113f64:	2b00      	cmp	r3, #0
 8113f66:	f040 8570 	bne.w	8114a4a <_strtod_l+0xb92>
 8113f6a:	4652      	mov	r2, sl
 8113f6c:	465b      	mov	r3, fp
 8113f6e:	e7e5      	b.n	8113f3c <_strtod_l+0x84>
 8113f70:	2100      	movs	r1, #0
 8113f72:	e7ef      	b.n	8113f54 <_strtod_l+0x9c>
 8113f74:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8113f76:	b13a      	cbz	r2, 8113f88 <_strtod_l+0xd0>
 8113f78:	2135      	movs	r1, #53	@ 0x35
 8113f7a:	a81c      	add	r0, sp, #112	@ 0x70
 8113f7c:	f7ff ff3a 	bl	8113df4 <__copybits>
 8113f80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8113f82:	9805      	ldr	r0, [sp, #20]
 8113f84:	f7ff fb08 	bl	8113598 <_Bfree>
 8113f88:	3e01      	subs	r6, #1
 8113f8a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8113f8c:	2e04      	cmp	r6, #4
 8113f8e:	d806      	bhi.n	8113f9e <_strtod_l+0xe6>
 8113f90:	e8df f006 	tbb	[pc, r6]
 8113f94:	201d0314 	.word	0x201d0314
 8113f98:	14          	.byte	0x14
 8113f99:	00          	.byte	0x00
 8113f9a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8113f9e:	05e1      	lsls	r1, r4, #23
 8113fa0:	bf48      	it	mi
 8113fa2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8113fa6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8113faa:	0d1b      	lsrs	r3, r3, #20
 8113fac:	051b      	lsls	r3, r3, #20
 8113fae:	2b00      	cmp	r3, #0
 8113fb0:	d1bb      	bne.n	8113f2a <_strtod_l+0x72>
 8113fb2:	f7fe fb05 	bl	81125c0 <__errno>
 8113fb6:	2322      	movs	r3, #34	@ 0x22
 8113fb8:	6003      	str	r3, [r0, #0]
 8113fba:	e7b6      	b.n	8113f2a <_strtod_l+0x72>
 8113fbc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8113fc0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8113fc4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8113fc8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8113fcc:	e7e7      	b.n	8113f9e <_strtod_l+0xe6>
 8113fce:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 811414c <_strtod_l+0x294>
 8113fd2:	e7e4      	b.n	8113f9e <_strtod_l+0xe6>
 8113fd4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8113fd8:	f04f 3aff 	mov.w	sl, #4294967295
 8113fdc:	e7df      	b.n	8113f9e <_strtod_l+0xe6>
 8113fde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8113fe0:	1c5a      	adds	r2, r3, #1
 8113fe2:	9219      	str	r2, [sp, #100]	@ 0x64
 8113fe4:	785b      	ldrb	r3, [r3, #1]
 8113fe6:	2b30      	cmp	r3, #48	@ 0x30
 8113fe8:	d0f9      	beq.n	8113fde <_strtod_l+0x126>
 8113fea:	2b00      	cmp	r3, #0
 8113fec:	d09d      	beq.n	8113f2a <_strtod_l+0x72>
 8113fee:	2301      	movs	r3, #1
 8113ff0:	9309      	str	r3, [sp, #36]	@ 0x24
 8113ff2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8113ff4:	930c      	str	r3, [sp, #48]	@ 0x30
 8113ff6:	2300      	movs	r3, #0
 8113ff8:	9308      	str	r3, [sp, #32]
 8113ffa:	930a      	str	r3, [sp, #40]	@ 0x28
 8113ffc:	461f      	mov	r7, r3
 8113ffe:	220a      	movs	r2, #10
 8114000:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8114002:	7805      	ldrb	r5, [r0, #0]
 8114004:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8114008:	b2d9      	uxtb	r1, r3
 811400a:	2909      	cmp	r1, #9
 811400c:	d928      	bls.n	8114060 <_strtod_l+0x1a8>
 811400e:	494e      	ldr	r1, [pc, #312]	@ (8114148 <_strtod_l+0x290>)
 8114010:	2201      	movs	r2, #1
 8114012:	f001 f98b 	bl	811532c <strncmp>
 8114016:	2800      	cmp	r0, #0
 8114018:	d032      	beq.n	8114080 <_strtod_l+0x1c8>
 811401a:	2000      	movs	r0, #0
 811401c:	462a      	mov	r2, r5
 811401e:	4681      	mov	r9, r0
 8114020:	463d      	mov	r5, r7
 8114022:	4603      	mov	r3, r0
 8114024:	2a65      	cmp	r2, #101	@ 0x65
 8114026:	d001      	beq.n	811402c <_strtod_l+0x174>
 8114028:	2a45      	cmp	r2, #69	@ 0x45
 811402a:	d114      	bne.n	8114056 <_strtod_l+0x19e>
 811402c:	b91d      	cbnz	r5, 8114036 <_strtod_l+0x17e>
 811402e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8114030:	4302      	orrs	r2, r0
 8114032:	d095      	beq.n	8113f60 <_strtod_l+0xa8>
 8114034:	2500      	movs	r5, #0
 8114036:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8114038:	1c62      	adds	r2, r4, #1
 811403a:	9219      	str	r2, [sp, #100]	@ 0x64
 811403c:	7862      	ldrb	r2, [r4, #1]
 811403e:	2a2b      	cmp	r2, #43	@ 0x2b
 8114040:	d077      	beq.n	8114132 <_strtod_l+0x27a>
 8114042:	2a2d      	cmp	r2, #45	@ 0x2d
 8114044:	d07b      	beq.n	811413e <_strtod_l+0x286>
 8114046:	f04f 0c00 	mov.w	ip, #0
 811404a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 811404e:	2909      	cmp	r1, #9
 8114050:	f240 8082 	bls.w	8114158 <_strtod_l+0x2a0>
 8114054:	9419      	str	r4, [sp, #100]	@ 0x64
 8114056:	f04f 0800 	mov.w	r8, #0
 811405a:	e0a2      	b.n	81141a2 <_strtod_l+0x2ea>
 811405c:	2300      	movs	r3, #0
 811405e:	e7c7      	b.n	8113ff0 <_strtod_l+0x138>
 8114060:	2f08      	cmp	r7, #8
 8114062:	bfd5      	itete	le
 8114064:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8114066:	9908      	ldrgt	r1, [sp, #32]
 8114068:	fb02 3301 	mlale	r3, r2, r1, r3
 811406c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8114070:	f100 0001 	add.w	r0, r0, #1
 8114074:	bfd4      	ite	le
 8114076:	930a      	strle	r3, [sp, #40]	@ 0x28
 8114078:	9308      	strgt	r3, [sp, #32]
 811407a:	3701      	adds	r7, #1
 811407c:	9019      	str	r0, [sp, #100]	@ 0x64
 811407e:	e7bf      	b.n	8114000 <_strtod_l+0x148>
 8114080:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8114082:	1c5a      	adds	r2, r3, #1
 8114084:	9219      	str	r2, [sp, #100]	@ 0x64
 8114086:	785a      	ldrb	r2, [r3, #1]
 8114088:	b37f      	cbz	r7, 81140ea <_strtod_l+0x232>
 811408a:	4681      	mov	r9, r0
 811408c:	463d      	mov	r5, r7
 811408e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8114092:	2b09      	cmp	r3, #9
 8114094:	d912      	bls.n	81140bc <_strtod_l+0x204>
 8114096:	2301      	movs	r3, #1
 8114098:	e7c4      	b.n	8114024 <_strtod_l+0x16c>
 811409a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 811409c:	1c5a      	adds	r2, r3, #1
 811409e:	9219      	str	r2, [sp, #100]	@ 0x64
 81140a0:	785a      	ldrb	r2, [r3, #1]
 81140a2:	3001      	adds	r0, #1
 81140a4:	2a30      	cmp	r2, #48	@ 0x30
 81140a6:	d0f8      	beq.n	811409a <_strtod_l+0x1e2>
 81140a8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 81140ac:	2b08      	cmp	r3, #8
 81140ae:	f200 84d3 	bhi.w	8114a58 <_strtod_l+0xba0>
 81140b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 81140b4:	930c      	str	r3, [sp, #48]	@ 0x30
 81140b6:	4681      	mov	r9, r0
 81140b8:	2000      	movs	r0, #0
 81140ba:	4605      	mov	r5, r0
 81140bc:	3a30      	subs	r2, #48	@ 0x30
 81140be:	f100 0301 	add.w	r3, r0, #1
 81140c2:	d02a      	beq.n	811411a <_strtod_l+0x262>
 81140c4:	4499      	add	r9, r3
 81140c6:	eb00 0c05 	add.w	ip, r0, r5
 81140ca:	462b      	mov	r3, r5
 81140cc:	210a      	movs	r1, #10
 81140ce:	4563      	cmp	r3, ip
 81140d0:	d10d      	bne.n	81140ee <_strtod_l+0x236>
 81140d2:	1c69      	adds	r1, r5, #1
 81140d4:	4401      	add	r1, r0
 81140d6:	4428      	add	r0, r5
 81140d8:	2808      	cmp	r0, #8
 81140da:	dc16      	bgt.n	811410a <_strtod_l+0x252>
 81140dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 81140de:	230a      	movs	r3, #10
 81140e0:	fb03 2300 	mla	r3, r3, r0, r2
 81140e4:	930a      	str	r3, [sp, #40]	@ 0x28
 81140e6:	2300      	movs	r3, #0
 81140e8:	e018      	b.n	811411c <_strtod_l+0x264>
 81140ea:	4638      	mov	r0, r7
 81140ec:	e7da      	b.n	81140a4 <_strtod_l+0x1ec>
 81140ee:	2b08      	cmp	r3, #8
 81140f0:	f103 0301 	add.w	r3, r3, #1
 81140f4:	dc03      	bgt.n	81140fe <_strtod_l+0x246>
 81140f6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 81140f8:	434e      	muls	r6, r1
 81140fa:	960a      	str	r6, [sp, #40]	@ 0x28
 81140fc:	e7e7      	b.n	81140ce <_strtod_l+0x216>
 81140fe:	2b10      	cmp	r3, #16
 8114100:	bfde      	ittt	le
 8114102:	9e08      	ldrle	r6, [sp, #32]
 8114104:	434e      	mulle	r6, r1
 8114106:	9608      	strle	r6, [sp, #32]
 8114108:	e7e1      	b.n	81140ce <_strtod_l+0x216>
 811410a:	280f      	cmp	r0, #15
 811410c:	dceb      	bgt.n	81140e6 <_strtod_l+0x22e>
 811410e:	9808      	ldr	r0, [sp, #32]
 8114110:	230a      	movs	r3, #10
 8114112:	fb03 2300 	mla	r3, r3, r0, r2
 8114116:	9308      	str	r3, [sp, #32]
 8114118:	e7e5      	b.n	81140e6 <_strtod_l+0x22e>
 811411a:	4629      	mov	r1, r5
 811411c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 811411e:	1c50      	adds	r0, r2, #1
 8114120:	9019      	str	r0, [sp, #100]	@ 0x64
 8114122:	7852      	ldrb	r2, [r2, #1]
 8114124:	4618      	mov	r0, r3
 8114126:	460d      	mov	r5, r1
 8114128:	e7b1      	b.n	811408e <_strtod_l+0x1d6>
 811412a:	f04f 0900 	mov.w	r9, #0
 811412e:	2301      	movs	r3, #1
 8114130:	e77d      	b.n	811402e <_strtod_l+0x176>
 8114132:	f04f 0c00 	mov.w	ip, #0
 8114136:	1ca2      	adds	r2, r4, #2
 8114138:	9219      	str	r2, [sp, #100]	@ 0x64
 811413a:	78a2      	ldrb	r2, [r4, #2]
 811413c:	e785      	b.n	811404a <_strtod_l+0x192>
 811413e:	f04f 0c01 	mov.w	ip, #1
 8114142:	e7f8      	b.n	8114136 <_strtod_l+0x27e>
 8114144:	08116fd0 	.word	0x08116fd0
 8114148:	08116fb8 	.word	0x08116fb8
 811414c:	7ff00000 	.word	0x7ff00000
 8114150:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8114152:	1c51      	adds	r1, r2, #1
 8114154:	9119      	str	r1, [sp, #100]	@ 0x64
 8114156:	7852      	ldrb	r2, [r2, #1]
 8114158:	2a30      	cmp	r2, #48	@ 0x30
 811415a:	d0f9      	beq.n	8114150 <_strtod_l+0x298>
 811415c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8114160:	2908      	cmp	r1, #8
 8114162:	f63f af78 	bhi.w	8114056 <_strtod_l+0x19e>
 8114166:	3a30      	subs	r2, #48	@ 0x30
 8114168:	920e      	str	r2, [sp, #56]	@ 0x38
 811416a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 811416c:	920f      	str	r2, [sp, #60]	@ 0x3c
 811416e:	f04f 080a 	mov.w	r8, #10
 8114172:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8114174:	1c56      	adds	r6, r2, #1
 8114176:	9619      	str	r6, [sp, #100]	@ 0x64
 8114178:	7852      	ldrb	r2, [r2, #1]
 811417a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 811417e:	f1be 0f09 	cmp.w	lr, #9
 8114182:	d939      	bls.n	81141f8 <_strtod_l+0x340>
 8114184:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8114186:	1a76      	subs	r6, r6, r1
 8114188:	2e08      	cmp	r6, #8
 811418a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 811418e:	dc03      	bgt.n	8114198 <_strtod_l+0x2e0>
 8114190:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8114192:	4588      	cmp	r8, r1
 8114194:	bfa8      	it	ge
 8114196:	4688      	movge	r8, r1
 8114198:	f1bc 0f00 	cmp.w	ip, #0
 811419c:	d001      	beq.n	81141a2 <_strtod_l+0x2ea>
 811419e:	f1c8 0800 	rsb	r8, r8, #0
 81141a2:	2d00      	cmp	r5, #0
 81141a4:	d14e      	bne.n	8114244 <_strtod_l+0x38c>
 81141a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 81141a8:	4308      	orrs	r0, r1
 81141aa:	f47f aebe 	bne.w	8113f2a <_strtod_l+0x72>
 81141ae:	2b00      	cmp	r3, #0
 81141b0:	f47f aed6 	bne.w	8113f60 <_strtod_l+0xa8>
 81141b4:	2a69      	cmp	r2, #105	@ 0x69
 81141b6:	d028      	beq.n	811420a <_strtod_l+0x352>
 81141b8:	dc25      	bgt.n	8114206 <_strtod_l+0x34e>
 81141ba:	2a49      	cmp	r2, #73	@ 0x49
 81141bc:	d025      	beq.n	811420a <_strtod_l+0x352>
 81141be:	2a4e      	cmp	r2, #78	@ 0x4e
 81141c0:	f47f aece 	bne.w	8113f60 <_strtod_l+0xa8>
 81141c4:	499b      	ldr	r1, [pc, #620]	@ (8114434 <_strtod_l+0x57c>)
 81141c6:	a819      	add	r0, sp, #100	@ 0x64
 81141c8:	f001 fba2 	bl	8115910 <__match>
 81141cc:	2800      	cmp	r0, #0
 81141ce:	f43f aec7 	beq.w	8113f60 <_strtod_l+0xa8>
 81141d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 81141d4:	781b      	ldrb	r3, [r3, #0]
 81141d6:	2b28      	cmp	r3, #40	@ 0x28
 81141d8:	d12e      	bne.n	8114238 <_strtod_l+0x380>
 81141da:	4997      	ldr	r1, [pc, #604]	@ (8114438 <_strtod_l+0x580>)
 81141dc:	aa1c      	add	r2, sp, #112	@ 0x70
 81141de:	a819      	add	r0, sp, #100	@ 0x64
 81141e0:	f001 fbaa 	bl	8115938 <__hexnan>
 81141e4:	2805      	cmp	r0, #5
 81141e6:	d127      	bne.n	8114238 <_strtod_l+0x380>
 81141e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 81141ea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 81141ee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 81141f2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 81141f6:	e698      	b.n	8113f2a <_strtod_l+0x72>
 81141f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 81141fa:	fb08 2101 	mla	r1, r8, r1, r2
 81141fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8114202:	920e      	str	r2, [sp, #56]	@ 0x38
 8114204:	e7b5      	b.n	8114172 <_strtod_l+0x2ba>
 8114206:	2a6e      	cmp	r2, #110	@ 0x6e
 8114208:	e7da      	b.n	81141c0 <_strtod_l+0x308>
 811420a:	498c      	ldr	r1, [pc, #560]	@ (811443c <_strtod_l+0x584>)
 811420c:	a819      	add	r0, sp, #100	@ 0x64
 811420e:	f001 fb7f 	bl	8115910 <__match>
 8114212:	2800      	cmp	r0, #0
 8114214:	f43f aea4 	beq.w	8113f60 <_strtod_l+0xa8>
 8114218:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 811421a:	4989      	ldr	r1, [pc, #548]	@ (8114440 <_strtod_l+0x588>)
 811421c:	3b01      	subs	r3, #1
 811421e:	a819      	add	r0, sp, #100	@ 0x64
 8114220:	9319      	str	r3, [sp, #100]	@ 0x64
 8114222:	f001 fb75 	bl	8115910 <__match>
 8114226:	b910      	cbnz	r0, 811422e <_strtod_l+0x376>
 8114228:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 811422a:	3301      	adds	r3, #1
 811422c:	9319      	str	r3, [sp, #100]	@ 0x64
 811422e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8114450 <_strtod_l+0x598>
 8114232:	f04f 0a00 	mov.w	sl, #0
 8114236:	e678      	b.n	8113f2a <_strtod_l+0x72>
 8114238:	4882      	ldr	r0, [pc, #520]	@ (8114444 <_strtod_l+0x58c>)
 811423a:	f001 f8bd 	bl	81153b8 <nan>
 811423e:	ec5b ab10 	vmov	sl, fp, d0
 8114242:	e672      	b.n	8113f2a <_strtod_l+0x72>
 8114244:	eba8 0309 	sub.w	r3, r8, r9
 8114248:	980a      	ldr	r0, [sp, #40]	@ 0x28
 811424a:	9309      	str	r3, [sp, #36]	@ 0x24
 811424c:	2f00      	cmp	r7, #0
 811424e:	bf08      	it	eq
 8114250:	462f      	moveq	r7, r5
 8114252:	2d10      	cmp	r5, #16
 8114254:	462c      	mov	r4, r5
 8114256:	bfa8      	it	ge
 8114258:	2410      	movge	r4, #16
 811425a:	f7ec f9db 	bl	8100614 <__aeabi_ui2d>
 811425e:	2d09      	cmp	r5, #9
 8114260:	4682      	mov	sl, r0
 8114262:	468b      	mov	fp, r1
 8114264:	dc13      	bgt.n	811428e <_strtod_l+0x3d6>
 8114266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8114268:	2b00      	cmp	r3, #0
 811426a:	f43f ae5e 	beq.w	8113f2a <_strtod_l+0x72>
 811426e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8114270:	dd78      	ble.n	8114364 <_strtod_l+0x4ac>
 8114272:	2b16      	cmp	r3, #22
 8114274:	dc5f      	bgt.n	8114336 <_strtod_l+0x47e>
 8114276:	4974      	ldr	r1, [pc, #464]	@ (8114448 <_strtod_l+0x590>)
 8114278:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 811427c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8114280:	4652      	mov	r2, sl
 8114282:	465b      	mov	r3, fp
 8114284:	f7ec fa40 	bl	8100708 <__aeabi_dmul>
 8114288:	4682      	mov	sl, r0
 811428a:	468b      	mov	fp, r1
 811428c:	e64d      	b.n	8113f2a <_strtod_l+0x72>
 811428e:	4b6e      	ldr	r3, [pc, #440]	@ (8114448 <_strtod_l+0x590>)
 8114290:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8114294:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8114298:	f7ec fa36 	bl	8100708 <__aeabi_dmul>
 811429c:	4682      	mov	sl, r0
 811429e:	9808      	ldr	r0, [sp, #32]
 81142a0:	468b      	mov	fp, r1
 81142a2:	f7ec f9b7 	bl	8100614 <__aeabi_ui2d>
 81142a6:	4602      	mov	r2, r0
 81142a8:	460b      	mov	r3, r1
 81142aa:	4650      	mov	r0, sl
 81142ac:	4659      	mov	r1, fp
 81142ae:	f7ec f875 	bl	810039c <__adddf3>
 81142b2:	2d0f      	cmp	r5, #15
 81142b4:	4682      	mov	sl, r0
 81142b6:	468b      	mov	fp, r1
 81142b8:	ddd5      	ble.n	8114266 <_strtod_l+0x3ae>
 81142ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81142bc:	1b2c      	subs	r4, r5, r4
 81142be:	441c      	add	r4, r3
 81142c0:	2c00      	cmp	r4, #0
 81142c2:	f340 8096 	ble.w	81143f2 <_strtod_l+0x53a>
 81142c6:	f014 030f 	ands.w	r3, r4, #15
 81142ca:	d00a      	beq.n	81142e2 <_strtod_l+0x42a>
 81142cc:	495e      	ldr	r1, [pc, #376]	@ (8114448 <_strtod_l+0x590>)
 81142ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 81142d2:	4652      	mov	r2, sl
 81142d4:	465b      	mov	r3, fp
 81142d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 81142da:	f7ec fa15 	bl	8100708 <__aeabi_dmul>
 81142de:	4682      	mov	sl, r0
 81142e0:	468b      	mov	fp, r1
 81142e2:	f034 040f 	bics.w	r4, r4, #15
 81142e6:	d073      	beq.n	81143d0 <_strtod_l+0x518>
 81142e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 81142ec:	dd48      	ble.n	8114380 <_strtod_l+0x4c8>
 81142ee:	2400      	movs	r4, #0
 81142f0:	46a0      	mov	r8, r4
 81142f2:	940a      	str	r4, [sp, #40]	@ 0x28
 81142f4:	46a1      	mov	r9, r4
 81142f6:	9a05      	ldr	r2, [sp, #20]
 81142f8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8114450 <_strtod_l+0x598>
 81142fc:	2322      	movs	r3, #34	@ 0x22
 81142fe:	6013      	str	r3, [r2, #0]
 8114300:	f04f 0a00 	mov.w	sl, #0
 8114304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8114306:	2b00      	cmp	r3, #0
 8114308:	f43f ae0f 	beq.w	8113f2a <_strtod_l+0x72>
 811430c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 811430e:	9805      	ldr	r0, [sp, #20]
 8114310:	f7ff f942 	bl	8113598 <_Bfree>
 8114314:	9805      	ldr	r0, [sp, #20]
 8114316:	4649      	mov	r1, r9
 8114318:	f7ff f93e 	bl	8113598 <_Bfree>
 811431c:	9805      	ldr	r0, [sp, #20]
 811431e:	4641      	mov	r1, r8
 8114320:	f7ff f93a 	bl	8113598 <_Bfree>
 8114324:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8114326:	9805      	ldr	r0, [sp, #20]
 8114328:	f7ff f936 	bl	8113598 <_Bfree>
 811432c:	9805      	ldr	r0, [sp, #20]
 811432e:	4621      	mov	r1, r4
 8114330:	f7ff f932 	bl	8113598 <_Bfree>
 8114334:	e5f9      	b.n	8113f2a <_strtod_l+0x72>
 8114336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8114338:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 811433c:	4293      	cmp	r3, r2
 811433e:	dbbc      	blt.n	81142ba <_strtod_l+0x402>
 8114340:	4c41      	ldr	r4, [pc, #260]	@ (8114448 <_strtod_l+0x590>)
 8114342:	f1c5 050f 	rsb	r5, r5, #15
 8114346:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 811434a:	4652      	mov	r2, sl
 811434c:	465b      	mov	r3, fp
 811434e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8114352:	f7ec f9d9 	bl	8100708 <__aeabi_dmul>
 8114356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8114358:	1b5d      	subs	r5, r3, r5
 811435a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 811435e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8114362:	e78f      	b.n	8114284 <_strtod_l+0x3cc>
 8114364:	3316      	adds	r3, #22
 8114366:	dba8      	blt.n	81142ba <_strtod_l+0x402>
 8114368:	4b37      	ldr	r3, [pc, #220]	@ (8114448 <_strtod_l+0x590>)
 811436a:	eba9 0808 	sub.w	r8, r9, r8
 811436e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8114372:	e9d8 2300 	ldrd	r2, r3, [r8]
 8114376:	4650      	mov	r0, sl
 8114378:	4659      	mov	r1, fp
 811437a:	f7ec faef 	bl	810095c <__aeabi_ddiv>
 811437e:	e783      	b.n	8114288 <_strtod_l+0x3d0>
 8114380:	4b32      	ldr	r3, [pc, #200]	@ (811444c <_strtod_l+0x594>)
 8114382:	9308      	str	r3, [sp, #32]
 8114384:	2300      	movs	r3, #0
 8114386:	1124      	asrs	r4, r4, #4
 8114388:	4650      	mov	r0, sl
 811438a:	4659      	mov	r1, fp
 811438c:	461e      	mov	r6, r3
 811438e:	2c01      	cmp	r4, #1
 8114390:	dc21      	bgt.n	81143d6 <_strtod_l+0x51e>
 8114392:	b10b      	cbz	r3, 8114398 <_strtod_l+0x4e0>
 8114394:	4682      	mov	sl, r0
 8114396:	468b      	mov	fp, r1
 8114398:	492c      	ldr	r1, [pc, #176]	@ (811444c <_strtod_l+0x594>)
 811439a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 811439e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 81143a2:	4652      	mov	r2, sl
 81143a4:	465b      	mov	r3, fp
 81143a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 81143aa:	f7ec f9ad 	bl	8100708 <__aeabi_dmul>
 81143ae:	4b28      	ldr	r3, [pc, #160]	@ (8114450 <_strtod_l+0x598>)
 81143b0:	460a      	mov	r2, r1
 81143b2:	400b      	ands	r3, r1
 81143b4:	4927      	ldr	r1, [pc, #156]	@ (8114454 <_strtod_l+0x59c>)
 81143b6:	428b      	cmp	r3, r1
 81143b8:	4682      	mov	sl, r0
 81143ba:	d898      	bhi.n	81142ee <_strtod_l+0x436>
 81143bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 81143c0:	428b      	cmp	r3, r1
 81143c2:	bf86      	itte	hi
 81143c4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8114458 <_strtod_l+0x5a0>
 81143c8:	f04f 3aff 	movhi.w	sl, #4294967295
 81143cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 81143d0:	2300      	movs	r3, #0
 81143d2:	9308      	str	r3, [sp, #32]
 81143d4:	e07a      	b.n	81144cc <_strtod_l+0x614>
 81143d6:	07e2      	lsls	r2, r4, #31
 81143d8:	d505      	bpl.n	81143e6 <_strtod_l+0x52e>
 81143da:	9b08      	ldr	r3, [sp, #32]
 81143dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81143e0:	f7ec f992 	bl	8100708 <__aeabi_dmul>
 81143e4:	2301      	movs	r3, #1
 81143e6:	9a08      	ldr	r2, [sp, #32]
 81143e8:	3208      	adds	r2, #8
 81143ea:	3601      	adds	r6, #1
 81143ec:	1064      	asrs	r4, r4, #1
 81143ee:	9208      	str	r2, [sp, #32]
 81143f0:	e7cd      	b.n	811438e <_strtod_l+0x4d6>
 81143f2:	d0ed      	beq.n	81143d0 <_strtod_l+0x518>
 81143f4:	4264      	negs	r4, r4
 81143f6:	f014 020f 	ands.w	r2, r4, #15
 81143fa:	d00a      	beq.n	8114412 <_strtod_l+0x55a>
 81143fc:	4b12      	ldr	r3, [pc, #72]	@ (8114448 <_strtod_l+0x590>)
 81143fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8114402:	4650      	mov	r0, sl
 8114404:	4659      	mov	r1, fp
 8114406:	e9d3 2300 	ldrd	r2, r3, [r3]
 811440a:	f7ec faa7 	bl	810095c <__aeabi_ddiv>
 811440e:	4682      	mov	sl, r0
 8114410:	468b      	mov	fp, r1
 8114412:	1124      	asrs	r4, r4, #4
 8114414:	d0dc      	beq.n	81143d0 <_strtod_l+0x518>
 8114416:	2c1f      	cmp	r4, #31
 8114418:	dd20      	ble.n	811445c <_strtod_l+0x5a4>
 811441a:	2400      	movs	r4, #0
 811441c:	46a0      	mov	r8, r4
 811441e:	940a      	str	r4, [sp, #40]	@ 0x28
 8114420:	46a1      	mov	r9, r4
 8114422:	9a05      	ldr	r2, [sp, #20]
 8114424:	2322      	movs	r3, #34	@ 0x22
 8114426:	f04f 0a00 	mov.w	sl, #0
 811442a:	f04f 0b00 	mov.w	fp, #0
 811442e:	6013      	str	r3, [r2, #0]
 8114430:	e768      	b.n	8114304 <_strtod_l+0x44c>
 8114432:	bf00      	nop
 8114434:	08116d84 	.word	0x08116d84
 8114438:	08116fbc 	.word	0x08116fbc
 811443c:	08116d7c 	.word	0x08116d7c
 8114440:	08116def 	.word	0x08116def
 8114444:	08116deb 	.word	0x08116deb
 8114448:	08116ef0 	.word	0x08116ef0
 811444c:	08116ec8 	.word	0x08116ec8
 8114450:	7ff00000 	.word	0x7ff00000
 8114454:	7ca00000 	.word	0x7ca00000
 8114458:	7fefffff 	.word	0x7fefffff
 811445c:	f014 0310 	ands.w	r3, r4, #16
 8114460:	bf18      	it	ne
 8114462:	236a      	movne	r3, #106	@ 0x6a
 8114464:	4ea9      	ldr	r6, [pc, #676]	@ (811470c <_strtod_l+0x854>)
 8114466:	9308      	str	r3, [sp, #32]
 8114468:	4650      	mov	r0, sl
 811446a:	4659      	mov	r1, fp
 811446c:	2300      	movs	r3, #0
 811446e:	07e2      	lsls	r2, r4, #31
 8114470:	d504      	bpl.n	811447c <_strtod_l+0x5c4>
 8114472:	e9d6 2300 	ldrd	r2, r3, [r6]
 8114476:	f7ec f947 	bl	8100708 <__aeabi_dmul>
 811447a:	2301      	movs	r3, #1
 811447c:	1064      	asrs	r4, r4, #1
 811447e:	f106 0608 	add.w	r6, r6, #8
 8114482:	d1f4      	bne.n	811446e <_strtod_l+0x5b6>
 8114484:	b10b      	cbz	r3, 811448a <_strtod_l+0x5d2>
 8114486:	4682      	mov	sl, r0
 8114488:	468b      	mov	fp, r1
 811448a:	9b08      	ldr	r3, [sp, #32]
 811448c:	b1b3      	cbz	r3, 81144bc <_strtod_l+0x604>
 811448e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8114492:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8114496:	2b00      	cmp	r3, #0
 8114498:	4659      	mov	r1, fp
 811449a:	dd0f      	ble.n	81144bc <_strtod_l+0x604>
 811449c:	2b1f      	cmp	r3, #31
 811449e:	dd55      	ble.n	811454c <_strtod_l+0x694>
 81144a0:	2b34      	cmp	r3, #52	@ 0x34
 81144a2:	bfde      	ittt	le
 81144a4:	f04f 33ff 	movle.w	r3, #4294967295
 81144a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 81144ac:	4093      	lslle	r3, r2
 81144ae:	f04f 0a00 	mov.w	sl, #0
 81144b2:	bfcc      	ite	gt
 81144b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 81144b8:	ea03 0b01 	andle.w	fp, r3, r1
 81144bc:	2200      	movs	r2, #0
 81144be:	2300      	movs	r3, #0
 81144c0:	4650      	mov	r0, sl
 81144c2:	4659      	mov	r1, fp
 81144c4:	f7ec fb88 	bl	8100bd8 <__aeabi_dcmpeq>
 81144c8:	2800      	cmp	r0, #0
 81144ca:	d1a6      	bne.n	811441a <_strtod_l+0x562>
 81144cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81144ce:	9300      	str	r3, [sp, #0]
 81144d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 81144d2:	9805      	ldr	r0, [sp, #20]
 81144d4:	462b      	mov	r3, r5
 81144d6:	463a      	mov	r2, r7
 81144d8:	f7ff f8c6 	bl	8113668 <__s2b>
 81144dc:	900a      	str	r0, [sp, #40]	@ 0x28
 81144de:	2800      	cmp	r0, #0
 81144e0:	f43f af05 	beq.w	81142ee <_strtod_l+0x436>
 81144e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81144e6:	2a00      	cmp	r2, #0
 81144e8:	eba9 0308 	sub.w	r3, r9, r8
 81144ec:	bfa8      	it	ge
 81144ee:	2300      	movge	r3, #0
 81144f0:	9312      	str	r3, [sp, #72]	@ 0x48
 81144f2:	2400      	movs	r4, #0
 81144f4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 81144f8:	9316      	str	r3, [sp, #88]	@ 0x58
 81144fa:	46a0      	mov	r8, r4
 81144fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81144fe:	9805      	ldr	r0, [sp, #20]
 8114500:	6859      	ldr	r1, [r3, #4]
 8114502:	f7ff f809 	bl	8113518 <_Balloc>
 8114506:	4681      	mov	r9, r0
 8114508:	2800      	cmp	r0, #0
 811450a:	f43f aef4 	beq.w	81142f6 <_strtod_l+0x43e>
 811450e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8114510:	691a      	ldr	r2, [r3, #16]
 8114512:	3202      	adds	r2, #2
 8114514:	f103 010c 	add.w	r1, r3, #12
 8114518:	0092      	lsls	r2, r2, #2
 811451a:	300c      	adds	r0, #12
 811451c:	f7fe f87d 	bl	811261a <memcpy>
 8114520:	ec4b ab10 	vmov	d0, sl, fp
 8114524:	9805      	ldr	r0, [sp, #20]
 8114526:	aa1c      	add	r2, sp, #112	@ 0x70
 8114528:	a91b      	add	r1, sp, #108	@ 0x6c
 811452a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 811452e:	f7ff fbd7 	bl	8113ce0 <__d2b>
 8114532:	901a      	str	r0, [sp, #104]	@ 0x68
 8114534:	2800      	cmp	r0, #0
 8114536:	f43f aede 	beq.w	81142f6 <_strtod_l+0x43e>
 811453a:	9805      	ldr	r0, [sp, #20]
 811453c:	2101      	movs	r1, #1
 811453e:	f7ff f929 	bl	8113794 <__i2b>
 8114542:	4680      	mov	r8, r0
 8114544:	b948      	cbnz	r0, 811455a <_strtod_l+0x6a2>
 8114546:	f04f 0800 	mov.w	r8, #0
 811454a:	e6d4      	b.n	81142f6 <_strtod_l+0x43e>
 811454c:	f04f 32ff 	mov.w	r2, #4294967295
 8114550:	fa02 f303 	lsl.w	r3, r2, r3
 8114554:	ea03 0a0a 	and.w	sl, r3, sl
 8114558:	e7b0      	b.n	81144bc <_strtod_l+0x604>
 811455a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 811455c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 811455e:	2d00      	cmp	r5, #0
 8114560:	bfab      	itete	ge
 8114562:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8114564:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8114566:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8114568:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 811456a:	bfac      	ite	ge
 811456c:	18ef      	addge	r7, r5, r3
 811456e:	1b5e      	sublt	r6, r3, r5
 8114570:	9b08      	ldr	r3, [sp, #32]
 8114572:	1aed      	subs	r5, r5, r3
 8114574:	4415      	add	r5, r2
 8114576:	4b66      	ldr	r3, [pc, #408]	@ (8114710 <_strtod_l+0x858>)
 8114578:	3d01      	subs	r5, #1
 811457a:	429d      	cmp	r5, r3
 811457c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8114580:	da50      	bge.n	8114624 <_strtod_l+0x76c>
 8114582:	1b5b      	subs	r3, r3, r5
 8114584:	2b1f      	cmp	r3, #31
 8114586:	eba2 0203 	sub.w	r2, r2, r3
 811458a:	f04f 0101 	mov.w	r1, #1
 811458e:	dc3d      	bgt.n	811460c <_strtod_l+0x754>
 8114590:	fa01 f303 	lsl.w	r3, r1, r3
 8114594:	9313      	str	r3, [sp, #76]	@ 0x4c
 8114596:	2300      	movs	r3, #0
 8114598:	9310      	str	r3, [sp, #64]	@ 0x40
 811459a:	18bd      	adds	r5, r7, r2
 811459c:	9b08      	ldr	r3, [sp, #32]
 811459e:	42af      	cmp	r7, r5
 81145a0:	4416      	add	r6, r2
 81145a2:	441e      	add	r6, r3
 81145a4:	463b      	mov	r3, r7
 81145a6:	bfa8      	it	ge
 81145a8:	462b      	movge	r3, r5
 81145aa:	42b3      	cmp	r3, r6
 81145ac:	bfa8      	it	ge
 81145ae:	4633      	movge	r3, r6
 81145b0:	2b00      	cmp	r3, #0
 81145b2:	bfc2      	ittt	gt
 81145b4:	1aed      	subgt	r5, r5, r3
 81145b6:	1af6      	subgt	r6, r6, r3
 81145b8:	1aff      	subgt	r7, r7, r3
 81145ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 81145bc:	2b00      	cmp	r3, #0
 81145be:	dd16      	ble.n	81145ee <_strtod_l+0x736>
 81145c0:	4641      	mov	r1, r8
 81145c2:	9805      	ldr	r0, [sp, #20]
 81145c4:	461a      	mov	r2, r3
 81145c6:	f7ff f9a5 	bl	8113914 <__pow5mult>
 81145ca:	4680      	mov	r8, r0
 81145cc:	2800      	cmp	r0, #0
 81145ce:	d0ba      	beq.n	8114546 <_strtod_l+0x68e>
 81145d0:	4601      	mov	r1, r0
 81145d2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 81145d4:	9805      	ldr	r0, [sp, #20]
 81145d6:	f7ff f8f3 	bl	81137c0 <__multiply>
 81145da:	900e      	str	r0, [sp, #56]	@ 0x38
 81145dc:	2800      	cmp	r0, #0
 81145de:	f43f ae8a 	beq.w	81142f6 <_strtod_l+0x43e>
 81145e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 81145e4:	9805      	ldr	r0, [sp, #20]
 81145e6:	f7fe ffd7 	bl	8113598 <_Bfree>
 81145ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81145ec:	931a      	str	r3, [sp, #104]	@ 0x68
 81145ee:	2d00      	cmp	r5, #0
 81145f0:	dc1d      	bgt.n	811462e <_strtod_l+0x776>
 81145f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81145f4:	2b00      	cmp	r3, #0
 81145f6:	dd23      	ble.n	8114640 <_strtod_l+0x788>
 81145f8:	4649      	mov	r1, r9
 81145fa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 81145fc:	9805      	ldr	r0, [sp, #20]
 81145fe:	f7ff f989 	bl	8113914 <__pow5mult>
 8114602:	4681      	mov	r9, r0
 8114604:	b9e0      	cbnz	r0, 8114640 <_strtod_l+0x788>
 8114606:	f04f 0900 	mov.w	r9, #0
 811460a:	e674      	b.n	81142f6 <_strtod_l+0x43e>
 811460c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8114610:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8114614:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8114618:	35e2      	adds	r5, #226	@ 0xe2
 811461a:	fa01 f305 	lsl.w	r3, r1, r5
 811461e:	9310      	str	r3, [sp, #64]	@ 0x40
 8114620:	9113      	str	r1, [sp, #76]	@ 0x4c
 8114622:	e7ba      	b.n	811459a <_strtod_l+0x6e2>
 8114624:	2300      	movs	r3, #0
 8114626:	9310      	str	r3, [sp, #64]	@ 0x40
 8114628:	2301      	movs	r3, #1
 811462a:	9313      	str	r3, [sp, #76]	@ 0x4c
 811462c:	e7b5      	b.n	811459a <_strtod_l+0x6e2>
 811462e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8114630:	9805      	ldr	r0, [sp, #20]
 8114632:	462a      	mov	r2, r5
 8114634:	f7ff f9c8 	bl	81139c8 <__lshift>
 8114638:	901a      	str	r0, [sp, #104]	@ 0x68
 811463a:	2800      	cmp	r0, #0
 811463c:	d1d9      	bne.n	81145f2 <_strtod_l+0x73a>
 811463e:	e65a      	b.n	81142f6 <_strtod_l+0x43e>
 8114640:	2e00      	cmp	r6, #0
 8114642:	dd07      	ble.n	8114654 <_strtod_l+0x79c>
 8114644:	4649      	mov	r1, r9
 8114646:	9805      	ldr	r0, [sp, #20]
 8114648:	4632      	mov	r2, r6
 811464a:	f7ff f9bd 	bl	81139c8 <__lshift>
 811464e:	4681      	mov	r9, r0
 8114650:	2800      	cmp	r0, #0
 8114652:	d0d8      	beq.n	8114606 <_strtod_l+0x74e>
 8114654:	2f00      	cmp	r7, #0
 8114656:	dd08      	ble.n	811466a <_strtod_l+0x7b2>
 8114658:	4641      	mov	r1, r8
 811465a:	9805      	ldr	r0, [sp, #20]
 811465c:	463a      	mov	r2, r7
 811465e:	f7ff f9b3 	bl	81139c8 <__lshift>
 8114662:	4680      	mov	r8, r0
 8114664:	2800      	cmp	r0, #0
 8114666:	f43f ae46 	beq.w	81142f6 <_strtod_l+0x43e>
 811466a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 811466c:	9805      	ldr	r0, [sp, #20]
 811466e:	464a      	mov	r2, r9
 8114670:	f7ff fa32 	bl	8113ad8 <__mdiff>
 8114674:	4604      	mov	r4, r0
 8114676:	2800      	cmp	r0, #0
 8114678:	f43f ae3d 	beq.w	81142f6 <_strtod_l+0x43e>
 811467c:	68c3      	ldr	r3, [r0, #12]
 811467e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8114680:	2300      	movs	r3, #0
 8114682:	60c3      	str	r3, [r0, #12]
 8114684:	4641      	mov	r1, r8
 8114686:	f7ff fa0b 	bl	8113aa0 <__mcmp>
 811468a:	2800      	cmp	r0, #0
 811468c:	da46      	bge.n	811471c <_strtod_l+0x864>
 811468e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8114690:	ea53 030a 	orrs.w	r3, r3, sl
 8114694:	d16c      	bne.n	8114770 <_strtod_l+0x8b8>
 8114696:	f3cb 0313 	ubfx	r3, fp, #0, #20
 811469a:	2b00      	cmp	r3, #0
 811469c:	d168      	bne.n	8114770 <_strtod_l+0x8b8>
 811469e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 81146a2:	0d1b      	lsrs	r3, r3, #20
 81146a4:	051b      	lsls	r3, r3, #20
 81146a6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 81146aa:	d961      	bls.n	8114770 <_strtod_l+0x8b8>
 81146ac:	6963      	ldr	r3, [r4, #20]
 81146ae:	b913      	cbnz	r3, 81146b6 <_strtod_l+0x7fe>
 81146b0:	6923      	ldr	r3, [r4, #16]
 81146b2:	2b01      	cmp	r3, #1
 81146b4:	dd5c      	ble.n	8114770 <_strtod_l+0x8b8>
 81146b6:	4621      	mov	r1, r4
 81146b8:	2201      	movs	r2, #1
 81146ba:	9805      	ldr	r0, [sp, #20]
 81146bc:	f7ff f984 	bl	81139c8 <__lshift>
 81146c0:	4641      	mov	r1, r8
 81146c2:	4604      	mov	r4, r0
 81146c4:	f7ff f9ec 	bl	8113aa0 <__mcmp>
 81146c8:	2800      	cmp	r0, #0
 81146ca:	dd51      	ble.n	8114770 <_strtod_l+0x8b8>
 81146cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 81146d0:	9a08      	ldr	r2, [sp, #32]
 81146d2:	0d1b      	lsrs	r3, r3, #20
 81146d4:	051b      	lsls	r3, r3, #20
 81146d6:	2a00      	cmp	r2, #0
 81146d8:	d06b      	beq.n	81147b2 <_strtod_l+0x8fa>
 81146da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 81146de:	d868      	bhi.n	81147b2 <_strtod_l+0x8fa>
 81146e0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 81146e4:	f67f ae9d 	bls.w	8114422 <_strtod_l+0x56a>
 81146e8:	4b0a      	ldr	r3, [pc, #40]	@ (8114714 <_strtod_l+0x85c>)
 81146ea:	4650      	mov	r0, sl
 81146ec:	4659      	mov	r1, fp
 81146ee:	2200      	movs	r2, #0
 81146f0:	f7ec f80a 	bl	8100708 <__aeabi_dmul>
 81146f4:	4b08      	ldr	r3, [pc, #32]	@ (8114718 <_strtod_l+0x860>)
 81146f6:	400b      	ands	r3, r1
 81146f8:	4682      	mov	sl, r0
 81146fa:	468b      	mov	fp, r1
 81146fc:	2b00      	cmp	r3, #0
 81146fe:	f47f ae05 	bne.w	811430c <_strtod_l+0x454>
 8114702:	9a05      	ldr	r2, [sp, #20]
 8114704:	2322      	movs	r3, #34	@ 0x22
 8114706:	6013      	str	r3, [r2, #0]
 8114708:	e600      	b.n	811430c <_strtod_l+0x454>
 811470a:	bf00      	nop
 811470c:	08116fe8 	.word	0x08116fe8
 8114710:	fffffc02 	.word	0xfffffc02
 8114714:	39500000 	.word	0x39500000
 8114718:	7ff00000 	.word	0x7ff00000
 811471c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8114720:	d165      	bne.n	81147ee <_strtod_l+0x936>
 8114722:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8114724:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8114728:	b35a      	cbz	r2, 8114782 <_strtod_l+0x8ca>
 811472a:	4a9f      	ldr	r2, [pc, #636]	@ (81149a8 <_strtod_l+0xaf0>)
 811472c:	4293      	cmp	r3, r2
 811472e:	d12b      	bne.n	8114788 <_strtod_l+0x8d0>
 8114730:	9b08      	ldr	r3, [sp, #32]
 8114732:	4651      	mov	r1, sl
 8114734:	b303      	cbz	r3, 8114778 <_strtod_l+0x8c0>
 8114736:	4b9d      	ldr	r3, [pc, #628]	@ (81149ac <_strtod_l+0xaf4>)
 8114738:	465a      	mov	r2, fp
 811473a:	4013      	ands	r3, r2
 811473c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8114740:	f04f 32ff 	mov.w	r2, #4294967295
 8114744:	d81b      	bhi.n	811477e <_strtod_l+0x8c6>
 8114746:	0d1b      	lsrs	r3, r3, #20
 8114748:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 811474c:	fa02 f303 	lsl.w	r3, r2, r3
 8114750:	4299      	cmp	r1, r3
 8114752:	d119      	bne.n	8114788 <_strtod_l+0x8d0>
 8114754:	4b96      	ldr	r3, [pc, #600]	@ (81149b0 <_strtod_l+0xaf8>)
 8114756:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8114758:	429a      	cmp	r2, r3
 811475a:	d102      	bne.n	8114762 <_strtod_l+0x8aa>
 811475c:	3101      	adds	r1, #1
 811475e:	f43f adca 	beq.w	81142f6 <_strtod_l+0x43e>
 8114762:	4b92      	ldr	r3, [pc, #584]	@ (81149ac <_strtod_l+0xaf4>)
 8114764:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8114766:	401a      	ands	r2, r3
 8114768:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 811476c:	f04f 0a00 	mov.w	sl, #0
 8114770:	9b08      	ldr	r3, [sp, #32]
 8114772:	2b00      	cmp	r3, #0
 8114774:	d1b8      	bne.n	81146e8 <_strtod_l+0x830>
 8114776:	e5c9      	b.n	811430c <_strtod_l+0x454>
 8114778:	f04f 33ff 	mov.w	r3, #4294967295
 811477c:	e7e8      	b.n	8114750 <_strtod_l+0x898>
 811477e:	4613      	mov	r3, r2
 8114780:	e7e6      	b.n	8114750 <_strtod_l+0x898>
 8114782:	ea53 030a 	orrs.w	r3, r3, sl
 8114786:	d0a1      	beq.n	81146cc <_strtod_l+0x814>
 8114788:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 811478a:	b1db      	cbz	r3, 81147c4 <_strtod_l+0x90c>
 811478c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 811478e:	4213      	tst	r3, r2
 8114790:	d0ee      	beq.n	8114770 <_strtod_l+0x8b8>
 8114792:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8114794:	9a08      	ldr	r2, [sp, #32]
 8114796:	4650      	mov	r0, sl
 8114798:	4659      	mov	r1, fp
 811479a:	b1bb      	cbz	r3, 81147cc <_strtod_l+0x914>
 811479c:	f7ff fb6e 	bl	8113e7c <sulp>
 81147a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81147a4:	ec53 2b10 	vmov	r2, r3, d0
 81147a8:	f7eb fdf8 	bl	810039c <__adddf3>
 81147ac:	4682      	mov	sl, r0
 81147ae:	468b      	mov	fp, r1
 81147b0:	e7de      	b.n	8114770 <_strtod_l+0x8b8>
 81147b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 81147b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 81147ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 81147be:	f04f 3aff 	mov.w	sl, #4294967295
 81147c2:	e7d5      	b.n	8114770 <_strtod_l+0x8b8>
 81147c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 81147c6:	ea13 0f0a 	tst.w	r3, sl
 81147ca:	e7e1      	b.n	8114790 <_strtod_l+0x8d8>
 81147cc:	f7ff fb56 	bl	8113e7c <sulp>
 81147d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81147d4:	ec53 2b10 	vmov	r2, r3, d0
 81147d8:	f7eb fdde 	bl	8100398 <__aeabi_dsub>
 81147dc:	2200      	movs	r2, #0
 81147de:	2300      	movs	r3, #0
 81147e0:	4682      	mov	sl, r0
 81147e2:	468b      	mov	fp, r1
 81147e4:	f7ec f9f8 	bl	8100bd8 <__aeabi_dcmpeq>
 81147e8:	2800      	cmp	r0, #0
 81147ea:	d0c1      	beq.n	8114770 <_strtod_l+0x8b8>
 81147ec:	e619      	b.n	8114422 <_strtod_l+0x56a>
 81147ee:	4641      	mov	r1, r8
 81147f0:	4620      	mov	r0, r4
 81147f2:	f7ff facd 	bl	8113d90 <__ratio>
 81147f6:	ec57 6b10 	vmov	r6, r7, d0
 81147fa:	2200      	movs	r2, #0
 81147fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8114800:	4630      	mov	r0, r6
 8114802:	4639      	mov	r1, r7
 8114804:	f7ec f9fc 	bl	8100c00 <__aeabi_dcmple>
 8114808:	2800      	cmp	r0, #0
 811480a:	d06f      	beq.n	81148ec <_strtod_l+0xa34>
 811480c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811480e:	2b00      	cmp	r3, #0
 8114810:	d17a      	bne.n	8114908 <_strtod_l+0xa50>
 8114812:	f1ba 0f00 	cmp.w	sl, #0
 8114816:	d158      	bne.n	81148ca <_strtod_l+0xa12>
 8114818:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811481a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 811481e:	2b00      	cmp	r3, #0
 8114820:	d15a      	bne.n	81148d8 <_strtod_l+0xa20>
 8114822:	4b64      	ldr	r3, [pc, #400]	@ (81149b4 <_strtod_l+0xafc>)
 8114824:	2200      	movs	r2, #0
 8114826:	4630      	mov	r0, r6
 8114828:	4639      	mov	r1, r7
 811482a:	f7ec f9df 	bl	8100bec <__aeabi_dcmplt>
 811482e:	2800      	cmp	r0, #0
 8114830:	d159      	bne.n	81148e6 <_strtod_l+0xa2e>
 8114832:	4630      	mov	r0, r6
 8114834:	4639      	mov	r1, r7
 8114836:	4b60      	ldr	r3, [pc, #384]	@ (81149b8 <_strtod_l+0xb00>)
 8114838:	2200      	movs	r2, #0
 811483a:	f7eb ff65 	bl	8100708 <__aeabi_dmul>
 811483e:	4606      	mov	r6, r0
 8114840:	460f      	mov	r7, r1
 8114842:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8114846:	9606      	str	r6, [sp, #24]
 8114848:	9307      	str	r3, [sp, #28]
 811484a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 811484e:	4d57      	ldr	r5, [pc, #348]	@ (81149ac <_strtod_l+0xaf4>)
 8114850:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8114854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8114856:	401d      	ands	r5, r3
 8114858:	4b58      	ldr	r3, [pc, #352]	@ (81149bc <_strtod_l+0xb04>)
 811485a:	429d      	cmp	r5, r3
 811485c:	f040 80b2 	bne.w	81149c4 <_strtod_l+0xb0c>
 8114860:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8114862:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8114866:	ec4b ab10 	vmov	d0, sl, fp
 811486a:	f7ff f9c9 	bl	8113c00 <__ulp>
 811486e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8114872:	ec51 0b10 	vmov	r0, r1, d0
 8114876:	f7eb ff47 	bl	8100708 <__aeabi_dmul>
 811487a:	4652      	mov	r2, sl
 811487c:	465b      	mov	r3, fp
 811487e:	f7eb fd8d 	bl	810039c <__adddf3>
 8114882:	460b      	mov	r3, r1
 8114884:	4949      	ldr	r1, [pc, #292]	@ (81149ac <_strtod_l+0xaf4>)
 8114886:	4a4e      	ldr	r2, [pc, #312]	@ (81149c0 <_strtod_l+0xb08>)
 8114888:	4019      	ands	r1, r3
 811488a:	4291      	cmp	r1, r2
 811488c:	4682      	mov	sl, r0
 811488e:	d942      	bls.n	8114916 <_strtod_l+0xa5e>
 8114890:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8114892:	4b47      	ldr	r3, [pc, #284]	@ (81149b0 <_strtod_l+0xaf8>)
 8114894:	429a      	cmp	r2, r3
 8114896:	d103      	bne.n	81148a0 <_strtod_l+0x9e8>
 8114898:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 811489a:	3301      	adds	r3, #1
 811489c:	f43f ad2b 	beq.w	81142f6 <_strtod_l+0x43e>
 81148a0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 81149b0 <_strtod_l+0xaf8>
 81148a4:	f04f 3aff 	mov.w	sl, #4294967295
 81148a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 81148aa:	9805      	ldr	r0, [sp, #20]
 81148ac:	f7fe fe74 	bl	8113598 <_Bfree>
 81148b0:	9805      	ldr	r0, [sp, #20]
 81148b2:	4649      	mov	r1, r9
 81148b4:	f7fe fe70 	bl	8113598 <_Bfree>
 81148b8:	9805      	ldr	r0, [sp, #20]
 81148ba:	4641      	mov	r1, r8
 81148bc:	f7fe fe6c 	bl	8113598 <_Bfree>
 81148c0:	9805      	ldr	r0, [sp, #20]
 81148c2:	4621      	mov	r1, r4
 81148c4:	f7fe fe68 	bl	8113598 <_Bfree>
 81148c8:	e618      	b.n	81144fc <_strtod_l+0x644>
 81148ca:	f1ba 0f01 	cmp.w	sl, #1
 81148ce:	d103      	bne.n	81148d8 <_strtod_l+0xa20>
 81148d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81148d2:	2b00      	cmp	r3, #0
 81148d4:	f43f ada5 	beq.w	8114422 <_strtod_l+0x56a>
 81148d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8114988 <_strtod_l+0xad0>
 81148dc:	4f35      	ldr	r7, [pc, #212]	@ (81149b4 <_strtod_l+0xafc>)
 81148de:	ed8d 7b06 	vstr	d7, [sp, #24]
 81148e2:	2600      	movs	r6, #0
 81148e4:	e7b1      	b.n	811484a <_strtod_l+0x992>
 81148e6:	4f34      	ldr	r7, [pc, #208]	@ (81149b8 <_strtod_l+0xb00>)
 81148e8:	2600      	movs	r6, #0
 81148ea:	e7aa      	b.n	8114842 <_strtod_l+0x98a>
 81148ec:	4b32      	ldr	r3, [pc, #200]	@ (81149b8 <_strtod_l+0xb00>)
 81148ee:	4630      	mov	r0, r6
 81148f0:	4639      	mov	r1, r7
 81148f2:	2200      	movs	r2, #0
 81148f4:	f7eb ff08 	bl	8100708 <__aeabi_dmul>
 81148f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81148fa:	4606      	mov	r6, r0
 81148fc:	460f      	mov	r7, r1
 81148fe:	2b00      	cmp	r3, #0
 8114900:	d09f      	beq.n	8114842 <_strtod_l+0x98a>
 8114902:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8114906:	e7a0      	b.n	811484a <_strtod_l+0x992>
 8114908:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8114990 <_strtod_l+0xad8>
 811490c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8114910:	ec57 6b17 	vmov	r6, r7, d7
 8114914:	e799      	b.n	811484a <_strtod_l+0x992>
 8114916:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 811491a:	9b08      	ldr	r3, [sp, #32]
 811491c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8114920:	2b00      	cmp	r3, #0
 8114922:	d1c1      	bne.n	81148a8 <_strtod_l+0x9f0>
 8114924:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8114928:	0d1b      	lsrs	r3, r3, #20
 811492a:	051b      	lsls	r3, r3, #20
 811492c:	429d      	cmp	r5, r3
 811492e:	d1bb      	bne.n	81148a8 <_strtod_l+0x9f0>
 8114930:	4630      	mov	r0, r6
 8114932:	4639      	mov	r1, r7
 8114934:	f7ec fa48 	bl	8100dc8 <__aeabi_d2lz>
 8114938:	f7eb feb8 	bl	81006ac <__aeabi_l2d>
 811493c:	4602      	mov	r2, r0
 811493e:	460b      	mov	r3, r1
 8114940:	4630      	mov	r0, r6
 8114942:	4639      	mov	r1, r7
 8114944:	f7eb fd28 	bl	8100398 <__aeabi_dsub>
 8114948:	460b      	mov	r3, r1
 811494a:	4602      	mov	r2, r0
 811494c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8114950:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8114954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8114956:	ea46 060a 	orr.w	r6, r6, sl
 811495a:	431e      	orrs	r6, r3
 811495c:	d06f      	beq.n	8114a3e <_strtod_l+0xb86>
 811495e:	a30e      	add	r3, pc, #56	@ (adr r3, 8114998 <_strtod_l+0xae0>)
 8114960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114964:	f7ec f942 	bl	8100bec <__aeabi_dcmplt>
 8114968:	2800      	cmp	r0, #0
 811496a:	f47f accf 	bne.w	811430c <_strtod_l+0x454>
 811496e:	a30c      	add	r3, pc, #48	@ (adr r3, 81149a0 <_strtod_l+0xae8>)
 8114970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114974:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8114978:	f7ec f956 	bl	8100c28 <__aeabi_dcmpgt>
 811497c:	2800      	cmp	r0, #0
 811497e:	d093      	beq.n	81148a8 <_strtod_l+0x9f0>
 8114980:	e4c4      	b.n	811430c <_strtod_l+0x454>
 8114982:	bf00      	nop
 8114984:	f3af 8000 	nop.w
 8114988:	00000000 	.word	0x00000000
 811498c:	bff00000 	.word	0xbff00000
 8114990:	00000000 	.word	0x00000000
 8114994:	3ff00000 	.word	0x3ff00000
 8114998:	94a03595 	.word	0x94a03595
 811499c:	3fdfffff 	.word	0x3fdfffff
 81149a0:	35afe535 	.word	0x35afe535
 81149a4:	3fe00000 	.word	0x3fe00000
 81149a8:	000fffff 	.word	0x000fffff
 81149ac:	7ff00000 	.word	0x7ff00000
 81149b0:	7fefffff 	.word	0x7fefffff
 81149b4:	3ff00000 	.word	0x3ff00000
 81149b8:	3fe00000 	.word	0x3fe00000
 81149bc:	7fe00000 	.word	0x7fe00000
 81149c0:	7c9fffff 	.word	0x7c9fffff
 81149c4:	9b08      	ldr	r3, [sp, #32]
 81149c6:	b323      	cbz	r3, 8114a12 <_strtod_l+0xb5a>
 81149c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 81149cc:	d821      	bhi.n	8114a12 <_strtod_l+0xb5a>
 81149ce:	a328      	add	r3, pc, #160	@ (adr r3, 8114a70 <_strtod_l+0xbb8>)
 81149d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81149d4:	4630      	mov	r0, r6
 81149d6:	4639      	mov	r1, r7
 81149d8:	f7ec f912 	bl	8100c00 <__aeabi_dcmple>
 81149dc:	b1a0      	cbz	r0, 8114a08 <_strtod_l+0xb50>
 81149de:	4639      	mov	r1, r7
 81149e0:	4630      	mov	r0, r6
 81149e2:	f7ec f969 	bl	8100cb8 <__aeabi_d2uiz>
 81149e6:	2801      	cmp	r0, #1
 81149e8:	bf38      	it	cc
 81149ea:	2001      	movcc	r0, #1
 81149ec:	f7eb fe12 	bl	8100614 <__aeabi_ui2d>
 81149f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81149f2:	4606      	mov	r6, r0
 81149f4:	460f      	mov	r7, r1
 81149f6:	b9fb      	cbnz	r3, 8114a38 <_strtod_l+0xb80>
 81149f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 81149fc:	9014      	str	r0, [sp, #80]	@ 0x50
 81149fe:	9315      	str	r3, [sp, #84]	@ 0x54
 8114a00:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8114a04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8114a08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8114a0a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8114a0e:	1b5b      	subs	r3, r3, r5
 8114a10:	9311      	str	r3, [sp, #68]	@ 0x44
 8114a12:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8114a16:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8114a1a:	f7ff f8f1 	bl	8113c00 <__ulp>
 8114a1e:	4650      	mov	r0, sl
 8114a20:	ec53 2b10 	vmov	r2, r3, d0
 8114a24:	4659      	mov	r1, fp
 8114a26:	f7eb fe6f 	bl	8100708 <__aeabi_dmul>
 8114a2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8114a2e:	f7eb fcb5 	bl	810039c <__adddf3>
 8114a32:	4682      	mov	sl, r0
 8114a34:	468b      	mov	fp, r1
 8114a36:	e770      	b.n	811491a <_strtod_l+0xa62>
 8114a38:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8114a3c:	e7e0      	b.n	8114a00 <_strtod_l+0xb48>
 8114a3e:	a30e      	add	r3, pc, #56	@ (adr r3, 8114a78 <_strtod_l+0xbc0>)
 8114a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114a44:	f7ec f8d2 	bl	8100bec <__aeabi_dcmplt>
 8114a48:	e798      	b.n	811497c <_strtod_l+0xac4>
 8114a4a:	2300      	movs	r3, #0
 8114a4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8114a4e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8114a50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8114a52:	6013      	str	r3, [r2, #0]
 8114a54:	f7ff ba6d 	b.w	8113f32 <_strtod_l+0x7a>
 8114a58:	2a65      	cmp	r2, #101	@ 0x65
 8114a5a:	f43f ab66 	beq.w	811412a <_strtod_l+0x272>
 8114a5e:	2a45      	cmp	r2, #69	@ 0x45
 8114a60:	f43f ab63 	beq.w	811412a <_strtod_l+0x272>
 8114a64:	2301      	movs	r3, #1
 8114a66:	f7ff bb9e 	b.w	81141a6 <_strtod_l+0x2ee>
 8114a6a:	bf00      	nop
 8114a6c:	f3af 8000 	nop.w
 8114a70:	ffc00000 	.word	0xffc00000
 8114a74:	41dfffff 	.word	0x41dfffff
 8114a78:	94a03595 	.word	0x94a03595
 8114a7c:	3fcfffff 	.word	0x3fcfffff

08114a80 <_strtod_r>:
 8114a80:	4b01      	ldr	r3, [pc, #4]	@ (8114a88 <_strtod_r+0x8>)
 8114a82:	f7ff ba19 	b.w	8113eb8 <_strtod_l>
 8114a86:	bf00      	nop
 8114a88:	10000100 	.word	0x10000100

08114a8c <_strtol_l.constprop.0>:
 8114a8c:	2b24      	cmp	r3, #36	@ 0x24
 8114a8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8114a92:	4686      	mov	lr, r0
 8114a94:	4690      	mov	r8, r2
 8114a96:	d801      	bhi.n	8114a9c <_strtol_l.constprop.0+0x10>
 8114a98:	2b01      	cmp	r3, #1
 8114a9a:	d106      	bne.n	8114aaa <_strtol_l.constprop.0+0x1e>
 8114a9c:	f7fd fd90 	bl	81125c0 <__errno>
 8114aa0:	2316      	movs	r3, #22
 8114aa2:	6003      	str	r3, [r0, #0]
 8114aa4:	2000      	movs	r0, #0
 8114aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8114aaa:	4834      	ldr	r0, [pc, #208]	@ (8114b7c <_strtol_l.constprop.0+0xf0>)
 8114aac:	460d      	mov	r5, r1
 8114aae:	462a      	mov	r2, r5
 8114ab0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8114ab4:	5d06      	ldrb	r6, [r0, r4]
 8114ab6:	f016 0608 	ands.w	r6, r6, #8
 8114aba:	d1f8      	bne.n	8114aae <_strtol_l.constprop.0+0x22>
 8114abc:	2c2d      	cmp	r4, #45	@ 0x2d
 8114abe:	d12d      	bne.n	8114b1c <_strtol_l.constprop.0+0x90>
 8114ac0:	782c      	ldrb	r4, [r5, #0]
 8114ac2:	2601      	movs	r6, #1
 8114ac4:	1c95      	adds	r5, r2, #2
 8114ac6:	f033 0210 	bics.w	r2, r3, #16
 8114aca:	d109      	bne.n	8114ae0 <_strtol_l.constprop.0+0x54>
 8114acc:	2c30      	cmp	r4, #48	@ 0x30
 8114ace:	d12a      	bne.n	8114b26 <_strtol_l.constprop.0+0x9a>
 8114ad0:	782a      	ldrb	r2, [r5, #0]
 8114ad2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8114ad6:	2a58      	cmp	r2, #88	@ 0x58
 8114ad8:	d125      	bne.n	8114b26 <_strtol_l.constprop.0+0x9a>
 8114ada:	786c      	ldrb	r4, [r5, #1]
 8114adc:	2310      	movs	r3, #16
 8114ade:	3502      	adds	r5, #2
 8114ae0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8114ae4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8114ae8:	2200      	movs	r2, #0
 8114aea:	fbbc f9f3 	udiv	r9, ip, r3
 8114aee:	4610      	mov	r0, r2
 8114af0:	fb03 ca19 	mls	sl, r3, r9, ip
 8114af4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8114af8:	2f09      	cmp	r7, #9
 8114afa:	d81b      	bhi.n	8114b34 <_strtol_l.constprop.0+0xa8>
 8114afc:	463c      	mov	r4, r7
 8114afe:	42a3      	cmp	r3, r4
 8114b00:	dd27      	ble.n	8114b52 <_strtol_l.constprop.0+0xc6>
 8114b02:	1c57      	adds	r7, r2, #1
 8114b04:	d007      	beq.n	8114b16 <_strtol_l.constprop.0+0x8a>
 8114b06:	4581      	cmp	r9, r0
 8114b08:	d320      	bcc.n	8114b4c <_strtol_l.constprop.0+0xc0>
 8114b0a:	d101      	bne.n	8114b10 <_strtol_l.constprop.0+0x84>
 8114b0c:	45a2      	cmp	sl, r4
 8114b0e:	db1d      	blt.n	8114b4c <_strtol_l.constprop.0+0xc0>
 8114b10:	fb00 4003 	mla	r0, r0, r3, r4
 8114b14:	2201      	movs	r2, #1
 8114b16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8114b1a:	e7eb      	b.n	8114af4 <_strtol_l.constprop.0+0x68>
 8114b1c:	2c2b      	cmp	r4, #43	@ 0x2b
 8114b1e:	bf04      	itt	eq
 8114b20:	782c      	ldrbeq	r4, [r5, #0]
 8114b22:	1c95      	addeq	r5, r2, #2
 8114b24:	e7cf      	b.n	8114ac6 <_strtol_l.constprop.0+0x3a>
 8114b26:	2b00      	cmp	r3, #0
 8114b28:	d1da      	bne.n	8114ae0 <_strtol_l.constprop.0+0x54>
 8114b2a:	2c30      	cmp	r4, #48	@ 0x30
 8114b2c:	bf0c      	ite	eq
 8114b2e:	2308      	moveq	r3, #8
 8114b30:	230a      	movne	r3, #10
 8114b32:	e7d5      	b.n	8114ae0 <_strtol_l.constprop.0+0x54>
 8114b34:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8114b38:	2f19      	cmp	r7, #25
 8114b3a:	d801      	bhi.n	8114b40 <_strtol_l.constprop.0+0xb4>
 8114b3c:	3c37      	subs	r4, #55	@ 0x37
 8114b3e:	e7de      	b.n	8114afe <_strtol_l.constprop.0+0x72>
 8114b40:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8114b44:	2f19      	cmp	r7, #25
 8114b46:	d804      	bhi.n	8114b52 <_strtol_l.constprop.0+0xc6>
 8114b48:	3c57      	subs	r4, #87	@ 0x57
 8114b4a:	e7d8      	b.n	8114afe <_strtol_l.constprop.0+0x72>
 8114b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8114b50:	e7e1      	b.n	8114b16 <_strtol_l.constprop.0+0x8a>
 8114b52:	1c53      	adds	r3, r2, #1
 8114b54:	d108      	bne.n	8114b68 <_strtol_l.constprop.0+0xdc>
 8114b56:	2322      	movs	r3, #34	@ 0x22
 8114b58:	f8ce 3000 	str.w	r3, [lr]
 8114b5c:	4660      	mov	r0, ip
 8114b5e:	f1b8 0f00 	cmp.w	r8, #0
 8114b62:	d0a0      	beq.n	8114aa6 <_strtol_l.constprop.0+0x1a>
 8114b64:	1e69      	subs	r1, r5, #1
 8114b66:	e006      	b.n	8114b76 <_strtol_l.constprop.0+0xea>
 8114b68:	b106      	cbz	r6, 8114b6c <_strtol_l.constprop.0+0xe0>
 8114b6a:	4240      	negs	r0, r0
 8114b6c:	f1b8 0f00 	cmp.w	r8, #0
 8114b70:	d099      	beq.n	8114aa6 <_strtol_l.constprop.0+0x1a>
 8114b72:	2a00      	cmp	r2, #0
 8114b74:	d1f6      	bne.n	8114b64 <_strtol_l.constprop.0+0xd8>
 8114b76:	f8c8 1000 	str.w	r1, [r8]
 8114b7a:	e794      	b.n	8114aa6 <_strtol_l.constprop.0+0x1a>
 8114b7c:	08117011 	.word	0x08117011

08114b80 <_strtol_r>:
 8114b80:	f7ff bf84 	b.w	8114a8c <_strtol_l.constprop.0>

08114b84 <__ssputs_r>:
 8114b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8114b88:	688e      	ldr	r6, [r1, #8]
 8114b8a:	461f      	mov	r7, r3
 8114b8c:	42be      	cmp	r6, r7
 8114b8e:	680b      	ldr	r3, [r1, #0]
 8114b90:	4682      	mov	sl, r0
 8114b92:	460c      	mov	r4, r1
 8114b94:	4690      	mov	r8, r2
 8114b96:	d82d      	bhi.n	8114bf4 <__ssputs_r+0x70>
 8114b98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8114b9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8114ba0:	d026      	beq.n	8114bf0 <__ssputs_r+0x6c>
 8114ba2:	6965      	ldr	r5, [r4, #20]
 8114ba4:	6909      	ldr	r1, [r1, #16]
 8114ba6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8114baa:	eba3 0901 	sub.w	r9, r3, r1
 8114bae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8114bb2:	1c7b      	adds	r3, r7, #1
 8114bb4:	444b      	add	r3, r9
 8114bb6:	106d      	asrs	r5, r5, #1
 8114bb8:	429d      	cmp	r5, r3
 8114bba:	bf38      	it	cc
 8114bbc:	461d      	movcc	r5, r3
 8114bbe:	0553      	lsls	r3, r2, #21
 8114bc0:	d527      	bpl.n	8114c12 <__ssputs_r+0x8e>
 8114bc2:	4629      	mov	r1, r5
 8114bc4:	f7fe fc1c 	bl	8113400 <_malloc_r>
 8114bc8:	4606      	mov	r6, r0
 8114bca:	b360      	cbz	r0, 8114c26 <__ssputs_r+0xa2>
 8114bcc:	6921      	ldr	r1, [r4, #16]
 8114bce:	464a      	mov	r2, r9
 8114bd0:	f7fd fd23 	bl	811261a <memcpy>
 8114bd4:	89a3      	ldrh	r3, [r4, #12]
 8114bd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8114bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8114bde:	81a3      	strh	r3, [r4, #12]
 8114be0:	6126      	str	r6, [r4, #16]
 8114be2:	6165      	str	r5, [r4, #20]
 8114be4:	444e      	add	r6, r9
 8114be6:	eba5 0509 	sub.w	r5, r5, r9
 8114bea:	6026      	str	r6, [r4, #0]
 8114bec:	60a5      	str	r5, [r4, #8]
 8114bee:	463e      	mov	r6, r7
 8114bf0:	42be      	cmp	r6, r7
 8114bf2:	d900      	bls.n	8114bf6 <__ssputs_r+0x72>
 8114bf4:	463e      	mov	r6, r7
 8114bf6:	6820      	ldr	r0, [r4, #0]
 8114bf8:	4632      	mov	r2, r6
 8114bfa:	4641      	mov	r1, r8
 8114bfc:	f000 fb7c 	bl	81152f8 <memmove>
 8114c00:	68a3      	ldr	r3, [r4, #8]
 8114c02:	1b9b      	subs	r3, r3, r6
 8114c04:	60a3      	str	r3, [r4, #8]
 8114c06:	6823      	ldr	r3, [r4, #0]
 8114c08:	4433      	add	r3, r6
 8114c0a:	6023      	str	r3, [r4, #0]
 8114c0c:	2000      	movs	r0, #0
 8114c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8114c12:	462a      	mov	r2, r5
 8114c14:	f000 ff3d 	bl	8115a92 <_realloc_r>
 8114c18:	4606      	mov	r6, r0
 8114c1a:	2800      	cmp	r0, #0
 8114c1c:	d1e0      	bne.n	8114be0 <__ssputs_r+0x5c>
 8114c1e:	6921      	ldr	r1, [r4, #16]
 8114c20:	4650      	mov	r0, sl
 8114c22:	f7fe fb79 	bl	8113318 <_free_r>
 8114c26:	230c      	movs	r3, #12
 8114c28:	f8ca 3000 	str.w	r3, [sl]
 8114c2c:	89a3      	ldrh	r3, [r4, #12]
 8114c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8114c32:	81a3      	strh	r3, [r4, #12]
 8114c34:	f04f 30ff 	mov.w	r0, #4294967295
 8114c38:	e7e9      	b.n	8114c0e <__ssputs_r+0x8a>
	...

08114c3c <_svfiprintf_r>:
 8114c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8114c40:	4698      	mov	r8, r3
 8114c42:	898b      	ldrh	r3, [r1, #12]
 8114c44:	061b      	lsls	r3, r3, #24
 8114c46:	b09d      	sub	sp, #116	@ 0x74
 8114c48:	4607      	mov	r7, r0
 8114c4a:	460d      	mov	r5, r1
 8114c4c:	4614      	mov	r4, r2
 8114c4e:	d510      	bpl.n	8114c72 <_svfiprintf_r+0x36>
 8114c50:	690b      	ldr	r3, [r1, #16]
 8114c52:	b973      	cbnz	r3, 8114c72 <_svfiprintf_r+0x36>
 8114c54:	2140      	movs	r1, #64	@ 0x40
 8114c56:	f7fe fbd3 	bl	8113400 <_malloc_r>
 8114c5a:	6028      	str	r0, [r5, #0]
 8114c5c:	6128      	str	r0, [r5, #16]
 8114c5e:	b930      	cbnz	r0, 8114c6e <_svfiprintf_r+0x32>
 8114c60:	230c      	movs	r3, #12
 8114c62:	603b      	str	r3, [r7, #0]
 8114c64:	f04f 30ff 	mov.w	r0, #4294967295
 8114c68:	b01d      	add	sp, #116	@ 0x74
 8114c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8114c6e:	2340      	movs	r3, #64	@ 0x40
 8114c70:	616b      	str	r3, [r5, #20]
 8114c72:	2300      	movs	r3, #0
 8114c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8114c76:	2320      	movs	r3, #32
 8114c78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8114c7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8114c80:	2330      	movs	r3, #48	@ 0x30
 8114c82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8114e20 <_svfiprintf_r+0x1e4>
 8114c86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8114c8a:	f04f 0901 	mov.w	r9, #1
 8114c8e:	4623      	mov	r3, r4
 8114c90:	469a      	mov	sl, r3
 8114c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8114c96:	b10a      	cbz	r2, 8114c9c <_svfiprintf_r+0x60>
 8114c98:	2a25      	cmp	r2, #37	@ 0x25
 8114c9a:	d1f9      	bne.n	8114c90 <_svfiprintf_r+0x54>
 8114c9c:	ebba 0b04 	subs.w	fp, sl, r4
 8114ca0:	d00b      	beq.n	8114cba <_svfiprintf_r+0x7e>
 8114ca2:	465b      	mov	r3, fp
 8114ca4:	4622      	mov	r2, r4
 8114ca6:	4629      	mov	r1, r5
 8114ca8:	4638      	mov	r0, r7
 8114caa:	f7ff ff6b 	bl	8114b84 <__ssputs_r>
 8114cae:	3001      	adds	r0, #1
 8114cb0:	f000 80a7 	beq.w	8114e02 <_svfiprintf_r+0x1c6>
 8114cb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8114cb6:	445a      	add	r2, fp
 8114cb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8114cba:	f89a 3000 	ldrb.w	r3, [sl]
 8114cbe:	2b00      	cmp	r3, #0
 8114cc0:	f000 809f 	beq.w	8114e02 <_svfiprintf_r+0x1c6>
 8114cc4:	2300      	movs	r3, #0
 8114cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8114cca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8114cce:	f10a 0a01 	add.w	sl, sl, #1
 8114cd2:	9304      	str	r3, [sp, #16]
 8114cd4:	9307      	str	r3, [sp, #28]
 8114cd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8114cda:	931a      	str	r3, [sp, #104]	@ 0x68
 8114cdc:	4654      	mov	r4, sl
 8114cde:	2205      	movs	r2, #5
 8114ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8114ce4:	484e      	ldr	r0, [pc, #312]	@ (8114e20 <_svfiprintf_r+0x1e4>)
 8114ce6:	f7eb fafb 	bl	81002e0 <memchr>
 8114cea:	9a04      	ldr	r2, [sp, #16]
 8114cec:	b9d8      	cbnz	r0, 8114d26 <_svfiprintf_r+0xea>
 8114cee:	06d0      	lsls	r0, r2, #27
 8114cf0:	bf44      	itt	mi
 8114cf2:	2320      	movmi	r3, #32
 8114cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8114cf8:	0711      	lsls	r1, r2, #28
 8114cfa:	bf44      	itt	mi
 8114cfc:	232b      	movmi	r3, #43	@ 0x2b
 8114cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8114d02:	f89a 3000 	ldrb.w	r3, [sl]
 8114d06:	2b2a      	cmp	r3, #42	@ 0x2a
 8114d08:	d015      	beq.n	8114d36 <_svfiprintf_r+0xfa>
 8114d0a:	9a07      	ldr	r2, [sp, #28]
 8114d0c:	4654      	mov	r4, sl
 8114d0e:	2000      	movs	r0, #0
 8114d10:	f04f 0c0a 	mov.w	ip, #10
 8114d14:	4621      	mov	r1, r4
 8114d16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8114d1a:	3b30      	subs	r3, #48	@ 0x30
 8114d1c:	2b09      	cmp	r3, #9
 8114d1e:	d94b      	bls.n	8114db8 <_svfiprintf_r+0x17c>
 8114d20:	b1b0      	cbz	r0, 8114d50 <_svfiprintf_r+0x114>
 8114d22:	9207      	str	r2, [sp, #28]
 8114d24:	e014      	b.n	8114d50 <_svfiprintf_r+0x114>
 8114d26:	eba0 0308 	sub.w	r3, r0, r8
 8114d2a:	fa09 f303 	lsl.w	r3, r9, r3
 8114d2e:	4313      	orrs	r3, r2
 8114d30:	9304      	str	r3, [sp, #16]
 8114d32:	46a2      	mov	sl, r4
 8114d34:	e7d2      	b.n	8114cdc <_svfiprintf_r+0xa0>
 8114d36:	9b03      	ldr	r3, [sp, #12]
 8114d38:	1d19      	adds	r1, r3, #4
 8114d3a:	681b      	ldr	r3, [r3, #0]
 8114d3c:	9103      	str	r1, [sp, #12]
 8114d3e:	2b00      	cmp	r3, #0
 8114d40:	bfbb      	ittet	lt
 8114d42:	425b      	neglt	r3, r3
 8114d44:	f042 0202 	orrlt.w	r2, r2, #2
 8114d48:	9307      	strge	r3, [sp, #28]
 8114d4a:	9307      	strlt	r3, [sp, #28]
 8114d4c:	bfb8      	it	lt
 8114d4e:	9204      	strlt	r2, [sp, #16]
 8114d50:	7823      	ldrb	r3, [r4, #0]
 8114d52:	2b2e      	cmp	r3, #46	@ 0x2e
 8114d54:	d10a      	bne.n	8114d6c <_svfiprintf_r+0x130>
 8114d56:	7863      	ldrb	r3, [r4, #1]
 8114d58:	2b2a      	cmp	r3, #42	@ 0x2a
 8114d5a:	d132      	bne.n	8114dc2 <_svfiprintf_r+0x186>
 8114d5c:	9b03      	ldr	r3, [sp, #12]
 8114d5e:	1d1a      	adds	r2, r3, #4
 8114d60:	681b      	ldr	r3, [r3, #0]
 8114d62:	9203      	str	r2, [sp, #12]
 8114d64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8114d68:	3402      	adds	r4, #2
 8114d6a:	9305      	str	r3, [sp, #20]
 8114d6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8114e30 <_svfiprintf_r+0x1f4>
 8114d70:	7821      	ldrb	r1, [r4, #0]
 8114d72:	2203      	movs	r2, #3
 8114d74:	4650      	mov	r0, sl
 8114d76:	f7eb fab3 	bl	81002e0 <memchr>
 8114d7a:	b138      	cbz	r0, 8114d8c <_svfiprintf_r+0x150>
 8114d7c:	9b04      	ldr	r3, [sp, #16]
 8114d7e:	eba0 000a 	sub.w	r0, r0, sl
 8114d82:	2240      	movs	r2, #64	@ 0x40
 8114d84:	4082      	lsls	r2, r0
 8114d86:	4313      	orrs	r3, r2
 8114d88:	3401      	adds	r4, #1
 8114d8a:	9304      	str	r3, [sp, #16]
 8114d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8114d90:	4824      	ldr	r0, [pc, #144]	@ (8114e24 <_svfiprintf_r+0x1e8>)
 8114d92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8114d96:	2206      	movs	r2, #6
 8114d98:	f7eb faa2 	bl	81002e0 <memchr>
 8114d9c:	2800      	cmp	r0, #0
 8114d9e:	d036      	beq.n	8114e0e <_svfiprintf_r+0x1d2>
 8114da0:	4b21      	ldr	r3, [pc, #132]	@ (8114e28 <_svfiprintf_r+0x1ec>)
 8114da2:	bb1b      	cbnz	r3, 8114dec <_svfiprintf_r+0x1b0>
 8114da4:	9b03      	ldr	r3, [sp, #12]
 8114da6:	3307      	adds	r3, #7
 8114da8:	f023 0307 	bic.w	r3, r3, #7
 8114dac:	3308      	adds	r3, #8
 8114dae:	9303      	str	r3, [sp, #12]
 8114db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8114db2:	4433      	add	r3, r6
 8114db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8114db6:	e76a      	b.n	8114c8e <_svfiprintf_r+0x52>
 8114db8:	fb0c 3202 	mla	r2, ip, r2, r3
 8114dbc:	460c      	mov	r4, r1
 8114dbe:	2001      	movs	r0, #1
 8114dc0:	e7a8      	b.n	8114d14 <_svfiprintf_r+0xd8>
 8114dc2:	2300      	movs	r3, #0
 8114dc4:	3401      	adds	r4, #1
 8114dc6:	9305      	str	r3, [sp, #20]
 8114dc8:	4619      	mov	r1, r3
 8114dca:	f04f 0c0a 	mov.w	ip, #10
 8114dce:	4620      	mov	r0, r4
 8114dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8114dd4:	3a30      	subs	r2, #48	@ 0x30
 8114dd6:	2a09      	cmp	r2, #9
 8114dd8:	d903      	bls.n	8114de2 <_svfiprintf_r+0x1a6>
 8114dda:	2b00      	cmp	r3, #0
 8114ddc:	d0c6      	beq.n	8114d6c <_svfiprintf_r+0x130>
 8114dde:	9105      	str	r1, [sp, #20]
 8114de0:	e7c4      	b.n	8114d6c <_svfiprintf_r+0x130>
 8114de2:	fb0c 2101 	mla	r1, ip, r1, r2
 8114de6:	4604      	mov	r4, r0
 8114de8:	2301      	movs	r3, #1
 8114dea:	e7f0      	b.n	8114dce <_svfiprintf_r+0x192>
 8114dec:	ab03      	add	r3, sp, #12
 8114dee:	9300      	str	r3, [sp, #0]
 8114df0:	462a      	mov	r2, r5
 8114df2:	4b0e      	ldr	r3, [pc, #56]	@ (8114e2c <_svfiprintf_r+0x1f0>)
 8114df4:	a904      	add	r1, sp, #16
 8114df6:	4638      	mov	r0, r7
 8114df8:	f7fc fbf8 	bl	81115ec <_printf_float>
 8114dfc:	1c42      	adds	r2, r0, #1
 8114dfe:	4606      	mov	r6, r0
 8114e00:	d1d6      	bne.n	8114db0 <_svfiprintf_r+0x174>
 8114e02:	89ab      	ldrh	r3, [r5, #12]
 8114e04:	065b      	lsls	r3, r3, #25
 8114e06:	f53f af2d 	bmi.w	8114c64 <_svfiprintf_r+0x28>
 8114e0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8114e0c:	e72c      	b.n	8114c68 <_svfiprintf_r+0x2c>
 8114e0e:	ab03      	add	r3, sp, #12
 8114e10:	9300      	str	r3, [sp, #0]
 8114e12:	462a      	mov	r2, r5
 8114e14:	4b05      	ldr	r3, [pc, #20]	@ (8114e2c <_svfiprintf_r+0x1f0>)
 8114e16:	a904      	add	r1, sp, #16
 8114e18:	4638      	mov	r0, r7
 8114e1a:	f7fc fe7f 	bl	8111b1c <_printf_i>
 8114e1e:	e7ed      	b.n	8114dfc <_svfiprintf_r+0x1c0>
 8114e20:	08117111 	.word	0x08117111
 8114e24:	0811711b 	.word	0x0811711b
 8114e28:	081115ed 	.word	0x081115ed
 8114e2c:	08114b85 	.word	0x08114b85
 8114e30:	08117117 	.word	0x08117117

08114e34 <__sfputc_r>:
 8114e34:	6893      	ldr	r3, [r2, #8]
 8114e36:	3b01      	subs	r3, #1
 8114e38:	2b00      	cmp	r3, #0
 8114e3a:	b410      	push	{r4}
 8114e3c:	6093      	str	r3, [r2, #8]
 8114e3e:	da08      	bge.n	8114e52 <__sfputc_r+0x1e>
 8114e40:	6994      	ldr	r4, [r2, #24]
 8114e42:	42a3      	cmp	r3, r4
 8114e44:	db01      	blt.n	8114e4a <__sfputc_r+0x16>
 8114e46:	290a      	cmp	r1, #10
 8114e48:	d103      	bne.n	8114e52 <__sfputc_r+0x1e>
 8114e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8114e4e:	f7fd bad0 	b.w	81123f2 <__swbuf_r>
 8114e52:	6813      	ldr	r3, [r2, #0]
 8114e54:	1c58      	adds	r0, r3, #1
 8114e56:	6010      	str	r0, [r2, #0]
 8114e58:	7019      	strb	r1, [r3, #0]
 8114e5a:	4608      	mov	r0, r1
 8114e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8114e60:	4770      	bx	lr

08114e62 <__sfputs_r>:
 8114e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8114e64:	4606      	mov	r6, r0
 8114e66:	460f      	mov	r7, r1
 8114e68:	4614      	mov	r4, r2
 8114e6a:	18d5      	adds	r5, r2, r3
 8114e6c:	42ac      	cmp	r4, r5
 8114e6e:	d101      	bne.n	8114e74 <__sfputs_r+0x12>
 8114e70:	2000      	movs	r0, #0
 8114e72:	e007      	b.n	8114e84 <__sfputs_r+0x22>
 8114e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8114e78:	463a      	mov	r2, r7
 8114e7a:	4630      	mov	r0, r6
 8114e7c:	f7ff ffda 	bl	8114e34 <__sfputc_r>
 8114e80:	1c43      	adds	r3, r0, #1
 8114e82:	d1f3      	bne.n	8114e6c <__sfputs_r+0xa>
 8114e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08114e88 <_vfiprintf_r>:
 8114e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8114e8c:	460d      	mov	r5, r1
 8114e8e:	b09d      	sub	sp, #116	@ 0x74
 8114e90:	4614      	mov	r4, r2
 8114e92:	4698      	mov	r8, r3
 8114e94:	4606      	mov	r6, r0
 8114e96:	b118      	cbz	r0, 8114ea0 <_vfiprintf_r+0x18>
 8114e98:	6a03      	ldr	r3, [r0, #32]
 8114e9a:	b90b      	cbnz	r3, 8114ea0 <_vfiprintf_r+0x18>
 8114e9c:	f7fd f9fe 	bl	811229c <__sinit>
 8114ea0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8114ea2:	07d9      	lsls	r1, r3, #31
 8114ea4:	d405      	bmi.n	8114eb2 <_vfiprintf_r+0x2a>
 8114ea6:	89ab      	ldrh	r3, [r5, #12]
 8114ea8:	059a      	lsls	r2, r3, #22
 8114eaa:	d402      	bmi.n	8114eb2 <_vfiprintf_r+0x2a>
 8114eac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8114eae:	f7fd fbb2 	bl	8112616 <__retarget_lock_acquire_recursive>
 8114eb2:	89ab      	ldrh	r3, [r5, #12]
 8114eb4:	071b      	lsls	r3, r3, #28
 8114eb6:	d501      	bpl.n	8114ebc <_vfiprintf_r+0x34>
 8114eb8:	692b      	ldr	r3, [r5, #16]
 8114eba:	b99b      	cbnz	r3, 8114ee4 <_vfiprintf_r+0x5c>
 8114ebc:	4629      	mov	r1, r5
 8114ebe:	4630      	mov	r0, r6
 8114ec0:	f7fd fad6 	bl	8112470 <__swsetup_r>
 8114ec4:	b170      	cbz	r0, 8114ee4 <_vfiprintf_r+0x5c>
 8114ec6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8114ec8:	07dc      	lsls	r4, r3, #31
 8114eca:	d504      	bpl.n	8114ed6 <_vfiprintf_r+0x4e>
 8114ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8114ed0:	b01d      	add	sp, #116	@ 0x74
 8114ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8114ed6:	89ab      	ldrh	r3, [r5, #12]
 8114ed8:	0598      	lsls	r0, r3, #22
 8114eda:	d4f7      	bmi.n	8114ecc <_vfiprintf_r+0x44>
 8114edc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8114ede:	f7fd fb9b 	bl	8112618 <__retarget_lock_release_recursive>
 8114ee2:	e7f3      	b.n	8114ecc <_vfiprintf_r+0x44>
 8114ee4:	2300      	movs	r3, #0
 8114ee6:	9309      	str	r3, [sp, #36]	@ 0x24
 8114ee8:	2320      	movs	r3, #32
 8114eea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8114eee:	f8cd 800c 	str.w	r8, [sp, #12]
 8114ef2:	2330      	movs	r3, #48	@ 0x30
 8114ef4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 81150a4 <_vfiprintf_r+0x21c>
 8114ef8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8114efc:	f04f 0901 	mov.w	r9, #1
 8114f00:	4623      	mov	r3, r4
 8114f02:	469a      	mov	sl, r3
 8114f04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8114f08:	b10a      	cbz	r2, 8114f0e <_vfiprintf_r+0x86>
 8114f0a:	2a25      	cmp	r2, #37	@ 0x25
 8114f0c:	d1f9      	bne.n	8114f02 <_vfiprintf_r+0x7a>
 8114f0e:	ebba 0b04 	subs.w	fp, sl, r4
 8114f12:	d00b      	beq.n	8114f2c <_vfiprintf_r+0xa4>
 8114f14:	465b      	mov	r3, fp
 8114f16:	4622      	mov	r2, r4
 8114f18:	4629      	mov	r1, r5
 8114f1a:	4630      	mov	r0, r6
 8114f1c:	f7ff ffa1 	bl	8114e62 <__sfputs_r>
 8114f20:	3001      	adds	r0, #1
 8114f22:	f000 80a7 	beq.w	8115074 <_vfiprintf_r+0x1ec>
 8114f26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8114f28:	445a      	add	r2, fp
 8114f2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8114f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8114f30:	2b00      	cmp	r3, #0
 8114f32:	f000 809f 	beq.w	8115074 <_vfiprintf_r+0x1ec>
 8114f36:	2300      	movs	r3, #0
 8114f38:	f04f 32ff 	mov.w	r2, #4294967295
 8114f3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8114f40:	f10a 0a01 	add.w	sl, sl, #1
 8114f44:	9304      	str	r3, [sp, #16]
 8114f46:	9307      	str	r3, [sp, #28]
 8114f48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8114f4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8114f4e:	4654      	mov	r4, sl
 8114f50:	2205      	movs	r2, #5
 8114f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8114f56:	4853      	ldr	r0, [pc, #332]	@ (81150a4 <_vfiprintf_r+0x21c>)
 8114f58:	f7eb f9c2 	bl	81002e0 <memchr>
 8114f5c:	9a04      	ldr	r2, [sp, #16]
 8114f5e:	b9d8      	cbnz	r0, 8114f98 <_vfiprintf_r+0x110>
 8114f60:	06d1      	lsls	r1, r2, #27
 8114f62:	bf44      	itt	mi
 8114f64:	2320      	movmi	r3, #32
 8114f66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8114f6a:	0713      	lsls	r3, r2, #28
 8114f6c:	bf44      	itt	mi
 8114f6e:	232b      	movmi	r3, #43	@ 0x2b
 8114f70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8114f74:	f89a 3000 	ldrb.w	r3, [sl]
 8114f78:	2b2a      	cmp	r3, #42	@ 0x2a
 8114f7a:	d015      	beq.n	8114fa8 <_vfiprintf_r+0x120>
 8114f7c:	9a07      	ldr	r2, [sp, #28]
 8114f7e:	4654      	mov	r4, sl
 8114f80:	2000      	movs	r0, #0
 8114f82:	f04f 0c0a 	mov.w	ip, #10
 8114f86:	4621      	mov	r1, r4
 8114f88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8114f8c:	3b30      	subs	r3, #48	@ 0x30
 8114f8e:	2b09      	cmp	r3, #9
 8114f90:	d94b      	bls.n	811502a <_vfiprintf_r+0x1a2>
 8114f92:	b1b0      	cbz	r0, 8114fc2 <_vfiprintf_r+0x13a>
 8114f94:	9207      	str	r2, [sp, #28]
 8114f96:	e014      	b.n	8114fc2 <_vfiprintf_r+0x13a>
 8114f98:	eba0 0308 	sub.w	r3, r0, r8
 8114f9c:	fa09 f303 	lsl.w	r3, r9, r3
 8114fa0:	4313      	orrs	r3, r2
 8114fa2:	9304      	str	r3, [sp, #16]
 8114fa4:	46a2      	mov	sl, r4
 8114fa6:	e7d2      	b.n	8114f4e <_vfiprintf_r+0xc6>
 8114fa8:	9b03      	ldr	r3, [sp, #12]
 8114faa:	1d19      	adds	r1, r3, #4
 8114fac:	681b      	ldr	r3, [r3, #0]
 8114fae:	9103      	str	r1, [sp, #12]
 8114fb0:	2b00      	cmp	r3, #0
 8114fb2:	bfbb      	ittet	lt
 8114fb4:	425b      	neglt	r3, r3
 8114fb6:	f042 0202 	orrlt.w	r2, r2, #2
 8114fba:	9307      	strge	r3, [sp, #28]
 8114fbc:	9307      	strlt	r3, [sp, #28]
 8114fbe:	bfb8      	it	lt
 8114fc0:	9204      	strlt	r2, [sp, #16]
 8114fc2:	7823      	ldrb	r3, [r4, #0]
 8114fc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8114fc6:	d10a      	bne.n	8114fde <_vfiprintf_r+0x156>
 8114fc8:	7863      	ldrb	r3, [r4, #1]
 8114fca:	2b2a      	cmp	r3, #42	@ 0x2a
 8114fcc:	d132      	bne.n	8115034 <_vfiprintf_r+0x1ac>
 8114fce:	9b03      	ldr	r3, [sp, #12]
 8114fd0:	1d1a      	adds	r2, r3, #4
 8114fd2:	681b      	ldr	r3, [r3, #0]
 8114fd4:	9203      	str	r2, [sp, #12]
 8114fd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8114fda:	3402      	adds	r4, #2
 8114fdc:	9305      	str	r3, [sp, #20]
 8114fde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 81150b4 <_vfiprintf_r+0x22c>
 8114fe2:	7821      	ldrb	r1, [r4, #0]
 8114fe4:	2203      	movs	r2, #3
 8114fe6:	4650      	mov	r0, sl
 8114fe8:	f7eb f97a 	bl	81002e0 <memchr>
 8114fec:	b138      	cbz	r0, 8114ffe <_vfiprintf_r+0x176>
 8114fee:	9b04      	ldr	r3, [sp, #16]
 8114ff0:	eba0 000a 	sub.w	r0, r0, sl
 8114ff4:	2240      	movs	r2, #64	@ 0x40
 8114ff6:	4082      	lsls	r2, r0
 8114ff8:	4313      	orrs	r3, r2
 8114ffa:	3401      	adds	r4, #1
 8114ffc:	9304      	str	r3, [sp, #16]
 8114ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8115002:	4829      	ldr	r0, [pc, #164]	@ (81150a8 <_vfiprintf_r+0x220>)
 8115004:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8115008:	2206      	movs	r2, #6
 811500a:	f7eb f969 	bl	81002e0 <memchr>
 811500e:	2800      	cmp	r0, #0
 8115010:	d03f      	beq.n	8115092 <_vfiprintf_r+0x20a>
 8115012:	4b26      	ldr	r3, [pc, #152]	@ (81150ac <_vfiprintf_r+0x224>)
 8115014:	bb1b      	cbnz	r3, 811505e <_vfiprintf_r+0x1d6>
 8115016:	9b03      	ldr	r3, [sp, #12]
 8115018:	3307      	adds	r3, #7
 811501a:	f023 0307 	bic.w	r3, r3, #7
 811501e:	3308      	adds	r3, #8
 8115020:	9303      	str	r3, [sp, #12]
 8115022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8115024:	443b      	add	r3, r7
 8115026:	9309      	str	r3, [sp, #36]	@ 0x24
 8115028:	e76a      	b.n	8114f00 <_vfiprintf_r+0x78>
 811502a:	fb0c 3202 	mla	r2, ip, r2, r3
 811502e:	460c      	mov	r4, r1
 8115030:	2001      	movs	r0, #1
 8115032:	e7a8      	b.n	8114f86 <_vfiprintf_r+0xfe>
 8115034:	2300      	movs	r3, #0
 8115036:	3401      	adds	r4, #1
 8115038:	9305      	str	r3, [sp, #20]
 811503a:	4619      	mov	r1, r3
 811503c:	f04f 0c0a 	mov.w	ip, #10
 8115040:	4620      	mov	r0, r4
 8115042:	f810 2b01 	ldrb.w	r2, [r0], #1
 8115046:	3a30      	subs	r2, #48	@ 0x30
 8115048:	2a09      	cmp	r2, #9
 811504a:	d903      	bls.n	8115054 <_vfiprintf_r+0x1cc>
 811504c:	2b00      	cmp	r3, #0
 811504e:	d0c6      	beq.n	8114fde <_vfiprintf_r+0x156>
 8115050:	9105      	str	r1, [sp, #20]
 8115052:	e7c4      	b.n	8114fde <_vfiprintf_r+0x156>
 8115054:	fb0c 2101 	mla	r1, ip, r1, r2
 8115058:	4604      	mov	r4, r0
 811505a:	2301      	movs	r3, #1
 811505c:	e7f0      	b.n	8115040 <_vfiprintf_r+0x1b8>
 811505e:	ab03      	add	r3, sp, #12
 8115060:	9300      	str	r3, [sp, #0]
 8115062:	462a      	mov	r2, r5
 8115064:	4b12      	ldr	r3, [pc, #72]	@ (81150b0 <_vfiprintf_r+0x228>)
 8115066:	a904      	add	r1, sp, #16
 8115068:	4630      	mov	r0, r6
 811506a:	f7fc fabf 	bl	81115ec <_printf_float>
 811506e:	4607      	mov	r7, r0
 8115070:	1c78      	adds	r0, r7, #1
 8115072:	d1d6      	bne.n	8115022 <_vfiprintf_r+0x19a>
 8115074:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8115076:	07d9      	lsls	r1, r3, #31
 8115078:	d405      	bmi.n	8115086 <_vfiprintf_r+0x1fe>
 811507a:	89ab      	ldrh	r3, [r5, #12]
 811507c:	059a      	lsls	r2, r3, #22
 811507e:	d402      	bmi.n	8115086 <_vfiprintf_r+0x1fe>
 8115080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8115082:	f7fd fac9 	bl	8112618 <__retarget_lock_release_recursive>
 8115086:	89ab      	ldrh	r3, [r5, #12]
 8115088:	065b      	lsls	r3, r3, #25
 811508a:	f53f af1f 	bmi.w	8114ecc <_vfiprintf_r+0x44>
 811508e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8115090:	e71e      	b.n	8114ed0 <_vfiprintf_r+0x48>
 8115092:	ab03      	add	r3, sp, #12
 8115094:	9300      	str	r3, [sp, #0]
 8115096:	462a      	mov	r2, r5
 8115098:	4b05      	ldr	r3, [pc, #20]	@ (81150b0 <_vfiprintf_r+0x228>)
 811509a:	a904      	add	r1, sp, #16
 811509c:	4630      	mov	r0, r6
 811509e:	f7fc fd3d 	bl	8111b1c <_printf_i>
 81150a2:	e7e4      	b.n	811506e <_vfiprintf_r+0x1e6>
 81150a4:	08117111 	.word	0x08117111
 81150a8:	0811711b 	.word	0x0811711b
 81150ac:	081115ed 	.word	0x081115ed
 81150b0:	08114e63 	.word	0x08114e63
 81150b4:	08117117 	.word	0x08117117

081150b8 <__sflush_r>:
 81150b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 81150bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81150c0:	0716      	lsls	r6, r2, #28
 81150c2:	4605      	mov	r5, r0
 81150c4:	460c      	mov	r4, r1
 81150c6:	d454      	bmi.n	8115172 <__sflush_r+0xba>
 81150c8:	684b      	ldr	r3, [r1, #4]
 81150ca:	2b00      	cmp	r3, #0
 81150cc:	dc02      	bgt.n	81150d4 <__sflush_r+0x1c>
 81150ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 81150d0:	2b00      	cmp	r3, #0
 81150d2:	dd48      	ble.n	8115166 <__sflush_r+0xae>
 81150d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 81150d6:	2e00      	cmp	r6, #0
 81150d8:	d045      	beq.n	8115166 <__sflush_r+0xae>
 81150da:	2300      	movs	r3, #0
 81150dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 81150e0:	682f      	ldr	r7, [r5, #0]
 81150e2:	6a21      	ldr	r1, [r4, #32]
 81150e4:	602b      	str	r3, [r5, #0]
 81150e6:	d030      	beq.n	811514a <__sflush_r+0x92>
 81150e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 81150ea:	89a3      	ldrh	r3, [r4, #12]
 81150ec:	0759      	lsls	r1, r3, #29
 81150ee:	d505      	bpl.n	81150fc <__sflush_r+0x44>
 81150f0:	6863      	ldr	r3, [r4, #4]
 81150f2:	1ad2      	subs	r2, r2, r3
 81150f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 81150f6:	b10b      	cbz	r3, 81150fc <__sflush_r+0x44>
 81150f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 81150fa:	1ad2      	subs	r2, r2, r3
 81150fc:	2300      	movs	r3, #0
 81150fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8115100:	6a21      	ldr	r1, [r4, #32]
 8115102:	4628      	mov	r0, r5
 8115104:	47b0      	blx	r6
 8115106:	1c43      	adds	r3, r0, #1
 8115108:	89a3      	ldrh	r3, [r4, #12]
 811510a:	d106      	bne.n	811511a <__sflush_r+0x62>
 811510c:	6829      	ldr	r1, [r5, #0]
 811510e:	291d      	cmp	r1, #29
 8115110:	d82b      	bhi.n	811516a <__sflush_r+0xb2>
 8115112:	4a2a      	ldr	r2, [pc, #168]	@ (81151bc <__sflush_r+0x104>)
 8115114:	410a      	asrs	r2, r1
 8115116:	07d6      	lsls	r6, r2, #31
 8115118:	d427      	bmi.n	811516a <__sflush_r+0xb2>
 811511a:	2200      	movs	r2, #0
 811511c:	6062      	str	r2, [r4, #4]
 811511e:	04d9      	lsls	r1, r3, #19
 8115120:	6922      	ldr	r2, [r4, #16]
 8115122:	6022      	str	r2, [r4, #0]
 8115124:	d504      	bpl.n	8115130 <__sflush_r+0x78>
 8115126:	1c42      	adds	r2, r0, #1
 8115128:	d101      	bne.n	811512e <__sflush_r+0x76>
 811512a:	682b      	ldr	r3, [r5, #0]
 811512c:	b903      	cbnz	r3, 8115130 <__sflush_r+0x78>
 811512e:	6560      	str	r0, [r4, #84]	@ 0x54
 8115130:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8115132:	602f      	str	r7, [r5, #0]
 8115134:	b1b9      	cbz	r1, 8115166 <__sflush_r+0xae>
 8115136:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 811513a:	4299      	cmp	r1, r3
 811513c:	d002      	beq.n	8115144 <__sflush_r+0x8c>
 811513e:	4628      	mov	r0, r5
 8115140:	f7fe f8ea 	bl	8113318 <_free_r>
 8115144:	2300      	movs	r3, #0
 8115146:	6363      	str	r3, [r4, #52]	@ 0x34
 8115148:	e00d      	b.n	8115166 <__sflush_r+0xae>
 811514a:	2301      	movs	r3, #1
 811514c:	4628      	mov	r0, r5
 811514e:	47b0      	blx	r6
 8115150:	4602      	mov	r2, r0
 8115152:	1c50      	adds	r0, r2, #1
 8115154:	d1c9      	bne.n	81150ea <__sflush_r+0x32>
 8115156:	682b      	ldr	r3, [r5, #0]
 8115158:	2b00      	cmp	r3, #0
 811515a:	d0c6      	beq.n	81150ea <__sflush_r+0x32>
 811515c:	2b1d      	cmp	r3, #29
 811515e:	d001      	beq.n	8115164 <__sflush_r+0xac>
 8115160:	2b16      	cmp	r3, #22
 8115162:	d11e      	bne.n	81151a2 <__sflush_r+0xea>
 8115164:	602f      	str	r7, [r5, #0]
 8115166:	2000      	movs	r0, #0
 8115168:	e022      	b.n	81151b0 <__sflush_r+0xf8>
 811516a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811516e:	b21b      	sxth	r3, r3
 8115170:	e01b      	b.n	81151aa <__sflush_r+0xf2>
 8115172:	690f      	ldr	r7, [r1, #16]
 8115174:	2f00      	cmp	r7, #0
 8115176:	d0f6      	beq.n	8115166 <__sflush_r+0xae>
 8115178:	0793      	lsls	r3, r2, #30
 811517a:	680e      	ldr	r6, [r1, #0]
 811517c:	bf08      	it	eq
 811517e:	694b      	ldreq	r3, [r1, #20]
 8115180:	600f      	str	r7, [r1, #0]
 8115182:	bf18      	it	ne
 8115184:	2300      	movne	r3, #0
 8115186:	eba6 0807 	sub.w	r8, r6, r7
 811518a:	608b      	str	r3, [r1, #8]
 811518c:	f1b8 0f00 	cmp.w	r8, #0
 8115190:	dde9      	ble.n	8115166 <__sflush_r+0xae>
 8115192:	6a21      	ldr	r1, [r4, #32]
 8115194:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8115196:	4643      	mov	r3, r8
 8115198:	463a      	mov	r2, r7
 811519a:	4628      	mov	r0, r5
 811519c:	47b0      	blx	r6
 811519e:	2800      	cmp	r0, #0
 81151a0:	dc08      	bgt.n	81151b4 <__sflush_r+0xfc>
 81151a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81151a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81151aa:	81a3      	strh	r3, [r4, #12]
 81151ac:	f04f 30ff 	mov.w	r0, #4294967295
 81151b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81151b4:	4407      	add	r7, r0
 81151b6:	eba8 0800 	sub.w	r8, r8, r0
 81151ba:	e7e7      	b.n	811518c <__sflush_r+0xd4>
 81151bc:	dfbffffe 	.word	0xdfbffffe

081151c0 <_fflush_r>:
 81151c0:	b538      	push	{r3, r4, r5, lr}
 81151c2:	690b      	ldr	r3, [r1, #16]
 81151c4:	4605      	mov	r5, r0
 81151c6:	460c      	mov	r4, r1
 81151c8:	b913      	cbnz	r3, 81151d0 <_fflush_r+0x10>
 81151ca:	2500      	movs	r5, #0
 81151cc:	4628      	mov	r0, r5
 81151ce:	bd38      	pop	{r3, r4, r5, pc}
 81151d0:	b118      	cbz	r0, 81151da <_fflush_r+0x1a>
 81151d2:	6a03      	ldr	r3, [r0, #32]
 81151d4:	b90b      	cbnz	r3, 81151da <_fflush_r+0x1a>
 81151d6:	f7fd f861 	bl	811229c <__sinit>
 81151da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81151de:	2b00      	cmp	r3, #0
 81151e0:	d0f3      	beq.n	81151ca <_fflush_r+0xa>
 81151e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 81151e4:	07d0      	lsls	r0, r2, #31
 81151e6:	d404      	bmi.n	81151f2 <_fflush_r+0x32>
 81151e8:	0599      	lsls	r1, r3, #22
 81151ea:	d402      	bmi.n	81151f2 <_fflush_r+0x32>
 81151ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81151ee:	f7fd fa12 	bl	8112616 <__retarget_lock_acquire_recursive>
 81151f2:	4628      	mov	r0, r5
 81151f4:	4621      	mov	r1, r4
 81151f6:	f7ff ff5f 	bl	81150b8 <__sflush_r>
 81151fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81151fc:	07da      	lsls	r2, r3, #31
 81151fe:	4605      	mov	r5, r0
 8115200:	d4e4      	bmi.n	81151cc <_fflush_r+0xc>
 8115202:	89a3      	ldrh	r3, [r4, #12]
 8115204:	059b      	lsls	r3, r3, #22
 8115206:	d4e1      	bmi.n	81151cc <_fflush_r+0xc>
 8115208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 811520a:	f7fd fa05 	bl	8112618 <__retarget_lock_release_recursive>
 811520e:	e7dd      	b.n	81151cc <_fflush_r+0xc>

08115210 <fiprintf>:
 8115210:	b40e      	push	{r1, r2, r3}
 8115212:	b503      	push	{r0, r1, lr}
 8115214:	4601      	mov	r1, r0
 8115216:	ab03      	add	r3, sp, #12
 8115218:	4805      	ldr	r0, [pc, #20]	@ (8115230 <fiprintf+0x20>)
 811521a:	f853 2b04 	ldr.w	r2, [r3], #4
 811521e:	6800      	ldr	r0, [r0, #0]
 8115220:	9301      	str	r3, [sp, #4]
 8115222:	f7ff fe31 	bl	8114e88 <_vfiprintf_r>
 8115226:	b002      	add	sp, #8
 8115228:	f85d eb04 	ldr.w	lr, [sp], #4
 811522c:	b003      	add	sp, #12
 811522e:	4770      	bx	lr
 8115230:	100000b0 	.word	0x100000b0

08115234 <__swhatbuf_r>:
 8115234:	b570      	push	{r4, r5, r6, lr}
 8115236:	460c      	mov	r4, r1
 8115238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811523c:	2900      	cmp	r1, #0
 811523e:	b096      	sub	sp, #88	@ 0x58
 8115240:	4615      	mov	r5, r2
 8115242:	461e      	mov	r6, r3
 8115244:	da0d      	bge.n	8115262 <__swhatbuf_r+0x2e>
 8115246:	89a3      	ldrh	r3, [r4, #12]
 8115248:	f013 0f80 	tst.w	r3, #128	@ 0x80
 811524c:	f04f 0100 	mov.w	r1, #0
 8115250:	bf14      	ite	ne
 8115252:	2340      	movne	r3, #64	@ 0x40
 8115254:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8115258:	2000      	movs	r0, #0
 811525a:	6031      	str	r1, [r6, #0]
 811525c:	602b      	str	r3, [r5, #0]
 811525e:	b016      	add	sp, #88	@ 0x58
 8115260:	bd70      	pop	{r4, r5, r6, pc}
 8115262:	466a      	mov	r2, sp
 8115264:	f000 f874 	bl	8115350 <_fstat_r>
 8115268:	2800      	cmp	r0, #0
 811526a:	dbec      	blt.n	8115246 <__swhatbuf_r+0x12>
 811526c:	9901      	ldr	r1, [sp, #4]
 811526e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8115272:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8115276:	4259      	negs	r1, r3
 8115278:	4159      	adcs	r1, r3
 811527a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 811527e:	e7eb      	b.n	8115258 <__swhatbuf_r+0x24>

08115280 <__smakebuf_r>:
 8115280:	898b      	ldrh	r3, [r1, #12]
 8115282:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8115284:	079d      	lsls	r5, r3, #30
 8115286:	4606      	mov	r6, r0
 8115288:	460c      	mov	r4, r1
 811528a:	d507      	bpl.n	811529c <__smakebuf_r+0x1c>
 811528c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8115290:	6023      	str	r3, [r4, #0]
 8115292:	6123      	str	r3, [r4, #16]
 8115294:	2301      	movs	r3, #1
 8115296:	6163      	str	r3, [r4, #20]
 8115298:	b003      	add	sp, #12
 811529a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 811529c:	ab01      	add	r3, sp, #4
 811529e:	466a      	mov	r2, sp
 81152a0:	f7ff ffc8 	bl	8115234 <__swhatbuf_r>
 81152a4:	9f00      	ldr	r7, [sp, #0]
 81152a6:	4605      	mov	r5, r0
 81152a8:	4639      	mov	r1, r7
 81152aa:	4630      	mov	r0, r6
 81152ac:	f7fe f8a8 	bl	8113400 <_malloc_r>
 81152b0:	b948      	cbnz	r0, 81152c6 <__smakebuf_r+0x46>
 81152b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81152b6:	059a      	lsls	r2, r3, #22
 81152b8:	d4ee      	bmi.n	8115298 <__smakebuf_r+0x18>
 81152ba:	f023 0303 	bic.w	r3, r3, #3
 81152be:	f043 0302 	orr.w	r3, r3, #2
 81152c2:	81a3      	strh	r3, [r4, #12]
 81152c4:	e7e2      	b.n	811528c <__smakebuf_r+0xc>
 81152c6:	89a3      	ldrh	r3, [r4, #12]
 81152c8:	6020      	str	r0, [r4, #0]
 81152ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81152ce:	81a3      	strh	r3, [r4, #12]
 81152d0:	9b01      	ldr	r3, [sp, #4]
 81152d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 81152d6:	b15b      	cbz	r3, 81152f0 <__smakebuf_r+0x70>
 81152d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81152dc:	4630      	mov	r0, r6
 81152de:	f000 f849 	bl	8115374 <_isatty_r>
 81152e2:	b128      	cbz	r0, 81152f0 <__smakebuf_r+0x70>
 81152e4:	89a3      	ldrh	r3, [r4, #12]
 81152e6:	f023 0303 	bic.w	r3, r3, #3
 81152ea:	f043 0301 	orr.w	r3, r3, #1
 81152ee:	81a3      	strh	r3, [r4, #12]
 81152f0:	89a3      	ldrh	r3, [r4, #12]
 81152f2:	431d      	orrs	r5, r3
 81152f4:	81a5      	strh	r5, [r4, #12]
 81152f6:	e7cf      	b.n	8115298 <__smakebuf_r+0x18>

081152f8 <memmove>:
 81152f8:	4288      	cmp	r0, r1
 81152fa:	b510      	push	{r4, lr}
 81152fc:	eb01 0402 	add.w	r4, r1, r2
 8115300:	d902      	bls.n	8115308 <memmove+0x10>
 8115302:	4284      	cmp	r4, r0
 8115304:	4623      	mov	r3, r4
 8115306:	d807      	bhi.n	8115318 <memmove+0x20>
 8115308:	1e43      	subs	r3, r0, #1
 811530a:	42a1      	cmp	r1, r4
 811530c:	d008      	beq.n	8115320 <memmove+0x28>
 811530e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8115312:	f803 2f01 	strb.w	r2, [r3, #1]!
 8115316:	e7f8      	b.n	811530a <memmove+0x12>
 8115318:	4402      	add	r2, r0
 811531a:	4601      	mov	r1, r0
 811531c:	428a      	cmp	r2, r1
 811531e:	d100      	bne.n	8115322 <memmove+0x2a>
 8115320:	bd10      	pop	{r4, pc}
 8115322:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8115326:	f802 4d01 	strb.w	r4, [r2, #-1]!
 811532a:	e7f7      	b.n	811531c <memmove+0x24>

0811532c <strncmp>:
 811532c:	b510      	push	{r4, lr}
 811532e:	b16a      	cbz	r2, 811534c <strncmp+0x20>
 8115330:	3901      	subs	r1, #1
 8115332:	1884      	adds	r4, r0, r2
 8115334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8115338:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 811533c:	429a      	cmp	r2, r3
 811533e:	d103      	bne.n	8115348 <strncmp+0x1c>
 8115340:	42a0      	cmp	r0, r4
 8115342:	d001      	beq.n	8115348 <strncmp+0x1c>
 8115344:	2a00      	cmp	r2, #0
 8115346:	d1f5      	bne.n	8115334 <strncmp+0x8>
 8115348:	1ad0      	subs	r0, r2, r3
 811534a:	bd10      	pop	{r4, pc}
 811534c:	4610      	mov	r0, r2
 811534e:	e7fc      	b.n	811534a <strncmp+0x1e>

08115350 <_fstat_r>:
 8115350:	b538      	push	{r3, r4, r5, lr}
 8115352:	4d07      	ldr	r5, [pc, #28]	@ (8115370 <_fstat_r+0x20>)
 8115354:	2300      	movs	r3, #0
 8115356:	4604      	mov	r4, r0
 8115358:	4608      	mov	r0, r1
 811535a:	4611      	mov	r1, r2
 811535c:	602b      	str	r3, [r5, #0]
 811535e:	f7ef fbab 	bl	8104ab8 <_fstat>
 8115362:	1c43      	adds	r3, r0, #1
 8115364:	d102      	bne.n	811536c <_fstat_r+0x1c>
 8115366:	682b      	ldr	r3, [r5, #0]
 8115368:	b103      	cbz	r3, 811536c <_fstat_r+0x1c>
 811536a:	6023      	str	r3, [r4, #0]
 811536c:	bd38      	pop	{r3, r4, r5, pc}
 811536e:	bf00      	nop
 8115370:	1000d504 	.word	0x1000d504

08115374 <_isatty_r>:
 8115374:	b538      	push	{r3, r4, r5, lr}
 8115376:	4d06      	ldr	r5, [pc, #24]	@ (8115390 <_isatty_r+0x1c>)
 8115378:	2300      	movs	r3, #0
 811537a:	4604      	mov	r4, r0
 811537c:	4608      	mov	r0, r1
 811537e:	602b      	str	r3, [r5, #0]
 8115380:	f7ef fbaa 	bl	8104ad8 <_isatty>
 8115384:	1c43      	adds	r3, r0, #1
 8115386:	d102      	bne.n	811538e <_isatty_r+0x1a>
 8115388:	682b      	ldr	r3, [r5, #0]
 811538a:	b103      	cbz	r3, 811538e <_isatty_r+0x1a>
 811538c:	6023      	str	r3, [r4, #0]
 811538e:	bd38      	pop	{r3, r4, r5, pc}
 8115390:	1000d504 	.word	0x1000d504

08115394 <_sbrk_r>:
 8115394:	b538      	push	{r3, r4, r5, lr}
 8115396:	4d06      	ldr	r5, [pc, #24]	@ (81153b0 <_sbrk_r+0x1c>)
 8115398:	2300      	movs	r3, #0
 811539a:	4604      	mov	r4, r0
 811539c:	4608      	mov	r0, r1
 811539e:	602b      	str	r3, [r5, #0]
 81153a0:	f7ef fbb2 	bl	8104b08 <_sbrk>
 81153a4:	1c43      	adds	r3, r0, #1
 81153a6:	d102      	bne.n	81153ae <_sbrk_r+0x1a>
 81153a8:	682b      	ldr	r3, [r5, #0]
 81153aa:	b103      	cbz	r3, 81153ae <_sbrk_r+0x1a>
 81153ac:	6023      	str	r3, [r4, #0]
 81153ae:	bd38      	pop	{r3, r4, r5, pc}
 81153b0:	1000d504 	.word	0x1000d504
 81153b4:	00000000 	.word	0x00000000

081153b8 <nan>:
 81153b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 81153c0 <nan+0x8>
 81153bc:	4770      	bx	lr
 81153be:	bf00      	nop
 81153c0:	00000000 	.word	0x00000000
 81153c4:	7ff80000 	.word	0x7ff80000

081153c8 <abort>:
 81153c8:	b508      	push	{r3, lr}
 81153ca:	2006      	movs	r0, #6
 81153cc:	f000 fbc4 	bl	8115b58 <raise>
 81153d0:	2001      	movs	r0, #1
 81153d2:	f7ef fb3b 	bl	8104a4c <_exit>

081153d6 <_calloc_r>:
 81153d6:	b570      	push	{r4, r5, r6, lr}
 81153d8:	fba1 5402 	umull	r5, r4, r1, r2
 81153dc:	b93c      	cbnz	r4, 81153ee <_calloc_r+0x18>
 81153de:	4629      	mov	r1, r5
 81153e0:	f7fe f80e 	bl	8113400 <_malloc_r>
 81153e4:	4606      	mov	r6, r0
 81153e6:	b928      	cbnz	r0, 81153f4 <_calloc_r+0x1e>
 81153e8:	2600      	movs	r6, #0
 81153ea:	4630      	mov	r0, r6
 81153ec:	bd70      	pop	{r4, r5, r6, pc}
 81153ee:	220c      	movs	r2, #12
 81153f0:	6002      	str	r2, [r0, #0]
 81153f2:	e7f9      	b.n	81153e8 <_calloc_r+0x12>
 81153f4:	462a      	mov	r2, r5
 81153f6:	4621      	mov	r1, r4
 81153f8:	f7fd f890 	bl	811251c <memset>
 81153fc:	e7f5      	b.n	81153ea <_calloc_r+0x14>

081153fe <rshift>:
 81153fe:	6903      	ldr	r3, [r0, #16]
 8115400:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8115404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8115408:	ea4f 1261 	mov.w	r2, r1, asr #5
 811540c:	f100 0414 	add.w	r4, r0, #20
 8115410:	dd45      	ble.n	811549e <rshift+0xa0>
 8115412:	f011 011f 	ands.w	r1, r1, #31
 8115416:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 811541a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 811541e:	d10c      	bne.n	811543a <rshift+0x3c>
 8115420:	f100 0710 	add.w	r7, r0, #16
 8115424:	4629      	mov	r1, r5
 8115426:	42b1      	cmp	r1, r6
 8115428:	d334      	bcc.n	8115494 <rshift+0x96>
 811542a:	1a9b      	subs	r3, r3, r2
 811542c:	009b      	lsls	r3, r3, #2
 811542e:	1eea      	subs	r2, r5, #3
 8115430:	4296      	cmp	r6, r2
 8115432:	bf38      	it	cc
 8115434:	2300      	movcc	r3, #0
 8115436:	4423      	add	r3, r4
 8115438:	e015      	b.n	8115466 <rshift+0x68>
 811543a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 811543e:	f1c1 0820 	rsb	r8, r1, #32
 8115442:	40cf      	lsrs	r7, r1
 8115444:	f105 0e04 	add.w	lr, r5, #4
 8115448:	46a1      	mov	r9, r4
 811544a:	4576      	cmp	r6, lr
 811544c:	46f4      	mov	ip, lr
 811544e:	d815      	bhi.n	811547c <rshift+0x7e>
 8115450:	1a9a      	subs	r2, r3, r2
 8115452:	0092      	lsls	r2, r2, #2
 8115454:	3a04      	subs	r2, #4
 8115456:	3501      	adds	r5, #1
 8115458:	42ae      	cmp	r6, r5
 811545a:	bf38      	it	cc
 811545c:	2200      	movcc	r2, #0
 811545e:	18a3      	adds	r3, r4, r2
 8115460:	50a7      	str	r7, [r4, r2]
 8115462:	b107      	cbz	r7, 8115466 <rshift+0x68>
 8115464:	3304      	adds	r3, #4
 8115466:	1b1a      	subs	r2, r3, r4
 8115468:	42a3      	cmp	r3, r4
 811546a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 811546e:	bf08      	it	eq
 8115470:	2300      	moveq	r3, #0
 8115472:	6102      	str	r2, [r0, #16]
 8115474:	bf08      	it	eq
 8115476:	6143      	streq	r3, [r0, #20]
 8115478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 811547c:	f8dc c000 	ldr.w	ip, [ip]
 8115480:	fa0c fc08 	lsl.w	ip, ip, r8
 8115484:	ea4c 0707 	orr.w	r7, ip, r7
 8115488:	f849 7b04 	str.w	r7, [r9], #4
 811548c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8115490:	40cf      	lsrs	r7, r1
 8115492:	e7da      	b.n	811544a <rshift+0x4c>
 8115494:	f851 cb04 	ldr.w	ip, [r1], #4
 8115498:	f847 cf04 	str.w	ip, [r7, #4]!
 811549c:	e7c3      	b.n	8115426 <rshift+0x28>
 811549e:	4623      	mov	r3, r4
 81154a0:	e7e1      	b.n	8115466 <rshift+0x68>

081154a2 <__hexdig_fun>:
 81154a2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 81154a6:	2b09      	cmp	r3, #9
 81154a8:	d802      	bhi.n	81154b0 <__hexdig_fun+0xe>
 81154aa:	3820      	subs	r0, #32
 81154ac:	b2c0      	uxtb	r0, r0
 81154ae:	4770      	bx	lr
 81154b0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 81154b4:	2b05      	cmp	r3, #5
 81154b6:	d801      	bhi.n	81154bc <__hexdig_fun+0x1a>
 81154b8:	3847      	subs	r0, #71	@ 0x47
 81154ba:	e7f7      	b.n	81154ac <__hexdig_fun+0xa>
 81154bc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 81154c0:	2b05      	cmp	r3, #5
 81154c2:	d801      	bhi.n	81154c8 <__hexdig_fun+0x26>
 81154c4:	3827      	subs	r0, #39	@ 0x27
 81154c6:	e7f1      	b.n	81154ac <__hexdig_fun+0xa>
 81154c8:	2000      	movs	r0, #0
 81154ca:	4770      	bx	lr

081154cc <__gethex>:
 81154cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81154d0:	b085      	sub	sp, #20
 81154d2:	468a      	mov	sl, r1
 81154d4:	9302      	str	r3, [sp, #8]
 81154d6:	680b      	ldr	r3, [r1, #0]
 81154d8:	9001      	str	r0, [sp, #4]
 81154da:	4690      	mov	r8, r2
 81154dc:	1c9c      	adds	r4, r3, #2
 81154de:	46a1      	mov	r9, r4
 81154e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 81154e4:	2830      	cmp	r0, #48	@ 0x30
 81154e6:	d0fa      	beq.n	81154de <__gethex+0x12>
 81154e8:	eba9 0303 	sub.w	r3, r9, r3
 81154ec:	f1a3 0b02 	sub.w	fp, r3, #2
 81154f0:	f7ff ffd7 	bl	81154a2 <__hexdig_fun>
 81154f4:	4605      	mov	r5, r0
 81154f6:	2800      	cmp	r0, #0
 81154f8:	d168      	bne.n	81155cc <__gethex+0x100>
 81154fa:	49a0      	ldr	r1, [pc, #640]	@ (811577c <__gethex+0x2b0>)
 81154fc:	2201      	movs	r2, #1
 81154fe:	4648      	mov	r0, r9
 8115500:	f7ff ff14 	bl	811532c <strncmp>
 8115504:	4607      	mov	r7, r0
 8115506:	2800      	cmp	r0, #0
 8115508:	d167      	bne.n	81155da <__gethex+0x10e>
 811550a:	f899 0001 	ldrb.w	r0, [r9, #1]
 811550e:	4626      	mov	r6, r4
 8115510:	f7ff ffc7 	bl	81154a2 <__hexdig_fun>
 8115514:	2800      	cmp	r0, #0
 8115516:	d062      	beq.n	81155de <__gethex+0x112>
 8115518:	4623      	mov	r3, r4
 811551a:	7818      	ldrb	r0, [r3, #0]
 811551c:	2830      	cmp	r0, #48	@ 0x30
 811551e:	4699      	mov	r9, r3
 8115520:	f103 0301 	add.w	r3, r3, #1
 8115524:	d0f9      	beq.n	811551a <__gethex+0x4e>
 8115526:	f7ff ffbc 	bl	81154a2 <__hexdig_fun>
 811552a:	fab0 f580 	clz	r5, r0
 811552e:	096d      	lsrs	r5, r5, #5
 8115530:	f04f 0b01 	mov.w	fp, #1
 8115534:	464a      	mov	r2, r9
 8115536:	4616      	mov	r6, r2
 8115538:	3201      	adds	r2, #1
 811553a:	7830      	ldrb	r0, [r6, #0]
 811553c:	f7ff ffb1 	bl	81154a2 <__hexdig_fun>
 8115540:	2800      	cmp	r0, #0
 8115542:	d1f8      	bne.n	8115536 <__gethex+0x6a>
 8115544:	498d      	ldr	r1, [pc, #564]	@ (811577c <__gethex+0x2b0>)
 8115546:	2201      	movs	r2, #1
 8115548:	4630      	mov	r0, r6
 811554a:	f7ff feef 	bl	811532c <strncmp>
 811554e:	2800      	cmp	r0, #0
 8115550:	d13f      	bne.n	81155d2 <__gethex+0x106>
 8115552:	b944      	cbnz	r4, 8115566 <__gethex+0x9a>
 8115554:	1c74      	adds	r4, r6, #1
 8115556:	4622      	mov	r2, r4
 8115558:	4616      	mov	r6, r2
 811555a:	3201      	adds	r2, #1
 811555c:	7830      	ldrb	r0, [r6, #0]
 811555e:	f7ff ffa0 	bl	81154a2 <__hexdig_fun>
 8115562:	2800      	cmp	r0, #0
 8115564:	d1f8      	bne.n	8115558 <__gethex+0x8c>
 8115566:	1ba4      	subs	r4, r4, r6
 8115568:	00a7      	lsls	r7, r4, #2
 811556a:	7833      	ldrb	r3, [r6, #0]
 811556c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8115570:	2b50      	cmp	r3, #80	@ 0x50
 8115572:	d13e      	bne.n	81155f2 <__gethex+0x126>
 8115574:	7873      	ldrb	r3, [r6, #1]
 8115576:	2b2b      	cmp	r3, #43	@ 0x2b
 8115578:	d033      	beq.n	81155e2 <__gethex+0x116>
 811557a:	2b2d      	cmp	r3, #45	@ 0x2d
 811557c:	d034      	beq.n	81155e8 <__gethex+0x11c>
 811557e:	1c71      	adds	r1, r6, #1
 8115580:	2400      	movs	r4, #0
 8115582:	7808      	ldrb	r0, [r1, #0]
 8115584:	f7ff ff8d 	bl	81154a2 <__hexdig_fun>
 8115588:	1e43      	subs	r3, r0, #1
 811558a:	b2db      	uxtb	r3, r3
 811558c:	2b18      	cmp	r3, #24
 811558e:	d830      	bhi.n	81155f2 <__gethex+0x126>
 8115590:	f1a0 0210 	sub.w	r2, r0, #16
 8115594:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8115598:	f7ff ff83 	bl	81154a2 <__hexdig_fun>
 811559c:	f100 3cff 	add.w	ip, r0, #4294967295
 81155a0:	fa5f fc8c 	uxtb.w	ip, ip
 81155a4:	f1bc 0f18 	cmp.w	ip, #24
 81155a8:	f04f 030a 	mov.w	r3, #10
 81155ac:	d91e      	bls.n	81155ec <__gethex+0x120>
 81155ae:	b104      	cbz	r4, 81155b2 <__gethex+0xe6>
 81155b0:	4252      	negs	r2, r2
 81155b2:	4417      	add	r7, r2
 81155b4:	f8ca 1000 	str.w	r1, [sl]
 81155b8:	b1ed      	cbz	r5, 81155f6 <__gethex+0x12a>
 81155ba:	f1bb 0f00 	cmp.w	fp, #0
 81155be:	bf0c      	ite	eq
 81155c0:	2506      	moveq	r5, #6
 81155c2:	2500      	movne	r5, #0
 81155c4:	4628      	mov	r0, r5
 81155c6:	b005      	add	sp, #20
 81155c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81155cc:	2500      	movs	r5, #0
 81155ce:	462c      	mov	r4, r5
 81155d0:	e7b0      	b.n	8115534 <__gethex+0x68>
 81155d2:	2c00      	cmp	r4, #0
 81155d4:	d1c7      	bne.n	8115566 <__gethex+0x9a>
 81155d6:	4627      	mov	r7, r4
 81155d8:	e7c7      	b.n	811556a <__gethex+0x9e>
 81155da:	464e      	mov	r6, r9
 81155dc:	462f      	mov	r7, r5
 81155de:	2501      	movs	r5, #1
 81155e0:	e7c3      	b.n	811556a <__gethex+0x9e>
 81155e2:	2400      	movs	r4, #0
 81155e4:	1cb1      	adds	r1, r6, #2
 81155e6:	e7cc      	b.n	8115582 <__gethex+0xb6>
 81155e8:	2401      	movs	r4, #1
 81155ea:	e7fb      	b.n	81155e4 <__gethex+0x118>
 81155ec:	fb03 0002 	mla	r0, r3, r2, r0
 81155f0:	e7ce      	b.n	8115590 <__gethex+0xc4>
 81155f2:	4631      	mov	r1, r6
 81155f4:	e7de      	b.n	81155b4 <__gethex+0xe8>
 81155f6:	eba6 0309 	sub.w	r3, r6, r9
 81155fa:	3b01      	subs	r3, #1
 81155fc:	4629      	mov	r1, r5
 81155fe:	2b07      	cmp	r3, #7
 8115600:	dc0a      	bgt.n	8115618 <__gethex+0x14c>
 8115602:	9801      	ldr	r0, [sp, #4]
 8115604:	f7fd ff88 	bl	8113518 <_Balloc>
 8115608:	4604      	mov	r4, r0
 811560a:	b940      	cbnz	r0, 811561e <__gethex+0x152>
 811560c:	4b5c      	ldr	r3, [pc, #368]	@ (8115780 <__gethex+0x2b4>)
 811560e:	4602      	mov	r2, r0
 8115610:	21e4      	movs	r1, #228	@ 0xe4
 8115612:	485c      	ldr	r0, [pc, #368]	@ (8115784 <__gethex+0x2b8>)
 8115614:	f7fd f816 	bl	8112644 <__assert_func>
 8115618:	3101      	adds	r1, #1
 811561a:	105b      	asrs	r3, r3, #1
 811561c:	e7ef      	b.n	81155fe <__gethex+0x132>
 811561e:	f100 0a14 	add.w	sl, r0, #20
 8115622:	2300      	movs	r3, #0
 8115624:	4655      	mov	r5, sl
 8115626:	469b      	mov	fp, r3
 8115628:	45b1      	cmp	r9, r6
 811562a:	d337      	bcc.n	811569c <__gethex+0x1d0>
 811562c:	f845 bb04 	str.w	fp, [r5], #4
 8115630:	eba5 050a 	sub.w	r5, r5, sl
 8115634:	10ad      	asrs	r5, r5, #2
 8115636:	6125      	str	r5, [r4, #16]
 8115638:	4658      	mov	r0, fp
 811563a:	f7fe f85f 	bl	81136fc <__hi0bits>
 811563e:	016d      	lsls	r5, r5, #5
 8115640:	f8d8 6000 	ldr.w	r6, [r8]
 8115644:	1a2d      	subs	r5, r5, r0
 8115646:	42b5      	cmp	r5, r6
 8115648:	dd54      	ble.n	81156f4 <__gethex+0x228>
 811564a:	1bad      	subs	r5, r5, r6
 811564c:	4629      	mov	r1, r5
 811564e:	4620      	mov	r0, r4
 8115650:	f7fe fbf3 	bl	8113e3a <__any_on>
 8115654:	4681      	mov	r9, r0
 8115656:	b178      	cbz	r0, 8115678 <__gethex+0x1ac>
 8115658:	1e6b      	subs	r3, r5, #1
 811565a:	1159      	asrs	r1, r3, #5
 811565c:	f003 021f 	and.w	r2, r3, #31
 8115660:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8115664:	f04f 0901 	mov.w	r9, #1
 8115668:	fa09 f202 	lsl.w	r2, r9, r2
 811566c:	420a      	tst	r2, r1
 811566e:	d003      	beq.n	8115678 <__gethex+0x1ac>
 8115670:	454b      	cmp	r3, r9
 8115672:	dc36      	bgt.n	81156e2 <__gethex+0x216>
 8115674:	f04f 0902 	mov.w	r9, #2
 8115678:	4629      	mov	r1, r5
 811567a:	4620      	mov	r0, r4
 811567c:	f7ff febf 	bl	81153fe <rshift>
 8115680:	442f      	add	r7, r5
 8115682:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8115686:	42bb      	cmp	r3, r7
 8115688:	da42      	bge.n	8115710 <__gethex+0x244>
 811568a:	9801      	ldr	r0, [sp, #4]
 811568c:	4621      	mov	r1, r4
 811568e:	f7fd ff83 	bl	8113598 <_Bfree>
 8115692:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8115694:	2300      	movs	r3, #0
 8115696:	6013      	str	r3, [r2, #0]
 8115698:	25a3      	movs	r5, #163	@ 0xa3
 811569a:	e793      	b.n	81155c4 <__gethex+0xf8>
 811569c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 81156a0:	2a2e      	cmp	r2, #46	@ 0x2e
 81156a2:	d012      	beq.n	81156ca <__gethex+0x1fe>
 81156a4:	2b20      	cmp	r3, #32
 81156a6:	d104      	bne.n	81156b2 <__gethex+0x1e6>
 81156a8:	f845 bb04 	str.w	fp, [r5], #4
 81156ac:	f04f 0b00 	mov.w	fp, #0
 81156b0:	465b      	mov	r3, fp
 81156b2:	7830      	ldrb	r0, [r6, #0]
 81156b4:	9303      	str	r3, [sp, #12]
 81156b6:	f7ff fef4 	bl	81154a2 <__hexdig_fun>
 81156ba:	9b03      	ldr	r3, [sp, #12]
 81156bc:	f000 000f 	and.w	r0, r0, #15
 81156c0:	4098      	lsls	r0, r3
 81156c2:	ea4b 0b00 	orr.w	fp, fp, r0
 81156c6:	3304      	adds	r3, #4
 81156c8:	e7ae      	b.n	8115628 <__gethex+0x15c>
 81156ca:	45b1      	cmp	r9, r6
 81156cc:	d8ea      	bhi.n	81156a4 <__gethex+0x1d8>
 81156ce:	492b      	ldr	r1, [pc, #172]	@ (811577c <__gethex+0x2b0>)
 81156d0:	9303      	str	r3, [sp, #12]
 81156d2:	2201      	movs	r2, #1
 81156d4:	4630      	mov	r0, r6
 81156d6:	f7ff fe29 	bl	811532c <strncmp>
 81156da:	9b03      	ldr	r3, [sp, #12]
 81156dc:	2800      	cmp	r0, #0
 81156de:	d1e1      	bne.n	81156a4 <__gethex+0x1d8>
 81156e0:	e7a2      	b.n	8115628 <__gethex+0x15c>
 81156e2:	1ea9      	subs	r1, r5, #2
 81156e4:	4620      	mov	r0, r4
 81156e6:	f7fe fba8 	bl	8113e3a <__any_on>
 81156ea:	2800      	cmp	r0, #0
 81156ec:	d0c2      	beq.n	8115674 <__gethex+0x1a8>
 81156ee:	f04f 0903 	mov.w	r9, #3
 81156f2:	e7c1      	b.n	8115678 <__gethex+0x1ac>
 81156f4:	da09      	bge.n	811570a <__gethex+0x23e>
 81156f6:	1b75      	subs	r5, r6, r5
 81156f8:	4621      	mov	r1, r4
 81156fa:	9801      	ldr	r0, [sp, #4]
 81156fc:	462a      	mov	r2, r5
 81156fe:	f7fe f963 	bl	81139c8 <__lshift>
 8115702:	1b7f      	subs	r7, r7, r5
 8115704:	4604      	mov	r4, r0
 8115706:	f100 0a14 	add.w	sl, r0, #20
 811570a:	f04f 0900 	mov.w	r9, #0
 811570e:	e7b8      	b.n	8115682 <__gethex+0x1b6>
 8115710:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8115714:	42bd      	cmp	r5, r7
 8115716:	dd6f      	ble.n	81157f8 <__gethex+0x32c>
 8115718:	1bed      	subs	r5, r5, r7
 811571a:	42ae      	cmp	r6, r5
 811571c:	dc34      	bgt.n	8115788 <__gethex+0x2bc>
 811571e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8115722:	2b02      	cmp	r3, #2
 8115724:	d022      	beq.n	811576c <__gethex+0x2a0>
 8115726:	2b03      	cmp	r3, #3
 8115728:	d024      	beq.n	8115774 <__gethex+0x2a8>
 811572a:	2b01      	cmp	r3, #1
 811572c:	d115      	bne.n	811575a <__gethex+0x28e>
 811572e:	42ae      	cmp	r6, r5
 8115730:	d113      	bne.n	811575a <__gethex+0x28e>
 8115732:	2e01      	cmp	r6, #1
 8115734:	d10b      	bne.n	811574e <__gethex+0x282>
 8115736:	9a02      	ldr	r2, [sp, #8]
 8115738:	f8d8 3004 	ldr.w	r3, [r8, #4]
 811573c:	6013      	str	r3, [r2, #0]
 811573e:	2301      	movs	r3, #1
 8115740:	6123      	str	r3, [r4, #16]
 8115742:	f8ca 3000 	str.w	r3, [sl]
 8115746:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8115748:	2562      	movs	r5, #98	@ 0x62
 811574a:	601c      	str	r4, [r3, #0]
 811574c:	e73a      	b.n	81155c4 <__gethex+0xf8>
 811574e:	1e71      	subs	r1, r6, #1
 8115750:	4620      	mov	r0, r4
 8115752:	f7fe fb72 	bl	8113e3a <__any_on>
 8115756:	2800      	cmp	r0, #0
 8115758:	d1ed      	bne.n	8115736 <__gethex+0x26a>
 811575a:	9801      	ldr	r0, [sp, #4]
 811575c:	4621      	mov	r1, r4
 811575e:	f7fd ff1b 	bl	8113598 <_Bfree>
 8115762:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8115764:	2300      	movs	r3, #0
 8115766:	6013      	str	r3, [r2, #0]
 8115768:	2550      	movs	r5, #80	@ 0x50
 811576a:	e72b      	b.n	81155c4 <__gethex+0xf8>
 811576c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811576e:	2b00      	cmp	r3, #0
 8115770:	d1f3      	bne.n	811575a <__gethex+0x28e>
 8115772:	e7e0      	b.n	8115736 <__gethex+0x26a>
 8115774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8115776:	2b00      	cmp	r3, #0
 8115778:	d1dd      	bne.n	8115736 <__gethex+0x26a>
 811577a:	e7ee      	b.n	811575a <__gethex+0x28e>
 811577c:	08116fb8 	.word	0x08116fb8
 8115780:	08116e51 	.word	0x08116e51
 8115784:	0811712a 	.word	0x0811712a
 8115788:	1e6f      	subs	r7, r5, #1
 811578a:	f1b9 0f00 	cmp.w	r9, #0
 811578e:	d130      	bne.n	81157f2 <__gethex+0x326>
 8115790:	b127      	cbz	r7, 811579c <__gethex+0x2d0>
 8115792:	4639      	mov	r1, r7
 8115794:	4620      	mov	r0, r4
 8115796:	f7fe fb50 	bl	8113e3a <__any_on>
 811579a:	4681      	mov	r9, r0
 811579c:	117a      	asrs	r2, r7, #5
 811579e:	2301      	movs	r3, #1
 81157a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 81157a4:	f007 071f 	and.w	r7, r7, #31
 81157a8:	40bb      	lsls	r3, r7
 81157aa:	4213      	tst	r3, r2
 81157ac:	4629      	mov	r1, r5
 81157ae:	4620      	mov	r0, r4
 81157b0:	bf18      	it	ne
 81157b2:	f049 0902 	orrne.w	r9, r9, #2
 81157b6:	f7ff fe22 	bl	81153fe <rshift>
 81157ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 81157be:	1b76      	subs	r6, r6, r5
 81157c0:	2502      	movs	r5, #2
 81157c2:	f1b9 0f00 	cmp.w	r9, #0
 81157c6:	d047      	beq.n	8115858 <__gethex+0x38c>
 81157c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 81157cc:	2b02      	cmp	r3, #2
 81157ce:	d015      	beq.n	81157fc <__gethex+0x330>
 81157d0:	2b03      	cmp	r3, #3
 81157d2:	d017      	beq.n	8115804 <__gethex+0x338>
 81157d4:	2b01      	cmp	r3, #1
 81157d6:	d109      	bne.n	81157ec <__gethex+0x320>
 81157d8:	f019 0f02 	tst.w	r9, #2
 81157dc:	d006      	beq.n	81157ec <__gethex+0x320>
 81157de:	f8da 3000 	ldr.w	r3, [sl]
 81157e2:	ea49 0903 	orr.w	r9, r9, r3
 81157e6:	f019 0f01 	tst.w	r9, #1
 81157ea:	d10e      	bne.n	811580a <__gethex+0x33e>
 81157ec:	f045 0510 	orr.w	r5, r5, #16
 81157f0:	e032      	b.n	8115858 <__gethex+0x38c>
 81157f2:	f04f 0901 	mov.w	r9, #1
 81157f6:	e7d1      	b.n	811579c <__gethex+0x2d0>
 81157f8:	2501      	movs	r5, #1
 81157fa:	e7e2      	b.n	81157c2 <__gethex+0x2f6>
 81157fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81157fe:	f1c3 0301 	rsb	r3, r3, #1
 8115802:	930f      	str	r3, [sp, #60]	@ 0x3c
 8115804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8115806:	2b00      	cmp	r3, #0
 8115808:	d0f0      	beq.n	81157ec <__gethex+0x320>
 811580a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 811580e:	f104 0314 	add.w	r3, r4, #20
 8115812:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8115816:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 811581a:	f04f 0c00 	mov.w	ip, #0
 811581e:	4618      	mov	r0, r3
 8115820:	f853 2b04 	ldr.w	r2, [r3], #4
 8115824:	f1b2 3fff 	cmp.w	r2, #4294967295
 8115828:	d01b      	beq.n	8115862 <__gethex+0x396>
 811582a:	3201      	adds	r2, #1
 811582c:	6002      	str	r2, [r0, #0]
 811582e:	2d02      	cmp	r5, #2
 8115830:	f104 0314 	add.w	r3, r4, #20
 8115834:	d13c      	bne.n	81158b0 <__gethex+0x3e4>
 8115836:	f8d8 2000 	ldr.w	r2, [r8]
 811583a:	3a01      	subs	r2, #1
 811583c:	42b2      	cmp	r2, r6
 811583e:	d109      	bne.n	8115854 <__gethex+0x388>
 8115840:	1171      	asrs	r1, r6, #5
 8115842:	2201      	movs	r2, #1
 8115844:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8115848:	f006 061f 	and.w	r6, r6, #31
 811584c:	fa02 f606 	lsl.w	r6, r2, r6
 8115850:	421e      	tst	r6, r3
 8115852:	d13a      	bne.n	81158ca <__gethex+0x3fe>
 8115854:	f045 0520 	orr.w	r5, r5, #32
 8115858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811585a:	601c      	str	r4, [r3, #0]
 811585c:	9b02      	ldr	r3, [sp, #8]
 811585e:	601f      	str	r7, [r3, #0]
 8115860:	e6b0      	b.n	81155c4 <__gethex+0xf8>
 8115862:	4299      	cmp	r1, r3
 8115864:	f843 cc04 	str.w	ip, [r3, #-4]
 8115868:	d8d9      	bhi.n	811581e <__gethex+0x352>
 811586a:	68a3      	ldr	r3, [r4, #8]
 811586c:	459b      	cmp	fp, r3
 811586e:	db17      	blt.n	81158a0 <__gethex+0x3d4>
 8115870:	6861      	ldr	r1, [r4, #4]
 8115872:	9801      	ldr	r0, [sp, #4]
 8115874:	3101      	adds	r1, #1
 8115876:	f7fd fe4f 	bl	8113518 <_Balloc>
 811587a:	4681      	mov	r9, r0
 811587c:	b918      	cbnz	r0, 8115886 <__gethex+0x3ba>
 811587e:	4b1a      	ldr	r3, [pc, #104]	@ (81158e8 <__gethex+0x41c>)
 8115880:	4602      	mov	r2, r0
 8115882:	2184      	movs	r1, #132	@ 0x84
 8115884:	e6c5      	b.n	8115612 <__gethex+0x146>
 8115886:	6922      	ldr	r2, [r4, #16]
 8115888:	3202      	adds	r2, #2
 811588a:	f104 010c 	add.w	r1, r4, #12
 811588e:	0092      	lsls	r2, r2, #2
 8115890:	300c      	adds	r0, #12
 8115892:	f7fc fec2 	bl	811261a <memcpy>
 8115896:	4621      	mov	r1, r4
 8115898:	9801      	ldr	r0, [sp, #4]
 811589a:	f7fd fe7d 	bl	8113598 <_Bfree>
 811589e:	464c      	mov	r4, r9
 81158a0:	6923      	ldr	r3, [r4, #16]
 81158a2:	1c5a      	adds	r2, r3, #1
 81158a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 81158a8:	6122      	str	r2, [r4, #16]
 81158aa:	2201      	movs	r2, #1
 81158ac:	615a      	str	r2, [r3, #20]
 81158ae:	e7be      	b.n	811582e <__gethex+0x362>
 81158b0:	6922      	ldr	r2, [r4, #16]
 81158b2:	455a      	cmp	r2, fp
 81158b4:	dd0b      	ble.n	81158ce <__gethex+0x402>
 81158b6:	2101      	movs	r1, #1
 81158b8:	4620      	mov	r0, r4
 81158ba:	f7ff fda0 	bl	81153fe <rshift>
 81158be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 81158c2:	3701      	adds	r7, #1
 81158c4:	42bb      	cmp	r3, r7
 81158c6:	f6ff aee0 	blt.w	811568a <__gethex+0x1be>
 81158ca:	2501      	movs	r5, #1
 81158cc:	e7c2      	b.n	8115854 <__gethex+0x388>
 81158ce:	f016 061f 	ands.w	r6, r6, #31
 81158d2:	d0fa      	beq.n	81158ca <__gethex+0x3fe>
 81158d4:	4453      	add	r3, sl
 81158d6:	f1c6 0620 	rsb	r6, r6, #32
 81158da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 81158de:	f7fd ff0d 	bl	81136fc <__hi0bits>
 81158e2:	42b0      	cmp	r0, r6
 81158e4:	dbe7      	blt.n	81158b6 <__gethex+0x3ea>
 81158e6:	e7f0      	b.n	81158ca <__gethex+0x3fe>
 81158e8:	08116e51 	.word	0x08116e51

081158ec <L_shift>:
 81158ec:	f1c2 0208 	rsb	r2, r2, #8
 81158f0:	0092      	lsls	r2, r2, #2
 81158f2:	b570      	push	{r4, r5, r6, lr}
 81158f4:	f1c2 0620 	rsb	r6, r2, #32
 81158f8:	6843      	ldr	r3, [r0, #4]
 81158fa:	6804      	ldr	r4, [r0, #0]
 81158fc:	fa03 f506 	lsl.w	r5, r3, r6
 8115900:	432c      	orrs	r4, r5
 8115902:	40d3      	lsrs	r3, r2
 8115904:	6004      	str	r4, [r0, #0]
 8115906:	f840 3f04 	str.w	r3, [r0, #4]!
 811590a:	4288      	cmp	r0, r1
 811590c:	d3f4      	bcc.n	81158f8 <L_shift+0xc>
 811590e:	bd70      	pop	{r4, r5, r6, pc}

08115910 <__match>:
 8115910:	b530      	push	{r4, r5, lr}
 8115912:	6803      	ldr	r3, [r0, #0]
 8115914:	3301      	adds	r3, #1
 8115916:	f811 4b01 	ldrb.w	r4, [r1], #1
 811591a:	b914      	cbnz	r4, 8115922 <__match+0x12>
 811591c:	6003      	str	r3, [r0, #0]
 811591e:	2001      	movs	r0, #1
 8115920:	bd30      	pop	{r4, r5, pc}
 8115922:	f813 2b01 	ldrb.w	r2, [r3], #1
 8115926:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 811592a:	2d19      	cmp	r5, #25
 811592c:	bf98      	it	ls
 811592e:	3220      	addls	r2, #32
 8115930:	42a2      	cmp	r2, r4
 8115932:	d0f0      	beq.n	8115916 <__match+0x6>
 8115934:	2000      	movs	r0, #0
 8115936:	e7f3      	b.n	8115920 <__match+0x10>

08115938 <__hexnan>:
 8115938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811593c:	680b      	ldr	r3, [r1, #0]
 811593e:	6801      	ldr	r1, [r0, #0]
 8115940:	115e      	asrs	r6, r3, #5
 8115942:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8115946:	f013 031f 	ands.w	r3, r3, #31
 811594a:	b087      	sub	sp, #28
 811594c:	bf18      	it	ne
 811594e:	3604      	addne	r6, #4
 8115950:	2500      	movs	r5, #0
 8115952:	1f37      	subs	r7, r6, #4
 8115954:	4682      	mov	sl, r0
 8115956:	4690      	mov	r8, r2
 8115958:	9301      	str	r3, [sp, #4]
 811595a:	f846 5c04 	str.w	r5, [r6, #-4]
 811595e:	46b9      	mov	r9, r7
 8115960:	463c      	mov	r4, r7
 8115962:	9502      	str	r5, [sp, #8]
 8115964:	46ab      	mov	fp, r5
 8115966:	784a      	ldrb	r2, [r1, #1]
 8115968:	1c4b      	adds	r3, r1, #1
 811596a:	9303      	str	r3, [sp, #12]
 811596c:	b342      	cbz	r2, 81159c0 <__hexnan+0x88>
 811596e:	4610      	mov	r0, r2
 8115970:	9105      	str	r1, [sp, #20]
 8115972:	9204      	str	r2, [sp, #16]
 8115974:	f7ff fd95 	bl	81154a2 <__hexdig_fun>
 8115978:	2800      	cmp	r0, #0
 811597a:	d151      	bne.n	8115a20 <__hexnan+0xe8>
 811597c:	9a04      	ldr	r2, [sp, #16]
 811597e:	9905      	ldr	r1, [sp, #20]
 8115980:	2a20      	cmp	r2, #32
 8115982:	d818      	bhi.n	81159b6 <__hexnan+0x7e>
 8115984:	9b02      	ldr	r3, [sp, #8]
 8115986:	459b      	cmp	fp, r3
 8115988:	dd13      	ble.n	81159b2 <__hexnan+0x7a>
 811598a:	454c      	cmp	r4, r9
 811598c:	d206      	bcs.n	811599c <__hexnan+0x64>
 811598e:	2d07      	cmp	r5, #7
 8115990:	dc04      	bgt.n	811599c <__hexnan+0x64>
 8115992:	462a      	mov	r2, r5
 8115994:	4649      	mov	r1, r9
 8115996:	4620      	mov	r0, r4
 8115998:	f7ff ffa8 	bl	81158ec <L_shift>
 811599c:	4544      	cmp	r4, r8
 811599e:	d952      	bls.n	8115a46 <__hexnan+0x10e>
 81159a0:	2300      	movs	r3, #0
 81159a2:	f1a4 0904 	sub.w	r9, r4, #4
 81159a6:	f844 3c04 	str.w	r3, [r4, #-4]
 81159aa:	f8cd b008 	str.w	fp, [sp, #8]
 81159ae:	464c      	mov	r4, r9
 81159b0:	461d      	mov	r5, r3
 81159b2:	9903      	ldr	r1, [sp, #12]
 81159b4:	e7d7      	b.n	8115966 <__hexnan+0x2e>
 81159b6:	2a29      	cmp	r2, #41	@ 0x29
 81159b8:	d157      	bne.n	8115a6a <__hexnan+0x132>
 81159ba:	3102      	adds	r1, #2
 81159bc:	f8ca 1000 	str.w	r1, [sl]
 81159c0:	f1bb 0f00 	cmp.w	fp, #0
 81159c4:	d051      	beq.n	8115a6a <__hexnan+0x132>
 81159c6:	454c      	cmp	r4, r9
 81159c8:	d206      	bcs.n	81159d8 <__hexnan+0xa0>
 81159ca:	2d07      	cmp	r5, #7
 81159cc:	dc04      	bgt.n	81159d8 <__hexnan+0xa0>
 81159ce:	462a      	mov	r2, r5
 81159d0:	4649      	mov	r1, r9
 81159d2:	4620      	mov	r0, r4
 81159d4:	f7ff ff8a 	bl	81158ec <L_shift>
 81159d8:	4544      	cmp	r4, r8
 81159da:	d936      	bls.n	8115a4a <__hexnan+0x112>
 81159dc:	f1a8 0204 	sub.w	r2, r8, #4
 81159e0:	4623      	mov	r3, r4
 81159e2:	f853 1b04 	ldr.w	r1, [r3], #4
 81159e6:	f842 1f04 	str.w	r1, [r2, #4]!
 81159ea:	429f      	cmp	r7, r3
 81159ec:	d2f9      	bcs.n	81159e2 <__hexnan+0xaa>
 81159ee:	1b3b      	subs	r3, r7, r4
 81159f0:	f023 0303 	bic.w	r3, r3, #3
 81159f4:	3304      	adds	r3, #4
 81159f6:	3401      	adds	r4, #1
 81159f8:	3e03      	subs	r6, #3
 81159fa:	42b4      	cmp	r4, r6
 81159fc:	bf88      	it	hi
 81159fe:	2304      	movhi	r3, #4
 8115a00:	4443      	add	r3, r8
 8115a02:	2200      	movs	r2, #0
 8115a04:	f843 2b04 	str.w	r2, [r3], #4
 8115a08:	429f      	cmp	r7, r3
 8115a0a:	d2fb      	bcs.n	8115a04 <__hexnan+0xcc>
 8115a0c:	683b      	ldr	r3, [r7, #0]
 8115a0e:	b91b      	cbnz	r3, 8115a18 <__hexnan+0xe0>
 8115a10:	4547      	cmp	r7, r8
 8115a12:	d128      	bne.n	8115a66 <__hexnan+0x12e>
 8115a14:	2301      	movs	r3, #1
 8115a16:	603b      	str	r3, [r7, #0]
 8115a18:	2005      	movs	r0, #5
 8115a1a:	b007      	add	sp, #28
 8115a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8115a20:	3501      	adds	r5, #1
 8115a22:	2d08      	cmp	r5, #8
 8115a24:	f10b 0b01 	add.w	fp, fp, #1
 8115a28:	dd06      	ble.n	8115a38 <__hexnan+0x100>
 8115a2a:	4544      	cmp	r4, r8
 8115a2c:	d9c1      	bls.n	81159b2 <__hexnan+0x7a>
 8115a2e:	2300      	movs	r3, #0
 8115a30:	f844 3c04 	str.w	r3, [r4, #-4]
 8115a34:	2501      	movs	r5, #1
 8115a36:	3c04      	subs	r4, #4
 8115a38:	6822      	ldr	r2, [r4, #0]
 8115a3a:	f000 000f 	and.w	r0, r0, #15
 8115a3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8115a42:	6020      	str	r0, [r4, #0]
 8115a44:	e7b5      	b.n	81159b2 <__hexnan+0x7a>
 8115a46:	2508      	movs	r5, #8
 8115a48:	e7b3      	b.n	81159b2 <__hexnan+0x7a>
 8115a4a:	9b01      	ldr	r3, [sp, #4]
 8115a4c:	2b00      	cmp	r3, #0
 8115a4e:	d0dd      	beq.n	8115a0c <__hexnan+0xd4>
 8115a50:	f1c3 0320 	rsb	r3, r3, #32
 8115a54:	f04f 32ff 	mov.w	r2, #4294967295
 8115a58:	40da      	lsrs	r2, r3
 8115a5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8115a5e:	4013      	ands	r3, r2
 8115a60:	f846 3c04 	str.w	r3, [r6, #-4]
 8115a64:	e7d2      	b.n	8115a0c <__hexnan+0xd4>
 8115a66:	3f04      	subs	r7, #4
 8115a68:	e7d0      	b.n	8115a0c <__hexnan+0xd4>
 8115a6a:	2004      	movs	r0, #4
 8115a6c:	e7d5      	b.n	8115a1a <__hexnan+0xe2>

08115a6e <__ascii_mbtowc>:
 8115a6e:	b082      	sub	sp, #8
 8115a70:	b901      	cbnz	r1, 8115a74 <__ascii_mbtowc+0x6>
 8115a72:	a901      	add	r1, sp, #4
 8115a74:	b142      	cbz	r2, 8115a88 <__ascii_mbtowc+0x1a>
 8115a76:	b14b      	cbz	r3, 8115a8c <__ascii_mbtowc+0x1e>
 8115a78:	7813      	ldrb	r3, [r2, #0]
 8115a7a:	600b      	str	r3, [r1, #0]
 8115a7c:	7812      	ldrb	r2, [r2, #0]
 8115a7e:	1e10      	subs	r0, r2, #0
 8115a80:	bf18      	it	ne
 8115a82:	2001      	movne	r0, #1
 8115a84:	b002      	add	sp, #8
 8115a86:	4770      	bx	lr
 8115a88:	4610      	mov	r0, r2
 8115a8a:	e7fb      	b.n	8115a84 <__ascii_mbtowc+0x16>
 8115a8c:	f06f 0001 	mvn.w	r0, #1
 8115a90:	e7f8      	b.n	8115a84 <__ascii_mbtowc+0x16>

08115a92 <_realloc_r>:
 8115a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8115a96:	4680      	mov	r8, r0
 8115a98:	4615      	mov	r5, r2
 8115a9a:	460c      	mov	r4, r1
 8115a9c:	b921      	cbnz	r1, 8115aa8 <_realloc_r+0x16>
 8115a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8115aa2:	4611      	mov	r1, r2
 8115aa4:	f7fd bcac 	b.w	8113400 <_malloc_r>
 8115aa8:	b92a      	cbnz	r2, 8115ab6 <_realloc_r+0x24>
 8115aaa:	f7fd fc35 	bl	8113318 <_free_r>
 8115aae:	2400      	movs	r4, #0
 8115ab0:	4620      	mov	r0, r4
 8115ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8115ab6:	f000 f86b 	bl	8115b90 <_malloc_usable_size_r>
 8115aba:	4285      	cmp	r5, r0
 8115abc:	4606      	mov	r6, r0
 8115abe:	d802      	bhi.n	8115ac6 <_realloc_r+0x34>
 8115ac0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8115ac4:	d8f4      	bhi.n	8115ab0 <_realloc_r+0x1e>
 8115ac6:	4629      	mov	r1, r5
 8115ac8:	4640      	mov	r0, r8
 8115aca:	f7fd fc99 	bl	8113400 <_malloc_r>
 8115ace:	4607      	mov	r7, r0
 8115ad0:	2800      	cmp	r0, #0
 8115ad2:	d0ec      	beq.n	8115aae <_realloc_r+0x1c>
 8115ad4:	42b5      	cmp	r5, r6
 8115ad6:	462a      	mov	r2, r5
 8115ad8:	4621      	mov	r1, r4
 8115ada:	bf28      	it	cs
 8115adc:	4632      	movcs	r2, r6
 8115ade:	f7fc fd9c 	bl	811261a <memcpy>
 8115ae2:	4621      	mov	r1, r4
 8115ae4:	4640      	mov	r0, r8
 8115ae6:	f7fd fc17 	bl	8113318 <_free_r>
 8115aea:	463c      	mov	r4, r7
 8115aec:	e7e0      	b.n	8115ab0 <_realloc_r+0x1e>

08115aee <__ascii_wctomb>:
 8115aee:	4603      	mov	r3, r0
 8115af0:	4608      	mov	r0, r1
 8115af2:	b141      	cbz	r1, 8115b06 <__ascii_wctomb+0x18>
 8115af4:	2aff      	cmp	r2, #255	@ 0xff
 8115af6:	d904      	bls.n	8115b02 <__ascii_wctomb+0x14>
 8115af8:	228a      	movs	r2, #138	@ 0x8a
 8115afa:	601a      	str	r2, [r3, #0]
 8115afc:	f04f 30ff 	mov.w	r0, #4294967295
 8115b00:	4770      	bx	lr
 8115b02:	700a      	strb	r2, [r1, #0]
 8115b04:	2001      	movs	r0, #1
 8115b06:	4770      	bx	lr

08115b08 <_raise_r>:
 8115b08:	291f      	cmp	r1, #31
 8115b0a:	b538      	push	{r3, r4, r5, lr}
 8115b0c:	4605      	mov	r5, r0
 8115b0e:	460c      	mov	r4, r1
 8115b10:	d904      	bls.n	8115b1c <_raise_r+0x14>
 8115b12:	2316      	movs	r3, #22
 8115b14:	6003      	str	r3, [r0, #0]
 8115b16:	f04f 30ff 	mov.w	r0, #4294967295
 8115b1a:	bd38      	pop	{r3, r4, r5, pc}
 8115b1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8115b1e:	b112      	cbz	r2, 8115b26 <_raise_r+0x1e>
 8115b20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8115b24:	b94b      	cbnz	r3, 8115b3a <_raise_r+0x32>
 8115b26:	4628      	mov	r0, r5
 8115b28:	f000 f830 	bl	8115b8c <_getpid_r>
 8115b2c:	4622      	mov	r2, r4
 8115b2e:	4601      	mov	r1, r0
 8115b30:	4628      	mov	r0, r5
 8115b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8115b36:	f000 b817 	b.w	8115b68 <_kill_r>
 8115b3a:	2b01      	cmp	r3, #1
 8115b3c:	d00a      	beq.n	8115b54 <_raise_r+0x4c>
 8115b3e:	1c59      	adds	r1, r3, #1
 8115b40:	d103      	bne.n	8115b4a <_raise_r+0x42>
 8115b42:	2316      	movs	r3, #22
 8115b44:	6003      	str	r3, [r0, #0]
 8115b46:	2001      	movs	r0, #1
 8115b48:	e7e7      	b.n	8115b1a <_raise_r+0x12>
 8115b4a:	2100      	movs	r1, #0
 8115b4c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8115b50:	4620      	mov	r0, r4
 8115b52:	4798      	blx	r3
 8115b54:	2000      	movs	r0, #0
 8115b56:	e7e0      	b.n	8115b1a <_raise_r+0x12>

08115b58 <raise>:
 8115b58:	4b02      	ldr	r3, [pc, #8]	@ (8115b64 <raise+0xc>)
 8115b5a:	4601      	mov	r1, r0
 8115b5c:	6818      	ldr	r0, [r3, #0]
 8115b5e:	f7ff bfd3 	b.w	8115b08 <_raise_r>
 8115b62:	bf00      	nop
 8115b64:	100000b0 	.word	0x100000b0

08115b68 <_kill_r>:
 8115b68:	b538      	push	{r3, r4, r5, lr}
 8115b6a:	4d07      	ldr	r5, [pc, #28]	@ (8115b88 <_kill_r+0x20>)
 8115b6c:	2300      	movs	r3, #0
 8115b6e:	4604      	mov	r4, r0
 8115b70:	4608      	mov	r0, r1
 8115b72:	4611      	mov	r1, r2
 8115b74:	602b      	str	r3, [r5, #0]
 8115b76:	f7ee ff59 	bl	8104a2c <_kill>
 8115b7a:	1c43      	adds	r3, r0, #1
 8115b7c:	d102      	bne.n	8115b84 <_kill_r+0x1c>
 8115b7e:	682b      	ldr	r3, [r5, #0]
 8115b80:	b103      	cbz	r3, 8115b84 <_kill_r+0x1c>
 8115b82:	6023      	str	r3, [r4, #0]
 8115b84:	bd38      	pop	{r3, r4, r5, pc}
 8115b86:	bf00      	nop
 8115b88:	1000d504 	.word	0x1000d504

08115b8c <_getpid_r>:
 8115b8c:	f7ee bf46 	b.w	8104a1c <_getpid>

08115b90 <_malloc_usable_size_r>:
 8115b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8115b94:	1f18      	subs	r0, r3, #4
 8115b96:	2b00      	cmp	r3, #0
 8115b98:	bfbc      	itt	lt
 8115b9a:	580b      	ldrlt	r3, [r1, r0]
 8115b9c:	18c0      	addlt	r0, r0, r3
 8115b9e:	4770      	bx	lr

08115ba0 <sin>:
 8115ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8115ba2:	ec53 2b10 	vmov	r2, r3, d0
 8115ba6:	4826      	ldr	r0, [pc, #152]	@ (8115c40 <sin+0xa0>)
 8115ba8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8115bac:	4281      	cmp	r1, r0
 8115bae:	d807      	bhi.n	8115bc0 <sin+0x20>
 8115bb0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8115c38 <sin+0x98>
 8115bb4:	2000      	movs	r0, #0
 8115bb6:	b005      	add	sp, #20
 8115bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8115bbc:	f000 b90c 	b.w	8115dd8 <__kernel_sin>
 8115bc0:	4820      	ldr	r0, [pc, #128]	@ (8115c44 <sin+0xa4>)
 8115bc2:	4281      	cmp	r1, r0
 8115bc4:	d908      	bls.n	8115bd8 <sin+0x38>
 8115bc6:	4610      	mov	r0, r2
 8115bc8:	4619      	mov	r1, r3
 8115bca:	f7ea fbe5 	bl	8100398 <__aeabi_dsub>
 8115bce:	ec41 0b10 	vmov	d0, r0, r1
 8115bd2:	b005      	add	sp, #20
 8115bd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8115bd8:	4668      	mov	r0, sp
 8115bda:	f000 f9b9 	bl	8115f50 <__ieee754_rem_pio2>
 8115bde:	f000 0003 	and.w	r0, r0, #3
 8115be2:	2801      	cmp	r0, #1
 8115be4:	d00c      	beq.n	8115c00 <sin+0x60>
 8115be6:	2802      	cmp	r0, #2
 8115be8:	d011      	beq.n	8115c0e <sin+0x6e>
 8115bea:	b9e8      	cbnz	r0, 8115c28 <sin+0x88>
 8115bec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8115bf0:	ed9d 0b00 	vldr	d0, [sp]
 8115bf4:	2001      	movs	r0, #1
 8115bf6:	f000 f8ef 	bl	8115dd8 <__kernel_sin>
 8115bfa:	ec51 0b10 	vmov	r0, r1, d0
 8115bfe:	e7e6      	b.n	8115bce <sin+0x2e>
 8115c00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8115c04:	ed9d 0b00 	vldr	d0, [sp]
 8115c08:	f000 f81e 	bl	8115c48 <__kernel_cos>
 8115c0c:	e7f5      	b.n	8115bfa <sin+0x5a>
 8115c0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8115c12:	ed9d 0b00 	vldr	d0, [sp]
 8115c16:	2001      	movs	r0, #1
 8115c18:	f000 f8de 	bl	8115dd8 <__kernel_sin>
 8115c1c:	ec53 2b10 	vmov	r2, r3, d0
 8115c20:	4610      	mov	r0, r2
 8115c22:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8115c26:	e7d2      	b.n	8115bce <sin+0x2e>
 8115c28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8115c2c:	ed9d 0b00 	vldr	d0, [sp]
 8115c30:	f000 f80a 	bl	8115c48 <__kernel_cos>
 8115c34:	e7f2      	b.n	8115c1c <sin+0x7c>
 8115c36:	bf00      	nop
	...
 8115c40:	3fe921fb 	.word	0x3fe921fb
 8115c44:	7fefffff 	.word	0x7fefffff

08115c48 <__kernel_cos>:
 8115c48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8115c4c:	ec57 6b10 	vmov	r6, r7, d0
 8115c50:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8115c54:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8115c58:	ed8d 1b00 	vstr	d1, [sp]
 8115c5c:	d206      	bcs.n	8115c6c <__kernel_cos+0x24>
 8115c5e:	4630      	mov	r0, r6
 8115c60:	4639      	mov	r1, r7
 8115c62:	f7eb f801 	bl	8100c68 <__aeabi_d2iz>
 8115c66:	2800      	cmp	r0, #0
 8115c68:	f000 8088 	beq.w	8115d7c <__kernel_cos+0x134>
 8115c6c:	4632      	mov	r2, r6
 8115c6e:	463b      	mov	r3, r7
 8115c70:	4630      	mov	r0, r6
 8115c72:	4639      	mov	r1, r7
 8115c74:	f7ea fd48 	bl	8100708 <__aeabi_dmul>
 8115c78:	4b51      	ldr	r3, [pc, #324]	@ (8115dc0 <__kernel_cos+0x178>)
 8115c7a:	2200      	movs	r2, #0
 8115c7c:	4604      	mov	r4, r0
 8115c7e:	460d      	mov	r5, r1
 8115c80:	f7ea fd42 	bl	8100708 <__aeabi_dmul>
 8115c84:	a340      	add	r3, pc, #256	@ (adr r3, 8115d88 <__kernel_cos+0x140>)
 8115c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115c8a:	4682      	mov	sl, r0
 8115c8c:	468b      	mov	fp, r1
 8115c8e:	4620      	mov	r0, r4
 8115c90:	4629      	mov	r1, r5
 8115c92:	f7ea fd39 	bl	8100708 <__aeabi_dmul>
 8115c96:	a33e      	add	r3, pc, #248	@ (adr r3, 8115d90 <__kernel_cos+0x148>)
 8115c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115c9c:	f7ea fb7e 	bl	810039c <__adddf3>
 8115ca0:	4622      	mov	r2, r4
 8115ca2:	462b      	mov	r3, r5
 8115ca4:	f7ea fd30 	bl	8100708 <__aeabi_dmul>
 8115ca8:	a33b      	add	r3, pc, #236	@ (adr r3, 8115d98 <__kernel_cos+0x150>)
 8115caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115cae:	f7ea fb73 	bl	8100398 <__aeabi_dsub>
 8115cb2:	4622      	mov	r2, r4
 8115cb4:	462b      	mov	r3, r5
 8115cb6:	f7ea fd27 	bl	8100708 <__aeabi_dmul>
 8115cba:	a339      	add	r3, pc, #228	@ (adr r3, 8115da0 <__kernel_cos+0x158>)
 8115cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115cc0:	f7ea fb6c 	bl	810039c <__adddf3>
 8115cc4:	4622      	mov	r2, r4
 8115cc6:	462b      	mov	r3, r5
 8115cc8:	f7ea fd1e 	bl	8100708 <__aeabi_dmul>
 8115ccc:	a336      	add	r3, pc, #216	@ (adr r3, 8115da8 <__kernel_cos+0x160>)
 8115cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115cd2:	f7ea fb61 	bl	8100398 <__aeabi_dsub>
 8115cd6:	4622      	mov	r2, r4
 8115cd8:	462b      	mov	r3, r5
 8115cda:	f7ea fd15 	bl	8100708 <__aeabi_dmul>
 8115cde:	a334      	add	r3, pc, #208	@ (adr r3, 8115db0 <__kernel_cos+0x168>)
 8115ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115ce4:	f7ea fb5a 	bl	810039c <__adddf3>
 8115ce8:	4622      	mov	r2, r4
 8115cea:	462b      	mov	r3, r5
 8115cec:	f7ea fd0c 	bl	8100708 <__aeabi_dmul>
 8115cf0:	4622      	mov	r2, r4
 8115cf2:	462b      	mov	r3, r5
 8115cf4:	f7ea fd08 	bl	8100708 <__aeabi_dmul>
 8115cf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8115cfc:	4604      	mov	r4, r0
 8115cfe:	460d      	mov	r5, r1
 8115d00:	4630      	mov	r0, r6
 8115d02:	4639      	mov	r1, r7
 8115d04:	f7ea fd00 	bl	8100708 <__aeabi_dmul>
 8115d08:	460b      	mov	r3, r1
 8115d0a:	4602      	mov	r2, r0
 8115d0c:	4629      	mov	r1, r5
 8115d0e:	4620      	mov	r0, r4
 8115d10:	f7ea fb42 	bl	8100398 <__aeabi_dsub>
 8115d14:	4b2b      	ldr	r3, [pc, #172]	@ (8115dc4 <__kernel_cos+0x17c>)
 8115d16:	4598      	cmp	r8, r3
 8115d18:	4606      	mov	r6, r0
 8115d1a:	460f      	mov	r7, r1
 8115d1c:	d810      	bhi.n	8115d40 <__kernel_cos+0xf8>
 8115d1e:	4602      	mov	r2, r0
 8115d20:	460b      	mov	r3, r1
 8115d22:	4650      	mov	r0, sl
 8115d24:	4659      	mov	r1, fp
 8115d26:	f7ea fb37 	bl	8100398 <__aeabi_dsub>
 8115d2a:	460b      	mov	r3, r1
 8115d2c:	4926      	ldr	r1, [pc, #152]	@ (8115dc8 <__kernel_cos+0x180>)
 8115d2e:	4602      	mov	r2, r0
 8115d30:	2000      	movs	r0, #0
 8115d32:	f7ea fb31 	bl	8100398 <__aeabi_dsub>
 8115d36:	ec41 0b10 	vmov	d0, r0, r1
 8115d3a:	b003      	add	sp, #12
 8115d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8115d40:	4b22      	ldr	r3, [pc, #136]	@ (8115dcc <__kernel_cos+0x184>)
 8115d42:	4921      	ldr	r1, [pc, #132]	@ (8115dc8 <__kernel_cos+0x180>)
 8115d44:	4598      	cmp	r8, r3
 8115d46:	bf8c      	ite	hi
 8115d48:	4d21      	ldrhi	r5, [pc, #132]	@ (8115dd0 <__kernel_cos+0x188>)
 8115d4a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8115d4e:	2400      	movs	r4, #0
 8115d50:	4622      	mov	r2, r4
 8115d52:	462b      	mov	r3, r5
 8115d54:	2000      	movs	r0, #0
 8115d56:	f7ea fb1f 	bl	8100398 <__aeabi_dsub>
 8115d5a:	4622      	mov	r2, r4
 8115d5c:	4680      	mov	r8, r0
 8115d5e:	4689      	mov	r9, r1
 8115d60:	462b      	mov	r3, r5
 8115d62:	4650      	mov	r0, sl
 8115d64:	4659      	mov	r1, fp
 8115d66:	f7ea fb17 	bl	8100398 <__aeabi_dsub>
 8115d6a:	4632      	mov	r2, r6
 8115d6c:	463b      	mov	r3, r7
 8115d6e:	f7ea fb13 	bl	8100398 <__aeabi_dsub>
 8115d72:	4602      	mov	r2, r0
 8115d74:	460b      	mov	r3, r1
 8115d76:	4640      	mov	r0, r8
 8115d78:	4649      	mov	r1, r9
 8115d7a:	e7da      	b.n	8115d32 <__kernel_cos+0xea>
 8115d7c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8115db8 <__kernel_cos+0x170>
 8115d80:	e7db      	b.n	8115d3a <__kernel_cos+0xf2>
 8115d82:	bf00      	nop
 8115d84:	f3af 8000 	nop.w
 8115d88:	be8838d4 	.word	0xbe8838d4
 8115d8c:	bda8fae9 	.word	0xbda8fae9
 8115d90:	bdb4b1c4 	.word	0xbdb4b1c4
 8115d94:	3e21ee9e 	.word	0x3e21ee9e
 8115d98:	809c52ad 	.word	0x809c52ad
 8115d9c:	3e927e4f 	.word	0x3e927e4f
 8115da0:	19cb1590 	.word	0x19cb1590
 8115da4:	3efa01a0 	.word	0x3efa01a0
 8115da8:	16c15177 	.word	0x16c15177
 8115dac:	3f56c16c 	.word	0x3f56c16c
 8115db0:	5555554c 	.word	0x5555554c
 8115db4:	3fa55555 	.word	0x3fa55555
 8115db8:	00000000 	.word	0x00000000
 8115dbc:	3ff00000 	.word	0x3ff00000
 8115dc0:	3fe00000 	.word	0x3fe00000
 8115dc4:	3fd33332 	.word	0x3fd33332
 8115dc8:	3ff00000 	.word	0x3ff00000
 8115dcc:	3fe90000 	.word	0x3fe90000
 8115dd0:	3fd20000 	.word	0x3fd20000
 8115dd4:	00000000 	.word	0x00000000

08115dd8 <__kernel_sin>:
 8115dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8115ddc:	ec55 4b10 	vmov	r4, r5, d0
 8115de0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8115de4:	b085      	sub	sp, #20
 8115de6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8115dea:	ed8d 1b02 	vstr	d1, [sp, #8]
 8115dee:	4680      	mov	r8, r0
 8115df0:	d205      	bcs.n	8115dfe <__kernel_sin+0x26>
 8115df2:	4620      	mov	r0, r4
 8115df4:	4629      	mov	r1, r5
 8115df6:	f7ea ff37 	bl	8100c68 <__aeabi_d2iz>
 8115dfa:	2800      	cmp	r0, #0
 8115dfc:	d052      	beq.n	8115ea4 <__kernel_sin+0xcc>
 8115dfe:	4622      	mov	r2, r4
 8115e00:	462b      	mov	r3, r5
 8115e02:	4620      	mov	r0, r4
 8115e04:	4629      	mov	r1, r5
 8115e06:	f7ea fc7f 	bl	8100708 <__aeabi_dmul>
 8115e0a:	4682      	mov	sl, r0
 8115e0c:	468b      	mov	fp, r1
 8115e0e:	4602      	mov	r2, r0
 8115e10:	460b      	mov	r3, r1
 8115e12:	4620      	mov	r0, r4
 8115e14:	4629      	mov	r1, r5
 8115e16:	f7ea fc77 	bl	8100708 <__aeabi_dmul>
 8115e1a:	a342      	add	r3, pc, #264	@ (adr r3, 8115f24 <__kernel_sin+0x14c>)
 8115e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115e20:	e9cd 0100 	strd	r0, r1, [sp]
 8115e24:	4650      	mov	r0, sl
 8115e26:	4659      	mov	r1, fp
 8115e28:	f7ea fc6e 	bl	8100708 <__aeabi_dmul>
 8115e2c:	a33f      	add	r3, pc, #252	@ (adr r3, 8115f2c <__kernel_sin+0x154>)
 8115e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115e32:	f7ea fab1 	bl	8100398 <__aeabi_dsub>
 8115e36:	4652      	mov	r2, sl
 8115e38:	465b      	mov	r3, fp
 8115e3a:	f7ea fc65 	bl	8100708 <__aeabi_dmul>
 8115e3e:	a33d      	add	r3, pc, #244	@ (adr r3, 8115f34 <__kernel_sin+0x15c>)
 8115e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115e44:	f7ea faaa 	bl	810039c <__adddf3>
 8115e48:	4652      	mov	r2, sl
 8115e4a:	465b      	mov	r3, fp
 8115e4c:	f7ea fc5c 	bl	8100708 <__aeabi_dmul>
 8115e50:	a33a      	add	r3, pc, #232	@ (adr r3, 8115f3c <__kernel_sin+0x164>)
 8115e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115e56:	f7ea fa9f 	bl	8100398 <__aeabi_dsub>
 8115e5a:	4652      	mov	r2, sl
 8115e5c:	465b      	mov	r3, fp
 8115e5e:	f7ea fc53 	bl	8100708 <__aeabi_dmul>
 8115e62:	a338      	add	r3, pc, #224	@ (adr r3, 8115f44 <__kernel_sin+0x16c>)
 8115e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115e68:	f7ea fa98 	bl	810039c <__adddf3>
 8115e6c:	4606      	mov	r6, r0
 8115e6e:	460f      	mov	r7, r1
 8115e70:	f1b8 0f00 	cmp.w	r8, #0
 8115e74:	d11b      	bne.n	8115eae <__kernel_sin+0xd6>
 8115e76:	4602      	mov	r2, r0
 8115e78:	460b      	mov	r3, r1
 8115e7a:	4650      	mov	r0, sl
 8115e7c:	4659      	mov	r1, fp
 8115e7e:	f7ea fc43 	bl	8100708 <__aeabi_dmul>
 8115e82:	a325      	add	r3, pc, #148	@ (adr r3, 8115f18 <__kernel_sin+0x140>)
 8115e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115e88:	f7ea fa86 	bl	8100398 <__aeabi_dsub>
 8115e8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8115e90:	f7ea fc3a 	bl	8100708 <__aeabi_dmul>
 8115e94:	4602      	mov	r2, r0
 8115e96:	460b      	mov	r3, r1
 8115e98:	4620      	mov	r0, r4
 8115e9a:	4629      	mov	r1, r5
 8115e9c:	f7ea fa7e 	bl	810039c <__adddf3>
 8115ea0:	4604      	mov	r4, r0
 8115ea2:	460d      	mov	r5, r1
 8115ea4:	ec45 4b10 	vmov	d0, r4, r5
 8115ea8:	b005      	add	sp, #20
 8115eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8115eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8115eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8115f20 <__kernel_sin+0x148>)
 8115eb4:	2200      	movs	r2, #0
 8115eb6:	f7ea fc27 	bl	8100708 <__aeabi_dmul>
 8115eba:	4632      	mov	r2, r6
 8115ebc:	4680      	mov	r8, r0
 8115ebe:	4689      	mov	r9, r1
 8115ec0:	463b      	mov	r3, r7
 8115ec2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8115ec6:	f7ea fc1f 	bl	8100708 <__aeabi_dmul>
 8115eca:	4602      	mov	r2, r0
 8115ecc:	460b      	mov	r3, r1
 8115ece:	4640      	mov	r0, r8
 8115ed0:	4649      	mov	r1, r9
 8115ed2:	f7ea fa61 	bl	8100398 <__aeabi_dsub>
 8115ed6:	4652      	mov	r2, sl
 8115ed8:	465b      	mov	r3, fp
 8115eda:	f7ea fc15 	bl	8100708 <__aeabi_dmul>
 8115ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8115ee2:	f7ea fa59 	bl	8100398 <__aeabi_dsub>
 8115ee6:	a30c      	add	r3, pc, #48	@ (adr r3, 8115f18 <__kernel_sin+0x140>)
 8115ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115eec:	4606      	mov	r6, r0
 8115eee:	460f      	mov	r7, r1
 8115ef0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8115ef4:	f7ea fc08 	bl	8100708 <__aeabi_dmul>
 8115ef8:	4602      	mov	r2, r0
 8115efa:	460b      	mov	r3, r1
 8115efc:	4630      	mov	r0, r6
 8115efe:	4639      	mov	r1, r7
 8115f00:	f7ea fa4c 	bl	810039c <__adddf3>
 8115f04:	4602      	mov	r2, r0
 8115f06:	460b      	mov	r3, r1
 8115f08:	4620      	mov	r0, r4
 8115f0a:	4629      	mov	r1, r5
 8115f0c:	f7ea fa44 	bl	8100398 <__aeabi_dsub>
 8115f10:	e7c6      	b.n	8115ea0 <__kernel_sin+0xc8>
 8115f12:	bf00      	nop
 8115f14:	f3af 8000 	nop.w
 8115f18:	55555549 	.word	0x55555549
 8115f1c:	3fc55555 	.word	0x3fc55555
 8115f20:	3fe00000 	.word	0x3fe00000
 8115f24:	5acfd57c 	.word	0x5acfd57c
 8115f28:	3de5d93a 	.word	0x3de5d93a
 8115f2c:	8a2b9ceb 	.word	0x8a2b9ceb
 8115f30:	3e5ae5e6 	.word	0x3e5ae5e6
 8115f34:	57b1fe7d 	.word	0x57b1fe7d
 8115f38:	3ec71de3 	.word	0x3ec71de3
 8115f3c:	19c161d5 	.word	0x19c161d5
 8115f40:	3f2a01a0 	.word	0x3f2a01a0
 8115f44:	1110f8a6 	.word	0x1110f8a6
 8115f48:	3f811111 	.word	0x3f811111
 8115f4c:	00000000 	.word	0x00000000

08115f50 <__ieee754_rem_pio2>:
 8115f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8115f54:	ec57 6b10 	vmov	r6, r7, d0
 8115f58:	4bc5      	ldr	r3, [pc, #788]	@ (8116270 <__ieee754_rem_pio2+0x320>)
 8115f5a:	b08d      	sub	sp, #52	@ 0x34
 8115f5c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8115f60:	4598      	cmp	r8, r3
 8115f62:	4604      	mov	r4, r0
 8115f64:	9704      	str	r7, [sp, #16]
 8115f66:	d807      	bhi.n	8115f78 <__ieee754_rem_pio2+0x28>
 8115f68:	2200      	movs	r2, #0
 8115f6a:	2300      	movs	r3, #0
 8115f6c:	ed80 0b00 	vstr	d0, [r0]
 8115f70:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8115f74:	2500      	movs	r5, #0
 8115f76:	e028      	b.n	8115fca <__ieee754_rem_pio2+0x7a>
 8115f78:	4bbe      	ldr	r3, [pc, #760]	@ (8116274 <__ieee754_rem_pio2+0x324>)
 8115f7a:	4598      	cmp	r8, r3
 8115f7c:	d878      	bhi.n	8116070 <__ieee754_rem_pio2+0x120>
 8115f7e:	9b04      	ldr	r3, [sp, #16]
 8115f80:	4dbd      	ldr	r5, [pc, #756]	@ (8116278 <__ieee754_rem_pio2+0x328>)
 8115f82:	2b00      	cmp	r3, #0
 8115f84:	4630      	mov	r0, r6
 8115f86:	a3ac      	add	r3, pc, #688	@ (adr r3, 8116238 <__ieee754_rem_pio2+0x2e8>)
 8115f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115f8c:	4639      	mov	r1, r7
 8115f8e:	dd38      	ble.n	8116002 <__ieee754_rem_pio2+0xb2>
 8115f90:	f7ea fa02 	bl	8100398 <__aeabi_dsub>
 8115f94:	45a8      	cmp	r8, r5
 8115f96:	4606      	mov	r6, r0
 8115f98:	460f      	mov	r7, r1
 8115f9a:	d01a      	beq.n	8115fd2 <__ieee754_rem_pio2+0x82>
 8115f9c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8116240 <__ieee754_rem_pio2+0x2f0>)
 8115f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115fa2:	f7ea f9f9 	bl	8100398 <__aeabi_dsub>
 8115fa6:	4602      	mov	r2, r0
 8115fa8:	460b      	mov	r3, r1
 8115faa:	4680      	mov	r8, r0
 8115fac:	4689      	mov	r9, r1
 8115fae:	4630      	mov	r0, r6
 8115fb0:	4639      	mov	r1, r7
 8115fb2:	f7ea f9f1 	bl	8100398 <__aeabi_dsub>
 8115fb6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8116240 <__ieee754_rem_pio2+0x2f0>)
 8115fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115fbc:	f7ea f9ec 	bl	8100398 <__aeabi_dsub>
 8115fc0:	e9c4 8900 	strd	r8, r9, [r4]
 8115fc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8115fc8:	2501      	movs	r5, #1
 8115fca:	4628      	mov	r0, r5
 8115fcc:	b00d      	add	sp, #52	@ 0x34
 8115fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8115fd2:	a39d      	add	r3, pc, #628	@ (adr r3, 8116248 <__ieee754_rem_pio2+0x2f8>)
 8115fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115fd8:	f7ea f9de 	bl	8100398 <__aeabi_dsub>
 8115fdc:	a39c      	add	r3, pc, #624	@ (adr r3, 8116250 <__ieee754_rem_pio2+0x300>)
 8115fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115fe2:	4606      	mov	r6, r0
 8115fe4:	460f      	mov	r7, r1
 8115fe6:	f7ea f9d7 	bl	8100398 <__aeabi_dsub>
 8115fea:	4602      	mov	r2, r0
 8115fec:	460b      	mov	r3, r1
 8115fee:	4680      	mov	r8, r0
 8115ff0:	4689      	mov	r9, r1
 8115ff2:	4630      	mov	r0, r6
 8115ff4:	4639      	mov	r1, r7
 8115ff6:	f7ea f9cf 	bl	8100398 <__aeabi_dsub>
 8115ffa:	a395      	add	r3, pc, #596	@ (adr r3, 8116250 <__ieee754_rem_pio2+0x300>)
 8115ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116000:	e7dc      	b.n	8115fbc <__ieee754_rem_pio2+0x6c>
 8116002:	f7ea f9cb 	bl	810039c <__adddf3>
 8116006:	45a8      	cmp	r8, r5
 8116008:	4606      	mov	r6, r0
 811600a:	460f      	mov	r7, r1
 811600c:	d018      	beq.n	8116040 <__ieee754_rem_pio2+0xf0>
 811600e:	a38c      	add	r3, pc, #560	@ (adr r3, 8116240 <__ieee754_rem_pio2+0x2f0>)
 8116010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116014:	f7ea f9c2 	bl	810039c <__adddf3>
 8116018:	4602      	mov	r2, r0
 811601a:	460b      	mov	r3, r1
 811601c:	4680      	mov	r8, r0
 811601e:	4689      	mov	r9, r1
 8116020:	4630      	mov	r0, r6
 8116022:	4639      	mov	r1, r7
 8116024:	f7ea f9b8 	bl	8100398 <__aeabi_dsub>
 8116028:	a385      	add	r3, pc, #532	@ (adr r3, 8116240 <__ieee754_rem_pio2+0x2f0>)
 811602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811602e:	f7ea f9b5 	bl	810039c <__adddf3>
 8116032:	f04f 35ff 	mov.w	r5, #4294967295
 8116036:	e9c4 8900 	strd	r8, r9, [r4]
 811603a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 811603e:	e7c4      	b.n	8115fca <__ieee754_rem_pio2+0x7a>
 8116040:	a381      	add	r3, pc, #516	@ (adr r3, 8116248 <__ieee754_rem_pio2+0x2f8>)
 8116042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116046:	f7ea f9a9 	bl	810039c <__adddf3>
 811604a:	a381      	add	r3, pc, #516	@ (adr r3, 8116250 <__ieee754_rem_pio2+0x300>)
 811604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116050:	4606      	mov	r6, r0
 8116052:	460f      	mov	r7, r1
 8116054:	f7ea f9a2 	bl	810039c <__adddf3>
 8116058:	4602      	mov	r2, r0
 811605a:	460b      	mov	r3, r1
 811605c:	4680      	mov	r8, r0
 811605e:	4689      	mov	r9, r1
 8116060:	4630      	mov	r0, r6
 8116062:	4639      	mov	r1, r7
 8116064:	f7ea f998 	bl	8100398 <__aeabi_dsub>
 8116068:	a379      	add	r3, pc, #484	@ (adr r3, 8116250 <__ieee754_rem_pio2+0x300>)
 811606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811606e:	e7de      	b.n	811602e <__ieee754_rem_pio2+0xde>
 8116070:	4b82      	ldr	r3, [pc, #520]	@ (811627c <__ieee754_rem_pio2+0x32c>)
 8116072:	4598      	cmp	r8, r3
 8116074:	f200 80d1 	bhi.w	811621a <__ieee754_rem_pio2+0x2ca>
 8116078:	f000 f966 	bl	8116348 <fabs>
 811607c:	ec57 6b10 	vmov	r6, r7, d0
 8116080:	a375      	add	r3, pc, #468	@ (adr r3, 8116258 <__ieee754_rem_pio2+0x308>)
 8116082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116086:	4630      	mov	r0, r6
 8116088:	4639      	mov	r1, r7
 811608a:	f7ea fb3d 	bl	8100708 <__aeabi_dmul>
 811608e:	4b7c      	ldr	r3, [pc, #496]	@ (8116280 <__ieee754_rem_pio2+0x330>)
 8116090:	2200      	movs	r2, #0
 8116092:	f7ea f983 	bl	810039c <__adddf3>
 8116096:	f7ea fde7 	bl	8100c68 <__aeabi_d2iz>
 811609a:	4605      	mov	r5, r0
 811609c:	f7ea faca 	bl	8100634 <__aeabi_i2d>
 81160a0:	4602      	mov	r2, r0
 81160a2:	460b      	mov	r3, r1
 81160a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 81160a8:	a363      	add	r3, pc, #396	@ (adr r3, 8116238 <__ieee754_rem_pio2+0x2e8>)
 81160aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81160ae:	f7ea fb2b 	bl	8100708 <__aeabi_dmul>
 81160b2:	4602      	mov	r2, r0
 81160b4:	460b      	mov	r3, r1
 81160b6:	4630      	mov	r0, r6
 81160b8:	4639      	mov	r1, r7
 81160ba:	f7ea f96d 	bl	8100398 <__aeabi_dsub>
 81160be:	a360      	add	r3, pc, #384	@ (adr r3, 8116240 <__ieee754_rem_pio2+0x2f0>)
 81160c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81160c4:	4682      	mov	sl, r0
 81160c6:	468b      	mov	fp, r1
 81160c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81160cc:	f7ea fb1c 	bl	8100708 <__aeabi_dmul>
 81160d0:	2d1f      	cmp	r5, #31
 81160d2:	4606      	mov	r6, r0
 81160d4:	460f      	mov	r7, r1
 81160d6:	dc0c      	bgt.n	81160f2 <__ieee754_rem_pio2+0x1a2>
 81160d8:	4b6a      	ldr	r3, [pc, #424]	@ (8116284 <__ieee754_rem_pio2+0x334>)
 81160da:	1e6a      	subs	r2, r5, #1
 81160dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81160e0:	4543      	cmp	r3, r8
 81160e2:	d006      	beq.n	81160f2 <__ieee754_rem_pio2+0x1a2>
 81160e4:	4632      	mov	r2, r6
 81160e6:	463b      	mov	r3, r7
 81160e8:	4650      	mov	r0, sl
 81160ea:	4659      	mov	r1, fp
 81160ec:	f7ea f954 	bl	8100398 <__aeabi_dsub>
 81160f0:	e00e      	b.n	8116110 <__ieee754_rem_pio2+0x1c0>
 81160f2:	463b      	mov	r3, r7
 81160f4:	4632      	mov	r2, r6
 81160f6:	4650      	mov	r0, sl
 81160f8:	4659      	mov	r1, fp
 81160fa:	f7ea f94d 	bl	8100398 <__aeabi_dsub>
 81160fe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8116102:	9305      	str	r3, [sp, #20]
 8116104:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8116108:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 811610c:	2b10      	cmp	r3, #16
 811610e:	dc02      	bgt.n	8116116 <__ieee754_rem_pio2+0x1c6>
 8116110:	e9c4 0100 	strd	r0, r1, [r4]
 8116114:	e039      	b.n	811618a <__ieee754_rem_pio2+0x23a>
 8116116:	a34c      	add	r3, pc, #304	@ (adr r3, 8116248 <__ieee754_rem_pio2+0x2f8>)
 8116118:	e9d3 2300 	ldrd	r2, r3, [r3]
 811611c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8116120:	f7ea faf2 	bl	8100708 <__aeabi_dmul>
 8116124:	4606      	mov	r6, r0
 8116126:	460f      	mov	r7, r1
 8116128:	4602      	mov	r2, r0
 811612a:	460b      	mov	r3, r1
 811612c:	4650      	mov	r0, sl
 811612e:	4659      	mov	r1, fp
 8116130:	f7ea f932 	bl	8100398 <__aeabi_dsub>
 8116134:	4602      	mov	r2, r0
 8116136:	460b      	mov	r3, r1
 8116138:	4680      	mov	r8, r0
 811613a:	4689      	mov	r9, r1
 811613c:	4650      	mov	r0, sl
 811613e:	4659      	mov	r1, fp
 8116140:	f7ea f92a 	bl	8100398 <__aeabi_dsub>
 8116144:	4632      	mov	r2, r6
 8116146:	463b      	mov	r3, r7
 8116148:	f7ea f926 	bl	8100398 <__aeabi_dsub>
 811614c:	a340      	add	r3, pc, #256	@ (adr r3, 8116250 <__ieee754_rem_pio2+0x300>)
 811614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116152:	4606      	mov	r6, r0
 8116154:	460f      	mov	r7, r1
 8116156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 811615a:	f7ea fad5 	bl	8100708 <__aeabi_dmul>
 811615e:	4632      	mov	r2, r6
 8116160:	463b      	mov	r3, r7
 8116162:	f7ea f919 	bl	8100398 <__aeabi_dsub>
 8116166:	4602      	mov	r2, r0
 8116168:	460b      	mov	r3, r1
 811616a:	4606      	mov	r6, r0
 811616c:	460f      	mov	r7, r1
 811616e:	4640      	mov	r0, r8
 8116170:	4649      	mov	r1, r9
 8116172:	f7ea f911 	bl	8100398 <__aeabi_dsub>
 8116176:	9a05      	ldr	r2, [sp, #20]
 8116178:	f3c1 530a 	ubfx	r3, r1, #20, #11
 811617c:	1ad3      	subs	r3, r2, r3
 811617e:	2b31      	cmp	r3, #49	@ 0x31
 8116180:	dc20      	bgt.n	81161c4 <__ieee754_rem_pio2+0x274>
 8116182:	e9c4 0100 	strd	r0, r1, [r4]
 8116186:	46c2      	mov	sl, r8
 8116188:	46cb      	mov	fp, r9
 811618a:	e9d4 8900 	ldrd	r8, r9, [r4]
 811618e:	4650      	mov	r0, sl
 8116190:	4642      	mov	r2, r8
 8116192:	464b      	mov	r3, r9
 8116194:	4659      	mov	r1, fp
 8116196:	f7ea f8ff 	bl	8100398 <__aeabi_dsub>
 811619a:	463b      	mov	r3, r7
 811619c:	4632      	mov	r2, r6
 811619e:	f7ea f8fb 	bl	8100398 <__aeabi_dsub>
 81161a2:	9b04      	ldr	r3, [sp, #16]
 81161a4:	2b00      	cmp	r3, #0
 81161a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 81161aa:	f6bf af0e 	bge.w	8115fca <__ieee754_rem_pio2+0x7a>
 81161ae:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 81161b2:	6063      	str	r3, [r4, #4]
 81161b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 81161b8:	f8c4 8000 	str.w	r8, [r4]
 81161bc:	60a0      	str	r0, [r4, #8]
 81161be:	60e3      	str	r3, [r4, #12]
 81161c0:	426d      	negs	r5, r5
 81161c2:	e702      	b.n	8115fca <__ieee754_rem_pio2+0x7a>
 81161c4:	a326      	add	r3, pc, #152	@ (adr r3, 8116260 <__ieee754_rem_pio2+0x310>)
 81161c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81161ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81161ce:	f7ea fa9b 	bl	8100708 <__aeabi_dmul>
 81161d2:	4606      	mov	r6, r0
 81161d4:	460f      	mov	r7, r1
 81161d6:	4602      	mov	r2, r0
 81161d8:	460b      	mov	r3, r1
 81161da:	4640      	mov	r0, r8
 81161dc:	4649      	mov	r1, r9
 81161de:	f7ea f8db 	bl	8100398 <__aeabi_dsub>
 81161e2:	4602      	mov	r2, r0
 81161e4:	460b      	mov	r3, r1
 81161e6:	4682      	mov	sl, r0
 81161e8:	468b      	mov	fp, r1
 81161ea:	4640      	mov	r0, r8
 81161ec:	4649      	mov	r1, r9
 81161ee:	f7ea f8d3 	bl	8100398 <__aeabi_dsub>
 81161f2:	4632      	mov	r2, r6
 81161f4:	463b      	mov	r3, r7
 81161f6:	f7ea f8cf 	bl	8100398 <__aeabi_dsub>
 81161fa:	a31b      	add	r3, pc, #108	@ (adr r3, 8116268 <__ieee754_rem_pio2+0x318>)
 81161fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116200:	4606      	mov	r6, r0
 8116202:	460f      	mov	r7, r1
 8116204:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8116208:	f7ea fa7e 	bl	8100708 <__aeabi_dmul>
 811620c:	4632      	mov	r2, r6
 811620e:	463b      	mov	r3, r7
 8116210:	f7ea f8c2 	bl	8100398 <__aeabi_dsub>
 8116214:	4606      	mov	r6, r0
 8116216:	460f      	mov	r7, r1
 8116218:	e764      	b.n	81160e4 <__ieee754_rem_pio2+0x194>
 811621a:	4b1b      	ldr	r3, [pc, #108]	@ (8116288 <__ieee754_rem_pio2+0x338>)
 811621c:	4598      	cmp	r8, r3
 811621e:	d935      	bls.n	811628c <__ieee754_rem_pio2+0x33c>
 8116220:	4632      	mov	r2, r6
 8116222:	463b      	mov	r3, r7
 8116224:	4630      	mov	r0, r6
 8116226:	4639      	mov	r1, r7
 8116228:	f7ea f8b6 	bl	8100398 <__aeabi_dsub>
 811622c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8116230:	e9c4 0100 	strd	r0, r1, [r4]
 8116234:	e69e      	b.n	8115f74 <__ieee754_rem_pio2+0x24>
 8116236:	bf00      	nop
 8116238:	54400000 	.word	0x54400000
 811623c:	3ff921fb 	.word	0x3ff921fb
 8116240:	1a626331 	.word	0x1a626331
 8116244:	3dd0b461 	.word	0x3dd0b461
 8116248:	1a600000 	.word	0x1a600000
 811624c:	3dd0b461 	.word	0x3dd0b461
 8116250:	2e037073 	.word	0x2e037073
 8116254:	3ba3198a 	.word	0x3ba3198a
 8116258:	6dc9c883 	.word	0x6dc9c883
 811625c:	3fe45f30 	.word	0x3fe45f30
 8116260:	2e000000 	.word	0x2e000000
 8116264:	3ba3198a 	.word	0x3ba3198a
 8116268:	252049c1 	.word	0x252049c1
 811626c:	397b839a 	.word	0x397b839a
 8116270:	3fe921fb 	.word	0x3fe921fb
 8116274:	4002d97b 	.word	0x4002d97b
 8116278:	3ff921fb 	.word	0x3ff921fb
 811627c:	413921fb 	.word	0x413921fb
 8116280:	3fe00000 	.word	0x3fe00000
 8116284:	0811718c 	.word	0x0811718c
 8116288:	7fefffff 	.word	0x7fefffff
 811628c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8116290:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8116294:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8116298:	4630      	mov	r0, r6
 811629a:	460f      	mov	r7, r1
 811629c:	f7ea fce4 	bl	8100c68 <__aeabi_d2iz>
 81162a0:	f7ea f9c8 	bl	8100634 <__aeabi_i2d>
 81162a4:	4602      	mov	r2, r0
 81162a6:	460b      	mov	r3, r1
 81162a8:	4630      	mov	r0, r6
 81162aa:	4639      	mov	r1, r7
 81162ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 81162b0:	f7ea f872 	bl	8100398 <__aeabi_dsub>
 81162b4:	4b22      	ldr	r3, [pc, #136]	@ (8116340 <__ieee754_rem_pio2+0x3f0>)
 81162b6:	2200      	movs	r2, #0
 81162b8:	f7ea fa26 	bl	8100708 <__aeabi_dmul>
 81162bc:	460f      	mov	r7, r1
 81162be:	4606      	mov	r6, r0
 81162c0:	f7ea fcd2 	bl	8100c68 <__aeabi_d2iz>
 81162c4:	f7ea f9b6 	bl	8100634 <__aeabi_i2d>
 81162c8:	4602      	mov	r2, r0
 81162ca:	460b      	mov	r3, r1
 81162cc:	4630      	mov	r0, r6
 81162ce:	4639      	mov	r1, r7
 81162d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 81162d4:	f7ea f860 	bl	8100398 <__aeabi_dsub>
 81162d8:	4b19      	ldr	r3, [pc, #100]	@ (8116340 <__ieee754_rem_pio2+0x3f0>)
 81162da:	2200      	movs	r2, #0
 81162dc:	f7ea fa14 	bl	8100708 <__aeabi_dmul>
 81162e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 81162e4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 81162e8:	f04f 0803 	mov.w	r8, #3
 81162ec:	2600      	movs	r6, #0
 81162ee:	2700      	movs	r7, #0
 81162f0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 81162f4:	4632      	mov	r2, r6
 81162f6:	463b      	mov	r3, r7
 81162f8:	46c2      	mov	sl, r8
 81162fa:	f108 38ff 	add.w	r8, r8, #4294967295
 81162fe:	f7ea fc6b 	bl	8100bd8 <__aeabi_dcmpeq>
 8116302:	2800      	cmp	r0, #0
 8116304:	d1f4      	bne.n	81162f0 <__ieee754_rem_pio2+0x3a0>
 8116306:	4b0f      	ldr	r3, [pc, #60]	@ (8116344 <__ieee754_rem_pio2+0x3f4>)
 8116308:	9301      	str	r3, [sp, #4]
 811630a:	2302      	movs	r3, #2
 811630c:	9300      	str	r3, [sp, #0]
 811630e:	462a      	mov	r2, r5
 8116310:	4653      	mov	r3, sl
 8116312:	4621      	mov	r1, r4
 8116314:	a806      	add	r0, sp, #24
 8116316:	f000 f81f 	bl	8116358 <__kernel_rem_pio2>
 811631a:	9b04      	ldr	r3, [sp, #16]
 811631c:	2b00      	cmp	r3, #0
 811631e:	4605      	mov	r5, r0
 8116320:	f6bf ae53 	bge.w	8115fca <__ieee754_rem_pio2+0x7a>
 8116324:	e9d4 2100 	ldrd	r2, r1, [r4]
 8116328:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 811632c:	e9c4 2300 	strd	r2, r3, [r4]
 8116330:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8116334:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8116338:	e9c4 2302 	strd	r2, r3, [r4, #8]
 811633c:	e740      	b.n	81161c0 <__ieee754_rem_pio2+0x270>
 811633e:	bf00      	nop
 8116340:	41700000 	.word	0x41700000
 8116344:	0811720c 	.word	0x0811720c

08116348 <fabs>:
 8116348:	ec51 0b10 	vmov	r0, r1, d0
 811634c:	4602      	mov	r2, r0
 811634e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8116352:	ec43 2b10 	vmov	d0, r2, r3
 8116356:	4770      	bx	lr

08116358 <__kernel_rem_pio2>:
 8116358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811635c:	ed2d 8b02 	vpush	{d8}
 8116360:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8116364:	f112 0f14 	cmn.w	r2, #20
 8116368:	9306      	str	r3, [sp, #24]
 811636a:	9104      	str	r1, [sp, #16]
 811636c:	4bbe      	ldr	r3, [pc, #760]	@ (8116668 <__kernel_rem_pio2+0x310>)
 811636e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8116370:	9008      	str	r0, [sp, #32]
 8116372:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8116376:	9300      	str	r3, [sp, #0]
 8116378:	9b06      	ldr	r3, [sp, #24]
 811637a:	f103 33ff 	add.w	r3, r3, #4294967295
 811637e:	bfa8      	it	ge
 8116380:	1ed4      	subge	r4, r2, #3
 8116382:	9305      	str	r3, [sp, #20]
 8116384:	bfb2      	itee	lt
 8116386:	2400      	movlt	r4, #0
 8116388:	2318      	movge	r3, #24
 811638a:	fb94 f4f3 	sdivge	r4, r4, r3
 811638e:	f06f 0317 	mvn.w	r3, #23
 8116392:	fb04 3303 	mla	r3, r4, r3, r3
 8116396:	eb03 0b02 	add.w	fp, r3, r2
 811639a:	9b00      	ldr	r3, [sp, #0]
 811639c:	9a05      	ldr	r2, [sp, #20]
 811639e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8116658 <__kernel_rem_pio2+0x300>
 81163a2:	eb03 0802 	add.w	r8, r3, r2
 81163a6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 81163a8:	1aa7      	subs	r7, r4, r2
 81163aa:	ae20      	add	r6, sp, #128	@ 0x80
 81163ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 81163b0:	2500      	movs	r5, #0
 81163b2:	4545      	cmp	r5, r8
 81163b4:	dd13      	ble.n	81163de <__kernel_rem_pio2+0x86>
 81163b6:	9b06      	ldr	r3, [sp, #24]
 81163b8:	aa20      	add	r2, sp, #128	@ 0x80
 81163ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 81163be:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 81163c2:	f04f 0800 	mov.w	r8, #0
 81163c6:	9b00      	ldr	r3, [sp, #0]
 81163c8:	4598      	cmp	r8, r3
 81163ca:	dc31      	bgt.n	8116430 <__kernel_rem_pio2+0xd8>
 81163cc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8116658 <__kernel_rem_pio2+0x300>
 81163d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 81163d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 81163d8:	462f      	mov	r7, r5
 81163da:	2600      	movs	r6, #0
 81163dc:	e01b      	b.n	8116416 <__kernel_rem_pio2+0xbe>
 81163de:	42ef      	cmn	r7, r5
 81163e0:	d407      	bmi.n	81163f2 <__kernel_rem_pio2+0x9a>
 81163e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 81163e6:	f7ea f925 	bl	8100634 <__aeabi_i2d>
 81163ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 81163ee:	3501      	adds	r5, #1
 81163f0:	e7df      	b.n	81163b2 <__kernel_rem_pio2+0x5a>
 81163f2:	ec51 0b18 	vmov	r0, r1, d8
 81163f6:	e7f8      	b.n	81163ea <__kernel_rem_pio2+0x92>
 81163f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81163fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8116400:	f7ea f982 	bl	8100708 <__aeabi_dmul>
 8116404:	4602      	mov	r2, r0
 8116406:	460b      	mov	r3, r1
 8116408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 811640c:	f7e9 ffc6 	bl	810039c <__adddf3>
 8116410:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8116414:	3601      	adds	r6, #1
 8116416:	9b05      	ldr	r3, [sp, #20]
 8116418:	429e      	cmp	r6, r3
 811641a:	f1a7 0708 	sub.w	r7, r7, #8
 811641e:	ddeb      	ble.n	81163f8 <__kernel_rem_pio2+0xa0>
 8116420:	ed9d 7b02 	vldr	d7, [sp, #8]
 8116424:	f108 0801 	add.w	r8, r8, #1
 8116428:	ecaa 7b02 	vstmia	sl!, {d7}
 811642c:	3508      	adds	r5, #8
 811642e:	e7ca      	b.n	81163c6 <__kernel_rem_pio2+0x6e>
 8116430:	9b00      	ldr	r3, [sp, #0]
 8116432:	f8dd 8000 	ldr.w	r8, [sp]
 8116436:	aa0c      	add	r2, sp, #48	@ 0x30
 8116438:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 811643c:	930a      	str	r3, [sp, #40]	@ 0x28
 811643e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8116440:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8116444:	9309      	str	r3, [sp, #36]	@ 0x24
 8116446:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 811644a:	930b      	str	r3, [sp, #44]	@ 0x2c
 811644c:	ab98      	add	r3, sp, #608	@ 0x260
 811644e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8116452:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8116456:	ed8d 7b02 	vstr	d7, [sp, #8]
 811645a:	ac0c      	add	r4, sp, #48	@ 0x30
 811645c:	ab70      	add	r3, sp, #448	@ 0x1c0
 811645e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8116462:	46a1      	mov	r9, r4
 8116464:	46c2      	mov	sl, r8
 8116466:	f1ba 0f00 	cmp.w	sl, #0
 811646a:	f1a5 0508 	sub.w	r5, r5, #8
 811646e:	dc77      	bgt.n	8116560 <__kernel_rem_pio2+0x208>
 8116470:	4658      	mov	r0, fp
 8116472:	ed9d 0b02 	vldr	d0, [sp, #8]
 8116476:	f000 fac7 	bl	8116a08 <scalbn>
 811647a:	ec57 6b10 	vmov	r6, r7, d0
 811647e:	2200      	movs	r2, #0
 8116480:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8116484:	4630      	mov	r0, r6
 8116486:	4639      	mov	r1, r7
 8116488:	f7ea f93e 	bl	8100708 <__aeabi_dmul>
 811648c:	ec41 0b10 	vmov	d0, r0, r1
 8116490:	f000 fb3a 	bl	8116b08 <floor>
 8116494:	4b75      	ldr	r3, [pc, #468]	@ (811666c <__kernel_rem_pio2+0x314>)
 8116496:	ec51 0b10 	vmov	r0, r1, d0
 811649a:	2200      	movs	r2, #0
 811649c:	f7ea f934 	bl	8100708 <__aeabi_dmul>
 81164a0:	4602      	mov	r2, r0
 81164a2:	460b      	mov	r3, r1
 81164a4:	4630      	mov	r0, r6
 81164a6:	4639      	mov	r1, r7
 81164a8:	f7e9 ff76 	bl	8100398 <__aeabi_dsub>
 81164ac:	460f      	mov	r7, r1
 81164ae:	4606      	mov	r6, r0
 81164b0:	f7ea fbda 	bl	8100c68 <__aeabi_d2iz>
 81164b4:	9002      	str	r0, [sp, #8]
 81164b6:	f7ea f8bd 	bl	8100634 <__aeabi_i2d>
 81164ba:	4602      	mov	r2, r0
 81164bc:	460b      	mov	r3, r1
 81164be:	4630      	mov	r0, r6
 81164c0:	4639      	mov	r1, r7
 81164c2:	f7e9 ff69 	bl	8100398 <__aeabi_dsub>
 81164c6:	f1bb 0f00 	cmp.w	fp, #0
 81164ca:	4606      	mov	r6, r0
 81164cc:	460f      	mov	r7, r1
 81164ce:	dd6c      	ble.n	81165aa <__kernel_rem_pio2+0x252>
 81164d0:	f108 31ff 	add.w	r1, r8, #4294967295
 81164d4:	ab0c      	add	r3, sp, #48	@ 0x30
 81164d6:	9d02      	ldr	r5, [sp, #8]
 81164d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 81164dc:	f1cb 0018 	rsb	r0, fp, #24
 81164e0:	fa43 f200 	asr.w	r2, r3, r0
 81164e4:	4415      	add	r5, r2
 81164e6:	4082      	lsls	r2, r0
 81164e8:	1a9b      	subs	r3, r3, r2
 81164ea:	aa0c      	add	r2, sp, #48	@ 0x30
 81164ec:	9502      	str	r5, [sp, #8]
 81164ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 81164f2:	f1cb 0217 	rsb	r2, fp, #23
 81164f6:	fa43 f902 	asr.w	r9, r3, r2
 81164fa:	f1b9 0f00 	cmp.w	r9, #0
 81164fe:	dd64      	ble.n	81165ca <__kernel_rem_pio2+0x272>
 8116500:	9b02      	ldr	r3, [sp, #8]
 8116502:	2200      	movs	r2, #0
 8116504:	3301      	adds	r3, #1
 8116506:	9302      	str	r3, [sp, #8]
 8116508:	4615      	mov	r5, r2
 811650a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 811650e:	4590      	cmp	r8, r2
 8116510:	f300 80b8 	bgt.w	8116684 <__kernel_rem_pio2+0x32c>
 8116514:	f1bb 0f00 	cmp.w	fp, #0
 8116518:	dd07      	ble.n	811652a <__kernel_rem_pio2+0x1d2>
 811651a:	f1bb 0f01 	cmp.w	fp, #1
 811651e:	f000 80bf 	beq.w	81166a0 <__kernel_rem_pio2+0x348>
 8116522:	f1bb 0f02 	cmp.w	fp, #2
 8116526:	f000 80c6 	beq.w	81166b6 <__kernel_rem_pio2+0x35e>
 811652a:	f1b9 0f02 	cmp.w	r9, #2
 811652e:	d14c      	bne.n	81165ca <__kernel_rem_pio2+0x272>
 8116530:	4632      	mov	r2, r6
 8116532:	463b      	mov	r3, r7
 8116534:	494e      	ldr	r1, [pc, #312]	@ (8116670 <__kernel_rem_pio2+0x318>)
 8116536:	2000      	movs	r0, #0
 8116538:	f7e9 ff2e 	bl	8100398 <__aeabi_dsub>
 811653c:	4606      	mov	r6, r0
 811653e:	460f      	mov	r7, r1
 8116540:	2d00      	cmp	r5, #0
 8116542:	d042      	beq.n	81165ca <__kernel_rem_pio2+0x272>
 8116544:	4658      	mov	r0, fp
 8116546:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8116660 <__kernel_rem_pio2+0x308>
 811654a:	f000 fa5d 	bl	8116a08 <scalbn>
 811654e:	4630      	mov	r0, r6
 8116550:	4639      	mov	r1, r7
 8116552:	ec53 2b10 	vmov	r2, r3, d0
 8116556:	f7e9 ff1f 	bl	8100398 <__aeabi_dsub>
 811655a:	4606      	mov	r6, r0
 811655c:	460f      	mov	r7, r1
 811655e:	e034      	b.n	81165ca <__kernel_rem_pio2+0x272>
 8116560:	4b44      	ldr	r3, [pc, #272]	@ (8116674 <__kernel_rem_pio2+0x31c>)
 8116562:	2200      	movs	r2, #0
 8116564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8116568:	f7ea f8ce 	bl	8100708 <__aeabi_dmul>
 811656c:	f7ea fb7c 	bl	8100c68 <__aeabi_d2iz>
 8116570:	f7ea f860 	bl	8100634 <__aeabi_i2d>
 8116574:	4b40      	ldr	r3, [pc, #256]	@ (8116678 <__kernel_rem_pio2+0x320>)
 8116576:	2200      	movs	r2, #0
 8116578:	4606      	mov	r6, r0
 811657a:	460f      	mov	r7, r1
 811657c:	f7ea f8c4 	bl	8100708 <__aeabi_dmul>
 8116580:	4602      	mov	r2, r0
 8116582:	460b      	mov	r3, r1
 8116584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8116588:	f7e9 ff06 	bl	8100398 <__aeabi_dsub>
 811658c:	f7ea fb6c 	bl	8100c68 <__aeabi_d2iz>
 8116590:	e9d5 2300 	ldrd	r2, r3, [r5]
 8116594:	f849 0b04 	str.w	r0, [r9], #4
 8116598:	4639      	mov	r1, r7
 811659a:	4630      	mov	r0, r6
 811659c:	f7e9 fefe 	bl	810039c <__adddf3>
 81165a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 81165a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81165a8:	e75d      	b.n	8116466 <__kernel_rem_pio2+0x10e>
 81165aa:	d107      	bne.n	81165bc <__kernel_rem_pio2+0x264>
 81165ac:	f108 33ff 	add.w	r3, r8, #4294967295
 81165b0:	aa0c      	add	r2, sp, #48	@ 0x30
 81165b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81165b6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 81165ba:	e79e      	b.n	81164fa <__kernel_rem_pio2+0x1a2>
 81165bc:	4b2f      	ldr	r3, [pc, #188]	@ (811667c <__kernel_rem_pio2+0x324>)
 81165be:	2200      	movs	r2, #0
 81165c0:	f7ea fb28 	bl	8100c14 <__aeabi_dcmpge>
 81165c4:	2800      	cmp	r0, #0
 81165c6:	d143      	bne.n	8116650 <__kernel_rem_pio2+0x2f8>
 81165c8:	4681      	mov	r9, r0
 81165ca:	2200      	movs	r2, #0
 81165cc:	2300      	movs	r3, #0
 81165ce:	4630      	mov	r0, r6
 81165d0:	4639      	mov	r1, r7
 81165d2:	f7ea fb01 	bl	8100bd8 <__aeabi_dcmpeq>
 81165d6:	2800      	cmp	r0, #0
 81165d8:	f000 80bf 	beq.w	811675a <__kernel_rem_pio2+0x402>
 81165dc:	f108 33ff 	add.w	r3, r8, #4294967295
 81165e0:	2200      	movs	r2, #0
 81165e2:	9900      	ldr	r1, [sp, #0]
 81165e4:	428b      	cmp	r3, r1
 81165e6:	da6e      	bge.n	81166c6 <__kernel_rem_pio2+0x36e>
 81165e8:	2a00      	cmp	r2, #0
 81165ea:	f000 8089 	beq.w	8116700 <__kernel_rem_pio2+0x3a8>
 81165ee:	f108 38ff 	add.w	r8, r8, #4294967295
 81165f2:	ab0c      	add	r3, sp, #48	@ 0x30
 81165f4:	f1ab 0b18 	sub.w	fp, fp, #24
 81165f8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 81165fc:	2b00      	cmp	r3, #0
 81165fe:	d0f6      	beq.n	81165ee <__kernel_rem_pio2+0x296>
 8116600:	4658      	mov	r0, fp
 8116602:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8116660 <__kernel_rem_pio2+0x308>
 8116606:	f000 f9ff 	bl	8116a08 <scalbn>
 811660a:	f108 0301 	add.w	r3, r8, #1
 811660e:	00da      	lsls	r2, r3, #3
 8116610:	9205      	str	r2, [sp, #20]
 8116612:	ec55 4b10 	vmov	r4, r5, d0
 8116616:	aa70      	add	r2, sp, #448	@ 0x1c0
 8116618:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8116674 <__kernel_rem_pio2+0x31c>
 811661c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8116620:	4646      	mov	r6, r8
 8116622:	f04f 0a00 	mov.w	sl, #0
 8116626:	2e00      	cmp	r6, #0
 8116628:	f280 80cf 	bge.w	81167ca <__kernel_rem_pio2+0x472>
 811662c:	4644      	mov	r4, r8
 811662e:	2c00      	cmp	r4, #0
 8116630:	f2c0 80fd 	blt.w	811682e <__kernel_rem_pio2+0x4d6>
 8116634:	4b12      	ldr	r3, [pc, #72]	@ (8116680 <__kernel_rem_pio2+0x328>)
 8116636:	461f      	mov	r7, r3
 8116638:	ab70      	add	r3, sp, #448	@ 0x1c0
 811663a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 811663e:	9306      	str	r3, [sp, #24]
 8116640:	f04f 0a00 	mov.w	sl, #0
 8116644:	f04f 0b00 	mov.w	fp, #0
 8116648:	2600      	movs	r6, #0
 811664a:	eba8 0504 	sub.w	r5, r8, r4
 811664e:	e0e2      	b.n	8116816 <__kernel_rem_pio2+0x4be>
 8116650:	f04f 0902 	mov.w	r9, #2
 8116654:	e754      	b.n	8116500 <__kernel_rem_pio2+0x1a8>
 8116656:	bf00      	nop
	...
 8116664:	3ff00000 	.word	0x3ff00000
 8116668:	08117358 	.word	0x08117358
 811666c:	40200000 	.word	0x40200000
 8116670:	3ff00000 	.word	0x3ff00000
 8116674:	3e700000 	.word	0x3e700000
 8116678:	41700000 	.word	0x41700000
 811667c:	3fe00000 	.word	0x3fe00000
 8116680:	08117318 	.word	0x08117318
 8116684:	f854 3b04 	ldr.w	r3, [r4], #4
 8116688:	b945      	cbnz	r5, 811669c <__kernel_rem_pio2+0x344>
 811668a:	b123      	cbz	r3, 8116696 <__kernel_rem_pio2+0x33e>
 811668c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8116690:	f844 3c04 	str.w	r3, [r4, #-4]
 8116694:	2301      	movs	r3, #1
 8116696:	3201      	adds	r2, #1
 8116698:	461d      	mov	r5, r3
 811669a:	e738      	b.n	811650e <__kernel_rem_pio2+0x1b6>
 811669c:	1acb      	subs	r3, r1, r3
 811669e:	e7f7      	b.n	8116690 <__kernel_rem_pio2+0x338>
 81166a0:	f108 32ff 	add.w	r2, r8, #4294967295
 81166a4:	ab0c      	add	r3, sp, #48	@ 0x30
 81166a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81166aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 81166ae:	a90c      	add	r1, sp, #48	@ 0x30
 81166b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 81166b4:	e739      	b.n	811652a <__kernel_rem_pio2+0x1d2>
 81166b6:	f108 32ff 	add.w	r2, r8, #4294967295
 81166ba:	ab0c      	add	r3, sp, #48	@ 0x30
 81166bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81166c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 81166c4:	e7f3      	b.n	81166ae <__kernel_rem_pio2+0x356>
 81166c6:	a90c      	add	r1, sp, #48	@ 0x30
 81166c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 81166cc:	3b01      	subs	r3, #1
 81166ce:	430a      	orrs	r2, r1
 81166d0:	e787      	b.n	81165e2 <__kernel_rem_pio2+0x28a>
 81166d2:	3401      	adds	r4, #1
 81166d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 81166d8:	2a00      	cmp	r2, #0
 81166da:	d0fa      	beq.n	81166d2 <__kernel_rem_pio2+0x37a>
 81166dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 81166de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 81166e2:	eb0d 0503 	add.w	r5, sp, r3
 81166e6:	9b06      	ldr	r3, [sp, #24]
 81166e8:	aa20      	add	r2, sp, #128	@ 0x80
 81166ea:	4443      	add	r3, r8
 81166ec:	f108 0701 	add.w	r7, r8, #1
 81166f0:	3d98      	subs	r5, #152	@ 0x98
 81166f2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 81166f6:	4444      	add	r4, r8
 81166f8:	42bc      	cmp	r4, r7
 81166fa:	da04      	bge.n	8116706 <__kernel_rem_pio2+0x3ae>
 81166fc:	46a0      	mov	r8, r4
 81166fe:	e6a2      	b.n	8116446 <__kernel_rem_pio2+0xee>
 8116700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8116702:	2401      	movs	r4, #1
 8116704:	e7e6      	b.n	81166d4 <__kernel_rem_pio2+0x37c>
 8116706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8116708:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 811670c:	f7e9 ff92 	bl	8100634 <__aeabi_i2d>
 8116710:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 81169d8 <__kernel_rem_pio2+0x680>
 8116714:	e8e6 0102 	strd	r0, r1, [r6], #8
 8116718:	ed8d 7b02 	vstr	d7, [sp, #8]
 811671c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8116720:	46b2      	mov	sl, r6
 8116722:	f04f 0800 	mov.w	r8, #0
 8116726:	9b05      	ldr	r3, [sp, #20]
 8116728:	4598      	cmp	r8, r3
 811672a:	dd05      	ble.n	8116738 <__kernel_rem_pio2+0x3e0>
 811672c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8116730:	3701      	adds	r7, #1
 8116732:	eca5 7b02 	vstmia	r5!, {d7}
 8116736:	e7df      	b.n	81166f8 <__kernel_rem_pio2+0x3a0>
 8116738:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 811673c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8116740:	f7e9 ffe2 	bl	8100708 <__aeabi_dmul>
 8116744:	4602      	mov	r2, r0
 8116746:	460b      	mov	r3, r1
 8116748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 811674c:	f7e9 fe26 	bl	810039c <__adddf3>
 8116750:	f108 0801 	add.w	r8, r8, #1
 8116754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8116758:	e7e5      	b.n	8116726 <__kernel_rem_pio2+0x3ce>
 811675a:	f1cb 0000 	rsb	r0, fp, #0
 811675e:	ec47 6b10 	vmov	d0, r6, r7
 8116762:	f000 f951 	bl	8116a08 <scalbn>
 8116766:	ec55 4b10 	vmov	r4, r5, d0
 811676a:	4b9d      	ldr	r3, [pc, #628]	@ (81169e0 <__kernel_rem_pio2+0x688>)
 811676c:	2200      	movs	r2, #0
 811676e:	4620      	mov	r0, r4
 8116770:	4629      	mov	r1, r5
 8116772:	f7ea fa4f 	bl	8100c14 <__aeabi_dcmpge>
 8116776:	b300      	cbz	r0, 81167ba <__kernel_rem_pio2+0x462>
 8116778:	4b9a      	ldr	r3, [pc, #616]	@ (81169e4 <__kernel_rem_pio2+0x68c>)
 811677a:	2200      	movs	r2, #0
 811677c:	4620      	mov	r0, r4
 811677e:	4629      	mov	r1, r5
 8116780:	f7e9 ffc2 	bl	8100708 <__aeabi_dmul>
 8116784:	f7ea fa70 	bl	8100c68 <__aeabi_d2iz>
 8116788:	4606      	mov	r6, r0
 811678a:	f7e9 ff53 	bl	8100634 <__aeabi_i2d>
 811678e:	4b94      	ldr	r3, [pc, #592]	@ (81169e0 <__kernel_rem_pio2+0x688>)
 8116790:	2200      	movs	r2, #0
 8116792:	f7e9 ffb9 	bl	8100708 <__aeabi_dmul>
 8116796:	460b      	mov	r3, r1
 8116798:	4602      	mov	r2, r0
 811679a:	4629      	mov	r1, r5
 811679c:	4620      	mov	r0, r4
 811679e:	f7e9 fdfb 	bl	8100398 <__aeabi_dsub>
 81167a2:	f7ea fa61 	bl	8100c68 <__aeabi_d2iz>
 81167a6:	ab0c      	add	r3, sp, #48	@ 0x30
 81167a8:	f10b 0b18 	add.w	fp, fp, #24
 81167ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 81167b0:	f108 0801 	add.w	r8, r8, #1
 81167b4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 81167b8:	e722      	b.n	8116600 <__kernel_rem_pio2+0x2a8>
 81167ba:	4620      	mov	r0, r4
 81167bc:	4629      	mov	r1, r5
 81167be:	f7ea fa53 	bl	8100c68 <__aeabi_d2iz>
 81167c2:	ab0c      	add	r3, sp, #48	@ 0x30
 81167c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 81167c8:	e71a      	b.n	8116600 <__kernel_rem_pio2+0x2a8>
 81167ca:	ab0c      	add	r3, sp, #48	@ 0x30
 81167cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 81167d0:	f7e9 ff30 	bl	8100634 <__aeabi_i2d>
 81167d4:	4622      	mov	r2, r4
 81167d6:	462b      	mov	r3, r5
 81167d8:	f7e9 ff96 	bl	8100708 <__aeabi_dmul>
 81167dc:	4652      	mov	r2, sl
 81167de:	e967 0102 	strd	r0, r1, [r7, #-8]!
 81167e2:	465b      	mov	r3, fp
 81167e4:	4620      	mov	r0, r4
 81167e6:	4629      	mov	r1, r5
 81167e8:	f7e9 ff8e 	bl	8100708 <__aeabi_dmul>
 81167ec:	3e01      	subs	r6, #1
 81167ee:	4604      	mov	r4, r0
 81167f0:	460d      	mov	r5, r1
 81167f2:	e718      	b.n	8116626 <__kernel_rem_pio2+0x2ce>
 81167f4:	9906      	ldr	r1, [sp, #24]
 81167f6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 81167fa:	9106      	str	r1, [sp, #24]
 81167fc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8116800:	f7e9 ff82 	bl	8100708 <__aeabi_dmul>
 8116804:	4602      	mov	r2, r0
 8116806:	460b      	mov	r3, r1
 8116808:	4650      	mov	r0, sl
 811680a:	4659      	mov	r1, fp
 811680c:	f7e9 fdc6 	bl	810039c <__adddf3>
 8116810:	3601      	adds	r6, #1
 8116812:	4682      	mov	sl, r0
 8116814:	468b      	mov	fp, r1
 8116816:	9b00      	ldr	r3, [sp, #0]
 8116818:	429e      	cmp	r6, r3
 811681a:	dc01      	bgt.n	8116820 <__kernel_rem_pio2+0x4c8>
 811681c:	42b5      	cmp	r5, r6
 811681e:	dae9      	bge.n	81167f4 <__kernel_rem_pio2+0x49c>
 8116820:	ab48      	add	r3, sp, #288	@ 0x120
 8116822:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8116826:	e9c5 ab00 	strd	sl, fp, [r5]
 811682a:	3c01      	subs	r4, #1
 811682c:	e6ff      	b.n	811662e <__kernel_rem_pio2+0x2d6>
 811682e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8116830:	2b02      	cmp	r3, #2
 8116832:	dc0b      	bgt.n	811684c <__kernel_rem_pio2+0x4f4>
 8116834:	2b00      	cmp	r3, #0
 8116836:	dc39      	bgt.n	81168ac <__kernel_rem_pio2+0x554>
 8116838:	d05d      	beq.n	81168f6 <__kernel_rem_pio2+0x59e>
 811683a:	9b02      	ldr	r3, [sp, #8]
 811683c:	f003 0007 	and.w	r0, r3, #7
 8116840:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8116844:	ecbd 8b02 	vpop	{d8}
 8116848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811684c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 811684e:	2b03      	cmp	r3, #3
 8116850:	d1f3      	bne.n	811683a <__kernel_rem_pio2+0x4e2>
 8116852:	9b05      	ldr	r3, [sp, #20]
 8116854:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8116858:	eb0d 0403 	add.w	r4, sp, r3
 811685c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8116860:	4625      	mov	r5, r4
 8116862:	46c2      	mov	sl, r8
 8116864:	f1ba 0f00 	cmp.w	sl, #0
 8116868:	f1a5 0508 	sub.w	r5, r5, #8
 811686c:	dc6b      	bgt.n	8116946 <__kernel_rem_pio2+0x5ee>
 811686e:	4645      	mov	r5, r8
 8116870:	2d01      	cmp	r5, #1
 8116872:	f1a4 0408 	sub.w	r4, r4, #8
 8116876:	f300 8087 	bgt.w	8116988 <__kernel_rem_pio2+0x630>
 811687a:	9c05      	ldr	r4, [sp, #20]
 811687c:	ab48      	add	r3, sp, #288	@ 0x120
 811687e:	441c      	add	r4, r3
 8116880:	2000      	movs	r0, #0
 8116882:	2100      	movs	r1, #0
 8116884:	f1b8 0f01 	cmp.w	r8, #1
 8116888:	f300 809c 	bgt.w	81169c4 <__kernel_rem_pio2+0x66c>
 811688c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8116890:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8116894:	f1b9 0f00 	cmp.w	r9, #0
 8116898:	f040 80a6 	bne.w	81169e8 <__kernel_rem_pio2+0x690>
 811689c:	9b04      	ldr	r3, [sp, #16]
 811689e:	e9c3 7800 	strd	r7, r8, [r3]
 81168a2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 81168a6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 81168aa:	e7c6      	b.n	811683a <__kernel_rem_pio2+0x4e2>
 81168ac:	9d05      	ldr	r5, [sp, #20]
 81168ae:	ab48      	add	r3, sp, #288	@ 0x120
 81168b0:	441d      	add	r5, r3
 81168b2:	4644      	mov	r4, r8
 81168b4:	2000      	movs	r0, #0
 81168b6:	2100      	movs	r1, #0
 81168b8:	2c00      	cmp	r4, #0
 81168ba:	da35      	bge.n	8116928 <__kernel_rem_pio2+0x5d0>
 81168bc:	f1b9 0f00 	cmp.w	r9, #0
 81168c0:	d038      	beq.n	8116934 <__kernel_rem_pio2+0x5dc>
 81168c2:	4602      	mov	r2, r0
 81168c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 81168c8:	9c04      	ldr	r4, [sp, #16]
 81168ca:	e9c4 2300 	strd	r2, r3, [r4]
 81168ce:	4602      	mov	r2, r0
 81168d0:	460b      	mov	r3, r1
 81168d2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 81168d6:	f7e9 fd5f 	bl	8100398 <__aeabi_dsub>
 81168da:	ad4a      	add	r5, sp, #296	@ 0x128
 81168dc:	2401      	movs	r4, #1
 81168de:	45a0      	cmp	r8, r4
 81168e0:	da2b      	bge.n	811693a <__kernel_rem_pio2+0x5e2>
 81168e2:	f1b9 0f00 	cmp.w	r9, #0
 81168e6:	d002      	beq.n	81168ee <__kernel_rem_pio2+0x596>
 81168e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 81168ec:	4619      	mov	r1, r3
 81168ee:	9b04      	ldr	r3, [sp, #16]
 81168f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 81168f4:	e7a1      	b.n	811683a <__kernel_rem_pio2+0x4e2>
 81168f6:	9c05      	ldr	r4, [sp, #20]
 81168f8:	ab48      	add	r3, sp, #288	@ 0x120
 81168fa:	441c      	add	r4, r3
 81168fc:	2000      	movs	r0, #0
 81168fe:	2100      	movs	r1, #0
 8116900:	f1b8 0f00 	cmp.w	r8, #0
 8116904:	da09      	bge.n	811691a <__kernel_rem_pio2+0x5c2>
 8116906:	f1b9 0f00 	cmp.w	r9, #0
 811690a:	d002      	beq.n	8116912 <__kernel_rem_pio2+0x5ba>
 811690c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8116910:	4619      	mov	r1, r3
 8116912:	9b04      	ldr	r3, [sp, #16]
 8116914:	e9c3 0100 	strd	r0, r1, [r3]
 8116918:	e78f      	b.n	811683a <__kernel_rem_pio2+0x4e2>
 811691a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 811691e:	f7e9 fd3d 	bl	810039c <__adddf3>
 8116922:	f108 38ff 	add.w	r8, r8, #4294967295
 8116926:	e7eb      	b.n	8116900 <__kernel_rem_pio2+0x5a8>
 8116928:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 811692c:	f7e9 fd36 	bl	810039c <__adddf3>
 8116930:	3c01      	subs	r4, #1
 8116932:	e7c1      	b.n	81168b8 <__kernel_rem_pio2+0x560>
 8116934:	4602      	mov	r2, r0
 8116936:	460b      	mov	r3, r1
 8116938:	e7c6      	b.n	81168c8 <__kernel_rem_pio2+0x570>
 811693a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 811693e:	f7e9 fd2d 	bl	810039c <__adddf3>
 8116942:	3401      	adds	r4, #1
 8116944:	e7cb      	b.n	81168de <__kernel_rem_pio2+0x586>
 8116946:	ed95 7b00 	vldr	d7, [r5]
 811694a:	ed8d 7b00 	vstr	d7, [sp]
 811694e:	ed95 7b02 	vldr	d7, [r5, #8]
 8116952:	e9dd 0100 	ldrd	r0, r1, [sp]
 8116956:	ec53 2b17 	vmov	r2, r3, d7
 811695a:	ed8d 7b06 	vstr	d7, [sp, #24]
 811695e:	f7e9 fd1d 	bl	810039c <__adddf3>
 8116962:	4602      	mov	r2, r0
 8116964:	460b      	mov	r3, r1
 8116966:	4606      	mov	r6, r0
 8116968:	460f      	mov	r7, r1
 811696a:	e9dd 0100 	ldrd	r0, r1, [sp]
 811696e:	f7e9 fd13 	bl	8100398 <__aeabi_dsub>
 8116972:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8116976:	f7e9 fd11 	bl	810039c <__adddf3>
 811697a:	f10a 3aff 	add.w	sl, sl, #4294967295
 811697e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8116982:	e9c5 6700 	strd	r6, r7, [r5]
 8116986:	e76d      	b.n	8116864 <__kernel_rem_pio2+0x50c>
 8116988:	ed94 7b00 	vldr	d7, [r4]
 811698c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8116990:	ec51 0b17 	vmov	r0, r1, d7
 8116994:	4652      	mov	r2, sl
 8116996:	465b      	mov	r3, fp
 8116998:	ed8d 7b00 	vstr	d7, [sp]
 811699c:	f7e9 fcfe 	bl	810039c <__adddf3>
 81169a0:	4602      	mov	r2, r0
 81169a2:	460b      	mov	r3, r1
 81169a4:	4606      	mov	r6, r0
 81169a6:	460f      	mov	r7, r1
 81169a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 81169ac:	f7e9 fcf4 	bl	8100398 <__aeabi_dsub>
 81169b0:	4652      	mov	r2, sl
 81169b2:	465b      	mov	r3, fp
 81169b4:	f7e9 fcf2 	bl	810039c <__adddf3>
 81169b8:	3d01      	subs	r5, #1
 81169ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 81169be:	e9c4 6700 	strd	r6, r7, [r4]
 81169c2:	e755      	b.n	8116870 <__kernel_rem_pio2+0x518>
 81169c4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 81169c8:	f7e9 fce8 	bl	810039c <__adddf3>
 81169cc:	f108 38ff 	add.w	r8, r8, #4294967295
 81169d0:	e758      	b.n	8116884 <__kernel_rem_pio2+0x52c>
 81169d2:	bf00      	nop
 81169d4:	f3af 8000 	nop.w
	...
 81169e0:	41700000 	.word	0x41700000
 81169e4:	3e700000 	.word	0x3e700000
 81169e8:	9b04      	ldr	r3, [sp, #16]
 81169ea:	9a04      	ldr	r2, [sp, #16]
 81169ec:	601f      	str	r7, [r3, #0]
 81169ee:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 81169f2:	605c      	str	r4, [r3, #4]
 81169f4:	609d      	str	r5, [r3, #8]
 81169f6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 81169fa:	60d3      	str	r3, [r2, #12]
 81169fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8116a00:	6110      	str	r0, [r2, #16]
 8116a02:	6153      	str	r3, [r2, #20]
 8116a04:	e719      	b.n	811683a <__kernel_rem_pio2+0x4e2>
 8116a06:	bf00      	nop

08116a08 <scalbn>:
 8116a08:	b570      	push	{r4, r5, r6, lr}
 8116a0a:	ec55 4b10 	vmov	r4, r5, d0
 8116a0e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8116a12:	4606      	mov	r6, r0
 8116a14:	462b      	mov	r3, r5
 8116a16:	b991      	cbnz	r1, 8116a3e <scalbn+0x36>
 8116a18:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8116a1c:	4323      	orrs	r3, r4
 8116a1e:	d03d      	beq.n	8116a9c <scalbn+0x94>
 8116a20:	4b35      	ldr	r3, [pc, #212]	@ (8116af8 <scalbn+0xf0>)
 8116a22:	4620      	mov	r0, r4
 8116a24:	4629      	mov	r1, r5
 8116a26:	2200      	movs	r2, #0
 8116a28:	f7e9 fe6e 	bl	8100708 <__aeabi_dmul>
 8116a2c:	4b33      	ldr	r3, [pc, #204]	@ (8116afc <scalbn+0xf4>)
 8116a2e:	429e      	cmp	r6, r3
 8116a30:	4604      	mov	r4, r0
 8116a32:	460d      	mov	r5, r1
 8116a34:	da0f      	bge.n	8116a56 <scalbn+0x4e>
 8116a36:	a328      	add	r3, pc, #160	@ (adr r3, 8116ad8 <scalbn+0xd0>)
 8116a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116a3c:	e01e      	b.n	8116a7c <scalbn+0x74>
 8116a3e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8116a42:	4291      	cmp	r1, r2
 8116a44:	d10b      	bne.n	8116a5e <scalbn+0x56>
 8116a46:	4622      	mov	r2, r4
 8116a48:	4620      	mov	r0, r4
 8116a4a:	4629      	mov	r1, r5
 8116a4c:	f7e9 fca6 	bl	810039c <__adddf3>
 8116a50:	4604      	mov	r4, r0
 8116a52:	460d      	mov	r5, r1
 8116a54:	e022      	b.n	8116a9c <scalbn+0x94>
 8116a56:	460b      	mov	r3, r1
 8116a58:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8116a5c:	3936      	subs	r1, #54	@ 0x36
 8116a5e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8116a62:	4296      	cmp	r6, r2
 8116a64:	dd0d      	ble.n	8116a82 <scalbn+0x7a>
 8116a66:	2d00      	cmp	r5, #0
 8116a68:	a11d      	add	r1, pc, #116	@ (adr r1, 8116ae0 <scalbn+0xd8>)
 8116a6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8116a6e:	da02      	bge.n	8116a76 <scalbn+0x6e>
 8116a70:	a11d      	add	r1, pc, #116	@ (adr r1, 8116ae8 <scalbn+0xe0>)
 8116a72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8116a76:	a31a      	add	r3, pc, #104	@ (adr r3, 8116ae0 <scalbn+0xd8>)
 8116a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116a7c:	f7e9 fe44 	bl	8100708 <__aeabi_dmul>
 8116a80:	e7e6      	b.n	8116a50 <scalbn+0x48>
 8116a82:	1872      	adds	r2, r6, r1
 8116a84:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8116a88:	428a      	cmp	r2, r1
 8116a8a:	dcec      	bgt.n	8116a66 <scalbn+0x5e>
 8116a8c:	2a00      	cmp	r2, #0
 8116a8e:	dd08      	ble.n	8116aa2 <scalbn+0x9a>
 8116a90:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8116a94:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8116a98:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8116a9c:	ec45 4b10 	vmov	d0, r4, r5
 8116aa0:	bd70      	pop	{r4, r5, r6, pc}
 8116aa2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8116aa6:	da08      	bge.n	8116aba <scalbn+0xb2>
 8116aa8:	2d00      	cmp	r5, #0
 8116aaa:	a10b      	add	r1, pc, #44	@ (adr r1, 8116ad8 <scalbn+0xd0>)
 8116aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8116ab0:	dac1      	bge.n	8116a36 <scalbn+0x2e>
 8116ab2:	a10f      	add	r1, pc, #60	@ (adr r1, 8116af0 <scalbn+0xe8>)
 8116ab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8116ab8:	e7bd      	b.n	8116a36 <scalbn+0x2e>
 8116aba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8116abe:	3236      	adds	r2, #54	@ 0x36
 8116ac0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8116ac4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8116ac8:	4620      	mov	r0, r4
 8116aca:	4b0d      	ldr	r3, [pc, #52]	@ (8116b00 <scalbn+0xf8>)
 8116acc:	4629      	mov	r1, r5
 8116ace:	2200      	movs	r2, #0
 8116ad0:	e7d4      	b.n	8116a7c <scalbn+0x74>
 8116ad2:	bf00      	nop
 8116ad4:	f3af 8000 	nop.w
 8116ad8:	c2f8f359 	.word	0xc2f8f359
 8116adc:	01a56e1f 	.word	0x01a56e1f
 8116ae0:	8800759c 	.word	0x8800759c
 8116ae4:	7e37e43c 	.word	0x7e37e43c
 8116ae8:	8800759c 	.word	0x8800759c
 8116aec:	fe37e43c 	.word	0xfe37e43c
 8116af0:	c2f8f359 	.word	0xc2f8f359
 8116af4:	81a56e1f 	.word	0x81a56e1f
 8116af8:	43500000 	.word	0x43500000
 8116afc:	ffff3cb0 	.word	0xffff3cb0
 8116b00:	3c900000 	.word	0x3c900000
 8116b04:	00000000 	.word	0x00000000

08116b08 <floor>:
 8116b08:	ec51 0b10 	vmov	r0, r1, d0
 8116b0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8116b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8116b14:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8116b18:	2e13      	cmp	r6, #19
 8116b1a:	460c      	mov	r4, r1
 8116b1c:	4605      	mov	r5, r0
 8116b1e:	4680      	mov	r8, r0
 8116b20:	dc34      	bgt.n	8116b8c <floor+0x84>
 8116b22:	2e00      	cmp	r6, #0
 8116b24:	da17      	bge.n	8116b56 <floor+0x4e>
 8116b26:	a332      	add	r3, pc, #200	@ (adr r3, 8116bf0 <floor+0xe8>)
 8116b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116b2c:	f7e9 fc36 	bl	810039c <__adddf3>
 8116b30:	2200      	movs	r2, #0
 8116b32:	2300      	movs	r3, #0
 8116b34:	f7ea f878 	bl	8100c28 <__aeabi_dcmpgt>
 8116b38:	b150      	cbz	r0, 8116b50 <floor+0x48>
 8116b3a:	2c00      	cmp	r4, #0
 8116b3c:	da55      	bge.n	8116bea <floor+0xe2>
 8116b3e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8116b42:	432c      	orrs	r4, r5
 8116b44:	2500      	movs	r5, #0
 8116b46:	42ac      	cmp	r4, r5
 8116b48:	4c2b      	ldr	r4, [pc, #172]	@ (8116bf8 <floor+0xf0>)
 8116b4a:	bf08      	it	eq
 8116b4c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8116b50:	4621      	mov	r1, r4
 8116b52:	4628      	mov	r0, r5
 8116b54:	e023      	b.n	8116b9e <floor+0x96>
 8116b56:	4f29      	ldr	r7, [pc, #164]	@ (8116bfc <floor+0xf4>)
 8116b58:	4137      	asrs	r7, r6
 8116b5a:	ea01 0307 	and.w	r3, r1, r7
 8116b5e:	4303      	orrs	r3, r0
 8116b60:	d01d      	beq.n	8116b9e <floor+0x96>
 8116b62:	a323      	add	r3, pc, #140	@ (adr r3, 8116bf0 <floor+0xe8>)
 8116b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116b68:	f7e9 fc18 	bl	810039c <__adddf3>
 8116b6c:	2200      	movs	r2, #0
 8116b6e:	2300      	movs	r3, #0
 8116b70:	f7ea f85a 	bl	8100c28 <__aeabi_dcmpgt>
 8116b74:	2800      	cmp	r0, #0
 8116b76:	d0eb      	beq.n	8116b50 <floor+0x48>
 8116b78:	2c00      	cmp	r4, #0
 8116b7a:	bfbe      	ittt	lt
 8116b7c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8116b80:	4133      	asrlt	r3, r6
 8116b82:	18e4      	addlt	r4, r4, r3
 8116b84:	ea24 0407 	bic.w	r4, r4, r7
 8116b88:	2500      	movs	r5, #0
 8116b8a:	e7e1      	b.n	8116b50 <floor+0x48>
 8116b8c:	2e33      	cmp	r6, #51	@ 0x33
 8116b8e:	dd0a      	ble.n	8116ba6 <floor+0x9e>
 8116b90:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8116b94:	d103      	bne.n	8116b9e <floor+0x96>
 8116b96:	4602      	mov	r2, r0
 8116b98:	460b      	mov	r3, r1
 8116b9a:	f7e9 fbff 	bl	810039c <__adddf3>
 8116b9e:	ec41 0b10 	vmov	d0, r0, r1
 8116ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8116ba6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8116baa:	f04f 37ff 	mov.w	r7, #4294967295
 8116bae:	40df      	lsrs	r7, r3
 8116bb0:	4207      	tst	r7, r0
 8116bb2:	d0f4      	beq.n	8116b9e <floor+0x96>
 8116bb4:	a30e      	add	r3, pc, #56	@ (adr r3, 8116bf0 <floor+0xe8>)
 8116bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116bba:	f7e9 fbef 	bl	810039c <__adddf3>
 8116bbe:	2200      	movs	r2, #0
 8116bc0:	2300      	movs	r3, #0
 8116bc2:	f7ea f831 	bl	8100c28 <__aeabi_dcmpgt>
 8116bc6:	2800      	cmp	r0, #0
 8116bc8:	d0c2      	beq.n	8116b50 <floor+0x48>
 8116bca:	2c00      	cmp	r4, #0
 8116bcc:	da0a      	bge.n	8116be4 <floor+0xdc>
 8116bce:	2e14      	cmp	r6, #20
 8116bd0:	d101      	bne.n	8116bd6 <floor+0xce>
 8116bd2:	3401      	adds	r4, #1
 8116bd4:	e006      	b.n	8116be4 <floor+0xdc>
 8116bd6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8116bda:	2301      	movs	r3, #1
 8116bdc:	40b3      	lsls	r3, r6
 8116bde:	441d      	add	r5, r3
 8116be0:	4545      	cmp	r5, r8
 8116be2:	d3f6      	bcc.n	8116bd2 <floor+0xca>
 8116be4:	ea25 0507 	bic.w	r5, r5, r7
 8116be8:	e7b2      	b.n	8116b50 <floor+0x48>
 8116bea:	2500      	movs	r5, #0
 8116bec:	462c      	mov	r4, r5
 8116bee:	e7af      	b.n	8116b50 <floor+0x48>
 8116bf0:	8800759c 	.word	0x8800759c
 8116bf4:	7e37e43c 	.word	0x7e37e43c
 8116bf8:	bff00000 	.word	0xbff00000
 8116bfc:	000fffff 	.word	0x000fffff

08116c00 <_init>:
 8116c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8116c02:	bf00      	nop
 8116c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8116c06:	bc08      	pop	{r3}
 8116c08:	469e      	mov	lr, r3
 8116c0a:	4770      	bx	lr

08116c0c <_fini>:
 8116c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8116c0e:	bf00      	nop
 8116c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8116c12:	bc08      	pop	{r3}
 8116c14:	469e      	mov	lr, r3
 8116c16:	4770      	bx	lr
