
BICICLETTA_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000114d0  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08111770  08111770  00012770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08111c5c  08111c5c  00012c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08111c64  08111c64  00012c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08111c68  08111c68  00012c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000268  10000000  08111c6c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005d8  10000268  08111ed4  00013268  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000840  08111ed4  00013840  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00013268  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028a2d  00000000  00000000  00013298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004b05  00000000  00000000  0003bcc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ca0  00000000  00000000  000407d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001596  00000000  00000000  00042470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f569  00000000  00000000  00043a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000250e7  00000000  00000000  00082f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a2cd9  00000000  00000000  000a8056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  0024ad2f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008f84  00000000  00000000  0024ade8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  00253d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00002407  00000000  00000000  00253dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000080  00000000  00000000  002561dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000268 	.word	0x10000268
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08111758 	.word	0x08111758

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000026c 	.word	0x1000026c
 81002dc:	08111758 	.word	0x08111758

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a0 	b.w	81010f0 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	@ (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	460c      	mov	r4, r1
 8100e3c:	2b00      	cmp	r3, #0
 8100e3e:	d14e      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e40:	4694      	mov	ip, r2
 8100e42:	458c      	cmp	ip, r1
 8100e44:	4686      	mov	lr, r0
 8100e46:	fab2 f282 	clz	r2, r2
 8100e4a:	d962      	bls.n	8100f12 <__udivmoddi4+0xde>
 8100e4c:	b14a      	cbz	r2, 8100e62 <__udivmoddi4+0x2e>
 8100e4e:	f1c2 0320 	rsb	r3, r2, #32
 8100e52:	4091      	lsls	r1, r2
 8100e54:	fa20 f303 	lsr.w	r3, r0, r3
 8100e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5c:	4319      	orrs	r1, r3
 8100e5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8100e62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100e66:	fa1f f68c 	uxth.w	r6, ip
 8100e6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8100e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100e72:	fb07 1114 	mls	r1, r7, r4, r1
 8100e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e7a:	fb04 f106 	mul.w	r1, r4, r6
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f104 30ff 	add.w	r0, r4, #4294967295
 8100e8a:	f080 8112 	bcs.w	81010b2 <__udivmoddi4+0x27e>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 810f 	bls.w	81010b2 <__udivmoddi4+0x27e>
 8100e94:	3c02      	subs	r4, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a59      	subs	r1, r3, r1
 8100e9a:	fa1f f38e 	uxth.w	r3, lr
 8100e9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8100ea2:	fb07 1110 	mls	r1, r7, r0, r1
 8100ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100eaa:	fb00 f606 	mul.w	r6, r0, r6
 8100eae:	429e      	cmp	r6, r3
 8100eb0:	d90a      	bls.n	8100ec8 <__udivmoddi4+0x94>
 8100eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8100eb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8100eba:	f080 80fc 	bcs.w	81010b6 <__udivmoddi4+0x282>
 8100ebe:	429e      	cmp	r6, r3
 8100ec0:	f240 80f9 	bls.w	81010b6 <__udivmoddi4+0x282>
 8100ec4:	4463      	add	r3, ip
 8100ec6:	3802      	subs	r0, #2
 8100ec8:	1b9b      	subs	r3, r3, r6
 8100eca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100ece:	2100      	movs	r1, #0
 8100ed0:	b11d      	cbz	r5, 8100eda <__udivmoddi4+0xa6>
 8100ed2:	40d3      	lsrs	r3, r2
 8100ed4:	2200      	movs	r2, #0
 8100ed6:	e9c5 3200 	strd	r3, r2, [r5]
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d905      	bls.n	8100eee <__udivmoddi4+0xba>
 8100ee2:	b10d      	cbz	r5, 8100ee8 <__udivmoddi4+0xb4>
 8100ee4:	e9c5 0100 	strd	r0, r1, [r5]
 8100ee8:	2100      	movs	r1, #0
 8100eea:	4608      	mov	r0, r1
 8100eec:	e7f5      	b.n	8100eda <__udivmoddi4+0xa6>
 8100eee:	fab3 f183 	clz	r1, r3
 8100ef2:	2900      	cmp	r1, #0
 8100ef4:	d146      	bne.n	8100f84 <__udivmoddi4+0x150>
 8100ef6:	42a3      	cmp	r3, r4
 8100ef8:	d302      	bcc.n	8100f00 <__udivmoddi4+0xcc>
 8100efa:	4290      	cmp	r0, r2
 8100efc:	f0c0 80f0 	bcc.w	81010e0 <__udivmoddi4+0x2ac>
 8100f00:	1a86      	subs	r6, r0, r2
 8100f02:	eb64 0303 	sbc.w	r3, r4, r3
 8100f06:	2001      	movs	r0, #1
 8100f08:	2d00      	cmp	r5, #0
 8100f0a:	d0e6      	beq.n	8100eda <__udivmoddi4+0xa6>
 8100f0c:	e9c5 6300 	strd	r6, r3, [r5]
 8100f10:	e7e3      	b.n	8100eda <__udivmoddi4+0xa6>
 8100f12:	2a00      	cmp	r2, #0
 8100f14:	f040 8090 	bne.w	8101038 <__udivmoddi4+0x204>
 8100f18:	eba1 040c 	sub.w	r4, r1, ip
 8100f1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100f20:	fa1f f78c 	uxth.w	r7, ip
 8100f24:	2101      	movs	r1, #1
 8100f26:	fbb4 f6f8 	udiv	r6, r4, r8
 8100f2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100f2e:	fb08 4416 	mls	r4, r8, r6, r4
 8100f32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f36:	fb07 f006 	mul.w	r0, r7, r6
 8100f3a:	4298      	cmp	r0, r3
 8100f3c:	d908      	bls.n	8100f50 <__udivmoddi4+0x11c>
 8100f3e:	eb1c 0303 	adds.w	r3, ip, r3
 8100f42:	f106 34ff 	add.w	r4, r6, #4294967295
 8100f46:	d202      	bcs.n	8100f4e <__udivmoddi4+0x11a>
 8100f48:	4298      	cmp	r0, r3
 8100f4a:	f200 80cd 	bhi.w	81010e8 <__udivmoddi4+0x2b4>
 8100f4e:	4626      	mov	r6, r4
 8100f50:	1a1c      	subs	r4, r3, r0
 8100f52:	fa1f f38e 	uxth.w	r3, lr
 8100f56:	fbb4 f0f8 	udiv	r0, r4, r8
 8100f5a:	fb08 4410 	mls	r4, r8, r0, r4
 8100f5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f62:	fb00 f707 	mul.w	r7, r0, r7
 8100f66:	429f      	cmp	r7, r3
 8100f68:	d908      	bls.n	8100f7c <__udivmoddi4+0x148>
 8100f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8100f6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8100f72:	d202      	bcs.n	8100f7a <__udivmoddi4+0x146>
 8100f74:	429f      	cmp	r7, r3
 8100f76:	f200 80b0 	bhi.w	81010da <__udivmoddi4+0x2a6>
 8100f7a:	4620      	mov	r0, r4
 8100f7c:	1bdb      	subs	r3, r3, r7
 8100f7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100f82:	e7a5      	b.n	8100ed0 <__udivmoddi4+0x9c>
 8100f84:	f1c1 0620 	rsb	r6, r1, #32
 8100f88:	408b      	lsls	r3, r1
 8100f8a:	fa22 f706 	lsr.w	r7, r2, r6
 8100f8e:	431f      	orrs	r7, r3
 8100f90:	fa20 fc06 	lsr.w	ip, r0, r6
 8100f94:	fa04 f301 	lsl.w	r3, r4, r1
 8100f98:	ea43 030c 	orr.w	r3, r3, ip
 8100f9c:	40f4      	lsrs	r4, r6
 8100f9e:	fa00 f801 	lsl.w	r8, r0, r1
 8100fa2:	0c38      	lsrs	r0, r7, #16
 8100fa4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100fa8:	fbb4 fef0 	udiv	lr, r4, r0
 8100fac:	fa1f fc87 	uxth.w	ip, r7
 8100fb0:	fb00 441e 	mls	r4, r0, lr, r4
 8100fb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fb8:	fb0e f90c 	mul.w	r9, lr, ip
 8100fbc:	45a1      	cmp	r9, r4
 8100fbe:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc2:	d90a      	bls.n	8100fda <__udivmoddi4+0x1a6>
 8100fc4:	193c      	adds	r4, r7, r4
 8100fc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100fca:	f080 8084 	bcs.w	81010d6 <__udivmoddi4+0x2a2>
 8100fce:	45a1      	cmp	r9, r4
 8100fd0:	f240 8081 	bls.w	81010d6 <__udivmoddi4+0x2a2>
 8100fd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8100fd8:	443c      	add	r4, r7
 8100fda:	eba4 0409 	sub.w	r4, r4, r9
 8100fde:	fa1f f983 	uxth.w	r9, r3
 8100fe2:	fbb4 f3f0 	udiv	r3, r4, r0
 8100fe6:	fb00 4413 	mls	r4, r0, r3, r4
 8100fea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fee:	fb03 fc0c 	mul.w	ip, r3, ip
 8100ff2:	45a4      	cmp	ip, r4
 8100ff4:	d907      	bls.n	8101006 <__udivmoddi4+0x1d2>
 8100ff6:	193c      	adds	r4, r7, r4
 8100ff8:	f103 30ff 	add.w	r0, r3, #4294967295
 8100ffc:	d267      	bcs.n	81010ce <__udivmoddi4+0x29a>
 8100ffe:	45a4      	cmp	ip, r4
 8101000:	d965      	bls.n	81010ce <__udivmoddi4+0x29a>
 8101002:	3b02      	subs	r3, #2
 8101004:	443c      	add	r4, r7
 8101006:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 810100a:	fba0 9302 	umull	r9, r3, r0, r2
 810100e:	eba4 040c 	sub.w	r4, r4, ip
 8101012:	429c      	cmp	r4, r3
 8101014:	46ce      	mov	lr, r9
 8101016:	469c      	mov	ip, r3
 8101018:	d351      	bcc.n	81010be <__udivmoddi4+0x28a>
 810101a:	d04e      	beq.n	81010ba <__udivmoddi4+0x286>
 810101c:	b155      	cbz	r5, 8101034 <__udivmoddi4+0x200>
 810101e:	ebb8 030e 	subs.w	r3, r8, lr
 8101022:	eb64 040c 	sbc.w	r4, r4, ip
 8101026:	fa04 f606 	lsl.w	r6, r4, r6
 810102a:	40cb      	lsrs	r3, r1
 810102c:	431e      	orrs	r6, r3
 810102e:	40cc      	lsrs	r4, r1
 8101030:	e9c5 6400 	strd	r6, r4, [r5]
 8101034:	2100      	movs	r1, #0
 8101036:	e750      	b.n	8100eda <__udivmoddi4+0xa6>
 8101038:	f1c2 0320 	rsb	r3, r2, #32
 810103c:	fa20 f103 	lsr.w	r1, r0, r3
 8101040:	fa0c fc02 	lsl.w	ip, ip, r2
 8101044:	fa24 f303 	lsr.w	r3, r4, r3
 8101048:	4094      	lsls	r4, r2
 810104a:	430c      	orrs	r4, r1
 810104c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8101050:	fa00 fe02 	lsl.w	lr, r0, r2
 8101054:	fa1f f78c 	uxth.w	r7, ip
 8101058:	fbb3 f0f8 	udiv	r0, r3, r8
 810105c:	fb08 3110 	mls	r1, r8, r0, r3
 8101060:	0c23      	lsrs	r3, r4, #16
 8101062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8101066:	fb00 f107 	mul.w	r1, r0, r7
 810106a:	4299      	cmp	r1, r3
 810106c:	d908      	bls.n	8101080 <__udivmoddi4+0x24c>
 810106e:	eb1c 0303 	adds.w	r3, ip, r3
 8101072:	f100 36ff 	add.w	r6, r0, #4294967295
 8101076:	d22c      	bcs.n	81010d2 <__udivmoddi4+0x29e>
 8101078:	4299      	cmp	r1, r3
 810107a:	d92a      	bls.n	81010d2 <__udivmoddi4+0x29e>
 810107c:	3802      	subs	r0, #2
 810107e:	4463      	add	r3, ip
 8101080:	1a5b      	subs	r3, r3, r1
 8101082:	b2a4      	uxth	r4, r4
 8101084:	fbb3 f1f8 	udiv	r1, r3, r8
 8101088:	fb08 3311 	mls	r3, r8, r1, r3
 810108c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8101090:	fb01 f307 	mul.w	r3, r1, r7
 8101094:	42a3      	cmp	r3, r4
 8101096:	d908      	bls.n	81010aa <__udivmoddi4+0x276>
 8101098:	eb1c 0404 	adds.w	r4, ip, r4
 810109c:	f101 36ff 	add.w	r6, r1, #4294967295
 81010a0:	d213      	bcs.n	81010ca <__udivmoddi4+0x296>
 81010a2:	42a3      	cmp	r3, r4
 81010a4:	d911      	bls.n	81010ca <__udivmoddi4+0x296>
 81010a6:	3902      	subs	r1, #2
 81010a8:	4464      	add	r4, ip
 81010aa:	1ae4      	subs	r4, r4, r3
 81010ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 81010b0:	e739      	b.n	8100f26 <__udivmoddi4+0xf2>
 81010b2:	4604      	mov	r4, r0
 81010b4:	e6f0      	b.n	8100e98 <__udivmoddi4+0x64>
 81010b6:	4608      	mov	r0, r1
 81010b8:	e706      	b.n	8100ec8 <__udivmoddi4+0x94>
 81010ba:	45c8      	cmp	r8, r9
 81010bc:	d2ae      	bcs.n	810101c <__udivmoddi4+0x1e8>
 81010be:	ebb9 0e02 	subs.w	lr, r9, r2
 81010c2:	eb63 0c07 	sbc.w	ip, r3, r7
 81010c6:	3801      	subs	r0, #1
 81010c8:	e7a8      	b.n	810101c <__udivmoddi4+0x1e8>
 81010ca:	4631      	mov	r1, r6
 81010cc:	e7ed      	b.n	81010aa <__udivmoddi4+0x276>
 81010ce:	4603      	mov	r3, r0
 81010d0:	e799      	b.n	8101006 <__udivmoddi4+0x1d2>
 81010d2:	4630      	mov	r0, r6
 81010d4:	e7d4      	b.n	8101080 <__udivmoddi4+0x24c>
 81010d6:	46d6      	mov	lr, sl
 81010d8:	e77f      	b.n	8100fda <__udivmoddi4+0x1a6>
 81010da:	4463      	add	r3, ip
 81010dc:	3802      	subs	r0, #2
 81010de:	e74d      	b.n	8100f7c <__udivmoddi4+0x148>
 81010e0:	4606      	mov	r6, r0
 81010e2:	4623      	mov	r3, r4
 81010e4:	4608      	mov	r0, r1
 81010e6:	e70f      	b.n	8100f08 <__udivmoddi4+0xd4>
 81010e8:	3e02      	subs	r6, #2
 81010ea:	4463      	add	r3, ip
 81010ec:	e730      	b.n	8100f50 <__udivmoddi4+0x11c>
 81010ee:	bf00      	nop

081010f0 <__aeabi_idiv0>:
 81010f0:	4770      	bx	lr
 81010f2:	bf00      	nop

081010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81010f4:	b480      	push	{r7}
 81010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81010f8:	4b09      	ldr	r3, [pc, #36]	@ (8101120 <SystemInit+0x2c>)
 81010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81010fe:	4a08      	ldr	r2, [pc, #32]	@ (8101120 <SystemInit+0x2c>)
 8101100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101108:	4b05      	ldr	r3, [pc, #20]	@ (8101120 <SystemInit+0x2c>)
 810110a:	691b      	ldr	r3, [r3, #16]
 810110c:	4a04      	ldr	r2, [pc, #16]	@ (8101120 <SystemInit+0x2c>)
 810110e:	f043 0310 	orr.w	r3, r3, #16
 8101112:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101114:	bf00      	nop
 8101116:	46bd      	mov	sp, r7
 8101118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810111c:	4770      	bx	lr
 810111e:	bf00      	nop
 8101120:	e000ed00 	.word	0xe000ed00

08101124 <DegreeSec2RPM>:
 */
#include "DC_motor.h"
#include "main.h"
#include "stdint.h"

float DegreeSec2RPM(float speed_degsec){
 8101124:	b480      	push	{r7}
 8101126:	b085      	sub	sp, #20
 8101128:	af00      	add	r7, sp, #0
 810112a:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed_rpm = (speed_degsec * 60)/360;
 810112e:	edd7 7a01 	vldr	s15, [r7, #4]
 8101132:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 810115c <DegreeSec2RPM+0x38>
 8101136:	ee27 7a87 	vmul.f32	s14, s15, s14
 810113a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8101160 <DegreeSec2RPM+0x3c>
 810113e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101142:	edc7 7a03 	vstr	s15, [r7, #12]
	return speed_rpm;
 8101146:	68fb      	ldr	r3, [r7, #12]
 8101148:	ee07 3a90 	vmov	s15, r3
}
 810114c:	eeb0 0a67 	vmov.f32	s0, s15
 8101150:	3714      	adds	r7, #20
 8101152:	46bd      	mov	sp, r7
 8101154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101158:	4770      	bx	lr
 810115a:	bf00      	nop
 810115c:	42700000 	.word	0x42700000
 8101160:	43b40000 	.word	0x43b40000

08101164 <Voltage2Duty>:

float Voltage2Duty(float u){
 8101164:	b480      	push	{r7}
 8101166:	b085      	sub	sp, #20
 8101168:	af00      	add	r7, sp, #0
 810116a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0){
 810116e:	edd7 7a01 	vldr	s15, [r7, #4]
 8101172:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8101176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810117a:	d805      	bhi.n	8101188 <Voltage2Duty+0x24>
		u = -u;
 810117c:	edd7 7a01 	vldr	s15, [r7, #4]
 8101180:	eef1 7a67 	vneg.f32	s15, s15
 8101184:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	float duty = 100 * u/V_MAX;
 8101188:	edd7 7a01 	vldr	s15, [r7, #4]
 810118c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 81011e0 <Voltage2Duty+0x7c>
 8101190:	ee27 7a87 	vmul.f32	s14, s15, s14
 8101194:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 8101198:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810119c:	edc7 7a03 	vstr	s15, [r7, #12]

	if (duty > 100){
 81011a0:	edd7 7a03 	vldr	s15, [r7, #12]
 81011a4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 81011e0 <Voltage2Duty+0x7c>
 81011a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 81011ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011b0:	dd02      	ble.n	81011b8 <Voltage2Duty+0x54>
		duty = 100;
 81011b2:	4b0c      	ldr	r3, [pc, #48]	@ (81011e4 <Voltage2Duty+0x80>)
 81011b4:	60fb      	str	r3, [r7, #12]
 81011b6:	e009      	b.n	81011cc <Voltage2Duty+0x68>
	}else if(duty < 0){
 81011b8:	edd7 7a03 	vldr	s15, [r7, #12]
 81011bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81011c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011c4:	d502      	bpl.n	81011cc <Voltage2Duty+0x68>
		duty = 0;
 81011c6:	f04f 0300 	mov.w	r3, #0
 81011ca:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 81011cc:	68fb      	ldr	r3, [r7, #12]
 81011ce:	ee07 3a90 	vmov	s15, r3
}
 81011d2:	eeb0 0a67 	vmov.f32	s0, s15
 81011d6:	3714      	adds	r7, #20
 81011d8:	46bd      	mov	sp, r7
 81011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011de:	4770      	bx	lr
 81011e0:	42c80000 	.word	0x42c80000
 81011e4:	42c80000 	.word	0x42c80000

081011e8 <Ref2Direction>:

uint8_t Ref2Direction(float y_ref){
 81011e8:	b480      	push	{r7}
 81011ea:	b085      	sub	sp, #20
 81011ec:	af00      	add	r7, sp, #0
 81011ee:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t direction;
	if(y_ref >= 0){
 81011f2:	edd7 7a01 	vldr	s15, [r7, #4]
 81011f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011fe:	db02      	blt.n	8101206 <Ref2Direction+0x1e>
		direction = 0;
 8101200:	2300      	movs	r3, #0
 8101202:	73fb      	strb	r3, [r7, #15]
 8101204:	e001      	b.n	810120a <Ref2Direction+0x22>
	} else {
		direction = 1;
 8101206:	2301      	movs	r3, #1
 8101208:	73fb      	strb	r3, [r7, #15]
	}
	return direction;
 810120a:	7bfb      	ldrb	r3, [r7, #15]
}
 810120c:	4618      	mov	r0, r3
 810120e:	3714      	adds	r7, #20
 8101210:	46bd      	mov	sp, r7
 8101212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101216:	4770      	bx	lr

08101218 <set_PWM_and_dir_back_wheel>:

void set_PWM_and_dir_back_wheel(float duty, uint8_t direction){
 8101218:	b5b0      	push	{r4, r5, r7, lr}
 810121a:	b082      	sub	sp, #8
 810121c:	af00      	add	r7, sp, #0
 810121e:	ed87 0a01 	vstr	s0, [r7, #4]
 8101222:	4603      	mov	r3, r0
 8101224:	70fb      	strb	r3, [r7, #3]
	TIM1 ->CCR1 = (duty/100.0)*TIM1->ARR;
 8101226:	6878      	ldr	r0, [r7, #4]
 8101228:	f7ff fa16 	bl	8100658 <__aeabi_f2d>
 810122c:	f04f 0200 	mov.w	r2, #0
 8101230:	4b17      	ldr	r3, [pc, #92]	@ (8101290 <set_PWM_and_dir_back_wheel+0x78>)
 8101232:	f7ff fb93 	bl	810095c <__aeabi_ddiv>
 8101236:	4602      	mov	r2, r0
 8101238:	460b      	mov	r3, r1
 810123a:	4614      	mov	r4, r2
 810123c:	461d      	mov	r5, r3
 810123e:	4b15      	ldr	r3, [pc, #84]	@ (8101294 <set_PWM_and_dir_back_wheel+0x7c>)
 8101240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101242:	4618      	mov	r0, r3
 8101244:	f7ff f9e6 	bl	8100614 <__aeabi_ui2d>
 8101248:	4602      	mov	r2, r0
 810124a:	460b      	mov	r3, r1
 810124c:	4620      	mov	r0, r4
 810124e:	4629      	mov	r1, r5
 8101250:	f7ff fa5a 	bl	8100708 <__aeabi_dmul>
 8101254:	4602      	mov	r2, r0
 8101256:	460b      	mov	r3, r1
 8101258:	4c0e      	ldr	r4, [pc, #56]	@ (8101294 <set_PWM_and_dir_back_wheel+0x7c>)
 810125a:	4610      	mov	r0, r2
 810125c:	4619      	mov	r1, r3
 810125e:	f7ff fd2b 	bl	8100cb8 <__aeabi_d2uiz>
 8101262:	4603      	mov	r3, r0
 8101264:	6363      	str	r3, [r4, #52]	@ 0x34

	//ARR:valore massimo che il contatore può raggiungere


	//Qui non ho capito a che serve
	if(direction == 0){
 8101266:	78fb      	ldrb	r3, [r7, #3]
 8101268:	2b00      	cmp	r3, #0
 810126a:	d105      	bne.n	8101278 <set_PWM_and_dir_back_wheel+0x60>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810126c:	2200      	movs	r2, #0
 810126e:	2110      	movs	r1, #16
 8101270:	4809      	ldr	r0, [pc, #36]	@ (8101298 <set_PWM_and_dir_back_wheel+0x80>)
 8101272:	f004 fd2f 	bl	8105cd4 <HAL_GPIO_WritePin>
	}else if(direction == 1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	}
}
 8101276:	e007      	b.n	8101288 <set_PWM_and_dir_back_wheel+0x70>
	}else if(direction == 1){
 8101278:	78fb      	ldrb	r3, [r7, #3]
 810127a:	2b01      	cmp	r3, #1
 810127c:	d104      	bne.n	8101288 <set_PWM_and_dir_back_wheel+0x70>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810127e:	2201      	movs	r2, #1
 8101280:	2110      	movs	r1, #16
 8101282:	4805      	ldr	r0, [pc, #20]	@ (8101298 <set_PWM_and_dir_back_wheel+0x80>)
 8101284:	f004 fd26 	bl	8105cd4 <HAL_GPIO_WritePin>
}
 8101288:	bf00      	nop
 810128a:	3708      	adds	r7, #8
 810128c:	46bd      	mov	sp, r7
 810128e:	bdb0      	pop	{r4, r5, r7, pc}
 8101290:	40590000 	.word	0x40590000
 8101294:	40010000 	.word	0x40010000
 8101298:	58020000 	.word	0x58020000

0810129c <set_PWM_and_dir_front_wheel>:

void set_PWM_and_dir_front_wheel (float duty, uint8_t dir){
 810129c:	b580      	push	{r7, lr}
 810129e:	b082      	sub	sp, #8
 81012a0:	af00      	add	r7, sp, #0
 81012a2:	ed87 0a01 	vstr	s0, [r7, #4]
 81012a6:	4603      	mov	r3, r0
 81012a8:	70fb      	strb	r3, [r7, #3]
	TIM3 -> CCR1 = (duty/100)*TIM3->ARR;
 81012aa:	edd7 7a01 	vldr	s15, [r7, #4]
 81012ae:	eddf 6a13 	vldr	s13, [pc, #76]	@ 81012fc <set_PWM_and_dir_front_wheel+0x60>
 81012b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81012b6:	4b12      	ldr	r3, [pc, #72]	@ (8101300 <set_PWM_and_dir_front_wheel+0x64>)
 81012b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81012ba:	ee07 3a90 	vmov	s15, r3
 81012be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81012c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8101300 <set_PWM_and_dir_front_wheel+0x64>)
 81012c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81012cc:	ee17 2a90 	vmov	r2, s15
 81012d0:	635a      	str	r2, [r3, #52]	@ 0x34

	if (dir == 0){
 81012d2:	78fb      	ldrb	r3, [r7, #3]
 81012d4:	2b00      	cmp	r3, #0
 81012d6:	d105      	bne.n	81012e4 <set_PWM_and_dir_front_wheel+0x48>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 81012d8:	2200      	movs	r2, #0
 81012da:	2120      	movs	r1, #32
 81012dc:	4809      	ldr	r0, [pc, #36]	@ (8101304 <set_PWM_and_dir_front_wheel+0x68>)
 81012de:	f004 fcf9 	bl	8105cd4 <HAL_GPIO_WritePin>
	}else if (dir == 1){
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	}
}
 81012e2:	e007      	b.n	81012f4 <set_PWM_and_dir_front_wheel+0x58>
	}else if (dir == 1){
 81012e4:	78fb      	ldrb	r3, [r7, #3]
 81012e6:	2b01      	cmp	r3, #1
 81012e8:	d104      	bne.n	81012f4 <set_PWM_and_dir_front_wheel+0x58>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 81012ea:	2201      	movs	r2, #1
 81012ec:	2120      	movs	r1, #32
 81012ee:	4805      	ldr	r0, [pc, #20]	@ (8101304 <set_PWM_and_dir_front_wheel+0x68>)
 81012f0:	f004 fcf0 	bl	8105cd4 <HAL_GPIO_WritePin>
}
 81012f4:	bf00      	nop
 81012f6:	3708      	adds	r7, #8
 81012f8:	46bd      	mov	sp, r7
 81012fa:	bd80      	pop	{r7, pc}
 81012fc:	42c80000 	.word	0x42c80000
 8101300:	40000400 	.word	0x40000400
 8101304:	58020000 	.word	0x58020000

08101308 <init_PID>:
 *      Author: andre
 */

#include <PID.h>

void init_PID (PID* p, float Tc, float u_max, float u_min){
 8101308:	b480      	push	{r7}
 810130a:	b085      	sub	sp, #20
 810130c:	af00      	add	r7, sp, #0
 810130e:	60f8      	str	r0, [r7, #12]
 8101310:	ed87 0a02 	vstr	s0, [r7, #8]
 8101314:	edc7 0a01 	vstr	s1, [r7, #4]
 8101318:	ed87 1a00 	vstr	s2, [r7]

	p->Tc = Tc;
 810131c:	68fb      	ldr	r3, [r7, #12]
 810131e:	68ba      	ldr	r2, [r7, #8]
 8101320:	60da      	str	r2, [r3, #12]
	p->u_max = u_max;
 8101322:	68fb      	ldr	r3, [r7, #12]
 8101324:	687a      	ldr	r2, [r7, #4]
 8101326:	611a      	str	r2, [r3, #16]
	p->u_min = u_min;
 8101328:	68fb      	ldr	r3, [r7, #12]
 810132a:	683a      	ldr	r2, [r7, #0]
 810132c:	615a      	str	r2, [r3, #20]
	p->e_old=0;
 810132e:	68fb      	ldr	r3, [r7, #12]
 8101330:	f04f 0200 	mov.w	r2, #0
 8101334:	619a      	str	r2, [r3, #24]
	p->Iterm=0;
 8101336:	68fb      	ldr	r3, [r7, #12]
 8101338:	f04f 0200 	mov.w	r2, #0
 810133c:	61da      	str	r2, [r3, #28]

}
 810133e:	bf00      	nop
 8101340:	3714      	adds	r7, #20
 8101342:	46bd      	mov	sp, r7
 8101344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101348:	4770      	bx	lr

0810134a <tune_PID>:


void tune_PID (PID* p, float Kp, float Ki, float Kd){
 810134a:	b480      	push	{r7}
 810134c:	b085      	sub	sp, #20
 810134e:	af00      	add	r7, sp, #0
 8101350:	60f8      	str	r0, [r7, #12]
 8101352:	ed87 0a02 	vstr	s0, [r7, #8]
 8101356:	edc7 0a01 	vstr	s1, [r7, #4]
 810135a:	ed87 1a00 	vstr	s2, [r7]

	p->Kp = Kp;
 810135e:	68fb      	ldr	r3, [r7, #12]
 8101360:	68ba      	ldr	r2, [r7, #8]
 8101362:	601a      	str	r2, [r3, #0]
	p->Kd = Kd;
 8101364:	68fb      	ldr	r3, [r7, #12]
 8101366:	683a      	ldr	r2, [r7, #0]
 8101368:	609a      	str	r2, [r3, #8]
	p->Ki = Ki;
 810136a:	68fb      	ldr	r3, [r7, #12]
 810136c:	687a      	ldr	r2, [r7, #4]
 810136e:	605a      	str	r2, [r3, #4]
}
 8101370:	bf00      	nop
 8101372:	3714      	adds	r7, #20
 8101374:	46bd      	mov	sp, r7
 8101376:	f85d 7b04 	ldr.w	r7, [sp], #4
 810137a:	4770      	bx	lr

0810137c <PID_controller>:

float PID_controller (PID* p, float y, float r){
 810137c:	b480      	push	{r7}
 810137e:	b089      	sub	sp, #36	@ 0x24
 8101380:	af00      	add	r7, sp, #0
 8101382:	60f8      	str	r0, [r7, #12]
 8101384:	ed87 0a02 	vstr	s0, [r7, #8]
 8101388:	edc7 0a01 	vstr	s1, [r7, #4]

	float u;
	float newIterm;
	float e = r-y;
 810138c:	ed97 7a01 	vldr	s14, [r7, #4]
 8101390:	edd7 7a02 	vldr	s15, [r7, #8]
 8101394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101398:	edc7 7a06 	vstr	s15, [r7, #24]
	float Pterm = p-> Kp * e;
 810139c:	68fb      	ldr	r3, [r7, #12]
 810139e:	edd3 7a00 	vldr	s15, [r3]
 81013a2:	ed97 7a06 	vldr	s14, [r7, #24]
 81013a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81013aa:	edc7 7a05 	vstr	s15, [r7, #20]

	newIterm = p->Iterm + (p->Ki)* p->Tc * p->e_old;
 81013ae:	68fb      	ldr	r3, [r7, #12]
 81013b0:	ed93 7a07 	vldr	s14, [r3, #28]
 81013b4:	68fb      	ldr	r3, [r7, #12]
 81013b6:	edd3 6a01 	vldr	s13, [r3, #4]
 81013ba:	68fb      	ldr	r3, [r7, #12]
 81013bc:	edd3 7a03 	vldr	s15, [r3, #12]
 81013c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 81013c4:	68fb      	ldr	r3, [r7, #12]
 81013c6:	edd3 7a06 	vldr	s15, [r3, #24]
 81013ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81013ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 81013d2:	edc7 7a04 	vstr	s15, [r7, #16]
	p->e_old = e;
 81013d6:	68fb      	ldr	r3, [r7, #12]
 81013d8:	69ba      	ldr	r2, [r7, #24]
 81013da:	619a      	str	r2, [r3, #24]
	u = Pterm + newIterm;
 81013dc:	ed97 7a05 	vldr	s14, [r7, #20]
 81013e0:	edd7 7a04 	vldr	s15, [r7, #16]
 81013e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 81013e8:	edc7 7a07 	vstr	s15, [r7, #28]




	if (u > p->u_max){
 81013ec:	68fb      	ldr	r3, [r7, #12]
 81013ee:	edd3 7a04 	vldr	s15, [r3, #16]
 81013f2:	ed97 7a07 	vldr	s14, [r7, #28]
 81013f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81013fe:	dd03      	ble.n	8101408 <PID_controller+0x8c>
		u = p->u_max;
 8101400:	68fb      	ldr	r3, [r7, #12]
 8101402:	691b      	ldr	r3, [r3, #16]
 8101404:	61fb      	str	r3, [r7, #28]
 8101406:	e010      	b.n	810142a <PID_controller+0xae>
	}else if(u<p->u_min){
 8101408:	68fb      	ldr	r3, [r7, #12]
 810140a:	edd3 7a05 	vldr	s15, [r3, #20]
 810140e:	ed97 7a07 	vldr	s14, [r7, #28]
 8101412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810141a:	d503      	bpl.n	8101424 <PID_controller+0xa8>
		u = p->u_min;
 810141c:	68fb      	ldr	r3, [r7, #12]
 810141e:	695b      	ldr	r3, [r3, #20]
 8101420:	61fb      	str	r3, [r7, #28]
 8101422:	e002      	b.n	810142a <PID_controller+0xae>
	}else
	{
		p->Iterm = newIterm;
 8101424:	68fb      	ldr	r3, [r7, #12]
 8101426:	693a      	ldr	r2, [r7, #16]
 8101428:	61da      	str	r2, [r3, #28]
	}

	return u;
 810142a:	69fb      	ldr	r3, [r7, #28]
 810142c:	ee07 3a90 	vmov	s15, r3

}
 8101430:	eeb0 0a67 	vmov.f32	s0, s15
 8101434:	3724      	adds	r7, #36	@ 0x24
 8101436:	46bd      	mov	sp, r7
 8101438:	f85d 7b04 	ldr.w	r7, [sp], #4
 810143c:	4770      	bx	lr

0810143e <bno055_setPage>:
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

// Imposta la pagina di registro del sensore BNO055
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 810143e:	b580      	push	{r7, lr}
 8101440:	b082      	sub	sp, #8
 8101442:	af00      	add	r7, sp, #0
 8101444:	4603      	mov	r3, r0
 8101446:	71fb      	strb	r3, [r7, #7]
 8101448:	79fb      	ldrb	r3, [r7, #7]
 810144a:	4619      	mov	r1, r3
 810144c:	2007      	movs	r0, #7
 810144e:	f000 fa31 	bl	81018b4 <bno055_writeData>
 8101452:	bf00      	nop
 8101454:	3708      	adds	r7, #8
 8101456:	46bd      	mov	sp, r7
 8101458:	bd80      	pop	{r7, pc}

0810145a <bno055_setOperationMode>:
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

// Imposta la modalità operativa del sensore BNO055 e attende un ritardo in base alla modalità
void bno055_setOperationMode(bno055_opmode_t mode) {
 810145a:	b580      	push	{r7, lr}
 810145c:	b082      	sub	sp, #8
 810145e:	af00      	add	r7, sp, #0
 8101460:	4603      	mov	r3, r0
 8101462:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8101464:	79fb      	ldrb	r3, [r7, #7]
 8101466:	4619      	mov	r1, r3
 8101468:	203d      	movs	r0, #61	@ 0x3d
 810146a:	f000 fa23 	bl	81018b4 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 810146e:	79fb      	ldrb	r3, [r7, #7]
 8101470:	2b00      	cmp	r3, #0
 8101472:	d103      	bne.n	810147c <bno055_setOperationMode+0x22>
    bno055_delay(100);
 8101474:	2064      	movs	r0, #100	@ 0x64
 8101476:	f000 fa11 	bl	810189c <bno055_delay>
  } else {
    bno055_delay(80);
  }
}
 810147a:	e002      	b.n	8101482 <bno055_setOperationMode+0x28>
    bno055_delay(80);
 810147c:	2050      	movs	r0, #80	@ 0x50
 810147e:	f000 fa0d 	bl	810189c <bno055_delay>
}
 8101482:	bf00      	nop
 8101484:	3708      	adds	r7, #8
 8101486:	46bd      	mov	sp, r7
 8101488:	bd80      	pop	{r7, pc}

0810148a <bno055_setOperationModeConfig>:

// NON FUSION MODE

// Imposta la modalità operativa del sensore BNO055 su configurazione
void bno055_setOperationModeConfig() {
 810148a:	b580      	push	{r7, lr}
 810148c:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 810148e:	2000      	movs	r0, #0
 8101490:	f7ff ffe3 	bl	810145a <bno055_setOperationMode>
}
 8101494:	bf00      	nop
 8101496:	bd80      	pop	{r7, pc}

08101498 <bno055_setOperationModeNDOF>:
void bno055_setOperationModeNDOF_FMC_OFF(){
	bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF_FMC_OFF);
}

// Imposta la modalità operativa del sensore BNO055 su NDOF (Nine Degrees of Freedom)
void bno055_setOperationModeNDOF() {
 8101498:	b580      	push	{r7, lr}
 810149a:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 810149c:	200c      	movs	r0, #12
 810149e:	f7ff ffdc 	bl	810145a <bno055_setOperationMode>
}
 81014a2:	bf00      	nop
 81014a4:	bd80      	pop	{r7, pc}

081014a6 <bno055_reset>:
void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
// Disabilita l'uso di un cristallo esterno per il sensore BNO055
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

// Esegue una procedura di reset per il sensore BNO055
void bno055_reset() {
 81014a6:	b580      	push	{r7, lr}
 81014a8:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 81014aa:	2120      	movs	r1, #32
 81014ac:	203f      	movs	r0, #63	@ 0x3f
 81014ae:	f000 fa01 	bl	81018b4 <bno055_writeData>
  bno055_delay(700);
 81014b2:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 81014b6:	f000 f9f1 	bl	810189c <bno055_delay>
}
 81014ba:	bf00      	nop
 81014bc:	bd80      	pop	{r7, pc}

081014be <bno055_setup>:
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

// Inizializza il sensore BNO055 eseguendo una procedura di reset e configurazione iniziale
void bno055_setup() {
 81014be:	b580      	push	{r7, lr}
 81014c0:	b082      	sub	sp, #8
 81014c2:	af00      	add	r7, sp, #0
  bno055_reset();
 81014c4:	f7ff ffef 	bl	81014a6 <bno055_reset>

  uint8_t id = 0;
 81014c8:	2300      	movs	r3, #0
 81014ca:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 81014cc:	1dfb      	adds	r3, r7, #7
 81014ce:	2201      	movs	r2, #1
 81014d0:	4619      	mov	r1, r3
 81014d2:	2000      	movs	r0, #0
 81014d4:	f000 fa22 	bl	810191c <bno055_readData>
  if (id != BNO055_ID) {
    //printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
  }
  bno055_setPage(0);
 81014d8:	2000      	movs	r0, #0
 81014da:	f7ff ffb0 	bl	810143e <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 81014de:	2100      	movs	r1, #0
 81014e0:	203f      	movs	r0, #63	@ 0x3f
 81014e2:	f000 f9e7 	bl	81018b4 <bno055_writeData>

  // Seleziona la modalità di configurazione del BNO055
  bno055_setOperationModeConfig();
 81014e6:	f7ff ffd0 	bl	810148a <bno055_setOperationModeConfig>
  bno055_delay(10);
 81014ea:	200a      	movs	r0, #10
 81014ec:	f000 f9d6 	bl	810189c <bno055_delay>
}
 81014f0:	bf00      	nop
 81014f2:	3708      	adds	r7, #8
 81014f4:	46bd      	mov	sp, r7
 81014f6:	bd80      	pop	{r7, pc}

081014f8 <bno055_getCalibrationState>:
  bno055_readData(BNO055_SYS_ERR, &tmp, 1);
  return tmp;
}

// Ottiene lo stato di calibrazione del sensore BNO055
bno055_calibration_state_t bno055_getCalibrationState() {
 81014f8:	b580      	push	{r7, lr}
 81014fa:	b084      	sub	sp, #16
 81014fc:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 81014fe:	2000      	movs	r0, #0
 8101500:	f7ff ff9d 	bl	810143e <bno055_setPage>
  bno055_calibration_state_t cal = {.sys = 0, .gyro = 0, .mag = 0, .accel = 0};
 8101504:	2300      	movs	r3, #0
 8101506:	60bb      	str	r3, [r7, #8]
  uint8_t calState = 0;
 8101508:	2300      	movs	r3, #0
 810150a:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CALIB_STAT, &calState, 1);
 810150c:	1dfb      	adds	r3, r7, #7
 810150e:	2201      	movs	r2, #1
 8101510:	4619      	mov	r1, r3
 8101512:	2035      	movs	r0, #53	@ 0x35
 8101514:	f000 fa02 	bl	810191c <bno055_readData>
  cal.sys = (calState >> 6) & 0x03;
 8101518:	79fb      	ldrb	r3, [r7, #7]
 810151a:	099b      	lsrs	r3, r3, #6
 810151c:	b2db      	uxtb	r3, r3
 810151e:	723b      	strb	r3, [r7, #8]
  cal.gyro = (calState >> 4) & 0x03;
 8101520:	79fb      	ldrb	r3, [r7, #7]
 8101522:	091b      	lsrs	r3, r3, #4
 8101524:	b2db      	uxtb	r3, r3
 8101526:	f003 0303 	and.w	r3, r3, #3
 810152a:	b2db      	uxtb	r3, r3
 810152c:	727b      	strb	r3, [r7, #9]
  cal.accel = (calState >> 2) & 0x03;
 810152e:	79fb      	ldrb	r3, [r7, #7]
 8101530:	089b      	lsrs	r3, r3, #2
 8101532:	b2db      	uxtb	r3, r3
 8101534:	f003 0303 	and.w	r3, r3, #3
 8101538:	b2db      	uxtb	r3, r3
 810153a:	72fb      	strb	r3, [r7, #11]
  cal.mag = calState & 0x03;
 810153c:	79fb      	ldrb	r3, [r7, #7]
 810153e:	f003 0303 	and.w	r3, r3, #3
 8101542:	b2db      	uxtb	r3, r3
 8101544:	72bb      	strb	r3, [r7, #10]
  return cal;
 8101546:	68bb      	ldr	r3, [r7, #8]
 8101548:	60fb      	str	r3, [r7, #12]
 810154a:	2300      	movs	r3, #0
 810154c:	7b3a      	ldrb	r2, [r7, #12]
 810154e:	f362 0307 	bfi	r3, r2, #0, #8
 8101552:	7b7a      	ldrb	r2, [r7, #13]
 8101554:	f362 230f 	bfi	r3, r2, #8, #8
 8101558:	7bba      	ldrb	r2, [r7, #14]
 810155a:	f362 4317 	bfi	r3, r2, #16, #8
 810155e:	7bfa      	ldrb	r2, [r7, #15]
 8101560:	f362 631f 	bfi	r3, r2, #24, #8
}
 8101564:	4618      	mov	r0, r3
 8101566:	3710      	adds	r7, #16
 8101568:	46bd      	mov	sp, r7
 810156a:	bd80      	pop	{r7, pc}

0810156c <bno055_getVector>:

  bno055_setOperationMode(operationMode);
}

//Ottiene un vettore specifico dal sensore BNO055 con la possibilità di specificare la scala del vettore
bno055_vector_t bno055_getVector(uint8_t vec) {
 810156c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101570:	b09e      	sub	sp, #120	@ 0x78
 8101572:	af00      	add	r7, sp, #0
 8101574:	4603      	mov	r3, r0
 8101576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 810157a:	2000      	movs	r0, #0
 810157c:	f7ff ff5f 	bl	810143e <bno055_setPage>
  uint8_t buffer[8];    // I quaternioni richiedono 8 byte

  if (vec == BNO055_VECTOR_QUATERNION)
 8101580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101584:	2b20      	cmp	r3, #32
 8101586:	d108      	bne.n	810159a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8101588:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 810158c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101590:	2208      	movs	r2, #8
 8101592:	4618      	mov	r0, r3
 8101594:	f000 f9c2 	bl	810191c <bno055_readData>
 8101598:	e007      	b.n	81015aa <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 810159a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 810159e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015a2:	2206      	movs	r2, #6
 81015a4:	4618      	mov	r0, r3
 81015a6:	f000 f9b9 	bl	810191c <bno055_readData>

  double scale = 1;
 81015aa:	f04f 0200 	mov.w	r2, #0
 81015ae:	4b8b      	ldr	r3, [pc, #556]	@ (81017dc <bno055_getVector+0x270>)
 81015b0:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 81015b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015b8:	2b0e      	cmp	r3, #14
 81015ba:	d109      	bne.n	81015d0 <bno055_getVector+0x64>
    scale = magScale;
 81015bc:	4b88      	ldr	r3, [pc, #544]	@ (81017e0 <bno055_getVector+0x274>)
 81015be:	881b      	ldrh	r3, [r3, #0]
 81015c0:	4618      	mov	r0, r3
 81015c2:	f7ff f827 	bl	8100614 <__aeabi_ui2d>
 81015c6:	4602      	mov	r2, r0
 81015c8:	460b      	mov	r3, r1
 81015ca:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81015ce:	e03e      	b.n	810164e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 81015d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015d4:	2b08      	cmp	r3, #8
 81015d6:	d007      	beq.n	81015e8 <bno055_getVector+0x7c>
 81015d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015dc:	2b28      	cmp	r3, #40	@ 0x28
 81015de:	d003      	beq.n	81015e8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 81015e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015e4:	2b2e      	cmp	r3, #46	@ 0x2e
 81015e6:	d109      	bne.n	81015fc <bno055_getVector+0x90>
    scale = accelScale;
 81015e8:	4b7e      	ldr	r3, [pc, #504]	@ (81017e4 <bno055_getVector+0x278>)
 81015ea:	881b      	ldrh	r3, [r3, #0]
 81015ec:	4618      	mov	r0, r3
 81015ee:	f7ff f811 	bl	8100614 <__aeabi_ui2d>
 81015f2:	4602      	mov	r2, r0
 81015f4:	460b      	mov	r3, r1
 81015f6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81015fa:	e028      	b.n	810164e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 81015fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101600:	2b14      	cmp	r3, #20
 8101602:	d109      	bne.n	8101618 <bno055_getVector+0xac>
    scale = angularRateScale;
 8101604:	4b78      	ldr	r3, [pc, #480]	@ (81017e8 <bno055_getVector+0x27c>)
 8101606:	881b      	ldrh	r3, [r3, #0]
 8101608:	4618      	mov	r0, r3
 810160a:	f7ff f803 	bl	8100614 <__aeabi_ui2d>
 810160e:	4602      	mov	r2, r0
 8101610:	460b      	mov	r3, r1
 8101612:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8101616:	e01a      	b.n	810164e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8101618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810161c:	2b1a      	cmp	r3, #26
 810161e:	d109      	bne.n	8101634 <bno055_getVector+0xc8>
    scale = eulerScale;
 8101620:	4b72      	ldr	r3, [pc, #456]	@ (81017ec <bno055_getVector+0x280>)
 8101622:	881b      	ldrh	r3, [r3, #0]
 8101624:	4618      	mov	r0, r3
 8101626:	f7fe fff5 	bl	8100614 <__aeabi_ui2d>
 810162a:	4602      	mov	r2, r0
 810162c:	460b      	mov	r3, r1
 810162e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8101632:	e00c      	b.n	810164e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8101634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101638:	2b20      	cmp	r3, #32
 810163a:	d108      	bne.n	810164e <bno055_getVector+0xe2>
    scale = quaScale;
 810163c:	4b6c      	ldr	r3, [pc, #432]	@ (81017f0 <bno055_getVector+0x284>)
 810163e:	881b      	ldrh	r3, [r3, #0]
 8101640:	4618      	mov	r0, r3
 8101642:	f7fe ffe7 	bl	8100614 <__aeabi_ui2d>
 8101646:	4602      	mov	r2, r0
 8101648:	460b      	mov	r3, r1
 810164a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 810164e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101652:	2220      	movs	r2, #32
 8101654:	2100      	movs	r1, #0
 8101656:	4618      	mov	r0, r3
 8101658:	f00c fd3a 	bl	810e0d0 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 810165c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101660:	2b20      	cmp	r3, #32
 8101662:	d150      	bne.n	8101706 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101664:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8101668:	021b      	lsls	r3, r3, #8
 810166a:	b21a      	sxth	r2, r3
 810166c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8101670:	b21b      	sxth	r3, r3
 8101672:	4313      	orrs	r3, r2
 8101674:	b21b      	sxth	r3, r3
 8101676:	4618      	mov	r0, r3
 8101678:	f7fe ffdc 	bl	8100634 <__aeabi_i2d>
 810167c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101680:	f7ff f96c 	bl	810095c <__aeabi_ddiv>
 8101684:	4602      	mov	r2, r0
 8101686:	460b      	mov	r3, r1
 8101688:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810168c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8101690:	021b      	lsls	r3, r3, #8
 8101692:	b21a      	sxth	r2, r3
 8101694:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8101698:	b21b      	sxth	r3, r3
 810169a:	4313      	orrs	r3, r2
 810169c:	b21b      	sxth	r3, r3
 810169e:	4618      	mov	r0, r3
 81016a0:	f7fe ffc8 	bl	8100634 <__aeabi_i2d>
 81016a4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81016a8:	f7ff f958 	bl	810095c <__aeabi_ddiv>
 81016ac:	4602      	mov	r2, r0
 81016ae:	460b      	mov	r3, r1
 81016b0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 81016b4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 81016b8:	021b      	lsls	r3, r3, #8
 81016ba:	b21a      	sxth	r2, r3
 81016bc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 81016c0:	b21b      	sxth	r3, r3
 81016c2:	4313      	orrs	r3, r2
 81016c4:	b21b      	sxth	r3, r3
 81016c6:	4618      	mov	r0, r3
 81016c8:	f7fe ffb4 	bl	8100634 <__aeabi_i2d>
 81016cc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81016d0:	f7ff f944 	bl	810095c <__aeabi_ddiv>
 81016d4:	4602      	mov	r2, r0
 81016d6:	460b      	mov	r3, r1
 81016d8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 81016dc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 81016e0:	021b      	lsls	r3, r3, #8
 81016e2:	b21a      	sxth	r2, r3
 81016e4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 81016e8:	b21b      	sxth	r3, r3
 81016ea:	4313      	orrs	r3, r2
 81016ec:	b21b      	sxth	r3, r3
 81016ee:	4618      	mov	r0, r3
 81016f0:	f7fe ffa0 	bl	8100634 <__aeabi_i2d>
 81016f4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81016f8:	f7ff f930 	bl	810095c <__aeabi_ddiv>
 81016fc:	4602      	mov	r2, r0
 81016fe:	460b      	mov	r3, r1
 8101700:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8101704:	e03b      	b.n	810177e <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101706:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 810170a:	021b      	lsls	r3, r3, #8
 810170c:	b21a      	sxth	r2, r3
 810170e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8101712:	b21b      	sxth	r3, r3
 8101714:	4313      	orrs	r3, r2
 8101716:	b21b      	sxth	r3, r3
 8101718:	4618      	mov	r0, r3
 810171a:	f7fe ff8b 	bl	8100634 <__aeabi_i2d>
 810171e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101722:	f7ff f91b 	bl	810095c <__aeabi_ddiv>
 8101726:	4602      	mov	r2, r0
 8101728:	460b      	mov	r3, r1
 810172a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810172e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8101732:	021b      	lsls	r3, r3, #8
 8101734:	b21a      	sxth	r2, r3
 8101736:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 810173a:	b21b      	sxth	r3, r3
 810173c:	4313      	orrs	r3, r2
 810173e:	b21b      	sxth	r3, r3
 8101740:	4618      	mov	r0, r3
 8101742:	f7fe ff77 	bl	8100634 <__aeabi_i2d>
 8101746:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 810174a:	f7ff f907 	bl	810095c <__aeabi_ddiv>
 810174e:	4602      	mov	r2, r0
 8101750:	460b      	mov	r3, r1
 8101752:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101756:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 810175a:	021b      	lsls	r3, r3, #8
 810175c:	b21a      	sxth	r2, r3
 810175e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8101762:	b21b      	sxth	r3, r3
 8101764:	4313      	orrs	r3, r2
 8101766:	b21b      	sxth	r3, r3
 8101768:	4618      	mov	r0, r3
 810176a:	f7fe ff63 	bl	8100634 <__aeabi_i2d>
 810176e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101772:	f7ff f8f3 	bl	810095c <__aeabi_ddiv>
 8101776:	4602      	mov	r2, r0
 8101778:	460b      	mov	r3, r1
 810177a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 810177e:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8101782:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8101786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810178a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810178e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101792:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8101796:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 810179a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 810179e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 81017a2:	ec49 8b14 	vmov	d4, r8, r9
 81017a6:	ec45 4b15 	vmov	d5, r4, r5
 81017aa:	ec41 0b16 	vmov	d6, r0, r1
 81017ae:	ec43 2b17 	vmov	d7, r2, r3
}
 81017b2:	eeb0 0a44 	vmov.f32	s0, s8
 81017b6:	eef0 0a64 	vmov.f32	s1, s9
 81017ba:	eeb0 1a45 	vmov.f32	s2, s10
 81017be:	eef0 1a65 	vmov.f32	s3, s11
 81017c2:	eeb0 2a46 	vmov.f32	s4, s12
 81017c6:	eef0 2a66 	vmov.f32	s5, s13
 81017ca:	eeb0 3a47 	vmov.f32	s6, s14
 81017ce:	eef0 3a67 	vmov.f32	s7, s15
 81017d2:	3778      	adds	r7, #120	@ 0x78
 81017d4:	46bd      	mov	sp, r7
 81017d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 81017da:	bf00      	nop
 81017dc:	3ff00000 	.word	0x3ff00000
 81017e0:	1000000e 	.word	0x1000000e
 81017e4:	10000008 	.word	0x10000008
 81017e8:	1000000a 	.word	0x1000000a
 81017ec:	1000000c 	.word	0x1000000c
 81017f0:	10000010 	.word	0x10000010

081017f4 <bno055_getVectorEuler>:
// Ottiene un vettore giroscopico dal sensore BNO055
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
// Ottiene un vettore di angoli di Eulero dal sensore BNO055
bno055_vector_t bno055_getVectorEuler() {
 81017f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81017f8:	b090      	sub	sp, #64	@ 0x40
 81017fa:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 81017fc:	201a      	movs	r0, #26
 81017fe:	f7ff feb5 	bl	810156c <bno055_getVector>
 8101802:	eeb0 4a40 	vmov.f32	s8, s0
 8101806:	eef0 4a60 	vmov.f32	s9, s1
 810180a:	eeb0 5a41 	vmov.f32	s10, s2
 810180e:	eef0 5a61 	vmov.f32	s11, s3
 8101812:	eeb0 6a42 	vmov.f32	s12, s4
 8101816:	eef0 6a62 	vmov.f32	s13, s5
 810181a:	eeb0 7a43 	vmov.f32	s14, s6
 810181e:	eef0 7a63 	vmov.f32	s15, s7
 8101822:	ed87 4b08 	vstr	d4, [r7, #32]
 8101826:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 810182a:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 810182e:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8101832:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8101836:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 810183a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 810183e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8101842:	ec49 8b14 	vmov	d4, r8, r9
 8101846:	ec45 4b15 	vmov	d5, r4, r5
 810184a:	ec41 0b16 	vmov	d6, r0, r1
 810184e:	ec43 2b17 	vmov	d7, r2, r3
}
 8101852:	eeb0 0a44 	vmov.f32	s0, s8
 8101856:	eef0 0a64 	vmov.f32	s1, s9
 810185a:	eeb0 1a45 	vmov.f32	s2, s10
 810185e:	eef0 1a65 	vmov.f32	s3, s11
 8101862:	eeb0 2a46 	vmov.f32	s4, s12
 8101866:	eef0 2a66 	vmov.f32	s5, s13
 810186a:	eeb0 3a47 	vmov.f32	s6, s14
 810186e:	eef0 3a67 	vmov.f32	s7, s15
 8101872:	3740      	adds	r7, #64	@ 0x40
 8101874:	46bd      	mov	sp, r7
 8101876:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0810187c <bno055_assignI2C>:
  uint8_t axisMapSign = (axis.x_sign << 2) | (axis.y_sign << 1) | (axis.z_sign);
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
}

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 810187c:	b480      	push	{r7}
 810187e:	b083      	sub	sp, #12
 8101880:	af00      	add	r7, sp, #0
 8101882:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8101884:	4a04      	ldr	r2, [pc, #16]	@ (8101898 <bno055_assignI2C+0x1c>)
 8101886:	687b      	ldr	r3, [r7, #4]
 8101888:	6013      	str	r3, [r2, #0]
}
 810188a:	bf00      	nop
 810188c:	370c      	adds	r7, #12
 810188e:	46bd      	mov	sp, r7
 8101890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101894:	4770      	bx	lr
 8101896:	bf00      	nop
 8101898:	10000284 	.word	0x10000284

0810189c <bno055_delay>:

void bno055_delay(int time) {
 810189c:	b580      	push	{r7, lr}
 810189e:	b082      	sub	sp, #8
 81018a0:	af00      	add	r7, sp, #0
 81018a2:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 81018a4:	687b      	ldr	r3, [r7, #4]
 81018a6:	4618      	mov	r0, r3
 81018a8:	f002 fa28 	bl	8103cfc <HAL_Delay>
#endif
}
 81018ac:	bf00      	nop
 81018ae:	3708      	adds	r7, #8
 81018b0:	46bd      	mov	sp, r7
 81018b2:	bd80      	pop	{r7, pc}

081018b4 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 81018b4:	b580      	push	{r7, lr}
 81018b6:	b088      	sub	sp, #32
 81018b8:	af02      	add	r7, sp, #8
 81018ba:	4603      	mov	r3, r0
 81018bc:	460a      	mov	r2, r1
 81018be:	71fb      	strb	r3, [r7, #7]
 81018c0:	4613      	mov	r3, r2
 81018c2:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 81018c4:	79fb      	ldrb	r3, [r7, #7]
 81018c6:	733b      	strb	r3, [r7, #12]
 81018c8:	79bb      	ldrb	r3, [r7, #6]
 81018ca:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 81018cc:	4b12      	ldr	r3, [pc, #72]	@ (8101918 <bno055_writeData+0x64>)
 81018ce:	6818      	ldr	r0, [r3, #0]
 81018d0:	f107 020c 	add.w	r2, r7, #12
 81018d4:	230a      	movs	r3, #10
 81018d6:	9300      	str	r3, [sp, #0]
 81018d8:	2302      	movs	r3, #2
 81018da:	2150      	movs	r1, #80	@ 0x50
 81018dc:	f004 fadc 	bl	8105e98 <HAL_I2C_Master_Transmit>
 81018e0:	4603      	mov	r3, r0
 81018e2:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);

  if (status == HAL_OK) {
 81018e4:	7dfb      	ldrb	r3, [r7, #23]
 81018e6:	2b00      	cmp	r3, #0
 81018e8:	d010      	beq.n	810190c <bno055_writeData+0x58>
    //printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
  } else {
    //printf("Unknown status data %d", status);
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 81018ea:	4b0b      	ldr	r3, [pc, #44]	@ (8101918 <bno055_writeData+0x64>)
 81018ec:	681b      	ldr	r3, [r3, #0]
 81018ee:	4618      	mov	r0, r3
 81018f0:	f004 fcee 	bl	81062d0 <HAL_I2C_GetError>
 81018f4:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 81018f6:	693b      	ldr	r3, [r7, #16]
 81018f8:	2b00      	cmp	r3, #0
 81018fa:	d009      	beq.n	8101910 <bno055_writeData+0x5c>
    //printf("HAL_I2C_ERROR_DMA\r\n");
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
    //printf("HAL_I2C_ERROR_TIMEOUT\r\n");
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 81018fc:	4b06      	ldr	r3, [pc, #24]	@ (8101918 <bno055_writeData+0x64>)
 81018fe:	681b      	ldr	r3, [r3, #0]
 8101900:	4618      	mov	r0, r3
 8101902:	f004 fcd7 	bl	81062b4 <HAL_I2C_GetState>
 8101906:	4603      	mov	r3, r0
 8101908:	73fb      	strb	r3, [r7, #15]
 810190a:	e002      	b.n	8101912 <bno055_writeData+0x5e>
    return;
 810190c:	bf00      	nop
 810190e:	e000      	b.n	8101912 <bno055_writeData+0x5e>
    return;
 8101910:	bf00      	nop



  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8101912:	3718      	adds	r7, #24
 8101914:	46bd      	mov	sp, r7
 8101916:	bd80      	pop	{r7, pc}
 8101918:	10000284 	.word	0x10000284

0810191c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 810191c:	b580      	push	{r7, lr}
 810191e:	b086      	sub	sp, #24
 8101920:	af02      	add	r7, sp, #8
 8101922:	4603      	mov	r3, r0
 8101924:	6039      	str	r1, [r7, #0]
 8101926:	71fb      	strb	r3, [r7, #7]
 8101928:	4613      	mov	r3, r2
 810192a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 810192c:	4b0d      	ldr	r3, [pc, #52]	@ (8101964 <bno055_readData+0x48>)
 810192e:	6818      	ldr	r0, [r3, #0]
 8101930:	1dfa      	adds	r2, r7, #7
 8101932:	2364      	movs	r3, #100	@ 0x64
 8101934:	9300      	str	r3, [sp, #0]
 8101936:	2301      	movs	r3, #1
 8101938:	2150      	movs	r1, #80	@ 0x50
 810193a:	f004 faad 	bl	8105e98 <HAL_I2C_Master_Transmit>
 810193e:	4603      	mov	r3, r0
 8101940:	73fb      	strb	r3, [r7, #15]
                          100);
	ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8101942:	4b08      	ldr	r3, [pc, #32]	@ (8101964 <bno055_readData+0x48>)
 8101944:	6818      	ldr	r0, [r3, #0]
 8101946:	79bb      	ldrb	r3, [r7, #6]
 8101948:	b29b      	uxth	r3, r3
 810194a:	2264      	movs	r2, #100	@ 0x64
 810194c:	9200      	str	r2, [sp, #0]
 810194e:	683a      	ldr	r2, [r7, #0]
 8101950:	2150      	movs	r1, #80	@ 0x50
 8101952:	f004 fbb9 	bl	81060c8 <HAL_I2C_Master_Receive>
 8101956:	4603      	mov	r3, r0
 8101958:	73fb      	strb	r3, [r7, #15]
                         100);
	  if (ret == HAL_OK) {
 810195a:	7bfb      	ldrb	r3, [r7, #15]
 810195c:	2b00      	cmp	r3, #0
	  } else {
	    //printf("Unknown status data %d", ret);
	  }
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 810195e:	3710      	adds	r7, #16
 8101960:	46bd      	mov	sp, r7
 8101962:	bd80      	pop	{r7, pc}
 8101964:	10000284 	.word	0x10000284

08101968 <bno055_setPowerMode>:
    bno055_writeData(BNO055_MAG_CONFIG, magConfigReg);
    bno055_setPage(0); //tornare in page 0
}

// Funzione per impostare la modalità energetica
void bno055_setPowerMode(PowerMode mode) {
 8101968:	b580      	push	{r7, lr}
 810196a:	b084      	sub	sp, #16
 810196c:	af00      	add	r7, sp, #0
 810196e:	4603      	mov	r3, r0
 8101970:	71fb      	strb	r3, [r7, #7]
    // Leggi il valore corrente di PWR_MODE
    uint8_t currentMode;
    bno055_readData(BNO055_PWR_MODE, &currentMode, 1);
 8101972:	f107 030f 	add.w	r3, r7, #15
 8101976:	2201      	movs	r2, #1
 8101978:	4619      	mov	r1, r3
 810197a:	203e      	movs	r0, #62	@ 0x3e
 810197c:	f7ff ffce 	bl	810191c <bno055_readData>

    // Modifica solo i bit relativi alla modalità energetica
    currentMode &= 0xFC; // Azzera i primi due bit
 8101980:	7bfb      	ldrb	r3, [r7, #15]
 8101982:	f023 0303 	bic.w	r3, r3, #3
 8101986:	b2db      	uxtb	r3, r3
 8101988:	73fb      	strb	r3, [r7, #15]
    currentMode |= mode; // Imposta la nuova modalità energetica
 810198a:	7bfa      	ldrb	r2, [r7, #15]
 810198c:	79fb      	ldrb	r3, [r7, #7]
 810198e:	4313      	orrs	r3, r2
 8101990:	b2db      	uxtb	r3, r3
 8101992:	73fb      	strb	r3, [r7, #15]

    // Scrivi il nuovo valore in PWR_MODE
    bno055_writeData(BNO055_PWR_MODE, currentMode);
 8101994:	7bfb      	ldrb	r3, [r7, #15]
 8101996:	4619      	mov	r1, r3
 8101998:	203e      	movs	r0, #62	@ 0x3e
 810199a:	f7ff ff8b 	bl	81018b4 <bno055_writeData>
}
 810199e:	bf00      	nop
 81019a0:	3710      	adds	r7, #16
 81019a2:	46bd      	mov	sp, r7
 81019a4:	bd80      	pop	{r7, pc}

081019a6 <bno055_getPowerMode>:

// Funzione per ottenere la modalità energetica attuale
PowerMode bno055_getPowerMode() {
 81019a6:	b580      	push	{r7, lr}
 81019a8:	b082      	sub	sp, #8
 81019aa:	af00      	add	r7, sp, #0
    // Leggi il valore corrente di PWR_MODE
    uint8_t currentMode;
    bno055_readData(BNO055_PWR_MODE, &currentMode, 1);
 81019ac:	1dfb      	adds	r3, r7, #7
 81019ae:	2201      	movs	r2, #1
 81019b0:	4619      	mov	r1, r3
 81019b2:	203e      	movs	r0, #62	@ 0x3e
 81019b4:	f7ff ffb2 	bl	810191c <bno055_readData>

    // Estrai la modalità energetica dai primi due bit
    currentMode &= 0x03;
 81019b8:	79fb      	ldrb	r3, [r7, #7]
 81019ba:	f003 0303 	and.w	r3, r3, #3
 81019be:	b2db      	uxtb	r3, r3
 81019c0:	71fb      	strb	r3, [r7, #7]

    // Restituisci la modalità energetica come enumerazione PowerMode
    return (PowerMode)currentMode;
 81019c2:	79fb      	ldrb	r3, [r7, #7]
}
 81019c4:	4618      	mov	r0, r3
 81019c6:	3708      	adds	r7, #8
 81019c8:	46bd      	mov	sp, r7
 81019ca:	bd80      	pop	{r7, pc}

081019cc <kalman_filter_init>:
//dimensioni del sistema


void kalman_filter_init(KalmanFilter* kf, float32_t* A_data,float32_t* B_data,
		float32_t* H_data, float32_t* Q_data,float32_t* R_data,float32_t* P_data,
		float32_t* K_data, float32_t* x_data) {
 81019cc:	b580      	push	{r7, lr}
 81019ce:	b084      	sub	sp, #16
 81019d0:	af00      	add	r7, sp, #0
 81019d2:	60f8      	str	r0, [r7, #12]
 81019d4:	60b9      	str	r1, [r7, #8]
 81019d6:	607a      	str	r2, [r7, #4]
 81019d8:	603b      	str	r3, [r7, #0]


    arm_mat_init_f32(&kf->A, state_dim, state_dim, (float32_t *)A_data);
 81019da:	68f8      	ldr	r0, [r7, #12]
 81019dc:	68bb      	ldr	r3, [r7, #8]
 81019de:	2202      	movs	r2, #2
 81019e0:	2102      	movs	r1, #2
 81019e2:	f00a ffb3 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, state_dim, control_dim, (float32_t *)B_data);
 81019e6:	68fb      	ldr	r3, [r7, #12]
 81019e8:	f103 0008 	add.w	r0, r3, #8
 81019ec:	687b      	ldr	r3, [r7, #4]
 81019ee:	2201      	movs	r2, #1
 81019f0:	2102      	movs	r1, #2
 81019f2:	f00a ffab 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, measure_dim, state_dim, (float32_t *)H_data);
 81019f6:	68fb      	ldr	r3, [r7, #12]
 81019f8:	f103 0010 	add.w	r0, r3, #16
 81019fc:	683b      	ldr	r3, [r7, #0]
 81019fe:	2202      	movs	r2, #2
 8101a00:	2102      	movs	r1, #2
 8101a02:	f00a ffa3 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, state_dim, state_dim, (float32_t *)Q_data);
 8101a06:	68fb      	ldr	r3, [r7, #12]
 8101a08:	f103 0018 	add.w	r0, r3, #24
 8101a0c:	69bb      	ldr	r3, [r7, #24]
 8101a0e:	2202      	movs	r2, #2
 8101a10:	2102      	movs	r1, #2
 8101a12:	f00a ff9b 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, measure_dim, measure_dim, (float32_t *)R_data);
 8101a16:	68fb      	ldr	r3, [r7, #12]
 8101a18:	f103 0020 	add.w	r0, r3, #32
 8101a1c:	69fb      	ldr	r3, [r7, #28]
 8101a1e:	2202      	movs	r2, #2
 8101a20:	2102      	movs	r1, #2
 8101a22:	f00a ff93 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, state_dim, state_dim, (float32_t *)P_data);
 8101a26:	68fb      	ldr	r3, [r7, #12]
 8101a28:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8101a2c:	6a3b      	ldr	r3, [r7, #32]
 8101a2e:	2202      	movs	r2, #2
 8101a30:	2102      	movs	r1, #2
 8101a32:	f00a ff8b 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&kf->x, state_dim, 1, (float32_t *)x_data);
 8101a36:	68fb      	ldr	r3, [r7, #12]
 8101a38:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8101a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101a3e:	2201      	movs	r2, #1
 8101a40:	2102      	movs	r1, #2
 8101a42:	f00a ff83 	bl	810c94c <arm_mat_init_f32>

    arm_mat_init_f32(&kf->K, state_dim, measure_dim, (float32_t *)&x_data);
 8101a46:	68fb      	ldr	r3, [r7, #12]
 8101a48:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8101a4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101a50:	2202      	movs	r2, #2
 8101a52:	2102      	movs	r1, #2
 8101a54:	f00a ff7a 	bl	810c94c <arm_mat_init_f32>

}
 8101a58:	bf00      	nop
 8101a5a:	3710      	adds	r7, #16
 8101a5c:	46bd      	mov	sp, r7
 8101a5e:	bd80      	pop	{r7, pc}

08101a60 <kalman_predict>:
    }
}



void kalman_predict(KalmanFilter* kf, const arm_matrix_instance_f32* u) {
 8101a60:	b580      	push	{r7, lr}
 8101a62:	b09c      	sub	sp, #112	@ 0x70
 8101a64:	af00      	add	r7, sp, #0
 8101a66:	6078      	str	r0, [r7, #4]
 8101a68:	6039      	str	r1, [r7, #0]
	float32_t temp1_data[state_dim];
	float32_t temp2_data[state_dim];
	float32_t temp3_data[state_dim*state_dim];
	float32_t temp4_data[state_dim*state_dim];
	float32_t temp5_data[state_dim*state_dim];
    arm_mat_init_f32(&temp1, state_dim, 1, (float32_t *)&temp1_data);
 8101a6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8101a6e:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8101a72:	2201      	movs	r2, #1
 8101a74:	2102      	movs	r1, #2
 8101a76:	f00a ff69 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, state_dim, 1, (float32_t *)&temp2_data);
 8101a7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8101a7e:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8101a82:	2201      	movs	r2, #1
 8101a84:	2102      	movs	r1, #2
 8101a86:	f00a ff61 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&temp3, state_dim, state_dim, (float32_t *)&temp3_data);
 8101a8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101a8e:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8101a92:	2202      	movs	r2, #2
 8101a94:	2102      	movs	r1, #2
 8101a96:	f00a ff59 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&temp4, state_dim, state_dim, (float32_t *)&temp4_data);
 8101a9a:	f107 0318 	add.w	r3, r7, #24
 8101a9e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8101aa2:	2202      	movs	r2, #2
 8101aa4:	2102      	movs	r1, #2
 8101aa6:	f00a ff51 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&temp5, state_dim, state_dim, (float32_t *)&temp5_data);
 8101aaa:	f107 0308 	add.w	r3, r7, #8
 8101aae:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8101ab2:	2202      	movs	r2, #2
 8101ab4:	2102      	movs	r1, #2
 8101ab6:	f00a ff49 	bl	810c94c <arm_mat_init_f32>

    // x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &temp1);
 8101aba:	6878      	ldr	r0, [r7, #4]
 8101abc:	687b      	ldr	r3, [r7, #4]
 8101abe:	3338      	adds	r3, #56	@ 0x38
 8101ac0:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8101ac4:	4619      	mov	r1, r3
 8101ac6:	f00a fd9b 	bl	810c600 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, u, &temp2);
 8101aca:	687b      	ldr	r3, [r7, #4]
 8101acc:	3308      	adds	r3, #8
 8101ace:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8101ad2:	6839      	ldr	r1, [r7, #0]
 8101ad4:	4618      	mov	r0, r3
 8101ad6:	f00a fd93 	bl	810c600 <arm_mat_mult_f32>
	arm_mat_add_f32(&temp1, &temp2,  &kf->x);
 8101ada:	687b      	ldr	r3, [r7, #4]
 8101adc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8101ae0:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8101ae4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8101ae8:	4618      	mov	r0, r3
 8101aea:	f00a ff33 	bl	810c954 <arm_mat_add_f32>


    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &temp4);
 8101aee:	6878      	ldr	r0, [r7, #4]
 8101af0:	687b      	ldr	r3, [r7, #4]
 8101af2:	3328      	adds	r3, #40	@ 0x28
 8101af4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8101af8:	4619      	mov	r1, r3
 8101afa:	f00a fd81 	bl	810c600 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &temp5);
 8101afe:	687b      	ldr	r3, [r7, #4]
 8101b00:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8101b04:	4611      	mov	r1, r2
 8101b06:	4618      	mov	r0, r3
 8101b08:	f00a fcb4 	bl	810c474 <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp4, &temp5, &temp3);
 8101b0c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8101b10:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8101b14:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8101b18:	4618      	mov	r0, r3
 8101b1a:	f00a fd71 	bl	810c600 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->Q, &kf->P);
 8101b1e:	687b      	ldr	r3, [r7, #4]
 8101b20:	f103 0118 	add.w	r1, r3, #24
 8101b24:	687b      	ldr	r3, [r7, #4]
 8101b26:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8101b2a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8101b2e:	4618      	mov	r0, r3
 8101b30:	f00a ff10 	bl	810c954 <arm_mat_add_f32>


}
 8101b34:	bf00      	nop
 8101b36:	3770      	adds	r7, #112	@ 0x70
 8101b38:	46bd      	mov	sp, r7
 8101b3a:	bd80      	pop	{r7, pc}

08101b3c <kalman_update>:


void kalman_update(KalmanFilter* kf, const arm_matrix_instance_f32* z)
{
 8101b3c:	b580      	push	{r7, lr}
 8101b3e:	b0dc      	sub	sp, #368	@ 0x170
 8101b40:	af00      	add	r7, sp, #0
 8101b42:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b46:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101b4a:	6018      	str	r0, [r3, #0]
 8101b4c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b50:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8101b54:	6019      	str	r1, [r3, #0]
    float32_t temp12_data[measure_dim * state_dim];
    float32_t temp13_data[state_dim * measure_dim];
    float32_t temp14_data[measure_dim];
    float32_t temp15_data[measure_dim];
    float32_t temp16_data[state_dim];
    arm_mat_init_f32(&temp1, state_dim, measure_dim, temp1_data);
 8101b56:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8101b5a:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8101b5e:	2202      	movs	r2, #2
 8101b60:	2102      	movs	r1, #2
 8101b62:	f00a fef3 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, state_dim, measure_dim, temp2_data);
 8101b66:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8101b6a:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8101b6e:	2202      	movs	r2, #2
 8101b70:	2102      	movs	r1, #2
 8101b72:	f00a feeb 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&temp3, measure_dim, measure_dim, temp3_data);
 8101b76:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8101b7a:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8101b7e:	2202      	movs	r2, #2
 8101b80:	2102      	movs	r1, #2
 8101b82:	f00a fee3 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&temp4, measure_dim, measure_dim, temp4_data);
 8101b86:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8101b8a:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8101b8e:	2202      	movs	r2, #2
 8101b90:	2102      	movs	r1, #2
 8101b92:	f00a fedb 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&temp5, measure_dim, measure_dim, temp5_data);
 8101b96:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8101b9a:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8101b9e:	2202      	movs	r2, #2
 8101ba0:	2102      	movs	r1, #2
 8101ba2:	f00a fed3 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&temp6, state_dim, state_dim, temp6_data);
 8101ba6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8101baa:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8101bae:	2202      	movs	r2, #2
 8101bb0:	2102      	movs	r1, #2
 8101bb2:	f00a fecb 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&temp7, state_dim, state_dim, temp7_data);
 8101bb6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8101bba:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8101bbe:	2202      	movs	r2, #2
 8101bc0:	2102      	movs	r1, #2
 8101bc2:	f00a fec3 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&temp8, state_dim, state_dim, temp8_data);
 8101bc6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8101bca:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8101bce:	2202      	movs	r2, #2
 8101bd0:	2102      	movs	r1, #2
 8101bd2:	f00a febb 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&temp9, state_dim, measure_dim, temp9_data);
 8101bd6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8101bda:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8101bde:	2202      	movs	r2, #2
 8101be0:	2102      	movs	r1, #2
 8101be2:	f00a feb3 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&temp10, state_dim, measure_dim, temp10_data);
 8101be6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8101bea:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8101bee:	2202      	movs	r2, #2
 8101bf0:	2102      	movs	r1, #2
 8101bf2:	f00a feab 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&temp11, measure_dim,state_dim, temp11_data);
 8101bf6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8101bfa:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8101bfe:	2202      	movs	r2, #2
 8101c00:	2102      	movs	r1, #2
 8101c02:	f00a fea3 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&temp12, measure_dim, state_dim, temp12_data);
 8101c06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101c0a:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8101c0e:	2202      	movs	r2, #2
 8101c10:	2102      	movs	r1, #2
 8101c12:	f00a fe9b 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&temp13, state_dim, measure_dim, temp13_data);
 8101c16:	f107 0320 	add.w	r3, r7, #32
 8101c1a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8101c1e:	2202      	movs	r2, #2
 8101c20:	2102      	movs	r1, #2
 8101c22:	f00a fe93 	bl	810c94c <arm_mat_init_f32>
    arm_mat_init_f32(&temp14, measure_dim, 1, temp14_data);
 8101c26:	f107 0318 	add.w	r3, r7, #24
 8101c2a:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8101c2e:	2201      	movs	r2, #1
 8101c30:	2102      	movs	r1, #2
 8101c32:	f00a fe8b 	bl	810c94c <arm_mat_init_f32>
	arm_mat_init_f32(&temp15, measure_dim, 1, temp15_data);
 8101c36:	f107 0310 	add.w	r3, r7, #16
 8101c3a:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 8101c3e:	2201      	movs	r2, #1
 8101c40:	2102      	movs	r1, #2
 8101c42:	f00a fe83 	bl	810c94c <arm_mat_init_f32>
	arm_mat_init_f32(&temp16, state_dim, 1, temp16_data);
 8101c46:	f107 0308 	add.w	r3, r7, #8
 8101c4a:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 8101c4e:	2201      	movs	r2, #1
 8101c50:	2102      	movs	r1, #2
 8101c52:	f00a fe7b 	bl	810c94c <arm_mat_init_f32>

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &temp1);
 8101c56:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c5a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c5e:	681b      	ldr	r3, [r3, #0]
 8101c60:	3310      	adds	r3, #16
 8101c62:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8101c66:	4611      	mov	r1, r2
 8101c68:	4618      	mov	r0, r3
 8101c6a:	f00a fc03 	bl	810c474 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &temp1, &temp2);
 8101c6e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c72:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c76:	681b      	ldr	r3, [r3, #0]
 8101c78:	3328      	adds	r3, #40	@ 0x28
 8101c7a:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8101c7e:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8101c82:	4618      	mov	r0, r3
 8101c84:	f00a fcbc 	bl	810c600 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &temp2, &temp3);
 8101c88:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c8c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c90:	681b      	ldr	r3, [r3, #0]
 8101c92:	3310      	adds	r3, #16
 8101c94:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8101c98:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8101c9c:	4618      	mov	r0, r3
 8101c9e:	f00a fcaf 	bl	810c600 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->R, &temp4);
 8101ca2:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101ca6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101caa:	681b      	ldr	r3, [r3, #0]
 8101cac:	f103 0120 	add.w	r1, r3, #32
 8101cb0:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8101cb4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8101cb8:	4618      	mov	r0, r3
 8101cba:	f00a fe4b 	bl	810c954 <arm_mat_add_f32>
    arm_mat_inverse_f32(&temp4, &temp5);
 8101cbe:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8101cc2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8101cc6:	4611      	mov	r1, r2
 8101cc8:	4618      	mov	r0, r3
 8101cca:	f00a fd39 	bl	810c740 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&temp2, &temp5, &kf->K);
 8101cce:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cd2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cd6:	681b      	ldr	r3, [r3, #0]
 8101cd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8101cdc:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8101ce0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8101ce4:	4618      	mov	r0, r3
 8101ce6:	f00a fc8b 	bl	810c600 <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &temp14);
 8101cea:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cee:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cf2:	681b      	ldr	r3, [r3, #0]
 8101cf4:	f103 0010 	add.w	r0, r3, #16
 8101cf8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cfc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d00:	681b      	ldr	r3, [r3, #0]
 8101d02:	3338      	adds	r3, #56	@ 0x38
 8101d04:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8101d08:	4619      	mov	r1, r3
 8101d0a:	f00a fc79 	bl	810c600 <arm_mat_mult_f32>
    arm_mat_sub_f32(z, &temp14, &temp15);
 8101d0e:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8101d12:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8101d16:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d1a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8101d1e:	6818      	ldr	r0, [r3, #0]
 8101d20:	f00a fc04 	bl	810c52c <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->K, &temp15, &temp16);
 8101d24:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d28:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d2c:	681b      	ldr	r3, [r3, #0]
 8101d2e:	3330      	adds	r3, #48	@ 0x30
 8101d30:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 8101d34:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 8101d38:	4618      	mov	r0, r3
 8101d3a:	f00a fc61 	bl	810c600 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->x, &temp16, &kf->x);
 8101d3e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d42:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d46:	681b      	ldr	r3, [r3, #0]
 8101d48:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8101d4c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d50:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d54:	681b      	ldr	r3, [r3, #0]
 8101d56:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8101d5a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8101d5e:	4619      	mov	r1, r3
 8101d60:	f00a fdf8 	bl	810c954 <arm_mat_add_f32>

    // Aggiornamento di P
    // P = P - P*H'*K' - K*H*P + K*(H*P*H' + R)*K'

    // Prima parte: P * H'
    arm_mat_trans_f32(&kf->H, &temp9);
 8101d64:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d68:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d6c:	681b      	ldr	r3, [r3, #0]
 8101d6e:	3310      	adds	r3, #16
 8101d70:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8101d74:	4611      	mov	r1, r2
 8101d76:	4618      	mov	r0, r3
 8101d78:	f00a fb7c 	bl	810c474 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &temp9, &temp10);
 8101d7c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d80:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d84:	681b      	ldr	r3, [r3, #0]
 8101d86:	3328      	adds	r3, #40	@ 0x28
 8101d88:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8101d8c:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8101d90:	4618      	mov	r0, r3
 8101d92:	f00a fc35 	bl	810c600 <arm_mat_mult_f32>
    // Seconda parte: P * H' * K'
    arm_mat_trans_f32(&kf->K, &temp11);
 8101d96:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d9a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d9e:	681b      	ldr	r3, [r3, #0]
 8101da0:	3330      	adds	r3, #48	@ 0x30
 8101da2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8101da6:	4611      	mov	r1, r2
 8101da8:	4618      	mov	r0, r3
 8101daa:	f00a fb63 	bl	810c474 <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp10, &temp11, &temp6);
 8101dae:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8101db2:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8101db6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8101dba:	4618      	mov	r0, r3
 8101dbc:	f00a fc20 	bl	810c600 <arm_mat_mult_f32>
    // Terza parte: K * H * P
    arm_mat_mult_f32(&kf->H, &kf->P, &temp12);
 8101dc0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101dc4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dc8:	681b      	ldr	r3, [r3, #0]
 8101dca:	f103 0010 	add.w	r0, r3, #16
 8101dce:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101dd2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dd6:	681b      	ldr	r3, [r3, #0]
 8101dd8:	3328      	adds	r3, #40	@ 0x28
 8101dda:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8101dde:	4619      	mov	r1, r3
 8101de0:	f00a fc0e 	bl	810c600 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->K, &temp12, &temp7);
 8101de4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101de8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dec:	681b      	ldr	r3, [r3, #0]
 8101dee:	3330      	adds	r3, #48	@ 0x30
 8101df0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8101df4:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8101df8:	4618      	mov	r0, r3
 8101dfa:	f00a fc01 	bl	810c600 <arm_mat_mult_f32>
    // Quarta parte: K * (H * P * H' + R) * K'
    arm_mat_mult_f32(&kf->H, &kf->P, &temp8);
 8101dfe:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e02:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e06:	681b      	ldr	r3, [r3, #0]
 8101e08:	f103 0010 	add.w	r0, r3, #16
 8101e0c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e10:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e14:	681b      	ldr	r3, [r3, #0]
 8101e16:	3328      	adds	r3, #40	@ 0x28
 8101e18:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8101e1c:	4619      	mov	r1, r3
 8101e1e:	f00a fbef 	bl	810c600 <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp8, &temp9, &temp3);
 8101e22:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8101e26:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8101e2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8101e2e:	4618      	mov	r0, r3
 8101e30:	f00a fbe6 	bl	810c600 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->R, &temp4);
 8101e34:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e38:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e3c:	681b      	ldr	r3, [r3, #0]
 8101e3e:	f103 0120 	add.w	r1, r3, #32
 8101e42:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8101e46:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8101e4a:	4618      	mov	r0, r3
 8101e4c:	f00a fd82 	bl	810c954 <arm_mat_add_f32>
    arm_mat_mult_f32(&kf->K, &temp4, &temp13);
 8101e50:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e54:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e58:	681b      	ldr	r3, [r3, #0]
 8101e5a:	3330      	adds	r3, #48	@ 0x30
 8101e5c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8101e60:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8101e64:	4618      	mov	r0, r3
 8101e66:	f00a fbcb 	bl	810c600 <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp13, &temp11, &temp8);
 8101e6a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8101e6e:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8101e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8101e76:	4618      	mov	r0, r3
 8101e78:	f00a fbc2 	bl	810c600 <arm_mat_mult_f32>
    // Risultato finale: P = P - temp6 - temp7 + temp8
    arm_mat_sub_f32(&kf->P, &temp6, &temp12);
 8101e7c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e80:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e84:	681b      	ldr	r3, [r3, #0]
 8101e86:	3328      	adds	r3, #40	@ 0x28
 8101e88:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8101e8c:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8101e90:	4618      	mov	r0, r3
 8101e92:	f00a fb4b 	bl	810c52c <arm_mat_sub_f32>
    arm_mat_sub_f32(&temp12, &temp7, &temp6);
 8101e96:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8101e9a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8101e9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8101ea2:	4618      	mov	r0, r3
 8101ea4:	f00a fb42 	bl	810c52c <arm_mat_sub_f32>
    arm_mat_add_f32(&temp6, &temp8, &kf->P);
 8101ea8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101eac:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101eb0:	681b      	ldr	r3, [r3, #0]
 8101eb2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8101eb6:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8101eba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8101ebe:	4618      	mov	r0, r3
 8101ec0:	f00a fd48 	bl	810c954 <arm_mat_add_f32>


}
 8101ec4:	bf00      	nop
 8101ec6:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8101eca:	46bd      	mov	sp, r7
 8101ecc:	bd80      	pop	{r7, pc}
	...

08101ed0 <voltToAmpere>:
}



float voltToAmpere(float Volt)
{
 8101ed0:	b580      	push	{r7, lr}
 8101ed2:	b084      	sub	sp, #16
 8101ed4:	af00      	add	r7, sp, #0
 8101ed6:	ed87 0a01 	vstr	s0, [r7, #4]
	//float ampere = (Volt-2.47)/0.22;  //a3b RESISTENZA
	//float ampere = Volt*1.25994074 - 3.1119; //a3b MOTORE
	float ampere = (Volt -2.53)/0.8 + 0.095;
 8101eda:	6878      	ldr	r0, [r7, #4]
 8101edc:	f7fe fbbc 	bl	8100658 <__aeabi_f2d>
 8101ee0:	a313      	add	r3, pc, #76	@ (adr r3, 8101f30 <voltToAmpere+0x60>)
 8101ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101ee6:	f7fe fa57 	bl	8100398 <__aeabi_dsub>
 8101eea:	4602      	mov	r2, r0
 8101eec:	460b      	mov	r3, r1
 8101eee:	4610      	mov	r0, r2
 8101ef0:	4619      	mov	r1, r3
 8101ef2:	a311      	add	r3, pc, #68	@ (adr r3, 8101f38 <voltToAmpere+0x68>)
 8101ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101ef8:	f7fe fd30 	bl	810095c <__aeabi_ddiv>
 8101efc:	4602      	mov	r2, r0
 8101efe:	460b      	mov	r3, r1
 8101f00:	4610      	mov	r0, r2
 8101f02:	4619      	mov	r1, r3
 8101f04:	a30e      	add	r3, pc, #56	@ (adr r3, 8101f40 <voltToAmpere+0x70>)
 8101f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f0a:	f7fe fa47 	bl	810039c <__adddf3>
 8101f0e:	4602      	mov	r2, r0
 8101f10:	460b      	mov	r3, r1
 8101f12:	4610      	mov	r0, r2
 8101f14:	4619      	mov	r1, r3
 8101f16:	f7fe feef 	bl	8100cf8 <__aeabi_d2f>
 8101f1a:	4603      	mov	r3, r0
 8101f1c:	60fb      	str	r3, [r7, #12]

	//float ampere = 2.3*Volt - 5.75;   //a4b DA RIVEDERE
	//float ampere = (Volt-2.48)/0.185; //sensore ACS712 05b
	return ampere;
 8101f1e:	68fb      	ldr	r3, [r7, #12]
 8101f20:	ee07 3a90 	vmov	s15, r3
}
 8101f24:	eeb0 0a67 	vmov.f32	s0, s15
 8101f28:	3710      	adds	r7, #16
 8101f2a:	46bd      	mov	sp, r7
 8101f2c:	bd80      	pop	{r7, pc}
 8101f2e:	bf00      	nop
 8101f30:	a3d70a3d 	.word	0xa3d70a3d
 8101f34:	40043d70 	.word	0x40043d70
 8101f38:	9999999a 	.word	0x9999999a
 8101f3c:	3fe99999 	.word	0x3fe99999
 8101f40:	851eb852 	.word	0x851eb852
 8101f44:	3fb851eb 	.word	0x3fb851eb

08101f48 <getSpeed>:



//******************
//FUNZIONE PER VELOCITA DESIDERATA DELLA RUOTA DIETRO, INIZIALMENTE A RAMPA E POI COSTANTE
float getSpeed(float actual_speed) {
 8101f48:	b480      	push	{r7}
 8101f4a:	b085      	sub	sp, #20
 8101f4c:	af00      	add	r7, sp, #0
 8101f4e:	ed87 0a01 	vstr	s0, [r7, #4]
	float ramp_time = 6; //secondi di rampa
 8101f52:	4b13      	ldr	r3, [pc, #76]	@ (8101fa0 <getSpeed+0x58>)
 8101f54:	60fb      	str	r3, [r7, #12]

	//speed è la velocita di regime (costante)
	if (actual_speed < speed) {
 8101f56:	4b13      	ldr	r3, [pc, #76]	@ (8101fa4 <getSpeed+0x5c>)
 8101f58:	edd3 7a00 	vldr	s15, [r3]
 8101f5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8101f60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101f68:	d50f      	bpl.n	8101f8a <getSpeed+0x42>
		return actual_speed + speed * dt / ramp_time;
 8101f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8101fa4 <getSpeed+0x5c>)
 8101f6c:	edd3 7a00 	vldr	s15, [r3]
 8101f70:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8101fa8 <getSpeed+0x60>
 8101f74:	ee67 6a87 	vmul.f32	s13, s15, s14
 8101f78:	edd7 7a03 	vldr	s15, [r7, #12]
 8101f7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101f80:	edd7 7a01 	vldr	s15, [r7, #4]
 8101f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101f88:	e002      	b.n	8101f90 <getSpeed+0x48>
	} else
		return speed;
 8101f8a:	4b06      	ldr	r3, [pc, #24]	@ (8101fa4 <getSpeed+0x5c>)
 8101f8c:	edd3 7a00 	vldr	s15, [r3]
}
 8101f90:	eeb0 0a67 	vmov.f32	s0, s15
 8101f94:	3714      	adds	r7, #20
 8101f96:	46bd      	mov	sp, r7
 8101f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f9c:	4770      	bx	lr
 8101f9e:	bf00      	nop
 8101fa0:	40c00000 	.word	0x40c00000
 8101fa4:	10000014 	.word	0x10000014
 8101fa8:	3c23d70a 	.word	0x3c23d70a
 8101fac:	00000000 	.word	0x00000000

08101fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101fb0:	b5b0      	push	{r4, r5, r7, lr}
 8101fb2:	b096      	sub	sp, #88	@ 0x58
 8101fb4:	af06      	add	r7, sp, #24

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8101fb6:	4b92      	ldr	r3, [pc, #584]	@ (8102200 <main+0x250>)
 8101fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101fbc:	4a90      	ldr	r2, [pc, #576]	@ (8102200 <main+0x250>)
 8101fbe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101fc6:	4b8e      	ldr	r3, [pc, #568]	@ (8102200 <main+0x250>)
 8101fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101fd0:	613b      	str	r3, [r7, #16]
 8101fd2:	693b      	ldr	r3, [r7, #16]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101fd4:	2001      	movs	r0, #1
 8101fd6:	f003 feb1 	bl	8105d3c <HAL_HSEM_ActivateNotification>
	/*
	 Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	 perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 8101fda:	f004 fd3d 	bl	8106a58 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE,
 8101fde:	2201      	movs	r2, #1
 8101fe0:	2102      	movs	r1, #2
 8101fe2:	2000      	movs	r0, #0
 8101fe4:	f004 fcbe 	bl	8106964 <HAL_PWREx_EnterSTOPMode>
	PWR_D2_DOMAIN);
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101fe8:	4b86      	ldr	r3, [pc, #536]	@ (8102204 <main+0x254>)
 8101fea:	681b      	ldr	r3, [r3, #0]
 8101fec:	091b      	lsrs	r3, r3, #4
 8101fee:	f003 030f 	and.w	r3, r3, #15
 8101ff2:	2b07      	cmp	r3, #7
 8101ff4:	d108      	bne.n	8102008 <main+0x58>
 8101ff6:	4b84      	ldr	r3, [pc, #528]	@ (8102208 <main+0x258>)
 8101ff8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8101ffc:	4a82      	ldr	r2, [pc, #520]	@ (8102208 <main+0x258>)
 8101ffe:	f043 0301 	orr.w	r3, r3, #1
 8102002:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8102006:	e007      	b.n	8102018 <main+0x68>
 8102008:	4b7f      	ldr	r3, [pc, #508]	@ (8102208 <main+0x258>)
 810200a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 810200e:	4a7e      	ldr	r2, [pc, #504]	@ (8102208 <main+0x258>)
 8102010:	f043 0301 	orr.w	r3, r3, #1
 8102014:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8102018:	f001 fdbc 	bl	8103b94 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_GPIO_Init();
 810201c:	f001 f8b2 	bl	8103184 <MX_GPIO_Init>
  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */

  arm_fir_init_f32(&fir_instance, FIR_LENGHT, fir_coefficients, fir_state, 1);
 8102020:	2301      	movs	r3, #1
 8102022:	9300      	str	r3, [sp, #0]
 8102024:	4b79      	ldr	r3, [pc, #484]	@ (810220c <main+0x25c>)
 8102026:	4a7a      	ldr	r2, [pc, #488]	@ (8102210 <main+0x260>)
 8102028:	2103      	movs	r1, #3
 810202a:	487a      	ldr	r0, [pc, #488]	@ (8102214 <main+0x264>)
 810202c:	f00a fcfc 	bl	810ca28 <arm_fir_init_f32>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_USART3_UART_Init();
 8102030:	f001 f85c 	bl	81030ec <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8102034:	f000 fdfa 	bl	8102c2c <MX_I2C1_Init>
  MX_TIM1_Init();
 8102038:	f000 fe38 	bl	8102cac <MX_TIM1_Init>
  MX_TIM2_Init();
 810203c:	f000 fee2 	bl	8102e04 <MX_TIM2_Init>
  MX_TIM4_Init();
 8102040:	f000 ffa4 	bl	8102f8c <MX_TIM4_Init>
  MX_ADC1_Init();
 8102044:	f000 fd7a 	bl	8102b3c <MX_ADC1_Init>
  MX_TIM3_Init();
 8102048:	f000 ff2a 	bl	8102ea0 <MX_TIM3_Init>
  MX_TIM8_Init();
 810204c:	f000 fff4 	bl	8103038 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8102050:	4871      	ldr	r0, [pc, #452]	@ (8102218 <main+0x268>)
 8102052:	f007 fcad 	bl	81099b0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8102056:	2100      	movs	r1, #0
 8102058:	4870      	ldr	r0, [pc, #448]	@ (810221c <main+0x26c>)
 810205a:	f007 fd83 	bl	8109b64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 810205e:	2100      	movs	r1, #0
 8102060:	486f      	ldr	r0, [pc, #444]	@ (8102220 <main+0x270>)
 8102062:	f007 fd7f 	bl	8109b64 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim4);
 8102066:	486f      	ldr	r0, [pc, #444]	@ (8102224 <main+0x274>)
 8102068:	f007 fc32 	bl	81098d0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 810206c:	486e      	ldr	r0, [pc, #440]	@ (8102228 <main+0x278>)
 810206e:	f007 fc2f 	bl	81098d0 <HAL_TIM_Base_Start>

	HAL_GPIO_EXTI_Callback(GPIO_PIN_13);//forse da aggiungere anche quello per il bno
 8102072:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8102076:	f001 f941 	bl	81032fc <HAL_GPIO_EXTI_Callback>


	srand(1233);
 810207a:	f240 40d1 	movw	r0, #1233	@ 0x4d1
 810207e:	f00a ff63 	bl	810cf48 <srand>

	//*************************
	//BNO055
	bno055_assignI2C(&hi2c1);
 8102082:	486a      	ldr	r0, [pc, #424]	@ (810222c <main+0x27c>)
 8102084:	f7ff fbfa 	bl	810187c <bno055_assignI2C>
	bno055_setup(); //il BNO055 viene inizializzato con questa funzione
 8102088:	f7ff fa19 	bl	81014be <bno055_setup>

	bno055_setPowerMode(NORMAL_MODE); //Inserire la modalita da impostare
 810208c:	2000      	movs	r0, #0
 810208e:	f7ff fc6b 	bl	8101968 <bno055_setPowerMode>
	PowerMode currentMode = bno055_getPowerMode(); //Metodo per ottenere la modalita impostata
 8102092:	f7ff fc88 	bl	81019a6 <bno055_getPowerMode>
 8102096:	4603      	mov	r3, r0
 8102098:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	printf("Modalita energetica attuale: %d\r\n", currentMode);
 810209c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 81020a0:	4619      	mov	r1, r3
 81020a2:	4863      	ldr	r0, [pc, #396]	@ (8102230 <main+0x280>)
 81020a4:	f00b feac 	bl	810de00 <iprintf>

	//Per angoli di Eulero
	bno055_vector_t eul;
	bno055_setOperationModeNDOF();
 81020a8:	f7ff f9f6 	bl	8101498 <bno055_setOperationModeNDOF>

	//calibrazione sensore???
	bno055_calibration_state_t cal = bno055_getCalibrationState();
 81020ac:	f7ff fa24 	bl	81014f8 <bno055_getCalibrationState>
 81020b0:	4603      	mov	r3, r0
 81020b2:	617b      	str	r3, [r7, #20]
	//		cal.gyro, cal.accel, cal.mag, cal.sys);
	//*************************

	//*************************
	//PID motore ruota dietro
	init_PID(&pid_speed, dt, V_MAX, -V_MAX);
 81020b4:	eddf 7a5f 	vldr	s15, [pc, #380]	@ 8102234 <main+0x284>
 81020b8:	eebb 1a02 	vmov.f32	s2, #178	@ 0xc1900000 -18.0
 81020bc:	eef3 0a02 	vmov.f32	s1, #50	@ 0x41900000  18.0
 81020c0:	eeb0 0a67 	vmov.f32	s0, s15
 81020c4:	485c      	ldr	r0, [pc, #368]	@ (8102238 <main+0x288>)
 81020c6:	f7ff f91f 	bl	8101308 <init_PID>
	tune_PID(&pid_speed, 0.001, 0.05, 0);
 81020ca:	ed9f 1a5c 	vldr	s2, [pc, #368]	@ 810223c <main+0x28c>
 81020ce:	eddf 0a5c 	vldr	s1, [pc, #368]	@ 8102240 <main+0x290>
 81020d2:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 8102244 <main+0x294>
 81020d6:	4858      	ldr	r0, [pc, #352]	@ (8102238 <main+0x288>)
 81020d8:	f7ff f937 	bl	810134a <tune_PID>
	//*************************

	//*************************
	//PID angolo roll
	init_PID(&pid_roll, dt, 3*K, -3*K);
 81020dc:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 8102234 <main+0x284>
 81020e0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8102248 <main+0x298>
 81020e4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 81020e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81020ec:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8102248 <main+0x298>
 81020f0:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 81020f4:	ee26 7a87 	vmul.f32	s14, s13, s14
 81020f8:	eeb0 1a47 	vmov.f32	s2, s14
 81020fc:	eef0 0a67 	vmov.f32	s1, s15
 8102100:	eeb0 0a46 	vmov.f32	s0, s12
 8102104:	4851      	ldr	r0, [pc, #324]	@ (810224c <main+0x29c>)
 8102106:	f7ff f8ff 	bl	8101308 <init_PID>
	tune_PID(&pid_roll, 40, 9, 0.5);
 810210a:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 810210e:	eef2 0a02 	vmov.f32	s1, #34	@ 0x41100000  9.0
 8102112:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 8102250 <main+0x2a0>
 8102116:	484d      	ldr	r0, [pc, #308]	@ (810224c <main+0x29c>)
 8102118:	f7ff f917 	bl	810134a <tune_PID>
	//*************************

	//*************************
	//PID coppia manubrio
	init_PID(&pid_steering_torque, dt, V_MAX, -V_MAX);
 810211c:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8102234 <main+0x284>
 8102120:	eebb 1a02 	vmov.f32	s2, #178	@ 0xc1900000 -18.0
 8102124:	eef3 0a02 	vmov.f32	s1, #50	@ 0x41900000  18.0
 8102128:	eeb0 0a67 	vmov.f32	s0, s15
 810212c:	4849      	ldr	r0, [pc, #292]	@ (8102254 <main+0x2a4>)
 810212e:	f7ff f8eb 	bl	8101308 <init_PID>
	tune_PID(&pid_steering_torque, 30000, 20000*5, 0);
 8102132:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 810223c <main+0x28c>
 8102136:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8102258 <main+0x2a8>
 810213a:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 810225c <main+0x2ac>
 810213e:	4845      	ldr	r0, [pc, #276]	@ (8102254 <main+0x2a4>)
 8102140:	f7ff f903 	bl	810134a <tune_PID>
	//*************************


	//*************************
	//Filtro di Kalman per corrente
	arm_mat_init_f32(&u, control_dim, 1, (float32_t*) &u_data); // Input di controllo
 8102144:	4b46      	ldr	r3, [pc, #280]	@ (8102260 <main+0x2b0>)
 8102146:	2201      	movs	r2, #1
 8102148:	2101      	movs	r1, #1
 810214a:	4846      	ldr	r0, [pc, #280]	@ (8102264 <main+0x2b4>)
 810214c:	f00a fbfe 	bl	810c94c <arm_mat_init_f32>
	arm_mat_init_f32(&z, measure_dim, 1, (float32_t*) &z_data);  // Misurazione
 8102150:	4b45      	ldr	r3, [pc, #276]	@ (8102268 <main+0x2b8>)
 8102152:	2201      	movs	r2, #1
 8102154:	2102      	movs	r1, #2
 8102156:	4845      	ldr	r0, [pc, #276]	@ (810226c <main+0x2bc>)
 8102158:	f00a fbf8 	bl	810c94c <arm_mat_init_f32>
	kalman_filter_init(&kf, &A_data, &B_data, &H_data, &Q_data, &R_data,
 810215c:	4b44      	ldr	r3, [pc, #272]	@ (8102270 <main+0x2c0>)
 810215e:	9304      	str	r3, [sp, #16]
 8102160:	4b44      	ldr	r3, [pc, #272]	@ (8102274 <main+0x2c4>)
 8102162:	9303      	str	r3, [sp, #12]
 8102164:	4b44      	ldr	r3, [pc, #272]	@ (8102278 <main+0x2c8>)
 8102166:	9302      	str	r3, [sp, #8]
 8102168:	4b44      	ldr	r3, [pc, #272]	@ (810227c <main+0x2cc>)
 810216a:	9301      	str	r3, [sp, #4]
 810216c:	4b44      	ldr	r3, [pc, #272]	@ (8102280 <main+0x2d0>)
 810216e:	9300      	str	r3, [sp, #0]
 8102170:	4b44      	ldr	r3, [pc, #272]	@ (8102284 <main+0x2d4>)
 8102172:	4a45      	ldr	r2, [pc, #276]	@ (8102288 <main+0x2d8>)
 8102174:	4945      	ldr	r1, [pc, #276]	@ (810228c <main+0x2dc>)
 8102176:	4846      	ldr	r0, [pc, #280]	@ (8102290 <main+0x2e0>)
 8102178:	f7ff fc28 	bl	81019cc <kalman_filter_init>
			&P_data, &K_data, &x_data);
	 u_data[0]=-dt*lambda*b/(1-dt*lambda);
 810217c:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8102234 <main+0x284>
 8102180:	eef1 7a67 	vneg.f32	s15, s15
 8102184:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8102294 <main+0x2e4>
 8102188:	ee67 7a87 	vmul.f32	s15, s15, s14
 810218c:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8102298 <main+0x2e8>
 8102190:	ee67 6a87 	vmul.f32	s13, s15, s14
 8102194:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8102234 <main+0x284>
 8102198:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 8102294 <main+0x2e4>
 810219c:	ee67 7a27 	vmul.f32	s15, s14, s15
 81021a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81021a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 81021a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81021ac:	4b2c      	ldr	r3, [pc, #176]	@ (8102260 <main+0x2b0>)
 81021ae:	edc3 7a00 	vstr	s15, [r3]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (flag_Tc == 1) {
 81021b2:	4b3a      	ldr	r3, [pc, #232]	@ (810229c <main+0x2ec>)
 81021b4:	edd3 7a00 	vldr	s15, [r3]
 81021b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81021bc:	eef4 7a47 	vcmp.f32	s15, s14
 81021c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81021c4:	d1f5      	bne.n	81021b2 <main+0x202>
			flag_Tc = 0;
 81021c6:	4b35      	ldr	r3, [pc, #212]	@ (810229c <main+0x2ec>)
 81021c8:	f04f 0200 	mov.w	r2, #0
 81021cc:	601a      	str	r2, [r3, #0]
			//#####################################
			//##             BNO055			   ##
			//#####################################
			//*******************************

			flag_BNO055_Data_Ready = 1; //perche non va mai a 1 non ho capito perche
 81021ce:	4b34      	ldr	r3, [pc, #208]	@ (81022a0 <main+0x2f0>)
 81021d0:	2201      	movs	r2, #1
 81021d2:	601a      	str	r2, [r3, #0]
			if (flag_BNO055_Data_Ready == 1) {
 81021d4:	4b32      	ldr	r3, [pc, #200]	@ (81022a0 <main+0x2f0>)
 81021d6:	681b      	ldr	r3, [r3, #0]
 81021d8:	2b01      	cmp	r3, #1
 81021da:	d1ea      	bne.n	81021b2 <main+0x202>
				flag_BNO055_Data_Ready = 0;
 81021dc:	4b30      	ldr	r3, [pc, #192]	@ (81022a0 <main+0x2f0>)
 81021de:	2200      	movs	r2, #0
 81021e0:	601a      	str	r2, [r3, #0]

					bno055_writeData(BNO055_SYS_TRIGGER, 0x40); //reset int
 81021e2:	2140      	movs	r1, #64	@ 0x40
 81021e4:	203f      	movs	r0, #63	@ 0x3f
 81021e6:	f7ff fb65 	bl	81018b4 <bno055_writeData>
					bno055_calibration_state_t cal = bno055_getCalibrationState();
 81021ea:	f7ff f985 	bl	81014f8 <bno055_getCalibrationState>
 81021ee:	4603      	mov	r3, r0
 81021f0:	60fb      	str	r3, [r7, #12]


				if (cal.sys != 3)
 81021f2:	7b3b      	ldrb	r3, [r7, #12]
 81021f4:	2b03      	cmp	r3, #3
 81021f6:	d057      	beq.n	81022a8 <main+0x2f8>
				{
					// printf("GYR : %+2.2d | ACC : %+2.2d | MAG : %+2.2d | %+2.2d\r\n",
					// cal.gyro, cal.accel, cal.mag, cal.sys);
					bno055_calibrated = 1;
 81021f8:	4b2a      	ldr	r3, [pc, #168]	@ (81022a4 <main+0x2f4>)
 81021fa:	2201      	movs	r2, #1
 81021fc:	601a      	str	r2, [r3, #0]
 81021fe:	e056      	b.n	81022ae <main+0x2fe>
 8102200:	58024400 	.word	0x58024400
 8102204:	e000ed00 	.word	0xe000ed00
 8102208:	58026400 	.word	0x58026400
 810220c:	100006e0 	.word	0x100006e0
 8102210:	1000008c 	.word	0x1000008c
 8102214:	100006cc 	.word	0x100006cc
 8102218:	1000038c 	.word	0x1000038c
 810221c:	10000340 	.word	0x10000340
 8102220:	100003d8 	.word	0x100003d8
 8102224:	10000424 	.word	0x10000424
 8102228:	10000470 	.word	0x10000470
 810222c:	100002ec 	.word	0x100002ec
 8102230:	08111770 	.word	0x08111770
 8102234:	3c23d70a 	.word	0x3c23d70a
 8102238:	10000550 	.word	0x10000550
 810223c:	00000000 	.word	0x00000000
 8102240:	3d4ccccd 	.word	0x3d4ccccd
 8102244:	3a83126f 	.word	0x3a83126f
 8102248:	3cbfb15b 	.word	0x3cbfb15b
 810224c:	10000590 	.word	0x10000590
 8102250:	42200000 	.word	0x42200000
 8102254:	100005b0 	.word	0x100005b0
 8102258:	47c35000 	.word	0x47c35000
 810225c:	46ea6000 	.word	0x46ea6000
 8102260:	100006bc 	.word	0x100006bc
 8102264:	100006ac 	.word	0x100006ac
 8102268:	100006c0 	.word	0x100006c0
 810226c:	100006b4 	.word	0x100006b4
 8102270:	100006a4 	.word	0x100006a4
 8102274:	1000007c 	.word	0x1000007c
 8102278:	1000006c 	.word	0x1000006c
 810227c:	1000005c 	.word	0x1000005c
 8102280:	1000004c 	.word	0x1000004c
 8102284:	1000003c 	.word	0x1000003c
 8102288:	10000034 	.word	0x10000034
 810228c:	10000024 	.word	0x10000024
 8102290:	10000664 	.word	0x10000664
 8102294:	c93b6280 	.word	0xc93b6280
 8102298:	401e12d7 	.word	0x401e12d7
 810229c:	100005d4 	.word	0x100005d4
 81022a0:	100005d0 	.word	0x100005d0
 81022a4:	1000060c 	.word	0x1000060c
				}
				else bno055_calibrated=1;
 81022a8:	4bc7      	ldr	r3, [pc, #796]	@ (81025c8 <main+0x618>)
 81022aa:	2201      	movs	r2, #1
 81022ac:	601a      	str	r2, [r3, #0]

				//bno055_calibrated = 1; //da togliere
				if (bno055_calibrated) {
 81022ae:	4bc6      	ldr	r3, [pc, #792]	@ (81025c8 <main+0x618>)
 81022b0:	681b      	ldr	r3, [r3, #0]
 81022b2:	2b00      	cmp	r3, #0
 81022b4:	f43f af7d 	beq.w	81021b2 <main+0x202>
					eul = bno055_getVectorEuler();
 81022b8:	f7ff fa9c 	bl	81017f4 <bno055_getVectorEuler>
 81022bc:	eeb0 4a40 	vmov.f32	s8, s0
 81022c0:	eef0 4a60 	vmov.f32	s9, s1
 81022c4:	eeb0 5a41 	vmov.f32	s10, s2
 81022c8:	eef0 5a61 	vmov.f32	s11, s3
 81022cc:	eeb0 6a42 	vmov.f32	s12, s4
 81022d0:	eef0 6a62 	vmov.f32	s13, s5
 81022d4:	eeb0 7a43 	vmov.f32	s14, s6
 81022d8:	eef0 7a63 	vmov.f32	s15, s7
 81022dc:	ed87 4b06 	vstr	d4, [r7, #24]
 81022e0:	ed87 5b08 	vstr	d5, [r7, #32]
 81022e4:	ed87 6b0a 	vstr	d6, [r7, #40]	@ 0x28
 81022e8:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
					//stampa angoli eulero

					//printf("Yaw: %+2.2f Roll: %+2.2f Pitch: %+2.2f \r\n", eul.x, eul.y, eul.z);
					roll = eul.y;
 81022ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 81022f0:	4610      	mov	r0, r2
 81022f2:	4619      	mov	r1, r3
 81022f4:	f7fe fd00 	bl	8100cf8 <__aeabi_d2f>
 81022f8:	4603      	mov	r3, r0
 81022fa:	4ab4      	ldr	r2, [pc, #720]	@ (81025cc <main+0x61c>)
 81022fc:	6013      	str	r3, [r2, #0]
					//#####################################
					//##          RUOTA DIETRO		   ##
					//#####################################
					//*******************************
					//Ottengo velocita ruota dietro
					counts = (double) TIM4->CNT - (TIM4->ARR) / 2;
 81022fe:	4bb4      	ldr	r3, [pc, #720]	@ (81025d0 <main+0x620>)
 8102300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102302:	4618      	mov	r0, r3
 8102304:	f7fe f986 	bl	8100614 <__aeabi_ui2d>
 8102308:	4604      	mov	r4, r0
 810230a:	460d      	mov	r5, r1
 810230c:	4bb0      	ldr	r3, [pc, #704]	@ (81025d0 <main+0x620>)
 810230e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102310:	085b      	lsrs	r3, r3, #1
 8102312:	4618      	mov	r0, r3
 8102314:	f7fe f97e 	bl	8100614 <__aeabi_ui2d>
 8102318:	4602      	mov	r2, r0
 810231a:	460b      	mov	r3, r1
 810231c:	4620      	mov	r0, r4
 810231e:	4629      	mov	r1, r5
 8102320:	f7fe f83a 	bl	8100398 <__aeabi_dsub>
 8102324:	4602      	mov	r2, r0
 8102326:	460b      	mov	r3, r1
 8102328:	4610      	mov	r0, r2
 810232a:	4619      	mov	r1, r3
 810232c:	f7fe fce4 	bl	8100cf8 <__aeabi_d2f>
 8102330:	4603      	mov	r3, r0
 8102332:	4aa8      	ldr	r2, [pc, #672]	@ (81025d4 <main+0x624>)
 8102334:	6013      	str	r3, [r2, #0]
					TIM4->CNT = (TIM4->ARR) / 2;
 8102336:	4ba6      	ldr	r3, [pc, #664]	@ (81025d0 <main+0x620>)
 8102338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810233a:	4aa5      	ldr	r2, [pc, #660]	@ (81025d0 <main+0x620>)
 810233c:	085b      	lsrs	r3, r3, #1
 810233e:	6253      	str	r3, [r2, #36]	@ 0x24


					delta_angle_degree = (counts * 360) / (13 * 4 * 66);
 8102340:	4ba4      	ldr	r3, [pc, #656]	@ (81025d4 <main+0x624>)
 8102342:	edd3 7a00 	vldr	s15, [r3]
 8102346:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 81025d8 <main+0x628>
 810234a:	ee27 7a87 	vmul.f32	s14, s15, s14
 810234e:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 81025dc <main+0x62c>
 8102352:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102356:	4ba2      	ldr	r3, [pc, #648]	@ (81025e0 <main+0x630>)
 8102358:	edc3 7a00 	vstr	s15, [r3]
					angle_degree += delta_angle_degree;
 810235c:	4ba1      	ldr	r3, [pc, #644]	@ (81025e4 <main+0x634>)
 810235e:	ed93 7a00 	vldr	s14, [r3]
 8102362:	4b9f      	ldr	r3, [pc, #636]	@ (81025e0 <main+0x630>)
 8102364:	edd3 7a00 	vldr	s15, [r3]
 8102368:	ee77 7a27 	vadd.f32	s15, s14, s15
 810236c:	4b9d      	ldr	r3, [pc, #628]	@ (81025e4 <main+0x634>)
 810236e:	edc3 7a00 	vstr	s15, [r3]
					speed_degsec = delta_angle_degree / dt;
 8102372:	4b9b      	ldr	r3, [pc, #620]	@ (81025e0 <main+0x630>)
 8102374:	ed93 7a00 	vldr	s14, [r3]
 8102378:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 81025e8 <main+0x638>
 810237c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102380:	4b9a      	ldr	r3, [pc, #616]	@ (81025ec <main+0x63c>)
 8102382:	edc3 7a00 	vstr	s15, [r3]
					speed_rpm = -(DegreeSec2RPM(speed_degsec) / 28 * 18); //wtf perche il meno???
 8102386:	4b99      	ldr	r3, [pc, #612]	@ (81025ec <main+0x63c>)
 8102388:	edd3 7a00 	vldr	s15, [r3]
 810238c:	eeb0 0a67 	vmov.f32	s0, s15
 8102390:	f7fe fec8 	bl	8101124 <DegreeSec2RPM>
 8102394:	eeb0 7a40 	vmov.f32	s14, s0
 8102398:	eef3 6a0c 	vmov.f32	s13, #60	@ 0x41e00000  28.0
 810239c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81023a0:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 81023a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 81023a8:	eef1 7a67 	vneg.f32	s15, s15
 81023ac:	4b90      	ldr	r3, [pc, #576]	@ (81025f0 <main+0x640>)
 81023ae:	edc3 7a00 	vstr	s15, [r3]
					//*******************************

					//******************************+
					//PID ruota dietro
					desired_speed_metsec = getSpeed(desired_speed_metsec); //funzione che crea un riferimento a rampa e poi costante per la velocita della ruota dietro
 81023b2:	4b90      	ldr	r3, [pc, #576]	@ (81025f4 <main+0x644>)
 81023b4:	edd3 7a00 	vldr	s15, [r3]
 81023b8:	eeb0 0a67 	vmov.f32	s0, s15
 81023bc:	f7ff fdc4 	bl	8101f48 <getSpeed>
 81023c0:	eef0 7a40 	vmov.f32	s15, s0
 81023c4:	4b8b      	ldr	r3, [pc, #556]	@ (81025f4 <main+0x644>)
 81023c6:	edc3 7a00 	vstr	s15, [r3]
					desired_speed_rpm = DegreeSec2RPM(
 81023ca:	4b8a      	ldr	r3, [pc, #552]	@ (81025f4 <main+0x644>)
 81023cc:	edd3 7a00 	vldr	s15, [r3]
 81023d0:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 81023d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81023d8:	eeb0 0a47 	vmov.f32	s0, s14
 81023dc:	f7fe fea2 	bl	8101124 <DegreeSec2RPM>
 81023e0:	eef0 7a40 	vmov.f32	s15, s0
 81023e4:	4b84      	ldr	r3, [pc, #528]	@ (81025f8 <main+0x648>)
 81023e6:	edc3 7a00 	vstr	s15, [r3]
							desired_speed_metsec / radius);

					u_back_wheel = PID_controller(&pid_speed, speed_rpm,
 81023ea:	4b81      	ldr	r3, [pc, #516]	@ (81025f0 <main+0x640>)
 81023ec:	edd3 7a00 	vldr	s15, [r3]
 81023f0:	4b81      	ldr	r3, [pc, #516]	@ (81025f8 <main+0x648>)
 81023f2:	ed93 7a00 	vldr	s14, [r3]
 81023f6:	eef0 0a47 	vmov.f32	s1, s14
 81023fa:	eeb0 0a67 	vmov.f32	s0, s15
 81023fe:	487f      	ldr	r0, [pc, #508]	@ (81025fc <main+0x64c>)
 8102400:	f7fe ffbc 	bl	810137c <PID_controller>
 8102404:	eef0 7a40 	vmov.f32	s15, s0
 8102408:	4b7d      	ldr	r3, [pc, #500]	@ (8102600 <main+0x650>)
 810240a:	edc3 7a00 	vstr	s15, [r3]
							desired_speed_rpm);
					duty_back_wheel = Voltage2Duty(u_back_wheel);
 810240e:	4b7c      	ldr	r3, [pc, #496]	@ (8102600 <main+0x650>)
 8102410:	edd3 7a00 	vldr	s15, [r3]
 8102414:	eeb0 0a67 	vmov.f32	s0, s15
 8102418:	f7fe fea4 	bl	8101164 <Voltage2Duty>
 810241c:	eef0 7a40 	vmov.f32	s15, s0
 8102420:	4b78      	ldr	r3, [pc, #480]	@ (8102604 <main+0x654>)
 8102422:	edc3 7a00 	vstr	s15, [r3]
					direction_back_wheel = Ref2Direction(desired_speed_rpm); //in teoria non serve perche la direzione è sempre in avanti
 8102426:	4b74      	ldr	r3, [pc, #464]	@ (81025f8 <main+0x648>)
 8102428:	edd3 7a00 	vldr	s15, [r3]
 810242c:	eeb0 0a67 	vmov.f32	s0, s15
 8102430:	f7fe feda 	bl	81011e8 <Ref2Direction>
 8102434:	4603      	mov	r3, r0
 8102436:	461a      	mov	r2, r3
 8102438:	4b73      	ldr	r3, [pc, #460]	@ (8102608 <main+0x658>)
 810243a:	601a      	str	r2, [r3, #0]
					set_PWM_and_dir_back_wheel(duty_back_wheel,
 810243c:	4b71      	ldr	r3, [pc, #452]	@ (8102604 <main+0x654>)
 810243e:	edd3 7a00 	vldr	s15, [r3]
 8102442:	4b71      	ldr	r3, [pc, #452]	@ (8102608 <main+0x658>)
 8102444:	681b      	ldr	r3, [r3, #0]
 8102446:	b2db      	uxtb	r3, r3
 8102448:	4618      	mov	r0, r3
 810244a:	eeb0 0a67 	vmov.f32	s0, s15
 810244e:	f7fe fee3 	bl	8101218 <set_PWM_and_dir_back_wheel>

					//#####################################
					//##          PID YAW RATE		   ##
					//#####################################
					//******************************
					desired_yaw_rate = 0;
 8102452:	4b6e      	ldr	r3, [pc, #440]	@ (810260c <main+0x65c>)
 8102454:	f04f 0200 	mov.w	r2, #0
 8102458:	601a      	str	r2, [r3, #0]
					desired_roll = PID_controller(&pid_yaw_rate, yaw_rate,
 810245a:	4b6d      	ldr	r3, [pc, #436]	@ (8102610 <main+0x660>)
 810245c:	edd3 7a00 	vldr	s15, [r3]
 8102460:	4b6a      	ldr	r3, [pc, #424]	@ (810260c <main+0x65c>)
 8102462:	ed93 7a00 	vldr	s14, [r3]
 8102466:	eef0 0a47 	vmov.f32	s1, s14
 810246a:	eeb0 0a67 	vmov.f32	s0, s15
 810246e:	4869      	ldr	r0, [pc, #420]	@ (8102614 <main+0x664>)
 8102470:	f7fe ff84 	bl	810137c <PID_controller>
 8102474:	eef0 7a40 	vmov.f32	s15, s0
 8102478:	4b67      	ldr	r3, [pc, #412]	@ (8102618 <main+0x668>)
 810247a:	edc3 7a00 	vstr	s15, [r3]
					//******************************


					//prima di usare l'encoder

					desired_roll = 0.88;
 810247e:	4b66      	ldr	r3, [pc, #408]	@ (8102618 <main+0x668>)
 8102480:	4a66      	ldr	r2, [pc, #408]	@ (810261c <main+0x66c>)
 8102482:	601a      	str	r2, [r3, #0]
					//******************************


					//ora con encoder
					//ottengo i counts dell'encoder
					counts_steer = (double) TIM8->CNT - (TIM8->ARR) / 2; //credo cosi hai sia i conteggi negativi che positivi
 8102484:	4b66      	ldr	r3, [pc, #408]	@ (8102620 <main+0x670>)
 8102486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102488:	4618      	mov	r0, r3
 810248a:	f7fe f8c3 	bl	8100614 <__aeabi_ui2d>
 810248e:	4604      	mov	r4, r0
 8102490:	460d      	mov	r5, r1
 8102492:	4b63      	ldr	r3, [pc, #396]	@ (8102620 <main+0x670>)
 8102494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102496:	085b      	lsrs	r3, r3, #1
 8102498:	4618      	mov	r0, r3
 810249a:	f7fe f8bb 	bl	8100614 <__aeabi_ui2d>
 810249e:	4602      	mov	r2, r0
 81024a0:	460b      	mov	r3, r1
 81024a2:	4620      	mov	r0, r4
 81024a4:	4629      	mov	r1, r5
 81024a6:	f7fd ff77 	bl	8100398 <__aeabi_dsub>
 81024aa:	4602      	mov	r2, r0
 81024ac:	460b      	mov	r3, r1
 81024ae:	4610      	mov	r0, r2
 81024b0:	4619      	mov	r1, r3
 81024b2:	f7fe fc21 	bl	8100cf8 <__aeabi_d2f>
 81024b6:	4603      	mov	r3, r0
 81024b8:	4a5a      	ldr	r2, [pc, #360]	@ (8102624 <main+0x674>)
 81024ba:	6013      	str	r3, [r2, #0]
					TIM8->CNT = (TIM8->ARR) / 2;
 81024bc:	4b58      	ldr	r3, [pc, #352]	@ (8102620 <main+0x670>)
 81024be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81024c0:	4a57      	ldr	r2, [pc, #348]	@ (8102620 <main+0x670>)
 81024c2:	085b      	lsrs	r3, r3, #1
 81024c4:	6253      	str	r3, [r2, #36]	@ 0x24


					//calcolo l'angolo dello sterzo
					delta_angle_degree_steer = (counts_steer * 360) / (13 * 4 * 66);
 81024c6:	4b57      	ldr	r3, [pc, #348]	@ (8102624 <main+0x674>)
 81024c8:	edd3 7a00 	vldr	s15, [r3]
 81024cc:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 81025d8 <main+0x628>
 81024d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 81024d4:	eddf 6a41 	vldr	s13, [pc, #260]	@ 81025dc <main+0x62c>
 81024d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81024dc:	4b52      	ldr	r3, [pc, #328]	@ (8102628 <main+0x678>)
 81024de:	edc3 7a00 	vstr	s15, [r3]
					angle_steer = angle_steer + delta_angle_degree_steer;  //angolo sterzo
 81024e2:	4b52      	ldr	r3, [pc, #328]	@ (810262c <main+0x67c>)
 81024e4:	ed93 7a00 	vldr	s14, [r3]
 81024e8:	4b4f      	ldr	r3, [pc, #316]	@ (8102628 <main+0x678>)
 81024ea:	edd3 7a00 	vldr	s15, [r3]
 81024ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 81024f2:	4b4e      	ldr	r3, [pc, #312]	@ (810262c <main+0x67c>)
 81024f4:	edc3 7a00 	vstr	s15, [r3]
					speed_degsec_steer = delta_angle_degree / dt;  //velocita sterzo
 81024f8:	4b39      	ldr	r3, [pc, #228]	@ (81025e0 <main+0x630>)
 81024fa:	ed93 7a00 	vldr	s14, [r3]
 81024fe:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 81025e8 <main+0x638>
 8102502:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102506:	4b4a      	ldr	r3, [pc, #296]	@ (8102630 <main+0x680>)
 8102508:	edc3 7a00 	vstr	s15, [r3]
					//#####################################
					//##         LOW-PASS FILTER	   	   ##
					//#####################################
					//******************************
					//filtro passa basso 1/s+1 discretizzato con Matlab
					desired_filtered_torque = 0.99 * old_desired_filtered_torque
 810250c:	4b49      	ldr	r3, [pc, #292]	@ (8102634 <main+0x684>)
 810250e:	681b      	ldr	r3, [r3, #0]
 8102510:	4618      	mov	r0, r3
 8102512:	f7fe f8a1 	bl	8100658 <__aeabi_f2d>
 8102516:	a328      	add	r3, pc, #160	@ (adr r3, 81025b8 <main+0x608>)
 8102518:	e9d3 2300 	ldrd	r2, r3, [r3]
 810251c:	f7fe f8f4 	bl	8100708 <__aeabi_dmul>
 8102520:	4602      	mov	r2, r0
 8102522:	460b      	mov	r3, r1
 8102524:	4614      	mov	r4, r2
 8102526:	461d      	mov	r5, r3
							+ 0.00995 * old_desired_torque;
 8102528:	4b43      	ldr	r3, [pc, #268]	@ (8102638 <main+0x688>)
 810252a:	681b      	ldr	r3, [r3, #0]
 810252c:	4618      	mov	r0, r3
 810252e:	f7fe f893 	bl	8100658 <__aeabi_f2d>
 8102532:	a323      	add	r3, pc, #140	@ (adr r3, 81025c0 <main+0x610>)
 8102534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102538:	f7fe f8e6 	bl	8100708 <__aeabi_dmul>
 810253c:	4602      	mov	r2, r0
 810253e:	460b      	mov	r3, r1
 8102540:	4620      	mov	r0, r4
 8102542:	4629      	mov	r1, r5
 8102544:	f7fd ff2a 	bl	810039c <__adddf3>
 8102548:	4602      	mov	r2, r0
 810254a:	460b      	mov	r3, r1
 810254c:	4610      	mov	r0, r2
 810254e:	4619      	mov	r1, r3
 8102550:	f7fe fbd2 	bl	8100cf8 <__aeabi_d2f>
 8102554:	4603      	mov	r3, r0
					desired_filtered_torque = 0.99 * old_desired_filtered_torque
 8102556:	4a39      	ldr	r2, [pc, #228]	@ (810263c <main+0x68c>)
 8102558:	6013      	str	r3, [r2, #0]
					old_desired_torque = desired_torque;
 810255a:	4b39      	ldr	r3, [pc, #228]	@ (8102640 <main+0x690>)
 810255c:	681b      	ldr	r3, [r3, #0]
 810255e:	4a36      	ldr	r2, [pc, #216]	@ (8102638 <main+0x688>)
 8102560:	6013      	str	r3, [r2, #0]
					old_desired_filtered_torque = desired_filtered_torque;
 8102562:	4b36      	ldr	r3, [pc, #216]	@ (810263c <main+0x68c>)
 8102564:	681b      	ldr	r3, [r3, #0]
 8102566:	4a33      	ldr	r2, [pc, #204]	@ (8102634 <main+0x684>)
 8102568:	6013      	str	r3, [r2, #0]
					//#####################################
					//##            STERZO			   ##
					//#####################################
					//******************************
					//Calcolo valore corrente
					HAL_ADC_Start(&hadc1);
 810256a:	4836      	ldr	r0, [pc, #216]	@ (8102644 <main+0x694>)
 810256c:	f001 ffc8 	bl	8104500 <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc1, timeout);
 8102570:	4b35      	ldr	r3, [pc, #212]	@ (8102648 <main+0x698>)
 8102572:	681b      	ldr	r3, [r3, #0]
 8102574:	4619      	mov	r1, r3
 8102576:	4833      	ldr	r0, [pc, #204]	@ (8102644 <main+0x694>)
 8102578:	f002 f8c0 	bl	81046fc <HAL_ADC_PollForConversion>
					CountValue = HAL_ADC_GetValue(&hadc1);
 810257c:	4831      	ldr	r0, [pc, #196]	@ (8102644 <main+0x694>)
 810257e:	f002 f9b1 	bl	81048e4 <HAL_ADC_GetValue>
 8102582:	ee07 0a90 	vmov	s15, r0
 8102586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810258a:	4b30      	ldr	r3, [pc, #192]	@ (810264c <main+0x69c>)
 810258c:	edc3 7a00 	vstr	s15, [r3]
					volt = ((float) CountValue) * Vref / (resolution);
 8102590:	4b2e      	ldr	r3, [pc, #184]	@ (810264c <main+0x69c>)
 8102592:	ed93 7a00 	vldr	s14, [r3]
 8102596:	4b2e      	ldr	r3, [pc, #184]	@ (8102650 <main+0x6a0>)
 8102598:	edd3 7a00 	vldr	s15, [r3]
 810259c:	ee67 6a27 	vmul.f32	s13, s14, s15
 81025a0:	4b2c      	ldr	r3, [pc, #176]	@ (8102654 <main+0x6a4>)
 81025a2:	ed93 7a00 	vldr	s14, [r3]
 81025a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81025aa:	4b2b      	ldr	r3, [pc, #172]	@ (8102658 <main+0x6a8>)
 81025ac:	edc3 7a00 	vstr	s15, [r3]
					HAL_ADC_Stop(&hadc1);
 81025b0:	4824      	ldr	r0, [pc, #144]	@ (8102644 <main+0x694>)
 81025b2:	f002 f86f 	bl	8104694 <HAL_ADC_Stop>
 81025b6:	e051      	b.n	810265c <main+0x6ac>
 81025b8:	7ae147ae 	.word	0x7ae147ae
 81025bc:	3fefae14 	.word	0x3fefae14
 81025c0:	64c2f838 	.word	0x64c2f838
 81025c4:	3f8460aa 	.word	0x3f8460aa
 81025c8:	1000060c 	.word	0x1000060c
 81025cc:	10000640 	.word	0x10000640
 81025d0:	40000800 	.word	0x40000800
 81025d4:	100005d8 	.word	0x100005d8
 81025d8:	43b40000 	.word	0x43b40000
 81025dc:	45568000 	.word	0x45568000
 81025e0:	100005e8 	.word	0x100005e8
 81025e4:	100005ec 	.word	0x100005ec
 81025e8:	3c23d70a 	.word	0x3c23d70a
 81025ec:	100005f0 	.word	0x100005f0
 81025f0:	100005f4 	.word	0x100005f4
 81025f4:	100005f8 	.word	0x100005f8
 81025f8:	100005fc 	.word	0x100005fc
 81025fc:	10000550 	.word	0x10000550
 8102600:	10000600 	.word	0x10000600
 8102604:	10000604 	.word	0x10000604
 8102608:	10000608 	.word	0x10000608
 810260c:	1000061c 	.word	0x1000061c
 8102610:	1000063c 	.word	0x1000063c
 8102614:	10000570 	.word	0x10000570
 8102618:	10000620 	.word	0x10000620
 810261c:	3f6147ae 	.word	0x3f6147ae
 8102620:	40010400 	.word	0x40010400
 8102624:	100005dc 	.word	0x100005dc
 8102628:	100005e0 	.word	0x100005e0
 810262c:	100005e4 	.word	0x100005e4
 8102630:	10000610 	.word	0x10000610
 8102634:	1000062c 	.word	0x1000062c
 8102638:	10000630 	.word	0x10000630
 810263c:	10000628 	.word	0x10000628
 8102640:	10000624 	.word	0x10000624
 8102644:	10000288 	.word	0x10000288
 8102648:	10000018 	.word	0x10000018
 810264c:	10000634 	.word	0x10000634
 8102650:	10000020 	.word	0x10000020
 8102654:	1000001c 	.word	0x1000001c
 8102658:	10000638 	.word	0x10000638
					VoltSens = volt * 1.524 - 0.1018;
 810265c:	4bb0      	ldr	r3, [pc, #704]	@ (8102920 <main+0x970>)
 810265e:	681b      	ldr	r3, [r3, #0]
 8102660:	4618      	mov	r0, r3
 8102662:	f7fd fff9 	bl	8100658 <__aeabi_f2d>
 8102666:	a3a2      	add	r3, pc, #648	@ (adr r3, 81028f0 <main+0x940>)
 8102668:	e9d3 2300 	ldrd	r2, r3, [r3]
 810266c:	f7fe f84c 	bl	8100708 <__aeabi_dmul>
 8102670:	4602      	mov	r2, r0
 8102672:	460b      	mov	r3, r1
 8102674:	4610      	mov	r0, r2
 8102676:	4619      	mov	r1, r3
 8102678:	a39f      	add	r3, pc, #636	@ (adr r3, 81028f8 <main+0x948>)
 810267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810267e:	f7fd fe8b 	bl	8100398 <__aeabi_dsub>
 8102682:	4602      	mov	r2, r0
 8102684:	460b      	mov	r3, r1
 8102686:	4610      	mov	r0, r2
 8102688:	4619      	mov	r1, r3
 810268a:	f7fe fb35 	bl	8100cf8 <__aeabi_d2f>
 810268e:	4603      	mov	r3, r0
 8102690:	4aa4      	ldr	r2, [pc, #656]	@ (8102924 <main+0x974>)
 8102692:	6013      	str	r3, [r2, #0]
					corrente_non_filtrata = voltToAmpere(VoltSens);
 8102694:	4ba3      	ldr	r3, [pc, #652]	@ (8102924 <main+0x974>)
 8102696:	edd3 7a00 	vldr	s15, [r3]
 810269a:	eeb0 0a67 	vmov.f32	s0, s15
 810269e:	f7ff fc17 	bl	8101ed0 <voltToAmpere>
 81026a2:	eef0 7a40 	vmov.f32	s15, s0
 81026a6:	4ba0      	ldr	r3, [pc, #640]	@ (8102928 <main+0x978>)
 81026a8:	edc3 7a00 	vstr	s15, [r3]

					 fir_in_arm = (float32_t)corrente_non_filtrata;
 81026ac:	4b9e      	ldr	r3, [pc, #632]	@ (8102928 <main+0x978>)
 81026ae:	681b      	ldr	r3, [r3, #0]
 81026b0:	4a9e      	ldr	r2, [pc, #632]	@ (810292c <main+0x97c>)
 81026b2:	6013      	str	r3, [r2, #0]
					 arm_fir_f32(&fir_instance, &fir_in_arm, &fir_out_arm, 1);
 81026b4:	2301      	movs	r3, #1
 81026b6:	4a9e      	ldr	r2, [pc, #632]	@ (8102930 <main+0x980>)
 81026b8:	499c      	ldr	r1, [pc, #624]	@ (810292c <main+0x97c>)
 81026ba:	489e      	ldr	r0, [pc, #632]	@ (8102934 <main+0x984>)
 81026bc:	f00a f9c4 	bl	810ca48 <arm_fir_f32>
					 filtered_current = fir_out_arm;
 81026c0:	4b9b      	ldr	r3, [pc, #620]	@ (8102930 <main+0x980>)
 81026c2:	681b      	ldr	r3, [r3, #0]
 81026c4:	4a9c      	ldr	r2, [pc, #624]	@ (8102938 <main+0x988>)
 81026c6:	6013      	str	r3, [r2, #0]



					//Filtro di Kalman per corrente
					//setta i valori di input e di misura per il filtro di kalman
					z_data[0] = VoltSens; //misura del voltaggio del sensore di corrente
 81026c8:	4b96      	ldr	r3, [pc, #600]	@ (8102924 <main+0x974>)
 81026ca:	681b      	ldr	r3, [r3, #0]
 81026cc:	4a9b      	ldr	r2, [pc, #620]	@ (810293c <main+0x98c>)
 81026ce:	6013      	str	r3, [r2, #0]
					z_data[1] = corrente_non_filtrata; //per non usare la misura I aggiuntiva, volendo si puo usare la formula V=IR del motore, adesso vedo come metterla
 81026d0:	4b95      	ldr	r3, [pc, #596]	@ (8102928 <main+0x978>)
 81026d2:	681b      	ldr	r3, [r3, #0]
 81026d4:	4a99      	ldr	r2, [pc, #612]	@ (810293c <main+0x98c>)
 81026d6:	6053      	str	r3, [r2, #4]
					//z_data[1] = misuracorrente; //qua ci va la misura della corrente. scelta grazie al pwm dalla formula I = V/R
					kalman_predict(&kf, &u);
 81026d8:	4999      	ldr	r1, [pc, #612]	@ (8102940 <main+0x990>)
 81026da:	489a      	ldr	r0, [pc, #616]	@ (8102944 <main+0x994>)
 81026dc:	f7ff f9c0 	bl	8101a60 <kalman_predict>
					kalman_update(&kf, &z);
 81026e0:	4999      	ldr	r1, [pc, #612]	@ (8102948 <main+0x998>)
 81026e2:	4898      	ldr	r0, [pc, #608]	@ (8102944 <main+0x994>)
 81026e4:	f7ff fa2a 	bl	8101b3c <kalman_update>
					filtered_current_kalman = x_data[1];
 81026e8:	4b98      	ldr	r3, [pc, #608]	@ (810294c <main+0x99c>)
 81026ea:	685b      	ldr	r3, [r3, #4]
 81026ec:	4a98      	ldr	r2, [pc, #608]	@ (8102950 <main+0x9a0>)
 81026ee:	6013      	str	r3, [r2, #0]

					//idea di trovare il modello del processo dello sterzo(quindi modello sterzo+motore) tramite risposta indiciale, poi dare come misura la I ottenuta dalla equazione dinamica


					//calcolo coppia
					torque = filtered_current_kalman * K;
 81026f0:	4b97      	ldr	r3, [pc, #604]	@ (8102950 <main+0x9a0>)
 81026f2:	edd3 7a00 	vldr	s15, [r3]
 81026f6:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8102954 <main+0x9a4>
 81026fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 81026fe:	4b96      	ldr	r3, [pc, #600]	@ (8102958 <main+0x9a8>)
 8102700:	edc3 7a00 	vstr	s15, [r3]

					*/



					if(sys_started==0)
 8102704:	4b95      	ldr	r3, [pc, #596]	@ (810295c <main+0x9ac>)
 8102706:	681b      	ldr	r3, [r3, #0]
 8102708:	2b00      	cmp	r3, #0
 810270a:	d10b      	bne.n	8102724 <main+0x774>
					{torque=0;
 810270c:	4b92      	ldr	r3, [pc, #584]	@ (8102958 <main+0x9a8>)
 810270e:	f04f 0200 	mov.w	r2, #0
 8102712:	601a      	str	r2, [r3, #0]
					desired_torque=0;
 8102714:	4b92      	ldr	r3, [pc, #584]	@ (8102960 <main+0x9b0>)
 8102716:	f04f 0200 	mov.w	r2, #0
 810271a:	601a      	str	r2, [r3, #0]
					stadio = 1000;
 810271c:	4b91      	ldr	r3, [pc, #580]	@ (8102964 <main+0x9b4>)
 810271e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8102722:	601a      	str	r2, [r3, #0]
					}

					u_front_wheel = PID_controller(&pid_steering_torque, torque, desired_torque);
 8102724:	4b8c      	ldr	r3, [pc, #560]	@ (8102958 <main+0x9a8>)
 8102726:	edd3 7a00 	vldr	s15, [r3]
 810272a:	4b8d      	ldr	r3, [pc, #564]	@ (8102960 <main+0x9b0>)
 810272c:	ed93 7a00 	vldr	s14, [r3]
 8102730:	eef0 0a47 	vmov.f32	s1, s14
 8102734:	eeb0 0a67 	vmov.f32	s0, s15
 8102738:	488b      	ldr	r0, [pc, #556]	@ (8102968 <main+0x9b8>)
 810273a:	f7fe fe1f 	bl	810137c <PID_controller>
 810273e:	eef0 7a40 	vmov.f32	s15, s0
 8102742:	4b8a      	ldr	r3, [pc, #552]	@ (810296c <main+0x9bc>)
 8102744:	edc3 7a00 	vstr	s15, [r3]
					//u_front_wheel = 5.0*18/12/2*(sin(2*3.14/3* dt*n_ref) + 1);
				//	u_front_wheel = 0;



										  switch(stadio)
 8102748:	4b86      	ldr	r3, [pc, #536]	@ (8102964 <main+0x9b4>)
 810274a:	681b      	ldr	r3, [r3, #0]
 810274c:	2b08      	cmp	r3, #8
 810274e:	f200 816a 	bhi.w	8102a26 <main+0xa76>
 8102752:	a201      	add	r2, pc, #4	@ (adr r2, 8102758 <main+0x7a8>)
 8102754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102758:	0810277d 	.word	0x0810277d
 810275c:	081027bb 	.word	0x081027bb
 8102760:	08102827 	.word	0x08102827
 8102764:	0810285d 	.word	0x0810285d
 8102768:	0810277d 	.word	0x0810277d
 810276c:	081028bf 	.word	0x081028bf
 8102770:	08102827 	.word	0x08102827
 8102774:	081029bd 	.word	0x081029bd
 8102778:	08102a1f 	.word	0x08102a1f
												  {
												  case 0:
												  case 4:
													  //niente
													  desired_torque=0;  //cioe tensione
 810277c:	4b78      	ldr	r3, [pc, #480]	@ (8102960 <main+0x9b0>)
 810277e:	f04f 0200 	mov.w	r2, #0
 8102782:	601a      	str	r2, [r3, #0]
													  if(dt*n_ref >= 3*2) //dopo 3 secondi
 8102784:	4b7a      	ldr	r3, [pc, #488]	@ (8102970 <main+0x9c0>)
 8102786:	681b      	ldr	r3, [r3, #0]
 8102788:	ee07 3a90 	vmov	s15, r3
 810278c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102790:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8102974 <main+0x9c4>
 8102794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102798:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 810279c:	eef4 7ac7 	vcmpe.f32	s15, s14
 81027a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81027a4:	da00      	bge.n	81027a8 <main+0x7f8>
															  {
																  stadio++;
																  n_ref = 0;
															  }

													  break;
 81027a6:	e13f      	b.n	8102a28 <main+0xa78>
																  stadio++;
 81027a8:	4b6e      	ldr	r3, [pc, #440]	@ (8102964 <main+0x9b4>)
 81027aa:	681b      	ldr	r3, [r3, #0]
 81027ac:	3301      	adds	r3, #1
 81027ae:	4a6d      	ldr	r2, [pc, #436]	@ (8102964 <main+0x9b4>)
 81027b0:	6013      	str	r3, [r2, #0]
																  n_ref = 0;
 81027b2:	4b6f      	ldr	r3, [pc, #444]	@ (8102970 <main+0x9c0>)
 81027b4:	2200      	movs	r2, #0
 81027b6:	601a      	str	r2, [r3, #0]
													  break;
 81027b8:	e136      	b.n	8102a28 <main+0xa78>
												  case 1:
													  //step con 10V;
													  if(desired_torque >= 0.0025/3) {stadio++;n_ref = 0;}
 81027ba:	4b69      	ldr	r3, [pc, #420]	@ (8102960 <main+0x9b0>)
 81027bc:	681b      	ldr	r3, [r3, #0]
 81027be:	4618      	mov	r0, r3
 81027c0:	f7fd ff4a 	bl	8100658 <__aeabi_f2d>
 81027c4:	a34e      	add	r3, pc, #312	@ (adr r3, 8102900 <main+0x950>)
 81027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027ca:	f7fe fa23 	bl	8100c14 <__aeabi_dcmpge>
 81027ce:	4603      	mov	r3, r0
 81027d0:	2b00      	cmp	r3, #0
 81027d2:	d008      	beq.n	81027e6 <main+0x836>
 81027d4:	4b63      	ldr	r3, [pc, #396]	@ (8102964 <main+0x9b4>)
 81027d6:	681b      	ldr	r3, [r3, #0]
 81027d8:	3301      	adds	r3, #1
 81027da:	4a62      	ldr	r2, [pc, #392]	@ (8102964 <main+0x9b4>)
 81027dc:	6013      	str	r3, [r2, #0]
 81027de:	4b64      	ldr	r3, [pc, #400]	@ (8102970 <main+0x9c0>)
 81027e0:	2200      	movs	r2, #0
 81027e2:	601a      	str	r2, [r3, #0]
													  else desired_torque+=0.0066/60*dt;
													  break;
 81027e4:	e120      	b.n	8102a28 <main+0xa78>
													  else desired_torque+=0.0066/60*dt;
 81027e6:	4b5e      	ldr	r3, [pc, #376]	@ (8102960 <main+0x9b0>)
 81027e8:	681b      	ldr	r3, [r3, #0]
 81027ea:	4618      	mov	r0, r3
 81027ec:	f7fd ff34 	bl	8100658 <__aeabi_f2d>
 81027f0:	4604      	mov	r4, r0
 81027f2:	460d      	mov	r5, r1
 81027f4:	4b60      	ldr	r3, [pc, #384]	@ (8102978 <main+0x9c8>)
 81027f6:	4618      	mov	r0, r3
 81027f8:	f7fd ff2e 	bl	8100658 <__aeabi_f2d>
 81027fc:	a342      	add	r3, pc, #264	@ (adr r3, 8102908 <main+0x958>)
 81027fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102802:	f7fd ff81 	bl	8100708 <__aeabi_dmul>
 8102806:	4602      	mov	r2, r0
 8102808:	460b      	mov	r3, r1
 810280a:	4620      	mov	r0, r4
 810280c:	4629      	mov	r1, r5
 810280e:	f7fd fdc5 	bl	810039c <__adddf3>
 8102812:	4602      	mov	r2, r0
 8102814:	460b      	mov	r3, r1
 8102816:	4610      	mov	r0, r2
 8102818:	4619      	mov	r1, r3
 810281a:	f7fe fa6d 	bl	8100cf8 <__aeabi_d2f>
 810281e:	4603      	mov	r3, r0
 8102820:	4a4f      	ldr	r2, [pc, #316]	@ (8102960 <main+0x9b0>)
 8102822:	6013      	str	r3, [r2, #0]
													  break;
 8102824:	e100      	b.n	8102a28 <main+0xa78>

												  case 2:
												  case 6:
												   if(dt*n_ref >=6) {
 8102826:	4b52      	ldr	r3, [pc, #328]	@ (8102970 <main+0x9c0>)
 8102828:	681b      	ldr	r3, [r3, #0]
 810282a:	ee07 3a90 	vmov	s15, r3
 810282e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102832:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8102974 <main+0x9c4>
 8102836:	ee67 7a87 	vmul.f32	s15, s15, s14
 810283a:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 810283e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102846:	da00      	bge.n	810284a <main+0x89a>
														  stadio++;
														  n_ref=0;
													  }
													  break;
 8102848:	e0ee      	b.n	8102a28 <main+0xa78>
														  stadio++;
 810284a:	4b46      	ldr	r3, [pc, #280]	@ (8102964 <main+0x9b4>)
 810284c:	681b      	ldr	r3, [r3, #0]
 810284e:	3301      	adds	r3, #1
 8102850:	4a44      	ldr	r2, [pc, #272]	@ (8102964 <main+0x9b4>)
 8102852:	6013      	str	r3, [r2, #0]
														  n_ref=0;
 8102854:	4b46      	ldr	r3, [pc, #280]	@ (8102970 <main+0x9c0>)
 8102856:	2200      	movs	r2, #0
 8102858:	601a      	str	r2, [r3, #0]
													  break;
 810285a:	e0e5      	b.n	8102a28 <main+0xa78>
												  case 3:
													  if(desired_torque <= 0)
 810285c:	4b40      	ldr	r3, [pc, #256]	@ (8102960 <main+0x9b0>)
 810285e:	edd3 7a00 	vldr	s15, [r3]
 8102862:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8102866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810286a:	d808      	bhi.n	810287e <main+0x8ce>
													  {stadio++;
 810286c:	4b3d      	ldr	r3, [pc, #244]	@ (8102964 <main+0x9b4>)
 810286e:	681b      	ldr	r3, [r3, #0]
 8102870:	3301      	adds	r3, #1
 8102872:	4a3c      	ldr	r2, [pc, #240]	@ (8102964 <main+0x9b4>)
 8102874:	6013      	str	r3, [r2, #0]
													  n_ref = 0;}
 8102876:	4b3e      	ldr	r3, [pc, #248]	@ (8102970 <main+0x9c0>)
 8102878:	2200      	movs	r2, #0
 810287a:	601a      	str	r2, [r3, #0]
													  else desired_torque+=-0.0066/60*dt;
													  break;
 810287c:	e0d4      	b.n	8102a28 <main+0xa78>
													  else desired_torque+=-0.0066/60*dt;
 810287e:	4b38      	ldr	r3, [pc, #224]	@ (8102960 <main+0x9b0>)
 8102880:	681b      	ldr	r3, [r3, #0]
 8102882:	4618      	mov	r0, r3
 8102884:	f7fd fee8 	bl	8100658 <__aeabi_f2d>
 8102888:	4604      	mov	r4, r0
 810288a:	460d      	mov	r5, r1
 810288c:	4b3a      	ldr	r3, [pc, #232]	@ (8102978 <main+0x9c8>)
 810288e:	4618      	mov	r0, r3
 8102890:	f7fd fee2 	bl	8100658 <__aeabi_f2d>
 8102894:	a31e      	add	r3, pc, #120	@ (adr r3, 8102910 <main+0x960>)
 8102896:	e9d3 2300 	ldrd	r2, r3, [r3]
 810289a:	f7fd ff35 	bl	8100708 <__aeabi_dmul>
 810289e:	4602      	mov	r2, r0
 81028a0:	460b      	mov	r3, r1
 81028a2:	4620      	mov	r0, r4
 81028a4:	4629      	mov	r1, r5
 81028a6:	f7fd fd79 	bl	810039c <__adddf3>
 81028aa:	4602      	mov	r2, r0
 81028ac:	460b      	mov	r3, r1
 81028ae:	4610      	mov	r0, r2
 81028b0:	4619      	mov	r1, r3
 81028b2:	f7fe fa21 	bl	8100cf8 <__aeabi_d2f>
 81028b6:	4603      	mov	r3, r0
 81028b8:	4a29      	ldr	r2, [pc, #164]	@ (8102960 <main+0x9b0>)
 81028ba:	6013      	str	r3, [r2, #0]
													  break;
 81028bc:	e0b4      	b.n	8102a28 <main+0xa78>
												  case 5:
													  if(desired_torque <= -0.0025/3)
 81028be:	4b28      	ldr	r3, [pc, #160]	@ (8102960 <main+0x9b0>)
 81028c0:	681b      	ldr	r3, [r3, #0]
 81028c2:	4618      	mov	r0, r3
 81028c4:	f7fd fec8 	bl	8100658 <__aeabi_f2d>
 81028c8:	a313      	add	r3, pc, #76	@ (adr r3, 8102918 <main+0x968>)
 81028ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028ce:	f7fe f997 	bl	8100c00 <__aeabi_dcmple>
 81028d2:	4603      	mov	r3, r0
 81028d4:	2b00      	cmp	r3, #0
 81028d6:	d051      	beq.n	810297c <main+0x9cc>
													  {stadio++;
 81028d8:	4b22      	ldr	r3, [pc, #136]	@ (8102964 <main+0x9b4>)
 81028da:	681b      	ldr	r3, [r3, #0]
 81028dc:	3301      	adds	r3, #1
 81028de:	4a21      	ldr	r2, [pc, #132]	@ (8102964 <main+0x9b4>)
 81028e0:	6013      	str	r3, [r2, #0]
													  n_ref = 0;}
 81028e2:	4b23      	ldr	r3, [pc, #140]	@ (8102970 <main+0x9c0>)
 81028e4:	2200      	movs	r2, #0
 81028e6:	601a      	str	r2, [r3, #0]
													  else desired_torque+=-0.0066/60*dt;
													  break;
 81028e8:	e09e      	b.n	8102a28 <main+0xa78>
 81028ea:	bf00      	nop
 81028ec:	f3af 8000 	nop.w
 81028f0:	d2f1a9fc 	.word	0xd2f1a9fc
 81028f4:	3ff8624d 	.word	0x3ff8624d
 81028f8:	96bb98c8 	.word	0x96bb98c8
 81028fc:	3fba0f90 	.word	0x3fba0f90
 8102900:	b4e81b4f 	.word	0xb4e81b4f
 8102904:	3f4b4e81 	.word	0x3f4b4e81
 8102908:	9c38b04b 	.word	0x9c38b04b
 810290c:	3f1cd5f9 	.word	0x3f1cd5f9
 8102910:	9c38b04b 	.word	0x9c38b04b
 8102914:	bf1cd5f9 	.word	0xbf1cd5f9
 8102918:	b4e81b4f 	.word	0xb4e81b4f
 810291c:	bf4b4e81 	.word	0xbf4b4e81
 8102920:	10000638 	.word	0x10000638
 8102924:	10000660 	.word	0x10000660
 8102928:	10000618 	.word	0x10000618
 810292c:	100006d8 	.word	0x100006d8
 8102930:	100006dc 	.word	0x100006dc
 8102934:	100006cc 	.word	0x100006cc
 8102938:	10000650 	.word	0x10000650
 810293c:	100006c0 	.word	0x100006c0
 8102940:	100006ac 	.word	0x100006ac
 8102944:	10000664 	.word	0x10000664
 8102948:	100006b4 	.word	0x100006b4
 810294c:	100006a4 	.word	0x100006a4
 8102950:	10000654 	.word	0x10000654
 8102954:	3cbfb15b 	.word	0x3cbfb15b
 8102958:	10000658 	.word	0x10000658
 810295c:	10000614 	.word	0x10000614
 8102960:	10000624 	.word	0x10000624
 8102964:	100006c8 	.word	0x100006c8
 8102968:	100005b0 	.word	0x100005b0
 810296c:	10000644 	.word	0x10000644
 8102970:	1000065c 	.word	0x1000065c
 8102974:	3c23d70a 	.word	0x3c23d70a
 8102978:	3c23d70a 	.word	0x3c23d70a
													  else desired_torque+=-0.0066/60*dt;
 810297c:	4b62      	ldr	r3, [pc, #392]	@ (8102b08 <main+0xb58>)
 810297e:	681b      	ldr	r3, [r3, #0]
 8102980:	4618      	mov	r0, r3
 8102982:	f7fd fe69 	bl	8100658 <__aeabi_f2d>
 8102986:	4604      	mov	r4, r0
 8102988:	460d      	mov	r5, r1
 810298a:	4b60      	ldr	r3, [pc, #384]	@ (8102b0c <main+0xb5c>)
 810298c:	4618      	mov	r0, r3
 810298e:	f7fd fe63 	bl	8100658 <__aeabi_f2d>
 8102992:	a359      	add	r3, pc, #356	@ (adr r3, 8102af8 <main+0xb48>)
 8102994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102998:	f7fd feb6 	bl	8100708 <__aeabi_dmul>
 810299c:	4602      	mov	r2, r0
 810299e:	460b      	mov	r3, r1
 81029a0:	4620      	mov	r0, r4
 81029a2:	4629      	mov	r1, r5
 81029a4:	f7fd fcfa 	bl	810039c <__adddf3>
 81029a8:	4602      	mov	r2, r0
 81029aa:	460b      	mov	r3, r1
 81029ac:	4610      	mov	r0, r2
 81029ae:	4619      	mov	r1, r3
 81029b0:	f7fe f9a2 	bl	8100cf8 <__aeabi_d2f>
 81029b4:	4603      	mov	r3, r0
 81029b6:	4a54      	ldr	r2, [pc, #336]	@ (8102b08 <main+0xb58>)
 81029b8:	6013      	str	r3, [r2, #0]
													  break;
 81029ba:	e035      	b.n	8102a28 <main+0xa78>


												  case 7:
												  if(desired_torque >= 0) {stadio++;n_ref = 0;}
 81029bc:	4b52      	ldr	r3, [pc, #328]	@ (8102b08 <main+0xb58>)
 81029be:	edd3 7a00 	vldr	s15, [r3]
 81029c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81029c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81029ca:	db08      	blt.n	81029de <main+0xa2e>
 81029cc:	4b50      	ldr	r3, [pc, #320]	@ (8102b10 <main+0xb60>)
 81029ce:	681b      	ldr	r3, [r3, #0]
 81029d0:	3301      	adds	r3, #1
 81029d2:	4a4f      	ldr	r2, [pc, #316]	@ (8102b10 <main+0xb60>)
 81029d4:	6013      	str	r3, [r2, #0]
 81029d6:	4b4f      	ldr	r3, [pc, #316]	@ (8102b14 <main+0xb64>)
 81029d8:	2200      	movs	r2, #0
 81029da:	601a      	str	r2, [r3, #0]
												  else desired_torque+=0.0066/60*dt;
												  break;
 81029dc:	e024      	b.n	8102a28 <main+0xa78>
												  else desired_torque+=0.0066/60*dt;
 81029de:	4b4a      	ldr	r3, [pc, #296]	@ (8102b08 <main+0xb58>)
 81029e0:	681b      	ldr	r3, [r3, #0]
 81029e2:	4618      	mov	r0, r3
 81029e4:	f7fd fe38 	bl	8100658 <__aeabi_f2d>
 81029e8:	4604      	mov	r4, r0
 81029ea:	460d      	mov	r5, r1
 81029ec:	4b47      	ldr	r3, [pc, #284]	@ (8102b0c <main+0xb5c>)
 81029ee:	4618      	mov	r0, r3
 81029f0:	f7fd fe32 	bl	8100658 <__aeabi_f2d>
 81029f4:	a342      	add	r3, pc, #264	@ (adr r3, 8102b00 <main+0xb50>)
 81029f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029fa:	f7fd fe85 	bl	8100708 <__aeabi_dmul>
 81029fe:	4602      	mov	r2, r0
 8102a00:	460b      	mov	r3, r1
 8102a02:	4620      	mov	r0, r4
 8102a04:	4629      	mov	r1, r5
 8102a06:	f7fd fcc9 	bl	810039c <__adddf3>
 8102a0a:	4602      	mov	r2, r0
 8102a0c:	460b      	mov	r3, r1
 8102a0e:	4610      	mov	r0, r2
 8102a10:	4619      	mov	r1, r3
 8102a12:	f7fe f971 	bl	8100cf8 <__aeabi_d2f>
 8102a16:	4603      	mov	r3, r0
 8102a18:	4a3b      	ldr	r2, [pc, #236]	@ (8102b08 <main+0xb58>)
 8102a1a:	6013      	str	r3, [r2, #0]
												  break;
 8102a1c:	e004      	b.n	8102a28 <main+0xa78>

												case 8:
													  stadio  =0;
 8102a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8102b10 <main+0xb60>)
 8102a20:	2200      	movs	r2, #0
 8102a22:	601a      	str	r2, [r3, #0]
													  break;
 8102a24:	e000      	b.n	8102a28 <main+0xa78>
												case 1000:
												  default:
													  break;
 8102a26:	bf00      	nop



					//u_front_wheel = 18;
					//u_front_wheel = 0;
					duty_front_wheel = Voltage2Duty(u_front_wheel);
 8102a28:	4b3b      	ldr	r3, [pc, #236]	@ (8102b18 <main+0xb68>)
 8102a2a:	edd3 7a00 	vldr	s15, [r3]
 8102a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8102a32:	f7fe fb97 	bl	8101164 <Voltage2Duty>
 8102a36:	eef0 7a40 	vmov.f32	s15, s0
 8102a3a:	4b38      	ldr	r3, [pc, #224]	@ (8102b1c <main+0xb6c>)
 8102a3c:	edc3 7a00 	vstr	s15, [r3]
					dir_front_wheel = Ref2Direction(u_front_wheel);
 8102a40:	4b35      	ldr	r3, [pc, #212]	@ (8102b18 <main+0xb68>)
 8102a42:	edd3 7a00 	vldr	s15, [r3]
 8102a46:	eeb0 0a67 	vmov.f32	s0, s15
 8102a4a:	f7fe fbcd 	bl	81011e8 <Ref2Direction>
 8102a4e:	4603      	mov	r3, r0
 8102a50:	ee07 3a90 	vmov	s15, r3
 8102a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a58:	4b31      	ldr	r3, [pc, #196]	@ (8102b20 <main+0xb70>)
 8102a5a:	edc3 7a00 	vstr	s15, [r3]




					set_PWM_and_dir_front_wheel(duty_front_wheel, dir_front_wheel);
 8102a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8102b1c <main+0xb6c>)
 8102a60:	ed93 7a00 	vldr	s14, [r3]
 8102a64:	4b2e      	ldr	r3, [pc, #184]	@ (8102b20 <main+0xb70>)
 8102a66:	edd3 7a00 	vldr	s15, [r3]
 8102a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102a6e:	edc7 7a01 	vstr	s15, [r7, #4]
 8102a72:	793b      	ldrb	r3, [r7, #4]
 8102a74:	b2db      	uxtb	r3, r3
 8102a76:	4618      	mov	r0, r3
 8102a78:	eeb0 0a47 	vmov.f32	s0, s14
 8102a7c:	f7fe fc0e 	bl	810129c <set_PWM_and_dir_front_wheel>

//per coppia pid

					printf("%.5f ",corrente_non_filtrata);
 8102a80:	4b28      	ldr	r3, [pc, #160]	@ (8102b24 <main+0xb74>)
 8102a82:	681b      	ldr	r3, [r3, #0]
 8102a84:	4618      	mov	r0, r3
 8102a86:	f7fd fde7 	bl	8100658 <__aeabi_f2d>
 8102a8a:	4602      	mov	r2, r0
 8102a8c:	460b      	mov	r3, r1
 8102a8e:	4826      	ldr	r0, [pc, #152]	@ (8102b28 <main+0xb78>)
 8102a90:	f00b f9b6 	bl	810de00 <iprintf>
					printf("%.5f ",desired_torque);
 8102a94:	4b1c      	ldr	r3, [pc, #112]	@ (8102b08 <main+0xb58>)
 8102a96:	681b      	ldr	r3, [r3, #0]
 8102a98:	4618      	mov	r0, r3
 8102a9a:	f7fd fddd 	bl	8100658 <__aeabi_f2d>
 8102a9e:	4602      	mov	r2, r0
 8102aa0:	460b      	mov	r3, r1
 8102aa2:	4821      	ldr	r0, [pc, #132]	@ (8102b28 <main+0xb78>)
 8102aa4:	f00b f9ac 	bl	810de00 <iprintf>
					printf("%.5f ",torque);
 8102aa8:	4b20      	ldr	r3, [pc, #128]	@ (8102b2c <main+0xb7c>)
 8102aaa:	681b      	ldr	r3, [r3, #0]
 8102aac:	4618      	mov	r0, r3
 8102aae:	f7fd fdd3 	bl	8100658 <__aeabi_f2d>
 8102ab2:	4602      	mov	r2, r0
 8102ab4:	460b      	mov	r3, r1
 8102ab6:	481c      	ldr	r0, [pc, #112]	@ (8102b28 <main+0xb78>)
 8102ab8:	f00b f9a2 	bl	810de00 <iprintf>
					printf("%.5f ",u_front_wheel/18.0*12);
 8102abc:	4b16      	ldr	r3, [pc, #88]	@ (8102b18 <main+0xb68>)
 8102abe:	681b      	ldr	r3, [r3, #0]
 8102ac0:	4618      	mov	r0, r3
 8102ac2:	f7fd fdc9 	bl	8100658 <__aeabi_f2d>
 8102ac6:	f04f 0200 	mov.w	r2, #0
 8102aca:	4b19      	ldr	r3, [pc, #100]	@ (8102b30 <main+0xb80>)
 8102acc:	f7fd ff46 	bl	810095c <__aeabi_ddiv>
 8102ad0:	4602      	mov	r2, r0
 8102ad2:	460b      	mov	r3, r1
 8102ad4:	4610      	mov	r0, r2
 8102ad6:	4619      	mov	r1, r3
 8102ad8:	f04f 0200 	mov.w	r2, #0
 8102adc:	4b15      	ldr	r3, [pc, #84]	@ (8102b34 <main+0xb84>)
 8102ade:	f7fd fe13 	bl	8100708 <__aeabi_dmul>
 8102ae2:	4602      	mov	r2, r0
 8102ae4:	460b      	mov	r3, r1
 8102ae6:	4810      	ldr	r0, [pc, #64]	@ (8102b28 <main+0xb78>)
 8102ae8:	f00b f98a 	bl	810de00 <iprintf>
					printf("%.5f ",desired_torque);
				    printf("%.5f ",torque);
					printf("%.5f ",u_front_wheel/18.0*12);

*/
					printf("\r\n");
 8102aec:	4812      	ldr	r0, [pc, #72]	@ (8102b38 <main+0xb88>)
 8102aee:	f00b f9ef 	bl	810ded0 <puts>
		if (flag_Tc == 1) {
 8102af2:	f7ff bb5e 	b.w	81021b2 <main+0x202>
 8102af6:	bf00      	nop
 8102af8:	9c38b04b 	.word	0x9c38b04b
 8102afc:	bf1cd5f9 	.word	0xbf1cd5f9
 8102b00:	9c38b04b 	.word	0x9c38b04b
 8102b04:	3f1cd5f9 	.word	0x3f1cd5f9
 8102b08:	10000624 	.word	0x10000624
 8102b0c:	3c23d70a 	.word	0x3c23d70a
 8102b10:	100006c8 	.word	0x100006c8
 8102b14:	1000065c 	.word	0x1000065c
 8102b18:	10000644 	.word	0x10000644
 8102b1c:	1000064c 	.word	0x1000064c
 8102b20:	10000648 	.word	0x10000648
 8102b24:	10000618 	.word	0x10000618
 8102b28:	08111794 	.word	0x08111794
 8102b2c:	10000658 	.word	0x10000658
 8102b30:	40320000 	.word	0x40320000
 8102b34:	40280000 	.word	0x40280000
 8102b38:	0811179c 	.word	0x0811179c

08102b3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8102b3c:	b580      	push	{r7, lr}
 8102b3e:	b08a      	sub	sp, #40	@ 0x28
 8102b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8102b42:	f107 031c 	add.w	r3, r7, #28
 8102b46:	2200      	movs	r2, #0
 8102b48:	601a      	str	r2, [r3, #0]
 8102b4a:	605a      	str	r2, [r3, #4]
 8102b4c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8102b4e:	463b      	mov	r3, r7
 8102b50:	2200      	movs	r2, #0
 8102b52:	601a      	str	r2, [r3, #0]
 8102b54:	605a      	str	r2, [r3, #4]
 8102b56:	609a      	str	r2, [r3, #8]
 8102b58:	60da      	str	r2, [r3, #12]
 8102b5a:	611a      	str	r2, [r3, #16]
 8102b5c:	615a      	str	r2, [r3, #20]
 8102b5e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8102b60:	4b2f      	ldr	r3, [pc, #188]	@ (8102c20 <MX_ADC1_Init+0xe4>)
 8102b62:	4a30      	ldr	r2, [pc, #192]	@ (8102c24 <MX_ADC1_Init+0xe8>)
 8102b64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8102b66:	4b2e      	ldr	r3, [pc, #184]	@ (8102c20 <MX_ADC1_Init+0xe4>)
 8102b68:	2200      	movs	r2, #0
 8102b6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8102b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8102c20 <MX_ADC1_Init+0xe4>)
 8102b6e:	2200      	movs	r2, #0
 8102b70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8102b72:	4b2b      	ldr	r3, [pc, #172]	@ (8102c20 <MX_ADC1_Init+0xe4>)
 8102b74:	2200      	movs	r2, #0
 8102b76:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8102b78:	4b29      	ldr	r3, [pc, #164]	@ (8102c20 <MX_ADC1_Init+0xe4>)
 8102b7a:	2204      	movs	r2, #4
 8102b7c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8102b7e:	4b28      	ldr	r3, [pc, #160]	@ (8102c20 <MX_ADC1_Init+0xe4>)
 8102b80:	2200      	movs	r2, #0
 8102b82:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8102b84:	4b26      	ldr	r3, [pc, #152]	@ (8102c20 <MX_ADC1_Init+0xe4>)
 8102b86:	2200      	movs	r2, #0
 8102b88:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8102b8a:	4b25      	ldr	r3, [pc, #148]	@ (8102c20 <MX_ADC1_Init+0xe4>)
 8102b8c:	2201      	movs	r2, #1
 8102b8e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8102b90:	4b23      	ldr	r3, [pc, #140]	@ (8102c20 <MX_ADC1_Init+0xe4>)
 8102b92:	2200      	movs	r2, #0
 8102b94:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8102b96:	4b22      	ldr	r3, [pc, #136]	@ (8102c20 <MX_ADC1_Init+0xe4>)
 8102b98:	2200      	movs	r2, #0
 8102b9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8102b9c:	4b20      	ldr	r3, [pc, #128]	@ (8102c20 <MX_ADC1_Init+0xe4>)
 8102b9e:	2200      	movs	r2, #0
 8102ba0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8102ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8102c20 <MX_ADC1_Init+0xe4>)
 8102ba4:	2200      	movs	r2, #0
 8102ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8102ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8102c20 <MX_ADC1_Init+0xe4>)
 8102baa:	2200      	movs	r2, #0
 8102bac:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8102bae:	4b1c      	ldr	r3, [pc, #112]	@ (8102c20 <MX_ADC1_Init+0xe4>)
 8102bb0:	2200      	movs	r2, #0
 8102bb2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8102bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8102c20 <MX_ADC1_Init+0xe4>)
 8102bb6:	2200      	movs	r2, #0
 8102bb8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8102bbc:	4818      	ldr	r0, [pc, #96]	@ (8102c20 <MX_ADC1_Init+0xe4>)
 8102bbe:	f001 fafd 	bl	81041bc <HAL_ADC_Init>
 8102bc2:	4603      	mov	r3, r0
 8102bc4:	2b00      	cmp	r3, #0
 8102bc6:	d001      	beq.n	8102bcc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8102bc8:	f000 fc12 	bl	81033f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8102bcc:	2300      	movs	r3, #0
 8102bce:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8102bd0:	f107 031c 	add.w	r3, r7, #28
 8102bd4:	4619      	mov	r1, r3
 8102bd6:	4812      	ldr	r0, [pc, #72]	@ (8102c20 <MX_ADC1_Init+0xe4>)
 8102bd8:	f002 fcc6 	bl	8105568 <HAL_ADCEx_MultiModeConfigChannel>
 8102bdc:	4603      	mov	r3, r0
 8102bde:	2b00      	cmp	r3, #0
 8102be0:	d001      	beq.n	8102be6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8102be2:	f000 fc05 	bl	81033f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8102be6:	4b10      	ldr	r3, [pc, #64]	@ (8102c28 <MX_ADC1_Init+0xec>)
 8102be8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8102bea:	2306      	movs	r3, #6
 8102bec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8102bee:	2300      	movs	r3, #0
 8102bf0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8102bf2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8102bf6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8102bf8:	2304      	movs	r3, #4
 8102bfa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8102bfc:	2300      	movs	r3, #0
 8102bfe:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8102c00:	2300      	movs	r3, #0
 8102c02:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8102c04:	463b      	mov	r3, r7
 8102c06:	4619      	mov	r1, r3
 8102c08:	4805      	ldr	r0, [pc, #20]	@ (8102c20 <MX_ADC1_Init+0xe4>)
 8102c0a:	f001 fe79 	bl	8104900 <HAL_ADC_ConfigChannel>
 8102c0e:	4603      	mov	r3, r0
 8102c10:	2b00      	cmp	r3, #0
 8102c12:	d001      	beq.n	8102c18 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8102c14:	f000 fbec 	bl	81033f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8102c18:	bf00      	nop
 8102c1a:	3728      	adds	r7, #40	@ 0x28
 8102c1c:	46bd      	mov	sp, r7
 8102c1e:	bd80      	pop	{r7, pc}
 8102c20:	10000288 	.word	0x10000288
 8102c24:	40022000 	.word	0x40022000
 8102c28:	08600004 	.word	0x08600004

08102c2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8102c2c:	b580      	push	{r7, lr}
 8102c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8102c30:	4b1b      	ldr	r3, [pc, #108]	@ (8102ca0 <MX_I2C1_Init+0x74>)
 8102c32:	4a1c      	ldr	r2, [pc, #112]	@ (8102ca4 <MX_I2C1_Init+0x78>)
 8102c34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8102c36:	4b1a      	ldr	r3, [pc, #104]	@ (8102ca0 <MX_I2C1_Init+0x74>)
 8102c38:	4a1b      	ldr	r2, [pc, #108]	@ (8102ca8 <MX_I2C1_Init+0x7c>)
 8102c3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8102c3c:	4b18      	ldr	r3, [pc, #96]	@ (8102ca0 <MX_I2C1_Init+0x74>)
 8102c3e:	2200      	movs	r2, #0
 8102c40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8102c42:	4b17      	ldr	r3, [pc, #92]	@ (8102ca0 <MX_I2C1_Init+0x74>)
 8102c44:	2201      	movs	r2, #1
 8102c46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8102c48:	4b15      	ldr	r3, [pc, #84]	@ (8102ca0 <MX_I2C1_Init+0x74>)
 8102c4a:	2200      	movs	r2, #0
 8102c4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8102c4e:	4b14      	ldr	r3, [pc, #80]	@ (8102ca0 <MX_I2C1_Init+0x74>)
 8102c50:	2200      	movs	r2, #0
 8102c52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8102c54:	4b12      	ldr	r3, [pc, #72]	@ (8102ca0 <MX_I2C1_Init+0x74>)
 8102c56:	2200      	movs	r2, #0
 8102c58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8102c5a:	4b11      	ldr	r3, [pc, #68]	@ (8102ca0 <MX_I2C1_Init+0x74>)
 8102c5c:	2200      	movs	r2, #0
 8102c5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8102c60:	4b0f      	ldr	r3, [pc, #60]	@ (8102ca0 <MX_I2C1_Init+0x74>)
 8102c62:	2200      	movs	r2, #0
 8102c64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8102c66:	480e      	ldr	r0, [pc, #56]	@ (8102ca0 <MX_I2C1_Init+0x74>)
 8102c68:	f003 f87a 	bl	8105d60 <HAL_I2C_Init>
 8102c6c:	4603      	mov	r3, r0
 8102c6e:	2b00      	cmp	r3, #0
 8102c70:	d001      	beq.n	8102c76 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8102c72:	f000 fbbd 	bl	81033f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8102c76:	2100      	movs	r1, #0
 8102c78:	4809      	ldr	r0, [pc, #36]	@ (8102ca0 <MX_I2C1_Init+0x74>)
 8102c7a:	f003 fddb 	bl	8106834 <HAL_I2CEx_ConfigAnalogFilter>
 8102c7e:	4603      	mov	r3, r0
 8102c80:	2b00      	cmp	r3, #0
 8102c82:	d001      	beq.n	8102c88 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8102c84:	f000 fbb4 	bl	81033f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8102c88:	2100      	movs	r1, #0
 8102c8a:	4805      	ldr	r0, [pc, #20]	@ (8102ca0 <MX_I2C1_Init+0x74>)
 8102c8c:	f003 fe1d 	bl	81068ca <HAL_I2CEx_ConfigDigitalFilter>
 8102c90:	4603      	mov	r3, r0
 8102c92:	2b00      	cmp	r3, #0
 8102c94:	d001      	beq.n	8102c9a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8102c96:	f000 fbab 	bl	81033f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8102c9a:	bf00      	nop
 8102c9c:	bd80      	pop	{r7, pc}
 8102c9e:	bf00      	nop
 8102ca0:	100002ec 	.word	0x100002ec
 8102ca4:	40005400 	.word	0x40005400
 8102ca8:	10c0ecff 	.word	0x10c0ecff

08102cac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8102cac:	b580      	push	{r7, lr}
 8102cae:	b09a      	sub	sp, #104	@ 0x68
 8102cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8102cb2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8102cb6:	2200      	movs	r2, #0
 8102cb8:	601a      	str	r2, [r3, #0]
 8102cba:	605a      	str	r2, [r3, #4]
 8102cbc:	609a      	str	r2, [r3, #8]
 8102cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102cc0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8102cc4:	2200      	movs	r2, #0
 8102cc6:	601a      	str	r2, [r3, #0]
 8102cc8:	605a      	str	r2, [r3, #4]
 8102cca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8102ccc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8102cd0:	2200      	movs	r2, #0
 8102cd2:	601a      	str	r2, [r3, #0]
 8102cd4:	605a      	str	r2, [r3, #4]
 8102cd6:	609a      	str	r2, [r3, #8]
 8102cd8:	60da      	str	r2, [r3, #12]
 8102cda:	611a      	str	r2, [r3, #16]
 8102cdc:	615a      	str	r2, [r3, #20]
 8102cde:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8102ce0:	1d3b      	adds	r3, r7, #4
 8102ce2:	222c      	movs	r2, #44	@ 0x2c
 8102ce4:	2100      	movs	r1, #0
 8102ce6:	4618      	mov	r0, r3
 8102ce8:	f00b f9f2 	bl	810e0d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8102cec:	4b43      	ldr	r3, [pc, #268]	@ (8102dfc <MX_TIM1_Init+0x150>)
 8102cee:	4a44      	ldr	r2, [pc, #272]	@ (8102e00 <MX_TIM1_Init+0x154>)
 8102cf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8102cf2:	4b42      	ldr	r3, [pc, #264]	@ (8102dfc <MX_TIM1_Init+0x150>)
 8102cf4:	22c7      	movs	r2, #199	@ 0xc7
 8102cf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102cf8:	4b40      	ldr	r3, [pc, #256]	@ (8102dfc <MX_TIM1_Init+0x150>)
 8102cfa:	2200      	movs	r2, #0
 8102cfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50-1;
 8102cfe:	4b3f      	ldr	r3, [pc, #252]	@ (8102dfc <MX_TIM1_Init+0x150>)
 8102d00:	2231      	movs	r2, #49	@ 0x31
 8102d02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102d04:	4b3d      	ldr	r3, [pc, #244]	@ (8102dfc <MX_TIM1_Init+0x150>)
 8102d06:	2200      	movs	r2, #0
 8102d08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8102d0a:	4b3c      	ldr	r3, [pc, #240]	@ (8102dfc <MX_TIM1_Init+0x150>)
 8102d0c:	2200      	movs	r2, #0
 8102d0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102d10:	4b3a      	ldr	r3, [pc, #232]	@ (8102dfc <MX_TIM1_Init+0x150>)
 8102d12:	2200      	movs	r2, #0
 8102d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8102d16:	4839      	ldr	r0, [pc, #228]	@ (8102dfc <MX_TIM1_Init+0x150>)
 8102d18:	f006 fd82 	bl	8109820 <HAL_TIM_Base_Init>
 8102d1c:	4603      	mov	r3, r0
 8102d1e:	2b00      	cmp	r3, #0
 8102d20:	d001      	beq.n	8102d26 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8102d22:	f000 fb65 	bl	81033f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102d26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8102d2a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8102d2c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8102d30:	4619      	mov	r1, r3
 8102d32:	4832      	ldr	r0, [pc, #200]	@ (8102dfc <MX_TIM1_Init+0x150>)
 8102d34:	f007 fae6 	bl	810a304 <HAL_TIM_ConfigClockSource>
 8102d38:	4603      	mov	r3, r0
 8102d3a:	2b00      	cmp	r3, #0
 8102d3c:	d001      	beq.n	8102d42 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8102d3e:	f000 fb57 	bl	81033f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8102d42:	482e      	ldr	r0, [pc, #184]	@ (8102dfc <MX_TIM1_Init+0x150>)
 8102d44:	f006 feac 	bl	8109aa0 <HAL_TIM_PWM_Init>
 8102d48:	4603      	mov	r3, r0
 8102d4a:	2b00      	cmp	r3, #0
 8102d4c:	d001      	beq.n	8102d52 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8102d4e:	f000 fb4f 	bl	81033f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102d52:	2300      	movs	r3, #0
 8102d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8102d56:	2300      	movs	r3, #0
 8102d58:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102d5a:	2300      	movs	r3, #0
 8102d5c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8102d5e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8102d62:	4619      	mov	r1, r3
 8102d64:	4825      	ldr	r0, [pc, #148]	@ (8102dfc <MX_TIM1_Init+0x150>)
 8102d66:	f008 f82b 	bl	810adc0 <HAL_TIMEx_MasterConfigSynchronization>
 8102d6a:	4603      	mov	r3, r0
 8102d6c:	2b00      	cmp	r3, #0
 8102d6e:	d001      	beq.n	8102d74 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8102d70:	f000 fb3e 	bl	81033f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8102d74:	2360      	movs	r3, #96	@ 0x60
 8102d76:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8102d78:	2300      	movs	r3, #0
 8102d7a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102d7c:	2300      	movs	r3, #0
 8102d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8102d80:	2300      	movs	r3, #0
 8102d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8102d84:	2300      	movs	r3, #0
 8102d86:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8102d88:	2300      	movs	r3, #0
 8102d8a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8102d8c:	2300      	movs	r3, #0
 8102d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8102d90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8102d94:	2200      	movs	r2, #0
 8102d96:	4619      	mov	r1, r3
 8102d98:	4818      	ldr	r0, [pc, #96]	@ (8102dfc <MX_TIM1_Init+0x150>)
 8102d9a:	f007 f99f 	bl	810a0dc <HAL_TIM_PWM_ConfigChannel>
 8102d9e:	4603      	mov	r3, r0
 8102da0:	2b00      	cmp	r3, #0
 8102da2:	d001      	beq.n	8102da8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8102da4:	f000 fb24 	bl	81033f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8102da8:	2300      	movs	r3, #0
 8102daa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8102dac:	2300      	movs	r3, #0
 8102dae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8102db0:	2300      	movs	r3, #0
 8102db2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8102db4:	2300      	movs	r3, #0
 8102db6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8102db8:	2300      	movs	r3, #0
 8102dba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8102dbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8102dc0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8102dc2:	2300      	movs	r3, #0
 8102dc4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8102dc6:	2300      	movs	r3, #0
 8102dc8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8102dca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8102dce:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8102dd0:	2300      	movs	r3, #0
 8102dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8102dd4:	2300      	movs	r3, #0
 8102dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8102dd8:	1d3b      	adds	r3, r7, #4
 8102dda:	4619      	mov	r1, r3
 8102ddc:	4807      	ldr	r0, [pc, #28]	@ (8102dfc <MX_TIM1_Init+0x150>)
 8102dde:	f008 f87d 	bl	810aedc <HAL_TIMEx_ConfigBreakDeadTime>
 8102de2:	4603      	mov	r3, r0
 8102de4:	2b00      	cmp	r3, #0
 8102de6:	d001      	beq.n	8102dec <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8102de8:	f000 fb02 	bl	81033f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8102dec:	4803      	ldr	r0, [pc, #12]	@ (8102dfc <MX_TIM1_Init+0x150>)
 8102dee:	f000 fcd1 	bl	8103794 <HAL_TIM_MspPostInit>

}
 8102df2:	bf00      	nop
 8102df4:	3768      	adds	r7, #104	@ 0x68
 8102df6:	46bd      	mov	sp, r7
 8102df8:	bd80      	pop	{r7, pc}
 8102dfa:	bf00      	nop
 8102dfc:	10000340 	.word	0x10000340
 8102e00:	40010000 	.word	0x40010000

08102e04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8102e04:	b580      	push	{r7, lr}
 8102e06:	b088      	sub	sp, #32
 8102e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8102e0a:	f107 0310 	add.w	r3, r7, #16
 8102e0e:	2200      	movs	r2, #0
 8102e10:	601a      	str	r2, [r3, #0]
 8102e12:	605a      	str	r2, [r3, #4]
 8102e14:	609a      	str	r2, [r3, #8]
 8102e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102e18:	1d3b      	adds	r3, r7, #4
 8102e1a:	2200      	movs	r2, #0
 8102e1c:	601a      	str	r2, [r3, #0]
 8102e1e:	605a      	str	r2, [r3, #4]
 8102e20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8102e22:	4b1e      	ldr	r3, [pc, #120]	@ (8102e9c <MX_TIM2_Init+0x98>)
 8102e24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8102e28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8102e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8102e9c <MX_TIM2_Init+0x98>)
 8102e2c:	22c7      	movs	r2, #199	@ 0xc7
 8102e2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102e30:	4b1a      	ldr	r3, [pc, #104]	@ (8102e9c <MX_TIM2_Init+0x98>)
 8102e32:	2200      	movs	r2, #0
 8102e34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8102e36:	4b19      	ldr	r3, [pc, #100]	@ (8102e9c <MX_TIM2_Init+0x98>)
 8102e38:	f242 720f 	movw	r2, #9999	@ 0x270f
 8102e3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102e3e:	4b17      	ldr	r3, [pc, #92]	@ (8102e9c <MX_TIM2_Init+0x98>)
 8102e40:	2200      	movs	r2, #0
 8102e42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102e44:	4b15      	ldr	r3, [pc, #84]	@ (8102e9c <MX_TIM2_Init+0x98>)
 8102e46:	2200      	movs	r2, #0
 8102e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8102e4a:	4814      	ldr	r0, [pc, #80]	@ (8102e9c <MX_TIM2_Init+0x98>)
 8102e4c:	f006 fce8 	bl	8109820 <HAL_TIM_Base_Init>
 8102e50:	4603      	mov	r3, r0
 8102e52:	2b00      	cmp	r3, #0
 8102e54:	d001      	beq.n	8102e5a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8102e56:	f000 facb 	bl	81033f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102e5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8102e5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8102e60:	f107 0310 	add.w	r3, r7, #16
 8102e64:	4619      	mov	r1, r3
 8102e66:	480d      	ldr	r0, [pc, #52]	@ (8102e9c <MX_TIM2_Init+0x98>)
 8102e68:	f007 fa4c 	bl	810a304 <HAL_TIM_ConfigClockSource>
 8102e6c:	4603      	mov	r3, r0
 8102e6e:	2b00      	cmp	r3, #0
 8102e70:	d001      	beq.n	8102e76 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8102e72:	f000 fabd 	bl	81033f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102e76:	2300      	movs	r3, #0
 8102e78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102e7a:	2300      	movs	r3, #0
 8102e7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8102e7e:	1d3b      	adds	r3, r7, #4
 8102e80:	4619      	mov	r1, r3
 8102e82:	4806      	ldr	r0, [pc, #24]	@ (8102e9c <MX_TIM2_Init+0x98>)
 8102e84:	f007 ff9c 	bl	810adc0 <HAL_TIMEx_MasterConfigSynchronization>
 8102e88:	4603      	mov	r3, r0
 8102e8a:	2b00      	cmp	r3, #0
 8102e8c:	d001      	beq.n	8102e92 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8102e8e:	f000 faaf 	bl	81033f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8102e92:	bf00      	nop
 8102e94:	3720      	adds	r7, #32
 8102e96:	46bd      	mov	sp, r7
 8102e98:	bd80      	pop	{r7, pc}
 8102e9a:	bf00      	nop
 8102e9c:	1000038c 	.word	0x1000038c

08102ea0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8102ea0:	b580      	push	{r7, lr}
 8102ea2:	b08e      	sub	sp, #56	@ 0x38
 8102ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8102ea6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8102eaa:	2200      	movs	r2, #0
 8102eac:	601a      	str	r2, [r3, #0]
 8102eae:	605a      	str	r2, [r3, #4]
 8102eb0:	609a      	str	r2, [r3, #8]
 8102eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102eb4:	f107 031c 	add.w	r3, r7, #28
 8102eb8:	2200      	movs	r2, #0
 8102eba:	601a      	str	r2, [r3, #0]
 8102ebc:	605a      	str	r2, [r3, #4]
 8102ebe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8102ec0:	463b      	mov	r3, r7
 8102ec2:	2200      	movs	r2, #0
 8102ec4:	601a      	str	r2, [r3, #0]
 8102ec6:	605a      	str	r2, [r3, #4]
 8102ec8:	609a      	str	r2, [r3, #8]
 8102eca:	60da      	str	r2, [r3, #12]
 8102ecc:	611a      	str	r2, [r3, #16]
 8102ece:	615a      	str	r2, [r3, #20]
 8102ed0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8102ed2:	4b2c      	ldr	r3, [pc, #176]	@ (8102f84 <MX_TIM3_Init+0xe4>)
 8102ed4:	4a2c      	ldr	r2, [pc, #176]	@ (8102f88 <MX_TIM3_Init+0xe8>)
 8102ed6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8102ed8:	4b2a      	ldr	r3, [pc, #168]	@ (8102f84 <MX_TIM3_Init+0xe4>)
 8102eda:	22c7      	movs	r2, #199	@ 0xc7
 8102edc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102ede:	4b29      	ldr	r3, [pc, #164]	@ (8102f84 <MX_TIM3_Init+0xe4>)
 8102ee0:	2200      	movs	r2, #0
 8102ee2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50-1;
 8102ee4:	4b27      	ldr	r3, [pc, #156]	@ (8102f84 <MX_TIM3_Init+0xe4>)
 8102ee6:	2231      	movs	r2, #49	@ 0x31
 8102ee8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102eea:	4b26      	ldr	r3, [pc, #152]	@ (8102f84 <MX_TIM3_Init+0xe4>)
 8102eec:	2200      	movs	r2, #0
 8102eee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102ef0:	4b24      	ldr	r3, [pc, #144]	@ (8102f84 <MX_TIM3_Init+0xe4>)
 8102ef2:	2200      	movs	r2, #0
 8102ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8102ef6:	4823      	ldr	r0, [pc, #140]	@ (8102f84 <MX_TIM3_Init+0xe4>)
 8102ef8:	f006 fc92 	bl	8109820 <HAL_TIM_Base_Init>
 8102efc:	4603      	mov	r3, r0
 8102efe:	2b00      	cmp	r3, #0
 8102f00:	d001      	beq.n	8102f06 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8102f02:	f000 fa75 	bl	81033f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102f06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8102f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8102f0c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8102f10:	4619      	mov	r1, r3
 8102f12:	481c      	ldr	r0, [pc, #112]	@ (8102f84 <MX_TIM3_Init+0xe4>)
 8102f14:	f007 f9f6 	bl	810a304 <HAL_TIM_ConfigClockSource>
 8102f18:	4603      	mov	r3, r0
 8102f1a:	2b00      	cmp	r3, #0
 8102f1c:	d001      	beq.n	8102f22 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8102f1e:	f000 fa67 	bl	81033f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8102f22:	4818      	ldr	r0, [pc, #96]	@ (8102f84 <MX_TIM3_Init+0xe4>)
 8102f24:	f006 fdbc 	bl	8109aa0 <HAL_TIM_PWM_Init>
 8102f28:	4603      	mov	r3, r0
 8102f2a:	2b00      	cmp	r3, #0
 8102f2c:	d001      	beq.n	8102f32 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8102f2e:	f000 fa5f 	bl	81033f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102f32:	2300      	movs	r3, #0
 8102f34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102f36:	2300      	movs	r3, #0
 8102f38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8102f3a:	f107 031c 	add.w	r3, r7, #28
 8102f3e:	4619      	mov	r1, r3
 8102f40:	4810      	ldr	r0, [pc, #64]	@ (8102f84 <MX_TIM3_Init+0xe4>)
 8102f42:	f007 ff3d 	bl	810adc0 <HAL_TIMEx_MasterConfigSynchronization>
 8102f46:	4603      	mov	r3, r0
 8102f48:	2b00      	cmp	r3, #0
 8102f4a:	d001      	beq.n	8102f50 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8102f4c:	f000 fa50 	bl	81033f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8102f50:	2360      	movs	r3, #96	@ 0x60
 8102f52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8102f54:	2300      	movs	r3, #0
 8102f56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102f58:	2300      	movs	r3, #0
 8102f5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8102f5c:	2300      	movs	r3, #0
 8102f5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8102f60:	463b      	mov	r3, r7
 8102f62:	2200      	movs	r2, #0
 8102f64:	4619      	mov	r1, r3
 8102f66:	4807      	ldr	r0, [pc, #28]	@ (8102f84 <MX_TIM3_Init+0xe4>)
 8102f68:	f007 f8b8 	bl	810a0dc <HAL_TIM_PWM_ConfigChannel>
 8102f6c:	4603      	mov	r3, r0
 8102f6e:	2b00      	cmp	r3, #0
 8102f70:	d001      	beq.n	8102f76 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8102f72:	f000 fa3d 	bl	81033f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8102f76:	4803      	ldr	r0, [pc, #12]	@ (8102f84 <MX_TIM3_Init+0xe4>)
 8102f78:	f000 fc0c 	bl	8103794 <HAL_TIM_MspPostInit>

}
 8102f7c:	bf00      	nop
 8102f7e:	3738      	adds	r7, #56	@ 0x38
 8102f80:	46bd      	mov	sp, r7
 8102f82:	bd80      	pop	{r7, pc}
 8102f84:	100003d8 	.word	0x100003d8
 8102f88:	40000400 	.word	0x40000400

08102f8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8102f8c:	b580      	push	{r7, lr}
 8102f8e:	b08c      	sub	sp, #48	@ 0x30
 8102f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8102f92:	f107 030c 	add.w	r3, r7, #12
 8102f96:	2224      	movs	r2, #36	@ 0x24
 8102f98:	2100      	movs	r1, #0
 8102f9a:	4618      	mov	r0, r3
 8102f9c:	f00b f898 	bl	810e0d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102fa0:	463b      	mov	r3, r7
 8102fa2:	2200      	movs	r2, #0
 8102fa4:	601a      	str	r2, [r3, #0]
 8102fa6:	605a      	str	r2, [r3, #4]
 8102fa8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8102faa:	4b21      	ldr	r3, [pc, #132]	@ (8103030 <MX_TIM4_Init+0xa4>)
 8102fac:	4a21      	ldr	r2, [pc, #132]	@ (8103034 <MX_TIM4_Init+0xa8>)
 8102fae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8102fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8103030 <MX_TIM4_Init+0xa4>)
 8102fb2:	2200      	movs	r2, #0
 8102fb4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8103030 <MX_TIM4_Init+0xa4>)
 8102fb8:	2200      	movs	r2, #0
 8102fba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3423-1;
 8102fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8103030 <MX_TIM4_Init+0xa4>)
 8102fbe:	f640 525e 	movw	r2, #3422	@ 0xd5e
 8102fc2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8103030 <MX_TIM4_Init+0xa4>)
 8102fc6:	2200      	movs	r2, #0
 8102fc8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102fca:	4b19      	ldr	r3, [pc, #100]	@ (8103030 <MX_TIM4_Init+0xa4>)
 8102fcc:	2200      	movs	r2, #0
 8102fce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8102fd0:	2301      	movs	r3, #1
 8102fd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8102fd4:	2300      	movs	r3, #0
 8102fd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8102fd8:	2301      	movs	r3, #1
 8102fda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8102fdc:	2300      	movs	r3, #0
 8102fde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8102fe0:	2300      	movs	r3, #0
 8102fe2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8102fe4:	2300      	movs	r3, #0
 8102fe6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8102fe8:	2301      	movs	r3, #1
 8102fea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8102fec:	2300      	movs	r3, #0
 8102fee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8102ff0:	2300      	movs	r3, #0
 8102ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8102ff4:	f107 030c 	add.w	r3, r7, #12
 8102ff8:	4619      	mov	r1, r3
 8102ffa:	480d      	ldr	r0, [pc, #52]	@ (8103030 <MX_TIM4_Init+0xa4>)
 8102ffc:	f006 fec0 	bl	8109d80 <HAL_TIM_Encoder_Init>
 8103000:	4603      	mov	r3, r0
 8103002:	2b00      	cmp	r3, #0
 8103004:	d001      	beq.n	810300a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8103006:	f000 f9f3 	bl	81033f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810300a:	2300      	movs	r3, #0
 810300c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810300e:	2300      	movs	r3, #0
 8103010:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8103012:	463b      	mov	r3, r7
 8103014:	4619      	mov	r1, r3
 8103016:	4806      	ldr	r0, [pc, #24]	@ (8103030 <MX_TIM4_Init+0xa4>)
 8103018:	f007 fed2 	bl	810adc0 <HAL_TIMEx_MasterConfigSynchronization>
 810301c:	4603      	mov	r3, r0
 810301e:	2b00      	cmp	r3, #0
 8103020:	d001      	beq.n	8103026 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8103022:	f000 f9e5 	bl	81033f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8103026:	bf00      	nop
 8103028:	3730      	adds	r7, #48	@ 0x30
 810302a:	46bd      	mov	sp, r7
 810302c:	bd80      	pop	{r7, pc}
 810302e:	bf00      	nop
 8103030:	10000424 	.word	0x10000424
 8103034:	40000800 	.word	0x40000800

08103038 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8103038:	b580      	push	{r7, lr}
 810303a:	b08c      	sub	sp, #48	@ 0x30
 810303c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 810303e:	f107 030c 	add.w	r3, r7, #12
 8103042:	2224      	movs	r2, #36	@ 0x24
 8103044:	2100      	movs	r1, #0
 8103046:	4618      	mov	r0, r3
 8103048:	f00b f842 	bl	810e0d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810304c:	463b      	mov	r3, r7
 810304e:	2200      	movs	r2, #0
 8103050:	601a      	str	r2, [r3, #0]
 8103052:	605a      	str	r2, [r3, #4]
 8103054:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8103056:	4b23      	ldr	r3, [pc, #140]	@ (81030e4 <MX_TIM8_Init+0xac>)
 8103058:	4a23      	ldr	r2, [pc, #140]	@ (81030e8 <MX_TIM8_Init+0xb0>)
 810305a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 810305c:	4b21      	ldr	r3, [pc, #132]	@ (81030e4 <MX_TIM8_Init+0xac>)
 810305e:	2200      	movs	r2, #0
 8103060:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8103062:	4b20      	ldr	r3, [pc, #128]	@ (81030e4 <MX_TIM8_Init+0xac>)
 8103064:	2200      	movs	r2, #0
 8103066:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8103068:	4b1e      	ldr	r3, [pc, #120]	@ (81030e4 <MX_TIM8_Init+0xac>)
 810306a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 810306e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8103070:	4b1c      	ldr	r3, [pc, #112]	@ (81030e4 <MX_TIM8_Init+0xac>)
 8103072:	2200      	movs	r2, #0
 8103074:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8103076:	4b1b      	ldr	r3, [pc, #108]	@ (81030e4 <MX_TIM8_Init+0xac>)
 8103078:	2200      	movs	r2, #0
 810307a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810307c:	4b19      	ldr	r3, [pc, #100]	@ (81030e4 <MX_TIM8_Init+0xac>)
 810307e:	2200      	movs	r2, #0
 8103080:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8103082:	2301      	movs	r3, #1
 8103084:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8103086:	2300      	movs	r3, #0
 8103088:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 810308a:	2301      	movs	r3, #1
 810308c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 810308e:	2300      	movs	r3, #0
 8103090:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8103092:	2300      	movs	r3, #0
 8103094:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8103096:	2300      	movs	r3, #0
 8103098:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 810309a:	2301      	movs	r3, #1
 810309c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 810309e:	2300      	movs	r3, #0
 81030a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 81030a2:	2300      	movs	r3, #0
 81030a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 81030a6:	f107 030c 	add.w	r3, r7, #12
 81030aa:	4619      	mov	r1, r3
 81030ac:	480d      	ldr	r0, [pc, #52]	@ (81030e4 <MX_TIM8_Init+0xac>)
 81030ae:	f006 fe67 	bl	8109d80 <HAL_TIM_Encoder_Init>
 81030b2:	4603      	mov	r3, r0
 81030b4:	2b00      	cmp	r3, #0
 81030b6:	d001      	beq.n	81030bc <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 81030b8:	f000 f99a 	bl	81033f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81030bc:	2300      	movs	r3, #0
 81030be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81030c0:	2300      	movs	r3, #0
 81030c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81030c4:	2300      	movs	r3, #0
 81030c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 81030c8:	463b      	mov	r3, r7
 81030ca:	4619      	mov	r1, r3
 81030cc:	4805      	ldr	r0, [pc, #20]	@ (81030e4 <MX_TIM8_Init+0xac>)
 81030ce:	f007 fe77 	bl	810adc0 <HAL_TIMEx_MasterConfigSynchronization>
 81030d2:	4603      	mov	r3, r0
 81030d4:	2b00      	cmp	r3, #0
 81030d6:	d001      	beq.n	81030dc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 81030d8:	f000 f98a 	bl	81033f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 81030dc:	bf00      	nop
 81030de:	3730      	adds	r7, #48	@ 0x30
 81030e0:	46bd      	mov	sp, r7
 81030e2:	bd80      	pop	{r7, pc}
 81030e4:	10000470 	.word	0x10000470
 81030e8:	40010400 	.word	0x40010400

081030ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 81030ec:	b580      	push	{r7, lr}
 81030ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81030f0:	4b22      	ldr	r3, [pc, #136]	@ (810317c <MX_USART3_UART_Init+0x90>)
 81030f2:	4a23      	ldr	r2, [pc, #140]	@ (8103180 <MX_USART3_UART_Init+0x94>)
 81030f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 81030f6:	4b21      	ldr	r3, [pc, #132]	@ (810317c <MX_USART3_UART_Init+0x90>)
 81030f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 81030fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81030fe:	4b1f      	ldr	r3, [pc, #124]	@ (810317c <MX_USART3_UART_Init+0x90>)
 8103100:	2200      	movs	r2, #0
 8103102:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8103104:	4b1d      	ldr	r3, [pc, #116]	@ (810317c <MX_USART3_UART_Init+0x90>)
 8103106:	2200      	movs	r2, #0
 8103108:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 810310a:	4b1c      	ldr	r3, [pc, #112]	@ (810317c <MX_USART3_UART_Init+0x90>)
 810310c:	2200      	movs	r2, #0
 810310e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8103110:	4b1a      	ldr	r3, [pc, #104]	@ (810317c <MX_USART3_UART_Init+0x90>)
 8103112:	220c      	movs	r2, #12
 8103114:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8103116:	4b19      	ldr	r3, [pc, #100]	@ (810317c <MX_USART3_UART_Init+0x90>)
 8103118:	2200      	movs	r2, #0
 810311a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 810311c:	4b17      	ldr	r3, [pc, #92]	@ (810317c <MX_USART3_UART_Init+0x90>)
 810311e:	2200      	movs	r2, #0
 8103120:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8103122:	4b16      	ldr	r3, [pc, #88]	@ (810317c <MX_USART3_UART_Init+0x90>)
 8103124:	2200      	movs	r2, #0
 8103126:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8103128:	4b14      	ldr	r3, [pc, #80]	@ (810317c <MX_USART3_UART_Init+0x90>)
 810312a:	2200      	movs	r2, #0
 810312c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810312e:	4b13      	ldr	r3, [pc, #76]	@ (810317c <MX_USART3_UART_Init+0x90>)
 8103130:	2200      	movs	r2, #0
 8103132:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8103134:	4811      	ldr	r0, [pc, #68]	@ (810317c <MX_USART3_UART_Init+0x90>)
 8103136:	f007 ff6d 	bl	810b014 <HAL_UART_Init>
 810313a:	4603      	mov	r3, r0
 810313c:	2b00      	cmp	r3, #0
 810313e:	d001      	beq.n	8103144 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8103140:	f000 f956 	bl	81033f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103144:	2100      	movs	r1, #0
 8103146:	480d      	ldr	r0, [pc, #52]	@ (810317c <MX_USART3_UART_Init+0x90>)
 8103148:	f009 f8ca 	bl	810c2e0 <HAL_UARTEx_SetTxFifoThreshold>
 810314c:	4603      	mov	r3, r0
 810314e:	2b00      	cmp	r3, #0
 8103150:	d001      	beq.n	8103156 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8103152:	f000 f94d 	bl	81033f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103156:	2100      	movs	r1, #0
 8103158:	4808      	ldr	r0, [pc, #32]	@ (810317c <MX_USART3_UART_Init+0x90>)
 810315a:	f009 f8ff 	bl	810c35c <HAL_UARTEx_SetRxFifoThreshold>
 810315e:	4603      	mov	r3, r0
 8103160:	2b00      	cmp	r3, #0
 8103162:	d001      	beq.n	8103168 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8103164:	f000 f944 	bl	81033f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8103168:	4804      	ldr	r0, [pc, #16]	@ (810317c <MX_USART3_UART_Init+0x90>)
 810316a:	f009 f880 	bl	810c26e <HAL_UARTEx_DisableFifoMode>
 810316e:	4603      	mov	r3, r0
 8103170:	2b00      	cmp	r3, #0
 8103172:	d001      	beq.n	8103178 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8103174:	f000 f93c 	bl	81033f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8103178:	bf00      	nop
 810317a:	bd80      	pop	{r7, pc}
 810317c:	100004bc 	.word	0x100004bc
 8103180:	40004800 	.word	0x40004800

08103184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8103184:	b580      	push	{r7, lr}
 8103186:	b08c      	sub	sp, #48	@ 0x30
 8103188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810318a:	f107 031c 	add.w	r3, r7, #28
 810318e:	2200      	movs	r2, #0
 8103190:	601a      	str	r2, [r3, #0]
 8103192:	605a      	str	r2, [r3, #4]
 8103194:	609a      	str	r2, [r3, #8]
 8103196:	60da      	str	r2, [r3, #12]
 8103198:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 810319a:	4b54      	ldr	r3, [pc, #336]	@ (81032ec <MX_GPIO_Init+0x168>)
 810319c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81031a0:	4a52      	ldr	r2, [pc, #328]	@ (81032ec <MX_GPIO_Init+0x168>)
 81031a2:	f043 0304 	orr.w	r3, r3, #4
 81031a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81031aa:	4b50      	ldr	r3, [pc, #320]	@ (81032ec <MX_GPIO_Init+0x168>)
 81031ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81031b0:	f003 0304 	and.w	r3, r3, #4
 81031b4:	61bb      	str	r3, [r7, #24]
 81031b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81031b8:	4b4c      	ldr	r3, [pc, #304]	@ (81032ec <MX_GPIO_Init+0x168>)
 81031ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81031be:	4a4b      	ldr	r2, [pc, #300]	@ (81032ec <MX_GPIO_Init+0x168>)
 81031c0:	f043 0301 	orr.w	r3, r3, #1
 81031c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81031c8:	4b48      	ldr	r3, [pc, #288]	@ (81032ec <MX_GPIO_Init+0x168>)
 81031ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81031ce:	f003 0301 	and.w	r3, r3, #1
 81031d2:	617b      	str	r3, [r7, #20]
 81031d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 81031d6:	4b45      	ldr	r3, [pc, #276]	@ (81032ec <MX_GPIO_Init+0x168>)
 81031d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81031dc:	4a43      	ldr	r2, [pc, #268]	@ (81032ec <MX_GPIO_Init+0x168>)
 81031de:	f043 0320 	orr.w	r3, r3, #32
 81031e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81031e6:	4b41      	ldr	r3, [pc, #260]	@ (81032ec <MX_GPIO_Init+0x168>)
 81031e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81031ec:	f003 0320 	and.w	r3, r3, #32
 81031f0:	613b      	str	r3, [r7, #16]
 81031f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81031f4:	4b3d      	ldr	r3, [pc, #244]	@ (81032ec <MX_GPIO_Init+0x168>)
 81031f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81031fa:	4a3c      	ldr	r2, [pc, #240]	@ (81032ec <MX_GPIO_Init+0x168>)
 81031fc:	f043 0310 	orr.w	r3, r3, #16
 8103200:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103204:	4b39      	ldr	r3, [pc, #228]	@ (81032ec <MX_GPIO_Init+0x168>)
 8103206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810320a:	f003 0310 	and.w	r3, r3, #16
 810320e:	60fb      	str	r3, [r7, #12]
 8103210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8103212:	4b36      	ldr	r3, [pc, #216]	@ (81032ec <MX_GPIO_Init+0x168>)
 8103214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103218:	4a34      	ldr	r2, [pc, #208]	@ (81032ec <MX_GPIO_Init+0x168>)
 810321a:	f043 0302 	orr.w	r3, r3, #2
 810321e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103222:	4b32      	ldr	r3, [pc, #200]	@ (81032ec <MX_GPIO_Init+0x168>)
 8103224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103228:	f003 0302 	and.w	r3, r3, #2
 810322c:	60bb      	str	r3, [r7, #8]
 810322e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8103230:	4b2e      	ldr	r3, [pc, #184]	@ (81032ec <MX_GPIO_Init+0x168>)
 8103232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103236:	4a2d      	ldr	r2, [pc, #180]	@ (81032ec <MX_GPIO_Init+0x168>)
 8103238:	f043 0308 	orr.w	r3, r3, #8
 810323c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103240:	4b2a      	ldr	r3, [pc, #168]	@ (81032ec <MX_GPIO_Init+0x168>)
 8103242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103246:	f003 0308 	and.w	r3, r3, #8
 810324a:	607b      	str	r3, [r7, #4]
 810324c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 810324e:	2200      	movs	r2, #0
 8103250:	2130      	movs	r1, #48	@ 0x30
 8103252:	4827      	ldr	r0, [pc, #156]	@ (81032f0 <MX_GPIO_Init+0x16c>)
 8103254:	f002 fd3e 	bl	8105cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8103258:	2200      	movs	r2, #0
 810325a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 810325e:	4825      	ldr	r0, [pc, #148]	@ (81032f4 <MX_GPIO_Init+0x170>)
 8103260:	f002 fd38 	bl	8105cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8103264:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8103268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 810326a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 810326e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103270:	2300      	movs	r3, #0
 8103272:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8103274:	f107 031c 	add.w	r3, r7, #28
 8103278:	4619      	mov	r1, r3
 810327a:	481f      	ldr	r0, [pc, #124]	@ (81032f8 <MX_GPIO_Init+0x174>)
 810327c:	f002 fb7a 	bl	8105974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8103280:	2308      	movs	r3, #8
 8103282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8103284:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8103288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810328a:	2300      	movs	r3, #0
 810328c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810328e:	f107 031c 	add.w	r3, r7, #28
 8103292:	4619      	mov	r1, r3
 8103294:	4816      	ldr	r0, [pc, #88]	@ (81032f0 <MX_GPIO_Init+0x16c>)
 8103296:	f002 fb6d 	bl	8105974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 810329a:	2330      	movs	r3, #48	@ 0x30
 810329c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810329e:	2301      	movs	r3, #1
 81032a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81032a2:	2300      	movs	r3, #0
 81032a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81032a6:	2300      	movs	r3, #0
 81032a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81032aa:	f107 031c 	add.w	r3, r7, #28
 81032ae:	4619      	mov	r1, r3
 81032b0:	480f      	ldr	r0, [pc, #60]	@ (81032f0 <MX_GPIO_Init+0x16c>)
 81032b2:	f002 fb5f 	bl	8105974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 81032b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81032ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81032bc:	2301      	movs	r3, #1
 81032be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81032c0:	2300      	movs	r3, #0
 81032c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81032c4:	2300      	movs	r3, #0
 81032c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81032c8:	f107 031c 	add.w	r3, r7, #28
 81032cc:	4619      	mov	r1, r3
 81032ce:	4809      	ldr	r0, [pc, #36]	@ (81032f4 <MX_GPIO_Init+0x170>)
 81032d0:	f002 fb50 	bl	8105974 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 81032d4:	2200      	movs	r2, #0
 81032d6:	2100      	movs	r1, #0
 81032d8:	2009      	movs	r0, #9
 81032da:	f002 fb02 	bl	81058e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 81032de:	2009      	movs	r0, #9
 81032e0:	f002 fb19 	bl	8105916 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 81032e4:	bf00      	nop
 81032e6:	3730      	adds	r7, #48	@ 0x30
 81032e8:	46bd      	mov	sp, r7
 81032ea:	bd80      	pop	{r7, pc}
 81032ec:	58024400 	.word	0x58024400
 81032f0:	58020000 	.word	0x58020000
 81032f4:	58020400 	.word	0x58020400
 81032f8:	58020800 	.word	0x58020800

081032fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//******************
//INTERRUPT PA3 SENSORE DATA READY
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 81032fc:	b480      	push	{r7}
 81032fe:	b083      	sub	sp, #12
 8103300:	af00      	add	r7, sp, #0
 8103302:	4603      	mov	r3, r0
 8103304:	80fb      	strh	r3, [r7, #6]


	if (GPIO_Pin == GPIO_PIN_3) {
 8103306:	88fb      	ldrh	r3, [r7, #6]
 8103308:	2b08      	cmp	r3, #8
 810330a:	d102      	bne.n	8103312 <HAL_GPIO_EXTI_Callback+0x16>
		flag_BNO055_Data_Ready = 1;
 810330c:	4b0c      	ldr	r3, [pc, #48]	@ (8103340 <HAL_GPIO_EXTI_Callback+0x44>)
 810330e:	2201      	movs	r2, #1
 8103310:	601a      	str	r2, [r3, #0]
	}

	//FUNZIONE DI CALLBACK PULSANTE BLU
	if(GPIO_Pin == GPIO_PIN_13)
 8103312:	88fb      	ldrh	r3, [r7, #6]
 8103314:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103318:	d10b      	bne.n	8103332 <HAL_GPIO_EXTI_Callback+0x36>
		{
			sys_started++;
 810331a:	4b0a      	ldr	r3, [pc, #40]	@ (8103344 <HAL_GPIO_EXTI_Callback+0x48>)
 810331c:	681b      	ldr	r3, [r3, #0]
 810331e:	3301      	adds	r3, #1
 8103320:	4a08      	ldr	r2, [pc, #32]	@ (8103344 <HAL_GPIO_EXTI_Callback+0x48>)
 8103322:	6013      	str	r3, [r2, #0]

			if(sys_started==2) sys_started=0;
 8103324:	4b07      	ldr	r3, [pc, #28]	@ (8103344 <HAL_GPIO_EXTI_Callback+0x48>)
 8103326:	681b      	ldr	r3, [r3, #0]
 8103328:	2b02      	cmp	r3, #2
 810332a:	d102      	bne.n	8103332 <HAL_GPIO_EXTI_Callback+0x36>
 810332c:	4b05      	ldr	r3, [pc, #20]	@ (8103344 <HAL_GPIO_EXTI_Callback+0x48>)
 810332e:	2200      	movs	r2, #0
 8103330:	601a      	str	r2, [r3, #0]

		}
}
 8103332:	bf00      	nop
 8103334:	370c      	adds	r7, #12
 8103336:	46bd      	mov	sp, r7
 8103338:	f85d 7b04 	ldr.w	r7, [sp], #4
 810333c:	4770      	bx	lr
 810333e:	bf00      	nop
 8103340:	100005d0 	.word	0x100005d0
 8103344:	10000614 	.word	0x10000614

08103348 <HAL_TIM_PeriodElapsedCallback>:
//******************

//******************
//FUNZIONE DI CALLBACK PER IL TIMER 2
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8103348:	b480      	push	{r7}
 810334a:	b083      	sub	sp, #12
 810334c:	af00      	add	r7, sp, #0
 810334e:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8103350:	687b      	ldr	r3, [r7, #4]
 8103352:	4a0d      	ldr	r2, [pc, #52]	@ (8103388 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8103354:	4293      	cmp	r3, r2
 8103356:	d111      	bne.n	810337c <HAL_TIM_PeriodElapsedCallback+0x34>
		flag_Tc = 1; //Flag che permette di entrare nel ciclo del while ogni 0.01 secondi
 8103358:	4b0c      	ldr	r3, [pc, #48]	@ (810338c <HAL_TIM_PeriodElapsedCallback+0x44>)
 810335a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 810335e:	601a      	str	r2, [r3, #0]
		n_ref++;
 8103360:	4b0b      	ldr	r3, [pc, #44]	@ (8103390 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8103362:	681b      	ldr	r3, [r3, #0]
 8103364:	3301      	adds	r3, #1
 8103366:	4a0a      	ldr	r2, [pc, #40]	@ (8103390 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8103368:	6013      	str	r3, [r2, #0]

		if (n_ref > 100 * 500)
 810336a:	4b09      	ldr	r3, [pc, #36]	@ (8103390 <HAL_TIM_PeriodElapsedCallback+0x48>)
 810336c:	681b      	ldr	r3, [r3, #0]
 810336e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8103372:	4293      	cmp	r3, r2
 8103374:	dd02      	ble.n	810337c <HAL_TIM_PeriodElapsedCallback+0x34>
			n_ref = 0;
 8103376:	4b06      	ldr	r3, [pc, #24]	@ (8103390 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8103378:	2200      	movs	r2, #0
 810337a:	601a      	str	r2, [r3, #0]

	}
}
 810337c:	bf00      	nop
 810337e:	370c      	adds	r7, #12
 8103380:	46bd      	mov	sp, r7
 8103382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103386:	4770      	bx	lr
 8103388:	1000038c 	.word	0x1000038c
 810338c:	100005d4 	.word	0x100005d4
 8103390:	1000065c 	.word	0x1000065c

08103394 <__io_putchar>:
//*******************


//******************
//INPUT E OUTPUT USART
int __io_putchar(int ch) {
 8103394:	b580      	push	{r7, lr}
 8103396:	b082      	sub	sp, #8
 8103398:	af00      	add	r7, sp, #0
 810339a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 810339c:	1d39      	adds	r1, r7, #4
 810339e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 81033a2:	2201      	movs	r2, #1
 81033a4:	4803      	ldr	r0, [pc, #12]	@ (81033b4 <__io_putchar+0x20>)
 81033a6:	f007 fe85 	bl	810b0b4 <HAL_UART_Transmit>
	return ch;
 81033aa:	687b      	ldr	r3, [r7, #4]
}
 81033ac:	4618      	mov	r0, r3
 81033ae:	3708      	adds	r7, #8
 81033b0:	46bd      	mov	sp, r7
 81033b2:	bd80      	pop	{r7, pc}
 81033b4:	100004bc 	.word	0x100004bc

081033b8 <__io_getchar>:
int __io_getchar(void) {
 81033b8:	b580      	push	{r7, lr}
 81033ba:	b082      	sub	sp, #8
 81033bc:	af00      	add	r7, sp, #0
	uint8_t ch;
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 81033be:	4b0b      	ldr	r3, [pc, #44]	@ (81033ec <__io_getchar+0x34>)
 81033c0:	681b      	ldr	r3, [r3, #0]
 81033c2:	2208      	movs	r2, #8
 81033c4:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 81033c6:	1df9      	adds	r1, r7, #7
 81033c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 81033cc:	2201      	movs	r2, #1
 81033ce:	4807      	ldr	r0, [pc, #28]	@ (81033ec <__io_getchar+0x34>)
 81033d0:	f007 fefe 	bl	810b1d0 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 81033d4:	1df9      	adds	r1, r7, #7
 81033d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 81033da:	2201      	movs	r2, #1
 81033dc:	4803      	ldr	r0, [pc, #12]	@ (81033ec <__io_getchar+0x34>)
 81033de:	f007 fe69 	bl	810b0b4 <HAL_UART_Transmit>
	return ch;
 81033e2:	79fb      	ldrb	r3, [r7, #7]
}
 81033e4:	4618      	mov	r0, r3
 81033e6:	3708      	adds	r7, #8
 81033e8:	46bd      	mov	sp, r7
 81033ea:	bd80      	pop	{r7, pc}
 81033ec:	100004bc 	.word	0x100004bc

081033f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81033f0:	b480      	push	{r7}
 81033f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81033f4:	b672      	cpsid	i
}
 81033f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 81033f8:	bf00      	nop
 81033fa:	e7fd      	b.n	81033f8 <Error_Handler+0x8>

081033fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81033fc:	b480      	push	{r7}
 81033fe:	b083      	sub	sp, #12
 8103400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103402:	4b0a      	ldr	r3, [pc, #40]	@ (810342c <HAL_MspInit+0x30>)
 8103404:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8103408:	4a08      	ldr	r2, [pc, #32]	@ (810342c <HAL_MspInit+0x30>)
 810340a:	f043 0302 	orr.w	r3, r3, #2
 810340e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8103412:	4b06      	ldr	r3, [pc, #24]	@ (810342c <HAL_MspInit+0x30>)
 8103414:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8103418:	f003 0302 	and.w	r3, r3, #2
 810341c:	607b      	str	r3, [r7, #4]
 810341e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8103420:	bf00      	nop
 8103422:	370c      	adds	r7, #12
 8103424:	46bd      	mov	sp, r7
 8103426:	f85d 7b04 	ldr.w	r7, [sp], #4
 810342a:	4770      	bx	lr
 810342c:	58024400 	.word	0x58024400

08103430 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8103430:	b580      	push	{r7, lr}
 8103432:	b0ba      	sub	sp, #232	@ 0xe8
 8103434:	af00      	add	r7, sp, #0
 8103436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103438:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810343c:	2200      	movs	r2, #0
 810343e:	601a      	str	r2, [r3, #0]
 8103440:	605a      	str	r2, [r3, #4]
 8103442:	609a      	str	r2, [r3, #8]
 8103444:	60da      	str	r2, [r3, #12]
 8103446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8103448:	f107 0310 	add.w	r3, r7, #16
 810344c:	22c0      	movs	r2, #192	@ 0xc0
 810344e:	2100      	movs	r1, #0
 8103450:	4618      	mov	r0, r3
 8103452:	f00a fe3d 	bl	810e0d0 <memset>
  if(hadc->Instance==ADC1)
 8103456:	687b      	ldr	r3, [r7, #4]
 8103458:	681b      	ldr	r3, [r3, #0]
 810345a:	4a2c      	ldr	r2, [pc, #176]	@ (810350c <HAL_ADC_MspInit+0xdc>)
 810345c:	4293      	cmp	r3, r2
 810345e:	d151      	bne.n	8103504 <HAL_ADC_MspInit+0xd4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8103460:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8103464:	f04f 0300 	mov.w	r3, #0
 8103468:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 810346c:	2301      	movs	r3, #1
 810346e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8103470:	2312      	movs	r3, #18
 8103472:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8103474:	2302      	movs	r3, #2
 8103476:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8103478:	2302      	movs	r3, #2
 810347a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 810347c:	2302      	movs	r3, #2
 810347e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8103480:	23c0      	movs	r3, #192	@ 0xc0
 8103482:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8103484:	2320      	movs	r3, #32
 8103486:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8103488:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 810348c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 810348e:	2300      	movs	r3, #0
 8103490:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8103494:	f107 0310 	add.w	r3, r7, #16
 8103498:	4618      	mov	r0, r3
 810349a:	f003 fcc3 	bl	8106e24 <HAL_RCCEx_PeriphCLKConfig>
 810349e:	4603      	mov	r3, r0
 81034a0:	2b00      	cmp	r3, #0
 81034a2:	d001      	beq.n	81034a8 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 81034a4:	f7ff ffa4 	bl	81033f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81034a8:	4b19      	ldr	r3, [pc, #100]	@ (8103510 <HAL_ADC_MspInit+0xe0>)
 81034aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81034ae:	4a18      	ldr	r2, [pc, #96]	@ (8103510 <HAL_ADC_MspInit+0xe0>)
 81034b0:	f043 0320 	orr.w	r3, r3, #32
 81034b4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81034b8:	4b15      	ldr	r3, [pc, #84]	@ (8103510 <HAL_ADC_MspInit+0xe0>)
 81034ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81034be:	f003 0320 	and.w	r3, r3, #32
 81034c2:	60fb      	str	r3, [r7, #12]
 81034c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 81034c6:	4b12      	ldr	r3, [pc, #72]	@ (8103510 <HAL_ADC_MspInit+0xe0>)
 81034c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81034cc:	4a10      	ldr	r2, [pc, #64]	@ (8103510 <HAL_ADC_MspInit+0xe0>)
 81034ce:	f043 0320 	orr.w	r3, r3, #32
 81034d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81034d6:	4b0e      	ldr	r3, [pc, #56]	@ (8103510 <HAL_ADC_MspInit+0xe0>)
 81034d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81034dc:	f003 0320 	and.w	r3, r3, #32
 81034e0:	60bb      	str	r3, [r7, #8]
 81034e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 81034e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81034e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81034ec:	2303      	movs	r3, #3
 81034ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81034f2:	2300      	movs	r3, #0
 81034f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81034f8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81034fc:	4619      	mov	r1, r3
 81034fe:	4805      	ldr	r0, [pc, #20]	@ (8103514 <HAL_ADC_MspInit+0xe4>)
 8103500:	f002 fa38 	bl	8105974 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8103504:	bf00      	nop
 8103506:	37e8      	adds	r7, #232	@ 0xe8
 8103508:	46bd      	mov	sp, r7
 810350a:	bd80      	pop	{r7, pc}
 810350c:	40022000 	.word	0x40022000
 8103510:	58024400 	.word	0x58024400
 8103514:	58021400 	.word	0x58021400

08103518 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8103518:	b580      	push	{r7, lr}
 810351a:	b0ba      	sub	sp, #232	@ 0xe8
 810351c:	af00      	add	r7, sp, #0
 810351e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103520:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8103524:	2200      	movs	r2, #0
 8103526:	601a      	str	r2, [r3, #0]
 8103528:	605a      	str	r2, [r3, #4]
 810352a:	609a      	str	r2, [r3, #8]
 810352c:	60da      	str	r2, [r3, #12]
 810352e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8103530:	f107 0310 	add.w	r3, r7, #16
 8103534:	22c0      	movs	r2, #192	@ 0xc0
 8103536:	2100      	movs	r1, #0
 8103538:	4618      	mov	r0, r3
 810353a:	f00a fdc9 	bl	810e0d0 <memset>
  if(hi2c->Instance==I2C1)
 810353e:	687b      	ldr	r3, [r7, #4]
 8103540:	681b      	ldr	r3, [r3, #0]
 8103542:	4a26      	ldr	r2, [pc, #152]	@ (81035dc <HAL_I2C_MspInit+0xc4>)
 8103544:	4293      	cmp	r3, r2
 8103546:	d145      	bne.n	81035d4 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8103548:	f04f 0208 	mov.w	r2, #8
 810354c:	f04f 0300 	mov.w	r3, #0
 8103550:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8103554:	2300      	movs	r3, #0
 8103556:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810355a:	f107 0310 	add.w	r3, r7, #16
 810355e:	4618      	mov	r0, r3
 8103560:	f003 fc60 	bl	8106e24 <HAL_RCCEx_PeriphCLKConfig>
 8103564:	4603      	mov	r3, r0
 8103566:	2b00      	cmp	r3, #0
 8103568:	d001      	beq.n	810356e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 810356a:	f7ff ff41 	bl	81033f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810356e:	4b1c      	ldr	r3, [pc, #112]	@ (81035e0 <HAL_I2C_MspInit+0xc8>)
 8103570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103574:	4a1a      	ldr	r2, [pc, #104]	@ (81035e0 <HAL_I2C_MspInit+0xc8>)
 8103576:	f043 0302 	orr.w	r3, r3, #2
 810357a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810357e:	4b18      	ldr	r3, [pc, #96]	@ (81035e0 <HAL_I2C_MspInit+0xc8>)
 8103580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103584:	f003 0302 	and.w	r3, r3, #2
 8103588:	60fb      	str	r3, [r7, #12]
 810358a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 810358c:	23c0      	movs	r3, #192	@ 0xc0
 810358e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8103592:	2312      	movs	r3, #18
 8103594:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103598:	2300      	movs	r3, #0
 810359a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810359e:	2300      	movs	r3, #0
 81035a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 81035a4:	2304      	movs	r3, #4
 81035a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81035aa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81035ae:	4619      	mov	r1, r3
 81035b0:	480c      	ldr	r0, [pc, #48]	@ (81035e4 <HAL_I2C_MspInit+0xcc>)
 81035b2:	f002 f9df 	bl	8105974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 81035b6:	4b0a      	ldr	r3, [pc, #40]	@ (81035e0 <HAL_I2C_MspInit+0xc8>)
 81035b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81035bc:	4a08      	ldr	r2, [pc, #32]	@ (81035e0 <HAL_I2C_MspInit+0xc8>)
 81035be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81035c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81035c6:	4b06      	ldr	r3, [pc, #24]	@ (81035e0 <HAL_I2C_MspInit+0xc8>)
 81035c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81035cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81035d0:	60bb      	str	r3, [r7, #8]
 81035d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 81035d4:	bf00      	nop
 81035d6:	37e8      	adds	r7, #232	@ 0xe8
 81035d8:	46bd      	mov	sp, r7
 81035da:	bd80      	pop	{r7, pc}
 81035dc:	40005400 	.word	0x40005400
 81035e0:	58024400 	.word	0x58024400
 81035e4:	58020400 	.word	0x58020400

081035e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 81035e8:	b580      	push	{r7, lr}
 81035ea:	b086      	sub	sp, #24
 81035ec:	af00      	add	r7, sp, #0
 81035ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 81035f0:	687b      	ldr	r3, [r7, #4]
 81035f2:	681b      	ldr	r3, [r3, #0]
 81035f4:	4a23      	ldr	r2, [pc, #140]	@ (8103684 <HAL_TIM_Base_MspInit+0x9c>)
 81035f6:	4293      	cmp	r3, r2
 81035f8:	d10f      	bne.n	810361a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 81035fa:	4b23      	ldr	r3, [pc, #140]	@ (8103688 <HAL_TIM_Base_MspInit+0xa0>)
 81035fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103600:	4a21      	ldr	r2, [pc, #132]	@ (8103688 <HAL_TIM_Base_MspInit+0xa0>)
 8103602:	f043 0301 	orr.w	r3, r3, #1
 8103606:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 810360a:	4b1f      	ldr	r3, [pc, #124]	@ (8103688 <HAL_TIM_Base_MspInit+0xa0>)
 810360c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103610:	f003 0301 	and.w	r3, r3, #1
 8103614:	617b      	str	r3, [r7, #20]
 8103616:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8103618:	e030      	b.n	810367c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 810361a:	687b      	ldr	r3, [r7, #4]
 810361c:	681b      	ldr	r3, [r3, #0]
 810361e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103622:	d117      	bne.n	8103654 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8103624:	4b18      	ldr	r3, [pc, #96]	@ (8103688 <HAL_TIM_Base_MspInit+0xa0>)
 8103626:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810362a:	4a17      	ldr	r2, [pc, #92]	@ (8103688 <HAL_TIM_Base_MspInit+0xa0>)
 810362c:	f043 0301 	orr.w	r3, r3, #1
 8103630:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103634:	4b14      	ldr	r3, [pc, #80]	@ (8103688 <HAL_TIM_Base_MspInit+0xa0>)
 8103636:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810363a:	f003 0301 	and.w	r3, r3, #1
 810363e:	613b      	str	r3, [r7, #16]
 8103640:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8103642:	2200      	movs	r2, #0
 8103644:	2100      	movs	r1, #0
 8103646:	201c      	movs	r0, #28
 8103648:	f002 f94b 	bl	81058e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 810364c:	201c      	movs	r0, #28
 810364e:	f002 f962 	bl	8105916 <HAL_NVIC_EnableIRQ>
}
 8103652:	e013      	b.n	810367c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM3)
 8103654:	687b      	ldr	r3, [r7, #4]
 8103656:	681b      	ldr	r3, [r3, #0]
 8103658:	4a0c      	ldr	r2, [pc, #48]	@ (810368c <HAL_TIM_Base_MspInit+0xa4>)
 810365a:	4293      	cmp	r3, r2
 810365c:	d10e      	bne.n	810367c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 810365e:	4b0a      	ldr	r3, [pc, #40]	@ (8103688 <HAL_TIM_Base_MspInit+0xa0>)
 8103660:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103664:	4a08      	ldr	r2, [pc, #32]	@ (8103688 <HAL_TIM_Base_MspInit+0xa0>)
 8103666:	f043 0302 	orr.w	r3, r3, #2
 810366a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810366e:	4b06      	ldr	r3, [pc, #24]	@ (8103688 <HAL_TIM_Base_MspInit+0xa0>)
 8103670:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103674:	f003 0302 	and.w	r3, r3, #2
 8103678:	60fb      	str	r3, [r7, #12]
 810367a:	68fb      	ldr	r3, [r7, #12]
}
 810367c:	bf00      	nop
 810367e:	3718      	adds	r7, #24
 8103680:	46bd      	mov	sp, r7
 8103682:	bd80      	pop	{r7, pc}
 8103684:	40010000 	.word	0x40010000
 8103688:	58024400 	.word	0x58024400
 810368c:	40000400 	.word	0x40000400

08103690 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8103690:	b580      	push	{r7, lr}
 8103692:	b08c      	sub	sp, #48	@ 0x30
 8103694:	af00      	add	r7, sp, #0
 8103696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103698:	f107 031c 	add.w	r3, r7, #28
 810369c:	2200      	movs	r2, #0
 810369e:	601a      	str	r2, [r3, #0]
 81036a0:	605a      	str	r2, [r3, #4]
 81036a2:	609a      	str	r2, [r3, #8]
 81036a4:	60da      	str	r2, [r3, #12]
 81036a6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 81036a8:	687b      	ldr	r3, [r7, #4]
 81036aa:	681b      	ldr	r3, [r3, #0]
 81036ac:	4a34      	ldr	r2, [pc, #208]	@ (8103780 <HAL_TIM_Encoder_MspInit+0xf0>)
 81036ae:	4293      	cmp	r3, r2
 81036b0:	d12f      	bne.n	8103712 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 81036b2:	4b34      	ldr	r3, [pc, #208]	@ (8103784 <HAL_TIM_Encoder_MspInit+0xf4>)
 81036b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81036b8:	4a32      	ldr	r2, [pc, #200]	@ (8103784 <HAL_TIM_Encoder_MspInit+0xf4>)
 81036ba:	f043 0304 	orr.w	r3, r3, #4
 81036be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81036c2:	4b30      	ldr	r3, [pc, #192]	@ (8103784 <HAL_TIM_Encoder_MspInit+0xf4>)
 81036c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81036c8:	f003 0304 	and.w	r3, r3, #4
 81036cc:	61bb      	str	r3, [r7, #24]
 81036ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81036d0:	4b2c      	ldr	r3, [pc, #176]	@ (8103784 <HAL_TIM_Encoder_MspInit+0xf4>)
 81036d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81036d6:	4a2b      	ldr	r2, [pc, #172]	@ (8103784 <HAL_TIM_Encoder_MspInit+0xf4>)
 81036d8:	f043 0308 	orr.w	r3, r3, #8
 81036dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81036e0:	4b28      	ldr	r3, [pc, #160]	@ (8103784 <HAL_TIM_Encoder_MspInit+0xf4>)
 81036e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81036e6:	f003 0308 	and.w	r3, r3, #8
 81036ea:	617b      	str	r3, [r7, #20]
 81036ec:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 81036ee:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 81036f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81036f4:	2302      	movs	r3, #2
 81036f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81036f8:	2300      	movs	r3, #0
 81036fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81036fc:	2300      	movs	r3, #0
 81036fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8103700:	2302      	movs	r3, #2
 8103702:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8103704:	f107 031c 	add.w	r3, r7, #28
 8103708:	4619      	mov	r1, r3
 810370a:	481f      	ldr	r0, [pc, #124]	@ (8103788 <HAL_TIM_Encoder_MspInit+0xf8>)
 810370c:	f002 f932 	bl	8105974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8103710:	e032      	b.n	8103778 <HAL_TIM_Encoder_MspInit+0xe8>
  else if(htim_encoder->Instance==TIM8)
 8103712:	687b      	ldr	r3, [r7, #4]
 8103714:	681b      	ldr	r3, [r3, #0]
 8103716:	4a1d      	ldr	r2, [pc, #116]	@ (810378c <HAL_TIM_Encoder_MspInit+0xfc>)
 8103718:	4293      	cmp	r3, r2
 810371a:	d12d      	bne.n	8103778 <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 810371c:	4b19      	ldr	r3, [pc, #100]	@ (8103784 <HAL_TIM_Encoder_MspInit+0xf4>)
 810371e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103722:	4a18      	ldr	r2, [pc, #96]	@ (8103784 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103724:	f043 0302 	orr.w	r3, r3, #2
 8103728:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 810372c:	4b15      	ldr	r3, [pc, #84]	@ (8103784 <HAL_TIM_Encoder_MspInit+0xf4>)
 810372e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103732:	f003 0302 	and.w	r3, r3, #2
 8103736:	613b      	str	r3, [r7, #16]
 8103738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810373a:	4b12      	ldr	r3, [pc, #72]	@ (8103784 <HAL_TIM_Encoder_MspInit+0xf4>)
 810373c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103740:	4a10      	ldr	r2, [pc, #64]	@ (8103784 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103742:	f043 0304 	orr.w	r3, r3, #4
 8103746:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810374a:	4b0e      	ldr	r3, [pc, #56]	@ (8103784 <HAL_TIM_Encoder_MspInit+0xf4>)
 810374c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103750:	f003 0304 	and.w	r3, r3, #4
 8103754:	60fb      	str	r3, [r7, #12]
 8103756:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8103758:	23c0      	movs	r3, #192	@ 0xc0
 810375a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810375c:	2302      	movs	r3, #2
 810375e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103760:	2300      	movs	r3, #0
 8103762:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103764:	2300      	movs	r3, #0
 8103766:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8103768:	2303      	movs	r3, #3
 810376a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810376c:	f107 031c 	add.w	r3, r7, #28
 8103770:	4619      	mov	r1, r3
 8103772:	4807      	ldr	r0, [pc, #28]	@ (8103790 <HAL_TIM_Encoder_MspInit+0x100>)
 8103774:	f002 f8fe 	bl	8105974 <HAL_GPIO_Init>
}
 8103778:	bf00      	nop
 810377a:	3730      	adds	r7, #48	@ 0x30
 810377c:	46bd      	mov	sp, r7
 810377e:	bd80      	pop	{r7, pc}
 8103780:	40000800 	.word	0x40000800
 8103784:	58024400 	.word	0x58024400
 8103788:	58020c00 	.word	0x58020c00
 810378c:	40010400 	.word	0x40010400
 8103790:	58020800 	.word	0x58020800

08103794 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8103794:	b580      	push	{r7, lr}
 8103796:	b08a      	sub	sp, #40	@ 0x28
 8103798:	af00      	add	r7, sp, #0
 810379a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810379c:	f107 0314 	add.w	r3, r7, #20
 81037a0:	2200      	movs	r2, #0
 81037a2:	601a      	str	r2, [r3, #0]
 81037a4:	605a      	str	r2, [r3, #4]
 81037a6:	609a      	str	r2, [r3, #8]
 81037a8:	60da      	str	r2, [r3, #12]
 81037aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 81037ac:	687b      	ldr	r3, [r7, #4]
 81037ae:	681b      	ldr	r3, [r3, #0]
 81037b0:	4a25      	ldr	r2, [pc, #148]	@ (8103848 <HAL_TIM_MspPostInit+0xb4>)
 81037b2:	4293      	cmp	r3, r2
 81037b4:	d120      	bne.n	81037f8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 81037b6:	4b25      	ldr	r3, [pc, #148]	@ (810384c <HAL_TIM_MspPostInit+0xb8>)
 81037b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81037bc:	4a23      	ldr	r2, [pc, #140]	@ (810384c <HAL_TIM_MspPostInit+0xb8>)
 81037be:	f043 0310 	orr.w	r3, r3, #16
 81037c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81037c6:	4b21      	ldr	r3, [pc, #132]	@ (810384c <HAL_TIM_MspPostInit+0xb8>)
 81037c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81037cc:	f003 0310 	and.w	r3, r3, #16
 81037d0:	613b      	str	r3, [r7, #16]
 81037d2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 81037d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81037d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81037da:	2302      	movs	r3, #2
 81037dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81037de:	2300      	movs	r3, #0
 81037e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81037e2:	2300      	movs	r3, #0
 81037e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 81037e6:	2301      	movs	r3, #1
 81037e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81037ea:	f107 0314 	add.w	r3, r7, #20
 81037ee:	4619      	mov	r1, r3
 81037f0:	4817      	ldr	r0, [pc, #92]	@ (8103850 <HAL_TIM_MspPostInit+0xbc>)
 81037f2:	f002 f8bf 	bl	8105974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 81037f6:	e023      	b.n	8103840 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 81037f8:	687b      	ldr	r3, [r7, #4]
 81037fa:	681b      	ldr	r3, [r3, #0]
 81037fc:	4a15      	ldr	r2, [pc, #84]	@ (8103854 <HAL_TIM_MspPostInit+0xc0>)
 81037fe:	4293      	cmp	r3, r2
 8103800:	d11e      	bne.n	8103840 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8103802:	4b12      	ldr	r3, [pc, #72]	@ (810384c <HAL_TIM_MspPostInit+0xb8>)
 8103804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103808:	4a10      	ldr	r2, [pc, #64]	@ (810384c <HAL_TIM_MspPostInit+0xb8>)
 810380a:	f043 0301 	orr.w	r3, r3, #1
 810380e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103812:	4b0e      	ldr	r3, [pc, #56]	@ (810384c <HAL_TIM_MspPostInit+0xb8>)
 8103814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103818:	f003 0301 	and.w	r3, r3, #1
 810381c:	60fb      	str	r3, [r7, #12]
 810381e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8103820:	2340      	movs	r3, #64	@ 0x40
 8103822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103824:	2302      	movs	r3, #2
 8103826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103828:	2300      	movs	r3, #0
 810382a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810382c:	2300      	movs	r3, #0
 810382e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8103830:	2302      	movs	r3, #2
 8103832:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8103834:	f107 0314 	add.w	r3, r7, #20
 8103838:	4619      	mov	r1, r3
 810383a:	4807      	ldr	r0, [pc, #28]	@ (8103858 <HAL_TIM_MspPostInit+0xc4>)
 810383c:	f002 f89a 	bl	8105974 <HAL_GPIO_Init>
}
 8103840:	bf00      	nop
 8103842:	3728      	adds	r7, #40	@ 0x28
 8103844:	46bd      	mov	sp, r7
 8103846:	bd80      	pop	{r7, pc}
 8103848:	40010000 	.word	0x40010000
 810384c:	58024400 	.word	0x58024400
 8103850:	58021000 	.word	0x58021000
 8103854:	40000400 	.word	0x40000400
 8103858:	58020000 	.word	0x58020000

0810385c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 810385c:	b580      	push	{r7, lr}
 810385e:	b0ba      	sub	sp, #232	@ 0xe8
 8103860:	af00      	add	r7, sp, #0
 8103862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103864:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8103868:	2200      	movs	r2, #0
 810386a:	601a      	str	r2, [r3, #0]
 810386c:	605a      	str	r2, [r3, #4]
 810386e:	609a      	str	r2, [r3, #8]
 8103870:	60da      	str	r2, [r3, #12]
 8103872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8103874:	f107 0310 	add.w	r3, r7, #16
 8103878:	22c0      	movs	r2, #192	@ 0xc0
 810387a:	2100      	movs	r1, #0
 810387c:	4618      	mov	r0, r3
 810387e:	f00a fc27 	bl	810e0d0 <memset>
  if(huart->Instance==USART3)
 8103882:	687b      	ldr	r3, [r7, #4]
 8103884:	681b      	ldr	r3, [r3, #0]
 8103886:	4a27      	ldr	r2, [pc, #156]	@ (8103924 <HAL_UART_MspInit+0xc8>)
 8103888:	4293      	cmp	r3, r2
 810388a:	d146      	bne.n	810391a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 810388c:	f04f 0202 	mov.w	r2, #2
 8103890:	f04f 0300 	mov.w	r3, #0
 8103894:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8103898:	2300      	movs	r3, #0
 810389a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810389e:	f107 0310 	add.w	r3, r7, #16
 81038a2:	4618      	mov	r0, r3
 81038a4:	f003 fabe 	bl	8106e24 <HAL_RCCEx_PeriphCLKConfig>
 81038a8:	4603      	mov	r3, r0
 81038aa:	2b00      	cmp	r3, #0
 81038ac:	d001      	beq.n	81038b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 81038ae:	f7ff fd9f 	bl	81033f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 81038b2:	4b1d      	ldr	r3, [pc, #116]	@ (8103928 <HAL_UART_MspInit+0xcc>)
 81038b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81038b8:	4a1b      	ldr	r2, [pc, #108]	@ (8103928 <HAL_UART_MspInit+0xcc>)
 81038ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 81038be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81038c2:	4b19      	ldr	r3, [pc, #100]	@ (8103928 <HAL_UART_MspInit+0xcc>)
 81038c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81038c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81038cc:	60fb      	str	r3, [r7, #12]
 81038ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81038d0:	4b15      	ldr	r3, [pc, #84]	@ (8103928 <HAL_UART_MspInit+0xcc>)
 81038d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81038d6:	4a14      	ldr	r2, [pc, #80]	@ (8103928 <HAL_UART_MspInit+0xcc>)
 81038d8:	f043 0308 	orr.w	r3, r3, #8
 81038dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81038e0:	4b11      	ldr	r3, [pc, #68]	@ (8103928 <HAL_UART_MspInit+0xcc>)
 81038e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81038e6:	f003 0308 	and.w	r3, r3, #8
 81038ea:	60bb      	str	r3, [r7, #8]
 81038ec:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 81038ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 81038f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81038f6:	2302      	movs	r3, #2
 81038f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81038fc:	2300      	movs	r3, #0
 81038fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103902:	2300      	movs	r3, #0
 8103904:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8103908:	2307      	movs	r3, #7
 810390a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810390e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8103912:	4619      	mov	r1, r3
 8103914:	4805      	ldr	r0, [pc, #20]	@ (810392c <HAL_UART_MspInit+0xd0>)
 8103916:	f002 f82d 	bl	8105974 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 810391a:	bf00      	nop
 810391c:	37e8      	adds	r7, #232	@ 0xe8
 810391e:	46bd      	mov	sp, r7
 8103920:	bd80      	pop	{r7, pc}
 8103922:	bf00      	nop
 8103924:	40004800 	.word	0x40004800
 8103928:	58024400 	.word	0x58024400
 810392c:	58020c00 	.word	0x58020c00

08103930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8103930:	b480      	push	{r7}
 8103932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8103934:	bf00      	nop
 8103936:	e7fd      	b.n	8103934 <NMI_Handler+0x4>

08103938 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8103938:	b480      	push	{r7}
 810393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810393c:	bf00      	nop
 810393e:	e7fd      	b.n	810393c <HardFault_Handler+0x4>

08103940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8103940:	b480      	push	{r7}
 8103942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8103944:	bf00      	nop
 8103946:	e7fd      	b.n	8103944 <MemManage_Handler+0x4>

08103948 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8103948:	b480      	push	{r7}
 810394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810394c:	bf00      	nop
 810394e:	e7fd      	b.n	810394c <BusFault_Handler+0x4>

08103950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8103950:	b480      	push	{r7}
 8103952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8103954:	bf00      	nop
 8103956:	e7fd      	b.n	8103954 <UsageFault_Handler+0x4>

08103958 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8103958:	b480      	push	{r7}
 810395a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810395c:	bf00      	nop
 810395e:	46bd      	mov	sp, r7
 8103960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103964:	4770      	bx	lr

08103966 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8103966:	b480      	push	{r7}
 8103968:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810396a:	bf00      	nop
 810396c:	46bd      	mov	sp, r7
 810396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103972:	4770      	bx	lr

08103974 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8103974:	b480      	push	{r7}
 8103976:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8103978:	bf00      	nop
 810397a:	46bd      	mov	sp, r7
 810397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103980:	4770      	bx	lr

08103982 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8103982:	b580      	push	{r7, lr}
 8103984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8103986:	f000 f999 	bl	8103cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810398a:	bf00      	nop
 810398c:	bd80      	pop	{r7, pc}

0810398e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 810398e:	b580      	push	{r7, lr}
 8103990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8103992:	2008      	movs	r0, #8
 8103994:	f002 f9b7 	bl	8105d06 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8103998:	bf00      	nop
 810399a:	bd80      	pop	{r7, pc}

0810399c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 810399c:	b580      	push	{r7, lr}
 810399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 81039a0:	4802      	ldr	r0, [pc, #8]	@ (81039ac <TIM2_IRQHandler+0x10>)
 81039a2:	f006 fa93 	bl	8109ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 81039a6:	bf00      	nop
 81039a8:	bd80      	pop	{r7, pc}
 81039aa:	bf00      	nop
 81039ac:	1000038c 	.word	0x1000038c

081039b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81039b0:	b480      	push	{r7}
 81039b2:	af00      	add	r7, sp, #0
  return 1;
 81039b4:	2301      	movs	r3, #1
}
 81039b6:	4618      	mov	r0, r3
 81039b8:	46bd      	mov	sp, r7
 81039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039be:	4770      	bx	lr

081039c0 <_kill>:

int _kill(int pid, int sig)
{
 81039c0:	b580      	push	{r7, lr}
 81039c2:	b082      	sub	sp, #8
 81039c4:	af00      	add	r7, sp, #0
 81039c6:	6078      	str	r0, [r7, #4]
 81039c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 81039ca:	f00a fbd3 	bl	810e174 <__errno>
 81039ce:	4603      	mov	r3, r0
 81039d0:	2216      	movs	r2, #22
 81039d2:	601a      	str	r2, [r3, #0]
  return -1;
 81039d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 81039d8:	4618      	mov	r0, r3
 81039da:	3708      	adds	r7, #8
 81039dc:	46bd      	mov	sp, r7
 81039de:	bd80      	pop	{r7, pc}

081039e0 <_exit>:

void _exit (int status)
{
 81039e0:	b580      	push	{r7, lr}
 81039e2:	b082      	sub	sp, #8
 81039e4:	af00      	add	r7, sp, #0
 81039e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 81039e8:	f04f 31ff 	mov.w	r1, #4294967295
 81039ec:	6878      	ldr	r0, [r7, #4]
 81039ee:	f7ff ffe7 	bl	81039c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 81039f2:	bf00      	nop
 81039f4:	e7fd      	b.n	81039f2 <_exit+0x12>

081039f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81039f6:	b580      	push	{r7, lr}
 81039f8:	b086      	sub	sp, #24
 81039fa:	af00      	add	r7, sp, #0
 81039fc:	60f8      	str	r0, [r7, #12]
 81039fe:	60b9      	str	r1, [r7, #8]
 8103a00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  len=1;
 8103a02:	2301      	movs	r3, #1
 8103a04:	607b      	str	r3, [r7, #4]

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103a06:	2300      	movs	r3, #0
 8103a08:	617b      	str	r3, [r7, #20]
 8103a0a:	e00a      	b.n	8103a22 <_read+0x2c>
  {
    *ptr++ = __io_getchar();
 8103a0c:	f7ff fcd4 	bl	81033b8 <__io_getchar>
 8103a10:	4601      	mov	r1, r0
 8103a12:	68bb      	ldr	r3, [r7, #8]
 8103a14:	1c5a      	adds	r2, r3, #1
 8103a16:	60ba      	str	r2, [r7, #8]
 8103a18:	b2ca      	uxtb	r2, r1
 8103a1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103a1c:	697b      	ldr	r3, [r7, #20]
 8103a1e:	3301      	adds	r3, #1
 8103a20:	617b      	str	r3, [r7, #20]
 8103a22:	697a      	ldr	r2, [r7, #20]
 8103a24:	687b      	ldr	r3, [r7, #4]
 8103a26:	429a      	cmp	r2, r3
 8103a28:	dbf0      	blt.n	8103a0c <_read+0x16>
  }

  return len;
 8103a2a:	687b      	ldr	r3, [r7, #4]
}
 8103a2c:	4618      	mov	r0, r3
 8103a2e:	3718      	adds	r7, #24
 8103a30:	46bd      	mov	sp, r7
 8103a32:	bd80      	pop	{r7, pc}

08103a34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8103a34:	b580      	push	{r7, lr}
 8103a36:	b086      	sub	sp, #24
 8103a38:	af00      	add	r7, sp, #0
 8103a3a:	60f8      	str	r0, [r7, #12]
 8103a3c:	60b9      	str	r1, [r7, #8]
 8103a3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103a40:	2300      	movs	r3, #0
 8103a42:	617b      	str	r3, [r7, #20]
 8103a44:	e009      	b.n	8103a5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8103a46:	68bb      	ldr	r3, [r7, #8]
 8103a48:	1c5a      	adds	r2, r3, #1
 8103a4a:	60ba      	str	r2, [r7, #8]
 8103a4c:	781b      	ldrb	r3, [r3, #0]
 8103a4e:	4618      	mov	r0, r3
 8103a50:	f7ff fca0 	bl	8103394 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103a54:	697b      	ldr	r3, [r7, #20]
 8103a56:	3301      	adds	r3, #1
 8103a58:	617b      	str	r3, [r7, #20]
 8103a5a:	697a      	ldr	r2, [r7, #20]
 8103a5c:	687b      	ldr	r3, [r7, #4]
 8103a5e:	429a      	cmp	r2, r3
 8103a60:	dbf1      	blt.n	8103a46 <_write+0x12>
  }
  return len;
 8103a62:	687b      	ldr	r3, [r7, #4]
}
 8103a64:	4618      	mov	r0, r3
 8103a66:	3718      	adds	r7, #24
 8103a68:	46bd      	mov	sp, r7
 8103a6a:	bd80      	pop	{r7, pc}

08103a6c <_close>:

int _close(int file)
{
 8103a6c:	b480      	push	{r7}
 8103a6e:	b083      	sub	sp, #12
 8103a70:	af00      	add	r7, sp, #0
 8103a72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8103a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8103a78:	4618      	mov	r0, r3
 8103a7a:	370c      	adds	r7, #12
 8103a7c:	46bd      	mov	sp, r7
 8103a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a82:	4770      	bx	lr

08103a84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8103a84:	b480      	push	{r7}
 8103a86:	b083      	sub	sp, #12
 8103a88:	af00      	add	r7, sp, #0
 8103a8a:	6078      	str	r0, [r7, #4]
 8103a8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8103a8e:	683b      	ldr	r3, [r7, #0]
 8103a90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8103a94:	605a      	str	r2, [r3, #4]
  return 0;
 8103a96:	2300      	movs	r3, #0
}
 8103a98:	4618      	mov	r0, r3
 8103a9a:	370c      	adds	r7, #12
 8103a9c:	46bd      	mov	sp, r7
 8103a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103aa2:	4770      	bx	lr

08103aa4 <_isatty>:

int _isatty(int file)
{
 8103aa4:	b480      	push	{r7}
 8103aa6:	b083      	sub	sp, #12
 8103aa8:	af00      	add	r7, sp, #0
 8103aaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8103aac:	2301      	movs	r3, #1
}
 8103aae:	4618      	mov	r0, r3
 8103ab0:	370c      	adds	r7, #12
 8103ab2:	46bd      	mov	sp, r7
 8103ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ab8:	4770      	bx	lr

08103aba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8103aba:	b480      	push	{r7}
 8103abc:	b085      	sub	sp, #20
 8103abe:	af00      	add	r7, sp, #0
 8103ac0:	60f8      	str	r0, [r7, #12]
 8103ac2:	60b9      	str	r1, [r7, #8]
 8103ac4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8103ac6:	2300      	movs	r3, #0
}
 8103ac8:	4618      	mov	r0, r3
 8103aca:	3714      	adds	r7, #20
 8103acc:	46bd      	mov	sp, r7
 8103ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ad2:	4770      	bx	lr

08103ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8103ad4:	b580      	push	{r7, lr}
 8103ad6:	b086      	sub	sp, #24
 8103ad8:	af00      	add	r7, sp, #0
 8103ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8103adc:	4a14      	ldr	r2, [pc, #80]	@ (8103b30 <_sbrk+0x5c>)
 8103ade:	4b15      	ldr	r3, [pc, #84]	@ (8103b34 <_sbrk+0x60>)
 8103ae0:	1ad3      	subs	r3, r2, r3
 8103ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8103ae4:	697b      	ldr	r3, [r7, #20]
 8103ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8103ae8:	4b13      	ldr	r3, [pc, #76]	@ (8103b38 <_sbrk+0x64>)
 8103aea:	681b      	ldr	r3, [r3, #0]
 8103aec:	2b00      	cmp	r3, #0
 8103aee:	d102      	bne.n	8103af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8103af0:	4b11      	ldr	r3, [pc, #68]	@ (8103b38 <_sbrk+0x64>)
 8103af2:	4a12      	ldr	r2, [pc, #72]	@ (8103b3c <_sbrk+0x68>)
 8103af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8103af6:	4b10      	ldr	r3, [pc, #64]	@ (8103b38 <_sbrk+0x64>)
 8103af8:	681a      	ldr	r2, [r3, #0]
 8103afa:	687b      	ldr	r3, [r7, #4]
 8103afc:	4413      	add	r3, r2
 8103afe:	693a      	ldr	r2, [r7, #16]
 8103b00:	429a      	cmp	r2, r3
 8103b02:	d207      	bcs.n	8103b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8103b04:	f00a fb36 	bl	810e174 <__errno>
 8103b08:	4603      	mov	r3, r0
 8103b0a:	220c      	movs	r2, #12
 8103b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8103b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8103b12:	e009      	b.n	8103b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8103b14:	4b08      	ldr	r3, [pc, #32]	@ (8103b38 <_sbrk+0x64>)
 8103b16:	681b      	ldr	r3, [r3, #0]
 8103b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8103b1a:	4b07      	ldr	r3, [pc, #28]	@ (8103b38 <_sbrk+0x64>)
 8103b1c:	681a      	ldr	r2, [r3, #0]
 8103b1e:	687b      	ldr	r3, [r7, #4]
 8103b20:	4413      	add	r3, r2
 8103b22:	4a05      	ldr	r2, [pc, #20]	@ (8103b38 <_sbrk+0x64>)
 8103b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8103b26:	68fb      	ldr	r3, [r7, #12]
}
 8103b28:	4618      	mov	r0, r3
 8103b2a:	3718      	adds	r7, #24
 8103b2c:	46bd      	mov	sp, r7
 8103b2e:	bd80      	pop	{r7, pc}
 8103b30:	10048000 	.word	0x10048000
 8103b34:	00000400 	.word	0x00000400
 8103b38:	100006ec 	.word	0x100006ec
 8103b3c:	10000840 	.word	0x10000840

08103b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8103b40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8103b78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8103b44:	f7fd fad6 	bl	81010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8103b48:	480c      	ldr	r0, [pc, #48]	@ (8103b7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8103b4a:	490d      	ldr	r1, [pc, #52]	@ (8103b80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8103b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8103b84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8103b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8103b50:	e002      	b.n	8103b58 <LoopCopyDataInit>

08103b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8103b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8103b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8103b56:	3304      	adds	r3, #4

08103b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8103b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8103b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8103b5c:	d3f9      	bcc.n	8103b52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8103b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8103b88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8103b60:	4c0a      	ldr	r4, [pc, #40]	@ (8103b8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8103b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8103b64:	e001      	b.n	8103b6a <LoopFillZerobss>

08103b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8103b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8103b68:	3204      	adds	r2, #4

08103b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8103b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8103b6c:	d3fb      	bcc.n	8103b66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8103b6e:	f00a fb07 	bl	810e180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8103b72:	f7fe fa1d 	bl	8101fb0 <main>
  bx  lr
 8103b76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8103b78:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8103b7c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8103b80:	10000268 	.word	0x10000268
  ldr r2, =_sidata
 8103b84:	08111c6c 	.word	0x08111c6c
  ldr r2, =_sbss
 8103b88:	10000268 	.word	0x10000268
  ldr r4, =_ebss
 8103b8c:	10000840 	.word	0x10000840

08103b90 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8103b90:	e7fe      	b.n	8103b90 <ADC3_IRQHandler>
	...

08103b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8103b94:	b580      	push	{r7, lr}
 8103b96:	b082      	sub	sp, #8
 8103b98:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8103b9a:	4b28      	ldr	r3, [pc, #160]	@ (8103c3c <HAL_Init+0xa8>)
 8103b9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103ba0:	4a26      	ldr	r2, [pc, #152]	@ (8103c3c <HAL_Init+0xa8>)
 8103ba2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8103ba6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8103baa:	4b24      	ldr	r3, [pc, #144]	@ (8103c3c <HAL_Init+0xa8>)
 8103bac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103bb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8103bb4:	603b      	str	r3, [r7, #0]
 8103bb6:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8103bb8:	4b21      	ldr	r3, [pc, #132]	@ (8103c40 <HAL_Init+0xac>)
 8103bba:	681b      	ldr	r3, [r3, #0]
 8103bbc:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8103bc0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8103bc4:	4a1e      	ldr	r2, [pc, #120]	@ (8103c40 <HAL_Init+0xac>)
 8103bc6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8103bca:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8103bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8103c40 <HAL_Init+0xac>)
 8103bce:	681b      	ldr	r3, [r3, #0]
 8103bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8103c40 <HAL_Init+0xac>)
 8103bd2:	f043 0301 	orr.w	r3, r3, #1
 8103bd6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8103bd8:	2003      	movs	r0, #3
 8103bda:	f001 fe77 	bl	81058cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8103bde:	f002 ff49 	bl	8106a74 <HAL_RCC_GetSysClockFreq>
 8103be2:	4602      	mov	r2, r0
 8103be4:	4b15      	ldr	r3, [pc, #84]	@ (8103c3c <HAL_Init+0xa8>)
 8103be6:	699b      	ldr	r3, [r3, #24]
 8103be8:	0a1b      	lsrs	r3, r3, #8
 8103bea:	f003 030f 	and.w	r3, r3, #15
 8103bee:	4915      	ldr	r1, [pc, #84]	@ (8103c44 <HAL_Init+0xb0>)
 8103bf0:	5ccb      	ldrb	r3, [r1, r3]
 8103bf2:	f003 031f 	and.w	r3, r3, #31
 8103bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8103bfa:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8103c3c <HAL_Init+0xa8>)
 8103bfe:	699b      	ldr	r3, [r3, #24]
 8103c00:	f003 030f 	and.w	r3, r3, #15
 8103c04:	4a0f      	ldr	r2, [pc, #60]	@ (8103c44 <HAL_Init+0xb0>)
 8103c06:	5cd3      	ldrb	r3, [r2, r3]
 8103c08:	f003 031f 	and.w	r3, r3, #31
 8103c0c:	687a      	ldr	r2, [r7, #4]
 8103c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8103c12:	4a0d      	ldr	r2, [pc, #52]	@ (8103c48 <HAL_Init+0xb4>)
 8103c14:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103c16:	4b0c      	ldr	r3, [pc, #48]	@ (8103c48 <HAL_Init+0xb4>)
 8103c18:	681b      	ldr	r3, [r3, #0]
 8103c1a:	4a0c      	ldr	r2, [pc, #48]	@ (8103c4c <HAL_Init+0xb8>)
 8103c1c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8103c1e:	2000      	movs	r0, #0
 8103c20:	f000 f816 	bl	8103c50 <HAL_InitTick>
 8103c24:	4603      	mov	r3, r0
 8103c26:	2b00      	cmp	r3, #0
 8103c28:	d001      	beq.n	8103c2e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8103c2a:	2301      	movs	r3, #1
 8103c2c:	e002      	b.n	8103c34 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8103c2e:	f7ff fbe5 	bl	81033fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8103c32:	2300      	movs	r3, #0
}
 8103c34:	4618      	mov	r0, r3
 8103c36:	3708      	adds	r7, #8
 8103c38:	46bd      	mov	sp, r7
 8103c3a:	bd80      	pop	{r7, pc}
 8103c3c:	58024400 	.word	0x58024400
 8103c40:	40024400 	.word	0x40024400
 8103c44:	081117a0 	.word	0x081117a0
 8103c48:	10000004 	.word	0x10000004
 8103c4c:	10000000 	.word	0x10000000

08103c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8103c50:	b580      	push	{r7, lr}
 8103c52:	b082      	sub	sp, #8
 8103c54:	af00      	add	r7, sp, #0
 8103c56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8103c58:	4b15      	ldr	r3, [pc, #84]	@ (8103cb0 <HAL_InitTick+0x60>)
 8103c5a:	781b      	ldrb	r3, [r3, #0]
 8103c5c:	2b00      	cmp	r3, #0
 8103c5e:	d101      	bne.n	8103c64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8103c60:	2301      	movs	r3, #1
 8103c62:	e021      	b.n	8103ca8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8103c64:	4b13      	ldr	r3, [pc, #76]	@ (8103cb4 <HAL_InitTick+0x64>)
 8103c66:	681a      	ldr	r2, [r3, #0]
 8103c68:	4b11      	ldr	r3, [pc, #68]	@ (8103cb0 <HAL_InitTick+0x60>)
 8103c6a:	781b      	ldrb	r3, [r3, #0]
 8103c6c:	4619      	mov	r1, r3
 8103c6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8103c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8103c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8103c7a:	4618      	mov	r0, r3
 8103c7c:	f001 fe59 	bl	8105932 <HAL_SYSTICK_Config>
 8103c80:	4603      	mov	r3, r0
 8103c82:	2b00      	cmp	r3, #0
 8103c84:	d001      	beq.n	8103c8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8103c86:	2301      	movs	r3, #1
 8103c88:	e00e      	b.n	8103ca8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8103c8a:	687b      	ldr	r3, [r7, #4]
 8103c8c:	2b0f      	cmp	r3, #15
 8103c8e:	d80a      	bhi.n	8103ca6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8103c90:	2200      	movs	r2, #0
 8103c92:	6879      	ldr	r1, [r7, #4]
 8103c94:	f04f 30ff 	mov.w	r0, #4294967295
 8103c98:	f001 fe23 	bl	81058e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8103c9c:	4a06      	ldr	r2, [pc, #24]	@ (8103cb8 <HAL_InitTick+0x68>)
 8103c9e:	687b      	ldr	r3, [r7, #4]
 8103ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8103ca2:	2300      	movs	r3, #0
 8103ca4:	e000      	b.n	8103ca8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8103ca6:	2301      	movs	r3, #1
}
 8103ca8:	4618      	mov	r0, r3
 8103caa:	3708      	adds	r7, #8
 8103cac:	46bd      	mov	sp, r7
 8103cae:	bd80      	pop	{r7, pc}
 8103cb0:	1000009c 	.word	0x1000009c
 8103cb4:	10000000 	.word	0x10000000
 8103cb8:	10000098 	.word	0x10000098

08103cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8103cbc:	b480      	push	{r7}
 8103cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8103cc0:	4b06      	ldr	r3, [pc, #24]	@ (8103cdc <HAL_IncTick+0x20>)
 8103cc2:	781b      	ldrb	r3, [r3, #0]
 8103cc4:	461a      	mov	r2, r3
 8103cc6:	4b06      	ldr	r3, [pc, #24]	@ (8103ce0 <HAL_IncTick+0x24>)
 8103cc8:	681b      	ldr	r3, [r3, #0]
 8103cca:	4413      	add	r3, r2
 8103ccc:	4a04      	ldr	r2, [pc, #16]	@ (8103ce0 <HAL_IncTick+0x24>)
 8103cce:	6013      	str	r3, [r2, #0]
}
 8103cd0:	bf00      	nop
 8103cd2:	46bd      	mov	sp, r7
 8103cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cd8:	4770      	bx	lr
 8103cda:	bf00      	nop
 8103cdc:	1000009c 	.word	0x1000009c
 8103ce0:	100006f0 	.word	0x100006f0

08103ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8103ce4:	b480      	push	{r7}
 8103ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8103ce8:	4b03      	ldr	r3, [pc, #12]	@ (8103cf8 <HAL_GetTick+0x14>)
 8103cea:	681b      	ldr	r3, [r3, #0]
}
 8103cec:	4618      	mov	r0, r3
 8103cee:	46bd      	mov	sp, r7
 8103cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cf4:	4770      	bx	lr
 8103cf6:	bf00      	nop
 8103cf8:	100006f0 	.word	0x100006f0

08103cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8103cfc:	b580      	push	{r7, lr}
 8103cfe:	b084      	sub	sp, #16
 8103d00:	af00      	add	r7, sp, #0
 8103d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8103d04:	f7ff ffee 	bl	8103ce4 <HAL_GetTick>
 8103d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8103d0a:	687b      	ldr	r3, [r7, #4]
 8103d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8103d0e:	68fb      	ldr	r3, [r7, #12]
 8103d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103d14:	d005      	beq.n	8103d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8103d16:	4b0a      	ldr	r3, [pc, #40]	@ (8103d40 <HAL_Delay+0x44>)
 8103d18:	781b      	ldrb	r3, [r3, #0]
 8103d1a:	461a      	mov	r2, r3
 8103d1c:	68fb      	ldr	r3, [r7, #12]
 8103d1e:	4413      	add	r3, r2
 8103d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8103d22:	bf00      	nop
 8103d24:	f7ff ffde 	bl	8103ce4 <HAL_GetTick>
 8103d28:	4602      	mov	r2, r0
 8103d2a:	68bb      	ldr	r3, [r7, #8]
 8103d2c:	1ad3      	subs	r3, r2, r3
 8103d2e:	68fa      	ldr	r2, [r7, #12]
 8103d30:	429a      	cmp	r2, r3
 8103d32:	d8f7      	bhi.n	8103d24 <HAL_Delay+0x28>
  {
  }
}
 8103d34:	bf00      	nop
 8103d36:	bf00      	nop
 8103d38:	3710      	adds	r7, #16
 8103d3a:	46bd      	mov	sp, r7
 8103d3c:	bd80      	pop	{r7, pc}
 8103d3e:	bf00      	nop
 8103d40:	1000009c 	.word	0x1000009c

08103d44 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8103d44:	b480      	push	{r7}
 8103d46:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8103d48:	4b03      	ldr	r3, [pc, #12]	@ (8103d58 <HAL_GetREVID+0x14>)
 8103d4a:	681b      	ldr	r3, [r3, #0]
 8103d4c:	0c1b      	lsrs	r3, r3, #16
}
 8103d4e:	4618      	mov	r0, r3
 8103d50:	46bd      	mov	sp, r7
 8103d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d56:	4770      	bx	lr
 8103d58:	5c001000 	.word	0x5c001000

08103d5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8103d5c:	b480      	push	{r7}
 8103d5e:	b083      	sub	sp, #12
 8103d60:	af00      	add	r7, sp, #0
 8103d62:	6078      	str	r0, [r7, #4]
 8103d64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8103d66:	687b      	ldr	r3, [r7, #4]
 8103d68:	689b      	ldr	r3, [r3, #8]
 8103d6a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8103d6e:	683b      	ldr	r3, [r7, #0]
 8103d70:	431a      	orrs	r2, r3
 8103d72:	687b      	ldr	r3, [r7, #4]
 8103d74:	609a      	str	r2, [r3, #8]
}
 8103d76:	bf00      	nop
 8103d78:	370c      	adds	r7, #12
 8103d7a:	46bd      	mov	sp, r7
 8103d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d80:	4770      	bx	lr

08103d82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8103d82:	b480      	push	{r7}
 8103d84:	b083      	sub	sp, #12
 8103d86:	af00      	add	r7, sp, #0
 8103d88:	6078      	str	r0, [r7, #4]
 8103d8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8103d8c:	687b      	ldr	r3, [r7, #4]
 8103d8e:	689b      	ldr	r3, [r3, #8]
 8103d90:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8103d94:	683b      	ldr	r3, [r7, #0]
 8103d96:	431a      	orrs	r2, r3
 8103d98:	687b      	ldr	r3, [r7, #4]
 8103d9a:	609a      	str	r2, [r3, #8]
}
 8103d9c:	bf00      	nop
 8103d9e:	370c      	adds	r7, #12
 8103da0:	46bd      	mov	sp, r7
 8103da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103da6:	4770      	bx	lr

08103da8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8103da8:	b480      	push	{r7}
 8103daa:	b083      	sub	sp, #12
 8103dac:	af00      	add	r7, sp, #0
 8103dae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8103db0:	687b      	ldr	r3, [r7, #4]
 8103db2:	689b      	ldr	r3, [r3, #8]
 8103db4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8103db8:	4618      	mov	r0, r3
 8103dba:	370c      	adds	r7, #12
 8103dbc:	46bd      	mov	sp, r7
 8103dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dc2:	4770      	bx	lr

08103dc4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8103dc4:	b480      	push	{r7}
 8103dc6:	b087      	sub	sp, #28
 8103dc8:	af00      	add	r7, sp, #0
 8103dca:	60f8      	str	r0, [r7, #12]
 8103dcc:	60b9      	str	r1, [r7, #8]
 8103dce:	607a      	str	r2, [r7, #4]
 8103dd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8103dd2:	68fb      	ldr	r3, [r7, #12]
 8103dd4:	3360      	adds	r3, #96	@ 0x60
 8103dd6:	461a      	mov	r2, r3
 8103dd8:	68bb      	ldr	r3, [r7, #8]
 8103dda:	009b      	lsls	r3, r3, #2
 8103ddc:	4413      	add	r3, r2
 8103dde:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8103de0:	697b      	ldr	r3, [r7, #20]
 8103de2:	681b      	ldr	r3, [r3, #0]
 8103de4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8103de8:	687b      	ldr	r3, [r7, #4]
 8103dea:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8103dee:	683b      	ldr	r3, [r7, #0]
 8103df0:	430b      	orrs	r3, r1
 8103df2:	431a      	orrs	r2, r3
 8103df4:	697b      	ldr	r3, [r7, #20]
 8103df6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8103df8:	bf00      	nop
 8103dfa:	371c      	adds	r7, #28
 8103dfc:	46bd      	mov	sp, r7
 8103dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e02:	4770      	bx	lr

08103e04 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8103e04:	b480      	push	{r7}
 8103e06:	b085      	sub	sp, #20
 8103e08:	af00      	add	r7, sp, #0
 8103e0a:	60f8      	str	r0, [r7, #12]
 8103e0c:	60b9      	str	r1, [r7, #8]
 8103e0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8103e10:	68fb      	ldr	r3, [r7, #12]
 8103e12:	691b      	ldr	r3, [r3, #16]
 8103e14:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8103e18:	68bb      	ldr	r3, [r7, #8]
 8103e1a:	f003 031f 	and.w	r3, r3, #31
 8103e1e:	6879      	ldr	r1, [r7, #4]
 8103e20:	fa01 f303 	lsl.w	r3, r1, r3
 8103e24:	431a      	orrs	r2, r3
 8103e26:	68fb      	ldr	r3, [r7, #12]
 8103e28:	611a      	str	r2, [r3, #16]
}
 8103e2a:	bf00      	nop
 8103e2c:	3714      	adds	r7, #20
 8103e2e:	46bd      	mov	sp, r7
 8103e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e34:	4770      	bx	lr

08103e36 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8103e36:	b480      	push	{r7}
 8103e38:	b087      	sub	sp, #28
 8103e3a:	af00      	add	r7, sp, #0
 8103e3c:	60f8      	str	r0, [r7, #12]
 8103e3e:	60b9      	str	r1, [r7, #8]
 8103e40:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8103e42:	68fb      	ldr	r3, [r7, #12]
 8103e44:	3360      	adds	r3, #96	@ 0x60
 8103e46:	461a      	mov	r2, r3
 8103e48:	68bb      	ldr	r3, [r7, #8]
 8103e4a:	009b      	lsls	r3, r3, #2
 8103e4c:	4413      	add	r3, r2
 8103e4e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8103e50:	697b      	ldr	r3, [r7, #20]
 8103e52:	681b      	ldr	r3, [r3, #0]
 8103e54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8103e58:	687b      	ldr	r3, [r7, #4]
 8103e5a:	431a      	orrs	r2, r3
 8103e5c:	697b      	ldr	r3, [r7, #20]
 8103e5e:	601a      	str	r2, [r3, #0]
  }
}
 8103e60:	bf00      	nop
 8103e62:	371c      	adds	r7, #28
 8103e64:	46bd      	mov	sp, r7
 8103e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e6a:	4770      	bx	lr

08103e6c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8103e6c:	b480      	push	{r7}
 8103e6e:	b083      	sub	sp, #12
 8103e70:	af00      	add	r7, sp, #0
 8103e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8103e74:	687b      	ldr	r3, [r7, #4]
 8103e76:	68db      	ldr	r3, [r3, #12]
 8103e78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8103e7c:	2b00      	cmp	r3, #0
 8103e7e:	d101      	bne.n	8103e84 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8103e80:	2301      	movs	r3, #1
 8103e82:	e000      	b.n	8103e86 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8103e84:	2300      	movs	r3, #0
}
 8103e86:	4618      	mov	r0, r3
 8103e88:	370c      	adds	r7, #12
 8103e8a:	46bd      	mov	sp, r7
 8103e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e90:	4770      	bx	lr

08103e92 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8103e92:	b480      	push	{r7}
 8103e94:	b087      	sub	sp, #28
 8103e96:	af00      	add	r7, sp, #0
 8103e98:	60f8      	str	r0, [r7, #12]
 8103e9a:	60b9      	str	r1, [r7, #8]
 8103e9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8103e9e:	68fb      	ldr	r3, [r7, #12]
 8103ea0:	3330      	adds	r3, #48	@ 0x30
 8103ea2:	461a      	mov	r2, r3
 8103ea4:	68bb      	ldr	r3, [r7, #8]
 8103ea6:	0a1b      	lsrs	r3, r3, #8
 8103ea8:	009b      	lsls	r3, r3, #2
 8103eaa:	f003 030c 	and.w	r3, r3, #12
 8103eae:	4413      	add	r3, r2
 8103eb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8103eb2:	697b      	ldr	r3, [r7, #20]
 8103eb4:	681a      	ldr	r2, [r3, #0]
 8103eb6:	68bb      	ldr	r3, [r7, #8]
 8103eb8:	f003 031f 	and.w	r3, r3, #31
 8103ebc:	211f      	movs	r1, #31
 8103ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8103ec2:	43db      	mvns	r3, r3
 8103ec4:	401a      	ands	r2, r3
 8103ec6:	687b      	ldr	r3, [r7, #4]
 8103ec8:	0e9b      	lsrs	r3, r3, #26
 8103eca:	f003 011f 	and.w	r1, r3, #31
 8103ece:	68bb      	ldr	r3, [r7, #8]
 8103ed0:	f003 031f 	and.w	r3, r3, #31
 8103ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8103ed8:	431a      	orrs	r2, r3
 8103eda:	697b      	ldr	r3, [r7, #20]
 8103edc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8103ede:	bf00      	nop
 8103ee0:	371c      	adds	r7, #28
 8103ee2:	46bd      	mov	sp, r7
 8103ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ee8:	4770      	bx	lr

08103eea <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8103eea:	b480      	push	{r7}
 8103eec:	b087      	sub	sp, #28
 8103eee:	af00      	add	r7, sp, #0
 8103ef0:	60f8      	str	r0, [r7, #12]
 8103ef2:	60b9      	str	r1, [r7, #8]
 8103ef4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8103ef6:	68fb      	ldr	r3, [r7, #12]
 8103ef8:	3314      	adds	r3, #20
 8103efa:	461a      	mov	r2, r3
 8103efc:	68bb      	ldr	r3, [r7, #8]
 8103efe:	0e5b      	lsrs	r3, r3, #25
 8103f00:	009b      	lsls	r3, r3, #2
 8103f02:	f003 0304 	and.w	r3, r3, #4
 8103f06:	4413      	add	r3, r2
 8103f08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8103f0a:	697b      	ldr	r3, [r7, #20]
 8103f0c:	681a      	ldr	r2, [r3, #0]
 8103f0e:	68bb      	ldr	r3, [r7, #8]
 8103f10:	0d1b      	lsrs	r3, r3, #20
 8103f12:	f003 031f 	and.w	r3, r3, #31
 8103f16:	2107      	movs	r1, #7
 8103f18:	fa01 f303 	lsl.w	r3, r1, r3
 8103f1c:	43db      	mvns	r3, r3
 8103f1e:	401a      	ands	r2, r3
 8103f20:	68bb      	ldr	r3, [r7, #8]
 8103f22:	0d1b      	lsrs	r3, r3, #20
 8103f24:	f003 031f 	and.w	r3, r3, #31
 8103f28:	6879      	ldr	r1, [r7, #4]
 8103f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8103f2e:	431a      	orrs	r2, r3
 8103f30:	697b      	ldr	r3, [r7, #20]
 8103f32:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8103f34:	bf00      	nop
 8103f36:	371c      	adds	r7, #28
 8103f38:	46bd      	mov	sp, r7
 8103f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f3e:	4770      	bx	lr

08103f40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8103f40:	b480      	push	{r7}
 8103f42:	b085      	sub	sp, #20
 8103f44:	af00      	add	r7, sp, #0
 8103f46:	60f8      	str	r0, [r7, #12]
 8103f48:	60b9      	str	r1, [r7, #8]
 8103f4a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8103f4c:	68fb      	ldr	r3, [r7, #12]
 8103f4e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8103f52:	68bb      	ldr	r3, [r7, #8]
 8103f54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103f58:	43db      	mvns	r3, r3
 8103f5a:	401a      	ands	r2, r3
 8103f5c:	687b      	ldr	r3, [r7, #4]
 8103f5e:	f003 0318 	and.w	r3, r3, #24
 8103f62:	4908      	ldr	r1, [pc, #32]	@ (8103f84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8103f64:	40d9      	lsrs	r1, r3
 8103f66:	68bb      	ldr	r3, [r7, #8]
 8103f68:	400b      	ands	r3, r1
 8103f6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103f6e:	431a      	orrs	r2, r3
 8103f70:	68fb      	ldr	r3, [r7, #12]
 8103f72:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8103f76:	bf00      	nop
 8103f78:	3714      	adds	r7, #20
 8103f7a:	46bd      	mov	sp, r7
 8103f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f80:	4770      	bx	lr
 8103f82:	bf00      	nop
 8103f84:	000fffff 	.word	0x000fffff

08103f88 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8103f88:	b480      	push	{r7}
 8103f8a:	b083      	sub	sp, #12
 8103f8c:	af00      	add	r7, sp, #0
 8103f8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8103f90:	687b      	ldr	r3, [r7, #4]
 8103f92:	689b      	ldr	r3, [r3, #8]
 8103f94:	f003 031f 	and.w	r3, r3, #31
}
 8103f98:	4618      	mov	r0, r3
 8103f9a:	370c      	adds	r7, #12
 8103f9c:	46bd      	mov	sp, r7
 8103f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fa2:	4770      	bx	lr

08103fa4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8103fa4:	b480      	push	{r7}
 8103fa6:	b083      	sub	sp, #12
 8103fa8:	af00      	add	r7, sp, #0
 8103faa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8103fac:	687b      	ldr	r3, [r7, #4]
 8103fae:	689b      	ldr	r3, [r3, #8]
 8103fb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8103fb4:	4618      	mov	r0, r3
 8103fb6:	370c      	adds	r7, #12
 8103fb8:	46bd      	mov	sp, r7
 8103fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fbe:	4770      	bx	lr

08103fc0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8103fc0:	b480      	push	{r7}
 8103fc2:	b083      	sub	sp, #12
 8103fc4:	af00      	add	r7, sp, #0
 8103fc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8103fc8:	687b      	ldr	r3, [r7, #4]
 8103fca:	689b      	ldr	r3, [r3, #8]
 8103fcc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8103fd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8103fd4:	687a      	ldr	r2, [r7, #4]
 8103fd6:	6093      	str	r3, [r2, #8]
}
 8103fd8:	bf00      	nop
 8103fda:	370c      	adds	r7, #12
 8103fdc:	46bd      	mov	sp, r7
 8103fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fe2:	4770      	bx	lr

08103fe4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8103fe4:	b480      	push	{r7}
 8103fe6:	b083      	sub	sp, #12
 8103fe8:	af00      	add	r7, sp, #0
 8103fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8103fec:	687b      	ldr	r3, [r7, #4]
 8103fee:	689b      	ldr	r3, [r3, #8]
 8103ff0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103ff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103ff8:	d101      	bne.n	8103ffe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8103ffa:	2301      	movs	r3, #1
 8103ffc:	e000      	b.n	8104000 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8103ffe:	2300      	movs	r3, #0
}
 8104000:	4618      	mov	r0, r3
 8104002:	370c      	adds	r7, #12
 8104004:	46bd      	mov	sp, r7
 8104006:	f85d 7b04 	ldr.w	r7, [sp], #4
 810400a:	4770      	bx	lr

0810400c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 810400c:	b480      	push	{r7}
 810400e:	b083      	sub	sp, #12
 8104010:	af00      	add	r7, sp, #0
 8104012:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8104014:	687b      	ldr	r3, [r7, #4]
 8104016:	689b      	ldr	r3, [r3, #8]
 8104018:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 810401c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8104020:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8104024:	687b      	ldr	r3, [r7, #4]
 8104026:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8104028:	bf00      	nop
 810402a:	370c      	adds	r7, #12
 810402c:	46bd      	mov	sp, r7
 810402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104032:	4770      	bx	lr

08104034 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8104034:	b480      	push	{r7}
 8104036:	b083      	sub	sp, #12
 8104038:	af00      	add	r7, sp, #0
 810403a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 810403c:	687b      	ldr	r3, [r7, #4]
 810403e:	689b      	ldr	r3, [r3, #8]
 8104040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8104044:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104048:	d101      	bne.n	810404e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 810404a:	2301      	movs	r3, #1
 810404c:	e000      	b.n	8104050 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 810404e:	2300      	movs	r3, #0
}
 8104050:	4618      	mov	r0, r3
 8104052:	370c      	adds	r7, #12
 8104054:	46bd      	mov	sp, r7
 8104056:	f85d 7b04 	ldr.w	r7, [sp], #4
 810405a:	4770      	bx	lr

0810405c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 810405c:	b480      	push	{r7}
 810405e:	b083      	sub	sp, #12
 8104060:	af00      	add	r7, sp, #0
 8104062:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8104064:	687b      	ldr	r3, [r7, #4]
 8104066:	689b      	ldr	r3, [r3, #8]
 8104068:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810406c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8104070:	f043 0201 	orr.w	r2, r3, #1
 8104074:	687b      	ldr	r3, [r7, #4]
 8104076:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8104078:	bf00      	nop
 810407a:	370c      	adds	r7, #12
 810407c:	46bd      	mov	sp, r7
 810407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104082:	4770      	bx	lr

08104084 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8104084:	b480      	push	{r7}
 8104086:	b083      	sub	sp, #12
 8104088:	af00      	add	r7, sp, #0
 810408a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 810408c:	687b      	ldr	r3, [r7, #4]
 810408e:	689b      	ldr	r3, [r3, #8]
 8104090:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8104094:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8104098:	f043 0202 	orr.w	r2, r3, #2
 810409c:	687b      	ldr	r3, [r7, #4]
 810409e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 81040a0:	bf00      	nop
 81040a2:	370c      	adds	r7, #12
 81040a4:	46bd      	mov	sp, r7
 81040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040aa:	4770      	bx	lr

081040ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 81040ac:	b480      	push	{r7}
 81040ae:	b083      	sub	sp, #12
 81040b0:	af00      	add	r7, sp, #0
 81040b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81040b4:	687b      	ldr	r3, [r7, #4]
 81040b6:	689b      	ldr	r3, [r3, #8]
 81040b8:	f003 0301 	and.w	r3, r3, #1
 81040bc:	2b01      	cmp	r3, #1
 81040be:	d101      	bne.n	81040c4 <LL_ADC_IsEnabled+0x18>
 81040c0:	2301      	movs	r3, #1
 81040c2:	e000      	b.n	81040c6 <LL_ADC_IsEnabled+0x1a>
 81040c4:	2300      	movs	r3, #0
}
 81040c6:	4618      	mov	r0, r3
 81040c8:	370c      	adds	r7, #12
 81040ca:	46bd      	mov	sp, r7
 81040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040d0:	4770      	bx	lr

081040d2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 81040d2:	b480      	push	{r7}
 81040d4:	b083      	sub	sp, #12
 81040d6:	af00      	add	r7, sp, #0
 81040d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 81040da:	687b      	ldr	r3, [r7, #4]
 81040dc:	689b      	ldr	r3, [r3, #8]
 81040de:	f003 0302 	and.w	r3, r3, #2
 81040e2:	2b02      	cmp	r3, #2
 81040e4:	d101      	bne.n	81040ea <LL_ADC_IsDisableOngoing+0x18>
 81040e6:	2301      	movs	r3, #1
 81040e8:	e000      	b.n	81040ec <LL_ADC_IsDisableOngoing+0x1a>
 81040ea:	2300      	movs	r3, #0
}
 81040ec:	4618      	mov	r0, r3
 81040ee:	370c      	adds	r7, #12
 81040f0:	46bd      	mov	sp, r7
 81040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040f6:	4770      	bx	lr

081040f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 81040f8:	b480      	push	{r7}
 81040fa:	b083      	sub	sp, #12
 81040fc:	af00      	add	r7, sp, #0
 81040fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8104100:	687b      	ldr	r3, [r7, #4]
 8104102:	689b      	ldr	r3, [r3, #8]
 8104104:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8104108:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810410c:	f043 0204 	orr.w	r2, r3, #4
 8104110:	687b      	ldr	r3, [r7, #4]
 8104112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8104114:	bf00      	nop
 8104116:	370c      	adds	r7, #12
 8104118:	46bd      	mov	sp, r7
 810411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810411e:	4770      	bx	lr

08104120 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8104120:	b480      	push	{r7}
 8104122:	b083      	sub	sp, #12
 8104124:	af00      	add	r7, sp, #0
 8104126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8104128:	687b      	ldr	r3, [r7, #4]
 810412a:	689b      	ldr	r3, [r3, #8]
 810412c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8104130:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8104134:	f043 0210 	orr.w	r2, r3, #16
 8104138:	687b      	ldr	r3, [r7, #4]
 810413a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 810413c:	bf00      	nop
 810413e:	370c      	adds	r7, #12
 8104140:	46bd      	mov	sp, r7
 8104142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104146:	4770      	bx	lr

08104148 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8104148:	b480      	push	{r7}
 810414a:	b083      	sub	sp, #12
 810414c:	af00      	add	r7, sp, #0
 810414e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8104150:	687b      	ldr	r3, [r7, #4]
 8104152:	689b      	ldr	r3, [r3, #8]
 8104154:	f003 0304 	and.w	r3, r3, #4
 8104158:	2b04      	cmp	r3, #4
 810415a:	d101      	bne.n	8104160 <LL_ADC_REG_IsConversionOngoing+0x18>
 810415c:	2301      	movs	r3, #1
 810415e:	e000      	b.n	8104162 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8104160:	2300      	movs	r3, #0
}
 8104162:	4618      	mov	r0, r3
 8104164:	370c      	adds	r7, #12
 8104166:	46bd      	mov	sp, r7
 8104168:	f85d 7b04 	ldr.w	r7, [sp], #4
 810416c:	4770      	bx	lr

0810416e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 810416e:	b480      	push	{r7}
 8104170:	b083      	sub	sp, #12
 8104172:	af00      	add	r7, sp, #0
 8104174:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8104176:	687b      	ldr	r3, [r7, #4]
 8104178:	689b      	ldr	r3, [r3, #8]
 810417a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810417e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8104182:	f043 0220 	orr.w	r2, r3, #32
 8104186:	687b      	ldr	r3, [r7, #4]
 8104188:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 810418a:	bf00      	nop
 810418c:	370c      	adds	r7, #12
 810418e:	46bd      	mov	sp, r7
 8104190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104194:	4770      	bx	lr

08104196 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8104196:	b480      	push	{r7}
 8104198:	b083      	sub	sp, #12
 810419a:	af00      	add	r7, sp, #0
 810419c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 810419e:	687b      	ldr	r3, [r7, #4]
 81041a0:	689b      	ldr	r3, [r3, #8]
 81041a2:	f003 0308 	and.w	r3, r3, #8
 81041a6:	2b08      	cmp	r3, #8
 81041a8:	d101      	bne.n	81041ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 81041aa:	2301      	movs	r3, #1
 81041ac:	e000      	b.n	81041b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 81041ae:	2300      	movs	r3, #0
}
 81041b0:	4618      	mov	r0, r3
 81041b2:	370c      	adds	r7, #12
 81041b4:	46bd      	mov	sp, r7
 81041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041ba:	4770      	bx	lr

081041bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81041bc:	b590      	push	{r4, r7, lr}
 81041be:	b089      	sub	sp, #36	@ 0x24
 81041c0:	af00      	add	r7, sp, #0
 81041c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81041c4:	2300      	movs	r3, #0
 81041c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81041c8:	2300      	movs	r3, #0
 81041ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	2b00      	cmp	r3, #0
 81041d0:	d101      	bne.n	81041d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 81041d2:	2301      	movs	r3, #1
 81041d4:	e18f      	b.n	81044f6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 81041d6:	687b      	ldr	r3, [r7, #4]
 81041d8:	68db      	ldr	r3, [r3, #12]
 81041da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 81041dc:	687b      	ldr	r3, [r7, #4]
 81041de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81041e0:	2b00      	cmp	r3, #0
 81041e2:	d109      	bne.n	81041f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 81041e4:	6878      	ldr	r0, [r7, #4]
 81041e6:	f7ff f923 	bl	8103430 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 81041ea:	687b      	ldr	r3, [r7, #4]
 81041ec:	2200      	movs	r2, #0
 81041ee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 81041f0:	687b      	ldr	r3, [r7, #4]
 81041f2:	2200      	movs	r2, #0
 81041f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 81041f8:	687b      	ldr	r3, [r7, #4]
 81041fa:	681b      	ldr	r3, [r3, #0]
 81041fc:	4618      	mov	r0, r3
 81041fe:	f7ff fef1 	bl	8103fe4 <LL_ADC_IsDeepPowerDownEnabled>
 8104202:	4603      	mov	r3, r0
 8104204:	2b00      	cmp	r3, #0
 8104206:	d004      	beq.n	8104212 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8104208:	687b      	ldr	r3, [r7, #4]
 810420a:	681b      	ldr	r3, [r3, #0]
 810420c:	4618      	mov	r0, r3
 810420e:	f7ff fed7 	bl	8103fc0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8104212:	687b      	ldr	r3, [r7, #4]
 8104214:	681b      	ldr	r3, [r3, #0]
 8104216:	4618      	mov	r0, r3
 8104218:	f7ff ff0c 	bl	8104034 <LL_ADC_IsInternalRegulatorEnabled>
 810421c:	4603      	mov	r3, r0
 810421e:	2b00      	cmp	r3, #0
 8104220:	d114      	bne.n	810424c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8104222:	687b      	ldr	r3, [r7, #4]
 8104224:	681b      	ldr	r3, [r3, #0]
 8104226:	4618      	mov	r0, r3
 8104228:	f7ff fef0 	bl	810400c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 810422c:	4b88      	ldr	r3, [pc, #544]	@ (8104450 <HAL_ADC_Init+0x294>)
 810422e:	681b      	ldr	r3, [r3, #0]
 8104230:	099b      	lsrs	r3, r3, #6
 8104232:	4a88      	ldr	r2, [pc, #544]	@ (8104454 <HAL_ADC_Init+0x298>)
 8104234:	fba2 2303 	umull	r2, r3, r2, r3
 8104238:	099b      	lsrs	r3, r3, #6
 810423a:	3301      	adds	r3, #1
 810423c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810423e:	e002      	b.n	8104246 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8104240:	68bb      	ldr	r3, [r7, #8]
 8104242:	3b01      	subs	r3, #1
 8104244:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8104246:	68bb      	ldr	r3, [r7, #8]
 8104248:	2b00      	cmp	r3, #0
 810424a:	d1f9      	bne.n	8104240 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810424c:	687b      	ldr	r3, [r7, #4]
 810424e:	681b      	ldr	r3, [r3, #0]
 8104250:	4618      	mov	r0, r3
 8104252:	f7ff feef 	bl	8104034 <LL_ADC_IsInternalRegulatorEnabled>
 8104256:	4603      	mov	r3, r0
 8104258:	2b00      	cmp	r3, #0
 810425a:	d10d      	bne.n	8104278 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810425c:	687b      	ldr	r3, [r7, #4]
 810425e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104260:	f043 0210 	orr.w	r2, r3, #16
 8104264:	687b      	ldr	r3, [r7, #4]
 8104266:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8104268:	687b      	ldr	r3, [r7, #4]
 810426a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810426c:	f043 0201 	orr.w	r2, r3, #1
 8104270:	687b      	ldr	r3, [r7, #4]
 8104272:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8104274:	2301      	movs	r3, #1
 8104276:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8104278:	687b      	ldr	r3, [r7, #4]
 810427a:	681b      	ldr	r3, [r3, #0]
 810427c:	4618      	mov	r0, r3
 810427e:	f7ff ff63 	bl	8104148 <LL_ADC_REG_IsConversionOngoing>
 8104282:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8104284:	687b      	ldr	r3, [r7, #4]
 8104286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104288:	f003 0310 	and.w	r3, r3, #16
 810428c:	2b00      	cmp	r3, #0
 810428e:	f040 8129 	bne.w	81044e4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8104292:	697b      	ldr	r3, [r7, #20]
 8104294:	2b00      	cmp	r3, #0
 8104296:	f040 8125 	bne.w	81044e4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 810429a:	687b      	ldr	r3, [r7, #4]
 810429c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810429e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 81042a2:	f043 0202 	orr.w	r2, r3, #2
 81042a6:	687b      	ldr	r3, [r7, #4]
 81042a8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81042aa:	687b      	ldr	r3, [r7, #4]
 81042ac:	681b      	ldr	r3, [r3, #0]
 81042ae:	4618      	mov	r0, r3
 81042b0:	f7ff fefc 	bl	81040ac <LL_ADC_IsEnabled>
 81042b4:	4603      	mov	r3, r0
 81042b6:	2b00      	cmp	r3, #0
 81042b8:	d136      	bne.n	8104328 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81042ba:	687b      	ldr	r3, [r7, #4]
 81042bc:	681b      	ldr	r3, [r3, #0]
 81042be:	4a66      	ldr	r2, [pc, #408]	@ (8104458 <HAL_ADC_Init+0x29c>)
 81042c0:	4293      	cmp	r3, r2
 81042c2:	d004      	beq.n	81042ce <HAL_ADC_Init+0x112>
 81042c4:	687b      	ldr	r3, [r7, #4]
 81042c6:	681b      	ldr	r3, [r3, #0]
 81042c8:	4a64      	ldr	r2, [pc, #400]	@ (810445c <HAL_ADC_Init+0x2a0>)
 81042ca:	4293      	cmp	r3, r2
 81042cc:	d10e      	bne.n	81042ec <HAL_ADC_Init+0x130>
 81042ce:	4862      	ldr	r0, [pc, #392]	@ (8104458 <HAL_ADC_Init+0x29c>)
 81042d0:	f7ff feec 	bl	81040ac <LL_ADC_IsEnabled>
 81042d4:	4604      	mov	r4, r0
 81042d6:	4861      	ldr	r0, [pc, #388]	@ (810445c <HAL_ADC_Init+0x2a0>)
 81042d8:	f7ff fee8 	bl	81040ac <LL_ADC_IsEnabled>
 81042dc:	4603      	mov	r3, r0
 81042de:	4323      	orrs	r3, r4
 81042e0:	2b00      	cmp	r3, #0
 81042e2:	bf0c      	ite	eq
 81042e4:	2301      	moveq	r3, #1
 81042e6:	2300      	movne	r3, #0
 81042e8:	b2db      	uxtb	r3, r3
 81042ea:	e008      	b.n	81042fe <HAL_ADC_Init+0x142>
 81042ec:	485c      	ldr	r0, [pc, #368]	@ (8104460 <HAL_ADC_Init+0x2a4>)
 81042ee:	f7ff fedd 	bl	81040ac <LL_ADC_IsEnabled>
 81042f2:	4603      	mov	r3, r0
 81042f4:	2b00      	cmp	r3, #0
 81042f6:	bf0c      	ite	eq
 81042f8:	2301      	moveq	r3, #1
 81042fa:	2300      	movne	r3, #0
 81042fc:	b2db      	uxtb	r3, r3
 81042fe:	2b00      	cmp	r3, #0
 8104300:	d012      	beq.n	8104328 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8104302:	687b      	ldr	r3, [r7, #4]
 8104304:	681b      	ldr	r3, [r3, #0]
 8104306:	4a54      	ldr	r2, [pc, #336]	@ (8104458 <HAL_ADC_Init+0x29c>)
 8104308:	4293      	cmp	r3, r2
 810430a:	d004      	beq.n	8104316 <HAL_ADC_Init+0x15a>
 810430c:	687b      	ldr	r3, [r7, #4]
 810430e:	681b      	ldr	r3, [r3, #0]
 8104310:	4a52      	ldr	r2, [pc, #328]	@ (810445c <HAL_ADC_Init+0x2a0>)
 8104312:	4293      	cmp	r3, r2
 8104314:	d101      	bne.n	810431a <HAL_ADC_Init+0x15e>
 8104316:	4a53      	ldr	r2, [pc, #332]	@ (8104464 <HAL_ADC_Init+0x2a8>)
 8104318:	e000      	b.n	810431c <HAL_ADC_Init+0x160>
 810431a:	4a53      	ldr	r2, [pc, #332]	@ (8104468 <HAL_ADC_Init+0x2ac>)
 810431c:	687b      	ldr	r3, [r7, #4]
 810431e:	685b      	ldr	r3, [r3, #4]
 8104320:	4619      	mov	r1, r3
 8104322:	4610      	mov	r0, r2
 8104324:	f7ff fd1a 	bl	8103d5c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8104328:	f7ff fd0c 	bl	8103d44 <HAL_GetREVID>
 810432c:	4603      	mov	r3, r0
 810432e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8104332:	4293      	cmp	r3, r2
 8104334:	d914      	bls.n	8104360 <HAL_ADC_Init+0x1a4>
 8104336:	687b      	ldr	r3, [r7, #4]
 8104338:	689b      	ldr	r3, [r3, #8]
 810433a:	2b10      	cmp	r3, #16
 810433c:	d110      	bne.n	8104360 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810433e:	687b      	ldr	r3, [r7, #4]
 8104340:	7d5b      	ldrb	r3, [r3, #21]
 8104342:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8104344:	687b      	ldr	r3, [r7, #4]
 8104346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104348:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810434a:	687b      	ldr	r3, [r7, #4]
 810434c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810434e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8104350:	687b      	ldr	r3, [r7, #4]
 8104352:	7f1b      	ldrb	r3, [r3, #28]
 8104354:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8104356:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104358:	f043 030c 	orr.w	r3, r3, #12
 810435c:	61bb      	str	r3, [r7, #24]
 810435e:	e00d      	b.n	810437c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104360:	687b      	ldr	r3, [r7, #4]
 8104362:	7d5b      	ldrb	r3, [r3, #21]
 8104364:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8104366:	687b      	ldr	r3, [r7, #4]
 8104368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810436a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 810436c:	687b      	ldr	r3, [r7, #4]
 810436e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8104370:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8104372:	687b      	ldr	r3, [r7, #4]
 8104374:	7f1b      	ldrb	r3, [r3, #28]
 8104376:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104378:	4313      	orrs	r3, r2
 810437a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 810437c:	687b      	ldr	r3, [r7, #4]
 810437e:	7f1b      	ldrb	r3, [r3, #28]
 8104380:	2b01      	cmp	r3, #1
 8104382:	d106      	bne.n	8104392 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	6a1b      	ldr	r3, [r3, #32]
 8104388:	3b01      	subs	r3, #1
 810438a:	045b      	lsls	r3, r3, #17
 810438c:	69ba      	ldr	r2, [r7, #24]
 810438e:	4313      	orrs	r3, r2
 8104390:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8104392:	687b      	ldr	r3, [r7, #4]
 8104394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104396:	2b00      	cmp	r3, #0
 8104398:	d009      	beq.n	81043ae <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 810439a:	687b      	ldr	r3, [r7, #4]
 810439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810439e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 81043a2:	687b      	ldr	r3, [r7, #4]
 81043a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81043a6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81043a8:	69ba      	ldr	r2, [r7, #24]
 81043aa:	4313      	orrs	r3, r2
 81043ac:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 81043ae:	687b      	ldr	r3, [r7, #4]
 81043b0:	681b      	ldr	r3, [r3, #0]
 81043b2:	68da      	ldr	r2, [r3, #12]
 81043b4:	4b2d      	ldr	r3, [pc, #180]	@ (810446c <HAL_ADC_Init+0x2b0>)
 81043b6:	4013      	ands	r3, r2
 81043b8:	687a      	ldr	r2, [r7, #4]
 81043ba:	6812      	ldr	r2, [r2, #0]
 81043bc:	69b9      	ldr	r1, [r7, #24]
 81043be:	430b      	orrs	r3, r1
 81043c0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81043c2:	687b      	ldr	r3, [r7, #4]
 81043c4:	681b      	ldr	r3, [r3, #0]
 81043c6:	4618      	mov	r0, r3
 81043c8:	f7ff febe 	bl	8104148 <LL_ADC_REG_IsConversionOngoing>
 81043cc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81043ce:	687b      	ldr	r3, [r7, #4]
 81043d0:	681b      	ldr	r3, [r3, #0]
 81043d2:	4618      	mov	r0, r3
 81043d4:	f7ff fedf 	bl	8104196 <LL_ADC_INJ_IsConversionOngoing>
 81043d8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81043da:	693b      	ldr	r3, [r7, #16]
 81043dc:	2b00      	cmp	r3, #0
 81043de:	d15f      	bne.n	81044a0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81043e0:	68fb      	ldr	r3, [r7, #12]
 81043e2:	2b00      	cmp	r3, #0
 81043e4:	d15c      	bne.n	81044a0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 81043e6:	687b      	ldr	r3, [r7, #4]
 81043e8:	7d1b      	ldrb	r3, [r3, #20]
 81043ea:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 81043ec:	687b      	ldr	r3, [r7, #4]
 81043ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 81043f0:	4313      	orrs	r3, r2
 81043f2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 81043f4:	687b      	ldr	r3, [r7, #4]
 81043f6:	681b      	ldr	r3, [r3, #0]
 81043f8:	68db      	ldr	r3, [r3, #12]
 81043fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 81043fe:	f023 0303 	bic.w	r3, r3, #3
 8104402:	687a      	ldr	r2, [r7, #4]
 8104404:	6812      	ldr	r2, [r2, #0]
 8104406:	69b9      	ldr	r1, [r7, #24]
 8104408:	430b      	orrs	r3, r1
 810440a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 810440c:	687b      	ldr	r3, [r7, #4]
 810440e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8104412:	2b01      	cmp	r3, #1
 8104414:	d12e      	bne.n	8104474 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8104416:	687b      	ldr	r3, [r7, #4]
 8104418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810441a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	681b      	ldr	r3, [r3, #0]
 8104420:	691a      	ldr	r2, [r3, #16]
 8104422:	4b13      	ldr	r3, [pc, #76]	@ (8104470 <HAL_ADC_Init+0x2b4>)
 8104424:	4013      	ands	r3, r2
 8104426:	687a      	ldr	r2, [r7, #4]
 8104428:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 810442a:	3a01      	subs	r2, #1
 810442c:	0411      	lsls	r1, r2, #16
 810442e:	687a      	ldr	r2, [r7, #4]
 8104430:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8104432:	4311      	orrs	r1, r2
 8104434:	687a      	ldr	r2, [r7, #4]
 8104436:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8104438:	4311      	orrs	r1, r2
 810443a:	687a      	ldr	r2, [r7, #4]
 810443c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 810443e:	430a      	orrs	r2, r1
 8104440:	431a      	orrs	r2, r3
 8104442:	687b      	ldr	r3, [r7, #4]
 8104444:	681b      	ldr	r3, [r3, #0]
 8104446:	f042 0201 	orr.w	r2, r2, #1
 810444a:	611a      	str	r2, [r3, #16]
 810444c:	e01a      	b.n	8104484 <HAL_ADC_Init+0x2c8>
 810444e:	bf00      	nop
 8104450:	10000000 	.word	0x10000000
 8104454:	053e2d63 	.word	0x053e2d63
 8104458:	40022000 	.word	0x40022000
 810445c:	40022100 	.word	0x40022100
 8104460:	58026000 	.word	0x58026000
 8104464:	40022300 	.word	0x40022300
 8104468:	58026300 	.word	0x58026300
 810446c:	fff0c003 	.word	0xfff0c003
 8104470:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8104474:	687b      	ldr	r3, [r7, #4]
 8104476:	681b      	ldr	r3, [r3, #0]
 8104478:	691a      	ldr	r2, [r3, #16]
 810447a:	687b      	ldr	r3, [r7, #4]
 810447c:	681b      	ldr	r3, [r3, #0]
 810447e:	f022 0201 	bic.w	r2, r2, #1
 8104482:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8104484:	687b      	ldr	r3, [r7, #4]
 8104486:	681b      	ldr	r3, [r3, #0]
 8104488:	691b      	ldr	r3, [r3, #16]
 810448a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 810448e:	687b      	ldr	r3, [r7, #4]
 8104490:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104492:	687b      	ldr	r3, [r7, #4]
 8104494:	681b      	ldr	r3, [r3, #0]
 8104496:	430a      	orrs	r2, r1
 8104498:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 810449a:	6878      	ldr	r0, [r7, #4]
 810449c:	f000 ff32 	bl	8105304 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 81044a0:	687b      	ldr	r3, [r7, #4]
 81044a2:	68db      	ldr	r3, [r3, #12]
 81044a4:	2b01      	cmp	r3, #1
 81044a6:	d10c      	bne.n	81044c2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81044a8:	687b      	ldr	r3, [r7, #4]
 81044aa:	681b      	ldr	r3, [r3, #0]
 81044ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81044ae:	f023 010f 	bic.w	r1, r3, #15
 81044b2:	687b      	ldr	r3, [r7, #4]
 81044b4:	699b      	ldr	r3, [r3, #24]
 81044b6:	1e5a      	subs	r2, r3, #1
 81044b8:	687b      	ldr	r3, [r7, #4]
 81044ba:	681b      	ldr	r3, [r3, #0]
 81044bc:	430a      	orrs	r2, r1
 81044be:	631a      	str	r2, [r3, #48]	@ 0x30
 81044c0:	e007      	b.n	81044d2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81044c2:	687b      	ldr	r3, [r7, #4]
 81044c4:	681b      	ldr	r3, [r3, #0]
 81044c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81044c8:	687b      	ldr	r3, [r7, #4]
 81044ca:	681b      	ldr	r3, [r3, #0]
 81044cc:	f022 020f 	bic.w	r2, r2, #15
 81044d0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81044d2:	687b      	ldr	r3, [r7, #4]
 81044d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81044d6:	f023 0303 	bic.w	r3, r3, #3
 81044da:	f043 0201 	orr.w	r2, r3, #1
 81044de:	687b      	ldr	r3, [r7, #4]
 81044e0:	655a      	str	r2, [r3, #84]	@ 0x54
 81044e2:	e007      	b.n	81044f4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81044e4:	687b      	ldr	r3, [r7, #4]
 81044e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81044e8:	f043 0210 	orr.w	r2, r3, #16
 81044ec:	687b      	ldr	r3, [r7, #4]
 81044ee:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 81044f0:	2301      	movs	r3, #1
 81044f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 81044f4:	7ffb      	ldrb	r3, [r7, #31]
}
 81044f6:	4618      	mov	r0, r3
 81044f8:	3724      	adds	r7, #36	@ 0x24
 81044fa:	46bd      	mov	sp, r7
 81044fc:	bd90      	pop	{r4, r7, pc}
 81044fe:	bf00      	nop

08104500 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8104500:	b580      	push	{r7, lr}
 8104502:	b086      	sub	sp, #24
 8104504:	af00      	add	r7, sp, #0
 8104506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8104508:	687b      	ldr	r3, [r7, #4]
 810450a:	681b      	ldr	r3, [r3, #0]
 810450c:	4a5d      	ldr	r2, [pc, #372]	@ (8104684 <HAL_ADC_Start+0x184>)
 810450e:	4293      	cmp	r3, r2
 8104510:	d004      	beq.n	810451c <HAL_ADC_Start+0x1c>
 8104512:	687b      	ldr	r3, [r7, #4]
 8104514:	681b      	ldr	r3, [r3, #0]
 8104516:	4a5c      	ldr	r2, [pc, #368]	@ (8104688 <HAL_ADC_Start+0x188>)
 8104518:	4293      	cmp	r3, r2
 810451a:	d101      	bne.n	8104520 <HAL_ADC_Start+0x20>
 810451c:	4b5b      	ldr	r3, [pc, #364]	@ (810468c <HAL_ADC_Start+0x18c>)
 810451e:	e000      	b.n	8104522 <HAL_ADC_Start+0x22>
 8104520:	4b5b      	ldr	r3, [pc, #364]	@ (8104690 <HAL_ADC_Start+0x190>)
 8104522:	4618      	mov	r0, r3
 8104524:	f7ff fd30 	bl	8103f88 <LL_ADC_GetMultimode>
 8104528:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810452a:	687b      	ldr	r3, [r7, #4]
 810452c:	681b      	ldr	r3, [r3, #0]
 810452e:	4618      	mov	r0, r3
 8104530:	f7ff fe0a 	bl	8104148 <LL_ADC_REG_IsConversionOngoing>
 8104534:	4603      	mov	r3, r0
 8104536:	2b00      	cmp	r3, #0
 8104538:	f040 809c 	bne.w	8104674 <HAL_ADC_Start+0x174>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8104542:	2b01      	cmp	r3, #1
 8104544:	d101      	bne.n	810454a <HAL_ADC_Start+0x4a>
 8104546:	2302      	movs	r3, #2
 8104548:	e097      	b.n	810467a <HAL_ADC_Start+0x17a>
 810454a:	687b      	ldr	r3, [r7, #4]
 810454c:	2201      	movs	r2, #1
 810454e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8104552:	6878      	ldr	r0, [r7, #4]
 8104554:	f000 fdec 	bl	8105130 <ADC_Enable>
 8104558:	4603      	mov	r3, r0
 810455a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 810455c:	7dfb      	ldrb	r3, [r7, #23]
 810455e:	2b00      	cmp	r3, #0
 8104560:	f040 8083 	bne.w	810466a <HAL_ADC_Start+0x16a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8104564:	687b      	ldr	r3, [r7, #4]
 8104566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104568:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810456c:	f023 0301 	bic.w	r3, r3, #1
 8104570:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8104574:	687b      	ldr	r3, [r7, #4]
 8104576:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8104578:	687b      	ldr	r3, [r7, #4]
 810457a:	681b      	ldr	r3, [r3, #0]
 810457c:	4a42      	ldr	r2, [pc, #264]	@ (8104688 <HAL_ADC_Start+0x188>)
 810457e:	4293      	cmp	r3, r2
 8104580:	d002      	beq.n	8104588 <HAL_ADC_Start+0x88>
 8104582:	687b      	ldr	r3, [r7, #4]
 8104584:	681b      	ldr	r3, [r3, #0]
 8104586:	e000      	b.n	810458a <HAL_ADC_Start+0x8a>
 8104588:	4b3e      	ldr	r3, [pc, #248]	@ (8104684 <HAL_ADC_Start+0x184>)
 810458a:	687a      	ldr	r2, [r7, #4]
 810458c:	6812      	ldr	r2, [r2, #0]
 810458e:	4293      	cmp	r3, r2
 8104590:	d002      	beq.n	8104598 <HAL_ADC_Start+0x98>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8104592:	693b      	ldr	r3, [r7, #16]
 8104594:	2b00      	cmp	r3, #0
 8104596:	d105      	bne.n	81045a4 <HAL_ADC_Start+0xa4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8104598:	687b      	ldr	r3, [r7, #4]
 810459a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810459c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 81045a0:	687b      	ldr	r3, [r7, #4]
 81045a2:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 81045a4:	687b      	ldr	r3, [r7, #4]
 81045a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81045a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81045ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81045b0:	d106      	bne.n	81045c0 <HAL_ADC_Start+0xc0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 81045b2:	687b      	ldr	r3, [r7, #4]
 81045b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81045b6:	f023 0206 	bic.w	r2, r3, #6
 81045ba:	687b      	ldr	r3, [r7, #4]
 81045bc:	659a      	str	r2, [r3, #88]	@ 0x58
 81045be:	e002      	b.n	81045c6 <HAL_ADC_Start+0xc6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 81045c0:	687b      	ldr	r3, [r7, #4]
 81045c2:	2200      	movs	r2, #0
 81045c4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 81045c6:	687b      	ldr	r3, [r7, #4]
 81045c8:	681b      	ldr	r3, [r3, #0]
 81045ca:	221c      	movs	r2, #28
 81045cc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 81045ce:	687b      	ldr	r3, [r7, #4]
 81045d0:	2200      	movs	r2, #0
 81045d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81045d6:	687b      	ldr	r3, [r7, #4]
 81045d8:	681b      	ldr	r3, [r3, #0]
 81045da:	4a2b      	ldr	r2, [pc, #172]	@ (8104688 <HAL_ADC_Start+0x188>)
 81045dc:	4293      	cmp	r3, r2
 81045de:	d002      	beq.n	81045e6 <HAL_ADC_Start+0xe6>
 81045e0:	687b      	ldr	r3, [r7, #4]
 81045e2:	681b      	ldr	r3, [r3, #0]
 81045e4:	e000      	b.n	81045e8 <HAL_ADC_Start+0xe8>
 81045e6:	4b27      	ldr	r3, [pc, #156]	@ (8104684 <HAL_ADC_Start+0x184>)
 81045e8:	687a      	ldr	r2, [r7, #4]
 81045ea:	6812      	ldr	r2, [r2, #0]
 81045ec:	4293      	cmp	r3, r2
 81045ee:	d008      	beq.n	8104602 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81045f0:	693b      	ldr	r3, [r7, #16]
 81045f2:	2b00      	cmp	r3, #0
 81045f4:	d005      	beq.n	8104602 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 81045f6:	693b      	ldr	r3, [r7, #16]
 81045f8:	2b05      	cmp	r3, #5
 81045fa:	d002      	beq.n	8104602 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81045fc:	693b      	ldr	r3, [r7, #16]
 81045fe:	2b09      	cmp	r3, #9
 8104600:	d114      	bne.n	810462c <HAL_ADC_Start+0x12c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8104602:	687b      	ldr	r3, [r7, #4]
 8104604:	681b      	ldr	r3, [r3, #0]
 8104606:	68db      	ldr	r3, [r3, #12]
 8104608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810460c:	2b00      	cmp	r3, #0
 810460e:	d007      	beq.n	8104620 <HAL_ADC_Start+0x120>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8104610:	687b      	ldr	r3, [r7, #4]
 8104612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104614:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8104618:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 810461c:	687b      	ldr	r3, [r7, #4]
 810461e:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8104620:	687b      	ldr	r3, [r7, #4]
 8104622:	681b      	ldr	r3, [r3, #0]
 8104624:	4618      	mov	r0, r3
 8104626:	f7ff fd67 	bl	81040f8 <LL_ADC_REG_StartConversion>
 810462a:	e025      	b.n	8104678 <HAL_ADC_Start+0x178>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 810462c:	687b      	ldr	r3, [r7, #4]
 810462e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104630:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8104634:	687b      	ldr	r3, [r7, #4]
 8104636:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8104638:	687b      	ldr	r3, [r7, #4]
 810463a:	681b      	ldr	r3, [r3, #0]
 810463c:	4a12      	ldr	r2, [pc, #72]	@ (8104688 <HAL_ADC_Start+0x188>)
 810463e:	4293      	cmp	r3, r2
 8104640:	d002      	beq.n	8104648 <HAL_ADC_Start+0x148>
 8104642:	687b      	ldr	r3, [r7, #4]
 8104644:	681b      	ldr	r3, [r3, #0]
 8104646:	e000      	b.n	810464a <HAL_ADC_Start+0x14a>
 8104648:	4b0e      	ldr	r3, [pc, #56]	@ (8104684 <HAL_ADC_Start+0x184>)
 810464a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 810464c:	68fb      	ldr	r3, [r7, #12]
 810464e:	68db      	ldr	r3, [r3, #12]
 8104650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104654:	2b00      	cmp	r3, #0
 8104656:	d00f      	beq.n	8104678 <HAL_ADC_Start+0x178>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8104658:	687b      	ldr	r3, [r7, #4]
 810465a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810465c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8104660:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8104664:	687b      	ldr	r3, [r7, #4]
 8104666:	655a      	str	r2, [r3, #84]	@ 0x54
 8104668:	e006      	b.n	8104678 <HAL_ADC_Start+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 810466a:	687b      	ldr	r3, [r7, #4]
 810466c:	2200      	movs	r2, #0
 810466e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8104672:	e001      	b.n	8104678 <HAL_ADC_Start+0x178>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8104674:	2302      	movs	r3, #2
 8104676:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8104678:	7dfb      	ldrb	r3, [r7, #23]
}
 810467a:	4618      	mov	r0, r3
 810467c:	3718      	adds	r7, #24
 810467e:	46bd      	mov	sp, r7
 8104680:	bd80      	pop	{r7, pc}
 8104682:	bf00      	nop
 8104684:	40022000 	.word	0x40022000
 8104688:	40022100 	.word	0x40022100
 810468c:	40022300 	.word	0x40022300
 8104690:	58026300 	.word	0x58026300

08104694 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8104694:	b580      	push	{r7, lr}
 8104696:	b084      	sub	sp, #16
 8104698:	af00      	add	r7, sp, #0
 810469a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 810469c:	687b      	ldr	r3, [r7, #4]
 810469e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 81046a2:	2b01      	cmp	r3, #1
 81046a4:	d101      	bne.n	81046aa <HAL_ADC_Stop+0x16>
 81046a6:	2302      	movs	r3, #2
 81046a8:	e023      	b.n	81046f2 <HAL_ADC_Stop+0x5e>
 81046aa:	687b      	ldr	r3, [r7, #4]
 81046ac:	2201      	movs	r2, #1
 81046ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 81046b2:	2103      	movs	r1, #3
 81046b4:	6878      	ldr	r0, [r7, #4]
 81046b6:	f000 fc7f 	bl	8104fb8 <ADC_ConversionStop>
 81046ba:	4603      	mov	r3, r0
 81046bc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 81046be:	7bfb      	ldrb	r3, [r7, #15]
 81046c0:	2b00      	cmp	r3, #0
 81046c2:	d111      	bne.n	81046e8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 81046c4:	6878      	ldr	r0, [r7, #4]
 81046c6:	f000 fdbd 	bl	8105244 <ADC_Disable>
 81046ca:	4603      	mov	r3, r0
 81046cc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 81046ce:	7bfb      	ldrb	r3, [r7, #15]
 81046d0:	2b00      	cmp	r3, #0
 81046d2:	d109      	bne.n	81046e8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 81046d4:	687b      	ldr	r3, [r7, #4]
 81046d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81046d8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 81046dc:	f023 0301 	bic.w	r3, r3, #1
 81046e0:	f043 0201 	orr.w	r2, r3, #1
 81046e4:	687b      	ldr	r3, [r7, #4]
 81046e6:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81046e8:	687b      	ldr	r3, [r7, #4]
 81046ea:	2200      	movs	r2, #0
 81046ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 81046f0:	7bfb      	ldrb	r3, [r7, #15]
}
 81046f2:	4618      	mov	r0, r3
 81046f4:	3710      	adds	r7, #16
 81046f6:	46bd      	mov	sp, r7
 81046f8:	bd80      	pop	{r7, pc}
	...

081046fc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 81046fc:	b580      	push	{r7, lr}
 81046fe:	b088      	sub	sp, #32
 8104700:	af00      	add	r7, sp, #0
 8104702:	6078      	str	r0, [r7, #4]
 8104704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8104706:	687b      	ldr	r3, [r7, #4]
 8104708:	681b      	ldr	r3, [r3, #0]
 810470a:	4a72      	ldr	r2, [pc, #456]	@ (81048d4 <HAL_ADC_PollForConversion+0x1d8>)
 810470c:	4293      	cmp	r3, r2
 810470e:	d004      	beq.n	810471a <HAL_ADC_PollForConversion+0x1e>
 8104710:	687b      	ldr	r3, [r7, #4]
 8104712:	681b      	ldr	r3, [r3, #0]
 8104714:	4a70      	ldr	r2, [pc, #448]	@ (81048d8 <HAL_ADC_PollForConversion+0x1dc>)
 8104716:	4293      	cmp	r3, r2
 8104718:	d101      	bne.n	810471e <HAL_ADC_PollForConversion+0x22>
 810471a:	4b70      	ldr	r3, [pc, #448]	@ (81048dc <HAL_ADC_PollForConversion+0x1e0>)
 810471c:	e000      	b.n	8104720 <HAL_ADC_PollForConversion+0x24>
 810471e:	4b70      	ldr	r3, [pc, #448]	@ (81048e0 <HAL_ADC_PollForConversion+0x1e4>)
 8104720:	4618      	mov	r0, r3
 8104722:	f7ff fc31 	bl	8103f88 <LL_ADC_GetMultimode>
 8104726:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8104728:	687b      	ldr	r3, [r7, #4]
 810472a:	691b      	ldr	r3, [r3, #16]
 810472c:	2b08      	cmp	r3, #8
 810472e:	d102      	bne.n	8104736 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8104730:	2308      	movs	r3, #8
 8104732:	61fb      	str	r3, [r7, #28]
 8104734:	e037      	b.n	81047a6 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8104736:	697b      	ldr	r3, [r7, #20]
 8104738:	2b00      	cmp	r3, #0
 810473a:	d005      	beq.n	8104748 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 810473c:	697b      	ldr	r3, [r7, #20]
 810473e:	2b05      	cmp	r3, #5
 8104740:	d002      	beq.n	8104748 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8104742:	697b      	ldr	r3, [r7, #20]
 8104744:	2b09      	cmp	r3, #9
 8104746:	d111      	bne.n	810476c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8104748:	687b      	ldr	r3, [r7, #4]
 810474a:	681b      	ldr	r3, [r3, #0]
 810474c:	68db      	ldr	r3, [r3, #12]
 810474e:	f003 0301 	and.w	r3, r3, #1
 8104752:	2b00      	cmp	r3, #0
 8104754:	d007      	beq.n	8104766 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104756:	687b      	ldr	r3, [r7, #4]
 8104758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810475a:	f043 0220 	orr.w	r2, r3, #32
 810475e:	687b      	ldr	r3, [r7, #4]
 8104760:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8104762:	2301      	movs	r3, #1
 8104764:	e0b1      	b.n	81048ca <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8104766:	2304      	movs	r3, #4
 8104768:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 810476a:	e01c      	b.n	81047a6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 810476c:	687b      	ldr	r3, [r7, #4]
 810476e:	681b      	ldr	r3, [r3, #0]
 8104770:	4a58      	ldr	r2, [pc, #352]	@ (81048d4 <HAL_ADC_PollForConversion+0x1d8>)
 8104772:	4293      	cmp	r3, r2
 8104774:	d004      	beq.n	8104780 <HAL_ADC_PollForConversion+0x84>
 8104776:	687b      	ldr	r3, [r7, #4]
 8104778:	681b      	ldr	r3, [r3, #0]
 810477a:	4a57      	ldr	r2, [pc, #348]	@ (81048d8 <HAL_ADC_PollForConversion+0x1dc>)
 810477c:	4293      	cmp	r3, r2
 810477e:	d101      	bne.n	8104784 <HAL_ADC_PollForConversion+0x88>
 8104780:	4b56      	ldr	r3, [pc, #344]	@ (81048dc <HAL_ADC_PollForConversion+0x1e0>)
 8104782:	e000      	b.n	8104786 <HAL_ADC_PollForConversion+0x8a>
 8104784:	4b56      	ldr	r3, [pc, #344]	@ (81048e0 <HAL_ADC_PollForConversion+0x1e4>)
 8104786:	4618      	mov	r0, r3
 8104788:	f7ff fc0c 	bl	8103fa4 <LL_ADC_GetMultiDMATransfer>
 810478c:	4603      	mov	r3, r0
 810478e:	2b00      	cmp	r3, #0
 8104790:	d007      	beq.n	81047a2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104792:	687b      	ldr	r3, [r7, #4]
 8104794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104796:	f043 0220 	orr.w	r2, r3, #32
 810479a:	687b      	ldr	r3, [r7, #4]
 810479c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 810479e:	2301      	movs	r3, #1
 81047a0:	e093      	b.n	81048ca <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 81047a2:	2304      	movs	r3, #4
 81047a4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 81047a6:	f7ff fa9d 	bl	8103ce4 <HAL_GetTick>
 81047aa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 81047ac:	e021      	b.n	81047f2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 81047ae:	683b      	ldr	r3, [r7, #0]
 81047b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81047b4:	d01d      	beq.n	81047f2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 81047b6:	f7ff fa95 	bl	8103ce4 <HAL_GetTick>
 81047ba:	4602      	mov	r2, r0
 81047bc:	693b      	ldr	r3, [r7, #16]
 81047be:	1ad3      	subs	r3, r2, r3
 81047c0:	683a      	ldr	r2, [r7, #0]
 81047c2:	429a      	cmp	r2, r3
 81047c4:	d302      	bcc.n	81047cc <HAL_ADC_PollForConversion+0xd0>
 81047c6:	683b      	ldr	r3, [r7, #0]
 81047c8:	2b00      	cmp	r3, #0
 81047ca:	d112      	bne.n	81047f2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 81047cc:	687b      	ldr	r3, [r7, #4]
 81047ce:	681b      	ldr	r3, [r3, #0]
 81047d0:	681a      	ldr	r2, [r3, #0]
 81047d2:	69fb      	ldr	r3, [r7, #28]
 81047d4:	4013      	ands	r3, r2
 81047d6:	2b00      	cmp	r3, #0
 81047d8:	d10b      	bne.n	81047f2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 81047da:	687b      	ldr	r3, [r7, #4]
 81047dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81047de:	f043 0204 	orr.w	r2, r3, #4
 81047e2:	687b      	ldr	r3, [r7, #4]
 81047e4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 81047e6:	687b      	ldr	r3, [r7, #4]
 81047e8:	2200      	movs	r2, #0
 81047ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 81047ee:	2303      	movs	r3, #3
 81047f0:	e06b      	b.n	81048ca <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 81047f2:	687b      	ldr	r3, [r7, #4]
 81047f4:	681b      	ldr	r3, [r3, #0]
 81047f6:	681a      	ldr	r2, [r3, #0]
 81047f8:	69fb      	ldr	r3, [r7, #28]
 81047fa:	4013      	ands	r3, r2
 81047fc:	2b00      	cmp	r3, #0
 81047fe:	d0d6      	beq.n	81047ae <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8104800:	687b      	ldr	r3, [r7, #4]
 8104802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104804:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8104808:	687b      	ldr	r3, [r7, #4]
 810480a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 810480c:	687b      	ldr	r3, [r7, #4]
 810480e:	681b      	ldr	r3, [r3, #0]
 8104810:	4618      	mov	r0, r3
 8104812:	f7ff fb2b 	bl	8103e6c <LL_ADC_REG_IsTriggerSourceSWStart>
 8104816:	4603      	mov	r3, r0
 8104818:	2b00      	cmp	r3, #0
 810481a:	d01c      	beq.n	8104856 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 810481c:	687b      	ldr	r3, [r7, #4]
 810481e:	7d5b      	ldrb	r3, [r3, #21]
 8104820:	2b00      	cmp	r3, #0
 8104822:	d118      	bne.n	8104856 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8104824:	687b      	ldr	r3, [r7, #4]
 8104826:	681b      	ldr	r3, [r3, #0]
 8104828:	681b      	ldr	r3, [r3, #0]
 810482a:	f003 0308 	and.w	r3, r3, #8
 810482e:	2b08      	cmp	r3, #8
 8104830:	d111      	bne.n	8104856 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8104832:	687b      	ldr	r3, [r7, #4]
 8104834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104836:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810483a:	687b      	ldr	r3, [r7, #4]
 810483c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 810483e:	687b      	ldr	r3, [r7, #4]
 8104840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104842:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8104846:	2b00      	cmp	r3, #0
 8104848:	d105      	bne.n	8104856 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 810484a:	687b      	ldr	r3, [r7, #4]
 810484c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810484e:	f043 0201 	orr.w	r2, r3, #1
 8104852:	687b      	ldr	r3, [r7, #4]
 8104854:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8104856:	687b      	ldr	r3, [r7, #4]
 8104858:	681b      	ldr	r3, [r3, #0]
 810485a:	4a1f      	ldr	r2, [pc, #124]	@ (81048d8 <HAL_ADC_PollForConversion+0x1dc>)
 810485c:	4293      	cmp	r3, r2
 810485e:	d002      	beq.n	8104866 <HAL_ADC_PollForConversion+0x16a>
 8104860:	687b      	ldr	r3, [r7, #4]
 8104862:	681b      	ldr	r3, [r3, #0]
 8104864:	e000      	b.n	8104868 <HAL_ADC_PollForConversion+0x16c>
 8104866:	4b1b      	ldr	r3, [pc, #108]	@ (81048d4 <HAL_ADC_PollForConversion+0x1d8>)
 8104868:	687a      	ldr	r2, [r7, #4]
 810486a:	6812      	ldr	r2, [r2, #0]
 810486c:	4293      	cmp	r3, r2
 810486e:	d008      	beq.n	8104882 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8104870:	697b      	ldr	r3, [r7, #20]
 8104872:	2b00      	cmp	r3, #0
 8104874:	d005      	beq.n	8104882 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8104876:	697b      	ldr	r3, [r7, #20]
 8104878:	2b05      	cmp	r3, #5
 810487a:	d002      	beq.n	8104882 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 810487c:	697b      	ldr	r3, [r7, #20]
 810487e:	2b09      	cmp	r3, #9
 8104880:	d104      	bne.n	810488c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8104882:	687b      	ldr	r3, [r7, #4]
 8104884:	681b      	ldr	r3, [r3, #0]
 8104886:	68db      	ldr	r3, [r3, #12]
 8104888:	61bb      	str	r3, [r7, #24]
 810488a:	e00c      	b.n	81048a6 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 810488c:	687b      	ldr	r3, [r7, #4]
 810488e:	681b      	ldr	r3, [r3, #0]
 8104890:	4a11      	ldr	r2, [pc, #68]	@ (81048d8 <HAL_ADC_PollForConversion+0x1dc>)
 8104892:	4293      	cmp	r3, r2
 8104894:	d002      	beq.n	810489c <HAL_ADC_PollForConversion+0x1a0>
 8104896:	687b      	ldr	r3, [r7, #4]
 8104898:	681b      	ldr	r3, [r3, #0]
 810489a:	e000      	b.n	810489e <HAL_ADC_PollForConversion+0x1a2>
 810489c:	4b0d      	ldr	r3, [pc, #52]	@ (81048d4 <HAL_ADC_PollForConversion+0x1d8>)
 810489e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 81048a0:	68fb      	ldr	r3, [r7, #12]
 81048a2:	68db      	ldr	r3, [r3, #12]
 81048a4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 81048a6:	69fb      	ldr	r3, [r7, #28]
 81048a8:	2b08      	cmp	r3, #8
 81048aa:	d104      	bne.n	81048b6 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 81048ac:	687b      	ldr	r3, [r7, #4]
 81048ae:	681b      	ldr	r3, [r3, #0]
 81048b0:	2208      	movs	r2, #8
 81048b2:	601a      	str	r2, [r3, #0]
 81048b4:	e008      	b.n	81048c8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 81048b6:	69bb      	ldr	r3, [r7, #24]
 81048b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81048bc:	2b00      	cmp	r3, #0
 81048be:	d103      	bne.n	81048c8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 81048c0:	687b      	ldr	r3, [r7, #4]
 81048c2:	681b      	ldr	r3, [r3, #0]
 81048c4:	220c      	movs	r2, #12
 81048c6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 81048c8:	2300      	movs	r3, #0
}
 81048ca:	4618      	mov	r0, r3
 81048cc:	3720      	adds	r7, #32
 81048ce:	46bd      	mov	sp, r7
 81048d0:	bd80      	pop	{r7, pc}
 81048d2:	bf00      	nop
 81048d4:	40022000 	.word	0x40022000
 81048d8:	40022100 	.word	0x40022100
 81048dc:	40022300 	.word	0x40022300
 81048e0:	58026300 	.word	0x58026300

081048e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 81048e4:	b480      	push	{r7}
 81048e6:	b083      	sub	sp, #12
 81048e8:	af00      	add	r7, sp, #0
 81048ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 81048ec:	687b      	ldr	r3, [r7, #4]
 81048ee:	681b      	ldr	r3, [r3, #0]
 81048f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 81048f2:	4618      	mov	r0, r3
 81048f4:	370c      	adds	r7, #12
 81048f6:	46bd      	mov	sp, r7
 81048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048fc:	4770      	bx	lr
	...

08104900 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8104900:	b590      	push	{r4, r7, lr}
 8104902:	b0a1      	sub	sp, #132	@ 0x84
 8104904:	af00      	add	r7, sp, #0
 8104906:	6078      	str	r0, [r7, #4]
 8104908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810490a:	2300      	movs	r3, #0
 810490c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8104910:	2300      	movs	r3, #0
 8104912:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8104914:	683b      	ldr	r3, [r7, #0]
 8104916:	68db      	ldr	r3, [r3, #12]
 8104918:	4a65      	ldr	r2, [pc, #404]	@ (8104ab0 <HAL_ADC_ConfigChannel+0x1b0>)
 810491a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 810491c:	687b      	ldr	r3, [r7, #4]
 810491e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8104922:	2b01      	cmp	r3, #1
 8104924:	d101      	bne.n	810492a <HAL_ADC_ConfigChannel+0x2a>
 8104926:	2302      	movs	r3, #2
 8104928:	e32e      	b.n	8104f88 <HAL_ADC_ConfigChannel+0x688>
 810492a:	687b      	ldr	r3, [r7, #4]
 810492c:	2201      	movs	r2, #1
 810492e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8104932:	687b      	ldr	r3, [r7, #4]
 8104934:	681b      	ldr	r3, [r3, #0]
 8104936:	4618      	mov	r0, r3
 8104938:	f7ff fc06 	bl	8104148 <LL_ADC_REG_IsConversionOngoing>
 810493c:	4603      	mov	r3, r0
 810493e:	2b00      	cmp	r3, #0
 8104940:	f040 8313 	bne.w	8104f6a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8104944:	683b      	ldr	r3, [r7, #0]
 8104946:	681b      	ldr	r3, [r3, #0]
 8104948:	2b00      	cmp	r3, #0
 810494a:	db2c      	blt.n	81049a6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 810494c:	683b      	ldr	r3, [r7, #0]
 810494e:	681b      	ldr	r3, [r3, #0]
 8104950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104954:	2b00      	cmp	r3, #0
 8104956:	d108      	bne.n	810496a <HAL_ADC_ConfigChannel+0x6a>
 8104958:	683b      	ldr	r3, [r7, #0]
 810495a:	681b      	ldr	r3, [r3, #0]
 810495c:	0e9b      	lsrs	r3, r3, #26
 810495e:	f003 031f 	and.w	r3, r3, #31
 8104962:	2201      	movs	r2, #1
 8104964:	fa02 f303 	lsl.w	r3, r2, r3
 8104968:	e016      	b.n	8104998 <HAL_ADC_ConfigChannel+0x98>
 810496a:	683b      	ldr	r3, [r7, #0]
 810496c:	681b      	ldr	r3, [r3, #0]
 810496e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104970:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8104972:	fa93 f3a3 	rbit	r3, r3
 8104976:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8104978:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810497a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 810497c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810497e:	2b00      	cmp	r3, #0
 8104980:	d101      	bne.n	8104986 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8104982:	2320      	movs	r3, #32
 8104984:	e003      	b.n	810498e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8104986:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8104988:	fab3 f383 	clz	r3, r3
 810498c:	b2db      	uxtb	r3, r3
 810498e:	f003 031f 	and.w	r3, r3, #31
 8104992:	2201      	movs	r2, #1
 8104994:	fa02 f303 	lsl.w	r3, r2, r3
 8104998:	687a      	ldr	r2, [r7, #4]
 810499a:	6812      	ldr	r2, [r2, #0]
 810499c:	69d1      	ldr	r1, [r2, #28]
 810499e:	687a      	ldr	r2, [r7, #4]
 81049a0:	6812      	ldr	r2, [r2, #0]
 81049a2:	430b      	orrs	r3, r1
 81049a4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 81049a6:	687b      	ldr	r3, [r7, #4]
 81049a8:	6818      	ldr	r0, [r3, #0]
 81049aa:	683b      	ldr	r3, [r7, #0]
 81049ac:	6859      	ldr	r1, [r3, #4]
 81049ae:	683b      	ldr	r3, [r7, #0]
 81049b0:	681b      	ldr	r3, [r3, #0]
 81049b2:	461a      	mov	r2, r3
 81049b4:	f7ff fa6d 	bl	8103e92 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81049b8:	687b      	ldr	r3, [r7, #4]
 81049ba:	681b      	ldr	r3, [r3, #0]
 81049bc:	4618      	mov	r0, r3
 81049be:	f7ff fbc3 	bl	8104148 <LL_ADC_REG_IsConversionOngoing>
 81049c2:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81049c4:	687b      	ldr	r3, [r7, #4]
 81049c6:	681b      	ldr	r3, [r3, #0]
 81049c8:	4618      	mov	r0, r3
 81049ca:	f7ff fbe4 	bl	8104196 <LL_ADC_INJ_IsConversionOngoing>
 81049ce:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81049d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 81049d2:	2b00      	cmp	r3, #0
 81049d4:	f040 80b8 	bne.w	8104b48 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81049d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 81049da:	2b00      	cmp	r3, #0
 81049dc:	f040 80b4 	bne.w	8104b48 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 81049e0:	687b      	ldr	r3, [r7, #4]
 81049e2:	6818      	ldr	r0, [r3, #0]
 81049e4:	683b      	ldr	r3, [r7, #0]
 81049e6:	6819      	ldr	r1, [r3, #0]
 81049e8:	683b      	ldr	r3, [r7, #0]
 81049ea:	689b      	ldr	r3, [r3, #8]
 81049ec:	461a      	mov	r2, r3
 81049ee:	f7ff fa7c 	bl	8103eea <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 81049f2:	4b30      	ldr	r3, [pc, #192]	@ (8104ab4 <HAL_ADC_ConfigChannel+0x1b4>)
 81049f4:	681b      	ldr	r3, [r3, #0]
 81049f6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 81049fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81049fe:	d10b      	bne.n	8104a18 <HAL_ADC_ConfigChannel+0x118>
 8104a00:	683b      	ldr	r3, [r7, #0]
 8104a02:	695a      	ldr	r2, [r3, #20]
 8104a04:	687b      	ldr	r3, [r7, #4]
 8104a06:	681b      	ldr	r3, [r3, #0]
 8104a08:	68db      	ldr	r3, [r3, #12]
 8104a0a:	089b      	lsrs	r3, r3, #2
 8104a0c:	f003 0307 	and.w	r3, r3, #7
 8104a10:	005b      	lsls	r3, r3, #1
 8104a12:	fa02 f303 	lsl.w	r3, r2, r3
 8104a16:	e01d      	b.n	8104a54 <HAL_ADC_ConfigChannel+0x154>
 8104a18:	687b      	ldr	r3, [r7, #4]
 8104a1a:	681b      	ldr	r3, [r3, #0]
 8104a1c:	68db      	ldr	r3, [r3, #12]
 8104a1e:	f003 0310 	and.w	r3, r3, #16
 8104a22:	2b00      	cmp	r3, #0
 8104a24:	d10b      	bne.n	8104a3e <HAL_ADC_ConfigChannel+0x13e>
 8104a26:	683b      	ldr	r3, [r7, #0]
 8104a28:	695a      	ldr	r2, [r3, #20]
 8104a2a:	687b      	ldr	r3, [r7, #4]
 8104a2c:	681b      	ldr	r3, [r3, #0]
 8104a2e:	68db      	ldr	r3, [r3, #12]
 8104a30:	089b      	lsrs	r3, r3, #2
 8104a32:	f003 0307 	and.w	r3, r3, #7
 8104a36:	005b      	lsls	r3, r3, #1
 8104a38:	fa02 f303 	lsl.w	r3, r2, r3
 8104a3c:	e00a      	b.n	8104a54 <HAL_ADC_ConfigChannel+0x154>
 8104a3e:	683b      	ldr	r3, [r7, #0]
 8104a40:	695a      	ldr	r2, [r3, #20]
 8104a42:	687b      	ldr	r3, [r7, #4]
 8104a44:	681b      	ldr	r3, [r3, #0]
 8104a46:	68db      	ldr	r3, [r3, #12]
 8104a48:	089b      	lsrs	r3, r3, #2
 8104a4a:	f003 0304 	and.w	r3, r3, #4
 8104a4e:	005b      	lsls	r3, r3, #1
 8104a50:	fa02 f303 	lsl.w	r3, r2, r3
 8104a54:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8104a56:	683b      	ldr	r3, [r7, #0]
 8104a58:	691b      	ldr	r3, [r3, #16]
 8104a5a:	2b04      	cmp	r3, #4
 8104a5c:	d02c      	beq.n	8104ab8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8104a5e:	687b      	ldr	r3, [r7, #4]
 8104a60:	6818      	ldr	r0, [r3, #0]
 8104a62:	683b      	ldr	r3, [r7, #0]
 8104a64:	6919      	ldr	r1, [r3, #16]
 8104a66:	683b      	ldr	r3, [r7, #0]
 8104a68:	681a      	ldr	r2, [r3, #0]
 8104a6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8104a6c:	f7ff f9aa 	bl	8103dc4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8104a70:	687b      	ldr	r3, [r7, #4]
 8104a72:	6818      	ldr	r0, [r3, #0]
 8104a74:	683b      	ldr	r3, [r7, #0]
 8104a76:	6919      	ldr	r1, [r3, #16]
 8104a78:	683b      	ldr	r3, [r7, #0]
 8104a7a:	7e5b      	ldrb	r3, [r3, #25]
 8104a7c:	2b01      	cmp	r3, #1
 8104a7e:	d102      	bne.n	8104a86 <HAL_ADC_ConfigChannel+0x186>
 8104a80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8104a84:	e000      	b.n	8104a88 <HAL_ADC_ConfigChannel+0x188>
 8104a86:	2300      	movs	r3, #0
 8104a88:	461a      	mov	r2, r3
 8104a8a:	f7ff f9d4 	bl	8103e36 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8104a8e:	687b      	ldr	r3, [r7, #4]
 8104a90:	6818      	ldr	r0, [r3, #0]
 8104a92:	683b      	ldr	r3, [r7, #0]
 8104a94:	6919      	ldr	r1, [r3, #16]
 8104a96:	683b      	ldr	r3, [r7, #0]
 8104a98:	7e1b      	ldrb	r3, [r3, #24]
 8104a9a:	2b01      	cmp	r3, #1
 8104a9c:	d102      	bne.n	8104aa4 <HAL_ADC_ConfigChannel+0x1a4>
 8104a9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8104aa2:	e000      	b.n	8104aa6 <HAL_ADC_ConfigChannel+0x1a6>
 8104aa4:	2300      	movs	r3, #0
 8104aa6:	461a      	mov	r2, r3
 8104aa8:	f7ff f9ac 	bl	8103e04 <LL_ADC_SetDataRightShift>
 8104aac:	e04c      	b.n	8104b48 <HAL_ADC_ConfigChannel+0x248>
 8104aae:	bf00      	nop
 8104ab0:	47ff0000 	.word	0x47ff0000
 8104ab4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8104ab8:	687b      	ldr	r3, [r7, #4]
 8104aba:	681b      	ldr	r3, [r3, #0]
 8104abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104abe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104ac2:	683b      	ldr	r3, [r7, #0]
 8104ac4:	681b      	ldr	r3, [r3, #0]
 8104ac6:	069b      	lsls	r3, r3, #26
 8104ac8:	429a      	cmp	r2, r3
 8104aca:	d107      	bne.n	8104adc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8104acc:	687b      	ldr	r3, [r7, #4]
 8104ace:	681b      	ldr	r3, [r3, #0]
 8104ad0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8104ad2:	687b      	ldr	r3, [r7, #4]
 8104ad4:	681b      	ldr	r3, [r3, #0]
 8104ad6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8104ada:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8104adc:	687b      	ldr	r3, [r7, #4]
 8104ade:	681b      	ldr	r3, [r3, #0]
 8104ae0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104ae2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104ae6:	683b      	ldr	r3, [r7, #0]
 8104ae8:	681b      	ldr	r3, [r3, #0]
 8104aea:	069b      	lsls	r3, r3, #26
 8104aec:	429a      	cmp	r2, r3
 8104aee:	d107      	bne.n	8104b00 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8104af0:	687b      	ldr	r3, [r7, #4]
 8104af2:	681b      	ldr	r3, [r3, #0]
 8104af4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8104af6:	687b      	ldr	r3, [r7, #4]
 8104af8:	681b      	ldr	r3, [r3, #0]
 8104afa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8104afe:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8104b00:	687b      	ldr	r3, [r7, #4]
 8104b02:	681b      	ldr	r3, [r3, #0]
 8104b04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104b06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104b0a:	683b      	ldr	r3, [r7, #0]
 8104b0c:	681b      	ldr	r3, [r3, #0]
 8104b0e:	069b      	lsls	r3, r3, #26
 8104b10:	429a      	cmp	r2, r3
 8104b12:	d107      	bne.n	8104b24 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8104b14:	687b      	ldr	r3, [r7, #4]
 8104b16:	681b      	ldr	r3, [r3, #0]
 8104b18:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8104b1a:	687b      	ldr	r3, [r7, #4]
 8104b1c:	681b      	ldr	r3, [r3, #0]
 8104b1e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8104b22:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8104b24:	687b      	ldr	r3, [r7, #4]
 8104b26:	681b      	ldr	r3, [r3, #0]
 8104b28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104b2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104b2e:	683b      	ldr	r3, [r7, #0]
 8104b30:	681b      	ldr	r3, [r3, #0]
 8104b32:	069b      	lsls	r3, r3, #26
 8104b34:	429a      	cmp	r2, r3
 8104b36:	d107      	bne.n	8104b48 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8104b38:	687b      	ldr	r3, [r7, #4]
 8104b3a:	681b      	ldr	r3, [r3, #0]
 8104b3c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8104b3e:	687b      	ldr	r3, [r7, #4]
 8104b40:	681b      	ldr	r3, [r3, #0]
 8104b42:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8104b46:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8104b48:	687b      	ldr	r3, [r7, #4]
 8104b4a:	681b      	ldr	r3, [r3, #0]
 8104b4c:	4618      	mov	r0, r3
 8104b4e:	f7ff faad 	bl	81040ac <LL_ADC_IsEnabled>
 8104b52:	4603      	mov	r3, r0
 8104b54:	2b00      	cmp	r3, #0
 8104b56:	f040 8211 	bne.w	8104f7c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	6818      	ldr	r0, [r3, #0]
 8104b5e:	683b      	ldr	r3, [r7, #0]
 8104b60:	6819      	ldr	r1, [r3, #0]
 8104b62:	683b      	ldr	r3, [r7, #0]
 8104b64:	68db      	ldr	r3, [r3, #12]
 8104b66:	461a      	mov	r2, r3
 8104b68:	f7ff f9ea 	bl	8103f40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8104b6c:	683b      	ldr	r3, [r7, #0]
 8104b6e:	68db      	ldr	r3, [r3, #12]
 8104b70:	4aa1      	ldr	r2, [pc, #644]	@ (8104df8 <HAL_ADC_ConfigChannel+0x4f8>)
 8104b72:	4293      	cmp	r3, r2
 8104b74:	f040 812e 	bne.w	8104dd4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8104b78:	687b      	ldr	r3, [r7, #4]
 8104b7a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8104b7c:	683b      	ldr	r3, [r7, #0]
 8104b7e:	681b      	ldr	r3, [r3, #0]
 8104b80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104b84:	2b00      	cmp	r3, #0
 8104b86:	d10b      	bne.n	8104ba0 <HAL_ADC_ConfigChannel+0x2a0>
 8104b88:	683b      	ldr	r3, [r7, #0]
 8104b8a:	681b      	ldr	r3, [r3, #0]
 8104b8c:	0e9b      	lsrs	r3, r3, #26
 8104b8e:	3301      	adds	r3, #1
 8104b90:	f003 031f 	and.w	r3, r3, #31
 8104b94:	2b09      	cmp	r3, #9
 8104b96:	bf94      	ite	ls
 8104b98:	2301      	movls	r3, #1
 8104b9a:	2300      	movhi	r3, #0
 8104b9c:	b2db      	uxtb	r3, r3
 8104b9e:	e019      	b.n	8104bd4 <HAL_ADC_ConfigChannel+0x2d4>
 8104ba0:	683b      	ldr	r3, [r7, #0]
 8104ba2:	681b      	ldr	r3, [r3, #0]
 8104ba4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104ba6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8104ba8:	fa93 f3a3 	rbit	r3, r3
 8104bac:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8104bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8104bb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8104bb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8104bb4:	2b00      	cmp	r3, #0
 8104bb6:	d101      	bne.n	8104bbc <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8104bb8:	2320      	movs	r3, #32
 8104bba:	e003      	b.n	8104bc4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8104bbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8104bbe:	fab3 f383 	clz	r3, r3
 8104bc2:	b2db      	uxtb	r3, r3
 8104bc4:	3301      	adds	r3, #1
 8104bc6:	f003 031f 	and.w	r3, r3, #31
 8104bca:	2b09      	cmp	r3, #9
 8104bcc:	bf94      	ite	ls
 8104bce:	2301      	movls	r3, #1
 8104bd0:	2300      	movhi	r3, #0
 8104bd2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8104bd4:	2b00      	cmp	r3, #0
 8104bd6:	d079      	beq.n	8104ccc <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8104bd8:	683b      	ldr	r3, [r7, #0]
 8104bda:	681b      	ldr	r3, [r3, #0]
 8104bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104be0:	2b00      	cmp	r3, #0
 8104be2:	d107      	bne.n	8104bf4 <HAL_ADC_ConfigChannel+0x2f4>
 8104be4:	683b      	ldr	r3, [r7, #0]
 8104be6:	681b      	ldr	r3, [r3, #0]
 8104be8:	0e9b      	lsrs	r3, r3, #26
 8104bea:	3301      	adds	r3, #1
 8104bec:	069b      	lsls	r3, r3, #26
 8104bee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104bf2:	e015      	b.n	8104c20 <HAL_ADC_ConfigChannel+0x320>
 8104bf4:	683b      	ldr	r3, [r7, #0]
 8104bf6:	681b      	ldr	r3, [r3, #0]
 8104bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8104bfc:	fa93 f3a3 	rbit	r3, r3
 8104c00:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8104c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8104c04:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8104c06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8104c08:	2b00      	cmp	r3, #0
 8104c0a:	d101      	bne.n	8104c10 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8104c0c:	2320      	movs	r3, #32
 8104c0e:	e003      	b.n	8104c18 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8104c10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8104c12:	fab3 f383 	clz	r3, r3
 8104c16:	b2db      	uxtb	r3, r3
 8104c18:	3301      	adds	r3, #1
 8104c1a:	069b      	lsls	r3, r3, #26
 8104c1c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104c20:	683b      	ldr	r3, [r7, #0]
 8104c22:	681b      	ldr	r3, [r3, #0]
 8104c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104c28:	2b00      	cmp	r3, #0
 8104c2a:	d109      	bne.n	8104c40 <HAL_ADC_ConfigChannel+0x340>
 8104c2c:	683b      	ldr	r3, [r7, #0]
 8104c2e:	681b      	ldr	r3, [r3, #0]
 8104c30:	0e9b      	lsrs	r3, r3, #26
 8104c32:	3301      	adds	r3, #1
 8104c34:	f003 031f 	and.w	r3, r3, #31
 8104c38:	2101      	movs	r1, #1
 8104c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8104c3e:	e017      	b.n	8104c70 <HAL_ADC_ConfigChannel+0x370>
 8104c40:	683b      	ldr	r3, [r7, #0]
 8104c42:	681b      	ldr	r3, [r3, #0]
 8104c44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8104c48:	fa93 f3a3 	rbit	r3, r3
 8104c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8104c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104c50:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8104c52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8104c54:	2b00      	cmp	r3, #0
 8104c56:	d101      	bne.n	8104c5c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8104c58:	2320      	movs	r3, #32
 8104c5a:	e003      	b.n	8104c64 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8104c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8104c5e:	fab3 f383 	clz	r3, r3
 8104c62:	b2db      	uxtb	r3, r3
 8104c64:	3301      	adds	r3, #1
 8104c66:	f003 031f 	and.w	r3, r3, #31
 8104c6a:	2101      	movs	r1, #1
 8104c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8104c70:	ea42 0103 	orr.w	r1, r2, r3
 8104c74:	683b      	ldr	r3, [r7, #0]
 8104c76:	681b      	ldr	r3, [r3, #0]
 8104c78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104c7c:	2b00      	cmp	r3, #0
 8104c7e:	d10a      	bne.n	8104c96 <HAL_ADC_ConfigChannel+0x396>
 8104c80:	683b      	ldr	r3, [r7, #0]
 8104c82:	681b      	ldr	r3, [r3, #0]
 8104c84:	0e9b      	lsrs	r3, r3, #26
 8104c86:	3301      	adds	r3, #1
 8104c88:	f003 021f 	and.w	r2, r3, #31
 8104c8c:	4613      	mov	r3, r2
 8104c8e:	005b      	lsls	r3, r3, #1
 8104c90:	4413      	add	r3, r2
 8104c92:	051b      	lsls	r3, r3, #20
 8104c94:	e018      	b.n	8104cc8 <HAL_ADC_ConfigChannel+0x3c8>
 8104c96:	683b      	ldr	r3, [r7, #0]
 8104c98:	681b      	ldr	r3, [r3, #0]
 8104c9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104c9e:	fa93 f3a3 	rbit	r3, r3
 8104ca2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8104ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8104ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104caa:	2b00      	cmp	r3, #0
 8104cac:	d101      	bne.n	8104cb2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8104cae:	2320      	movs	r3, #32
 8104cb0:	e003      	b.n	8104cba <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8104cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104cb4:	fab3 f383 	clz	r3, r3
 8104cb8:	b2db      	uxtb	r3, r3
 8104cba:	3301      	adds	r3, #1
 8104cbc:	f003 021f 	and.w	r2, r3, #31
 8104cc0:	4613      	mov	r3, r2
 8104cc2:	005b      	lsls	r3, r3, #1
 8104cc4:	4413      	add	r3, r2
 8104cc6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8104cc8:	430b      	orrs	r3, r1
 8104cca:	e07e      	b.n	8104dca <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8104ccc:	683b      	ldr	r3, [r7, #0]
 8104cce:	681b      	ldr	r3, [r3, #0]
 8104cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104cd4:	2b00      	cmp	r3, #0
 8104cd6:	d107      	bne.n	8104ce8 <HAL_ADC_ConfigChannel+0x3e8>
 8104cd8:	683b      	ldr	r3, [r7, #0]
 8104cda:	681b      	ldr	r3, [r3, #0]
 8104cdc:	0e9b      	lsrs	r3, r3, #26
 8104cde:	3301      	adds	r3, #1
 8104ce0:	069b      	lsls	r3, r3, #26
 8104ce2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104ce6:	e015      	b.n	8104d14 <HAL_ADC_ConfigChannel+0x414>
 8104ce8:	683b      	ldr	r3, [r7, #0]
 8104cea:	681b      	ldr	r3, [r3, #0]
 8104cec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104cf0:	fa93 f3a3 	rbit	r3, r3
 8104cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8104cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8104cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104cfc:	2b00      	cmp	r3, #0
 8104cfe:	d101      	bne.n	8104d04 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8104d00:	2320      	movs	r3, #32
 8104d02:	e003      	b.n	8104d0c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8104d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104d06:	fab3 f383 	clz	r3, r3
 8104d0a:	b2db      	uxtb	r3, r3
 8104d0c:	3301      	adds	r3, #1
 8104d0e:	069b      	lsls	r3, r3, #26
 8104d10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104d14:	683b      	ldr	r3, [r7, #0]
 8104d16:	681b      	ldr	r3, [r3, #0]
 8104d18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104d1c:	2b00      	cmp	r3, #0
 8104d1e:	d109      	bne.n	8104d34 <HAL_ADC_ConfigChannel+0x434>
 8104d20:	683b      	ldr	r3, [r7, #0]
 8104d22:	681b      	ldr	r3, [r3, #0]
 8104d24:	0e9b      	lsrs	r3, r3, #26
 8104d26:	3301      	adds	r3, #1
 8104d28:	f003 031f 	and.w	r3, r3, #31
 8104d2c:	2101      	movs	r1, #1
 8104d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8104d32:	e017      	b.n	8104d64 <HAL_ADC_ConfigChannel+0x464>
 8104d34:	683b      	ldr	r3, [r7, #0]
 8104d36:	681b      	ldr	r3, [r3, #0]
 8104d38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104d3a:	69fb      	ldr	r3, [r7, #28]
 8104d3c:	fa93 f3a3 	rbit	r3, r3
 8104d40:	61bb      	str	r3, [r7, #24]
  return result;
 8104d42:	69bb      	ldr	r3, [r7, #24]
 8104d44:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8104d46:	6a3b      	ldr	r3, [r7, #32]
 8104d48:	2b00      	cmp	r3, #0
 8104d4a:	d101      	bne.n	8104d50 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8104d4c:	2320      	movs	r3, #32
 8104d4e:	e003      	b.n	8104d58 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8104d50:	6a3b      	ldr	r3, [r7, #32]
 8104d52:	fab3 f383 	clz	r3, r3
 8104d56:	b2db      	uxtb	r3, r3
 8104d58:	3301      	adds	r3, #1
 8104d5a:	f003 031f 	and.w	r3, r3, #31
 8104d5e:	2101      	movs	r1, #1
 8104d60:	fa01 f303 	lsl.w	r3, r1, r3
 8104d64:	ea42 0103 	orr.w	r1, r2, r3
 8104d68:	683b      	ldr	r3, [r7, #0]
 8104d6a:	681b      	ldr	r3, [r3, #0]
 8104d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104d70:	2b00      	cmp	r3, #0
 8104d72:	d10d      	bne.n	8104d90 <HAL_ADC_ConfigChannel+0x490>
 8104d74:	683b      	ldr	r3, [r7, #0]
 8104d76:	681b      	ldr	r3, [r3, #0]
 8104d78:	0e9b      	lsrs	r3, r3, #26
 8104d7a:	3301      	adds	r3, #1
 8104d7c:	f003 021f 	and.w	r2, r3, #31
 8104d80:	4613      	mov	r3, r2
 8104d82:	005b      	lsls	r3, r3, #1
 8104d84:	4413      	add	r3, r2
 8104d86:	3b1e      	subs	r3, #30
 8104d88:	051b      	lsls	r3, r3, #20
 8104d8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8104d8e:	e01b      	b.n	8104dc8 <HAL_ADC_ConfigChannel+0x4c8>
 8104d90:	683b      	ldr	r3, [r7, #0]
 8104d92:	681b      	ldr	r3, [r3, #0]
 8104d94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104d96:	693b      	ldr	r3, [r7, #16]
 8104d98:	fa93 f3a3 	rbit	r3, r3
 8104d9c:	60fb      	str	r3, [r7, #12]
  return result;
 8104d9e:	68fb      	ldr	r3, [r7, #12]
 8104da0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8104da2:	697b      	ldr	r3, [r7, #20]
 8104da4:	2b00      	cmp	r3, #0
 8104da6:	d101      	bne.n	8104dac <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8104da8:	2320      	movs	r3, #32
 8104daa:	e003      	b.n	8104db4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8104dac:	697b      	ldr	r3, [r7, #20]
 8104dae:	fab3 f383 	clz	r3, r3
 8104db2:	b2db      	uxtb	r3, r3
 8104db4:	3301      	adds	r3, #1
 8104db6:	f003 021f 	and.w	r2, r3, #31
 8104dba:	4613      	mov	r3, r2
 8104dbc:	005b      	lsls	r3, r3, #1
 8104dbe:	4413      	add	r3, r2
 8104dc0:	3b1e      	subs	r3, #30
 8104dc2:	051b      	lsls	r3, r3, #20
 8104dc4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8104dc8:	430b      	orrs	r3, r1
 8104dca:	683a      	ldr	r2, [r7, #0]
 8104dcc:	6892      	ldr	r2, [r2, #8]
 8104dce:	4619      	mov	r1, r3
 8104dd0:	f7ff f88b 	bl	8103eea <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8104dd4:	683b      	ldr	r3, [r7, #0]
 8104dd6:	681b      	ldr	r3, [r3, #0]
 8104dd8:	2b00      	cmp	r3, #0
 8104dda:	f280 80cf 	bge.w	8104f7c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8104dde:	687b      	ldr	r3, [r7, #4]
 8104de0:	681b      	ldr	r3, [r3, #0]
 8104de2:	4a06      	ldr	r2, [pc, #24]	@ (8104dfc <HAL_ADC_ConfigChannel+0x4fc>)
 8104de4:	4293      	cmp	r3, r2
 8104de6:	d004      	beq.n	8104df2 <HAL_ADC_ConfigChannel+0x4f2>
 8104de8:	687b      	ldr	r3, [r7, #4]
 8104dea:	681b      	ldr	r3, [r3, #0]
 8104dec:	4a04      	ldr	r2, [pc, #16]	@ (8104e00 <HAL_ADC_ConfigChannel+0x500>)
 8104dee:	4293      	cmp	r3, r2
 8104df0:	d10a      	bne.n	8104e08 <HAL_ADC_ConfigChannel+0x508>
 8104df2:	4b04      	ldr	r3, [pc, #16]	@ (8104e04 <HAL_ADC_ConfigChannel+0x504>)
 8104df4:	e009      	b.n	8104e0a <HAL_ADC_ConfigChannel+0x50a>
 8104df6:	bf00      	nop
 8104df8:	47ff0000 	.word	0x47ff0000
 8104dfc:	40022000 	.word	0x40022000
 8104e00:	40022100 	.word	0x40022100
 8104e04:	40022300 	.word	0x40022300
 8104e08:	4b61      	ldr	r3, [pc, #388]	@ (8104f90 <HAL_ADC_ConfigChannel+0x690>)
 8104e0a:	4618      	mov	r0, r3
 8104e0c:	f7fe ffcc 	bl	8103da8 <LL_ADC_GetCommonPathInternalCh>
 8104e10:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8104e12:	687b      	ldr	r3, [r7, #4]
 8104e14:	681b      	ldr	r3, [r3, #0]
 8104e16:	4a5f      	ldr	r2, [pc, #380]	@ (8104f94 <HAL_ADC_ConfigChannel+0x694>)
 8104e18:	4293      	cmp	r3, r2
 8104e1a:	d004      	beq.n	8104e26 <HAL_ADC_ConfigChannel+0x526>
 8104e1c:	687b      	ldr	r3, [r7, #4]
 8104e1e:	681b      	ldr	r3, [r3, #0]
 8104e20:	4a5d      	ldr	r2, [pc, #372]	@ (8104f98 <HAL_ADC_ConfigChannel+0x698>)
 8104e22:	4293      	cmp	r3, r2
 8104e24:	d10e      	bne.n	8104e44 <HAL_ADC_ConfigChannel+0x544>
 8104e26:	485b      	ldr	r0, [pc, #364]	@ (8104f94 <HAL_ADC_ConfigChannel+0x694>)
 8104e28:	f7ff f940 	bl	81040ac <LL_ADC_IsEnabled>
 8104e2c:	4604      	mov	r4, r0
 8104e2e:	485a      	ldr	r0, [pc, #360]	@ (8104f98 <HAL_ADC_ConfigChannel+0x698>)
 8104e30:	f7ff f93c 	bl	81040ac <LL_ADC_IsEnabled>
 8104e34:	4603      	mov	r3, r0
 8104e36:	4323      	orrs	r3, r4
 8104e38:	2b00      	cmp	r3, #0
 8104e3a:	bf0c      	ite	eq
 8104e3c:	2301      	moveq	r3, #1
 8104e3e:	2300      	movne	r3, #0
 8104e40:	b2db      	uxtb	r3, r3
 8104e42:	e008      	b.n	8104e56 <HAL_ADC_ConfigChannel+0x556>
 8104e44:	4855      	ldr	r0, [pc, #340]	@ (8104f9c <HAL_ADC_ConfigChannel+0x69c>)
 8104e46:	f7ff f931 	bl	81040ac <LL_ADC_IsEnabled>
 8104e4a:	4603      	mov	r3, r0
 8104e4c:	2b00      	cmp	r3, #0
 8104e4e:	bf0c      	ite	eq
 8104e50:	2301      	moveq	r3, #1
 8104e52:	2300      	movne	r3, #0
 8104e54:	b2db      	uxtb	r3, r3
 8104e56:	2b00      	cmp	r3, #0
 8104e58:	d07d      	beq.n	8104f56 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8104e5a:	683b      	ldr	r3, [r7, #0]
 8104e5c:	681b      	ldr	r3, [r3, #0]
 8104e5e:	4a50      	ldr	r2, [pc, #320]	@ (8104fa0 <HAL_ADC_ConfigChannel+0x6a0>)
 8104e60:	4293      	cmp	r3, r2
 8104e62:	d130      	bne.n	8104ec6 <HAL_ADC_ConfigChannel+0x5c6>
 8104e64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104e66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8104e6a:	2b00      	cmp	r3, #0
 8104e6c:	d12b      	bne.n	8104ec6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8104e6e:	687b      	ldr	r3, [r7, #4]
 8104e70:	681b      	ldr	r3, [r3, #0]
 8104e72:	4a4a      	ldr	r2, [pc, #296]	@ (8104f9c <HAL_ADC_ConfigChannel+0x69c>)
 8104e74:	4293      	cmp	r3, r2
 8104e76:	f040 8081 	bne.w	8104f7c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	681b      	ldr	r3, [r3, #0]
 8104e7e:	4a45      	ldr	r2, [pc, #276]	@ (8104f94 <HAL_ADC_ConfigChannel+0x694>)
 8104e80:	4293      	cmp	r3, r2
 8104e82:	d004      	beq.n	8104e8e <HAL_ADC_ConfigChannel+0x58e>
 8104e84:	687b      	ldr	r3, [r7, #4]
 8104e86:	681b      	ldr	r3, [r3, #0]
 8104e88:	4a43      	ldr	r2, [pc, #268]	@ (8104f98 <HAL_ADC_ConfigChannel+0x698>)
 8104e8a:	4293      	cmp	r3, r2
 8104e8c:	d101      	bne.n	8104e92 <HAL_ADC_ConfigChannel+0x592>
 8104e8e:	4a45      	ldr	r2, [pc, #276]	@ (8104fa4 <HAL_ADC_ConfigChannel+0x6a4>)
 8104e90:	e000      	b.n	8104e94 <HAL_ADC_ConfigChannel+0x594>
 8104e92:	4a3f      	ldr	r2, [pc, #252]	@ (8104f90 <HAL_ADC_ConfigChannel+0x690>)
 8104e94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104e96:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8104e9a:	4619      	mov	r1, r3
 8104e9c:	4610      	mov	r0, r2
 8104e9e:	f7fe ff70 	bl	8103d82 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8104ea2:	4b41      	ldr	r3, [pc, #260]	@ (8104fa8 <HAL_ADC_ConfigChannel+0x6a8>)
 8104ea4:	681b      	ldr	r3, [r3, #0]
 8104ea6:	099b      	lsrs	r3, r3, #6
 8104ea8:	4a40      	ldr	r2, [pc, #256]	@ (8104fac <HAL_ADC_ConfigChannel+0x6ac>)
 8104eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8104eae:	099b      	lsrs	r3, r3, #6
 8104eb0:	3301      	adds	r3, #1
 8104eb2:	005b      	lsls	r3, r3, #1
 8104eb4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8104eb6:	e002      	b.n	8104ebe <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8104eb8:	68bb      	ldr	r3, [r7, #8]
 8104eba:	3b01      	subs	r3, #1
 8104ebc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8104ebe:	68bb      	ldr	r3, [r7, #8]
 8104ec0:	2b00      	cmp	r3, #0
 8104ec2:	d1f9      	bne.n	8104eb8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8104ec4:	e05a      	b.n	8104f7c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8104ec6:	683b      	ldr	r3, [r7, #0]
 8104ec8:	681b      	ldr	r3, [r3, #0]
 8104eca:	4a39      	ldr	r2, [pc, #228]	@ (8104fb0 <HAL_ADC_ConfigChannel+0x6b0>)
 8104ecc:	4293      	cmp	r3, r2
 8104ece:	d11e      	bne.n	8104f0e <HAL_ADC_ConfigChannel+0x60e>
 8104ed0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104ed2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8104ed6:	2b00      	cmp	r3, #0
 8104ed8:	d119      	bne.n	8104f0e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8104eda:	687b      	ldr	r3, [r7, #4]
 8104edc:	681b      	ldr	r3, [r3, #0]
 8104ede:	4a2f      	ldr	r2, [pc, #188]	@ (8104f9c <HAL_ADC_ConfigChannel+0x69c>)
 8104ee0:	4293      	cmp	r3, r2
 8104ee2:	d14b      	bne.n	8104f7c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8104ee4:	687b      	ldr	r3, [r7, #4]
 8104ee6:	681b      	ldr	r3, [r3, #0]
 8104ee8:	4a2a      	ldr	r2, [pc, #168]	@ (8104f94 <HAL_ADC_ConfigChannel+0x694>)
 8104eea:	4293      	cmp	r3, r2
 8104eec:	d004      	beq.n	8104ef8 <HAL_ADC_ConfigChannel+0x5f8>
 8104eee:	687b      	ldr	r3, [r7, #4]
 8104ef0:	681b      	ldr	r3, [r3, #0]
 8104ef2:	4a29      	ldr	r2, [pc, #164]	@ (8104f98 <HAL_ADC_ConfigChannel+0x698>)
 8104ef4:	4293      	cmp	r3, r2
 8104ef6:	d101      	bne.n	8104efc <HAL_ADC_ConfigChannel+0x5fc>
 8104ef8:	4a2a      	ldr	r2, [pc, #168]	@ (8104fa4 <HAL_ADC_ConfigChannel+0x6a4>)
 8104efa:	e000      	b.n	8104efe <HAL_ADC_ConfigChannel+0x5fe>
 8104efc:	4a24      	ldr	r2, [pc, #144]	@ (8104f90 <HAL_ADC_ConfigChannel+0x690>)
 8104efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104f00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8104f04:	4619      	mov	r1, r3
 8104f06:	4610      	mov	r0, r2
 8104f08:	f7fe ff3b 	bl	8103d82 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8104f0c:	e036      	b.n	8104f7c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8104f0e:	683b      	ldr	r3, [r7, #0]
 8104f10:	681b      	ldr	r3, [r3, #0]
 8104f12:	4a28      	ldr	r2, [pc, #160]	@ (8104fb4 <HAL_ADC_ConfigChannel+0x6b4>)
 8104f14:	4293      	cmp	r3, r2
 8104f16:	d131      	bne.n	8104f7c <HAL_ADC_ConfigChannel+0x67c>
 8104f18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8104f1e:	2b00      	cmp	r3, #0
 8104f20:	d12c      	bne.n	8104f7c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8104f22:	687b      	ldr	r3, [r7, #4]
 8104f24:	681b      	ldr	r3, [r3, #0]
 8104f26:	4a1d      	ldr	r2, [pc, #116]	@ (8104f9c <HAL_ADC_ConfigChannel+0x69c>)
 8104f28:	4293      	cmp	r3, r2
 8104f2a:	d127      	bne.n	8104f7c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8104f2c:	687b      	ldr	r3, [r7, #4]
 8104f2e:	681b      	ldr	r3, [r3, #0]
 8104f30:	4a18      	ldr	r2, [pc, #96]	@ (8104f94 <HAL_ADC_ConfigChannel+0x694>)
 8104f32:	4293      	cmp	r3, r2
 8104f34:	d004      	beq.n	8104f40 <HAL_ADC_ConfigChannel+0x640>
 8104f36:	687b      	ldr	r3, [r7, #4]
 8104f38:	681b      	ldr	r3, [r3, #0]
 8104f3a:	4a17      	ldr	r2, [pc, #92]	@ (8104f98 <HAL_ADC_ConfigChannel+0x698>)
 8104f3c:	4293      	cmp	r3, r2
 8104f3e:	d101      	bne.n	8104f44 <HAL_ADC_ConfigChannel+0x644>
 8104f40:	4a18      	ldr	r2, [pc, #96]	@ (8104fa4 <HAL_ADC_ConfigChannel+0x6a4>)
 8104f42:	e000      	b.n	8104f46 <HAL_ADC_ConfigChannel+0x646>
 8104f44:	4a12      	ldr	r2, [pc, #72]	@ (8104f90 <HAL_ADC_ConfigChannel+0x690>)
 8104f46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104f48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8104f4c:	4619      	mov	r1, r3
 8104f4e:	4610      	mov	r0, r2
 8104f50:	f7fe ff17 	bl	8103d82 <LL_ADC_SetCommonPathInternalCh>
 8104f54:	e012      	b.n	8104f7c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104f56:	687b      	ldr	r3, [r7, #4]
 8104f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104f5a:	f043 0220 	orr.w	r2, r3, #32
 8104f5e:	687b      	ldr	r3, [r7, #4]
 8104f60:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8104f62:	2301      	movs	r3, #1
 8104f64:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8104f68:	e008      	b.n	8104f7c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104f6a:	687b      	ldr	r3, [r7, #4]
 8104f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104f6e:	f043 0220 	orr.w	r2, r3, #32
 8104f72:	687b      	ldr	r3, [r7, #4]
 8104f74:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8104f76:	2301      	movs	r3, #1
 8104f78:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8104f7c:	687b      	ldr	r3, [r7, #4]
 8104f7e:	2200      	movs	r2, #0
 8104f80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8104f84:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8104f88:	4618      	mov	r0, r3
 8104f8a:	3784      	adds	r7, #132	@ 0x84
 8104f8c:	46bd      	mov	sp, r7
 8104f8e:	bd90      	pop	{r4, r7, pc}
 8104f90:	58026300 	.word	0x58026300
 8104f94:	40022000 	.word	0x40022000
 8104f98:	40022100 	.word	0x40022100
 8104f9c:	58026000 	.word	0x58026000
 8104fa0:	cb840000 	.word	0xcb840000
 8104fa4:	40022300 	.word	0x40022300
 8104fa8:	10000000 	.word	0x10000000
 8104fac:	053e2d63 	.word	0x053e2d63
 8104fb0:	c7520000 	.word	0xc7520000
 8104fb4:	cfb80000 	.word	0xcfb80000

08104fb8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8104fb8:	b580      	push	{r7, lr}
 8104fba:	b088      	sub	sp, #32
 8104fbc:	af00      	add	r7, sp, #0
 8104fbe:	6078      	str	r0, [r7, #4]
 8104fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8104fc2:	2300      	movs	r3, #0
 8104fc4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8104fc6:	683b      	ldr	r3, [r7, #0]
 8104fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8104fca:	687b      	ldr	r3, [r7, #4]
 8104fcc:	681b      	ldr	r3, [r3, #0]
 8104fce:	4618      	mov	r0, r3
 8104fd0:	f7ff f8ba 	bl	8104148 <LL_ADC_REG_IsConversionOngoing>
 8104fd4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8104fd6:	687b      	ldr	r3, [r7, #4]
 8104fd8:	681b      	ldr	r3, [r3, #0]
 8104fda:	4618      	mov	r0, r3
 8104fdc:	f7ff f8db 	bl	8104196 <LL_ADC_INJ_IsConversionOngoing>
 8104fe0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8104fe2:	693b      	ldr	r3, [r7, #16]
 8104fe4:	2b00      	cmp	r3, #0
 8104fe6:	d103      	bne.n	8104ff0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8104fe8:	68fb      	ldr	r3, [r7, #12]
 8104fea:	2b00      	cmp	r3, #0
 8104fec:	f000 8098 	beq.w	8105120 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8104ff0:	687b      	ldr	r3, [r7, #4]
 8104ff2:	681b      	ldr	r3, [r3, #0]
 8104ff4:	68db      	ldr	r3, [r3, #12]
 8104ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104ffa:	2b00      	cmp	r3, #0
 8104ffc:	d02a      	beq.n	8105054 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8104ffe:	687b      	ldr	r3, [r7, #4]
 8105000:	7d5b      	ldrb	r3, [r3, #21]
 8105002:	2b01      	cmp	r3, #1
 8105004:	d126      	bne.n	8105054 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8105006:	687b      	ldr	r3, [r7, #4]
 8105008:	7d1b      	ldrb	r3, [r3, #20]
 810500a:	2b01      	cmp	r3, #1
 810500c:	d122      	bne.n	8105054 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 810500e:	2301      	movs	r3, #1
 8105010:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8105012:	e014      	b.n	810503e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8105014:	69fb      	ldr	r3, [r7, #28]
 8105016:	4a45      	ldr	r2, [pc, #276]	@ (810512c <ADC_ConversionStop+0x174>)
 8105018:	4293      	cmp	r3, r2
 810501a:	d90d      	bls.n	8105038 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810501c:	687b      	ldr	r3, [r7, #4]
 810501e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105020:	f043 0210 	orr.w	r2, r3, #16
 8105024:	687b      	ldr	r3, [r7, #4]
 8105026:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8105028:	687b      	ldr	r3, [r7, #4]
 810502a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810502c:	f043 0201 	orr.w	r2, r3, #1
 8105030:	687b      	ldr	r3, [r7, #4]
 8105032:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8105034:	2301      	movs	r3, #1
 8105036:	e074      	b.n	8105122 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8105038:	69fb      	ldr	r3, [r7, #28]
 810503a:	3301      	adds	r3, #1
 810503c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 810503e:	687b      	ldr	r3, [r7, #4]
 8105040:	681b      	ldr	r3, [r3, #0]
 8105042:	681b      	ldr	r3, [r3, #0]
 8105044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105048:	2b40      	cmp	r3, #64	@ 0x40
 810504a:	d1e3      	bne.n	8105014 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 810504c:	687b      	ldr	r3, [r7, #4]
 810504e:	681b      	ldr	r3, [r3, #0]
 8105050:	2240      	movs	r2, #64	@ 0x40
 8105052:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8105054:	69bb      	ldr	r3, [r7, #24]
 8105056:	2b02      	cmp	r3, #2
 8105058:	d014      	beq.n	8105084 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 810505a:	687b      	ldr	r3, [r7, #4]
 810505c:	681b      	ldr	r3, [r3, #0]
 810505e:	4618      	mov	r0, r3
 8105060:	f7ff f872 	bl	8104148 <LL_ADC_REG_IsConversionOngoing>
 8105064:	4603      	mov	r3, r0
 8105066:	2b00      	cmp	r3, #0
 8105068:	d00c      	beq.n	8105084 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 810506a:	687b      	ldr	r3, [r7, #4]
 810506c:	681b      	ldr	r3, [r3, #0]
 810506e:	4618      	mov	r0, r3
 8105070:	f7ff f82f 	bl	81040d2 <LL_ADC_IsDisableOngoing>
 8105074:	4603      	mov	r3, r0
 8105076:	2b00      	cmp	r3, #0
 8105078:	d104      	bne.n	8105084 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 810507a:	687b      	ldr	r3, [r7, #4]
 810507c:	681b      	ldr	r3, [r3, #0]
 810507e:	4618      	mov	r0, r3
 8105080:	f7ff f84e 	bl	8104120 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8105084:	69bb      	ldr	r3, [r7, #24]
 8105086:	2b01      	cmp	r3, #1
 8105088:	d014      	beq.n	81050b4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 810508a:	687b      	ldr	r3, [r7, #4]
 810508c:	681b      	ldr	r3, [r3, #0]
 810508e:	4618      	mov	r0, r3
 8105090:	f7ff f881 	bl	8104196 <LL_ADC_INJ_IsConversionOngoing>
 8105094:	4603      	mov	r3, r0
 8105096:	2b00      	cmp	r3, #0
 8105098:	d00c      	beq.n	81050b4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 810509a:	687b      	ldr	r3, [r7, #4]
 810509c:	681b      	ldr	r3, [r3, #0]
 810509e:	4618      	mov	r0, r3
 81050a0:	f7ff f817 	bl	81040d2 <LL_ADC_IsDisableOngoing>
 81050a4:	4603      	mov	r3, r0
 81050a6:	2b00      	cmp	r3, #0
 81050a8:	d104      	bne.n	81050b4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 81050aa:	687b      	ldr	r3, [r7, #4]
 81050ac:	681b      	ldr	r3, [r3, #0]
 81050ae:	4618      	mov	r0, r3
 81050b0:	f7ff f85d 	bl	810416e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 81050b4:	69bb      	ldr	r3, [r7, #24]
 81050b6:	2b02      	cmp	r3, #2
 81050b8:	d005      	beq.n	81050c6 <ADC_ConversionStop+0x10e>
 81050ba:	69bb      	ldr	r3, [r7, #24]
 81050bc:	2b03      	cmp	r3, #3
 81050be:	d105      	bne.n	81050cc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 81050c0:	230c      	movs	r3, #12
 81050c2:	617b      	str	r3, [r7, #20]
        break;
 81050c4:	e005      	b.n	81050d2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 81050c6:	2308      	movs	r3, #8
 81050c8:	617b      	str	r3, [r7, #20]
        break;
 81050ca:	e002      	b.n	81050d2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 81050cc:	2304      	movs	r3, #4
 81050ce:	617b      	str	r3, [r7, #20]
        break;
 81050d0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 81050d2:	f7fe fe07 	bl	8103ce4 <HAL_GetTick>
 81050d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 81050d8:	e01b      	b.n	8105112 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 81050da:	f7fe fe03 	bl	8103ce4 <HAL_GetTick>
 81050de:	4602      	mov	r2, r0
 81050e0:	68bb      	ldr	r3, [r7, #8]
 81050e2:	1ad3      	subs	r3, r2, r3
 81050e4:	2b05      	cmp	r3, #5
 81050e6:	d914      	bls.n	8105112 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 81050e8:	687b      	ldr	r3, [r7, #4]
 81050ea:	681b      	ldr	r3, [r3, #0]
 81050ec:	689a      	ldr	r2, [r3, #8]
 81050ee:	697b      	ldr	r3, [r7, #20]
 81050f0:	4013      	ands	r3, r2
 81050f2:	2b00      	cmp	r3, #0
 81050f4:	d00d      	beq.n	8105112 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81050f6:	687b      	ldr	r3, [r7, #4]
 81050f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81050fa:	f043 0210 	orr.w	r2, r3, #16
 81050fe:	687b      	ldr	r3, [r7, #4]
 8105100:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8105102:	687b      	ldr	r3, [r7, #4]
 8105104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105106:	f043 0201 	orr.w	r2, r3, #1
 810510a:	687b      	ldr	r3, [r7, #4]
 810510c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 810510e:	2301      	movs	r3, #1
 8105110:	e007      	b.n	8105122 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8105112:	687b      	ldr	r3, [r7, #4]
 8105114:	681b      	ldr	r3, [r3, #0]
 8105116:	689a      	ldr	r2, [r3, #8]
 8105118:	697b      	ldr	r3, [r7, #20]
 810511a:	4013      	ands	r3, r2
 810511c:	2b00      	cmp	r3, #0
 810511e:	d1dc      	bne.n	81050da <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8105120:	2300      	movs	r3, #0
}
 8105122:	4618      	mov	r0, r3
 8105124:	3720      	adds	r7, #32
 8105126:	46bd      	mov	sp, r7
 8105128:	bd80      	pop	{r7, pc}
 810512a:	bf00      	nop
 810512c:	000cdbff 	.word	0x000cdbff

08105130 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8105130:	b580      	push	{r7, lr}
 8105132:	b084      	sub	sp, #16
 8105134:	af00      	add	r7, sp, #0
 8105136:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8105138:	687b      	ldr	r3, [r7, #4]
 810513a:	681b      	ldr	r3, [r3, #0]
 810513c:	4618      	mov	r0, r3
 810513e:	f7fe ffb5 	bl	81040ac <LL_ADC_IsEnabled>
 8105142:	4603      	mov	r3, r0
 8105144:	2b00      	cmp	r3, #0
 8105146:	d16e      	bne.n	8105226 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8105148:	687b      	ldr	r3, [r7, #4]
 810514a:	681b      	ldr	r3, [r3, #0]
 810514c:	689a      	ldr	r2, [r3, #8]
 810514e:	4b38      	ldr	r3, [pc, #224]	@ (8105230 <ADC_Enable+0x100>)
 8105150:	4013      	ands	r3, r2
 8105152:	2b00      	cmp	r3, #0
 8105154:	d00d      	beq.n	8105172 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8105156:	687b      	ldr	r3, [r7, #4]
 8105158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810515a:	f043 0210 	orr.w	r2, r3, #16
 810515e:	687b      	ldr	r3, [r7, #4]
 8105160:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8105162:	687b      	ldr	r3, [r7, #4]
 8105164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105166:	f043 0201 	orr.w	r2, r3, #1
 810516a:	687b      	ldr	r3, [r7, #4]
 810516c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 810516e:	2301      	movs	r3, #1
 8105170:	e05a      	b.n	8105228 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8105172:	687b      	ldr	r3, [r7, #4]
 8105174:	681b      	ldr	r3, [r3, #0]
 8105176:	4618      	mov	r0, r3
 8105178:	f7fe ff70 	bl	810405c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 810517c:	f7fe fdb2 	bl	8103ce4 <HAL_GetTick>
 8105180:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8105182:	687b      	ldr	r3, [r7, #4]
 8105184:	681b      	ldr	r3, [r3, #0]
 8105186:	4a2b      	ldr	r2, [pc, #172]	@ (8105234 <ADC_Enable+0x104>)
 8105188:	4293      	cmp	r3, r2
 810518a:	d004      	beq.n	8105196 <ADC_Enable+0x66>
 810518c:	687b      	ldr	r3, [r7, #4]
 810518e:	681b      	ldr	r3, [r3, #0]
 8105190:	4a29      	ldr	r2, [pc, #164]	@ (8105238 <ADC_Enable+0x108>)
 8105192:	4293      	cmp	r3, r2
 8105194:	d101      	bne.n	810519a <ADC_Enable+0x6a>
 8105196:	4b29      	ldr	r3, [pc, #164]	@ (810523c <ADC_Enable+0x10c>)
 8105198:	e000      	b.n	810519c <ADC_Enable+0x6c>
 810519a:	4b29      	ldr	r3, [pc, #164]	@ (8105240 <ADC_Enable+0x110>)
 810519c:	4618      	mov	r0, r3
 810519e:	f7fe fef3 	bl	8103f88 <LL_ADC_GetMultimode>
 81051a2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81051a4:	687b      	ldr	r3, [r7, #4]
 81051a6:	681b      	ldr	r3, [r3, #0]
 81051a8:	4a23      	ldr	r2, [pc, #140]	@ (8105238 <ADC_Enable+0x108>)
 81051aa:	4293      	cmp	r3, r2
 81051ac:	d002      	beq.n	81051b4 <ADC_Enable+0x84>
 81051ae:	687b      	ldr	r3, [r7, #4]
 81051b0:	681b      	ldr	r3, [r3, #0]
 81051b2:	e000      	b.n	81051b6 <ADC_Enable+0x86>
 81051b4:	4b1f      	ldr	r3, [pc, #124]	@ (8105234 <ADC_Enable+0x104>)
 81051b6:	687a      	ldr	r2, [r7, #4]
 81051b8:	6812      	ldr	r2, [r2, #0]
 81051ba:	4293      	cmp	r3, r2
 81051bc:	d02c      	beq.n	8105218 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81051be:	68bb      	ldr	r3, [r7, #8]
 81051c0:	2b00      	cmp	r3, #0
 81051c2:	d130      	bne.n	8105226 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 81051c4:	e028      	b.n	8105218 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81051c6:	687b      	ldr	r3, [r7, #4]
 81051c8:	681b      	ldr	r3, [r3, #0]
 81051ca:	4618      	mov	r0, r3
 81051cc:	f7fe ff6e 	bl	81040ac <LL_ADC_IsEnabled>
 81051d0:	4603      	mov	r3, r0
 81051d2:	2b00      	cmp	r3, #0
 81051d4:	d104      	bne.n	81051e0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 81051d6:	687b      	ldr	r3, [r7, #4]
 81051d8:	681b      	ldr	r3, [r3, #0]
 81051da:	4618      	mov	r0, r3
 81051dc:	f7fe ff3e 	bl	810405c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 81051e0:	f7fe fd80 	bl	8103ce4 <HAL_GetTick>
 81051e4:	4602      	mov	r2, r0
 81051e6:	68fb      	ldr	r3, [r7, #12]
 81051e8:	1ad3      	subs	r3, r2, r3
 81051ea:	2b02      	cmp	r3, #2
 81051ec:	d914      	bls.n	8105218 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 81051ee:	687b      	ldr	r3, [r7, #4]
 81051f0:	681b      	ldr	r3, [r3, #0]
 81051f2:	681b      	ldr	r3, [r3, #0]
 81051f4:	f003 0301 	and.w	r3, r3, #1
 81051f8:	2b01      	cmp	r3, #1
 81051fa:	d00d      	beq.n	8105218 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81051fc:	687b      	ldr	r3, [r7, #4]
 81051fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105200:	f043 0210 	orr.w	r2, r3, #16
 8105204:	687b      	ldr	r3, [r7, #4]
 8105206:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8105208:	687b      	ldr	r3, [r7, #4]
 810520a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810520c:	f043 0201 	orr.w	r2, r3, #1
 8105210:	687b      	ldr	r3, [r7, #4]
 8105212:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8105214:	2301      	movs	r3, #1
 8105216:	e007      	b.n	8105228 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8105218:	687b      	ldr	r3, [r7, #4]
 810521a:	681b      	ldr	r3, [r3, #0]
 810521c:	681b      	ldr	r3, [r3, #0]
 810521e:	f003 0301 	and.w	r3, r3, #1
 8105222:	2b01      	cmp	r3, #1
 8105224:	d1cf      	bne.n	81051c6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8105226:	2300      	movs	r3, #0
}
 8105228:	4618      	mov	r0, r3
 810522a:	3710      	adds	r7, #16
 810522c:	46bd      	mov	sp, r7
 810522e:	bd80      	pop	{r7, pc}
 8105230:	8000003f 	.word	0x8000003f
 8105234:	40022000 	.word	0x40022000
 8105238:	40022100 	.word	0x40022100
 810523c:	40022300 	.word	0x40022300
 8105240:	58026300 	.word	0x58026300

08105244 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8105244:	b580      	push	{r7, lr}
 8105246:	b084      	sub	sp, #16
 8105248:	af00      	add	r7, sp, #0
 810524a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 810524c:	687b      	ldr	r3, [r7, #4]
 810524e:	681b      	ldr	r3, [r3, #0]
 8105250:	4618      	mov	r0, r3
 8105252:	f7fe ff3e 	bl	81040d2 <LL_ADC_IsDisableOngoing>
 8105256:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8105258:	687b      	ldr	r3, [r7, #4]
 810525a:	681b      	ldr	r3, [r3, #0]
 810525c:	4618      	mov	r0, r3
 810525e:	f7fe ff25 	bl	81040ac <LL_ADC_IsEnabled>
 8105262:	4603      	mov	r3, r0
 8105264:	2b00      	cmp	r3, #0
 8105266:	d047      	beq.n	81052f8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8105268:	68fb      	ldr	r3, [r7, #12]
 810526a:	2b00      	cmp	r3, #0
 810526c:	d144      	bne.n	81052f8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 810526e:	687b      	ldr	r3, [r7, #4]
 8105270:	681b      	ldr	r3, [r3, #0]
 8105272:	689b      	ldr	r3, [r3, #8]
 8105274:	f003 030d 	and.w	r3, r3, #13
 8105278:	2b01      	cmp	r3, #1
 810527a:	d10c      	bne.n	8105296 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 810527c:	687b      	ldr	r3, [r7, #4]
 810527e:	681b      	ldr	r3, [r3, #0]
 8105280:	4618      	mov	r0, r3
 8105282:	f7fe feff 	bl	8104084 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8105286:	687b      	ldr	r3, [r7, #4]
 8105288:	681b      	ldr	r3, [r3, #0]
 810528a:	2203      	movs	r2, #3
 810528c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 810528e:	f7fe fd29 	bl	8103ce4 <HAL_GetTick>
 8105292:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8105294:	e029      	b.n	81052ea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8105296:	687b      	ldr	r3, [r7, #4]
 8105298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810529a:	f043 0210 	orr.w	r2, r3, #16
 810529e:	687b      	ldr	r3, [r7, #4]
 81052a0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81052a2:	687b      	ldr	r3, [r7, #4]
 81052a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81052a6:	f043 0201 	orr.w	r2, r3, #1
 81052aa:	687b      	ldr	r3, [r7, #4]
 81052ac:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 81052ae:	2301      	movs	r3, #1
 81052b0:	e023      	b.n	81052fa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 81052b2:	f7fe fd17 	bl	8103ce4 <HAL_GetTick>
 81052b6:	4602      	mov	r2, r0
 81052b8:	68bb      	ldr	r3, [r7, #8]
 81052ba:	1ad3      	subs	r3, r2, r3
 81052bc:	2b02      	cmp	r3, #2
 81052be:	d914      	bls.n	81052ea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 81052c0:	687b      	ldr	r3, [r7, #4]
 81052c2:	681b      	ldr	r3, [r3, #0]
 81052c4:	689b      	ldr	r3, [r3, #8]
 81052c6:	f003 0301 	and.w	r3, r3, #1
 81052ca:	2b00      	cmp	r3, #0
 81052cc:	d00d      	beq.n	81052ea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81052ce:	687b      	ldr	r3, [r7, #4]
 81052d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81052d2:	f043 0210 	orr.w	r2, r3, #16
 81052d6:	687b      	ldr	r3, [r7, #4]
 81052d8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81052da:	687b      	ldr	r3, [r7, #4]
 81052dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81052de:	f043 0201 	orr.w	r2, r3, #1
 81052e2:	687b      	ldr	r3, [r7, #4]
 81052e4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 81052e6:	2301      	movs	r3, #1
 81052e8:	e007      	b.n	81052fa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 81052ea:	687b      	ldr	r3, [r7, #4]
 81052ec:	681b      	ldr	r3, [r3, #0]
 81052ee:	689b      	ldr	r3, [r3, #8]
 81052f0:	f003 0301 	and.w	r3, r3, #1
 81052f4:	2b00      	cmp	r3, #0
 81052f6:	d1dc      	bne.n	81052b2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 81052f8:	2300      	movs	r3, #0
}
 81052fa:	4618      	mov	r0, r3
 81052fc:	3710      	adds	r7, #16
 81052fe:	46bd      	mov	sp, r7
 8105300:	bd80      	pop	{r7, pc}
	...

08105304 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8105304:	b580      	push	{r7, lr}
 8105306:	b084      	sub	sp, #16
 8105308:	af00      	add	r7, sp, #0
 810530a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 810530c:	687b      	ldr	r3, [r7, #4]
 810530e:	681b      	ldr	r3, [r3, #0]
 8105310:	4a7a      	ldr	r2, [pc, #488]	@ (81054fc <ADC_ConfigureBoostMode+0x1f8>)
 8105312:	4293      	cmp	r3, r2
 8105314:	d004      	beq.n	8105320 <ADC_ConfigureBoostMode+0x1c>
 8105316:	687b      	ldr	r3, [r7, #4]
 8105318:	681b      	ldr	r3, [r3, #0]
 810531a:	4a79      	ldr	r2, [pc, #484]	@ (8105500 <ADC_ConfigureBoostMode+0x1fc>)
 810531c:	4293      	cmp	r3, r2
 810531e:	d109      	bne.n	8105334 <ADC_ConfigureBoostMode+0x30>
 8105320:	4b78      	ldr	r3, [pc, #480]	@ (8105504 <ADC_ConfigureBoostMode+0x200>)
 8105322:	689b      	ldr	r3, [r3, #8]
 8105324:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8105328:	2b00      	cmp	r3, #0
 810532a:	bf14      	ite	ne
 810532c:	2301      	movne	r3, #1
 810532e:	2300      	moveq	r3, #0
 8105330:	b2db      	uxtb	r3, r3
 8105332:	e008      	b.n	8105346 <ADC_ConfigureBoostMode+0x42>
 8105334:	4b74      	ldr	r3, [pc, #464]	@ (8105508 <ADC_ConfigureBoostMode+0x204>)
 8105336:	689b      	ldr	r3, [r3, #8]
 8105338:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810533c:	2b00      	cmp	r3, #0
 810533e:	bf14      	ite	ne
 8105340:	2301      	movne	r3, #1
 8105342:	2300      	moveq	r3, #0
 8105344:	b2db      	uxtb	r3, r3
 8105346:	2b00      	cmp	r3, #0
 8105348:	d01c      	beq.n	8105384 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 810534a:	f001 fd0d 	bl	8106d68 <HAL_RCC_GetHCLKFreq>
 810534e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8105350:	687b      	ldr	r3, [r7, #4]
 8105352:	685b      	ldr	r3, [r3, #4]
 8105354:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8105358:	d010      	beq.n	810537c <ADC_ConfigureBoostMode+0x78>
 810535a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810535e:	d873      	bhi.n	8105448 <ADC_ConfigureBoostMode+0x144>
 8105360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105364:	d002      	beq.n	810536c <ADC_ConfigureBoostMode+0x68>
 8105366:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810536a:	d16d      	bne.n	8105448 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 810536c:	687b      	ldr	r3, [r7, #4]
 810536e:	685b      	ldr	r3, [r3, #4]
 8105370:	0c1b      	lsrs	r3, r3, #16
 8105372:	68fa      	ldr	r2, [r7, #12]
 8105374:	fbb2 f3f3 	udiv	r3, r2, r3
 8105378:	60fb      	str	r3, [r7, #12]
        break;
 810537a:	e068      	b.n	810544e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 810537c:	68fb      	ldr	r3, [r7, #12]
 810537e:	089b      	lsrs	r3, r3, #2
 8105380:	60fb      	str	r3, [r7, #12]
        break;
 8105382:	e064      	b.n	810544e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8105384:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8105388:	f04f 0100 	mov.w	r1, #0
 810538c:	f002 ff54 	bl	8108238 <HAL_RCCEx_GetPeriphCLKFreq>
 8105390:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8105392:	687b      	ldr	r3, [r7, #4]
 8105394:	685b      	ldr	r3, [r3, #4]
 8105396:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 810539a:	d051      	beq.n	8105440 <ADC_ConfigureBoostMode+0x13c>
 810539c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 81053a0:	d854      	bhi.n	810544c <ADC_ConfigureBoostMode+0x148>
 81053a2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 81053a6:	d047      	beq.n	8105438 <ADC_ConfigureBoostMode+0x134>
 81053a8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 81053ac:	d84e      	bhi.n	810544c <ADC_ConfigureBoostMode+0x148>
 81053ae:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 81053b2:	d03d      	beq.n	8105430 <ADC_ConfigureBoostMode+0x12c>
 81053b4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 81053b8:	d848      	bhi.n	810544c <ADC_ConfigureBoostMode+0x148>
 81053ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81053be:	d033      	beq.n	8105428 <ADC_ConfigureBoostMode+0x124>
 81053c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81053c4:	d842      	bhi.n	810544c <ADC_ConfigureBoostMode+0x148>
 81053c6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 81053ca:	d029      	beq.n	8105420 <ADC_ConfigureBoostMode+0x11c>
 81053cc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 81053d0:	d83c      	bhi.n	810544c <ADC_ConfigureBoostMode+0x148>
 81053d2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 81053d6:	d01a      	beq.n	810540e <ADC_ConfigureBoostMode+0x10a>
 81053d8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 81053dc:	d836      	bhi.n	810544c <ADC_ConfigureBoostMode+0x148>
 81053de:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 81053e2:	d014      	beq.n	810540e <ADC_ConfigureBoostMode+0x10a>
 81053e4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 81053e8:	d830      	bhi.n	810544c <ADC_ConfigureBoostMode+0x148>
 81053ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81053ee:	d00e      	beq.n	810540e <ADC_ConfigureBoostMode+0x10a>
 81053f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81053f4:	d82a      	bhi.n	810544c <ADC_ConfigureBoostMode+0x148>
 81053f6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 81053fa:	d008      	beq.n	810540e <ADC_ConfigureBoostMode+0x10a>
 81053fc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8105400:	d824      	bhi.n	810544c <ADC_ConfigureBoostMode+0x148>
 8105402:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8105406:	d002      	beq.n	810540e <ADC_ConfigureBoostMode+0x10a>
 8105408:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 810540c:	d11e      	bne.n	810544c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 810540e:	687b      	ldr	r3, [r7, #4]
 8105410:	685b      	ldr	r3, [r3, #4]
 8105412:	0c9b      	lsrs	r3, r3, #18
 8105414:	005b      	lsls	r3, r3, #1
 8105416:	68fa      	ldr	r2, [r7, #12]
 8105418:	fbb2 f3f3 	udiv	r3, r2, r3
 810541c:	60fb      	str	r3, [r7, #12]
        break;
 810541e:	e016      	b.n	810544e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8105420:	68fb      	ldr	r3, [r7, #12]
 8105422:	091b      	lsrs	r3, r3, #4
 8105424:	60fb      	str	r3, [r7, #12]
        break;
 8105426:	e012      	b.n	810544e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8105428:	68fb      	ldr	r3, [r7, #12]
 810542a:	095b      	lsrs	r3, r3, #5
 810542c:	60fb      	str	r3, [r7, #12]
        break;
 810542e:	e00e      	b.n	810544e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8105430:	68fb      	ldr	r3, [r7, #12]
 8105432:	099b      	lsrs	r3, r3, #6
 8105434:	60fb      	str	r3, [r7, #12]
        break;
 8105436:	e00a      	b.n	810544e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8105438:	68fb      	ldr	r3, [r7, #12]
 810543a:	09db      	lsrs	r3, r3, #7
 810543c:	60fb      	str	r3, [r7, #12]
        break;
 810543e:	e006      	b.n	810544e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8105440:	68fb      	ldr	r3, [r7, #12]
 8105442:	0a1b      	lsrs	r3, r3, #8
 8105444:	60fb      	str	r3, [r7, #12]
        break;
 8105446:	e002      	b.n	810544e <ADC_ConfigureBoostMode+0x14a>
        break;
 8105448:	bf00      	nop
 810544a:	e000      	b.n	810544e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 810544c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 810544e:	f7fe fc79 	bl	8103d44 <HAL_GetREVID>
 8105452:	4603      	mov	r3, r0
 8105454:	f241 0203 	movw	r2, #4099	@ 0x1003
 8105458:	4293      	cmp	r3, r2
 810545a:	d815      	bhi.n	8105488 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 810545c:	68fb      	ldr	r3, [r7, #12]
 810545e:	4a2b      	ldr	r2, [pc, #172]	@ (810550c <ADC_ConfigureBoostMode+0x208>)
 8105460:	4293      	cmp	r3, r2
 8105462:	d908      	bls.n	8105476 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8105464:	687b      	ldr	r3, [r7, #4]
 8105466:	681b      	ldr	r3, [r3, #0]
 8105468:	689a      	ldr	r2, [r3, #8]
 810546a:	687b      	ldr	r3, [r7, #4]
 810546c:	681b      	ldr	r3, [r3, #0]
 810546e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8105472:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8105474:	e03e      	b.n	81054f4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8105476:	687b      	ldr	r3, [r7, #4]
 8105478:	681b      	ldr	r3, [r3, #0]
 810547a:	689a      	ldr	r2, [r3, #8]
 810547c:	687b      	ldr	r3, [r7, #4]
 810547e:	681b      	ldr	r3, [r3, #0]
 8105480:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8105484:	609a      	str	r2, [r3, #8]
}
 8105486:	e035      	b.n	81054f4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8105488:	68fb      	ldr	r3, [r7, #12]
 810548a:	085b      	lsrs	r3, r3, #1
 810548c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 810548e:	68fb      	ldr	r3, [r7, #12]
 8105490:	4a1f      	ldr	r2, [pc, #124]	@ (8105510 <ADC_ConfigureBoostMode+0x20c>)
 8105492:	4293      	cmp	r3, r2
 8105494:	d808      	bhi.n	81054a8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8105496:	687b      	ldr	r3, [r7, #4]
 8105498:	681b      	ldr	r3, [r3, #0]
 810549a:	689a      	ldr	r2, [r3, #8]
 810549c:	687b      	ldr	r3, [r7, #4]
 810549e:	681b      	ldr	r3, [r3, #0]
 81054a0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 81054a4:	609a      	str	r2, [r3, #8]
}
 81054a6:	e025      	b.n	81054f4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 81054a8:	68fb      	ldr	r3, [r7, #12]
 81054aa:	4a1a      	ldr	r2, [pc, #104]	@ (8105514 <ADC_ConfigureBoostMode+0x210>)
 81054ac:	4293      	cmp	r3, r2
 81054ae:	d80a      	bhi.n	81054c6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 81054b0:	687b      	ldr	r3, [r7, #4]
 81054b2:	681b      	ldr	r3, [r3, #0]
 81054b4:	689b      	ldr	r3, [r3, #8]
 81054b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 81054ba:	687b      	ldr	r3, [r7, #4]
 81054bc:	681b      	ldr	r3, [r3, #0]
 81054be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 81054c2:	609a      	str	r2, [r3, #8]
}
 81054c4:	e016      	b.n	81054f4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 81054c6:	68fb      	ldr	r3, [r7, #12]
 81054c8:	4a13      	ldr	r2, [pc, #76]	@ (8105518 <ADC_ConfigureBoostMode+0x214>)
 81054ca:	4293      	cmp	r3, r2
 81054cc:	d80a      	bhi.n	81054e4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 81054ce:	687b      	ldr	r3, [r7, #4]
 81054d0:	681b      	ldr	r3, [r3, #0]
 81054d2:	689b      	ldr	r3, [r3, #8]
 81054d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 81054d8:	687b      	ldr	r3, [r7, #4]
 81054da:	681b      	ldr	r3, [r3, #0]
 81054dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 81054e0:	609a      	str	r2, [r3, #8]
}
 81054e2:	e007      	b.n	81054f4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 81054e4:	687b      	ldr	r3, [r7, #4]
 81054e6:	681b      	ldr	r3, [r3, #0]
 81054e8:	689a      	ldr	r2, [r3, #8]
 81054ea:	687b      	ldr	r3, [r7, #4]
 81054ec:	681b      	ldr	r3, [r3, #0]
 81054ee:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 81054f2:	609a      	str	r2, [r3, #8]
}
 81054f4:	bf00      	nop
 81054f6:	3710      	adds	r7, #16
 81054f8:	46bd      	mov	sp, r7
 81054fa:	bd80      	pop	{r7, pc}
 81054fc:	40022000 	.word	0x40022000
 8105500:	40022100 	.word	0x40022100
 8105504:	40022300 	.word	0x40022300
 8105508:	58026300 	.word	0x58026300
 810550c:	01312d00 	.word	0x01312d00
 8105510:	005f5e10 	.word	0x005f5e10
 8105514:	00bebc20 	.word	0x00bebc20
 8105518:	017d7840 	.word	0x017d7840

0810551c <LL_ADC_IsEnabled>:
{
 810551c:	b480      	push	{r7}
 810551e:	b083      	sub	sp, #12
 8105520:	af00      	add	r7, sp, #0
 8105522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8105524:	687b      	ldr	r3, [r7, #4]
 8105526:	689b      	ldr	r3, [r3, #8]
 8105528:	f003 0301 	and.w	r3, r3, #1
 810552c:	2b01      	cmp	r3, #1
 810552e:	d101      	bne.n	8105534 <LL_ADC_IsEnabled+0x18>
 8105530:	2301      	movs	r3, #1
 8105532:	e000      	b.n	8105536 <LL_ADC_IsEnabled+0x1a>
 8105534:	2300      	movs	r3, #0
}
 8105536:	4618      	mov	r0, r3
 8105538:	370c      	adds	r7, #12
 810553a:	46bd      	mov	sp, r7
 810553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105540:	4770      	bx	lr

08105542 <LL_ADC_REG_IsConversionOngoing>:
{
 8105542:	b480      	push	{r7}
 8105544:	b083      	sub	sp, #12
 8105546:	af00      	add	r7, sp, #0
 8105548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810554a:	687b      	ldr	r3, [r7, #4]
 810554c:	689b      	ldr	r3, [r3, #8]
 810554e:	f003 0304 	and.w	r3, r3, #4
 8105552:	2b04      	cmp	r3, #4
 8105554:	d101      	bne.n	810555a <LL_ADC_REG_IsConversionOngoing+0x18>
 8105556:	2301      	movs	r3, #1
 8105558:	e000      	b.n	810555c <LL_ADC_REG_IsConversionOngoing+0x1a>
 810555a:	2300      	movs	r3, #0
}
 810555c:	4618      	mov	r0, r3
 810555e:	370c      	adds	r7, #12
 8105560:	46bd      	mov	sp, r7
 8105562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105566:	4770      	bx	lr

08105568 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8105568:	b590      	push	{r4, r7, lr}
 810556a:	b09f      	sub	sp, #124	@ 0x7c
 810556c:	af00      	add	r7, sp, #0
 810556e:	6078      	str	r0, [r7, #4]
 8105570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8105572:	2300      	movs	r3, #0
 8105574:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8105578:	687b      	ldr	r3, [r7, #4]
 810557a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 810557e:	2b01      	cmp	r3, #1
 8105580:	d101      	bne.n	8105586 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8105582:	2302      	movs	r3, #2
 8105584:	e0c4      	b.n	8105710 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8105586:	687b      	ldr	r3, [r7, #4]
 8105588:	2201      	movs	r2, #1
 810558a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 810558e:	2300      	movs	r3, #0
 8105590:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8105592:	2300      	movs	r3, #0
 8105594:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8105596:	687b      	ldr	r3, [r7, #4]
 8105598:	681b      	ldr	r3, [r3, #0]
 810559a:	4a5f      	ldr	r2, [pc, #380]	@ (8105718 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810559c:	4293      	cmp	r3, r2
 810559e:	d102      	bne.n	81055a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 81055a0:	4b5e      	ldr	r3, [pc, #376]	@ (810571c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81055a2:	60bb      	str	r3, [r7, #8]
 81055a4:	e001      	b.n	81055aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 81055a6:	2300      	movs	r3, #0
 81055a8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 81055aa:	68bb      	ldr	r3, [r7, #8]
 81055ac:	2b00      	cmp	r3, #0
 81055ae:	d10b      	bne.n	81055c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81055b0:	687b      	ldr	r3, [r7, #4]
 81055b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81055b4:	f043 0220 	orr.w	r2, r3, #32
 81055b8:	687b      	ldr	r3, [r7, #4]
 81055ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 81055bc:	687b      	ldr	r3, [r7, #4]
 81055be:	2200      	movs	r2, #0
 81055c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 81055c4:	2301      	movs	r3, #1
 81055c6:	e0a3      	b.n	8105710 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 81055c8:	68bb      	ldr	r3, [r7, #8]
 81055ca:	4618      	mov	r0, r3
 81055cc:	f7ff ffb9 	bl	8105542 <LL_ADC_REG_IsConversionOngoing>
 81055d0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81055d2:	687b      	ldr	r3, [r7, #4]
 81055d4:	681b      	ldr	r3, [r3, #0]
 81055d6:	4618      	mov	r0, r3
 81055d8:	f7ff ffb3 	bl	8105542 <LL_ADC_REG_IsConversionOngoing>
 81055dc:	4603      	mov	r3, r0
 81055de:	2b00      	cmp	r3, #0
 81055e0:	f040 8085 	bne.w	81056ee <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 81055e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 81055e6:	2b00      	cmp	r3, #0
 81055e8:	f040 8081 	bne.w	81056ee <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 81055ec:	687b      	ldr	r3, [r7, #4]
 81055ee:	681b      	ldr	r3, [r3, #0]
 81055f0:	4a49      	ldr	r2, [pc, #292]	@ (8105718 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81055f2:	4293      	cmp	r3, r2
 81055f4:	d004      	beq.n	8105600 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 81055f6:	687b      	ldr	r3, [r7, #4]
 81055f8:	681b      	ldr	r3, [r3, #0]
 81055fa:	4a48      	ldr	r2, [pc, #288]	@ (810571c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81055fc:	4293      	cmp	r3, r2
 81055fe:	d101      	bne.n	8105604 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8105600:	4b47      	ldr	r3, [pc, #284]	@ (8105720 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8105602:	e000      	b.n	8105606 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8105604:	4b47      	ldr	r3, [pc, #284]	@ (8105724 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8105606:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8105608:	683b      	ldr	r3, [r7, #0]
 810560a:	681b      	ldr	r3, [r3, #0]
 810560c:	2b00      	cmp	r3, #0
 810560e:	d03b      	beq.n	8105688 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8105610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105612:	689b      	ldr	r3, [r3, #8]
 8105614:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8105618:	683b      	ldr	r3, [r7, #0]
 810561a:	685b      	ldr	r3, [r3, #4]
 810561c:	431a      	orrs	r2, r3
 810561e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105620:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8105622:	687b      	ldr	r3, [r7, #4]
 8105624:	681b      	ldr	r3, [r3, #0]
 8105626:	4a3c      	ldr	r2, [pc, #240]	@ (8105718 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8105628:	4293      	cmp	r3, r2
 810562a:	d004      	beq.n	8105636 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 810562c:	687b      	ldr	r3, [r7, #4]
 810562e:	681b      	ldr	r3, [r3, #0]
 8105630:	4a3a      	ldr	r2, [pc, #232]	@ (810571c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105632:	4293      	cmp	r3, r2
 8105634:	d10e      	bne.n	8105654 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8105636:	4838      	ldr	r0, [pc, #224]	@ (8105718 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8105638:	f7ff ff70 	bl	810551c <LL_ADC_IsEnabled>
 810563c:	4604      	mov	r4, r0
 810563e:	4837      	ldr	r0, [pc, #220]	@ (810571c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105640:	f7ff ff6c 	bl	810551c <LL_ADC_IsEnabled>
 8105644:	4603      	mov	r3, r0
 8105646:	4323      	orrs	r3, r4
 8105648:	2b00      	cmp	r3, #0
 810564a:	bf0c      	ite	eq
 810564c:	2301      	moveq	r3, #1
 810564e:	2300      	movne	r3, #0
 8105650:	b2db      	uxtb	r3, r3
 8105652:	e008      	b.n	8105666 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8105654:	4834      	ldr	r0, [pc, #208]	@ (8105728 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8105656:	f7ff ff61 	bl	810551c <LL_ADC_IsEnabled>
 810565a:	4603      	mov	r3, r0
 810565c:	2b00      	cmp	r3, #0
 810565e:	bf0c      	ite	eq
 8105660:	2301      	moveq	r3, #1
 8105662:	2300      	movne	r3, #0
 8105664:	b2db      	uxtb	r3, r3
 8105666:	2b00      	cmp	r3, #0
 8105668:	d04b      	beq.n	8105702 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 810566a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810566c:	689b      	ldr	r3, [r3, #8]
 810566e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8105672:	f023 030f 	bic.w	r3, r3, #15
 8105676:	683a      	ldr	r2, [r7, #0]
 8105678:	6811      	ldr	r1, [r2, #0]
 810567a:	683a      	ldr	r2, [r7, #0]
 810567c:	6892      	ldr	r2, [r2, #8]
 810567e:	430a      	orrs	r2, r1
 8105680:	431a      	orrs	r2, r3
 8105682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105684:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8105686:	e03c      	b.n	8105702 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8105688:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810568a:	689b      	ldr	r3, [r3, #8]
 810568c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8105690:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105692:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8105694:	687b      	ldr	r3, [r7, #4]
 8105696:	681b      	ldr	r3, [r3, #0]
 8105698:	4a1f      	ldr	r2, [pc, #124]	@ (8105718 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810569a:	4293      	cmp	r3, r2
 810569c:	d004      	beq.n	81056a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 810569e:	687b      	ldr	r3, [r7, #4]
 81056a0:	681b      	ldr	r3, [r3, #0]
 81056a2:	4a1e      	ldr	r2, [pc, #120]	@ (810571c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81056a4:	4293      	cmp	r3, r2
 81056a6:	d10e      	bne.n	81056c6 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 81056a8:	481b      	ldr	r0, [pc, #108]	@ (8105718 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81056aa:	f7ff ff37 	bl	810551c <LL_ADC_IsEnabled>
 81056ae:	4604      	mov	r4, r0
 81056b0:	481a      	ldr	r0, [pc, #104]	@ (810571c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81056b2:	f7ff ff33 	bl	810551c <LL_ADC_IsEnabled>
 81056b6:	4603      	mov	r3, r0
 81056b8:	4323      	orrs	r3, r4
 81056ba:	2b00      	cmp	r3, #0
 81056bc:	bf0c      	ite	eq
 81056be:	2301      	moveq	r3, #1
 81056c0:	2300      	movne	r3, #0
 81056c2:	b2db      	uxtb	r3, r3
 81056c4:	e008      	b.n	81056d8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81056c6:	4818      	ldr	r0, [pc, #96]	@ (8105728 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81056c8:	f7ff ff28 	bl	810551c <LL_ADC_IsEnabled>
 81056cc:	4603      	mov	r3, r0
 81056ce:	2b00      	cmp	r3, #0
 81056d0:	bf0c      	ite	eq
 81056d2:	2301      	moveq	r3, #1
 81056d4:	2300      	movne	r3, #0
 81056d6:	b2db      	uxtb	r3, r3
 81056d8:	2b00      	cmp	r3, #0
 81056da:	d012      	beq.n	8105702 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 81056dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81056de:	689b      	ldr	r3, [r3, #8]
 81056e0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 81056e4:	f023 030f 	bic.w	r3, r3, #15
 81056e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 81056ea:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81056ec:	e009      	b.n	8105702 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81056ee:	687b      	ldr	r3, [r7, #4]
 81056f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81056f2:	f043 0220 	orr.w	r2, r3, #32
 81056f6:	687b      	ldr	r3, [r7, #4]
 81056f8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 81056fa:	2301      	movs	r3, #1
 81056fc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8105700:	e000      	b.n	8105704 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8105702:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8105704:	687b      	ldr	r3, [r7, #4]
 8105706:	2200      	movs	r2, #0
 8105708:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 810570c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8105710:	4618      	mov	r0, r3
 8105712:	377c      	adds	r7, #124	@ 0x7c
 8105714:	46bd      	mov	sp, r7
 8105716:	bd90      	pop	{r4, r7, pc}
 8105718:	40022000 	.word	0x40022000
 810571c:	40022100 	.word	0x40022100
 8105720:	40022300 	.word	0x40022300
 8105724:	58026300 	.word	0x58026300
 8105728:	58026000 	.word	0x58026000

0810572c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810572c:	b480      	push	{r7}
 810572e:	b085      	sub	sp, #20
 8105730:	af00      	add	r7, sp, #0
 8105732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8105734:	687b      	ldr	r3, [r7, #4]
 8105736:	f003 0307 	and.w	r3, r3, #7
 810573a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810573c:	4b0c      	ldr	r3, [pc, #48]	@ (8105770 <__NVIC_SetPriorityGrouping+0x44>)
 810573e:	68db      	ldr	r3, [r3, #12]
 8105740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8105742:	68ba      	ldr	r2, [r7, #8]
 8105744:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8105748:	4013      	ands	r3, r2
 810574a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810574c:	68fb      	ldr	r3, [r7, #12]
 810574e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8105750:	68bb      	ldr	r3, [r7, #8]
 8105752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8105754:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8105758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810575c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810575e:	4a04      	ldr	r2, [pc, #16]	@ (8105770 <__NVIC_SetPriorityGrouping+0x44>)
 8105760:	68bb      	ldr	r3, [r7, #8]
 8105762:	60d3      	str	r3, [r2, #12]
}
 8105764:	bf00      	nop
 8105766:	3714      	adds	r7, #20
 8105768:	46bd      	mov	sp, r7
 810576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810576e:	4770      	bx	lr
 8105770:	e000ed00 	.word	0xe000ed00

08105774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8105774:	b480      	push	{r7}
 8105776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8105778:	4b04      	ldr	r3, [pc, #16]	@ (810578c <__NVIC_GetPriorityGrouping+0x18>)
 810577a:	68db      	ldr	r3, [r3, #12]
 810577c:	0a1b      	lsrs	r3, r3, #8
 810577e:	f003 0307 	and.w	r3, r3, #7
}
 8105782:	4618      	mov	r0, r3
 8105784:	46bd      	mov	sp, r7
 8105786:	f85d 7b04 	ldr.w	r7, [sp], #4
 810578a:	4770      	bx	lr
 810578c:	e000ed00 	.word	0xe000ed00

08105790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8105790:	b480      	push	{r7}
 8105792:	b083      	sub	sp, #12
 8105794:	af00      	add	r7, sp, #0
 8105796:	4603      	mov	r3, r0
 8105798:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810579a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810579e:	2b00      	cmp	r3, #0
 81057a0:	db0b      	blt.n	81057ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81057a2:	88fb      	ldrh	r3, [r7, #6]
 81057a4:	f003 021f 	and.w	r2, r3, #31
 81057a8:	4907      	ldr	r1, [pc, #28]	@ (81057c8 <__NVIC_EnableIRQ+0x38>)
 81057aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81057ae:	095b      	lsrs	r3, r3, #5
 81057b0:	2001      	movs	r0, #1
 81057b2:	fa00 f202 	lsl.w	r2, r0, r2
 81057b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81057ba:	bf00      	nop
 81057bc:	370c      	adds	r7, #12
 81057be:	46bd      	mov	sp, r7
 81057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057c4:	4770      	bx	lr
 81057c6:	bf00      	nop
 81057c8:	e000e100 	.word	0xe000e100

081057cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81057cc:	b480      	push	{r7}
 81057ce:	b083      	sub	sp, #12
 81057d0:	af00      	add	r7, sp, #0
 81057d2:	4603      	mov	r3, r0
 81057d4:	6039      	str	r1, [r7, #0]
 81057d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81057d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81057dc:	2b00      	cmp	r3, #0
 81057de:	db0a      	blt.n	81057f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81057e0:	683b      	ldr	r3, [r7, #0]
 81057e2:	b2da      	uxtb	r2, r3
 81057e4:	490c      	ldr	r1, [pc, #48]	@ (8105818 <__NVIC_SetPriority+0x4c>)
 81057e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81057ea:	0112      	lsls	r2, r2, #4
 81057ec:	b2d2      	uxtb	r2, r2
 81057ee:	440b      	add	r3, r1
 81057f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81057f4:	e00a      	b.n	810580c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81057f6:	683b      	ldr	r3, [r7, #0]
 81057f8:	b2da      	uxtb	r2, r3
 81057fa:	4908      	ldr	r1, [pc, #32]	@ (810581c <__NVIC_SetPriority+0x50>)
 81057fc:	88fb      	ldrh	r3, [r7, #6]
 81057fe:	f003 030f 	and.w	r3, r3, #15
 8105802:	3b04      	subs	r3, #4
 8105804:	0112      	lsls	r2, r2, #4
 8105806:	b2d2      	uxtb	r2, r2
 8105808:	440b      	add	r3, r1
 810580a:	761a      	strb	r2, [r3, #24]
}
 810580c:	bf00      	nop
 810580e:	370c      	adds	r7, #12
 8105810:	46bd      	mov	sp, r7
 8105812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105816:	4770      	bx	lr
 8105818:	e000e100 	.word	0xe000e100
 810581c:	e000ed00 	.word	0xe000ed00

08105820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8105820:	b480      	push	{r7}
 8105822:	b089      	sub	sp, #36	@ 0x24
 8105824:	af00      	add	r7, sp, #0
 8105826:	60f8      	str	r0, [r7, #12]
 8105828:	60b9      	str	r1, [r7, #8]
 810582a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810582c:	68fb      	ldr	r3, [r7, #12]
 810582e:	f003 0307 	and.w	r3, r3, #7
 8105832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8105834:	69fb      	ldr	r3, [r7, #28]
 8105836:	f1c3 0307 	rsb	r3, r3, #7
 810583a:	2b04      	cmp	r3, #4
 810583c:	bf28      	it	cs
 810583e:	2304      	movcs	r3, #4
 8105840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8105842:	69fb      	ldr	r3, [r7, #28]
 8105844:	3304      	adds	r3, #4
 8105846:	2b06      	cmp	r3, #6
 8105848:	d902      	bls.n	8105850 <NVIC_EncodePriority+0x30>
 810584a:	69fb      	ldr	r3, [r7, #28]
 810584c:	3b03      	subs	r3, #3
 810584e:	e000      	b.n	8105852 <NVIC_EncodePriority+0x32>
 8105850:	2300      	movs	r3, #0
 8105852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8105854:	f04f 32ff 	mov.w	r2, #4294967295
 8105858:	69bb      	ldr	r3, [r7, #24]
 810585a:	fa02 f303 	lsl.w	r3, r2, r3
 810585e:	43da      	mvns	r2, r3
 8105860:	68bb      	ldr	r3, [r7, #8]
 8105862:	401a      	ands	r2, r3
 8105864:	697b      	ldr	r3, [r7, #20]
 8105866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8105868:	f04f 31ff 	mov.w	r1, #4294967295
 810586c:	697b      	ldr	r3, [r7, #20]
 810586e:	fa01 f303 	lsl.w	r3, r1, r3
 8105872:	43d9      	mvns	r1, r3
 8105874:	687b      	ldr	r3, [r7, #4]
 8105876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8105878:	4313      	orrs	r3, r2
         );
}
 810587a:	4618      	mov	r0, r3
 810587c:	3724      	adds	r7, #36	@ 0x24
 810587e:	46bd      	mov	sp, r7
 8105880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105884:	4770      	bx	lr
	...

08105888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8105888:	b580      	push	{r7, lr}
 810588a:	b082      	sub	sp, #8
 810588c:	af00      	add	r7, sp, #0
 810588e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8105890:	687b      	ldr	r3, [r7, #4]
 8105892:	3b01      	subs	r3, #1
 8105894:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8105898:	d301      	bcc.n	810589e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810589a:	2301      	movs	r3, #1
 810589c:	e00f      	b.n	81058be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810589e:	4a0a      	ldr	r2, [pc, #40]	@ (81058c8 <SysTick_Config+0x40>)
 81058a0:	687b      	ldr	r3, [r7, #4]
 81058a2:	3b01      	subs	r3, #1
 81058a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81058a6:	210f      	movs	r1, #15
 81058a8:	f04f 30ff 	mov.w	r0, #4294967295
 81058ac:	f7ff ff8e 	bl	81057cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81058b0:	4b05      	ldr	r3, [pc, #20]	@ (81058c8 <SysTick_Config+0x40>)
 81058b2:	2200      	movs	r2, #0
 81058b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81058b6:	4b04      	ldr	r3, [pc, #16]	@ (81058c8 <SysTick_Config+0x40>)
 81058b8:	2207      	movs	r2, #7
 81058ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81058bc:	2300      	movs	r3, #0
}
 81058be:	4618      	mov	r0, r3
 81058c0:	3708      	adds	r7, #8
 81058c2:	46bd      	mov	sp, r7
 81058c4:	bd80      	pop	{r7, pc}
 81058c6:	bf00      	nop
 81058c8:	e000e010 	.word	0xe000e010

081058cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81058cc:	b580      	push	{r7, lr}
 81058ce:	b082      	sub	sp, #8
 81058d0:	af00      	add	r7, sp, #0
 81058d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81058d4:	6878      	ldr	r0, [r7, #4]
 81058d6:	f7ff ff29 	bl	810572c <__NVIC_SetPriorityGrouping>
}
 81058da:	bf00      	nop
 81058dc:	3708      	adds	r7, #8
 81058de:	46bd      	mov	sp, r7
 81058e0:	bd80      	pop	{r7, pc}

081058e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81058e2:	b580      	push	{r7, lr}
 81058e4:	b086      	sub	sp, #24
 81058e6:	af00      	add	r7, sp, #0
 81058e8:	4603      	mov	r3, r0
 81058ea:	60b9      	str	r1, [r7, #8]
 81058ec:	607a      	str	r2, [r7, #4]
 81058ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81058f0:	f7ff ff40 	bl	8105774 <__NVIC_GetPriorityGrouping>
 81058f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81058f6:	687a      	ldr	r2, [r7, #4]
 81058f8:	68b9      	ldr	r1, [r7, #8]
 81058fa:	6978      	ldr	r0, [r7, #20]
 81058fc:	f7ff ff90 	bl	8105820 <NVIC_EncodePriority>
 8105900:	4602      	mov	r2, r0
 8105902:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8105906:	4611      	mov	r1, r2
 8105908:	4618      	mov	r0, r3
 810590a:	f7ff ff5f 	bl	81057cc <__NVIC_SetPriority>
}
 810590e:	bf00      	nop
 8105910:	3718      	adds	r7, #24
 8105912:	46bd      	mov	sp, r7
 8105914:	bd80      	pop	{r7, pc}

08105916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8105916:	b580      	push	{r7, lr}
 8105918:	b082      	sub	sp, #8
 810591a:	af00      	add	r7, sp, #0
 810591c:	4603      	mov	r3, r0
 810591e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8105920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105924:	4618      	mov	r0, r3
 8105926:	f7ff ff33 	bl	8105790 <__NVIC_EnableIRQ>
}
 810592a:	bf00      	nop
 810592c:	3708      	adds	r7, #8
 810592e:	46bd      	mov	sp, r7
 8105930:	bd80      	pop	{r7, pc}

08105932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8105932:	b580      	push	{r7, lr}
 8105934:	b082      	sub	sp, #8
 8105936:	af00      	add	r7, sp, #0
 8105938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810593a:	6878      	ldr	r0, [r7, #4]
 810593c:	f7ff ffa4 	bl	8105888 <SysTick_Config>
 8105940:	4603      	mov	r3, r0
}
 8105942:	4618      	mov	r0, r3
 8105944:	3708      	adds	r7, #8
 8105946:	46bd      	mov	sp, r7
 8105948:	bd80      	pop	{r7, pc}
	...

0810594c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810594c:	b480      	push	{r7}
 810594e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8105950:	4b07      	ldr	r3, [pc, #28]	@ (8105970 <HAL_GetCurrentCPUID+0x24>)
 8105952:	681b      	ldr	r3, [r3, #0]
 8105954:	091b      	lsrs	r3, r3, #4
 8105956:	f003 030f 	and.w	r3, r3, #15
 810595a:	2b07      	cmp	r3, #7
 810595c:	d101      	bne.n	8105962 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810595e:	2303      	movs	r3, #3
 8105960:	e000      	b.n	8105964 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8105962:	2301      	movs	r3, #1
  }
}
 8105964:	4618      	mov	r0, r3
 8105966:	46bd      	mov	sp, r7
 8105968:	f85d 7b04 	ldr.w	r7, [sp], #4
 810596c:	4770      	bx	lr
 810596e:	bf00      	nop
 8105970:	e000ed00 	.word	0xe000ed00

08105974 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8105974:	b480      	push	{r7}
 8105976:	b089      	sub	sp, #36	@ 0x24
 8105978:	af00      	add	r7, sp, #0
 810597a:	6078      	str	r0, [r7, #4]
 810597c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810597e:	2300      	movs	r3, #0
 8105980:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8105982:	4b89      	ldr	r3, [pc, #548]	@ (8105ba8 <HAL_GPIO_Init+0x234>)
 8105984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8105986:	e194      	b.n	8105cb2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8105988:	683b      	ldr	r3, [r7, #0]
 810598a:	681a      	ldr	r2, [r3, #0]
 810598c:	2101      	movs	r1, #1
 810598e:	69fb      	ldr	r3, [r7, #28]
 8105990:	fa01 f303 	lsl.w	r3, r1, r3
 8105994:	4013      	ands	r3, r2
 8105996:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8105998:	693b      	ldr	r3, [r7, #16]
 810599a:	2b00      	cmp	r3, #0
 810599c:	f000 8186 	beq.w	8105cac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81059a0:	683b      	ldr	r3, [r7, #0]
 81059a2:	685b      	ldr	r3, [r3, #4]
 81059a4:	f003 0303 	and.w	r3, r3, #3
 81059a8:	2b01      	cmp	r3, #1
 81059aa:	d005      	beq.n	81059b8 <HAL_GPIO_Init+0x44>
 81059ac:	683b      	ldr	r3, [r7, #0]
 81059ae:	685b      	ldr	r3, [r3, #4]
 81059b0:	f003 0303 	and.w	r3, r3, #3
 81059b4:	2b02      	cmp	r3, #2
 81059b6:	d130      	bne.n	8105a1a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81059b8:	687b      	ldr	r3, [r7, #4]
 81059ba:	689b      	ldr	r3, [r3, #8]
 81059bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81059be:	69fb      	ldr	r3, [r7, #28]
 81059c0:	005b      	lsls	r3, r3, #1
 81059c2:	2203      	movs	r2, #3
 81059c4:	fa02 f303 	lsl.w	r3, r2, r3
 81059c8:	43db      	mvns	r3, r3
 81059ca:	69ba      	ldr	r2, [r7, #24]
 81059cc:	4013      	ands	r3, r2
 81059ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81059d0:	683b      	ldr	r3, [r7, #0]
 81059d2:	68da      	ldr	r2, [r3, #12]
 81059d4:	69fb      	ldr	r3, [r7, #28]
 81059d6:	005b      	lsls	r3, r3, #1
 81059d8:	fa02 f303 	lsl.w	r3, r2, r3
 81059dc:	69ba      	ldr	r2, [r7, #24]
 81059de:	4313      	orrs	r3, r2
 81059e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81059e2:	687b      	ldr	r3, [r7, #4]
 81059e4:	69ba      	ldr	r2, [r7, #24]
 81059e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81059e8:	687b      	ldr	r3, [r7, #4]
 81059ea:	685b      	ldr	r3, [r3, #4]
 81059ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81059ee:	2201      	movs	r2, #1
 81059f0:	69fb      	ldr	r3, [r7, #28]
 81059f2:	fa02 f303 	lsl.w	r3, r2, r3
 81059f6:	43db      	mvns	r3, r3
 81059f8:	69ba      	ldr	r2, [r7, #24]
 81059fa:	4013      	ands	r3, r2
 81059fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81059fe:	683b      	ldr	r3, [r7, #0]
 8105a00:	685b      	ldr	r3, [r3, #4]
 8105a02:	091b      	lsrs	r3, r3, #4
 8105a04:	f003 0201 	and.w	r2, r3, #1
 8105a08:	69fb      	ldr	r3, [r7, #28]
 8105a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8105a0e:	69ba      	ldr	r2, [r7, #24]
 8105a10:	4313      	orrs	r3, r2
 8105a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8105a14:	687b      	ldr	r3, [r7, #4]
 8105a16:	69ba      	ldr	r2, [r7, #24]
 8105a18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8105a1a:	683b      	ldr	r3, [r7, #0]
 8105a1c:	685b      	ldr	r3, [r3, #4]
 8105a1e:	f003 0303 	and.w	r3, r3, #3
 8105a22:	2b03      	cmp	r3, #3
 8105a24:	d017      	beq.n	8105a56 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8105a26:	687b      	ldr	r3, [r7, #4]
 8105a28:	68db      	ldr	r3, [r3, #12]
 8105a2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8105a2c:	69fb      	ldr	r3, [r7, #28]
 8105a2e:	005b      	lsls	r3, r3, #1
 8105a30:	2203      	movs	r2, #3
 8105a32:	fa02 f303 	lsl.w	r3, r2, r3
 8105a36:	43db      	mvns	r3, r3
 8105a38:	69ba      	ldr	r2, [r7, #24]
 8105a3a:	4013      	ands	r3, r2
 8105a3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8105a3e:	683b      	ldr	r3, [r7, #0]
 8105a40:	689a      	ldr	r2, [r3, #8]
 8105a42:	69fb      	ldr	r3, [r7, #28]
 8105a44:	005b      	lsls	r3, r3, #1
 8105a46:	fa02 f303 	lsl.w	r3, r2, r3
 8105a4a:	69ba      	ldr	r2, [r7, #24]
 8105a4c:	4313      	orrs	r3, r2
 8105a4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8105a50:	687b      	ldr	r3, [r7, #4]
 8105a52:	69ba      	ldr	r2, [r7, #24]
 8105a54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8105a56:	683b      	ldr	r3, [r7, #0]
 8105a58:	685b      	ldr	r3, [r3, #4]
 8105a5a:	f003 0303 	and.w	r3, r3, #3
 8105a5e:	2b02      	cmp	r3, #2
 8105a60:	d123      	bne.n	8105aaa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8105a62:	69fb      	ldr	r3, [r7, #28]
 8105a64:	08da      	lsrs	r2, r3, #3
 8105a66:	687b      	ldr	r3, [r7, #4]
 8105a68:	3208      	adds	r2, #8
 8105a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8105a70:	69fb      	ldr	r3, [r7, #28]
 8105a72:	f003 0307 	and.w	r3, r3, #7
 8105a76:	009b      	lsls	r3, r3, #2
 8105a78:	220f      	movs	r2, #15
 8105a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8105a7e:	43db      	mvns	r3, r3
 8105a80:	69ba      	ldr	r2, [r7, #24]
 8105a82:	4013      	ands	r3, r2
 8105a84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8105a86:	683b      	ldr	r3, [r7, #0]
 8105a88:	691a      	ldr	r2, [r3, #16]
 8105a8a:	69fb      	ldr	r3, [r7, #28]
 8105a8c:	f003 0307 	and.w	r3, r3, #7
 8105a90:	009b      	lsls	r3, r3, #2
 8105a92:	fa02 f303 	lsl.w	r3, r2, r3
 8105a96:	69ba      	ldr	r2, [r7, #24]
 8105a98:	4313      	orrs	r3, r2
 8105a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8105a9c:	69fb      	ldr	r3, [r7, #28]
 8105a9e:	08da      	lsrs	r2, r3, #3
 8105aa0:	687b      	ldr	r3, [r7, #4]
 8105aa2:	3208      	adds	r2, #8
 8105aa4:	69b9      	ldr	r1, [r7, #24]
 8105aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8105aaa:	687b      	ldr	r3, [r7, #4]
 8105aac:	681b      	ldr	r3, [r3, #0]
 8105aae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8105ab0:	69fb      	ldr	r3, [r7, #28]
 8105ab2:	005b      	lsls	r3, r3, #1
 8105ab4:	2203      	movs	r2, #3
 8105ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8105aba:	43db      	mvns	r3, r3
 8105abc:	69ba      	ldr	r2, [r7, #24]
 8105abe:	4013      	ands	r3, r2
 8105ac0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8105ac2:	683b      	ldr	r3, [r7, #0]
 8105ac4:	685b      	ldr	r3, [r3, #4]
 8105ac6:	f003 0203 	and.w	r2, r3, #3
 8105aca:	69fb      	ldr	r3, [r7, #28]
 8105acc:	005b      	lsls	r3, r3, #1
 8105ace:	fa02 f303 	lsl.w	r3, r2, r3
 8105ad2:	69ba      	ldr	r2, [r7, #24]
 8105ad4:	4313      	orrs	r3, r2
 8105ad6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8105ad8:	687b      	ldr	r3, [r7, #4]
 8105ada:	69ba      	ldr	r2, [r7, #24]
 8105adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8105ade:	683b      	ldr	r3, [r7, #0]
 8105ae0:	685b      	ldr	r3, [r3, #4]
 8105ae2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8105ae6:	2b00      	cmp	r3, #0
 8105ae8:	f000 80e0 	beq.w	8105cac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8105aec:	4b2f      	ldr	r3, [pc, #188]	@ (8105bac <HAL_GPIO_Init+0x238>)
 8105aee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105af2:	4a2e      	ldr	r2, [pc, #184]	@ (8105bac <HAL_GPIO_Init+0x238>)
 8105af4:	f043 0302 	orr.w	r3, r3, #2
 8105af8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8105afc:	4b2b      	ldr	r3, [pc, #172]	@ (8105bac <HAL_GPIO_Init+0x238>)
 8105afe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105b02:	f003 0302 	and.w	r3, r3, #2
 8105b06:	60fb      	str	r3, [r7, #12]
 8105b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8105b0a:	4a29      	ldr	r2, [pc, #164]	@ (8105bb0 <HAL_GPIO_Init+0x23c>)
 8105b0c:	69fb      	ldr	r3, [r7, #28]
 8105b0e:	089b      	lsrs	r3, r3, #2
 8105b10:	3302      	adds	r3, #2
 8105b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8105b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8105b18:	69fb      	ldr	r3, [r7, #28]
 8105b1a:	f003 0303 	and.w	r3, r3, #3
 8105b1e:	009b      	lsls	r3, r3, #2
 8105b20:	220f      	movs	r2, #15
 8105b22:	fa02 f303 	lsl.w	r3, r2, r3
 8105b26:	43db      	mvns	r3, r3
 8105b28:	69ba      	ldr	r2, [r7, #24]
 8105b2a:	4013      	ands	r3, r2
 8105b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8105b2e:	687b      	ldr	r3, [r7, #4]
 8105b30:	4a20      	ldr	r2, [pc, #128]	@ (8105bb4 <HAL_GPIO_Init+0x240>)
 8105b32:	4293      	cmp	r3, r2
 8105b34:	d052      	beq.n	8105bdc <HAL_GPIO_Init+0x268>
 8105b36:	687b      	ldr	r3, [r7, #4]
 8105b38:	4a1f      	ldr	r2, [pc, #124]	@ (8105bb8 <HAL_GPIO_Init+0x244>)
 8105b3a:	4293      	cmp	r3, r2
 8105b3c:	d031      	beq.n	8105ba2 <HAL_GPIO_Init+0x22e>
 8105b3e:	687b      	ldr	r3, [r7, #4]
 8105b40:	4a1e      	ldr	r2, [pc, #120]	@ (8105bbc <HAL_GPIO_Init+0x248>)
 8105b42:	4293      	cmp	r3, r2
 8105b44:	d02b      	beq.n	8105b9e <HAL_GPIO_Init+0x22a>
 8105b46:	687b      	ldr	r3, [r7, #4]
 8105b48:	4a1d      	ldr	r2, [pc, #116]	@ (8105bc0 <HAL_GPIO_Init+0x24c>)
 8105b4a:	4293      	cmp	r3, r2
 8105b4c:	d025      	beq.n	8105b9a <HAL_GPIO_Init+0x226>
 8105b4e:	687b      	ldr	r3, [r7, #4]
 8105b50:	4a1c      	ldr	r2, [pc, #112]	@ (8105bc4 <HAL_GPIO_Init+0x250>)
 8105b52:	4293      	cmp	r3, r2
 8105b54:	d01f      	beq.n	8105b96 <HAL_GPIO_Init+0x222>
 8105b56:	687b      	ldr	r3, [r7, #4]
 8105b58:	4a1b      	ldr	r2, [pc, #108]	@ (8105bc8 <HAL_GPIO_Init+0x254>)
 8105b5a:	4293      	cmp	r3, r2
 8105b5c:	d019      	beq.n	8105b92 <HAL_GPIO_Init+0x21e>
 8105b5e:	687b      	ldr	r3, [r7, #4]
 8105b60:	4a1a      	ldr	r2, [pc, #104]	@ (8105bcc <HAL_GPIO_Init+0x258>)
 8105b62:	4293      	cmp	r3, r2
 8105b64:	d013      	beq.n	8105b8e <HAL_GPIO_Init+0x21a>
 8105b66:	687b      	ldr	r3, [r7, #4]
 8105b68:	4a19      	ldr	r2, [pc, #100]	@ (8105bd0 <HAL_GPIO_Init+0x25c>)
 8105b6a:	4293      	cmp	r3, r2
 8105b6c:	d00d      	beq.n	8105b8a <HAL_GPIO_Init+0x216>
 8105b6e:	687b      	ldr	r3, [r7, #4]
 8105b70:	4a18      	ldr	r2, [pc, #96]	@ (8105bd4 <HAL_GPIO_Init+0x260>)
 8105b72:	4293      	cmp	r3, r2
 8105b74:	d007      	beq.n	8105b86 <HAL_GPIO_Init+0x212>
 8105b76:	687b      	ldr	r3, [r7, #4]
 8105b78:	4a17      	ldr	r2, [pc, #92]	@ (8105bd8 <HAL_GPIO_Init+0x264>)
 8105b7a:	4293      	cmp	r3, r2
 8105b7c:	d101      	bne.n	8105b82 <HAL_GPIO_Init+0x20e>
 8105b7e:	2309      	movs	r3, #9
 8105b80:	e02d      	b.n	8105bde <HAL_GPIO_Init+0x26a>
 8105b82:	230a      	movs	r3, #10
 8105b84:	e02b      	b.n	8105bde <HAL_GPIO_Init+0x26a>
 8105b86:	2308      	movs	r3, #8
 8105b88:	e029      	b.n	8105bde <HAL_GPIO_Init+0x26a>
 8105b8a:	2307      	movs	r3, #7
 8105b8c:	e027      	b.n	8105bde <HAL_GPIO_Init+0x26a>
 8105b8e:	2306      	movs	r3, #6
 8105b90:	e025      	b.n	8105bde <HAL_GPIO_Init+0x26a>
 8105b92:	2305      	movs	r3, #5
 8105b94:	e023      	b.n	8105bde <HAL_GPIO_Init+0x26a>
 8105b96:	2304      	movs	r3, #4
 8105b98:	e021      	b.n	8105bde <HAL_GPIO_Init+0x26a>
 8105b9a:	2303      	movs	r3, #3
 8105b9c:	e01f      	b.n	8105bde <HAL_GPIO_Init+0x26a>
 8105b9e:	2302      	movs	r3, #2
 8105ba0:	e01d      	b.n	8105bde <HAL_GPIO_Init+0x26a>
 8105ba2:	2301      	movs	r3, #1
 8105ba4:	e01b      	b.n	8105bde <HAL_GPIO_Init+0x26a>
 8105ba6:	bf00      	nop
 8105ba8:	580000c0 	.word	0x580000c0
 8105bac:	58024400 	.word	0x58024400
 8105bb0:	58000400 	.word	0x58000400
 8105bb4:	58020000 	.word	0x58020000
 8105bb8:	58020400 	.word	0x58020400
 8105bbc:	58020800 	.word	0x58020800
 8105bc0:	58020c00 	.word	0x58020c00
 8105bc4:	58021000 	.word	0x58021000
 8105bc8:	58021400 	.word	0x58021400
 8105bcc:	58021800 	.word	0x58021800
 8105bd0:	58021c00 	.word	0x58021c00
 8105bd4:	58022000 	.word	0x58022000
 8105bd8:	58022400 	.word	0x58022400
 8105bdc:	2300      	movs	r3, #0
 8105bde:	69fa      	ldr	r2, [r7, #28]
 8105be0:	f002 0203 	and.w	r2, r2, #3
 8105be4:	0092      	lsls	r2, r2, #2
 8105be6:	4093      	lsls	r3, r2
 8105be8:	69ba      	ldr	r2, [r7, #24]
 8105bea:	4313      	orrs	r3, r2
 8105bec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8105bee:	4938      	ldr	r1, [pc, #224]	@ (8105cd0 <HAL_GPIO_Init+0x35c>)
 8105bf0:	69fb      	ldr	r3, [r7, #28]
 8105bf2:	089b      	lsrs	r3, r3, #2
 8105bf4:	3302      	adds	r3, #2
 8105bf6:	69ba      	ldr	r2, [r7, #24]
 8105bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8105bfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105c00:	681b      	ldr	r3, [r3, #0]
 8105c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105c04:	693b      	ldr	r3, [r7, #16]
 8105c06:	43db      	mvns	r3, r3
 8105c08:	69ba      	ldr	r2, [r7, #24]
 8105c0a:	4013      	ands	r3, r2
 8105c0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8105c0e:	683b      	ldr	r3, [r7, #0]
 8105c10:	685b      	ldr	r3, [r3, #4]
 8105c12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8105c16:	2b00      	cmp	r3, #0
 8105c18:	d003      	beq.n	8105c22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8105c1a:	69ba      	ldr	r2, [r7, #24]
 8105c1c:	693b      	ldr	r3, [r7, #16]
 8105c1e:	4313      	orrs	r3, r2
 8105c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8105c22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8105c26:	69bb      	ldr	r3, [r7, #24]
 8105c28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8105c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105c2e:	685b      	ldr	r3, [r3, #4]
 8105c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105c32:	693b      	ldr	r3, [r7, #16]
 8105c34:	43db      	mvns	r3, r3
 8105c36:	69ba      	ldr	r2, [r7, #24]
 8105c38:	4013      	ands	r3, r2
 8105c3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8105c3c:	683b      	ldr	r3, [r7, #0]
 8105c3e:	685b      	ldr	r3, [r3, #4]
 8105c40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8105c44:	2b00      	cmp	r3, #0
 8105c46:	d003      	beq.n	8105c50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8105c48:	69ba      	ldr	r2, [r7, #24]
 8105c4a:	693b      	ldr	r3, [r7, #16]
 8105c4c:	4313      	orrs	r3, r2
 8105c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8105c50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8105c54:	69bb      	ldr	r3, [r7, #24]
 8105c56:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8105c58:	697b      	ldr	r3, [r7, #20]
 8105c5a:	685b      	ldr	r3, [r3, #4]
 8105c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105c5e:	693b      	ldr	r3, [r7, #16]
 8105c60:	43db      	mvns	r3, r3
 8105c62:	69ba      	ldr	r2, [r7, #24]
 8105c64:	4013      	ands	r3, r2
 8105c66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8105c68:	683b      	ldr	r3, [r7, #0]
 8105c6a:	685b      	ldr	r3, [r3, #4]
 8105c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105c70:	2b00      	cmp	r3, #0
 8105c72:	d003      	beq.n	8105c7c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8105c74:	69ba      	ldr	r2, [r7, #24]
 8105c76:	693b      	ldr	r3, [r7, #16]
 8105c78:	4313      	orrs	r3, r2
 8105c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8105c7c:	697b      	ldr	r3, [r7, #20]
 8105c7e:	69ba      	ldr	r2, [r7, #24]
 8105c80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8105c82:	697b      	ldr	r3, [r7, #20]
 8105c84:	681b      	ldr	r3, [r3, #0]
 8105c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105c88:	693b      	ldr	r3, [r7, #16]
 8105c8a:	43db      	mvns	r3, r3
 8105c8c:	69ba      	ldr	r2, [r7, #24]
 8105c8e:	4013      	ands	r3, r2
 8105c90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8105c92:	683b      	ldr	r3, [r7, #0]
 8105c94:	685b      	ldr	r3, [r3, #4]
 8105c96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8105c9a:	2b00      	cmp	r3, #0
 8105c9c:	d003      	beq.n	8105ca6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8105c9e:	69ba      	ldr	r2, [r7, #24]
 8105ca0:	693b      	ldr	r3, [r7, #16]
 8105ca2:	4313      	orrs	r3, r2
 8105ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8105ca6:	697b      	ldr	r3, [r7, #20]
 8105ca8:	69ba      	ldr	r2, [r7, #24]
 8105caa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8105cac:	69fb      	ldr	r3, [r7, #28]
 8105cae:	3301      	adds	r3, #1
 8105cb0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8105cb2:	683b      	ldr	r3, [r7, #0]
 8105cb4:	681a      	ldr	r2, [r3, #0]
 8105cb6:	69fb      	ldr	r3, [r7, #28]
 8105cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8105cbc:	2b00      	cmp	r3, #0
 8105cbe:	f47f ae63 	bne.w	8105988 <HAL_GPIO_Init+0x14>
  }
}
 8105cc2:	bf00      	nop
 8105cc4:	bf00      	nop
 8105cc6:	3724      	adds	r7, #36	@ 0x24
 8105cc8:	46bd      	mov	sp, r7
 8105cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105cce:	4770      	bx	lr
 8105cd0:	58000400 	.word	0x58000400

08105cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8105cd4:	b480      	push	{r7}
 8105cd6:	b083      	sub	sp, #12
 8105cd8:	af00      	add	r7, sp, #0
 8105cda:	6078      	str	r0, [r7, #4]
 8105cdc:	460b      	mov	r3, r1
 8105cde:	807b      	strh	r3, [r7, #2]
 8105ce0:	4613      	mov	r3, r2
 8105ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8105ce4:	787b      	ldrb	r3, [r7, #1]
 8105ce6:	2b00      	cmp	r3, #0
 8105ce8:	d003      	beq.n	8105cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8105cea:	887a      	ldrh	r2, [r7, #2]
 8105cec:	687b      	ldr	r3, [r7, #4]
 8105cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8105cf0:	e003      	b.n	8105cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8105cf2:	887b      	ldrh	r3, [r7, #2]
 8105cf4:	041a      	lsls	r2, r3, #16
 8105cf6:	687b      	ldr	r3, [r7, #4]
 8105cf8:	619a      	str	r2, [r3, #24]
}
 8105cfa:	bf00      	nop
 8105cfc:	370c      	adds	r7, #12
 8105cfe:	46bd      	mov	sp, r7
 8105d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d04:	4770      	bx	lr

08105d06 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8105d06:	b580      	push	{r7, lr}
 8105d08:	b082      	sub	sp, #8
 8105d0a:	af00      	add	r7, sp, #0
 8105d0c:	4603      	mov	r3, r0
 8105d0e:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8105d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105d14:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8105d18:	88fb      	ldrh	r3, [r7, #6]
 8105d1a:	4013      	ands	r3, r2
 8105d1c:	2b00      	cmp	r3, #0
 8105d1e:	d008      	beq.n	8105d32 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8105d20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8105d24:	88fb      	ldrh	r3, [r7, #6]
 8105d26:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8105d2a:	88fb      	ldrh	r3, [r7, #6]
 8105d2c:	4618      	mov	r0, r3
 8105d2e:	f7fd fae5 	bl	81032fc <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8105d32:	bf00      	nop
 8105d34:	3708      	adds	r7, #8
 8105d36:	46bd      	mov	sp, r7
 8105d38:	bd80      	pop	{r7, pc}
	...

08105d3c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8105d3c:	b480      	push	{r7}
 8105d3e:	b083      	sub	sp, #12
 8105d40:	af00      	add	r7, sp, #0
 8105d42:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8105d44:	4b05      	ldr	r3, [pc, #20]	@ (8105d5c <HAL_HSEM_ActivateNotification+0x20>)
 8105d46:	681a      	ldr	r2, [r3, #0]
 8105d48:	4904      	ldr	r1, [pc, #16]	@ (8105d5c <HAL_HSEM_ActivateNotification+0x20>)
 8105d4a:	687b      	ldr	r3, [r7, #4]
 8105d4c:	4313      	orrs	r3, r2
 8105d4e:	600b      	str	r3, [r1, #0]
#endif
}
 8105d50:	bf00      	nop
 8105d52:	370c      	adds	r7, #12
 8105d54:	46bd      	mov	sp, r7
 8105d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d5a:	4770      	bx	lr
 8105d5c:	58026510 	.word	0x58026510

08105d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8105d60:	b580      	push	{r7, lr}
 8105d62:	b082      	sub	sp, #8
 8105d64:	af00      	add	r7, sp, #0
 8105d66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8105d68:	687b      	ldr	r3, [r7, #4]
 8105d6a:	2b00      	cmp	r3, #0
 8105d6c:	d101      	bne.n	8105d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8105d6e:	2301      	movs	r3, #1
 8105d70:	e08d      	b.n	8105e8e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8105d72:	687b      	ldr	r3, [r7, #4]
 8105d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8105d78:	b2db      	uxtb	r3, r3
 8105d7a:	2b00      	cmp	r3, #0
 8105d7c:	d106      	bne.n	8105d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8105d7e:	687b      	ldr	r3, [r7, #4]
 8105d80:	2200      	movs	r2, #0
 8105d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8105d86:	6878      	ldr	r0, [r7, #4]
 8105d88:	f7fd fbc6 	bl	8103518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8105d8c:	687b      	ldr	r3, [r7, #4]
 8105d8e:	2224      	movs	r2, #36	@ 0x24
 8105d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8105d94:	687b      	ldr	r3, [r7, #4]
 8105d96:	681b      	ldr	r3, [r3, #0]
 8105d98:	681a      	ldr	r2, [r3, #0]
 8105d9a:	687b      	ldr	r3, [r7, #4]
 8105d9c:	681b      	ldr	r3, [r3, #0]
 8105d9e:	f022 0201 	bic.w	r2, r2, #1
 8105da2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8105da4:	687b      	ldr	r3, [r7, #4]
 8105da6:	685a      	ldr	r2, [r3, #4]
 8105da8:	687b      	ldr	r3, [r7, #4]
 8105daa:	681b      	ldr	r3, [r3, #0]
 8105dac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8105db0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8105db2:	687b      	ldr	r3, [r7, #4]
 8105db4:	681b      	ldr	r3, [r3, #0]
 8105db6:	689a      	ldr	r2, [r3, #8]
 8105db8:	687b      	ldr	r3, [r7, #4]
 8105dba:	681b      	ldr	r3, [r3, #0]
 8105dbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8105dc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8105dc2:	687b      	ldr	r3, [r7, #4]
 8105dc4:	68db      	ldr	r3, [r3, #12]
 8105dc6:	2b01      	cmp	r3, #1
 8105dc8:	d107      	bne.n	8105dda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8105dca:	687b      	ldr	r3, [r7, #4]
 8105dcc:	689a      	ldr	r2, [r3, #8]
 8105dce:	687b      	ldr	r3, [r7, #4]
 8105dd0:	681b      	ldr	r3, [r3, #0]
 8105dd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8105dd6:	609a      	str	r2, [r3, #8]
 8105dd8:	e006      	b.n	8105de8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8105dda:	687b      	ldr	r3, [r7, #4]
 8105ddc:	689a      	ldr	r2, [r3, #8]
 8105dde:	687b      	ldr	r3, [r7, #4]
 8105de0:	681b      	ldr	r3, [r3, #0]
 8105de2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8105de6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8105de8:	687b      	ldr	r3, [r7, #4]
 8105dea:	68db      	ldr	r3, [r3, #12]
 8105dec:	2b02      	cmp	r3, #2
 8105dee:	d108      	bne.n	8105e02 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8105df0:	687b      	ldr	r3, [r7, #4]
 8105df2:	681b      	ldr	r3, [r3, #0]
 8105df4:	685a      	ldr	r2, [r3, #4]
 8105df6:	687b      	ldr	r3, [r7, #4]
 8105df8:	681b      	ldr	r3, [r3, #0]
 8105dfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8105dfe:	605a      	str	r2, [r3, #4]
 8105e00:	e007      	b.n	8105e12 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8105e02:	687b      	ldr	r3, [r7, #4]
 8105e04:	681b      	ldr	r3, [r3, #0]
 8105e06:	685a      	ldr	r2, [r3, #4]
 8105e08:	687b      	ldr	r3, [r7, #4]
 8105e0a:	681b      	ldr	r3, [r3, #0]
 8105e0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8105e10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8105e12:	687b      	ldr	r3, [r7, #4]
 8105e14:	681b      	ldr	r3, [r3, #0]
 8105e16:	685b      	ldr	r3, [r3, #4]
 8105e18:	687a      	ldr	r2, [r7, #4]
 8105e1a:	6812      	ldr	r2, [r2, #0]
 8105e1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8105e20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8105e24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8105e26:	687b      	ldr	r3, [r7, #4]
 8105e28:	681b      	ldr	r3, [r3, #0]
 8105e2a:	68da      	ldr	r2, [r3, #12]
 8105e2c:	687b      	ldr	r3, [r7, #4]
 8105e2e:	681b      	ldr	r3, [r3, #0]
 8105e30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8105e34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8105e36:	687b      	ldr	r3, [r7, #4]
 8105e38:	691a      	ldr	r2, [r3, #16]
 8105e3a:	687b      	ldr	r3, [r7, #4]
 8105e3c:	695b      	ldr	r3, [r3, #20]
 8105e3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8105e42:	687b      	ldr	r3, [r7, #4]
 8105e44:	699b      	ldr	r3, [r3, #24]
 8105e46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8105e48:	687b      	ldr	r3, [r7, #4]
 8105e4a:	681b      	ldr	r3, [r3, #0]
 8105e4c:	430a      	orrs	r2, r1
 8105e4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8105e50:	687b      	ldr	r3, [r7, #4]
 8105e52:	69d9      	ldr	r1, [r3, #28]
 8105e54:	687b      	ldr	r3, [r7, #4]
 8105e56:	6a1a      	ldr	r2, [r3, #32]
 8105e58:	687b      	ldr	r3, [r7, #4]
 8105e5a:	681b      	ldr	r3, [r3, #0]
 8105e5c:	430a      	orrs	r2, r1
 8105e5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8105e60:	687b      	ldr	r3, [r7, #4]
 8105e62:	681b      	ldr	r3, [r3, #0]
 8105e64:	681a      	ldr	r2, [r3, #0]
 8105e66:	687b      	ldr	r3, [r7, #4]
 8105e68:	681b      	ldr	r3, [r3, #0]
 8105e6a:	f042 0201 	orr.w	r2, r2, #1
 8105e6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105e70:	687b      	ldr	r3, [r7, #4]
 8105e72:	2200      	movs	r2, #0
 8105e74:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8105e76:	687b      	ldr	r3, [r7, #4]
 8105e78:	2220      	movs	r2, #32
 8105e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8105e7e:	687b      	ldr	r3, [r7, #4]
 8105e80:	2200      	movs	r2, #0
 8105e82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8105e84:	687b      	ldr	r3, [r7, #4]
 8105e86:	2200      	movs	r2, #0
 8105e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8105e8c:	2300      	movs	r3, #0
}
 8105e8e:	4618      	mov	r0, r3
 8105e90:	3708      	adds	r7, #8
 8105e92:	46bd      	mov	sp, r7
 8105e94:	bd80      	pop	{r7, pc}
	...

08105e98 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8105e98:	b580      	push	{r7, lr}
 8105e9a:	b088      	sub	sp, #32
 8105e9c:	af02      	add	r7, sp, #8
 8105e9e:	60f8      	str	r0, [r7, #12]
 8105ea0:	607a      	str	r2, [r7, #4]
 8105ea2:	461a      	mov	r2, r3
 8105ea4:	460b      	mov	r3, r1
 8105ea6:	817b      	strh	r3, [r7, #10]
 8105ea8:	4613      	mov	r3, r2
 8105eaa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105eac:	68fb      	ldr	r3, [r7, #12]
 8105eae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8105eb2:	b2db      	uxtb	r3, r3
 8105eb4:	2b20      	cmp	r3, #32
 8105eb6:	f040 80fd 	bne.w	81060b4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105eba:	68fb      	ldr	r3, [r7, #12]
 8105ebc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8105ec0:	2b01      	cmp	r3, #1
 8105ec2:	d101      	bne.n	8105ec8 <HAL_I2C_Master_Transmit+0x30>
 8105ec4:	2302      	movs	r3, #2
 8105ec6:	e0f6      	b.n	81060b6 <HAL_I2C_Master_Transmit+0x21e>
 8105ec8:	68fb      	ldr	r3, [r7, #12]
 8105eca:	2201      	movs	r2, #1
 8105ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8105ed0:	f7fd ff08 	bl	8103ce4 <HAL_GetTick>
 8105ed4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8105ed6:	693b      	ldr	r3, [r7, #16]
 8105ed8:	9300      	str	r3, [sp, #0]
 8105eda:	2319      	movs	r3, #25
 8105edc:	2201      	movs	r2, #1
 8105ede:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8105ee2:	68f8      	ldr	r0, [r7, #12]
 8105ee4:	f000 fa24 	bl	8106330 <I2C_WaitOnFlagUntilTimeout>
 8105ee8:	4603      	mov	r3, r0
 8105eea:	2b00      	cmp	r3, #0
 8105eec:	d001      	beq.n	8105ef2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8105eee:	2301      	movs	r3, #1
 8105ef0:	e0e1      	b.n	81060b6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8105ef2:	68fb      	ldr	r3, [r7, #12]
 8105ef4:	2221      	movs	r2, #33	@ 0x21
 8105ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8105efa:	68fb      	ldr	r3, [r7, #12]
 8105efc:	2210      	movs	r2, #16
 8105efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105f02:	68fb      	ldr	r3, [r7, #12]
 8105f04:	2200      	movs	r2, #0
 8105f06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8105f08:	68fb      	ldr	r3, [r7, #12]
 8105f0a:	687a      	ldr	r2, [r7, #4]
 8105f0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8105f0e:	68fb      	ldr	r3, [r7, #12]
 8105f10:	893a      	ldrh	r2, [r7, #8]
 8105f12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8105f14:	68fb      	ldr	r3, [r7, #12]
 8105f16:	2200      	movs	r2, #0
 8105f18:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105f1a:	68fb      	ldr	r3, [r7, #12]
 8105f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105f1e:	b29b      	uxth	r3, r3
 8105f20:	2bff      	cmp	r3, #255	@ 0xff
 8105f22:	d906      	bls.n	8105f32 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8105f24:	68fb      	ldr	r3, [r7, #12]
 8105f26:	22ff      	movs	r2, #255	@ 0xff
 8105f28:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8105f2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8105f2e:	617b      	str	r3, [r7, #20]
 8105f30:	e007      	b.n	8105f42 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8105f32:	68fb      	ldr	r3, [r7, #12]
 8105f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105f36:	b29a      	uxth	r2, r3
 8105f38:	68fb      	ldr	r3, [r7, #12]
 8105f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8105f3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8105f40:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8105f42:	68fb      	ldr	r3, [r7, #12]
 8105f44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105f46:	2b00      	cmp	r3, #0
 8105f48:	d024      	beq.n	8105f94 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8105f4a:	68fb      	ldr	r3, [r7, #12]
 8105f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105f4e:	781a      	ldrb	r2, [r3, #0]
 8105f50:	68fb      	ldr	r3, [r7, #12]
 8105f52:	681b      	ldr	r3, [r3, #0]
 8105f54:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105f56:	68fb      	ldr	r3, [r7, #12]
 8105f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105f5a:	1c5a      	adds	r2, r3, #1
 8105f5c:	68fb      	ldr	r3, [r7, #12]
 8105f5e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8105f60:	68fb      	ldr	r3, [r7, #12]
 8105f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105f64:	b29b      	uxth	r3, r3
 8105f66:	3b01      	subs	r3, #1
 8105f68:	b29a      	uxth	r2, r3
 8105f6a:	68fb      	ldr	r3, [r7, #12]
 8105f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8105f6e:	68fb      	ldr	r3, [r7, #12]
 8105f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105f72:	3b01      	subs	r3, #1
 8105f74:	b29a      	uxth	r2, r3
 8105f76:	68fb      	ldr	r3, [r7, #12]
 8105f78:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8105f7a:	68fb      	ldr	r3, [r7, #12]
 8105f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105f7e:	b2db      	uxtb	r3, r3
 8105f80:	3301      	adds	r3, #1
 8105f82:	b2da      	uxtb	r2, r3
 8105f84:	8979      	ldrh	r1, [r7, #10]
 8105f86:	4b4e      	ldr	r3, [pc, #312]	@ (81060c0 <HAL_I2C_Master_Transmit+0x228>)
 8105f88:	9300      	str	r3, [sp, #0]
 8105f8a:	697b      	ldr	r3, [r7, #20]
 8105f8c:	68f8      	ldr	r0, [r7, #12]
 8105f8e:	f000 fc1f 	bl	81067d0 <I2C_TransferConfig>
 8105f92:	e066      	b.n	8106062 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8105f94:	68fb      	ldr	r3, [r7, #12]
 8105f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105f98:	b2da      	uxtb	r2, r3
 8105f9a:	8979      	ldrh	r1, [r7, #10]
 8105f9c:	4b48      	ldr	r3, [pc, #288]	@ (81060c0 <HAL_I2C_Master_Transmit+0x228>)
 8105f9e:	9300      	str	r3, [sp, #0]
 8105fa0:	697b      	ldr	r3, [r7, #20]
 8105fa2:	68f8      	ldr	r0, [r7, #12]
 8105fa4:	f000 fc14 	bl	81067d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8105fa8:	e05b      	b.n	8106062 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105faa:	693a      	ldr	r2, [r7, #16]
 8105fac:	6a39      	ldr	r1, [r7, #32]
 8105fae:	68f8      	ldr	r0, [r7, #12]
 8105fb0:	f000 fa17 	bl	81063e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8105fb4:	4603      	mov	r3, r0
 8105fb6:	2b00      	cmp	r3, #0
 8105fb8:	d001      	beq.n	8105fbe <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8105fba:	2301      	movs	r3, #1
 8105fbc:	e07b      	b.n	81060b6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8105fbe:	68fb      	ldr	r3, [r7, #12]
 8105fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105fc2:	781a      	ldrb	r2, [r3, #0]
 8105fc4:	68fb      	ldr	r3, [r7, #12]
 8105fc6:	681b      	ldr	r3, [r3, #0]
 8105fc8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105fca:	68fb      	ldr	r3, [r7, #12]
 8105fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105fce:	1c5a      	adds	r2, r3, #1
 8105fd0:	68fb      	ldr	r3, [r7, #12]
 8105fd2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8105fd4:	68fb      	ldr	r3, [r7, #12]
 8105fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105fd8:	b29b      	uxth	r3, r3
 8105fda:	3b01      	subs	r3, #1
 8105fdc:	b29a      	uxth	r2, r3
 8105fde:	68fb      	ldr	r3, [r7, #12]
 8105fe0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8105fe2:	68fb      	ldr	r3, [r7, #12]
 8105fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105fe6:	3b01      	subs	r3, #1
 8105fe8:	b29a      	uxth	r2, r3
 8105fea:	68fb      	ldr	r3, [r7, #12]
 8105fec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8105fee:	68fb      	ldr	r3, [r7, #12]
 8105ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105ff2:	b29b      	uxth	r3, r3
 8105ff4:	2b00      	cmp	r3, #0
 8105ff6:	d034      	beq.n	8106062 <HAL_I2C_Master_Transmit+0x1ca>
 8105ff8:	68fb      	ldr	r3, [r7, #12]
 8105ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105ffc:	2b00      	cmp	r3, #0
 8105ffe:	d130      	bne.n	8106062 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8106000:	693b      	ldr	r3, [r7, #16]
 8106002:	9300      	str	r3, [sp, #0]
 8106004:	6a3b      	ldr	r3, [r7, #32]
 8106006:	2200      	movs	r2, #0
 8106008:	2180      	movs	r1, #128	@ 0x80
 810600a:	68f8      	ldr	r0, [r7, #12]
 810600c:	f000 f990 	bl	8106330 <I2C_WaitOnFlagUntilTimeout>
 8106010:	4603      	mov	r3, r0
 8106012:	2b00      	cmp	r3, #0
 8106014:	d001      	beq.n	810601a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8106016:	2301      	movs	r3, #1
 8106018:	e04d      	b.n	81060b6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810601a:	68fb      	ldr	r3, [r7, #12]
 810601c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810601e:	b29b      	uxth	r3, r3
 8106020:	2bff      	cmp	r3, #255	@ 0xff
 8106022:	d90e      	bls.n	8106042 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8106024:	68fb      	ldr	r3, [r7, #12]
 8106026:	22ff      	movs	r2, #255	@ 0xff
 8106028:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810602a:	68fb      	ldr	r3, [r7, #12]
 810602c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810602e:	b2da      	uxtb	r2, r3
 8106030:	8979      	ldrh	r1, [r7, #10]
 8106032:	2300      	movs	r3, #0
 8106034:	9300      	str	r3, [sp, #0]
 8106036:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810603a:	68f8      	ldr	r0, [r7, #12]
 810603c:	f000 fbc8 	bl	81067d0 <I2C_TransferConfig>
 8106040:	e00f      	b.n	8106062 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8106042:	68fb      	ldr	r3, [r7, #12]
 8106044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106046:	b29a      	uxth	r2, r3
 8106048:	68fb      	ldr	r3, [r7, #12]
 810604a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810604c:	68fb      	ldr	r3, [r7, #12]
 810604e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8106050:	b2da      	uxtb	r2, r3
 8106052:	8979      	ldrh	r1, [r7, #10]
 8106054:	2300      	movs	r3, #0
 8106056:	9300      	str	r3, [sp, #0]
 8106058:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810605c:	68f8      	ldr	r0, [r7, #12]
 810605e:	f000 fbb7 	bl	81067d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8106062:	68fb      	ldr	r3, [r7, #12]
 8106064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106066:	b29b      	uxth	r3, r3
 8106068:	2b00      	cmp	r3, #0
 810606a:	d19e      	bne.n	8105faa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810606c:	693a      	ldr	r2, [r7, #16]
 810606e:	6a39      	ldr	r1, [r7, #32]
 8106070:	68f8      	ldr	r0, [r7, #12]
 8106072:	f000 f9fd 	bl	8106470 <I2C_WaitOnSTOPFlagUntilTimeout>
 8106076:	4603      	mov	r3, r0
 8106078:	2b00      	cmp	r3, #0
 810607a:	d001      	beq.n	8106080 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 810607c:	2301      	movs	r3, #1
 810607e:	e01a      	b.n	81060b6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8106080:	68fb      	ldr	r3, [r7, #12]
 8106082:	681b      	ldr	r3, [r3, #0]
 8106084:	2220      	movs	r2, #32
 8106086:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8106088:	68fb      	ldr	r3, [r7, #12]
 810608a:	681b      	ldr	r3, [r3, #0]
 810608c:	6859      	ldr	r1, [r3, #4]
 810608e:	68fb      	ldr	r3, [r7, #12]
 8106090:	681a      	ldr	r2, [r3, #0]
 8106092:	4b0c      	ldr	r3, [pc, #48]	@ (81060c4 <HAL_I2C_Master_Transmit+0x22c>)
 8106094:	400b      	ands	r3, r1
 8106096:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8106098:	68fb      	ldr	r3, [r7, #12]
 810609a:	2220      	movs	r2, #32
 810609c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81060a0:	68fb      	ldr	r3, [r7, #12]
 81060a2:	2200      	movs	r2, #0
 81060a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81060a8:	68fb      	ldr	r3, [r7, #12]
 81060aa:	2200      	movs	r2, #0
 81060ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81060b0:	2300      	movs	r3, #0
 81060b2:	e000      	b.n	81060b6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 81060b4:	2302      	movs	r3, #2
  }
}
 81060b6:	4618      	mov	r0, r3
 81060b8:	3718      	adds	r7, #24
 81060ba:	46bd      	mov	sp, r7
 81060bc:	bd80      	pop	{r7, pc}
 81060be:	bf00      	nop
 81060c0:	80002000 	.word	0x80002000
 81060c4:	fe00e800 	.word	0xfe00e800

081060c8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 81060c8:	b580      	push	{r7, lr}
 81060ca:	b088      	sub	sp, #32
 81060cc:	af02      	add	r7, sp, #8
 81060ce:	60f8      	str	r0, [r7, #12]
 81060d0:	607a      	str	r2, [r7, #4]
 81060d2:	461a      	mov	r2, r3
 81060d4:	460b      	mov	r3, r1
 81060d6:	817b      	strh	r3, [r7, #10]
 81060d8:	4613      	mov	r3, r2
 81060da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 81060dc:	68fb      	ldr	r3, [r7, #12]
 81060de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81060e2:	b2db      	uxtb	r3, r3
 81060e4:	2b20      	cmp	r3, #32
 81060e6:	f040 80db 	bne.w	81062a0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81060ea:	68fb      	ldr	r3, [r7, #12]
 81060ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81060f0:	2b01      	cmp	r3, #1
 81060f2:	d101      	bne.n	81060f8 <HAL_I2C_Master_Receive+0x30>
 81060f4:	2302      	movs	r3, #2
 81060f6:	e0d4      	b.n	81062a2 <HAL_I2C_Master_Receive+0x1da>
 81060f8:	68fb      	ldr	r3, [r7, #12]
 81060fa:	2201      	movs	r2, #1
 81060fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8106100:	f7fd fdf0 	bl	8103ce4 <HAL_GetTick>
 8106104:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8106106:	697b      	ldr	r3, [r7, #20]
 8106108:	9300      	str	r3, [sp, #0]
 810610a:	2319      	movs	r3, #25
 810610c:	2201      	movs	r2, #1
 810610e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8106112:	68f8      	ldr	r0, [r7, #12]
 8106114:	f000 f90c 	bl	8106330 <I2C_WaitOnFlagUntilTimeout>
 8106118:	4603      	mov	r3, r0
 810611a:	2b00      	cmp	r3, #0
 810611c:	d001      	beq.n	8106122 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 810611e:	2301      	movs	r3, #1
 8106120:	e0bf      	b.n	81062a2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8106122:	68fb      	ldr	r3, [r7, #12]
 8106124:	2222      	movs	r2, #34	@ 0x22
 8106126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 810612a:	68fb      	ldr	r3, [r7, #12]
 810612c:	2210      	movs	r2, #16
 810612e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8106132:	68fb      	ldr	r3, [r7, #12]
 8106134:	2200      	movs	r2, #0
 8106136:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8106138:	68fb      	ldr	r3, [r7, #12]
 810613a:	687a      	ldr	r2, [r7, #4]
 810613c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 810613e:	68fb      	ldr	r3, [r7, #12]
 8106140:	893a      	ldrh	r2, [r7, #8]
 8106142:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8106144:	68fb      	ldr	r3, [r7, #12]
 8106146:	2200      	movs	r2, #0
 8106148:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810614a:	68fb      	ldr	r3, [r7, #12]
 810614c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810614e:	b29b      	uxth	r3, r3
 8106150:	2bff      	cmp	r3, #255	@ 0xff
 8106152:	d90e      	bls.n	8106172 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8106154:	68fb      	ldr	r3, [r7, #12]
 8106156:	22ff      	movs	r2, #255	@ 0xff
 8106158:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810615a:	68fb      	ldr	r3, [r7, #12]
 810615c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810615e:	b2da      	uxtb	r2, r3
 8106160:	8979      	ldrh	r1, [r7, #10]
 8106162:	4b52      	ldr	r3, [pc, #328]	@ (81062ac <HAL_I2C_Master_Receive+0x1e4>)
 8106164:	9300      	str	r3, [sp, #0]
 8106166:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810616a:	68f8      	ldr	r0, [r7, #12]
 810616c:	f000 fb30 	bl	81067d0 <I2C_TransferConfig>
 8106170:	e06d      	b.n	810624e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8106172:	68fb      	ldr	r3, [r7, #12]
 8106174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106176:	b29a      	uxth	r2, r3
 8106178:	68fb      	ldr	r3, [r7, #12]
 810617a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810617c:	68fb      	ldr	r3, [r7, #12]
 810617e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8106180:	b2da      	uxtb	r2, r3
 8106182:	8979      	ldrh	r1, [r7, #10]
 8106184:	4b49      	ldr	r3, [pc, #292]	@ (81062ac <HAL_I2C_Master_Receive+0x1e4>)
 8106186:	9300      	str	r3, [sp, #0]
 8106188:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810618c:	68f8      	ldr	r0, [r7, #12]
 810618e:	f000 fb1f 	bl	81067d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8106192:	e05c      	b.n	810624e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8106194:	697a      	ldr	r2, [r7, #20]
 8106196:	6a39      	ldr	r1, [r7, #32]
 8106198:	68f8      	ldr	r0, [r7, #12]
 810619a:	f000 f9ad 	bl	81064f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 810619e:	4603      	mov	r3, r0
 81061a0:	2b00      	cmp	r3, #0
 81061a2:	d001      	beq.n	81061a8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 81061a4:	2301      	movs	r3, #1
 81061a6:	e07c      	b.n	81062a2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81061a8:	68fb      	ldr	r3, [r7, #12]
 81061aa:	681b      	ldr	r3, [r3, #0]
 81061ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81061ae:	68fb      	ldr	r3, [r7, #12]
 81061b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81061b2:	b2d2      	uxtb	r2, r2
 81061b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81061b6:	68fb      	ldr	r3, [r7, #12]
 81061b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81061ba:	1c5a      	adds	r2, r3, #1
 81061bc:	68fb      	ldr	r3, [r7, #12]
 81061be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 81061c0:	68fb      	ldr	r3, [r7, #12]
 81061c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81061c4:	3b01      	subs	r3, #1
 81061c6:	b29a      	uxth	r2, r3
 81061c8:	68fb      	ldr	r3, [r7, #12]
 81061ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 81061cc:	68fb      	ldr	r3, [r7, #12]
 81061ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81061d0:	b29b      	uxth	r3, r3
 81061d2:	3b01      	subs	r3, #1
 81061d4:	b29a      	uxth	r2, r3
 81061d6:	68fb      	ldr	r3, [r7, #12]
 81061d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81061da:	68fb      	ldr	r3, [r7, #12]
 81061dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81061de:	b29b      	uxth	r3, r3
 81061e0:	2b00      	cmp	r3, #0
 81061e2:	d034      	beq.n	810624e <HAL_I2C_Master_Receive+0x186>
 81061e4:	68fb      	ldr	r3, [r7, #12]
 81061e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81061e8:	2b00      	cmp	r3, #0
 81061ea:	d130      	bne.n	810624e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81061ec:	697b      	ldr	r3, [r7, #20]
 81061ee:	9300      	str	r3, [sp, #0]
 81061f0:	6a3b      	ldr	r3, [r7, #32]
 81061f2:	2200      	movs	r2, #0
 81061f4:	2180      	movs	r1, #128	@ 0x80
 81061f6:	68f8      	ldr	r0, [r7, #12]
 81061f8:	f000 f89a 	bl	8106330 <I2C_WaitOnFlagUntilTimeout>
 81061fc:	4603      	mov	r3, r0
 81061fe:	2b00      	cmp	r3, #0
 8106200:	d001      	beq.n	8106206 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8106202:	2301      	movs	r3, #1
 8106204:	e04d      	b.n	81062a2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106206:	68fb      	ldr	r3, [r7, #12]
 8106208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810620a:	b29b      	uxth	r3, r3
 810620c:	2bff      	cmp	r3, #255	@ 0xff
 810620e:	d90e      	bls.n	810622e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8106210:	68fb      	ldr	r3, [r7, #12]
 8106212:	22ff      	movs	r2, #255	@ 0xff
 8106214:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8106216:	68fb      	ldr	r3, [r7, #12]
 8106218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810621a:	b2da      	uxtb	r2, r3
 810621c:	8979      	ldrh	r1, [r7, #10]
 810621e:	2300      	movs	r3, #0
 8106220:	9300      	str	r3, [sp, #0]
 8106222:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8106226:	68f8      	ldr	r0, [r7, #12]
 8106228:	f000 fad2 	bl	81067d0 <I2C_TransferConfig>
 810622c:	e00f      	b.n	810624e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 810622e:	68fb      	ldr	r3, [r7, #12]
 8106230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106232:	b29a      	uxth	r2, r3
 8106234:	68fb      	ldr	r3, [r7, #12]
 8106236:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8106238:	68fb      	ldr	r3, [r7, #12]
 810623a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810623c:	b2da      	uxtb	r2, r3
 810623e:	8979      	ldrh	r1, [r7, #10]
 8106240:	2300      	movs	r3, #0
 8106242:	9300      	str	r3, [sp, #0]
 8106244:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8106248:	68f8      	ldr	r0, [r7, #12]
 810624a:	f000 fac1 	bl	81067d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 810624e:	68fb      	ldr	r3, [r7, #12]
 8106250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106252:	b29b      	uxth	r3, r3
 8106254:	2b00      	cmp	r3, #0
 8106256:	d19d      	bne.n	8106194 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8106258:	697a      	ldr	r2, [r7, #20]
 810625a:	6a39      	ldr	r1, [r7, #32]
 810625c:	68f8      	ldr	r0, [r7, #12]
 810625e:	f000 f907 	bl	8106470 <I2C_WaitOnSTOPFlagUntilTimeout>
 8106262:	4603      	mov	r3, r0
 8106264:	2b00      	cmp	r3, #0
 8106266:	d001      	beq.n	810626c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8106268:	2301      	movs	r3, #1
 810626a:	e01a      	b.n	81062a2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810626c:	68fb      	ldr	r3, [r7, #12]
 810626e:	681b      	ldr	r3, [r3, #0]
 8106270:	2220      	movs	r2, #32
 8106272:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8106274:	68fb      	ldr	r3, [r7, #12]
 8106276:	681b      	ldr	r3, [r3, #0]
 8106278:	6859      	ldr	r1, [r3, #4]
 810627a:	68fb      	ldr	r3, [r7, #12]
 810627c:	681a      	ldr	r2, [r3, #0]
 810627e:	4b0c      	ldr	r3, [pc, #48]	@ (81062b0 <HAL_I2C_Master_Receive+0x1e8>)
 8106280:	400b      	ands	r3, r1
 8106282:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8106284:	68fb      	ldr	r3, [r7, #12]
 8106286:	2220      	movs	r2, #32
 8106288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810628c:	68fb      	ldr	r3, [r7, #12]
 810628e:	2200      	movs	r2, #0
 8106290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8106294:	68fb      	ldr	r3, [r7, #12]
 8106296:	2200      	movs	r2, #0
 8106298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 810629c:	2300      	movs	r3, #0
 810629e:	e000      	b.n	81062a2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 81062a0:	2302      	movs	r3, #2
  }
}
 81062a2:	4618      	mov	r0, r3
 81062a4:	3718      	adds	r7, #24
 81062a6:	46bd      	mov	sp, r7
 81062a8:	bd80      	pop	{r7, pc}
 81062aa:	bf00      	nop
 81062ac:	80002400 	.word	0x80002400
 81062b0:	fe00e800 	.word	0xfe00e800

081062b4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 81062b4:	b480      	push	{r7}
 81062b6:	b083      	sub	sp, #12
 81062b8:	af00      	add	r7, sp, #0
 81062ba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 81062bc:	687b      	ldr	r3, [r7, #4]
 81062be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81062c2:	b2db      	uxtb	r3, r3
}
 81062c4:	4618      	mov	r0, r3
 81062c6:	370c      	adds	r7, #12
 81062c8:	46bd      	mov	sp, r7
 81062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062ce:	4770      	bx	lr

081062d0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 81062d0:	b480      	push	{r7}
 81062d2:	b083      	sub	sp, #12
 81062d4:	af00      	add	r7, sp, #0
 81062d6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 81062d8:	687b      	ldr	r3, [r7, #4]
 81062da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 81062dc:	4618      	mov	r0, r3
 81062de:	370c      	adds	r7, #12
 81062e0:	46bd      	mov	sp, r7
 81062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062e6:	4770      	bx	lr

081062e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81062e8:	b480      	push	{r7}
 81062ea:	b083      	sub	sp, #12
 81062ec:	af00      	add	r7, sp, #0
 81062ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81062f0:	687b      	ldr	r3, [r7, #4]
 81062f2:	681b      	ldr	r3, [r3, #0]
 81062f4:	699b      	ldr	r3, [r3, #24]
 81062f6:	f003 0302 	and.w	r3, r3, #2
 81062fa:	2b02      	cmp	r3, #2
 81062fc:	d103      	bne.n	8106306 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81062fe:	687b      	ldr	r3, [r7, #4]
 8106300:	681b      	ldr	r3, [r3, #0]
 8106302:	2200      	movs	r2, #0
 8106304:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8106306:	687b      	ldr	r3, [r7, #4]
 8106308:	681b      	ldr	r3, [r3, #0]
 810630a:	699b      	ldr	r3, [r3, #24]
 810630c:	f003 0301 	and.w	r3, r3, #1
 8106310:	2b01      	cmp	r3, #1
 8106312:	d007      	beq.n	8106324 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8106314:	687b      	ldr	r3, [r7, #4]
 8106316:	681b      	ldr	r3, [r3, #0]
 8106318:	699a      	ldr	r2, [r3, #24]
 810631a:	687b      	ldr	r3, [r7, #4]
 810631c:	681b      	ldr	r3, [r3, #0]
 810631e:	f042 0201 	orr.w	r2, r2, #1
 8106322:	619a      	str	r2, [r3, #24]
  }
}
 8106324:	bf00      	nop
 8106326:	370c      	adds	r7, #12
 8106328:	46bd      	mov	sp, r7
 810632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810632e:	4770      	bx	lr

08106330 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8106330:	b580      	push	{r7, lr}
 8106332:	b084      	sub	sp, #16
 8106334:	af00      	add	r7, sp, #0
 8106336:	60f8      	str	r0, [r7, #12]
 8106338:	60b9      	str	r1, [r7, #8]
 810633a:	603b      	str	r3, [r7, #0]
 810633c:	4613      	mov	r3, r2
 810633e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8106340:	e03b      	b.n	81063ba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8106342:	69ba      	ldr	r2, [r7, #24]
 8106344:	6839      	ldr	r1, [r7, #0]
 8106346:	68f8      	ldr	r0, [r7, #12]
 8106348:	f000 f962 	bl	8106610 <I2C_IsErrorOccurred>
 810634c:	4603      	mov	r3, r0
 810634e:	2b00      	cmp	r3, #0
 8106350:	d001      	beq.n	8106356 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8106352:	2301      	movs	r3, #1
 8106354:	e041      	b.n	81063da <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8106356:	683b      	ldr	r3, [r7, #0]
 8106358:	f1b3 3fff 	cmp.w	r3, #4294967295
 810635c:	d02d      	beq.n	81063ba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810635e:	f7fd fcc1 	bl	8103ce4 <HAL_GetTick>
 8106362:	4602      	mov	r2, r0
 8106364:	69bb      	ldr	r3, [r7, #24]
 8106366:	1ad3      	subs	r3, r2, r3
 8106368:	683a      	ldr	r2, [r7, #0]
 810636a:	429a      	cmp	r2, r3
 810636c:	d302      	bcc.n	8106374 <I2C_WaitOnFlagUntilTimeout+0x44>
 810636e:	683b      	ldr	r3, [r7, #0]
 8106370:	2b00      	cmp	r3, #0
 8106372:	d122      	bne.n	81063ba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8106374:	68fb      	ldr	r3, [r7, #12]
 8106376:	681b      	ldr	r3, [r3, #0]
 8106378:	699a      	ldr	r2, [r3, #24]
 810637a:	68bb      	ldr	r3, [r7, #8]
 810637c:	4013      	ands	r3, r2
 810637e:	68ba      	ldr	r2, [r7, #8]
 8106380:	429a      	cmp	r2, r3
 8106382:	bf0c      	ite	eq
 8106384:	2301      	moveq	r3, #1
 8106386:	2300      	movne	r3, #0
 8106388:	b2db      	uxtb	r3, r3
 810638a:	461a      	mov	r2, r3
 810638c:	79fb      	ldrb	r3, [r7, #7]
 810638e:	429a      	cmp	r2, r3
 8106390:	d113      	bne.n	81063ba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8106392:	68fb      	ldr	r3, [r7, #12]
 8106394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106396:	f043 0220 	orr.w	r2, r3, #32
 810639a:	68fb      	ldr	r3, [r7, #12]
 810639c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810639e:	68fb      	ldr	r3, [r7, #12]
 81063a0:	2220      	movs	r2, #32
 81063a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 81063a6:	68fb      	ldr	r3, [r7, #12]
 81063a8:	2200      	movs	r2, #0
 81063aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81063ae:	68fb      	ldr	r3, [r7, #12]
 81063b0:	2200      	movs	r2, #0
 81063b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 81063b6:	2301      	movs	r3, #1
 81063b8:	e00f      	b.n	81063da <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81063ba:	68fb      	ldr	r3, [r7, #12]
 81063bc:	681b      	ldr	r3, [r3, #0]
 81063be:	699a      	ldr	r2, [r3, #24]
 81063c0:	68bb      	ldr	r3, [r7, #8]
 81063c2:	4013      	ands	r3, r2
 81063c4:	68ba      	ldr	r2, [r7, #8]
 81063c6:	429a      	cmp	r2, r3
 81063c8:	bf0c      	ite	eq
 81063ca:	2301      	moveq	r3, #1
 81063cc:	2300      	movne	r3, #0
 81063ce:	b2db      	uxtb	r3, r3
 81063d0:	461a      	mov	r2, r3
 81063d2:	79fb      	ldrb	r3, [r7, #7]
 81063d4:	429a      	cmp	r2, r3
 81063d6:	d0b4      	beq.n	8106342 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81063d8:	2300      	movs	r3, #0
}
 81063da:	4618      	mov	r0, r3
 81063dc:	3710      	adds	r7, #16
 81063de:	46bd      	mov	sp, r7
 81063e0:	bd80      	pop	{r7, pc}

081063e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81063e2:	b580      	push	{r7, lr}
 81063e4:	b084      	sub	sp, #16
 81063e6:	af00      	add	r7, sp, #0
 81063e8:	60f8      	str	r0, [r7, #12]
 81063ea:	60b9      	str	r1, [r7, #8]
 81063ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81063ee:	e033      	b.n	8106458 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81063f0:	687a      	ldr	r2, [r7, #4]
 81063f2:	68b9      	ldr	r1, [r7, #8]
 81063f4:	68f8      	ldr	r0, [r7, #12]
 81063f6:	f000 f90b 	bl	8106610 <I2C_IsErrorOccurred>
 81063fa:	4603      	mov	r3, r0
 81063fc:	2b00      	cmp	r3, #0
 81063fe:	d001      	beq.n	8106404 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8106400:	2301      	movs	r3, #1
 8106402:	e031      	b.n	8106468 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8106404:	68bb      	ldr	r3, [r7, #8]
 8106406:	f1b3 3fff 	cmp.w	r3, #4294967295
 810640a:	d025      	beq.n	8106458 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810640c:	f7fd fc6a 	bl	8103ce4 <HAL_GetTick>
 8106410:	4602      	mov	r2, r0
 8106412:	687b      	ldr	r3, [r7, #4]
 8106414:	1ad3      	subs	r3, r2, r3
 8106416:	68ba      	ldr	r2, [r7, #8]
 8106418:	429a      	cmp	r2, r3
 810641a:	d302      	bcc.n	8106422 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810641c:	68bb      	ldr	r3, [r7, #8]
 810641e:	2b00      	cmp	r3, #0
 8106420:	d11a      	bne.n	8106458 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8106422:	68fb      	ldr	r3, [r7, #12]
 8106424:	681b      	ldr	r3, [r3, #0]
 8106426:	699b      	ldr	r3, [r3, #24]
 8106428:	f003 0302 	and.w	r3, r3, #2
 810642c:	2b02      	cmp	r3, #2
 810642e:	d013      	beq.n	8106458 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8106430:	68fb      	ldr	r3, [r7, #12]
 8106432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106434:	f043 0220 	orr.w	r2, r3, #32
 8106438:	68fb      	ldr	r3, [r7, #12]
 810643a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810643c:	68fb      	ldr	r3, [r7, #12]
 810643e:	2220      	movs	r2, #32
 8106440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8106444:	68fb      	ldr	r3, [r7, #12]
 8106446:	2200      	movs	r2, #0
 8106448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810644c:	68fb      	ldr	r3, [r7, #12]
 810644e:	2200      	movs	r2, #0
 8106450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8106454:	2301      	movs	r3, #1
 8106456:	e007      	b.n	8106468 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8106458:	68fb      	ldr	r3, [r7, #12]
 810645a:	681b      	ldr	r3, [r3, #0]
 810645c:	699b      	ldr	r3, [r3, #24]
 810645e:	f003 0302 	and.w	r3, r3, #2
 8106462:	2b02      	cmp	r3, #2
 8106464:	d1c4      	bne.n	81063f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8106466:	2300      	movs	r3, #0
}
 8106468:	4618      	mov	r0, r3
 810646a:	3710      	adds	r7, #16
 810646c:	46bd      	mov	sp, r7
 810646e:	bd80      	pop	{r7, pc}

08106470 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8106470:	b580      	push	{r7, lr}
 8106472:	b084      	sub	sp, #16
 8106474:	af00      	add	r7, sp, #0
 8106476:	60f8      	str	r0, [r7, #12]
 8106478:	60b9      	str	r1, [r7, #8]
 810647a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810647c:	e02f      	b.n	81064de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810647e:	687a      	ldr	r2, [r7, #4]
 8106480:	68b9      	ldr	r1, [r7, #8]
 8106482:	68f8      	ldr	r0, [r7, #12]
 8106484:	f000 f8c4 	bl	8106610 <I2C_IsErrorOccurred>
 8106488:	4603      	mov	r3, r0
 810648a:	2b00      	cmp	r3, #0
 810648c:	d001      	beq.n	8106492 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810648e:	2301      	movs	r3, #1
 8106490:	e02d      	b.n	81064ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106492:	f7fd fc27 	bl	8103ce4 <HAL_GetTick>
 8106496:	4602      	mov	r2, r0
 8106498:	687b      	ldr	r3, [r7, #4]
 810649a:	1ad3      	subs	r3, r2, r3
 810649c:	68ba      	ldr	r2, [r7, #8]
 810649e:	429a      	cmp	r2, r3
 81064a0:	d302      	bcc.n	81064a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 81064a2:	68bb      	ldr	r3, [r7, #8]
 81064a4:	2b00      	cmp	r3, #0
 81064a6:	d11a      	bne.n	81064de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 81064a8:	68fb      	ldr	r3, [r7, #12]
 81064aa:	681b      	ldr	r3, [r3, #0]
 81064ac:	699b      	ldr	r3, [r3, #24]
 81064ae:	f003 0320 	and.w	r3, r3, #32
 81064b2:	2b20      	cmp	r3, #32
 81064b4:	d013      	beq.n	81064de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81064b6:	68fb      	ldr	r3, [r7, #12]
 81064b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81064ba:	f043 0220 	orr.w	r2, r3, #32
 81064be:	68fb      	ldr	r3, [r7, #12]
 81064c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81064c2:	68fb      	ldr	r3, [r7, #12]
 81064c4:	2220      	movs	r2, #32
 81064c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81064ca:	68fb      	ldr	r3, [r7, #12]
 81064cc:	2200      	movs	r2, #0
 81064ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81064d2:	68fb      	ldr	r3, [r7, #12]
 81064d4:	2200      	movs	r2, #0
 81064d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 81064da:	2301      	movs	r3, #1
 81064dc:	e007      	b.n	81064ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81064de:	68fb      	ldr	r3, [r7, #12]
 81064e0:	681b      	ldr	r3, [r3, #0]
 81064e2:	699b      	ldr	r3, [r3, #24]
 81064e4:	f003 0320 	and.w	r3, r3, #32
 81064e8:	2b20      	cmp	r3, #32
 81064ea:	d1c8      	bne.n	810647e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 81064ec:	2300      	movs	r3, #0
}
 81064ee:	4618      	mov	r0, r3
 81064f0:	3710      	adds	r7, #16
 81064f2:	46bd      	mov	sp, r7
 81064f4:	bd80      	pop	{r7, pc}
	...

081064f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81064f8:	b580      	push	{r7, lr}
 81064fa:	b086      	sub	sp, #24
 81064fc:	af00      	add	r7, sp, #0
 81064fe:	60f8      	str	r0, [r7, #12]
 8106500:	60b9      	str	r1, [r7, #8]
 8106502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106504:	2300      	movs	r3, #0
 8106506:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8106508:	e071      	b.n	81065ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810650a:	687a      	ldr	r2, [r7, #4]
 810650c:	68b9      	ldr	r1, [r7, #8]
 810650e:	68f8      	ldr	r0, [r7, #12]
 8106510:	f000 f87e 	bl	8106610 <I2C_IsErrorOccurred>
 8106514:	4603      	mov	r3, r0
 8106516:	2b00      	cmp	r3, #0
 8106518:	d001      	beq.n	810651e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 810651a:	2301      	movs	r3, #1
 810651c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 810651e:	68fb      	ldr	r3, [r7, #12]
 8106520:	681b      	ldr	r3, [r3, #0]
 8106522:	699b      	ldr	r3, [r3, #24]
 8106524:	f003 0320 	and.w	r3, r3, #32
 8106528:	2b20      	cmp	r3, #32
 810652a:	d13b      	bne.n	81065a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 810652c:	7dfb      	ldrb	r3, [r7, #23]
 810652e:	2b00      	cmp	r3, #0
 8106530:	d138      	bne.n	81065a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8106532:	68fb      	ldr	r3, [r7, #12]
 8106534:	681b      	ldr	r3, [r3, #0]
 8106536:	699b      	ldr	r3, [r3, #24]
 8106538:	f003 0304 	and.w	r3, r3, #4
 810653c:	2b04      	cmp	r3, #4
 810653e:	d105      	bne.n	810654c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8106540:	68fb      	ldr	r3, [r7, #12]
 8106542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8106544:	2b00      	cmp	r3, #0
 8106546:	d001      	beq.n	810654c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8106548:	2300      	movs	r3, #0
 810654a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 810654c:	68fb      	ldr	r3, [r7, #12]
 810654e:	681b      	ldr	r3, [r3, #0]
 8106550:	699b      	ldr	r3, [r3, #24]
 8106552:	f003 0310 	and.w	r3, r3, #16
 8106556:	2b10      	cmp	r3, #16
 8106558:	d121      	bne.n	810659e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810655a:	68fb      	ldr	r3, [r7, #12]
 810655c:	681b      	ldr	r3, [r3, #0]
 810655e:	2210      	movs	r2, #16
 8106560:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8106562:	68fb      	ldr	r3, [r7, #12]
 8106564:	2204      	movs	r2, #4
 8106566:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8106568:	68fb      	ldr	r3, [r7, #12]
 810656a:	681b      	ldr	r3, [r3, #0]
 810656c:	2220      	movs	r2, #32
 810656e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8106570:	68fb      	ldr	r3, [r7, #12]
 8106572:	681b      	ldr	r3, [r3, #0]
 8106574:	6859      	ldr	r1, [r3, #4]
 8106576:	68fb      	ldr	r3, [r7, #12]
 8106578:	681a      	ldr	r2, [r3, #0]
 810657a:	4b24      	ldr	r3, [pc, #144]	@ (810660c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 810657c:	400b      	ands	r3, r1
 810657e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8106580:	68fb      	ldr	r3, [r7, #12]
 8106582:	2220      	movs	r2, #32
 8106584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8106588:	68fb      	ldr	r3, [r7, #12]
 810658a:	2200      	movs	r2, #0
 810658c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8106590:	68fb      	ldr	r3, [r7, #12]
 8106592:	2200      	movs	r2, #0
 8106594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8106598:	2301      	movs	r3, #1
 810659a:	75fb      	strb	r3, [r7, #23]
 810659c:	e002      	b.n	81065a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810659e:	68fb      	ldr	r3, [r7, #12]
 81065a0:	2200      	movs	r2, #0
 81065a2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 81065a4:	f7fd fb9e 	bl	8103ce4 <HAL_GetTick>
 81065a8:	4602      	mov	r2, r0
 81065aa:	687b      	ldr	r3, [r7, #4]
 81065ac:	1ad3      	subs	r3, r2, r3
 81065ae:	68ba      	ldr	r2, [r7, #8]
 81065b0:	429a      	cmp	r2, r3
 81065b2:	d302      	bcc.n	81065ba <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 81065b4:	68bb      	ldr	r3, [r7, #8]
 81065b6:	2b00      	cmp	r3, #0
 81065b8:	d119      	bne.n	81065ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 81065ba:	7dfb      	ldrb	r3, [r7, #23]
 81065bc:	2b00      	cmp	r3, #0
 81065be:	d116      	bne.n	81065ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 81065c0:	68fb      	ldr	r3, [r7, #12]
 81065c2:	681b      	ldr	r3, [r3, #0]
 81065c4:	699b      	ldr	r3, [r3, #24]
 81065c6:	f003 0304 	and.w	r3, r3, #4
 81065ca:	2b04      	cmp	r3, #4
 81065cc:	d00f      	beq.n	81065ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81065ce:	68fb      	ldr	r3, [r7, #12]
 81065d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81065d2:	f043 0220 	orr.w	r2, r3, #32
 81065d6:	68fb      	ldr	r3, [r7, #12]
 81065d8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81065da:	68fb      	ldr	r3, [r7, #12]
 81065dc:	2220      	movs	r2, #32
 81065de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81065e2:	68fb      	ldr	r3, [r7, #12]
 81065e4:	2200      	movs	r2, #0
 81065e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 81065ea:	2301      	movs	r3, #1
 81065ec:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 81065ee:	68fb      	ldr	r3, [r7, #12]
 81065f0:	681b      	ldr	r3, [r3, #0]
 81065f2:	699b      	ldr	r3, [r3, #24]
 81065f4:	f003 0304 	and.w	r3, r3, #4
 81065f8:	2b04      	cmp	r3, #4
 81065fa:	d002      	beq.n	8106602 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 81065fc:	7dfb      	ldrb	r3, [r7, #23]
 81065fe:	2b00      	cmp	r3, #0
 8106600:	d083      	beq.n	810650a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8106602:	7dfb      	ldrb	r3, [r7, #23]
}
 8106604:	4618      	mov	r0, r3
 8106606:	3718      	adds	r7, #24
 8106608:	46bd      	mov	sp, r7
 810660a:	bd80      	pop	{r7, pc}
 810660c:	fe00e800 	.word	0xfe00e800

08106610 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8106610:	b580      	push	{r7, lr}
 8106612:	b08a      	sub	sp, #40	@ 0x28
 8106614:	af00      	add	r7, sp, #0
 8106616:	60f8      	str	r0, [r7, #12]
 8106618:	60b9      	str	r1, [r7, #8]
 810661a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810661c:	2300      	movs	r3, #0
 810661e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8106622:	68fb      	ldr	r3, [r7, #12]
 8106624:	681b      	ldr	r3, [r3, #0]
 8106626:	699b      	ldr	r3, [r3, #24]
 8106628:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 810662a:	2300      	movs	r3, #0
 810662c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 810662e:	687b      	ldr	r3, [r7, #4]
 8106630:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8106632:	69bb      	ldr	r3, [r7, #24]
 8106634:	f003 0310 	and.w	r3, r3, #16
 8106638:	2b00      	cmp	r3, #0
 810663a:	d068      	beq.n	810670e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810663c:	68fb      	ldr	r3, [r7, #12]
 810663e:	681b      	ldr	r3, [r3, #0]
 8106640:	2210      	movs	r2, #16
 8106642:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8106644:	e049      	b.n	81066da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8106646:	68bb      	ldr	r3, [r7, #8]
 8106648:	f1b3 3fff 	cmp.w	r3, #4294967295
 810664c:	d045      	beq.n	81066da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 810664e:	f7fd fb49 	bl	8103ce4 <HAL_GetTick>
 8106652:	4602      	mov	r2, r0
 8106654:	69fb      	ldr	r3, [r7, #28]
 8106656:	1ad3      	subs	r3, r2, r3
 8106658:	68ba      	ldr	r2, [r7, #8]
 810665a:	429a      	cmp	r2, r3
 810665c:	d302      	bcc.n	8106664 <I2C_IsErrorOccurred+0x54>
 810665e:	68bb      	ldr	r3, [r7, #8]
 8106660:	2b00      	cmp	r3, #0
 8106662:	d13a      	bne.n	81066da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8106664:	68fb      	ldr	r3, [r7, #12]
 8106666:	681b      	ldr	r3, [r3, #0]
 8106668:	685b      	ldr	r3, [r3, #4]
 810666a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810666e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8106670:	68fb      	ldr	r3, [r7, #12]
 8106672:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8106676:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8106678:	68fb      	ldr	r3, [r7, #12]
 810667a:	681b      	ldr	r3, [r3, #0]
 810667c:	699b      	ldr	r3, [r3, #24]
 810667e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8106682:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8106686:	d121      	bne.n	81066cc <I2C_IsErrorOccurred+0xbc>
 8106688:	697b      	ldr	r3, [r7, #20]
 810668a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810668e:	d01d      	beq.n	81066cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8106690:	7cfb      	ldrb	r3, [r7, #19]
 8106692:	2b20      	cmp	r3, #32
 8106694:	d01a      	beq.n	81066cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8106696:	68fb      	ldr	r3, [r7, #12]
 8106698:	681b      	ldr	r3, [r3, #0]
 810669a:	685a      	ldr	r2, [r3, #4]
 810669c:	68fb      	ldr	r3, [r7, #12]
 810669e:	681b      	ldr	r3, [r3, #0]
 81066a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 81066a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 81066a6:	f7fd fb1d 	bl	8103ce4 <HAL_GetTick>
 81066aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81066ac:	e00e      	b.n	81066cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 81066ae:	f7fd fb19 	bl	8103ce4 <HAL_GetTick>
 81066b2:	4602      	mov	r2, r0
 81066b4:	69fb      	ldr	r3, [r7, #28]
 81066b6:	1ad3      	subs	r3, r2, r3
 81066b8:	2b19      	cmp	r3, #25
 81066ba:	d907      	bls.n	81066cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 81066bc:	6a3b      	ldr	r3, [r7, #32]
 81066be:	f043 0320 	orr.w	r3, r3, #32
 81066c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 81066c4:	2301      	movs	r3, #1
 81066c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 81066ca:	e006      	b.n	81066da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81066cc:	68fb      	ldr	r3, [r7, #12]
 81066ce:	681b      	ldr	r3, [r3, #0]
 81066d0:	699b      	ldr	r3, [r3, #24]
 81066d2:	f003 0320 	and.w	r3, r3, #32
 81066d6:	2b20      	cmp	r3, #32
 81066d8:	d1e9      	bne.n	81066ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81066da:	68fb      	ldr	r3, [r7, #12]
 81066dc:	681b      	ldr	r3, [r3, #0]
 81066de:	699b      	ldr	r3, [r3, #24]
 81066e0:	f003 0320 	and.w	r3, r3, #32
 81066e4:	2b20      	cmp	r3, #32
 81066e6:	d003      	beq.n	81066f0 <I2C_IsErrorOccurred+0xe0>
 81066e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81066ec:	2b00      	cmp	r3, #0
 81066ee:	d0aa      	beq.n	8106646 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 81066f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81066f4:	2b00      	cmp	r3, #0
 81066f6:	d103      	bne.n	8106700 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81066f8:	68fb      	ldr	r3, [r7, #12]
 81066fa:	681b      	ldr	r3, [r3, #0]
 81066fc:	2220      	movs	r2, #32
 81066fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8106700:	6a3b      	ldr	r3, [r7, #32]
 8106702:	f043 0304 	orr.w	r3, r3, #4
 8106706:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8106708:	2301      	movs	r3, #1
 810670a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 810670e:	68fb      	ldr	r3, [r7, #12]
 8106710:	681b      	ldr	r3, [r3, #0]
 8106712:	699b      	ldr	r3, [r3, #24]
 8106714:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8106716:	69bb      	ldr	r3, [r7, #24]
 8106718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810671c:	2b00      	cmp	r3, #0
 810671e:	d00b      	beq.n	8106738 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8106720:	6a3b      	ldr	r3, [r7, #32]
 8106722:	f043 0301 	orr.w	r3, r3, #1
 8106726:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8106728:	68fb      	ldr	r3, [r7, #12]
 810672a:	681b      	ldr	r3, [r3, #0]
 810672c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8106730:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8106732:	2301      	movs	r3, #1
 8106734:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8106738:	69bb      	ldr	r3, [r7, #24]
 810673a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810673e:	2b00      	cmp	r3, #0
 8106740:	d00b      	beq.n	810675a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8106742:	6a3b      	ldr	r3, [r7, #32]
 8106744:	f043 0308 	orr.w	r3, r3, #8
 8106748:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 810674a:	68fb      	ldr	r3, [r7, #12]
 810674c:	681b      	ldr	r3, [r3, #0]
 810674e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8106752:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8106754:	2301      	movs	r3, #1
 8106756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 810675a:	69bb      	ldr	r3, [r7, #24]
 810675c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8106760:	2b00      	cmp	r3, #0
 8106762:	d00b      	beq.n	810677c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8106764:	6a3b      	ldr	r3, [r7, #32]
 8106766:	f043 0302 	orr.w	r3, r3, #2
 810676a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 810676c:	68fb      	ldr	r3, [r7, #12]
 810676e:	681b      	ldr	r3, [r3, #0]
 8106770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8106774:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8106776:	2301      	movs	r3, #1
 8106778:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 810677c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8106780:	2b00      	cmp	r3, #0
 8106782:	d01c      	beq.n	81067be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8106784:	68f8      	ldr	r0, [r7, #12]
 8106786:	f7ff fdaf 	bl	81062e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810678a:	68fb      	ldr	r3, [r7, #12]
 810678c:	681b      	ldr	r3, [r3, #0]
 810678e:	6859      	ldr	r1, [r3, #4]
 8106790:	68fb      	ldr	r3, [r7, #12]
 8106792:	681a      	ldr	r2, [r3, #0]
 8106794:	4b0d      	ldr	r3, [pc, #52]	@ (81067cc <I2C_IsErrorOccurred+0x1bc>)
 8106796:	400b      	ands	r3, r1
 8106798:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 810679a:	68fb      	ldr	r3, [r7, #12]
 810679c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810679e:	6a3b      	ldr	r3, [r7, #32]
 81067a0:	431a      	orrs	r2, r3
 81067a2:	68fb      	ldr	r3, [r7, #12]
 81067a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 81067a6:	68fb      	ldr	r3, [r7, #12]
 81067a8:	2220      	movs	r2, #32
 81067aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81067ae:	68fb      	ldr	r3, [r7, #12]
 81067b0:	2200      	movs	r2, #0
 81067b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81067b6:	68fb      	ldr	r3, [r7, #12]
 81067b8:	2200      	movs	r2, #0
 81067ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 81067be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 81067c2:	4618      	mov	r0, r3
 81067c4:	3728      	adds	r7, #40	@ 0x28
 81067c6:	46bd      	mov	sp, r7
 81067c8:	bd80      	pop	{r7, pc}
 81067ca:	bf00      	nop
 81067cc:	fe00e800 	.word	0xfe00e800

081067d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81067d0:	b480      	push	{r7}
 81067d2:	b087      	sub	sp, #28
 81067d4:	af00      	add	r7, sp, #0
 81067d6:	60f8      	str	r0, [r7, #12]
 81067d8:	607b      	str	r3, [r7, #4]
 81067da:	460b      	mov	r3, r1
 81067dc:	817b      	strh	r3, [r7, #10]
 81067de:	4613      	mov	r3, r2
 81067e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81067e2:	897b      	ldrh	r3, [r7, #10]
 81067e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81067e8:	7a7b      	ldrb	r3, [r7, #9]
 81067ea:	041b      	lsls	r3, r3, #16
 81067ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81067f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81067f2:	687b      	ldr	r3, [r7, #4]
 81067f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81067f6:	6a3b      	ldr	r3, [r7, #32]
 81067f8:	4313      	orrs	r3, r2
 81067fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81067fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8106800:	68fb      	ldr	r3, [r7, #12]
 8106802:	681b      	ldr	r3, [r3, #0]
 8106804:	685a      	ldr	r2, [r3, #4]
 8106806:	6a3b      	ldr	r3, [r7, #32]
 8106808:	0d5b      	lsrs	r3, r3, #21
 810680a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 810680e:	4b08      	ldr	r3, [pc, #32]	@ (8106830 <I2C_TransferConfig+0x60>)
 8106810:	430b      	orrs	r3, r1
 8106812:	43db      	mvns	r3, r3
 8106814:	ea02 0103 	and.w	r1, r2, r3
 8106818:	68fb      	ldr	r3, [r7, #12]
 810681a:	681b      	ldr	r3, [r3, #0]
 810681c:	697a      	ldr	r2, [r7, #20]
 810681e:	430a      	orrs	r2, r1
 8106820:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8106822:	bf00      	nop
 8106824:	371c      	adds	r7, #28
 8106826:	46bd      	mov	sp, r7
 8106828:	f85d 7b04 	ldr.w	r7, [sp], #4
 810682c:	4770      	bx	lr
 810682e:	bf00      	nop
 8106830:	03ff63ff 	.word	0x03ff63ff

08106834 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8106834:	b480      	push	{r7}
 8106836:	b083      	sub	sp, #12
 8106838:	af00      	add	r7, sp, #0
 810683a:	6078      	str	r0, [r7, #4]
 810683c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810683e:	687b      	ldr	r3, [r7, #4]
 8106840:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106844:	b2db      	uxtb	r3, r3
 8106846:	2b20      	cmp	r3, #32
 8106848:	d138      	bne.n	81068bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810684a:	687b      	ldr	r3, [r7, #4]
 810684c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8106850:	2b01      	cmp	r3, #1
 8106852:	d101      	bne.n	8106858 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8106854:	2302      	movs	r3, #2
 8106856:	e032      	b.n	81068be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8106858:	687b      	ldr	r3, [r7, #4]
 810685a:	2201      	movs	r2, #1
 810685c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8106860:	687b      	ldr	r3, [r7, #4]
 8106862:	2224      	movs	r2, #36	@ 0x24
 8106864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8106868:	687b      	ldr	r3, [r7, #4]
 810686a:	681b      	ldr	r3, [r3, #0]
 810686c:	681a      	ldr	r2, [r3, #0]
 810686e:	687b      	ldr	r3, [r7, #4]
 8106870:	681b      	ldr	r3, [r3, #0]
 8106872:	f022 0201 	bic.w	r2, r2, #1
 8106876:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8106878:	687b      	ldr	r3, [r7, #4]
 810687a:	681b      	ldr	r3, [r3, #0]
 810687c:	681a      	ldr	r2, [r3, #0]
 810687e:	687b      	ldr	r3, [r7, #4]
 8106880:	681b      	ldr	r3, [r3, #0]
 8106882:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8106886:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8106888:	687b      	ldr	r3, [r7, #4]
 810688a:	681b      	ldr	r3, [r3, #0]
 810688c:	6819      	ldr	r1, [r3, #0]
 810688e:	687b      	ldr	r3, [r7, #4]
 8106890:	681b      	ldr	r3, [r3, #0]
 8106892:	683a      	ldr	r2, [r7, #0]
 8106894:	430a      	orrs	r2, r1
 8106896:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8106898:	687b      	ldr	r3, [r7, #4]
 810689a:	681b      	ldr	r3, [r3, #0]
 810689c:	681a      	ldr	r2, [r3, #0]
 810689e:	687b      	ldr	r3, [r7, #4]
 81068a0:	681b      	ldr	r3, [r3, #0]
 81068a2:	f042 0201 	orr.w	r2, r2, #1
 81068a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81068a8:	687b      	ldr	r3, [r7, #4]
 81068aa:	2220      	movs	r2, #32
 81068ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81068b0:	687b      	ldr	r3, [r7, #4]
 81068b2:	2200      	movs	r2, #0
 81068b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81068b8:	2300      	movs	r3, #0
 81068ba:	e000      	b.n	81068be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81068bc:	2302      	movs	r3, #2
  }
}
 81068be:	4618      	mov	r0, r3
 81068c0:	370c      	adds	r7, #12
 81068c2:	46bd      	mov	sp, r7
 81068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068c8:	4770      	bx	lr

081068ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81068ca:	b480      	push	{r7}
 81068cc:	b085      	sub	sp, #20
 81068ce:	af00      	add	r7, sp, #0
 81068d0:	6078      	str	r0, [r7, #4]
 81068d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81068d4:	687b      	ldr	r3, [r7, #4]
 81068d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81068da:	b2db      	uxtb	r3, r3
 81068dc:	2b20      	cmp	r3, #32
 81068de:	d139      	bne.n	8106954 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81068e0:	687b      	ldr	r3, [r7, #4]
 81068e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81068e6:	2b01      	cmp	r3, #1
 81068e8:	d101      	bne.n	81068ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81068ea:	2302      	movs	r3, #2
 81068ec:	e033      	b.n	8106956 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81068ee:	687b      	ldr	r3, [r7, #4]
 81068f0:	2201      	movs	r2, #1
 81068f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81068f6:	687b      	ldr	r3, [r7, #4]
 81068f8:	2224      	movs	r2, #36	@ 0x24
 81068fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81068fe:	687b      	ldr	r3, [r7, #4]
 8106900:	681b      	ldr	r3, [r3, #0]
 8106902:	681a      	ldr	r2, [r3, #0]
 8106904:	687b      	ldr	r3, [r7, #4]
 8106906:	681b      	ldr	r3, [r3, #0]
 8106908:	f022 0201 	bic.w	r2, r2, #1
 810690c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810690e:	687b      	ldr	r3, [r7, #4]
 8106910:	681b      	ldr	r3, [r3, #0]
 8106912:	681b      	ldr	r3, [r3, #0]
 8106914:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8106916:	68fb      	ldr	r3, [r7, #12]
 8106918:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810691c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810691e:	683b      	ldr	r3, [r7, #0]
 8106920:	021b      	lsls	r3, r3, #8
 8106922:	68fa      	ldr	r2, [r7, #12]
 8106924:	4313      	orrs	r3, r2
 8106926:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8106928:	687b      	ldr	r3, [r7, #4]
 810692a:	681b      	ldr	r3, [r3, #0]
 810692c:	68fa      	ldr	r2, [r7, #12]
 810692e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8106930:	687b      	ldr	r3, [r7, #4]
 8106932:	681b      	ldr	r3, [r3, #0]
 8106934:	681a      	ldr	r2, [r3, #0]
 8106936:	687b      	ldr	r3, [r7, #4]
 8106938:	681b      	ldr	r3, [r3, #0]
 810693a:	f042 0201 	orr.w	r2, r2, #1
 810693e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8106940:	687b      	ldr	r3, [r7, #4]
 8106942:	2220      	movs	r2, #32
 8106944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8106948:	687b      	ldr	r3, [r7, #4]
 810694a:	2200      	movs	r2, #0
 810694c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8106950:	2300      	movs	r3, #0
 8106952:	e000      	b.n	8106956 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8106954:	2302      	movs	r3, #2
  }
}
 8106956:	4618      	mov	r0, r3
 8106958:	3714      	adds	r7, #20
 810695a:	46bd      	mov	sp, r7
 810695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106960:	4770      	bx	lr
	...

08106964 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8106964:	b580      	push	{r7, lr}
 8106966:	b084      	sub	sp, #16
 8106968:	af00      	add	r7, sp, #0
 810696a:	60f8      	str	r0, [r7, #12]
 810696c:	460b      	mov	r3, r1
 810696e:	607a      	str	r2, [r7, #4]
 8106970:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8106972:	4b37      	ldr	r3, [pc, #220]	@ (8106a50 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106974:	681b      	ldr	r3, [r3, #0]
 8106976:	f023 0201 	bic.w	r2, r3, #1
 810697a:	4935      	ldr	r1, [pc, #212]	@ (8106a50 <HAL_PWREx_EnterSTOPMode+0xec>)
 810697c:	68fb      	ldr	r3, [r7, #12]
 810697e:	4313      	orrs	r3, r2
 8106980:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8106982:	687b      	ldr	r3, [r7, #4]
 8106984:	2b00      	cmp	r3, #0
 8106986:	d123      	bne.n	81069d0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8106988:	f7fe ffe0 	bl	810594c <HAL_GetCurrentCPUID>
 810698c:	4603      	mov	r3, r0
 810698e:	2b03      	cmp	r3, #3
 8106990:	d158      	bne.n	8106a44 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8106992:	4b2f      	ldr	r3, [pc, #188]	@ (8106a50 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106994:	691b      	ldr	r3, [r3, #16]
 8106996:	4a2e      	ldr	r2, [pc, #184]	@ (8106a50 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106998:	f023 0301 	bic.w	r3, r3, #1
 810699c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810699e:	4b2d      	ldr	r3, [pc, #180]	@ (8106a54 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81069a0:	691b      	ldr	r3, [r3, #16]
 81069a2:	4a2c      	ldr	r2, [pc, #176]	@ (8106a54 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81069a4:	f043 0304 	orr.w	r3, r3, #4
 81069a8:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81069aa:	f3bf 8f4f 	dsb	sy
}
 81069ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81069b0:	f3bf 8f6f 	isb	sy
}
 81069b4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81069b6:	7afb      	ldrb	r3, [r7, #11]
 81069b8:	2b01      	cmp	r3, #1
 81069ba:	d101      	bne.n	81069c0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81069bc:	bf30      	wfi
 81069be:	e000      	b.n	81069c2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81069c0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81069c2:	4b24      	ldr	r3, [pc, #144]	@ (8106a54 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81069c4:	691b      	ldr	r3, [r3, #16]
 81069c6:	4a23      	ldr	r2, [pc, #140]	@ (8106a54 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81069c8:	f023 0304 	bic.w	r3, r3, #4
 81069cc:	6113      	str	r3, [r2, #16]
 81069ce:	e03c      	b.n	8106a4a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81069d0:	687b      	ldr	r3, [r7, #4]
 81069d2:	2b01      	cmp	r3, #1
 81069d4:	d123      	bne.n	8106a1e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81069d6:	f7fe ffb9 	bl	810594c <HAL_GetCurrentCPUID>
 81069da:	4603      	mov	r3, r0
 81069dc:	2b01      	cmp	r3, #1
 81069de:	d133      	bne.n	8106a48 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81069e0:	4b1b      	ldr	r3, [pc, #108]	@ (8106a50 <HAL_PWREx_EnterSTOPMode+0xec>)
 81069e2:	695b      	ldr	r3, [r3, #20]
 81069e4:	4a1a      	ldr	r2, [pc, #104]	@ (8106a50 <HAL_PWREx_EnterSTOPMode+0xec>)
 81069e6:	f023 0302 	bic.w	r3, r3, #2
 81069ea:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81069ec:	4b19      	ldr	r3, [pc, #100]	@ (8106a54 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81069ee:	691b      	ldr	r3, [r3, #16]
 81069f0:	4a18      	ldr	r2, [pc, #96]	@ (8106a54 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81069f2:	f043 0304 	orr.w	r3, r3, #4
 81069f6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81069f8:	f3bf 8f4f 	dsb	sy
}
 81069fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81069fe:	f3bf 8f6f 	isb	sy
}
 8106a02:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8106a04:	7afb      	ldrb	r3, [r7, #11]
 8106a06:	2b01      	cmp	r3, #1
 8106a08:	d101      	bne.n	8106a0e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106a0a:	bf30      	wfi
 8106a0c:	e000      	b.n	8106a10 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8106a0e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106a10:	4b10      	ldr	r3, [pc, #64]	@ (8106a54 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106a12:	691b      	ldr	r3, [r3, #16]
 8106a14:	4a0f      	ldr	r2, [pc, #60]	@ (8106a54 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106a16:	f023 0304 	bic.w	r3, r3, #4
 8106a1a:	6113      	str	r3, [r2, #16]
 8106a1c:	e015      	b.n	8106a4a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8106a1e:	f7fe ff95 	bl	810594c <HAL_GetCurrentCPUID>
 8106a22:	4603      	mov	r3, r0
 8106a24:	2b03      	cmp	r3, #3
 8106a26:	d106      	bne.n	8106a36 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8106a28:	4b09      	ldr	r3, [pc, #36]	@ (8106a50 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106a2a:	691b      	ldr	r3, [r3, #16]
 8106a2c:	4a08      	ldr	r2, [pc, #32]	@ (8106a50 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106a2e:	f023 0304 	bic.w	r3, r3, #4
 8106a32:	6113      	str	r3, [r2, #16]
 8106a34:	e009      	b.n	8106a4a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8106a36:	4b06      	ldr	r3, [pc, #24]	@ (8106a50 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106a38:	695b      	ldr	r3, [r3, #20]
 8106a3a:	4a05      	ldr	r2, [pc, #20]	@ (8106a50 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106a3c:	f023 0304 	bic.w	r3, r3, #4
 8106a40:	6153      	str	r3, [r2, #20]
 8106a42:	e002      	b.n	8106a4a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8106a44:	bf00      	nop
 8106a46:	e000      	b.n	8106a4a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8106a48:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8106a4a:	3710      	adds	r7, #16
 8106a4c:	46bd      	mov	sp, r7
 8106a4e:	bd80      	pop	{r7, pc}
 8106a50:	58024800 	.word	0x58024800
 8106a54:	e000ed00 	.word	0xe000ed00

08106a58 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8106a58:	b580      	push	{r7, lr}
 8106a5a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8106a5c:	f7fe ff76 	bl	810594c <HAL_GetCurrentCPUID>
 8106a60:	4603      	mov	r3, r0
 8106a62:	2b03      	cmp	r3, #3
 8106a64:	d101      	bne.n	8106a6a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8106a66:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8106a68:	e001      	b.n	8106a6e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8106a6a:	bf40      	sev
    __WFE ();
 8106a6c:	bf20      	wfe
}
 8106a6e:	bf00      	nop
 8106a70:	bd80      	pop	{r7, pc}
	...

08106a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8106a74:	b480      	push	{r7}
 8106a76:	b089      	sub	sp, #36	@ 0x24
 8106a78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8106a7a:	4bb3      	ldr	r3, [pc, #716]	@ (8106d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106a7c:	691b      	ldr	r3, [r3, #16]
 8106a7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8106a82:	2b18      	cmp	r3, #24
 8106a84:	f200 8155 	bhi.w	8106d32 <HAL_RCC_GetSysClockFreq+0x2be>
 8106a88:	a201      	add	r2, pc, #4	@ (adr r2, 8106a90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8106a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106a8e:	bf00      	nop
 8106a90:	08106af5 	.word	0x08106af5
 8106a94:	08106d33 	.word	0x08106d33
 8106a98:	08106d33 	.word	0x08106d33
 8106a9c:	08106d33 	.word	0x08106d33
 8106aa0:	08106d33 	.word	0x08106d33
 8106aa4:	08106d33 	.word	0x08106d33
 8106aa8:	08106d33 	.word	0x08106d33
 8106aac:	08106d33 	.word	0x08106d33
 8106ab0:	08106b1b 	.word	0x08106b1b
 8106ab4:	08106d33 	.word	0x08106d33
 8106ab8:	08106d33 	.word	0x08106d33
 8106abc:	08106d33 	.word	0x08106d33
 8106ac0:	08106d33 	.word	0x08106d33
 8106ac4:	08106d33 	.word	0x08106d33
 8106ac8:	08106d33 	.word	0x08106d33
 8106acc:	08106d33 	.word	0x08106d33
 8106ad0:	08106b21 	.word	0x08106b21
 8106ad4:	08106d33 	.word	0x08106d33
 8106ad8:	08106d33 	.word	0x08106d33
 8106adc:	08106d33 	.word	0x08106d33
 8106ae0:	08106d33 	.word	0x08106d33
 8106ae4:	08106d33 	.word	0x08106d33
 8106ae8:	08106d33 	.word	0x08106d33
 8106aec:	08106d33 	.word	0x08106d33
 8106af0:	08106b27 	.word	0x08106b27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106af4:	4b94      	ldr	r3, [pc, #592]	@ (8106d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106af6:	681b      	ldr	r3, [r3, #0]
 8106af8:	f003 0320 	and.w	r3, r3, #32
 8106afc:	2b00      	cmp	r3, #0
 8106afe:	d009      	beq.n	8106b14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106b00:	4b91      	ldr	r3, [pc, #580]	@ (8106d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106b02:	681b      	ldr	r3, [r3, #0]
 8106b04:	08db      	lsrs	r3, r3, #3
 8106b06:	f003 0303 	and.w	r3, r3, #3
 8106b0a:	4a90      	ldr	r2, [pc, #576]	@ (8106d4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8106b10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8106b12:	e111      	b.n	8106d38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8106b14:	4b8d      	ldr	r3, [pc, #564]	@ (8106d4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106b16:	61bb      	str	r3, [r7, #24]
      break;
 8106b18:	e10e      	b.n	8106d38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8106b1a:	4b8d      	ldr	r3, [pc, #564]	@ (8106d50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106b1c:	61bb      	str	r3, [r7, #24]
      break;
 8106b1e:	e10b      	b.n	8106d38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8106b20:	4b8c      	ldr	r3, [pc, #560]	@ (8106d54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8106b22:	61bb      	str	r3, [r7, #24]
      break;
 8106b24:	e108      	b.n	8106d38 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106b26:	4b88      	ldr	r3, [pc, #544]	@ (8106d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106b2a:	f003 0303 	and.w	r3, r3, #3
 8106b2e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8106b30:	4b85      	ldr	r3, [pc, #532]	@ (8106d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106b34:	091b      	lsrs	r3, r3, #4
 8106b36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106b3a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8106b3c:	4b82      	ldr	r3, [pc, #520]	@ (8106d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106b40:	f003 0301 	and.w	r3, r3, #1
 8106b44:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8106b46:	4b80      	ldr	r3, [pc, #512]	@ (8106d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106b4a:	08db      	lsrs	r3, r3, #3
 8106b4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106b50:	68fa      	ldr	r2, [r7, #12]
 8106b52:	fb02 f303 	mul.w	r3, r2, r3
 8106b56:	ee07 3a90 	vmov	s15, r3
 8106b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b5e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8106b62:	693b      	ldr	r3, [r7, #16]
 8106b64:	2b00      	cmp	r3, #0
 8106b66:	f000 80e1 	beq.w	8106d2c <HAL_RCC_GetSysClockFreq+0x2b8>
 8106b6a:	697b      	ldr	r3, [r7, #20]
 8106b6c:	2b02      	cmp	r3, #2
 8106b6e:	f000 8083 	beq.w	8106c78 <HAL_RCC_GetSysClockFreq+0x204>
 8106b72:	697b      	ldr	r3, [r7, #20]
 8106b74:	2b02      	cmp	r3, #2
 8106b76:	f200 80a1 	bhi.w	8106cbc <HAL_RCC_GetSysClockFreq+0x248>
 8106b7a:	697b      	ldr	r3, [r7, #20]
 8106b7c:	2b00      	cmp	r3, #0
 8106b7e:	d003      	beq.n	8106b88 <HAL_RCC_GetSysClockFreq+0x114>
 8106b80:	697b      	ldr	r3, [r7, #20]
 8106b82:	2b01      	cmp	r3, #1
 8106b84:	d056      	beq.n	8106c34 <HAL_RCC_GetSysClockFreq+0x1c0>
 8106b86:	e099      	b.n	8106cbc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106b88:	4b6f      	ldr	r3, [pc, #444]	@ (8106d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106b8a:	681b      	ldr	r3, [r3, #0]
 8106b8c:	f003 0320 	and.w	r3, r3, #32
 8106b90:	2b00      	cmp	r3, #0
 8106b92:	d02d      	beq.n	8106bf0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106b94:	4b6c      	ldr	r3, [pc, #432]	@ (8106d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106b96:	681b      	ldr	r3, [r3, #0]
 8106b98:	08db      	lsrs	r3, r3, #3
 8106b9a:	f003 0303 	and.w	r3, r3, #3
 8106b9e:	4a6b      	ldr	r2, [pc, #428]	@ (8106d4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8106ba4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106ba6:	687b      	ldr	r3, [r7, #4]
 8106ba8:	ee07 3a90 	vmov	s15, r3
 8106bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106bb0:	693b      	ldr	r3, [r7, #16]
 8106bb2:	ee07 3a90 	vmov	s15, r3
 8106bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106bbe:	4b62      	ldr	r3, [pc, #392]	@ (8106d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106bc6:	ee07 3a90 	vmov	s15, r3
 8106bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106bce:	ed97 6a02 	vldr	s12, [r7, #8]
 8106bd2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8106d58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106bea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8106bee:	e087      	b.n	8106d00 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106bf0:	693b      	ldr	r3, [r7, #16]
 8106bf2:	ee07 3a90 	vmov	s15, r3
 8106bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106bfa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8106d5c <HAL_RCC_GetSysClockFreq+0x2e8>
 8106bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106c02:	4b51      	ldr	r3, [pc, #324]	@ (8106d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106c0a:	ee07 3a90 	vmov	s15, r3
 8106c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106c12:	ed97 6a02 	vldr	s12, [r7, #8]
 8106c16:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8106d58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106c2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106c32:	e065      	b.n	8106d00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106c34:	693b      	ldr	r3, [r7, #16]
 8106c36:	ee07 3a90 	vmov	s15, r3
 8106c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c3e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8106d60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8106c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106c46:	4b40      	ldr	r3, [pc, #256]	@ (8106d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106c4e:	ee07 3a90 	vmov	s15, r3
 8106c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8106c5a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8106d58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106c72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106c76:	e043      	b.n	8106d00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106c78:	693b      	ldr	r3, [r7, #16]
 8106c7a:	ee07 3a90 	vmov	s15, r3
 8106c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c82:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8106d64 <HAL_RCC_GetSysClockFreq+0x2f0>
 8106c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8106d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106c92:	ee07 3a90 	vmov	s15, r3
 8106c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8106c9e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8106d58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106cb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106cba:	e021      	b.n	8106d00 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106cbc:	693b      	ldr	r3, [r7, #16]
 8106cbe:	ee07 3a90 	vmov	s15, r3
 8106cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106cc6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8106d60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8106cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106cce:	4b1e      	ldr	r3, [pc, #120]	@ (8106d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106cd6:	ee07 3a90 	vmov	s15, r3
 8106cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106cde:	ed97 6a02 	vldr	s12, [r7, #8]
 8106ce2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8106d58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106cfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106cfe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8106d00:	4b11      	ldr	r3, [pc, #68]	@ (8106d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106d04:	0a5b      	lsrs	r3, r3, #9
 8106d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106d0a:	3301      	adds	r3, #1
 8106d0c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8106d0e:	683b      	ldr	r3, [r7, #0]
 8106d10:	ee07 3a90 	vmov	s15, r3
 8106d14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8106d18:	edd7 6a07 	vldr	s13, [r7, #28]
 8106d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106d20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106d24:	ee17 3a90 	vmov	r3, s15
 8106d28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8106d2a:	e005      	b.n	8106d38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8106d2c:	2300      	movs	r3, #0
 8106d2e:	61bb      	str	r3, [r7, #24]
      break;
 8106d30:	e002      	b.n	8106d38 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8106d32:	4b07      	ldr	r3, [pc, #28]	@ (8106d50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106d34:	61bb      	str	r3, [r7, #24]
      break;
 8106d36:	bf00      	nop
  }

  return sysclockfreq;
 8106d38:	69bb      	ldr	r3, [r7, #24]
}
 8106d3a:	4618      	mov	r0, r3
 8106d3c:	3724      	adds	r7, #36	@ 0x24
 8106d3e:	46bd      	mov	sp, r7
 8106d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d44:	4770      	bx	lr
 8106d46:	bf00      	nop
 8106d48:	58024400 	.word	0x58024400
 8106d4c:	03d09000 	.word	0x03d09000
 8106d50:	003d0900 	.word	0x003d0900
 8106d54:	007a1200 	.word	0x007a1200
 8106d58:	46000000 	.word	0x46000000
 8106d5c:	4c742400 	.word	0x4c742400
 8106d60:	4a742400 	.word	0x4a742400
 8106d64:	4af42400 	.word	0x4af42400

08106d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8106d68:	b580      	push	{r7, lr}
 8106d6a:	b082      	sub	sp, #8
 8106d6c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8106d6e:	f7ff fe81 	bl	8106a74 <HAL_RCC_GetSysClockFreq>
 8106d72:	4602      	mov	r2, r0
 8106d74:	4b11      	ldr	r3, [pc, #68]	@ (8106dbc <HAL_RCC_GetHCLKFreq+0x54>)
 8106d76:	699b      	ldr	r3, [r3, #24]
 8106d78:	0a1b      	lsrs	r3, r3, #8
 8106d7a:	f003 030f 	and.w	r3, r3, #15
 8106d7e:	4910      	ldr	r1, [pc, #64]	@ (8106dc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8106d80:	5ccb      	ldrb	r3, [r1, r3]
 8106d82:	f003 031f 	and.w	r3, r3, #31
 8106d86:	fa22 f303 	lsr.w	r3, r2, r3
 8106d8a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8106dbc <HAL_RCC_GetHCLKFreq+0x54>)
 8106d8e:	699b      	ldr	r3, [r3, #24]
 8106d90:	f003 030f 	and.w	r3, r3, #15
 8106d94:	4a0a      	ldr	r2, [pc, #40]	@ (8106dc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8106d96:	5cd3      	ldrb	r3, [r2, r3]
 8106d98:	f003 031f 	and.w	r3, r3, #31
 8106d9c:	687a      	ldr	r2, [r7, #4]
 8106d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8106da2:	4a08      	ldr	r2, [pc, #32]	@ (8106dc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106da4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8106da6:	4b07      	ldr	r3, [pc, #28]	@ (8106dc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106da8:	681b      	ldr	r3, [r3, #0]
 8106daa:	4a07      	ldr	r2, [pc, #28]	@ (8106dc8 <HAL_RCC_GetHCLKFreq+0x60>)
 8106dac:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8106dae:	4b05      	ldr	r3, [pc, #20]	@ (8106dc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106db0:	681b      	ldr	r3, [r3, #0]
}
 8106db2:	4618      	mov	r0, r3
 8106db4:	3708      	adds	r7, #8
 8106db6:	46bd      	mov	sp, r7
 8106db8:	bd80      	pop	{r7, pc}
 8106dba:	bf00      	nop
 8106dbc:	58024400 	.word	0x58024400
 8106dc0:	081117a0 	.word	0x081117a0
 8106dc4:	10000004 	.word	0x10000004
 8106dc8:	10000000 	.word	0x10000000

08106dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8106dcc:	b580      	push	{r7, lr}
 8106dce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8106dd0:	f7ff ffca 	bl	8106d68 <HAL_RCC_GetHCLKFreq>
 8106dd4:	4602      	mov	r2, r0
 8106dd6:	4b06      	ldr	r3, [pc, #24]	@ (8106df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8106dd8:	69db      	ldr	r3, [r3, #28]
 8106dda:	091b      	lsrs	r3, r3, #4
 8106ddc:	f003 0307 	and.w	r3, r3, #7
 8106de0:	4904      	ldr	r1, [pc, #16]	@ (8106df4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8106de2:	5ccb      	ldrb	r3, [r1, r3]
 8106de4:	f003 031f 	and.w	r3, r3, #31
 8106de8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8106dec:	4618      	mov	r0, r3
 8106dee:	bd80      	pop	{r7, pc}
 8106df0:	58024400 	.word	0x58024400
 8106df4:	081117a0 	.word	0x081117a0

08106df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8106df8:	b580      	push	{r7, lr}
 8106dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8106dfc:	f7ff ffb4 	bl	8106d68 <HAL_RCC_GetHCLKFreq>
 8106e00:	4602      	mov	r2, r0
 8106e02:	4b06      	ldr	r3, [pc, #24]	@ (8106e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8106e04:	69db      	ldr	r3, [r3, #28]
 8106e06:	0a1b      	lsrs	r3, r3, #8
 8106e08:	f003 0307 	and.w	r3, r3, #7
 8106e0c:	4904      	ldr	r1, [pc, #16]	@ (8106e20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8106e0e:	5ccb      	ldrb	r3, [r1, r3]
 8106e10:	f003 031f 	and.w	r3, r3, #31
 8106e14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8106e18:	4618      	mov	r0, r3
 8106e1a:	bd80      	pop	{r7, pc}
 8106e1c:	58024400 	.word	0x58024400
 8106e20:	081117a0 	.word	0x081117a0

08106e24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8106e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8106e28:	b0ca      	sub	sp, #296	@ 0x128
 8106e2a:	af00      	add	r7, sp, #0
 8106e2c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8106e30:	2300      	movs	r3, #0
 8106e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8106e36:	2300      	movs	r3, #0
 8106e38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8106e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106e44:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8106e48:	2500      	movs	r5, #0
 8106e4a:	ea54 0305 	orrs.w	r3, r4, r5
 8106e4e:	d049      	beq.n	8106ee4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8106e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106e56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106e5a:	d02f      	beq.n	8106ebc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8106e5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106e60:	d828      	bhi.n	8106eb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8106e62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106e66:	d01a      	beq.n	8106e9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8106e68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106e6c:	d822      	bhi.n	8106eb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8106e6e:	2b00      	cmp	r3, #0
 8106e70:	d003      	beq.n	8106e7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8106e72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8106e76:	d007      	beq.n	8106e88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8106e78:	e01c      	b.n	8106eb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106e7a:	4bb8      	ldr	r3, [pc, #736]	@ (810715c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106e7e:	4ab7      	ldr	r2, [pc, #732]	@ (810715c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106e84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106e86:	e01a      	b.n	8106ebe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e8c:	3308      	adds	r3, #8
 8106e8e:	2102      	movs	r1, #2
 8106e90:	4618      	mov	r0, r3
 8106e92:	f002 fb61 	bl	8109558 <RCCEx_PLL2_Config>
 8106e96:	4603      	mov	r3, r0
 8106e98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106e9c:	e00f      	b.n	8106ebe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ea2:	3328      	adds	r3, #40	@ 0x28
 8106ea4:	2102      	movs	r1, #2
 8106ea6:	4618      	mov	r0, r3
 8106ea8:	f002 fc08 	bl	81096bc <RCCEx_PLL3_Config>
 8106eac:	4603      	mov	r3, r0
 8106eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106eb2:	e004      	b.n	8106ebe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106eb4:	2301      	movs	r3, #1
 8106eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106eba:	e000      	b.n	8106ebe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8106ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106ec2:	2b00      	cmp	r3, #0
 8106ec4:	d10a      	bne.n	8106edc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8106ec6:	4ba5      	ldr	r3, [pc, #660]	@ (810715c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106eca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8106ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ed2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106ed4:	4aa1      	ldr	r2, [pc, #644]	@ (810715c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106ed6:	430b      	orrs	r3, r1
 8106ed8:	6513      	str	r3, [r2, #80]	@ 0x50
 8106eda:	e003      	b.n	8106ee4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106edc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106ee0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8106ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106eec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8106ef0:	f04f 0900 	mov.w	r9, #0
 8106ef4:	ea58 0309 	orrs.w	r3, r8, r9
 8106ef8:	d047      	beq.n	8106f8a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8106efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106f00:	2b04      	cmp	r3, #4
 8106f02:	d82a      	bhi.n	8106f5a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8106f04:	a201      	add	r2, pc, #4	@ (adr r2, 8106f0c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8106f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106f0a:	bf00      	nop
 8106f0c:	08106f21 	.word	0x08106f21
 8106f10:	08106f2f 	.word	0x08106f2f
 8106f14:	08106f45 	.word	0x08106f45
 8106f18:	08106f63 	.word	0x08106f63
 8106f1c:	08106f63 	.word	0x08106f63
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106f20:	4b8e      	ldr	r3, [pc, #568]	@ (810715c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106f24:	4a8d      	ldr	r2, [pc, #564]	@ (810715c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106f2c:	e01a      	b.n	8106f64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f32:	3308      	adds	r3, #8
 8106f34:	2100      	movs	r1, #0
 8106f36:	4618      	mov	r0, r3
 8106f38:	f002 fb0e 	bl	8109558 <RCCEx_PLL2_Config>
 8106f3c:	4603      	mov	r3, r0
 8106f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106f42:	e00f      	b.n	8106f64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f48:	3328      	adds	r3, #40	@ 0x28
 8106f4a:	2100      	movs	r1, #0
 8106f4c:	4618      	mov	r0, r3
 8106f4e:	f002 fbb5 	bl	81096bc <RCCEx_PLL3_Config>
 8106f52:	4603      	mov	r3, r0
 8106f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106f58:	e004      	b.n	8106f64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106f5a:	2301      	movs	r3, #1
 8106f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106f60:	e000      	b.n	8106f64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8106f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106f68:	2b00      	cmp	r3, #0
 8106f6a:	d10a      	bne.n	8106f82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8106f6c:	4b7b      	ldr	r3, [pc, #492]	@ (810715c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106f70:	f023 0107 	bic.w	r1, r3, #7
 8106f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106f7a:	4a78      	ldr	r2, [pc, #480]	@ (810715c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106f7c:	430b      	orrs	r3, r1
 8106f7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8106f80:	e003      	b.n	8106f8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106f86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8106f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106f92:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8106f96:	f04f 0b00 	mov.w	fp, #0
 8106f9a:	ea5a 030b 	orrs.w	r3, sl, fp
 8106f9e:	d04c      	beq.n	810703a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8106fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106fa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106faa:	d030      	beq.n	810700e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8106fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106fb0:	d829      	bhi.n	8107006 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8106fb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8106fb4:	d02d      	beq.n	8107012 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8106fb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8106fb8:	d825      	bhi.n	8107006 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8106fba:	2b80      	cmp	r3, #128	@ 0x80
 8106fbc:	d018      	beq.n	8106ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8106fbe:	2b80      	cmp	r3, #128	@ 0x80
 8106fc0:	d821      	bhi.n	8107006 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8106fc2:	2b00      	cmp	r3, #0
 8106fc4:	d002      	beq.n	8106fcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8106fc6:	2b40      	cmp	r3, #64	@ 0x40
 8106fc8:	d007      	beq.n	8106fda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8106fca:	e01c      	b.n	8107006 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106fcc:	4b63      	ldr	r3, [pc, #396]	@ (810715c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106fd0:	4a62      	ldr	r2, [pc, #392]	@ (810715c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106fd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106fd8:	e01c      	b.n	8107014 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fde:	3308      	adds	r3, #8
 8106fe0:	2100      	movs	r1, #0
 8106fe2:	4618      	mov	r0, r3
 8106fe4:	f002 fab8 	bl	8109558 <RCCEx_PLL2_Config>
 8106fe8:	4603      	mov	r3, r0
 8106fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106fee:	e011      	b.n	8107014 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ff4:	3328      	adds	r3, #40	@ 0x28
 8106ff6:	2100      	movs	r1, #0
 8106ff8:	4618      	mov	r0, r3
 8106ffa:	f002 fb5f 	bl	81096bc <RCCEx_PLL3_Config>
 8106ffe:	4603      	mov	r3, r0
 8107000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8107004:	e006      	b.n	8107014 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107006:	2301      	movs	r3, #1
 8107008:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810700c:	e002      	b.n	8107014 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810700e:	bf00      	nop
 8107010:	e000      	b.n	8107014 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8107012:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107014:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107018:	2b00      	cmp	r3, #0
 810701a:	d10a      	bne.n	8107032 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810701c:	4b4f      	ldr	r3, [pc, #316]	@ (810715c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810701e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107020:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8107024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810702a:	4a4c      	ldr	r2, [pc, #304]	@ (810715c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810702c:	430b      	orrs	r3, r1
 810702e:	6513      	str	r3, [r2, #80]	@ 0x50
 8107030:	e003      	b.n	810703a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810703a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107042:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8107046:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 810704a:	2300      	movs	r3, #0
 810704c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8107050:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8107054:	460b      	mov	r3, r1
 8107056:	4313      	orrs	r3, r2
 8107058:	d053      	beq.n	8107102 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810705a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810705e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8107062:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8107066:	d035      	beq.n	81070d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8107068:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810706c:	d82e      	bhi.n	81070cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810706e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8107072:	d031      	beq.n	81070d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8107074:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8107078:	d828      	bhi.n	81070cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810707a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810707e:	d01a      	beq.n	81070b6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8107080:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107084:	d822      	bhi.n	81070cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8107086:	2b00      	cmp	r3, #0
 8107088:	d003      	beq.n	8107092 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810708a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810708e:	d007      	beq.n	81070a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8107090:	e01c      	b.n	81070cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107092:	4b32      	ldr	r3, [pc, #200]	@ (810715c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107096:	4a31      	ldr	r2, [pc, #196]	@ (810715c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810709c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810709e:	e01c      	b.n	81070da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81070a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070a4:	3308      	adds	r3, #8
 81070a6:	2100      	movs	r1, #0
 81070a8:	4618      	mov	r0, r3
 81070aa:	f002 fa55 	bl	8109558 <RCCEx_PLL2_Config>
 81070ae:	4603      	mov	r3, r0
 81070b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81070b4:	e011      	b.n	81070da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81070b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070ba:	3328      	adds	r3, #40	@ 0x28
 81070bc:	2100      	movs	r1, #0
 81070be:	4618      	mov	r0, r3
 81070c0:	f002 fafc 	bl	81096bc <RCCEx_PLL3_Config>
 81070c4:	4603      	mov	r3, r0
 81070c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81070ca:	e006      	b.n	81070da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81070cc:	2301      	movs	r3, #1
 81070ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81070d2:	e002      	b.n	81070da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81070d4:	bf00      	nop
 81070d6:	e000      	b.n	81070da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81070d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81070da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81070de:	2b00      	cmp	r3, #0
 81070e0:	d10b      	bne.n	81070fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81070e2:	4b1e      	ldr	r3, [pc, #120]	@ (810715c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81070e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81070e6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 81070ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81070f2:	4a1a      	ldr	r2, [pc, #104]	@ (810715c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81070f4:	430b      	orrs	r3, r1
 81070f6:	6593      	str	r3, [r2, #88]	@ 0x58
 81070f8:	e003      	b.n	8107102 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81070fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81070fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8107102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107106:	e9d3 2300 	ldrd	r2, r3, [r3]
 810710a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810710e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8107112:	2300      	movs	r3, #0
 8107114:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8107118:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810711c:	460b      	mov	r3, r1
 810711e:	4313      	orrs	r3, r2
 8107120:	d056      	beq.n	81071d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8107122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107126:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810712a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810712e:	d038      	beq.n	81071a2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8107130:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107134:	d831      	bhi.n	810719a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8107136:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810713a:	d034      	beq.n	81071a6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810713c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107140:	d82b      	bhi.n	810719a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8107142:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107146:	d01d      	beq.n	8107184 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8107148:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810714c:	d825      	bhi.n	810719a <HAL_RCCEx_PeriphCLKConfig+0x376>
 810714e:	2b00      	cmp	r3, #0
 8107150:	d006      	beq.n	8107160 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8107152:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8107156:	d00a      	beq.n	810716e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8107158:	e01f      	b.n	810719a <HAL_RCCEx_PeriphCLKConfig+0x376>
 810715a:	bf00      	nop
 810715c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107160:	4ba2      	ldr	r3, [pc, #648]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107164:	4aa1      	ldr	r2, [pc, #644]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810716a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810716c:	e01c      	b.n	81071a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810716e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107172:	3308      	adds	r3, #8
 8107174:	2100      	movs	r1, #0
 8107176:	4618      	mov	r0, r3
 8107178:	f002 f9ee 	bl	8109558 <RCCEx_PLL2_Config>
 810717c:	4603      	mov	r3, r0
 810717e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8107182:	e011      	b.n	81071a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107188:	3328      	adds	r3, #40	@ 0x28
 810718a:	2100      	movs	r1, #0
 810718c:	4618      	mov	r0, r3
 810718e:	f002 fa95 	bl	81096bc <RCCEx_PLL3_Config>
 8107192:	4603      	mov	r3, r0
 8107194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107198:	e006      	b.n	81071a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810719a:	2301      	movs	r3, #1
 810719c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81071a0:	e002      	b.n	81071a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81071a2:	bf00      	nop
 81071a4:	e000      	b.n	81071a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81071a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81071a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81071ac:	2b00      	cmp	r3, #0
 81071ae:	d10b      	bne.n	81071c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81071b0:	4b8e      	ldr	r3, [pc, #568]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81071b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81071b4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81071b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81071c0:	4a8a      	ldr	r2, [pc, #552]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81071c2:	430b      	orrs	r3, r1
 81071c4:	6593      	str	r3, [r2, #88]	@ 0x58
 81071c6:	e003      	b.n	81071d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81071c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81071cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81071d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81071d8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 81071dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 81071e0:	2300      	movs	r3, #0
 81071e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 81071e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 81071ea:	460b      	mov	r3, r1
 81071ec:	4313      	orrs	r3, r2
 81071ee:	d03a      	beq.n	8107266 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81071f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81071f6:	2b30      	cmp	r3, #48	@ 0x30
 81071f8:	d01f      	beq.n	810723a <HAL_RCCEx_PeriphCLKConfig+0x416>
 81071fa:	2b30      	cmp	r3, #48	@ 0x30
 81071fc:	d819      	bhi.n	8107232 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81071fe:	2b20      	cmp	r3, #32
 8107200:	d00c      	beq.n	810721c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8107202:	2b20      	cmp	r3, #32
 8107204:	d815      	bhi.n	8107232 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8107206:	2b00      	cmp	r3, #0
 8107208:	d019      	beq.n	810723e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810720a:	2b10      	cmp	r3, #16
 810720c:	d111      	bne.n	8107232 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810720e:	4b77      	ldr	r3, [pc, #476]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107212:	4a76      	ldr	r2, [pc, #472]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107218:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810721a:	e011      	b.n	8107240 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810721c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107220:	3308      	adds	r3, #8
 8107222:	2102      	movs	r1, #2
 8107224:	4618      	mov	r0, r3
 8107226:	f002 f997 	bl	8109558 <RCCEx_PLL2_Config>
 810722a:	4603      	mov	r3, r0
 810722c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8107230:	e006      	b.n	8107240 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8107232:	2301      	movs	r3, #1
 8107234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107238:	e002      	b.n	8107240 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810723a:	bf00      	nop
 810723c:	e000      	b.n	8107240 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810723e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107244:	2b00      	cmp	r3, #0
 8107246:	d10a      	bne.n	810725e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8107248:	4b68      	ldr	r3, [pc, #416]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810724a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810724c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8107250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107256:	4a65      	ldr	r2, [pc, #404]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107258:	430b      	orrs	r3, r1
 810725a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810725c:	e003      	b.n	8107266 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810725e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8107266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810726e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8107272:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8107276:	2300      	movs	r3, #0
 8107278:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 810727c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8107280:	460b      	mov	r3, r1
 8107282:	4313      	orrs	r3, r2
 8107284:	d051      	beq.n	810732a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8107286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810728a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810728c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107290:	d035      	beq.n	81072fe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8107292:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107296:	d82e      	bhi.n	81072f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8107298:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810729c:	d031      	beq.n	8107302 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810729e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81072a2:	d828      	bhi.n	81072f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81072a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81072a8:	d01a      	beq.n	81072e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81072aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81072ae:	d822      	bhi.n	81072f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81072b0:	2b00      	cmp	r3, #0
 81072b2:	d003      	beq.n	81072bc <HAL_RCCEx_PeriphCLKConfig+0x498>
 81072b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81072b8:	d007      	beq.n	81072ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81072ba:	e01c      	b.n	81072f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81072bc:	4b4b      	ldr	r3, [pc, #300]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81072be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81072c0:	4a4a      	ldr	r2, [pc, #296]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81072c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81072c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81072c8:	e01c      	b.n	8107304 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81072ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81072ce:	3308      	adds	r3, #8
 81072d0:	2100      	movs	r1, #0
 81072d2:	4618      	mov	r0, r3
 81072d4:	f002 f940 	bl	8109558 <RCCEx_PLL2_Config>
 81072d8:	4603      	mov	r3, r0
 81072da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81072de:	e011      	b.n	8107304 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81072e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81072e4:	3328      	adds	r3, #40	@ 0x28
 81072e6:	2100      	movs	r1, #0
 81072e8:	4618      	mov	r0, r3
 81072ea:	f002 f9e7 	bl	81096bc <RCCEx_PLL3_Config>
 81072ee:	4603      	mov	r3, r0
 81072f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81072f4:	e006      	b.n	8107304 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81072f6:	2301      	movs	r3, #1
 81072f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81072fc:	e002      	b.n	8107304 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81072fe:	bf00      	nop
 8107300:	e000      	b.n	8107304 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8107302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107308:	2b00      	cmp	r3, #0
 810730a:	d10a      	bne.n	8107322 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810730c:	4b37      	ldr	r3, [pc, #220]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810730e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107310:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8107314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810731a:	4a34      	ldr	r2, [pc, #208]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810731c:	430b      	orrs	r3, r1
 810731e:	6513      	str	r3, [r2, #80]	@ 0x50
 8107320:	e003      	b.n	810732a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107326:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810732a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107332:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8107336:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810733a:	2300      	movs	r3, #0
 810733c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8107340:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8107344:	460b      	mov	r3, r1
 8107346:	4313      	orrs	r3, r2
 8107348:	d056      	beq.n	81073f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810734a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810734e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107350:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8107354:	d033      	beq.n	81073be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8107356:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810735a:	d82c      	bhi.n	81073b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810735c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8107360:	d02f      	beq.n	81073c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8107362:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8107366:	d826      	bhi.n	81073b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8107368:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810736c:	d02b      	beq.n	81073c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810736e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8107372:	d820      	bhi.n	81073b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8107374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107378:	d012      	beq.n	81073a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810737a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810737e:	d81a      	bhi.n	81073b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8107380:	2b00      	cmp	r3, #0
 8107382:	d022      	beq.n	81073ca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8107384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107388:	d115      	bne.n	81073b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810738a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810738e:	3308      	adds	r3, #8
 8107390:	2101      	movs	r1, #1
 8107392:	4618      	mov	r0, r3
 8107394:	f002 f8e0 	bl	8109558 <RCCEx_PLL2_Config>
 8107398:	4603      	mov	r3, r0
 810739a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810739e:	e015      	b.n	81073cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81073a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073a4:	3328      	adds	r3, #40	@ 0x28
 81073a6:	2101      	movs	r1, #1
 81073a8:	4618      	mov	r0, r3
 81073aa:	f002 f987 	bl	81096bc <RCCEx_PLL3_Config>
 81073ae:	4603      	mov	r3, r0
 81073b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81073b4:	e00a      	b.n	81073cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81073b6:	2301      	movs	r3, #1
 81073b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81073bc:	e006      	b.n	81073cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81073be:	bf00      	nop
 81073c0:	e004      	b.n	81073cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81073c2:	bf00      	nop
 81073c4:	e002      	b.n	81073cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81073c6:	bf00      	nop
 81073c8:	e000      	b.n	81073cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81073ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 81073cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81073d0:	2b00      	cmp	r3, #0
 81073d2:	d10d      	bne.n	81073f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81073d4:	4b05      	ldr	r3, [pc, #20]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81073d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81073d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 81073dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81073e2:	4a02      	ldr	r2, [pc, #8]	@ (81073ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81073e4:	430b      	orrs	r3, r1
 81073e6:	6513      	str	r3, [r2, #80]	@ 0x50
 81073e8:	e006      	b.n	81073f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81073ea:	bf00      	nop
 81073ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81073f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81073f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81073f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107400:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8107404:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8107408:	2300      	movs	r3, #0
 810740a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810740e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8107412:	460b      	mov	r3, r1
 8107414:	4313      	orrs	r3, r2
 8107416:	d055      	beq.n	81074c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8107418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810741c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8107420:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107424:	d033      	beq.n	810748e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8107426:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810742a:	d82c      	bhi.n	8107486 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810742c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107430:	d02f      	beq.n	8107492 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8107432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107436:	d826      	bhi.n	8107486 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8107438:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810743c:	d02b      	beq.n	8107496 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810743e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107442:	d820      	bhi.n	8107486 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8107444:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107448:	d012      	beq.n	8107470 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810744a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810744e:	d81a      	bhi.n	8107486 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8107450:	2b00      	cmp	r3, #0
 8107452:	d022      	beq.n	810749a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8107454:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107458:	d115      	bne.n	8107486 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810745a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810745e:	3308      	adds	r3, #8
 8107460:	2101      	movs	r1, #1
 8107462:	4618      	mov	r0, r3
 8107464:	f002 f878 	bl	8109558 <RCCEx_PLL2_Config>
 8107468:	4603      	mov	r3, r0
 810746a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810746e:	e015      	b.n	810749c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107474:	3328      	adds	r3, #40	@ 0x28
 8107476:	2101      	movs	r1, #1
 8107478:	4618      	mov	r0, r3
 810747a:	f002 f91f 	bl	81096bc <RCCEx_PLL3_Config>
 810747e:	4603      	mov	r3, r0
 8107480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8107484:	e00a      	b.n	810749c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8107486:	2301      	movs	r3, #1
 8107488:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810748c:	e006      	b.n	810749c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810748e:	bf00      	nop
 8107490:	e004      	b.n	810749c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8107492:	bf00      	nop
 8107494:	e002      	b.n	810749c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8107496:	bf00      	nop
 8107498:	e000      	b.n	810749c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810749a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810749c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81074a0:	2b00      	cmp	r3, #0
 81074a2:	d10b      	bne.n	81074bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81074a4:	4ba4      	ldr	r3, [pc, #656]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81074a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81074a8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81074ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81074b4:	4aa0      	ldr	r2, [pc, #640]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81074b6:	430b      	orrs	r3, r1
 81074b8:	6593      	str	r3, [r2, #88]	@ 0x58
 81074ba:	e003      	b.n	81074c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81074bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81074c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81074c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81074cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 81074d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 81074d4:	2300      	movs	r3, #0
 81074d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 81074da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 81074de:	460b      	mov	r3, r1
 81074e0:	4313      	orrs	r3, r2
 81074e2:	d037      	beq.n	8107554 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81074e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81074ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81074ee:	d00e      	beq.n	810750e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 81074f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81074f4:	d816      	bhi.n	8107524 <HAL_RCCEx_PeriphCLKConfig+0x700>
 81074f6:	2b00      	cmp	r3, #0
 81074f8:	d018      	beq.n	810752c <HAL_RCCEx_PeriphCLKConfig+0x708>
 81074fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81074fe:	d111      	bne.n	8107524 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107500:	4b8d      	ldr	r3, [pc, #564]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107504:	4a8c      	ldr	r2, [pc, #560]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107506:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810750a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810750c:	e00f      	b.n	810752e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810750e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107512:	3308      	adds	r3, #8
 8107514:	2101      	movs	r1, #1
 8107516:	4618      	mov	r0, r3
 8107518:	f002 f81e 	bl	8109558 <RCCEx_PLL2_Config>
 810751c:	4603      	mov	r3, r0
 810751e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8107522:	e004      	b.n	810752e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107524:	2301      	movs	r3, #1
 8107526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810752a:	e000      	b.n	810752e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 810752c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810752e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107532:	2b00      	cmp	r3, #0
 8107534:	d10a      	bne.n	810754c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8107536:	4b80      	ldr	r3, [pc, #512]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810753a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810753e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107544:	4a7c      	ldr	r2, [pc, #496]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107546:	430b      	orrs	r3, r1
 8107548:	6513      	str	r3, [r2, #80]	@ 0x50
 810754a:	e003      	b.n	8107554 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810754c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107550:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8107554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107558:	e9d3 2300 	ldrd	r2, r3, [r3]
 810755c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8107560:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8107564:	2300      	movs	r3, #0
 8107566:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810756a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810756e:	460b      	mov	r3, r1
 8107570:	4313      	orrs	r3, r2
 8107572:	d039      	beq.n	81075e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8107574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810757a:	2b03      	cmp	r3, #3
 810757c:	d81c      	bhi.n	81075b8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 810757e:	a201      	add	r2, pc, #4	@ (adr r2, 8107584 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8107580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107584:	081075c1 	.word	0x081075c1
 8107588:	08107595 	.word	0x08107595
 810758c:	081075a3 	.word	0x081075a3
 8107590:	081075c1 	.word	0x081075c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107594:	4b68      	ldr	r3, [pc, #416]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107598:	4a67      	ldr	r2, [pc, #412]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810759a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810759e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81075a0:	e00f      	b.n	81075c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81075a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075a6:	3308      	adds	r3, #8
 81075a8:	2102      	movs	r1, #2
 81075aa:	4618      	mov	r0, r3
 81075ac:	f001 ffd4 	bl	8109558 <RCCEx_PLL2_Config>
 81075b0:	4603      	mov	r3, r0
 81075b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 81075b6:	e004      	b.n	81075c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81075b8:	2301      	movs	r3, #1
 81075ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81075be:	e000      	b.n	81075c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 81075c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81075c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81075c6:	2b00      	cmp	r3, #0
 81075c8:	d10a      	bne.n	81075e0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81075ca:	4b5b      	ldr	r3, [pc, #364]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81075cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81075ce:	f023 0103 	bic.w	r1, r3, #3
 81075d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81075d8:	4a57      	ldr	r2, [pc, #348]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81075da:	430b      	orrs	r3, r1
 81075dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81075de:	e003      	b.n	81075e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81075e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81075e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81075e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81075f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81075f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81075f8:	2300      	movs	r3, #0
 81075fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81075fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8107602:	460b      	mov	r3, r1
 8107604:	4313      	orrs	r3, r2
 8107606:	f000 809f 	beq.w	8107748 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810760a:	4b4c      	ldr	r3, [pc, #304]	@ (810773c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810760c:	681b      	ldr	r3, [r3, #0]
 810760e:	4a4b      	ldr	r2, [pc, #300]	@ (810773c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8107610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8107614:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8107616:	f7fc fb65 	bl	8103ce4 <HAL_GetTick>
 810761a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810761e:	e00b      	b.n	8107638 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8107620:	f7fc fb60 	bl	8103ce4 <HAL_GetTick>
 8107624:	4602      	mov	r2, r0
 8107626:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810762a:	1ad3      	subs	r3, r2, r3
 810762c:	2b64      	cmp	r3, #100	@ 0x64
 810762e:	d903      	bls.n	8107638 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8107630:	2303      	movs	r3, #3
 8107632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107636:	e005      	b.n	8107644 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8107638:	4b40      	ldr	r3, [pc, #256]	@ (810773c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810763a:	681b      	ldr	r3, [r3, #0]
 810763c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107640:	2b00      	cmp	r3, #0
 8107642:	d0ed      	beq.n	8107620 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8107644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107648:	2b00      	cmp	r3, #0
 810764a:	d179      	bne.n	8107740 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810764c:	4b3a      	ldr	r3, [pc, #232]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810764e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8107650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107654:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8107658:	4053      	eors	r3, r2
 810765a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810765e:	2b00      	cmp	r3, #0
 8107660:	d015      	beq.n	810768e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8107662:	4b35      	ldr	r3, [pc, #212]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107666:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810766a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810766e:	4b32      	ldr	r3, [pc, #200]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107672:	4a31      	ldr	r2, [pc, #196]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8107678:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810767a:	4b2f      	ldr	r3, [pc, #188]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810767c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810767e:	4a2e      	ldr	r2, [pc, #184]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107680:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8107684:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8107686:	4a2c      	ldr	r2, [pc, #176]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107688:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810768c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810768e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107692:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8107696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810769a:	d118      	bne.n	81076ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810769c:	f7fc fb22 	bl	8103ce4 <HAL_GetTick>
 81076a0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81076a4:	e00d      	b.n	81076c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81076a6:	f7fc fb1d 	bl	8103ce4 <HAL_GetTick>
 81076aa:	4602      	mov	r2, r0
 81076ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81076b0:	1ad2      	subs	r2, r2, r3
 81076b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 81076b6:	429a      	cmp	r2, r3
 81076b8:	d903      	bls.n	81076c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 81076ba:	2303      	movs	r3, #3
 81076bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 81076c0:	e005      	b.n	81076ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81076c2:	4b1d      	ldr	r3, [pc, #116]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81076c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81076c6:	f003 0302 	and.w	r3, r3, #2
 81076ca:	2b00      	cmp	r3, #0
 81076cc:	d0eb      	beq.n	81076a6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 81076ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81076d2:	2b00      	cmp	r3, #0
 81076d4:	d12b      	bne.n	810772e <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81076d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81076de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81076e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81076e6:	d110      	bne.n	810770a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 81076e8:	4b13      	ldr	r3, [pc, #76]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81076ea:	691b      	ldr	r3, [r3, #16]
 81076ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81076f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81076f8:	091b      	lsrs	r3, r3, #4
 81076fa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 81076fe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8107702:	4a0d      	ldr	r2, [pc, #52]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107704:	430b      	orrs	r3, r1
 8107706:	6113      	str	r3, [r2, #16]
 8107708:	e005      	b.n	8107716 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 810770a:	4b0b      	ldr	r3, [pc, #44]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810770c:	691b      	ldr	r3, [r3, #16]
 810770e:	4a0a      	ldr	r2, [pc, #40]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107710:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8107714:	6113      	str	r3, [r2, #16]
 8107716:	4b08      	ldr	r3, [pc, #32]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107718:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810771a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810771e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8107722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8107726:	4a04      	ldr	r2, [pc, #16]	@ (8107738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107728:	430b      	orrs	r3, r1
 810772a:	6713      	str	r3, [r2, #112]	@ 0x70
 810772c:	e00c      	b.n	8107748 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810772e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107732:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8107736:	e007      	b.n	8107748 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8107738:	58024400 	.word	0x58024400
 810773c:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107744:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8107748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107750:	f002 0301 	and.w	r3, r2, #1
 8107754:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8107758:	2300      	movs	r3, #0
 810775a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810775e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8107762:	460b      	mov	r3, r1
 8107764:	4313      	orrs	r3, r2
 8107766:	f000 8089 	beq.w	810787c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810776a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810776e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8107770:	2b28      	cmp	r3, #40	@ 0x28
 8107772:	d86b      	bhi.n	810784c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8107774:	a201      	add	r2, pc, #4	@ (adr r2, 810777c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8107776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810777a:	bf00      	nop
 810777c:	08107855 	.word	0x08107855
 8107780:	0810784d 	.word	0x0810784d
 8107784:	0810784d 	.word	0x0810784d
 8107788:	0810784d 	.word	0x0810784d
 810778c:	0810784d 	.word	0x0810784d
 8107790:	0810784d 	.word	0x0810784d
 8107794:	0810784d 	.word	0x0810784d
 8107798:	0810784d 	.word	0x0810784d
 810779c:	08107821 	.word	0x08107821
 81077a0:	0810784d 	.word	0x0810784d
 81077a4:	0810784d 	.word	0x0810784d
 81077a8:	0810784d 	.word	0x0810784d
 81077ac:	0810784d 	.word	0x0810784d
 81077b0:	0810784d 	.word	0x0810784d
 81077b4:	0810784d 	.word	0x0810784d
 81077b8:	0810784d 	.word	0x0810784d
 81077bc:	08107837 	.word	0x08107837
 81077c0:	0810784d 	.word	0x0810784d
 81077c4:	0810784d 	.word	0x0810784d
 81077c8:	0810784d 	.word	0x0810784d
 81077cc:	0810784d 	.word	0x0810784d
 81077d0:	0810784d 	.word	0x0810784d
 81077d4:	0810784d 	.word	0x0810784d
 81077d8:	0810784d 	.word	0x0810784d
 81077dc:	08107855 	.word	0x08107855
 81077e0:	0810784d 	.word	0x0810784d
 81077e4:	0810784d 	.word	0x0810784d
 81077e8:	0810784d 	.word	0x0810784d
 81077ec:	0810784d 	.word	0x0810784d
 81077f0:	0810784d 	.word	0x0810784d
 81077f4:	0810784d 	.word	0x0810784d
 81077f8:	0810784d 	.word	0x0810784d
 81077fc:	08107855 	.word	0x08107855
 8107800:	0810784d 	.word	0x0810784d
 8107804:	0810784d 	.word	0x0810784d
 8107808:	0810784d 	.word	0x0810784d
 810780c:	0810784d 	.word	0x0810784d
 8107810:	0810784d 	.word	0x0810784d
 8107814:	0810784d 	.word	0x0810784d
 8107818:	0810784d 	.word	0x0810784d
 810781c:	08107855 	.word	0x08107855
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107824:	3308      	adds	r3, #8
 8107826:	2101      	movs	r1, #1
 8107828:	4618      	mov	r0, r3
 810782a:	f001 fe95 	bl	8109558 <RCCEx_PLL2_Config>
 810782e:	4603      	mov	r3, r0
 8107830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8107834:	e00f      	b.n	8107856 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810783a:	3328      	adds	r3, #40	@ 0x28
 810783c:	2101      	movs	r1, #1
 810783e:	4618      	mov	r0, r3
 8107840:	f001 ff3c 	bl	81096bc <RCCEx_PLL3_Config>
 8107844:	4603      	mov	r3, r0
 8107846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810784a:	e004      	b.n	8107856 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810784c:	2301      	movs	r3, #1
 810784e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107852:	e000      	b.n	8107856 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8107854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810785a:	2b00      	cmp	r3, #0
 810785c:	d10a      	bne.n	8107874 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810785e:	4bbf      	ldr	r3, [pc, #764]	@ (8107b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107862:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8107866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810786a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810786c:	4abb      	ldr	r2, [pc, #748]	@ (8107b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810786e:	430b      	orrs	r3, r1
 8107870:	6553      	str	r3, [r2, #84]	@ 0x54
 8107872:	e003      	b.n	810787c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107874:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107878:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810787c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107884:	f002 0302 	and.w	r3, r2, #2
 8107888:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810788c:	2300      	movs	r3, #0
 810788e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8107892:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8107896:	460b      	mov	r3, r1
 8107898:	4313      	orrs	r3, r2
 810789a:	d041      	beq.n	8107920 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810789c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81078a2:	2b05      	cmp	r3, #5
 81078a4:	d824      	bhi.n	81078f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 81078a6:	a201      	add	r2, pc, #4	@ (adr r2, 81078ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 81078a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81078ac:	081078f9 	.word	0x081078f9
 81078b0:	081078c5 	.word	0x081078c5
 81078b4:	081078db 	.word	0x081078db
 81078b8:	081078f9 	.word	0x081078f9
 81078bc:	081078f9 	.word	0x081078f9
 81078c0:	081078f9 	.word	0x081078f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81078c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078c8:	3308      	adds	r3, #8
 81078ca:	2101      	movs	r1, #1
 81078cc:	4618      	mov	r0, r3
 81078ce:	f001 fe43 	bl	8109558 <RCCEx_PLL2_Config>
 81078d2:	4603      	mov	r3, r0
 81078d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81078d8:	e00f      	b.n	81078fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81078da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078de:	3328      	adds	r3, #40	@ 0x28
 81078e0:	2101      	movs	r1, #1
 81078e2:	4618      	mov	r0, r3
 81078e4:	f001 feea 	bl	81096bc <RCCEx_PLL3_Config>
 81078e8:	4603      	mov	r3, r0
 81078ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81078ee:	e004      	b.n	81078fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81078f0:	2301      	movs	r3, #1
 81078f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81078f6:	e000      	b.n	81078fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 81078f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81078fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81078fe:	2b00      	cmp	r3, #0
 8107900:	d10a      	bne.n	8107918 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8107902:	4b96      	ldr	r3, [pc, #600]	@ (8107b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107906:	f023 0107 	bic.w	r1, r3, #7
 810790a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810790e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8107910:	4a92      	ldr	r2, [pc, #584]	@ (8107b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107912:	430b      	orrs	r3, r1
 8107914:	6553      	str	r3, [r2, #84]	@ 0x54
 8107916:	e003      	b.n	8107920 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810791c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8107920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107928:	f002 0304 	and.w	r3, r2, #4
 810792c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8107930:	2300      	movs	r3, #0
 8107932:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8107936:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810793a:	460b      	mov	r3, r1
 810793c:	4313      	orrs	r3, r2
 810793e:	d044      	beq.n	81079ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8107940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107944:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8107948:	2b05      	cmp	r3, #5
 810794a:	d825      	bhi.n	8107998 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 810794c:	a201      	add	r2, pc, #4	@ (adr r2, 8107954 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 810794e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107952:	bf00      	nop
 8107954:	081079a1 	.word	0x081079a1
 8107958:	0810796d 	.word	0x0810796d
 810795c:	08107983 	.word	0x08107983
 8107960:	081079a1 	.word	0x081079a1
 8107964:	081079a1 	.word	0x081079a1
 8107968:	081079a1 	.word	0x081079a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810796c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107970:	3308      	adds	r3, #8
 8107972:	2101      	movs	r1, #1
 8107974:	4618      	mov	r0, r3
 8107976:	f001 fdef 	bl	8109558 <RCCEx_PLL2_Config>
 810797a:	4603      	mov	r3, r0
 810797c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8107980:	e00f      	b.n	81079a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107986:	3328      	adds	r3, #40	@ 0x28
 8107988:	2101      	movs	r1, #1
 810798a:	4618      	mov	r0, r3
 810798c:	f001 fe96 	bl	81096bc <RCCEx_PLL3_Config>
 8107990:	4603      	mov	r3, r0
 8107992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8107996:	e004      	b.n	81079a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107998:	2301      	movs	r3, #1
 810799a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810799e:	e000      	b.n	81079a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 81079a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81079a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81079a6:	2b00      	cmp	r3, #0
 81079a8:	d10b      	bne.n	81079c2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81079aa:	4b6c      	ldr	r3, [pc, #432]	@ (8107b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81079ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81079ae:	f023 0107 	bic.w	r1, r3, #7
 81079b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81079b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81079ba:	4a68      	ldr	r2, [pc, #416]	@ (8107b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81079bc:	430b      	orrs	r3, r1
 81079be:	6593      	str	r3, [r2, #88]	@ 0x58
 81079c0:	e003      	b.n	81079ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81079c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81079c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81079ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81079ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81079d2:	f002 0320 	and.w	r3, r2, #32
 81079d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 81079da:	2300      	movs	r3, #0
 81079dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 81079e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 81079e4:	460b      	mov	r3, r1
 81079e6:	4313      	orrs	r3, r2
 81079e8:	d055      	beq.n	8107a96 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81079ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81079ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81079f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81079f6:	d033      	beq.n	8107a60 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 81079f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81079fc:	d82c      	bhi.n	8107a58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81079fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107a02:	d02f      	beq.n	8107a64 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8107a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107a08:	d826      	bhi.n	8107a58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8107a0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107a0e:	d02b      	beq.n	8107a68 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8107a10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107a14:	d820      	bhi.n	8107a58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8107a16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107a1a:	d012      	beq.n	8107a42 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8107a1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107a20:	d81a      	bhi.n	8107a58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8107a22:	2b00      	cmp	r3, #0
 8107a24:	d022      	beq.n	8107a6c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8107a26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107a2a:	d115      	bne.n	8107a58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a30:	3308      	adds	r3, #8
 8107a32:	2100      	movs	r1, #0
 8107a34:	4618      	mov	r0, r3
 8107a36:	f001 fd8f 	bl	8109558 <RCCEx_PLL2_Config>
 8107a3a:	4603      	mov	r3, r0
 8107a3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8107a40:	e015      	b.n	8107a6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a46:	3328      	adds	r3, #40	@ 0x28
 8107a48:	2102      	movs	r1, #2
 8107a4a:	4618      	mov	r0, r3
 8107a4c:	f001 fe36 	bl	81096bc <RCCEx_PLL3_Config>
 8107a50:	4603      	mov	r3, r0
 8107a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8107a56:	e00a      	b.n	8107a6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107a58:	2301      	movs	r3, #1
 8107a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107a5e:	e006      	b.n	8107a6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8107a60:	bf00      	nop
 8107a62:	e004      	b.n	8107a6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8107a64:	bf00      	nop
 8107a66:	e002      	b.n	8107a6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8107a68:	bf00      	nop
 8107a6a:	e000      	b.n	8107a6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8107a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107a72:	2b00      	cmp	r3, #0
 8107a74:	d10b      	bne.n	8107a8e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8107a76:	4b39      	ldr	r3, [pc, #228]	@ (8107b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107a7a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8107a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8107a86:	4a35      	ldr	r2, [pc, #212]	@ (8107b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107a88:	430b      	orrs	r3, r1
 8107a8a:	6553      	str	r3, [r2, #84]	@ 0x54
 8107a8c:	e003      	b.n	8107a96 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107a92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8107a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107a9e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8107aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8107aa6:	2300      	movs	r3, #0
 8107aa8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8107aac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8107ab0:	460b      	mov	r3, r1
 8107ab2:	4313      	orrs	r3, r2
 8107ab4:	d058      	beq.n	8107b68 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8107ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107aba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8107abe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8107ac2:	d033      	beq.n	8107b2c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8107ac4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8107ac8:	d82c      	bhi.n	8107b24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107ace:	d02f      	beq.n	8107b30 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8107ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107ad4:	d826      	bhi.n	8107b24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107ad6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8107ada:	d02b      	beq.n	8107b34 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8107adc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8107ae0:	d820      	bhi.n	8107b24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107ae2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8107ae6:	d012      	beq.n	8107b0e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8107ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8107aec:	d81a      	bhi.n	8107b24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107aee:	2b00      	cmp	r3, #0
 8107af0:	d022      	beq.n	8107b38 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8107af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8107af6:	d115      	bne.n	8107b24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107afc:	3308      	adds	r3, #8
 8107afe:	2100      	movs	r1, #0
 8107b00:	4618      	mov	r0, r3
 8107b02:	f001 fd29 	bl	8109558 <RCCEx_PLL2_Config>
 8107b06:	4603      	mov	r3, r0
 8107b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8107b0c:	e015      	b.n	8107b3a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107b12:	3328      	adds	r3, #40	@ 0x28
 8107b14:	2102      	movs	r1, #2
 8107b16:	4618      	mov	r0, r3
 8107b18:	f001 fdd0 	bl	81096bc <RCCEx_PLL3_Config>
 8107b1c:	4603      	mov	r3, r0
 8107b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8107b22:	e00a      	b.n	8107b3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107b24:	2301      	movs	r3, #1
 8107b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107b2a:	e006      	b.n	8107b3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8107b2c:	bf00      	nop
 8107b2e:	e004      	b.n	8107b3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8107b30:	bf00      	nop
 8107b32:	e002      	b.n	8107b3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8107b34:	bf00      	nop
 8107b36:	e000      	b.n	8107b3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8107b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107b3e:	2b00      	cmp	r3, #0
 8107b40:	d10e      	bne.n	8107b60 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8107b42:	4b06      	ldr	r3, [pc, #24]	@ (8107b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107b46:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8107b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8107b52:	4a02      	ldr	r2, [pc, #8]	@ (8107b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107b54:	430b      	orrs	r3, r1
 8107b56:	6593      	str	r3, [r2, #88]	@ 0x58
 8107b58:	e006      	b.n	8107b68 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8107b5a:	bf00      	nop
 8107b5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107b64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8107b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107b70:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8107b74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8107b78:	2300      	movs	r3, #0
 8107b7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8107b7e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8107b82:	460b      	mov	r3, r1
 8107b84:	4313      	orrs	r3, r2
 8107b86:	d055      	beq.n	8107c34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8107b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107b8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8107b90:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8107b94:	d033      	beq.n	8107bfe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8107b96:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8107b9a:	d82c      	bhi.n	8107bf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107b9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8107ba0:	d02f      	beq.n	8107c02 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8107ba2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8107ba6:	d826      	bhi.n	8107bf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107ba8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8107bac:	d02b      	beq.n	8107c06 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8107bae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8107bb2:	d820      	bhi.n	8107bf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107bb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107bb8:	d012      	beq.n	8107be0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8107bba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107bbe:	d81a      	bhi.n	8107bf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107bc0:	2b00      	cmp	r3, #0
 8107bc2:	d022      	beq.n	8107c0a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8107bc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107bc8:	d115      	bne.n	8107bf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107bce:	3308      	adds	r3, #8
 8107bd0:	2100      	movs	r1, #0
 8107bd2:	4618      	mov	r0, r3
 8107bd4:	f001 fcc0 	bl	8109558 <RCCEx_PLL2_Config>
 8107bd8:	4603      	mov	r3, r0
 8107bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8107bde:	e015      	b.n	8107c0c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107be4:	3328      	adds	r3, #40	@ 0x28
 8107be6:	2102      	movs	r1, #2
 8107be8:	4618      	mov	r0, r3
 8107bea:	f001 fd67 	bl	81096bc <RCCEx_PLL3_Config>
 8107bee:	4603      	mov	r3, r0
 8107bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8107bf4:	e00a      	b.n	8107c0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107bf6:	2301      	movs	r3, #1
 8107bf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107bfc:	e006      	b.n	8107c0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107bfe:	bf00      	nop
 8107c00:	e004      	b.n	8107c0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107c02:	bf00      	nop
 8107c04:	e002      	b.n	8107c0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107c06:	bf00      	nop
 8107c08:	e000      	b.n	8107c0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107c10:	2b00      	cmp	r3, #0
 8107c12:	d10b      	bne.n	8107c2c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8107c14:	4ba1      	ldr	r3, [pc, #644]	@ (8107e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107c18:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8107c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8107c24:	4a9d      	ldr	r2, [pc, #628]	@ (8107e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107c26:	430b      	orrs	r3, r1
 8107c28:	6593      	str	r3, [r2, #88]	@ 0x58
 8107c2a:	e003      	b.n	8107c34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107c30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8107c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107c3c:	f002 0308 	and.w	r3, r2, #8
 8107c40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8107c44:	2300      	movs	r3, #0
 8107c46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8107c4a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8107c4e:	460b      	mov	r3, r1
 8107c50:	4313      	orrs	r3, r2
 8107c52:	d01e      	beq.n	8107c92 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8107c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107c60:	d10c      	bne.n	8107c7c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c66:	3328      	adds	r3, #40	@ 0x28
 8107c68:	2102      	movs	r1, #2
 8107c6a:	4618      	mov	r0, r3
 8107c6c:	f001 fd26 	bl	81096bc <RCCEx_PLL3_Config>
 8107c70:	4603      	mov	r3, r0
 8107c72:	2b00      	cmp	r3, #0
 8107c74:	d002      	beq.n	8107c7c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8107c76:	2301      	movs	r3, #1
 8107c78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8107c7c:	4b87      	ldr	r3, [pc, #540]	@ (8107e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107c80:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8107c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107c8c:	4a83      	ldr	r2, [pc, #524]	@ (8107e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107c8e:	430b      	orrs	r3, r1
 8107c90:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8107c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107c9a:	f002 0310 	and.w	r3, r2, #16
 8107c9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8107ca2:	2300      	movs	r3, #0
 8107ca4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8107ca8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8107cac:	460b      	mov	r3, r1
 8107cae:	4313      	orrs	r3, r2
 8107cb0:	d01e      	beq.n	8107cf0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8107cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107cb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8107cba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107cbe:	d10c      	bne.n	8107cda <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107cc4:	3328      	adds	r3, #40	@ 0x28
 8107cc6:	2102      	movs	r1, #2
 8107cc8:	4618      	mov	r0, r3
 8107cca:	f001 fcf7 	bl	81096bc <RCCEx_PLL3_Config>
 8107cce:	4603      	mov	r3, r0
 8107cd0:	2b00      	cmp	r3, #0
 8107cd2:	d002      	beq.n	8107cda <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8107cd4:	2301      	movs	r3, #1
 8107cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8107cda:	4b70      	ldr	r3, [pc, #448]	@ (8107e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107cde:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8107ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8107cea:	4a6c      	ldr	r2, [pc, #432]	@ (8107e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107cec:	430b      	orrs	r3, r1
 8107cee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8107cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107cf8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8107cfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8107d00:	2300      	movs	r3, #0
 8107d02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8107d06:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8107d0a:	460b      	mov	r3, r1
 8107d0c:	4313      	orrs	r3, r2
 8107d0e:	d03e      	beq.n	8107d8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8107d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8107d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107d1c:	d022      	beq.n	8107d64 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8107d1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107d22:	d81b      	bhi.n	8107d5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8107d24:	2b00      	cmp	r3, #0
 8107d26:	d003      	beq.n	8107d30 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8107d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107d2c:	d00b      	beq.n	8107d46 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8107d2e:	e015      	b.n	8107d5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d34:	3308      	adds	r3, #8
 8107d36:	2100      	movs	r1, #0
 8107d38:	4618      	mov	r0, r3
 8107d3a:	f001 fc0d 	bl	8109558 <RCCEx_PLL2_Config>
 8107d3e:	4603      	mov	r3, r0
 8107d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8107d44:	e00f      	b.n	8107d66 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d4a:	3328      	adds	r3, #40	@ 0x28
 8107d4c:	2102      	movs	r1, #2
 8107d4e:	4618      	mov	r0, r3
 8107d50:	f001 fcb4 	bl	81096bc <RCCEx_PLL3_Config>
 8107d54:	4603      	mov	r3, r0
 8107d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8107d5a:	e004      	b.n	8107d66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107d5c:	2301      	movs	r3, #1
 8107d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107d62:	e000      	b.n	8107d66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8107d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107d6a:	2b00      	cmp	r3, #0
 8107d6c:	d10b      	bne.n	8107d86 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8107d6e:	4b4b      	ldr	r3, [pc, #300]	@ (8107e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107d72:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8107d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8107d7e:	4a47      	ldr	r2, [pc, #284]	@ (8107e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107d80:	430b      	orrs	r3, r1
 8107d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8107d84:	e003      	b.n	8107d8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107d8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8107d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107d96:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8107d9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8107d9c:	2300      	movs	r3, #0
 8107d9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8107da0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8107da4:	460b      	mov	r3, r1
 8107da6:	4313      	orrs	r3, r2
 8107da8:	d03b      	beq.n	8107e22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8107daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107db2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107db6:	d01f      	beq.n	8107df8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8107db8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107dbc:	d818      	bhi.n	8107df0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8107dbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8107dc2:	d003      	beq.n	8107dcc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8107dc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107dc8:	d007      	beq.n	8107dda <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8107dca:	e011      	b.n	8107df0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107dcc:	4b33      	ldr	r3, [pc, #204]	@ (8107e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107dd0:	4a32      	ldr	r2, [pc, #200]	@ (8107e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107dd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107dd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8107dd8:	e00f      	b.n	8107dfa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107dde:	3328      	adds	r3, #40	@ 0x28
 8107de0:	2101      	movs	r1, #1
 8107de2:	4618      	mov	r0, r3
 8107de4:	f001 fc6a 	bl	81096bc <RCCEx_PLL3_Config>
 8107de8:	4603      	mov	r3, r0
 8107dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8107dee:	e004      	b.n	8107dfa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107df0:	2301      	movs	r3, #1
 8107df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107df6:	e000      	b.n	8107dfa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8107df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107dfe:	2b00      	cmp	r3, #0
 8107e00:	d10b      	bne.n	8107e1a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8107e02:	4b26      	ldr	r3, [pc, #152]	@ (8107e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107e06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8107e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107e12:	4a22      	ldr	r2, [pc, #136]	@ (8107e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107e14:	430b      	orrs	r3, r1
 8107e16:	6553      	str	r3, [r2, #84]	@ 0x54
 8107e18:	e003      	b.n	8107e22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107e1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8107e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107e2a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8107e2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8107e30:	2300      	movs	r3, #0
 8107e32:	677b      	str	r3, [r7, #116]	@ 0x74
 8107e34:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8107e38:	460b      	mov	r3, r1
 8107e3a:	4313      	orrs	r3, r2
 8107e3c:	d034      	beq.n	8107ea8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8107e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107e44:	2b00      	cmp	r3, #0
 8107e46:	d003      	beq.n	8107e50 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8107e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107e4c:	d007      	beq.n	8107e5e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8107e4e:	e011      	b.n	8107e74 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107e50:	4b12      	ldr	r3, [pc, #72]	@ (8107e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107e54:	4a11      	ldr	r2, [pc, #68]	@ (8107e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107e56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8107e5c:	e00e      	b.n	8107e7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e62:	3308      	adds	r3, #8
 8107e64:	2102      	movs	r1, #2
 8107e66:	4618      	mov	r0, r3
 8107e68:	f001 fb76 	bl	8109558 <RCCEx_PLL2_Config>
 8107e6c:	4603      	mov	r3, r0
 8107e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8107e72:	e003      	b.n	8107e7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8107e74:	2301      	movs	r3, #1
 8107e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107e7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107e80:	2b00      	cmp	r3, #0
 8107e82:	d10d      	bne.n	8107ea0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8107e84:	4b05      	ldr	r3, [pc, #20]	@ (8107e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107e88:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8107e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107e92:	4a02      	ldr	r2, [pc, #8]	@ (8107e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107e94:	430b      	orrs	r3, r1
 8107e96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8107e98:	e006      	b.n	8107ea8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8107e9a:	bf00      	nop
 8107e9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107ea4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8107ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107eb0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8107eb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8107eb6:	2300      	movs	r3, #0
 8107eb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8107eba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8107ebe:	460b      	mov	r3, r1
 8107ec0:	4313      	orrs	r3, r2
 8107ec2:	d00c      	beq.n	8107ede <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ec8:	3328      	adds	r3, #40	@ 0x28
 8107eca:	2102      	movs	r1, #2
 8107ecc:	4618      	mov	r0, r3
 8107ece:	f001 fbf5 	bl	81096bc <RCCEx_PLL3_Config>
 8107ed2:	4603      	mov	r3, r0
 8107ed4:	2b00      	cmp	r3, #0
 8107ed6:	d002      	beq.n	8107ede <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8107ed8:	2301      	movs	r3, #1
 8107eda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8107ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107ee6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8107eea:	663b      	str	r3, [r7, #96]	@ 0x60
 8107eec:	2300      	movs	r3, #0
 8107eee:	667b      	str	r3, [r7, #100]	@ 0x64
 8107ef0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8107ef4:	460b      	mov	r3, r1
 8107ef6:	4313      	orrs	r3, r2
 8107ef8:	d038      	beq.n	8107f6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8107efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8107f02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8107f06:	d018      	beq.n	8107f3a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8107f08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8107f0c:	d811      	bhi.n	8107f32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8107f0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107f12:	d014      	beq.n	8107f3e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8107f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107f18:	d80b      	bhi.n	8107f32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8107f1a:	2b00      	cmp	r3, #0
 8107f1c:	d011      	beq.n	8107f42 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8107f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107f22:	d106      	bne.n	8107f32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107f24:	4bc3      	ldr	r3, [pc, #780]	@ (8108234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107f28:	4ac2      	ldr	r2, [pc, #776]	@ (8108234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8107f30:	e008      	b.n	8107f44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107f32:	2301      	movs	r3, #1
 8107f34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107f38:	e004      	b.n	8107f44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8107f3a:	bf00      	nop
 8107f3c:	e002      	b.n	8107f44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8107f3e:	bf00      	nop
 8107f40:	e000      	b.n	8107f44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8107f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107f48:	2b00      	cmp	r3, #0
 8107f4a:	d10b      	bne.n	8107f64 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8107f4c:	4bb9      	ldr	r3, [pc, #740]	@ (8108234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107f50:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8107f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8107f5c:	4ab5      	ldr	r2, [pc, #724]	@ (8108234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107f5e:	430b      	orrs	r3, r1
 8107f60:	6553      	str	r3, [r2, #84]	@ 0x54
 8107f62:	e003      	b.n	8107f6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107f68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8107f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107f74:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8107f78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8107f7a:	2300      	movs	r3, #0
 8107f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8107f7e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8107f82:	460b      	mov	r3, r1
 8107f84:	4313      	orrs	r3, r2
 8107f86:	d009      	beq.n	8107f9c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8107f88:	4baa      	ldr	r3, [pc, #680]	@ (8108234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107f8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8107f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8107f96:	4aa7      	ldr	r2, [pc, #668]	@ (8108234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107f98:	430b      	orrs	r3, r1
 8107f9a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8107f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107fa4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8107fa8:	653b      	str	r3, [r7, #80]	@ 0x50
 8107faa:	2300      	movs	r3, #0
 8107fac:	657b      	str	r3, [r7, #84]	@ 0x54
 8107fae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8107fb2:	460b      	mov	r3, r1
 8107fb4:	4313      	orrs	r3, r2
 8107fb6:	d00a      	beq.n	8107fce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8107fb8:	4b9e      	ldr	r3, [pc, #632]	@ (8108234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107fba:	691b      	ldr	r3, [r3, #16]
 8107fbc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8107fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107fc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8107fc8:	4a9a      	ldr	r2, [pc, #616]	@ (8108234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107fca:	430b      	orrs	r3, r1
 8107fcc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8107fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107fd6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8107fda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8107fdc:	2300      	movs	r3, #0
 8107fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8107fe0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8107fe4:	460b      	mov	r3, r1
 8107fe6:	4313      	orrs	r3, r2
 8107fe8:	d009      	beq.n	8107ffe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8107fea:	4b92      	ldr	r3, [pc, #584]	@ (8108234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107fee:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8107ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107ff8:	4a8e      	ldr	r2, [pc, #568]	@ (8108234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107ffa:	430b      	orrs	r3, r1
 8107ffc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8107ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108006:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810800a:	643b      	str	r3, [r7, #64]	@ 0x40
 810800c:	2300      	movs	r3, #0
 810800e:	647b      	str	r3, [r7, #68]	@ 0x44
 8108010:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8108014:	460b      	mov	r3, r1
 8108016:	4313      	orrs	r3, r2
 8108018:	d00e      	beq.n	8108038 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810801a:	4b86      	ldr	r3, [pc, #536]	@ (8108234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810801c:	691b      	ldr	r3, [r3, #16]
 810801e:	4a85      	ldr	r2, [pc, #532]	@ (8108234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108020:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8108024:	6113      	str	r3, [r2, #16]
 8108026:	4b83      	ldr	r3, [pc, #524]	@ (8108234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108028:	6919      	ldr	r1, [r3, #16]
 810802a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810802e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8108032:	4a80      	ldr	r2, [pc, #512]	@ (8108234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108034:	430b      	orrs	r3, r1
 8108036:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8108038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108040:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8108044:	63bb      	str	r3, [r7, #56]	@ 0x38
 8108046:	2300      	movs	r3, #0
 8108048:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810804a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 810804e:	460b      	mov	r3, r1
 8108050:	4313      	orrs	r3, r2
 8108052:	d009      	beq.n	8108068 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8108054:	4b77      	ldr	r3, [pc, #476]	@ (8108234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108058:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810805c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108062:	4a74      	ldr	r2, [pc, #464]	@ (8108234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108064:	430b      	orrs	r3, r1
 8108066:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8108068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108070:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8108074:	633b      	str	r3, [r7, #48]	@ 0x30
 8108076:	2300      	movs	r3, #0
 8108078:	637b      	str	r3, [r7, #52]	@ 0x34
 810807a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 810807e:	460b      	mov	r3, r1
 8108080:	4313      	orrs	r3, r2
 8108082:	d00a      	beq.n	810809a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8108084:	4b6b      	ldr	r3, [pc, #428]	@ (8108234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108088:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 810808c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108090:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8108094:	4a67      	ldr	r2, [pc, #412]	@ (8108234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108096:	430b      	orrs	r3, r1
 8108098:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810809a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81080a2:	2100      	movs	r1, #0
 81080a4:	62b9      	str	r1, [r7, #40]	@ 0x28
 81080a6:	f003 0301 	and.w	r3, r3, #1
 81080aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81080ac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 81080b0:	460b      	mov	r3, r1
 81080b2:	4313      	orrs	r3, r2
 81080b4:	d011      	beq.n	81080da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81080b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080ba:	3308      	adds	r3, #8
 81080bc:	2100      	movs	r1, #0
 81080be:	4618      	mov	r0, r3
 81080c0:	f001 fa4a 	bl	8109558 <RCCEx_PLL2_Config>
 81080c4:	4603      	mov	r3, r0
 81080c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81080ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81080ce:	2b00      	cmp	r3, #0
 81080d0:	d003      	beq.n	81080da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81080d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81080d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 81080da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81080e2:	2100      	movs	r1, #0
 81080e4:	6239      	str	r1, [r7, #32]
 81080e6:	f003 0302 	and.w	r3, r3, #2
 81080ea:	627b      	str	r3, [r7, #36]	@ 0x24
 81080ec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81080f0:	460b      	mov	r3, r1
 81080f2:	4313      	orrs	r3, r2
 81080f4:	d011      	beq.n	810811a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81080f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080fa:	3308      	adds	r3, #8
 81080fc:	2101      	movs	r1, #1
 81080fe:	4618      	mov	r0, r3
 8108100:	f001 fa2a 	bl	8109558 <RCCEx_PLL2_Config>
 8108104:	4603      	mov	r3, r0
 8108106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810810a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810810e:	2b00      	cmp	r3, #0
 8108110:	d003      	beq.n	810811a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810811a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810811e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108122:	2100      	movs	r1, #0
 8108124:	61b9      	str	r1, [r7, #24]
 8108126:	f003 0304 	and.w	r3, r3, #4
 810812a:	61fb      	str	r3, [r7, #28]
 810812c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8108130:	460b      	mov	r3, r1
 8108132:	4313      	orrs	r3, r2
 8108134:	d011      	beq.n	810815a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8108136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810813a:	3308      	adds	r3, #8
 810813c:	2102      	movs	r1, #2
 810813e:	4618      	mov	r0, r3
 8108140:	f001 fa0a 	bl	8109558 <RCCEx_PLL2_Config>
 8108144:	4603      	mov	r3, r0
 8108146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810814a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810814e:	2b00      	cmp	r3, #0
 8108150:	d003      	beq.n	810815a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108156:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810815a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108162:	2100      	movs	r1, #0
 8108164:	6139      	str	r1, [r7, #16]
 8108166:	f003 0308 	and.w	r3, r3, #8
 810816a:	617b      	str	r3, [r7, #20]
 810816c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8108170:	460b      	mov	r3, r1
 8108172:	4313      	orrs	r3, r2
 8108174:	d011      	beq.n	810819a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8108176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810817a:	3328      	adds	r3, #40	@ 0x28
 810817c:	2100      	movs	r1, #0
 810817e:	4618      	mov	r0, r3
 8108180:	f001 fa9c 	bl	81096bc <RCCEx_PLL3_Config>
 8108184:	4603      	mov	r3, r0
 8108186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 810818a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810818e:	2b00      	cmp	r3, #0
 8108190:	d003      	beq.n	810819a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108196:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810819a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81081a2:	2100      	movs	r1, #0
 81081a4:	60b9      	str	r1, [r7, #8]
 81081a6:	f003 0310 	and.w	r3, r3, #16
 81081aa:	60fb      	str	r3, [r7, #12]
 81081ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81081b0:	460b      	mov	r3, r1
 81081b2:	4313      	orrs	r3, r2
 81081b4:	d011      	beq.n	81081da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81081b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81081ba:	3328      	adds	r3, #40	@ 0x28
 81081bc:	2101      	movs	r1, #1
 81081be:	4618      	mov	r0, r3
 81081c0:	f001 fa7c 	bl	81096bc <RCCEx_PLL3_Config>
 81081c4:	4603      	mov	r3, r0
 81081c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81081ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81081ce:	2b00      	cmp	r3, #0
 81081d0:	d003      	beq.n	81081da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81081d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81081d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 81081da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81081de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81081e2:	2100      	movs	r1, #0
 81081e4:	6039      	str	r1, [r7, #0]
 81081e6:	f003 0320 	and.w	r3, r3, #32
 81081ea:	607b      	str	r3, [r7, #4]
 81081ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 81081f0:	460b      	mov	r3, r1
 81081f2:	4313      	orrs	r3, r2
 81081f4:	d011      	beq.n	810821a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81081f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81081fa:	3328      	adds	r3, #40	@ 0x28
 81081fc:	2102      	movs	r1, #2
 81081fe:	4618      	mov	r0, r3
 8108200:	f001 fa5c 	bl	81096bc <RCCEx_PLL3_Config>
 8108204:	4603      	mov	r3, r0
 8108206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810820a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810820e:	2b00      	cmp	r3, #0
 8108210:	d003      	beq.n	810821a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108216:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 810821a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 810821e:	2b00      	cmp	r3, #0
 8108220:	d101      	bne.n	8108226 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8108222:	2300      	movs	r3, #0
 8108224:	e000      	b.n	8108228 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8108226:	2301      	movs	r3, #1
}
 8108228:	4618      	mov	r0, r3
 810822a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 810822e:	46bd      	mov	sp, r7
 8108230:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8108234:	58024400 	.word	0x58024400

08108238 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8108238:	b580      	push	{r7, lr}
 810823a:	b090      	sub	sp, #64	@ 0x40
 810823c:	af00      	add	r7, sp, #0
 810823e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8108242:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108246:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 810824a:	430b      	orrs	r3, r1
 810824c:	f040 8094 	bne.w	8108378 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8108250:	4b9e      	ldr	r3, [pc, #632]	@ (81084cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8108252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108254:	f003 0307 	and.w	r3, r3, #7
 8108258:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810825a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810825c:	2b04      	cmp	r3, #4
 810825e:	f200 8087 	bhi.w	8108370 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8108262:	a201      	add	r2, pc, #4	@ (adr r2, 8108268 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8108264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108268:	0810827d 	.word	0x0810827d
 810826c:	081082a5 	.word	0x081082a5
 8108270:	081082cd 	.word	0x081082cd
 8108274:	08108369 	.word	0x08108369
 8108278:	081082f5 	.word	0x081082f5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810827c:	4b93      	ldr	r3, [pc, #588]	@ (81084cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810827e:	681b      	ldr	r3, [r3, #0]
 8108280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8108284:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8108288:	d108      	bne.n	810829c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810828a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810828e:	4618      	mov	r0, r3
 8108290:	f001 f810 	bl	81092b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8108294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108298:	f000 bd45 	b.w	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810829c:	2300      	movs	r3, #0
 810829e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81082a0:	f000 bd41 	b.w	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81082a4:	4b89      	ldr	r3, [pc, #548]	@ (81084cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81082a6:	681b      	ldr	r3, [r3, #0]
 81082a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81082ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81082b0:	d108      	bne.n	81082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81082b2:	f107 0318 	add.w	r3, r7, #24
 81082b6:	4618      	mov	r0, r3
 81082b8:	f000 fd54 	bl	8108d64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81082bc:	69bb      	ldr	r3, [r7, #24]
 81082be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81082c0:	f000 bd31 	b.w	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81082c4:	2300      	movs	r3, #0
 81082c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81082c8:	f000 bd2d 	b.w	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81082cc:	4b7f      	ldr	r3, [pc, #508]	@ (81084cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81082ce:	681b      	ldr	r3, [r3, #0]
 81082d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81082d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81082d8:	d108      	bne.n	81082ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81082da:	f107 030c 	add.w	r3, r7, #12
 81082de:	4618      	mov	r0, r3
 81082e0:	f000 fe94 	bl	810900c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81082e4:	68fb      	ldr	r3, [r7, #12]
 81082e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81082e8:	f000 bd1d 	b.w	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81082ec:	2300      	movs	r3, #0
 81082ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81082f0:	f000 bd19 	b.w	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81082f4:	4b75      	ldr	r3, [pc, #468]	@ (81084cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81082f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81082f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81082fc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81082fe:	4b73      	ldr	r3, [pc, #460]	@ (81084cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8108300:	681b      	ldr	r3, [r3, #0]
 8108302:	f003 0304 	and.w	r3, r3, #4
 8108306:	2b04      	cmp	r3, #4
 8108308:	d10c      	bne.n	8108324 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 810830a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810830c:	2b00      	cmp	r3, #0
 810830e:	d109      	bne.n	8108324 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108310:	4b6e      	ldr	r3, [pc, #440]	@ (81084cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8108312:	681b      	ldr	r3, [r3, #0]
 8108314:	08db      	lsrs	r3, r3, #3
 8108316:	f003 0303 	and.w	r3, r3, #3
 810831a:	4a6d      	ldr	r2, [pc, #436]	@ (81084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810831c:	fa22 f303 	lsr.w	r3, r2, r3
 8108320:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108322:	e01f      	b.n	8108364 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108324:	4b69      	ldr	r3, [pc, #420]	@ (81084cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8108326:	681b      	ldr	r3, [r3, #0]
 8108328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810832c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108330:	d106      	bne.n	8108340 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8108332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108334:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108338:	d102      	bne.n	8108340 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810833a:	4b66      	ldr	r3, [pc, #408]	@ (81084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810833c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810833e:	e011      	b.n	8108364 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108340:	4b62      	ldr	r3, [pc, #392]	@ (81084cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8108342:	681b      	ldr	r3, [r3, #0]
 8108344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108348:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810834c:	d106      	bne.n	810835c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 810834e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108354:	d102      	bne.n	810835c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8108356:	4b60      	ldr	r3, [pc, #384]	@ (81084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8108358:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810835a:	e003      	b.n	8108364 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810835c:	2300      	movs	r3, #0
 810835e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8108360:	f000 bce1 	b.w	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108364:	f000 bcdf 	b.w	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8108368:	4b5c      	ldr	r3, [pc, #368]	@ (81084dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810836a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810836c:	f000 bcdb 	b.w	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8108370:	2300      	movs	r3, #0
 8108372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108374:	f000 bcd7 	b.w	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8108378:	e9d7 2300 	ldrd	r2, r3, [r7]
 810837c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8108380:	430b      	orrs	r3, r1
 8108382:	f040 80ad 	bne.w	81084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8108386:	4b51      	ldr	r3, [pc, #324]	@ (81084cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8108388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810838a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 810838e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8108390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108396:	d056      	beq.n	8108446 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8108398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810839a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810839e:	f200 8090 	bhi.w	81084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81083a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81083a4:	2bc0      	cmp	r3, #192	@ 0xc0
 81083a6:	f000 8088 	beq.w	81084ba <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 81083aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81083ac:	2bc0      	cmp	r3, #192	@ 0xc0
 81083ae:	f200 8088 	bhi.w	81084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81083b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81083b4:	2b80      	cmp	r3, #128	@ 0x80
 81083b6:	d032      	beq.n	810841e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 81083b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81083ba:	2b80      	cmp	r3, #128	@ 0x80
 81083bc:	f200 8081 	bhi.w	81084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81083c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81083c2:	2b00      	cmp	r3, #0
 81083c4:	d003      	beq.n	81083ce <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 81083c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81083c8:	2b40      	cmp	r3, #64	@ 0x40
 81083ca:	d014      	beq.n	81083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 81083cc:	e079      	b.n	81084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81083ce:	4b3f      	ldr	r3, [pc, #252]	@ (81084cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81083d0:	681b      	ldr	r3, [r3, #0]
 81083d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81083d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81083da:	d108      	bne.n	81083ee <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81083dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81083e0:	4618      	mov	r0, r3
 81083e2:	f000 ff67 	bl	81092b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81083e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81083e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81083ea:	f000 bc9c 	b.w	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81083ee:	2300      	movs	r3, #0
 81083f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81083f2:	f000 bc98 	b.w	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81083f6:	4b35      	ldr	r3, [pc, #212]	@ (81084cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81083f8:	681b      	ldr	r3, [r3, #0]
 81083fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81083fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108402:	d108      	bne.n	8108416 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108404:	f107 0318 	add.w	r3, r7, #24
 8108408:	4618      	mov	r0, r3
 810840a:	f000 fcab 	bl	8108d64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810840e:	69bb      	ldr	r3, [r7, #24]
 8108410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108412:	f000 bc88 	b.w	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108416:	2300      	movs	r3, #0
 8108418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810841a:	f000 bc84 	b.w	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810841e:	4b2b      	ldr	r3, [pc, #172]	@ (81084cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8108420:	681b      	ldr	r3, [r3, #0]
 8108422:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108426:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810842a:	d108      	bne.n	810843e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810842c:	f107 030c 	add.w	r3, r7, #12
 8108430:	4618      	mov	r0, r3
 8108432:	f000 fdeb 	bl	810900c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8108436:	68fb      	ldr	r3, [r7, #12]
 8108438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810843a:	f000 bc74 	b.w	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810843e:	2300      	movs	r3, #0
 8108440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108442:	f000 bc70 	b.w	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8108446:	4b21      	ldr	r3, [pc, #132]	@ (81084cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8108448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810844a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810844e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8108450:	4b1e      	ldr	r3, [pc, #120]	@ (81084cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8108452:	681b      	ldr	r3, [r3, #0]
 8108454:	f003 0304 	and.w	r3, r3, #4
 8108458:	2b04      	cmp	r3, #4
 810845a:	d10c      	bne.n	8108476 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 810845c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810845e:	2b00      	cmp	r3, #0
 8108460:	d109      	bne.n	8108476 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108462:	4b1a      	ldr	r3, [pc, #104]	@ (81084cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8108464:	681b      	ldr	r3, [r3, #0]
 8108466:	08db      	lsrs	r3, r3, #3
 8108468:	f003 0303 	and.w	r3, r3, #3
 810846c:	4a18      	ldr	r2, [pc, #96]	@ (81084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810846e:	fa22 f303 	lsr.w	r3, r2, r3
 8108472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108474:	e01f      	b.n	81084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108476:	4b15      	ldr	r3, [pc, #84]	@ (81084cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8108478:	681b      	ldr	r3, [r3, #0]
 810847a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810847e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108482:	d106      	bne.n	8108492 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8108484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108486:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810848a:	d102      	bne.n	8108492 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810848c:	4b11      	ldr	r3, [pc, #68]	@ (81084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810848e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108490:	e011      	b.n	81084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108492:	4b0e      	ldr	r3, [pc, #56]	@ (81084cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8108494:	681b      	ldr	r3, [r3, #0]
 8108496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810849a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810849e:	d106      	bne.n	81084ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 81084a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81084a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81084a6:	d102      	bne.n	81084ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81084a8:	4b0b      	ldr	r3, [pc, #44]	@ (81084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81084aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81084ac:	e003      	b.n	81084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81084ae:	2300      	movs	r3, #0
 81084b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81084b2:	f000 bc38 	b.w	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81084b6:	f000 bc36 	b.w	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81084ba:	4b08      	ldr	r3, [pc, #32]	@ (81084dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81084bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81084be:	f000 bc32 	b.w	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81084c2:	2300      	movs	r3, #0
 81084c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81084c6:	f000 bc2e 	b.w	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81084ca:	bf00      	nop
 81084cc:	58024400 	.word	0x58024400
 81084d0:	03d09000 	.word	0x03d09000
 81084d4:	003d0900 	.word	0x003d0900
 81084d8:	007a1200 	.word	0x007a1200
 81084dc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 81084e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 81084e4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 81084e8:	430b      	orrs	r3, r1
 81084ea:	f040 809c 	bne.w	8108626 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 81084ee:	4b9e      	ldr	r3, [pc, #632]	@ (8108768 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81084f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81084f2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 81084f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81084f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81084fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81084fe:	d054      	beq.n	81085aa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8108500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108502:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8108506:	f200 808b 	bhi.w	8108620 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810850a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810850c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8108510:	f000 8083 	beq.w	810861a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8108514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108516:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810851a:	f200 8081 	bhi.w	8108620 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810851e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108520:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8108524:	d02f      	beq.n	8108586 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8108526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108528:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810852c:	d878      	bhi.n	8108620 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810852e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108530:	2b00      	cmp	r3, #0
 8108532:	d004      	beq.n	810853e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8108534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108536:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810853a:	d012      	beq.n	8108562 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 810853c:	e070      	b.n	8108620 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810853e:	4b8a      	ldr	r3, [pc, #552]	@ (8108768 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8108540:	681b      	ldr	r3, [r3, #0]
 8108542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8108546:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810854a:	d107      	bne.n	810855c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810854c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108550:	4618      	mov	r0, r3
 8108552:	f000 feaf 	bl	81092b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8108556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810855a:	e3e4      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810855c:	2300      	movs	r3, #0
 810855e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108560:	e3e1      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108562:	4b81      	ldr	r3, [pc, #516]	@ (8108768 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8108564:	681b      	ldr	r3, [r3, #0]
 8108566:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810856a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810856e:	d107      	bne.n	8108580 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108570:	f107 0318 	add.w	r3, r7, #24
 8108574:	4618      	mov	r0, r3
 8108576:	f000 fbf5 	bl	8108d64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810857a:	69bb      	ldr	r3, [r7, #24]
 810857c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810857e:	e3d2      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108580:	2300      	movs	r3, #0
 8108582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108584:	e3cf      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108586:	4b78      	ldr	r3, [pc, #480]	@ (8108768 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8108588:	681b      	ldr	r3, [r3, #0]
 810858a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810858e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108592:	d107      	bne.n	81085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108594:	f107 030c 	add.w	r3, r7, #12
 8108598:	4618      	mov	r0, r3
 810859a:	f000 fd37 	bl	810900c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810859e:	68fb      	ldr	r3, [r7, #12]
 81085a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81085a2:	e3c0      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81085a4:	2300      	movs	r3, #0
 81085a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81085a8:	e3bd      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81085aa:	4b6f      	ldr	r3, [pc, #444]	@ (8108768 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81085ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81085ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81085b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81085b4:	4b6c      	ldr	r3, [pc, #432]	@ (8108768 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81085b6:	681b      	ldr	r3, [r3, #0]
 81085b8:	f003 0304 	and.w	r3, r3, #4
 81085bc:	2b04      	cmp	r3, #4
 81085be:	d10c      	bne.n	81085da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 81085c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81085c2:	2b00      	cmp	r3, #0
 81085c4:	d109      	bne.n	81085da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81085c6:	4b68      	ldr	r3, [pc, #416]	@ (8108768 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81085c8:	681b      	ldr	r3, [r3, #0]
 81085ca:	08db      	lsrs	r3, r3, #3
 81085cc:	f003 0303 	and.w	r3, r3, #3
 81085d0:	4a66      	ldr	r2, [pc, #408]	@ (810876c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 81085d2:	fa22 f303 	lsr.w	r3, r2, r3
 81085d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81085d8:	e01e      	b.n	8108618 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81085da:	4b63      	ldr	r3, [pc, #396]	@ (8108768 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81085dc:	681b      	ldr	r3, [r3, #0]
 81085de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81085e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81085e6:	d106      	bne.n	81085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 81085e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81085ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81085ee:	d102      	bne.n	81085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81085f0:	4b5f      	ldr	r3, [pc, #380]	@ (8108770 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81085f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81085f4:	e010      	b.n	8108618 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81085f6:	4b5c      	ldr	r3, [pc, #368]	@ (8108768 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81085f8:	681b      	ldr	r3, [r3, #0]
 81085fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81085fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108602:	d106      	bne.n	8108612 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8108604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810860a:	d102      	bne.n	8108612 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810860c:	4b59      	ldr	r3, [pc, #356]	@ (8108774 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810860e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108610:	e002      	b.n	8108618 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8108612:	2300      	movs	r3, #0
 8108614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8108616:	e386      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108618:	e385      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810861a:	4b57      	ldr	r3, [pc, #348]	@ (8108778 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 810861c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810861e:	e382      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8108620:	2300      	movs	r3, #0
 8108622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108624:	e37f      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8108626:	e9d7 2300 	ldrd	r2, r3, [r7]
 810862a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 810862e:	430b      	orrs	r3, r1
 8108630:	f040 80a7 	bne.w	8108782 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8108634:	4b4c      	ldr	r3, [pc, #304]	@ (8108768 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8108636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108638:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 810863c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810863e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108640:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8108644:	d055      	beq.n	81086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8108646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108648:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810864c:	f200 8096 	bhi.w	810877c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8108650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108652:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8108656:	f000 8084 	beq.w	8108762 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 810865a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810865c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8108660:	f200 808c 	bhi.w	810877c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8108664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108666:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810866a:	d030      	beq.n	81086ce <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 810866c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810866e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8108672:	f200 8083 	bhi.w	810877c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8108676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108678:	2b00      	cmp	r3, #0
 810867a:	d004      	beq.n	8108686 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 810867c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810867e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8108682:	d012      	beq.n	81086aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8108684:	e07a      	b.n	810877c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108686:	4b38      	ldr	r3, [pc, #224]	@ (8108768 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8108688:	681b      	ldr	r3, [r3, #0]
 810868a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810868e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8108692:	d107      	bne.n	81086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108698:	4618      	mov	r0, r3
 810869a:	f000 fe0b 	bl	81092b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810869e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81086a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81086a2:	e340      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81086a4:	2300      	movs	r3, #0
 81086a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81086a8:	e33d      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81086aa:	4b2f      	ldr	r3, [pc, #188]	@ (8108768 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81086ac:	681b      	ldr	r3, [r3, #0]
 81086ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81086b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81086b6:	d107      	bne.n	81086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81086b8:	f107 0318 	add.w	r3, r7, #24
 81086bc:	4618      	mov	r0, r3
 81086be:	f000 fb51 	bl	8108d64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81086c2:	69bb      	ldr	r3, [r7, #24]
 81086c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81086c6:	e32e      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81086c8:	2300      	movs	r3, #0
 81086ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81086cc:	e32b      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81086ce:	4b26      	ldr	r3, [pc, #152]	@ (8108768 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81086d0:	681b      	ldr	r3, [r3, #0]
 81086d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81086d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81086da:	d107      	bne.n	81086ec <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81086dc:	f107 030c 	add.w	r3, r7, #12
 81086e0:	4618      	mov	r0, r3
 81086e2:	f000 fc93 	bl	810900c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81086e6:	68fb      	ldr	r3, [r7, #12]
 81086e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81086ea:	e31c      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81086ec:	2300      	movs	r3, #0
 81086ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81086f0:	e319      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81086f2:	4b1d      	ldr	r3, [pc, #116]	@ (8108768 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81086f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81086f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81086fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81086fc:	4b1a      	ldr	r3, [pc, #104]	@ (8108768 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81086fe:	681b      	ldr	r3, [r3, #0]
 8108700:	f003 0304 	and.w	r3, r3, #4
 8108704:	2b04      	cmp	r3, #4
 8108706:	d10c      	bne.n	8108722 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8108708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810870a:	2b00      	cmp	r3, #0
 810870c:	d109      	bne.n	8108722 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810870e:	4b16      	ldr	r3, [pc, #88]	@ (8108768 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8108710:	681b      	ldr	r3, [r3, #0]
 8108712:	08db      	lsrs	r3, r3, #3
 8108714:	f003 0303 	and.w	r3, r3, #3
 8108718:	4a14      	ldr	r2, [pc, #80]	@ (810876c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810871a:	fa22 f303 	lsr.w	r3, r2, r3
 810871e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108720:	e01e      	b.n	8108760 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108722:	4b11      	ldr	r3, [pc, #68]	@ (8108768 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8108724:	681b      	ldr	r3, [r3, #0]
 8108726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810872a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810872e:	d106      	bne.n	810873e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8108730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108732:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108736:	d102      	bne.n	810873e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8108738:	4b0d      	ldr	r3, [pc, #52]	@ (8108770 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810873a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810873c:	e010      	b.n	8108760 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810873e:	4b0a      	ldr	r3, [pc, #40]	@ (8108768 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8108740:	681b      	ldr	r3, [r3, #0]
 8108742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108746:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810874a:	d106      	bne.n	810875a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 810874c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810874e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108752:	d102      	bne.n	810875a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8108754:	4b07      	ldr	r3, [pc, #28]	@ (8108774 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8108756:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108758:	e002      	b.n	8108760 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810875a:	2300      	movs	r3, #0
 810875c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810875e:	e2e2      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108760:	e2e1      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8108762:	4b05      	ldr	r3, [pc, #20]	@ (8108778 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8108764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108766:	e2de      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108768:	58024400 	.word	0x58024400
 810876c:	03d09000 	.word	0x03d09000
 8108770:	003d0900 	.word	0x003d0900
 8108774:	007a1200 	.word	0x007a1200
 8108778:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 810877c:	2300      	movs	r3, #0
 810877e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108780:	e2d1      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8108782:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108786:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 810878a:	430b      	orrs	r3, r1
 810878c:	f040 809c 	bne.w	81088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8108790:	4b93      	ldr	r3, [pc, #588]	@ (81089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108794:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8108798:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810879a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810879c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81087a0:	d054      	beq.n	810884c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 81087a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81087a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81087a8:	f200 808b 	bhi.w	81088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81087ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81087ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81087b2:	f000 8083 	beq.w	81088bc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 81087b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81087b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81087bc:	f200 8081 	bhi.w	81088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81087c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81087c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81087c6:	d02f      	beq.n	8108828 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 81087c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81087ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81087ce:	d878      	bhi.n	81088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81087d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81087d2:	2b00      	cmp	r3, #0
 81087d4:	d004      	beq.n	81087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 81087d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81087d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81087dc:	d012      	beq.n	8108804 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 81087de:	e070      	b.n	81088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81087e0:	4b7f      	ldr	r3, [pc, #508]	@ (81089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81087e2:	681b      	ldr	r3, [r3, #0]
 81087e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81087e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81087ec:	d107      	bne.n	81087fe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81087ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81087f2:	4618      	mov	r0, r3
 81087f4:	f000 fd5e 	bl	81092b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81087f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81087fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81087fc:	e293      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81087fe:	2300      	movs	r3, #0
 8108800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108802:	e290      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108804:	4b76      	ldr	r3, [pc, #472]	@ (81089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108806:	681b      	ldr	r3, [r3, #0]
 8108808:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810880c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108810:	d107      	bne.n	8108822 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108812:	f107 0318 	add.w	r3, r7, #24
 8108816:	4618      	mov	r0, r3
 8108818:	f000 faa4 	bl	8108d64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810881c:	69bb      	ldr	r3, [r7, #24]
 810881e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108820:	e281      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108822:	2300      	movs	r3, #0
 8108824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108826:	e27e      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108828:	4b6d      	ldr	r3, [pc, #436]	@ (81089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810882a:	681b      	ldr	r3, [r3, #0]
 810882c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108834:	d107      	bne.n	8108846 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108836:	f107 030c 	add.w	r3, r7, #12
 810883a:	4618      	mov	r0, r3
 810883c:	f000 fbe6 	bl	810900c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8108840:	68fb      	ldr	r3, [r7, #12]
 8108842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108844:	e26f      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108846:	2300      	movs	r3, #0
 8108848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810884a:	e26c      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810884c:	4b64      	ldr	r3, [pc, #400]	@ (81089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810884e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108850:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8108854:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8108856:	4b62      	ldr	r3, [pc, #392]	@ (81089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108858:	681b      	ldr	r3, [r3, #0]
 810885a:	f003 0304 	and.w	r3, r3, #4
 810885e:	2b04      	cmp	r3, #4
 8108860:	d10c      	bne.n	810887c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8108862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108864:	2b00      	cmp	r3, #0
 8108866:	d109      	bne.n	810887c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108868:	4b5d      	ldr	r3, [pc, #372]	@ (81089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810886a:	681b      	ldr	r3, [r3, #0]
 810886c:	08db      	lsrs	r3, r3, #3
 810886e:	f003 0303 	and.w	r3, r3, #3
 8108872:	4a5c      	ldr	r2, [pc, #368]	@ (81089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8108874:	fa22 f303 	lsr.w	r3, r2, r3
 8108878:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810887a:	e01e      	b.n	81088ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810887c:	4b58      	ldr	r3, [pc, #352]	@ (81089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810887e:	681b      	ldr	r3, [r3, #0]
 8108880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108884:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108888:	d106      	bne.n	8108898 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 810888a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810888c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108890:	d102      	bne.n	8108898 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8108892:	4b55      	ldr	r3, [pc, #340]	@ (81089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8108894:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108896:	e010      	b.n	81088ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108898:	4b51      	ldr	r3, [pc, #324]	@ (81089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810889a:	681b      	ldr	r3, [r3, #0]
 810889c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81088a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81088a4:	d106      	bne.n	81088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 81088a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81088a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81088ac:	d102      	bne.n	81088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81088ae:	4b4f      	ldr	r3, [pc, #316]	@ (81089ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81088b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81088b2:	e002      	b.n	81088ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81088b4:	2300      	movs	r3, #0
 81088b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81088b8:	e235      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81088ba:	e234      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81088bc:	4b4c      	ldr	r3, [pc, #304]	@ (81089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 81088be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81088c0:	e231      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81088c2:	2300      	movs	r3, #0
 81088c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81088c6:	e22e      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 81088c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81088cc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 81088d0:	430b      	orrs	r3, r1
 81088d2:	f040 808f 	bne.w	81089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 81088d6:	4b42      	ldr	r3, [pc, #264]	@ (81089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81088d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81088da:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 81088de:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 81088e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81088e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81088e6:	d06b      	beq.n	81089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 81088e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81088ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81088ee:	d874      	bhi.n	81089da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81088f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81088f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81088f6:	d056      	beq.n	81089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 81088f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81088fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81088fe:	d86c      	bhi.n	81089da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8108900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108902:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8108906:	d03b      	beq.n	8108980 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8108908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810890a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810890e:	d864      	bhi.n	81089da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8108910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108912:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108916:	d021      	beq.n	810895c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8108918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810891a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810891e:	d85c      	bhi.n	81089da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8108920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108922:	2b00      	cmp	r3, #0
 8108924:	d004      	beq.n	8108930 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8108926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810892c:	d004      	beq.n	8108938 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 810892e:	e054      	b.n	81089da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8108930:	f7fe fa4c 	bl	8106dcc <HAL_RCC_GetPCLK1Freq>
 8108934:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108936:	e1f6      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108938:	4b29      	ldr	r3, [pc, #164]	@ (81089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810893a:	681b      	ldr	r3, [r3, #0]
 810893c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108940:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108944:	d107      	bne.n	8108956 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108946:	f107 0318 	add.w	r3, r7, #24
 810894a:	4618      	mov	r0, r3
 810894c:	f000 fa0a 	bl	8108d64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8108950:	69fb      	ldr	r3, [r7, #28]
 8108952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108954:	e1e7      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108956:	2300      	movs	r3, #0
 8108958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810895a:	e1e4      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810895c:	4b20      	ldr	r3, [pc, #128]	@ (81089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810895e:	681b      	ldr	r3, [r3, #0]
 8108960:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108968:	d107      	bne.n	810897a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810896a:	f107 030c 	add.w	r3, r7, #12
 810896e:	4618      	mov	r0, r3
 8108970:	f000 fb4c 	bl	810900c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8108974:	693b      	ldr	r3, [r7, #16]
 8108976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108978:	e1d5      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810897a:	2300      	movs	r3, #0
 810897c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810897e:	e1d2      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8108980:	4b17      	ldr	r3, [pc, #92]	@ (81089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108982:	681b      	ldr	r3, [r3, #0]
 8108984:	f003 0304 	and.w	r3, r3, #4
 8108988:	2b04      	cmp	r3, #4
 810898a:	d109      	bne.n	81089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810898c:	4b14      	ldr	r3, [pc, #80]	@ (81089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810898e:	681b      	ldr	r3, [r3, #0]
 8108990:	08db      	lsrs	r3, r3, #3
 8108992:	f003 0303 	and.w	r3, r3, #3
 8108996:	4a13      	ldr	r2, [pc, #76]	@ (81089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8108998:	fa22 f303 	lsr.w	r3, r2, r3
 810899c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810899e:	e1c2      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81089a0:	2300      	movs	r3, #0
 81089a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81089a4:	e1bf      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81089a6:	4b0e      	ldr	r3, [pc, #56]	@ (81089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81089a8:	681b      	ldr	r3, [r3, #0]
 81089aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81089ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81089b2:	d102      	bne.n	81089ba <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 81089b4:	4b0c      	ldr	r3, [pc, #48]	@ (81089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81089b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81089b8:	e1b5      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81089ba:	2300      	movs	r3, #0
 81089bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81089be:	e1b2      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81089c0:	4b07      	ldr	r3, [pc, #28]	@ (81089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81089c2:	681b      	ldr	r3, [r3, #0]
 81089c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81089c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81089cc:	d102      	bne.n	81089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 81089ce:	4b07      	ldr	r3, [pc, #28]	@ (81089ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81089d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81089d2:	e1a8      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81089d4:	2300      	movs	r3, #0
 81089d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81089d8:	e1a5      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81089da:	2300      	movs	r3, #0
 81089dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81089de:	e1a2      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81089e0:	58024400 	.word	0x58024400
 81089e4:	03d09000 	.word	0x03d09000
 81089e8:	003d0900 	.word	0x003d0900
 81089ec:	007a1200 	.word	0x007a1200
 81089f0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81089f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 81089f8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 81089fc:	430b      	orrs	r3, r1
 81089fe:	d173      	bne.n	8108ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8108a00:	4b9c      	ldr	r3, [pc, #624]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108a04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8108a08:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8108a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108a0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108a10:	d02f      	beq.n	8108a72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8108a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108a14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108a18:	d863      	bhi.n	8108ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8108a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108a1c:	2b00      	cmp	r3, #0
 8108a1e:	d004      	beq.n	8108a2a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8108a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108a22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108a26:	d012      	beq.n	8108a4e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8108a28:	e05b      	b.n	8108ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108a2a:	4b92      	ldr	r3, [pc, #584]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108a2c:	681b      	ldr	r3, [r3, #0]
 8108a2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108a32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108a36:	d107      	bne.n	8108a48 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108a38:	f107 0318 	add.w	r3, r7, #24
 8108a3c:	4618      	mov	r0, r3
 8108a3e:	f000 f991 	bl	8108d64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8108a42:	69bb      	ldr	r3, [r7, #24]
 8108a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108a46:	e16e      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108a48:	2300      	movs	r3, #0
 8108a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108a4c:	e16b      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108a4e:	4b89      	ldr	r3, [pc, #548]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108a50:	681b      	ldr	r3, [r3, #0]
 8108a52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108a56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108a5a:	d107      	bne.n	8108a6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108a5c:	f107 030c 	add.w	r3, r7, #12
 8108a60:	4618      	mov	r0, r3
 8108a62:	f000 fad3 	bl	810900c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8108a66:	697b      	ldr	r3, [r7, #20]
 8108a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108a6a:	e15c      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108a6c:	2300      	movs	r3, #0
 8108a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108a70:	e159      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8108a72:	4b80      	ldr	r3, [pc, #512]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108a76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8108a7a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8108a7c:	4b7d      	ldr	r3, [pc, #500]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108a7e:	681b      	ldr	r3, [r3, #0]
 8108a80:	f003 0304 	and.w	r3, r3, #4
 8108a84:	2b04      	cmp	r3, #4
 8108a86:	d10c      	bne.n	8108aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8108a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108a8a:	2b00      	cmp	r3, #0
 8108a8c:	d109      	bne.n	8108aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108a8e:	4b79      	ldr	r3, [pc, #484]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108a90:	681b      	ldr	r3, [r3, #0]
 8108a92:	08db      	lsrs	r3, r3, #3
 8108a94:	f003 0303 	and.w	r3, r3, #3
 8108a98:	4a77      	ldr	r2, [pc, #476]	@ (8108c78 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8108a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8108a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108aa0:	e01e      	b.n	8108ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108aa2:	4b74      	ldr	r3, [pc, #464]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108aa4:	681b      	ldr	r3, [r3, #0]
 8108aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108aae:	d106      	bne.n	8108abe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8108ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108ab2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108ab6:	d102      	bne.n	8108abe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8108ab8:	4b70      	ldr	r3, [pc, #448]	@ (8108c7c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8108aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108abc:	e010      	b.n	8108ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108abe:	4b6d      	ldr	r3, [pc, #436]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108ac0:	681b      	ldr	r3, [r3, #0]
 8108ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108ac6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108aca:	d106      	bne.n	8108ada <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8108acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108ace:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108ad2:	d102      	bne.n	8108ada <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8108ad4:	4b6a      	ldr	r3, [pc, #424]	@ (8108c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8108ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108ad8:	e002      	b.n	8108ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8108ada:	2300      	movs	r3, #0
 8108adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8108ade:	e122      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108ae0:	e121      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8108ae2:	2300      	movs	r3, #0
 8108ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108ae6:	e11e      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8108ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108aec:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8108af0:	430b      	orrs	r3, r1
 8108af2:	d133      	bne.n	8108b5c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8108af4:	4b5f      	ldr	r3, [pc, #380]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8108afc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8108afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108b00:	2b00      	cmp	r3, #0
 8108b02:	d004      	beq.n	8108b0e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8108b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108b06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108b0a:	d012      	beq.n	8108b32 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8108b0c:	e023      	b.n	8108b56 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108b0e:	4b59      	ldr	r3, [pc, #356]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108b10:	681b      	ldr	r3, [r3, #0]
 8108b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8108b16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8108b1a:	d107      	bne.n	8108b2c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108b1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108b20:	4618      	mov	r0, r3
 8108b22:	f000 fbc7 	bl	81092b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8108b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108b2a:	e0fc      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108b2c:	2300      	movs	r3, #0
 8108b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108b30:	e0f9      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108b32:	4b50      	ldr	r3, [pc, #320]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108b34:	681b      	ldr	r3, [r3, #0]
 8108b36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108b3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108b3e:	d107      	bne.n	8108b50 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108b40:	f107 0318 	add.w	r3, r7, #24
 8108b44:	4618      	mov	r0, r3
 8108b46:	f000 f90d 	bl	8108d64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8108b4a:	6a3b      	ldr	r3, [r7, #32]
 8108b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108b4e:	e0ea      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108b50:	2300      	movs	r3, #0
 8108b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108b54:	e0e7      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8108b56:	2300      	movs	r3, #0
 8108b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108b5a:	e0e4      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8108b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108b60:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8108b64:	430b      	orrs	r3, r1
 8108b66:	f040 808d 	bne.w	8108c84 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8108b6a:	4b42      	ldr	r3, [pc, #264]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108b6e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8108b72:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8108b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108b76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8108b7a:	d06b      	beq.n	8108c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8108b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108b7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8108b82:	d874      	bhi.n	8108c6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108b8a:	d056      	beq.n	8108c3a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8108b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108b92:	d86c      	bhi.n	8108c6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108b96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8108b9a:	d03b      	beq.n	8108c14 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8108b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108b9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8108ba2:	d864      	bhi.n	8108c6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108ba6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108baa:	d021      	beq.n	8108bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8108bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108bae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108bb2:	d85c      	bhi.n	8108c6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108bb6:	2b00      	cmp	r3, #0
 8108bb8:	d004      	beq.n	8108bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8108bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108bbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108bc0:	d004      	beq.n	8108bcc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8108bc2:	e054      	b.n	8108c6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8108bc4:	f000 f8b8 	bl	8108d38 <HAL_RCCEx_GetD3PCLK1Freq>
 8108bc8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108bca:	e0ac      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108bcc:	4b29      	ldr	r3, [pc, #164]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108bce:	681b      	ldr	r3, [r3, #0]
 8108bd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108bd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108bd8:	d107      	bne.n	8108bea <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108bda:	f107 0318 	add.w	r3, r7, #24
 8108bde:	4618      	mov	r0, r3
 8108be0:	f000 f8c0 	bl	8108d64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8108be4:	69fb      	ldr	r3, [r7, #28]
 8108be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108be8:	e09d      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108bea:	2300      	movs	r3, #0
 8108bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108bee:	e09a      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108bf0:	4b20      	ldr	r3, [pc, #128]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108bf2:	681b      	ldr	r3, [r3, #0]
 8108bf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108bf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108bfc:	d107      	bne.n	8108c0e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108bfe:	f107 030c 	add.w	r3, r7, #12
 8108c02:	4618      	mov	r0, r3
 8108c04:	f000 fa02 	bl	810900c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8108c08:	693b      	ldr	r3, [r7, #16]
 8108c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108c0c:	e08b      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108c0e:	2300      	movs	r3, #0
 8108c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108c12:	e088      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8108c14:	4b17      	ldr	r3, [pc, #92]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108c16:	681b      	ldr	r3, [r3, #0]
 8108c18:	f003 0304 	and.w	r3, r3, #4
 8108c1c:	2b04      	cmp	r3, #4
 8108c1e:	d109      	bne.n	8108c34 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108c20:	4b14      	ldr	r3, [pc, #80]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108c22:	681b      	ldr	r3, [r3, #0]
 8108c24:	08db      	lsrs	r3, r3, #3
 8108c26:	f003 0303 	and.w	r3, r3, #3
 8108c2a:	4a13      	ldr	r2, [pc, #76]	@ (8108c78 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8108c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8108c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108c32:	e078      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108c34:	2300      	movs	r3, #0
 8108c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108c38:	e075      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8108c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108c3c:	681b      	ldr	r3, [r3, #0]
 8108c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108c42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108c46:	d102      	bne.n	8108c4e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8108c48:	4b0c      	ldr	r3, [pc, #48]	@ (8108c7c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8108c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108c4c:	e06b      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108c4e:	2300      	movs	r3, #0
 8108c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108c52:	e068      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8108c54:	4b07      	ldr	r3, [pc, #28]	@ (8108c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108c56:	681b      	ldr	r3, [r3, #0]
 8108c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108c5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108c60:	d102      	bne.n	8108c68 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8108c62:	4b07      	ldr	r3, [pc, #28]	@ (8108c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8108c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108c66:	e05e      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108c68:	2300      	movs	r3, #0
 8108c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108c6c:	e05b      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8108c6e:	2300      	movs	r3, #0
 8108c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108c72:	e058      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108c74:	58024400 	.word	0x58024400
 8108c78:	03d09000 	.word	0x03d09000
 8108c7c:	003d0900 	.word	0x003d0900
 8108c80:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8108c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108c88:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8108c8c:	430b      	orrs	r3, r1
 8108c8e:	d148      	bne.n	8108d22 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8108c90:	4b27      	ldr	r3, [pc, #156]	@ (8108d30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108c94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8108c98:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8108c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108c9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108ca0:	d02a      	beq.n	8108cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8108ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108ca4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108ca8:	d838      	bhi.n	8108d1c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8108caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108cac:	2b00      	cmp	r3, #0
 8108cae:	d004      	beq.n	8108cba <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8108cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108cb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108cb6:	d00d      	beq.n	8108cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8108cb8:	e030      	b.n	8108d1c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8108cba:	4b1d      	ldr	r3, [pc, #116]	@ (8108d30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108cbc:	681b      	ldr	r3, [r3, #0]
 8108cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108cc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108cc6:	d102      	bne.n	8108cce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8108cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8108d34 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8108cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108ccc:	e02b      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108cce:	2300      	movs	r3, #0
 8108cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108cd2:	e028      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108cd4:	4b16      	ldr	r3, [pc, #88]	@ (8108d30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108cd6:	681b      	ldr	r3, [r3, #0]
 8108cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8108cdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8108ce0:	d107      	bne.n	8108cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108ce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108ce6:	4618      	mov	r0, r3
 8108ce8:	f000 fae4 	bl	81092b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8108cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108cf0:	e019      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108cf2:	2300      	movs	r3, #0
 8108cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108cf6:	e016      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8108d30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108cfa:	681b      	ldr	r3, [r3, #0]
 8108cfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108d00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108d04:	d107      	bne.n	8108d16 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108d06:	f107 0318 	add.w	r3, r7, #24
 8108d0a:	4618      	mov	r0, r3
 8108d0c:	f000 f82a 	bl	8108d64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8108d10:	69fb      	ldr	r3, [r7, #28]
 8108d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108d14:	e007      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108d16:	2300      	movs	r3, #0
 8108d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108d1a:	e004      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8108d1c:	2300      	movs	r3, #0
 8108d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108d20:	e001      	b.n	8108d26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8108d22:	2300      	movs	r3, #0
 8108d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8108d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8108d28:	4618      	mov	r0, r3
 8108d2a:	3740      	adds	r7, #64	@ 0x40
 8108d2c:	46bd      	mov	sp, r7
 8108d2e:	bd80      	pop	{r7, pc}
 8108d30:	58024400 	.word	0x58024400
 8108d34:	007a1200 	.word	0x007a1200

08108d38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8108d38:	b580      	push	{r7, lr}
 8108d3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8108d3c:	f7fe f814 	bl	8106d68 <HAL_RCC_GetHCLKFreq>
 8108d40:	4602      	mov	r2, r0
 8108d42:	4b06      	ldr	r3, [pc, #24]	@ (8108d5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8108d44:	6a1b      	ldr	r3, [r3, #32]
 8108d46:	091b      	lsrs	r3, r3, #4
 8108d48:	f003 0307 	and.w	r3, r3, #7
 8108d4c:	4904      	ldr	r1, [pc, #16]	@ (8108d60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8108d4e:	5ccb      	ldrb	r3, [r1, r3]
 8108d50:	f003 031f 	and.w	r3, r3, #31
 8108d54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8108d58:	4618      	mov	r0, r3
 8108d5a:	bd80      	pop	{r7, pc}
 8108d5c:	58024400 	.word	0x58024400
 8108d60:	081117a0 	.word	0x081117a0

08108d64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8108d64:	b480      	push	{r7}
 8108d66:	b089      	sub	sp, #36	@ 0x24
 8108d68:	af00      	add	r7, sp, #0
 8108d6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108d6c:	4ba1      	ldr	r3, [pc, #644]	@ (8108ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108d70:	f003 0303 	and.w	r3, r3, #3
 8108d74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8108d76:	4b9f      	ldr	r3, [pc, #636]	@ (8108ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108d7a:	0b1b      	lsrs	r3, r3, #12
 8108d7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108d80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8108d82:	4b9c      	ldr	r3, [pc, #624]	@ (8108ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108d86:	091b      	lsrs	r3, r3, #4
 8108d88:	f003 0301 	and.w	r3, r3, #1
 8108d8c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8108d8e:	4b99      	ldr	r3, [pc, #612]	@ (8108ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108d92:	08db      	lsrs	r3, r3, #3
 8108d94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108d98:	693a      	ldr	r2, [r7, #16]
 8108d9a:	fb02 f303 	mul.w	r3, r2, r3
 8108d9e:	ee07 3a90 	vmov	s15, r3
 8108da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108da6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8108daa:	697b      	ldr	r3, [r7, #20]
 8108dac:	2b00      	cmp	r3, #0
 8108dae:	f000 8111 	beq.w	8108fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8108db2:	69bb      	ldr	r3, [r7, #24]
 8108db4:	2b02      	cmp	r3, #2
 8108db6:	f000 8083 	beq.w	8108ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8108dba:	69bb      	ldr	r3, [r7, #24]
 8108dbc:	2b02      	cmp	r3, #2
 8108dbe:	f200 80a1 	bhi.w	8108f04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8108dc2:	69bb      	ldr	r3, [r7, #24]
 8108dc4:	2b00      	cmp	r3, #0
 8108dc6:	d003      	beq.n	8108dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8108dc8:	69bb      	ldr	r3, [r7, #24]
 8108dca:	2b01      	cmp	r3, #1
 8108dcc:	d056      	beq.n	8108e7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8108dce:	e099      	b.n	8108f04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108dd0:	4b88      	ldr	r3, [pc, #544]	@ (8108ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108dd2:	681b      	ldr	r3, [r3, #0]
 8108dd4:	f003 0320 	and.w	r3, r3, #32
 8108dd8:	2b00      	cmp	r3, #0
 8108dda:	d02d      	beq.n	8108e38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108ddc:	4b85      	ldr	r3, [pc, #532]	@ (8108ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108dde:	681b      	ldr	r3, [r3, #0]
 8108de0:	08db      	lsrs	r3, r3, #3
 8108de2:	f003 0303 	and.w	r3, r3, #3
 8108de6:	4a84      	ldr	r2, [pc, #528]	@ (8108ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8108de8:	fa22 f303 	lsr.w	r3, r2, r3
 8108dec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108dee:	68bb      	ldr	r3, [r7, #8]
 8108df0:	ee07 3a90 	vmov	s15, r3
 8108df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108df8:	697b      	ldr	r3, [r7, #20]
 8108dfa:	ee07 3a90 	vmov	s15, r3
 8108dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108e06:	4b7b      	ldr	r3, [pc, #492]	@ (8108ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108e0e:	ee07 3a90 	vmov	s15, r3
 8108e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8108e1a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8108ffc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108e32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8108e36:	e087      	b.n	8108f48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108e38:	697b      	ldr	r3, [r7, #20]
 8108e3a:	ee07 3a90 	vmov	s15, r3
 8108e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108e42:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8109000 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8108e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108e4a:	4b6a      	ldr	r3, [pc, #424]	@ (8108ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108e52:	ee07 3a90 	vmov	s15, r3
 8108e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8108e5e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8108ffc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108e7a:	e065      	b.n	8108f48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108e7c:	697b      	ldr	r3, [r7, #20]
 8108e7e:	ee07 3a90 	vmov	s15, r3
 8108e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108e86:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8109004 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8108e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108e8e:	4b59      	ldr	r3, [pc, #356]	@ (8108ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108e96:	ee07 3a90 	vmov	s15, r3
 8108e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108ea2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8108ffc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108ebe:	e043      	b.n	8108f48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108ec0:	697b      	ldr	r3, [r7, #20]
 8108ec2:	ee07 3a90 	vmov	s15, r3
 8108ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108eca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8109008 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8108ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108ed2:	4b48      	ldr	r3, [pc, #288]	@ (8108ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108eda:	ee07 3a90 	vmov	s15, r3
 8108ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8108ee6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8108ffc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108efe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108f02:	e021      	b.n	8108f48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108f04:	697b      	ldr	r3, [r7, #20]
 8108f06:	ee07 3a90 	vmov	s15, r3
 8108f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108f0e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8109004 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8108f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108f16:	4b37      	ldr	r3, [pc, #220]	@ (8108ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108f1e:	ee07 3a90 	vmov	s15, r3
 8108f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8108f2a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8108ffc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108f42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108f46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8108f48:	4b2a      	ldr	r3, [pc, #168]	@ (8108ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108f4c:	0a5b      	lsrs	r3, r3, #9
 8108f4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108f52:	ee07 3a90 	vmov	s15, r3
 8108f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108f5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108f5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108f62:	edd7 6a07 	vldr	s13, [r7, #28]
 8108f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108f6e:	ee17 2a90 	vmov	r2, s15
 8108f72:	687b      	ldr	r3, [r7, #4]
 8108f74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8108f76:	4b1f      	ldr	r3, [pc, #124]	@ (8108ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108f7a:	0c1b      	lsrs	r3, r3, #16
 8108f7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108f80:	ee07 3a90 	vmov	s15, r3
 8108f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108f88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108f8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108f90:	edd7 6a07 	vldr	s13, [r7, #28]
 8108f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108f9c:	ee17 2a90 	vmov	r2, s15
 8108fa0:	687b      	ldr	r3, [r7, #4]
 8108fa2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8108fa4:	4b13      	ldr	r3, [pc, #76]	@ (8108ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108fa8:	0e1b      	lsrs	r3, r3, #24
 8108faa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108fae:	ee07 3a90 	vmov	s15, r3
 8108fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108fb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108fba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108fbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8108fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108fca:	ee17 2a90 	vmov	r2, s15
 8108fce:	687b      	ldr	r3, [r7, #4]
 8108fd0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8108fd2:	e008      	b.n	8108fe6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8108fd4:	687b      	ldr	r3, [r7, #4]
 8108fd6:	2200      	movs	r2, #0
 8108fd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8108fda:	687b      	ldr	r3, [r7, #4]
 8108fdc:	2200      	movs	r2, #0
 8108fde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8108fe0:	687b      	ldr	r3, [r7, #4]
 8108fe2:	2200      	movs	r2, #0
 8108fe4:	609a      	str	r2, [r3, #8]
}
 8108fe6:	bf00      	nop
 8108fe8:	3724      	adds	r7, #36	@ 0x24
 8108fea:	46bd      	mov	sp, r7
 8108fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ff0:	4770      	bx	lr
 8108ff2:	bf00      	nop
 8108ff4:	58024400 	.word	0x58024400
 8108ff8:	03d09000 	.word	0x03d09000
 8108ffc:	46000000 	.word	0x46000000
 8109000:	4c742400 	.word	0x4c742400
 8109004:	4a742400 	.word	0x4a742400
 8109008:	4af42400 	.word	0x4af42400

0810900c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 810900c:	b480      	push	{r7}
 810900e:	b089      	sub	sp, #36	@ 0x24
 8109010:	af00      	add	r7, sp, #0
 8109012:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109014:	4ba1      	ldr	r3, [pc, #644]	@ (810929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109018:	f003 0303 	and.w	r3, r3, #3
 810901c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810901e:	4b9f      	ldr	r3, [pc, #636]	@ (810929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109022:	0d1b      	lsrs	r3, r3, #20
 8109024:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8109028:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810902a:	4b9c      	ldr	r3, [pc, #624]	@ (810929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810902c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810902e:	0a1b      	lsrs	r3, r3, #8
 8109030:	f003 0301 	and.w	r3, r3, #1
 8109034:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8109036:	4b99      	ldr	r3, [pc, #612]	@ (810929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810903a:	08db      	lsrs	r3, r3, #3
 810903c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109040:	693a      	ldr	r2, [r7, #16]
 8109042:	fb02 f303 	mul.w	r3, r2, r3
 8109046:	ee07 3a90 	vmov	s15, r3
 810904a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810904e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8109052:	697b      	ldr	r3, [r7, #20]
 8109054:	2b00      	cmp	r3, #0
 8109056:	f000 8111 	beq.w	810927c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810905a:	69bb      	ldr	r3, [r7, #24]
 810905c:	2b02      	cmp	r3, #2
 810905e:	f000 8083 	beq.w	8109168 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8109062:	69bb      	ldr	r3, [r7, #24]
 8109064:	2b02      	cmp	r3, #2
 8109066:	f200 80a1 	bhi.w	81091ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810906a:	69bb      	ldr	r3, [r7, #24]
 810906c:	2b00      	cmp	r3, #0
 810906e:	d003      	beq.n	8109078 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8109070:	69bb      	ldr	r3, [r7, #24]
 8109072:	2b01      	cmp	r3, #1
 8109074:	d056      	beq.n	8109124 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8109076:	e099      	b.n	81091ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109078:	4b88      	ldr	r3, [pc, #544]	@ (810929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810907a:	681b      	ldr	r3, [r3, #0]
 810907c:	f003 0320 	and.w	r3, r3, #32
 8109080:	2b00      	cmp	r3, #0
 8109082:	d02d      	beq.n	81090e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109084:	4b85      	ldr	r3, [pc, #532]	@ (810929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109086:	681b      	ldr	r3, [r3, #0]
 8109088:	08db      	lsrs	r3, r3, #3
 810908a:	f003 0303 	and.w	r3, r3, #3
 810908e:	4a84      	ldr	r2, [pc, #528]	@ (81092a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8109090:	fa22 f303 	lsr.w	r3, r2, r3
 8109094:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8109096:	68bb      	ldr	r3, [r7, #8]
 8109098:	ee07 3a90 	vmov	s15, r3
 810909c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81090a0:	697b      	ldr	r3, [r7, #20]
 81090a2:	ee07 3a90 	vmov	s15, r3
 81090a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81090aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81090ae:	4b7b      	ldr	r3, [pc, #492]	@ (810929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81090b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81090b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81090b6:	ee07 3a90 	vmov	s15, r3
 81090ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81090be:	ed97 6a03 	vldr	s12, [r7, #12]
 81090c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81092a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81090c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81090ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81090ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81090d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81090d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81090da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81090de:	e087      	b.n	81091f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81090e0:	697b      	ldr	r3, [r7, #20]
 81090e2:	ee07 3a90 	vmov	s15, r3
 81090e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81090ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81092a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81090ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81090f2:	4b6a      	ldr	r3, [pc, #424]	@ (810929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81090f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81090f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81090fa:	ee07 3a90 	vmov	s15, r3
 81090fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109102:	ed97 6a03 	vldr	s12, [r7, #12]
 8109106:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81092a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810910a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810910e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109112:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810911a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810911e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109122:	e065      	b.n	81091f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8109124:	697b      	ldr	r3, [r7, #20]
 8109126:	ee07 3a90 	vmov	s15, r3
 810912a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810912e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81092ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8109132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109136:	4b59      	ldr	r3, [pc, #356]	@ (810929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810913a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810913e:	ee07 3a90 	vmov	s15, r3
 8109142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109146:	ed97 6a03 	vldr	s12, [r7, #12]
 810914a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81092a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810914e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109156:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810915a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810915e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109166:	e043      	b.n	81091f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8109168:	697b      	ldr	r3, [r7, #20]
 810916a:	ee07 3a90 	vmov	s15, r3
 810916e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109172:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81092b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8109176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810917a:	4b48      	ldr	r3, [pc, #288]	@ (810929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810917c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810917e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109182:	ee07 3a90 	vmov	s15, r3
 8109186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810918a:	ed97 6a03 	vldr	s12, [r7, #12]
 810918e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81092a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810919a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810919e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81091a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81091a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81091aa:	e021      	b.n	81091f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81091ac:	697b      	ldr	r3, [r7, #20]
 81091ae:	ee07 3a90 	vmov	s15, r3
 81091b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81091b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81092ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81091ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81091be:	4b37      	ldr	r3, [pc, #220]	@ (810929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81091c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81091c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81091c6:	ee07 3a90 	vmov	s15, r3
 81091ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81091ce:	ed97 6a03 	vldr	s12, [r7, #12]
 81091d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81092a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81091d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81091da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81091de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81091e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81091e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81091ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81091ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81091f0:	4b2a      	ldr	r3, [pc, #168]	@ (810929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81091f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81091f4:	0a5b      	lsrs	r3, r3, #9
 81091f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81091fa:	ee07 3a90 	vmov	s15, r3
 81091fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109202:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8109206:	ee37 7a87 	vadd.f32	s14, s15, s14
 810920a:	edd7 6a07 	vldr	s13, [r7, #28]
 810920e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109216:	ee17 2a90 	vmov	r2, s15
 810921a:	687b      	ldr	r3, [r7, #4]
 810921c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810921e:	4b1f      	ldr	r3, [pc, #124]	@ (810929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109222:	0c1b      	lsrs	r3, r3, #16
 8109224:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109228:	ee07 3a90 	vmov	s15, r3
 810922c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109230:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8109234:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109238:	edd7 6a07 	vldr	s13, [r7, #28]
 810923c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109244:	ee17 2a90 	vmov	r2, s15
 8109248:	687b      	ldr	r3, [r7, #4]
 810924a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810924c:	4b13      	ldr	r3, [pc, #76]	@ (810929c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810924e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109250:	0e1b      	lsrs	r3, r3, #24
 8109252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109256:	ee07 3a90 	vmov	s15, r3
 810925a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810925e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8109262:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109266:	edd7 6a07 	vldr	s13, [r7, #28]
 810926a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810926e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109272:	ee17 2a90 	vmov	r2, s15
 8109276:	687b      	ldr	r3, [r7, #4]
 8109278:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810927a:	e008      	b.n	810928e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810927c:	687b      	ldr	r3, [r7, #4]
 810927e:	2200      	movs	r2, #0
 8109280:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8109282:	687b      	ldr	r3, [r7, #4]
 8109284:	2200      	movs	r2, #0
 8109286:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8109288:	687b      	ldr	r3, [r7, #4]
 810928a:	2200      	movs	r2, #0
 810928c:	609a      	str	r2, [r3, #8]
}
 810928e:	bf00      	nop
 8109290:	3724      	adds	r7, #36	@ 0x24
 8109292:	46bd      	mov	sp, r7
 8109294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109298:	4770      	bx	lr
 810929a:	bf00      	nop
 810929c:	58024400 	.word	0x58024400
 81092a0:	03d09000 	.word	0x03d09000
 81092a4:	46000000 	.word	0x46000000
 81092a8:	4c742400 	.word	0x4c742400
 81092ac:	4a742400 	.word	0x4a742400
 81092b0:	4af42400 	.word	0x4af42400

081092b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 81092b4:	b480      	push	{r7}
 81092b6:	b089      	sub	sp, #36	@ 0x24
 81092b8:	af00      	add	r7, sp, #0
 81092ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81092bc:	4ba0      	ldr	r3, [pc, #640]	@ (8109540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81092be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81092c0:	f003 0303 	and.w	r3, r3, #3
 81092c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 81092c6:	4b9e      	ldr	r3, [pc, #632]	@ (8109540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81092c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81092ca:	091b      	lsrs	r3, r3, #4
 81092cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81092d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 81092d2:	4b9b      	ldr	r3, [pc, #620]	@ (8109540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81092d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81092d6:	f003 0301 	and.w	r3, r3, #1
 81092da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81092dc:	4b98      	ldr	r3, [pc, #608]	@ (8109540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81092de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81092e0:	08db      	lsrs	r3, r3, #3
 81092e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81092e6:	693a      	ldr	r2, [r7, #16]
 81092e8:	fb02 f303 	mul.w	r3, r2, r3
 81092ec:	ee07 3a90 	vmov	s15, r3
 81092f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81092f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 81092f8:	697b      	ldr	r3, [r7, #20]
 81092fa:	2b00      	cmp	r3, #0
 81092fc:	f000 8111 	beq.w	8109522 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8109300:	69bb      	ldr	r3, [r7, #24]
 8109302:	2b02      	cmp	r3, #2
 8109304:	f000 8083 	beq.w	810940e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8109308:	69bb      	ldr	r3, [r7, #24]
 810930a:	2b02      	cmp	r3, #2
 810930c:	f200 80a1 	bhi.w	8109452 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8109310:	69bb      	ldr	r3, [r7, #24]
 8109312:	2b00      	cmp	r3, #0
 8109314:	d003      	beq.n	810931e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8109316:	69bb      	ldr	r3, [r7, #24]
 8109318:	2b01      	cmp	r3, #1
 810931a:	d056      	beq.n	81093ca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 810931c:	e099      	b.n	8109452 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810931e:	4b88      	ldr	r3, [pc, #544]	@ (8109540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8109320:	681b      	ldr	r3, [r3, #0]
 8109322:	f003 0320 	and.w	r3, r3, #32
 8109326:	2b00      	cmp	r3, #0
 8109328:	d02d      	beq.n	8109386 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810932a:	4b85      	ldr	r3, [pc, #532]	@ (8109540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810932c:	681b      	ldr	r3, [r3, #0]
 810932e:	08db      	lsrs	r3, r3, #3
 8109330:	f003 0303 	and.w	r3, r3, #3
 8109334:	4a83      	ldr	r2, [pc, #524]	@ (8109544 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8109336:	fa22 f303 	lsr.w	r3, r2, r3
 810933a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810933c:	68bb      	ldr	r3, [r7, #8]
 810933e:	ee07 3a90 	vmov	s15, r3
 8109342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109346:	697b      	ldr	r3, [r7, #20]
 8109348:	ee07 3a90 	vmov	s15, r3
 810934c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109354:	4b7a      	ldr	r3, [pc, #488]	@ (8109540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8109356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8109358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810935c:	ee07 3a90 	vmov	s15, r3
 8109360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109364:	ed97 6a03 	vldr	s12, [r7, #12]
 8109368:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8109548 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810936c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109370:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109374:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810937c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109380:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8109384:	e087      	b.n	8109496 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8109386:	697b      	ldr	r3, [r7, #20]
 8109388:	ee07 3a90 	vmov	s15, r3
 810938c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109390:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 810954c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8109394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109398:	4b69      	ldr	r3, [pc, #420]	@ (8109540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810939a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810939c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81093a0:	ee07 3a90 	vmov	s15, r3
 81093a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81093a8:	ed97 6a03 	vldr	s12, [r7, #12]
 81093ac:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8109548 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81093b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81093b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81093b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81093bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81093c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81093c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81093c8:	e065      	b.n	8109496 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81093ca:	697b      	ldr	r3, [r7, #20]
 81093cc:	ee07 3a90 	vmov	s15, r3
 81093d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81093d4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8109550 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 81093d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81093dc:	4b58      	ldr	r3, [pc, #352]	@ (8109540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81093de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81093e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81093e4:	ee07 3a90 	vmov	s15, r3
 81093e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81093ec:	ed97 6a03 	vldr	s12, [r7, #12]
 81093f0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8109548 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81093f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81093f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81093fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109408:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810940c:	e043      	b.n	8109496 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810940e:	697b      	ldr	r3, [r7, #20]
 8109410:	ee07 3a90 	vmov	s15, r3
 8109414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109418:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8109554 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810941c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109420:	4b47      	ldr	r3, [pc, #284]	@ (8109540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8109422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8109424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109428:	ee07 3a90 	vmov	s15, r3
 810942c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109430:	ed97 6a03 	vldr	s12, [r7, #12]
 8109434:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8109548 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8109438:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810943c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109440:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109448:	ee67 7a27 	vmul.f32	s15, s14, s15
 810944c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109450:	e021      	b.n	8109496 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8109452:	697b      	ldr	r3, [r7, #20]
 8109454:	ee07 3a90 	vmov	s15, r3
 8109458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810945c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 810954c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8109460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109464:	4b36      	ldr	r3, [pc, #216]	@ (8109540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8109466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8109468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810946c:	ee07 3a90 	vmov	s15, r3
 8109470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109474:	ed97 6a03 	vldr	s12, [r7, #12]
 8109478:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8109548 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810947c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109484:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810948c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109490:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109494:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8109496:	4b2a      	ldr	r3, [pc, #168]	@ (8109540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8109498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810949a:	0a5b      	lsrs	r3, r3, #9
 810949c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81094a0:	ee07 3a90 	vmov	s15, r3
 81094a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81094a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81094ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 81094b0:	edd7 6a07 	vldr	s13, [r7, #28]
 81094b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81094b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81094bc:	ee17 2a90 	vmov	r2, s15
 81094c0:	687b      	ldr	r3, [r7, #4]
 81094c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 81094c4:	4b1e      	ldr	r3, [pc, #120]	@ (8109540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81094c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81094c8:	0c1b      	lsrs	r3, r3, #16
 81094ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81094ce:	ee07 3a90 	vmov	s15, r3
 81094d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81094d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81094da:	ee37 7a87 	vadd.f32	s14, s15, s14
 81094de:	edd7 6a07 	vldr	s13, [r7, #28]
 81094e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81094e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81094ea:	ee17 2a90 	vmov	r2, s15
 81094ee:	687b      	ldr	r3, [r7, #4]
 81094f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 81094f2:	4b13      	ldr	r3, [pc, #76]	@ (8109540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81094f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81094f6:	0e1b      	lsrs	r3, r3, #24
 81094f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81094fc:	ee07 3a90 	vmov	s15, r3
 8109500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109504:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8109508:	ee37 7a87 	vadd.f32	s14, s15, s14
 810950c:	edd7 6a07 	vldr	s13, [r7, #28]
 8109510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109518:	ee17 2a90 	vmov	r2, s15
 810951c:	687b      	ldr	r3, [r7, #4]
 810951e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8109520:	e008      	b.n	8109534 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8109522:	687b      	ldr	r3, [r7, #4]
 8109524:	2200      	movs	r2, #0
 8109526:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8109528:	687b      	ldr	r3, [r7, #4]
 810952a:	2200      	movs	r2, #0
 810952c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810952e:	687b      	ldr	r3, [r7, #4]
 8109530:	2200      	movs	r2, #0
 8109532:	609a      	str	r2, [r3, #8]
}
 8109534:	bf00      	nop
 8109536:	3724      	adds	r7, #36	@ 0x24
 8109538:	46bd      	mov	sp, r7
 810953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810953e:	4770      	bx	lr
 8109540:	58024400 	.word	0x58024400
 8109544:	03d09000 	.word	0x03d09000
 8109548:	46000000 	.word	0x46000000
 810954c:	4c742400 	.word	0x4c742400
 8109550:	4a742400 	.word	0x4a742400
 8109554:	4af42400 	.word	0x4af42400

08109558 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8109558:	b580      	push	{r7, lr}
 810955a:	b084      	sub	sp, #16
 810955c:	af00      	add	r7, sp, #0
 810955e:	6078      	str	r0, [r7, #4]
 8109560:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8109562:	2300      	movs	r3, #0
 8109564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8109566:	4b54      	ldr	r3, [pc, #336]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 8109568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810956a:	f003 0303 	and.w	r3, r3, #3
 810956e:	2b03      	cmp	r3, #3
 8109570:	d101      	bne.n	8109576 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8109572:	2301      	movs	r3, #1
 8109574:	e09b      	b.n	81096ae <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8109576:	4b50      	ldr	r3, [pc, #320]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 8109578:	681b      	ldr	r3, [r3, #0]
 810957a:	4a4f      	ldr	r2, [pc, #316]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 810957c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8109580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109582:	f7fa fbaf 	bl	8103ce4 <HAL_GetTick>
 8109586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8109588:	e008      	b.n	810959c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810958a:	f7fa fbab 	bl	8103ce4 <HAL_GetTick>
 810958e:	4602      	mov	r2, r0
 8109590:	68bb      	ldr	r3, [r7, #8]
 8109592:	1ad3      	subs	r3, r2, r3
 8109594:	2b02      	cmp	r3, #2
 8109596:	d901      	bls.n	810959c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8109598:	2303      	movs	r3, #3
 810959a:	e088      	b.n	81096ae <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810959c:	4b46      	ldr	r3, [pc, #280]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 810959e:	681b      	ldr	r3, [r3, #0]
 81095a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81095a4:	2b00      	cmp	r3, #0
 81095a6:	d1f0      	bne.n	810958a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81095a8:	4b43      	ldr	r3, [pc, #268]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 81095aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81095ac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 81095b0:	687b      	ldr	r3, [r7, #4]
 81095b2:	681b      	ldr	r3, [r3, #0]
 81095b4:	031b      	lsls	r3, r3, #12
 81095b6:	4940      	ldr	r1, [pc, #256]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 81095b8:	4313      	orrs	r3, r2
 81095ba:	628b      	str	r3, [r1, #40]	@ 0x28
 81095bc:	687b      	ldr	r3, [r7, #4]
 81095be:	685b      	ldr	r3, [r3, #4]
 81095c0:	3b01      	subs	r3, #1
 81095c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81095c6:	687b      	ldr	r3, [r7, #4]
 81095c8:	689b      	ldr	r3, [r3, #8]
 81095ca:	3b01      	subs	r3, #1
 81095cc:	025b      	lsls	r3, r3, #9
 81095ce:	b29b      	uxth	r3, r3
 81095d0:	431a      	orrs	r2, r3
 81095d2:	687b      	ldr	r3, [r7, #4]
 81095d4:	68db      	ldr	r3, [r3, #12]
 81095d6:	3b01      	subs	r3, #1
 81095d8:	041b      	lsls	r3, r3, #16
 81095da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81095de:	431a      	orrs	r2, r3
 81095e0:	687b      	ldr	r3, [r7, #4]
 81095e2:	691b      	ldr	r3, [r3, #16]
 81095e4:	3b01      	subs	r3, #1
 81095e6:	061b      	lsls	r3, r3, #24
 81095e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81095ec:	4932      	ldr	r1, [pc, #200]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 81095ee:	4313      	orrs	r3, r2
 81095f0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81095f2:	4b31      	ldr	r3, [pc, #196]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 81095f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81095f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 81095fa:	687b      	ldr	r3, [r7, #4]
 81095fc:	695b      	ldr	r3, [r3, #20]
 81095fe:	492e      	ldr	r1, [pc, #184]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 8109600:	4313      	orrs	r3, r2
 8109602:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8109604:	4b2c      	ldr	r3, [pc, #176]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 8109606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109608:	f023 0220 	bic.w	r2, r3, #32
 810960c:	687b      	ldr	r3, [r7, #4]
 810960e:	699b      	ldr	r3, [r3, #24]
 8109610:	4929      	ldr	r1, [pc, #164]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 8109612:	4313      	orrs	r3, r2
 8109614:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8109616:	4b28      	ldr	r3, [pc, #160]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 8109618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810961a:	4a27      	ldr	r2, [pc, #156]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 810961c:	f023 0310 	bic.w	r3, r3, #16
 8109620:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8109622:	4b25      	ldr	r3, [pc, #148]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 8109624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109626:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810962a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810962e:	687a      	ldr	r2, [r7, #4]
 8109630:	69d2      	ldr	r2, [r2, #28]
 8109632:	00d2      	lsls	r2, r2, #3
 8109634:	4920      	ldr	r1, [pc, #128]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 8109636:	4313      	orrs	r3, r2
 8109638:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810963a:	4b1f      	ldr	r3, [pc, #124]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 810963c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810963e:	4a1e      	ldr	r2, [pc, #120]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 8109640:	f043 0310 	orr.w	r3, r3, #16
 8109644:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8109646:	683b      	ldr	r3, [r7, #0]
 8109648:	2b00      	cmp	r3, #0
 810964a:	d106      	bne.n	810965a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810964c:	4b1a      	ldr	r3, [pc, #104]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 810964e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109650:	4a19      	ldr	r2, [pc, #100]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 8109652:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8109656:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8109658:	e00f      	b.n	810967a <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810965a:	683b      	ldr	r3, [r7, #0]
 810965c:	2b01      	cmp	r3, #1
 810965e:	d106      	bne.n	810966e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8109660:	4b15      	ldr	r3, [pc, #84]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 8109662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109664:	4a14      	ldr	r2, [pc, #80]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 8109666:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810966a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810966c:	e005      	b.n	810967a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810966e:	4b12      	ldr	r3, [pc, #72]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 8109670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109672:	4a11      	ldr	r2, [pc, #68]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 8109674:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8109678:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810967a:	4b0f      	ldr	r3, [pc, #60]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 810967c:	681b      	ldr	r3, [r3, #0]
 810967e:	4a0e      	ldr	r2, [pc, #56]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 8109680:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8109684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109686:	f7fa fb2d 	bl	8103ce4 <HAL_GetTick>
 810968a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810968c:	e008      	b.n	81096a0 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810968e:	f7fa fb29 	bl	8103ce4 <HAL_GetTick>
 8109692:	4602      	mov	r2, r0
 8109694:	68bb      	ldr	r3, [r7, #8]
 8109696:	1ad3      	subs	r3, r2, r3
 8109698:	2b02      	cmp	r3, #2
 810969a:	d901      	bls.n	81096a0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810969c:	2303      	movs	r3, #3
 810969e:	e006      	b.n	81096ae <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81096a0:	4b05      	ldr	r3, [pc, #20]	@ (81096b8 <RCCEx_PLL2_Config+0x160>)
 81096a2:	681b      	ldr	r3, [r3, #0]
 81096a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81096a8:	2b00      	cmp	r3, #0
 81096aa:	d0f0      	beq.n	810968e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81096ac:	7bfb      	ldrb	r3, [r7, #15]
}
 81096ae:	4618      	mov	r0, r3
 81096b0:	3710      	adds	r7, #16
 81096b2:	46bd      	mov	sp, r7
 81096b4:	bd80      	pop	{r7, pc}
 81096b6:	bf00      	nop
 81096b8:	58024400 	.word	0x58024400

081096bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81096bc:	b580      	push	{r7, lr}
 81096be:	b084      	sub	sp, #16
 81096c0:	af00      	add	r7, sp, #0
 81096c2:	6078      	str	r0, [r7, #4]
 81096c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81096c6:	2300      	movs	r3, #0
 81096c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81096ca:	4b54      	ldr	r3, [pc, #336]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 81096cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81096ce:	f003 0303 	and.w	r3, r3, #3
 81096d2:	2b03      	cmp	r3, #3
 81096d4:	d101      	bne.n	81096da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81096d6:	2301      	movs	r3, #1
 81096d8:	e09b      	b.n	8109812 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81096da:	4b50      	ldr	r3, [pc, #320]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 81096dc:	681b      	ldr	r3, [r3, #0]
 81096de:	4a4f      	ldr	r2, [pc, #316]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 81096e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81096e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81096e6:	f7fa fafd 	bl	8103ce4 <HAL_GetTick>
 81096ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81096ec:	e008      	b.n	8109700 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81096ee:	f7fa faf9 	bl	8103ce4 <HAL_GetTick>
 81096f2:	4602      	mov	r2, r0
 81096f4:	68bb      	ldr	r3, [r7, #8]
 81096f6:	1ad3      	subs	r3, r2, r3
 81096f8:	2b02      	cmp	r3, #2
 81096fa:	d901      	bls.n	8109700 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81096fc:	2303      	movs	r3, #3
 81096fe:	e088      	b.n	8109812 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8109700:	4b46      	ldr	r3, [pc, #280]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 8109702:	681b      	ldr	r3, [r3, #0]
 8109704:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109708:	2b00      	cmp	r3, #0
 810970a:	d1f0      	bne.n	81096ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810970c:	4b43      	ldr	r3, [pc, #268]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 810970e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109710:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8109714:	687b      	ldr	r3, [r7, #4]
 8109716:	681b      	ldr	r3, [r3, #0]
 8109718:	051b      	lsls	r3, r3, #20
 810971a:	4940      	ldr	r1, [pc, #256]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 810971c:	4313      	orrs	r3, r2
 810971e:	628b      	str	r3, [r1, #40]	@ 0x28
 8109720:	687b      	ldr	r3, [r7, #4]
 8109722:	685b      	ldr	r3, [r3, #4]
 8109724:	3b01      	subs	r3, #1
 8109726:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810972a:	687b      	ldr	r3, [r7, #4]
 810972c:	689b      	ldr	r3, [r3, #8]
 810972e:	3b01      	subs	r3, #1
 8109730:	025b      	lsls	r3, r3, #9
 8109732:	b29b      	uxth	r3, r3
 8109734:	431a      	orrs	r2, r3
 8109736:	687b      	ldr	r3, [r7, #4]
 8109738:	68db      	ldr	r3, [r3, #12]
 810973a:	3b01      	subs	r3, #1
 810973c:	041b      	lsls	r3, r3, #16
 810973e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8109742:	431a      	orrs	r2, r3
 8109744:	687b      	ldr	r3, [r7, #4]
 8109746:	691b      	ldr	r3, [r3, #16]
 8109748:	3b01      	subs	r3, #1
 810974a:	061b      	lsls	r3, r3, #24
 810974c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8109750:	4932      	ldr	r1, [pc, #200]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 8109752:	4313      	orrs	r3, r2
 8109754:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8109756:	4b31      	ldr	r3, [pc, #196]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 8109758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810975a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810975e:	687b      	ldr	r3, [r7, #4]
 8109760:	695b      	ldr	r3, [r3, #20]
 8109762:	492e      	ldr	r1, [pc, #184]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 8109764:	4313      	orrs	r3, r2
 8109766:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8109768:	4b2c      	ldr	r3, [pc, #176]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 810976a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810976c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8109770:	687b      	ldr	r3, [r7, #4]
 8109772:	699b      	ldr	r3, [r3, #24]
 8109774:	4929      	ldr	r1, [pc, #164]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 8109776:	4313      	orrs	r3, r2
 8109778:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810977a:	4b28      	ldr	r3, [pc, #160]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 810977c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810977e:	4a27      	ldr	r2, [pc, #156]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 8109780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8109784:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8109786:	4b25      	ldr	r3, [pc, #148]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 8109788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810978a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810978e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8109792:	687a      	ldr	r2, [r7, #4]
 8109794:	69d2      	ldr	r2, [r2, #28]
 8109796:	00d2      	lsls	r2, r2, #3
 8109798:	4920      	ldr	r1, [pc, #128]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 810979a:	4313      	orrs	r3, r2
 810979c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810979e:	4b1f      	ldr	r3, [pc, #124]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 81097a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81097a2:	4a1e      	ldr	r2, [pc, #120]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 81097a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81097a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81097aa:	683b      	ldr	r3, [r7, #0]
 81097ac:	2b00      	cmp	r3, #0
 81097ae:	d106      	bne.n	81097be <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81097b0:	4b1a      	ldr	r3, [pc, #104]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 81097b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81097b4:	4a19      	ldr	r2, [pc, #100]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 81097b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81097ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81097bc:	e00f      	b.n	81097de <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81097be:	683b      	ldr	r3, [r7, #0]
 81097c0:	2b01      	cmp	r3, #1
 81097c2:	d106      	bne.n	81097d2 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81097c4:	4b15      	ldr	r3, [pc, #84]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 81097c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81097c8:	4a14      	ldr	r2, [pc, #80]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 81097ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81097ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81097d0:	e005      	b.n	81097de <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81097d2:	4b12      	ldr	r3, [pc, #72]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 81097d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81097d6:	4a11      	ldr	r2, [pc, #68]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 81097d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81097dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81097de:	4b0f      	ldr	r3, [pc, #60]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 81097e0:	681b      	ldr	r3, [r3, #0]
 81097e2:	4a0e      	ldr	r2, [pc, #56]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 81097e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81097e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81097ea:	f7fa fa7b 	bl	8103ce4 <HAL_GetTick>
 81097ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81097f0:	e008      	b.n	8109804 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81097f2:	f7fa fa77 	bl	8103ce4 <HAL_GetTick>
 81097f6:	4602      	mov	r2, r0
 81097f8:	68bb      	ldr	r3, [r7, #8]
 81097fa:	1ad3      	subs	r3, r2, r3
 81097fc:	2b02      	cmp	r3, #2
 81097fe:	d901      	bls.n	8109804 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8109800:	2303      	movs	r3, #3
 8109802:	e006      	b.n	8109812 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8109804:	4b05      	ldr	r3, [pc, #20]	@ (810981c <RCCEx_PLL3_Config+0x160>)
 8109806:	681b      	ldr	r3, [r3, #0]
 8109808:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810980c:	2b00      	cmp	r3, #0
 810980e:	d0f0      	beq.n	81097f2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8109810:	7bfb      	ldrb	r3, [r7, #15]
}
 8109812:	4618      	mov	r0, r3
 8109814:	3710      	adds	r7, #16
 8109816:	46bd      	mov	sp, r7
 8109818:	bd80      	pop	{r7, pc}
 810981a:	bf00      	nop
 810981c:	58024400 	.word	0x58024400

08109820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8109820:	b580      	push	{r7, lr}
 8109822:	b082      	sub	sp, #8
 8109824:	af00      	add	r7, sp, #0
 8109826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8109828:	687b      	ldr	r3, [r7, #4]
 810982a:	2b00      	cmp	r3, #0
 810982c:	d101      	bne.n	8109832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810982e:	2301      	movs	r3, #1
 8109830:	e049      	b.n	81098c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8109832:	687b      	ldr	r3, [r7, #4]
 8109834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8109838:	b2db      	uxtb	r3, r3
 810983a:	2b00      	cmp	r3, #0
 810983c:	d106      	bne.n	810984c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810983e:	687b      	ldr	r3, [r7, #4]
 8109840:	2200      	movs	r2, #0
 8109842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8109846:	6878      	ldr	r0, [r7, #4]
 8109848:	f7f9 fece 	bl	81035e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810984c:	687b      	ldr	r3, [r7, #4]
 810984e:	2202      	movs	r2, #2
 8109850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8109854:	687b      	ldr	r3, [r7, #4]
 8109856:	681a      	ldr	r2, [r3, #0]
 8109858:	687b      	ldr	r3, [r7, #4]
 810985a:	3304      	adds	r3, #4
 810985c:	4619      	mov	r1, r3
 810985e:	4610      	mov	r0, r2
 8109860:	f000 fe70 	bl	810a544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8109864:	687b      	ldr	r3, [r7, #4]
 8109866:	2201      	movs	r2, #1
 8109868:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810986c:	687b      	ldr	r3, [r7, #4]
 810986e:	2201      	movs	r2, #1
 8109870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8109874:	687b      	ldr	r3, [r7, #4]
 8109876:	2201      	movs	r2, #1
 8109878:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810987c:	687b      	ldr	r3, [r7, #4]
 810987e:	2201      	movs	r2, #1
 8109880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8109884:	687b      	ldr	r3, [r7, #4]
 8109886:	2201      	movs	r2, #1
 8109888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810988c:	687b      	ldr	r3, [r7, #4]
 810988e:	2201      	movs	r2, #1
 8109890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8109894:	687b      	ldr	r3, [r7, #4]
 8109896:	2201      	movs	r2, #1
 8109898:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810989c:	687b      	ldr	r3, [r7, #4]
 810989e:	2201      	movs	r2, #1
 81098a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81098a4:	687b      	ldr	r3, [r7, #4]
 81098a6:	2201      	movs	r2, #1
 81098a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81098ac:	687b      	ldr	r3, [r7, #4]
 81098ae:	2201      	movs	r2, #1
 81098b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 81098b4:	687b      	ldr	r3, [r7, #4]
 81098b6:	2201      	movs	r2, #1
 81098b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81098bc:	687b      	ldr	r3, [r7, #4]
 81098be:	2201      	movs	r2, #1
 81098c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 81098c4:	2300      	movs	r3, #0
}
 81098c6:	4618      	mov	r0, r3
 81098c8:	3708      	adds	r7, #8
 81098ca:	46bd      	mov	sp, r7
 81098cc:	bd80      	pop	{r7, pc}
	...

081098d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 81098d0:	b480      	push	{r7}
 81098d2:	b085      	sub	sp, #20
 81098d4:	af00      	add	r7, sp, #0
 81098d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81098d8:	687b      	ldr	r3, [r7, #4]
 81098da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81098de:	b2db      	uxtb	r3, r3
 81098e0:	2b01      	cmp	r3, #1
 81098e2:	d001      	beq.n	81098e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 81098e4:	2301      	movs	r3, #1
 81098e6:	e04c      	b.n	8109982 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81098e8:	687b      	ldr	r3, [r7, #4]
 81098ea:	2202      	movs	r2, #2
 81098ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81098f0:	687b      	ldr	r3, [r7, #4]
 81098f2:	681b      	ldr	r3, [r3, #0]
 81098f4:	4a26      	ldr	r2, [pc, #152]	@ (8109990 <HAL_TIM_Base_Start+0xc0>)
 81098f6:	4293      	cmp	r3, r2
 81098f8:	d022      	beq.n	8109940 <HAL_TIM_Base_Start+0x70>
 81098fa:	687b      	ldr	r3, [r7, #4]
 81098fc:	681b      	ldr	r3, [r3, #0]
 81098fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109902:	d01d      	beq.n	8109940 <HAL_TIM_Base_Start+0x70>
 8109904:	687b      	ldr	r3, [r7, #4]
 8109906:	681b      	ldr	r3, [r3, #0]
 8109908:	4a22      	ldr	r2, [pc, #136]	@ (8109994 <HAL_TIM_Base_Start+0xc4>)
 810990a:	4293      	cmp	r3, r2
 810990c:	d018      	beq.n	8109940 <HAL_TIM_Base_Start+0x70>
 810990e:	687b      	ldr	r3, [r7, #4]
 8109910:	681b      	ldr	r3, [r3, #0]
 8109912:	4a21      	ldr	r2, [pc, #132]	@ (8109998 <HAL_TIM_Base_Start+0xc8>)
 8109914:	4293      	cmp	r3, r2
 8109916:	d013      	beq.n	8109940 <HAL_TIM_Base_Start+0x70>
 8109918:	687b      	ldr	r3, [r7, #4]
 810991a:	681b      	ldr	r3, [r3, #0]
 810991c:	4a1f      	ldr	r2, [pc, #124]	@ (810999c <HAL_TIM_Base_Start+0xcc>)
 810991e:	4293      	cmp	r3, r2
 8109920:	d00e      	beq.n	8109940 <HAL_TIM_Base_Start+0x70>
 8109922:	687b      	ldr	r3, [r7, #4]
 8109924:	681b      	ldr	r3, [r3, #0]
 8109926:	4a1e      	ldr	r2, [pc, #120]	@ (81099a0 <HAL_TIM_Base_Start+0xd0>)
 8109928:	4293      	cmp	r3, r2
 810992a:	d009      	beq.n	8109940 <HAL_TIM_Base_Start+0x70>
 810992c:	687b      	ldr	r3, [r7, #4]
 810992e:	681b      	ldr	r3, [r3, #0]
 8109930:	4a1c      	ldr	r2, [pc, #112]	@ (81099a4 <HAL_TIM_Base_Start+0xd4>)
 8109932:	4293      	cmp	r3, r2
 8109934:	d004      	beq.n	8109940 <HAL_TIM_Base_Start+0x70>
 8109936:	687b      	ldr	r3, [r7, #4]
 8109938:	681b      	ldr	r3, [r3, #0]
 810993a:	4a1b      	ldr	r2, [pc, #108]	@ (81099a8 <HAL_TIM_Base_Start+0xd8>)
 810993c:	4293      	cmp	r3, r2
 810993e:	d115      	bne.n	810996c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8109940:	687b      	ldr	r3, [r7, #4]
 8109942:	681b      	ldr	r3, [r3, #0]
 8109944:	689a      	ldr	r2, [r3, #8]
 8109946:	4b19      	ldr	r3, [pc, #100]	@ (81099ac <HAL_TIM_Base_Start+0xdc>)
 8109948:	4013      	ands	r3, r2
 810994a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810994c:	68fb      	ldr	r3, [r7, #12]
 810994e:	2b06      	cmp	r3, #6
 8109950:	d015      	beq.n	810997e <HAL_TIM_Base_Start+0xae>
 8109952:	68fb      	ldr	r3, [r7, #12]
 8109954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109958:	d011      	beq.n	810997e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 810995a:	687b      	ldr	r3, [r7, #4]
 810995c:	681b      	ldr	r3, [r3, #0]
 810995e:	681a      	ldr	r2, [r3, #0]
 8109960:	687b      	ldr	r3, [r7, #4]
 8109962:	681b      	ldr	r3, [r3, #0]
 8109964:	f042 0201 	orr.w	r2, r2, #1
 8109968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810996a:	e008      	b.n	810997e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810996c:	687b      	ldr	r3, [r7, #4]
 810996e:	681b      	ldr	r3, [r3, #0]
 8109970:	681a      	ldr	r2, [r3, #0]
 8109972:	687b      	ldr	r3, [r7, #4]
 8109974:	681b      	ldr	r3, [r3, #0]
 8109976:	f042 0201 	orr.w	r2, r2, #1
 810997a:	601a      	str	r2, [r3, #0]
 810997c:	e000      	b.n	8109980 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810997e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8109980:	2300      	movs	r3, #0
}
 8109982:	4618      	mov	r0, r3
 8109984:	3714      	adds	r7, #20
 8109986:	46bd      	mov	sp, r7
 8109988:	f85d 7b04 	ldr.w	r7, [sp], #4
 810998c:	4770      	bx	lr
 810998e:	bf00      	nop
 8109990:	40010000 	.word	0x40010000
 8109994:	40000400 	.word	0x40000400
 8109998:	40000800 	.word	0x40000800
 810999c:	40000c00 	.word	0x40000c00
 81099a0:	40010400 	.word	0x40010400
 81099a4:	40001800 	.word	0x40001800
 81099a8:	40014000 	.word	0x40014000
 81099ac:	00010007 	.word	0x00010007

081099b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81099b0:	b480      	push	{r7}
 81099b2:	b085      	sub	sp, #20
 81099b4:	af00      	add	r7, sp, #0
 81099b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81099b8:	687b      	ldr	r3, [r7, #4]
 81099ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81099be:	b2db      	uxtb	r3, r3
 81099c0:	2b01      	cmp	r3, #1
 81099c2:	d001      	beq.n	81099c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81099c4:	2301      	movs	r3, #1
 81099c6:	e054      	b.n	8109a72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81099c8:	687b      	ldr	r3, [r7, #4]
 81099ca:	2202      	movs	r2, #2
 81099cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81099d0:	687b      	ldr	r3, [r7, #4]
 81099d2:	681b      	ldr	r3, [r3, #0]
 81099d4:	68da      	ldr	r2, [r3, #12]
 81099d6:	687b      	ldr	r3, [r7, #4]
 81099d8:	681b      	ldr	r3, [r3, #0]
 81099da:	f042 0201 	orr.w	r2, r2, #1
 81099de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81099e0:	687b      	ldr	r3, [r7, #4]
 81099e2:	681b      	ldr	r3, [r3, #0]
 81099e4:	4a26      	ldr	r2, [pc, #152]	@ (8109a80 <HAL_TIM_Base_Start_IT+0xd0>)
 81099e6:	4293      	cmp	r3, r2
 81099e8:	d022      	beq.n	8109a30 <HAL_TIM_Base_Start_IT+0x80>
 81099ea:	687b      	ldr	r3, [r7, #4]
 81099ec:	681b      	ldr	r3, [r3, #0]
 81099ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81099f2:	d01d      	beq.n	8109a30 <HAL_TIM_Base_Start_IT+0x80>
 81099f4:	687b      	ldr	r3, [r7, #4]
 81099f6:	681b      	ldr	r3, [r3, #0]
 81099f8:	4a22      	ldr	r2, [pc, #136]	@ (8109a84 <HAL_TIM_Base_Start_IT+0xd4>)
 81099fa:	4293      	cmp	r3, r2
 81099fc:	d018      	beq.n	8109a30 <HAL_TIM_Base_Start_IT+0x80>
 81099fe:	687b      	ldr	r3, [r7, #4]
 8109a00:	681b      	ldr	r3, [r3, #0]
 8109a02:	4a21      	ldr	r2, [pc, #132]	@ (8109a88 <HAL_TIM_Base_Start_IT+0xd8>)
 8109a04:	4293      	cmp	r3, r2
 8109a06:	d013      	beq.n	8109a30 <HAL_TIM_Base_Start_IT+0x80>
 8109a08:	687b      	ldr	r3, [r7, #4]
 8109a0a:	681b      	ldr	r3, [r3, #0]
 8109a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8109a8c <HAL_TIM_Base_Start_IT+0xdc>)
 8109a0e:	4293      	cmp	r3, r2
 8109a10:	d00e      	beq.n	8109a30 <HAL_TIM_Base_Start_IT+0x80>
 8109a12:	687b      	ldr	r3, [r7, #4]
 8109a14:	681b      	ldr	r3, [r3, #0]
 8109a16:	4a1e      	ldr	r2, [pc, #120]	@ (8109a90 <HAL_TIM_Base_Start_IT+0xe0>)
 8109a18:	4293      	cmp	r3, r2
 8109a1a:	d009      	beq.n	8109a30 <HAL_TIM_Base_Start_IT+0x80>
 8109a1c:	687b      	ldr	r3, [r7, #4]
 8109a1e:	681b      	ldr	r3, [r3, #0]
 8109a20:	4a1c      	ldr	r2, [pc, #112]	@ (8109a94 <HAL_TIM_Base_Start_IT+0xe4>)
 8109a22:	4293      	cmp	r3, r2
 8109a24:	d004      	beq.n	8109a30 <HAL_TIM_Base_Start_IT+0x80>
 8109a26:	687b      	ldr	r3, [r7, #4]
 8109a28:	681b      	ldr	r3, [r3, #0]
 8109a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8109a98 <HAL_TIM_Base_Start_IT+0xe8>)
 8109a2c:	4293      	cmp	r3, r2
 8109a2e:	d115      	bne.n	8109a5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8109a30:	687b      	ldr	r3, [r7, #4]
 8109a32:	681b      	ldr	r3, [r3, #0]
 8109a34:	689a      	ldr	r2, [r3, #8]
 8109a36:	4b19      	ldr	r3, [pc, #100]	@ (8109a9c <HAL_TIM_Base_Start_IT+0xec>)
 8109a38:	4013      	ands	r3, r2
 8109a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109a3c:	68fb      	ldr	r3, [r7, #12]
 8109a3e:	2b06      	cmp	r3, #6
 8109a40:	d015      	beq.n	8109a6e <HAL_TIM_Base_Start_IT+0xbe>
 8109a42:	68fb      	ldr	r3, [r7, #12]
 8109a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109a48:	d011      	beq.n	8109a6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8109a4a:	687b      	ldr	r3, [r7, #4]
 8109a4c:	681b      	ldr	r3, [r3, #0]
 8109a4e:	681a      	ldr	r2, [r3, #0]
 8109a50:	687b      	ldr	r3, [r7, #4]
 8109a52:	681b      	ldr	r3, [r3, #0]
 8109a54:	f042 0201 	orr.w	r2, r2, #1
 8109a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109a5a:	e008      	b.n	8109a6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8109a5c:	687b      	ldr	r3, [r7, #4]
 8109a5e:	681b      	ldr	r3, [r3, #0]
 8109a60:	681a      	ldr	r2, [r3, #0]
 8109a62:	687b      	ldr	r3, [r7, #4]
 8109a64:	681b      	ldr	r3, [r3, #0]
 8109a66:	f042 0201 	orr.w	r2, r2, #1
 8109a6a:	601a      	str	r2, [r3, #0]
 8109a6c:	e000      	b.n	8109a70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109a6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8109a70:	2300      	movs	r3, #0
}
 8109a72:	4618      	mov	r0, r3
 8109a74:	3714      	adds	r7, #20
 8109a76:	46bd      	mov	sp, r7
 8109a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a7c:	4770      	bx	lr
 8109a7e:	bf00      	nop
 8109a80:	40010000 	.word	0x40010000
 8109a84:	40000400 	.word	0x40000400
 8109a88:	40000800 	.word	0x40000800
 8109a8c:	40000c00 	.word	0x40000c00
 8109a90:	40010400 	.word	0x40010400
 8109a94:	40001800 	.word	0x40001800
 8109a98:	40014000 	.word	0x40014000
 8109a9c:	00010007 	.word	0x00010007

08109aa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8109aa0:	b580      	push	{r7, lr}
 8109aa2:	b082      	sub	sp, #8
 8109aa4:	af00      	add	r7, sp, #0
 8109aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8109aa8:	687b      	ldr	r3, [r7, #4]
 8109aaa:	2b00      	cmp	r3, #0
 8109aac:	d101      	bne.n	8109ab2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8109aae:	2301      	movs	r3, #1
 8109ab0:	e049      	b.n	8109b46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8109ab2:	687b      	ldr	r3, [r7, #4]
 8109ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8109ab8:	b2db      	uxtb	r3, r3
 8109aba:	2b00      	cmp	r3, #0
 8109abc:	d106      	bne.n	8109acc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8109abe:	687b      	ldr	r3, [r7, #4]
 8109ac0:	2200      	movs	r2, #0
 8109ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8109ac6:	6878      	ldr	r0, [r7, #4]
 8109ac8:	f000 f841 	bl	8109b4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109acc:	687b      	ldr	r3, [r7, #4]
 8109ace:	2202      	movs	r2, #2
 8109ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8109ad4:	687b      	ldr	r3, [r7, #4]
 8109ad6:	681a      	ldr	r2, [r3, #0]
 8109ad8:	687b      	ldr	r3, [r7, #4]
 8109ada:	3304      	adds	r3, #4
 8109adc:	4619      	mov	r1, r3
 8109ade:	4610      	mov	r0, r2
 8109ae0:	f000 fd30 	bl	810a544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8109ae4:	687b      	ldr	r3, [r7, #4]
 8109ae6:	2201      	movs	r2, #1
 8109ae8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109aec:	687b      	ldr	r3, [r7, #4]
 8109aee:	2201      	movs	r2, #1
 8109af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8109af4:	687b      	ldr	r3, [r7, #4]
 8109af6:	2201      	movs	r2, #1
 8109af8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8109afc:	687b      	ldr	r3, [r7, #4]
 8109afe:	2201      	movs	r2, #1
 8109b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8109b04:	687b      	ldr	r3, [r7, #4]
 8109b06:	2201      	movs	r2, #1
 8109b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8109b0c:	687b      	ldr	r3, [r7, #4]
 8109b0e:	2201      	movs	r2, #1
 8109b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8109b14:	687b      	ldr	r3, [r7, #4]
 8109b16:	2201      	movs	r2, #1
 8109b18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109b1c:	687b      	ldr	r3, [r7, #4]
 8109b1e:	2201      	movs	r2, #1
 8109b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8109b24:	687b      	ldr	r3, [r7, #4]
 8109b26:	2201      	movs	r2, #1
 8109b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8109b2c:	687b      	ldr	r3, [r7, #4]
 8109b2e:	2201      	movs	r2, #1
 8109b30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8109b34:	687b      	ldr	r3, [r7, #4]
 8109b36:	2201      	movs	r2, #1
 8109b38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8109b3c:	687b      	ldr	r3, [r7, #4]
 8109b3e:	2201      	movs	r2, #1
 8109b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8109b44:	2300      	movs	r3, #0
}
 8109b46:	4618      	mov	r0, r3
 8109b48:	3708      	adds	r7, #8
 8109b4a:	46bd      	mov	sp, r7
 8109b4c:	bd80      	pop	{r7, pc}

08109b4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8109b4e:	b480      	push	{r7}
 8109b50:	b083      	sub	sp, #12
 8109b52:	af00      	add	r7, sp, #0
 8109b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8109b56:	bf00      	nop
 8109b58:	370c      	adds	r7, #12
 8109b5a:	46bd      	mov	sp, r7
 8109b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b60:	4770      	bx	lr
	...

08109b64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8109b64:	b580      	push	{r7, lr}
 8109b66:	b084      	sub	sp, #16
 8109b68:	af00      	add	r7, sp, #0
 8109b6a:	6078      	str	r0, [r7, #4]
 8109b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8109b6e:	683b      	ldr	r3, [r7, #0]
 8109b70:	2b00      	cmp	r3, #0
 8109b72:	d109      	bne.n	8109b88 <HAL_TIM_PWM_Start+0x24>
 8109b74:	687b      	ldr	r3, [r7, #4]
 8109b76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8109b7a:	b2db      	uxtb	r3, r3
 8109b7c:	2b01      	cmp	r3, #1
 8109b7e:	bf14      	ite	ne
 8109b80:	2301      	movne	r3, #1
 8109b82:	2300      	moveq	r3, #0
 8109b84:	b2db      	uxtb	r3, r3
 8109b86:	e03c      	b.n	8109c02 <HAL_TIM_PWM_Start+0x9e>
 8109b88:	683b      	ldr	r3, [r7, #0]
 8109b8a:	2b04      	cmp	r3, #4
 8109b8c:	d109      	bne.n	8109ba2 <HAL_TIM_PWM_Start+0x3e>
 8109b8e:	687b      	ldr	r3, [r7, #4]
 8109b90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8109b94:	b2db      	uxtb	r3, r3
 8109b96:	2b01      	cmp	r3, #1
 8109b98:	bf14      	ite	ne
 8109b9a:	2301      	movne	r3, #1
 8109b9c:	2300      	moveq	r3, #0
 8109b9e:	b2db      	uxtb	r3, r3
 8109ba0:	e02f      	b.n	8109c02 <HAL_TIM_PWM_Start+0x9e>
 8109ba2:	683b      	ldr	r3, [r7, #0]
 8109ba4:	2b08      	cmp	r3, #8
 8109ba6:	d109      	bne.n	8109bbc <HAL_TIM_PWM_Start+0x58>
 8109ba8:	687b      	ldr	r3, [r7, #4]
 8109baa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8109bae:	b2db      	uxtb	r3, r3
 8109bb0:	2b01      	cmp	r3, #1
 8109bb2:	bf14      	ite	ne
 8109bb4:	2301      	movne	r3, #1
 8109bb6:	2300      	moveq	r3, #0
 8109bb8:	b2db      	uxtb	r3, r3
 8109bba:	e022      	b.n	8109c02 <HAL_TIM_PWM_Start+0x9e>
 8109bbc:	683b      	ldr	r3, [r7, #0]
 8109bbe:	2b0c      	cmp	r3, #12
 8109bc0:	d109      	bne.n	8109bd6 <HAL_TIM_PWM_Start+0x72>
 8109bc2:	687b      	ldr	r3, [r7, #4]
 8109bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8109bc8:	b2db      	uxtb	r3, r3
 8109bca:	2b01      	cmp	r3, #1
 8109bcc:	bf14      	ite	ne
 8109bce:	2301      	movne	r3, #1
 8109bd0:	2300      	moveq	r3, #0
 8109bd2:	b2db      	uxtb	r3, r3
 8109bd4:	e015      	b.n	8109c02 <HAL_TIM_PWM_Start+0x9e>
 8109bd6:	683b      	ldr	r3, [r7, #0]
 8109bd8:	2b10      	cmp	r3, #16
 8109bda:	d109      	bne.n	8109bf0 <HAL_TIM_PWM_Start+0x8c>
 8109bdc:	687b      	ldr	r3, [r7, #4]
 8109bde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8109be2:	b2db      	uxtb	r3, r3
 8109be4:	2b01      	cmp	r3, #1
 8109be6:	bf14      	ite	ne
 8109be8:	2301      	movne	r3, #1
 8109bea:	2300      	moveq	r3, #0
 8109bec:	b2db      	uxtb	r3, r3
 8109bee:	e008      	b.n	8109c02 <HAL_TIM_PWM_Start+0x9e>
 8109bf0:	687b      	ldr	r3, [r7, #4]
 8109bf2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8109bf6:	b2db      	uxtb	r3, r3
 8109bf8:	2b01      	cmp	r3, #1
 8109bfa:	bf14      	ite	ne
 8109bfc:	2301      	movne	r3, #1
 8109bfe:	2300      	moveq	r3, #0
 8109c00:	b2db      	uxtb	r3, r3
 8109c02:	2b00      	cmp	r3, #0
 8109c04:	d001      	beq.n	8109c0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8109c06:	2301      	movs	r3, #1
 8109c08:	e0a1      	b.n	8109d4e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8109c0a:	683b      	ldr	r3, [r7, #0]
 8109c0c:	2b00      	cmp	r3, #0
 8109c0e:	d104      	bne.n	8109c1a <HAL_TIM_PWM_Start+0xb6>
 8109c10:	687b      	ldr	r3, [r7, #4]
 8109c12:	2202      	movs	r2, #2
 8109c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8109c18:	e023      	b.n	8109c62 <HAL_TIM_PWM_Start+0xfe>
 8109c1a:	683b      	ldr	r3, [r7, #0]
 8109c1c:	2b04      	cmp	r3, #4
 8109c1e:	d104      	bne.n	8109c2a <HAL_TIM_PWM_Start+0xc6>
 8109c20:	687b      	ldr	r3, [r7, #4]
 8109c22:	2202      	movs	r2, #2
 8109c24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8109c28:	e01b      	b.n	8109c62 <HAL_TIM_PWM_Start+0xfe>
 8109c2a:	683b      	ldr	r3, [r7, #0]
 8109c2c:	2b08      	cmp	r3, #8
 8109c2e:	d104      	bne.n	8109c3a <HAL_TIM_PWM_Start+0xd6>
 8109c30:	687b      	ldr	r3, [r7, #4]
 8109c32:	2202      	movs	r2, #2
 8109c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8109c38:	e013      	b.n	8109c62 <HAL_TIM_PWM_Start+0xfe>
 8109c3a:	683b      	ldr	r3, [r7, #0]
 8109c3c:	2b0c      	cmp	r3, #12
 8109c3e:	d104      	bne.n	8109c4a <HAL_TIM_PWM_Start+0xe6>
 8109c40:	687b      	ldr	r3, [r7, #4]
 8109c42:	2202      	movs	r2, #2
 8109c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8109c48:	e00b      	b.n	8109c62 <HAL_TIM_PWM_Start+0xfe>
 8109c4a:	683b      	ldr	r3, [r7, #0]
 8109c4c:	2b10      	cmp	r3, #16
 8109c4e:	d104      	bne.n	8109c5a <HAL_TIM_PWM_Start+0xf6>
 8109c50:	687b      	ldr	r3, [r7, #4]
 8109c52:	2202      	movs	r2, #2
 8109c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8109c58:	e003      	b.n	8109c62 <HAL_TIM_PWM_Start+0xfe>
 8109c5a:	687b      	ldr	r3, [r7, #4]
 8109c5c:	2202      	movs	r2, #2
 8109c5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8109c62:	687b      	ldr	r3, [r7, #4]
 8109c64:	681b      	ldr	r3, [r3, #0]
 8109c66:	2201      	movs	r2, #1
 8109c68:	6839      	ldr	r1, [r7, #0]
 8109c6a:	4618      	mov	r0, r3
 8109c6c:	f001 f882 	bl	810ad74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8109c70:	687b      	ldr	r3, [r7, #4]
 8109c72:	681b      	ldr	r3, [r3, #0]
 8109c74:	4a38      	ldr	r2, [pc, #224]	@ (8109d58 <HAL_TIM_PWM_Start+0x1f4>)
 8109c76:	4293      	cmp	r3, r2
 8109c78:	d013      	beq.n	8109ca2 <HAL_TIM_PWM_Start+0x13e>
 8109c7a:	687b      	ldr	r3, [r7, #4]
 8109c7c:	681b      	ldr	r3, [r3, #0]
 8109c7e:	4a37      	ldr	r2, [pc, #220]	@ (8109d5c <HAL_TIM_PWM_Start+0x1f8>)
 8109c80:	4293      	cmp	r3, r2
 8109c82:	d00e      	beq.n	8109ca2 <HAL_TIM_PWM_Start+0x13e>
 8109c84:	687b      	ldr	r3, [r7, #4]
 8109c86:	681b      	ldr	r3, [r3, #0]
 8109c88:	4a35      	ldr	r2, [pc, #212]	@ (8109d60 <HAL_TIM_PWM_Start+0x1fc>)
 8109c8a:	4293      	cmp	r3, r2
 8109c8c:	d009      	beq.n	8109ca2 <HAL_TIM_PWM_Start+0x13e>
 8109c8e:	687b      	ldr	r3, [r7, #4]
 8109c90:	681b      	ldr	r3, [r3, #0]
 8109c92:	4a34      	ldr	r2, [pc, #208]	@ (8109d64 <HAL_TIM_PWM_Start+0x200>)
 8109c94:	4293      	cmp	r3, r2
 8109c96:	d004      	beq.n	8109ca2 <HAL_TIM_PWM_Start+0x13e>
 8109c98:	687b      	ldr	r3, [r7, #4]
 8109c9a:	681b      	ldr	r3, [r3, #0]
 8109c9c:	4a32      	ldr	r2, [pc, #200]	@ (8109d68 <HAL_TIM_PWM_Start+0x204>)
 8109c9e:	4293      	cmp	r3, r2
 8109ca0:	d101      	bne.n	8109ca6 <HAL_TIM_PWM_Start+0x142>
 8109ca2:	2301      	movs	r3, #1
 8109ca4:	e000      	b.n	8109ca8 <HAL_TIM_PWM_Start+0x144>
 8109ca6:	2300      	movs	r3, #0
 8109ca8:	2b00      	cmp	r3, #0
 8109caa:	d007      	beq.n	8109cbc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8109cac:	687b      	ldr	r3, [r7, #4]
 8109cae:	681b      	ldr	r3, [r3, #0]
 8109cb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8109cb2:	687b      	ldr	r3, [r7, #4]
 8109cb4:	681b      	ldr	r3, [r3, #0]
 8109cb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8109cba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8109cbc:	687b      	ldr	r3, [r7, #4]
 8109cbe:	681b      	ldr	r3, [r3, #0]
 8109cc0:	4a25      	ldr	r2, [pc, #148]	@ (8109d58 <HAL_TIM_PWM_Start+0x1f4>)
 8109cc2:	4293      	cmp	r3, r2
 8109cc4:	d022      	beq.n	8109d0c <HAL_TIM_PWM_Start+0x1a8>
 8109cc6:	687b      	ldr	r3, [r7, #4]
 8109cc8:	681b      	ldr	r3, [r3, #0]
 8109cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109cce:	d01d      	beq.n	8109d0c <HAL_TIM_PWM_Start+0x1a8>
 8109cd0:	687b      	ldr	r3, [r7, #4]
 8109cd2:	681b      	ldr	r3, [r3, #0]
 8109cd4:	4a25      	ldr	r2, [pc, #148]	@ (8109d6c <HAL_TIM_PWM_Start+0x208>)
 8109cd6:	4293      	cmp	r3, r2
 8109cd8:	d018      	beq.n	8109d0c <HAL_TIM_PWM_Start+0x1a8>
 8109cda:	687b      	ldr	r3, [r7, #4]
 8109cdc:	681b      	ldr	r3, [r3, #0]
 8109cde:	4a24      	ldr	r2, [pc, #144]	@ (8109d70 <HAL_TIM_PWM_Start+0x20c>)
 8109ce0:	4293      	cmp	r3, r2
 8109ce2:	d013      	beq.n	8109d0c <HAL_TIM_PWM_Start+0x1a8>
 8109ce4:	687b      	ldr	r3, [r7, #4]
 8109ce6:	681b      	ldr	r3, [r3, #0]
 8109ce8:	4a22      	ldr	r2, [pc, #136]	@ (8109d74 <HAL_TIM_PWM_Start+0x210>)
 8109cea:	4293      	cmp	r3, r2
 8109cec:	d00e      	beq.n	8109d0c <HAL_TIM_PWM_Start+0x1a8>
 8109cee:	687b      	ldr	r3, [r7, #4]
 8109cf0:	681b      	ldr	r3, [r3, #0]
 8109cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8109d5c <HAL_TIM_PWM_Start+0x1f8>)
 8109cf4:	4293      	cmp	r3, r2
 8109cf6:	d009      	beq.n	8109d0c <HAL_TIM_PWM_Start+0x1a8>
 8109cf8:	687b      	ldr	r3, [r7, #4]
 8109cfa:	681b      	ldr	r3, [r3, #0]
 8109cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8109d78 <HAL_TIM_PWM_Start+0x214>)
 8109cfe:	4293      	cmp	r3, r2
 8109d00:	d004      	beq.n	8109d0c <HAL_TIM_PWM_Start+0x1a8>
 8109d02:	687b      	ldr	r3, [r7, #4]
 8109d04:	681b      	ldr	r3, [r3, #0]
 8109d06:	4a16      	ldr	r2, [pc, #88]	@ (8109d60 <HAL_TIM_PWM_Start+0x1fc>)
 8109d08:	4293      	cmp	r3, r2
 8109d0a:	d115      	bne.n	8109d38 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8109d0c:	687b      	ldr	r3, [r7, #4]
 8109d0e:	681b      	ldr	r3, [r3, #0]
 8109d10:	689a      	ldr	r2, [r3, #8]
 8109d12:	4b1a      	ldr	r3, [pc, #104]	@ (8109d7c <HAL_TIM_PWM_Start+0x218>)
 8109d14:	4013      	ands	r3, r2
 8109d16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109d18:	68fb      	ldr	r3, [r7, #12]
 8109d1a:	2b06      	cmp	r3, #6
 8109d1c:	d015      	beq.n	8109d4a <HAL_TIM_PWM_Start+0x1e6>
 8109d1e:	68fb      	ldr	r3, [r7, #12]
 8109d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109d24:	d011      	beq.n	8109d4a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8109d26:	687b      	ldr	r3, [r7, #4]
 8109d28:	681b      	ldr	r3, [r3, #0]
 8109d2a:	681a      	ldr	r2, [r3, #0]
 8109d2c:	687b      	ldr	r3, [r7, #4]
 8109d2e:	681b      	ldr	r3, [r3, #0]
 8109d30:	f042 0201 	orr.w	r2, r2, #1
 8109d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109d36:	e008      	b.n	8109d4a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8109d38:	687b      	ldr	r3, [r7, #4]
 8109d3a:	681b      	ldr	r3, [r3, #0]
 8109d3c:	681a      	ldr	r2, [r3, #0]
 8109d3e:	687b      	ldr	r3, [r7, #4]
 8109d40:	681b      	ldr	r3, [r3, #0]
 8109d42:	f042 0201 	orr.w	r2, r2, #1
 8109d46:	601a      	str	r2, [r3, #0]
 8109d48:	e000      	b.n	8109d4c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109d4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8109d4c:	2300      	movs	r3, #0
}
 8109d4e:	4618      	mov	r0, r3
 8109d50:	3710      	adds	r7, #16
 8109d52:	46bd      	mov	sp, r7
 8109d54:	bd80      	pop	{r7, pc}
 8109d56:	bf00      	nop
 8109d58:	40010000 	.word	0x40010000
 8109d5c:	40010400 	.word	0x40010400
 8109d60:	40014000 	.word	0x40014000
 8109d64:	40014400 	.word	0x40014400
 8109d68:	40014800 	.word	0x40014800
 8109d6c:	40000400 	.word	0x40000400
 8109d70:	40000800 	.word	0x40000800
 8109d74:	40000c00 	.word	0x40000c00
 8109d78:	40001800 	.word	0x40001800
 8109d7c:	00010007 	.word	0x00010007

08109d80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8109d80:	b580      	push	{r7, lr}
 8109d82:	b086      	sub	sp, #24
 8109d84:	af00      	add	r7, sp, #0
 8109d86:	6078      	str	r0, [r7, #4]
 8109d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8109d8a:	687b      	ldr	r3, [r7, #4]
 8109d8c:	2b00      	cmp	r3, #0
 8109d8e:	d101      	bne.n	8109d94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8109d90:	2301      	movs	r3, #1
 8109d92:	e097      	b.n	8109ec4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8109d94:	687b      	ldr	r3, [r7, #4]
 8109d96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8109d9a:	b2db      	uxtb	r3, r3
 8109d9c:	2b00      	cmp	r3, #0
 8109d9e:	d106      	bne.n	8109dae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8109da0:	687b      	ldr	r3, [r7, #4]
 8109da2:	2200      	movs	r2, #0
 8109da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8109da8:	6878      	ldr	r0, [r7, #4]
 8109daa:	f7f9 fc71 	bl	8103690 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109dae:	687b      	ldr	r3, [r7, #4]
 8109db0:	2202      	movs	r2, #2
 8109db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8109db6:	687b      	ldr	r3, [r7, #4]
 8109db8:	681b      	ldr	r3, [r3, #0]
 8109dba:	689b      	ldr	r3, [r3, #8]
 8109dbc:	687a      	ldr	r2, [r7, #4]
 8109dbe:	6812      	ldr	r2, [r2, #0]
 8109dc0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8109dc4:	f023 0307 	bic.w	r3, r3, #7
 8109dc8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8109dca:	687b      	ldr	r3, [r7, #4]
 8109dcc:	681a      	ldr	r2, [r3, #0]
 8109dce:	687b      	ldr	r3, [r7, #4]
 8109dd0:	3304      	adds	r3, #4
 8109dd2:	4619      	mov	r1, r3
 8109dd4:	4610      	mov	r0, r2
 8109dd6:	f000 fbb5 	bl	810a544 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8109dda:	687b      	ldr	r3, [r7, #4]
 8109ddc:	681b      	ldr	r3, [r3, #0]
 8109dde:	689b      	ldr	r3, [r3, #8]
 8109de0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8109de2:	687b      	ldr	r3, [r7, #4]
 8109de4:	681b      	ldr	r3, [r3, #0]
 8109de6:	699b      	ldr	r3, [r3, #24]
 8109de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8109dea:	687b      	ldr	r3, [r7, #4]
 8109dec:	681b      	ldr	r3, [r3, #0]
 8109dee:	6a1b      	ldr	r3, [r3, #32]
 8109df0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8109df2:	683b      	ldr	r3, [r7, #0]
 8109df4:	681b      	ldr	r3, [r3, #0]
 8109df6:	697a      	ldr	r2, [r7, #20]
 8109df8:	4313      	orrs	r3, r2
 8109dfa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8109dfc:	693b      	ldr	r3, [r7, #16]
 8109dfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8109e02:	f023 0303 	bic.w	r3, r3, #3
 8109e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8109e08:	683b      	ldr	r3, [r7, #0]
 8109e0a:	689a      	ldr	r2, [r3, #8]
 8109e0c:	683b      	ldr	r3, [r7, #0]
 8109e0e:	699b      	ldr	r3, [r3, #24]
 8109e10:	021b      	lsls	r3, r3, #8
 8109e12:	4313      	orrs	r3, r2
 8109e14:	693a      	ldr	r2, [r7, #16]
 8109e16:	4313      	orrs	r3, r2
 8109e18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8109e1a:	693b      	ldr	r3, [r7, #16]
 8109e1c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8109e20:	f023 030c 	bic.w	r3, r3, #12
 8109e24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8109e26:	693b      	ldr	r3, [r7, #16]
 8109e28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8109e2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8109e30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8109e32:	683b      	ldr	r3, [r7, #0]
 8109e34:	68da      	ldr	r2, [r3, #12]
 8109e36:	683b      	ldr	r3, [r7, #0]
 8109e38:	69db      	ldr	r3, [r3, #28]
 8109e3a:	021b      	lsls	r3, r3, #8
 8109e3c:	4313      	orrs	r3, r2
 8109e3e:	693a      	ldr	r2, [r7, #16]
 8109e40:	4313      	orrs	r3, r2
 8109e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8109e44:	683b      	ldr	r3, [r7, #0]
 8109e46:	691b      	ldr	r3, [r3, #16]
 8109e48:	011a      	lsls	r2, r3, #4
 8109e4a:	683b      	ldr	r3, [r7, #0]
 8109e4c:	6a1b      	ldr	r3, [r3, #32]
 8109e4e:	031b      	lsls	r3, r3, #12
 8109e50:	4313      	orrs	r3, r2
 8109e52:	693a      	ldr	r2, [r7, #16]
 8109e54:	4313      	orrs	r3, r2
 8109e56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8109e58:	68fb      	ldr	r3, [r7, #12]
 8109e5a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8109e5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8109e60:	68fb      	ldr	r3, [r7, #12]
 8109e62:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8109e66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8109e68:	683b      	ldr	r3, [r7, #0]
 8109e6a:	685a      	ldr	r2, [r3, #4]
 8109e6c:	683b      	ldr	r3, [r7, #0]
 8109e6e:	695b      	ldr	r3, [r3, #20]
 8109e70:	011b      	lsls	r3, r3, #4
 8109e72:	4313      	orrs	r3, r2
 8109e74:	68fa      	ldr	r2, [r7, #12]
 8109e76:	4313      	orrs	r3, r2
 8109e78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8109e7a:	687b      	ldr	r3, [r7, #4]
 8109e7c:	681b      	ldr	r3, [r3, #0]
 8109e7e:	697a      	ldr	r2, [r7, #20]
 8109e80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8109e82:	687b      	ldr	r3, [r7, #4]
 8109e84:	681b      	ldr	r3, [r3, #0]
 8109e86:	693a      	ldr	r2, [r7, #16]
 8109e88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8109e8a:	687b      	ldr	r3, [r7, #4]
 8109e8c:	681b      	ldr	r3, [r3, #0]
 8109e8e:	68fa      	ldr	r2, [r7, #12]
 8109e90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8109e92:	687b      	ldr	r3, [r7, #4]
 8109e94:	2201      	movs	r2, #1
 8109e96:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8109e9a:	687b      	ldr	r3, [r7, #4]
 8109e9c:	2201      	movs	r2, #1
 8109e9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8109ea2:	687b      	ldr	r3, [r7, #4]
 8109ea4:	2201      	movs	r2, #1
 8109ea6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8109eaa:	687b      	ldr	r3, [r7, #4]
 8109eac:	2201      	movs	r2, #1
 8109eae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8109eb2:	687b      	ldr	r3, [r7, #4]
 8109eb4:	2201      	movs	r2, #1
 8109eb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8109eba:	687b      	ldr	r3, [r7, #4]
 8109ebc:	2201      	movs	r2, #1
 8109ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8109ec2:	2300      	movs	r3, #0
}
 8109ec4:	4618      	mov	r0, r3
 8109ec6:	3718      	adds	r7, #24
 8109ec8:	46bd      	mov	sp, r7
 8109eca:	bd80      	pop	{r7, pc}

08109ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8109ecc:	b580      	push	{r7, lr}
 8109ece:	b084      	sub	sp, #16
 8109ed0:	af00      	add	r7, sp, #0
 8109ed2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8109ed4:	687b      	ldr	r3, [r7, #4]
 8109ed6:	681b      	ldr	r3, [r3, #0]
 8109ed8:	68db      	ldr	r3, [r3, #12]
 8109eda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8109edc:	687b      	ldr	r3, [r7, #4]
 8109ede:	681b      	ldr	r3, [r3, #0]
 8109ee0:	691b      	ldr	r3, [r3, #16]
 8109ee2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8109ee4:	68bb      	ldr	r3, [r7, #8]
 8109ee6:	f003 0302 	and.w	r3, r3, #2
 8109eea:	2b00      	cmp	r3, #0
 8109eec:	d020      	beq.n	8109f30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8109eee:	68fb      	ldr	r3, [r7, #12]
 8109ef0:	f003 0302 	and.w	r3, r3, #2
 8109ef4:	2b00      	cmp	r3, #0
 8109ef6:	d01b      	beq.n	8109f30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8109ef8:	687b      	ldr	r3, [r7, #4]
 8109efa:	681b      	ldr	r3, [r3, #0]
 8109efc:	f06f 0202 	mvn.w	r2, #2
 8109f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8109f02:	687b      	ldr	r3, [r7, #4]
 8109f04:	2201      	movs	r2, #1
 8109f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8109f08:	687b      	ldr	r3, [r7, #4]
 8109f0a:	681b      	ldr	r3, [r3, #0]
 8109f0c:	699b      	ldr	r3, [r3, #24]
 8109f0e:	f003 0303 	and.w	r3, r3, #3
 8109f12:	2b00      	cmp	r3, #0
 8109f14:	d003      	beq.n	8109f1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8109f16:	6878      	ldr	r0, [r7, #4]
 8109f18:	f000 faf6 	bl	810a508 <HAL_TIM_IC_CaptureCallback>
 8109f1c:	e005      	b.n	8109f2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8109f1e:	6878      	ldr	r0, [r7, #4]
 8109f20:	f000 fae8 	bl	810a4f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109f24:	6878      	ldr	r0, [r7, #4]
 8109f26:	f000 faf9 	bl	810a51c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8109f2a:	687b      	ldr	r3, [r7, #4]
 8109f2c:	2200      	movs	r2, #0
 8109f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8109f30:	68bb      	ldr	r3, [r7, #8]
 8109f32:	f003 0304 	and.w	r3, r3, #4
 8109f36:	2b00      	cmp	r3, #0
 8109f38:	d020      	beq.n	8109f7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8109f3a:	68fb      	ldr	r3, [r7, #12]
 8109f3c:	f003 0304 	and.w	r3, r3, #4
 8109f40:	2b00      	cmp	r3, #0
 8109f42:	d01b      	beq.n	8109f7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8109f44:	687b      	ldr	r3, [r7, #4]
 8109f46:	681b      	ldr	r3, [r3, #0]
 8109f48:	f06f 0204 	mvn.w	r2, #4
 8109f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8109f4e:	687b      	ldr	r3, [r7, #4]
 8109f50:	2202      	movs	r2, #2
 8109f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8109f54:	687b      	ldr	r3, [r7, #4]
 8109f56:	681b      	ldr	r3, [r3, #0]
 8109f58:	699b      	ldr	r3, [r3, #24]
 8109f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8109f5e:	2b00      	cmp	r3, #0
 8109f60:	d003      	beq.n	8109f6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8109f62:	6878      	ldr	r0, [r7, #4]
 8109f64:	f000 fad0 	bl	810a508 <HAL_TIM_IC_CaptureCallback>
 8109f68:	e005      	b.n	8109f76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8109f6a:	6878      	ldr	r0, [r7, #4]
 8109f6c:	f000 fac2 	bl	810a4f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109f70:	6878      	ldr	r0, [r7, #4]
 8109f72:	f000 fad3 	bl	810a51c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8109f76:	687b      	ldr	r3, [r7, #4]
 8109f78:	2200      	movs	r2, #0
 8109f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8109f7c:	68bb      	ldr	r3, [r7, #8]
 8109f7e:	f003 0308 	and.w	r3, r3, #8
 8109f82:	2b00      	cmp	r3, #0
 8109f84:	d020      	beq.n	8109fc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8109f86:	68fb      	ldr	r3, [r7, #12]
 8109f88:	f003 0308 	and.w	r3, r3, #8
 8109f8c:	2b00      	cmp	r3, #0
 8109f8e:	d01b      	beq.n	8109fc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8109f90:	687b      	ldr	r3, [r7, #4]
 8109f92:	681b      	ldr	r3, [r3, #0]
 8109f94:	f06f 0208 	mvn.w	r2, #8
 8109f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8109f9a:	687b      	ldr	r3, [r7, #4]
 8109f9c:	2204      	movs	r2, #4
 8109f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8109fa0:	687b      	ldr	r3, [r7, #4]
 8109fa2:	681b      	ldr	r3, [r3, #0]
 8109fa4:	69db      	ldr	r3, [r3, #28]
 8109fa6:	f003 0303 	and.w	r3, r3, #3
 8109faa:	2b00      	cmp	r3, #0
 8109fac:	d003      	beq.n	8109fb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8109fae:	6878      	ldr	r0, [r7, #4]
 8109fb0:	f000 faaa 	bl	810a508 <HAL_TIM_IC_CaptureCallback>
 8109fb4:	e005      	b.n	8109fc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8109fb6:	6878      	ldr	r0, [r7, #4]
 8109fb8:	f000 fa9c 	bl	810a4f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109fbc:	6878      	ldr	r0, [r7, #4]
 8109fbe:	f000 faad 	bl	810a51c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8109fc2:	687b      	ldr	r3, [r7, #4]
 8109fc4:	2200      	movs	r2, #0
 8109fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8109fc8:	68bb      	ldr	r3, [r7, #8]
 8109fca:	f003 0310 	and.w	r3, r3, #16
 8109fce:	2b00      	cmp	r3, #0
 8109fd0:	d020      	beq.n	810a014 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8109fd2:	68fb      	ldr	r3, [r7, #12]
 8109fd4:	f003 0310 	and.w	r3, r3, #16
 8109fd8:	2b00      	cmp	r3, #0
 8109fda:	d01b      	beq.n	810a014 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8109fdc:	687b      	ldr	r3, [r7, #4]
 8109fde:	681b      	ldr	r3, [r3, #0]
 8109fe0:	f06f 0210 	mvn.w	r2, #16
 8109fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8109fe6:	687b      	ldr	r3, [r7, #4]
 8109fe8:	2208      	movs	r2, #8
 8109fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8109fec:	687b      	ldr	r3, [r7, #4]
 8109fee:	681b      	ldr	r3, [r3, #0]
 8109ff0:	69db      	ldr	r3, [r3, #28]
 8109ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8109ff6:	2b00      	cmp	r3, #0
 8109ff8:	d003      	beq.n	810a002 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8109ffa:	6878      	ldr	r0, [r7, #4]
 8109ffc:	f000 fa84 	bl	810a508 <HAL_TIM_IC_CaptureCallback>
 810a000:	e005      	b.n	810a00e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810a002:	6878      	ldr	r0, [r7, #4]
 810a004:	f000 fa76 	bl	810a4f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810a008:	6878      	ldr	r0, [r7, #4]
 810a00a:	f000 fa87 	bl	810a51c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810a00e:	687b      	ldr	r3, [r7, #4]
 810a010:	2200      	movs	r2, #0
 810a012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 810a014:	68bb      	ldr	r3, [r7, #8]
 810a016:	f003 0301 	and.w	r3, r3, #1
 810a01a:	2b00      	cmp	r3, #0
 810a01c:	d00c      	beq.n	810a038 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 810a01e:	68fb      	ldr	r3, [r7, #12]
 810a020:	f003 0301 	and.w	r3, r3, #1
 810a024:	2b00      	cmp	r3, #0
 810a026:	d007      	beq.n	810a038 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 810a028:	687b      	ldr	r3, [r7, #4]
 810a02a:	681b      	ldr	r3, [r3, #0]
 810a02c:	f06f 0201 	mvn.w	r2, #1
 810a030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810a032:	6878      	ldr	r0, [r7, #4]
 810a034:	f7f9 f988 	bl	8103348 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810a038:	68bb      	ldr	r3, [r7, #8]
 810a03a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810a03e:	2b00      	cmp	r3, #0
 810a040:	d104      	bne.n	810a04c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810a042:	68bb      	ldr	r3, [r7, #8]
 810a044:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810a048:	2b00      	cmp	r3, #0
 810a04a:	d00c      	beq.n	810a066 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810a04c:	68fb      	ldr	r3, [r7, #12]
 810a04e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810a052:	2b00      	cmp	r3, #0
 810a054:	d007      	beq.n	810a066 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 810a056:	687b      	ldr	r3, [r7, #4]
 810a058:	681b      	ldr	r3, [r3, #0]
 810a05a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810a05e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810a060:	6878      	ldr	r0, [r7, #4]
 810a062:	f000 ffc3 	bl	810afec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 810a066:	68bb      	ldr	r3, [r7, #8]
 810a068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810a06c:	2b00      	cmp	r3, #0
 810a06e:	d00c      	beq.n	810a08a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810a070:	68fb      	ldr	r3, [r7, #12]
 810a072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810a076:	2b00      	cmp	r3, #0
 810a078:	d007      	beq.n	810a08a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810a07a:	687b      	ldr	r3, [r7, #4]
 810a07c:	681b      	ldr	r3, [r3, #0]
 810a07e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810a082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810a084:	6878      	ldr	r0, [r7, #4]
 810a086:	f000 ffbb 	bl	810b000 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 810a08a:	68bb      	ldr	r3, [r7, #8]
 810a08c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810a090:	2b00      	cmp	r3, #0
 810a092:	d00c      	beq.n	810a0ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 810a094:	68fb      	ldr	r3, [r7, #12]
 810a096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810a09a:	2b00      	cmp	r3, #0
 810a09c:	d007      	beq.n	810a0ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 810a09e:	687b      	ldr	r3, [r7, #4]
 810a0a0:	681b      	ldr	r3, [r3, #0]
 810a0a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 810a0a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810a0a8:	6878      	ldr	r0, [r7, #4]
 810a0aa:	f000 fa41 	bl	810a530 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 810a0ae:	68bb      	ldr	r3, [r7, #8]
 810a0b0:	f003 0320 	and.w	r3, r3, #32
 810a0b4:	2b00      	cmp	r3, #0
 810a0b6:	d00c      	beq.n	810a0d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 810a0b8:	68fb      	ldr	r3, [r7, #12]
 810a0ba:	f003 0320 	and.w	r3, r3, #32
 810a0be:	2b00      	cmp	r3, #0
 810a0c0:	d007      	beq.n	810a0d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810a0c2:	687b      	ldr	r3, [r7, #4]
 810a0c4:	681b      	ldr	r3, [r3, #0]
 810a0c6:	f06f 0220 	mvn.w	r2, #32
 810a0ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810a0cc:	6878      	ldr	r0, [r7, #4]
 810a0ce:	f000 ff83 	bl	810afd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810a0d2:	bf00      	nop
 810a0d4:	3710      	adds	r7, #16
 810a0d6:	46bd      	mov	sp, r7
 810a0d8:	bd80      	pop	{r7, pc}
	...

0810a0dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 810a0dc:	b580      	push	{r7, lr}
 810a0de:	b086      	sub	sp, #24
 810a0e0:	af00      	add	r7, sp, #0
 810a0e2:	60f8      	str	r0, [r7, #12]
 810a0e4:	60b9      	str	r1, [r7, #8]
 810a0e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810a0e8:	2300      	movs	r3, #0
 810a0ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 810a0ec:	68fb      	ldr	r3, [r7, #12]
 810a0ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810a0f2:	2b01      	cmp	r3, #1
 810a0f4:	d101      	bne.n	810a0fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 810a0f6:	2302      	movs	r3, #2
 810a0f8:	e0ff      	b.n	810a2fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 810a0fa:	68fb      	ldr	r3, [r7, #12]
 810a0fc:	2201      	movs	r2, #1
 810a0fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 810a102:	687b      	ldr	r3, [r7, #4]
 810a104:	2b14      	cmp	r3, #20
 810a106:	f200 80f0 	bhi.w	810a2ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 810a10a:	a201      	add	r2, pc, #4	@ (adr r2, 810a110 <HAL_TIM_PWM_ConfigChannel+0x34>)
 810a10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a110:	0810a165 	.word	0x0810a165
 810a114:	0810a2eb 	.word	0x0810a2eb
 810a118:	0810a2eb 	.word	0x0810a2eb
 810a11c:	0810a2eb 	.word	0x0810a2eb
 810a120:	0810a1a5 	.word	0x0810a1a5
 810a124:	0810a2eb 	.word	0x0810a2eb
 810a128:	0810a2eb 	.word	0x0810a2eb
 810a12c:	0810a2eb 	.word	0x0810a2eb
 810a130:	0810a1e7 	.word	0x0810a1e7
 810a134:	0810a2eb 	.word	0x0810a2eb
 810a138:	0810a2eb 	.word	0x0810a2eb
 810a13c:	0810a2eb 	.word	0x0810a2eb
 810a140:	0810a227 	.word	0x0810a227
 810a144:	0810a2eb 	.word	0x0810a2eb
 810a148:	0810a2eb 	.word	0x0810a2eb
 810a14c:	0810a2eb 	.word	0x0810a2eb
 810a150:	0810a269 	.word	0x0810a269
 810a154:	0810a2eb 	.word	0x0810a2eb
 810a158:	0810a2eb 	.word	0x0810a2eb
 810a15c:	0810a2eb 	.word	0x0810a2eb
 810a160:	0810a2a9 	.word	0x0810a2a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810a164:	68fb      	ldr	r3, [r7, #12]
 810a166:	681b      	ldr	r3, [r3, #0]
 810a168:	68b9      	ldr	r1, [r7, #8]
 810a16a:	4618      	mov	r0, r3
 810a16c:	f000 fa90 	bl	810a690 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810a170:	68fb      	ldr	r3, [r7, #12]
 810a172:	681b      	ldr	r3, [r3, #0]
 810a174:	699a      	ldr	r2, [r3, #24]
 810a176:	68fb      	ldr	r3, [r7, #12]
 810a178:	681b      	ldr	r3, [r3, #0]
 810a17a:	f042 0208 	orr.w	r2, r2, #8
 810a17e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810a180:	68fb      	ldr	r3, [r7, #12]
 810a182:	681b      	ldr	r3, [r3, #0]
 810a184:	699a      	ldr	r2, [r3, #24]
 810a186:	68fb      	ldr	r3, [r7, #12]
 810a188:	681b      	ldr	r3, [r3, #0]
 810a18a:	f022 0204 	bic.w	r2, r2, #4
 810a18e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810a190:	68fb      	ldr	r3, [r7, #12]
 810a192:	681b      	ldr	r3, [r3, #0]
 810a194:	6999      	ldr	r1, [r3, #24]
 810a196:	68bb      	ldr	r3, [r7, #8]
 810a198:	691a      	ldr	r2, [r3, #16]
 810a19a:	68fb      	ldr	r3, [r7, #12]
 810a19c:	681b      	ldr	r3, [r3, #0]
 810a19e:	430a      	orrs	r2, r1
 810a1a0:	619a      	str	r2, [r3, #24]
      break;
 810a1a2:	e0a5      	b.n	810a2f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810a1a4:	68fb      	ldr	r3, [r7, #12]
 810a1a6:	681b      	ldr	r3, [r3, #0]
 810a1a8:	68b9      	ldr	r1, [r7, #8]
 810a1aa:	4618      	mov	r0, r3
 810a1ac:	f000 fb00 	bl	810a7b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810a1b0:	68fb      	ldr	r3, [r7, #12]
 810a1b2:	681b      	ldr	r3, [r3, #0]
 810a1b4:	699a      	ldr	r2, [r3, #24]
 810a1b6:	68fb      	ldr	r3, [r7, #12]
 810a1b8:	681b      	ldr	r3, [r3, #0]
 810a1ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810a1be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810a1c0:	68fb      	ldr	r3, [r7, #12]
 810a1c2:	681b      	ldr	r3, [r3, #0]
 810a1c4:	699a      	ldr	r2, [r3, #24]
 810a1c6:	68fb      	ldr	r3, [r7, #12]
 810a1c8:	681b      	ldr	r3, [r3, #0]
 810a1ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810a1ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810a1d0:	68fb      	ldr	r3, [r7, #12]
 810a1d2:	681b      	ldr	r3, [r3, #0]
 810a1d4:	6999      	ldr	r1, [r3, #24]
 810a1d6:	68bb      	ldr	r3, [r7, #8]
 810a1d8:	691b      	ldr	r3, [r3, #16]
 810a1da:	021a      	lsls	r2, r3, #8
 810a1dc:	68fb      	ldr	r3, [r7, #12]
 810a1de:	681b      	ldr	r3, [r3, #0]
 810a1e0:	430a      	orrs	r2, r1
 810a1e2:	619a      	str	r2, [r3, #24]
      break;
 810a1e4:	e084      	b.n	810a2f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810a1e6:	68fb      	ldr	r3, [r7, #12]
 810a1e8:	681b      	ldr	r3, [r3, #0]
 810a1ea:	68b9      	ldr	r1, [r7, #8]
 810a1ec:	4618      	mov	r0, r3
 810a1ee:	f000 fb69 	bl	810a8c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810a1f2:	68fb      	ldr	r3, [r7, #12]
 810a1f4:	681b      	ldr	r3, [r3, #0]
 810a1f6:	69da      	ldr	r2, [r3, #28]
 810a1f8:	68fb      	ldr	r3, [r7, #12]
 810a1fa:	681b      	ldr	r3, [r3, #0]
 810a1fc:	f042 0208 	orr.w	r2, r2, #8
 810a200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810a202:	68fb      	ldr	r3, [r7, #12]
 810a204:	681b      	ldr	r3, [r3, #0]
 810a206:	69da      	ldr	r2, [r3, #28]
 810a208:	68fb      	ldr	r3, [r7, #12]
 810a20a:	681b      	ldr	r3, [r3, #0]
 810a20c:	f022 0204 	bic.w	r2, r2, #4
 810a210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810a212:	68fb      	ldr	r3, [r7, #12]
 810a214:	681b      	ldr	r3, [r3, #0]
 810a216:	69d9      	ldr	r1, [r3, #28]
 810a218:	68bb      	ldr	r3, [r7, #8]
 810a21a:	691a      	ldr	r2, [r3, #16]
 810a21c:	68fb      	ldr	r3, [r7, #12]
 810a21e:	681b      	ldr	r3, [r3, #0]
 810a220:	430a      	orrs	r2, r1
 810a222:	61da      	str	r2, [r3, #28]
      break;
 810a224:	e064      	b.n	810a2f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810a226:	68fb      	ldr	r3, [r7, #12]
 810a228:	681b      	ldr	r3, [r3, #0]
 810a22a:	68b9      	ldr	r1, [r7, #8]
 810a22c:	4618      	mov	r0, r3
 810a22e:	f000 fbd1 	bl	810a9d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810a232:	68fb      	ldr	r3, [r7, #12]
 810a234:	681b      	ldr	r3, [r3, #0]
 810a236:	69da      	ldr	r2, [r3, #28]
 810a238:	68fb      	ldr	r3, [r7, #12]
 810a23a:	681b      	ldr	r3, [r3, #0]
 810a23c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810a240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810a242:	68fb      	ldr	r3, [r7, #12]
 810a244:	681b      	ldr	r3, [r3, #0]
 810a246:	69da      	ldr	r2, [r3, #28]
 810a248:	68fb      	ldr	r3, [r7, #12]
 810a24a:	681b      	ldr	r3, [r3, #0]
 810a24c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810a250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810a252:	68fb      	ldr	r3, [r7, #12]
 810a254:	681b      	ldr	r3, [r3, #0]
 810a256:	69d9      	ldr	r1, [r3, #28]
 810a258:	68bb      	ldr	r3, [r7, #8]
 810a25a:	691b      	ldr	r3, [r3, #16]
 810a25c:	021a      	lsls	r2, r3, #8
 810a25e:	68fb      	ldr	r3, [r7, #12]
 810a260:	681b      	ldr	r3, [r3, #0]
 810a262:	430a      	orrs	r2, r1
 810a264:	61da      	str	r2, [r3, #28]
      break;
 810a266:	e043      	b.n	810a2f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810a268:	68fb      	ldr	r3, [r7, #12]
 810a26a:	681b      	ldr	r3, [r3, #0]
 810a26c:	68b9      	ldr	r1, [r7, #8]
 810a26e:	4618      	mov	r0, r3
 810a270:	f000 fc1a 	bl	810aaa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 810a274:	68fb      	ldr	r3, [r7, #12]
 810a276:	681b      	ldr	r3, [r3, #0]
 810a278:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810a27a:	68fb      	ldr	r3, [r7, #12]
 810a27c:	681b      	ldr	r3, [r3, #0]
 810a27e:	f042 0208 	orr.w	r2, r2, #8
 810a282:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 810a284:	68fb      	ldr	r3, [r7, #12]
 810a286:	681b      	ldr	r3, [r3, #0]
 810a288:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810a28a:	68fb      	ldr	r3, [r7, #12]
 810a28c:	681b      	ldr	r3, [r3, #0]
 810a28e:	f022 0204 	bic.w	r2, r2, #4
 810a292:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810a294:	68fb      	ldr	r3, [r7, #12]
 810a296:	681b      	ldr	r3, [r3, #0]
 810a298:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810a29a:	68bb      	ldr	r3, [r7, #8]
 810a29c:	691a      	ldr	r2, [r3, #16]
 810a29e:	68fb      	ldr	r3, [r7, #12]
 810a2a0:	681b      	ldr	r3, [r3, #0]
 810a2a2:	430a      	orrs	r2, r1
 810a2a4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810a2a6:	e023      	b.n	810a2f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810a2a8:	68fb      	ldr	r3, [r7, #12]
 810a2aa:	681b      	ldr	r3, [r3, #0]
 810a2ac:	68b9      	ldr	r1, [r7, #8]
 810a2ae:	4618      	mov	r0, r3
 810a2b0:	f000 fc5e 	bl	810ab70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 810a2b4:	68fb      	ldr	r3, [r7, #12]
 810a2b6:	681b      	ldr	r3, [r3, #0]
 810a2b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810a2ba:	68fb      	ldr	r3, [r7, #12]
 810a2bc:	681b      	ldr	r3, [r3, #0]
 810a2be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810a2c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 810a2c4:	68fb      	ldr	r3, [r7, #12]
 810a2c6:	681b      	ldr	r3, [r3, #0]
 810a2c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810a2ca:	68fb      	ldr	r3, [r7, #12]
 810a2cc:	681b      	ldr	r3, [r3, #0]
 810a2ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810a2d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810a2d4:	68fb      	ldr	r3, [r7, #12]
 810a2d6:	681b      	ldr	r3, [r3, #0]
 810a2d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810a2da:	68bb      	ldr	r3, [r7, #8]
 810a2dc:	691b      	ldr	r3, [r3, #16]
 810a2de:	021a      	lsls	r2, r3, #8
 810a2e0:	68fb      	ldr	r3, [r7, #12]
 810a2e2:	681b      	ldr	r3, [r3, #0]
 810a2e4:	430a      	orrs	r2, r1
 810a2e6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810a2e8:	e002      	b.n	810a2f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810a2ea:	2301      	movs	r3, #1
 810a2ec:	75fb      	strb	r3, [r7, #23]
      break;
 810a2ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810a2f0:	68fb      	ldr	r3, [r7, #12]
 810a2f2:	2200      	movs	r2, #0
 810a2f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810a2f8:	7dfb      	ldrb	r3, [r7, #23]
}
 810a2fa:	4618      	mov	r0, r3
 810a2fc:	3718      	adds	r7, #24
 810a2fe:	46bd      	mov	sp, r7
 810a300:	bd80      	pop	{r7, pc}
 810a302:	bf00      	nop

0810a304 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 810a304:	b580      	push	{r7, lr}
 810a306:	b084      	sub	sp, #16
 810a308:	af00      	add	r7, sp, #0
 810a30a:	6078      	str	r0, [r7, #4]
 810a30c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810a30e:	2300      	movs	r3, #0
 810a310:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810a312:	687b      	ldr	r3, [r7, #4]
 810a314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810a318:	2b01      	cmp	r3, #1
 810a31a:	d101      	bne.n	810a320 <HAL_TIM_ConfigClockSource+0x1c>
 810a31c:	2302      	movs	r3, #2
 810a31e:	e0de      	b.n	810a4de <HAL_TIM_ConfigClockSource+0x1da>
 810a320:	687b      	ldr	r3, [r7, #4]
 810a322:	2201      	movs	r2, #1
 810a324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 810a328:	687b      	ldr	r3, [r7, #4]
 810a32a:	2202      	movs	r2, #2
 810a32c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 810a330:	687b      	ldr	r3, [r7, #4]
 810a332:	681b      	ldr	r3, [r3, #0]
 810a334:	689b      	ldr	r3, [r3, #8]
 810a336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 810a338:	68bb      	ldr	r3, [r7, #8]
 810a33a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 810a33e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 810a342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810a344:	68bb      	ldr	r3, [r7, #8]
 810a346:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810a34a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 810a34c:	687b      	ldr	r3, [r7, #4]
 810a34e:	681b      	ldr	r3, [r3, #0]
 810a350:	68ba      	ldr	r2, [r7, #8]
 810a352:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 810a354:	683b      	ldr	r3, [r7, #0]
 810a356:	681b      	ldr	r3, [r3, #0]
 810a358:	4a63      	ldr	r2, [pc, #396]	@ (810a4e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 810a35a:	4293      	cmp	r3, r2
 810a35c:	f000 80a9 	beq.w	810a4b2 <HAL_TIM_ConfigClockSource+0x1ae>
 810a360:	4a61      	ldr	r2, [pc, #388]	@ (810a4e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 810a362:	4293      	cmp	r3, r2
 810a364:	f200 80ae 	bhi.w	810a4c4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a368:	4a60      	ldr	r2, [pc, #384]	@ (810a4ec <HAL_TIM_ConfigClockSource+0x1e8>)
 810a36a:	4293      	cmp	r3, r2
 810a36c:	f000 80a1 	beq.w	810a4b2 <HAL_TIM_ConfigClockSource+0x1ae>
 810a370:	4a5e      	ldr	r2, [pc, #376]	@ (810a4ec <HAL_TIM_ConfigClockSource+0x1e8>)
 810a372:	4293      	cmp	r3, r2
 810a374:	f200 80a6 	bhi.w	810a4c4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a378:	4a5d      	ldr	r2, [pc, #372]	@ (810a4f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 810a37a:	4293      	cmp	r3, r2
 810a37c:	f000 8099 	beq.w	810a4b2 <HAL_TIM_ConfigClockSource+0x1ae>
 810a380:	4a5b      	ldr	r2, [pc, #364]	@ (810a4f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 810a382:	4293      	cmp	r3, r2
 810a384:	f200 809e 	bhi.w	810a4c4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a388:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 810a38c:	f000 8091 	beq.w	810a4b2 <HAL_TIM_ConfigClockSource+0x1ae>
 810a390:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 810a394:	f200 8096 	bhi.w	810a4c4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a398:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810a39c:	f000 8089 	beq.w	810a4b2 <HAL_TIM_ConfigClockSource+0x1ae>
 810a3a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810a3a4:	f200 808e 	bhi.w	810a4c4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a3a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810a3ac:	d03e      	beq.n	810a42c <HAL_TIM_ConfigClockSource+0x128>
 810a3ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810a3b2:	f200 8087 	bhi.w	810a4c4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a3b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a3ba:	f000 8086 	beq.w	810a4ca <HAL_TIM_ConfigClockSource+0x1c6>
 810a3be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a3c2:	d87f      	bhi.n	810a4c4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a3c4:	2b70      	cmp	r3, #112	@ 0x70
 810a3c6:	d01a      	beq.n	810a3fe <HAL_TIM_ConfigClockSource+0xfa>
 810a3c8:	2b70      	cmp	r3, #112	@ 0x70
 810a3ca:	d87b      	bhi.n	810a4c4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a3cc:	2b60      	cmp	r3, #96	@ 0x60
 810a3ce:	d050      	beq.n	810a472 <HAL_TIM_ConfigClockSource+0x16e>
 810a3d0:	2b60      	cmp	r3, #96	@ 0x60
 810a3d2:	d877      	bhi.n	810a4c4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a3d4:	2b50      	cmp	r3, #80	@ 0x50
 810a3d6:	d03c      	beq.n	810a452 <HAL_TIM_ConfigClockSource+0x14e>
 810a3d8:	2b50      	cmp	r3, #80	@ 0x50
 810a3da:	d873      	bhi.n	810a4c4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a3dc:	2b40      	cmp	r3, #64	@ 0x40
 810a3de:	d058      	beq.n	810a492 <HAL_TIM_ConfigClockSource+0x18e>
 810a3e0:	2b40      	cmp	r3, #64	@ 0x40
 810a3e2:	d86f      	bhi.n	810a4c4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a3e4:	2b30      	cmp	r3, #48	@ 0x30
 810a3e6:	d064      	beq.n	810a4b2 <HAL_TIM_ConfigClockSource+0x1ae>
 810a3e8:	2b30      	cmp	r3, #48	@ 0x30
 810a3ea:	d86b      	bhi.n	810a4c4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a3ec:	2b20      	cmp	r3, #32
 810a3ee:	d060      	beq.n	810a4b2 <HAL_TIM_ConfigClockSource+0x1ae>
 810a3f0:	2b20      	cmp	r3, #32
 810a3f2:	d867      	bhi.n	810a4c4 <HAL_TIM_ConfigClockSource+0x1c0>
 810a3f4:	2b00      	cmp	r3, #0
 810a3f6:	d05c      	beq.n	810a4b2 <HAL_TIM_ConfigClockSource+0x1ae>
 810a3f8:	2b10      	cmp	r3, #16
 810a3fa:	d05a      	beq.n	810a4b2 <HAL_TIM_ConfigClockSource+0x1ae>
 810a3fc:	e062      	b.n	810a4c4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810a3fe:	687b      	ldr	r3, [r7, #4]
 810a400:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810a402:	683b      	ldr	r3, [r7, #0]
 810a404:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810a406:	683b      	ldr	r3, [r7, #0]
 810a408:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810a40a:	683b      	ldr	r3, [r7, #0]
 810a40c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810a40e:	f000 fc91 	bl	810ad34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 810a412:	687b      	ldr	r3, [r7, #4]
 810a414:	681b      	ldr	r3, [r3, #0]
 810a416:	689b      	ldr	r3, [r3, #8]
 810a418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810a41a:	68bb      	ldr	r3, [r7, #8]
 810a41c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 810a420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 810a422:	687b      	ldr	r3, [r7, #4]
 810a424:	681b      	ldr	r3, [r3, #0]
 810a426:	68ba      	ldr	r2, [r7, #8]
 810a428:	609a      	str	r2, [r3, #8]
      break;
 810a42a:	e04f      	b.n	810a4cc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810a42c:	687b      	ldr	r3, [r7, #4]
 810a42e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810a430:	683b      	ldr	r3, [r7, #0]
 810a432:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810a434:	683b      	ldr	r3, [r7, #0]
 810a436:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810a438:	683b      	ldr	r3, [r7, #0]
 810a43a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810a43c:	f000 fc7a 	bl	810ad34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810a440:	687b      	ldr	r3, [r7, #4]
 810a442:	681b      	ldr	r3, [r3, #0]
 810a444:	689a      	ldr	r2, [r3, #8]
 810a446:	687b      	ldr	r3, [r7, #4]
 810a448:	681b      	ldr	r3, [r3, #0]
 810a44a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810a44e:	609a      	str	r2, [r3, #8]
      break;
 810a450:	e03c      	b.n	810a4cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810a452:	687b      	ldr	r3, [r7, #4]
 810a454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810a456:	683b      	ldr	r3, [r7, #0]
 810a458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810a45a:	683b      	ldr	r3, [r7, #0]
 810a45c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810a45e:	461a      	mov	r2, r3
 810a460:	f000 fbec 	bl	810ac3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 810a464:	687b      	ldr	r3, [r7, #4]
 810a466:	681b      	ldr	r3, [r3, #0]
 810a468:	2150      	movs	r1, #80	@ 0x50
 810a46a:	4618      	mov	r0, r3
 810a46c:	f000 fc45 	bl	810acfa <TIM_ITRx_SetConfig>
      break;
 810a470:	e02c      	b.n	810a4cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 810a472:	687b      	ldr	r3, [r7, #4]
 810a474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810a476:	683b      	ldr	r3, [r7, #0]
 810a478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810a47a:	683b      	ldr	r3, [r7, #0]
 810a47c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 810a47e:	461a      	mov	r2, r3
 810a480:	f000 fc0b 	bl	810ac9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 810a484:	687b      	ldr	r3, [r7, #4]
 810a486:	681b      	ldr	r3, [r3, #0]
 810a488:	2160      	movs	r1, #96	@ 0x60
 810a48a:	4618      	mov	r0, r3
 810a48c:	f000 fc35 	bl	810acfa <TIM_ITRx_SetConfig>
      break;
 810a490:	e01c      	b.n	810a4cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810a492:	687b      	ldr	r3, [r7, #4]
 810a494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810a496:	683b      	ldr	r3, [r7, #0]
 810a498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810a49a:	683b      	ldr	r3, [r7, #0]
 810a49c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810a49e:	461a      	mov	r2, r3
 810a4a0:	f000 fbcc 	bl	810ac3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 810a4a4:	687b      	ldr	r3, [r7, #4]
 810a4a6:	681b      	ldr	r3, [r3, #0]
 810a4a8:	2140      	movs	r1, #64	@ 0x40
 810a4aa:	4618      	mov	r0, r3
 810a4ac:	f000 fc25 	bl	810acfa <TIM_ITRx_SetConfig>
      break;
 810a4b0:	e00c      	b.n	810a4cc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810a4b2:	687b      	ldr	r3, [r7, #4]
 810a4b4:	681a      	ldr	r2, [r3, #0]
 810a4b6:	683b      	ldr	r3, [r7, #0]
 810a4b8:	681b      	ldr	r3, [r3, #0]
 810a4ba:	4619      	mov	r1, r3
 810a4bc:	4610      	mov	r0, r2
 810a4be:	f000 fc1c 	bl	810acfa <TIM_ITRx_SetConfig>
      break;
 810a4c2:	e003      	b.n	810a4cc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 810a4c4:	2301      	movs	r3, #1
 810a4c6:	73fb      	strb	r3, [r7, #15]
      break;
 810a4c8:	e000      	b.n	810a4cc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810a4ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 810a4cc:	687b      	ldr	r3, [r7, #4]
 810a4ce:	2201      	movs	r2, #1
 810a4d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810a4d4:	687b      	ldr	r3, [r7, #4]
 810a4d6:	2200      	movs	r2, #0
 810a4d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810a4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 810a4de:	4618      	mov	r0, r3
 810a4e0:	3710      	adds	r7, #16
 810a4e2:	46bd      	mov	sp, r7
 810a4e4:	bd80      	pop	{r7, pc}
 810a4e6:	bf00      	nop
 810a4e8:	00100040 	.word	0x00100040
 810a4ec:	00100030 	.word	0x00100030
 810a4f0:	00100020 	.word	0x00100020

0810a4f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810a4f4:	b480      	push	{r7}
 810a4f6:	b083      	sub	sp, #12
 810a4f8:	af00      	add	r7, sp, #0
 810a4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810a4fc:	bf00      	nop
 810a4fe:	370c      	adds	r7, #12
 810a500:	46bd      	mov	sp, r7
 810a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a506:	4770      	bx	lr

0810a508 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810a508:	b480      	push	{r7}
 810a50a:	b083      	sub	sp, #12
 810a50c:	af00      	add	r7, sp, #0
 810a50e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810a510:	bf00      	nop
 810a512:	370c      	adds	r7, #12
 810a514:	46bd      	mov	sp, r7
 810a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a51a:	4770      	bx	lr

0810a51c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810a51c:	b480      	push	{r7}
 810a51e:	b083      	sub	sp, #12
 810a520:	af00      	add	r7, sp, #0
 810a522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810a524:	bf00      	nop
 810a526:	370c      	adds	r7, #12
 810a528:	46bd      	mov	sp, r7
 810a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a52e:	4770      	bx	lr

0810a530 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810a530:	b480      	push	{r7}
 810a532:	b083      	sub	sp, #12
 810a534:	af00      	add	r7, sp, #0
 810a536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810a538:	bf00      	nop
 810a53a:	370c      	adds	r7, #12
 810a53c:	46bd      	mov	sp, r7
 810a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a542:	4770      	bx	lr

0810a544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810a544:	b480      	push	{r7}
 810a546:	b085      	sub	sp, #20
 810a548:	af00      	add	r7, sp, #0
 810a54a:	6078      	str	r0, [r7, #4]
 810a54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810a54e:	687b      	ldr	r3, [r7, #4]
 810a550:	681b      	ldr	r3, [r3, #0]
 810a552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810a554:	687b      	ldr	r3, [r7, #4]
 810a556:	4a46      	ldr	r2, [pc, #280]	@ (810a670 <TIM_Base_SetConfig+0x12c>)
 810a558:	4293      	cmp	r3, r2
 810a55a:	d013      	beq.n	810a584 <TIM_Base_SetConfig+0x40>
 810a55c:	687b      	ldr	r3, [r7, #4]
 810a55e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a562:	d00f      	beq.n	810a584 <TIM_Base_SetConfig+0x40>
 810a564:	687b      	ldr	r3, [r7, #4]
 810a566:	4a43      	ldr	r2, [pc, #268]	@ (810a674 <TIM_Base_SetConfig+0x130>)
 810a568:	4293      	cmp	r3, r2
 810a56a:	d00b      	beq.n	810a584 <TIM_Base_SetConfig+0x40>
 810a56c:	687b      	ldr	r3, [r7, #4]
 810a56e:	4a42      	ldr	r2, [pc, #264]	@ (810a678 <TIM_Base_SetConfig+0x134>)
 810a570:	4293      	cmp	r3, r2
 810a572:	d007      	beq.n	810a584 <TIM_Base_SetConfig+0x40>
 810a574:	687b      	ldr	r3, [r7, #4]
 810a576:	4a41      	ldr	r2, [pc, #260]	@ (810a67c <TIM_Base_SetConfig+0x138>)
 810a578:	4293      	cmp	r3, r2
 810a57a:	d003      	beq.n	810a584 <TIM_Base_SetConfig+0x40>
 810a57c:	687b      	ldr	r3, [r7, #4]
 810a57e:	4a40      	ldr	r2, [pc, #256]	@ (810a680 <TIM_Base_SetConfig+0x13c>)
 810a580:	4293      	cmp	r3, r2
 810a582:	d108      	bne.n	810a596 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810a584:	68fb      	ldr	r3, [r7, #12]
 810a586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810a58a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810a58c:	683b      	ldr	r3, [r7, #0]
 810a58e:	685b      	ldr	r3, [r3, #4]
 810a590:	68fa      	ldr	r2, [r7, #12]
 810a592:	4313      	orrs	r3, r2
 810a594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810a596:	687b      	ldr	r3, [r7, #4]
 810a598:	4a35      	ldr	r2, [pc, #212]	@ (810a670 <TIM_Base_SetConfig+0x12c>)
 810a59a:	4293      	cmp	r3, r2
 810a59c:	d01f      	beq.n	810a5de <TIM_Base_SetConfig+0x9a>
 810a59e:	687b      	ldr	r3, [r7, #4]
 810a5a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a5a4:	d01b      	beq.n	810a5de <TIM_Base_SetConfig+0x9a>
 810a5a6:	687b      	ldr	r3, [r7, #4]
 810a5a8:	4a32      	ldr	r2, [pc, #200]	@ (810a674 <TIM_Base_SetConfig+0x130>)
 810a5aa:	4293      	cmp	r3, r2
 810a5ac:	d017      	beq.n	810a5de <TIM_Base_SetConfig+0x9a>
 810a5ae:	687b      	ldr	r3, [r7, #4]
 810a5b0:	4a31      	ldr	r2, [pc, #196]	@ (810a678 <TIM_Base_SetConfig+0x134>)
 810a5b2:	4293      	cmp	r3, r2
 810a5b4:	d013      	beq.n	810a5de <TIM_Base_SetConfig+0x9a>
 810a5b6:	687b      	ldr	r3, [r7, #4]
 810a5b8:	4a30      	ldr	r2, [pc, #192]	@ (810a67c <TIM_Base_SetConfig+0x138>)
 810a5ba:	4293      	cmp	r3, r2
 810a5bc:	d00f      	beq.n	810a5de <TIM_Base_SetConfig+0x9a>
 810a5be:	687b      	ldr	r3, [r7, #4]
 810a5c0:	4a2f      	ldr	r2, [pc, #188]	@ (810a680 <TIM_Base_SetConfig+0x13c>)
 810a5c2:	4293      	cmp	r3, r2
 810a5c4:	d00b      	beq.n	810a5de <TIM_Base_SetConfig+0x9a>
 810a5c6:	687b      	ldr	r3, [r7, #4]
 810a5c8:	4a2e      	ldr	r2, [pc, #184]	@ (810a684 <TIM_Base_SetConfig+0x140>)
 810a5ca:	4293      	cmp	r3, r2
 810a5cc:	d007      	beq.n	810a5de <TIM_Base_SetConfig+0x9a>
 810a5ce:	687b      	ldr	r3, [r7, #4]
 810a5d0:	4a2d      	ldr	r2, [pc, #180]	@ (810a688 <TIM_Base_SetConfig+0x144>)
 810a5d2:	4293      	cmp	r3, r2
 810a5d4:	d003      	beq.n	810a5de <TIM_Base_SetConfig+0x9a>
 810a5d6:	687b      	ldr	r3, [r7, #4]
 810a5d8:	4a2c      	ldr	r2, [pc, #176]	@ (810a68c <TIM_Base_SetConfig+0x148>)
 810a5da:	4293      	cmp	r3, r2
 810a5dc:	d108      	bne.n	810a5f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810a5de:	68fb      	ldr	r3, [r7, #12]
 810a5e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810a5e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810a5e6:	683b      	ldr	r3, [r7, #0]
 810a5e8:	68db      	ldr	r3, [r3, #12]
 810a5ea:	68fa      	ldr	r2, [r7, #12]
 810a5ec:	4313      	orrs	r3, r2
 810a5ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810a5f0:	68fb      	ldr	r3, [r7, #12]
 810a5f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810a5f6:	683b      	ldr	r3, [r7, #0]
 810a5f8:	695b      	ldr	r3, [r3, #20]
 810a5fa:	4313      	orrs	r3, r2
 810a5fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810a5fe:	687b      	ldr	r3, [r7, #4]
 810a600:	68fa      	ldr	r2, [r7, #12]
 810a602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810a604:	683b      	ldr	r3, [r7, #0]
 810a606:	689a      	ldr	r2, [r3, #8]
 810a608:	687b      	ldr	r3, [r7, #4]
 810a60a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810a60c:	683b      	ldr	r3, [r7, #0]
 810a60e:	681a      	ldr	r2, [r3, #0]
 810a610:	687b      	ldr	r3, [r7, #4]
 810a612:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810a614:	687b      	ldr	r3, [r7, #4]
 810a616:	4a16      	ldr	r2, [pc, #88]	@ (810a670 <TIM_Base_SetConfig+0x12c>)
 810a618:	4293      	cmp	r3, r2
 810a61a:	d00f      	beq.n	810a63c <TIM_Base_SetConfig+0xf8>
 810a61c:	687b      	ldr	r3, [r7, #4]
 810a61e:	4a18      	ldr	r2, [pc, #96]	@ (810a680 <TIM_Base_SetConfig+0x13c>)
 810a620:	4293      	cmp	r3, r2
 810a622:	d00b      	beq.n	810a63c <TIM_Base_SetConfig+0xf8>
 810a624:	687b      	ldr	r3, [r7, #4]
 810a626:	4a17      	ldr	r2, [pc, #92]	@ (810a684 <TIM_Base_SetConfig+0x140>)
 810a628:	4293      	cmp	r3, r2
 810a62a:	d007      	beq.n	810a63c <TIM_Base_SetConfig+0xf8>
 810a62c:	687b      	ldr	r3, [r7, #4]
 810a62e:	4a16      	ldr	r2, [pc, #88]	@ (810a688 <TIM_Base_SetConfig+0x144>)
 810a630:	4293      	cmp	r3, r2
 810a632:	d003      	beq.n	810a63c <TIM_Base_SetConfig+0xf8>
 810a634:	687b      	ldr	r3, [r7, #4]
 810a636:	4a15      	ldr	r2, [pc, #84]	@ (810a68c <TIM_Base_SetConfig+0x148>)
 810a638:	4293      	cmp	r3, r2
 810a63a:	d103      	bne.n	810a644 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810a63c:	683b      	ldr	r3, [r7, #0]
 810a63e:	691a      	ldr	r2, [r3, #16]
 810a640:	687b      	ldr	r3, [r7, #4]
 810a642:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810a644:	687b      	ldr	r3, [r7, #4]
 810a646:	2201      	movs	r2, #1
 810a648:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 810a64a:	687b      	ldr	r3, [r7, #4]
 810a64c:	691b      	ldr	r3, [r3, #16]
 810a64e:	f003 0301 	and.w	r3, r3, #1
 810a652:	2b01      	cmp	r3, #1
 810a654:	d105      	bne.n	810a662 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 810a656:	687b      	ldr	r3, [r7, #4]
 810a658:	691b      	ldr	r3, [r3, #16]
 810a65a:	f023 0201 	bic.w	r2, r3, #1
 810a65e:	687b      	ldr	r3, [r7, #4]
 810a660:	611a      	str	r2, [r3, #16]
  }
}
 810a662:	bf00      	nop
 810a664:	3714      	adds	r7, #20
 810a666:	46bd      	mov	sp, r7
 810a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a66c:	4770      	bx	lr
 810a66e:	bf00      	nop
 810a670:	40010000 	.word	0x40010000
 810a674:	40000400 	.word	0x40000400
 810a678:	40000800 	.word	0x40000800
 810a67c:	40000c00 	.word	0x40000c00
 810a680:	40010400 	.word	0x40010400
 810a684:	40014000 	.word	0x40014000
 810a688:	40014400 	.word	0x40014400
 810a68c:	40014800 	.word	0x40014800

0810a690 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810a690:	b480      	push	{r7}
 810a692:	b087      	sub	sp, #28
 810a694:	af00      	add	r7, sp, #0
 810a696:	6078      	str	r0, [r7, #4]
 810a698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a69a:	687b      	ldr	r3, [r7, #4]
 810a69c:	6a1b      	ldr	r3, [r3, #32]
 810a69e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810a6a0:	687b      	ldr	r3, [r7, #4]
 810a6a2:	6a1b      	ldr	r3, [r3, #32]
 810a6a4:	f023 0201 	bic.w	r2, r3, #1
 810a6a8:	687b      	ldr	r3, [r7, #4]
 810a6aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a6ac:	687b      	ldr	r3, [r7, #4]
 810a6ae:	685b      	ldr	r3, [r3, #4]
 810a6b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810a6b2:	687b      	ldr	r3, [r7, #4]
 810a6b4:	699b      	ldr	r3, [r3, #24]
 810a6b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810a6b8:	68fb      	ldr	r3, [r7, #12]
 810a6ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810a6be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810a6c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810a6c4:	68fb      	ldr	r3, [r7, #12]
 810a6c6:	f023 0303 	bic.w	r3, r3, #3
 810a6ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810a6cc:	683b      	ldr	r3, [r7, #0]
 810a6ce:	681b      	ldr	r3, [r3, #0]
 810a6d0:	68fa      	ldr	r2, [r7, #12]
 810a6d2:	4313      	orrs	r3, r2
 810a6d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810a6d6:	697b      	ldr	r3, [r7, #20]
 810a6d8:	f023 0302 	bic.w	r3, r3, #2
 810a6dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810a6de:	683b      	ldr	r3, [r7, #0]
 810a6e0:	689b      	ldr	r3, [r3, #8]
 810a6e2:	697a      	ldr	r2, [r7, #20]
 810a6e4:	4313      	orrs	r3, r2
 810a6e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810a6e8:	687b      	ldr	r3, [r7, #4]
 810a6ea:	4a2c      	ldr	r2, [pc, #176]	@ (810a79c <TIM_OC1_SetConfig+0x10c>)
 810a6ec:	4293      	cmp	r3, r2
 810a6ee:	d00f      	beq.n	810a710 <TIM_OC1_SetConfig+0x80>
 810a6f0:	687b      	ldr	r3, [r7, #4]
 810a6f2:	4a2b      	ldr	r2, [pc, #172]	@ (810a7a0 <TIM_OC1_SetConfig+0x110>)
 810a6f4:	4293      	cmp	r3, r2
 810a6f6:	d00b      	beq.n	810a710 <TIM_OC1_SetConfig+0x80>
 810a6f8:	687b      	ldr	r3, [r7, #4]
 810a6fa:	4a2a      	ldr	r2, [pc, #168]	@ (810a7a4 <TIM_OC1_SetConfig+0x114>)
 810a6fc:	4293      	cmp	r3, r2
 810a6fe:	d007      	beq.n	810a710 <TIM_OC1_SetConfig+0x80>
 810a700:	687b      	ldr	r3, [r7, #4]
 810a702:	4a29      	ldr	r2, [pc, #164]	@ (810a7a8 <TIM_OC1_SetConfig+0x118>)
 810a704:	4293      	cmp	r3, r2
 810a706:	d003      	beq.n	810a710 <TIM_OC1_SetConfig+0x80>
 810a708:	687b      	ldr	r3, [r7, #4]
 810a70a:	4a28      	ldr	r2, [pc, #160]	@ (810a7ac <TIM_OC1_SetConfig+0x11c>)
 810a70c:	4293      	cmp	r3, r2
 810a70e:	d10c      	bne.n	810a72a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810a710:	697b      	ldr	r3, [r7, #20]
 810a712:	f023 0308 	bic.w	r3, r3, #8
 810a716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810a718:	683b      	ldr	r3, [r7, #0]
 810a71a:	68db      	ldr	r3, [r3, #12]
 810a71c:	697a      	ldr	r2, [r7, #20]
 810a71e:	4313      	orrs	r3, r2
 810a720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810a722:	697b      	ldr	r3, [r7, #20]
 810a724:	f023 0304 	bic.w	r3, r3, #4
 810a728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a72a:	687b      	ldr	r3, [r7, #4]
 810a72c:	4a1b      	ldr	r2, [pc, #108]	@ (810a79c <TIM_OC1_SetConfig+0x10c>)
 810a72e:	4293      	cmp	r3, r2
 810a730:	d00f      	beq.n	810a752 <TIM_OC1_SetConfig+0xc2>
 810a732:	687b      	ldr	r3, [r7, #4]
 810a734:	4a1a      	ldr	r2, [pc, #104]	@ (810a7a0 <TIM_OC1_SetConfig+0x110>)
 810a736:	4293      	cmp	r3, r2
 810a738:	d00b      	beq.n	810a752 <TIM_OC1_SetConfig+0xc2>
 810a73a:	687b      	ldr	r3, [r7, #4]
 810a73c:	4a19      	ldr	r2, [pc, #100]	@ (810a7a4 <TIM_OC1_SetConfig+0x114>)
 810a73e:	4293      	cmp	r3, r2
 810a740:	d007      	beq.n	810a752 <TIM_OC1_SetConfig+0xc2>
 810a742:	687b      	ldr	r3, [r7, #4]
 810a744:	4a18      	ldr	r2, [pc, #96]	@ (810a7a8 <TIM_OC1_SetConfig+0x118>)
 810a746:	4293      	cmp	r3, r2
 810a748:	d003      	beq.n	810a752 <TIM_OC1_SetConfig+0xc2>
 810a74a:	687b      	ldr	r3, [r7, #4]
 810a74c:	4a17      	ldr	r2, [pc, #92]	@ (810a7ac <TIM_OC1_SetConfig+0x11c>)
 810a74e:	4293      	cmp	r3, r2
 810a750:	d111      	bne.n	810a776 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810a752:	693b      	ldr	r3, [r7, #16]
 810a754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810a758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810a75a:	693b      	ldr	r3, [r7, #16]
 810a75c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810a760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810a762:	683b      	ldr	r3, [r7, #0]
 810a764:	695b      	ldr	r3, [r3, #20]
 810a766:	693a      	ldr	r2, [r7, #16]
 810a768:	4313      	orrs	r3, r2
 810a76a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810a76c:	683b      	ldr	r3, [r7, #0]
 810a76e:	699b      	ldr	r3, [r3, #24]
 810a770:	693a      	ldr	r2, [r7, #16]
 810a772:	4313      	orrs	r3, r2
 810a774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a776:	687b      	ldr	r3, [r7, #4]
 810a778:	693a      	ldr	r2, [r7, #16]
 810a77a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810a77c:	687b      	ldr	r3, [r7, #4]
 810a77e:	68fa      	ldr	r2, [r7, #12]
 810a780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810a782:	683b      	ldr	r3, [r7, #0]
 810a784:	685a      	ldr	r2, [r3, #4]
 810a786:	687b      	ldr	r3, [r7, #4]
 810a788:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a78a:	687b      	ldr	r3, [r7, #4]
 810a78c:	697a      	ldr	r2, [r7, #20]
 810a78e:	621a      	str	r2, [r3, #32]
}
 810a790:	bf00      	nop
 810a792:	371c      	adds	r7, #28
 810a794:	46bd      	mov	sp, r7
 810a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a79a:	4770      	bx	lr
 810a79c:	40010000 	.word	0x40010000
 810a7a0:	40010400 	.word	0x40010400
 810a7a4:	40014000 	.word	0x40014000
 810a7a8:	40014400 	.word	0x40014400
 810a7ac:	40014800 	.word	0x40014800

0810a7b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810a7b0:	b480      	push	{r7}
 810a7b2:	b087      	sub	sp, #28
 810a7b4:	af00      	add	r7, sp, #0
 810a7b6:	6078      	str	r0, [r7, #4]
 810a7b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a7ba:	687b      	ldr	r3, [r7, #4]
 810a7bc:	6a1b      	ldr	r3, [r3, #32]
 810a7be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810a7c0:	687b      	ldr	r3, [r7, #4]
 810a7c2:	6a1b      	ldr	r3, [r3, #32]
 810a7c4:	f023 0210 	bic.w	r2, r3, #16
 810a7c8:	687b      	ldr	r3, [r7, #4]
 810a7ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a7cc:	687b      	ldr	r3, [r7, #4]
 810a7ce:	685b      	ldr	r3, [r3, #4]
 810a7d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810a7d2:	687b      	ldr	r3, [r7, #4]
 810a7d4:	699b      	ldr	r3, [r3, #24]
 810a7d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810a7d8:	68fb      	ldr	r3, [r7, #12]
 810a7da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810a7de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810a7e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810a7e4:	68fb      	ldr	r3, [r7, #12]
 810a7e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810a7ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810a7ec:	683b      	ldr	r3, [r7, #0]
 810a7ee:	681b      	ldr	r3, [r3, #0]
 810a7f0:	021b      	lsls	r3, r3, #8
 810a7f2:	68fa      	ldr	r2, [r7, #12]
 810a7f4:	4313      	orrs	r3, r2
 810a7f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810a7f8:	697b      	ldr	r3, [r7, #20]
 810a7fa:	f023 0320 	bic.w	r3, r3, #32
 810a7fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810a800:	683b      	ldr	r3, [r7, #0]
 810a802:	689b      	ldr	r3, [r3, #8]
 810a804:	011b      	lsls	r3, r3, #4
 810a806:	697a      	ldr	r2, [r7, #20]
 810a808:	4313      	orrs	r3, r2
 810a80a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810a80c:	687b      	ldr	r3, [r7, #4]
 810a80e:	4a28      	ldr	r2, [pc, #160]	@ (810a8b0 <TIM_OC2_SetConfig+0x100>)
 810a810:	4293      	cmp	r3, r2
 810a812:	d003      	beq.n	810a81c <TIM_OC2_SetConfig+0x6c>
 810a814:	687b      	ldr	r3, [r7, #4]
 810a816:	4a27      	ldr	r2, [pc, #156]	@ (810a8b4 <TIM_OC2_SetConfig+0x104>)
 810a818:	4293      	cmp	r3, r2
 810a81a:	d10d      	bne.n	810a838 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810a81c:	697b      	ldr	r3, [r7, #20]
 810a81e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810a822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810a824:	683b      	ldr	r3, [r7, #0]
 810a826:	68db      	ldr	r3, [r3, #12]
 810a828:	011b      	lsls	r3, r3, #4
 810a82a:	697a      	ldr	r2, [r7, #20]
 810a82c:	4313      	orrs	r3, r2
 810a82e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810a830:	697b      	ldr	r3, [r7, #20]
 810a832:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810a836:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a838:	687b      	ldr	r3, [r7, #4]
 810a83a:	4a1d      	ldr	r2, [pc, #116]	@ (810a8b0 <TIM_OC2_SetConfig+0x100>)
 810a83c:	4293      	cmp	r3, r2
 810a83e:	d00f      	beq.n	810a860 <TIM_OC2_SetConfig+0xb0>
 810a840:	687b      	ldr	r3, [r7, #4]
 810a842:	4a1c      	ldr	r2, [pc, #112]	@ (810a8b4 <TIM_OC2_SetConfig+0x104>)
 810a844:	4293      	cmp	r3, r2
 810a846:	d00b      	beq.n	810a860 <TIM_OC2_SetConfig+0xb0>
 810a848:	687b      	ldr	r3, [r7, #4]
 810a84a:	4a1b      	ldr	r2, [pc, #108]	@ (810a8b8 <TIM_OC2_SetConfig+0x108>)
 810a84c:	4293      	cmp	r3, r2
 810a84e:	d007      	beq.n	810a860 <TIM_OC2_SetConfig+0xb0>
 810a850:	687b      	ldr	r3, [r7, #4]
 810a852:	4a1a      	ldr	r2, [pc, #104]	@ (810a8bc <TIM_OC2_SetConfig+0x10c>)
 810a854:	4293      	cmp	r3, r2
 810a856:	d003      	beq.n	810a860 <TIM_OC2_SetConfig+0xb0>
 810a858:	687b      	ldr	r3, [r7, #4]
 810a85a:	4a19      	ldr	r2, [pc, #100]	@ (810a8c0 <TIM_OC2_SetConfig+0x110>)
 810a85c:	4293      	cmp	r3, r2
 810a85e:	d113      	bne.n	810a888 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810a860:	693b      	ldr	r3, [r7, #16]
 810a862:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810a866:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810a868:	693b      	ldr	r3, [r7, #16]
 810a86a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810a86e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810a870:	683b      	ldr	r3, [r7, #0]
 810a872:	695b      	ldr	r3, [r3, #20]
 810a874:	009b      	lsls	r3, r3, #2
 810a876:	693a      	ldr	r2, [r7, #16]
 810a878:	4313      	orrs	r3, r2
 810a87a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810a87c:	683b      	ldr	r3, [r7, #0]
 810a87e:	699b      	ldr	r3, [r3, #24]
 810a880:	009b      	lsls	r3, r3, #2
 810a882:	693a      	ldr	r2, [r7, #16]
 810a884:	4313      	orrs	r3, r2
 810a886:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a888:	687b      	ldr	r3, [r7, #4]
 810a88a:	693a      	ldr	r2, [r7, #16]
 810a88c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810a88e:	687b      	ldr	r3, [r7, #4]
 810a890:	68fa      	ldr	r2, [r7, #12]
 810a892:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810a894:	683b      	ldr	r3, [r7, #0]
 810a896:	685a      	ldr	r2, [r3, #4]
 810a898:	687b      	ldr	r3, [r7, #4]
 810a89a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a89c:	687b      	ldr	r3, [r7, #4]
 810a89e:	697a      	ldr	r2, [r7, #20]
 810a8a0:	621a      	str	r2, [r3, #32]
}
 810a8a2:	bf00      	nop
 810a8a4:	371c      	adds	r7, #28
 810a8a6:	46bd      	mov	sp, r7
 810a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a8ac:	4770      	bx	lr
 810a8ae:	bf00      	nop
 810a8b0:	40010000 	.word	0x40010000
 810a8b4:	40010400 	.word	0x40010400
 810a8b8:	40014000 	.word	0x40014000
 810a8bc:	40014400 	.word	0x40014400
 810a8c0:	40014800 	.word	0x40014800

0810a8c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810a8c4:	b480      	push	{r7}
 810a8c6:	b087      	sub	sp, #28
 810a8c8:	af00      	add	r7, sp, #0
 810a8ca:	6078      	str	r0, [r7, #4]
 810a8cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a8ce:	687b      	ldr	r3, [r7, #4]
 810a8d0:	6a1b      	ldr	r3, [r3, #32]
 810a8d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810a8d4:	687b      	ldr	r3, [r7, #4]
 810a8d6:	6a1b      	ldr	r3, [r3, #32]
 810a8d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810a8dc:	687b      	ldr	r3, [r7, #4]
 810a8de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a8e0:	687b      	ldr	r3, [r7, #4]
 810a8e2:	685b      	ldr	r3, [r3, #4]
 810a8e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810a8e6:	687b      	ldr	r3, [r7, #4]
 810a8e8:	69db      	ldr	r3, [r3, #28]
 810a8ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810a8ec:	68fb      	ldr	r3, [r7, #12]
 810a8ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810a8f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810a8f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810a8f8:	68fb      	ldr	r3, [r7, #12]
 810a8fa:	f023 0303 	bic.w	r3, r3, #3
 810a8fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810a900:	683b      	ldr	r3, [r7, #0]
 810a902:	681b      	ldr	r3, [r3, #0]
 810a904:	68fa      	ldr	r2, [r7, #12]
 810a906:	4313      	orrs	r3, r2
 810a908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810a90a:	697b      	ldr	r3, [r7, #20]
 810a90c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810a910:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810a912:	683b      	ldr	r3, [r7, #0]
 810a914:	689b      	ldr	r3, [r3, #8]
 810a916:	021b      	lsls	r3, r3, #8
 810a918:	697a      	ldr	r2, [r7, #20]
 810a91a:	4313      	orrs	r3, r2
 810a91c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810a91e:	687b      	ldr	r3, [r7, #4]
 810a920:	4a27      	ldr	r2, [pc, #156]	@ (810a9c0 <TIM_OC3_SetConfig+0xfc>)
 810a922:	4293      	cmp	r3, r2
 810a924:	d003      	beq.n	810a92e <TIM_OC3_SetConfig+0x6a>
 810a926:	687b      	ldr	r3, [r7, #4]
 810a928:	4a26      	ldr	r2, [pc, #152]	@ (810a9c4 <TIM_OC3_SetConfig+0x100>)
 810a92a:	4293      	cmp	r3, r2
 810a92c:	d10d      	bne.n	810a94a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810a92e:	697b      	ldr	r3, [r7, #20]
 810a930:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810a934:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810a936:	683b      	ldr	r3, [r7, #0]
 810a938:	68db      	ldr	r3, [r3, #12]
 810a93a:	021b      	lsls	r3, r3, #8
 810a93c:	697a      	ldr	r2, [r7, #20]
 810a93e:	4313      	orrs	r3, r2
 810a940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810a942:	697b      	ldr	r3, [r7, #20]
 810a944:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810a948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a94a:	687b      	ldr	r3, [r7, #4]
 810a94c:	4a1c      	ldr	r2, [pc, #112]	@ (810a9c0 <TIM_OC3_SetConfig+0xfc>)
 810a94e:	4293      	cmp	r3, r2
 810a950:	d00f      	beq.n	810a972 <TIM_OC3_SetConfig+0xae>
 810a952:	687b      	ldr	r3, [r7, #4]
 810a954:	4a1b      	ldr	r2, [pc, #108]	@ (810a9c4 <TIM_OC3_SetConfig+0x100>)
 810a956:	4293      	cmp	r3, r2
 810a958:	d00b      	beq.n	810a972 <TIM_OC3_SetConfig+0xae>
 810a95a:	687b      	ldr	r3, [r7, #4]
 810a95c:	4a1a      	ldr	r2, [pc, #104]	@ (810a9c8 <TIM_OC3_SetConfig+0x104>)
 810a95e:	4293      	cmp	r3, r2
 810a960:	d007      	beq.n	810a972 <TIM_OC3_SetConfig+0xae>
 810a962:	687b      	ldr	r3, [r7, #4]
 810a964:	4a19      	ldr	r2, [pc, #100]	@ (810a9cc <TIM_OC3_SetConfig+0x108>)
 810a966:	4293      	cmp	r3, r2
 810a968:	d003      	beq.n	810a972 <TIM_OC3_SetConfig+0xae>
 810a96a:	687b      	ldr	r3, [r7, #4]
 810a96c:	4a18      	ldr	r2, [pc, #96]	@ (810a9d0 <TIM_OC3_SetConfig+0x10c>)
 810a96e:	4293      	cmp	r3, r2
 810a970:	d113      	bne.n	810a99a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810a972:	693b      	ldr	r3, [r7, #16]
 810a974:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810a978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810a97a:	693b      	ldr	r3, [r7, #16]
 810a97c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810a980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810a982:	683b      	ldr	r3, [r7, #0]
 810a984:	695b      	ldr	r3, [r3, #20]
 810a986:	011b      	lsls	r3, r3, #4
 810a988:	693a      	ldr	r2, [r7, #16]
 810a98a:	4313      	orrs	r3, r2
 810a98c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810a98e:	683b      	ldr	r3, [r7, #0]
 810a990:	699b      	ldr	r3, [r3, #24]
 810a992:	011b      	lsls	r3, r3, #4
 810a994:	693a      	ldr	r2, [r7, #16]
 810a996:	4313      	orrs	r3, r2
 810a998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a99a:	687b      	ldr	r3, [r7, #4]
 810a99c:	693a      	ldr	r2, [r7, #16]
 810a99e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810a9a0:	687b      	ldr	r3, [r7, #4]
 810a9a2:	68fa      	ldr	r2, [r7, #12]
 810a9a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810a9a6:	683b      	ldr	r3, [r7, #0]
 810a9a8:	685a      	ldr	r2, [r3, #4]
 810a9aa:	687b      	ldr	r3, [r7, #4]
 810a9ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a9ae:	687b      	ldr	r3, [r7, #4]
 810a9b0:	697a      	ldr	r2, [r7, #20]
 810a9b2:	621a      	str	r2, [r3, #32]
}
 810a9b4:	bf00      	nop
 810a9b6:	371c      	adds	r7, #28
 810a9b8:	46bd      	mov	sp, r7
 810a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a9be:	4770      	bx	lr
 810a9c0:	40010000 	.word	0x40010000
 810a9c4:	40010400 	.word	0x40010400
 810a9c8:	40014000 	.word	0x40014000
 810a9cc:	40014400 	.word	0x40014400
 810a9d0:	40014800 	.word	0x40014800

0810a9d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810a9d4:	b480      	push	{r7}
 810a9d6:	b087      	sub	sp, #28
 810a9d8:	af00      	add	r7, sp, #0
 810a9da:	6078      	str	r0, [r7, #4]
 810a9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a9de:	687b      	ldr	r3, [r7, #4]
 810a9e0:	6a1b      	ldr	r3, [r3, #32]
 810a9e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810a9e4:	687b      	ldr	r3, [r7, #4]
 810a9e6:	6a1b      	ldr	r3, [r3, #32]
 810a9e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810a9ec:	687b      	ldr	r3, [r7, #4]
 810a9ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a9f0:	687b      	ldr	r3, [r7, #4]
 810a9f2:	685b      	ldr	r3, [r3, #4]
 810a9f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810a9f6:	687b      	ldr	r3, [r7, #4]
 810a9f8:	69db      	ldr	r3, [r3, #28]
 810a9fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810a9fc:	68fb      	ldr	r3, [r7, #12]
 810a9fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810aa02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810aa06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810aa08:	68fb      	ldr	r3, [r7, #12]
 810aa0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810aa0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810aa10:	683b      	ldr	r3, [r7, #0]
 810aa12:	681b      	ldr	r3, [r3, #0]
 810aa14:	021b      	lsls	r3, r3, #8
 810aa16:	68fa      	ldr	r2, [r7, #12]
 810aa18:	4313      	orrs	r3, r2
 810aa1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810aa1c:	693b      	ldr	r3, [r7, #16]
 810aa1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810aa22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810aa24:	683b      	ldr	r3, [r7, #0]
 810aa26:	689b      	ldr	r3, [r3, #8]
 810aa28:	031b      	lsls	r3, r3, #12
 810aa2a:	693a      	ldr	r2, [r7, #16]
 810aa2c:	4313      	orrs	r3, r2
 810aa2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810aa30:	687b      	ldr	r3, [r7, #4]
 810aa32:	4a18      	ldr	r2, [pc, #96]	@ (810aa94 <TIM_OC4_SetConfig+0xc0>)
 810aa34:	4293      	cmp	r3, r2
 810aa36:	d00f      	beq.n	810aa58 <TIM_OC4_SetConfig+0x84>
 810aa38:	687b      	ldr	r3, [r7, #4]
 810aa3a:	4a17      	ldr	r2, [pc, #92]	@ (810aa98 <TIM_OC4_SetConfig+0xc4>)
 810aa3c:	4293      	cmp	r3, r2
 810aa3e:	d00b      	beq.n	810aa58 <TIM_OC4_SetConfig+0x84>
 810aa40:	687b      	ldr	r3, [r7, #4]
 810aa42:	4a16      	ldr	r2, [pc, #88]	@ (810aa9c <TIM_OC4_SetConfig+0xc8>)
 810aa44:	4293      	cmp	r3, r2
 810aa46:	d007      	beq.n	810aa58 <TIM_OC4_SetConfig+0x84>
 810aa48:	687b      	ldr	r3, [r7, #4]
 810aa4a:	4a15      	ldr	r2, [pc, #84]	@ (810aaa0 <TIM_OC4_SetConfig+0xcc>)
 810aa4c:	4293      	cmp	r3, r2
 810aa4e:	d003      	beq.n	810aa58 <TIM_OC4_SetConfig+0x84>
 810aa50:	687b      	ldr	r3, [r7, #4]
 810aa52:	4a14      	ldr	r2, [pc, #80]	@ (810aaa4 <TIM_OC4_SetConfig+0xd0>)
 810aa54:	4293      	cmp	r3, r2
 810aa56:	d109      	bne.n	810aa6c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810aa58:	697b      	ldr	r3, [r7, #20]
 810aa5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 810aa5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810aa60:	683b      	ldr	r3, [r7, #0]
 810aa62:	695b      	ldr	r3, [r3, #20]
 810aa64:	019b      	lsls	r3, r3, #6
 810aa66:	697a      	ldr	r2, [r7, #20]
 810aa68:	4313      	orrs	r3, r2
 810aa6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810aa6c:	687b      	ldr	r3, [r7, #4]
 810aa6e:	697a      	ldr	r2, [r7, #20]
 810aa70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810aa72:	687b      	ldr	r3, [r7, #4]
 810aa74:	68fa      	ldr	r2, [r7, #12]
 810aa76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810aa78:	683b      	ldr	r3, [r7, #0]
 810aa7a:	685a      	ldr	r2, [r3, #4]
 810aa7c:	687b      	ldr	r3, [r7, #4]
 810aa7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810aa80:	687b      	ldr	r3, [r7, #4]
 810aa82:	693a      	ldr	r2, [r7, #16]
 810aa84:	621a      	str	r2, [r3, #32]
}
 810aa86:	bf00      	nop
 810aa88:	371c      	adds	r7, #28
 810aa8a:	46bd      	mov	sp, r7
 810aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa90:	4770      	bx	lr
 810aa92:	bf00      	nop
 810aa94:	40010000 	.word	0x40010000
 810aa98:	40010400 	.word	0x40010400
 810aa9c:	40014000 	.word	0x40014000
 810aaa0:	40014400 	.word	0x40014400
 810aaa4:	40014800 	.word	0x40014800

0810aaa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810aaa8:	b480      	push	{r7}
 810aaaa:	b087      	sub	sp, #28
 810aaac:	af00      	add	r7, sp, #0
 810aaae:	6078      	str	r0, [r7, #4]
 810aab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810aab2:	687b      	ldr	r3, [r7, #4]
 810aab4:	6a1b      	ldr	r3, [r3, #32]
 810aab6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810aab8:	687b      	ldr	r3, [r7, #4]
 810aaba:	6a1b      	ldr	r3, [r3, #32]
 810aabc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810aac0:	687b      	ldr	r3, [r7, #4]
 810aac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810aac4:	687b      	ldr	r3, [r7, #4]
 810aac6:	685b      	ldr	r3, [r3, #4]
 810aac8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810aaca:	687b      	ldr	r3, [r7, #4]
 810aacc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810aace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810aad0:	68fb      	ldr	r3, [r7, #12]
 810aad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810aad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810aada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810aadc:	683b      	ldr	r3, [r7, #0]
 810aade:	681b      	ldr	r3, [r3, #0]
 810aae0:	68fa      	ldr	r2, [r7, #12]
 810aae2:	4313      	orrs	r3, r2
 810aae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810aae6:	693b      	ldr	r3, [r7, #16]
 810aae8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 810aaec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810aaee:	683b      	ldr	r3, [r7, #0]
 810aaf0:	689b      	ldr	r3, [r3, #8]
 810aaf2:	041b      	lsls	r3, r3, #16
 810aaf4:	693a      	ldr	r2, [r7, #16]
 810aaf6:	4313      	orrs	r3, r2
 810aaf8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810aafa:	687b      	ldr	r3, [r7, #4]
 810aafc:	4a17      	ldr	r2, [pc, #92]	@ (810ab5c <TIM_OC5_SetConfig+0xb4>)
 810aafe:	4293      	cmp	r3, r2
 810ab00:	d00f      	beq.n	810ab22 <TIM_OC5_SetConfig+0x7a>
 810ab02:	687b      	ldr	r3, [r7, #4]
 810ab04:	4a16      	ldr	r2, [pc, #88]	@ (810ab60 <TIM_OC5_SetConfig+0xb8>)
 810ab06:	4293      	cmp	r3, r2
 810ab08:	d00b      	beq.n	810ab22 <TIM_OC5_SetConfig+0x7a>
 810ab0a:	687b      	ldr	r3, [r7, #4]
 810ab0c:	4a15      	ldr	r2, [pc, #84]	@ (810ab64 <TIM_OC5_SetConfig+0xbc>)
 810ab0e:	4293      	cmp	r3, r2
 810ab10:	d007      	beq.n	810ab22 <TIM_OC5_SetConfig+0x7a>
 810ab12:	687b      	ldr	r3, [r7, #4]
 810ab14:	4a14      	ldr	r2, [pc, #80]	@ (810ab68 <TIM_OC5_SetConfig+0xc0>)
 810ab16:	4293      	cmp	r3, r2
 810ab18:	d003      	beq.n	810ab22 <TIM_OC5_SetConfig+0x7a>
 810ab1a:	687b      	ldr	r3, [r7, #4]
 810ab1c:	4a13      	ldr	r2, [pc, #76]	@ (810ab6c <TIM_OC5_SetConfig+0xc4>)
 810ab1e:	4293      	cmp	r3, r2
 810ab20:	d109      	bne.n	810ab36 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810ab22:	697b      	ldr	r3, [r7, #20]
 810ab24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810ab28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810ab2a:	683b      	ldr	r3, [r7, #0]
 810ab2c:	695b      	ldr	r3, [r3, #20]
 810ab2e:	021b      	lsls	r3, r3, #8
 810ab30:	697a      	ldr	r2, [r7, #20]
 810ab32:	4313      	orrs	r3, r2
 810ab34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810ab36:	687b      	ldr	r3, [r7, #4]
 810ab38:	697a      	ldr	r2, [r7, #20]
 810ab3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810ab3c:	687b      	ldr	r3, [r7, #4]
 810ab3e:	68fa      	ldr	r2, [r7, #12]
 810ab40:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810ab42:	683b      	ldr	r3, [r7, #0]
 810ab44:	685a      	ldr	r2, [r3, #4]
 810ab46:	687b      	ldr	r3, [r7, #4]
 810ab48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810ab4a:	687b      	ldr	r3, [r7, #4]
 810ab4c:	693a      	ldr	r2, [r7, #16]
 810ab4e:	621a      	str	r2, [r3, #32]
}
 810ab50:	bf00      	nop
 810ab52:	371c      	adds	r7, #28
 810ab54:	46bd      	mov	sp, r7
 810ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab5a:	4770      	bx	lr
 810ab5c:	40010000 	.word	0x40010000
 810ab60:	40010400 	.word	0x40010400
 810ab64:	40014000 	.word	0x40014000
 810ab68:	40014400 	.word	0x40014400
 810ab6c:	40014800 	.word	0x40014800

0810ab70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810ab70:	b480      	push	{r7}
 810ab72:	b087      	sub	sp, #28
 810ab74:	af00      	add	r7, sp, #0
 810ab76:	6078      	str	r0, [r7, #4]
 810ab78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810ab7a:	687b      	ldr	r3, [r7, #4]
 810ab7c:	6a1b      	ldr	r3, [r3, #32]
 810ab7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810ab80:	687b      	ldr	r3, [r7, #4]
 810ab82:	6a1b      	ldr	r3, [r3, #32]
 810ab84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 810ab88:	687b      	ldr	r3, [r7, #4]
 810ab8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810ab8c:	687b      	ldr	r3, [r7, #4]
 810ab8e:	685b      	ldr	r3, [r3, #4]
 810ab90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810ab92:	687b      	ldr	r3, [r7, #4]
 810ab94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ab96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810ab98:	68fb      	ldr	r3, [r7, #12]
 810ab9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810ab9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810aba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810aba4:	683b      	ldr	r3, [r7, #0]
 810aba6:	681b      	ldr	r3, [r3, #0]
 810aba8:	021b      	lsls	r3, r3, #8
 810abaa:	68fa      	ldr	r2, [r7, #12]
 810abac:	4313      	orrs	r3, r2
 810abae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810abb0:	693b      	ldr	r3, [r7, #16]
 810abb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810abb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810abb8:	683b      	ldr	r3, [r7, #0]
 810abba:	689b      	ldr	r3, [r3, #8]
 810abbc:	051b      	lsls	r3, r3, #20
 810abbe:	693a      	ldr	r2, [r7, #16]
 810abc0:	4313      	orrs	r3, r2
 810abc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810abc4:	687b      	ldr	r3, [r7, #4]
 810abc6:	4a18      	ldr	r2, [pc, #96]	@ (810ac28 <TIM_OC6_SetConfig+0xb8>)
 810abc8:	4293      	cmp	r3, r2
 810abca:	d00f      	beq.n	810abec <TIM_OC6_SetConfig+0x7c>
 810abcc:	687b      	ldr	r3, [r7, #4]
 810abce:	4a17      	ldr	r2, [pc, #92]	@ (810ac2c <TIM_OC6_SetConfig+0xbc>)
 810abd0:	4293      	cmp	r3, r2
 810abd2:	d00b      	beq.n	810abec <TIM_OC6_SetConfig+0x7c>
 810abd4:	687b      	ldr	r3, [r7, #4]
 810abd6:	4a16      	ldr	r2, [pc, #88]	@ (810ac30 <TIM_OC6_SetConfig+0xc0>)
 810abd8:	4293      	cmp	r3, r2
 810abda:	d007      	beq.n	810abec <TIM_OC6_SetConfig+0x7c>
 810abdc:	687b      	ldr	r3, [r7, #4]
 810abde:	4a15      	ldr	r2, [pc, #84]	@ (810ac34 <TIM_OC6_SetConfig+0xc4>)
 810abe0:	4293      	cmp	r3, r2
 810abe2:	d003      	beq.n	810abec <TIM_OC6_SetConfig+0x7c>
 810abe4:	687b      	ldr	r3, [r7, #4]
 810abe6:	4a14      	ldr	r2, [pc, #80]	@ (810ac38 <TIM_OC6_SetConfig+0xc8>)
 810abe8:	4293      	cmp	r3, r2
 810abea:	d109      	bne.n	810ac00 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810abec:	697b      	ldr	r3, [r7, #20]
 810abee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 810abf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810abf4:	683b      	ldr	r3, [r7, #0]
 810abf6:	695b      	ldr	r3, [r3, #20]
 810abf8:	029b      	lsls	r3, r3, #10
 810abfa:	697a      	ldr	r2, [r7, #20]
 810abfc:	4313      	orrs	r3, r2
 810abfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810ac00:	687b      	ldr	r3, [r7, #4]
 810ac02:	697a      	ldr	r2, [r7, #20]
 810ac04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810ac06:	687b      	ldr	r3, [r7, #4]
 810ac08:	68fa      	ldr	r2, [r7, #12]
 810ac0a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810ac0c:	683b      	ldr	r3, [r7, #0]
 810ac0e:	685a      	ldr	r2, [r3, #4]
 810ac10:	687b      	ldr	r3, [r7, #4]
 810ac12:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810ac14:	687b      	ldr	r3, [r7, #4]
 810ac16:	693a      	ldr	r2, [r7, #16]
 810ac18:	621a      	str	r2, [r3, #32]
}
 810ac1a:	bf00      	nop
 810ac1c:	371c      	adds	r7, #28
 810ac1e:	46bd      	mov	sp, r7
 810ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac24:	4770      	bx	lr
 810ac26:	bf00      	nop
 810ac28:	40010000 	.word	0x40010000
 810ac2c:	40010400 	.word	0x40010400
 810ac30:	40014000 	.word	0x40014000
 810ac34:	40014400 	.word	0x40014400
 810ac38:	40014800 	.word	0x40014800

0810ac3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810ac3c:	b480      	push	{r7}
 810ac3e:	b087      	sub	sp, #28
 810ac40:	af00      	add	r7, sp, #0
 810ac42:	60f8      	str	r0, [r7, #12]
 810ac44:	60b9      	str	r1, [r7, #8]
 810ac46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810ac48:	68fb      	ldr	r3, [r7, #12]
 810ac4a:	6a1b      	ldr	r3, [r3, #32]
 810ac4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810ac4e:	68fb      	ldr	r3, [r7, #12]
 810ac50:	6a1b      	ldr	r3, [r3, #32]
 810ac52:	f023 0201 	bic.w	r2, r3, #1
 810ac56:	68fb      	ldr	r3, [r7, #12]
 810ac58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810ac5a:	68fb      	ldr	r3, [r7, #12]
 810ac5c:	699b      	ldr	r3, [r3, #24]
 810ac5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810ac60:	693b      	ldr	r3, [r7, #16]
 810ac62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810ac66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 810ac68:	687b      	ldr	r3, [r7, #4]
 810ac6a:	011b      	lsls	r3, r3, #4
 810ac6c:	693a      	ldr	r2, [r7, #16]
 810ac6e:	4313      	orrs	r3, r2
 810ac70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810ac72:	697b      	ldr	r3, [r7, #20]
 810ac74:	f023 030a 	bic.w	r3, r3, #10
 810ac78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810ac7a:	697a      	ldr	r2, [r7, #20]
 810ac7c:	68bb      	ldr	r3, [r7, #8]
 810ac7e:	4313      	orrs	r3, r2
 810ac80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810ac82:	68fb      	ldr	r3, [r7, #12]
 810ac84:	693a      	ldr	r2, [r7, #16]
 810ac86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810ac88:	68fb      	ldr	r3, [r7, #12]
 810ac8a:	697a      	ldr	r2, [r7, #20]
 810ac8c:	621a      	str	r2, [r3, #32]
}
 810ac8e:	bf00      	nop
 810ac90:	371c      	adds	r7, #28
 810ac92:	46bd      	mov	sp, r7
 810ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac98:	4770      	bx	lr

0810ac9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810ac9a:	b480      	push	{r7}
 810ac9c:	b087      	sub	sp, #28
 810ac9e:	af00      	add	r7, sp, #0
 810aca0:	60f8      	str	r0, [r7, #12]
 810aca2:	60b9      	str	r1, [r7, #8]
 810aca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 810aca6:	68fb      	ldr	r3, [r7, #12]
 810aca8:	6a1b      	ldr	r3, [r3, #32]
 810acaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810acac:	68fb      	ldr	r3, [r7, #12]
 810acae:	6a1b      	ldr	r3, [r3, #32]
 810acb0:	f023 0210 	bic.w	r2, r3, #16
 810acb4:	68fb      	ldr	r3, [r7, #12]
 810acb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810acb8:	68fb      	ldr	r3, [r7, #12]
 810acba:	699b      	ldr	r3, [r3, #24]
 810acbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810acbe:	693b      	ldr	r3, [r7, #16]
 810acc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810acc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810acc6:	687b      	ldr	r3, [r7, #4]
 810acc8:	031b      	lsls	r3, r3, #12
 810acca:	693a      	ldr	r2, [r7, #16]
 810accc:	4313      	orrs	r3, r2
 810acce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810acd0:	697b      	ldr	r3, [r7, #20]
 810acd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 810acd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 810acd8:	68bb      	ldr	r3, [r7, #8]
 810acda:	011b      	lsls	r3, r3, #4
 810acdc:	697a      	ldr	r2, [r7, #20]
 810acde:	4313      	orrs	r3, r2
 810ace0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810ace2:	68fb      	ldr	r3, [r7, #12]
 810ace4:	693a      	ldr	r2, [r7, #16]
 810ace6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810ace8:	68fb      	ldr	r3, [r7, #12]
 810acea:	697a      	ldr	r2, [r7, #20]
 810acec:	621a      	str	r2, [r3, #32]
}
 810acee:	bf00      	nop
 810acf0:	371c      	adds	r7, #28
 810acf2:	46bd      	mov	sp, r7
 810acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810acf8:	4770      	bx	lr

0810acfa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810acfa:	b480      	push	{r7}
 810acfc:	b085      	sub	sp, #20
 810acfe:	af00      	add	r7, sp, #0
 810ad00:	6078      	str	r0, [r7, #4]
 810ad02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 810ad04:	687b      	ldr	r3, [r7, #4]
 810ad06:	689b      	ldr	r3, [r3, #8]
 810ad08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810ad0a:	68fb      	ldr	r3, [r7, #12]
 810ad0c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 810ad10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810ad14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810ad16:	683a      	ldr	r2, [r7, #0]
 810ad18:	68fb      	ldr	r3, [r7, #12]
 810ad1a:	4313      	orrs	r3, r2
 810ad1c:	f043 0307 	orr.w	r3, r3, #7
 810ad20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810ad22:	687b      	ldr	r3, [r7, #4]
 810ad24:	68fa      	ldr	r2, [r7, #12]
 810ad26:	609a      	str	r2, [r3, #8]
}
 810ad28:	bf00      	nop
 810ad2a:	3714      	adds	r7, #20
 810ad2c:	46bd      	mov	sp, r7
 810ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad32:	4770      	bx	lr

0810ad34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 810ad34:	b480      	push	{r7}
 810ad36:	b087      	sub	sp, #28
 810ad38:	af00      	add	r7, sp, #0
 810ad3a:	60f8      	str	r0, [r7, #12]
 810ad3c:	60b9      	str	r1, [r7, #8]
 810ad3e:	607a      	str	r2, [r7, #4]
 810ad40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810ad42:	68fb      	ldr	r3, [r7, #12]
 810ad44:	689b      	ldr	r3, [r3, #8]
 810ad46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810ad48:	697b      	ldr	r3, [r7, #20]
 810ad4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810ad4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810ad50:	683b      	ldr	r3, [r7, #0]
 810ad52:	021a      	lsls	r2, r3, #8
 810ad54:	687b      	ldr	r3, [r7, #4]
 810ad56:	431a      	orrs	r2, r3
 810ad58:	68bb      	ldr	r3, [r7, #8]
 810ad5a:	4313      	orrs	r3, r2
 810ad5c:	697a      	ldr	r2, [r7, #20]
 810ad5e:	4313      	orrs	r3, r2
 810ad60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810ad62:	68fb      	ldr	r3, [r7, #12]
 810ad64:	697a      	ldr	r2, [r7, #20]
 810ad66:	609a      	str	r2, [r3, #8]
}
 810ad68:	bf00      	nop
 810ad6a:	371c      	adds	r7, #28
 810ad6c:	46bd      	mov	sp, r7
 810ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad72:	4770      	bx	lr

0810ad74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 810ad74:	b480      	push	{r7}
 810ad76:	b087      	sub	sp, #28
 810ad78:	af00      	add	r7, sp, #0
 810ad7a:	60f8      	str	r0, [r7, #12]
 810ad7c:	60b9      	str	r1, [r7, #8]
 810ad7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 810ad80:	68bb      	ldr	r3, [r7, #8]
 810ad82:	f003 031f 	and.w	r3, r3, #31
 810ad86:	2201      	movs	r2, #1
 810ad88:	fa02 f303 	lsl.w	r3, r2, r3
 810ad8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 810ad8e:	68fb      	ldr	r3, [r7, #12]
 810ad90:	6a1a      	ldr	r2, [r3, #32]
 810ad92:	697b      	ldr	r3, [r7, #20]
 810ad94:	43db      	mvns	r3, r3
 810ad96:	401a      	ands	r2, r3
 810ad98:	68fb      	ldr	r3, [r7, #12]
 810ad9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 810ad9c:	68fb      	ldr	r3, [r7, #12]
 810ad9e:	6a1a      	ldr	r2, [r3, #32]
 810ada0:	68bb      	ldr	r3, [r7, #8]
 810ada2:	f003 031f 	and.w	r3, r3, #31
 810ada6:	6879      	ldr	r1, [r7, #4]
 810ada8:	fa01 f303 	lsl.w	r3, r1, r3
 810adac:	431a      	orrs	r2, r3
 810adae:	68fb      	ldr	r3, [r7, #12]
 810adb0:	621a      	str	r2, [r3, #32]
}
 810adb2:	bf00      	nop
 810adb4:	371c      	adds	r7, #28
 810adb6:	46bd      	mov	sp, r7
 810adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810adbc:	4770      	bx	lr
	...

0810adc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810adc0:	b480      	push	{r7}
 810adc2:	b085      	sub	sp, #20
 810adc4:	af00      	add	r7, sp, #0
 810adc6:	6078      	str	r0, [r7, #4]
 810adc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810adca:	687b      	ldr	r3, [r7, #4]
 810adcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810add0:	2b01      	cmp	r3, #1
 810add2:	d101      	bne.n	810add8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810add4:	2302      	movs	r3, #2
 810add6:	e06d      	b.n	810aeb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810add8:	687b      	ldr	r3, [r7, #4]
 810adda:	2201      	movs	r2, #1
 810addc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ade0:	687b      	ldr	r3, [r7, #4]
 810ade2:	2202      	movs	r2, #2
 810ade4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810ade8:	687b      	ldr	r3, [r7, #4]
 810adea:	681b      	ldr	r3, [r3, #0]
 810adec:	685b      	ldr	r3, [r3, #4]
 810adee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810adf0:	687b      	ldr	r3, [r7, #4]
 810adf2:	681b      	ldr	r3, [r3, #0]
 810adf4:	689b      	ldr	r3, [r3, #8]
 810adf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810adf8:	687b      	ldr	r3, [r7, #4]
 810adfa:	681b      	ldr	r3, [r3, #0]
 810adfc:	4a30      	ldr	r2, [pc, #192]	@ (810aec0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810adfe:	4293      	cmp	r3, r2
 810ae00:	d004      	beq.n	810ae0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810ae02:	687b      	ldr	r3, [r7, #4]
 810ae04:	681b      	ldr	r3, [r3, #0]
 810ae06:	4a2f      	ldr	r2, [pc, #188]	@ (810aec4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810ae08:	4293      	cmp	r3, r2
 810ae0a:	d108      	bne.n	810ae1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810ae0c:	68fb      	ldr	r3, [r7, #12]
 810ae0e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810ae12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810ae14:	683b      	ldr	r3, [r7, #0]
 810ae16:	685b      	ldr	r3, [r3, #4]
 810ae18:	68fa      	ldr	r2, [r7, #12]
 810ae1a:	4313      	orrs	r3, r2
 810ae1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810ae1e:	68fb      	ldr	r3, [r7, #12]
 810ae20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810ae24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810ae26:	683b      	ldr	r3, [r7, #0]
 810ae28:	681b      	ldr	r3, [r3, #0]
 810ae2a:	68fa      	ldr	r2, [r7, #12]
 810ae2c:	4313      	orrs	r3, r2
 810ae2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810ae30:	687b      	ldr	r3, [r7, #4]
 810ae32:	681b      	ldr	r3, [r3, #0]
 810ae34:	68fa      	ldr	r2, [r7, #12]
 810ae36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810ae38:	687b      	ldr	r3, [r7, #4]
 810ae3a:	681b      	ldr	r3, [r3, #0]
 810ae3c:	4a20      	ldr	r2, [pc, #128]	@ (810aec0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810ae3e:	4293      	cmp	r3, r2
 810ae40:	d022      	beq.n	810ae88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810ae42:	687b      	ldr	r3, [r7, #4]
 810ae44:	681b      	ldr	r3, [r3, #0]
 810ae46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810ae4a:	d01d      	beq.n	810ae88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810ae4c:	687b      	ldr	r3, [r7, #4]
 810ae4e:	681b      	ldr	r3, [r3, #0]
 810ae50:	4a1d      	ldr	r2, [pc, #116]	@ (810aec8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810ae52:	4293      	cmp	r3, r2
 810ae54:	d018      	beq.n	810ae88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810ae56:	687b      	ldr	r3, [r7, #4]
 810ae58:	681b      	ldr	r3, [r3, #0]
 810ae5a:	4a1c      	ldr	r2, [pc, #112]	@ (810aecc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810ae5c:	4293      	cmp	r3, r2
 810ae5e:	d013      	beq.n	810ae88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810ae60:	687b      	ldr	r3, [r7, #4]
 810ae62:	681b      	ldr	r3, [r3, #0]
 810ae64:	4a1a      	ldr	r2, [pc, #104]	@ (810aed0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810ae66:	4293      	cmp	r3, r2
 810ae68:	d00e      	beq.n	810ae88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810ae6a:	687b      	ldr	r3, [r7, #4]
 810ae6c:	681b      	ldr	r3, [r3, #0]
 810ae6e:	4a15      	ldr	r2, [pc, #84]	@ (810aec4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810ae70:	4293      	cmp	r3, r2
 810ae72:	d009      	beq.n	810ae88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810ae74:	687b      	ldr	r3, [r7, #4]
 810ae76:	681b      	ldr	r3, [r3, #0]
 810ae78:	4a16      	ldr	r2, [pc, #88]	@ (810aed4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810ae7a:	4293      	cmp	r3, r2
 810ae7c:	d004      	beq.n	810ae88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810ae7e:	687b      	ldr	r3, [r7, #4]
 810ae80:	681b      	ldr	r3, [r3, #0]
 810ae82:	4a15      	ldr	r2, [pc, #84]	@ (810aed8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810ae84:	4293      	cmp	r3, r2
 810ae86:	d10c      	bne.n	810aea2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810ae88:	68bb      	ldr	r3, [r7, #8]
 810ae8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810ae8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810ae90:	683b      	ldr	r3, [r7, #0]
 810ae92:	689b      	ldr	r3, [r3, #8]
 810ae94:	68ba      	ldr	r2, [r7, #8]
 810ae96:	4313      	orrs	r3, r2
 810ae98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810ae9a:	687b      	ldr	r3, [r7, #4]
 810ae9c:	681b      	ldr	r3, [r3, #0]
 810ae9e:	68ba      	ldr	r2, [r7, #8]
 810aea0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810aea2:	687b      	ldr	r3, [r7, #4]
 810aea4:	2201      	movs	r2, #1
 810aea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810aeaa:	687b      	ldr	r3, [r7, #4]
 810aeac:	2200      	movs	r2, #0
 810aeae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810aeb2:	2300      	movs	r3, #0
}
 810aeb4:	4618      	mov	r0, r3
 810aeb6:	3714      	adds	r7, #20
 810aeb8:	46bd      	mov	sp, r7
 810aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aebe:	4770      	bx	lr
 810aec0:	40010000 	.word	0x40010000
 810aec4:	40010400 	.word	0x40010400
 810aec8:	40000400 	.word	0x40000400
 810aecc:	40000800 	.word	0x40000800
 810aed0:	40000c00 	.word	0x40000c00
 810aed4:	40001800 	.word	0x40001800
 810aed8:	40014000 	.word	0x40014000

0810aedc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810aedc:	b480      	push	{r7}
 810aede:	b085      	sub	sp, #20
 810aee0:	af00      	add	r7, sp, #0
 810aee2:	6078      	str	r0, [r7, #4]
 810aee4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810aee6:	2300      	movs	r3, #0
 810aee8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 810aeea:	687b      	ldr	r3, [r7, #4]
 810aeec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810aef0:	2b01      	cmp	r3, #1
 810aef2:	d101      	bne.n	810aef8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810aef4:	2302      	movs	r3, #2
 810aef6:	e065      	b.n	810afc4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810aef8:	687b      	ldr	r3, [r7, #4]
 810aefa:	2201      	movs	r2, #1
 810aefc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810af00:	68fb      	ldr	r3, [r7, #12]
 810af02:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810af06:	683b      	ldr	r3, [r7, #0]
 810af08:	68db      	ldr	r3, [r3, #12]
 810af0a:	4313      	orrs	r3, r2
 810af0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810af0e:	68fb      	ldr	r3, [r7, #12]
 810af10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810af14:	683b      	ldr	r3, [r7, #0]
 810af16:	689b      	ldr	r3, [r3, #8]
 810af18:	4313      	orrs	r3, r2
 810af1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810af1c:	68fb      	ldr	r3, [r7, #12]
 810af1e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 810af22:	683b      	ldr	r3, [r7, #0]
 810af24:	685b      	ldr	r3, [r3, #4]
 810af26:	4313      	orrs	r3, r2
 810af28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810af2a:	68fb      	ldr	r3, [r7, #12]
 810af2c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 810af30:	683b      	ldr	r3, [r7, #0]
 810af32:	681b      	ldr	r3, [r3, #0]
 810af34:	4313      	orrs	r3, r2
 810af36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810af38:	68fb      	ldr	r3, [r7, #12]
 810af3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810af3e:	683b      	ldr	r3, [r7, #0]
 810af40:	691b      	ldr	r3, [r3, #16]
 810af42:	4313      	orrs	r3, r2
 810af44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810af46:	68fb      	ldr	r3, [r7, #12]
 810af48:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 810af4c:	683b      	ldr	r3, [r7, #0]
 810af4e:	695b      	ldr	r3, [r3, #20]
 810af50:	4313      	orrs	r3, r2
 810af52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810af54:	68fb      	ldr	r3, [r7, #12]
 810af56:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 810af5a:	683b      	ldr	r3, [r7, #0]
 810af5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810af5e:	4313      	orrs	r3, r2
 810af60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810af62:	68fb      	ldr	r3, [r7, #12]
 810af64:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 810af68:	683b      	ldr	r3, [r7, #0]
 810af6a:	699b      	ldr	r3, [r3, #24]
 810af6c:	041b      	lsls	r3, r3, #16
 810af6e:	4313      	orrs	r3, r2
 810af70:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810af72:	687b      	ldr	r3, [r7, #4]
 810af74:	681b      	ldr	r3, [r3, #0]
 810af76:	4a16      	ldr	r2, [pc, #88]	@ (810afd0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810af78:	4293      	cmp	r3, r2
 810af7a:	d004      	beq.n	810af86 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810af7c:	687b      	ldr	r3, [r7, #4]
 810af7e:	681b      	ldr	r3, [r3, #0]
 810af80:	4a14      	ldr	r2, [pc, #80]	@ (810afd4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810af82:	4293      	cmp	r3, r2
 810af84:	d115      	bne.n	810afb2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810af86:	68fb      	ldr	r3, [r7, #12]
 810af88:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 810af8c:	683b      	ldr	r3, [r7, #0]
 810af8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810af90:	051b      	lsls	r3, r3, #20
 810af92:	4313      	orrs	r3, r2
 810af94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810af96:	68fb      	ldr	r3, [r7, #12]
 810af98:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 810af9c:	683b      	ldr	r3, [r7, #0]
 810af9e:	69db      	ldr	r3, [r3, #28]
 810afa0:	4313      	orrs	r3, r2
 810afa2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810afa4:	68fb      	ldr	r3, [r7, #12]
 810afa6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 810afaa:	683b      	ldr	r3, [r7, #0]
 810afac:	6a1b      	ldr	r3, [r3, #32]
 810afae:	4313      	orrs	r3, r2
 810afb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810afb2:	687b      	ldr	r3, [r7, #4]
 810afb4:	681b      	ldr	r3, [r3, #0]
 810afb6:	68fa      	ldr	r2, [r7, #12]
 810afb8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 810afba:	687b      	ldr	r3, [r7, #4]
 810afbc:	2200      	movs	r2, #0
 810afbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810afc2:	2300      	movs	r3, #0
}
 810afc4:	4618      	mov	r0, r3
 810afc6:	3714      	adds	r7, #20
 810afc8:	46bd      	mov	sp, r7
 810afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 810afce:	4770      	bx	lr
 810afd0:	40010000 	.word	0x40010000
 810afd4:	40010400 	.word	0x40010400

0810afd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810afd8:	b480      	push	{r7}
 810afda:	b083      	sub	sp, #12
 810afdc:	af00      	add	r7, sp, #0
 810afde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810afe0:	bf00      	nop
 810afe2:	370c      	adds	r7, #12
 810afe4:	46bd      	mov	sp, r7
 810afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810afea:	4770      	bx	lr

0810afec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810afec:	b480      	push	{r7}
 810afee:	b083      	sub	sp, #12
 810aff0:	af00      	add	r7, sp, #0
 810aff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810aff4:	bf00      	nop
 810aff6:	370c      	adds	r7, #12
 810aff8:	46bd      	mov	sp, r7
 810affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810affe:	4770      	bx	lr

0810b000 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810b000:	b480      	push	{r7}
 810b002:	b083      	sub	sp, #12
 810b004:	af00      	add	r7, sp, #0
 810b006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810b008:	bf00      	nop
 810b00a:	370c      	adds	r7, #12
 810b00c:	46bd      	mov	sp, r7
 810b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b012:	4770      	bx	lr

0810b014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810b014:	b580      	push	{r7, lr}
 810b016:	b082      	sub	sp, #8
 810b018:	af00      	add	r7, sp, #0
 810b01a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810b01c:	687b      	ldr	r3, [r7, #4]
 810b01e:	2b00      	cmp	r3, #0
 810b020:	d101      	bne.n	810b026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810b022:	2301      	movs	r3, #1
 810b024:	e042      	b.n	810b0ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810b026:	687b      	ldr	r3, [r7, #4]
 810b028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810b02c:	2b00      	cmp	r3, #0
 810b02e:	d106      	bne.n	810b03e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810b030:	687b      	ldr	r3, [r7, #4]
 810b032:	2200      	movs	r2, #0
 810b034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810b038:	6878      	ldr	r0, [r7, #4]
 810b03a:	f7f8 fc0f 	bl	810385c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810b03e:	687b      	ldr	r3, [r7, #4]
 810b040:	2224      	movs	r2, #36	@ 0x24
 810b042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810b046:	687b      	ldr	r3, [r7, #4]
 810b048:	681b      	ldr	r3, [r3, #0]
 810b04a:	681a      	ldr	r2, [r3, #0]
 810b04c:	687b      	ldr	r3, [r7, #4]
 810b04e:	681b      	ldr	r3, [r3, #0]
 810b050:	f022 0201 	bic.w	r2, r2, #1
 810b054:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810b056:	687b      	ldr	r3, [r7, #4]
 810b058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b05a:	2b00      	cmp	r3, #0
 810b05c:	d002      	beq.n	810b064 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810b05e:	6878      	ldr	r0, [r7, #4]
 810b060:	f000 fee6 	bl	810be30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810b064:	6878      	ldr	r0, [r7, #4]
 810b066:	f000 f97b 	bl	810b360 <UART_SetConfig>
 810b06a:	4603      	mov	r3, r0
 810b06c:	2b01      	cmp	r3, #1
 810b06e:	d101      	bne.n	810b074 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 810b070:	2301      	movs	r3, #1
 810b072:	e01b      	b.n	810b0ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810b074:	687b      	ldr	r3, [r7, #4]
 810b076:	681b      	ldr	r3, [r3, #0]
 810b078:	685a      	ldr	r2, [r3, #4]
 810b07a:	687b      	ldr	r3, [r7, #4]
 810b07c:	681b      	ldr	r3, [r3, #0]
 810b07e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810b082:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810b084:	687b      	ldr	r3, [r7, #4]
 810b086:	681b      	ldr	r3, [r3, #0]
 810b088:	689a      	ldr	r2, [r3, #8]
 810b08a:	687b      	ldr	r3, [r7, #4]
 810b08c:	681b      	ldr	r3, [r3, #0]
 810b08e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810b092:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810b094:	687b      	ldr	r3, [r7, #4]
 810b096:	681b      	ldr	r3, [r3, #0]
 810b098:	681a      	ldr	r2, [r3, #0]
 810b09a:	687b      	ldr	r3, [r7, #4]
 810b09c:	681b      	ldr	r3, [r3, #0]
 810b09e:	f042 0201 	orr.w	r2, r2, #1
 810b0a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810b0a4:	6878      	ldr	r0, [r7, #4]
 810b0a6:	f000 ff65 	bl	810bf74 <UART_CheckIdleState>
 810b0aa:	4603      	mov	r3, r0
}
 810b0ac:	4618      	mov	r0, r3
 810b0ae:	3708      	adds	r7, #8
 810b0b0:	46bd      	mov	sp, r7
 810b0b2:	bd80      	pop	{r7, pc}

0810b0b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810b0b4:	b580      	push	{r7, lr}
 810b0b6:	b08a      	sub	sp, #40	@ 0x28
 810b0b8:	af02      	add	r7, sp, #8
 810b0ba:	60f8      	str	r0, [r7, #12]
 810b0bc:	60b9      	str	r1, [r7, #8]
 810b0be:	603b      	str	r3, [r7, #0]
 810b0c0:	4613      	mov	r3, r2
 810b0c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810b0c4:	68fb      	ldr	r3, [r7, #12]
 810b0c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810b0ca:	2b20      	cmp	r3, #32
 810b0cc:	d17b      	bne.n	810b1c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 810b0ce:	68bb      	ldr	r3, [r7, #8]
 810b0d0:	2b00      	cmp	r3, #0
 810b0d2:	d002      	beq.n	810b0da <HAL_UART_Transmit+0x26>
 810b0d4:	88fb      	ldrh	r3, [r7, #6]
 810b0d6:	2b00      	cmp	r3, #0
 810b0d8:	d101      	bne.n	810b0de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810b0da:	2301      	movs	r3, #1
 810b0dc:	e074      	b.n	810b1c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b0de:	68fb      	ldr	r3, [r7, #12]
 810b0e0:	2200      	movs	r2, #0
 810b0e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810b0e6:	68fb      	ldr	r3, [r7, #12]
 810b0e8:	2221      	movs	r2, #33	@ 0x21
 810b0ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810b0ee:	f7f8 fdf9 	bl	8103ce4 <HAL_GetTick>
 810b0f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810b0f4:	68fb      	ldr	r3, [r7, #12]
 810b0f6:	88fa      	ldrh	r2, [r7, #6]
 810b0f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 810b0fc:	68fb      	ldr	r3, [r7, #12]
 810b0fe:	88fa      	ldrh	r2, [r7, #6]
 810b100:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810b104:	68fb      	ldr	r3, [r7, #12]
 810b106:	689b      	ldr	r3, [r3, #8]
 810b108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b10c:	d108      	bne.n	810b120 <HAL_UART_Transmit+0x6c>
 810b10e:	68fb      	ldr	r3, [r7, #12]
 810b110:	691b      	ldr	r3, [r3, #16]
 810b112:	2b00      	cmp	r3, #0
 810b114:	d104      	bne.n	810b120 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810b116:	2300      	movs	r3, #0
 810b118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810b11a:	68bb      	ldr	r3, [r7, #8]
 810b11c:	61bb      	str	r3, [r7, #24]
 810b11e:	e003      	b.n	810b128 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 810b120:	68bb      	ldr	r3, [r7, #8]
 810b122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810b124:	2300      	movs	r3, #0
 810b126:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 810b128:	e030      	b.n	810b18c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810b12a:	683b      	ldr	r3, [r7, #0]
 810b12c:	9300      	str	r3, [sp, #0]
 810b12e:	697b      	ldr	r3, [r7, #20]
 810b130:	2200      	movs	r2, #0
 810b132:	2180      	movs	r1, #128	@ 0x80
 810b134:	68f8      	ldr	r0, [r7, #12]
 810b136:	f000 ffc7 	bl	810c0c8 <UART_WaitOnFlagUntilTimeout>
 810b13a:	4603      	mov	r3, r0
 810b13c:	2b00      	cmp	r3, #0
 810b13e:	d005      	beq.n	810b14c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 810b140:	68fb      	ldr	r3, [r7, #12]
 810b142:	2220      	movs	r2, #32
 810b144:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 810b148:	2303      	movs	r3, #3
 810b14a:	e03d      	b.n	810b1c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 810b14c:	69fb      	ldr	r3, [r7, #28]
 810b14e:	2b00      	cmp	r3, #0
 810b150:	d10b      	bne.n	810b16a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810b152:	69bb      	ldr	r3, [r7, #24]
 810b154:	881b      	ldrh	r3, [r3, #0]
 810b156:	461a      	mov	r2, r3
 810b158:	68fb      	ldr	r3, [r7, #12]
 810b15a:	681b      	ldr	r3, [r3, #0]
 810b15c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810b160:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 810b162:	69bb      	ldr	r3, [r7, #24]
 810b164:	3302      	adds	r3, #2
 810b166:	61bb      	str	r3, [r7, #24]
 810b168:	e007      	b.n	810b17a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810b16a:	69fb      	ldr	r3, [r7, #28]
 810b16c:	781a      	ldrb	r2, [r3, #0]
 810b16e:	68fb      	ldr	r3, [r7, #12]
 810b170:	681b      	ldr	r3, [r3, #0]
 810b172:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 810b174:	69fb      	ldr	r3, [r7, #28]
 810b176:	3301      	adds	r3, #1
 810b178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810b17a:	68fb      	ldr	r3, [r7, #12]
 810b17c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810b180:	b29b      	uxth	r3, r3
 810b182:	3b01      	subs	r3, #1
 810b184:	b29a      	uxth	r2, r3
 810b186:	68fb      	ldr	r3, [r7, #12]
 810b188:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 810b18c:	68fb      	ldr	r3, [r7, #12]
 810b18e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810b192:	b29b      	uxth	r3, r3
 810b194:	2b00      	cmp	r3, #0
 810b196:	d1c8      	bne.n	810b12a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810b198:	683b      	ldr	r3, [r7, #0]
 810b19a:	9300      	str	r3, [sp, #0]
 810b19c:	697b      	ldr	r3, [r7, #20]
 810b19e:	2200      	movs	r2, #0
 810b1a0:	2140      	movs	r1, #64	@ 0x40
 810b1a2:	68f8      	ldr	r0, [r7, #12]
 810b1a4:	f000 ff90 	bl	810c0c8 <UART_WaitOnFlagUntilTimeout>
 810b1a8:	4603      	mov	r3, r0
 810b1aa:	2b00      	cmp	r3, #0
 810b1ac:	d005      	beq.n	810b1ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 810b1ae:	68fb      	ldr	r3, [r7, #12]
 810b1b0:	2220      	movs	r2, #32
 810b1b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810b1b6:	2303      	movs	r3, #3
 810b1b8:	e006      	b.n	810b1c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810b1ba:	68fb      	ldr	r3, [r7, #12]
 810b1bc:	2220      	movs	r2, #32
 810b1be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 810b1c2:	2300      	movs	r3, #0
 810b1c4:	e000      	b.n	810b1c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810b1c6:	2302      	movs	r3, #2
  }
}
 810b1c8:	4618      	mov	r0, r3
 810b1ca:	3720      	adds	r7, #32
 810b1cc:	46bd      	mov	sp, r7
 810b1ce:	bd80      	pop	{r7, pc}

0810b1d0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810b1d0:	b580      	push	{r7, lr}
 810b1d2:	b08a      	sub	sp, #40	@ 0x28
 810b1d4:	af02      	add	r7, sp, #8
 810b1d6:	60f8      	str	r0, [r7, #12]
 810b1d8:	60b9      	str	r1, [r7, #8]
 810b1da:	603b      	str	r3, [r7, #0]
 810b1dc:	4613      	mov	r3, r2
 810b1de:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810b1e0:	68fb      	ldr	r3, [r7, #12]
 810b1e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b1e6:	2b20      	cmp	r3, #32
 810b1e8:	f040 80b5 	bne.w	810b356 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 810b1ec:	68bb      	ldr	r3, [r7, #8]
 810b1ee:	2b00      	cmp	r3, #0
 810b1f0:	d002      	beq.n	810b1f8 <HAL_UART_Receive+0x28>
 810b1f2:	88fb      	ldrh	r3, [r7, #6]
 810b1f4:	2b00      	cmp	r3, #0
 810b1f6:	d101      	bne.n	810b1fc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 810b1f8:	2301      	movs	r3, #1
 810b1fa:	e0ad      	b.n	810b358 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b1fc:	68fb      	ldr	r3, [r7, #12]
 810b1fe:	2200      	movs	r2, #0
 810b200:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 810b204:	68fb      	ldr	r3, [r7, #12]
 810b206:	2222      	movs	r2, #34	@ 0x22
 810b208:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b20c:	68fb      	ldr	r3, [r7, #12]
 810b20e:	2200      	movs	r2, #0
 810b210:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810b212:	f7f8 fd67 	bl	8103ce4 <HAL_GetTick>
 810b216:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 810b218:	68fb      	ldr	r3, [r7, #12]
 810b21a:	88fa      	ldrh	r2, [r7, #6]
 810b21c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 810b220:	68fb      	ldr	r3, [r7, #12]
 810b222:	88fa      	ldrh	r2, [r7, #6]
 810b224:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 810b228:	68fb      	ldr	r3, [r7, #12]
 810b22a:	689b      	ldr	r3, [r3, #8]
 810b22c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b230:	d10e      	bne.n	810b250 <HAL_UART_Receive+0x80>
 810b232:	68fb      	ldr	r3, [r7, #12]
 810b234:	691b      	ldr	r3, [r3, #16]
 810b236:	2b00      	cmp	r3, #0
 810b238:	d105      	bne.n	810b246 <HAL_UART_Receive+0x76>
 810b23a:	68fb      	ldr	r3, [r7, #12]
 810b23c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 810b240:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810b244:	e02d      	b.n	810b2a2 <HAL_UART_Receive+0xd2>
 810b246:	68fb      	ldr	r3, [r7, #12]
 810b248:	22ff      	movs	r2, #255	@ 0xff
 810b24a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810b24e:	e028      	b.n	810b2a2 <HAL_UART_Receive+0xd2>
 810b250:	68fb      	ldr	r3, [r7, #12]
 810b252:	689b      	ldr	r3, [r3, #8]
 810b254:	2b00      	cmp	r3, #0
 810b256:	d10d      	bne.n	810b274 <HAL_UART_Receive+0xa4>
 810b258:	68fb      	ldr	r3, [r7, #12]
 810b25a:	691b      	ldr	r3, [r3, #16]
 810b25c:	2b00      	cmp	r3, #0
 810b25e:	d104      	bne.n	810b26a <HAL_UART_Receive+0x9a>
 810b260:	68fb      	ldr	r3, [r7, #12]
 810b262:	22ff      	movs	r2, #255	@ 0xff
 810b264:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810b268:	e01b      	b.n	810b2a2 <HAL_UART_Receive+0xd2>
 810b26a:	68fb      	ldr	r3, [r7, #12]
 810b26c:	227f      	movs	r2, #127	@ 0x7f
 810b26e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810b272:	e016      	b.n	810b2a2 <HAL_UART_Receive+0xd2>
 810b274:	68fb      	ldr	r3, [r7, #12]
 810b276:	689b      	ldr	r3, [r3, #8]
 810b278:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810b27c:	d10d      	bne.n	810b29a <HAL_UART_Receive+0xca>
 810b27e:	68fb      	ldr	r3, [r7, #12]
 810b280:	691b      	ldr	r3, [r3, #16]
 810b282:	2b00      	cmp	r3, #0
 810b284:	d104      	bne.n	810b290 <HAL_UART_Receive+0xc0>
 810b286:	68fb      	ldr	r3, [r7, #12]
 810b288:	227f      	movs	r2, #127	@ 0x7f
 810b28a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810b28e:	e008      	b.n	810b2a2 <HAL_UART_Receive+0xd2>
 810b290:	68fb      	ldr	r3, [r7, #12]
 810b292:	223f      	movs	r2, #63	@ 0x3f
 810b294:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810b298:	e003      	b.n	810b2a2 <HAL_UART_Receive+0xd2>
 810b29a:	68fb      	ldr	r3, [r7, #12]
 810b29c:	2200      	movs	r2, #0
 810b29e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 810b2a2:	68fb      	ldr	r3, [r7, #12]
 810b2a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810b2a8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810b2aa:	68fb      	ldr	r3, [r7, #12]
 810b2ac:	689b      	ldr	r3, [r3, #8]
 810b2ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b2b2:	d108      	bne.n	810b2c6 <HAL_UART_Receive+0xf6>
 810b2b4:	68fb      	ldr	r3, [r7, #12]
 810b2b6:	691b      	ldr	r3, [r3, #16]
 810b2b8:	2b00      	cmp	r3, #0
 810b2ba:	d104      	bne.n	810b2c6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 810b2bc:	2300      	movs	r3, #0
 810b2be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 810b2c0:	68bb      	ldr	r3, [r7, #8]
 810b2c2:	61bb      	str	r3, [r7, #24]
 810b2c4:	e003      	b.n	810b2ce <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 810b2c6:	68bb      	ldr	r3, [r7, #8]
 810b2c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810b2ca:	2300      	movs	r3, #0
 810b2cc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 810b2ce:	e036      	b.n	810b33e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 810b2d0:	683b      	ldr	r3, [r7, #0]
 810b2d2:	9300      	str	r3, [sp, #0]
 810b2d4:	697b      	ldr	r3, [r7, #20]
 810b2d6:	2200      	movs	r2, #0
 810b2d8:	2120      	movs	r1, #32
 810b2da:	68f8      	ldr	r0, [r7, #12]
 810b2dc:	f000 fef4 	bl	810c0c8 <UART_WaitOnFlagUntilTimeout>
 810b2e0:	4603      	mov	r3, r0
 810b2e2:	2b00      	cmp	r3, #0
 810b2e4:	d005      	beq.n	810b2f2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 810b2e6:	68fb      	ldr	r3, [r7, #12]
 810b2e8:	2220      	movs	r2, #32
 810b2ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 810b2ee:	2303      	movs	r3, #3
 810b2f0:	e032      	b.n	810b358 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 810b2f2:	69fb      	ldr	r3, [r7, #28]
 810b2f4:	2b00      	cmp	r3, #0
 810b2f6:	d10c      	bne.n	810b312 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 810b2f8:	68fb      	ldr	r3, [r7, #12]
 810b2fa:	681b      	ldr	r3, [r3, #0]
 810b2fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b2fe:	b29a      	uxth	r2, r3
 810b300:	8a7b      	ldrh	r3, [r7, #18]
 810b302:	4013      	ands	r3, r2
 810b304:	b29a      	uxth	r2, r3
 810b306:	69bb      	ldr	r3, [r7, #24]
 810b308:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 810b30a:	69bb      	ldr	r3, [r7, #24]
 810b30c:	3302      	adds	r3, #2
 810b30e:	61bb      	str	r3, [r7, #24]
 810b310:	e00c      	b.n	810b32c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 810b312:	68fb      	ldr	r3, [r7, #12]
 810b314:	681b      	ldr	r3, [r3, #0]
 810b316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b318:	b2da      	uxtb	r2, r3
 810b31a:	8a7b      	ldrh	r3, [r7, #18]
 810b31c:	b2db      	uxtb	r3, r3
 810b31e:	4013      	ands	r3, r2
 810b320:	b2da      	uxtb	r2, r3
 810b322:	69fb      	ldr	r3, [r7, #28]
 810b324:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 810b326:	69fb      	ldr	r3, [r7, #28]
 810b328:	3301      	adds	r3, #1
 810b32a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 810b32c:	68fb      	ldr	r3, [r7, #12]
 810b32e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b332:	b29b      	uxth	r3, r3
 810b334:	3b01      	subs	r3, #1
 810b336:	b29a      	uxth	r2, r3
 810b338:	68fb      	ldr	r3, [r7, #12]
 810b33a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 810b33e:	68fb      	ldr	r3, [r7, #12]
 810b340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b344:	b29b      	uxth	r3, r3
 810b346:	2b00      	cmp	r3, #0
 810b348:	d1c2      	bne.n	810b2d0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810b34a:	68fb      	ldr	r3, [r7, #12]
 810b34c:	2220      	movs	r2, #32
 810b34e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 810b352:	2300      	movs	r3, #0
 810b354:	e000      	b.n	810b358 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 810b356:	2302      	movs	r3, #2
  }
}
 810b358:	4618      	mov	r0, r3
 810b35a:	3720      	adds	r7, #32
 810b35c:	46bd      	mov	sp, r7
 810b35e:	bd80      	pop	{r7, pc}

0810b360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810b360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810b364:	b092      	sub	sp, #72	@ 0x48
 810b366:	af00      	add	r7, sp, #0
 810b368:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810b36a:	2300      	movs	r3, #0
 810b36c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810b370:	697b      	ldr	r3, [r7, #20]
 810b372:	689a      	ldr	r2, [r3, #8]
 810b374:	697b      	ldr	r3, [r7, #20]
 810b376:	691b      	ldr	r3, [r3, #16]
 810b378:	431a      	orrs	r2, r3
 810b37a:	697b      	ldr	r3, [r7, #20]
 810b37c:	695b      	ldr	r3, [r3, #20]
 810b37e:	431a      	orrs	r2, r3
 810b380:	697b      	ldr	r3, [r7, #20]
 810b382:	69db      	ldr	r3, [r3, #28]
 810b384:	4313      	orrs	r3, r2
 810b386:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810b388:	697b      	ldr	r3, [r7, #20]
 810b38a:	681b      	ldr	r3, [r3, #0]
 810b38c:	681a      	ldr	r2, [r3, #0]
 810b38e:	4bbd      	ldr	r3, [pc, #756]	@ (810b684 <UART_SetConfig+0x324>)
 810b390:	4013      	ands	r3, r2
 810b392:	697a      	ldr	r2, [r7, #20]
 810b394:	6812      	ldr	r2, [r2, #0]
 810b396:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810b398:	430b      	orrs	r3, r1
 810b39a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810b39c:	697b      	ldr	r3, [r7, #20]
 810b39e:	681b      	ldr	r3, [r3, #0]
 810b3a0:	685b      	ldr	r3, [r3, #4]
 810b3a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810b3a6:	697b      	ldr	r3, [r7, #20]
 810b3a8:	68da      	ldr	r2, [r3, #12]
 810b3aa:	697b      	ldr	r3, [r7, #20]
 810b3ac:	681b      	ldr	r3, [r3, #0]
 810b3ae:	430a      	orrs	r2, r1
 810b3b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810b3b2:	697b      	ldr	r3, [r7, #20]
 810b3b4:	699b      	ldr	r3, [r3, #24]
 810b3b6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810b3b8:	697b      	ldr	r3, [r7, #20]
 810b3ba:	681b      	ldr	r3, [r3, #0]
 810b3bc:	4ab2      	ldr	r2, [pc, #712]	@ (810b688 <UART_SetConfig+0x328>)
 810b3be:	4293      	cmp	r3, r2
 810b3c0:	d004      	beq.n	810b3cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810b3c2:	697b      	ldr	r3, [r7, #20]
 810b3c4:	6a1b      	ldr	r3, [r3, #32]
 810b3c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810b3c8:	4313      	orrs	r3, r2
 810b3ca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810b3cc:	697b      	ldr	r3, [r7, #20]
 810b3ce:	681b      	ldr	r3, [r3, #0]
 810b3d0:	689b      	ldr	r3, [r3, #8]
 810b3d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810b3d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810b3da:	697a      	ldr	r2, [r7, #20]
 810b3dc:	6812      	ldr	r2, [r2, #0]
 810b3de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810b3e0:	430b      	orrs	r3, r1
 810b3e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810b3e4:	697b      	ldr	r3, [r7, #20]
 810b3e6:	681b      	ldr	r3, [r3, #0]
 810b3e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b3ea:	f023 010f 	bic.w	r1, r3, #15
 810b3ee:	697b      	ldr	r3, [r7, #20]
 810b3f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810b3f2:	697b      	ldr	r3, [r7, #20]
 810b3f4:	681b      	ldr	r3, [r3, #0]
 810b3f6:	430a      	orrs	r2, r1
 810b3f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810b3fa:	697b      	ldr	r3, [r7, #20]
 810b3fc:	681b      	ldr	r3, [r3, #0]
 810b3fe:	4aa3      	ldr	r2, [pc, #652]	@ (810b68c <UART_SetConfig+0x32c>)
 810b400:	4293      	cmp	r3, r2
 810b402:	d177      	bne.n	810b4f4 <UART_SetConfig+0x194>
 810b404:	4ba2      	ldr	r3, [pc, #648]	@ (810b690 <UART_SetConfig+0x330>)
 810b406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b408:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810b40c:	2b28      	cmp	r3, #40	@ 0x28
 810b40e:	d86d      	bhi.n	810b4ec <UART_SetConfig+0x18c>
 810b410:	a201      	add	r2, pc, #4	@ (adr r2, 810b418 <UART_SetConfig+0xb8>)
 810b412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b416:	bf00      	nop
 810b418:	0810b4bd 	.word	0x0810b4bd
 810b41c:	0810b4ed 	.word	0x0810b4ed
 810b420:	0810b4ed 	.word	0x0810b4ed
 810b424:	0810b4ed 	.word	0x0810b4ed
 810b428:	0810b4ed 	.word	0x0810b4ed
 810b42c:	0810b4ed 	.word	0x0810b4ed
 810b430:	0810b4ed 	.word	0x0810b4ed
 810b434:	0810b4ed 	.word	0x0810b4ed
 810b438:	0810b4c5 	.word	0x0810b4c5
 810b43c:	0810b4ed 	.word	0x0810b4ed
 810b440:	0810b4ed 	.word	0x0810b4ed
 810b444:	0810b4ed 	.word	0x0810b4ed
 810b448:	0810b4ed 	.word	0x0810b4ed
 810b44c:	0810b4ed 	.word	0x0810b4ed
 810b450:	0810b4ed 	.word	0x0810b4ed
 810b454:	0810b4ed 	.word	0x0810b4ed
 810b458:	0810b4cd 	.word	0x0810b4cd
 810b45c:	0810b4ed 	.word	0x0810b4ed
 810b460:	0810b4ed 	.word	0x0810b4ed
 810b464:	0810b4ed 	.word	0x0810b4ed
 810b468:	0810b4ed 	.word	0x0810b4ed
 810b46c:	0810b4ed 	.word	0x0810b4ed
 810b470:	0810b4ed 	.word	0x0810b4ed
 810b474:	0810b4ed 	.word	0x0810b4ed
 810b478:	0810b4d5 	.word	0x0810b4d5
 810b47c:	0810b4ed 	.word	0x0810b4ed
 810b480:	0810b4ed 	.word	0x0810b4ed
 810b484:	0810b4ed 	.word	0x0810b4ed
 810b488:	0810b4ed 	.word	0x0810b4ed
 810b48c:	0810b4ed 	.word	0x0810b4ed
 810b490:	0810b4ed 	.word	0x0810b4ed
 810b494:	0810b4ed 	.word	0x0810b4ed
 810b498:	0810b4dd 	.word	0x0810b4dd
 810b49c:	0810b4ed 	.word	0x0810b4ed
 810b4a0:	0810b4ed 	.word	0x0810b4ed
 810b4a4:	0810b4ed 	.word	0x0810b4ed
 810b4a8:	0810b4ed 	.word	0x0810b4ed
 810b4ac:	0810b4ed 	.word	0x0810b4ed
 810b4b0:	0810b4ed 	.word	0x0810b4ed
 810b4b4:	0810b4ed 	.word	0x0810b4ed
 810b4b8:	0810b4e5 	.word	0x0810b4e5
 810b4bc:	2301      	movs	r3, #1
 810b4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b4c2:	e220      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b4c4:	2304      	movs	r3, #4
 810b4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b4ca:	e21c      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b4cc:	2308      	movs	r3, #8
 810b4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b4d2:	e218      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b4d4:	2310      	movs	r3, #16
 810b4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b4da:	e214      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b4dc:	2320      	movs	r3, #32
 810b4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b4e2:	e210      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b4e4:	2340      	movs	r3, #64	@ 0x40
 810b4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b4ea:	e20c      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b4ec:	2380      	movs	r3, #128	@ 0x80
 810b4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b4f2:	e208      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b4f4:	697b      	ldr	r3, [r7, #20]
 810b4f6:	681b      	ldr	r3, [r3, #0]
 810b4f8:	4a66      	ldr	r2, [pc, #408]	@ (810b694 <UART_SetConfig+0x334>)
 810b4fa:	4293      	cmp	r3, r2
 810b4fc:	d130      	bne.n	810b560 <UART_SetConfig+0x200>
 810b4fe:	4b64      	ldr	r3, [pc, #400]	@ (810b690 <UART_SetConfig+0x330>)
 810b500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b502:	f003 0307 	and.w	r3, r3, #7
 810b506:	2b05      	cmp	r3, #5
 810b508:	d826      	bhi.n	810b558 <UART_SetConfig+0x1f8>
 810b50a:	a201      	add	r2, pc, #4	@ (adr r2, 810b510 <UART_SetConfig+0x1b0>)
 810b50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b510:	0810b529 	.word	0x0810b529
 810b514:	0810b531 	.word	0x0810b531
 810b518:	0810b539 	.word	0x0810b539
 810b51c:	0810b541 	.word	0x0810b541
 810b520:	0810b549 	.word	0x0810b549
 810b524:	0810b551 	.word	0x0810b551
 810b528:	2300      	movs	r3, #0
 810b52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b52e:	e1ea      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b530:	2304      	movs	r3, #4
 810b532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b536:	e1e6      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b538:	2308      	movs	r3, #8
 810b53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b53e:	e1e2      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b540:	2310      	movs	r3, #16
 810b542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b546:	e1de      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b548:	2320      	movs	r3, #32
 810b54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b54e:	e1da      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b550:	2340      	movs	r3, #64	@ 0x40
 810b552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b556:	e1d6      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b558:	2380      	movs	r3, #128	@ 0x80
 810b55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b55e:	e1d2      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b560:	697b      	ldr	r3, [r7, #20]
 810b562:	681b      	ldr	r3, [r3, #0]
 810b564:	4a4c      	ldr	r2, [pc, #304]	@ (810b698 <UART_SetConfig+0x338>)
 810b566:	4293      	cmp	r3, r2
 810b568:	d130      	bne.n	810b5cc <UART_SetConfig+0x26c>
 810b56a:	4b49      	ldr	r3, [pc, #292]	@ (810b690 <UART_SetConfig+0x330>)
 810b56c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b56e:	f003 0307 	and.w	r3, r3, #7
 810b572:	2b05      	cmp	r3, #5
 810b574:	d826      	bhi.n	810b5c4 <UART_SetConfig+0x264>
 810b576:	a201      	add	r2, pc, #4	@ (adr r2, 810b57c <UART_SetConfig+0x21c>)
 810b578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b57c:	0810b595 	.word	0x0810b595
 810b580:	0810b59d 	.word	0x0810b59d
 810b584:	0810b5a5 	.word	0x0810b5a5
 810b588:	0810b5ad 	.word	0x0810b5ad
 810b58c:	0810b5b5 	.word	0x0810b5b5
 810b590:	0810b5bd 	.word	0x0810b5bd
 810b594:	2300      	movs	r3, #0
 810b596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b59a:	e1b4      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b59c:	2304      	movs	r3, #4
 810b59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b5a2:	e1b0      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b5a4:	2308      	movs	r3, #8
 810b5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b5aa:	e1ac      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b5ac:	2310      	movs	r3, #16
 810b5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b5b2:	e1a8      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b5b4:	2320      	movs	r3, #32
 810b5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b5ba:	e1a4      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b5bc:	2340      	movs	r3, #64	@ 0x40
 810b5be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b5c2:	e1a0      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b5c4:	2380      	movs	r3, #128	@ 0x80
 810b5c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b5ca:	e19c      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b5cc:	697b      	ldr	r3, [r7, #20]
 810b5ce:	681b      	ldr	r3, [r3, #0]
 810b5d0:	4a32      	ldr	r2, [pc, #200]	@ (810b69c <UART_SetConfig+0x33c>)
 810b5d2:	4293      	cmp	r3, r2
 810b5d4:	d130      	bne.n	810b638 <UART_SetConfig+0x2d8>
 810b5d6:	4b2e      	ldr	r3, [pc, #184]	@ (810b690 <UART_SetConfig+0x330>)
 810b5d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b5da:	f003 0307 	and.w	r3, r3, #7
 810b5de:	2b05      	cmp	r3, #5
 810b5e0:	d826      	bhi.n	810b630 <UART_SetConfig+0x2d0>
 810b5e2:	a201      	add	r2, pc, #4	@ (adr r2, 810b5e8 <UART_SetConfig+0x288>)
 810b5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b5e8:	0810b601 	.word	0x0810b601
 810b5ec:	0810b609 	.word	0x0810b609
 810b5f0:	0810b611 	.word	0x0810b611
 810b5f4:	0810b619 	.word	0x0810b619
 810b5f8:	0810b621 	.word	0x0810b621
 810b5fc:	0810b629 	.word	0x0810b629
 810b600:	2300      	movs	r3, #0
 810b602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b606:	e17e      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b608:	2304      	movs	r3, #4
 810b60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b60e:	e17a      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b610:	2308      	movs	r3, #8
 810b612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b616:	e176      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b618:	2310      	movs	r3, #16
 810b61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b61e:	e172      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b620:	2320      	movs	r3, #32
 810b622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b626:	e16e      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b628:	2340      	movs	r3, #64	@ 0x40
 810b62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b62e:	e16a      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b630:	2380      	movs	r3, #128	@ 0x80
 810b632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b636:	e166      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b638:	697b      	ldr	r3, [r7, #20]
 810b63a:	681b      	ldr	r3, [r3, #0]
 810b63c:	4a18      	ldr	r2, [pc, #96]	@ (810b6a0 <UART_SetConfig+0x340>)
 810b63e:	4293      	cmp	r3, r2
 810b640:	d140      	bne.n	810b6c4 <UART_SetConfig+0x364>
 810b642:	4b13      	ldr	r3, [pc, #76]	@ (810b690 <UART_SetConfig+0x330>)
 810b644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b646:	f003 0307 	and.w	r3, r3, #7
 810b64a:	2b05      	cmp	r3, #5
 810b64c:	d836      	bhi.n	810b6bc <UART_SetConfig+0x35c>
 810b64e:	a201      	add	r2, pc, #4	@ (adr r2, 810b654 <UART_SetConfig+0x2f4>)
 810b650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b654:	0810b66d 	.word	0x0810b66d
 810b658:	0810b675 	.word	0x0810b675
 810b65c:	0810b67d 	.word	0x0810b67d
 810b660:	0810b6a5 	.word	0x0810b6a5
 810b664:	0810b6ad 	.word	0x0810b6ad
 810b668:	0810b6b5 	.word	0x0810b6b5
 810b66c:	2300      	movs	r3, #0
 810b66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b672:	e148      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b674:	2304      	movs	r3, #4
 810b676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b67a:	e144      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b67c:	2308      	movs	r3, #8
 810b67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b682:	e140      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b684:	cfff69f3 	.word	0xcfff69f3
 810b688:	58000c00 	.word	0x58000c00
 810b68c:	40011000 	.word	0x40011000
 810b690:	58024400 	.word	0x58024400
 810b694:	40004400 	.word	0x40004400
 810b698:	40004800 	.word	0x40004800
 810b69c:	40004c00 	.word	0x40004c00
 810b6a0:	40005000 	.word	0x40005000
 810b6a4:	2310      	movs	r3, #16
 810b6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b6aa:	e12c      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b6ac:	2320      	movs	r3, #32
 810b6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b6b2:	e128      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b6b4:	2340      	movs	r3, #64	@ 0x40
 810b6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b6ba:	e124      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b6bc:	2380      	movs	r3, #128	@ 0x80
 810b6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b6c2:	e120      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b6c4:	697b      	ldr	r3, [r7, #20]
 810b6c6:	681b      	ldr	r3, [r3, #0]
 810b6c8:	4acb      	ldr	r2, [pc, #812]	@ (810b9f8 <UART_SetConfig+0x698>)
 810b6ca:	4293      	cmp	r3, r2
 810b6cc:	d176      	bne.n	810b7bc <UART_SetConfig+0x45c>
 810b6ce:	4bcb      	ldr	r3, [pc, #812]	@ (810b9fc <UART_SetConfig+0x69c>)
 810b6d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b6d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810b6d6:	2b28      	cmp	r3, #40	@ 0x28
 810b6d8:	d86c      	bhi.n	810b7b4 <UART_SetConfig+0x454>
 810b6da:	a201      	add	r2, pc, #4	@ (adr r2, 810b6e0 <UART_SetConfig+0x380>)
 810b6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b6e0:	0810b785 	.word	0x0810b785
 810b6e4:	0810b7b5 	.word	0x0810b7b5
 810b6e8:	0810b7b5 	.word	0x0810b7b5
 810b6ec:	0810b7b5 	.word	0x0810b7b5
 810b6f0:	0810b7b5 	.word	0x0810b7b5
 810b6f4:	0810b7b5 	.word	0x0810b7b5
 810b6f8:	0810b7b5 	.word	0x0810b7b5
 810b6fc:	0810b7b5 	.word	0x0810b7b5
 810b700:	0810b78d 	.word	0x0810b78d
 810b704:	0810b7b5 	.word	0x0810b7b5
 810b708:	0810b7b5 	.word	0x0810b7b5
 810b70c:	0810b7b5 	.word	0x0810b7b5
 810b710:	0810b7b5 	.word	0x0810b7b5
 810b714:	0810b7b5 	.word	0x0810b7b5
 810b718:	0810b7b5 	.word	0x0810b7b5
 810b71c:	0810b7b5 	.word	0x0810b7b5
 810b720:	0810b795 	.word	0x0810b795
 810b724:	0810b7b5 	.word	0x0810b7b5
 810b728:	0810b7b5 	.word	0x0810b7b5
 810b72c:	0810b7b5 	.word	0x0810b7b5
 810b730:	0810b7b5 	.word	0x0810b7b5
 810b734:	0810b7b5 	.word	0x0810b7b5
 810b738:	0810b7b5 	.word	0x0810b7b5
 810b73c:	0810b7b5 	.word	0x0810b7b5
 810b740:	0810b79d 	.word	0x0810b79d
 810b744:	0810b7b5 	.word	0x0810b7b5
 810b748:	0810b7b5 	.word	0x0810b7b5
 810b74c:	0810b7b5 	.word	0x0810b7b5
 810b750:	0810b7b5 	.word	0x0810b7b5
 810b754:	0810b7b5 	.word	0x0810b7b5
 810b758:	0810b7b5 	.word	0x0810b7b5
 810b75c:	0810b7b5 	.word	0x0810b7b5
 810b760:	0810b7a5 	.word	0x0810b7a5
 810b764:	0810b7b5 	.word	0x0810b7b5
 810b768:	0810b7b5 	.word	0x0810b7b5
 810b76c:	0810b7b5 	.word	0x0810b7b5
 810b770:	0810b7b5 	.word	0x0810b7b5
 810b774:	0810b7b5 	.word	0x0810b7b5
 810b778:	0810b7b5 	.word	0x0810b7b5
 810b77c:	0810b7b5 	.word	0x0810b7b5
 810b780:	0810b7ad 	.word	0x0810b7ad
 810b784:	2301      	movs	r3, #1
 810b786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b78a:	e0bc      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b78c:	2304      	movs	r3, #4
 810b78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b792:	e0b8      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b794:	2308      	movs	r3, #8
 810b796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b79a:	e0b4      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b79c:	2310      	movs	r3, #16
 810b79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b7a2:	e0b0      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b7a4:	2320      	movs	r3, #32
 810b7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b7aa:	e0ac      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b7ac:	2340      	movs	r3, #64	@ 0x40
 810b7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b7b2:	e0a8      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b7b4:	2380      	movs	r3, #128	@ 0x80
 810b7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b7ba:	e0a4      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b7bc:	697b      	ldr	r3, [r7, #20]
 810b7be:	681b      	ldr	r3, [r3, #0]
 810b7c0:	4a8f      	ldr	r2, [pc, #572]	@ (810ba00 <UART_SetConfig+0x6a0>)
 810b7c2:	4293      	cmp	r3, r2
 810b7c4:	d130      	bne.n	810b828 <UART_SetConfig+0x4c8>
 810b7c6:	4b8d      	ldr	r3, [pc, #564]	@ (810b9fc <UART_SetConfig+0x69c>)
 810b7c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b7ca:	f003 0307 	and.w	r3, r3, #7
 810b7ce:	2b05      	cmp	r3, #5
 810b7d0:	d826      	bhi.n	810b820 <UART_SetConfig+0x4c0>
 810b7d2:	a201      	add	r2, pc, #4	@ (adr r2, 810b7d8 <UART_SetConfig+0x478>)
 810b7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b7d8:	0810b7f1 	.word	0x0810b7f1
 810b7dc:	0810b7f9 	.word	0x0810b7f9
 810b7e0:	0810b801 	.word	0x0810b801
 810b7e4:	0810b809 	.word	0x0810b809
 810b7e8:	0810b811 	.word	0x0810b811
 810b7ec:	0810b819 	.word	0x0810b819
 810b7f0:	2300      	movs	r3, #0
 810b7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b7f6:	e086      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b7f8:	2304      	movs	r3, #4
 810b7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b7fe:	e082      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b800:	2308      	movs	r3, #8
 810b802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b806:	e07e      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b808:	2310      	movs	r3, #16
 810b80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b80e:	e07a      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b810:	2320      	movs	r3, #32
 810b812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b816:	e076      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b818:	2340      	movs	r3, #64	@ 0x40
 810b81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b81e:	e072      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b820:	2380      	movs	r3, #128	@ 0x80
 810b822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b826:	e06e      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b828:	697b      	ldr	r3, [r7, #20]
 810b82a:	681b      	ldr	r3, [r3, #0]
 810b82c:	4a75      	ldr	r2, [pc, #468]	@ (810ba04 <UART_SetConfig+0x6a4>)
 810b82e:	4293      	cmp	r3, r2
 810b830:	d130      	bne.n	810b894 <UART_SetConfig+0x534>
 810b832:	4b72      	ldr	r3, [pc, #456]	@ (810b9fc <UART_SetConfig+0x69c>)
 810b834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b836:	f003 0307 	and.w	r3, r3, #7
 810b83a:	2b05      	cmp	r3, #5
 810b83c:	d826      	bhi.n	810b88c <UART_SetConfig+0x52c>
 810b83e:	a201      	add	r2, pc, #4	@ (adr r2, 810b844 <UART_SetConfig+0x4e4>)
 810b840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b844:	0810b85d 	.word	0x0810b85d
 810b848:	0810b865 	.word	0x0810b865
 810b84c:	0810b86d 	.word	0x0810b86d
 810b850:	0810b875 	.word	0x0810b875
 810b854:	0810b87d 	.word	0x0810b87d
 810b858:	0810b885 	.word	0x0810b885
 810b85c:	2300      	movs	r3, #0
 810b85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b862:	e050      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b864:	2304      	movs	r3, #4
 810b866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b86a:	e04c      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b86c:	2308      	movs	r3, #8
 810b86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b872:	e048      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b874:	2310      	movs	r3, #16
 810b876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b87a:	e044      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b87c:	2320      	movs	r3, #32
 810b87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b882:	e040      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b884:	2340      	movs	r3, #64	@ 0x40
 810b886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b88a:	e03c      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b88c:	2380      	movs	r3, #128	@ 0x80
 810b88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b892:	e038      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b894:	697b      	ldr	r3, [r7, #20]
 810b896:	681b      	ldr	r3, [r3, #0]
 810b898:	4a5b      	ldr	r2, [pc, #364]	@ (810ba08 <UART_SetConfig+0x6a8>)
 810b89a:	4293      	cmp	r3, r2
 810b89c:	d130      	bne.n	810b900 <UART_SetConfig+0x5a0>
 810b89e:	4b57      	ldr	r3, [pc, #348]	@ (810b9fc <UART_SetConfig+0x69c>)
 810b8a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b8a2:	f003 0307 	and.w	r3, r3, #7
 810b8a6:	2b05      	cmp	r3, #5
 810b8a8:	d826      	bhi.n	810b8f8 <UART_SetConfig+0x598>
 810b8aa:	a201      	add	r2, pc, #4	@ (adr r2, 810b8b0 <UART_SetConfig+0x550>)
 810b8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b8b0:	0810b8c9 	.word	0x0810b8c9
 810b8b4:	0810b8d1 	.word	0x0810b8d1
 810b8b8:	0810b8d9 	.word	0x0810b8d9
 810b8bc:	0810b8e1 	.word	0x0810b8e1
 810b8c0:	0810b8e9 	.word	0x0810b8e9
 810b8c4:	0810b8f1 	.word	0x0810b8f1
 810b8c8:	2302      	movs	r3, #2
 810b8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b8ce:	e01a      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b8d0:	2304      	movs	r3, #4
 810b8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b8d6:	e016      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b8d8:	2308      	movs	r3, #8
 810b8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b8de:	e012      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b8e0:	2310      	movs	r3, #16
 810b8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b8e6:	e00e      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b8e8:	2320      	movs	r3, #32
 810b8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b8ee:	e00a      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b8f0:	2340      	movs	r3, #64	@ 0x40
 810b8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b8f6:	e006      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b8f8:	2380      	movs	r3, #128	@ 0x80
 810b8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b8fe:	e002      	b.n	810b906 <UART_SetConfig+0x5a6>
 810b900:	2380      	movs	r3, #128	@ 0x80
 810b902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810b906:	697b      	ldr	r3, [r7, #20]
 810b908:	681b      	ldr	r3, [r3, #0]
 810b90a:	4a3f      	ldr	r2, [pc, #252]	@ (810ba08 <UART_SetConfig+0x6a8>)
 810b90c:	4293      	cmp	r3, r2
 810b90e:	f040 80f8 	bne.w	810bb02 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810b912:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810b916:	2b20      	cmp	r3, #32
 810b918:	dc46      	bgt.n	810b9a8 <UART_SetConfig+0x648>
 810b91a:	2b02      	cmp	r3, #2
 810b91c:	f2c0 8082 	blt.w	810ba24 <UART_SetConfig+0x6c4>
 810b920:	3b02      	subs	r3, #2
 810b922:	2b1e      	cmp	r3, #30
 810b924:	d87e      	bhi.n	810ba24 <UART_SetConfig+0x6c4>
 810b926:	a201      	add	r2, pc, #4	@ (adr r2, 810b92c <UART_SetConfig+0x5cc>)
 810b928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b92c:	0810b9af 	.word	0x0810b9af
 810b930:	0810ba25 	.word	0x0810ba25
 810b934:	0810b9b7 	.word	0x0810b9b7
 810b938:	0810ba25 	.word	0x0810ba25
 810b93c:	0810ba25 	.word	0x0810ba25
 810b940:	0810ba25 	.word	0x0810ba25
 810b944:	0810b9c7 	.word	0x0810b9c7
 810b948:	0810ba25 	.word	0x0810ba25
 810b94c:	0810ba25 	.word	0x0810ba25
 810b950:	0810ba25 	.word	0x0810ba25
 810b954:	0810ba25 	.word	0x0810ba25
 810b958:	0810ba25 	.word	0x0810ba25
 810b95c:	0810ba25 	.word	0x0810ba25
 810b960:	0810ba25 	.word	0x0810ba25
 810b964:	0810b9d7 	.word	0x0810b9d7
 810b968:	0810ba25 	.word	0x0810ba25
 810b96c:	0810ba25 	.word	0x0810ba25
 810b970:	0810ba25 	.word	0x0810ba25
 810b974:	0810ba25 	.word	0x0810ba25
 810b978:	0810ba25 	.word	0x0810ba25
 810b97c:	0810ba25 	.word	0x0810ba25
 810b980:	0810ba25 	.word	0x0810ba25
 810b984:	0810ba25 	.word	0x0810ba25
 810b988:	0810ba25 	.word	0x0810ba25
 810b98c:	0810ba25 	.word	0x0810ba25
 810b990:	0810ba25 	.word	0x0810ba25
 810b994:	0810ba25 	.word	0x0810ba25
 810b998:	0810ba25 	.word	0x0810ba25
 810b99c:	0810ba25 	.word	0x0810ba25
 810b9a0:	0810ba25 	.word	0x0810ba25
 810b9a4:	0810ba17 	.word	0x0810ba17
 810b9a8:	2b40      	cmp	r3, #64	@ 0x40
 810b9aa:	d037      	beq.n	810ba1c <UART_SetConfig+0x6bc>
 810b9ac:	e03a      	b.n	810ba24 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810b9ae:	f7fd f9c3 	bl	8108d38 <HAL_RCCEx_GetD3PCLK1Freq>
 810b9b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b9b4:	e03c      	b.n	810ba30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b9b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b9ba:	4618      	mov	r0, r3
 810b9bc:	f7fd f9d2 	bl	8108d64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b9c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b9c4:	e034      	b.n	810ba30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b9c6:	f107 0318 	add.w	r3, r7, #24
 810b9ca:	4618      	mov	r0, r3
 810b9cc:	f7fd fb1e 	bl	810900c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b9d0:	69fb      	ldr	r3, [r7, #28]
 810b9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b9d4:	e02c      	b.n	810ba30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b9d6:	4b09      	ldr	r3, [pc, #36]	@ (810b9fc <UART_SetConfig+0x69c>)
 810b9d8:	681b      	ldr	r3, [r3, #0]
 810b9da:	f003 0320 	and.w	r3, r3, #32
 810b9de:	2b00      	cmp	r3, #0
 810b9e0:	d016      	beq.n	810ba10 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b9e2:	4b06      	ldr	r3, [pc, #24]	@ (810b9fc <UART_SetConfig+0x69c>)
 810b9e4:	681b      	ldr	r3, [r3, #0]
 810b9e6:	08db      	lsrs	r3, r3, #3
 810b9e8:	f003 0303 	and.w	r3, r3, #3
 810b9ec:	4a07      	ldr	r2, [pc, #28]	@ (810ba0c <UART_SetConfig+0x6ac>)
 810b9ee:	fa22 f303 	lsr.w	r3, r2, r3
 810b9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b9f4:	e01c      	b.n	810ba30 <UART_SetConfig+0x6d0>
 810b9f6:	bf00      	nop
 810b9f8:	40011400 	.word	0x40011400
 810b9fc:	58024400 	.word	0x58024400
 810ba00:	40007800 	.word	0x40007800
 810ba04:	40007c00 	.word	0x40007c00
 810ba08:	58000c00 	.word	0x58000c00
 810ba0c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810ba10:	4b9d      	ldr	r3, [pc, #628]	@ (810bc88 <UART_SetConfig+0x928>)
 810ba12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ba14:	e00c      	b.n	810ba30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810ba16:	4b9d      	ldr	r3, [pc, #628]	@ (810bc8c <UART_SetConfig+0x92c>)
 810ba18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ba1a:	e009      	b.n	810ba30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810ba1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810ba20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ba22:	e005      	b.n	810ba30 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810ba24:	2300      	movs	r3, #0
 810ba26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810ba28:	2301      	movs	r3, #1
 810ba2a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810ba2e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810ba30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ba32:	2b00      	cmp	r3, #0
 810ba34:	f000 81de 	beq.w	810bdf4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810ba38:	697b      	ldr	r3, [r7, #20]
 810ba3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ba3c:	4a94      	ldr	r2, [pc, #592]	@ (810bc90 <UART_SetConfig+0x930>)
 810ba3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810ba42:	461a      	mov	r2, r3
 810ba44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ba46:	fbb3 f3f2 	udiv	r3, r3, r2
 810ba4a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810ba4c:	697b      	ldr	r3, [r7, #20]
 810ba4e:	685a      	ldr	r2, [r3, #4]
 810ba50:	4613      	mov	r3, r2
 810ba52:	005b      	lsls	r3, r3, #1
 810ba54:	4413      	add	r3, r2
 810ba56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ba58:	429a      	cmp	r2, r3
 810ba5a:	d305      	bcc.n	810ba68 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810ba5c:	697b      	ldr	r3, [r7, #20]
 810ba5e:	685b      	ldr	r3, [r3, #4]
 810ba60:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810ba62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ba64:	429a      	cmp	r2, r3
 810ba66:	d903      	bls.n	810ba70 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810ba68:	2301      	movs	r3, #1
 810ba6a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810ba6e:	e1c1      	b.n	810bdf4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810ba70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ba72:	2200      	movs	r2, #0
 810ba74:	60bb      	str	r3, [r7, #8]
 810ba76:	60fa      	str	r2, [r7, #12]
 810ba78:	697b      	ldr	r3, [r7, #20]
 810ba7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ba7c:	4a84      	ldr	r2, [pc, #528]	@ (810bc90 <UART_SetConfig+0x930>)
 810ba7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810ba82:	b29b      	uxth	r3, r3
 810ba84:	2200      	movs	r2, #0
 810ba86:	603b      	str	r3, [r7, #0]
 810ba88:	607a      	str	r2, [r7, #4]
 810ba8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810ba8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810ba92:	f7f5 f981 	bl	8100d98 <__aeabi_uldivmod>
 810ba96:	4602      	mov	r2, r0
 810ba98:	460b      	mov	r3, r1
 810ba9a:	4610      	mov	r0, r2
 810ba9c:	4619      	mov	r1, r3
 810ba9e:	f04f 0200 	mov.w	r2, #0
 810baa2:	f04f 0300 	mov.w	r3, #0
 810baa6:	020b      	lsls	r3, r1, #8
 810baa8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810baac:	0202      	lsls	r2, r0, #8
 810baae:	6979      	ldr	r1, [r7, #20]
 810bab0:	6849      	ldr	r1, [r1, #4]
 810bab2:	0849      	lsrs	r1, r1, #1
 810bab4:	2000      	movs	r0, #0
 810bab6:	460c      	mov	r4, r1
 810bab8:	4605      	mov	r5, r0
 810baba:	eb12 0804 	adds.w	r8, r2, r4
 810babe:	eb43 0905 	adc.w	r9, r3, r5
 810bac2:	697b      	ldr	r3, [r7, #20]
 810bac4:	685b      	ldr	r3, [r3, #4]
 810bac6:	2200      	movs	r2, #0
 810bac8:	469a      	mov	sl, r3
 810baca:	4693      	mov	fp, r2
 810bacc:	4652      	mov	r2, sl
 810bace:	465b      	mov	r3, fp
 810bad0:	4640      	mov	r0, r8
 810bad2:	4649      	mov	r1, r9
 810bad4:	f7f5 f960 	bl	8100d98 <__aeabi_uldivmod>
 810bad8:	4602      	mov	r2, r0
 810bada:	460b      	mov	r3, r1
 810badc:	4613      	mov	r3, r2
 810bade:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810bae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bae2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810bae6:	d308      	bcc.n	810bafa <UART_SetConfig+0x79a>
 810bae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810baea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810baee:	d204      	bcs.n	810bafa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810baf0:	697b      	ldr	r3, [r7, #20]
 810baf2:	681b      	ldr	r3, [r3, #0]
 810baf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810baf6:	60da      	str	r2, [r3, #12]
 810baf8:	e17c      	b.n	810bdf4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810bafa:	2301      	movs	r3, #1
 810bafc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810bb00:	e178      	b.n	810bdf4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810bb02:	697b      	ldr	r3, [r7, #20]
 810bb04:	69db      	ldr	r3, [r3, #28]
 810bb06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810bb0a:	f040 80c5 	bne.w	810bc98 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810bb0e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810bb12:	2b20      	cmp	r3, #32
 810bb14:	dc48      	bgt.n	810bba8 <UART_SetConfig+0x848>
 810bb16:	2b00      	cmp	r3, #0
 810bb18:	db7b      	blt.n	810bc12 <UART_SetConfig+0x8b2>
 810bb1a:	2b20      	cmp	r3, #32
 810bb1c:	d879      	bhi.n	810bc12 <UART_SetConfig+0x8b2>
 810bb1e:	a201      	add	r2, pc, #4	@ (adr r2, 810bb24 <UART_SetConfig+0x7c4>)
 810bb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bb24:	0810bbaf 	.word	0x0810bbaf
 810bb28:	0810bbb7 	.word	0x0810bbb7
 810bb2c:	0810bc13 	.word	0x0810bc13
 810bb30:	0810bc13 	.word	0x0810bc13
 810bb34:	0810bbbf 	.word	0x0810bbbf
 810bb38:	0810bc13 	.word	0x0810bc13
 810bb3c:	0810bc13 	.word	0x0810bc13
 810bb40:	0810bc13 	.word	0x0810bc13
 810bb44:	0810bbcf 	.word	0x0810bbcf
 810bb48:	0810bc13 	.word	0x0810bc13
 810bb4c:	0810bc13 	.word	0x0810bc13
 810bb50:	0810bc13 	.word	0x0810bc13
 810bb54:	0810bc13 	.word	0x0810bc13
 810bb58:	0810bc13 	.word	0x0810bc13
 810bb5c:	0810bc13 	.word	0x0810bc13
 810bb60:	0810bc13 	.word	0x0810bc13
 810bb64:	0810bbdf 	.word	0x0810bbdf
 810bb68:	0810bc13 	.word	0x0810bc13
 810bb6c:	0810bc13 	.word	0x0810bc13
 810bb70:	0810bc13 	.word	0x0810bc13
 810bb74:	0810bc13 	.word	0x0810bc13
 810bb78:	0810bc13 	.word	0x0810bc13
 810bb7c:	0810bc13 	.word	0x0810bc13
 810bb80:	0810bc13 	.word	0x0810bc13
 810bb84:	0810bc13 	.word	0x0810bc13
 810bb88:	0810bc13 	.word	0x0810bc13
 810bb8c:	0810bc13 	.word	0x0810bc13
 810bb90:	0810bc13 	.word	0x0810bc13
 810bb94:	0810bc13 	.word	0x0810bc13
 810bb98:	0810bc13 	.word	0x0810bc13
 810bb9c:	0810bc13 	.word	0x0810bc13
 810bba0:	0810bc13 	.word	0x0810bc13
 810bba4:	0810bc05 	.word	0x0810bc05
 810bba8:	2b40      	cmp	r3, #64	@ 0x40
 810bbaa:	d02e      	beq.n	810bc0a <UART_SetConfig+0x8aa>
 810bbac:	e031      	b.n	810bc12 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810bbae:	f7fb f90d 	bl	8106dcc <HAL_RCC_GetPCLK1Freq>
 810bbb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810bbb4:	e033      	b.n	810bc1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810bbb6:	f7fb f91f 	bl	8106df8 <HAL_RCC_GetPCLK2Freq>
 810bbba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810bbbc:	e02f      	b.n	810bc1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bbbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810bbc2:	4618      	mov	r0, r3
 810bbc4:	f7fd f8ce 	bl	8108d64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810bbc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bbca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bbcc:	e027      	b.n	810bc1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bbce:	f107 0318 	add.w	r3, r7, #24
 810bbd2:	4618      	mov	r0, r3
 810bbd4:	f7fd fa1a 	bl	810900c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810bbd8:	69fb      	ldr	r3, [r7, #28]
 810bbda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bbdc:	e01f      	b.n	810bc1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810bbde:	4b2d      	ldr	r3, [pc, #180]	@ (810bc94 <UART_SetConfig+0x934>)
 810bbe0:	681b      	ldr	r3, [r3, #0]
 810bbe2:	f003 0320 	and.w	r3, r3, #32
 810bbe6:	2b00      	cmp	r3, #0
 810bbe8:	d009      	beq.n	810bbfe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810bbea:	4b2a      	ldr	r3, [pc, #168]	@ (810bc94 <UART_SetConfig+0x934>)
 810bbec:	681b      	ldr	r3, [r3, #0]
 810bbee:	08db      	lsrs	r3, r3, #3
 810bbf0:	f003 0303 	and.w	r3, r3, #3
 810bbf4:	4a24      	ldr	r2, [pc, #144]	@ (810bc88 <UART_SetConfig+0x928>)
 810bbf6:	fa22 f303 	lsr.w	r3, r2, r3
 810bbfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810bbfc:	e00f      	b.n	810bc1e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810bbfe:	4b22      	ldr	r3, [pc, #136]	@ (810bc88 <UART_SetConfig+0x928>)
 810bc00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bc02:	e00c      	b.n	810bc1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810bc04:	4b21      	ldr	r3, [pc, #132]	@ (810bc8c <UART_SetConfig+0x92c>)
 810bc06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bc08:	e009      	b.n	810bc1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810bc0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810bc0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bc10:	e005      	b.n	810bc1e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810bc12:	2300      	movs	r3, #0
 810bc14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810bc16:	2301      	movs	r3, #1
 810bc18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810bc1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810bc1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810bc20:	2b00      	cmp	r3, #0
 810bc22:	f000 80e7 	beq.w	810bdf4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810bc26:	697b      	ldr	r3, [r7, #20]
 810bc28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810bc2a:	4a19      	ldr	r2, [pc, #100]	@ (810bc90 <UART_SetConfig+0x930>)
 810bc2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810bc30:	461a      	mov	r2, r3
 810bc32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810bc34:	fbb3 f3f2 	udiv	r3, r3, r2
 810bc38:	005a      	lsls	r2, r3, #1
 810bc3a:	697b      	ldr	r3, [r7, #20]
 810bc3c:	685b      	ldr	r3, [r3, #4]
 810bc3e:	085b      	lsrs	r3, r3, #1
 810bc40:	441a      	add	r2, r3
 810bc42:	697b      	ldr	r3, [r7, #20]
 810bc44:	685b      	ldr	r3, [r3, #4]
 810bc46:	fbb2 f3f3 	udiv	r3, r2, r3
 810bc4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810bc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc4e:	2b0f      	cmp	r3, #15
 810bc50:	d916      	bls.n	810bc80 <UART_SetConfig+0x920>
 810bc52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810bc58:	d212      	bcs.n	810bc80 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810bc5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc5c:	b29b      	uxth	r3, r3
 810bc5e:	f023 030f 	bic.w	r3, r3, #15
 810bc62:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810bc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc66:	085b      	lsrs	r3, r3, #1
 810bc68:	b29b      	uxth	r3, r3
 810bc6a:	f003 0307 	and.w	r3, r3, #7
 810bc6e:	b29a      	uxth	r2, r3
 810bc70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810bc72:	4313      	orrs	r3, r2
 810bc74:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810bc76:	697b      	ldr	r3, [r7, #20]
 810bc78:	681b      	ldr	r3, [r3, #0]
 810bc7a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810bc7c:	60da      	str	r2, [r3, #12]
 810bc7e:	e0b9      	b.n	810bdf4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810bc80:	2301      	movs	r3, #1
 810bc82:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810bc86:	e0b5      	b.n	810bdf4 <UART_SetConfig+0xa94>
 810bc88:	03d09000 	.word	0x03d09000
 810bc8c:	003d0900 	.word	0x003d0900
 810bc90:	081117b0 	.word	0x081117b0
 810bc94:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810bc98:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810bc9c:	2b20      	cmp	r3, #32
 810bc9e:	dc49      	bgt.n	810bd34 <UART_SetConfig+0x9d4>
 810bca0:	2b00      	cmp	r3, #0
 810bca2:	db7c      	blt.n	810bd9e <UART_SetConfig+0xa3e>
 810bca4:	2b20      	cmp	r3, #32
 810bca6:	d87a      	bhi.n	810bd9e <UART_SetConfig+0xa3e>
 810bca8:	a201      	add	r2, pc, #4	@ (adr r2, 810bcb0 <UART_SetConfig+0x950>)
 810bcaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bcae:	bf00      	nop
 810bcb0:	0810bd3b 	.word	0x0810bd3b
 810bcb4:	0810bd43 	.word	0x0810bd43
 810bcb8:	0810bd9f 	.word	0x0810bd9f
 810bcbc:	0810bd9f 	.word	0x0810bd9f
 810bcc0:	0810bd4b 	.word	0x0810bd4b
 810bcc4:	0810bd9f 	.word	0x0810bd9f
 810bcc8:	0810bd9f 	.word	0x0810bd9f
 810bccc:	0810bd9f 	.word	0x0810bd9f
 810bcd0:	0810bd5b 	.word	0x0810bd5b
 810bcd4:	0810bd9f 	.word	0x0810bd9f
 810bcd8:	0810bd9f 	.word	0x0810bd9f
 810bcdc:	0810bd9f 	.word	0x0810bd9f
 810bce0:	0810bd9f 	.word	0x0810bd9f
 810bce4:	0810bd9f 	.word	0x0810bd9f
 810bce8:	0810bd9f 	.word	0x0810bd9f
 810bcec:	0810bd9f 	.word	0x0810bd9f
 810bcf0:	0810bd6b 	.word	0x0810bd6b
 810bcf4:	0810bd9f 	.word	0x0810bd9f
 810bcf8:	0810bd9f 	.word	0x0810bd9f
 810bcfc:	0810bd9f 	.word	0x0810bd9f
 810bd00:	0810bd9f 	.word	0x0810bd9f
 810bd04:	0810bd9f 	.word	0x0810bd9f
 810bd08:	0810bd9f 	.word	0x0810bd9f
 810bd0c:	0810bd9f 	.word	0x0810bd9f
 810bd10:	0810bd9f 	.word	0x0810bd9f
 810bd14:	0810bd9f 	.word	0x0810bd9f
 810bd18:	0810bd9f 	.word	0x0810bd9f
 810bd1c:	0810bd9f 	.word	0x0810bd9f
 810bd20:	0810bd9f 	.word	0x0810bd9f
 810bd24:	0810bd9f 	.word	0x0810bd9f
 810bd28:	0810bd9f 	.word	0x0810bd9f
 810bd2c:	0810bd9f 	.word	0x0810bd9f
 810bd30:	0810bd91 	.word	0x0810bd91
 810bd34:	2b40      	cmp	r3, #64	@ 0x40
 810bd36:	d02e      	beq.n	810bd96 <UART_SetConfig+0xa36>
 810bd38:	e031      	b.n	810bd9e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810bd3a:	f7fb f847 	bl	8106dcc <HAL_RCC_GetPCLK1Freq>
 810bd3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810bd40:	e033      	b.n	810bdaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810bd42:	f7fb f859 	bl	8106df8 <HAL_RCC_GetPCLK2Freq>
 810bd46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810bd48:	e02f      	b.n	810bdaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bd4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810bd4e:	4618      	mov	r0, r3
 810bd50:	f7fd f808 	bl	8108d64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810bd54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bd56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bd58:	e027      	b.n	810bdaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bd5a:	f107 0318 	add.w	r3, r7, #24
 810bd5e:	4618      	mov	r0, r3
 810bd60:	f7fd f954 	bl	810900c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810bd64:	69fb      	ldr	r3, [r7, #28]
 810bd66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bd68:	e01f      	b.n	810bdaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810bd6a:	4b2d      	ldr	r3, [pc, #180]	@ (810be20 <UART_SetConfig+0xac0>)
 810bd6c:	681b      	ldr	r3, [r3, #0]
 810bd6e:	f003 0320 	and.w	r3, r3, #32
 810bd72:	2b00      	cmp	r3, #0
 810bd74:	d009      	beq.n	810bd8a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810bd76:	4b2a      	ldr	r3, [pc, #168]	@ (810be20 <UART_SetConfig+0xac0>)
 810bd78:	681b      	ldr	r3, [r3, #0]
 810bd7a:	08db      	lsrs	r3, r3, #3
 810bd7c:	f003 0303 	and.w	r3, r3, #3
 810bd80:	4a28      	ldr	r2, [pc, #160]	@ (810be24 <UART_SetConfig+0xac4>)
 810bd82:	fa22 f303 	lsr.w	r3, r2, r3
 810bd86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810bd88:	e00f      	b.n	810bdaa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810bd8a:	4b26      	ldr	r3, [pc, #152]	@ (810be24 <UART_SetConfig+0xac4>)
 810bd8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bd8e:	e00c      	b.n	810bdaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810bd90:	4b25      	ldr	r3, [pc, #148]	@ (810be28 <UART_SetConfig+0xac8>)
 810bd92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bd94:	e009      	b.n	810bdaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810bd96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810bd9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bd9c:	e005      	b.n	810bdaa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810bd9e:	2300      	movs	r3, #0
 810bda0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810bda2:	2301      	movs	r3, #1
 810bda4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810bda8:	bf00      	nop
    }

    if (pclk != 0U)
 810bdaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810bdac:	2b00      	cmp	r3, #0
 810bdae:	d021      	beq.n	810bdf4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810bdb0:	697b      	ldr	r3, [r7, #20]
 810bdb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810bdb4:	4a1d      	ldr	r2, [pc, #116]	@ (810be2c <UART_SetConfig+0xacc>)
 810bdb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810bdba:	461a      	mov	r2, r3
 810bdbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810bdbe:	fbb3 f2f2 	udiv	r2, r3, r2
 810bdc2:	697b      	ldr	r3, [r7, #20]
 810bdc4:	685b      	ldr	r3, [r3, #4]
 810bdc6:	085b      	lsrs	r3, r3, #1
 810bdc8:	441a      	add	r2, r3
 810bdca:	697b      	ldr	r3, [r7, #20]
 810bdcc:	685b      	ldr	r3, [r3, #4]
 810bdce:	fbb2 f3f3 	udiv	r3, r2, r3
 810bdd2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810bdd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bdd6:	2b0f      	cmp	r3, #15
 810bdd8:	d909      	bls.n	810bdee <UART_SetConfig+0xa8e>
 810bdda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810bde0:	d205      	bcs.n	810bdee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810bde2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bde4:	b29a      	uxth	r2, r3
 810bde6:	697b      	ldr	r3, [r7, #20]
 810bde8:	681b      	ldr	r3, [r3, #0]
 810bdea:	60da      	str	r2, [r3, #12]
 810bdec:	e002      	b.n	810bdf4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810bdee:	2301      	movs	r3, #1
 810bdf0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810bdf4:	697b      	ldr	r3, [r7, #20]
 810bdf6:	2201      	movs	r2, #1
 810bdf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810bdfc:	697b      	ldr	r3, [r7, #20]
 810bdfe:	2201      	movs	r2, #1
 810be00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810be04:	697b      	ldr	r3, [r7, #20]
 810be06:	2200      	movs	r2, #0
 810be08:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810be0a:	697b      	ldr	r3, [r7, #20]
 810be0c:	2200      	movs	r2, #0
 810be0e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810be10:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810be14:	4618      	mov	r0, r3
 810be16:	3748      	adds	r7, #72	@ 0x48
 810be18:	46bd      	mov	sp, r7
 810be1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810be1e:	bf00      	nop
 810be20:	58024400 	.word	0x58024400
 810be24:	03d09000 	.word	0x03d09000
 810be28:	003d0900 	.word	0x003d0900
 810be2c:	081117b0 	.word	0x081117b0

0810be30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810be30:	b480      	push	{r7}
 810be32:	b083      	sub	sp, #12
 810be34:	af00      	add	r7, sp, #0
 810be36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810be38:	687b      	ldr	r3, [r7, #4]
 810be3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810be3c:	f003 0308 	and.w	r3, r3, #8
 810be40:	2b00      	cmp	r3, #0
 810be42:	d00a      	beq.n	810be5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810be44:	687b      	ldr	r3, [r7, #4]
 810be46:	681b      	ldr	r3, [r3, #0]
 810be48:	685b      	ldr	r3, [r3, #4]
 810be4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810be4e:	687b      	ldr	r3, [r7, #4]
 810be50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810be52:	687b      	ldr	r3, [r7, #4]
 810be54:	681b      	ldr	r3, [r3, #0]
 810be56:	430a      	orrs	r2, r1
 810be58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810be5a:	687b      	ldr	r3, [r7, #4]
 810be5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810be5e:	f003 0301 	and.w	r3, r3, #1
 810be62:	2b00      	cmp	r3, #0
 810be64:	d00a      	beq.n	810be7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810be66:	687b      	ldr	r3, [r7, #4]
 810be68:	681b      	ldr	r3, [r3, #0]
 810be6a:	685b      	ldr	r3, [r3, #4]
 810be6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810be70:	687b      	ldr	r3, [r7, #4]
 810be72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810be74:	687b      	ldr	r3, [r7, #4]
 810be76:	681b      	ldr	r3, [r3, #0]
 810be78:	430a      	orrs	r2, r1
 810be7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810be7c:	687b      	ldr	r3, [r7, #4]
 810be7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810be80:	f003 0302 	and.w	r3, r3, #2
 810be84:	2b00      	cmp	r3, #0
 810be86:	d00a      	beq.n	810be9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810be88:	687b      	ldr	r3, [r7, #4]
 810be8a:	681b      	ldr	r3, [r3, #0]
 810be8c:	685b      	ldr	r3, [r3, #4]
 810be8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810be92:	687b      	ldr	r3, [r7, #4]
 810be94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810be96:	687b      	ldr	r3, [r7, #4]
 810be98:	681b      	ldr	r3, [r3, #0]
 810be9a:	430a      	orrs	r2, r1
 810be9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810be9e:	687b      	ldr	r3, [r7, #4]
 810bea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810bea2:	f003 0304 	and.w	r3, r3, #4
 810bea6:	2b00      	cmp	r3, #0
 810bea8:	d00a      	beq.n	810bec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810beaa:	687b      	ldr	r3, [r7, #4]
 810beac:	681b      	ldr	r3, [r3, #0]
 810beae:	685b      	ldr	r3, [r3, #4]
 810beb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810beb4:	687b      	ldr	r3, [r7, #4]
 810beb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810beb8:	687b      	ldr	r3, [r7, #4]
 810beba:	681b      	ldr	r3, [r3, #0]
 810bebc:	430a      	orrs	r2, r1
 810bebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810bec0:	687b      	ldr	r3, [r7, #4]
 810bec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810bec4:	f003 0310 	and.w	r3, r3, #16
 810bec8:	2b00      	cmp	r3, #0
 810beca:	d00a      	beq.n	810bee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810becc:	687b      	ldr	r3, [r7, #4]
 810bece:	681b      	ldr	r3, [r3, #0]
 810bed0:	689b      	ldr	r3, [r3, #8]
 810bed2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810bed6:	687b      	ldr	r3, [r7, #4]
 810bed8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810beda:	687b      	ldr	r3, [r7, #4]
 810bedc:	681b      	ldr	r3, [r3, #0]
 810bede:	430a      	orrs	r2, r1
 810bee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810bee2:	687b      	ldr	r3, [r7, #4]
 810bee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810bee6:	f003 0320 	and.w	r3, r3, #32
 810beea:	2b00      	cmp	r3, #0
 810beec:	d00a      	beq.n	810bf04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810beee:	687b      	ldr	r3, [r7, #4]
 810bef0:	681b      	ldr	r3, [r3, #0]
 810bef2:	689b      	ldr	r3, [r3, #8]
 810bef4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810bef8:	687b      	ldr	r3, [r7, #4]
 810befa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810befc:	687b      	ldr	r3, [r7, #4]
 810befe:	681b      	ldr	r3, [r3, #0]
 810bf00:	430a      	orrs	r2, r1
 810bf02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810bf04:	687b      	ldr	r3, [r7, #4]
 810bf06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810bf08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810bf0c:	2b00      	cmp	r3, #0
 810bf0e:	d01a      	beq.n	810bf46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810bf10:	687b      	ldr	r3, [r7, #4]
 810bf12:	681b      	ldr	r3, [r3, #0]
 810bf14:	685b      	ldr	r3, [r3, #4]
 810bf16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810bf1a:	687b      	ldr	r3, [r7, #4]
 810bf1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810bf1e:	687b      	ldr	r3, [r7, #4]
 810bf20:	681b      	ldr	r3, [r3, #0]
 810bf22:	430a      	orrs	r2, r1
 810bf24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810bf26:	687b      	ldr	r3, [r7, #4]
 810bf28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810bf2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810bf2e:	d10a      	bne.n	810bf46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810bf30:	687b      	ldr	r3, [r7, #4]
 810bf32:	681b      	ldr	r3, [r3, #0]
 810bf34:	685b      	ldr	r3, [r3, #4]
 810bf36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810bf3a:	687b      	ldr	r3, [r7, #4]
 810bf3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810bf3e:	687b      	ldr	r3, [r7, #4]
 810bf40:	681b      	ldr	r3, [r3, #0]
 810bf42:	430a      	orrs	r2, r1
 810bf44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810bf46:	687b      	ldr	r3, [r7, #4]
 810bf48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810bf4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810bf4e:	2b00      	cmp	r3, #0
 810bf50:	d00a      	beq.n	810bf68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810bf52:	687b      	ldr	r3, [r7, #4]
 810bf54:	681b      	ldr	r3, [r3, #0]
 810bf56:	685b      	ldr	r3, [r3, #4]
 810bf58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810bf5c:	687b      	ldr	r3, [r7, #4]
 810bf5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810bf60:	687b      	ldr	r3, [r7, #4]
 810bf62:	681b      	ldr	r3, [r3, #0]
 810bf64:	430a      	orrs	r2, r1
 810bf66:	605a      	str	r2, [r3, #4]
  }
}
 810bf68:	bf00      	nop
 810bf6a:	370c      	adds	r7, #12
 810bf6c:	46bd      	mov	sp, r7
 810bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf72:	4770      	bx	lr

0810bf74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810bf74:	b580      	push	{r7, lr}
 810bf76:	b098      	sub	sp, #96	@ 0x60
 810bf78:	af02      	add	r7, sp, #8
 810bf7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810bf7c:	687b      	ldr	r3, [r7, #4]
 810bf7e:	2200      	movs	r2, #0
 810bf80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810bf84:	f7f7 feae 	bl	8103ce4 <HAL_GetTick>
 810bf88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810bf8a:	687b      	ldr	r3, [r7, #4]
 810bf8c:	681b      	ldr	r3, [r3, #0]
 810bf8e:	681b      	ldr	r3, [r3, #0]
 810bf90:	f003 0308 	and.w	r3, r3, #8
 810bf94:	2b08      	cmp	r3, #8
 810bf96:	d12f      	bne.n	810bff8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810bf98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810bf9c:	9300      	str	r3, [sp, #0]
 810bf9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810bfa0:	2200      	movs	r2, #0
 810bfa2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810bfa6:	6878      	ldr	r0, [r7, #4]
 810bfa8:	f000 f88e 	bl	810c0c8 <UART_WaitOnFlagUntilTimeout>
 810bfac:	4603      	mov	r3, r0
 810bfae:	2b00      	cmp	r3, #0
 810bfb0:	d022      	beq.n	810bff8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810bfb2:	687b      	ldr	r3, [r7, #4]
 810bfb4:	681b      	ldr	r3, [r3, #0]
 810bfb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810bfb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bfba:	e853 3f00 	ldrex	r3, [r3]
 810bfbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810bfc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bfc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810bfc6:	653b      	str	r3, [r7, #80]	@ 0x50
 810bfc8:	687b      	ldr	r3, [r7, #4]
 810bfca:	681b      	ldr	r3, [r3, #0]
 810bfcc:	461a      	mov	r2, r3
 810bfce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810bfd0:	647b      	str	r3, [r7, #68]	@ 0x44
 810bfd2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810bfd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810bfd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810bfd8:	e841 2300 	strex	r3, r2, [r1]
 810bfdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810bfde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810bfe0:	2b00      	cmp	r3, #0
 810bfe2:	d1e6      	bne.n	810bfb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810bfe4:	687b      	ldr	r3, [r7, #4]
 810bfe6:	2220      	movs	r2, #32
 810bfe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810bfec:	687b      	ldr	r3, [r7, #4]
 810bfee:	2200      	movs	r2, #0
 810bff0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810bff4:	2303      	movs	r3, #3
 810bff6:	e063      	b.n	810c0c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810bff8:	687b      	ldr	r3, [r7, #4]
 810bffa:	681b      	ldr	r3, [r3, #0]
 810bffc:	681b      	ldr	r3, [r3, #0]
 810bffe:	f003 0304 	and.w	r3, r3, #4
 810c002:	2b04      	cmp	r3, #4
 810c004:	d149      	bne.n	810c09a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810c006:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810c00a:	9300      	str	r3, [sp, #0]
 810c00c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810c00e:	2200      	movs	r2, #0
 810c010:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810c014:	6878      	ldr	r0, [r7, #4]
 810c016:	f000 f857 	bl	810c0c8 <UART_WaitOnFlagUntilTimeout>
 810c01a:	4603      	mov	r3, r0
 810c01c:	2b00      	cmp	r3, #0
 810c01e:	d03c      	beq.n	810c09a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810c020:	687b      	ldr	r3, [r7, #4]
 810c022:	681b      	ldr	r3, [r3, #0]
 810c024:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c028:	e853 3f00 	ldrex	r3, [r3]
 810c02c:	623b      	str	r3, [r7, #32]
   return(result);
 810c02e:	6a3b      	ldr	r3, [r7, #32]
 810c030:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810c034:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810c036:	687b      	ldr	r3, [r7, #4]
 810c038:	681b      	ldr	r3, [r3, #0]
 810c03a:	461a      	mov	r2, r3
 810c03c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810c03e:	633b      	str	r3, [r7, #48]	@ 0x30
 810c040:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c042:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810c044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810c046:	e841 2300 	strex	r3, r2, [r1]
 810c04a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810c04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c04e:	2b00      	cmp	r3, #0
 810c050:	d1e6      	bne.n	810c020 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810c052:	687b      	ldr	r3, [r7, #4]
 810c054:	681b      	ldr	r3, [r3, #0]
 810c056:	3308      	adds	r3, #8
 810c058:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c05a:	693b      	ldr	r3, [r7, #16]
 810c05c:	e853 3f00 	ldrex	r3, [r3]
 810c060:	60fb      	str	r3, [r7, #12]
   return(result);
 810c062:	68fb      	ldr	r3, [r7, #12]
 810c064:	f023 0301 	bic.w	r3, r3, #1
 810c068:	64bb      	str	r3, [r7, #72]	@ 0x48
 810c06a:	687b      	ldr	r3, [r7, #4]
 810c06c:	681b      	ldr	r3, [r3, #0]
 810c06e:	3308      	adds	r3, #8
 810c070:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810c072:	61fa      	str	r2, [r7, #28]
 810c074:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c076:	69b9      	ldr	r1, [r7, #24]
 810c078:	69fa      	ldr	r2, [r7, #28]
 810c07a:	e841 2300 	strex	r3, r2, [r1]
 810c07e:	617b      	str	r3, [r7, #20]
   return(result);
 810c080:	697b      	ldr	r3, [r7, #20]
 810c082:	2b00      	cmp	r3, #0
 810c084:	d1e5      	bne.n	810c052 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810c086:	687b      	ldr	r3, [r7, #4]
 810c088:	2220      	movs	r2, #32
 810c08a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810c08e:	687b      	ldr	r3, [r7, #4]
 810c090:	2200      	movs	r2, #0
 810c092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810c096:	2303      	movs	r3, #3
 810c098:	e012      	b.n	810c0c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810c09a:	687b      	ldr	r3, [r7, #4]
 810c09c:	2220      	movs	r2, #32
 810c09e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810c0a2:	687b      	ldr	r3, [r7, #4]
 810c0a4:	2220      	movs	r2, #32
 810c0a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c0aa:	687b      	ldr	r3, [r7, #4]
 810c0ac:	2200      	movs	r2, #0
 810c0ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810c0b0:	687b      	ldr	r3, [r7, #4]
 810c0b2:	2200      	movs	r2, #0
 810c0b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810c0b6:	687b      	ldr	r3, [r7, #4]
 810c0b8:	2200      	movs	r2, #0
 810c0ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810c0be:	2300      	movs	r3, #0
}
 810c0c0:	4618      	mov	r0, r3
 810c0c2:	3758      	adds	r7, #88	@ 0x58
 810c0c4:	46bd      	mov	sp, r7
 810c0c6:	bd80      	pop	{r7, pc}

0810c0c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810c0c8:	b580      	push	{r7, lr}
 810c0ca:	b084      	sub	sp, #16
 810c0cc:	af00      	add	r7, sp, #0
 810c0ce:	60f8      	str	r0, [r7, #12]
 810c0d0:	60b9      	str	r1, [r7, #8]
 810c0d2:	603b      	str	r3, [r7, #0]
 810c0d4:	4613      	mov	r3, r2
 810c0d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810c0d8:	e04f      	b.n	810c17a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810c0da:	69bb      	ldr	r3, [r7, #24]
 810c0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c0e0:	d04b      	beq.n	810c17a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810c0e2:	f7f7 fdff 	bl	8103ce4 <HAL_GetTick>
 810c0e6:	4602      	mov	r2, r0
 810c0e8:	683b      	ldr	r3, [r7, #0]
 810c0ea:	1ad3      	subs	r3, r2, r3
 810c0ec:	69ba      	ldr	r2, [r7, #24]
 810c0ee:	429a      	cmp	r2, r3
 810c0f0:	d302      	bcc.n	810c0f8 <UART_WaitOnFlagUntilTimeout+0x30>
 810c0f2:	69bb      	ldr	r3, [r7, #24]
 810c0f4:	2b00      	cmp	r3, #0
 810c0f6:	d101      	bne.n	810c0fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810c0f8:	2303      	movs	r3, #3
 810c0fa:	e04e      	b.n	810c19a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810c0fc:	68fb      	ldr	r3, [r7, #12]
 810c0fe:	681b      	ldr	r3, [r3, #0]
 810c100:	681b      	ldr	r3, [r3, #0]
 810c102:	f003 0304 	and.w	r3, r3, #4
 810c106:	2b00      	cmp	r3, #0
 810c108:	d037      	beq.n	810c17a <UART_WaitOnFlagUntilTimeout+0xb2>
 810c10a:	68bb      	ldr	r3, [r7, #8]
 810c10c:	2b80      	cmp	r3, #128	@ 0x80
 810c10e:	d034      	beq.n	810c17a <UART_WaitOnFlagUntilTimeout+0xb2>
 810c110:	68bb      	ldr	r3, [r7, #8]
 810c112:	2b40      	cmp	r3, #64	@ 0x40
 810c114:	d031      	beq.n	810c17a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810c116:	68fb      	ldr	r3, [r7, #12]
 810c118:	681b      	ldr	r3, [r3, #0]
 810c11a:	69db      	ldr	r3, [r3, #28]
 810c11c:	f003 0308 	and.w	r3, r3, #8
 810c120:	2b08      	cmp	r3, #8
 810c122:	d110      	bne.n	810c146 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810c124:	68fb      	ldr	r3, [r7, #12]
 810c126:	681b      	ldr	r3, [r3, #0]
 810c128:	2208      	movs	r2, #8
 810c12a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810c12c:	68f8      	ldr	r0, [r7, #12]
 810c12e:	f000 f838 	bl	810c1a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810c132:	68fb      	ldr	r3, [r7, #12]
 810c134:	2208      	movs	r2, #8
 810c136:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810c13a:	68fb      	ldr	r3, [r7, #12]
 810c13c:	2200      	movs	r2, #0
 810c13e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810c142:	2301      	movs	r3, #1
 810c144:	e029      	b.n	810c19a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810c146:	68fb      	ldr	r3, [r7, #12]
 810c148:	681b      	ldr	r3, [r3, #0]
 810c14a:	69db      	ldr	r3, [r3, #28]
 810c14c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810c150:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810c154:	d111      	bne.n	810c17a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810c156:	68fb      	ldr	r3, [r7, #12]
 810c158:	681b      	ldr	r3, [r3, #0]
 810c15a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810c15e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810c160:	68f8      	ldr	r0, [r7, #12]
 810c162:	f000 f81e 	bl	810c1a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810c166:	68fb      	ldr	r3, [r7, #12]
 810c168:	2220      	movs	r2, #32
 810c16a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810c16e:	68fb      	ldr	r3, [r7, #12]
 810c170:	2200      	movs	r2, #0
 810c172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810c176:	2303      	movs	r3, #3
 810c178:	e00f      	b.n	810c19a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810c17a:	68fb      	ldr	r3, [r7, #12]
 810c17c:	681b      	ldr	r3, [r3, #0]
 810c17e:	69da      	ldr	r2, [r3, #28]
 810c180:	68bb      	ldr	r3, [r7, #8]
 810c182:	4013      	ands	r3, r2
 810c184:	68ba      	ldr	r2, [r7, #8]
 810c186:	429a      	cmp	r2, r3
 810c188:	bf0c      	ite	eq
 810c18a:	2301      	moveq	r3, #1
 810c18c:	2300      	movne	r3, #0
 810c18e:	b2db      	uxtb	r3, r3
 810c190:	461a      	mov	r2, r3
 810c192:	79fb      	ldrb	r3, [r7, #7]
 810c194:	429a      	cmp	r2, r3
 810c196:	d0a0      	beq.n	810c0da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810c198:	2300      	movs	r3, #0
}
 810c19a:	4618      	mov	r0, r3
 810c19c:	3710      	adds	r7, #16
 810c19e:	46bd      	mov	sp, r7
 810c1a0:	bd80      	pop	{r7, pc}

0810c1a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810c1a2:	b480      	push	{r7}
 810c1a4:	b095      	sub	sp, #84	@ 0x54
 810c1a6:	af00      	add	r7, sp, #0
 810c1a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810c1aa:	687b      	ldr	r3, [r7, #4]
 810c1ac:	681b      	ldr	r3, [r3, #0]
 810c1ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c1b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c1b2:	e853 3f00 	ldrex	r3, [r3]
 810c1b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810c1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c1ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810c1be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810c1c0:	687b      	ldr	r3, [r7, #4]
 810c1c2:	681b      	ldr	r3, [r3, #0]
 810c1c4:	461a      	mov	r2, r3
 810c1c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810c1c8:	643b      	str	r3, [r7, #64]	@ 0x40
 810c1ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c1cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810c1ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810c1d0:	e841 2300 	strex	r3, r2, [r1]
 810c1d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810c1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c1d8:	2b00      	cmp	r3, #0
 810c1da:	d1e6      	bne.n	810c1aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810c1dc:	687b      	ldr	r3, [r7, #4]
 810c1de:	681b      	ldr	r3, [r3, #0]
 810c1e0:	3308      	adds	r3, #8
 810c1e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c1e4:	6a3b      	ldr	r3, [r7, #32]
 810c1e6:	e853 3f00 	ldrex	r3, [r3]
 810c1ea:	61fb      	str	r3, [r7, #28]
   return(result);
 810c1ec:	69fb      	ldr	r3, [r7, #28]
 810c1ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810c1f2:	f023 0301 	bic.w	r3, r3, #1
 810c1f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 810c1f8:	687b      	ldr	r3, [r7, #4]
 810c1fa:	681b      	ldr	r3, [r3, #0]
 810c1fc:	3308      	adds	r3, #8
 810c1fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810c200:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810c202:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c204:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810c206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810c208:	e841 2300 	strex	r3, r2, [r1]
 810c20c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810c20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c210:	2b00      	cmp	r3, #0
 810c212:	d1e3      	bne.n	810c1dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c214:	687b      	ldr	r3, [r7, #4]
 810c216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810c218:	2b01      	cmp	r3, #1
 810c21a:	d118      	bne.n	810c24e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810c21c:	687b      	ldr	r3, [r7, #4]
 810c21e:	681b      	ldr	r3, [r3, #0]
 810c220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c222:	68fb      	ldr	r3, [r7, #12]
 810c224:	e853 3f00 	ldrex	r3, [r3]
 810c228:	60bb      	str	r3, [r7, #8]
   return(result);
 810c22a:	68bb      	ldr	r3, [r7, #8]
 810c22c:	f023 0310 	bic.w	r3, r3, #16
 810c230:	647b      	str	r3, [r7, #68]	@ 0x44
 810c232:	687b      	ldr	r3, [r7, #4]
 810c234:	681b      	ldr	r3, [r3, #0]
 810c236:	461a      	mov	r2, r3
 810c238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810c23a:	61bb      	str	r3, [r7, #24]
 810c23c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c23e:	6979      	ldr	r1, [r7, #20]
 810c240:	69ba      	ldr	r2, [r7, #24]
 810c242:	e841 2300 	strex	r3, r2, [r1]
 810c246:	613b      	str	r3, [r7, #16]
   return(result);
 810c248:	693b      	ldr	r3, [r7, #16]
 810c24a:	2b00      	cmp	r3, #0
 810c24c:	d1e6      	bne.n	810c21c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810c24e:	687b      	ldr	r3, [r7, #4]
 810c250:	2220      	movs	r2, #32
 810c252:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c256:	687b      	ldr	r3, [r7, #4]
 810c258:	2200      	movs	r2, #0
 810c25a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810c25c:	687b      	ldr	r3, [r7, #4]
 810c25e:	2200      	movs	r2, #0
 810c260:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810c262:	bf00      	nop
 810c264:	3754      	adds	r7, #84	@ 0x54
 810c266:	46bd      	mov	sp, r7
 810c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c26c:	4770      	bx	lr

0810c26e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810c26e:	b480      	push	{r7}
 810c270:	b085      	sub	sp, #20
 810c272:	af00      	add	r7, sp, #0
 810c274:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c276:	687b      	ldr	r3, [r7, #4]
 810c278:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810c27c:	2b01      	cmp	r3, #1
 810c27e:	d101      	bne.n	810c284 <HAL_UARTEx_DisableFifoMode+0x16>
 810c280:	2302      	movs	r3, #2
 810c282:	e027      	b.n	810c2d4 <HAL_UARTEx_DisableFifoMode+0x66>
 810c284:	687b      	ldr	r3, [r7, #4]
 810c286:	2201      	movs	r2, #1
 810c288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810c28c:	687b      	ldr	r3, [r7, #4]
 810c28e:	2224      	movs	r2, #36	@ 0x24
 810c290:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c294:	687b      	ldr	r3, [r7, #4]
 810c296:	681b      	ldr	r3, [r3, #0]
 810c298:	681b      	ldr	r3, [r3, #0]
 810c29a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c29c:	687b      	ldr	r3, [r7, #4]
 810c29e:	681b      	ldr	r3, [r3, #0]
 810c2a0:	681a      	ldr	r2, [r3, #0]
 810c2a2:	687b      	ldr	r3, [r7, #4]
 810c2a4:	681b      	ldr	r3, [r3, #0]
 810c2a6:	f022 0201 	bic.w	r2, r2, #1
 810c2aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810c2ac:	68fb      	ldr	r3, [r7, #12]
 810c2ae:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810c2b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810c2b4:	687b      	ldr	r3, [r7, #4]
 810c2b6:	2200      	movs	r2, #0
 810c2b8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c2ba:	687b      	ldr	r3, [r7, #4]
 810c2bc:	681b      	ldr	r3, [r3, #0]
 810c2be:	68fa      	ldr	r2, [r7, #12]
 810c2c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c2c2:	687b      	ldr	r3, [r7, #4]
 810c2c4:	2220      	movs	r2, #32
 810c2c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c2ca:	687b      	ldr	r3, [r7, #4]
 810c2cc:	2200      	movs	r2, #0
 810c2ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810c2d2:	2300      	movs	r3, #0
}
 810c2d4:	4618      	mov	r0, r3
 810c2d6:	3714      	adds	r7, #20
 810c2d8:	46bd      	mov	sp, r7
 810c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c2de:	4770      	bx	lr

0810c2e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810c2e0:	b580      	push	{r7, lr}
 810c2e2:	b084      	sub	sp, #16
 810c2e4:	af00      	add	r7, sp, #0
 810c2e6:	6078      	str	r0, [r7, #4]
 810c2e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c2ea:	687b      	ldr	r3, [r7, #4]
 810c2ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810c2f0:	2b01      	cmp	r3, #1
 810c2f2:	d101      	bne.n	810c2f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810c2f4:	2302      	movs	r3, #2
 810c2f6:	e02d      	b.n	810c354 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810c2f8:	687b      	ldr	r3, [r7, #4]
 810c2fa:	2201      	movs	r2, #1
 810c2fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810c300:	687b      	ldr	r3, [r7, #4]
 810c302:	2224      	movs	r2, #36	@ 0x24
 810c304:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c308:	687b      	ldr	r3, [r7, #4]
 810c30a:	681b      	ldr	r3, [r3, #0]
 810c30c:	681b      	ldr	r3, [r3, #0]
 810c30e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c310:	687b      	ldr	r3, [r7, #4]
 810c312:	681b      	ldr	r3, [r3, #0]
 810c314:	681a      	ldr	r2, [r3, #0]
 810c316:	687b      	ldr	r3, [r7, #4]
 810c318:	681b      	ldr	r3, [r3, #0]
 810c31a:	f022 0201 	bic.w	r2, r2, #1
 810c31e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810c320:	687b      	ldr	r3, [r7, #4]
 810c322:	681b      	ldr	r3, [r3, #0]
 810c324:	689b      	ldr	r3, [r3, #8]
 810c326:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810c32a:	687b      	ldr	r3, [r7, #4]
 810c32c:	681b      	ldr	r3, [r3, #0]
 810c32e:	683a      	ldr	r2, [r7, #0]
 810c330:	430a      	orrs	r2, r1
 810c332:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810c334:	6878      	ldr	r0, [r7, #4]
 810c336:	f000 f84f 	bl	810c3d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c33a:	687b      	ldr	r3, [r7, #4]
 810c33c:	681b      	ldr	r3, [r3, #0]
 810c33e:	68fa      	ldr	r2, [r7, #12]
 810c340:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c342:	687b      	ldr	r3, [r7, #4]
 810c344:	2220      	movs	r2, #32
 810c346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c34a:	687b      	ldr	r3, [r7, #4]
 810c34c:	2200      	movs	r2, #0
 810c34e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810c352:	2300      	movs	r3, #0
}
 810c354:	4618      	mov	r0, r3
 810c356:	3710      	adds	r7, #16
 810c358:	46bd      	mov	sp, r7
 810c35a:	bd80      	pop	{r7, pc}

0810c35c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810c35c:	b580      	push	{r7, lr}
 810c35e:	b084      	sub	sp, #16
 810c360:	af00      	add	r7, sp, #0
 810c362:	6078      	str	r0, [r7, #4]
 810c364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c366:	687b      	ldr	r3, [r7, #4]
 810c368:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810c36c:	2b01      	cmp	r3, #1
 810c36e:	d101      	bne.n	810c374 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810c370:	2302      	movs	r3, #2
 810c372:	e02d      	b.n	810c3d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810c374:	687b      	ldr	r3, [r7, #4]
 810c376:	2201      	movs	r2, #1
 810c378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810c37c:	687b      	ldr	r3, [r7, #4]
 810c37e:	2224      	movs	r2, #36	@ 0x24
 810c380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c384:	687b      	ldr	r3, [r7, #4]
 810c386:	681b      	ldr	r3, [r3, #0]
 810c388:	681b      	ldr	r3, [r3, #0]
 810c38a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c38c:	687b      	ldr	r3, [r7, #4]
 810c38e:	681b      	ldr	r3, [r3, #0]
 810c390:	681a      	ldr	r2, [r3, #0]
 810c392:	687b      	ldr	r3, [r7, #4]
 810c394:	681b      	ldr	r3, [r3, #0]
 810c396:	f022 0201 	bic.w	r2, r2, #1
 810c39a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810c39c:	687b      	ldr	r3, [r7, #4]
 810c39e:	681b      	ldr	r3, [r3, #0]
 810c3a0:	689b      	ldr	r3, [r3, #8]
 810c3a2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810c3a6:	687b      	ldr	r3, [r7, #4]
 810c3a8:	681b      	ldr	r3, [r3, #0]
 810c3aa:	683a      	ldr	r2, [r7, #0]
 810c3ac:	430a      	orrs	r2, r1
 810c3ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810c3b0:	6878      	ldr	r0, [r7, #4]
 810c3b2:	f000 f811 	bl	810c3d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c3b6:	687b      	ldr	r3, [r7, #4]
 810c3b8:	681b      	ldr	r3, [r3, #0]
 810c3ba:	68fa      	ldr	r2, [r7, #12]
 810c3bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c3be:	687b      	ldr	r3, [r7, #4]
 810c3c0:	2220      	movs	r2, #32
 810c3c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c3c6:	687b      	ldr	r3, [r7, #4]
 810c3c8:	2200      	movs	r2, #0
 810c3ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810c3ce:	2300      	movs	r3, #0
}
 810c3d0:	4618      	mov	r0, r3
 810c3d2:	3710      	adds	r7, #16
 810c3d4:	46bd      	mov	sp, r7
 810c3d6:	bd80      	pop	{r7, pc}

0810c3d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810c3d8:	b480      	push	{r7}
 810c3da:	b085      	sub	sp, #20
 810c3dc:	af00      	add	r7, sp, #0
 810c3de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810c3e0:	687b      	ldr	r3, [r7, #4]
 810c3e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810c3e4:	2b00      	cmp	r3, #0
 810c3e6:	d108      	bne.n	810c3fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810c3e8:	687b      	ldr	r3, [r7, #4]
 810c3ea:	2201      	movs	r2, #1
 810c3ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810c3f0:	687b      	ldr	r3, [r7, #4]
 810c3f2:	2201      	movs	r2, #1
 810c3f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810c3f8:	e031      	b.n	810c45e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810c3fa:	2310      	movs	r3, #16
 810c3fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810c3fe:	2310      	movs	r3, #16
 810c400:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810c402:	687b      	ldr	r3, [r7, #4]
 810c404:	681b      	ldr	r3, [r3, #0]
 810c406:	689b      	ldr	r3, [r3, #8]
 810c408:	0e5b      	lsrs	r3, r3, #25
 810c40a:	b2db      	uxtb	r3, r3
 810c40c:	f003 0307 	and.w	r3, r3, #7
 810c410:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810c412:	687b      	ldr	r3, [r7, #4]
 810c414:	681b      	ldr	r3, [r3, #0]
 810c416:	689b      	ldr	r3, [r3, #8]
 810c418:	0f5b      	lsrs	r3, r3, #29
 810c41a:	b2db      	uxtb	r3, r3
 810c41c:	f003 0307 	and.w	r3, r3, #7
 810c420:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810c422:	7bbb      	ldrb	r3, [r7, #14]
 810c424:	7b3a      	ldrb	r2, [r7, #12]
 810c426:	4911      	ldr	r1, [pc, #68]	@ (810c46c <UARTEx_SetNbDataToProcess+0x94>)
 810c428:	5c8a      	ldrb	r2, [r1, r2]
 810c42a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810c42e:	7b3a      	ldrb	r2, [r7, #12]
 810c430:	490f      	ldr	r1, [pc, #60]	@ (810c470 <UARTEx_SetNbDataToProcess+0x98>)
 810c432:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810c434:	fb93 f3f2 	sdiv	r3, r3, r2
 810c438:	b29a      	uxth	r2, r3
 810c43a:	687b      	ldr	r3, [r7, #4]
 810c43c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810c440:	7bfb      	ldrb	r3, [r7, #15]
 810c442:	7b7a      	ldrb	r2, [r7, #13]
 810c444:	4909      	ldr	r1, [pc, #36]	@ (810c46c <UARTEx_SetNbDataToProcess+0x94>)
 810c446:	5c8a      	ldrb	r2, [r1, r2]
 810c448:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810c44c:	7b7a      	ldrb	r2, [r7, #13]
 810c44e:	4908      	ldr	r1, [pc, #32]	@ (810c470 <UARTEx_SetNbDataToProcess+0x98>)
 810c450:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810c452:	fb93 f3f2 	sdiv	r3, r3, r2
 810c456:	b29a      	uxth	r2, r3
 810c458:	687b      	ldr	r3, [r7, #4]
 810c45a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810c45e:	bf00      	nop
 810c460:	3714      	adds	r7, #20
 810c462:	46bd      	mov	sp, r7
 810c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c468:	4770      	bx	lr
 810c46a:	bf00      	nop
 810c46c:	081117c8 	.word	0x081117c8
 810c470:	081117d0 	.word	0x081117d0

0810c474 <arm_mat_trans_f32>:
 810c474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c478:	8802      	ldrh	r2, [r0, #0]
 810c47a:	884b      	ldrh	r3, [r1, #2]
 810c47c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810c480:	684f      	ldr	r7, [r1, #4]
 810c482:	8840      	ldrh	r0, [r0, #2]
 810c484:	4293      	cmp	r3, r2
 810c486:	b083      	sub	sp, #12
 810c488:	d14c      	bne.n	810c524 <arm_mat_trans_f32+0xb0>
 810c48a:	f8b1 e000 	ldrh.w	lr, [r1]
 810c48e:	4586      	cmp	lr, r0
 810c490:	d148      	bne.n	810c524 <arm_mat_trans_f32+0xb0>
 810c492:	ea4f 089e 	mov.w	r8, lr, lsr #2
 810c496:	009c      	lsls	r4, r3, #2
 810c498:	f00e 0e03 	and.w	lr, lr, #3
 810c49c:	fb08 f904 	mul.w	r9, r8, r4
 810c4a0:	ea4f 028e 	mov.w	r2, lr, lsl #2
 810c4a4:	011d      	lsls	r5, r3, #4
 810c4a6:	00db      	lsls	r3, r3, #3
 810c4a8:	ea4f 0989 	mov.w	r9, r9, lsl #2
 810c4ac:	eb07 0a04 	add.w	sl, r7, r4
 810c4b0:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 810c4b4:	9201      	str	r2, [sp, #4]
 810c4b6:	9300      	str	r3, [sp, #0]
 810c4b8:	463b      	mov	r3, r7
 810c4ba:	f1b8 0f00 	cmp.w	r8, #0
 810c4be:	d01d      	beq.n	810c4fc <arm_mat_trans_f32+0x88>
 810c4c0:	9900      	ldr	r1, [sp, #0]
 810c4c2:	f10c 0210 	add.w	r2, ip, #16
 810c4c6:	4439      	add	r1, r7
 810c4c8:	4640      	mov	r0, r8
 810c4ca:	f852 6c10 	ldr.w	r6, [r2, #-16]
 810c4ce:	601e      	str	r6, [r3, #0]
 810c4d0:	ed52 7a03 	vldr	s15, [r2, #-12]
 810c4d4:	191e      	adds	r6, r3, r4
 810c4d6:	edc6 7a00 	vstr	s15, [r6]
 810c4da:	f852 6c08 	ldr.w	r6, [r2, #-8]
 810c4de:	600e      	str	r6, [r1, #0]
 810c4e0:	ed52 7a01 	vldr	s15, [r2, #-4]
 810c4e4:	190e      	adds	r6, r1, r4
 810c4e6:	3801      	subs	r0, #1
 810c4e8:	442b      	add	r3, r5
 810c4ea:	f102 0210 	add.w	r2, r2, #16
 810c4ee:	edc6 7a00 	vstr	s15, [r6]
 810c4f2:	4429      	add	r1, r5
 810c4f4:	d1e9      	bne.n	810c4ca <arm_mat_trans_f32+0x56>
 810c4f6:	44dc      	add	ip, fp
 810c4f8:	eb09 0307 	add.w	r3, r9, r7
 810c4fc:	f1be 0f00 	cmp.w	lr, #0
 810c500:	d009      	beq.n	810c516 <arm_mat_trans_f32+0xa2>
 810c502:	4672      	mov	r2, lr
 810c504:	4661      	mov	r1, ip
 810c506:	f851 0b04 	ldr.w	r0, [r1], #4
 810c50a:	6018      	str	r0, [r3, #0]
 810c50c:	3a01      	subs	r2, #1
 810c50e:	4423      	add	r3, r4
 810c510:	d1f9      	bne.n	810c506 <arm_mat_trans_f32+0x92>
 810c512:	9b01      	ldr	r3, [sp, #4]
 810c514:	449c      	add	ip, r3
 810c516:	3704      	adds	r7, #4
 810c518:	4557      	cmp	r7, sl
 810c51a:	d1cd      	bne.n	810c4b8 <arm_mat_trans_f32+0x44>
 810c51c:	2000      	movs	r0, #0
 810c51e:	b003      	add	sp, #12
 810c520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c524:	f06f 0002 	mvn.w	r0, #2
 810c528:	e7f9      	b.n	810c51e <arm_mat_trans_f32+0xaa>
 810c52a:	bf00      	nop

0810c52c <arm_mat_sub_f32>:
 810c52c:	b4f0      	push	{r4, r5, r6, r7}
 810c52e:	e9d1 4700 	ldrd	r4, r7, [r1]
 810c532:	6803      	ldr	r3, [r0, #0]
 810c534:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810c538:	6856      	ldr	r6, [r2, #4]
 810c53a:	42a3      	cmp	r3, r4
 810c53c:	d15d      	bne.n	810c5fa <arm_mat_sub_f32+0xce>
 810c53e:	6812      	ldr	r2, [r2, #0]
 810c540:	4293      	cmp	r3, r2
 810c542:	d15a      	bne.n	810c5fa <arm_mat_sub_f32+0xce>
 810c544:	8803      	ldrh	r3, [r0, #0]
 810c546:	8844      	ldrh	r4, [r0, #2]
 810c548:	fb04 f403 	mul.w	r4, r4, r3
 810c54c:	08a5      	lsrs	r5, r4, #2
 810c54e:	d032      	beq.n	810c5b6 <arm_mat_sub_f32+0x8a>
 810c550:	f10c 0110 	add.w	r1, ip, #16
 810c554:	f107 0210 	add.w	r2, r7, #16
 810c558:	f106 0310 	add.w	r3, r6, #16
 810c55c:	4628      	mov	r0, r5
 810c55e:	ed12 7a04 	vldr	s14, [r2, #-16]
 810c562:	ed51 7a04 	vldr	s15, [r1, #-16]
 810c566:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810c56a:	3801      	subs	r0, #1
 810c56c:	ed43 7a04 	vstr	s15, [r3, #-16]
 810c570:	ed12 7a03 	vldr	s14, [r2, #-12]
 810c574:	ed51 7a03 	vldr	s15, [r1, #-12]
 810c578:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810c57c:	f101 0110 	add.w	r1, r1, #16
 810c580:	ed43 7a03 	vstr	s15, [r3, #-12]
 810c584:	ed12 7a02 	vldr	s14, [r2, #-8]
 810c588:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 810c58c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810c590:	f102 0210 	add.w	r2, r2, #16
 810c594:	ed43 7a02 	vstr	s15, [r3, #-8]
 810c598:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 810c59c:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 810c5a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810c5a4:	f103 0310 	add.w	r3, r3, #16
 810c5a8:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 810c5ac:	d1d7      	bne.n	810c55e <arm_mat_sub_f32+0x32>
 810c5ae:	012b      	lsls	r3, r5, #4
 810c5b0:	449c      	add	ip, r3
 810c5b2:	441f      	add	r7, r3
 810c5b4:	441e      	add	r6, r3
 810c5b6:	f014 0403 	ands.w	r4, r4, #3
 810c5ba:	d01b      	beq.n	810c5f4 <arm_mat_sub_f32+0xc8>
 810c5bc:	eddc 7a00 	vldr	s15, [ip]
 810c5c0:	ed97 7a00 	vldr	s14, [r7]
 810c5c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810c5c8:	3c01      	subs	r4, #1
 810c5ca:	edc6 7a00 	vstr	s15, [r6]
 810c5ce:	d011      	beq.n	810c5f4 <arm_mat_sub_f32+0xc8>
 810c5d0:	eddc 7a01 	vldr	s15, [ip, #4]
 810c5d4:	ed97 7a01 	vldr	s14, [r7, #4]
 810c5d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810c5dc:	2c01      	cmp	r4, #1
 810c5de:	edc6 7a01 	vstr	s15, [r6, #4]
 810c5e2:	d007      	beq.n	810c5f4 <arm_mat_sub_f32+0xc8>
 810c5e4:	eddc 7a02 	vldr	s15, [ip, #8]
 810c5e8:	ed97 7a02 	vldr	s14, [r7, #8]
 810c5ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810c5f0:	edc6 7a02 	vstr	s15, [r6, #8]
 810c5f4:	2000      	movs	r0, #0
 810c5f6:	bcf0      	pop	{r4, r5, r6, r7}
 810c5f8:	4770      	bx	lr
 810c5fa:	f06f 0002 	mvn.w	r0, #2
 810c5fe:	e7fa      	b.n	810c5f6 <arm_mat_sub_f32+0xca>

0810c600 <arm_mat_mult_f32>:
 810c600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c604:	8845      	ldrh	r5, [r0, #2]
 810c606:	880b      	ldrh	r3, [r1, #0]
 810c608:	8806      	ldrh	r6, [r0, #0]
 810c60a:	6847      	ldr	r7, [r0, #4]
 810c60c:	6854      	ldr	r4, [r2, #4]
 810c60e:	6848      	ldr	r0, [r1, #4]
 810c610:	b08b      	sub	sp, #44	@ 0x2c
 810c612:	42ab      	cmp	r3, r5
 810c614:	9109      	str	r1, [sp, #36]	@ 0x24
 810c616:	9604      	str	r6, [sp, #16]
 810c618:	8849      	ldrh	r1, [r1, #2]
 810c61a:	f040 808a 	bne.w	810c732 <arm_mat_mult_f32+0x132>
 810c61e:	8815      	ldrh	r5, [r2, #0]
 810c620:	42b5      	cmp	r5, r6
 810c622:	f040 8086 	bne.w	810c732 <arm_mat_mult_f32+0x132>
 810c626:	8852      	ldrh	r2, [r2, #2]
 810c628:	428a      	cmp	r2, r1
 810c62a:	f040 8082 	bne.w	810c732 <arm_mat_mult_f32+0x132>
 810c62e:	ea4f 0893 	mov.w	r8, r3, lsr #2
 810c632:	1d01      	adds	r1, r0, #4
 810c634:	0116      	lsls	r6, r2, #4
 810c636:	9108      	str	r1, [sp, #32]
 810c638:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 810c63c:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 810c640:	9101      	str	r1, [sp, #4]
 810c642:	fb06 f108 	mul.w	r1, r6, r8
 810c646:	0095      	lsls	r5, r2, #2
 810c648:	9103      	str	r1, [sp, #12]
 810c64a:	00d2      	lsls	r2, r2, #3
 810c64c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 810c650:	f003 0903 	and.w	r9, r3, #3
 810c654:	009b      	lsls	r3, r3, #2
 810c656:	f107 0b10 	add.w	fp, r7, #16
 810c65a:	eb04 0a05 	add.w	sl, r4, r5
 810c65e:	9107      	str	r1, [sp, #28]
 810c660:	9202      	str	r2, [sp, #8]
 810c662:	9306      	str	r3, [sp, #24]
 810c664:	f1ab 0310 	sub.w	r3, fp, #16
 810c668:	9305      	str	r3, [sp, #20]
 810c66a:	9b07      	ldr	r3, [sp, #28]
 810c66c:	f8dd e020 	ldr.w	lr, [sp, #32]
 810c670:	eb03 0c0a 	add.w	ip, r3, sl
 810c674:	eddf 7a31 	vldr	s15, [pc, #196]	@ 810c73c <arm_mat_mult_f32+0x13c>
 810c678:	f1b8 0f00 	cmp.w	r8, #0
 810c67c:	d053      	beq.n	810c726 <arm_mat_mult_f32+0x126>
 810c67e:	9b02      	ldr	r3, [sp, #8]
 810c680:	4644      	mov	r4, r8
 810c682:	18c1      	adds	r1, r0, r3
 810c684:	4602      	mov	r2, r0
 810c686:	465b      	mov	r3, fp
 810c688:	ed92 6a00 	vldr	s12, [r2]
 810c68c:	ed13 7a04 	vldr	s14, [r3, #-16]
 810c690:	ed53 4a03 	vldr	s9, [r3, #-12]
 810c694:	ed53 6a02 	vldr	s13, [r3, #-8]
 810c698:	ed91 5a00 	vldr	s10, [r1]
 810c69c:	ed53 5a01 	vldr	s11, [r3, #-4]
 810c6a0:	1957      	adds	r7, r2, r5
 810c6a2:	ee27 7a06 	vmul.f32	s14, s14, s12
 810c6a6:	ed97 6a00 	vldr	s12, [r7]
 810c6aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 810c6ae:	ee26 6a24 	vmul.f32	s12, s12, s9
 810c6b2:	194f      	adds	r7, r1, r5
 810c6b4:	ee36 6a27 	vadd.f32	s12, s12, s15
 810c6b8:	ee26 7a85 	vmul.f32	s14, s13, s10
 810c6bc:	edd7 7a00 	vldr	s15, [r7]
 810c6c0:	ee37 7a06 	vadd.f32	s14, s14, s12
 810c6c4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 810c6c8:	3c01      	subs	r4, #1
 810c6ca:	4432      	add	r2, r6
 810c6cc:	4431      	add	r1, r6
 810c6ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c6d2:	f103 0310 	add.w	r3, r3, #16
 810c6d6:	d1d7      	bne.n	810c688 <arm_mat_mult_f32+0x88>
 810c6d8:	9b03      	ldr	r3, [sp, #12]
 810c6da:	9a01      	ldr	r2, [sp, #4]
 810c6dc:	4418      	add	r0, r3
 810c6de:	f1b9 0f00 	cmp.w	r9, #0
 810c6e2:	d00b      	beq.n	810c6fc <arm_mat_mult_f32+0xfc>
 810c6e4:	464b      	mov	r3, r9
 810c6e6:	edd0 6a00 	vldr	s13, [r0]
 810c6ea:	ecb2 7a01 	vldmia	r2!, {s14}
 810c6ee:	ee27 7a26 	vmul.f32	s14, s14, s13
 810c6f2:	3b01      	subs	r3, #1
 810c6f4:	4428      	add	r0, r5
 810c6f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c6fa:	d1f4      	bne.n	810c6e6 <arm_mat_mult_f32+0xe6>
 810c6fc:	ecec 7a01 	vstmia	ip!, {s15}
 810c700:	45d4      	cmp	ip, sl
 810c702:	4670      	mov	r0, lr
 810c704:	f10e 0e04 	add.w	lr, lr, #4
 810c708:	d1b4      	bne.n	810c674 <arm_mat_mult_f32+0x74>
 810c70a:	9a01      	ldr	r2, [sp, #4]
 810c70c:	9b06      	ldr	r3, [sp, #24]
 810c70e:	4611      	mov	r1, r2
 810c710:	4419      	add	r1, r3
 810c712:	449b      	add	fp, r3
 810c714:	9b04      	ldr	r3, [sp, #16]
 810c716:	9101      	str	r1, [sp, #4]
 810c718:	3b01      	subs	r3, #1
 810c71a:	44aa      	add	sl, r5
 810c71c:	9304      	str	r3, [sp, #16]
 810c71e:	d004      	beq.n	810c72a <arm_mat_mult_f32+0x12a>
 810c720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c722:	6858      	ldr	r0, [r3, #4]
 810c724:	e79e      	b.n	810c664 <arm_mat_mult_f32+0x64>
 810c726:	9a05      	ldr	r2, [sp, #20]
 810c728:	e7d9      	b.n	810c6de <arm_mat_mult_f32+0xde>
 810c72a:	4618      	mov	r0, r3
 810c72c:	b00b      	add	sp, #44	@ 0x2c
 810c72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c732:	f06f 0002 	mvn.w	r0, #2
 810c736:	b00b      	add	sp, #44	@ 0x2c
 810c738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c73c:	00000000 	.word	0x00000000

0810c740 <arm_mat_inverse_f32>:
 810c740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c744:	8843      	ldrh	r3, [r0, #2]
 810c746:	8804      	ldrh	r4, [r0, #0]
 810c748:	684e      	ldr	r6, [r1, #4]
 810c74a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 810c74e:	b087      	sub	sp, #28
 810c750:	429c      	cmp	r4, r3
 810c752:	9301      	str	r3, [sp, #4]
 810c754:	9603      	str	r6, [sp, #12]
 810c756:	f040 80ea 	bne.w	810c92e <arm_mat_inverse_f32+0x1ee>
 810c75a:	880a      	ldrh	r2, [r1, #0]
 810c75c:	884b      	ldrh	r3, [r1, #2]
 810c75e:	4293      	cmp	r3, r2
 810c760:	f040 80e5 	bne.w	810c92e <arm_mat_inverse_f32+0x1ee>
 810c764:	429c      	cmp	r4, r3
 810c766:	f040 80e2 	bne.w	810c92e <arm_mat_inverse_f32+0x1ee>
 810c76a:	9005      	str	r0, [sp, #20]
 810c76c:	b30c      	cbz	r4, 810c7b2 <arm_mat_inverse_f32+0x72>
 810c76e:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 810c772:	1e67      	subs	r7, r4, #1
 810c774:	f846 bb04 	str.w	fp, [r6], #4
 810c778:	d01b      	beq.n	810c7b2 <arm_mat_inverse_f32+0x72>
 810c77a:	f04f 0801 	mov.w	r8, #1
 810c77e:	00ba      	lsls	r2, r7, #2
 810c780:	eb06 0a02 	add.w	sl, r6, r2
 810c784:	ea4f 0588 	mov.w	r5, r8, lsl #2
 810c788:	4630      	mov	r0, r6
 810c78a:	2100      	movs	r1, #0
 810c78c:	f001 fca0 	bl	810e0d0 <memset>
 810c790:	eb0a 0605 	add.w	r6, sl, r5
 810c794:	462a      	mov	r2, r5
 810c796:	2100      	movs	r1, #0
 810c798:	4650      	mov	r0, sl
 810c79a:	f1b8 0f00 	cmp.w	r8, #0
 810c79e:	f000 80cb 	beq.w	810c938 <arm_mat_inverse_f32+0x1f8>
 810c7a2:	f001 fc95 	bl	810e0d0 <memset>
 810c7a6:	3f01      	subs	r7, #1
 810c7a8:	f108 0801 	add.w	r8, r8, #1
 810c7ac:	f846 bb04 	str.w	fp, [r6], #4
 810c7b0:	d1e5      	bne.n	810c77e <arm_mat_inverse_f32+0x3e>
 810c7b2:	9b01      	ldr	r3, [sp, #4]
 810c7b4:	2b00      	cmp	r3, #0
 810c7b6:	f000 80b5 	beq.w	810c924 <arm_mat_inverse_f32+0x1e4>
 810c7ba:	009d      	lsls	r5, r3, #2
 810c7bc:	eb09 0205 	add.w	r2, r9, r5
 810c7c0:	46cc      	mov	ip, r9
 810c7c2:	9202      	str	r2, [sp, #8]
 810c7c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 810c7c8:	1d2a      	adds	r2, r5, #4
 810c7ca:	9204      	str	r2, [sp, #16]
 810c7cc:	462f      	mov	r7, r5
 810c7ce:	469e      	mov	lr, r3
 810c7d0:	2600      	movs	r6, #0
 810c7d2:	9b02      	ldr	r3, [sp, #8]
 810c7d4:	eddc 6a00 	vldr	s13, [ip]
 810c7d8:	42b4      	cmp	r4, r6
 810c7da:	eba3 0b07 	sub.w	fp, r3, r7
 810c7de:	f000 80a1 	beq.w	810c924 <arm_mat_inverse_f32+0x1e4>
 810c7e2:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 810c948 <arm_mat_inverse_f32+0x208>
 810c7e6:	4632      	mov	r2, r6
 810c7e8:	4663      	mov	r3, ip
 810c7ea:	e00b      	b.n	810c804 <arm_mat_inverse_f32+0xc4>
 810c7ec:	eef4 7a47 	vcmp.f32	s15, s14
 810c7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c7f4:	f102 0201 	add.w	r2, r2, #1
 810c7f8:	bfc8      	it	gt
 810c7fa:	eeb0 7a67 	vmovgt.f32	s14, s15
 810c7fe:	42a2      	cmp	r2, r4
 810c800:	442b      	add	r3, r5
 810c802:	d014      	beq.n	810c82e <arm_mat_inverse_f32+0xee>
 810c804:	edd3 7a00 	vldr	s15, [r3]
 810c808:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810c80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c810:	eeb1 6a67 	vneg.f32	s12, s15
 810c814:	dcea      	bgt.n	810c7ec <arm_mat_inverse_f32+0xac>
 810c816:	eeb4 6a47 	vcmp.f32	s12, s14
 810c81a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c81e:	f102 0201 	add.w	r2, r2, #1
 810c822:	bfc8      	it	gt
 810c824:	eeb0 7a46 	vmovgt.f32	s14, s12
 810c828:	42a2      	cmp	r2, r4
 810c82a:	442b      	add	r3, r5
 810c82c:	d1ea      	bne.n	810c804 <arm_mat_inverse_f32+0xc4>
 810c82e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 810c832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c836:	d075      	beq.n	810c924 <arm_mat_inverse_f32+0x1e4>
 810c838:	eef5 6a40 	vcmp.f32	s13, #0.0
 810c83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c840:	d070      	beq.n	810c924 <arm_mat_inverse_f32+0x1e4>
 810c842:	4672      	mov	r2, lr
 810c844:	4663      	mov	r3, ip
 810c846:	ed93 7a00 	vldr	s14, [r3]
 810c84a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810c84e:	3a01      	subs	r2, #1
 810c850:	ece3 7a01 	vstmia	r3!, {s15}
 810c854:	d1f7      	bne.n	810c846 <arm_mat_inverse_f32+0x106>
 810c856:	9901      	ldr	r1, [sp, #4]
 810c858:	464b      	mov	r3, r9
 810c85a:	ed93 7a00 	vldr	s14, [r3]
 810c85e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810c862:	3901      	subs	r1, #1
 810c864:	ece3 7a01 	vstmia	r3!, {s15}
 810c868:	d1f7      	bne.n	810c85a <arm_mat_inverse_f32+0x11a>
 810c86a:	9803      	ldr	r0, [sp, #12]
 810c86c:	ea4f 0886 	mov.w	r8, r6, lsl #2
 810c870:	42b1      	cmp	r1, r6
 810c872:	d039      	beq.n	810c8e8 <arm_mat_inverse_f32+0x1a8>
 810c874:	eddb 6a00 	vldr	s13, [fp]
 810c878:	465a      	mov	r2, fp
 810c87a:	4673      	mov	r3, lr
 810c87c:	46e2      	mov	sl, ip
 810c87e:	ecba 7a01 	vldmia	sl!, {s14}
 810c882:	edd2 7a00 	vldr	s15, [r2]
 810c886:	ee26 7a87 	vmul.f32	s14, s13, s14
 810c88a:	3b01      	subs	r3, #1
 810c88c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810c890:	ece2 7a01 	vstmia	r2!, {s15}
 810c894:	d1f3      	bne.n	810c87e <arm_mat_inverse_f32+0x13e>
 810c896:	9b01      	ldr	r3, [sp, #4]
 810c898:	44bb      	add	fp, r7
 810c89a:	4602      	mov	r2, r0
 810c89c:	46ca      	mov	sl, r9
 810c89e:	ecba 7a01 	vldmia	sl!, {s14}
 810c8a2:	edd2 7a00 	vldr	s15, [r2]
 810c8a6:	ee26 7a87 	vmul.f32	s14, s13, s14
 810c8aa:	3b01      	subs	r3, #1
 810c8ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810c8b0:	ece2 7a01 	vstmia	r2!, {s15}
 810c8b4:	d1f3      	bne.n	810c89e <arm_mat_inverse_f32+0x15e>
 810c8b6:	4428      	add	r0, r5
 810c8b8:	3101      	adds	r1, #1
 810c8ba:	428c      	cmp	r4, r1
 810c8bc:	44c3      	add	fp, r8
 810c8be:	d1d7      	bne.n	810c870 <arm_mat_inverse_f32+0x130>
 810c8c0:	9b04      	ldr	r3, [sp, #16]
 810c8c2:	f1be 0e01 	subs.w	lr, lr, #1
 810c8c6:	f106 0601 	add.w	r6, r6, #1
 810c8ca:	449c      	add	ip, r3
 810c8cc:	f1a7 0704 	sub.w	r7, r7, #4
 810c8d0:	44a9      	add	r9, r5
 810c8d2:	f47f af7e 	bne.w	810c7d2 <arm_mat_inverse_f32+0x92>
 810c8d6:	eef5 6a40 	vcmp.f32	s13, #0.0
 810c8da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c8de:	d006      	beq.n	810c8ee <arm_mat_inverse_f32+0x1ae>
 810c8e0:	2000      	movs	r0, #0
 810c8e2:	b007      	add	sp, #28
 810c8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c8e8:	44bb      	add	fp, r7
 810c8ea:	4428      	add	r0, r5
 810c8ec:	e7e4      	b.n	810c8b8 <arm_mat_inverse_f32+0x178>
 810c8ee:	9b05      	ldr	r3, [sp, #20]
 810c8f0:	9a01      	ldr	r2, [sp, #4]
 810c8f2:	685b      	ldr	r3, [r3, #4]
 810c8f4:	edd3 7a00 	vldr	s15, [r3]
 810c8f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 810c8fc:	fb02 f204 	mul.w	r2, r2, r4
 810c900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c904:	4614      	mov	r4, r2
 810c906:	bf08      	it	eq
 810c908:	3304      	addeq	r3, #4
 810c90a:	d007      	beq.n	810c91c <arm_mat_inverse_f32+0x1dc>
 810c90c:	e7e8      	b.n	810c8e0 <arm_mat_inverse_f32+0x1a0>
 810c90e:	ecf3 7a01 	vldmia	r3!, {s15}
 810c912:	eef5 7a40 	vcmp.f32	s15, #0.0
 810c916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c91a:	d1e1      	bne.n	810c8e0 <arm_mat_inverse_f32+0x1a0>
 810c91c:	f10e 0e01 	add.w	lr, lr, #1
 810c920:	4574      	cmp	r4, lr
 810c922:	d1f4      	bne.n	810c90e <arm_mat_inverse_f32+0x1ce>
 810c924:	f06f 0004 	mvn.w	r0, #4
 810c928:	b007      	add	sp, #28
 810c92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c92e:	f06f 0002 	mvn.w	r0, #2
 810c932:	b007      	add	sp, #28
 810c934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c938:	4656      	mov	r6, sl
 810c93a:	3f01      	subs	r7, #1
 810c93c:	f846 bb04 	str.w	fp, [r6], #4
 810c940:	f47f af1b 	bne.w	810c77a <arm_mat_inverse_f32+0x3a>
 810c944:	e735      	b.n	810c7b2 <arm_mat_inverse_f32+0x72>
 810c946:	bf00      	nop
 810c948:	00000000 	.word	0x00000000

0810c94c <arm_mat_init_f32>:
 810c94c:	8001      	strh	r1, [r0, #0]
 810c94e:	8042      	strh	r2, [r0, #2]
 810c950:	6043      	str	r3, [r0, #4]
 810c952:	4770      	bx	lr

0810c954 <arm_mat_add_f32>:
 810c954:	b4f0      	push	{r4, r5, r6, r7}
 810c956:	e9d1 4700 	ldrd	r4, r7, [r1]
 810c95a:	6803      	ldr	r3, [r0, #0]
 810c95c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810c960:	6856      	ldr	r6, [r2, #4]
 810c962:	42a3      	cmp	r3, r4
 810c964:	d15d      	bne.n	810ca22 <arm_mat_add_f32+0xce>
 810c966:	6812      	ldr	r2, [r2, #0]
 810c968:	4293      	cmp	r3, r2
 810c96a:	d15a      	bne.n	810ca22 <arm_mat_add_f32+0xce>
 810c96c:	8803      	ldrh	r3, [r0, #0]
 810c96e:	8844      	ldrh	r4, [r0, #2]
 810c970:	fb04 f403 	mul.w	r4, r4, r3
 810c974:	08a5      	lsrs	r5, r4, #2
 810c976:	d032      	beq.n	810c9de <arm_mat_add_f32+0x8a>
 810c978:	f10c 0110 	add.w	r1, ip, #16
 810c97c:	f107 0210 	add.w	r2, r7, #16
 810c980:	f106 0310 	add.w	r3, r6, #16
 810c984:	4628      	mov	r0, r5
 810c986:	ed12 7a04 	vldr	s14, [r2, #-16]
 810c98a:	ed51 7a04 	vldr	s15, [r1, #-16]
 810c98e:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c992:	3801      	subs	r0, #1
 810c994:	ed43 7a04 	vstr	s15, [r3, #-16]
 810c998:	ed12 7a03 	vldr	s14, [r2, #-12]
 810c99c:	ed51 7a03 	vldr	s15, [r1, #-12]
 810c9a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c9a4:	f101 0110 	add.w	r1, r1, #16
 810c9a8:	ed43 7a03 	vstr	s15, [r3, #-12]
 810c9ac:	ed12 7a02 	vldr	s14, [r2, #-8]
 810c9b0:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 810c9b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c9b8:	f102 0210 	add.w	r2, r2, #16
 810c9bc:	ed43 7a02 	vstr	s15, [r3, #-8]
 810c9c0:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 810c9c4:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 810c9c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c9cc:	f103 0310 	add.w	r3, r3, #16
 810c9d0:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 810c9d4:	d1d7      	bne.n	810c986 <arm_mat_add_f32+0x32>
 810c9d6:	012b      	lsls	r3, r5, #4
 810c9d8:	449c      	add	ip, r3
 810c9da:	441f      	add	r7, r3
 810c9dc:	441e      	add	r6, r3
 810c9de:	f014 0403 	ands.w	r4, r4, #3
 810c9e2:	d01b      	beq.n	810ca1c <arm_mat_add_f32+0xc8>
 810c9e4:	edd7 7a00 	vldr	s15, [r7]
 810c9e8:	ed9c 7a00 	vldr	s14, [ip]
 810c9ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c9f0:	3c01      	subs	r4, #1
 810c9f2:	edc6 7a00 	vstr	s15, [r6]
 810c9f6:	d011      	beq.n	810ca1c <arm_mat_add_f32+0xc8>
 810c9f8:	eddc 7a01 	vldr	s15, [ip, #4]
 810c9fc:	ed97 7a01 	vldr	s14, [r7, #4]
 810ca00:	ee77 7a87 	vadd.f32	s15, s15, s14
 810ca04:	2c01      	cmp	r4, #1
 810ca06:	edc6 7a01 	vstr	s15, [r6, #4]
 810ca0a:	d007      	beq.n	810ca1c <arm_mat_add_f32+0xc8>
 810ca0c:	eddc 7a02 	vldr	s15, [ip, #8]
 810ca10:	ed97 7a02 	vldr	s14, [r7, #8]
 810ca14:	ee77 7a87 	vadd.f32	s15, s15, s14
 810ca18:	edc6 7a02 	vstr	s15, [r6, #8]
 810ca1c:	2000      	movs	r0, #0
 810ca1e:	bcf0      	pop	{r4, r5, r6, r7}
 810ca20:	4770      	bx	lr
 810ca22:	f06f 0002 	mvn.w	r0, #2
 810ca26:	e7fa      	b.n	810ca1e <arm_mat_add_f32+0xca>

0810ca28 <arm_fir_init_f32>:
 810ca28:	b538      	push	{r3, r4, r5, lr}
 810ca2a:	9c04      	ldr	r4, [sp, #16]
 810ca2c:	6082      	str	r2, [r0, #8]
 810ca2e:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 810ca32:	3c01      	subs	r4, #1
 810ca34:	440c      	add	r4, r1
 810ca36:	8001      	strh	r1, [r0, #0]
 810ca38:	4605      	mov	r5, r0
 810ca3a:	00a2      	lsls	r2, r4, #2
 810ca3c:	4618      	mov	r0, r3
 810ca3e:	2100      	movs	r1, #0
 810ca40:	f001 fb46 	bl	810e0d0 <memset>
 810ca44:	6068      	str	r0, [r5, #4]
 810ca46:	bd38      	pop	{r3, r4, r5, pc}

0810ca48 <arm_fir_f32>:
 810ca48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ca4c:	ed2d 8b10 	vpush	{d8-d15}
 810ca50:	b08b      	sub	sp, #44	@ 0x2c
 810ca52:	f8b0 8000 	ldrh.w	r8, [r0]
 810ca56:	9003      	str	r0, [sp, #12]
 810ca58:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 810ca5c:	461e      	mov	r6, r3
 810ca5e:	9304      	str	r3, [sp, #16]
 810ca60:	f108 4380 	add.w	r3, r8, #1073741824	@ 0x40000000
 810ca64:	3b01      	subs	r3, #1
 810ca66:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 810ca6a:	08f3      	lsrs	r3, r6, #3
 810ca6c:	9002      	str	r0, [sp, #8]
 810ca6e:	9500      	str	r5, [sp, #0]
 810ca70:	9301      	str	r3, [sp, #4]
 810ca72:	f000 81f1 	beq.w	810ce58 <arm_fir_f32+0x410>
 810ca76:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 810ca7a:	f100 0620 	add.w	r6, r0, #32
 810ca7e:	9405      	str	r4, [sp, #20]
 810ca80:	0164      	lsls	r4, r4, #5
 810ca82:	4420      	add	r0, r4
 810ca84:	f008 0a07 	and.w	sl, r8, #7
 810ca88:	9607      	str	r6, [sp, #28]
 810ca8a:	9006      	str	r0, [sp, #24]
 810ca8c:	469c      	mov	ip, r3
 810ca8e:	4650      	mov	r0, sl
 810ca90:	4623      	mov	r3, r4
 810ca92:	f8dd a01c 	ldr.w	sl, [sp, #28]
 810ca96:	f8cd 8020 	str.w	r8, [sp, #32]
 810ca9a:	1937      	adds	r7, r6, r4
 810ca9c:	f109 0b1c 	add.w	fp, r9, #28
 810caa0:	f8dd e014 	ldr.w	lr, [sp, #20]
 810caa4:	9209      	str	r2, [sp, #36]	@ 0x24
 810caa6:	f8cd 9014 	str.w	r9, [sp, #20]
 810caaa:	f101 0620 	add.w	r6, r1, #32
 810caae:	f8dd 9018 	ldr.w	r9, [sp, #24]
 810cab2:	9106      	str	r1, [sp, #24]
 810cab4:	3520      	adds	r5, #32
 810cab6:	f102 0420 	add.w	r4, r2, #32
 810caba:	4698      	mov	r8, r3
 810cabc:	f856 3c20 	ldr.w	r3, [r6, #-32]
 810cac0:	f845 3c20 	str.w	r3, [r5, #-32]
 810cac4:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 810cac8:	f845 3c1c 	str.w	r3, [r5, #-28]
 810cacc:	f856 3c18 	ldr.w	r3, [r6, #-24]
 810cad0:	f845 3c18 	str.w	r3, [r5, #-24]
 810cad4:	f856 3c14 	ldr.w	r3, [r6, #-20]
 810cad8:	f845 3c14 	str.w	r3, [r5, #-20]
 810cadc:	f856 3c10 	ldr.w	r3, [r6, #-16]
 810cae0:	f845 3c10 	str.w	r3, [r5, #-16]
 810cae4:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 810cae8:	f845 3c0c 	str.w	r3, [r5, #-12]
 810caec:	f856 3c08 	ldr.w	r3, [r6, #-8]
 810caf0:	f845 3c08 	str.w	r3, [r5, #-8]
 810caf4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 810caf8:	f845 3c04 	str.w	r3, [r5, #-4]
 810cafc:	ed1b 2a07 	vldr	s4, [fp, #-28]	@ 0xffffffe4
 810cb00:	ed5b 1a06 	vldr	s3, [fp, #-24]	@ 0xffffffe8
 810cb04:	ed1b 1a05 	vldr	s2, [fp, #-20]	@ 0xffffffec
 810cb08:	ed5b 0a04 	vldr	s1, [fp, #-16]
 810cb0c:	ed1b 0a03 	vldr	s0, [fp, #-12]
 810cb10:	ed1b 8a02 	vldr	s16, [fp, #-8]
 810cb14:	ed5b 8a01 	vldr	s17, [fp, #-4]
 810cb18:	eddf 6af5 	vldr	s13, [pc, #980]	@ 810cef0 <arm_fir_f32+0x4a8>
 810cb1c:	465a      	mov	r2, fp
 810cb1e:	f1be 0f00 	cmp.w	lr, #0
 810cb22:	f000 81fe 	beq.w	810cf22 <arm_fir_f32+0x4da>
 810cb26:	f10b 0120 	add.w	r1, fp, #32
 810cb2a:	eef0 ba66 	vmov.f32	s23, s13
 810cb2e:	eeb0 6a66 	vmov.f32	s12, s13
 810cb32:	eeb0 9a66 	vmov.f32	s18, s13
 810cb36:	eef0 9a66 	vmov.f32	s19, s13
 810cb3a:	eeb0 aa66 	vmov.f32	s20, s13
 810cb3e:	eef0 aa66 	vmov.f32	s21, s13
 810cb42:	eeb0 ba66 	vmov.f32	s22, s13
 810cb46:	460a      	mov	r2, r1
 810cb48:	4653      	mov	r3, sl
 810cb4a:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 810cb4e:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 810cb52:	ed53 ea07 	vldr	s29, [r3, #-28]	@ 0xffffffe4
 810cb56:	ed13 ea06 	vldr	s28, [r3, #-24]	@ 0xffffffe8
 810cb5a:	ed53 da05 	vldr	s27, [r3, #-20]	@ 0xffffffec
 810cb5e:	ed53 ca04 	vldr	s25, [r3, #-16]
 810cb62:	ed53 2a03 	vldr	s5, [r3, #-12]
 810cb66:	ed13 4a02 	vldr	s8, [r3, #-8]
 810cb6a:	ed13 5a01 	vldr	s10, [r3, #-4]
 810cb6e:	ee67 fa02 	vmul.f32	s31, s14, s4
 810cb72:	ee27 da21 	vmul.f32	s26, s14, s3
 810cb76:	ed12 2a07 	vldr	s4, [r2, #-28]	@ 0xffffffe4
 810cb7a:	ee27 ca01 	vmul.f32	s24, s14, s2
 810cb7e:	ee27 3a20 	vmul.f32	s6, s14, s1
 810cb82:	ee67 3a00 	vmul.f32	s7, s14, s0
 810cb86:	ee67 5a08 	vmul.f32	s11, s14, s16
 810cb8a:	ee27 fa28 	vmul.f32	s30, s14, s17
 810cb8e:	ee67 7a24 	vmul.f32	s15, s14, s9
 810cb92:	ee3f ba8b 	vadd.f32	s22, s31, s22
 810cb96:	ee7d aa2a 	vadd.f32	s21, s26, s21
 810cb9a:	ee6e faa1 	vmul.f32	s31, s29, s3
 810cb9e:	ee2e da81 	vmul.f32	s26, s29, s2
 810cba2:	ed52 1a06 	vldr	s3, [r2, #-24]	@ 0xffffffe8
 810cba6:	ee3c aa0a 	vadd.f32	s20, s24, s20
 810cbaa:	ee73 9a29 	vadd.f32	s19, s6, s19
 810cbae:	ee2e caa0 	vmul.f32	s24, s29, s1
 810cbb2:	ee2e 3a80 	vmul.f32	s6, s29, s0
 810cbb6:	ee33 9a89 	vadd.f32	s18, s7, s18
 810cbba:	ee35 6a86 	vadd.f32	s12, s11, s12
 810cbbe:	ee6e 3a88 	vmul.f32	s7, s29, s16
 810cbc2:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 810cbc6:	ee7f ba2b 	vadd.f32	s23, s30, s23
 810cbca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810cbce:	ee24 faae 	vmul.f32	s30, s9, s29
 810cbd2:	ee6e ea82 	vmul.f32	s29, s29, s4
 810cbd6:	ee2e 7a01 	vmul.f32	s14, s28, s2
 810cbda:	ee3f ba8b 	vadd.f32	s22, s31, s22
 810cbde:	ed12 1a05 	vldr	s2, [r2, #-20]	@ 0xffffffec
 810cbe2:	ee7d aa2a 	vadd.f32	s21, s26, s21
 810cbe6:	ee3c aa0a 	vadd.f32	s20, s24, s20
 810cbea:	ee2e da20 	vmul.f32	s26, s28, s1
 810cbee:	ee2e ca00 	vmul.f32	s24, s28, s0
 810cbf2:	ee73 9a29 	vadd.f32	s19, s6, s19
 810cbf6:	ee33 9a89 	vadd.f32	s18, s7, s18
 810cbfa:	ee2e 3a08 	vmul.f32	s6, s28, s16
 810cbfe:	ee6e 3a28 	vmul.f32	s7, s28, s17
 810cc02:	ee35 6a86 	vadd.f32	s12, s11, s12
 810cc06:	ee7f ba2b 	vadd.f32	s23, s30, s23
 810cc0a:	ee64 5a8e 	vmul.f32	s11, s9, s28
 810cc0e:	ee22 fa0e 	vmul.f32	s30, s4, s28
 810cc12:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 810cc16:	ee2e ea21 	vmul.f32	s28, s28, s3
 810cc1a:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 810cc1e:	ee7d aa2a 	vadd.f32	s21, s26, s21
 810cc22:	ed52 0a04 	vldr	s1, [r2, #-16]
 810cc26:	ee2d da80 	vmul.f32	s26, s27, s0
 810cc2a:	ee37 ba0b 	vadd.f32	s22, s14, s22
 810cc2e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 810cc32:	ee73 9a29 	vadd.f32	s19, s6, s19
 810cc36:	ee2d ca88 	vmul.f32	s24, s27, s16
 810cc3a:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 810cc3e:	ee33 9a89 	vadd.f32	s18, s7, s18
 810cc42:	ee35 6a86 	vadd.f32	s12, s11, s12
 810cc46:	ee64 3aad 	vmul.f32	s7, s9, s27
 810cc4a:	ee62 5a2d 	vmul.f32	s11, s4, s27
 810cc4e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 810cc52:	ee7e 7a27 	vadd.f32	s15, s28, s15
 810cc56:	ee21 faad 	vmul.f32	s30, s3, s27
 810cc5a:	ee6d da81 	vmul.f32	s27, s27, s2
 810cc5e:	ee6c fa80 	vmul.f32	s31, s25, s0
 810cc62:	ee36 ba8b 	vadd.f32	s22, s13, s22
 810cc66:	ed12 0a03 	vldr	s0, [r2, #-12]
 810cc6a:	ee3d da2a 	vadd.f32	s26, s26, s21
 810cc6e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 810cc72:	ee6c aa88 	vmul.f32	s21, s25, s16
 810cc76:	ee2c caa8 	vmul.f32	s24, s25, s17
 810cc7a:	ee73 9a29 	vadd.f32	s19, s6, s19
 810cc7e:	ee33 9a89 	vadd.f32	s18, s7, s18
 810cc82:	ee24 3aac 	vmul.f32	s6, s9, s25
 810cc86:	ee62 3a2c 	vmul.f32	s7, s4, s25
 810cc8a:	ee35 6a86 	vadd.f32	s12, s11, s12
 810cc8e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 810cc92:	ee61 5aac 	vmul.f32	s11, s3, s25
 810cc96:	ee21 fa2c 	vmul.f32	s30, s2, s25
 810cc9a:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 810cc9e:	ee6c caa0 	vmul.f32	s25, s25, s1
 810cca2:	ee62 ea88 	vmul.f32	s29, s5, s16
 810cca6:	ee3a da8d 	vadd.f32	s26, s21, s26
 810ccaa:	ed12 8a02 	vldr	s16, [r2, #-8]
 810ccae:	ee62 aaa8 	vmul.f32	s21, s5, s17
 810ccb2:	ee3f ba8b 	vadd.f32	s22, s31, s22
 810ccb6:	ee3c aa0a 	vadd.f32	s20, s24, s20
 810ccba:	ee73 9a29 	vadd.f32	s19, s6, s19
 810ccbe:	ee24 caa2 	vmul.f32	s24, s9, s5
 810ccc2:	ee22 3a22 	vmul.f32	s6, s4, s5
 810ccc6:	ee33 9a89 	vadd.f32	s18, s7, s18
 810ccca:	ee35 6a86 	vadd.f32	s12, s11, s12
 810ccce:	ee61 3aa2 	vmul.f32	s7, s3, s5
 810ccd2:	ee61 5a22 	vmul.f32	s11, s2, s5
 810ccd6:	ee7f ba2b 	vadd.f32	s23, s30, s23
 810ccda:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 810ccde:	ee20 faa2 	vmul.f32	s30, s1, s5
 810cce2:	ee62 2a80 	vmul.f32	s5, s5, s0
 810cce6:	ee7e fa8b 	vadd.f32	s31, s29, s22
 810ccea:	ee72 7aa7 	vadd.f32	s15, s5, s15
 810ccee:	ee24 ba28 	vmul.f32	s22, s8, s17
 810ccf2:	ee7a aa8d 	vadd.f32	s21, s21, s26
 810ccf6:	ee3c aa0a 	vadd.f32	s20, s24, s20
 810ccfa:	ee24 da84 	vmul.f32	s26, s9, s8
 810ccfe:	ee22 ca04 	vmul.f32	s24, s4, s8
 810cd02:	ee73 9a29 	vadd.f32	s19, s6, s19
 810cd06:	ee33 9a89 	vadd.f32	s18, s7, s18
 810cd0a:	ee21 3a84 	vmul.f32	s6, s3, s8
 810cd0e:	ee61 3a04 	vmul.f32	s7, s2, s8
 810cd12:	ee35 6a86 	vadd.f32	s12, s11, s12
 810cd16:	ee7f ba2b 	vadd.f32	s23, s30, s23
 810cd1a:	ee60 5a84 	vmul.f32	s11, s1, s8
 810cd1e:	ee20 7a04 	vmul.f32	s14, s0, s8
 810cd22:	ee64 6a08 	vmul.f32	s13, s8, s16
 810cd26:	ed52 8a01 	vldr	s17, [r2, #-4]
 810cd2a:	ee73 9a29 	vadd.f32	s19, s6, s19
 810cd2e:	ee33 9a89 	vadd.f32	s18, s7, s18
 810cd32:	ee35 6a86 	vadd.f32	s12, s11, s12
 810cd36:	ee37 7a2b 	vadd.f32	s14, s14, s23
 810cd3a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 810cd3e:	ee3b ba2f 	vadd.f32	s22, s22, s31
 810cd42:	ee64 4a85 	vmul.f32	s9, s9, s10
 810cd46:	ee7d aa2a 	vadd.f32	s21, s26, s21
 810cd4a:	ee22 4a05 	vmul.f32	s8, s4, s10
 810cd4e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 810cd52:	ee61 2a85 	vmul.f32	s5, s3, s10
 810cd56:	ee21 3a05 	vmul.f32	s6, s2, s10
 810cd5a:	ee60 3a85 	vmul.f32	s7, s1, s10
 810cd5e:	ee60 5a05 	vmul.f32	s11, s0, s10
 810cd62:	ee68 ba05 	vmul.f32	s23, s16, s10
 810cd66:	ee65 7a28 	vmul.f32	s15, s10, s17
 810cd6a:	3320      	adds	r3, #32
 810cd6c:	429f      	cmp	r7, r3
 810cd6e:	ee34 ba8b 	vadd.f32	s22, s9, s22
 810cd72:	ee74 aa2a 	vadd.f32	s21, s8, s21
 810cd76:	ee32 aa8a 	vadd.f32	s20, s5, s20
 810cd7a:	ee73 9a29 	vadd.f32	s19, s6, s19
 810cd7e:	ee33 9a89 	vadd.f32	s18, s7, s18
 810cd82:	ee35 6a86 	vadd.f32	s12, s11, s12
 810cd86:	ee7b ba87 	vadd.f32	s23, s23, s14
 810cd8a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 810cd8e:	f102 0220 	add.w	r2, r2, #32
 810cd92:	f47f aeda 	bne.w	810cb4a <arm_fir_f32+0x102>
 810cd96:	eb0b 0208 	add.w	r2, fp, r8
 810cd9a:	46cb      	mov	fp, r9
 810cd9c:	b3a0      	cbz	r0, 810ce08 <arm_fir_f32+0x3c0>
 810cd9e:	4603      	mov	r3, r0
 810cda0:	ecfb 7a01 	vldmia	fp!, {s15}
 810cda4:	ecf2 5a01 	vldmia	r2!, {s11}
 810cda8:	ee27 2a82 	vmul.f32	s4, s15, s4
 810cdac:	ee67 2aa1 	vmul.f32	s5, s15, s3
 810cdb0:	ee27 3a81 	vmul.f32	s6, s15, s2
 810cdb4:	ee67 3aa0 	vmul.f32	s7, s15, s1
 810cdb8:	ee27 4a80 	vmul.f32	s8, s15, s0
 810cdbc:	ee67 4a88 	vmul.f32	s9, s15, s16
 810cdc0:	ee27 5aa8 	vmul.f32	s10, s15, s17
 810cdc4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 810cdc8:	3b01      	subs	r3, #1
 810cdca:	ee3b ba02 	vadd.f32	s22, s22, s4
 810cdce:	ee7a aaa2 	vadd.f32	s21, s21, s5
 810cdd2:	eeb0 2a61 	vmov.f32	s4, s3
 810cdd6:	ee3a aa03 	vadd.f32	s20, s20, s6
 810cdda:	eef0 1a41 	vmov.f32	s3, s2
 810cdde:	ee79 9aa3 	vadd.f32	s19, s19, s7
 810cde2:	eeb0 1a60 	vmov.f32	s2, s1
 810cde6:	ee39 9a04 	vadd.f32	s18, s18, s8
 810cdea:	eef0 0a40 	vmov.f32	s1, s0
 810cdee:	ee36 6a24 	vadd.f32	s12, s12, s9
 810cdf2:	eeb0 0a48 	vmov.f32	s0, s16
 810cdf6:	ee7b ba85 	vadd.f32	s23, s23, s10
 810cdfa:	eeb0 8a68 	vmov.f32	s16, s17
 810cdfe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 810ce02:	eef0 8a65 	vmov.f32	s17, s11
 810ce06:	d1cb      	bne.n	810cda0 <arm_fir_f32+0x358>
 810ce08:	f1bc 0c01 	subs.w	ip, ip, #1
 810ce0c:	ed04 ba08 	vstr	s22, [r4, #-32]	@ 0xffffffe0
 810ce10:	ed44 aa07 	vstr	s21, [r4, #-28]	@ 0xffffffe4
 810ce14:	ed04 aa06 	vstr	s20, [r4, #-24]	@ 0xffffffe8
 810ce18:	ed44 9a05 	vstr	s19, [r4, #-20]	@ 0xffffffec
 810ce1c:	ed04 9a04 	vstr	s18, [r4, #-16]
 810ce20:	ed04 6a03 	vstr	s12, [r4, #-12]
 810ce24:	ed44 ba02 	vstr	s23, [r4, #-8]
 810ce28:	ed44 6a01 	vstr	s13, [r4, #-4]
 810ce2c:	f106 0620 	add.w	r6, r6, #32
 810ce30:	f105 0520 	add.w	r5, r5, #32
 810ce34:	f104 0420 	add.w	r4, r4, #32
 810ce38:	468b      	mov	fp, r1
 810ce3a:	f47f ae3f 	bne.w	810cabc <arm_fir_f32+0x74>
 810ce3e:	9b01      	ldr	r3, [sp, #4]
 810ce40:	9800      	ldr	r0, [sp, #0]
 810ce42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810ce44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810ce48:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 810ce4c:	015b      	lsls	r3, r3, #5
 810ce4e:	4418      	add	r0, r3
 810ce50:	4419      	add	r1, r3
 810ce52:	441a      	add	r2, r3
 810ce54:	4499      	add	r9, r3
 810ce56:	9000      	str	r0, [sp, #0]
 810ce58:	9b04      	ldr	r3, [sp, #16]
 810ce5a:	f013 0707 	ands.w	r7, r3, #7
 810ce5e:	d020      	beq.n	810cea2 <arm_fir_f32+0x45a>
 810ce60:	00bf      	lsls	r7, r7, #2
 810ce62:	9e00      	ldr	r6, [sp, #0]
 810ce64:	f8dd e008 	ldr.w	lr, [sp, #8]
 810ce68:	eb01 0c07 	add.w	ip, r1, r7
 810ce6c:	464d      	mov	r5, r9
 810ce6e:	f851 3b04 	ldr.w	r3, [r1], #4
 810ce72:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 810cef0 <arm_fir_f32+0x4a8>
 810ce76:	f846 3b04 	str.w	r3, [r6], #4
 810ce7a:	4674      	mov	r4, lr
 810ce7c:	4643      	mov	r3, r8
 810ce7e:	4628      	mov	r0, r5
 810ce80:	ecf0 7a01 	vldmia	r0!, {s15}
 810ce84:	ecf4 6a01 	vldmia	r4!, {s13}
 810ce88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 810ce8c:	3b01      	subs	r3, #1
 810ce8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 810ce92:	d1f5      	bne.n	810ce80 <arm_fir_f32+0x438>
 810ce94:	4561      	cmp	r1, ip
 810ce96:	eca2 7a01 	vstmia	r2!, {s14}
 810ce9a:	f105 0504 	add.w	r5, r5, #4
 810ce9e:	d1e6      	bne.n	810ce6e <arm_fir_f32+0x426>
 810cea0:	44b9      	add	r9, r7
 810cea2:	f108 38ff 	add.w	r8, r8, #4294967295
 810cea6:	9b03      	ldr	r3, [sp, #12]
 810cea8:	ea5f 0498 	movs.w	r4, r8, lsr #2
 810ceac:	685d      	ldr	r5, [r3, #4]
 810ceae:	d021      	beq.n	810cef4 <arm_fir_f32+0x4ac>
 810ceb0:	f109 0210 	add.w	r2, r9, #16
 810ceb4:	f105 0310 	add.w	r3, r5, #16
 810ceb8:	4621      	mov	r1, r4
 810ceba:	f852 0c10 	ldr.w	r0, [r2, #-16]
 810cebe:	f843 0c10 	str.w	r0, [r3, #-16]
 810cec2:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 810cec6:	f843 0c0c 	str.w	r0, [r3, #-12]
 810ceca:	f852 0c08 	ldr.w	r0, [r2, #-8]
 810cece:	f843 0c08 	str.w	r0, [r3, #-8]
 810ced2:	f852 0c04 	ldr.w	r0, [r2, #-4]
 810ced6:	f843 0c04 	str.w	r0, [r3, #-4]
 810ceda:	3901      	subs	r1, #1
 810cedc:	f102 0210 	add.w	r2, r2, #16
 810cee0:	f103 0310 	add.w	r3, r3, #16
 810cee4:	d1e9      	bne.n	810ceba <arm_fir_f32+0x472>
 810cee6:	0124      	lsls	r4, r4, #4
 810cee8:	44a1      	add	r9, r4
 810ceea:	4425      	add	r5, r4
 810ceec:	e002      	b.n	810cef4 <arm_fir_f32+0x4ac>
 810ceee:	bf00      	nop
 810cef0:	00000000 	.word	0x00000000
 810cef4:	f018 0803 	ands.w	r8, r8, #3
 810cef8:	d00e      	beq.n	810cf18 <arm_fir_f32+0x4d0>
 810cefa:	f8d9 3000 	ldr.w	r3, [r9]
 810cefe:	602b      	str	r3, [r5, #0]
 810cf00:	f1b8 0801 	subs.w	r8, r8, #1
 810cf04:	d008      	beq.n	810cf18 <arm_fir_f32+0x4d0>
 810cf06:	f8d9 3004 	ldr.w	r3, [r9, #4]
 810cf0a:	606b      	str	r3, [r5, #4]
 810cf0c:	f1b8 0f01 	cmp.w	r8, #1
 810cf10:	bf1c      	itt	ne
 810cf12:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 810cf16:	60ab      	strne	r3, [r5, #8]
 810cf18:	b00b      	add	sp, #44	@ 0x2c
 810cf1a:	ecbd 8b10 	vpop	{d8-d15}
 810cf1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cf22:	eef0 ba66 	vmov.f32	s23, s13
 810cf26:	eeb0 6a66 	vmov.f32	s12, s13
 810cf2a:	eeb0 9a66 	vmov.f32	s18, s13
 810cf2e:	eef0 9a66 	vmov.f32	s19, s13
 810cf32:	eeb0 aa66 	vmov.f32	s20, s13
 810cf36:	eef0 aa66 	vmov.f32	s21, s13
 810cf3a:	eeb0 ba66 	vmov.f32	s22, s13
 810cf3e:	f8dd b008 	ldr.w	fp, [sp, #8]
 810cf42:	f102 0120 	add.w	r1, r2, #32
 810cf46:	e729      	b.n	810cd9c <arm_fir_f32+0x354>

0810cf48 <srand>:
 810cf48:	b538      	push	{r3, r4, r5, lr}
 810cf4a:	4b10      	ldr	r3, [pc, #64]	@ (810cf8c <srand+0x44>)
 810cf4c:	681d      	ldr	r5, [r3, #0]
 810cf4e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 810cf50:	4604      	mov	r4, r0
 810cf52:	b9b3      	cbnz	r3, 810cf82 <srand+0x3a>
 810cf54:	2018      	movs	r0, #24
 810cf56:	f002 f805 	bl	810ef64 <malloc>
 810cf5a:	4602      	mov	r2, r0
 810cf5c:	6328      	str	r0, [r5, #48]	@ 0x30
 810cf5e:	b920      	cbnz	r0, 810cf6a <srand+0x22>
 810cf60:	4b0b      	ldr	r3, [pc, #44]	@ (810cf90 <srand+0x48>)
 810cf62:	480c      	ldr	r0, [pc, #48]	@ (810cf94 <srand+0x4c>)
 810cf64:	2146      	movs	r1, #70	@ 0x46
 810cf66:	f001 f947 	bl	810e1f8 <__assert_func>
 810cf6a:	490b      	ldr	r1, [pc, #44]	@ (810cf98 <srand+0x50>)
 810cf6c:	4b0b      	ldr	r3, [pc, #44]	@ (810cf9c <srand+0x54>)
 810cf6e:	e9c0 1300 	strd	r1, r3, [r0]
 810cf72:	4b0b      	ldr	r3, [pc, #44]	@ (810cfa0 <srand+0x58>)
 810cf74:	6083      	str	r3, [r0, #8]
 810cf76:	230b      	movs	r3, #11
 810cf78:	8183      	strh	r3, [r0, #12]
 810cf7a:	2100      	movs	r1, #0
 810cf7c:	2001      	movs	r0, #1
 810cf7e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 810cf82:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 810cf84:	2200      	movs	r2, #0
 810cf86:	611c      	str	r4, [r3, #16]
 810cf88:	615a      	str	r2, [r3, #20]
 810cf8a:	bd38      	pop	{r3, r4, r5, pc}
 810cf8c:	100000ac 	.word	0x100000ac
 810cf90:	081117d8 	.word	0x081117d8
 810cf94:	081117ef 	.word	0x081117ef
 810cf98:	abcd330e 	.word	0xabcd330e
 810cf9c:	e66d1234 	.word	0xe66d1234
 810cfa0:	0005deec 	.word	0x0005deec

0810cfa4 <__cvt>:
 810cfa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810cfa8:	ec57 6b10 	vmov	r6, r7, d0
 810cfac:	2f00      	cmp	r7, #0
 810cfae:	460c      	mov	r4, r1
 810cfb0:	4619      	mov	r1, r3
 810cfb2:	463b      	mov	r3, r7
 810cfb4:	bfbb      	ittet	lt
 810cfb6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 810cfba:	461f      	movlt	r7, r3
 810cfbc:	2300      	movge	r3, #0
 810cfbe:	232d      	movlt	r3, #45	@ 0x2d
 810cfc0:	700b      	strb	r3, [r1, #0]
 810cfc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810cfc4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 810cfc8:	4691      	mov	r9, r2
 810cfca:	f023 0820 	bic.w	r8, r3, #32
 810cfce:	bfbc      	itt	lt
 810cfd0:	4632      	movlt	r2, r6
 810cfd2:	4616      	movlt	r6, r2
 810cfd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810cfd8:	d005      	beq.n	810cfe6 <__cvt+0x42>
 810cfda:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 810cfde:	d100      	bne.n	810cfe2 <__cvt+0x3e>
 810cfe0:	3401      	adds	r4, #1
 810cfe2:	2102      	movs	r1, #2
 810cfe4:	e000      	b.n	810cfe8 <__cvt+0x44>
 810cfe6:	2103      	movs	r1, #3
 810cfe8:	ab03      	add	r3, sp, #12
 810cfea:	9301      	str	r3, [sp, #4]
 810cfec:	ab02      	add	r3, sp, #8
 810cfee:	9300      	str	r3, [sp, #0]
 810cff0:	ec47 6b10 	vmov	d0, r6, r7
 810cff4:	4653      	mov	r3, sl
 810cff6:	4622      	mov	r2, r4
 810cff8:	f001 f9a6 	bl	810e348 <_dtoa_r>
 810cffc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 810d000:	4605      	mov	r5, r0
 810d002:	d119      	bne.n	810d038 <__cvt+0x94>
 810d004:	f019 0f01 	tst.w	r9, #1
 810d008:	d00e      	beq.n	810d028 <__cvt+0x84>
 810d00a:	eb00 0904 	add.w	r9, r0, r4
 810d00e:	2200      	movs	r2, #0
 810d010:	2300      	movs	r3, #0
 810d012:	4630      	mov	r0, r6
 810d014:	4639      	mov	r1, r7
 810d016:	f7f3 fddf 	bl	8100bd8 <__aeabi_dcmpeq>
 810d01a:	b108      	cbz	r0, 810d020 <__cvt+0x7c>
 810d01c:	f8cd 900c 	str.w	r9, [sp, #12]
 810d020:	2230      	movs	r2, #48	@ 0x30
 810d022:	9b03      	ldr	r3, [sp, #12]
 810d024:	454b      	cmp	r3, r9
 810d026:	d31e      	bcc.n	810d066 <__cvt+0xc2>
 810d028:	9b03      	ldr	r3, [sp, #12]
 810d02a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810d02c:	1b5b      	subs	r3, r3, r5
 810d02e:	4628      	mov	r0, r5
 810d030:	6013      	str	r3, [r2, #0]
 810d032:	b004      	add	sp, #16
 810d034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d038:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810d03c:	eb00 0904 	add.w	r9, r0, r4
 810d040:	d1e5      	bne.n	810d00e <__cvt+0x6a>
 810d042:	7803      	ldrb	r3, [r0, #0]
 810d044:	2b30      	cmp	r3, #48	@ 0x30
 810d046:	d10a      	bne.n	810d05e <__cvt+0xba>
 810d048:	2200      	movs	r2, #0
 810d04a:	2300      	movs	r3, #0
 810d04c:	4630      	mov	r0, r6
 810d04e:	4639      	mov	r1, r7
 810d050:	f7f3 fdc2 	bl	8100bd8 <__aeabi_dcmpeq>
 810d054:	b918      	cbnz	r0, 810d05e <__cvt+0xba>
 810d056:	f1c4 0401 	rsb	r4, r4, #1
 810d05a:	f8ca 4000 	str.w	r4, [sl]
 810d05e:	f8da 3000 	ldr.w	r3, [sl]
 810d062:	4499      	add	r9, r3
 810d064:	e7d3      	b.n	810d00e <__cvt+0x6a>
 810d066:	1c59      	adds	r1, r3, #1
 810d068:	9103      	str	r1, [sp, #12]
 810d06a:	701a      	strb	r2, [r3, #0]
 810d06c:	e7d9      	b.n	810d022 <__cvt+0x7e>

0810d06e <__exponent>:
 810d06e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810d070:	2900      	cmp	r1, #0
 810d072:	bfba      	itte	lt
 810d074:	4249      	neglt	r1, r1
 810d076:	232d      	movlt	r3, #45	@ 0x2d
 810d078:	232b      	movge	r3, #43	@ 0x2b
 810d07a:	2909      	cmp	r1, #9
 810d07c:	7002      	strb	r2, [r0, #0]
 810d07e:	7043      	strb	r3, [r0, #1]
 810d080:	dd29      	ble.n	810d0d6 <__exponent+0x68>
 810d082:	f10d 0307 	add.w	r3, sp, #7
 810d086:	461d      	mov	r5, r3
 810d088:	270a      	movs	r7, #10
 810d08a:	461a      	mov	r2, r3
 810d08c:	fbb1 f6f7 	udiv	r6, r1, r7
 810d090:	fb07 1416 	mls	r4, r7, r6, r1
 810d094:	3430      	adds	r4, #48	@ 0x30
 810d096:	f802 4c01 	strb.w	r4, [r2, #-1]
 810d09a:	460c      	mov	r4, r1
 810d09c:	2c63      	cmp	r4, #99	@ 0x63
 810d09e:	f103 33ff 	add.w	r3, r3, #4294967295
 810d0a2:	4631      	mov	r1, r6
 810d0a4:	dcf1      	bgt.n	810d08a <__exponent+0x1c>
 810d0a6:	3130      	adds	r1, #48	@ 0x30
 810d0a8:	1e94      	subs	r4, r2, #2
 810d0aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 810d0ae:	1c41      	adds	r1, r0, #1
 810d0b0:	4623      	mov	r3, r4
 810d0b2:	42ab      	cmp	r3, r5
 810d0b4:	d30a      	bcc.n	810d0cc <__exponent+0x5e>
 810d0b6:	f10d 0309 	add.w	r3, sp, #9
 810d0ba:	1a9b      	subs	r3, r3, r2
 810d0bc:	42ac      	cmp	r4, r5
 810d0be:	bf88      	it	hi
 810d0c0:	2300      	movhi	r3, #0
 810d0c2:	3302      	adds	r3, #2
 810d0c4:	4403      	add	r3, r0
 810d0c6:	1a18      	subs	r0, r3, r0
 810d0c8:	b003      	add	sp, #12
 810d0ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810d0cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 810d0d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 810d0d4:	e7ed      	b.n	810d0b2 <__exponent+0x44>
 810d0d6:	2330      	movs	r3, #48	@ 0x30
 810d0d8:	3130      	adds	r1, #48	@ 0x30
 810d0da:	7083      	strb	r3, [r0, #2]
 810d0dc:	70c1      	strb	r1, [r0, #3]
 810d0de:	1d03      	adds	r3, r0, #4
 810d0e0:	e7f1      	b.n	810d0c6 <__exponent+0x58>
	...

0810d0e4 <_printf_float>:
 810d0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d0e8:	b08d      	sub	sp, #52	@ 0x34
 810d0ea:	460c      	mov	r4, r1
 810d0ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 810d0f0:	4616      	mov	r6, r2
 810d0f2:	461f      	mov	r7, r3
 810d0f4:	4605      	mov	r5, r0
 810d0f6:	f000 fff3 	bl	810e0e0 <_localeconv_r>
 810d0fa:	6803      	ldr	r3, [r0, #0]
 810d0fc:	9304      	str	r3, [sp, #16]
 810d0fe:	4618      	mov	r0, r3
 810d100:	f7f3 f93e 	bl	8100380 <strlen>
 810d104:	2300      	movs	r3, #0
 810d106:	930a      	str	r3, [sp, #40]	@ 0x28
 810d108:	f8d8 3000 	ldr.w	r3, [r8]
 810d10c:	9005      	str	r0, [sp, #20]
 810d10e:	3307      	adds	r3, #7
 810d110:	f023 0307 	bic.w	r3, r3, #7
 810d114:	f103 0208 	add.w	r2, r3, #8
 810d118:	f894 a018 	ldrb.w	sl, [r4, #24]
 810d11c:	f8d4 b000 	ldr.w	fp, [r4]
 810d120:	f8c8 2000 	str.w	r2, [r8]
 810d124:	e9d3 8900 	ldrd	r8, r9, [r3]
 810d128:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 810d12c:	9307      	str	r3, [sp, #28]
 810d12e:	f8cd 8018 	str.w	r8, [sp, #24]
 810d132:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 810d136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810d13a:	4b9c      	ldr	r3, [pc, #624]	@ (810d3ac <_printf_float+0x2c8>)
 810d13c:	f04f 32ff 	mov.w	r2, #4294967295
 810d140:	f7f3 fd7c 	bl	8100c3c <__aeabi_dcmpun>
 810d144:	bb70      	cbnz	r0, 810d1a4 <_printf_float+0xc0>
 810d146:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810d14a:	4b98      	ldr	r3, [pc, #608]	@ (810d3ac <_printf_float+0x2c8>)
 810d14c:	f04f 32ff 	mov.w	r2, #4294967295
 810d150:	f7f3 fd56 	bl	8100c00 <__aeabi_dcmple>
 810d154:	bb30      	cbnz	r0, 810d1a4 <_printf_float+0xc0>
 810d156:	2200      	movs	r2, #0
 810d158:	2300      	movs	r3, #0
 810d15a:	4640      	mov	r0, r8
 810d15c:	4649      	mov	r1, r9
 810d15e:	f7f3 fd45 	bl	8100bec <__aeabi_dcmplt>
 810d162:	b110      	cbz	r0, 810d16a <_printf_float+0x86>
 810d164:	232d      	movs	r3, #45	@ 0x2d
 810d166:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810d16a:	4a91      	ldr	r2, [pc, #580]	@ (810d3b0 <_printf_float+0x2cc>)
 810d16c:	4b91      	ldr	r3, [pc, #580]	@ (810d3b4 <_printf_float+0x2d0>)
 810d16e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 810d172:	bf94      	ite	ls
 810d174:	4690      	movls	r8, r2
 810d176:	4698      	movhi	r8, r3
 810d178:	2303      	movs	r3, #3
 810d17a:	6123      	str	r3, [r4, #16]
 810d17c:	f02b 0304 	bic.w	r3, fp, #4
 810d180:	6023      	str	r3, [r4, #0]
 810d182:	f04f 0900 	mov.w	r9, #0
 810d186:	9700      	str	r7, [sp, #0]
 810d188:	4633      	mov	r3, r6
 810d18a:	aa0b      	add	r2, sp, #44	@ 0x2c
 810d18c:	4621      	mov	r1, r4
 810d18e:	4628      	mov	r0, r5
 810d190:	f000 f9d2 	bl	810d538 <_printf_common>
 810d194:	3001      	adds	r0, #1
 810d196:	f040 808d 	bne.w	810d2b4 <_printf_float+0x1d0>
 810d19a:	f04f 30ff 	mov.w	r0, #4294967295
 810d19e:	b00d      	add	sp, #52	@ 0x34
 810d1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d1a4:	4642      	mov	r2, r8
 810d1a6:	464b      	mov	r3, r9
 810d1a8:	4640      	mov	r0, r8
 810d1aa:	4649      	mov	r1, r9
 810d1ac:	f7f3 fd46 	bl	8100c3c <__aeabi_dcmpun>
 810d1b0:	b140      	cbz	r0, 810d1c4 <_printf_float+0xe0>
 810d1b2:	464b      	mov	r3, r9
 810d1b4:	2b00      	cmp	r3, #0
 810d1b6:	bfbc      	itt	lt
 810d1b8:	232d      	movlt	r3, #45	@ 0x2d
 810d1ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 810d1be:	4a7e      	ldr	r2, [pc, #504]	@ (810d3b8 <_printf_float+0x2d4>)
 810d1c0:	4b7e      	ldr	r3, [pc, #504]	@ (810d3bc <_printf_float+0x2d8>)
 810d1c2:	e7d4      	b.n	810d16e <_printf_float+0x8a>
 810d1c4:	6863      	ldr	r3, [r4, #4]
 810d1c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 810d1ca:	9206      	str	r2, [sp, #24]
 810d1cc:	1c5a      	adds	r2, r3, #1
 810d1ce:	d13b      	bne.n	810d248 <_printf_float+0x164>
 810d1d0:	2306      	movs	r3, #6
 810d1d2:	6063      	str	r3, [r4, #4]
 810d1d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 810d1d8:	2300      	movs	r3, #0
 810d1da:	6022      	str	r2, [r4, #0]
 810d1dc:	9303      	str	r3, [sp, #12]
 810d1de:	ab0a      	add	r3, sp, #40	@ 0x28
 810d1e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 810d1e4:	ab09      	add	r3, sp, #36	@ 0x24
 810d1e6:	9300      	str	r3, [sp, #0]
 810d1e8:	6861      	ldr	r1, [r4, #4]
 810d1ea:	ec49 8b10 	vmov	d0, r8, r9
 810d1ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 810d1f2:	4628      	mov	r0, r5
 810d1f4:	f7ff fed6 	bl	810cfa4 <__cvt>
 810d1f8:	9b06      	ldr	r3, [sp, #24]
 810d1fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810d1fc:	2b47      	cmp	r3, #71	@ 0x47
 810d1fe:	4680      	mov	r8, r0
 810d200:	d129      	bne.n	810d256 <_printf_float+0x172>
 810d202:	1cc8      	adds	r0, r1, #3
 810d204:	db02      	blt.n	810d20c <_printf_float+0x128>
 810d206:	6863      	ldr	r3, [r4, #4]
 810d208:	4299      	cmp	r1, r3
 810d20a:	dd41      	ble.n	810d290 <_printf_float+0x1ac>
 810d20c:	f1aa 0a02 	sub.w	sl, sl, #2
 810d210:	fa5f fa8a 	uxtb.w	sl, sl
 810d214:	3901      	subs	r1, #1
 810d216:	4652      	mov	r2, sl
 810d218:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 810d21c:	9109      	str	r1, [sp, #36]	@ 0x24
 810d21e:	f7ff ff26 	bl	810d06e <__exponent>
 810d222:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810d224:	1813      	adds	r3, r2, r0
 810d226:	2a01      	cmp	r2, #1
 810d228:	4681      	mov	r9, r0
 810d22a:	6123      	str	r3, [r4, #16]
 810d22c:	dc02      	bgt.n	810d234 <_printf_float+0x150>
 810d22e:	6822      	ldr	r2, [r4, #0]
 810d230:	07d2      	lsls	r2, r2, #31
 810d232:	d501      	bpl.n	810d238 <_printf_float+0x154>
 810d234:	3301      	adds	r3, #1
 810d236:	6123      	str	r3, [r4, #16]
 810d238:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 810d23c:	2b00      	cmp	r3, #0
 810d23e:	d0a2      	beq.n	810d186 <_printf_float+0xa2>
 810d240:	232d      	movs	r3, #45	@ 0x2d
 810d242:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810d246:	e79e      	b.n	810d186 <_printf_float+0xa2>
 810d248:	9a06      	ldr	r2, [sp, #24]
 810d24a:	2a47      	cmp	r2, #71	@ 0x47
 810d24c:	d1c2      	bne.n	810d1d4 <_printf_float+0xf0>
 810d24e:	2b00      	cmp	r3, #0
 810d250:	d1c0      	bne.n	810d1d4 <_printf_float+0xf0>
 810d252:	2301      	movs	r3, #1
 810d254:	e7bd      	b.n	810d1d2 <_printf_float+0xee>
 810d256:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810d25a:	d9db      	bls.n	810d214 <_printf_float+0x130>
 810d25c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 810d260:	d118      	bne.n	810d294 <_printf_float+0x1b0>
 810d262:	2900      	cmp	r1, #0
 810d264:	6863      	ldr	r3, [r4, #4]
 810d266:	dd0b      	ble.n	810d280 <_printf_float+0x19c>
 810d268:	6121      	str	r1, [r4, #16]
 810d26a:	b913      	cbnz	r3, 810d272 <_printf_float+0x18e>
 810d26c:	6822      	ldr	r2, [r4, #0]
 810d26e:	07d0      	lsls	r0, r2, #31
 810d270:	d502      	bpl.n	810d278 <_printf_float+0x194>
 810d272:	3301      	adds	r3, #1
 810d274:	440b      	add	r3, r1
 810d276:	6123      	str	r3, [r4, #16]
 810d278:	65a1      	str	r1, [r4, #88]	@ 0x58
 810d27a:	f04f 0900 	mov.w	r9, #0
 810d27e:	e7db      	b.n	810d238 <_printf_float+0x154>
 810d280:	b913      	cbnz	r3, 810d288 <_printf_float+0x1a4>
 810d282:	6822      	ldr	r2, [r4, #0]
 810d284:	07d2      	lsls	r2, r2, #31
 810d286:	d501      	bpl.n	810d28c <_printf_float+0x1a8>
 810d288:	3302      	adds	r3, #2
 810d28a:	e7f4      	b.n	810d276 <_printf_float+0x192>
 810d28c:	2301      	movs	r3, #1
 810d28e:	e7f2      	b.n	810d276 <_printf_float+0x192>
 810d290:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 810d294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810d296:	4299      	cmp	r1, r3
 810d298:	db05      	blt.n	810d2a6 <_printf_float+0x1c2>
 810d29a:	6823      	ldr	r3, [r4, #0]
 810d29c:	6121      	str	r1, [r4, #16]
 810d29e:	07d8      	lsls	r0, r3, #31
 810d2a0:	d5ea      	bpl.n	810d278 <_printf_float+0x194>
 810d2a2:	1c4b      	adds	r3, r1, #1
 810d2a4:	e7e7      	b.n	810d276 <_printf_float+0x192>
 810d2a6:	2900      	cmp	r1, #0
 810d2a8:	bfd4      	ite	le
 810d2aa:	f1c1 0202 	rsble	r2, r1, #2
 810d2ae:	2201      	movgt	r2, #1
 810d2b0:	4413      	add	r3, r2
 810d2b2:	e7e0      	b.n	810d276 <_printf_float+0x192>
 810d2b4:	6823      	ldr	r3, [r4, #0]
 810d2b6:	055a      	lsls	r2, r3, #21
 810d2b8:	d407      	bmi.n	810d2ca <_printf_float+0x1e6>
 810d2ba:	6923      	ldr	r3, [r4, #16]
 810d2bc:	4642      	mov	r2, r8
 810d2be:	4631      	mov	r1, r6
 810d2c0:	4628      	mov	r0, r5
 810d2c2:	47b8      	blx	r7
 810d2c4:	3001      	adds	r0, #1
 810d2c6:	d12b      	bne.n	810d320 <_printf_float+0x23c>
 810d2c8:	e767      	b.n	810d19a <_printf_float+0xb6>
 810d2ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810d2ce:	f240 80dd 	bls.w	810d48c <_printf_float+0x3a8>
 810d2d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810d2d6:	2200      	movs	r2, #0
 810d2d8:	2300      	movs	r3, #0
 810d2da:	f7f3 fc7d 	bl	8100bd8 <__aeabi_dcmpeq>
 810d2de:	2800      	cmp	r0, #0
 810d2e0:	d033      	beq.n	810d34a <_printf_float+0x266>
 810d2e2:	4a37      	ldr	r2, [pc, #220]	@ (810d3c0 <_printf_float+0x2dc>)
 810d2e4:	2301      	movs	r3, #1
 810d2e6:	4631      	mov	r1, r6
 810d2e8:	4628      	mov	r0, r5
 810d2ea:	47b8      	blx	r7
 810d2ec:	3001      	adds	r0, #1
 810d2ee:	f43f af54 	beq.w	810d19a <_printf_float+0xb6>
 810d2f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 810d2f6:	4543      	cmp	r3, r8
 810d2f8:	db02      	blt.n	810d300 <_printf_float+0x21c>
 810d2fa:	6823      	ldr	r3, [r4, #0]
 810d2fc:	07d8      	lsls	r0, r3, #31
 810d2fe:	d50f      	bpl.n	810d320 <_printf_float+0x23c>
 810d300:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810d304:	4631      	mov	r1, r6
 810d306:	4628      	mov	r0, r5
 810d308:	47b8      	blx	r7
 810d30a:	3001      	adds	r0, #1
 810d30c:	f43f af45 	beq.w	810d19a <_printf_float+0xb6>
 810d310:	f04f 0900 	mov.w	r9, #0
 810d314:	f108 38ff 	add.w	r8, r8, #4294967295
 810d318:	f104 0a1a 	add.w	sl, r4, #26
 810d31c:	45c8      	cmp	r8, r9
 810d31e:	dc09      	bgt.n	810d334 <_printf_float+0x250>
 810d320:	6823      	ldr	r3, [r4, #0]
 810d322:	079b      	lsls	r3, r3, #30
 810d324:	f100 8103 	bmi.w	810d52e <_printf_float+0x44a>
 810d328:	68e0      	ldr	r0, [r4, #12]
 810d32a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810d32c:	4298      	cmp	r0, r3
 810d32e:	bfb8      	it	lt
 810d330:	4618      	movlt	r0, r3
 810d332:	e734      	b.n	810d19e <_printf_float+0xba>
 810d334:	2301      	movs	r3, #1
 810d336:	4652      	mov	r2, sl
 810d338:	4631      	mov	r1, r6
 810d33a:	4628      	mov	r0, r5
 810d33c:	47b8      	blx	r7
 810d33e:	3001      	adds	r0, #1
 810d340:	f43f af2b 	beq.w	810d19a <_printf_float+0xb6>
 810d344:	f109 0901 	add.w	r9, r9, #1
 810d348:	e7e8      	b.n	810d31c <_printf_float+0x238>
 810d34a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d34c:	2b00      	cmp	r3, #0
 810d34e:	dc39      	bgt.n	810d3c4 <_printf_float+0x2e0>
 810d350:	4a1b      	ldr	r2, [pc, #108]	@ (810d3c0 <_printf_float+0x2dc>)
 810d352:	2301      	movs	r3, #1
 810d354:	4631      	mov	r1, r6
 810d356:	4628      	mov	r0, r5
 810d358:	47b8      	blx	r7
 810d35a:	3001      	adds	r0, #1
 810d35c:	f43f af1d 	beq.w	810d19a <_printf_float+0xb6>
 810d360:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 810d364:	ea59 0303 	orrs.w	r3, r9, r3
 810d368:	d102      	bne.n	810d370 <_printf_float+0x28c>
 810d36a:	6823      	ldr	r3, [r4, #0]
 810d36c:	07d9      	lsls	r1, r3, #31
 810d36e:	d5d7      	bpl.n	810d320 <_printf_float+0x23c>
 810d370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810d374:	4631      	mov	r1, r6
 810d376:	4628      	mov	r0, r5
 810d378:	47b8      	blx	r7
 810d37a:	3001      	adds	r0, #1
 810d37c:	f43f af0d 	beq.w	810d19a <_printf_float+0xb6>
 810d380:	f04f 0a00 	mov.w	sl, #0
 810d384:	f104 0b1a 	add.w	fp, r4, #26
 810d388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d38a:	425b      	negs	r3, r3
 810d38c:	4553      	cmp	r3, sl
 810d38e:	dc01      	bgt.n	810d394 <_printf_float+0x2b0>
 810d390:	464b      	mov	r3, r9
 810d392:	e793      	b.n	810d2bc <_printf_float+0x1d8>
 810d394:	2301      	movs	r3, #1
 810d396:	465a      	mov	r2, fp
 810d398:	4631      	mov	r1, r6
 810d39a:	4628      	mov	r0, r5
 810d39c:	47b8      	blx	r7
 810d39e:	3001      	adds	r0, #1
 810d3a0:	f43f aefb 	beq.w	810d19a <_printf_float+0xb6>
 810d3a4:	f10a 0a01 	add.w	sl, sl, #1
 810d3a8:	e7ee      	b.n	810d388 <_printf_float+0x2a4>
 810d3aa:	bf00      	nop
 810d3ac:	7fefffff 	.word	0x7fefffff
 810d3b0:	08111847 	.word	0x08111847
 810d3b4:	0811184b 	.word	0x0811184b
 810d3b8:	0811184f 	.word	0x0811184f
 810d3bc:	08111853 	.word	0x08111853
 810d3c0:	08111857 	.word	0x08111857
 810d3c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810d3c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810d3ca:	4553      	cmp	r3, sl
 810d3cc:	bfa8      	it	ge
 810d3ce:	4653      	movge	r3, sl
 810d3d0:	2b00      	cmp	r3, #0
 810d3d2:	4699      	mov	r9, r3
 810d3d4:	dc36      	bgt.n	810d444 <_printf_float+0x360>
 810d3d6:	f04f 0b00 	mov.w	fp, #0
 810d3da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810d3de:	f104 021a 	add.w	r2, r4, #26
 810d3e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810d3e4:	9306      	str	r3, [sp, #24]
 810d3e6:	eba3 0309 	sub.w	r3, r3, r9
 810d3ea:	455b      	cmp	r3, fp
 810d3ec:	dc31      	bgt.n	810d452 <_printf_float+0x36e>
 810d3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d3f0:	459a      	cmp	sl, r3
 810d3f2:	dc3a      	bgt.n	810d46a <_printf_float+0x386>
 810d3f4:	6823      	ldr	r3, [r4, #0]
 810d3f6:	07da      	lsls	r2, r3, #31
 810d3f8:	d437      	bmi.n	810d46a <_printf_float+0x386>
 810d3fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d3fc:	ebaa 0903 	sub.w	r9, sl, r3
 810d400:	9b06      	ldr	r3, [sp, #24]
 810d402:	ebaa 0303 	sub.w	r3, sl, r3
 810d406:	4599      	cmp	r9, r3
 810d408:	bfa8      	it	ge
 810d40a:	4699      	movge	r9, r3
 810d40c:	f1b9 0f00 	cmp.w	r9, #0
 810d410:	dc33      	bgt.n	810d47a <_printf_float+0x396>
 810d412:	f04f 0800 	mov.w	r8, #0
 810d416:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810d41a:	f104 0b1a 	add.w	fp, r4, #26
 810d41e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d420:	ebaa 0303 	sub.w	r3, sl, r3
 810d424:	eba3 0309 	sub.w	r3, r3, r9
 810d428:	4543      	cmp	r3, r8
 810d42a:	f77f af79 	ble.w	810d320 <_printf_float+0x23c>
 810d42e:	2301      	movs	r3, #1
 810d430:	465a      	mov	r2, fp
 810d432:	4631      	mov	r1, r6
 810d434:	4628      	mov	r0, r5
 810d436:	47b8      	blx	r7
 810d438:	3001      	adds	r0, #1
 810d43a:	f43f aeae 	beq.w	810d19a <_printf_float+0xb6>
 810d43e:	f108 0801 	add.w	r8, r8, #1
 810d442:	e7ec      	b.n	810d41e <_printf_float+0x33a>
 810d444:	4642      	mov	r2, r8
 810d446:	4631      	mov	r1, r6
 810d448:	4628      	mov	r0, r5
 810d44a:	47b8      	blx	r7
 810d44c:	3001      	adds	r0, #1
 810d44e:	d1c2      	bne.n	810d3d6 <_printf_float+0x2f2>
 810d450:	e6a3      	b.n	810d19a <_printf_float+0xb6>
 810d452:	2301      	movs	r3, #1
 810d454:	4631      	mov	r1, r6
 810d456:	4628      	mov	r0, r5
 810d458:	9206      	str	r2, [sp, #24]
 810d45a:	47b8      	blx	r7
 810d45c:	3001      	adds	r0, #1
 810d45e:	f43f ae9c 	beq.w	810d19a <_printf_float+0xb6>
 810d462:	9a06      	ldr	r2, [sp, #24]
 810d464:	f10b 0b01 	add.w	fp, fp, #1
 810d468:	e7bb      	b.n	810d3e2 <_printf_float+0x2fe>
 810d46a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810d46e:	4631      	mov	r1, r6
 810d470:	4628      	mov	r0, r5
 810d472:	47b8      	blx	r7
 810d474:	3001      	adds	r0, #1
 810d476:	d1c0      	bne.n	810d3fa <_printf_float+0x316>
 810d478:	e68f      	b.n	810d19a <_printf_float+0xb6>
 810d47a:	9a06      	ldr	r2, [sp, #24]
 810d47c:	464b      	mov	r3, r9
 810d47e:	4442      	add	r2, r8
 810d480:	4631      	mov	r1, r6
 810d482:	4628      	mov	r0, r5
 810d484:	47b8      	blx	r7
 810d486:	3001      	adds	r0, #1
 810d488:	d1c3      	bne.n	810d412 <_printf_float+0x32e>
 810d48a:	e686      	b.n	810d19a <_printf_float+0xb6>
 810d48c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810d490:	f1ba 0f01 	cmp.w	sl, #1
 810d494:	dc01      	bgt.n	810d49a <_printf_float+0x3b6>
 810d496:	07db      	lsls	r3, r3, #31
 810d498:	d536      	bpl.n	810d508 <_printf_float+0x424>
 810d49a:	2301      	movs	r3, #1
 810d49c:	4642      	mov	r2, r8
 810d49e:	4631      	mov	r1, r6
 810d4a0:	4628      	mov	r0, r5
 810d4a2:	47b8      	blx	r7
 810d4a4:	3001      	adds	r0, #1
 810d4a6:	f43f ae78 	beq.w	810d19a <_printf_float+0xb6>
 810d4aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810d4ae:	4631      	mov	r1, r6
 810d4b0:	4628      	mov	r0, r5
 810d4b2:	47b8      	blx	r7
 810d4b4:	3001      	adds	r0, #1
 810d4b6:	f43f ae70 	beq.w	810d19a <_printf_float+0xb6>
 810d4ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810d4be:	2200      	movs	r2, #0
 810d4c0:	2300      	movs	r3, #0
 810d4c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 810d4c6:	f7f3 fb87 	bl	8100bd8 <__aeabi_dcmpeq>
 810d4ca:	b9c0      	cbnz	r0, 810d4fe <_printf_float+0x41a>
 810d4cc:	4653      	mov	r3, sl
 810d4ce:	f108 0201 	add.w	r2, r8, #1
 810d4d2:	4631      	mov	r1, r6
 810d4d4:	4628      	mov	r0, r5
 810d4d6:	47b8      	blx	r7
 810d4d8:	3001      	adds	r0, #1
 810d4da:	d10c      	bne.n	810d4f6 <_printf_float+0x412>
 810d4dc:	e65d      	b.n	810d19a <_printf_float+0xb6>
 810d4de:	2301      	movs	r3, #1
 810d4e0:	465a      	mov	r2, fp
 810d4e2:	4631      	mov	r1, r6
 810d4e4:	4628      	mov	r0, r5
 810d4e6:	47b8      	blx	r7
 810d4e8:	3001      	adds	r0, #1
 810d4ea:	f43f ae56 	beq.w	810d19a <_printf_float+0xb6>
 810d4ee:	f108 0801 	add.w	r8, r8, #1
 810d4f2:	45d0      	cmp	r8, sl
 810d4f4:	dbf3      	blt.n	810d4de <_printf_float+0x3fa>
 810d4f6:	464b      	mov	r3, r9
 810d4f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 810d4fc:	e6df      	b.n	810d2be <_printf_float+0x1da>
 810d4fe:	f04f 0800 	mov.w	r8, #0
 810d502:	f104 0b1a 	add.w	fp, r4, #26
 810d506:	e7f4      	b.n	810d4f2 <_printf_float+0x40e>
 810d508:	2301      	movs	r3, #1
 810d50a:	4642      	mov	r2, r8
 810d50c:	e7e1      	b.n	810d4d2 <_printf_float+0x3ee>
 810d50e:	2301      	movs	r3, #1
 810d510:	464a      	mov	r2, r9
 810d512:	4631      	mov	r1, r6
 810d514:	4628      	mov	r0, r5
 810d516:	47b8      	blx	r7
 810d518:	3001      	adds	r0, #1
 810d51a:	f43f ae3e 	beq.w	810d19a <_printf_float+0xb6>
 810d51e:	f108 0801 	add.w	r8, r8, #1
 810d522:	68e3      	ldr	r3, [r4, #12]
 810d524:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810d526:	1a5b      	subs	r3, r3, r1
 810d528:	4543      	cmp	r3, r8
 810d52a:	dcf0      	bgt.n	810d50e <_printf_float+0x42a>
 810d52c:	e6fc      	b.n	810d328 <_printf_float+0x244>
 810d52e:	f04f 0800 	mov.w	r8, #0
 810d532:	f104 0919 	add.w	r9, r4, #25
 810d536:	e7f4      	b.n	810d522 <_printf_float+0x43e>

0810d538 <_printf_common>:
 810d538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810d53c:	4616      	mov	r6, r2
 810d53e:	4698      	mov	r8, r3
 810d540:	688a      	ldr	r2, [r1, #8]
 810d542:	690b      	ldr	r3, [r1, #16]
 810d544:	f8dd 9020 	ldr.w	r9, [sp, #32]
 810d548:	4293      	cmp	r3, r2
 810d54a:	bfb8      	it	lt
 810d54c:	4613      	movlt	r3, r2
 810d54e:	6033      	str	r3, [r6, #0]
 810d550:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 810d554:	4607      	mov	r7, r0
 810d556:	460c      	mov	r4, r1
 810d558:	b10a      	cbz	r2, 810d55e <_printf_common+0x26>
 810d55a:	3301      	adds	r3, #1
 810d55c:	6033      	str	r3, [r6, #0]
 810d55e:	6823      	ldr	r3, [r4, #0]
 810d560:	0699      	lsls	r1, r3, #26
 810d562:	bf42      	ittt	mi
 810d564:	6833      	ldrmi	r3, [r6, #0]
 810d566:	3302      	addmi	r3, #2
 810d568:	6033      	strmi	r3, [r6, #0]
 810d56a:	6825      	ldr	r5, [r4, #0]
 810d56c:	f015 0506 	ands.w	r5, r5, #6
 810d570:	d106      	bne.n	810d580 <_printf_common+0x48>
 810d572:	f104 0a19 	add.w	sl, r4, #25
 810d576:	68e3      	ldr	r3, [r4, #12]
 810d578:	6832      	ldr	r2, [r6, #0]
 810d57a:	1a9b      	subs	r3, r3, r2
 810d57c:	42ab      	cmp	r3, r5
 810d57e:	dc26      	bgt.n	810d5ce <_printf_common+0x96>
 810d580:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 810d584:	6822      	ldr	r2, [r4, #0]
 810d586:	3b00      	subs	r3, #0
 810d588:	bf18      	it	ne
 810d58a:	2301      	movne	r3, #1
 810d58c:	0692      	lsls	r2, r2, #26
 810d58e:	d42b      	bmi.n	810d5e8 <_printf_common+0xb0>
 810d590:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 810d594:	4641      	mov	r1, r8
 810d596:	4638      	mov	r0, r7
 810d598:	47c8      	blx	r9
 810d59a:	3001      	adds	r0, #1
 810d59c:	d01e      	beq.n	810d5dc <_printf_common+0xa4>
 810d59e:	6823      	ldr	r3, [r4, #0]
 810d5a0:	6922      	ldr	r2, [r4, #16]
 810d5a2:	f003 0306 	and.w	r3, r3, #6
 810d5a6:	2b04      	cmp	r3, #4
 810d5a8:	bf02      	ittt	eq
 810d5aa:	68e5      	ldreq	r5, [r4, #12]
 810d5ac:	6833      	ldreq	r3, [r6, #0]
 810d5ae:	1aed      	subeq	r5, r5, r3
 810d5b0:	68a3      	ldr	r3, [r4, #8]
 810d5b2:	bf0c      	ite	eq
 810d5b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810d5b8:	2500      	movne	r5, #0
 810d5ba:	4293      	cmp	r3, r2
 810d5bc:	bfc4      	itt	gt
 810d5be:	1a9b      	subgt	r3, r3, r2
 810d5c0:	18ed      	addgt	r5, r5, r3
 810d5c2:	2600      	movs	r6, #0
 810d5c4:	341a      	adds	r4, #26
 810d5c6:	42b5      	cmp	r5, r6
 810d5c8:	d11a      	bne.n	810d600 <_printf_common+0xc8>
 810d5ca:	2000      	movs	r0, #0
 810d5cc:	e008      	b.n	810d5e0 <_printf_common+0xa8>
 810d5ce:	2301      	movs	r3, #1
 810d5d0:	4652      	mov	r2, sl
 810d5d2:	4641      	mov	r1, r8
 810d5d4:	4638      	mov	r0, r7
 810d5d6:	47c8      	blx	r9
 810d5d8:	3001      	adds	r0, #1
 810d5da:	d103      	bne.n	810d5e4 <_printf_common+0xac>
 810d5dc:	f04f 30ff 	mov.w	r0, #4294967295
 810d5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d5e4:	3501      	adds	r5, #1
 810d5e6:	e7c6      	b.n	810d576 <_printf_common+0x3e>
 810d5e8:	18e1      	adds	r1, r4, r3
 810d5ea:	1c5a      	adds	r2, r3, #1
 810d5ec:	2030      	movs	r0, #48	@ 0x30
 810d5ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 810d5f2:	4422      	add	r2, r4
 810d5f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 810d5f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 810d5fc:	3302      	adds	r3, #2
 810d5fe:	e7c7      	b.n	810d590 <_printf_common+0x58>
 810d600:	2301      	movs	r3, #1
 810d602:	4622      	mov	r2, r4
 810d604:	4641      	mov	r1, r8
 810d606:	4638      	mov	r0, r7
 810d608:	47c8      	blx	r9
 810d60a:	3001      	adds	r0, #1
 810d60c:	d0e6      	beq.n	810d5dc <_printf_common+0xa4>
 810d60e:	3601      	adds	r6, #1
 810d610:	e7d9      	b.n	810d5c6 <_printf_common+0x8e>
	...

0810d614 <_printf_i>:
 810d614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810d618:	7e0f      	ldrb	r7, [r1, #24]
 810d61a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 810d61c:	2f78      	cmp	r7, #120	@ 0x78
 810d61e:	4691      	mov	r9, r2
 810d620:	4680      	mov	r8, r0
 810d622:	460c      	mov	r4, r1
 810d624:	469a      	mov	sl, r3
 810d626:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810d62a:	d807      	bhi.n	810d63c <_printf_i+0x28>
 810d62c:	2f62      	cmp	r7, #98	@ 0x62
 810d62e:	d80a      	bhi.n	810d646 <_printf_i+0x32>
 810d630:	2f00      	cmp	r7, #0
 810d632:	f000 80d2 	beq.w	810d7da <_printf_i+0x1c6>
 810d636:	2f58      	cmp	r7, #88	@ 0x58
 810d638:	f000 80b9 	beq.w	810d7ae <_printf_i+0x19a>
 810d63c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810d640:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 810d644:	e03a      	b.n	810d6bc <_printf_i+0xa8>
 810d646:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 810d64a:	2b15      	cmp	r3, #21
 810d64c:	d8f6      	bhi.n	810d63c <_printf_i+0x28>
 810d64e:	a101      	add	r1, pc, #4	@ (adr r1, 810d654 <_printf_i+0x40>)
 810d650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810d654:	0810d6ad 	.word	0x0810d6ad
 810d658:	0810d6c1 	.word	0x0810d6c1
 810d65c:	0810d63d 	.word	0x0810d63d
 810d660:	0810d63d 	.word	0x0810d63d
 810d664:	0810d63d 	.word	0x0810d63d
 810d668:	0810d63d 	.word	0x0810d63d
 810d66c:	0810d6c1 	.word	0x0810d6c1
 810d670:	0810d63d 	.word	0x0810d63d
 810d674:	0810d63d 	.word	0x0810d63d
 810d678:	0810d63d 	.word	0x0810d63d
 810d67c:	0810d63d 	.word	0x0810d63d
 810d680:	0810d7c1 	.word	0x0810d7c1
 810d684:	0810d6eb 	.word	0x0810d6eb
 810d688:	0810d77b 	.word	0x0810d77b
 810d68c:	0810d63d 	.word	0x0810d63d
 810d690:	0810d63d 	.word	0x0810d63d
 810d694:	0810d7e3 	.word	0x0810d7e3
 810d698:	0810d63d 	.word	0x0810d63d
 810d69c:	0810d6eb 	.word	0x0810d6eb
 810d6a0:	0810d63d 	.word	0x0810d63d
 810d6a4:	0810d63d 	.word	0x0810d63d
 810d6a8:	0810d783 	.word	0x0810d783
 810d6ac:	6833      	ldr	r3, [r6, #0]
 810d6ae:	1d1a      	adds	r2, r3, #4
 810d6b0:	681b      	ldr	r3, [r3, #0]
 810d6b2:	6032      	str	r2, [r6, #0]
 810d6b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810d6b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 810d6bc:	2301      	movs	r3, #1
 810d6be:	e09d      	b.n	810d7fc <_printf_i+0x1e8>
 810d6c0:	6833      	ldr	r3, [r6, #0]
 810d6c2:	6820      	ldr	r0, [r4, #0]
 810d6c4:	1d19      	adds	r1, r3, #4
 810d6c6:	6031      	str	r1, [r6, #0]
 810d6c8:	0606      	lsls	r6, r0, #24
 810d6ca:	d501      	bpl.n	810d6d0 <_printf_i+0xbc>
 810d6cc:	681d      	ldr	r5, [r3, #0]
 810d6ce:	e003      	b.n	810d6d8 <_printf_i+0xc4>
 810d6d0:	0645      	lsls	r5, r0, #25
 810d6d2:	d5fb      	bpl.n	810d6cc <_printf_i+0xb8>
 810d6d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 810d6d8:	2d00      	cmp	r5, #0
 810d6da:	da03      	bge.n	810d6e4 <_printf_i+0xd0>
 810d6dc:	232d      	movs	r3, #45	@ 0x2d
 810d6de:	426d      	negs	r5, r5
 810d6e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810d6e4:	4859      	ldr	r0, [pc, #356]	@ (810d84c <_printf_i+0x238>)
 810d6e6:	230a      	movs	r3, #10
 810d6e8:	e011      	b.n	810d70e <_printf_i+0xfa>
 810d6ea:	6821      	ldr	r1, [r4, #0]
 810d6ec:	6833      	ldr	r3, [r6, #0]
 810d6ee:	0608      	lsls	r0, r1, #24
 810d6f0:	f853 5b04 	ldr.w	r5, [r3], #4
 810d6f4:	d402      	bmi.n	810d6fc <_printf_i+0xe8>
 810d6f6:	0649      	lsls	r1, r1, #25
 810d6f8:	bf48      	it	mi
 810d6fa:	b2ad      	uxthmi	r5, r5
 810d6fc:	2f6f      	cmp	r7, #111	@ 0x6f
 810d6fe:	4853      	ldr	r0, [pc, #332]	@ (810d84c <_printf_i+0x238>)
 810d700:	6033      	str	r3, [r6, #0]
 810d702:	bf14      	ite	ne
 810d704:	230a      	movne	r3, #10
 810d706:	2308      	moveq	r3, #8
 810d708:	2100      	movs	r1, #0
 810d70a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810d70e:	6866      	ldr	r6, [r4, #4]
 810d710:	60a6      	str	r6, [r4, #8]
 810d712:	2e00      	cmp	r6, #0
 810d714:	bfa2      	ittt	ge
 810d716:	6821      	ldrge	r1, [r4, #0]
 810d718:	f021 0104 	bicge.w	r1, r1, #4
 810d71c:	6021      	strge	r1, [r4, #0]
 810d71e:	b90d      	cbnz	r5, 810d724 <_printf_i+0x110>
 810d720:	2e00      	cmp	r6, #0
 810d722:	d04b      	beq.n	810d7bc <_printf_i+0x1a8>
 810d724:	4616      	mov	r6, r2
 810d726:	fbb5 f1f3 	udiv	r1, r5, r3
 810d72a:	fb03 5711 	mls	r7, r3, r1, r5
 810d72e:	5dc7      	ldrb	r7, [r0, r7]
 810d730:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810d734:	462f      	mov	r7, r5
 810d736:	42bb      	cmp	r3, r7
 810d738:	460d      	mov	r5, r1
 810d73a:	d9f4      	bls.n	810d726 <_printf_i+0x112>
 810d73c:	2b08      	cmp	r3, #8
 810d73e:	d10b      	bne.n	810d758 <_printf_i+0x144>
 810d740:	6823      	ldr	r3, [r4, #0]
 810d742:	07df      	lsls	r7, r3, #31
 810d744:	d508      	bpl.n	810d758 <_printf_i+0x144>
 810d746:	6923      	ldr	r3, [r4, #16]
 810d748:	6861      	ldr	r1, [r4, #4]
 810d74a:	4299      	cmp	r1, r3
 810d74c:	bfde      	ittt	le
 810d74e:	2330      	movle	r3, #48	@ 0x30
 810d750:	f806 3c01 	strble.w	r3, [r6, #-1]
 810d754:	f106 36ff 	addle.w	r6, r6, #4294967295
 810d758:	1b92      	subs	r2, r2, r6
 810d75a:	6122      	str	r2, [r4, #16]
 810d75c:	f8cd a000 	str.w	sl, [sp]
 810d760:	464b      	mov	r3, r9
 810d762:	aa03      	add	r2, sp, #12
 810d764:	4621      	mov	r1, r4
 810d766:	4640      	mov	r0, r8
 810d768:	f7ff fee6 	bl	810d538 <_printf_common>
 810d76c:	3001      	adds	r0, #1
 810d76e:	d14a      	bne.n	810d806 <_printf_i+0x1f2>
 810d770:	f04f 30ff 	mov.w	r0, #4294967295
 810d774:	b004      	add	sp, #16
 810d776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d77a:	6823      	ldr	r3, [r4, #0]
 810d77c:	f043 0320 	orr.w	r3, r3, #32
 810d780:	6023      	str	r3, [r4, #0]
 810d782:	4833      	ldr	r0, [pc, #204]	@ (810d850 <_printf_i+0x23c>)
 810d784:	2778      	movs	r7, #120	@ 0x78
 810d786:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810d78a:	6823      	ldr	r3, [r4, #0]
 810d78c:	6831      	ldr	r1, [r6, #0]
 810d78e:	061f      	lsls	r7, r3, #24
 810d790:	f851 5b04 	ldr.w	r5, [r1], #4
 810d794:	d402      	bmi.n	810d79c <_printf_i+0x188>
 810d796:	065f      	lsls	r7, r3, #25
 810d798:	bf48      	it	mi
 810d79a:	b2ad      	uxthmi	r5, r5
 810d79c:	6031      	str	r1, [r6, #0]
 810d79e:	07d9      	lsls	r1, r3, #31
 810d7a0:	bf44      	itt	mi
 810d7a2:	f043 0320 	orrmi.w	r3, r3, #32
 810d7a6:	6023      	strmi	r3, [r4, #0]
 810d7a8:	b11d      	cbz	r5, 810d7b2 <_printf_i+0x19e>
 810d7aa:	2310      	movs	r3, #16
 810d7ac:	e7ac      	b.n	810d708 <_printf_i+0xf4>
 810d7ae:	4827      	ldr	r0, [pc, #156]	@ (810d84c <_printf_i+0x238>)
 810d7b0:	e7e9      	b.n	810d786 <_printf_i+0x172>
 810d7b2:	6823      	ldr	r3, [r4, #0]
 810d7b4:	f023 0320 	bic.w	r3, r3, #32
 810d7b8:	6023      	str	r3, [r4, #0]
 810d7ba:	e7f6      	b.n	810d7aa <_printf_i+0x196>
 810d7bc:	4616      	mov	r6, r2
 810d7be:	e7bd      	b.n	810d73c <_printf_i+0x128>
 810d7c0:	6833      	ldr	r3, [r6, #0]
 810d7c2:	6825      	ldr	r5, [r4, #0]
 810d7c4:	6961      	ldr	r1, [r4, #20]
 810d7c6:	1d18      	adds	r0, r3, #4
 810d7c8:	6030      	str	r0, [r6, #0]
 810d7ca:	062e      	lsls	r6, r5, #24
 810d7cc:	681b      	ldr	r3, [r3, #0]
 810d7ce:	d501      	bpl.n	810d7d4 <_printf_i+0x1c0>
 810d7d0:	6019      	str	r1, [r3, #0]
 810d7d2:	e002      	b.n	810d7da <_printf_i+0x1c6>
 810d7d4:	0668      	lsls	r0, r5, #25
 810d7d6:	d5fb      	bpl.n	810d7d0 <_printf_i+0x1bc>
 810d7d8:	8019      	strh	r1, [r3, #0]
 810d7da:	2300      	movs	r3, #0
 810d7dc:	6123      	str	r3, [r4, #16]
 810d7de:	4616      	mov	r6, r2
 810d7e0:	e7bc      	b.n	810d75c <_printf_i+0x148>
 810d7e2:	6833      	ldr	r3, [r6, #0]
 810d7e4:	1d1a      	adds	r2, r3, #4
 810d7e6:	6032      	str	r2, [r6, #0]
 810d7e8:	681e      	ldr	r6, [r3, #0]
 810d7ea:	6862      	ldr	r2, [r4, #4]
 810d7ec:	2100      	movs	r1, #0
 810d7ee:	4630      	mov	r0, r6
 810d7f0:	f7f2 fd76 	bl	81002e0 <memchr>
 810d7f4:	b108      	cbz	r0, 810d7fa <_printf_i+0x1e6>
 810d7f6:	1b80      	subs	r0, r0, r6
 810d7f8:	6060      	str	r0, [r4, #4]
 810d7fa:	6863      	ldr	r3, [r4, #4]
 810d7fc:	6123      	str	r3, [r4, #16]
 810d7fe:	2300      	movs	r3, #0
 810d800:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810d804:	e7aa      	b.n	810d75c <_printf_i+0x148>
 810d806:	6923      	ldr	r3, [r4, #16]
 810d808:	4632      	mov	r2, r6
 810d80a:	4649      	mov	r1, r9
 810d80c:	4640      	mov	r0, r8
 810d80e:	47d0      	blx	sl
 810d810:	3001      	adds	r0, #1
 810d812:	d0ad      	beq.n	810d770 <_printf_i+0x15c>
 810d814:	6823      	ldr	r3, [r4, #0]
 810d816:	079b      	lsls	r3, r3, #30
 810d818:	d413      	bmi.n	810d842 <_printf_i+0x22e>
 810d81a:	68e0      	ldr	r0, [r4, #12]
 810d81c:	9b03      	ldr	r3, [sp, #12]
 810d81e:	4298      	cmp	r0, r3
 810d820:	bfb8      	it	lt
 810d822:	4618      	movlt	r0, r3
 810d824:	e7a6      	b.n	810d774 <_printf_i+0x160>
 810d826:	2301      	movs	r3, #1
 810d828:	4632      	mov	r2, r6
 810d82a:	4649      	mov	r1, r9
 810d82c:	4640      	mov	r0, r8
 810d82e:	47d0      	blx	sl
 810d830:	3001      	adds	r0, #1
 810d832:	d09d      	beq.n	810d770 <_printf_i+0x15c>
 810d834:	3501      	adds	r5, #1
 810d836:	68e3      	ldr	r3, [r4, #12]
 810d838:	9903      	ldr	r1, [sp, #12]
 810d83a:	1a5b      	subs	r3, r3, r1
 810d83c:	42ab      	cmp	r3, r5
 810d83e:	dcf2      	bgt.n	810d826 <_printf_i+0x212>
 810d840:	e7eb      	b.n	810d81a <_printf_i+0x206>
 810d842:	2500      	movs	r5, #0
 810d844:	f104 0619 	add.w	r6, r4, #25
 810d848:	e7f5      	b.n	810d836 <_printf_i+0x222>
 810d84a:	bf00      	nop
 810d84c:	08111859 	.word	0x08111859
 810d850:	0811186a 	.word	0x0811186a

0810d854 <_scanf_float>:
 810d854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d858:	b087      	sub	sp, #28
 810d85a:	4617      	mov	r7, r2
 810d85c:	9303      	str	r3, [sp, #12]
 810d85e:	688b      	ldr	r3, [r1, #8]
 810d860:	1e5a      	subs	r2, r3, #1
 810d862:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 810d866:	bf81      	itttt	hi
 810d868:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 810d86c:	eb03 0b05 	addhi.w	fp, r3, r5
 810d870:	f240 135d 	movwhi	r3, #349	@ 0x15d
 810d874:	608b      	strhi	r3, [r1, #8]
 810d876:	680b      	ldr	r3, [r1, #0]
 810d878:	460a      	mov	r2, r1
 810d87a:	f04f 0500 	mov.w	r5, #0
 810d87e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 810d882:	f842 3b1c 	str.w	r3, [r2], #28
 810d886:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810d88a:	4680      	mov	r8, r0
 810d88c:	460c      	mov	r4, r1
 810d88e:	bf98      	it	ls
 810d890:	f04f 0b00 	movls.w	fp, #0
 810d894:	9201      	str	r2, [sp, #4]
 810d896:	4616      	mov	r6, r2
 810d898:	46aa      	mov	sl, r5
 810d89a:	46a9      	mov	r9, r5
 810d89c:	9502      	str	r5, [sp, #8]
 810d89e:	68a2      	ldr	r2, [r4, #8]
 810d8a0:	b152      	cbz	r2, 810d8b8 <_scanf_float+0x64>
 810d8a2:	683b      	ldr	r3, [r7, #0]
 810d8a4:	781b      	ldrb	r3, [r3, #0]
 810d8a6:	2b4e      	cmp	r3, #78	@ 0x4e
 810d8a8:	d864      	bhi.n	810d974 <_scanf_float+0x120>
 810d8aa:	2b40      	cmp	r3, #64	@ 0x40
 810d8ac:	d83c      	bhi.n	810d928 <_scanf_float+0xd4>
 810d8ae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 810d8b2:	b2c8      	uxtb	r0, r1
 810d8b4:	280e      	cmp	r0, #14
 810d8b6:	d93a      	bls.n	810d92e <_scanf_float+0xda>
 810d8b8:	f1b9 0f00 	cmp.w	r9, #0
 810d8bc:	d003      	beq.n	810d8c6 <_scanf_float+0x72>
 810d8be:	6823      	ldr	r3, [r4, #0]
 810d8c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810d8c4:	6023      	str	r3, [r4, #0]
 810d8c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 810d8ca:	f1ba 0f01 	cmp.w	sl, #1
 810d8ce:	f200 8117 	bhi.w	810db00 <_scanf_float+0x2ac>
 810d8d2:	9b01      	ldr	r3, [sp, #4]
 810d8d4:	429e      	cmp	r6, r3
 810d8d6:	f200 8108 	bhi.w	810daea <_scanf_float+0x296>
 810d8da:	2001      	movs	r0, #1
 810d8dc:	b007      	add	sp, #28
 810d8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d8e2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 810d8e6:	2a0d      	cmp	r2, #13
 810d8e8:	d8e6      	bhi.n	810d8b8 <_scanf_float+0x64>
 810d8ea:	a101      	add	r1, pc, #4	@ (adr r1, 810d8f0 <_scanf_float+0x9c>)
 810d8ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810d8f0:	0810da37 	.word	0x0810da37
 810d8f4:	0810d8b9 	.word	0x0810d8b9
 810d8f8:	0810d8b9 	.word	0x0810d8b9
 810d8fc:	0810d8b9 	.word	0x0810d8b9
 810d900:	0810da97 	.word	0x0810da97
 810d904:	0810da6f 	.word	0x0810da6f
 810d908:	0810d8b9 	.word	0x0810d8b9
 810d90c:	0810d8b9 	.word	0x0810d8b9
 810d910:	0810da45 	.word	0x0810da45
 810d914:	0810d8b9 	.word	0x0810d8b9
 810d918:	0810d8b9 	.word	0x0810d8b9
 810d91c:	0810d8b9 	.word	0x0810d8b9
 810d920:	0810d8b9 	.word	0x0810d8b9
 810d924:	0810d9fd 	.word	0x0810d9fd
 810d928:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 810d92c:	e7db      	b.n	810d8e6 <_scanf_float+0x92>
 810d92e:	290e      	cmp	r1, #14
 810d930:	d8c2      	bhi.n	810d8b8 <_scanf_float+0x64>
 810d932:	a001      	add	r0, pc, #4	@ (adr r0, 810d938 <_scanf_float+0xe4>)
 810d934:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810d938:	0810d9ed 	.word	0x0810d9ed
 810d93c:	0810d8b9 	.word	0x0810d8b9
 810d940:	0810d9ed 	.word	0x0810d9ed
 810d944:	0810da83 	.word	0x0810da83
 810d948:	0810d8b9 	.word	0x0810d8b9
 810d94c:	0810d995 	.word	0x0810d995
 810d950:	0810d9d3 	.word	0x0810d9d3
 810d954:	0810d9d3 	.word	0x0810d9d3
 810d958:	0810d9d3 	.word	0x0810d9d3
 810d95c:	0810d9d3 	.word	0x0810d9d3
 810d960:	0810d9d3 	.word	0x0810d9d3
 810d964:	0810d9d3 	.word	0x0810d9d3
 810d968:	0810d9d3 	.word	0x0810d9d3
 810d96c:	0810d9d3 	.word	0x0810d9d3
 810d970:	0810d9d3 	.word	0x0810d9d3
 810d974:	2b6e      	cmp	r3, #110	@ 0x6e
 810d976:	d809      	bhi.n	810d98c <_scanf_float+0x138>
 810d978:	2b60      	cmp	r3, #96	@ 0x60
 810d97a:	d8b2      	bhi.n	810d8e2 <_scanf_float+0x8e>
 810d97c:	2b54      	cmp	r3, #84	@ 0x54
 810d97e:	d07b      	beq.n	810da78 <_scanf_float+0x224>
 810d980:	2b59      	cmp	r3, #89	@ 0x59
 810d982:	d199      	bne.n	810d8b8 <_scanf_float+0x64>
 810d984:	2d07      	cmp	r5, #7
 810d986:	d197      	bne.n	810d8b8 <_scanf_float+0x64>
 810d988:	2508      	movs	r5, #8
 810d98a:	e02c      	b.n	810d9e6 <_scanf_float+0x192>
 810d98c:	2b74      	cmp	r3, #116	@ 0x74
 810d98e:	d073      	beq.n	810da78 <_scanf_float+0x224>
 810d990:	2b79      	cmp	r3, #121	@ 0x79
 810d992:	e7f6      	b.n	810d982 <_scanf_float+0x12e>
 810d994:	6821      	ldr	r1, [r4, #0]
 810d996:	05c8      	lsls	r0, r1, #23
 810d998:	d51b      	bpl.n	810d9d2 <_scanf_float+0x17e>
 810d99a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 810d99e:	6021      	str	r1, [r4, #0]
 810d9a0:	f109 0901 	add.w	r9, r9, #1
 810d9a4:	f1bb 0f00 	cmp.w	fp, #0
 810d9a8:	d003      	beq.n	810d9b2 <_scanf_float+0x15e>
 810d9aa:	3201      	adds	r2, #1
 810d9ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 810d9b0:	60a2      	str	r2, [r4, #8]
 810d9b2:	68a3      	ldr	r3, [r4, #8]
 810d9b4:	3b01      	subs	r3, #1
 810d9b6:	60a3      	str	r3, [r4, #8]
 810d9b8:	6923      	ldr	r3, [r4, #16]
 810d9ba:	3301      	adds	r3, #1
 810d9bc:	6123      	str	r3, [r4, #16]
 810d9be:	687b      	ldr	r3, [r7, #4]
 810d9c0:	3b01      	subs	r3, #1
 810d9c2:	2b00      	cmp	r3, #0
 810d9c4:	607b      	str	r3, [r7, #4]
 810d9c6:	f340 8087 	ble.w	810dad8 <_scanf_float+0x284>
 810d9ca:	683b      	ldr	r3, [r7, #0]
 810d9cc:	3301      	adds	r3, #1
 810d9ce:	603b      	str	r3, [r7, #0]
 810d9d0:	e765      	b.n	810d89e <_scanf_float+0x4a>
 810d9d2:	eb1a 0105 	adds.w	r1, sl, r5
 810d9d6:	f47f af6f 	bne.w	810d8b8 <_scanf_float+0x64>
 810d9da:	6822      	ldr	r2, [r4, #0]
 810d9dc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 810d9e0:	6022      	str	r2, [r4, #0]
 810d9e2:	460d      	mov	r5, r1
 810d9e4:	468a      	mov	sl, r1
 810d9e6:	f806 3b01 	strb.w	r3, [r6], #1
 810d9ea:	e7e2      	b.n	810d9b2 <_scanf_float+0x15e>
 810d9ec:	6822      	ldr	r2, [r4, #0]
 810d9ee:	0610      	lsls	r0, r2, #24
 810d9f0:	f57f af62 	bpl.w	810d8b8 <_scanf_float+0x64>
 810d9f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 810d9f8:	6022      	str	r2, [r4, #0]
 810d9fa:	e7f4      	b.n	810d9e6 <_scanf_float+0x192>
 810d9fc:	f1ba 0f00 	cmp.w	sl, #0
 810da00:	d10e      	bne.n	810da20 <_scanf_float+0x1cc>
 810da02:	f1b9 0f00 	cmp.w	r9, #0
 810da06:	d10e      	bne.n	810da26 <_scanf_float+0x1d2>
 810da08:	6822      	ldr	r2, [r4, #0]
 810da0a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810da0e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810da12:	d108      	bne.n	810da26 <_scanf_float+0x1d2>
 810da14:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810da18:	6022      	str	r2, [r4, #0]
 810da1a:	f04f 0a01 	mov.w	sl, #1
 810da1e:	e7e2      	b.n	810d9e6 <_scanf_float+0x192>
 810da20:	f1ba 0f02 	cmp.w	sl, #2
 810da24:	d055      	beq.n	810dad2 <_scanf_float+0x27e>
 810da26:	2d01      	cmp	r5, #1
 810da28:	d002      	beq.n	810da30 <_scanf_float+0x1dc>
 810da2a:	2d04      	cmp	r5, #4
 810da2c:	f47f af44 	bne.w	810d8b8 <_scanf_float+0x64>
 810da30:	3501      	adds	r5, #1
 810da32:	b2ed      	uxtb	r5, r5
 810da34:	e7d7      	b.n	810d9e6 <_scanf_float+0x192>
 810da36:	f1ba 0f01 	cmp.w	sl, #1
 810da3a:	f47f af3d 	bne.w	810d8b8 <_scanf_float+0x64>
 810da3e:	f04f 0a02 	mov.w	sl, #2
 810da42:	e7d0      	b.n	810d9e6 <_scanf_float+0x192>
 810da44:	b97d      	cbnz	r5, 810da66 <_scanf_float+0x212>
 810da46:	f1b9 0f00 	cmp.w	r9, #0
 810da4a:	f47f af38 	bne.w	810d8be <_scanf_float+0x6a>
 810da4e:	6822      	ldr	r2, [r4, #0]
 810da50:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810da54:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810da58:	f040 8108 	bne.w	810dc6c <_scanf_float+0x418>
 810da5c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810da60:	6022      	str	r2, [r4, #0]
 810da62:	2501      	movs	r5, #1
 810da64:	e7bf      	b.n	810d9e6 <_scanf_float+0x192>
 810da66:	2d03      	cmp	r5, #3
 810da68:	d0e2      	beq.n	810da30 <_scanf_float+0x1dc>
 810da6a:	2d05      	cmp	r5, #5
 810da6c:	e7de      	b.n	810da2c <_scanf_float+0x1d8>
 810da6e:	2d02      	cmp	r5, #2
 810da70:	f47f af22 	bne.w	810d8b8 <_scanf_float+0x64>
 810da74:	2503      	movs	r5, #3
 810da76:	e7b6      	b.n	810d9e6 <_scanf_float+0x192>
 810da78:	2d06      	cmp	r5, #6
 810da7a:	f47f af1d 	bne.w	810d8b8 <_scanf_float+0x64>
 810da7e:	2507      	movs	r5, #7
 810da80:	e7b1      	b.n	810d9e6 <_scanf_float+0x192>
 810da82:	6822      	ldr	r2, [r4, #0]
 810da84:	0591      	lsls	r1, r2, #22
 810da86:	f57f af17 	bpl.w	810d8b8 <_scanf_float+0x64>
 810da8a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 810da8e:	6022      	str	r2, [r4, #0]
 810da90:	f8cd 9008 	str.w	r9, [sp, #8]
 810da94:	e7a7      	b.n	810d9e6 <_scanf_float+0x192>
 810da96:	6822      	ldr	r2, [r4, #0]
 810da98:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 810da9c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 810daa0:	d006      	beq.n	810dab0 <_scanf_float+0x25c>
 810daa2:	0550      	lsls	r0, r2, #21
 810daa4:	f57f af08 	bpl.w	810d8b8 <_scanf_float+0x64>
 810daa8:	f1b9 0f00 	cmp.w	r9, #0
 810daac:	f000 80de 	beq.w	810dc6c <_scanf_float+0x418>
 810dab0:	0591      	lsls	r1, r2, #22
 810dab2:	bf58      	it	pl
 810dab4:	9902      	ldrpl	r1, [sp, #8]
 810dab6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810daba:	bf58      	it	pl
 810dabc:	eba9 0101 	subpl.w	r1, r9, r1
 810dac0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 810dac4:	bf58      	it	pl
 810dac6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810daca:	6022      	str	r2, [r4, #0]
 810dacc:	f04f 0900 	mov.w	r9, #0
 810dad0:	e789      	b.n	810d9e6 <_scanf_float+0x192>
 810dad2:	f04f 0a03 	mov.w	sl, #3
 810dad6:	e786      	b.n	810d9e6 <_scanf_float+0x192>
 810dad8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 810dadc:	4639      	mov	r1, r7
 810dade:	4640      	mov	r0, r8
 810dae0:	4798      	blx	r3
 810dae2:	2800      	cmp	r0, #0
 810dae4:	f43f aedb 	beq.w	810d89e <_scanf_float+0x4a>
 810dae8:	e6e6      	b.n	810d8b8 <_scanf_float+0x64>
 810daea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810daee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810daf2:	463a      	mov	r2, r7
 810daf4:	4640      	mov	r0, r8
 810daf6:	4798      	blx	r3
 810daf8:	6923      	ldr	r3, [r4, #16]
 810dafa:	3b01      	subs	r3, #1
 810dafc:	6123      	str	r3, [r4, #16]
 810dafe:	e6e8      	b.n	810d8d2 <_scanf_float+0x7e>
 810db00:	1e6b      	subs	r3, r5, #1
 810db02:	2b06      	cmp	r3, #6
 810db04:	d824      	bhi.n	810db50 <_scanf_float+0x2fc>
 810db06:	2d02      	cmp	r5, #2
 810db08:	d836      	bhi.n	810db78 <_scanf_float+0x324>
 810db0a:	9b01      	ldr	r3, [sp, #4]
 810db0c:	429e      	cmp	r6, r3
 810db0e:	f67f aee4 	bls.w	810d8da <_scanf_float+0x86>
 810db12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810db16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810db1a:	463a      	mov	r2, r7
 810db1c:	4640      	mov	r0, r8
 810db1e:	4798      	blx	r3
 810db20:	6923      	ldr	r3, [r4, #16]
 810db22:	3b01      	subs	r3, #1
 810db24:	6123      	str	r3, [r4, #16]
 810db26:	e7f0      	b.n	810db0a <_scanf_float+0x2b6>
 810db28:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810db2c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 810db30:	463a      	mov	r2, r7
 810db32:	4640      	mov	r0, r8
 810db34:	4798      	blx	r3
 810db36:	6923      	ldr	r3, [r4, #16]
 810db38:	3b01      	subs	r3, #1
 810db3a:	6123      	str	r3, [r4, #16]
 810db3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 810db40:	fa5f fa8a 	uxtb.w	sl, sl
 810db44:	f1ba 0f02 	cmp.w	sl, #2
 810db48:	d1ee      	bne.n	810db28 <_scanf_float+0x2d4>
 810db4a:	3d03      	subs	r5, #3
 810db4c:	b2ed      	uxtb	r5, r5
 810db4e:	1b76      	subs	r6, r6, r5
 810db50:	6823      	ldr	r3, [r4, #0]
 810db52:	05da      	lsls	r2, r3, #23
 810db54:	d530      	bpl.n	810dbb8 <_scanf_float+0x364>
 810db56:	055b      	lsls	r3, r3, #21
 810db58:	d511      	bpl.n	810db7e <_scanf_float+0x32a>
 810db5a:	9b01      	ldr	r3, [sp, #4]
 810db5c:	429e      	cmp	r6, r3
 810db5e:	f67f aebc 	bls.w	810d8da <_scanf_float+0x86>
 810db62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810db66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810db6a:	463a      	mov	r2, r7
 810db6c:	4640      	mov	r0, r8
 810db6e:	4798      	blx	r3
 810db70:	6923      	ldr	r3, [r4, #16]
 810db72:	3b01      	subs	r3, #1
 810db74:	6123      	str	r3, [r4, #16]
 810db76:	e7f0      	b.n	810db5a <_scanf_float+0x306>
 810db78:	46aa      	mov	sl, r5
 810db7a:	46b3      	mov	fp, r6
 810db7c:	e7de      	b.n	810db3c <_scanf_float+0x2e8>
 810db7e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810db82:	6923      	ldr	r3, [r4, #16]
 810db84:	2965      	cmp	r1, #101	@ 0x65
 810db86:	f103 33ff 	add.w	r3, r3, #4294967295
 810db8a:	f106 35ff 	add.w	r5, r6, #4294967295
 810db8e:	6123      	str	r3, [r4, #16]
 810db90:	d00c      	beq.n	810dbac <_scanf_float+0x358>
 810db92:	2945      	cmp	r1, #69	@ 0x45
 810db94:	d00a      	beq.n	810dbac <_scanf_float+0x358>
 810db96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810db9a:	463a      	mov	r2, r7
 810db9c:	4640      	mov	r0, r8
 810db9e:	4798      	blx	r3
 810dba0:	6923      	ldr	r3, [r4, #16]
 810dba2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810dba6:	3b01      	subs	r3, #1
 810dba8:	1eb5      	subs	r5, r6, #2
 810dbaa:	6123      	str	r3, [r4, #16]
 810dbac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810dbb0:	463a      	mov	r2, r7
 810dbb2:	4640      	mov	r0, r8
 810dbb4:	4798      	blx	r3
 810dbb6:	462e      	mov	r6, r5
 810dbb8:	6822      	ldr	r2, [r4, #0]
 810dbba:	f012 0210 	ands.w	r2, r2, #16
 810dbbe:	d001      	beq.n	810dbc4 <_scanf_float+0x370>
 810dbc0:	2000      	movs	r0, #0
 810dbc2:	e68b      	b.n	810d8dc <_scanf_float+0x88>
 810dbc4:	7032      	strb	r2, [r6, #0]
 810dbc6:	6823      	ldr	r3, [r4, #0]
 810dbc8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 810dbcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810dbd0:	d11c      	bne.n	810dc0c <_scanf_float+0x3b8>
 810dbd2:	9b02      	ldr	r3, [sp, #8]
 810dbd4:	454b      	cmp	r3, r9
 810dbd6:	eba3 0209 	sub.w	r2, r3, r9
 810dbda:	d123      	bne.n	810dc24 <_scanf_float+0x3d0>
 810dbdc:	9901      	ldr	r1, [sp, #4]
 810dbde:	2200      	movs	r2, #0
 810dbe0:	4640      	mov	r0, r8
 810dbe2:	f002 fd29 	bl	8110638 <_strtod_r>
 810dbe6:	9b03      	ldr	r3, [sp, #12]
 810dbe8:	6821      	ldr	r1, [r4, #0]
 810dbea:	681b      	ldr	r3, [r3, #0]
 810dbec:	f011 0f02 	tst.w	r1, #2
 810dbf0:	ec57 6b10 	vmov	r6, r7, d0
 810dbf4:	f103 0204 	add.w	r2, r3, #4
 810dbf8:	d01f      	beq.n	810dc3a <_scanf_float+0x3e6>
 810dbfa:	9903      	ldr	r1, [sp, #12]
 810dbfc:	600a      	str	r2, [r1, #0]
 810dbfe:	681b      	ldr	r3, [r3, #0]
 810dc00:	e9c3 6700 	strd	r6, r7, [r3]
 810dc04:	68e3      	ldr	r3, [r4, #12]
 810dc06:	3301      	adds	r3, #1
 810dc08:	60e3      	str	r3, [r4, #12]
 810dc0a:	e7d9      	b.n	810dbc0 <_scanf_float+0x36c>
 810dc0c:	9b04      	ldr	r3, [sp, #16]
 810dc0e:	2b00      	cmp	r3, #0
 810dc10:	d0e4      	beq.n	810dbdc <_scanf_float+0x388>
 810dc12:	9905      	ldr	r1, [sp, #20]
 810dc14:	230a      	movs	r3, #10
 810dc16:	3101      	adds	r1, #1
 810dc18:	4640      	mov	r0, r8
 810dc1a:	f002 fd8d 	bl	8110738 <_strtol_r>
 810dc1e:	9b04      	ldr	r3, [sp, #16]
 810dc20:	9e05      	ldr	r6, [sp, #20]
 810dc22:	1ac2      	subs	r2, r0, r3
 810dc24:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 810dc28:	429e      	cmp	r6, r3
 810dc2a:	bf28      	it	cs
 810dc2c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 810dc30:	4910      	ldr	r1, [pc, #64]	@ (810dc74 <_scanf_float+0x420>)
 810dc32:	4630      	mov	r0, r6
 810dc34:	f000 f954 	bl	810dee0 <siprintf>
 810dc38:	e7d0      	b.n	810dbdc <_scanf_float+0x388>
 810dc3a:	f011 0f04 	tst.w	r1, #4
 810dc3e:	9903      	ldr	r1, [sp, #12]
 810dc40:	600a      	str	r2, [r1, #0]
 810dc42:	d1dc      	bne.n	810dbfe <_scanf_float+0x3aa>
 810dc44:	681d      	ldr	r5, [r3, #0]
 810dc46:	4632      	mov	r2, r6
 810dc48:	463b      	mov	r3, r7
 810dc4a:	4630      	mov	r0, r6
 810dc4c:	4639      	mov	r1, r7
 810dc4e:	f7f2 fff5 	bl	8100c3c <__aeabi_dcmpun>
 810dc52:	b128      	cbz	r0, 810dc60 <_scanf_float+0x40c>
 810dc54:	4808      	ldr	r0, [pc, #32]	@ (810dc78 <_scanf_float+0x424>)
 810dc56:	f000 fac9 	bl	810e1ec <nanf>
 810dc5a:	ed85 0a00 	vstr	s0, [r5]
 810dc5e:	e7d1      	b.n	810dc04 <_scanf_float+0x3b0>
 810dc60:	4630      	mov	r0, r6
 810dc62:	4639      	mov	r1, r7
 810dc64:	f7f3 f848 	bl	8100cf8 <__aeabi_d2f>
 810dc68:	6028      	str	r0, [r5, #0]
 810dc6a:	e7cb      	b.n	810dc04 <_scanf_float+0x3b0>
 810dc6c:	f04f 0900 	mov.w	r9, #0
 810dc70:	e629      	b.n	810d8c6 <_scanf_float+0x72>
 810dc72:	bf00      	nop
 810dc74:	0811187b 	.word	0x0811187b
 810dc78:	081118bb 	.word	0x081118bb

0810dc7c <std>:
 810dc7c:	2300      	movs	r3, #0
 810dc7e:	b510      	push	{r4, lr}
 810dc80:	4604      	mov	r4, r0
 810dc82:	e9c0 3300 	strd	r3, r3, [r0]
 810dc86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810dc8a:	6083      	str	r3, [r0, #8]
 810dc8c:	8181      	strh	r1, [r0, #12]
 810dc8e:	6643      	str	r3, [r0, #100]	@ 0x64
 810dc90:	81c2      	strh	r2, [r0, #14]
 810dc92:	6183      	str	r3, [r0, #24]
 810dc94:	4619      	mov	r1, r3
 810dc96:	2208      	movs	r2, #8
 810dc98:	305c      	adds	r0, #92	@ 0x5c
 810dc9a:	f000 fa19 	bl	810e0d0 <memset>
 810dc9e:	4b0d      	ldr	r3, [pc, #52]	@ (810dcd4 <std+0x58>)
 810dca0:	6263      	str	r3, [r4, #36]	@ 0x24
 810dca2:	4b0d      	ldr	r3, [pc, #52]	@ (810dcd8 <std+0x5c>)
 810dca4:	62a3      	str	r3, [r4, #40]	@ 0x28
 810dca6:	4b0d      	ldr	r3, [pc, #52]	@ (810dcdc <std+0x60>)
 810dca8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 810dcaa:	4b0d      	ldr	r3, [pc, #52]	@ (810dce0 <std+0x64>)
 810dcac:	6323      	str	r3, [r4, #48]	@ 0x30
 810dcae:	4b0d      	ldr	r3, [pc, #52]	@ (810dce4 <std+0x68>)
 810dcb0:	6224      	str	r4, [r4, #32]
 810dcb2:	429c      	cmp	r4, r3
 810dcb4:	d006      	beq.n	810dcc4 <std+0x48>
 810dcb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 810dcba:	4294      	cmp	r4, r2
 810dcbc:	d002      	beq.n	810dcc4 <std+0x48>
 810dcbe:	33d0      	adds	r3, #208	@ 0xd0
 810dcc0:	429c      	cmp	r4, r3
 810dcc2:	d105      	bne.n	810dcd0 <std+0x54>
 810dcc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 810dcc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810dccc:	f000 ba7c 	b.w	810e1c8 <__retarget_lock_init_recursive>
 810dcd0:	bd10      	pop	{r4, pc}
 810dcd2:	bf00      	nop
 810dcd4:	0810df21 	.word	0x0810df21
 810dcd8:	0810df43 	.word	0x0810df43
 810dcdc:	0810df7b 	.word	0x0810df7b
 810dce0:	0810df9f 	.word	0x0810df9f
 810dce4:	100006f4 	.word	0x100006f4

0810dce8 <stdio_exit_handler>:
 810dce8:	4a02      	ldr	r2, [pc, #8]	@ (810dcf4 <stdio_exit_handler+0xc>)
 810dcea:	4903      	ldr	r1, [pc, #12]	@ (810dcf8 <stdio_exit_handler+0x10>)
 810dcec:	4803      	ldr	r0, [pc, #12]	@ (810dcfc <stdio_exit_handler+0x14>)
 810dcee:	f000 b869 	b.w	810ddc4 <_fwalk_sglue>
 810dcf2:	bf00      	nop
 810dcf4:	100000a0 	.word	0x100000a0
 810dcf8:	08110d79 	.word	0x08110d79
 810dcfc:	100000b0 	.word	0x100000b0

0810dd00 <cleanup_stdio>:
 810dd00:	6841      	ldr	r1, [r0, #4]
 810dd02:	4b0c      	ldr	r3, [pc, #48]	@ (810dd34 <cleanup_stdio+0x34>)
 810dd04:	4299      	cmp	r1, r3
 810dd06:	b510      	push	{r4, lr}
 810dd08:	4604      	mov	r4, r0
 810dd0a:	d001      	beq.n	810dd10 <cleanup_stdio+0x10>
 810dd0c:	f003 f834 	bl	8110d78 <_fflush_r>
 810dd10:	68a1      	ldr	r1, [r4, #8]
 810dd12:	4b09      	ldr	r3, [pc, #36]	@ (810dd38 <cleanup_stdio+0x38>)
 810dd14:	4299      	cmp	r1, r3
 810dd16:	d002      	beq.n	810dd1e <cleanup_stdio+0x1e>
 810dd18:	4620      	mov	r0, r4
 810dd1a:	f003 f82d 	bl	8110d78 <_fflush_r>
 810dd1e:	68e1      	ldr	r1, [r4, #12]
 810dd20:	4b06      	ldr	r3, [pc, #24]	@ (810dd3c <cleanup_stdio+0x3c>)
 810dd22:	4299      	cmp	r1, r3
 810dd24:	d004      	beq.n	810dd30 <cleanup_stdio+0x30>
 810dd26:	4620      	mov	r0, r4
 810dd28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810dd2c:	f003 b824 	b.w	8110d78 <_fflush_r>
 810dd30:	bd10      	pop	{r4, pc}
 810dd32:	bf00      	nop
 810dd34:	100006f4 	.word	0x100006f4
 810dd38:	1000075c 	.word	0x1000075c
 810dd3c:	100007c4 	.word	0x100007c4

0810dd40 <global_stdio_init.part.0>:
 810dd40:	b510      	push	{r4, lr}
 810dd42:	4b0b      	ldr	r3, [pc, #44]	@ (810dd70 <global_stdio_init.part.0+0x30>)
 810dd44:	4c0b      	ldr	r4, [pc, #44]	@ (810dd74 <global_stdio_init.part.0+0x34>)
 810dd46:	4a0c      	ldr	r2, [pc, #48]	@ (810dd78 <global_stdio_init.part.0+0x38>)
 810dd48:	601a      	str	r2, [r3, #0]
 810dd4a:	4620      	mov	r0, r4
 810dd4c:	2200      	movs	r2, #0
 810dd4e:	2104      	movs	r1, #4
 810dd50:	f7ff ff94 	bl	810dc7c <std>
 810dd54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 810dd58:	2201      	movs	r2, #1
 810dd5a:	2109      	movs	r1, #9
 810dd5c:	f7ff ff8e 	bl	810dc7c <std>
 810dd60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 810dd64:	2202      	movs	r2, #2
 810dd66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810dd6a:	2112      	movs	r1, #18
 810dd6c:	f7ff bf86 	b.w	810dc7c <std>
 810dd70:	1000082c 	.word	0x1000082c
 810dd74:	100006f4 	.word	0x100006f4
 810dd78:	0810dce9 	.word	0x0810dce9

0810dd7c <__sfp_lock_acquire>:
 810dd7c:	4801      	ldr	r0, [pc, #4]	@ (810dd84 <__sfp_lock_acquire+0x8>)
 810dd7e:	f000 ba24 	b.w	810e1ca <__retarget_lock_acquire_recursive>
 810dd82:	bf00      	nop
 810dd84:	10000835 	.word	0x10000835

0810dd88 <__sfp_lock_release>:
 810dd88:	4801      	ldr	r0, [pc, #4]	@ (810dd90 <__sfp_lock_release+0x8>)
 810dd8a:	f000 ba1f 	b.w	810e1cc <__retarget_lock_release_recursive>
 810dd8e:	bf00      	nop
 810dd90:	10000835 	.word	0x10000835

0810dd94 <__sinit>:
 810dd94:	b510      	push	{r4, lr}
 810dd96:	4604      	mov	r4, r0
 810dd98:	f7ff fff0 	bl	810dd7c <__sfp_lock_acquire>
 810dd9c:	6a23      	ldr	r3, [r4, #32]
 810dd9e:	b11b      	cbz	r3, 810dda8 <__sinit+0x14>
 810dda0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810dda4:	f7ff bff0 	b.w	810dd88 <__sfp_lock_release>
 810dda8:	4b04      	ldr	r3, [pc, #16]	@ (810ddbc <__sinit+0x28>)
 810ddaa:	6223      	str	r3, [r4, #32]
 810ddac:	4b04      	ldr	r3, [pc, #16]	@ (810ddc0 <__sinit+0x2c>)
 810ddae:	681b      	ldr	r3, [r3, #0]
 810ddb0:	2b00      	cmp	r3, #0
 810ddb2:	d1f5      	bne.n	810dda0 <__sinit+0xc>
 810ddb4:	f7ff ffc4 	bl	810dd40 <global_stdio_init.part.0>
 810ddb8:	e7f2      	b.n	810dda0 <__sinit+0xc>
 810ddba:	bf00      	nop
 810ddbc:	0810dd01 	.word	0x0810dd01
 810ddc0:	1000082c 	.word	0x1000082c

0810ddc4 <_fwalk_sglue>:
 810ddc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ddc8:	4607      	mov	r7, r0
 810ddca:	4688      	mov	r8, r1
 810ddcc:	4614      	mov	r4, r2
 810ddce:	2600      	movs	r6, #0
 810ddd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810ddd4:	f1b9 0901 	subs.w	r9, r9, #1
 810ddd8:	d505      	bpl.n	810dde6 <_fwalk_sglue+0x22>
 810ddda:	6824      	ldr	r4, [r4, #0]
 810dddc:	2c00      	cmp	r4, #0
 810ddde:	d1f7      	bne.n	810ddd0 <_fwalk_sglue+0xc>
 810dde0:	4630      	mov	r0, r6
 810dde2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810dde6:	89ab      	ldrh	r3, [r5, #12]
 810dde8:	2b01      	cmp	r3, #1
 810ddea:	d907      	bls.n	810ddfc <_fwalk_sglue+0x38>
 810ddec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810ddf0:	3301      	adds	r3, #1
 810ddf2:	d003      	beq.n	810ddfc <_fwalk_sglue+0x38>
 810ddf4:	4629      	mov	r1, r5
 810ddf6:	4638      	mov	r0, r7
 810ddf8:	47c0      	blx	r8
 810ddfa:	4306      	orrs	r6, r0
 810ddfc:	3568      	adds	r5, #104	@ 0x68
 810ddfe:	e7e9      	b.n	810ddd4 <_fwalk_sglue+0x10>

0810de00 <iprintf>:
 810de00:	b40f      	push	{r0, r1, r2, r3}
 810de02:	b507      	push	{r0, r1, r2, lr}
 810de04:	4906      	ldr	r1, [pc, #24]	@ (810de20 <iprintf+0x20>)
 810de06:	ab04      	add	r3, sp, #16
 810de08:	6808      	ldr	r0, [r1, #0]
 810de0a:	f853 2b04 	ldr.w	r2, [r3], #4
 810de0e:	6881      	ldr	r1, [r0, #8]
 810de10:	9301      	str	r3, [sp, #4]
 810de12:	f002 fe15 	bl	8110a40 <_vfiprintf_r>
 810de16:	b003      	add	sp, #12
 810de18:	f85d eb04 	ldr.w	lr, [sp], #4
 810de1c:	b004      	add	sp, #16
 810de1e:	4770      	bx	lr
 810de20:	100000ac 	.word	0x100000ac

0810de24 <_puts_r>:
 810de24:	6a03      	ldr	r3, [r0, #32]
 810de26:	b570      	push	{r4, r5, r6, lr}
 810de28:	6884      	ldr	r4, [r0, #8]
 810de2a:	4605      	mov	r5, r0
 810de2c:	460e      	mov	r6, r1
 810de2e:	b90b      	cbnz	r3, 810de34 <_puts_r+0x10>
 810de30:	f7ff ffb0 	bl	810dd94 <__sinit>
 810de34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810de36:	07db      	lsls	r3, r3, #31
 810de38:	d405      	bmi.n	810de46 <_puts_r+0x22>
 810de3a:	89a3      	ldrh	r3, [r4, #12]
 810de3c:	0598      	lsls	r0, r3, #22
 810de3e:	d402      	bmi.n	810de46 <_puts_r+0x22>
 810de40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810de42:	f000 f9c2 	bl	810e1ca <__retarget_lock_acquire_recursive>
 810de46:	89a3      	ldrh	r3, [r4, #12]
 810de48:	0719      	lsls	r1, r3, #28
 810de4a:	d502      	bpl.n	810de52 <_puts_r+0x2e>
 810de4c:	6923      	ldr	r3, [r4, #16]
 810de4e:	2b00      	cmp	r3, #0
 810de50:	d135      	bne.n	810debe <_puts_r+0x9a>
 810de52:	4621      	mov	r1, r4
 810de54:	4628      	mov	r0, r5
 810de56:	f000 f8e5 	bl	810e024 <__swsetup_r>
 810de5a:	b380      	cbz	r0, 810debe <_puts_r+0x9a>
 810de5c:	f04f 35ff 	mov.w	r5, #4294967295
 810de60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810de62:	07da      	lsls	r2, r3, #31
 810de64:	d405      	bmi.n	810de72 <_puts_r+0x4e>
 810de66:	89a3      	ldrh	r3, [r4, #12]
 810de68:	059b      	lsls	r3, r3, #22
 810de6a:	d402      	bmi.n	810de72 <_puts_r+0x4e>
 810de6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810de6e:	f000 f9ad 	bl	810e1cc <__retarget_lock_release_recursive>
 810de72:	4628      	mov	r0, r5
 810de74:	bd70      	pop	{r4, r5, r6, pc}
 810de76:	2b00      	cmp	r3, #0
 810de78:	da04      	bge.n	810de84 <_puts_r+0x60>
 810de7a:	69a2      	ldr	r2, [r4, #24]
 810de7c:	429a      	cmp	r2, r3
 810de7e:	dc17      	bgt.n	810deb0 <_puts_r+0x8c>
 810de80:	290a      	cmp	r1, #10
 810de82:	d015      	beq.n	810deb0 <_puts_r+0x8c>
 810de84:	6823      	ldr	r3, [r4, #0]
 810de86:	1c5a      	adds	r2, r3, #1
 810de88:	6022      	str	r2, [r4, #0]
 810de8a:	7019      	strb	r1, [r3, #0]
 810de8c:	68a3      	ldr	r3, [r4, #8]
 810de8e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810de92:	3b01      	subs	r3, #1
 810de94:	60a3      	str	r3, [r4, #8]
 810de96:	2900      	cmp	r1, #0
 810de98:	d1ed      	bne.n	810de76 <_puts_r+0x52>
 810de9a:	2b00      	cmp	r3, #0
 810de9c:	da11      	bge.n	810dec2 <_puts_r+0x9e>
 810de9e:	4622      	mov	r2, r4
 810dea0:	210a      	movs	r1, #10
 810dea2:	4628      	mov	r0, r5
 810dea4:	f000 f87f 	bl	810dfa6 <__swbuf_r>
 810dea8:	3001      	adds	r0, #1
 810deaa:	d0d7      	beq.n	810de5c <_puts_r+0x38>
 810deac:	250a      	movs	r5, #10
 810deae:	e7d7      	b.n	810de60 <_puts_r+0x3c>
 810deb0:	4622      	mov	r2, r4
 810deb2:	4628      	mov	r0, r5
 810deb4:	f000 f877 	bl	810dfa6 <__swbuf_r>
 810deb8:	3001      	adds	r0, #1
 810deba:	d1e7      	bne.n	810de8c <_puts_r+0x68>
 810debc:	e7ce      	b.n	810de5c <_puts_r+0x38>
 810debe:	3e01      	subs	r6, #1
 810dec0:	e7e4      	b.n	810de8c <_puts_r+0x68>
 810dec2:	6823      	ldr	r3, [r4, #0]
 810dec4:	1c5a      	adds	r2, r3, #1
 810dec6:	6022      	str	r2, [r4, #0]
 810dec8:	220a      	movs	r2, #10
 810deca:	701a      	strb	r2, [r3, #0]
 810decc:	e7ee      	b.n	810deac <_puts_r+0x88>
	...

0810ded0 <puts>:
 810ded0:	4b02      	ldr	r3, [pc, #8]	@ (810dedc <puts+0xc>)
 810ded2:	4601      	mov	r1, r0
 810ded4:	6818      	ldr	r0, [r3, #0]
 810ded6:	f7ff bfa5 	b.w	810de24 <_puts_r>
 810deda:	bf00      	nop
 810dedc:	100000ac 	.word	0x100000ac

0810dee0 <siprintf>:
 810dee0:	b40e      	push	{r1, r2, r3}
 810dee2:	b500      	push	{lr}
 810dee4:	b09c      	sub	sp, #112	@ 0x70
 810dee6:	ab1d      	add	r3, sp, #116	@ 0x74
 810dee8:	9002      	str	r0, [sp, #8]
 810deea:	9006      	str	r0, [sp, #24]
 810deec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 810def0:	4809      	ldr	r0, [pc, #36]	@ (810df18 <siprintf+0x38>)
 810def2:	9107      	str	r1, [sp, #28]
 810def4:	9104      	str	r1, [sp, #16]
 810def6:	4909      	ldr	r1, [pc, #36]	@ (810df1c <siprintf+0x3c>)
 810def8:	f853 2b04 	ldr.w	r2, [r3], #4
 810defc:	9105      	str	r1, [sp, #20]
 810defe:	6800      	ldr	r0, [r0, #0]
 810df00:	9301      	str	r3, [sp, #4]
 810df02:	a902      	add	r1, sp, #8
 810df04:	f002 fc76 	bl	81107f4 <_svfiprintf_r>
 810df08:	9b02      	ldr	r3, [sp, #8]
 810df0a:	2200      	movs	r2, #0
 810df0c:	701a      	strb	r2, [r3, #0]
 810df0e:	b01c      	add	sp, #112	@ 0x70
 810df10:	f85d eb04 	ldr.w	lr, [sp], #4
 810df14:	b003      	add	sp, #12
 810df16:	4770      	bx	lr
 810df18:	100000ac 	.word	0x100000ac
 810df1c:	ffff0208 	.word	0xffff0208

0810df20 <__sread>:
 810df20:	b510      	push	{r4, lr}
 810df22:	460c      	mov	r4, r1
 810df24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810df28:	f000 f900 	bl	810e12c <_read_r>
 810df2c:	2800      	cmp	r0, #0
 810df2e:	bfab      	itete	ge
 810df30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 810df32:	89a3      	ldrhlt	r3, [r4, #12]
 810df34:	181b      	addge	r3, r3, r0
 810df36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 810df3a:	bfac      	ite	ge
 810df3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 810df3e:	81a3      	strhlt	r3, [r4, #12]
 810df40:	bd10      	pop	{r4, pc}

0810df42 <__swrite>:
 810df42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810df46:	461f      	mov	r7, r3
 810df48:	898b      	ldrh	r3, [r1, #12]
 810df4a:	05db      	lsls	r3, r3, #23
 810df4c:	4605      	mov	r5, r0
 810df4e:	460c      	mov	r4, r1
 810df50:	4616      	mov	r6, r2
 810df52:	d505      	bpl.n	810df60 <__swrite+0x1e>
 810df54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810df58:	2302      	movs	r3, #2
 810df5a:	2200      	movs	r2, #0
 810df5c:	f000 f8d4 	bl	810e108 <_lseek_r>
 810df60:	89a3      	ldrh	r3, [r4, #12]
 810df62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810df66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810df6a:	81a3      	strh	r3, [r4, #12]
 810df6c:	4632      	mov	r2, r6
 810df6e:	463b      	mov	r3, r7
 810df70:	4628      	mov	r0, r5
 810df72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810df76:	f000 b8eb 	b.w	810e150 <_write_r>

0810df7a <__sseek>:
 810df7a:	b510      	push	{r4, lr}
 810df7c:	460c      	mov	r4, r1
 810df7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810df82:	f000 f8c1 	bl	810e108 <_lseek_r>
 810df86:	1c43      	adds	r3, r0, #1
 810df88:	89a3      	ldrh	r3, [r4, #12]
 810df8a:	bf15      	itete	ne
 810df8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 810df8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 810df92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 810df96:	81a3      	strheq	r3, [r4, #12]
 810df98:	bf18      	it	ne
 810df9a:	81a3      	strhne	r3, [r4, #12]
 810df9c:	bd10      	pop	{r4, pc}

0810df9e <__sclose>:
 810df9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810dfa2:	f000 b8a1 	b.w	810e0e8 <_close_r>

0810dfa6 <__swbuf_r>:
 810dfa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810dfa8:	460e      	mov	r6, r1
 810dfaa:	4614      	mov	r4, r2
 810dfac:	4605      	mov	r5, r0
 810dfae:	b118      	cbz	r0, 810dfb8 <__swbuf_r+0x12>
 810dfb0:	6a03      	ldr	r3, [r0, #32]
 810dfb2:	b90b      	cbnz	r3, 810dfb8 <__swbuf_r+0x12>
 810dfb4:	f7ff feee 	bl	810dd94 <__sinit>
 810dfb8:	69a3      	ldr	r3, [r4, #24]
 810dfba:	60a3      	str	r3, [r4, #8]
 810dfbc:	89a3      	ldrh	r3, [r4, #12]
 810dfbe:	071a      	lsls	r2, r3, #28
 810dfc0:	d501      	bpl.n	810dfc6 <__swbuf_r+0x20>
 810dfc2:	6923      	ldr	r3, [r4, #16]
 810dfc4:	b943      	cbnz	r3, 810dfd8 <__swbuf_r+0x32>
 810dfc6:	4621      	mov	r1, r4
 810dfc8:	4628      	mov	r0, r5
 810dfca:	f000 f82b 	bl	810e024 <__swsetup_r>
 810dfce:	b118      	cbz	r0, 810dfd8 <__swbuf_r+0x32>
 810dfd0:	f04f 37ff 	mov.w	r7, #4294967295
 810dfd4:	4638      	mov	r0, r7
 810dfd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810dfd8:	6823      	ldr	r3, [r4, #0]
 810dfda:	6922      	ldr	r2, [r4, #16]
 810dfdc:	1a98      	subs	r0, r3, r2
 810dfde:	6963      	ldr	r3, [r4, #20]
 810dfe0:	b2f6      	uxtb	r6, r6
 810dfe2:	4283      	cmp	r3, r0
 810dfe4:	4637      	mov	r7, r6
 810dfe6:	dc05      	bgt.n	810dff4 <__swbuf_r+0x4e>
 810dfe8:	4621      	mov	r1, r4
 810dfea:	4628      	mov	r0, r5
 810dfec:	f002 fec4 	bl	8110d78 <_fflush_r>
 810dff0:	2800      	cmp	r0, #0
 810dff2:	d1ed      	bne.n	810dfd0 <__swbuf_r+0x2a>
 810dff4:	68a3      	ldr	r3, [r4, #8]
 810dff6:	3b01      	subs	r3, #1
 810dff8:	60a3      	str	r3, [r4, #8]
 810dffa:	6823      	ldr	r3, [r4, #0]
 810dffc:	1c5a      	adds	r2, r3, #1
 810dffe:	6022      	str	r2, [r4, #0]
 810e000:	701e      	strb	r6, [r3, #0]
 810e002:	6962      	ldr	r2, [r4, #20]
 810e004:	1c43      	adds	r3, r0, #1
 810e006:	429a      	cmp	r2, r3
 810e008:	d004      	beq.n	810e014 <__swbuf_r+0x6e>
 810e00a:	89a3      	ldrh	r3, [r4, #12]
 810e00c:	07db      	lsls	r3, r3, #31
 810e00e:	d5e1      	bpl.n	810dfd4 <__swbuf_r+0x2e>
 810e010:	2e0a      	cmp	r6, #10
 810e012:	d1df      	bne.n	810dfd4 <__swbuf_r+0x2e>
 810e014:	4621      	mov	r1, r4
 810e016:	4628      	mov	r0, r5
 810e018:	f002 feae 	bl	8110d78 <_fflush_r>
 810e01c:	2800      	cmp	r0, #0
 810e01e:	d0d9      	beq.n	810dfd4 <__swbuf_r+0x2e>
 810e020:	e7d6      	b.n	810dfd0 <__swbuf_r+0x2a>
	...

0810e024 <__swsetup_r>:
 810e024:	b538      	push	{r3, r4, r5, lr}
 810e026:	4b29      	ldr	r3, [pc, #164]	@ (810e0cc <__swsetup_r+0xa8>)
 810e028:	4605      	mov	r5, r0
 810e02a:	6818      	ldr	r0, [r3, #0]
 810e02c:	460c      	mov	r4, r1
 810e02e:	b118      	cbz	r0, 810e038 <__swsetup_r+0x14>
 810e030:	6a03      	ldr	r3, [r0, #32]
 810e032:	b90b      	cbnz	r3, 810e038 <__swsetup_r+0x14>
 810e034:	f7ff feae 	bl	810dd94 <__sinit>
 810e038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e03c:	0719      	lsls	r1, r3, #28
 810e03e:	d422      	bmi.n	810e086 <__swsetup_r+0x62>
 810e040:	06da      	lsls	r2, r3, #27
 810e042:	d407      	bmi.n	810e054 <__swsetup_r+0x30>
 810e044:	2209      	movs	r2, #9
 810e046:	602a      	str	r2, [r5, #0]
 810e048:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810e04c:	81a3      	strh	r3, [r4, #12]
 810e04e:	f04f 30ff 	mov.w	r0, #4294967295
 810e052:	e033      	b.n	810e0bc <__swsetup_r+0x98>
 810e054:	0758      	lsls	r0, r3, #29
 810e056:	d512      	bpl.n	810e07e <__swsetup_r+0x5a>
 810e058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810e05a:	b141      	cbz	r1, 810e06e <__swsetup_r+0x4a>
 810e05c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810e060:	4299      	cmp	r1, r3
 810e062:	d002      	beq.n	810e06a <__swsetup_r+0x46>
 810e064:	4628      	mov	r0, r5
 810e066:	f000 ff33 	bl	810eed0 <_free_r>
 810e06a:	2300      	movs	r3, #0
 810e06c:	6363      	str	r3, [r4, #52]	@ 0x34
 810e06e:	89a3      	ldrh	r3, [r4, #12]
 810e070:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 810e074:	81a3      	strh	r3, [r4, #12]
 810e076:	2300      	movs	r3, #0
 810e078:	6063      	str	r3, [r4, #4]
 810e07a:	6923      	ldr	r3, [r4, #16]
 810e07c:	6023      	str	r3, [r4, #0]
 810e07e:	89a3      	ldrh	r3, [r4, #12]
 810e080:	f043 0308 	orr.w	r3, r3, #8
 810e084:	81a3      	strh	r3, [r4, #12]
 810e086:	6923      	ldr	r3, [r4, #16]
 810e088:	b94b      	cbnz	r3, 810e09e <__swsetup_r+0x7a>
 810e08a:	89a3      	ldrh	r3, [r4, #12]
 810e08c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 810e090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810e094:	d003      	beq.n	810e09e <__swsetup_r+0x7a>
 810e096:	4621      	mov	r1, r4
 810e098:	4628      	mov	r0, r5
 810e09a:	f002 fecd 	bl	8110e38 <__smakebuf_r>
 810e09e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e0a2:	f013 0201 	ands.w	r2, r3, #1
 810e0a6:	d00a      	beq.n	810e0be <__swsetup_r+0x9a>
 810e0a8:	2200      	movs	r2, #0
 810e0aa:	60a2      	str	r2, [r4, #8]
 810e0ac:	6962      	ldr	r2, [r4, #20]
 810e0ae:	4252      	negs	r2, r2
 810e0b0:	61a2      	str	r2, [r4, #24]
 810e0b2:	6922      	ldr	r2, [r4, #16]
 810e0b4:	b942      	cbnz	r2, 810e0c8 <__swsetup_r+0xa4>
 810e0b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 810e0ba:	d1c5      	bne.n	810e048 <__swsetup_r+0x24>
 810e0bc:	bd38      	pop	{r3, r4, r5, pc}
 810e0be:	0799      	lsls	r1, r3, #30
 810e0c0:	bf58      	it	pl
 810e0c2:	6962      	ldrpl	r2, [r4, #20]
 810e0c4:	60a2      	str	r2, [r4, #8]
 810e0c6:	e7f4      	b.n	810e0b2 <__swsetup_r+0x8e>
 810e0c8:	2000      	movs	r0, #0
 810e0ca:	e7f7      	b.n	810e0bc <__swsetup_r+0x98>
 810e0cc:	100000ac 	.word	0x100000ac

0810e0d0 <memset>:
 810e0d0:	4402      	add	r2, r0
 810e0d2:	4603      	mov	r3, r0
 810e0d4:	4293      	cmp	r3, r2
 810e0d6:	d100      	bne.n	810e0da <memset+0xa>
 810e0d8:	4770      	bx	lr
 810e0da:	f803 1b01 	strb.w	r1, [r3], #1
 810e0de:	e7f9      	b.n	810e0d4 <memset+0x4>

0810e0e0 <_localeconv_r>:
 810e0e0:	4800      	ldr	r0, [pc, #0]	@ (810e0e4 <_localeconv_r+0x4>)
 810e0e2:	4770      	bx	lr
 810e0e4:	100001ec 	.word	0x100001ec

0810e0e8 <_close_r>:
 810e0e8:	b538      	push	{r3, r4, r5, lr}
 810e0ea:	4d06      	ldr	r5, [pc, #24]	@ (810e104 <_close_r+0x1c>)
 810e0ec:	2300      	movs	r3, #0
 810e0ee:	4604      	mov	r4, r0
 810e0f0:	4608      	mov	r0, r1
 810e0f2:	602b      	str	r3, [r5, #0]
 810e0f4:	f7f5 fcba 	bl	8103a6c <_close>
 810e0f8:	1c43      	adds	r3, r0, #1
 810e0fa:	d102      	bne.n	810e102 <_close_r+0x1a>
 810e0fc:	682b      	ldr	r3, [r5, #0]
 810e0fe:	b103      	cbz	r3, 810e102 <_close_r+0x1a>
 810e100:	6023      	str	r3, [r4, #0]
 810e102:	bd38      	pop	{r3, r4, r5, pc}
 810e104:	10000830 	.word	0x10000830

0810e108 <_lseek_r>:
 810e108:	b538      	push	{r3, r4, r5, lr}
 810e10a:	4d07      	ldr	r5, [pc, #28]	@ (810e128 <_lseek_r+0x20>)
 810e10c:	4604      	mov	r4, r0
 810e10e:	4608      	mov	r0, r1
 810e110:	4611      	mov	r1, r2
 810e112:	2200      	movs	r2, #0
 810e114:	602a      	str	r2, [r5, #0]
 810e116:	461a      	mov	r2, r3
 810e118:	f7f5 fccf 	bl	8103aba <_lseek>
 810e11c:	1c43      	adds	r3, r0, #1
 810e11e:	d102      	bne.n	810e126 <_lseek_r+0x1e>
 810e120:	682b      	ldr	r3, [r5, #0]
 810e122:	b103      	cbz	r3, 810e126 <_lseek_r+0x1e>
 810e124:	6023      	str	r3, [r4, #0]
 810e126:	bd38      	pop	{r3, r4, r5, pc}
 810e128:	10000830 	.word	0x10000830

0810e12c <_read_r>:
 810e12c:	b538      	push	{r3, r4, r5, lr}
 810e12e:	4d07      	ldr	r5, [pc, #28]	@ (810e14c <_read_r+0x20>)
 810e130:	4604      	mov	r4, r0
 810e132:	4608      	mov	r0, r1
 810e134:	4611      	mov	r1, r2
 810e136:	2200      	movs	r2, #0
 810e138:	602a      	str	r2, [r5, #0]
 810e13a:	461a      	mov	r2, r3
 810e13c:	f7f5 fc5b 	bl	81039f6 <_read>
 810e140:	1c43      	adds	r3, r0, #1
 810e142:	d102      	bne.n	810e14a <_read_r+0x1e>
 810e144:	682b      	ldr	r3, [r5, #0]
 810e146:	b103      	cbz	r3, 810e14a <_read_r+0x1e>
 810e148:	6023      	str	r3, [r4, #0]
 810e14a:	bd38      	pop	{r3, r4, r5, pc}
 810e14c:	10000830 	.word	0x10000830

0810e150 <_write_r>:
 810e150:	b538      	push	{r3, r4, r5, lr}
 810e152:	4d07      	ldr	r5, [pc, #28]	@ (810e170 <_write_r+0x20>)
 810e154:	4604      	mov	r4, r0
 810e156:	4608      	mov	r0, r1
 810e158:	4611      	mov	r1, r2
 810e15a:	2200      	movs	r2, #0
 810e15c:	602a      	str	r2, [r5, #0]
 810e15e:	461a      	mov	r2, r3
 810e160:	f7f5 fc68 	bl	8103a34 <_write>
 810e164:	1c43      	adds	r3, r0, #1
 810e166:	d102      	bne.n	810e16e <_write_r+0x1e>
 810e168:	682b      	ldr	r3, [r5, #0]
 810e16a:	b103      	cbz	r3, 810e16e <_write_r+0x1e>
 810e16c:	6023      	str	r3, [r4, #0]
 810e16e:	bd38      	pop	{r3, r4, r5, pc}
 810e170:	10000830 	.word	0x10000830

0810e174 <__errno>:
 810e174:	4b01      	ldr	r3, [pc, #4]	@ (810e17c <__errno+0x8>)
 810e176:	6818      	ldr	r0, [r3, #0]
 810e178:	4770      	bx	lr
 810e17a:	bf00      	nop
 810e17c:	100000ac 	.word	0x100000ac

0810e180 <__libc_init_array>:
 810e180:	b570      	push	{r4, r5, r6, lr}
 810e182:	4d0d      	ldr	r5, [pc, #52]	@ (810e1b8 <__libc_init_array+0x38>)
 810e184:	4c0d      	ldr	r4, [pc, #52]	@ (810e1bc <__libc_init_array+0x3c>)
 810e186:	1b64      	subs	r4, r4, r5
 810e188:	10a4      	asrs	r4, r4, #2
 810e18a:	2600      	movs	r6, #0
 810e18c:	42a6      	cmp	r6, r4
 810e18e:	d109      	bne.n	810e1a4 <__libc_init_array+0x24>
 810e190:	4d0b      	ldr	r5, [pc, #44]	@ (810e1c0 <__libc_init_array+0x40>)
 810e192:	4c0c      	ldr	r4, [pc, #48]	@ (810e1c4 <__libc_init_array+0x44>)
 810e194:	f003 fae0 	bl	8111758 <_init>
 810e198:	1b64      	subs	r4, r4, r5
 810e19a:	10a4      	asrs	r4, r4, #2
 810e19c:	2600      	movs	r6, #0
 810e19e:	42a6      	cmp	r6, r4
 810e1a0:	d105      	bne.n	810e1ae <__libc_init_array+0x2e>
 810e1a2:	bd70      	pop	{r4, r5, r6, pc}
 810e1a4:	f855 3b04 	ldr.w	r3, [r5], #4
 810e1a8:	4798      	blx	r3
 810e1aa:	3601      	adds	r6, #1
 810e1ac:	e7ee      	b.n	810e18c <__libc_init_array+0xc>
 810e1ae:	f855 3b04 	ldr.w	r3, [r5], #4
 810e1b2:	4798      	blx	r3
 810e1b4:	3601      	adds	r6, #1
 810e1b6:	e7f2      	b.n	810e19e <__libc_init_array+0x1e>
 810e1b8:	08111c64 	.word	0x08111c64
 810e1bc:	08111c64 	.word	0x08111c64
 810e1c0:	08111c64 	.word	0x08111c64
 810e1c4:	08111c68 	.word	0x08111c68

0810e1c8 <__retarget_lock_init_recursive>:
 810e1c8:	4770      	bx	lr

0810e1ca <__retarget_lock_acquire_recursive>:
 810e1ca:	4770      	bx	lr

0810e1cc <__retarget_lock_release_recursive>:
 810e1cc:	4770      	bx	lr

0810e1ce <memcpy>:
 810e1ce:	440a      	add	r2, r1
 810e1d0:	4291      	cmp	r1, r2
 810e1d2:	f100 33ff 	add.w	r3, r0, #4294967295
 810e1d6:	d100      	bne.n	810e1da <memcpy+0xc>
 810e1d8:	4770      	bx	lr
 810e1da:	b510      	push	{r4, lr}
 810e1dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 810e1e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 810e1e4:	4291      	cmp	r1, r2
 810e1e6:	d1f9      	bne.n	810e1dc <memcpy+0xe>
 810e1e8:	bd10      	pop	{r4, pc}
	...

0810e1ec <nanf>:
 810e1ec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 810e1f4 <nanf+0x8>
 810e1f0:	4770      	bx	lr
 810e1f2:	bf00      	nop
 810e1f4:	7fc00000 	.word	0x7fc00000

0810e1f8 <__assert_func>:
 810e1f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810e1fa:	4614      	mov	r4, r2
 810e1fc:	461a      	mov	r2, r3
 810e1fe:	4b09      	ldr	r3, [pc, #36]	@ (810e224 <__assert_func+0x2c>)
 810e200:	681b      	ldr	r3, [r3, #0]
 810e202:	4605      	mov	r5, r0
 810e204:	68d8      	ldr	r0, [r3, #12]
 810e206:	b954      	cbnz	r4, 810e21e <__assert_func+0x26>
 810e208:	4b07      	ldr	r3, [pc, #28]	@ (810e228 <__assert_func+0x30>)
 810e20a:	461c      	mov	r4, r3
 810e20c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810e210:	9100      	str	r1, [sp, #0]
 810e212:	462b      	mov	r3, r5
 810e214:	4905      	ldr	r1, [pc, #20]	@ (810e22c <__assert_func+0x34>)
 810e216:	f002 fdd7 	bl	8110dc8 <fiprintf>
 810e21a:	f002 feb1 	bl	8110f80 <abort>
 810e21e:	4b04      	ldr	r3, [pc, #16]	@ (810e230 <__assert_func+0x38>)
 810e220:	e7f4      	b.n	810e20c <__assert_func+0x14>
 810e222:	bf00      	nop
 810e224:	100000ac 	.word	0x100000ac
 810e228:	081118bb 	.word	0x081118bb
 810e22c:	0811188d 	.word	0x0811188d
 810e230:	08111880 	.word	0x08111880

0810e234 <quorem>:
 810e234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e238:	6903      	ldr	r3, [r0, #16]
 810e23a:	690c      	ldr	r4, [r1, #16]
 810e23c:	42a3      	cmp	r3, r4
 810e23e:	4607      	mov	r7, r0
 810e240:	db7e      	blt.n	810e340 <quorem+0x10c>
 810e242:	3c01      	subs	r4, #1
 810e244:	f101 0814 	add.w	r8, r1, #20
 810e248:	00a3      	lsls	r3, r4, #2
 810e24a:	f100 0514 	add.w	r5, r0, #20
 810e24e:	9300      	str	r3, [sp, #0]
 810e250:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810e254:	9301      	str	r3, [sp, #4]
 810e256:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810e25a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810e25e:	3301      	adds	r3, #1
 810e260:	429a      	cmp	r2, r3
 810e262:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810e266:	fbb2 f6f3 	udiv	r6, r2, r3
 810e26a:	d32e      	bcc.n	810e2ca <quorem+0x96>
 810e26c:	f04f 0a00 	mov.w	sl, #0
 810e270:	46c4      	mov	ip, r8
 810e272:	46ae      	mov	lr, r5
 810e274:	46d3      	mov	fp, sl
 810e276:	f85c 3b04 	ldr.w	r3, [ip], #4
 810e27a:	b298      	uxth	r0, r3
 810e27c:	fb06 a000 	mla	r0, r6, r0, sl
 810e280:	0c02      	lsrs	r2, r0, #16
 810e282:	0c1b      	lsrs	r3, r3, #16
 810e284:	fb06 2303 	mla	r3, r6, r3, r2
 810e288:	f8de 2000 	ldr.w	r2, [lr]
 810e28c:	b280      	uxth	r0, r0
 810e28e:	b292      	uxth	r2, r2
 810e290:	1a12      	subs	r2, r2, r0
 810e292:	445a      	add	r2, fp
 810e294:	f8de 0000 	ldr.w	r0, [lr]
 810e298:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810e29c:	b29b      	uxth	r3, r3
 810e29e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 810e2a2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 810e2a6:	b292      	uxth	r2, r2
 810e2a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 810e2ac:	45e1      	cmp	r9, ip
 810e2ae:	f84e 2b04 	str.w	r2, [lr], #4
 810e2b2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 810e2b6:	d2de      	bcs.n	810e276 <quorem+0x42>
 810e2b8:	9b00      	ldr	r3, [sp, #0]
 810e2ba:	58eb      	ldr	r3, [r5, r3]
 810e2bc:	b92b      	cbnz	r3, 810e2ca <quorem+0x96>
 810e2be:	9b01      	ldr	r3, [sp, #4]
 810e2c0:	3b04      	subs	r3, #4
 810e2c2:	429d      	cmp	r5, r3
 810e2c4:	461a      	mov	r2, r3
 810e2c6:	d32f      	bcc.n	810e328 <quorem+0xf4>
 810e2c8:	613c      	str	r4, [r7, #16]
 810e2ca:	4638      	mov	r0, r7
 810e2cc:	f001 f9c4 	bl	810f658 <__mcmp>
 810e2d0:	2800      	cmp	r0, #0
 810e2d2:	db25      	blt.n	810e320 <quorem+0xec>
 810e2d4:	4629      	mov	r1, r5
 810e2d6:	2000      	movs	r0, #0
 810e2d8:	f858 2b04 	ldr.w	r2, [r8], #4
 810e2dc:	f8d1 c000 	ldr.w	ip, [r1]
 810e2e0:	fa1f fe82 	uxth.w	lr, r2
 810e2e4:	fa1f f38c 	uxth.w	r3, ip
 810e2e8:	eba3 030e 	sub.w	r3, r3, lr
 810e2ec:	4403      	add	r3, r0
 810e2ee:	0c12      	lsrs	r2, r2, #16
 810e2f0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 810e2f4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 810e2f8:	b29b      	uxth	r3, r3
 810e2fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810e2fe:	45c1      	cmp	r9, r8
 810e300:	f841 3b04 	str.w	r3, [r1], #4
 810e304:	ea4f 4022 	mov.w	r0, r2, asr #16
 810e308:	d2e6      	bcs.n	810e2d8 <quorem+0xa4>
 810e30a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810e30e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810e312:	b922      	cbnz	r2, 810e31e <quorem+0xea>
 810e314:	3b04      	subs	r3, #4
 810e316:	429d      	cmp	r5, r3
 810e318:	461a      	mov	r2, r3
 810e31a:	d30b      	bcc.n	810e334 <quorem+0x100>
 810e31c:	613c      	str	r4, [r7, #16]
 810e31e:	3601      	adds	r6, #1
 810e320:	4630      	mov	r0, r6
 810e322:	b003      	add	sp, #12
 810e324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e328:	6812      	ldr	r2, [r2, #0]
 810e32a:	3b04      	subs	r3, #4
 810e32c:	2a00      	cmp	r2, #0
 810e32e:	d1cb      	bne.n	810e2c8 <quorem+0x94>
 810e330:	3c01      	subs	r4, #1
 810e332:	e7c6      	b.n	810e2c2 <quorem+0x8e>
 810e334:	6812      	ldr	r2, [r2, #0]
 810e336:	3b04      	subs	r3, #4
 810e338:	2a00      	cmp	r2, #0
 810e33a:	d1ef      	bne.n	810e31c <quorem+0xe8>
 810e33c:	3c01      	subs	r4, #1
 810e33e:	e7ea      	b.n	810e316 <quorem+0xe2>
 810e340:	2000      	movs	r0, #0
 810e342:	e7ee      	b.n	810e322 <quorem+0xee>
 810e344:	0000      	movs	r0, r0
	...

0810e348 <_dtoa_r>:
 810e348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e34c:	69c7      	ldr	r7, [r0, #28]
 810e34e:	b099      	sub	sp, #100	@ 0x64
 810e350:	ed8d 0b02 	vstr	d0, [sp, #8]
 810e354:	ec55 4b10 	vmov	r4, r5, d0
 810e358:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 810e35a:	9109      	str	r1, [sp, #36]	@ 0x24
 810e35c:	4683      	mov	fp, r0
 810e35e:	920e      	str	r2, [sp, #56]	@ 0x38
 810e360:	9313      	str	r3, [sp, #76]	@ 0x4c
 810e362:	b97f      	cbnz	r7, 810e384 <_dtoa_r+0x3c>
 810e364:	2010      	movs	r0, #16
 810e366:	f000 fdfd 	bl	810ef64 <malloc>
 810e36a:	4602      	mov	r2, r0
 810e36c:	f8cb 001c 	str.w	r0, [fp, #28]
 810e370:	b920      	cbnz	r0, 810e37c <_dtoa_r+0x34>
 810e372:	4ba7      	ldr	r3, [pc, #668]	@ (810e610 <_dtoa_r+0x2c8>)
 810e374:	21ef      	movs	r1, #239	@ 0xef
 810e376:	48a7      	ldr	r0, [pc, #668]	@ (810e614 <_dtoa_r+0x2cc>)
 810e378:	f7ff ff3e 	bl	810e1f8 <__assert_func>
 810e37c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 810e380:	6007      	str	r7, [r0, #0]
 810e382:	60c7      	str	r7, [r0, #12]
 810e384:	f8db 301c 	ldr.w	r3, [fp, #28]
 810e388:	6819      	ldr	r1, [r3, #0]
 810e38a:	b159      	cbz	r1, 810e3a4 <_dtoa_r+0x5c>
 810e38c:	685a      	ldr	r2, [r3, #4]
 810e38e:	604a      	str	r2, [r1, #4]
 810e390:	2301      	movs	r3, #1
 810e392:	4093      	lsls	r3, r2
 810e394:	608b      	str	r3, [r1, #8]
 810e396:	4658      	mov	r0, fp
 810e398:	f000 feda 	bl	810f150 <_Bfree>
 810e39c:	f8db 301c 	ldr.w	r3, [fp, #28]
 810e3a0:	2200      	movs	r2, #0
 810e3a2:	601a      	str	r2, [r3, #0]
 810e3a4:	1e2b      	subs	r3, r5, #0
 810e3a6:	bfb9      	ittee	lt
 810e3a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 810e3ac:	9303      	strlt	r3, [sp, #12]
 810e3ae:	2300      	movge	r3, #0
 810e3b0:	6033      	strge	r3, [r6, #0]
 810e3b2:	9f03      	ldr	r7, [sp, #12]
 810e3b4:	4b98      	ldr	r3, [pc, #608]	@ (810e618 <_dtoa_r+0x2d0>)
 810e3b6:	bfbc      	itt	lt
 810e3b8:	2201      	movlt	r2, #1
 810e3ba:	6032      	strlt	r2, [r6, #0]
 810e3bc:	43bb      	bics	r3, r7
 810e3be:	d112      	bne.n	810e3e6 <_dtoa_r+0x9e>
 810e3c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 810e3c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 810e3c6:	6013      	str	r3, [r2, #0]
 810e3c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810e3cc:	4323      	orrs	r3, r4
 810e3ce:	f000 854d 	beq.w	810ee6c <_dtoa_r+0xb24>
 810e3d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810e3d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 810e62c <_dtoa_r+0x2e4>
 810e3d8:	2b00      	cmp	r3, #0
 810e3da:	f000 854f 	beq.w	810ee7c <_dtoa_r+0xb34>
 810e3de:	f10a 0303 	add.w	r3, sl, #3
 810e3e2:	f000 bd49 	b.w	810ee78 <_dtoa_r+0xb30>
 810e3e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 810e3ea:	2200      	movs	r2, #0
 810e3ec:	ec51 0b17 	vmov	r0, r1, d7
 810e3f0:	2300      	movs	r3, #0
 810e3f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 810e3f6:	f7f2 fbef 	bl	8100bd8 <__aeabi_dcmpeq>
 810e3fa:	4680      	mov	r8, r0
 810e3fc:	b158      	cbz	r0, 810e416 <_dtoa_r+0xce>
 810e3fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 810e400:	2301      	movs	r3, #1
 810e402:	6013      	str	r3, [r2, #0]
 810e404:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810e406:	b113      	cbz	r3, 810e40e <_dtoa_r+0xc6>
 810e408:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 810e40a:	4b84      	ldr	r3, [pc, #528]	@ (810e61c <_dtoa_r+0x2d4>)
 810e40c:	6013      	str	r3, [r2, #0]
 810e40e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 810e630 <_dtoa_r+0x2e8>
 810e412:	f000 bd33 	b.w	810ee7c <_dtoa_r+0xb34>
 810e416:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 810e41a:	aa16      	add	r2, sp, #88	@ 0x58
 810e41c:	a917      	add	r1, sp, #92	@ 0x5c
 810e41e:	4658      	mov	r0, fp
 810e420:	f001 fa3a 	bl	810f898 <__d2b>
 810e424:	f3c7 560a 	ubfx	r6, r7, #20, #11
 810e428:	4681      	mov	r9, r0
 810e42a:	2e00      	cmp	r6, #0
 810e42c:	d077      	beq.n	810e51e <_dtoa_r+0x1d6>
 810e42e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810e430:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 810e434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810e438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810e43c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 810e440:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 810e444:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 810e448:	4619      	mov	r1, r3
 810e44a:	2200      	movs	r2, #0
 810e44c:	4b74      	ldr	r3, [pc, #464]	@ (810e620 <_dtoa_r+0x2d8>)
 810e44e:	f7f1 ffa3 	bl	8100398 <__aeabi_dsub>
 810e452:	a369      	add	r3, pc, #420	@ (adr r3, 810e5f8 <_dtoa_r+0x2b0>)
 810e454:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e458:	f7f2 f956 	bl	8100708 <__aeabi_dmul>
 810e45c:	a368      	add	r3, pc, #416	@ (adr r3, 810e600 <_dtoa_r+0x2b8>)
 810e45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e462:	f7f1 ff9b 	bl	810039c <__adddf3>
 810e466:	4604      	mov	r4, r0
 810e468:	4630      	mov	r0, r6
 810e46a:	460d      	mov	r5, r1
 810e46c:	f7f2 f8e2 	bl	8100634 <__aeabi_i2d>
 810e470:	a365      	add	r3, pc, #404	@ (adr r3, 810e608 <_dtoa_r+0x2c0>)
 810e472:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e476:	f7f2 f947 	bl	8100708 <__aeabi_dmul>
 810e47a:	4602      	mov	r2, r0
 810e47c:	460b      	mov	r3, r1
 810e47e:	4620      	mov	r0, r4
 810e480:	4629      	mov	r1, r5
 810e482:	f7f1 ff8b 	bl	810039c <__adddf3>
 810e486:	4604      	mov	r4, r0
 810e488:	460d      	mov	r5, r1
 810e48a:	f7f2 fbed 	bl	8100c68 <__aeabi_d2iz>
 810e48e:	2200      	movs	r2, #0
 810e490:	4607      	mov	r7, r0
 810e492:	2300      	movs	r3, #0
 810e494:	4620      	mov	r0, r4
 810e496:	4629      	mov	r1, r5
 810e498:	f7f2 fba8 	bl	8100bec <__aeabi_dcmplt>
 810e49c:	b140      	cbz	r0, 810e4b0 <_dtoa_r+0x168>
 810e49e:	4638      	mov	r0, r7
 810e4a0:	f7f2 f8c8 	bl	8100634 <__aeabi_i2d>
 810e4a4:	4622      	mov	r2, r4
 810e4a6:	462b      	mov	r3, r5
 810e4a8:	f7f2 fb96 	bl	8100bd8 <__aeabi_dcmpeq>
 810e4ac:	b900      	cbnz	r0, 810e4b0 <_dtoa_r+0x168>
 810e4ae:	3f01      	subs	r7, #1
 810e4b0:	2f16      	cmp	r7, #22
 810e4b2:	d851      	bhi.n	810e558 <_dtoa_r+0x210>
 810e4b4:	4b5b      	ldr	r3, [pc, #364]	@ (810e624 <_dtoa_r+0x2dc>)
 810e4b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810e4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e4be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810e4c2:	f7f2 fb93 	bl	8100bec <__aeabi_dcmplt>
 810e4c6:	2800      	cmp	r0, #0
 810e4c8:	d048      	beq.n	810e55c <_dtoa_r+0x214>
 810e4ca:	3f01      	subs	r7, #1
 810e4cc:	2300      	movs	r3, #0
 810e4ce:	9312      	str	r3, [sp, #72]	@ 0x48
 810e4d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810e4d2:	1b9b      	subs	r3, r3, r6
 810e4d4:	1e5a      	subs	r2, r3, #1
 810e4d6:	bf44      	itt	mi
 810e4d8:	f1c3 0801 	rsbmi	r8, r3, #1
 810e4dc:	2300      	movmi	r3, #0
 810e4de:	9208      	str	r2, [sp, #32]
 810e4e0:	bf54      	ite	pl
 810e4e2:	f04f 0800 	movpl.w	r8, #0
 810e4e6:	9308      	strmi	r3, [sp, #32]
 810e4e8:	2f00      	cmp	r7, #0
 810e4ea:	db39      	blt.n	810e560 <_dtoa_r+0x218>
 810e4ec:	9b08      	ldr	r3, [sp, #32]
 810e4ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 810e4f0:	443b      	add	r3, r7
 810e4f2:	9308      	str	r3, [sp, #32]
 810e4f4:	2300      	movs	r3, #0
 810e4f6:	930a      	str	r3, [sp, #40]	@ 0x28
 810e4f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810e4fa:	2b09      	cmp	r3, #9
 810e4fc:	d864      	bhi.n	810e5c8 <_dtoa_r+0x280>
 810e4fe:	2b05      	cmp	r3, #5
 810e500:	bfc4      	itt	gt
 810e502:	3b04      	subgt	r3, #4
 810e504:	9309      	strgt	r3, [sp, #36]	@ 0x24
 810e506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810e508:	f1a3 0302 	sub.w	r3, r3, #2
 810e50c:	bfcc      	ite	gt
 810e50e:	2400      	movgt	r4, #0
 810e510:	2401      	movle	r4, #1
 810e512:	2b03      	cmp	r3, #3
 810e514:	d863      	bhi.n	810e5de <_dtoa_r+0x296>
 810e516:	e8df f003 	tbb	[pc, r3]
 810e51a:	372a      	.short	0x372a
 810e51c:	5535      	.short	0x5535
 810e51e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 810e522:	441e      	add	r6, r3
 810e524:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 810e528:	2b20      	cmp	r3, #32
 810e52a:	bfc1      	itttt	gt
 810e52c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 810e530:	409f      	lslgt	r7, r3
 810e532:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 810e536:	fa24 f303 	lsrgt.w	r3, r4, r3
 810e53a:	bfd6      	itet	le
 810e53c:	f1c3 0320 	rsble	r3, r3, #32
 810e540:	ea47 0003 	orrgt.w	r0, r7, r3
 810e544:	fa04 f003 	lslle.w	r0, r4, r3
 810e548:	f7f2 f864 	bl	8100614 <__aeabi_ui2d>
 810e54c:	2201      	movs	r2, #1
 810e54e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 810e552:	3e01      	subs	r6, #1
 810e554:	9214      	str	r2, [sp, #80]	@ 0x50
 810e556:	e777      	b.n	810e448 <_dtoa_r+0x100>
 810e558:	2301      	movs	r3, #1
 810e55a:	e7b8      	b.n	810e4ce <_dtoa_r+0x186>
 810e55c:	9012      	str	r0, [sp, #72]	@ 0x48
 810e55e:	e7b7      	b.n	810e4d0 <_dtoa_r+0x188>
 810e560:	427b      	negs	r3, r7
 810e562:	930a      	str	r3, [sp, #40]	@ 0x28
 810e564:	2300      	movs	r3, #0
 810e566:	eba8 0807 	sub.w	r8, r8, r7
 810e56a:	930f      	str	r3, [sp, #60]	@ 0x3c
 810e56c:	e7c4      	b.n	810e4f8 <_dtoa_r+0x1b0>
 810e56e:	2300      	movs	r3, #0
 810e570:	930b      	str	r3, [sp, #44]	@ 0x2c
 810e572:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810e574:	2b00      	cmp	r3, #0
 810e576:	dc35      	bgt.n	810e5e4 <_dtoa_r+0x29c>
 810e578:	2301      	movs	r3, #1
 810e57a:	9300      	str	r3, [sp, #0]
 810e57c:	9307      	str	r3, [sp, #28]
 810e57e:	461a      	mov	r2, r3
 810e580:	920e      	str	r2, [sp, #56]	@ 0x38
 810e582:	e00b      	b.n	810e59c <_dtoa_r+0x254>
 810e584:	2301      	movs	r3, #1
 810e586:	e7f3      	b.n	810e570 <_dtoa_r+0x228>
 810e588:	2300      	movs	r3, #0
 810e58a:	930b      	str	r3, [sp, #44]	@ 0x2c
 810e58c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810e58e:	18fb      	adds	r3, r7, r3
 810e590:	9300      	str	r3, [sp, #0]
 810e592:	3301      	adds	r3, #1
 810e594:	2b01      	cmp	r3, #1
 810e596:	9307      	str	r3, [sp, #28]
 810e598:	bfb8      	it	lt
 810e59a:	2301      	movlt	r3, #1
 810e59c:	f8db 001c 	ldr.w	r0, [fp, #28]
 810e5a0:	2100      	movs	r1, #0
 810e5a2:	2204      	movs	r2, #4
 810e5a4:	f102 0514 	add.w	r5, r2, #20
 810e5a8:	429d      	cmp	r5, r3
 810e5aa:	d91f      	bls.n	810e5ec <_dtoa_r+0x2a4>
 810e5ac:	6041      	str	r1, [r0, #4]
 810e5ae:	4658      	mov	r0, fp
 810e5b0:	f000 fd8e 	bl	810f0d0 <_Balloc>
 810e5b4:	4682      	mov	sl, r0
 810e5b6:	2800      	cmp	r0, #0
 810e5b8:	d13c      	bne.n	810e634 <_dtoa_r+0x2ec>
 810e5ba:	4b1b      	ldr	r3, [pc, #108]	@ (810e628 <_dtoa_r+0x2e0>)
 810e5bc:	4602      	mov	r2, r0
 810e5be:	f240 11af 	movw	r1, #431	@ 0x1af
 810e5c2:	e6d8      	b.n	810e376 <_dtoa_r+0x2e>
 810e5c4:	2301      	movs	r3, #1
 810e5c6:	e7e0      	b.n	810e58a <_dtoa_r+0x242>
 810e5c8:	2401      	movs	r4, #1
 810e5ca:	2300      	movs	r3, #0
 810e5cc:	9309      	str	r3, [sp, #36]	@ 0x24
 810e5ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 810e5d0:	f04f 33ff 	mov.w	r3, #4294967295
 810e5d4:	9300      	str	r3, [sp, #0]
 810e5d6:	9307      	str	r3, [sp, #28]
 810e5d8:	2200      	movs	r2, #0
 810e5da:	2312      	movs	r3, #18
 810e5dc:	e7d0      	b.n	810e580 <_dtoa_r+0x238>
 810e5de:	2301      	movs	r3, #1
 810e5e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 810e5e2:	e7f5      	b.n	810e5d0 <_dtoa_r+0x288>
 810e5e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810e5e6:	9300      	str	r3, [sp, #0]
 810e5e8:	9307      	str	r3, [sp, #28]
 810e5ea:	e7d7      	b.n	810e59c <_dtoa_r+0x254>
 810e5ec:	3101      	adds	r1, #1
 810e5ee:	0052      	lsls	r2, r2, #1
 810e5f0:	e7d8      	b.n	810e5a4 <_dtoa_r+0x25c>
 810e5f2:	bf00      	nop
 810e5f4:	f3af 8000 	nop.w
 810e5f8:	636f4361 	.word	0x636f4361
 810e5fc:	3fd287a7 	.word	0x3fd287a7
 810e600:	8b60c8b3 	.word	0x8b60c8b3
 810e604:	3fc68a28 	.word	0x3fc68a28
 810e608:	509f79fb 	.word	0x509f79fb
 810e60c:	3fd34413 	.word	0x3fd34413
 810e610:	081117d8 	.word	0x081117d8
 810e614:	081118c9 	.word	0x081118c9
 810e618:	7ff00000 	.word	0x7ff00000
 810e61c:	08111858 	.word	0x08111858
 810e620:	3ff80000 	.word	0x3ff80000
 810e624:	081119c0 	.word	0x081119c0
 810e628:	08111921 	.word	0x08111921
 810e62c:	081118c5 	.word	0x081118c5
 810e630:	08111857 	.word	0x08111857
 810e634:	f8db 301c 	ldr.w	r3, [fp, #28]
 810e638:	6018      	str	r0, [r3, #0]
 810e63a:	9b07      	ldr	r3, [sp, #28]
 810e63c:	2b0e      	cmp	r3, #14
 810e63e:	f200 80a4 	bhi.w	810e78a <_dtoa_r+0x442>
 810e642:	2c00      	cmp	r4, #0
 810e644:	f000 80a1 	beq.w	810e78a <_dtoa_r+0x442>
 810e648:	2f00      	cmp	r7, #0
 810e64a:	dd33      	ble.n	810e6b4 <_dtoa_r+0x36c>
 810e64c:	4bad      	ldr	r3, [pc, #692]	@ (810e904 <_dtoa_r+0x5bc>)
 810e64e:	f007 020f 	and.w	r2, r7, #15
 810e652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810e656:	ed93 7b00 	vldr	d7, [r3]
 810e65a:	05f8      	lsls	r0, r7, #23
 810e65c:	ed8d 7b04 	vstr	d7, [sp, #16]
 810e660:	ea4f 1427 	mov.w	r4, r7, asr #4
 810e664:	d516      	bpl.n	810e694 <_dtoa_r+0x34c>
 810e666:	4ba8      	ldr	r3, [pc, #672]	@ (810e908 <_dtoa_r+0x5c0>)
 810e668:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810e66c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810e670:	f7f2 f974 	bl	810095c <__aeabi_ddiv>
 810e674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810e678:	f004 040f 	and.w	r4, r4, #15
 810e67c:	2603      	movs	r6, #3
 810e67e:	4da2      	ldr	r5, [pc, #648]	@ (810e908 <_dtoa_r+0x5c0>)
 810e680:	b954      	cbnz	r4, 810e698 <_dtoa_r+0x350>
 810e682:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810e686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e68a:	f7f2 f967 	bl	810095c <__aeabi_ddiv>
 810e68e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810e692:	e028      	b.n	810e6e6 <_dtoa_r+0x39e>
 810e694:	2602      	movs	r6, #2
 810e696:	e7f2      	b.n	810e67e <_dtoa_r+0x336>
 810e698:	07e1      	lsls	r1, r4, #31
 810e69a:	d508      	bpl.n	810e6ae <_dtoa_r+0x366>
 810e69c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810e6a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 810e6a4:	f7f2 f830 	bl	8100708 <__aeabi_dmul>
 810e6a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810e6ac:	3601      	adds	r6, #1
 810e6ae:	1064      	asrs	r4, r4, #1
 810e6b0:	3508      	adds	r5, #8
 810e6b2:	e7e5      	b.n	810e680 <_dtoa_r+0x338>
 810e6b4:	f000 80d2 	beq.w	810e85c <_dtoa_r+0x514>
 810e6b8:	427c      	negs	r4, r7
 810e6ba:	4b92      	ldr	r3, [pc, #584]	@ (810e904 <_dtoa_r+0x5bc>)
 810e6bc:	4d92      	ldr	r5, [pc, #584]	@ (810e908 <_dtoa_r+0x5c0>)
 810e6be:	f004 020f 	and.w	r2, r4, #15
 810e6c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810e6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e6ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810e6ce:	f7f2 f81b 	bl	8100708 <__aeabi_dmul>
 810e6d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810e6d6:	1124      	asrs	r4, r4, #4
 810e6d8:	2300      	movs	r3, #0
 810e6da:	2602      	movs	r6, #2
 810e6dc:	2c00      	cmp	r4, #0
 810e6de:	f040 80b2 	bne.w	810e846 <_dtoa_r+0x4fe>
 810e6e2:	2b00      	cmp	r3, #0
 810e6e4:	d1d3      	bne.n	810e68e <_dtoa_r+0x346>
 810e6e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810e6e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 810e6ec:	2b00      	cmp	r3, #0
 810e6ee:	f000 80b7 	beq.w	810e860 <_dtoa_r+0x518>
 810e6f2:	4b86      	ldr	r3, [pc, #536]	@ (810e90c <_dtoa_r+0x5c4>)
 810e6f4:	2200      	movs	r2, #0
 810e6f6:	4620      	mov	r0, r4
 810e6f8:	4629      	mov	r1, r5
 810e6fa:	f7f2 fa77 	bl	8100bec <__aeabi_dcmplt>
 810e6fe:	2800      	cmp	r0, #0
 810e700:	f000 80ae 	beq.w	810e860 <_dtoa_r+0x518>
 810e704:	9b07      	ldr	r3, [sp, #28]
 810e706:	2b00      	cmp	r3, #0
 810e708:	f000 80aa 	beq.w	810e860 <_dtoa_r+0x518>
 810e70c:	9b00      	ldr	r3, [sp, #0]
 810e70e:	2b00      	cmp	r3, #0
 810e710:	dd37      	ble.n	810e782 <_dtoa_r+0x43a>
 810e712:	1e7b      	subs	r3, r7, #1
 810e714:	9304      	str	r3, [sp, #16]
 810e716:	4620      	mov	r0, r4
 810e718:	4b7d      	ldr	r3, [pc, #500]	@ (810e910 <_dtoa_r+0x5c8>)
 810e71a:	2200      	movs	r2, #0
 810e71c:	4629      	mov	r1, r5
 810e71e:	f7f1 fff3 	bl	8100708 <__aeabi_dmul>
 810e722:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810e726:	9c00      	ldr	r4, [sp, #0]
 810e728:	3601      	adds	r6, #1
 810e72a:	4630      	mov	r0, r6
 810e72c:	f7f1 ff82 	bl	8100634 <__aeabi_i2d>
 810e730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810e734:	f7f1 ffe8 	bl	8100708 <__aeabi_dmul>
 810e738:	4b76      	ldr	r3, [pc, #472]	@ (810e914 <_dtoa_r+0x5cc>)
 810e73a:	2200      	movs	r2, #0
 810e73c:	f7f1 fe2e 	bl	810039c <__adddf3>
 810e740:	4605      	mov	r5, r0
 810e742:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 810e746:	2c00      	cmp	r4, #0
 810e748:	f040 808d 	bne.w	810e866 <_dtoa_r+0x51e>
 810e74c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e750:	4b71      	ldr	r3, [pc, #452]	@ (810e918 <_dtoa_r+0x5d0>)
 810e752:	2200      	movs	r2, #0
 810e754:	f7f1 fe20 	bl	8100398 <__aeabi_dsub>
 810e758:	4602      	mov	r2, r0
 810e75a:	460b      	mov	r3, r1
 810e75c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810e760:	462a      	mov	r2, r5
 810e762:	4633      	mov	r3, r6
 810e764:	f7f2 fa60 	bl	8100c28 <__aeabi_dcmpgt>
 810e768:	2800      	cmp	r0, #0
 810e76a:	f040 828b 	bne.w	810ec84 <_dtoa_r+0x93c>
 810e76e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e772:	462a      	mov	r2, r5
 810e774:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 810e778:	f7f2 fa38 	bl	8100bec <__aeabi_dcmplt>
 810e77c:	2800      	cmp	r0, #0
 810e77e:	f040 8128 	bne.w	810e9d2 <_dtoa_r+0x68a>
 810e782:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 810e786:	e9cd 3402 	strd	r3, r4, [sp, #8]
 810e78a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810e78c:	2b00      	cmp	r3, #0
 810e78e:	f2c0 815a 	blt.w	810ea46 <_dtoa_r+0x6fe>
 810e792:	2f0e      	cmp	r7, #14
 810e794:	f300 8157 	bgt.w	810ea46 <_dtoa_r+0x6fe>
 810e798:	4b5a      	ldr	r3, [pc, #360]	@ (810e904 <_dtoa_r+0x5bc>)
 810e79a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810e79e:	ed93 7b00 	vldr	d7, [r3]
 810e7a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810e7a4:	2b00      	cmp	r3, #0
 810e7a6:	ed8d 7b00 	vstr	d7, [sp]
 810e7aa:	da03      	bge.n	810e7b4 <_dtoa_r+0x46c>
 810e7ac:	9b07      	ldr	r3, [sp, #28]
 810e7ae:	2b00      	cmp	r3, #0
 810e7b0:	f340 8101 	ble.w	810e9b6 <_dtoa_r+0x66e>
 810e7b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 810e7b8:	4656      	mov	r6, sl
 810e7ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 810e7be:	4620      	mov	r0, r4
 810e7c0:	4629      	mov	r1, r5
 810e7c2:	f7f2 f8cb 	bl	810095c <__aeabi_ddiv>
 810e7c6:	f7f2 fa4f 	bl	8100c68 <__aeabi_d2iz>
 810e7ca:	4680      	mov	r8, r0
 810e7cc:	f7f1 ff32 	bl	8100634 <__aeabi_i2d>
 810e7d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 810e7d4:	f7f1 ff98 	bl	8100708 <__aeabi_dmul>
 810e7d8:	4602      	mov	r2, r0
 810e7da:	460b      	mov	r3, r1
 810e7dc:	4620      	mov	r0, r4
 810e7de:	4629      	mov	r1, r5
 810e7e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 810e7e4:	f7f1 fdd8 	bl	8100398 <__aeabi_dsub>
 810e7e8:	f806 4b01 	strb.w	r4, [r6], #1
 810e7ec:	9d07      	ldr	r5, [sp, #28]
 810e7ee:	eba6 040a 	sub.w	r4, r6, sl
 810e7f2:	42a5      	cmp	r5, r4
 810e7f4:	4602      	mov	r2, r0
 810e7f6:	460b      	mov	r3, r1
 810e7f8:	f040 8117 	bne.w	810ea2a <_dtoa_r+0x6e2>
 810e7fc:	f7f1 fdce 	bl	810039c <__adddf3>
 810e800:	e9dd 2300 	ldrd	r2, r3, [sp]
 810e804:	4604      	mov	r4, r0
 810e806:	460d      	mov	r5, r1
 810e808:	f7f2 fa0e 	bl	8100c28 <__aeabi_dcmpgt>
 810e80c:	2800      	cmp	r0, #0
 810e80e:	f040 80f9 	bne.w	810ea04 <_dtoa_r+0x6bc>
 810e812:	e9dd 2300 	ldrd	r2, r3, [sp]
 810e816:	4620      	mov	r0, r4
 810e818:	4629      	mov	r1, r5
 810e81a:	f7f2 f9dd 	bl	8100bd8 <__aeabi_dcmpeq>
 810e81e:	b118      	cbz	r0, 810e828 <_dtoa_r+0x4e0>
 810e820:	f018 0f01 	tst.w	r8, #1
 810e824:	f040 80ee 	bne.w	810ea04 <_dtoa_r+0x6bc>
 810e828:	4649      	mov	r1, r9
 810e82a:	4658      	mov	r0, fp
 810e82c:	f000 fc90 	bl	810f150 <_Bfree>
 810e830:	2300      	movs	r3, #0
 810e832:	7033      	strb	r3, [r6, #0]
 810e834:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810e836:	3701      	adds	r7, #1
 810e838:	601f      	str	r7, [r3, #0]
 810e83a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810e83c:	2b00      	cmp	r3, #0
 810e83e:	f000 831d 	beq.w	810ee7c <_dtoa_r+0xb34>
 810e842:	601e      	str	r6, [r3, #0]
 810e844:	e31a      	b.n	810ee7c <_dtoa_r+0xb34>
 810e846:	07e2      	lsls	r2, r4, #31
 810e848:	d505      	bpl.n	810e856 <_dtoa_r+0x50e>
 810e84a:	e9d5 2300 	ldrd	r2, r3, [r5]
 810e84e:	f7f1 ff5b 	bl	8100708 <__aeabi_dmul>
 810e852:	3601      	adds	r6, #1
 810e854:	2301      	movs	r3, #1
 810e856:	1064      	asrs	r4, r4, #1
 810e858:	3508      	adds	r5, #8
 810e85a:	e73f      	b.n	810e6dc <_dtoa_r+0x394>
 810e85c:	2602      	movs	r6, #2
 810e85e:	e742      	b.n	810e6e6 <_dtoa_r+0x39e>
 810e860:	9c07      	ldr	r4, [sp, #28]
 810e862:	9704      	str	r7, [sp, #16]
 810e864:	e761      	b.n	810e72a <_dtoa_r+0x3e2>
 810e866:	4b27      	ldr	r3, [pc, #156]	@ (810e904 <_dtoa_r+0x5bc>)
 810e868:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810e86a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810e86e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810e872:	4454      	add	r4, sl
 810e874:	2900      	cmp	r1, #0
 810e876:	d053      	beq.n	810e920 <_dtoa_r+0x5d8>
 810e878:	4928      	ldr	r1, [pc, #160]	@ (810e91c <_dtoa_r+0x5d4>)
 810e87a:	2000      	movs	r0, #0
 810e87c:	f7f2 f86e 	bl	810095c <__aeabi_ddiv>
 810e880:	4633      	mov	r3, r6
 810e882:	462a      	mov	r2, r5
 810e884:	f7f1 fd88 	bl	8100398 <__aeabi_dsub>
 810e888:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810e88c:	4656      	mov	r6, sl
 810e88e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e892:	f7f2 f9e9 	bl	8100c68 <__aeabi_d2iz>
 810e896:	4605      	mov	r5, r0
 810e898:	f7f1 fecc 	bl	8100634 <__aeabi_i2d>
 810e89c:	4602      	mov	r2, r0
 810e89e:	460b      	mov	r3, r1
 810e8a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e8a4:	f7f1 fd78 	bl	8100398 <__aeabi_dsub>
 810e8a8:	3530      	adds	r5, #48	@ 0x30
 810e8aa:	4602      	mov	r2, r0
 810e8ac:	460b      	mov	r3, r1
 810e8ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810e8b2:	f806 5b01 	strb.w	r5, [r6], #1
 810e8b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810e8ba:	f7f2 f997 	bl	8100bec <__aeabi_dcmplt>
 810e8be:	2800      	cmp	r0, #0
 810e8c0:	d171      	bne.n	810e9a6 <_dtoa_r+0x65e>
 810e8c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810e8c6:	4911      	ldr	r1, [pc, #68]	@ (810e90c <_dtoa_r+0x5c4>)
 810e8c8:	2000      	movs	r0, #0
 810e8ca:	f7f1 fd65 	bl	8100398 <__aeabi_dsub>
 810e8ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810e8d2:	f7f2 f98b 	bl	8100bec <__aeabi_dcmplt>
 810e8d6:	2800      	cmp	r0, #0
 810e8d8:	f040 8095 	bne.w	810ea06 <_dtoa_r+0x6be>
 810e8dc:	42a6      	cmp	r6, r4
 810e8de:	f43f af50 	beq.w	810e782 <_dtoa_r+0x43a>
 810e8e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810e8e6:	4b0a      	ldr	r3, [pc, #40]	@ (810e910 <_dtoa_r+0x5c8>)
 810e8e8:	2200      	movs	r2, #0
 810e8ea:	f7f1 ff0d 	bl	8100708 <__aeabi_dmul>
 810e8ee:	4b08      	ldr	r3, [pc, #32]	@ (810e910 <_dtoa_r+0x5c8>)
 810e8f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810e8f4:	2200      	movs	r2, #0
 810e8f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e8fa:	f7f1 ff05 	bl	8100708 <__aeabi_dmul>
 810e8fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810e902:	e7c4      	b.n	810e88e <_dtoa_r+0x546>
 810e904:	081119c0 	.word	0x081119c0
 810e908:	08111998 	.word	0x08111998
 810e90c:	3ff00000 	.word	0x3ff00000
 810e910:	40240000 	.word	0x40240000
 810e914:	401c0000 	.word	0x401c0000
 810e918:	40140000 	.word	0x40140000
 810e91c:	3fe00000 	.word	0x3fe00000
 810e920:	4631      	mov	r1, r6
 810e922:	4628      	mov	r0, r5
 810e924:	f7f1 fef0 	bl	8100708 <__aeabi_dmul>
 810e928:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810e92c:	9415      	str	r4, [sp, #84]	@ 0x54
 810e92e:	4656      	mov	r6, sl
 810e930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e934:	f7f2 f998 	bl	8100c68 <__aeabi_d2iz>
 810e938:	4605      	mov	r5, r0
 810e93a:	f7f1 fe7b 	bl	8100634 <__aeabi_i2d>
 810e93e:	4602      	mov	r2, r0
 810e940:	460b      	mov	r3, r1
 810e942:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e946:	f7f1 fd27 	bl	8100398 <__aeabi_dsub>
 810e94a:	3530      	adds	r5, #48	@ 0x30
 810e94c:	f806 5b01 	strb.w	r5, [r6], #1
 810e950:	4602      	mov	r2, r0
 810e952:	460b      	mov	r3, r1
 810e954:	42a6      	cmp	r6, r4
 810e956:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810e95a:	f04f 0200 	mov.w	r2, #0
 810e95e:	d124      	bne.n	810e9aa <_dtoa_r+0x662>
 810e960:	4bac      	ldr	r3, [pc, #688]	@ (810ec14 <_dtoa_r+0x8cc>)
 810e962:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810e966:	f7f1 fd19 	bl	810039c <__adddf3>
 810e96a:	4602      	mov	r2, r0
 810e96c:	460b      	mov	r3, r1
 810e96e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e972:	f7f2 f959 	bl	8100c28 <__aeabi_dcmpgt>
 810e976:	2800      	cmp	r0, #0
 810e978:	d145      	bne.n	810ea06 <_dtoa_r+0x6be>
 810e97a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810e97e:	49a5      	ldr	r1, [pc, #660]	@ (810ec14 <_dtoa_r+0x8cc>)
 810e980:	2000      	movs	r0, #0
 810e982:	f7f1 fd09 	bl	8100398 <__aeabi_dsub>
 810e986:	4602      	mov	r2, r0
 810e988:	460b      	mov	r3, r1
 810e98a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e98e:	f7f2 f92d 	bl	8100bec <__aeabi_dcmplt>
 810e992:	2800      	cmp	r0, #0
 810e994:	f43f aef5 	beq.w	810e782 <_dtoa_r+0x43a>
 810e998:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 810e99a:	1e73      	subs	r3, r6, #1
 810e99c:	9315      	str	r3, [sp, #84]	@ 0x54
 810e99e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810e9a2:	2b30      	cmp	r3, #48	@ 0x30
 810e9a4:	d0f8      	beq.n	810e998 <_dtoa_r+0x650>
 810e9a6:	9f04      	ldr	r7, [sp, #16]
 810e9a8:	e73e      	b.n	810e828 <_dtoa_r+0x4e0>
 810e9aa:	4b9b      	ldr	r3, [pc, #620]	@ (810ec18 <_dtoa_r+0x8d0>)
 810e9ac:	f7f1 feac 	bl	8100708 <__aeabi_dmul>
 810e9b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810e9b4:	e7bc      	b.n	810e930 <_dtoa_r+0x5e8>
 810e9b6:	d10c      	bne.n	810e9d2 <_dtoa_r+0x68a>
 810e9b8:	4b98      	ldr	r3, [pc, #608]	@ (810ec1c <_dtoa_r+0x8d4>)
 810e9ba:	2200      	movs	r2, #0
 810e9bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 810e9c0:	f7f1 fea2 	bl	8100708 <__aeabi_dmul>
 810e9c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810e9c8:	f7f2 f924 	bl	8100c14 <__aeabi_dcmpge>
 810e9cc:	2800      	cmp	r0, #0
 810e9ce:	f000 8157 	beq.w	810ec80 <_dtoa_r+0x938>
 810e9d2:	2400      	movs	r4, #0
 810e9d4:	4625      	mov	r5, r4
 810e9d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810e9d8:	43db      	mvns	r3, r3
 810e9da:	9304      	str	r3, [sp, #16]
 810e9dc:	4656      	mov	r6, sl
 810e9de:	2700      	movs	r7, #0
 810e9e0:	4621      	mov	r1, r4
 810e9e2:	4658      	mov	r0, fp
 810e9e4:	f000 fbb4 	bl	810f150 <_Bfree>
 810e9e8:	2d00      	cmp	r5, #0
 810e9ea:	d0dc      	beq.n	810e9a6 <_dtoa_r+0x65e>
 810e9ec:	b12f      	cbz	r7, 810e9fa <_dtoa_r+0x6b2>
 810e9ee:	42af      	cmp	r7, r5
 810e9f0:	d003      	beq.n	810e9fa <_dtoa_r+0x6b2>
 810e9f2:	4639      	mov	r1, r7
 810e9f4:	4658      	mov	r0, fp
 810e9f6:	f000 fbab 	bl	810f150 <_Bfree>
 810e9fa:	4629      	mov	r1, r5
 810e9fc:	4658      	mov	r0, fp
 810e9fe:	f000 fba7 	bl	810f150 <_Bfree>
 810ea02:	e7d0      	b.n	810e9a6 <_dtoa_r+0x65e>
 810ea04:	9704      	str	r7, [sp, #16]
 810ea06:	4633      	mov	r3, r6
 810ea08:	461e      	mov	r6, r3
 810ea0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810ea0e:	2a39      	cmp	r2, #57	@ 0x39
 810ea10:	d107      	bne.n	810ea22 <_dtoa_r+0x6da>
 810ea12:	459a      	cmp	sl, r3
 810ea14:	d1f8      	bne.n	810ea08 <_dtoa_r+0x6c0>
 810ea16:	9a04      	ldr	r2, [sp, #16]
 810ea18:	3201      	adds	r2, #1
 810ea1a:	9204      	str	r2, [sp, #16]
 810ea1c:	2230      	movs	r2, #48	@ 0x30
 810ea1e:	f88a 2000 	strb.w	r2, [sl]
 810ea22:	781a      	ldrb	r2, [r3, #0]
 810ea24:	3201      	adds	r2, #1
 810ea26:	701a      	strb	r2, [r3, #0]
 810ea28:	e7bd      	b.n	810e9a6 <_dtoa_r+0x65e>
 810ea2a:	4b7b      	ldr	r3, [pc, #492]	@ (810ec18 <_dtoa_r+0x8d0>)
 810ea2c:	2200      	movs	r2, #0
 810ea2e:	f7f1 fe6b 	bl	8100708 <__aeabi_dmul>
 810ea32:	2200      	movs	r2, #0
 810ea34:	2300      	movs	r3, #0
 810ea36:	4604      	mov	r4, r0
 810ea38:	460d      	mov	r5, r1
 810ea3a:	f7f2 f8cd 	bl	8100bd8 <__aeabi_dcmpeq>
 810ea3e:	2800      	cmp	r0, #0
 810ea40:	f43f aebb 	beq.w	810e7ba <_dtoa_r+0x472>
 810ea44:	e6f0      	b.n	810e828 <_dtoa_r+0x4e0>
 810ea46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 810ea48:	2a00      	cmp	r2, #0
 810ea4a:	f000 80db 	beq.w	810ec04 <_dtoa_r+0x8bc>
 810ea4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810ea50:	2a01      	cmp	r2, #1
 810ea52:	f300 80bf 	bgt.w	810ebd4 <_dtoa_r+0x88c>
 810ea56:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 810ea58:	2a00      	cmp	r2, #0
 810ea5a:	f000 80b7 	beq.w	810ebcc <_dtoa_r+0x884>
 810ea5e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 810ea62:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810ea64:	4646      	mov	r6, r8
 810ea66:	9a08      	ldr	r2, [sp, #32]
 810ea68:	2101      	movs	r1, #1
 810ea6a:	441a      	add	r2, r3
 810ea6c:	4658      	mov	r0, fp
 810ea6e:	4498      	add	r8, r3
 810ea70:	9208      	str	r2, [sp, #32]
 810ea72:	f000 fc6b 	bl	810f34c <__i2b>
 810ea76:	4605      	mov	r5, r0
 810ea78:	b15e      	cbz	r6, 810ea92 <_dtoa_r+0x74a>
 810ea7a:	9b08      	ldr	r3, [sp, #32]
 810ea7c:	2b00      	cmp	r3, #0
 810ea7e:	dd08      	ble.n	810ea92 <_dtoa_r+0x74a>
 810ea80:	42b3      	cmp	r3, r6
 810ea82:	9a08      	ldr	r2, [sp, #32]
 810ea84:	bfa8      	it	ge
 810ea86:	4633      	movge	r3, r6
 810ea88:	eba8 0803 	sub.w	r8, r8, r3
 810ea8c:	1af6      	subs	r6, r6, r3
 810ea8e:	1ad3      	subs	r3, r2, r3
 810ea90:	9308      	str	r3, [sp, #32]
 810ea92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810ea94:	b1f3      	cbz	r3, 810ead4 <_dtoa_r+0x78c>
 810ea96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810ea98:	2b00      	cmp	r3, #0
 810ea9a:	f000 80b7 	beq.w	810ec0c <_dtoa_r+0x8c4>
 810ea9e:	b18c      	cbz	r4, 810eac4 <_dtoa_r+0x77c>
 810eaa0:	4629      	mov	r1, r5
 810eaa2:	4622      	mov	r2, r4
 810eaa4:	4658      	mov	r0, fp
 810eaa6:	f000 fd11 	bl	810f4cc <__pow5mult>
 810eaaa:	464a      	mov	r2, r9
 810eaac:	4601      	mov	r1, r0
 810eaae:	4605      	mov	r5, r0
 810eab0:	4658      	mov	r0, fp
 810eab2:	f000 fc61 	bl	810f378 <__multiply>
 810eab6:	4649      	mov	r1, r9
 810eab8:	9004      	str	r0, [sp, #16]
 810eaba:	4658      	mov	r0, fp
 810eabc:	f000 fb48 	bl	810f150 <_Bfree>
 810eac0:	9b04      	ldr	r3, [sp, #16]
 810eac2:	4699      	mov	r9, r3
 810eac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810eac6:	1b1a      	subs	r2, r3, r4
 810eac8:	d004      	beq.n	810ead4 <_dtoa_r+0x78c>
 810eaca:	4649      	mov	r1, r9
 810eacc:	4658      	mov	r0, fp
 810eace:	f000 fcfd 	bl	810f4cc <__pow5mult>
 810ead2:	4681      	mov	r9, r0
 810ead4:	2101      	movs	r1, #1
 810ead6:	4658      	mov	r0, fp
 810ead8:	f000 fc38 	bl	810f34c <__i2b>
 810eadc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810eade:	4604      	mov	r4, r0
 810eae0:	2b00      	cmp	r3, #0
 810eae2:	f000 81cf 	beq.w	810ee84 <_dtoa_r+0xb3c>
 810eae6:	461a      	mov	r2, r3
 810eae8:	4601      	mov	r1, r0
 810eaea:	4658      	mov	r0, fp
 810eaec:	f000 fcee 	bl	810f4cc <__pow5mult>
 810eaf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810eaf2:	2b01      	cmp	r3, #1
 810eaf4:	4604      	mov	r4, r0
 810eaf6:	f300 8095 	bgt.w	810ec24 <_dtoa_r+0x8dc>
 810eafa:	9b02      	ldr	r3, [sp, #8]
 810eafc:	2b00      	cmp	r3, #0
 810eafe:	f040 8087 	bne.w	810ec10 <_dtoa_r+0x8c8>
 810eb02:	9b03      	ldr	r3, [sp, #12]
 810eb04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810eb08:	2b00      	cmp	r3, #0
 810eb0a:	f040 8089 	bne.w	810ec20 <_dtoa_r+0x8d8>
 810eb0e:	9b03      	ldr	r3, [sp, #12]
 810eb10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810eb14:	0d1b      	lsrs	r3, r3, #20
 810eb16:	051b      	lsls	r3, r3, #20
 810eb18:	b12b      	cbz	r3, 810eb26 <_dtoa_r+0x7de>
 810eb1a:	9b08      	ldr	r3, [sp, #32]
 810eb1c:	3301      	adds	r3, #1
 810eb1e:	9308      	str	r3, [sp, #32]
 810eb20:	f108 0801 	add.w	r8, r8, #1
 810eb24:	2301      	movs	r3, #1
 810eb26:	930a      	str	r3, [sp, #40]	@ 0x28
 810eb28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810eb2a:	2b00      	cmp	r3, #0
 810eb2c:	f000 81b0 	beq.w	810ee90 <_dtoa_r+0xb48>
 810eb30:	6923      	ldr	r3, [r4, #16]
 810eb32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810eb36:	6918      	ldr	r0, [r3, #16]
 810eb38:	f000 fbbc 	bl	810f2b4 <__hi0bits>
 810eb3c:	f1c0 0020 	rsb	r0, r0, #32
 810eb40:	9b08      	ldr	r3, [sp, #32]
 810eb42:	4418      	add	r0, r3
 810eb44:	f010 001f 	ands.w	r0, r0, #31
 810eb48:	d077      	beq.n	810ec3a <_dtoa_r+0x8f2>
 810eb4a:	f1c0 0320 	rsb	r3, r0, #32
 810eb4e:	2b04      	cmp	r3, #4
 810eb50:	dd6b      	ble.n	810ec2a <_dtoa_r+0x8e2>
 810eb52:	9b08      	ldr	r3, [sp, #32]
 810eb54:	f1c0 001c 	rsb	r0, r0, #28
 810eb58:	4403      	add	r3, r0
 810eb5a:	4480      	add	r8, r0
 810eb5c:	4406      	add	r6, r0
 810eb5e:	9308      	str	r3, [sp, #32]
 810eb60:	f1b8 0f00 	cmp.w	r8, #0
 810eb64:	dd05      	ble.n	810eb72 <_dtoa_r+0x82a>
 810eb66:	4649      	mov	r1, r9
 810eb68:	4642      	mov	r2, r8
 810eb6a:	4658      	mov	r0, fp
 810eb6c:	f000 fd08 	bl	810f580 <__lshift>
 810eb70:	4681      	mov	r9, r0
 810eb72:	9b08      	ldr	r3, [sp, #32]
 810eb74:	2b00      	cmp	r3, #0
 810eb76:	dd05      	ble.n	810eb84 <_dtoa_r+0x83c>
 810eb78:	4621      	mov	r1, r4
 810eb7a:	461a      	mov	r2, r3
 810eb7c:	4658      	mov	r0, fp
 810eb7e:	f000 fcff 	bl	810f580 <__lshift>
 810eb82:	4604      	mov	r4, r0
 810eb84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810eb86:	2b00      	cmp	r3, #0
 810eb88:	d059      	beq.n	810ec3e <_dtoa_r+0x8f6>
 810eb8a:	4621      	mov	r1, r4
 810eb8c:	4648      	mov	r0, r9
 810eb8e:	f000 fd63 	bl	810f658 <__mcmp>
 810eb92:	2800      	cmp	r0, #0
 810eb94:	da53      	bge.n	810ec3e <_dtoa_r+0x8f6>
 810eb96:	1e7b      	subs	r3, r7, #1
 810eb98:	9304      	str	r3, [sp, #16]
 810eb9a:	4649      	mov	r1, r9
 810eb9c:	2300      	movs	r3, #0
 810eb9e:	220a      	movs	r2, #10
 810eba0:	4658      	mov	r0, fp
 810eba2:	f000 faf7 	bl	810f194 <__multadd>
 810eba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810eba8:	4681      	mov	r9, r0
 810ebaa:	2b00      	cmp	r3, #0
 810ebac:	f000 8172 	beq.w	810ee94 <_dtoa_r+0xb4c>
 810ebb0:	2300      	movs	r3, #0
 810ebb2:	4629      	mov	r1, r5
 810ebb4:	220a      	movs	r2, #10
 810ebb6:	4658      	mov	r0, fp
 810ebb8:	f000 faec 	bl	810f194 <__multadd>
 810ebbc:	9b00      	ldr	r3, [sp, #0]
 810ebbe:	2b00      	cmp	r3, #0
 810ebc0:	4605      	mov	r5, r0
 810ebc2:	dc67      	bgt.n	810ec94 <_dtoa_r+0x94c>
 810ebc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ebc6:	2b02      	cmp	r3, #2
 810ebc8:	dc41      	bgt.n	810ec4e <_dtoa_r+0x906>
 810ebca:	e063      	b.n	810ec94 <_dtoa_r+0x94c>
 810ebcc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810ebce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 810ebd2:	e746      	b.n	810ea62 <_dtoa_r+0x71a>
 810ebd4:	9b07      	ldr	r3, [sp, #28]
 810ebd6:	1e5c      	subs	r4, r3, #1
 810ebd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810ebda:	42a3      	cmp	r3, r4
 810ebdc:	bfbf      	itttt	lt
 810ebde:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 810ebe0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 810ebe2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 810ebe4:	1ae3      	sublt	r3, r4, r3
 810ebe6:	bfb4      	ite	lt
 810ebe8:	18d2      	addlt	r2, r2, r3
 810ebea:	1b1c      	subge	r4, r3, r4
 810ebec:	9b07      	ldr	r3, [sp, #28]
 810ebee:	bfbc      	itt	lt
 810ebf0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 810ebf2:	2400      	movlt	r4, #0
 810ebf4:	2b00      	cmp	r3, #0
 810ebf6:	bfb5      	itete	lt
 810ebf8:	eba8 0603 	sublt.w	r6, r8, r3
 810ebfc:	9b07      	ldrge	r3, [sp, #28]
 810ebfe:	2300      	movlt	r3, #0
 810ec00:	4646      	movge	r6, r8
 810ec02:	e730      	b.n	810ea66 <_dtoa_r+0x71e>
 810ec04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810ec06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 810ec08:	4646      	mov	r6, r8
 810ec0a:	e735      	b.n	810ea78 <_dtoa_r+0x730>
 810ec0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810ec0e:	e75c      	b.n	810eaca <_dtoa_r+0x782>
 810ec10:	2300      	movs	r3, #0
 810ec12:	e788      	b.n	810eb26 <_dtoa_r+0x7de>
 810ec14:	3fe00000 	.word	0x3fe00000
 810ec18:	40240000 	.word	0x40240000
 810ec1c:	40140000 	.word	0x40140000
 810ec20:	9b02      	ldr	r3, [sp, #8]
 810ec22:	e780      	b.n	810eb26 <_dtoa_r+0x7de>
 810ec24:	2300      	movs	r3, #0
 810ec26:	930a      	str	r3, [sp, #40]	@ 0x28
 810ec28:	e782      	b.n	810eb30 <_dtoa_r+0x7e8>
 810ec2a:	d099      	beq.n	810eb60 <_dtoa_r+0x818>
 810ec2c:	9a08      	ldr	r2, [sp, #32]
 810ec2e:	331c      	adds	r3, #28
 810ec30:	441a      	add	r2, r3
 810ec32:	4498      	add	r8, r3
 810ec34:	441e      	add	r6, r3
 810ec36:	9208      	str	r2, [sp, #32]
 810ec38:	e792      	b.n	810eb60 <_dtoa_r+0x818>
 810ec3a:	4603      	mov	r3, r0
 810ec3c:	e7f6      	b.n	810ec2c <_dtoa_r+0x8e4>
 810ec3e:	9b07      	ldr	r3, [sp, #28]
 810ec40:	9704      	str	r7, [sp, #16]
 810ec42:	2b00      	cmp	r3, #0
 810ec44:	dc20      	bgt.n	810ec88 <_dtoa_r+0x940>
 810ec46:	9300      	str	r3, [sp, #0]
 810ec48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ec4a:	2b02      	cmp	r3, #2
 810ec4c:	dd1e      	ble.n	810ec8c <_dtoa_r+0x944>
 810ec4e:	9b00      	ldr	r3, [sp, #0]
 810ec50:	2b00      	cmp	r3, #0
 810ec52:	f47f aec0 	bne.w	810e9d6 <_dtoa_r+0x68e>
 810ec56:	4621      	mov	r1, r4
 810ec58:	2205      	movs	r2, #5
 810ec5a:	4658      	mov	r0, fp
 810ec5c:	f000 fa9a 	bl	810f194 <__multadd>
 810ec60:	4601      	mov	r1, r0
 810ec62:	4604      	mov	r4, r0
 810ec64:	4648      	mov	r0, r9
 810ec66:	f000 fcf7 	bl	810f658 <__mcmp>
 810ec6a:	2800      	cmp	r0, #0
 810ec6c:	f77f aeb3 	ble.w	810e9d6 <_dtoa_r+0x68e>
 810ec70:	4656      	mov	r6, sl
 810ec72:	2331      	movs	r3, #49	@ 0x31
 810ec74:	f806 3b01 	strb.w	r3, [r6], #1
 810ec78:	9b04      	ldr	r3, [sp, #16]
 810ec7a:	3301      	adds	r3, #1
 810ec7c:	9304      	str	r3, [sp, #16]
 810ec7e:	e6ae      	b.n	810e9de <_dtoa_r+0x696>
 810ec80:	9c07      	ldr	r4, [sp, #28]
 810ec82:	9704      	str	r7, [sp, #16]
 810ec84:	4625      	mov	r5, r4
 810ec86:	e7f3      	b.n	810ec70 <_dtoa_r+0x928>
 810ec88:	9b07      	ldr	r3, [sp, #28]
 810ec8a:	9300      	str	r3, [sp, #0]
 810ec8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810ec8e:	2b00      	cmp	r3, #0
 810ec90:	f000 8104 	beq.w	810ee9c <_dtoa_r+0xb54>
 810ec94:	2e00      	cmp	r6, #0
 810ec96:	dd05      	ble.n	810eca4 <_dtoa_r+0x95c>
 810ec98:	4629      	mov	r1, r5
 810ec9a:	4632      	mov	r2, r6
 810ec9c:	4658      	mov	r0, fp
 810ec9e:	f000 fc6f 	bl	810f580 <__lshift>
 810eca2:	4605      	mov	r5, r0
 810eca4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810eca6:	2b00      	cmp	r3, #0
 810eca8:	d05a      	beq.n	810ed60 <_dtoa_r+0xa18>
 810ecaa:	6869      	ldr	r1, [r5, #4]
 810ecac:	4658      	mov	r0, fp
 810ecae:	f000 fa0f 	bl	810f0d0 <_Balloc>
 810ecb2:	4606      	mov	r6, r0
 810ecb4:	b928      	cbnz	r0, 810ecc2 <_dtoa_r+0x97a>
 810ecb6:	4b84      	ldr	r3, [pc, #528]	@ (810eec8 <_dtoa_r+0xb80>)
 810ecb8:	4602      	mov	r2, r0
 810ecba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 810ecbe:	f7ff bb5a 	b.w	810e376 <_dtoa_r+0x2e>
 810ecc2:	692a      	ldr	r2, [r5, #16]
 810ecc4:	3202      	adds	r2, #2
 810ecc6:	0092      	lsls	r2, r2, #2
 810ecc8:	f105 010c 	add.w	r1, r5, #12
 810eccc:	300c      	adds	r0, #12
 810ecce:	f7ff fa7e 	bl	810e1ce <memcpy>
 810ecd2:	2201      	movs	r2, #1
 810ecd4:	4631      	mov	r1, r6
 810ecd6:	4658      	mov	r0, fp
 810ecd8:	f000 fc52 	bl	810f580 <__lshift>
 810ecdc:	f10a 0301 	add.w	r3, sl, #1
 810ece0:	9307      	str	r3, [sp, #28]
 810ece2:	9b00      	ldr	r3, [sp, #0]
 810ece4:	4453      	add	r3, sl
 810ece6:	930b      	str	r3, [sp, #44]	@ 0x2c
 810ece8:	9b02      	ldr	r3, [sp, #8]
 810ecea:	f003 0301 	and.w	r3, r3, #1
 810ecee:	462f      	mov	r7, r5
 810ecf0:	930a      	str	r3, [sp, #40]	@ 0x28
 810ecf2:	4605      	mov	r5, r0
 810ecf4:	9b07      	ldr	r3, [sp, #28]
 810ecf6:	4621      	mov	r1, r4
 810ecf8:	3b01      	subs	r3, #1
 810ecfa:	4648      	mov	r0, r9
 810ecfc:	9300      	str	r3, [sp, #0]
 810ecfe:	f7ff fa99 	bl	810e234 <quorem>
 810ed02:	4639      	mov	r1, r7
 810ed04:	9002      	str	r0, [sp, #8]
 810ed06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810ed0a:	4648      	mov	r0, r9
 810ed0c:	f000 fca4 	bl	810f658 <__mcmp>
 810ed10:	462a      	mov	r2, r5
 810ed12:	9008      	str	r0, [sp, #32]
 810ed14:	4621      	mov	r1, r4
 810ed16:	4658      	mov	r0, fp
 810ed18:	f000 fcba 	bl	810f690 <__mdiff>
 810ed1c:	68c2      	ldr	r2, [r0, #12]
 810ed1e:	4606      	mov	r6, r0
 810ed20:	bb02      	cbnz	r2, 810ed64 <_dtoa_r+0xa1c>
 810ed22:	4601      	mov	r1, r0
 810ed24:	4648      	mov	r0, r9
 810ed26:	f000 fc97 	bl	810f658 <__mcmp>
 810ed2a:	4602      	mov	r2, r0
 810ed2c:	4631      	mov	r1, r6
 810ed2e:	4658      	mov	r0, fp
 810ed30:	920e      	str	r2, [sp, #56]	@ 0x38
 810ed32:	f000 fa0d 	bl	810f150 <_Bfree>
 810ed36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ed38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810ed3a:	9e07      	ldr	r6, [sp, #28]
 810ed3c:	ea43 0102 	orr.w	r1, r3, r2
 810ed40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810ed42:	4319      	orrs	r1, r3
 810ed44:	d110      	bne.n	810ed68 <_dtoa_r+0xa20>
 810ed46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810ed4a:	d029      	beq.n	810eda0 <_dtoa_r+0xa58>
 810ed4c:	9b08      	ldr	r3, [sp, #32]
 810ed4e:	2b00      	cmp	r3, #0
 810ed50:	dd02      	ble.n	810ed58 <_dtoa_r+0xa10>
 810ed52:	9b02      	ldr	r3, [sp, #8]
 810ed54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 810ed58:	9b00      	ldr	r3, [sp, #0]
 810ed5a:	f883 8000 	strb.w	r8, [r3]
 810ed5e:	e63f      	b.n	810e9e0 <_dtoa_r+0x698>
 810ed60:	4628      	mov	r0, r5
 810ed62:	e7bb      	b.n	810ecdc <_dtoa_r+0x994>
 810ed64:	2201      	movs	r2, #1
 810ed66:	e7e1      	b.n	810ed2c <_dtoa_r+0x9e4>
 810ed68:	9b08      	ldr	r3, [sp, #32]
 810ed6a:	2b00      	cmp	r3, #0
 810ed6c:	db04      	blt.n	810ed78 <_dtoa_r+0xa30>
 810ed6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810ed70:	430b      	orrs	r3, r1
 810ed72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810ed74:	430b      	orrs	r3, r1
 810ed76:	d120      	bne.n	810edba <_dtoa_r+0xa72>
 810ed78:	2a00      	cmp	r2, #0
 810ed7a:	dded      	ble.n	810ed58 <_dtoa_r+0xa10>
 810ed7c:	4649      	mov	r1, r9
 810ed7e:	2201      	movs	r2, #1
 810ed80:	4658      	mov	r0, fp
 810ed82:	f000 fbfd 	bl	810f580 <__lshift>
 810ed86:	4621      	mov	r1, r4
 810ed88:	4681      	mov	r9, r0
 810ed8a:	f000 fc65 	bl	810f658 <__mcmp>
 810ed8e:	2800      	cmp	r0, #0
 810ed90:	dc03      	bgt.n	810ed9a <_dtoa_r+0xa52>
 810ed92:	d1e1      	bne.n	810ed58 <_dtoa_r+0xa10>
 810ed94:	f018 0f01 	tst.w	r8, #1
 810ed98:	d0de      	beq.n	810ed58 <_dtoa_r+0xa10>
 810ed9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810ed9e:	d1d8      	bne.n	810ed52 <_dtoa_r+0xa0a>
 810eda0:	9a00      	ldr	r2, [sp, #0]
 810eda2:	2339      	movs	r3, #57	@ 0x39
 810eda4:	7013      	strb	r3, [r2, #0]
 810eda6:	4633      	mov	r3, r6
 810eda8:	461e      	mov	r6, r3
 810edaa:	3b01      	subs	r3, #1
 810edac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 810edb0:	2a39      	cmp	r2, #57	@ 0x39
 810edb2:	d052      	beq.n	810ee5a <_dtoa_r+0xb12>
 810edb4:	3201      	adds	r2, #1
 810edb6:	701a      	strb	r2, [r3, #0]
 810edb8:	e612      	b.n	810e9e0 <_dtoa_r+0x698>
 810edba:	2a00      	cmp	r2, #0
 810edbc:	dd07      	ble.n	810edce <_dtoa_r+0xa86>
 810edbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810edc2:	d0ed      	beq.n	810eda0 <_dtoa_r+0xa58>
 810edc4:	9a00      	ldr	r2, [sp, #0]
 810edc6:	f108 0301 	add.w	r3, r8, #1
 810edca:	7013      	strb	r3, [r2, #0]
 810edcc:	e608      	b.n	810e9e0 <_dtoa_r+0x698>
 810edce:	9b07      	ldr	r3, [sp, #28]
 810edd0:	9a07      	ldr	r2, [sp, #28]
 810edd2:	f803 8c01 	strb.w	r8, [r3, #-1]
 810edd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810edd8:	4293      	cmp	r3, r2
 810edda:	d028      	beq.n	810ee2e <_dtoa_r+0xae6>
 810eddc:	4649      	mov	r1, r9
 810edde:	2300      	movs	r3, #0
 810ede0:	220a      	movs	r2, #10
 810ede2:	4658      	mov	r0, fp
 810ede4:	f000 f9d6 	bl	810f194 <__multadd>
 810ede8:	42af      	cmp	r7, r5
 810edea:	4681      	mov	r9, r0
 810edec:	f04f 0300 	mov.w	r3, #0
 810edf0:	f04f 020a 	mov.w	r2, #10
 810edf4:	4639      	mov	r1, r7
 810edf6:	4658      	mov	r0, fp
 810edf8:	d107      	bne.n	810ee0a <_dtoa_r+0xac2>
 810edfa:	f000 f9cb 	bl	810f194 <__multadd>
 810edfe:	4607      	mov	r7, r0
 810ee00:	4605      	mov	r5, r0
 810ee02:	9b07      	ldr	r3, [sp, #28]
 810ee04:	3301      	adds	r3, #1
 810ee06:	9307      	str	r3, [sp, #28]
 810ee08:	e774      	b.n	810ecf4 <_dtoa_r+0x9ac>
 810ee0a:	f000 f9c3 	bl	810f194 <__multadd>
 810ee0e:	4629      	mov	r1, r5
 810ee10:	4607      	mov	r7, r0
 810ee12:	2300      	movs	r3, #0
 810ee14:	220a      	movs	r2, #10
 810ee16:	4658      	mov	r0, fp
 810ee18:	f000 f9bc 	bl	810f194 <__multadd>
 810ee1c:	4605      	mov	r5, r0
 810ee1e:	e7f0      	b.n	810ee02 <_dtoa_r+0xaba>
 810ee20:	9b00      	ldr	r3, [sp, #0]
 810ee22:	2b00      	cmp	r3, #0
 810ee24:	bfcc      	ite	gt
 810ee26:	461e      	movgt	r6, r3
 810ee28:	2601      	movle	r6, #1
 810ee2a:	4456      	add	r6, sl
 810ee2c:	2700      	movs	r7, #0
 810ee2e:	4649      	mov	r1, r9
 810ee30:	2201      	movs	r2, #1
 810ee32:	4658      	mov	r0, fp
 810ee34:	f000 fba4 	bl	810f580 <__lshift>
 810ee38:	4621      	mov	r1, r4
 810ee3a:	4681      	mov	r9, r0
 810ee3c:	f000 fc0c 	bl	810f658 <__mcmp>
 810ee40:	2800      	cmp	r0, #0
 810ee42:	dcb0      	bgt.n	810eda6 <_dtoa_r+0xa5e>
 810ee44:	d102      	bne.n	810ee4c <_dtoa_r+0xb04>
 810ee46:	f018 0f01 	tst.w	r8, #1
 810ee4a:	d1ac      	bne.n	810eda6 <_dtoa_r+0xa5e>
 810ee4c:	4633      	mov	r3, r6
 810ee4e:	461e      	mov	r6, r3
 810ee50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810ee54:	2a30      	cmp	r2, #48	@ 0x30
 810ee56:	d0fa      	beq.n	810ee4e <_dtoa_r+0xb06>
 810ee58:	e5c2      	b.n	810e9e0 <_dtoa_r+0x698>
 810ee5a:	459a      	cmp	sl, r3
 810ee5c:	d1a4      	bne.n	810eda8 <_dtoa_r+0xa60>
 810ee5e:	9b04      	ldr	r3, [sp, #16]
 810ee60:	3301      	adds	r3, #1
 810ee62:	9304      	str	r3, [sp, #16]
 810ee64:	2331      	movs	r3, #49	@ 0x31
 810ee66:	f88a 3000 	strb.w	r3, [sl]
 810ee6a:	e5b9      	b.n	810e9e0 <_dtoa_r+0x698>
 810ee6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810ee6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 810eecc <_dtoa_r+0xb84>
 810ee72:	b11b      	cbz	r3, 810ee7c <_dtoa_r+0xb34>
 810ee74:	f10a 0308 	add.w	r3, sl, #8
 810ee78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 810ee7a:	6013      	str	r3, [r2, #0]
 810ee7c:	4650      	mov	r0, sl
 810ee7e:	b019      	add	sp, #100	@ 0x64
 810ee80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ee84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ee86:	2b01      	cmp	r3, #1
 810ee88:	f77f ae37 	ble.w	810eafa <_dtoa_r+0x7b2>
 810ee8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810ee8e:	930a      	str	r3, [sp, #40]	@ 0x28
 810ee90:	2001      	movs	r0, #1
 810ee92:	e655      	b.n	810eb40 <_dtoa_r+0x7f8>
 810ee94:	9b00      	ldr	r3, [sp, #0]
 810ee96:	2b00      	cmp	r3, #0
 810ee98:	f77f aed6 	ble.w	810ec48 <_dtoa_r+0x900>
 810ee9c:	4656      	mov	r6, sl
 810ee9e:	4621      	mov	r1, r4
 810eea0:	4648      	mov	r0, r9
 810eea2:	f7ff f9c7 	bl	810e234 <quorem>
 810eea6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810eeaa:	f806 8b01 	strb.w	r8, [r6], #1
 810eeae:	9b00      	ldr	r3, [sp, #0]
 810eeb0:	eba6 020a 	sub.w	r2, r6, sl
 810eeb4:	4293      	cmp	r3, r2
 810eeb6:	ddb3      	ble.n	810ee20 <_dtoa_r+0xad8>
 810eeb8:	4649      	mov	r1, r9
 810eeba:	2300      	movs	r3, #0
 810eebc:	220a      	movs	r2, #10
 810eebe:	4658      	mov	r0, fp
 810eec0:	f000 f968 	bl	810f194 <__multadd>
 810eec4:	4681      	mov	r9, r0
 810eec6:	e7ea      	b.n	810ee9e <_dtoa_r+0xb56>
 810eec8:	08111921 	.word	0x08111921
 810eecc:	081118bc 	.word	0x081118bc

0810eed0 <_free_r>:
 810eed0:	b538      	push	{r3, r4, r5, lr}
 810eed2:	4605      	mov	r5, r0
 810eed4:	2900      	cmp	r1, #0
 810eed6:	d041      	beq.n	810ef5c <_free_r+0x8c>
 810eed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810eedc:	1f0c      	subs	r4, r1, #4
 810eede:	2b00      	cmp	r3, #0
 810eee0:	bfb8      	it	lt
 810eee2:	18e4      	addlt	r4, r4, r3
 810eee4:	f000 f8e8 	bl	810f0b8 <__malloc_lock>
 810eee8:	4a1d      	ldr	r2, [pc, #116]	@ (810ef60 <_free_r+0x90>)
 810eeea:	6813      	ldr	r3, [r2, #0]
 810eeec:	b933      	cbnz	r3, 810eefc <_free_r+0x2c>
 810eeee:	6063      	str	r3, [r4, #4]
 810eef0:	6014      	str	r4, [r2, #0]
 810eef2:	4628      	mov	r0, r5
 810eef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810eef8:	f000 b8e4 	b.w	810f0c4 <__malloc_unlock>
 810eefc:	42a3      	cmp	r3, r4
 810eefe:	d908      	bls.n	810ef12 <_free_r+0x42>
 810ef00:	6820      	ldr	r0, [r4, #0]
 810ef02:	1821      	adds	r1, r4, r0
 810ef04:	428b      	cmp	r3, r1
 810ef06:	bf01      	itttt	eq
 810ef08:	6819      	ldreq	r1, [r3, #0]
 810ef0a:	685b      	ldreq	r3, [r3, #4]
 810ef0c:	1809      	addeq	r1, r1, r0
 810ef0e:	6021      	streq	r1, [r4, #0]
 810ef10:	e7ed      	b.n	810eeee <_free_r+0x1e>
 810ef12:	461a      	mov	r2, r3
 810ef14:	685b      	ldr	r3, [r3, #4]
 810ef16:	b10b      	cbz	r3, 810ef1c <_free_r+0x4c>
 810ef18:	42a3      	cmp	r3, r4
 810ef1a:	d9fa      	bls.n	810ef12 <_free_r+0x42>
 810ef1c:	6811      	ldr	r1, [r2, #0]
 810ef1e:	1850      	adds	r0, r2, r1
 810ef20:	42a0      	cmp	r0, r4
 810ef22:	d10b      	bne.n	810ef3c <_free_r+0x6c>
 810ef24:	6820      	ldr	r0, [r4, #0]
 810ef26:	4401      	add	r1, r0
 810ef28:	1850      	adds	r0, r2, r1
 810ef2a:	4283      	cmp	r3, r0
 810ef2c:	6011      	str	r1, [r2, #0]
 810ef2e:	d1e0      	bne.n	810eef2 <_free_r+0x22>
 810ef30:	6818      	ldr	r0, [r3, #0]
 810ef32:	685b      	ldr	r3, [r3, #4]
 810ef34:	6053      	str	r3, [r2, #4]
 810ef36:	4408      	add	r0, r1
 810ef38:	6010      	str	r0, [r2, #0]
 810ef3a:	e7da      	b.n	810eef2 <_free_r+0x22>
 810ef3c:	d902      	bls.n	810ef44 <_free_r+0x74>
 810ef3e:	230c      	movs	r3, #12
 810ef40:	602b      	str	r3, [r5, #0]
 810ef42:	e7d6      	b.n	810eef2 <_free_r+0x22>
 810ef44:	6820      	ldr	r0, [r4, #0]
 810ef46:	1821      	adds	r1, r4, r0
 810ef48:	428b      	cmp	r3, r1
 810ef4a:	bf04      	itt	eq
 810ef4c:	6819      	ldreq	r1, [r3, #0]
 810ef4e:	685b      	ldreq	r3, [r3, #4]
 810ef50:	6063      	str	r3, [r4, #4]
 810ef52:	bf04      	itt	eq
 810ef54:	1809      	addeq	r1, r1, r0
 810ef56:	6021      	streq	r1, [r4, #0]
 810ef58:	6054      	str	r4, [r2, #4]
 810ef5a:	e7ca      	b.n	810eef2 <_free_r+0x22>
 810ef5c:	bd38      	pop	{r3, r4, r5, pc}
 810ef5e:	bf00      	nop
 810ef60:	1000083c 	.word	0x1000083c

0810ef64 <malloc>:
 810ef64:	4b02      	ldr	r3, [pc, #8]	@ (810ef70 <malloc+0xc>)
 810ef66:	4601      	mov	r1, r0
 810ef68:	6818      	ldr	r0, [r3, #0]
 810ef6a:	f000 b825 	b.w	810efb8 <_malloc_r>
 810ef6e:	bf00      	nop
 810ef70:	100000ac 	.word	0x100000ac

0810ef74 <sbrk_aligned>:
 810ef74:	b570      	push	{r4, r5, r6, lr}
 810ef76:	4e0f      	ldr	r6, [pc, #60]	@ (810efb4 <sbrk_aligned+0x40>)
 810ef78:	460c      	mov	r4, r1
 810ef7a:	6831      	ldr	r1, [r6, #0]
 810ef7c:	4605      	mov	r5, r0
 810ef7e:	b911      	cbnz	r1, 810ef86 <sbrk_aligned+0x12>
 810ef80:	f001 ffe4 	bl	8110f4c <_sbrk_r>
 810ef84:	6030      	str	r0, [r6, #0]
 810ef86:	4621      	mov	r1, r4
 810ef88:	4628      	mov	r0, r5
 810ef8a:	f001 ffdf 	bl	8110f4c <_sbrk_r>
 810ef8e:	1c43      	adds	r3, r0, #1
 810ef90:	d103      	bne.n	810ef9a <sbrk_aligned+0x26>
 810ef92:	f04f 34ff 	mov.w	r4, #4294967295
 810ef96:	4620      	mov	r0, r4
 810ef98:	bd70      	pop	{r4, r5, r6, pc}
 810ef9a:	1cc4      	adds	r4, r0, #3
 810ef9c:	f024 0403 	bic.w	r4, r4, #3
 810efa0:	42a0      	cmp	r0, r4
 810efa2:	d0f8      	beq.n	810ef96 <sbrk_aligned+0x22>
 810efa4:	1a21      	subs	r1, r4, r0
 810efa6:	4628      	mov	r0, r5
 810efa8:	f001 ffd0 	bl	8110f4c <_sbrk_r>
 810efac:	3001      	adds	r0, #1
 810efae:	d1f2      	bne.n	810ef96 <sbrk_aligned+0x22>
 810efb0:	e7ef      	b.n	810ef92 <sbrk_aligned+0x1e>
 810efb2:	bf00      	nop
 810efb4:	10000838 	.word	0x10000838

0810efb8 <_malloc_r>:
 810efb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810efbc:	1ccd      	adds	r5, r1, #3
 810efbe:	f025 0503 	bic.w	r5, r5, #3
 810efc2:	3508      	adds	r5, #8
 810efc4:	2d0c      	cmp	r5, #12
 810efc6:	bf38      	it	cc
 810efc8:	250c      	movcc	r5, #12
 810efca:	2d00      	cmp	r5, #0
 810efcc:	4606      	mov	r6, r0
 810efce:	db01      	blt.n	810efd4 <_malloc_r+0x1c>
 810efd0:	42a9      	cmp	r1, r5
 810efd2:	d904      	bls.n	810efde <_malloc_r+0x26>
 810efd4:	230c      	movs	r3, #12
 810efd6:	6033      	str	r3, [r6, #0]
 810efd8:	2000      	movs	r0, #0
 810efda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810efde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810f0b4 <_malloc_r+0xfc>
 810efe2:	f000 f869 	bl	810f0b8 <__malloc_lock>
 810efe6:	f8d8 3000 	ldr.w	r3, [r8]
 810efea:	461c      	mov	r4, r3
 810efec:	bb44      	cbnz	r4, 810f040 <_malloc_r+0x88>
 810efee:	4629      	mov	r1, r5
 810eff0:	4630      	mov	r0, r6
 810eff2:	f7ff ffbf 	bl	810ef74 <sbrk_aligned>
 810eff6:	1c43      	adds	r3, r0, #1
 810eff8:	4604      	mov	r4, r0
 810effa:	d158      	bne.n	810f0ae <_malloc_r+0xf6>
 810effc:	f8d8 4000 	ldr.w	r4, [r8]
 810f000:	4627      	mov	r7, r4
 810f002:	2f00      	cmp	r7, #0
 810f004:	d143      	bne.n	810f08e <_malloc_r+0xd6>
 810f006:	2c00      	cmp	r4, #0
 810f008:	d04b      	beq.n	810f0a2 <_malloc_r+0xea>
 810f00a:	6823      	ldr	r3, [r4, #0]
 810f00c:	4639      	mov	r1, r7
 810f00e:	4630      	mov	r0, r6
 810f010:	eb04 0903 	add.w	r9, r4, r3
 810f014:	f001 ff9a 	bl	8110f4c <_sbrk_r>
 810f018:	4581      	cmp	r9, r0
 810f01a:	d142      	bne.n	810f0a2 <_malloc_r+0xea>
 810f01c:	6821      	ldr	r1, [r4, #0]
 810f01e:	1a6d      	subs	r5, r5, r1
 810f020:	4629      	mov	r1, r5
 810f022:	4630      	mov	r0, r6
 810f024:	f7ff ffa6 	bl	810ef74 <sbrk_aligned>
 810f028:	3001      	adds	r0, #1
 810f02a:	d03a      	beq.n	810f0a2 <_malloc_r+0xea>
 810f02c:	6823      	ldr	r3, [r4, #0]
 810f02e:	442b      	add	r3, r5
 810f030:	6023      	str	r3, [r4, #0]
 810f032:	f8d8 3000 	ldr.w	r3, [r8]
 810f036:	685a      	ldr	r2, [r3, #4]
 810f038:	bb62      	cbnz	r2, 810f094 <_malloc_r+0xdc>
 810f03a:	f8c8 7000 	str.w	r7, [r8]
 810f03e:	e00f      	b.n	810f060 <_malloc_r+0xa8>
 810f040:	6822      	ldr	r2, [r4, #0]
 810f042:	1b52      	subs	r2, r2, r5
 810f044:	d420      	bmi.n	810f088 <_malloc_r+0xd0>
 810f046:	2a0b      	cmp	r2, #11
 810f048:	d917      	bls.n	810f07a <_malloc_r+0xc2>
 810f04a:	1961      	adds	r1, r4, r5
 810f04c:	42a3      	cmp	r3, r4
 810f04e:	6025      	str	r5, [r4, #0]
 810f050:	bf18      	it	ne
 810f052:	6059      	strne	r1, [r3, #4]
 810f054:	6863      	ldr	r3, [r4, #4]
 810f056:	bf08      	it	eq
 810f058:	f8c8 1000 	streq.w	r1, [r8]
 810f05c:	5162      	str	r2, [r4, r5]
 810f05e:	604b      	str	r3, [r1, #4]
 810f060:	4630      	mov	r0, r6
 810f062:	f000 f82f 	bl	810f0c4 <__malloc_unlock>
 810f066:	f104 000b 	add.w	r0, r4, #11
 810f06a:	1d23      	adds	r3, r4, #4
 810f06c:	f020 0007 	bic.w	r0, r0, #7
 810f070:	1ac2      	subs	r2, r0, r3
 810f072:	bf1c      	itt	ne
 810f074:	1a1b      	subne	r3, r3, r0
 810f076:	50a3      	strne	r3, [r4, r2]
 810f078:	e7af      	b.n	810efda <_malloc_r+0x22>
 810f07a:	6862      	ldr	r2, [r4, #4]
 810f07c:	42a3      	cmp	r3, r4
 810f07e:	bf0c      	ite	eq
 810f080:	f8c8 2000 	streq.w	r2, [r8]
 810f084:	605a      	strne	r2, [r3, #4]
 810f086:	e7eb      	b.n	810f060 <_malloc_r+0xa8>
 810f088:	4623      	mov	r3, r4
 810f08a:	6864      	ldr	r4, [r4, #4]
 810f08c:	e7ae      	b.n	810efec <_malloc_r+0x34>
 810f08e:	463c      	mov	r4, r7
 810f090:	687f      	ldr	r7, [r7, #4]
 810f092:	e7b6      	b.n	810f002 <_malloc_r+0x4a>
 810f094:	461a      	mov	r2, r3
 810f096:	685b      	ldr	r3, [r3, #4]
 810f098:	42a3      	cmp	r3, r4
 810f09a:	d1fb      	bne.n	810f094 <_malloc_r+0xdc>
 810f09c:	2300      	movs	r3, #0
 810f09e:	6053      	str	r3, [r2, #4]
 810f0a0:	e7de      	b.n	810f060 <_malloc_r+0xa8>
 810f0a2:	230c      	movs	r3, #12
 810f0a4:	6033      	str	r3, [r6, #0]
 810f0a6:	4630      	mov	r0, r6
 810f0a8:	f000 f80c 	bl	810f0c4 <__malloc_unlock>
 810f0ac:	e794      	b.n	810efd8 <_malloc_r+0x20>
 810f0ae:	6005      	str	r5, [r0, #0]
 810f0b0:	e7d6      	b.n	810f060 <_malloc_r+0xa8>
 810f0b2:	bf00      	nop
 810f0b4:	1000083c 	.word	0x1000083c

0810f0b8 <__malloc_lock>:
 810f0b8:	4801      	ldr	r0, [pc, #4]	@ (810f0c0 <__malloc_lock+0x8>)
 810f0ba:	f7ff b886 	b.w	810e1ca <__retarget_lock_acquire_recursive>
 810f0be:	bf00      	nop
 810f0c0:	10000834 	.word	0x10000834

0810f0c4 <__malloc_unlock>:
 810f0c4:	4801      	ldr	r0, [pc, #4]	@ (810f0cc <__malloc_unlock+0x8>)
 810f0c6:	f7ff b881 	b.w	810e1cc <__retarget_lock_release_recursive>
 810f0ca:	bf00      	nop
 810f0cc:	10000834 	.word	0x10000834

0810f0d0 <_Balloc>:
 810f0d0:	b570      	push	{r4, r5, r6, lr}
 810f0d2:	69c6      	ldr	r6, [r0, #28]
 810f0d4:	4604      	mov	r4, r0
 810f0d6:	460d      	mov	r5, r1
 810f0d8:	b976      	cbnz	r6, 810f0f8 <_Balloc+0x28>
 810f0da:	2010      	movs	r0, #16
 810f0dc:	f7ff ff42 	bl	810ef64 <malloc>
 810f0e0:	4602      	mov	r2, r0
 810f0e2:	61e0      	str	r0, [r4, #28]
 810f0e4:	b920      	cbnz	r0, 810f0f0 <_Balloc+0x20>
 810f0e6:	4b18      	ldr	r3, [pc, #96]	@ (810f148 <_Balloc+0x78>)
 810f0e8:	4818      	ldr	r0, [pc, #96]	@ (810f14c <_Balloc+0x7c>)
 810f0ea:	216b      	movs	r1, #107	@ 0x6b
 810f0ec:	f7ff f884 	bl	810e1f8 <__assert_func>
 810f0f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810f0f4:	6006      	str	r6, [r0, #0]
 810f0f6:	60c6      	str	r6, [r0, #12]
 810f0f8:	69e6      	ldr	r6, [r4, #28]
 810f0fa:	68f3      	ldr	r3, [r6, #12]
 810f0fc:	b183      	cbz	r3, 810f120 <_Balloc+0x50>
 810f0fe:	69e3      	ldr	r3, [r4, #28]
 810f100:	68db      	ldr	r3, [r3, #12]
 810f102:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810f106:	b9b8      	cbnz	r0, 810f138 <_Balloc+0x68>
 810f108:	2101      	movs	r1, #1
 810f10a:	fa01 f605 	lsl.w	r6, r1, r5
 810f10e:	1d72      	adds	r2, r6, #5
 810f110:	0092      	lsls	r2, r2, #2
 810f112:	4620      	mov	r0, r4
 810f114:	f001 ff3b 	bl	8110f8e <_calloc_r>
 810f118:	b160      	cbz	r0, 810f134 <_Balloc+0x64>
 810f11a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810f11e:	e00e      	b.n	810f13e <_Balloc+0x6e>
 810f120:	2221      	movs	r2, #33	@ 0x21
 810f122:	2104      	movs	r1, #4
 810f124:	4620      	mov	r0, r4
 810f126:	f001 ff32 	bl	8110f8e <_calloc_r>
 810f12a:	69e3      	ldr	r3, [r4, #28]
 810f12c:	60f0      	str	r0, [r6, #12]
 810f12e:	68db      	ldr	r3, [r3, #12]
 810f130:	2b00      	cmp	r3, #0
 810f132:	d1e4      	bne.n	810f0fe <_Balloc+0x2e>
 810f134:	2000      	movs	r0, #0
 810f136:	bd70      	pop	{r4, r5, r6, pc}
 810f138:	6802      	ldr	r2, [r0, #0]
 810f13a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810f13e:	2300      	movs	r3, #0
 810f140:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810f144:	e7f7      	b.n	810f136 <_Balloc+0x66>
 810f146:	bf00      	nop
 810f148:	081117d8 	.word	0x081117d8
 810f14c:	08111932 	.word	0x08111932

0810f150 <_Bfree>:
 810f150:	b570      	push	{r4, r5, r6, lr}
 810f152:	69c6      	ldr	r6, [r0, #28]
 810f154:	4605      	mov	r5, r0
 810f156:	460c      	mov	r4, r1
 810f158:	b976      	cbnz	r6, 810f178 <_Bfree+0x28>
 810f15a:	2010      	movs	r0, #16
 810f15c:	f7ff ff02 	bl	810ef64 <malloc>
 810f160:	4602      	mov	r2, r0
 810f162:	61e8      	str	r0, [r5, #28]
 810f164:	b920      	cbnz	r0, 810f170 <_Bfree+0x20>
 810f166:	4b09      	ldr	r3, [pc, #36]	@ (810f18c <_Bfree+0x3c>)
 810f168:	4809      	ldr	r0, [pc, #36]	@ (810f190 <_Bfree+0x40>)
 810f16a:	218f      	movs	r1, #143	@ 0x8f
 810f16c:	f7ff f844 	bl	810e1f8 <__assert_func>
 810f170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810f174:	6006      	str	r6, [r0, #0]
 810f176:	60c6      	str	r6, [r0, #12]
 810f178:	b13c      	cbz	r4, 810f18a <_Bfree+0x3a>
 810f17a:	69eb      	ldr	r3, [r5, #28]
 810f17c:	6862      	ldr	r2, [r4, #4]
 810f17e:	68db      	ldr	r3, [r3, #12]
 810f180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810f184:	6021      	str	r1, [r4, #0]
 810f186:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810f18a:	bd70      	pop	{r4, r5, r6, pc}
 810f18c:	081117d8 	.word	0x081117d8
 810f190:	08111932 	.word	0x08111932

0810f194 <__multadd>:
 810f194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810f198:	690d      	ldr	r5, [r1, #16]
 810f19a:	4607      	mov	r7, r0
 810f19c:	460c      	mov	r4, r1
 810f19e:	461e      	mov	r6, r3
 810f1a0:	f101 0c14 	add.w	ip, r1, #20
 810f1a4:	2000      	movs	r0, #0
 810f1a6:	f8dc 3000 	ldr.w	r3, [ip]
 810f1aa:	b299      	uxth	r1, r3
 810f1ac:	fb02 6101 	mla	r1, r2, r1, r6
 810f1b0:	0c1e      	lsrs	r6, r3, #16
 810f1b2:	0c0b      	lsrs	r3, r1, #16
 810f1b4:	fb02 3306 	mla	r3, r2, r6, r3
 810f1b8:	b289      	uxth	r1, r1
 810f1ba:	3001      	adds	r0, #1
 810f1bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810f1c0:	4285      	cmp	r5, r0
 810f1c2:	f84c 1b04 	str.w	r1, [ip], #4
 810f1c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810f1ca:	dcec      	bgt.n	810f1a6 <__multadd+0x12>
 810f1cc:	b30e      	cbz	r6, 810f212 <__multadd+0x7e>
 810f1ce:	68a3      	ldr	r3, [r4, #8]
 810f1d0:	42ab      	cmp	r3, r5
 810f1d2:	dc19      	bgt.n	810f208 <__multadd+0x74>
 810f1d4:	6861      	ldr	r1, [r4, #4]
 810f1d6:	4638      	mov	r0, r7
 810f1d8:	3101      	adds	r1, #1
 810f1da:	f7ff ff79 	bl	810f0d0 <_Balloc>
 810f1de:	4680      	mov	r8, r0
 810f1e0:	b928      	cbnz	r0, 810f1ee <__multadd+0x5a>
 810f1e2:	4602      	mov	r2, r0
 810f1e4:	4b0c      	ldr	r3, [pc, #48]	@ (810f218 <__multadd+0x84>)
 810f1e6:	480d      	ldr	r0, [pc, #52]	@ (810f21c <__multadd+0x88>)
 810f1e8:	21ba      	movs	r1, #186	@ 0xba
 810f1ea:	f7ff f805 	bl	810e1f8 <__assert_func>
 810f1ee:	6922      	ldr	r2, [r4, #16]
 810f1f0:	3202      	adds	r2, #2
 810f1f2:	f104 010c 	add.w	r1, r4, #12
 810f1f6:	0092      	lsls	r2, r2, #2
 810f1f8:	300c      	adds	r0, #12
 810f1fa:	f7fe ffe8 	bl	810e1ce <memcpy>
 810f1fe:	4621      	mov	r1, r4
 810f200:	4638      	mov	r0, r7
 810f202:	f7ff ffa5 	bl	810f150 <_Bfree>
 810f206:	4644      	mov	r4, r8
 810f208:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810f20c:	3501      	adds	r5, #1
 810f20e:	615e      	str	r6, [r3, #20]
 810f210:	6125      	str	r5, [r4, #16]
 810f212:	4620      	mov	r0, r4
 810f214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810f218:	08111921 	.word	0x08111921
 810f21c:	08111932 	.word	0x08111932

0810f220 <__s2b>:
 810f220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810f224:	460c      	mov	r4, r1
 810f226:	4615      	mov	r5, r2
 810f228:	461f      	mov	r7, r3
 810f22a:	2209      	movs	r2, #9
 810f22c:	3308      	adds	r3, #8
 810f22e:	4606      	mov	r6, r0
 810f230:	fb93 f3f2 	sdiv	r3, r3, r2
 810f234:	2100      	movs	r1, #0
 810f236:	2201      	movs	r2, #1
 810f238:	429a      	cmp	r2, r3
 810f23a:	db09      	blt.n	810f250 <__s2b+0x30>
 810f23c:	4630      	mov	r0, r6
 810f23e:	f7ff ff47 	bl	810f0d0 <_Balloc>
 810f242:	b940      	cbnz	r0, 810f256 <__s2b+0x36>
 810f244:	4602      	mov	r2, r0
 810f246:	4b19      	ldr	r3, [pc, #100]	@ (810f2ac <__s2b+0x8c>)
 810f248:	4819      	ldr	r0, [pc, #100]	@ (810f2b0 <__s2b+0x90>)
 810f24a:	21d3      	movs	r1, #211	@ 0xd3
 810f24c:	f7fe ffd4 	bl	810e1f8 <__assert_func>
 810f250:	0052      	lsls	r2, r2, #1
 810f252:	3101      	adds	r1, #1
 810f254:	e7f0      	b.n	810f238 <__s2b+0x18>
 810f256:	9b08      	ldr	r3, [sp, #32]
 810f258:	6143      	str	r3, [r0, #20]
 810f25a:	2d09      	cmp	r5, #9
 810f25c:	f04f 0301 	mov.w	r3, #1
 810f260:	6103      	str	r3, [r0, #16]
 810f262:	dd16      	ble.n	810f292 <__s2b+0x72>
 810f264:	f104 0909 	add.w	r9, r4, #9
 810f268:	46c8      	mov	r8, r9
 810f26a:	442c      	add	r4, r5
 810f26c:	f818 3b01 	ldrb.w	r3, [r8], #1
 810f270:	4601      	mov	r1, r0
 810f272:	3b30      	subs	r3, #48	@ 0x30
 810f274:	220a      	movs	r2, #10
 810f276:	4630      	mov	r0, r6
 810f278:	f7ff ff8c 	bl	810f194 <__multadd>
 810f27c:	45a0      	cmp	r8, r4
 810f27e:	d1f5      	bne.n	810f26c <__s2b+0x4c>
 810f280:	f1a5 0408 	sub.w	r4, r5, #8
 810f284:	444c      	add	r4, r9
 810f286:	1b2d      	subs	r5, r5, r4
 810f288:	1963      	adds	r3, r4, r5
 810f28a:	42bb      	cmp	r3, r7
 810f28c:	db04      	blt.n	810f298 <__s2b+0x78>
 810f28e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810f292:	340a      	adds	r4, #10
 810f294:	2509      	movs	r5, #9
 810f296:	e7f6      	b.n	810f286 <__s2b+0x66>
 810f298:	f814 3b01 	ldrb.w	r3, [r4], #1
 810f29c:	4601      	mov	r1, r0
 810f29e:	3b30      	subs	r3, #48	@ 0x30
 810f2a0:	220a      	movs	r2, #10
 810f2a2:	4630      	mov	r0, r6
 810f2a4:	f7ff ff76 	bl	810f194 <__multadd>
 810f2a8:	e7ee      	b.n	810f288 <__s2b+0x68>
 810f2aa:	bf00      	nop
 810f2ac:	08111921 	.word	0x08111921
 810f2b0:	08111932 	.word	0x08111932

0810f2b4 <__hi0bits>:
 810f2b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 810f2b8:	4603      	mov	r3, r0
 810f2ba:	bf36      	itet	cc
 810f2bc:	0403      	lslcc	r3, r0, #16
 810f2be:	2000      	movcs	r0, #0
 810f2c0:	2010      	movcc	r0, #16
 810f2c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810f2c6:	bf3c      	itt	cc
 810f2c8:	021b      	lslcc	r3, r3, #8
 810f2ca:	3008      	addcc	r0, #8
 810f2cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810f2d0:	bf3c      	itt	cc
 810f2d2:	011b      	lslcc	r3, r3, #4
 810f2d4:	3004      	addcc	r0, #4
 810f2d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810f2da:	bf3c      	itt	cc
 810f2dc:	009b      	lslcc	r3, r3, #2
 810f2de:	3002      	addcc	r0, #2
 810f2e0:	2b00      	cmp	r3, #0
 810f2e2:	db05      	blt.n	810f2f0 <__hi0bits+0x3c>
 810f2e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 810f2e8:	f100 0001 	add.w	r0, r0, #1
 810f2ec:	bf08      	it	eq
 810f2ee:	2020      	moveq	r0, #32
 810f2f0:	4770      	bx	lr

0810f2f2 <__lo0bits>:
 810f2f2:	6803      	ldr	r3, [r0, #0]
 810f2f4:	4602      	mov	r2, r0
 810f2f6:	f013 0007 	ands.w	r0, r3, #7
 810f2fa:	d00b      	beq.n	810f314 <__lo0bits+0x22>
 810f2fc:	07d9      	lsls	r1, r3, #31
 810f2fe:	d421      	bmi.n	810f344 <__lo0bits+0x52>
 810f300:	0798      	lsls	r0, r3, #30
 810f302:	bf49      	itett	mi
 810f304:	085b      	lsrmi	r3, r3, #1
 810f306:	089b      	lsrpl	r3, r3, #2
 810f308:	2001      	movmi	r0, #1
 810f30a:	6013      	strmi	r3, [r2, #0]
 810f30c:	bf5c      	itt	pl
 810f30e:	6013      	strpl	r3, [r2, #0]
 810f310:	2002      	movpl	r0, #2
 810f312:	4770      	bx	lr
 810f314:	b299      	uxth	r1, r3
 810f316:	b909      	cbnz	r1, 810f31c <__lo0bits+0x2a>
 810f318:	0c1b      	lsrs	r3, r3, #16
 810f31a:	2010      	movs	r0, #16
 810f31c:	b2d9      	uxtb	r1, r3
 810f31e:	b909      	cbnz	r1, 810f324 <__lo0bits+0x32>
 810f320:	3008      	adds	r0, #8
 810f322:	0a1b      	lsrs	r3, r3, #8
 810f324:	0719      	lsls	r1, r3, #28
 810f326:	bf04      	itt	eq
 810f328:	091b      	lsreq	r3, r3, #4
 810f32a:	3004      	addeq	r0, #4
 810f32c:	0799      	lsls	r1, r3, #30
 810f32e:	bf04      	itt	eq
 810f330:	089b      	lsreq	r3, r3, #2
 810f332:	3002      	addeq	r0, #2
 810f334:	07d9      	lsls	r1, r3, #31
 810f336:	d403      	bmi.n	810f340 <__lo0bits+0x4e>
 810f338:	085b      	lsrs	r3, r3, #1
 810f33a:	f100 0001 	add.w	r0, r0, #1
 810f33e:	d003      	beq.n	810f348 <__lo0bits+0x56>
 810f340:	6013      	str	r3, [r2, #0]
 810f342:	4770      	bx	lr
 810f344:	2000      	movs	r0, #0
 810f346:	4770      	bx	lr
 810f348:	2020      	movs	r0, #32
 810f34a:	4770      	bx	lr

0810f34c <__i2b>:
 810f34c:	b510      	push	{r4, lr}
 810f34e:	460c      	mov	r4, r1
 810f350:	2101      	movs	r1, #1
 810f352:	f7ff febd 	bl	810f0d0 <_Balloc>
 810f356:	4602      	mov	r2, r0
 810f358:	b928      	cbnz	r0, 810f366 <__i2b+0x1a>
 810f35a:	4b05      	ldr	r3, [pc, #20]	@ (810f370 <__i2b+0x24>)
 810f35c:	4805      	ldr	r0, [pc, #20]	@ (810f374 <__i2b+0x28>)
 810f35e:	f240 1145 	movw	r1, #325	@ 0x145
 810f362:	f7fe ff49 	bl	810e1f8 <__assert_func>
 810f366:	2301      	movs	r3, #1
 810f368:	6144      	str	r4, [r0, #20]
 810f36a:	6103      	str	r3, [r0, #16]
 810f36c:	bd10      	pop	{r4, pc}
 810f36e:	bf00      	nop
 810f370:	08111921 	.word	0x08111921
 810f374:	08111932 	.word	0x08111932

0810f378 <__multiply>:
 810f378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f37c:	4614      	mov	r4, r2
 810f37e:	690a      	ldr	r2, [r1, #16]
 810f380:	6923      	ldr	r3, [r4, #16]
 810f382:	429a      	cmp	r2, r3
 810f384:	bfa8      	it	ge
 810f386:	4623      	movge	r3, r4
 810f388:	460f      	mov	r7, r1
 810f38a:	bfa4      	itt	ge
 810f38c:	460c      	movge	r4, r1
 810f38e:	461f      	movge	r7, r3
 810f390:	f8d4 a010 	ldr.w	sl, [r4, #16]
 810f394:	f8d7 9010 	ldr.w	r9, [r7, #16]
 810f398:	68a3      	ldr	r3, [r4, #8]
 810f39a:	6861      	ldr	r1, [r4, #4]
 810f39c:	eb0a 0609 	add.w	r6, sl, r9
 810f3a0:	42b3      	cmp	r3, r6
 810f3a2:	b085      	sub	sp, #20
 810f3a4:	bfb8      	it	lt
 810f3a6:	3101      	addlt	r1, #1
 810f3a8:	f7ff fe92 	bl	810f0d0 <_Balloc>
 810f3ac:	b930      	cbnz	r0, 810f3bc <__multiply+0x44>
 810f3ae:	4602      	mov	r2, r0
 810f3b0:	4b44      	ldr	r3, [pc, #272]	@ (810f4c4 <__multiply+0x14c>)
 810f3b2:	4845      	ldr	r0, [pc, #276]	@ (810f4c8 <__multiply+0x150>)
 810f3b4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 810f3b8:	f7fe ff1e 	bl	810e1f8 <__assert_func>
 810f3bc:	f100 0514 	add.w	r5, r0, #20
 810f3c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810f3c4:	462b      	mov	r3, r5
 810f3c6:	2200      	movs	r2, #0
 810f3c8:	4543      	cmp	r3, r8
 810f3ca:	d321      	bcc.n	810f410 <__multiply+0x98>
 810f3cc:	f107 0114 	add.w	r1, r7, #20
 810f3d0:	f104 0214 	add.w	r2, r4, #20
 810f3d4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 810f3d8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 810f3dc:	9302      	str	r3, [sp, #8]
 810f3de:	1b13      	subs	r3, r2, r4
 810f3e0:	3b15      	subs	r3, #21
 810f3e2:	f023 0303 	bic.w	r3, r3, #3
 810f3e6:	3304      	adds	r3, #4
 810f3e8:	f104 0715 	add.w	r7, r4, #21
 810f3ec:	42ba      	cmp	r2, r7
 810f3ee:	bf38      	it	cc
 810f3f0:	2304      	movcc	r3, #4
 810f3f2:	9301      	str	r3, [sp, #4]
 810f3f4:	9b02      	ldr	r3, [sp, #8]
 810f3f6:	9103      	str	r1, [sp, #12]
 810f3f8:	428b      	cmp	r3, r1
 810f3fa:	d80c      	bhi.n	810f416 <__multiply+0x9e>
 810f3fc:	2e00      	cmp	r6, #0
 810f3fe:	dd03      	ble.n	810f408 <__multiply+0x90>
 810f400:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810f404:	2b00      	cmp	r3, #0
 810f406:	d05b      	beq.n	810f4c0 <__multiply+0x148>
 810f408:	6106      	str	r6, [r0, #16]
 810f40a:	b005      	add	sp, #20
 810f40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f410:	f843 2b04 	str.w	r2, [r3], #4
 810f414:	e7d8      	b.n	810f3c8 <__multiply+0x50>
 810f416:	f8b1 a000 	ldrh.w	sl, [r1]
 810f41a:	f1ba 0f00 	cmp.w	sl, #0
 810f41e:	d024      	beq.n	810f46a <__multiply+0xf2>
 810f420:	f104 0e14 	add.w	lr, r4, #20
 810f424:	46a9      	mov	r9, r5
 810f426:	f04f 0c00 	mov.w	ip, #0
 810f42a:	f85e 7b04 	ldr.w	r7, [lr], #4
 810f42e:	f8d9 3000 	ldr.w	r3, [r9]
 810f432:	fa1f fb87 	uxth.w	fp, r7
 810f436:	b29b      	uxth	r3, r3
 810f438:	fb0a 330b 	mla	r3, sl, fp, r3
 810f43c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 810f440:	f8d9 7000 	ldr.w	r7, [r9]
 810f444:	4463      	add	r3, ip
 810f446:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810f44a:	fb0a c70b 	mla	r7, sl, fp, ip
 810f44e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 810f452:	b29b      	uxth	r3, r3
 810f454:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810f458:	4572      	cmp	r2, lr
 810f45a:	f849 3b04 	str.w	r3, [r9], #4
 810f45e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810f462:	d8e2      	bhi.n	810f42a <__multiply+0xb2>
 810f464:	9b01      	ldr	r3, [sp, #4]
 810f466:	f845 c003 	str.w	ip, [r5, r3]
 810f46a:	9b03      	ldr	r3, [sp, #12]
 810f46c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 810f470:	3104      	adds	r1, #4
 810f472:	f1b9 0f00 	cmp.w	r9, #0
 810f476:	d021      	beq.n	810f4bc <__multiply+0x144>
 810f478:	682b      	ldr	r3, [r5, #0]
 810f47a:	f104 0c14 	add.w	ip, r4, #20
 810f47e:	46ae      	mov	lr, r5
 810f480:	f04f 0a00 	mov.w	sl, #0
 810f484:	f8bc b000 	ldrh.w	fp, [ip]
 810f488:	f8be 7002 	ldrh.w	r7, [lr, #2]
 810f48c:	fb09 770b 	mla	r7, r9, fp, r7
 810f490:	4457      	add	r7, sl
 810f492:	b29b      	uxth	r3, r3
 810f494:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810f498:	f84e 3b04 	str.w	r3, [lr], #4
 810f49c:	f85c 3b04 	ldr.w	r3, [ip], #4
 810f4a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810f4a4:	f8be 3000 	ldrh.w	r3, [lr]
 810f4a8:	fb09 330a 	mla	r3, r9, sl, r3
 810f4ac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 810f4b0:	4562      	cmp	r2, ip
 810f4b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810f4b6:	d8e5      	bhi.n	810f484 <__multiply+0x10c>
 810f4b8:	9f01      	ldr	r7, [sp, #4]
 810f4ba:	51eb      	str	r3, [r5, r7]
 810f4bc:	3504      	adds	r5, #4
 810f4be:	e799      	b.n	810f3f4 <__multiply+0x7c>
 810f4c0:	3e01      	subs	r6, #1
 810f4c2:	e79b      	b.n	810f3fc <__multiply+0x84>
 810f4c4:	08111921 	.word	0x08111921
 810f4c8:	08111932 	.word	0x08111932

0810f4cc <__pow5mult>:
 810f4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810f4d0:	4615      	mov	r5, r2
 810f4d2:	f012 0203 	ands.w	r2, r2, #3
 810f4d6:	4607      	mov	r7, r0
 810f4d8:	460e      	mov	r6, r1
 810f4da:	d007      	beq.n	810f4ec <__pow5mult+0x20>
 810f4dc:	4c25      	ldr	r4, [pc, #148]	@ (810f574 <__pow5mult+0xa8>)
 810f4de:	3a01      	subs	r2, #1
 810f4e0:	2300      	movs	r3, #0
 810f4e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810f4e6:	f7ff fe55 	bl	810f194 <__multadd>
 810f4ea:	4606      	mov	r6, r0
 810f4ec:	10ad      	asrs	r5, r5, #2
 810f4ee:	d03d      	beq.n	810f56c <__pow5mult+0xa0>
 810f4f0:	69fc      	ldr	r4, [r7, #28]
 810f4f2:	b97c      	cbnz	r4, 810f514 <__pow5mult+0x48>
 810f4f4:	2010      	movs	r0, #16
 810f4f6:	f7ff fd35 	bl	810ef64 <malloc>
 810f4fa:	4602      	mov	r2, r0
 810f4fc:	61f8      	str	r0, [r7, #28]
 810f4fe:	b928      	cbnz	r0, 810f50c <__pow5mult+0x40>
 810f500:	4b1d      	ldr	r3, [pc, #116]	@ (810f578 <__pow5mult+0xac>)
 810f502:	481e      	ldr	r0, [pc, #120]	@ (810f57c <__pow5mult+0xb0>)
 810f504:	f240 11b3 	movw	r1, #435	@ 0x1b3
 810f508:	f7fe fe76 	bl	810e1f8 <__assert_func>
 810f50c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810f510:	6004      	str	r4, [r0, #0]
 810f512:	60c4      	str	r4, [r0, #12]
 810f514:	f8d7 801c 	ldr.w	r8, [r7, #28]
 810f518:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810f51c:	b94c      	cbnz	r4, 810f532 <__pow5mult+0x66>
 810f51e:	f240 2171 	movw	r1, #625	@ 0x271
 810f522:	4638      	mov	r0, r7
 810f524:	f7ff ff12 	bl	810f34c <__i2b>
 810f528:	2300      	movs	r3, #0
 810f52a:	f8c8 0008 	str.w	r0, [r8, #8]
 810f52e:	4604      	mov	r4, r0
 810f530:	6003      	str	r3, [r0, #0]
 810f532:	f04f 0900 	mov.w	r9, #0
 810f536:	07eb      	lsls	r3, r5, #31
 810f538:	d50a      	bpl.n	810f550 <__pow5mult+0x84>
 810f53a:	4631      	mov	r1, r6
 810f53c:	4622      	mov	r2, r4
 810f53e:	4638      	mov	r0, r7
 810f540:	f7ff ff1a 	bl	810f378 <__multiply>
 810f544:	4631      	mov	r1, r6
 810f546:	4680      	mov	r8, r0
 810f548:	4638      	mov	r0, r7
 810f54a:	f7ff fe01 	bl	810f150 <_Bfree>
 810f54e:	4646      	mov	r6, r8
 810f550:	106d      	asrs	r5, r5, #1
 810f552:	d00b      	beq.n	810f56c <__pow5mult+0xa0>
 810f554:	6820      	ldr	r0, [r4, #0]
 810f556:	b938      	cbnz	r0, 810f568 <__pow5mult+0x9c>
 810f558:	4622      	mov	r2, r4
 810f55a:	4621      	mov	r1, r4
 810f55c:	4638      	mov	r0, r7
 810f55e:	f7ff ff0b 	bl	810f378 <__multiply>
 810f562:	6020      	str	r0, [r4, #0]
 810f564:	f8c0 9000 	str.w	r9, [r0]
 810f568:	4604      	mov	r4, r0
 810f56a:	e7e4      	b.n	810f536 <__pow5mult+0x6a>
 810f56c:	4630      	mov	r0, r6
 810f56e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810f572:	bf00      	nop
 810f574:	0811198c 	.word	0x0811198c
 810f578:	081117d8 	.word	0x081117d8
 810f57c:	08111932 	.word	0x08111932

0810f580 <__lshift>:
 810f580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810f584:	460c      	mov	r4, r1
 810f586:	6849      	ldr	r1, [r1, #4]
 810f588:	6923      	ldr	r3, [r4, #16]
 810f58a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810f58e:	68a3      	ldr	r3, [r4, #8]
 810f590:	4607      	mov	r7, r0
 810f592:	4691      	mov	r9, r2
 810f594:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810f598:	f108 0601 	add.w	r6, r8, #1
 810f59c:	42b3      	cmp	r3, r6
 810f59e:	db0b      	blt.n	810f5b8 <__lshift+0x38>
 810f5a0:	4638      	mov	r0, r7
 810f5a2:	f7ff fd95 	bl	810f0d0 <_Balloc>
 810f5a6:	4605      	mov	r5, r0
 810f5a8:	b948      	cbnz	r0, 810f5be <__lshift+0x3e>
 810f5aa:	4602      	mov	r2, r0
 810f5ac:	4b28      	ldr	r3, [pc, #160]	@ (810f650 <__lshift+0xd0>)
 810f5ae:	4829      	ldr	r0, [pc, #164]	@ (810f654 <__lshift+0xd4>)
 810f5b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 810f5b4:	f7fe fe20 	bl	810e1f8 <__assert_func>
 810f5b8:	3101      	adds	r1, #1
 810f5ba:	005b      	lsls	r3, r3, #1
 810f5bc:	e7ee      	b.n	810f59c <__lshift+0x1c>
 810f5be:	2300      	movs	r3, #0
 810f5c0:	f100 0114 	add.w	r1, r0, #20
 810f5c4:	f100 0210 	add.w	r2, r0, #16
 810f5c8:	4618      	mov	r0, r3
 810f5ca:	4553      	cmp	r3, sl
 810f5cc:	db33      	blt.n	810f636 <__lshift+0xb6>
 810f5ce:	6920      	ldr	r0, [r4, #16]
 810f5d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810f5d4:	f104 0314 	add.w	r3, r4, #20
 810f5d8:	f019 091f 	ands.w	r9, r9, #31
 810f5dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810f5e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810f5e4:	d02b      	beq.n	810f63e <__lshift+0xbe>
 810f5e6:	f1c9 0e20 	rsb	lr, r9, #32
 810f5ea:	468a      	mov	sl, r1
 810f5ec:	2200      	movs	r2, #0
 810f5ee:	6818      	ldr	r0, [r3, #0]
 810f5f0:	fa00 f009 	lsl.w	r0, r0, r9
 810f5f4:	4310      	orrs	r0, r2
 810f5f6:	f84a 0b04 	str.w	r0, [sl], #4
 810f5fa:	f853 2b04 	ldr.w	r2, [r3], #4
 810f5fe:	459c      	cmp	ip, r3
 810f600:	fa22 f20e 	lsr.w	r2, r2, lr
 810f604:	d8f3      	bhi.n	810f5ee <__lshift+0x6e>
 810f606:	ebac 0304 	sub.w	r3, ip, r4
 810f60a:	3b15      	subs	r3, #21
 810f60c:	f023 0303 	bic.w	r3, r3, #3
 810f610:	3304      	adds	r3, #4
 810f612:	f104 0015 	add.w	r0, r4, #21
 810f616:	4584      	cmp	ip, r0
 810f618:	bf38      	it	cc
 810f61a:	2304      	movcc	r3, #4
 810f61c:	50ca      	str	r2, [r1, r3]
 810f61e:	b10a      	cbz	r2, 810f624 <__lshift+0xa4>
 810f620:	f108 0602 	add.w	r6, r8, #2
 810f624:	3e01      	subs	r6, #1
 810f626:	4638      	mov	r0, r7
 810f628:	612e      	str	r6, [r5, #16]
 810f62a:	4621      	mov	r1, r4
 810f62c:	f7ff fd90 	bl	810f150 <_Bfree>
 810f630:	4628      	mov	r0, r5
 810f632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f636:	f842 0f04 	str.w	r0, [r2, #4]!
 810f63a:	3301      	adds	r3, #1
 810f63c:	e7c5      	b.n	810f5ca <__lshift+0x4a>
 810f63e:	3904      	subs	r1, #4
 810f640:	f853 2b04 	ldr.w	r2, [r3], #4
 810f644:	f841 2f04 	str.w	r2, [r1, #4]!
 810f648:	459c      	cmp	ip, r3
 810f64a:	d8f9      	bhi.n	810f640 <__lshift+0xc0>
 810f64c:	e7ea      	b.n	810f624 <__lshift+0xa4>
 810f64e:	bf00      	nop
 810f650:	08111921 	.word	0x08111921
 810f654:	08111932 	.word	0x08111932

0810f658 <__mcmp>:
 810f658:	690a      	ldr	r2, [r1, #16]
 810f65a:	4603      	mov	r3, r0
 810f65c:	6900      	ldr	r0, [r0, #16]
 810f65e:	1a80      	subs	r0, r0, r2
 810f660:	b530      	push	{r4, r5, lr}
 810f662:	d10e      	bne.n	810f682 <__mcmp+0x2a>
 810f664:	3314      	adds	r3, #20
 810f666:	3114      	adds	r1, #20
 810f668:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 810f66c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 810f670:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 810f674:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 810f678:	4295      	cmp	r5, r2
 810f67a:	d003      	beq.n	810f684 <__mcmp+0x2c>
 810f67c:	d205      	bcs.n	810f68a <__mcmp+0x32>
 810f67e:	f04f 30ff 	mov.w	r0, #4294967295
 810f682:	bd30      	pop	{r4, r5, pc}
 810f684:	42a3      	cmp	r3, r4
 810f686:	d3f3      	bcc.n	810f670 <__mcmp+0x18>
 810f688:	e7fb      	b.n	810f682 <__mcmp+0x2a>
 810f68a:	2001      	movs	r0, #1
 810f68c:	e7f9      	b.n	810f682 <__mcmp+0x2a>
	...

0810f690 <__mdiff>:
 810f690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f694:	4689      	mov	r9, r1
 810f696:	4606      	mov	r6, r0
 810f698:	4611      	mov	r1, r2
 810f69a:	4648      	mov	r0, r9
 810f69c:	4614      	mov	r4, r2
 810f69e:	f7ff ffdb 	bl	810f658 <__mcmp>
 810f6a2:	1e05      	subs	r5, r0, #0
 810f6a4:	d112      	bne.n	810f6cc <__mdiff+0x3c>
 810f6a6:	4629      	mov	r1, r5
 810f6a8:	4630      	mov	r0, r6
 810f6aa:	f7ff fd11 	bl	810f0d0 <_Balloc>
 810f6ae:	4602      	mov	r2, r0
 810f6b0:	b928      	cbnz	r0, 810f6be <__mdiff+0x2e>
 810f6b2:	4b3f      	ldr	r3, [pc, #252]	@ (810f7b0 <__mdiff+0x120>)
 810f6b4:	f240 2137 	movw	r1, #567	@ 0x237
 810f6b8:	483e      	ldr	r0, [pc, #248]	@ (810f7b4 <__mdiff+0x124>)
 810f6ba:	f7fe fd9d 	bl	810e1f8 <__assert_func>
 810f6be:	2301      	movs	r3, #1
 810f6c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810f6c4:	4610      	mov	r0, r2
 810f6c6:	b003      	add	sp, #12
 810f6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f6cc:	bfbc      	itt	lt
 810f6ce:	464b      	movlt	r3, r9
 810f6d0:	46a1      	movlt	r9, r4
 810f6d2:	4630      	mov	r0, r6
 810f6d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 810f6d8:	bfba      	itte	lt
 810f6da:	461c      	movlt	r4, r3
 810f6dc:	2501      	movlt	r5, #1
 810f6de:	2500      	movge	r5, #0
 810f6e0:	f7ff fcf6 	bl	810f0d0 <_Balloc>
 810f6e4:	4602      	mov	r2, r0
 810f6e6:	b918      	cbnz	r0, 810f6f0 <__mdiff+0x60>
 810f6e8:	4b31      	ldr	r3, [pc, #196]	@ (810f7b0 <__mdiff+0x120>)
 810f6ea:	f240 2145 	movw	r1, #581	@ 0x245
 810f6ee:	e7e3      	b.n	810f6b8 <__mdiff+0x28>
 810f6f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 810f6f4:	6926      	ldr	r6, [r4, #16]
 810f6f6:	60c5      	str	r5, [r0, #12]
 810f6f8:	f109 0310 	add.w	r3, r9, #16
 810f6fc:	f109 0514 	add.w	r5, r9, #20
 810f700:	f104 0e14 	add.w	lr, r4, #20
 810f704:	f100 0b14 	add.w	fp, r0, #20
 810f708:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 810f70c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 810f710:	9301      	str	r3, [sp, #4]
 810f712:	46d9      	mov	r9, fp
 810f714:	f04f 0c00 	mov.w	ip, #0
 810f718:	9b01      	ldr	r3, [sp, #4]
 810f71a:	f85e 0b04 	ldr.w	r0, [lr], #4
 810f71e:	f853 af04 	ldr.w	sl, [r3, #4]!
 810f722:	9301      	str	r3, [sp, #4]
 810f724:	fa1f f38a 	uxth.w	r3, sl
 810f728:	4619      	mov	r1, r3
 810f72a:	b283      	uxth	r3, r0
 810f72c:	1acb      	subs	r3, r1, r3
 810f72e:	0c00      	lsrs	r0, r0, #16
 810f730:	4463      	add	r3, ip
 810f732:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 810f736:	eb00 4023 	add.w	r0, r0, r3, asr #16
 810f73a:	b29b      	uxth	r3, r3
 810f73c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 810f740:	4576      	cmp	r6, lr
 810f742:	f849 3b04 	str.w	r3, [r9], #4
 810f746:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810f74a:	d8e5      	bhi.n	810f718 <__mdiff+0x88>
 810f74c:	1b33      	subs	r3, r6, r4
 810f74e:	3b15      	subs	r3, #21
 810f750:	f023 0303 	bic.w	r3, r3, #3
 810f754:	3415      	adds	r4, #21
 810f756:	3304      	adds	r3, #4
 810f758:	42a6      	cmp	r6, r4
 810f75a:	bf38      	it	cc
 810f75c:	2304      	movcc	r3, #4
 810f75e:	441d      	add	r5, r3
 810f760:	445b      	add	r3, fp
 810f762:	461e      	mov	r6, r3
 810f764:	462c      	mov	r4, r5
 810f766:	4544      	cmp	r4, r8
 810f768:	d30e      	bcc.n	810f788 <__mdiff+0xf8>
 810f76a:	f108 0103 	add.w	r1, r8, #3
 810f76e:	1b49      	subs	r1, r1, r5
 810f770:	f021 0103 	bic.w	r1, r1, #3
 810f774:	3d03      	subs	r5, #3
 810f776:	45a8      	cmp	r8, r5
 810f778:	bf38      	it	cc
 810f77a:	2100      	movcc	r1, #0
 810f77c:	440b      	add	r3, r1
 810f77e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810f782:	b191      	cbz	r1, 810f7aa <__mdiff+0x11a>
 810f784:	6117      	str	r7, [r2, #16]
 810f786:	e79d      	b.n	810f6c4 <__mdiff+0x34>
 810f788:	f854 1b04 	ldr.w	r1, [r4], #4
 810f78c:	46e6      	mov	lr, ip
 810f78e:	0c08      	lsrs	r0, r1, #16
 810f790:	fa1c fc81 	uxtah	ip, ip, r1
 810f794:	4471      	add	r1, lr
 810f796:	eb00 402c 	add.w	r0, r0, ip, asr #16
 810f79a:	b289      	uxth	r1, r1
 810f79c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 810f7a0:	f846 1b04 	str.w	r1, [r6], #4
 810f7a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810f7a8:	e7dd      	b.n	810f766 <__mdiff+0xd6>
 810f7aa:	3f01      	subs	r7, #1
 810f7ac:	e7e7      	b.n	810f77e <__mdiff+0xee>
 810f7ae:	bf00      	nop
 810f7b0:	08111921 	.word	0x08111921
 810f7b4:	08111932 	.word	0x08111932

0810f7b8 <__ulp>:
 810f7b8:	b082      	sub	sp, #8
 810f7ba:	ed8d 0b00 	vstr	d0, [sp]
 810f7be:	9a01      	ldr	r2, [sp, #4]
 810f7c0:	4b0f      	ldr	r3, [pc, #60]	@ (810f800 <__ulp+0x48>)
 810f7c2:	4013      	ands	r3, r2
 810f7c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 810f7c8:	2b00      	cmp	r3, #0
 810f7ca:	dc08      	bgt.n	810f7de <__ulp+0x26>
 810f7cc:	425b      	negs	r3, r3
 810f7ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 810f7d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 810f7d6:	da04      	bge.n	810f7e2 <__ulp+0x2a>
 810f7d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 810f7dc:	4113      	asrs	r3, r2
 810f7de:	2200      	movs	r2, #0
 810f7e0:	e008      	b.n	810f7f4 <__ulp+0x3c>
 810f7e2:	f1a2 0314 	sub.w	r3, r2, #20
 810f7e6:	2b1e      	cmp	r3, #30
 810f7e8:	bfda      	itte	le
 810f7ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 810f7ee:	40da      	lsrle	r2, r3
 810f7f0:	2201      	movgt	r2, #1
 810f7f2:	2300      	movs	r3, #0
 810f7f4:	4619      	mov	r1, r3
 810f7f6:	4610      	mov	r0, r2
 810f7f8:	ec41 0b10 	vmov	d0, r0, r1
 810f7fc:	b002      	add	sp, #8
 810f7fe:	4770      	bx	lr
 810f800:	7ff00000 	.word	0x7ff00000

0810f804 <__b2d>:
 810f804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810f808:	6906      	ldr	r6, [r0, #16]
 810f80a:	f100 0814 	add.w	r8, r0, #20
 810f80e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 810f812:	1f37      	subs	r7, r6, #4
 810f814:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810f818:	4610      	mov	r0, r2
 810f81a:	f7ff fd4b 	bl	810f2b4 <__hi0bits>
 810f81e:	f1c0 0320 	rsb	r3, r0, #32
 810f822:	280a      	cmp	r0, #10
 810f824:	600b      	str	r3, [r1, #0]
 810f826:	491b      	ldr	r1, [pc, #108]	@ (810f894 <__b2d+0x90>)
 810f828:	dc15      	bgt.n	810f856 <__b2d+0x52>
 810f82a:	f1c0 0c0b 	rsb	ip, r0, #11
 810f82e:	fa22 f30c 	lsr.w	r3, r2, ip
 810f832:	45b8      	cmp	r8, r7
 810f834:	ea43 0501 	orr.w	r5, r3, r1
 810f838:	bf34      	ite	cc
 810f83a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810f83e:	2300      	movcs	r3, #0
 810f840:	3015      	adds	r0, #21
 810f842:	fa02 f000 	lsl.w	r0, r2, r0
 810f846:	fa23 f30c 	lsr.w	r3, r3, ip
 810f84a:	4303      	orrs	r3, r0
 810f84c:	461c      	mov	r4, r3
 810f84e:	ec45 4b10 	vmov	d0, r4, r5
 810f852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810f856:	45b8      	cmp	r8, r7
 810f858:	bf3a      	itte	cc
 810f85a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810f85e:	f1a6 0708 	subcc.w	r7, r6, #8
 810f862:	2300      	movcs	r3, #0
 810f864:	380b      	subs	r0, #11
 810f866:	d012      	beq.n	810f88e <__b2d+0x8a>
 810f868:	f1c0 0120 	rsb	r1, r0, #32
 810f86c:	fa23 f401 	lsr.w	r4, r3, r1
 810f870:	4082      	lsls	r2, r0
 810f872:	4322      	orrs	r2, r4
 810f874:	4547      	cmp	r7, r8
 810f876:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 810f87a:	bf8c      	ite	hi
 810f87c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 810f880:	2200      	movls	r2, #0
 810f882:	4083      	lsls	r3, r0
 810f884:	40ca      	lsrs	r2, r1
 810f886:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 810f88a:	4313      	orrs	r3, r2
 810f88c:	e7de      	b.n	810f84c <__b2d+0x48>
 810f88e:	ea42 0501 	orr.w	r5, r2, r1
 810f892:	e7db      	b.n	810f84c <__b2d+0x48>
 810f894:	3ff00000 	.word	0x3ff00000

0810f898 <__d2b>:
 810f898:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810f89c:	460f      	mov	r7, r1
 810f89e:	2101      	movs	r1, #1
 810f8a0:	ec59 8b10 	vmov	r8, r9, d0
 810f8a4:	4616      	mov	r6, r2
 810f8a6:	f7ff fc13 	bl	810f0d0 <_Balloc>
 810f8aa:	4604      	mov	r4, r0
 810f8ac:	b930      	cbnz	r0, 810f8bc <__d2b+0x24>
 810f8ae:	4602      	mov	r2, r0
 810f8b0:	4b23      	ldr	r3, [pc, #140]	@ (810f940 <__d2b+0xa8>)
 810f8b2:	4824      	ldr	r0, [pc, #144]	@ (810f944 <__d2b+0xac>)
 810f8b4:	f240 310f 	movw	r1, #783	@ 0x30f
 810f8b8:	f7fe fc9e 	bl	810e1f8 <__assert_func>
 810f8bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810f8c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810f8c4:	b10d      	cbz	r5, 810f8ca <__d2b+0x32>
 810f8c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810f8ca:	9301      	str	r3, [sp, #4]
 810f8cc:	f1b8 0300 	subs.w	r3, r8, #0
 810f8d0:	d023      	beq.n	810f91a <__d2b+0x82>
 810f8d2:	4668      	mov	r0, sp
 810f8d4:	9300      	str	r3, [sp, #0]
 810f8d6:	f7ff fd0c 	bl	810f2f2 <__lo0bits>
 810f8da:	e9dd 1200 	ldrd	r1, r2, [sp]
 810f8de:	b1d0      	cbz	r0, 810f916 <__d2b+0x7e>
 810f8e0:	f1c0 0320 	rsb	r3, r0, #32
 810f8e4:	fa02 f303 	lsl.w	r3, r2, r3
 810f8e8:	430b      	orrs	r3, r1
 810f8ea:	40c2      	lsrs	r2, r0
 810f8ec:	6163      	str	r3, [r4, #20]
 810f8ee:	9201      	str	r2, [sp, #4]
 810f8f0:	9b01      	ldr	r3, [sp, #4]
 810f8f2:	61a3      	str	r3, [r4, #24]
 810f8f4:	2b00      	cmp	r3, #0
 810f8f6:	bf0c      	ite	eq
 810f8f8:	2201      	moveq	r2, #1
 810f8fa:	2202      	movne	r2, #2
 810f8fc:	6122      	str	r2, [r4, #16]
 810f8fe:	b1a5      	cbz	r5, 810f92a <__d2b+0x92>
 810f900:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 810f904:	4405      	add	r5, r0
 810f906:	603d      	str	r5, [r7, #0]
 810f908:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 810f90c:	6030      	str	r0, [r6, #0]
 810f90e:	4620      	mov	r0, r4
 810f910:	b003      	add	sp, #12
 810f912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810f916:	6161      	str	r1, [r4, #20]
 810f918:	e7ea      	b.n	810f8f0 <__d2b+0x58>
 810f91a:	a801      	add	r0, sp, #4
 810f91c:	f7ff fce9 	bl	810f2f2 <__lo0bits>
 810f920:	9b01      	ldr	r3, [sp, #4]
 810f922:	6163      	str	r3, [r4, #20]
 810f924:	3020      	adds	r0, #32
 810f926:	2201      	movs	r2, #1
 810f928:	e7e8      	b.n	810f8fc <__d2b+0x64>
 810f92a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810f92e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 810f932:	6038      	str	r0, [r7, #0]
 810f934:	6918      	ldr	r0, [r3, #16]
 810f936:	f7ff fcbd 	bl	810f2b4 <__hi0bits>
 810f93a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810f93e:	e7e5      	b.n	810f90c <__d2b+0x74>
 810f940:	08111921 	.word	0x08111921
 810f944:	08111932 	.word	0x08111932

0810f948 <__ratio>:
 810f948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f94c:	b085      	sub	sp, #20
 810f94e:	e9cd 1000 	strd	r1, r0, [sp]
 810f952:	a902      	add	r1, sp, #8
 810f954:	f7ff ff56 	bl	810f804 <__b2d>
 810f958:	9800      	ldr	r0, [sp, #0]
 810f95a:	a903      	add	r1, sp, #12
 810f95c:	ec55 4b10 	vmov	r4, r5, d0
 810f960:	f7ff ff50 	bl	810f804 <__b2d>
 810f964:	9b01      	ldr	r3, [sp, #4]
 810f966:	6919      	ldr	r1, [r3, #16]
 810f968:	9b00      	ldr	r3, [sp, #0]
 810f96a:	691b      	ldr	r3, [r3, #16]
 810f96c:	1ac9      	subs	r1, r1, r3
 810f96e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 810f972:	1a9b      	subs	r3, r3, r2
 810f974:	ec5b ab10 	vmov	sl, fp, d0
 810f978:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 810f97c:	2b00      	cmp	r3, #0
 810f97e:	bfce      	itee	gt
 810f980:	462a      	movgt	r2, r5
 810f982:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810f986:	465a      	movle	r2, fp
 810f988:	462f      	mov	r7, r5
 810f98a:	46d9      	mov	r9, fp
 810f98c:	bfcc      	ite	gt
 810f98e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810f992:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 810f996:	464b      	mov	r3, r9
 810f998:	4652      	mov	r2, sl
 810f99a:	4620      	mov	r0, r4
 810f99c:	4639      	mov	r1, r7
 810f99e:	f7f0 ffdd 	bl	810095c <__aeabi_ddiv>
 810f9a2:	ec41 0b10 	vmov	d0, r0, r1
 810f9a6:	b005      	add	sp, #20
 810f9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810f9ac <__copybits>:
 810f9ac:	3901      	subs	r1, #1
 810f9ae:	b570      	push	{r4, r5, r6, lr}
 810f9b0:	1149      	asrs	r1, r1, #5
 810f9b2:	6914      	ldr	r4, [r2, #16]
 810f9b4:	3101      	adds	r1, #1
 810f9b6:	f102 0314 	add.w	r3, r2, #20
 810f9ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810f9be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810f9c2:	1f05      	subs	r5, r0, #4
 810f9c4:	42a3      	cmp	r3, r4
 810f9c6:	d30c      	bcc.n	810f9e2 <__copybits+0x36>
 810f9c8:	1aa3      	subs	r3, r4, r2
 810f9ca:	3b11      	subs	r3, #17
 810f9cc:	f023 0303 	bic.w	r3, r3, #3
 810f9d0:	3211      	adds	r2, #17
 810f9d2:	42a2      	cmp	r2, r4
 810f9d4:	bf88      	it	hi
 810f9d6:	2300      	movhi	r3, #0
 810f9d8:	4418      	add	r0, r3
 810f9da:	2300      	movs	r3, #0
 810f9dc:	4288      	cmp	r0, r1
 810f9de:	d305      	bcc.n	810f9ec <__copybits+0x40>
 810f9e0:	bd70      	pop	{r4, r5, r6, pc}
 810f9e2:	f853 6b04 	ldr.w	r6, [r3], #4
 810f9e6:	f845 6f04 	str.w	r6, [r5, #4]!
 810f9ea:	e7eb      	b.n	810f9c4 <__copybits+0x18>
 810f9ec:	f840 3b04 	str.w	r3, [r0], #4
 810f9f0:	e7f4      	b.n	810f9dc <__copybits+0x30>

0810f9f2 <__any_on>:
 810f9f2:	f100 0214 	add.w	r2, r0, #20
 810f9f6:	6900      	ldr	r0, [r0, #16]
 810f9f8:	114b      	asrs	r3, r1, #5
 810f9fa:	4298      	cmp	r0, r3
 810f9fc:	b510      	push	{r4, lr}
 810f9fe:	db11      	blt.n	810fa24 <__any_on+0x32>
 810fa00:	dd0a      	ble.n	810fa18 <__any_on+0x26>
 810fa02:	f011 011f 	ands.w	r1, r1, #31
 810fa06:	d007      	beq.n	810fa18 <__any_on+0x26>
 810fa08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810fa0c:	fa24 f001 	lsr.w	r0, r4, r1
 810fa10:	fa00 f101 	lsl.w	r1, r0, r1
 810fa14:	428c      	cmp	r4, r1
 810fa16:	d10b      	bne.n	810fa30 <__any_on+0x3e>
 810fa18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810fa1c:	4293      	cmp	r3, r2
 810fa1e:	d803      	bhi.n	810fa28 <__any_on+0x36>
 810fa20:	2000      	movs	r0, #0
 810fa22:	bd10      	pop	{r4, pc}
 810fa24:	4603      	mov	r3, r0
 810fa26:	e7f7      	b.n	810fa18 <__any_on+0x26>
 810fa28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810fa2c:	2900      	cmp	r1, #0
 810fa2e:	d0f5      	beq.n	810fa1c <__any_on+0x2a>
 810fa30:	2001      	movs	r0, #1
 810fa32:	e7f6      	b.n	810fa22 <__any_on+0x30>

0810fa34 <sulp>:
 810fa34:	b570      	push	{r4, r5, r6, lr}
 810fa36:	4604      	mov	r4, r0
 810fa38:	460d      	mov	r5, r1
 810fa3a:	ec45 4b10 	vmov	d0, r4, r5
 810fa3e:	4616      	mov	r6, r2
 810fa40:	f7ff feba 	bl	810f7b8 <__ulp>
 810fa44:	ec51 0b10 	vmov	r0, r1, d0
 810fa48:	b17e      	cbz	r6, 810fa6a <sulp+0x36>
 810fa4a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810fa4e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 810fa52:	2b00      	cmp	r3, #0
 810fa54:	dd09      	ble.n	810fa6a <sulp+0x36>
 810fa56:	051b      	lsls	r3, r3, #20
 810fa58:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 810fa5c:	2400      	movs	r4, #0
 810fa5e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 810fa62:	4622      	mov	r2, r4
 810fa64:	462b      	mov	r3, r5
 810fa66:	f7f0 fe4f 	bl	8100708 <__aeabi_dmul>
 810fa6a:	ec41 0b10 	vmov	d0, r0, r1
 810fa6e:	bd70      	pop	{r4, r5, r6, pc}

0810fa70 <_strtod_l>:
 810fa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810fa74:	b09f      	sub	sp, #124	@ 0x7c
 810fa76:	460c      	mov	r4, r1
 810fa78:	9217      	str	r2, [sp, #92]	@ 0x5c
 810fa7a:	2200      	movs	r2, #0
 810fa7c:	921a      	str	r2, [sp, #104]	@ 0x68
 810fa7e:	9005      	str	r0, [sp, #20]
 810fa80:	f04f 0a00 	mov.w	sl, #0
 810fa84:	f04f 0b00 	mov.w	fp, #0
 810fa88:	460a      	mov	r2, r1
 810fa8a:	9219      	str	r2, [sp, #100]	@ 0x64
 810fa8c:	7811      	ldrb	r1, [r2, #0]
 810fa8e:	292b      	cmp	r1, #43	@ 0x2b
 810fa90:	d04a      	beq.n	810fb28 <_strtod_l+0xb8>
 810fa92:	d838      	bhi.n	810fb06 <_strtod_l+0x96>
 810fa94:	290d      	cmp	r1, #13
 810fa96:	d832      	bhi.n	810fafe <_strtod_l+0x8e>
 810fa98:	2908      	cmp	r1, #8
 810fa9a:	d832      	bhi.n	810fb02 <_strtod_l+0x92>
 810fa9c:	2900      	cmp	r1, #0
 810fa9e:	d03b      	beq.n	810fb18 <_strtod_l+0xa8>
 810faa0:	2200      	movs	r2, #0
 810faa2:	920b      	str	r2, [sp, #44]	@ 0x2c
 810faa4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 810faa6:	782a      	ldrb	r2, [r5, #0]
 810faa8:	2a30      	cmp	r2, #48	@ 0x30
 810faaa:	f040 80b3 	bne.w	810fc14 <_strtod_l+0x1a4>
 810faae:	786a      	ldrb	r2, [r5, #1]
 810fab0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 810fab4:	2a58      	cmp	r2, #88	@ 0x58
 810fab6:	d16e      	bne.n	810fb96 <_strtod_l+0x126>
 810fab8:	9302      	str	r3, [sp, #8]
 810faba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810fabc:	9301      	str	r3, [sp, #4]
 810fabe:	ab1a      	add	r3, sp, #104	@ 0x68
 810fac0:	9300      	str	r3, [sp, #0]
 810fac2:	4a8e      	ldr	r2, [pc, #568]	@ (810fcfc <_strtod_l+0x28c>)
 810fac4:	9805      	ldr	r0, [sp, #20]
 810fac6:	ab1b      	add	r3, sp, #108	@ 0x6c
 810fac8:	a919      	add	r1, sp, #100	@ 0x64
 810faca:	f001 fadb 	bl	8111084 <__gethex>
 810face:	f010 060f 	ands.w	r6, r0, #15
 810fad2:	4604      	mov	r4, r0
 810fad4:	d005      	beq.n	810fae2 <_strtod_l+0x72>
 810fad6:	2e06      	cmp	r6, #6
 810fad8:	d128      	bne.n	810fb2c <_strtod_l+0xbc>
 810fada:	3501      	adds	r5, #1
 810fadc:	2300      	movs	r3, #0
 810fade:	9519      	str	r5, [sp, #100]	@ 0x64
 810fae0:	930b      	str	r3, [sp, #44]	@ 0x2c
 810fae2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810fae4:	2b00      	cmp	r3, #0
 810fae6:	f040 858e 	bne.w	8110606 <_strtod_l+0xb96>
 810faea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810faec:	b1cb      	cbz	r3, 810fb22 <_strtod_l+0xb2>
 810faee:	4652      	mov	r2, sl
 810faf0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 810faf4:	ec43 2b10 	vmov	d0, r2, r3
 810faf8:	b01f      	add	sp, #124	@ 0x7c
 810fafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810fafe:	2920      	cmp	r1, #32
 810fb00:	d1ce      	bne.n	810faa0 <_strtod_l+0x30>
 810fb02:	3201      	adds	r2, #1
 810fb04:	e7c1      	b.n	810fa8a <_strtod_l+0x1a>
 810fb06:	292d      	cmp	r1, #45	@ 0x2d
 810fb08:	d1ca      	bne.n	810faa0 <_strtod_l+0x30>
 810fb0a:	2101      	movs	r1, #1
 810fb0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 810fb0e:	1c51      	adds	r1, r2, #1
 810fb10:	9119      	str	r1, [sp, #100]	@ 0x64
 810fb12:	7852      	ldrb	r2, [r2, #1]
 810fb14:	2a00      	cmp	r2, #0
 810fb16:	d1c5      	bne.n	810faa4 <_strtod_l+0x34>
 810fb18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810fb1a:	9419      	str	r4, [sp, #100]	@ 0x64
 810fb1c:	2b00      	cmp	r3, #0
 810fb1e:	f040 8570 	bne.w	8110602 <_strtod_l+0xb92>
 810fb22:	4652      	mov	r2, sl
 810fb24:	465b      	mov	r3, fp
 810fb26:	e7e5      	b.n	810faf4 <_strtod_l+0x84>
 810fb28:	2100      	movs	r1, #0
 810fb2a:	e7ef      	b.n	810fb0c <_strtod_l+0x9c>
 810fb2c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 810fb2e:	b13a      	cbz	r2, 810fb40 <_strtod_l+0xd0>
 810fb30:	2135      	movs	r1, #53	@ 0x35
 810fb32:	a81c      	add	r0, sp, #112	@ 0x70
 810fb34:	f7ff ff3a 	bl	810f9ac <__copybits>
 810fb38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810fb3a:	9805      	ldr	r0, [sp, #20]
 810fb3c:	f7ff fb08 	bl	810f150 <_Bfree>
 810fb40:	3e01      	subs	r6, #1
 810fb42:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 810fb44:	2e04      	cmp	r6, #4
 810fb46:	d806      	bhi.n	810fb56 <_strtod_l+0xe6>
 810fb48:	e8df f006 	tbb	[pc, r6]
 810fb4c:	201d0314 	.word	0x201d0314
 810fb50:	14          	.byte	0x14
 810fb51:	00          	.byte	0x00
 810fb52:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 810fb56:	05e1      	lsls	r1, r4, #23
 810fb58:	bf48      	it	mi
 810fb5a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 810fb5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810fb62:	0d1b      	lsrs	r3, r3, #20
 810fb64:	051b      	lsls	r3, r3, #20
 810fb66:	2b00      	cmp	r3, #0
 810fb68:	d1bb      	bne.n	810fae2 <_strtod_l+0x72>
 810fb6a:	f7fe fb03 	bl	810e174 <__errno>
 810fb6e:	2322      	movs	r3, #34	@ 0x22
 810fb70:	6003      	str	r3, [r0, #0]
 810fb72:	e7b6      	b.n	810fae2 <_strtod_l+0x72>
 810fb74:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 810fb78:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 810fb7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 810fb80:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810fb84:	e7e7      	b.n	810fb56 <_strtod_l+0xe6>
 810fb86:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 810fd04 <_strtod_l+0x294>
 810fb8a:	e7e4      	b.n	810fb56 <_strtod_l+0xe6>
 810fb8c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 810fb90:	f04f 3aff 	mov.w	sl, #4294967295
 810fb94:	e7df      	b.n	810fb56 <_strtod_l+0xe6>
 810fb96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810fb98:	1c5a      	adds	r2, r3, #1
 810fb9a:	9219      	str	r2, [sp, #100]	@ 0x64
 810fb9c:	785b      	ldrb	r3, [r3, #1]
 810fb9e:	2b30      	cmp	r3, #48	@ 0x30
 810fba0:	d0f9      	beq.n	810fb96 <_strtod_l+0x126>
 810fba2:	2b00      	cmp	r3, #0
 810fba4:	d09d      	beq.n	810fae2 <_strtod_l+0x72>
 810fba6:	2301      	movs	r3, #1
 810fba8:	9309      	str	r3, [sp, #36]	@ 0x24
 810fbaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810fbac:	930c      	str	r3, [sp, #48]	@ 0x30
 810fbae:	2300      	movs	r3, #0
 810fbb0:	9308      	str	r3, [sp, #32]
 810fbb2:	930a      	str	r3, [sp, #40]	@ 0x28
 810fbb4:	461f      	mov	r7, r3
 810fbb6:	220a      	movs	r2, #10
 810fbb8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 810fbba:	7805      	ldrb	r5, [r0, #0]
 810fbbc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 810fbc0:	b2d9      	uxtb	r1, r3
 810fbc2:	2909      	cmp	r1, #9
 810fbc4:	d928      	bls.n	810fc18 <_strtod_l+0x1a8>
 810fbc6:	494e      	ldr	r1, [pc, #312]	@ (810fd00 <_strtod_l+0x290>)
 810fbc8:	2201      	movs	r2, #1
 810fbca:	f001 f98b 	bl	8110ee4 <strncmp>
 810fbce:	2800      	cmp	r0, #0
 810fbd0:	d032      	beq.n	810fc38 <_strtod_l+0x1c8>
 810fbd2:	2000      	movs	r0, #0
 810fbd4:	462a      	mov	r2, r5
 810fbd6:	4681      	mov	r9, r0
 810fbd8:	463d      	mov	r5, r7
 810fbda:	4603      	mov	r3, r0
 810fbdc:	2a65      	cmp	r2, #101	@ 0x65
 810fbde:	d001      	beq.n	810fbe4 <_strtod_l+0x174>
 810fbe0:	2a45      	cmp	r2, #69	@ 0x45
 810fbe2:	d114      	bne.n	810fc0e <_strtod_l+0x19e>
 810fbe4:	b91d      	cbnz	r5, 810fbee <_strtod_l+0x17e>
 810fbe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810fbe8:	4302      	orrs	r2, r0
 810fbea:	d095      	beq.n	810fb18 <_strtod_l+0xa8>
 810fbec:	2500      	movs	r5, #0
 810fbee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 810fbf0:	1c62      	adds	r2, r4, #1
 810fbf2:	9219      	str	r2, [sp, #100]	@ 0x64
 810fbf4:	7862      	ldrb	r2, [r4, #1]
 810fbf6:	2a2b      	cmp	r2, #43	@ 0x2b
 810fbf8:	d077      	beq.n	810fcea <_strtod_l+0x27a>
 810fbfa:	2a2d      	cmp	r2, #45	@ 0x2d
 810fbfc:	d07b      	beq.n	810fcf6 <_strtod_l+0x286>
 810fbfe:	f04f 0c00 	mov.w	ip, #0
 810fc02:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 810fc06:	2909      	cmp	r1, #9
 810fc08:	f240 8082 	bls.w	810fd10 <_strtod_l+0x2a0>
 810fc0c:	9419      	str	r4, [sp, #100]	@ 0x64
 810fc0e:	f04f 0800 	mov.w	r8, #0
 810fc12:	e0a2      	b.n	810fd5a <_strtod_l+0x2ea>
 810fc14:	2300      	movs	r3, #0
 810fc16:	e7c7      	b.n	810fba8 <_strtod_l+0x138>
 810fc18:	2f08      	cmp	r7, #8
 810fc1a:	bfd5      	itete	le
 810fc1c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 810fc1e:	9908      	ldrgt	r1, [sp, #32]
 810fc20:	fb02 3301 	mlale	r3, r2, r1, r3
 810fc24:	fb02 3301 	mlagt	r3, r2, r1, r3
 810fc28:	f100 0001 	add.w	r0, r0, #1
 810fc2c:	bfd4      	ite	le
 810fc2e:	930a      	strle	r3, [sp, #40]	@ 0x28
 810fc30:	9308      	strgt	r3, [sp, #32]
 810fc32:	3701      	adds	r7, #1
 810fc34:	9019      	str	r0, [sp, #100]	@ 0x64
 810fc36:	e7bf      	b.n	810fbb8 <_strtod_l+0x148>
 810fc38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810fc3a:	1c5a      	adds	r2, r3, #1
 810fc3c:	9219      	str	r2, [sp, #100]	@ 0x64
 810fc3e:	785a      	ldrb	r2, [r3, #1]
 810fc40:	b37f      	cbz	r7, 810fca2 <_strtod_l+0x232>
 810fc42:	4681      	mov	r9, r0
 810fc44:	463d      	mov	r5, r7
 810fc46:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 810fc4a:	2b09      	cmp	r3, #9
 810fc4c:	d912      	bls.n	810fc74 <_strtod_l+0x204>
 810fc4e:	2301      	movs	r3, #1
 810fc50:	e7c4      	b.n	810fbdc <_strtod_l+0x16c>
 810fc52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810fc54:	1c5a      	adds	r2, r3, #1
 810fc56:	9219      	str	r2, [sp, #100]	@ 0x64
 810fc58:	785a      	ldrb	r2, [r3, #1]
 810fc5a:	3001      	adds	r0, #1
 810fc5c:	2a30      	cmp	r2, #48	@ 0x30
 810fc5e:	d0f8      	beq.n	810fc52 <_strtod_l+0x1e2>
 810fc60:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 810fc64:	2b08      	cmp	r3, #8
 810fc66:	f200 84d3 	bhi.w	8110610 <_strtod_l+0xba0>
 810fc6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810fc6c:	930c      	str	r3, [sp, #48]	@ 0x30
 810fc6e:	4681      	mov	r9, r0
 810fc70:	2000      	movs	r0, #0
 810fc72:	4605      	mov	r5, r0
 810fc74:	3a30      	subs	r2, #48	@ 0x30
 810fc76:	f100 0301 	add.w	r3, r0, #1
 810fc7a:	d02a      	beq.n	810fcd2 <_strtod_l+0x262>
 810fc7c:	4499      	add	r9, r3
 810fc7e:	eb00 0c05 	add.w	ip, r0, r5
 810fc82:	462b      	mov	r3, r5
 810fc84:	210a      	movs	r1, #10
 810fc86:	4563      	cmp	r3, ip
 810fc88:	d10d      	bne.n	810fca6 <_strtod_l+0x236>
 810fc8a:	1c69      	adds	r1, r5, #1
 810fc8c:	4401      	add	r1, r0
 810fc8e:	4428      	add	r0, r5
 810fc90:	2808      	cmp	r0, #8
 810fc92:	dc16      	bgt.n	810fcc2 <_strtod_l+0x252>
 810fc94:	980a      	ldr	r0, [sp, #40]	@ 0x28
 810fc96:	230a      	movs	r3, #10
 810fc98:	fb03 2300 	mla	r3, r3, r0, r2
 810fc9c:	930a      	str	r3, [sp, #40]	@ 0x28
 810fc9e:	2300      	movs	r3, #0
 810fca0:	e018      	b.n	810fcd4 <_strtod_l+0x264>
 810fca2:	4638      	mov	r0, r7
 810fca4:	e7da      	b.n	810fc5c <_strtod_l+0x1ec>
 810fca6:	2b08      	cmp	r3, #8
 810fca8:	f103 0301 	add.w	r3, r3, #1
 810fcac:	dc03      	bgt.n	810fcb6 <_strtod_l+0x246>
 810fcae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 810fcb0:	434e      	muls	r6, r1
 810fcb2:	960a      	str	r6, [sp, #40]	@ 0x28
 810fcb4:	e7e7      	b.n	810fc86 <_strtod_l+0x216>
 810fcb6:	2b10      	cmp	r3, #16
 810fcb8:	bfde      	ittt	le
 810fcba:	9e08      	ldrle	r6, [sp, #32]
 810fcbc:	434e      	mulle	r6, r1
 810fcbe:	9608      	strle	r6, [sp, #32]
 810fcc0:	e7e1      	b.n	810fc86 <_strtod_l+0x216>
 810fcc2:	280f      	cmp	r0, #15
 810fcc4:	dceb      	bgt.n	810fc9e <_strtod_l+0x22e>
 810fcc6:	9808      	ldr	r0, [sp, #32]
 810fcc8:	230a      	movs	r3, #10
 810fcca:	fb03 2300 	mla	r3, r3, r0, r2
 810fcce:	9308      	str	r3, [sp, #32]
 810fcd0:	e7e5      	b.n	810fc9e <_strtod_l+0x22e>
 810fcd2:	4629      	mov	r1, r5
 810fcd4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810fcd6:	1c50      	adds	r0, r2, #1
 810fcd8:	9019      	str	r0, [sp, #100]	@ 0x64
 810fcda:	7852      	ldrb	r2, [r2, #1]
 810fcdc:	4618      	mov	r0, r3
 810fcde:	460d      	mov	r5, r1
 810fce0:	e7b1      	b.n	810fc46 <_strtod_l+0x1d6>
 810fce2:	f04f 0900 	mov.w	r9, #0
 810fce6:	2301      	movs	r3, #1
 810fce8:	e77d      	b.n	810fbe6 <_strtod_l+0x176>
 810fcea:	f04f 0c00 	mov.w	ip, #0
 810fcee:	1ca2      	adds	r2, r4, #2
 810fcf0:	9219      	str	r2, [sp, #100]	@ 0x64
 810fcf2:	78a2      	ldrb	r2, [r4, #2]
 810fcf4:	e785      	b.n	810fc02 <_strtod_l+0x192>
 810fcf6:	f04f 0c01 	mov.w	ip, #1
 810fcfa:	e7f8      	b.n	810fcee <_strtod_l+0x27e>
 810fcfc:	08111aa0 	.word	0x08111aa0
 810fd00:	08111a88 	.word	0x08111a88
 810fd04:	7ff00000 	.word	0x7ff00000
 810fd08:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810fd0a:	1c51      	adds	r1, r2, #1
 810fd0c:	9119      	str	r1, [sp, #100]	@ 0x64
 810fd0e:	7852      	ldrb	r2, [r2, #1]
 810fd10:	2a30      	cmp	r2, #48	@ 0x30
 810fd12:	d0f9      	beq.n	810fd08 <_strtod_l+0x298>
 810fd14:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 810fd18:	2908      	cmp	r1, #8
 810fd1a:	f63f af78 	bhi.w	810fc0e <_strtod_l+0x19e>
 810fd1e:	3a30      	subs	r2, #48	@ 0x30
 810fd20:	920e      	str	r2, [sp, #56]	@ 0x38
 810fd22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810fd24:	920f      	str	r2, [sp, #60]	@ 0x3c
 810fd26:	f04f 080a 	mov.w	r8, #10
 810fd2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810fd2c:	1c56      	adds	r6, r2, #1
 810fd2e:	9619      	str	r6, [sp, #100]	@ 0x64
 810fd30:	7852      	ldrb	r2, [r2, #1]
 810fd32:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 810fd36:	f1be 0f09 	cmp.w	lr, #9
 810fd3a:	d939      	bls.n	810fdb0 <_strtod_l+0x340>
 810fd3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 810fd3e:	1a76      	subs	r6, r6, r1
 810fd40:	2e08      	cmp	r6, #8
 810fd42:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 810fd46:	dc03      	bgt.n	810fd50 <_strtod_l+0x2e0>
 810fd48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 810fd4a:	4588      	cmp	r8, r1
 810fd4c:	bfa8      	it	ge
 810fd4e:	4688      	movge	r8, r1
 810fd50:	f1bc 0f00 	cmp.w	ip, #0
 810fd54:	d001      	beq.n	810fd5a <_strtod_l+0x2ea>
 810fd56:	f1c8 0800 	rsb	r8, r8, #0
 810fd5a:	2d00      	cmp	r5, #0
 810fd5c:	d14e      	bne.n	810fdfc <_strtod_l+0x38c>
 810fd5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810fd60:	4308      	orrs	r0, r1
 810fd62:	f47f aebe 	bne.w	810fae2 <_strtod_l+0x72>
 810fd66:	2b00      	cmp	r3, #0
 810fd68:	f47f aed6 	bne.w	810fb18 <_strtod_l+0xa8>
 810fd6c:	2a69      	cmp	r2, #105	@ 0x69
 810fd6e:	d028      	beq.n	810fdc2 <_strtod_l+0x352>
 810fd70:	dc25      	bgt.n	810fdbe <_strtod_l+0x34e>
 810fd72:	2a49      	cmp	r2, #73	@ 0x49
 810fd74:	d025      	beq.n	810fdc2 <_strtod_l+0x352>
 810fd76:	2a4e      	cmp	r2, #78	@ 0x4e
 810fd78:	f47f aece 	bne.w	810fb18 <_strtod_l+0xa8>
 810fd7c:	499b      	ldr	r1, [pc, #620]	@ (810ffec <_strtod_l+0x57c>)
 810fd7e:	a819      	add	r0, sp, #100	@ 0x64
 810fd80:	f001 fba2 	bl	81114c8 <__match>
 810fd84:	2800      	cmp	r0, #0
 810fd86:	f43f aec7 	beq.w	810fb18 <_strtod_l+0xa8>
 810fd8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810fd8c:	781b      	ldrb	r3, [r3, #0]
 810fd8e:	2b28      	cmp	r3, #40	@ 0x28
 810fd90:	d12e      	bne.n	810fdf0 <_strtod_l+0x380>
 810fd92:	4997      	ldr	r1, [pc, #604]	@ (810fff0 <_strtod_l+0x580>)
 810fd94:	aa1c      	add	r2, sp, #112	@ 0x70
 810fd96:	a819      	add	r0, sp, #100	@ 0x64
 810fd98:	f001 fbaa 	bl	81114f0 <__hexnan>
 810fd9c:	2805      	cmp	r0, #5
 810fd9e:	d127      	bne.n	810fdf0 <_strtod_l+0x380>
 810fda0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 810fda2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 810fda6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 810fdaa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 810fdae:	e698      	b.n	810fae2 <_strtod_l+0x72>
 810fdb0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 810fdb2:	fb08 2101 	mla	r1, r8, r1, r2
 810fdb6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 810fdba:	920e      	str	r2, [sp, #56]	@ 0x38
 810fdbc:	e7b5      	b.n	810fd2a <_strtod_l+0x2ba>
 810fdbe:	2a6e      	cmp	r2, #110	@ 0x6e
 810fdc0:	e7da      	b.n	810fd78 <_strtod_l+0x308>
 810fdc2:	498c      	ldr	r1, [pc, #560]	@ (810fff4 <_strtod_l+0x584>)
 810fdc4:	a819      	add	r0, sp, #100	@ 0x64
 810fdc6:	f001 fb7f 	bl	81114c8 <__match>
 810fdca:	2800      	cmp	r0, #0
 810fdcc:	f43f aea4 	beq.w	810fb18 <_strtod_l+0xa8>
 810fdd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810fdd2:	4989      	ldr	r1, [pc, #548]	@ (810fff8 <_strtod_l+0x588>)
 810fdd4:	3b01      	subs	r3, #1
 810fdd6:	a819      	add	r0, sp, #100	@ 0x64
 810fdd8:	9319      	str	r3, [sp, #100]	@ 0x64
 810fdda:	f001 fb75 	bl	81114c8 <__match>
 810fdde:	b910      	cbnz	r0, 810fde6 <_strtod_l+0x376>
 810fde0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810fde2:	3301      	adds	r3, #1
 810fde4:	9319      	str	r3, [sp, #100]	@ 0x64
 810fde6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8110008 <_strtod_l+0x598>
 810fdea:	f04f 0a00 	mov.w	sl, #0
 810fdee:	e678      	b.n	810fae2 <_strtod_l+0x72>
 810fdf0:	4882      	ldr	r0, [pc, #520]	@ (810fffc <_strtod_l+0x58c>)
 810fdf2:	f001 f8bd 	bl	8110f70 <nan>
 810fdf6:	ec5b ab10 	vmov	sl, fp, d0
 810fdfa:	e672      	b.n	810fae2 <_strtod_l+0x72>
 810fdfc:	eba8 0309 	sub.w	r3, r8, r9
 810fe00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 810fe02:	9309      	str	r3, [sp, #36]	@ 0x24
 810fe04:	2f00      	cmp	r7, #0
 810fe06:	bf08      	it	eq
 810fe08:	462f      	moveq	r7, r5
 810fe0a:	2d10      	cmp	r5, #16
 810fe0c:	462c      	mov	r4, r5
 810fe0e:	bfa8      	it	ge
 810fe10:	2410      	movge	r4, #16
 810fe12:	f7f0 fbff 	bl	8100614 <__aeabi_ui2d>
 810fe16:	2d09      	cmp	r5, #9
 810fe18:	4682      	mov	sl, r0
 810fe1a:	468b      	mov	fp, r1
 810fe1c:	dc13      	bgt.n	810fe46 <_strtod_l+0x3d6>
 810fe1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810fe20:	2b00      	cmp	r3, #0
 810fe22:	f43f ae5e 	beq.w	810fae2 <_strtod_l+0x72>
 810fe26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810fe28:	dd78      	ble.n	810ff1c <_strtod_l+0x4ac>
 810fe2a:	2b16      	cmp	r3, #22
 810fe2c:	dc5f      	bgt.n	810feee <_strtod_l+0x47e>
 810fe2e:	4974      	ldr	r1, [pc, #464]	@ (8110000 <_strtod_l+0x590>)
 810fe30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810fe34:	e9d1 0100 	ldrd	r0, r1, [r1]
 810fe38:	4652      	mov	r2, sl
 810fe3a:	465b      	mov	r3, fp
 810fe3c:	f7f0 fc64 	bl	8100708 <__aeabi_dmul>
 810fe40:	4682      	mov	sl, r0
 810fe42:	468b      	mov	fp, r1
 810fe44:	e64d      	b.n	810fae2 <_strtod_l+0x72>
 810fe46:	4b6e      	ldr	r3, [pc, #440]	@ (8110000 <_strtod_l+0x590>)
 810fe48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810fe4c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 810fe50:	f7f0 fc5a 	bl	8100708 <__aeabi_dmul>
 810fe54:	4682      	mov	sl, r0
 810fe56:	9808      	ldr	r0, [sp, #32]
 810fe58:	468b      	mov	fp, r1
 810fe5a:	f7f0 fbdb 	bl	8100614 <__aeabi_ui2d>
 810fe5e:	4602      	mov	r2, r0
 810fe60:	460b      	mov	r3, r1
 810fe62:	4650      	mov	r0, sl
 810fe64:	4659      	mov	r1, fp
 810fe66:	f7f0 fa99 	bl	810039c <__adddf3>
 810fe6a:	2d0f      	cmp	r5, #15
 810fe6c:	4682      	mov	sl, r0
 810fe6e:	468b      	mov	fp, r1
 810fe70:	ddd5      	ble.n	810fe1e <_strtod_l+0x3ae>
 810fe72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810fe74:	1b2c      	subs	r4, r5, r4
 810fe76:	441c      	add	r4, r3
 810fe78:	2c00      	cmp	r4, #0
 810fe7a:	f340 8096 	ble.w	810ffaa <_strtod_l+0x53a>
 810fe7e:	f014 030f 	ands.w	r3, r4, #15
 810fe82:	d00a      	beq.n	810fe9a <_strtod_l+0x42a>
 810fe84:	495e      	ldr	r1, [pc, #376]	@ (8110000 <_strtod_l+0x590>)
 810fe86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810fe8a:	4652      	mov	r2, sl
 810fe8c:	465b      	mov	r3, fp
 810fe8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810fe92:	f7f0 fc39 	bl	8100708 <__aeabi_dmul>
 810fe96:	4682      	mov	sl, r0
 810fe98:	468b      	mov	fp, r1
 810fe9a:	f034 040f 	bics.w	r4, r4, #15
 810fe9e:	d073      	beq.n	810ff88 <_strtod_l+0x518>
 810fea0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 810fea4:	dd48      	ble.n	810ff38 <_strtod_l+0x4c8>
 810fea6:	2400      	movs	r4, #0
 810fea8:	46a0      	mov	r8, r4
 810feaa:	940a      	str	r4, [sp, #40]	@ 0x28
 810feac:	46a1      	mov	r9, r4
 810feae:	9a05      	ldr	r2, [sp, #20]
 810feb0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8110008 <_strtod_l+0x598>
 810feb4:	2322      	movs	r3, #34	@ 0x22
 810feb6:	6013      	str	r3, [r2, #0]
 810feb8:	f04f 0a00 	mov.w	sl, #0
 810febc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810febe:	2b00      	cmp	r3, #0
 810fec0:	f43f ae0f 	beq.w	810fae2 <_strtod_l+0x72>
 810fec4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810fec6:	9805      	ldr	r0, [sp, #20]
 810fec8:	f7ff f942 	bl	810f150 <_Bfree>
 810fecc:	9805      	ldr	r0, [sp, #20]
 810fece:	4649      	mov	r1, r9
 810fed0:	f7ff f93e 	bl	810f150 <_Bfree>
 810fed4:	9805      	ldr	r0, [sp, #20]
 810fed6:	4641      	mov	r1, r8
 810fed8:	f7ff f93a 	bl	810f150 <_Bfree>
 810fedc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810fede:	9805      	ldr	r0, [sp, #20]
 810fee0:	f7ff f936 	bl	810f150 <_Bfree>
 810fee4:	9805      	ldr	r0, [sp, #20]
 810fee6:	4621      	mov	r1, r4
 810fee8:	f7ff f932 	bl	810f150 <_Bfree>
 810feec:	e5f9      	b.n	810fae2 <_strtod_l+0x72>
 810feee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810fef0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 810fef4:	4293      	cmp	r3, r2
 810fef6:	dbbc      	blt.n	810fe72 <_strtod_l+0x402>
 810fef8:	4c41      	ldr	r4, [pc, #260]	@ (8110000 <_strtod_l+0x590>)
 810fefa:	f1c5 050f 	rsb	r5, r5, #15
 810fefe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810ff02:	4652      	mov	r2, sl
 810ff04:	465b      	mov	r3, fp
 810ff06:	e9d1 0100 	ldrd	r0, r1, [r1]
 810ff0a:	f7f0 fbfd 	bl	8100708 <__aeabi_dmul>
 810ff0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ff10:	1b5d      	subs	r5, r3, r5
 810ff12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810ff16:	e9d4 2300 	ldrd	r2, r3, [r4]
 810ff1a:	e78f      	b.n	810fe3c <_strtod_l+0x3cc>
 810ff1c:	3316      	adds	r3, #22
 810ff1e:	dba8      	blt.n	810fe72 <_strtod_l+0x402>
 810ff20:	4b37      	ldr	r3, [pc, #220]	@ (8110000 <_strtod_l+0x590>)
 810ff22:	eba9 0808 	sub.w	r8, r9, r8
 810ff26:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 810ff2a:	e9d8 2300 	ldrd	r2, r3, [r8]
 810ff2e:	4650      	mov	r0, sl
 810ff30:	4659      	mov	r1, fp
 810ff32:	f7f0 fd13 	bl	810095c <__aeabi_ddiv>
 810ff36:	e783      	b.n	810fe40 <_strtod_l+0x3d0>
 810ff38:	4b32      	ldr	r3, [pc, #200]	@ (8110004 <_strtod_l+0x594>)
 810ff3a:	9308      	str	r3, [sp, #32]
 810ff3c:	2300      	movs	r3, #0
 810ff3e:	1124      	asrs	r4, r4, #4
 810ff40:	4650      	mov	r0, sl
 810ff42:	4659      	mov	r1, fp
 810ff44:	461e      	mov	r6, r3
 810ff46:	2c01      	cmp	r4, #1
 810ff48:	dc21      	bgt.n	810ff8e <_strtod_l+0x51e>
 810ff4a:	b10b      	cbz	r3, 810ff50 <_strtod_l+0x4e0>
 810ff4c:	4682      	mov	sl, r0
 810ff4e:	468b      	mov	fp, r1
 810ff50:	492c      	ldr	r1, [pc, #176]	@ (8110004 <_strtod_l+0x594>)
 810ff52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 810ff56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 810ff5a:	4652      	mov	r2, sl
 810ff5c:	465b      	mov	r3, fp
 810ff5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810ff62:	f7f0 fbd1 	bl	8100708 <__aeabi_dmul>
 810ff66:	4b28      	ldr	r3, [pc, #160]	@ (8110008 <_strtod_l+0x598>)
 810ff68:	460a      	mov	r2, r1
 810ff6a:	400b      	ands	r3, r1
 810ff6c:	4927      	ldr	r1, [pc, #156]	@ (811000c <_strtod_l+0x59c>)
 810ff6e:	428b      	cmp	r3, r1
 810ff70:	4682      	mov	sl, r0
 810ff72:	d898      	bhi.n	810fea6 <_strtod_l+0x436>
 810ff74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 810ff78:	428b      	cmp	r3, r1
 810ff7a:	bf86      	itte	hi
 810ff7c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8110010 <_strtod_l+0x5a0>
 810ff80:	f04f 3aff 	movhi.w	sl, #4294967295
 810ff84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 810ff88:	2300      	movs	r3, #0
 810ff8a:	9308      	str	r3, [sp, #32]
 810ff8c:	e07a      	b.n	8110084 <_strtod_l+0x614>
 810ff8e:	07e2      	lsls	r2, r4, #31
 810ff90:	d505      	bpl.n	810ff9e <_strtod_l+0x52e>
 810ff92:	9b08      	ldr	r3, [sp, #32]
 810ff94:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ff98:	f7f0 fbb6 	bl	8100708 <__aeabi_dmul>
 810ff9c:	2301      	movs	r3, #1
 810ff9e:	9a08      	ldr	r2, [sp, #32]
 810ffa0:	3208      	adds	r2, #8
 810ffa2:	3601      	adds	r6, #1
 810ffa4:	1064      	asrs	r4, r4, #1
 810ffa6:	9208      	str	r2, [sp, #32]
 810ffa8:	e7cd      	b.n	810ff46 <_strtod_l+0x4d6>
 810ffaa:	d0ed      	beq.n	810ff88 <_strtod_l+0x518>
 810ffac:	4264      	negs	r4, r4
 810ffae:	f014 020f 	ands.w	r2, r4, #15
 810ffb2:	d00a      	beq.n	810ffca <_strtod_l+0x55a>
 810ffb4:	4b12      	ldr	r3, [pc, #72]	@ (8110000 <_strtod_l+0x590>)
 810ffb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810ffba:	4650      	mov	r0, sl
 810ffbc:	4659      	mov	r1, fp
 810ffbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ffc2:	f7f0 fccb 	bl	810095c <__aeabi_ddiv>
 810ffc6:	4682      	mov	sl, r0
 810ffc8:	468b      	mov	fp, r1
 810ffca:	1124      	asrs	r4, r4, #4
 810ffcc:	d0dc      	beq.n	810ff88 <_strtod_l+0x518>
 810ffce:	2c1f      	cmp	r4, #31
 810ffd0:	dd20      	ble.n	8110014 <_strtod_l+0x5a4>
 810ffd2:	2400      	movs	r4, #0
 810ffd4:	46a0      	mov	r8, r4
 810ffd6:	940a      	str	r4, [sp, #40]	@ 0x28
 810ffd8:	46a1      	mov	r9, r4
 810ffda:	9a05      	ldr	r2, [sp, #20]
 810ffdc:	2322      	movs	r3, #34	@ 0x22
 810ffde:	f04f 0a00 	mov.w	sl, #0
 810ffe2:	f04f 0b00 	mov.w	fp, #0
 810ffe6:	6013      	str	r3, [r2, #0]
 810ffe8:	e768      	b.n	810febc <_strtod_l+0x44c>
 810ffea:	bf00      	nop
 810ffec:	08111854 	.word	0x08111854
 810fff0:	08111a8c 	.word	0x08111a8c
 810fff4:	0811184c 	.word	0x0811184c
 810fff8:	081118bf 	.word	0x081118bf
 810fffc:	081118bb 	.word	0x081118bb
 8110000:	081119c0 	.word	0x081119c0
 8110004:	08111998 	.word	0x08111998
 8110008:	7ff00000 	.word	0x7ff00000
 811000c:	7ca00000 	.word	0x7ca00000
 8110010:	7fefffff 	.word	0x7fefffff
 8110014:	f014 0310 	ands.w	r3, r4, #16
 8110018:	bf18      	it	ne
 811001a:	236a      	movne	r3, #106	@ 0x6a
 811001c:	4ea9      	ldr	r6, [pc, #676]	@ (81102c4 <_strtod_l+0x854>)
 811001e:	9308      	str	r3, [sp, #32]
 8110020:	4650      	mov	r0, sl
 8110022:	4659      	mov	r1, fp
 8110024:	2300      	movs	r3, #0
 8110026:	07e2      	lsls	r2, r4, #31
 8110028:	d504      	bpl.n	8110034 <_strtod_l+0x5c4>
 811002a:	e9d6 2300 	ldrd	r2, r3, [r6]
 811002e:	f7f0 fb6b 	bl	8100708 <__aeabi_dmul>
 8110032:	2301      	movs	r3, #1
 8110034:	1064      	asrs	r4, r4, #1
 8110036:	f106 0608 	add.w	r6, r6, #8
 811003a:	d1f4      	bne.n	8110026 <_strtod_l+0x5b6>
 811003c:	b10b      	cbz	r3, 8110042 <_strtod_l+0x5d2>
 811003e:	4682      	mov	sl, r0
 8110040:	468b      	mov	fp, r1
 8110042:	9b08      	ldr	r3, [sp, #32]
 8110044:	b1b3      	cbz	r3, 8110074 <_strtod_l+0x604>
 8110046:	f3cb 520a 	ubfx	r2, fp, #20, #11
 811004a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 811004e:	2b00      	cmp	r3, #0
 8110050:	4659      	mov	r1, fp
 8110052:	dd0f      	ble.n	8110074 <_strtod_l+0x604>
 8110054:	2b1f      	cmp	r3, #31
 8110056:	dd55      	ble.n	8110104 <_strtod_l+0x694>
 8110058:	2b34      	cmp	r3, #52	@ 0x34
 811005a:	bfde      	ittt	le
 811005c:	f04f 33ff 	movle.w	r3, #4294967295
 8110060:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8110064:	4093      	lslle	r3, r2
 8110066:	f04f 0a00 	mov.w	sl, #0
 811006a:	bfcc      	ite	gt
 811006c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8110070:	ea03 0b01 	andle.w	fp, r3, r1
 8110074:	2200      	movs	r2, #0
 8110076:	2300      	movs	r3, #0
 8110078:	4650      	mov	r0, sl
 811007a:	4659      	mov	r1, fp
 811007c:	f7f0 fdac 	bl	8100bd8 <__aeabi_dcmpeq>
 8110080:	2800      	cmp	r0, #0
 8110082:	d1a6      	bne.n	810ffd2 <_strtod_l+0x562>
 8110084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8110086:	9300      	str	r3, [sp, #0]
 8110088:	990c      	ldr	r1, [sp, #48]	@ 0x30
 811008a:	9805      	ldr	r0, [sp, #20]
 811008c:	462b      	mov	r3, r5
 811008e:	463a      	mov	r2, r7
 8110090:	f7ff f8c6 	bl	810f220 <__s2b>
 8110094:	900a      	str	r0, [sp, #40]	@ 0x28
 8110096:	2800      	cmp	r0, #0
 8110098:	f43f af05 	beq.w	810fea6 <_strtod_l+0x436>
 811009c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 811009e:	2a00      	cmp	r2, #0
 81100a0:	eba9 0308 	sub.w	r3, r9, r8
 81100a4:	bfa8      	it	ge
 81100a6:	2300      	movge	r3, #0
 81100a8:	9312      	str	r3, [sp, #72]	@ 0x48
 81100aa:	2400      	movs	r4, #0
 81100ac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 81100b0:	9316      	str	r3, [sp, #88]	@ 0x58
 81100b2:	46a0      	mov	r8, r4
 81100b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81100b6:	9805      	ldr	r0, [sp, #20]
 81100b8:	6859      	ldr	r1, [r3, #4]
 81100ba:	f7ff f809 	bl	810f0d0 <_Balloc>
 81100be:	4681      	mov	r9, r0
 81100c0:	2800      	cmp	r0, #0
 81100c2:	f43f aef4 	beq.w	810feae <_strtod_l+0x43e>
 81100c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81100c8:	691a      	ldr	r2, [r3, #16]
 81100ca:	3202      	adds	r2, #2
 81100cc:	f103 010c 	add.w	r1, r3, #12
 81100d0:	0092      	lsls	r2, r2, #2
 81100d2:	300c      	adds	r0, #12
 81100d4:	f7fe f87b 	bl	810e1ce <memcpy>
 81100d8:	ec4b ab10 	vmov	d0, sl, fp
 81100dc:	9805      	ldr	r0, [sp, #20]
 81100de:	aa1c      	add	r2, sp, #112	@ 0x70
 81100e0:	a91b      	add	r1, sp, #108	@ 0x6c
 81100e2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 81100e6:	f7ff fbd7 	bl	810f898 <__d2b>
 81100ea:	901a      	str	r0, [sp, #104]	@ 0x68
 81100ec:	2800      	cmp	r0, #0
 81100ee:	f43f aede 	beq.w	810feae <_strtod_l+0x43e>
 81100f2:	9805      	ldr	r0, [sp, #20]
 81100f4:	2101      	movs	r1, #1
 81100f6:	f7ff f929 	bl	810f34c <__i2b>
 81100fa:	4680      	mov	r8, r0
 81100fc:	b948      	cbnz	r0, 8110112 <_strtod_l+0x6a2>
 81100fe:	f04f 0800 	mov.w	r8, #0
 8110102:	e6d4      	b.n	810feae <_strtod_l+0x43e>
 8110104:	f04f 32ff 	mov.w	r2, #4294967295
 8110108:	fa02 f303 	lsl.w	r3, r2, r3
 811010c:	ea03 0a0a 	and.w	sl, r3, sl
 8110110:	e7b0      	b.n	8110074 <_strtod_l+0x604>
 8110112:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8110114:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8110116:	2d00      	cmp	r5, #0
 8110118:	bfab      	itete	ge
 811011a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 811011c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 811011e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8110120:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8110122:	bfac      	ite	ge
 8110124:	18ef      	addge	r7, r5, r3
 8110126:	1b5e      	sublt	r6, r3, r5
 8110128:	9b08      	ldr	r3, [sp, #32]
 811012a:	1aed      	subs	r5, r5, r3
 811012c:	4415      	add	r5, r2
 811012e:	4b66      	ldr	r3, [pc, #408]	@ (81102c8 <_strtod_l+0x858>)
 8110130:	3d01      	subs	r5, #1
 8110132:	429d      	cmp	r5, r3
 8110134:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8110138:	da50      	bge.n	81101dc <_strtod_l+0x76c>
 811013a:	1b5b      	subs	r3, r3, r5
 811013c:	2b1f      	cmp	r3, #31
 811013e:	eba2 0203 	sub.w	r2, r2, r3
 8110142:	f04f 0101 	mov.w	r1, #1
 8110146:	dc3d      	bgt.n	81101c4 <_strtod_l+0x754>
 8110148:	fa01 f303 	lsl.w	r3, r1, r3
 811014c:	9313      	str	r3, [sp, #76]	@ 0x4c
 811014e:	2300      	movs	r3, #0
 8110150:	9310      	str	r3, [sp, #64]	@ 0x40
 8110152:	18bd      	adds	r5, r7, r2
 8110154:	9b08      	ldr	r3, [sp, #32]
 8110156:	42af      	cmp	r7, r5
 8110158:	4416      	add	r6, r2
 811015a:	441e      	add	r6, r3
 811015c:	463b      	mov	r3, r7
 811015e:	bfa8      	it	ge
 8110160:	462b      	movge	r3, r5
 8110162:	42b3      	cmp	r3, r6
 8110164:	bfa8      	it	ge
 8110166:	4633      	movge	r3, r6
 8110168:	2b00      	cmp	r3, #0
 811016a:	bfc2      	ittt	gt
 811016c:	1aed      	subgt	r5, r5, r3
 811016e:	1af6      	subgt	r6, r6, r3
 8110170:	1aff      	subgt	r7, r7, r3
 8110172:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8110174:	2b00      	cmp	r3, #0
 8110176:	dd16      	ble.n	81101a6 <_strtod_l+0x736>
 8110178:	4641      	mov	r1, r8
 811017a:	9805      	ldr	r0, [sp, #20]
 811017c:	461a      	mov	r2, r3
 811017e:	f7ff f9a5 	bl	810f4cc <__pow5mult>
 8110182:	4680      	mov	r8, r0
 8110184:	2800      	cmp	r0, #0
 8110186:	d0ba      	beq.n	81100fe <_strtod_l+0x68e>
 8110188:	4601      	mov	r1, r0
 811018a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 811018c:	9805      	ldr	r0, [sp, #20]
 811018e:	f7ff f8f3 	bl	810f378 <__multiply>
 8110192:	900e      	str	r0, [sp, #56]	@ 0x38
 8110194:	2800      	cmp	r0, #0
 8110196:	f43f ae8a 	beq.w	810feae <_strtod_l+0x43e>
 811019a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 811019c:	9805      	ldr	r0, [sp, #20]
 811019e:	f7fe ffd7 	bl	810f150 <_Bfree>
 81101a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81101a4:	931a      	str	r3, [sp, #104]	@ 0x68
 81101a6:	2d00      	cmp	r5, #0
 81101a8:	dc1d      	bgt.n	81101e6 <_strtod_l+0x776>
 81101aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81101ac:	2b00      	cmp	r3, #0
 81101ae:	dd23      	ble.n	81101f8 <_strtod_l+0x788>
 81101b0:	4649      	mov	r1, r9
 81101b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 81101b4:	9805      	ldr	r0, [sp, #20]
 81101b6:	f7ff f989 	bl	810f4cc <__pow5mult>
 81101ba:	4681      	mov	r9, r0
 81101bc:	b9e0      	cbnz	r0, 81101f8 <_strtod_l+0x788>
 81101be:	f04f 0900 	mov.w	r9, #0
 81101c2:	e674      	b.n	810feae <_strtod_l+0x43e>
 81101c4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 81101c8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 81101cc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 81101d0:	35e2      	adds	r5, #226	@ 0xe2
 81101d2:	fa01 f305 	lsl.w	r3, r1, r5
 81101d6:	9310      	str	r3, [sp, #64]	@ 0x40
 81101d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 81101da:	e7ba      	b.n	8110152 <_strtod_l+0x6e2>
 81101dc:	2300      	movs	r3, #0
 81101de:	9310      	str	r3, [sp, #64]	@ 0x40
 81101e0:	2301      	movs	r3, #1
 81101e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 81101e4:	e7b5      	b.n	8110152 <_strtod_l+0x6e2>
 81101e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 81101e8:	9805      	ldr	r0, [sp, #20]
 81101ea:	462a      	mov	r2, r5
 81101ec:	f7ff f9c8 	bl	810f580 <__lshift>
 81101f0:	901a      	str	r0, [sp, #104]	@ 0x68
 81101f2:	2800      	cmp	r0, #0
 81101f4:	d1d9      	bne.n	81101aa <_strtod_l+0x73a>
 81101f6:	e65a      	b.n	810feae <_strtod_l+0x43e>
 81101f8:	2e00      	cmp	r6, #0
 81101fa:	dd07      	ble.n	811020c <_strtod_l+0x79c>
 81101fc:	4649      	mov	r1, r9
 81101fe:	9805      	ldr	r0, [sp, #20]
 8110200:	4632      	mov	r2, r6
 8110202:	f7ff f9bd 	bl	810f580 <__lshift>
 8110206:	4681      	mov	r9, r0
 8110208:	2800      	cmp	r0, #0
 811020a:	d0d8      	beq.n	81101be <_strtod_l+0x74e>
 811020c:	2f00      	cmp	r7, #0
 811020e:	dd08      	ble.n	8110222 <_strtod_l+0x7b2>
 8110210:	4641      	mov	r1, r8
 8110212:	9805      	ldr	r0, [sp, #20]
 8110214:	463a      	mov	r2, r7
 8110216:	f7ff f9b3 	bl	810f580 <__lshift>
 811021a:	4680      	mov	r8, r0
 811021c:	2800      	cmp	r0, #0
 811021e:	f43f ae46 	beq.w	810feae <_strtod_l+0x43e>
 8110222:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8110224:	9805      	ldr	r0, [sp, #20]
 8110226:	464a      	mov	r2, r9
 8110228:	f7ff fa32 	bl	810f690 <__mdiff>
 811022c:	4604      	mov	r4, r0
 811022e:	2800      	cmp	r0, #0
 8110230:	f43f ae3d 	beq.w	810feae <_strtod_l+0x43e>
 8110234:	68c3      	ldr	r3, [r0, #12]
 8110236:	930f      	str	r3, [sp, #60]	@ 0x3c
 8110238:	2300      	movs	r3, #0
 811023a:	60c3      	str	r3, [r0, #12]
 811023c:	4641      	mov	r1, r8
 811023e:	f7ff fa0b 	bl	810f658 <__mcmp>
 8110242:	2800      	cmp	r0, #0
 8110244:	da46      	bge.n	81102d4 <_strtod_l+0x864>
 8110246:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8110248:	ea53 030a 	orrs.w	r3, r3, sl
 811024c:	d16c      	bne.n	8110328 <_strtod_l+0x8b8>
 811024e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8110252:	2b00      	cmp	r3, #0
 8110254:	d168      	bne.n	8110328 <_strtod_l+0x8b8>
 8110256:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 811025a:	0d1b      	lsrs	r3, r3, #20
 811025c:	051b      	lsls	r3, r3, #20
 811025e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8110262:	d961      	bls.n	8110328 <_strtod_l+0x8b8>
 8110264:	6963      	ldr	r3, [r4, #20]
 8110266:	b913      	cbnz	r3, 811026e <_strtod_l+0x7fe>
 8110268:	6923      	ldr	r3, [r4, #16]
 811026a:	2b01      	cmp	r3, #1
 811026c:	dd5c      	ble.n	8110328 <_strtod_l+0x8b8>
 811026e:	4621      	mov	r1, r4
 8110270:	2201      	movs	r2, #1
 8110272:	9805      	ldr	r0, [sp, #20]
 8110274:	f7ff f984 	bl	810f580 <__lshift>
 8110278:	4641      	mov	r1, r8
 811027a:	4604      	mov	r4, r0
 811027c:	f7ff f9ec 	bl	810f658 <__mcmp>
 8110280:	2800      	cmp	r0, #0
 8110282:	dd51      	ble.n	8110328 <_strtod_l+0x8b8>
 8110284:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8110288:	9a08      	ldr	r2, [sp, #32]
 811028a:	0d1b      	lsrs	r3, r3, #20
 811028c:	051b      	lsls	r3, r3, #20
 811028e:	2a00      	cmp	r2, #0
 8110290:	d06b      	beq.n	811036a <_strtod_l+0x8fa>
 8110292:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8110296:	d868      	bhi.n	811036a <_strtod_l+0x8fa>
 8110298:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 811029c:	f67f ae9d 	bls.w	810ffda <_strtod_l+0x56a>
 81102a0:	4b0a      	ldr	r3, [pc, #40]	@ (81102cc <_strtod_l+0x85c>)
 81102a2:	4650      	mov	r0, sl
 81102a4:	4659      	mov	r1, fp
 81102a6:	2200      	movs	r2, #0
 81102a8:	f7f0 fa2e 	bl	8100708 <__aeabi_dmul>
 81102ac:	4b08      	ldr	r3, [pc, #32]	@ (81102d0 <_strtod_l+0x860>)
 81102ae:	400b      	ands	r3, r1
 81102b0:	4682      	mov	sl, r0
 81102b2:	468b      	mov	fp, r1
 81102b4:	2b00      	cmp	r3, #0
 81102b6:	f47f ae05 	bne.w	810fec4 <_strtod_l+0x454>
 81102ba:	9a05      	ldr	r2, [sp, #20]
 81102bc:	2322      	movs	r3, #34	@ 0x22
 81102be:	6013      	str	r3, [r2, #0]
 81102c0:	e600      	b.n	810fec4 <_strtod_l+0x454>
 81102c2:	bf00      	nop
 81102c4:	08111ab8 	.word	0x08111ab8
 81102c8:	fffffc02 	.word	0xfffffc02
 81102cc:	39500000 	.word	0x39500000
 81102d0:	7ff00000 	.word	0x7ff00000
 81102d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 81102d8:	d165      	bne.n	81103a6 <_strtod_l+0x936>
 81102da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 81102dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81102e0:	b35a      	cbz	r2, 811033a <_strtod_l+0x8ca>
 81102e2:	4a9f      	ldr	r2, [pc, #636]	@ (8110560 <_strtod_l+0xaf0>)
 81102e4:	4293      	cmp	r3, r2
 81102e6:	d12b      	bne.n	8110340 <_strtod_l+0x8d0>
 81102e8:	9b08      	ldr	r3, [sp, #32]
 81102ea:	4651      	mov	r1, sl
 81102ec:	b303      	cbz	r3, 8110330 <_strtod_l+0x8c0>
 81102ee:	4b9d      	ldr	r3, [pc, #628]	@ (8110564 <_strtod_l+0xaf4>)
 81102f0:	465a      	mov	r2, fp
 81102f2:	4013      	ands	r3, r2
 81102f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 81102f8:	f04f 32ff 	mov.w	r2, #4294967295
 81102fc:	d81b      	bhi.n	8110336 <_strtod_l+0x8c6>
 81102fe:	0d1b      	lsrs	r3, r3, #20
 8110300:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8110304:	fa02 f303 	lsl.w	r3, r2, r3
 8110308:	4299      	cmp	r1, r3
 811030a:	d119      	bne.n	8110340 <_strtod_l+0x8d0>
 811030c:	4b96      	ldr	r3, [pc, #600]	@ (8110568 <_strtod_l+0xaf8>)
 811030e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8110310:	429a      	cmp	r2, r3
 8110312:	d102      	bne.n	811031a <_strtod_l+0x8aa>
 8110314:	3101      	adds	r1, #1
 8110316:	f43f adca 	beq.w	810feae <_strtod_l+0x43e>
 811031a:	4b92      	ldr	r3, [pc, #584]	@ (8110564 <_strtod_l+0xaf4>)
 811031c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 811031e:	401a      	ands	r2, r3
 8110320:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8110324:	f04f 0a00 	mov.w	sl, #0
 8110328:	9b08      	ldr	r3, [sp, #32]
 811032a:	2b00      	cmp	r3, #0
 811032c:	d1b8      	bne.n	81102a0 <_strtod_l+0x830>
 811032e:	e5c9      	b.n	810fec4 <_strtod_l+0x454>
 8110330:	f04f 33ff 	mov.w	r3, #4294967295
 8110334:	e7e8      	b.n	8110308 <_strtod_l+0x898>
 8110336:	4613      	mov	r3, r2
 8110338:	e7e6      	b.n	8110308 <_strtod_l+0x898>
 811033a:	ea53 030a 	orrs.w	r3, r3, sl
 811033e:	d0a1      	beq.n	8110284 <_strtod_l+0x814>
 8110340:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8110342:	b1db      	cbz	r3, 811037c <_strtod_l+0x90c>
 8110344:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8110346:	4213      	tst	r3, r2
 8110348:	d0ee      	beq.n	8110328 <_strtod_l+0x8b8>
 811034a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811034c:	9a08      	ldr	r2, [sp, #32]
 811034e:	4650      	mov	r0, sl
 8110350:	4659      	mov	r1, fp
 8110352:	b1bb      	cbz	r3, 8110384 <_strtod_l+0x914>
 8110354:	f7ff fb6e 	bl	810fa34 <sulp>
 8110358:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 811035c:	ec53 2b10 	vmov	r2, r3, d0
 8110360:	f7f0 f81c 	bl	810039c <__adddf3>
 8110364:	4682      	mov	sl, r0
 8110366:	468b      	mov	fp, r1
 8110368:	e7de      	b.n	8110328 <_strtod_l+0x8b8>
 811036a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 811036e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8110372:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8110376:	f04f 3aff 	mov.w	sl, #4294967295
 811037a:	e7d5      	b.n	8110328 <_strtod_l+0x8b8>
 811037c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 811037e:	ea13 0f0a 	tst.w	r3, sl
 8110382:	e7e1      	b.n	8110348 <_strtod_l+0x8d8>
 8110384:	f7ff fb56 	bl	810fa34 <sulp>
 8110388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 811038c:	ec53 2b10 	vmov	r2, r3, d0
 8110390:	f7f0 f802 	bl	8100398 <__aeabi_dsub>
 8110394:	2200      	movs	r2, #0
 8110396:	2300      	movs	r3, #0
 8110398:	4682      	mov	sl, r0
 811039a:	468b      	mov	fp, r1
 811039c:	f7f0 fc1c 	bl	8100bd8 <__aeabi_dcmpeq>
 81103a0:	2800      	cmp	r0, #0
 81103a2:	d0c1      	beq.n	8110328 <_strtod_l+0x8b8>
 81103a4:	e619      	b.n	810ffda <_strtod_l+0x56a>
 81103a6:	4641      	mov	r1, r8
 81103a8:	4620      	mov	r0, r4
 81103aa:	f7ff facd 	bl	810f948 <__ratio>
 81103ae:	ec57 6b10 	vmov	r6, r7, d0
 81103b2:	2200      	movs	r2, #0
 81103b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 81103b8:	4630      	mov	r0, r6
 81103ba:	4639      	mov	r1, r7
 81103bc:	f7f0 fc20 	bl	8100c00 <__aeabi_dcmple>
 81103c0:	2800      	cmp	r0, #0
 81103c2:	d06f      	beq.n	81104a4 <_strtod_l+0xa34>
 81103c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81103c6:	2b00      	cmp	r3, #0
 81103c8:	d17a      	bne.n	81104c0 <_strtod_l+0xa50>
 81103ca:	f1ba 0f00 	cmp.w	sl, #0
 81103ce:	d158      	bne.n	8110482 <_strtod_l+0xa12>
 81103d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81103d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81103d6:	2b00      	cmp	r3, #0
 81103d8:	d15a      	bne.n	8110490 <_strtod_l+0xa20>
 81103da:	4b64      	ldr	r3, [pc, #400]	@ (811056c <_strtod_l+0xafc>)
 81103dc:	2200      	movs	r2, #0
 81103de:	4630      	mov	r0, r6
 81103e0:	4639      	mov	r1, r7
 81103e2:	f7f0 fc03 	bl	8100bec <__aeabi_dcmplt>
 81103e6:	2800      	cmp	r0, #0
 81103e8:	d159      	bne.n	811049e <_strtod_l+0xa2e>
 81103ea:	4630      	mov	r0, r6
 81103ec:	4639      	mov	r1, r7
 81103ee:	4b60      	ldr	r3, [pc, #384]	@ (8110570 <_strtod_l+0xb00>)
 81103f0:	2200      	movs	r2, #0
 81103f2:	f7f0 f989 	bl	8100708 <__aeabi_dmul>
 81103f6:	4606      	mov	r6, r0
 81103f8:	460f      	mov	r7, r1
 81103fa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 81103fe:	9606      	str	r6, [sp, #24]
 8110400:	9307      	str	r3, [sp, #28]
 8110402:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8110406:	4d57      	ldr	r5, [pc, #348]	@ (8110564 <_strtod_l+0xaf4>)
 8110408:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 811040c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811040e:	401d      	ands	r5, r3
 8110410:	4b58      	ldr	r3, [pc, #352]	@ (8110574 <_strtod_l+0xb04>)
 8110412:	429d      	cmp	r5, r3
 8110414:	f040 80b2 	bne.w	811057c <_strtod_l+0xb0c>
 8110418:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811041a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 811041e:	ec4b ab10 	vmov	d0, sl, fp
 8110422:	f7ff f9c9 	bl	810f7b8 <__ulp>
 8110426:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 811042a:	ec51 0b10 	vmov	r0, r1, d0
 811042e:	f7f0 f96b 	bl	8100708 <__aeabi_dmul>
 8110432:	4652      	mov	r2, sl
 8110434:	465b      	mov	r3, fp
 8110436:	f7ef ffb1 	bl	810039c <__adddf3>
 811043a:	460b      	mov	r3, r1
 811043c:	4949      	ldr	r1, [pc, #292]	@ (8110564 <_strtod_l+0xaf4>)
 811043e:	4a4e      	ldr	r2, [pc, #312]	@ (8110578 <_strtod_l+0xb08>)
 8110440:	4019      	ands	r1, r3
 8110442:	4291      	cmp	r1, r2
 8110444:	4682      	mov	sl, r0
 8110446:	d942      	bls.n	81104ce <_strtod_l+0xa5e>
 8110448:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 811044a:	4b47      	ldr	r3, [pc, #284]	@ (8110568 <_strtod_l+0xaf8>)
 811044c:	429a      	cmp	r2, r3
 811044e:	d103      	bne.n	8110458 <_strtod_l+0x9e8>
 8110450:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8110452:	3301      	adds	r3, #1
 8110454:	f43f ad2b 	beq.w	810feae <_strtod_l+0x43e>
 8110458:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8110568 <_strtod_l+0xaf8>
 811045c:	f04f 3aff 	mov.w	sl, #4294967295
 8110460:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8110462:	9805      	ldr	r0, [sp, #20]
 8110464:	f7fe fe74 	bl	810f150 <_Bfree>
 8110468:	9805      	ldr	r0, [sp, #20]
 811046a:	4649      	mov	r1, r9
 811046c:	f7fe fe70 	bl	810f150 <_Bfree>
 8110470:	9805      	ldr	r0, [sp, #20]
 8110472:	4641      	mov	r1, r8
 8110474:	f7fe fe6c 	bl	810f150 <_Bfree>
 8110478:	9805      	ldr	r0, [sp, #20]
 811047a:	4621      	mov	r1, r4
 811047c:	f7fe fe68 	bl	810f150 <_Bfree>
 8110480:	e618      	b.n	81100b4 <_strtod_l+0x644>
 8110482:	f1ba 0f01 	cmp.w	sl, #1
 8110486:	d103      	bne.n	8110490 <_strtod_l+0xa20>
 8110488:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811048a:	2b00      	cmp	r3, #0
 811048c:	f43f ada5 	beq.w	810ffda <_strtod_l+0x56a>
 8110490:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8110540 <_strtod_l+0xad0>
 8110494:	4f35      	ldr	r7, [pc, #212]	@ (811056c <_strtod_l+0xafc>)
 8110496:	ed8d 7b06 	vstr	d7, [sp, #24]
 811049a:	2600      	movs	r6, #0
 811049c:	e7b1      	b.n	8110402 <_strtod_l+0x992>
 811049e:	4f34      	ldr	r7, [pc, #208]	@ (8110570 <_strtod_l+0xb00>)
 81104a0:	2600      	movs	r6, #0
 81104a2:	e7aa      	b.n	81103fa <_strtod_l+0x98a>
 81104a4:	4b32      	ldr	r3, [pc, #200]	@ (8110570 <_strtod_l+0xb00>)
 81104a6:	4630      	mov	r0, r6
 81104a8:	4639      	mov	r1, r7
 81104aa:	2200      	movs	r2, #0
 81104ac:	f7f0 f92c 	bl	8100708 <__aeabi_dmul>
 81104b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81104b2:	4606      	mov	r6, r0
 81104b4:	460f      	mov	r7, r1
 81104b6:	2b00      	cmp	r3, #0
 81104b8:	d09f      	beq.n	81103fa <_strtod_l+0x98a>
 81104ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 81104be:	e7a0      	b.n	8110402 <_strtod_l+0x992>
 81104c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8110548 <_strtod_l+0xad8>
 81104c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 81104c8:	ec57 6b17 	vmov	r6, r7, d7
 81104cc:	e799      	b.n	8110402 <_strtod_l+0x992>
 81104ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 81104d2:	9b08      	ldr	r3, [sp, #32]
 81104d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 81104d8:	2b00      	cmp	r3, #0
 81104da:	d1c1      	bne.n	8110460 <_strtod_l+0x9f0>
 81104dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 81104e0:	0d1b      	lsrs	r3, r3, #20
 81104e2:	051b      	lsls	r3, r3, #20
 81104e4:	429d      	cmp	r5, r3
 81104e6:	d1bb      	bne.n	8110460 <_strtod_l+0x9f0>
 81104e8:	4630      	mov	r0, r6
 81104ea:	4639      	mov	r1, r7
 81104ec:	f7f0 fc6c 	bl	8100dc8 <__aeabi_d2lz>
 81104f0:	f7f0 f8dc 	bl	81006ac <__aeabi_l2d>
 81104f4:	4602      	mov	r2, r0
 81104f6:	460b      	mov	r3, r1
 81104f8:	4630      	mov	r0, r6
 81104fa:	4639      	mov	r1, r7
 81104fc:	f7ef ff4c 	bl	8100398 <__aeabi_dsub>
 8110500:	460b      	mov	r3, r1
 8110502:	4602      	mov	r2, r0
 8110504:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8110508:	f3cb 0613 	ubfx	r6, fp, #0, #20
 811050c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811050e:	ea46 060a 	orr.w	r6, r6, sl
 8110512:	431e      	orrs	r6, r3
 8110514:	d06f      	beq.n	81105f6 <_strtod_l+0xb86>
 8110516:	a30e      	add	r3, pc, #56	@ (adr r3, 8110550 <_strtod_l+0xae0>)
 8110518:	e9d3 2300 	ldrd	r2, r3, [r3]
 811051c:	f7f0 fb66 	bl	8100bec <__aeabi_dcmplt>
 8110520:	2800      	cmp	r0, #0
 8110522:	f47f accf 	bne.w	810fec4 <_strtod_l+0x454>
 8110526:	a30c      	add	r3, pc, #48	@ (adr r3, 8110558 <_strtod_l+0xae8>)
 8110528:	e9d3 2300 	ldrd	r2, r3, [r3]
 811052c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8110530:	f7f0 fb7a 	bl	8100c28 <__aeabi_dcmpgt>
 8110534:	2800      	cmp	r0, #0
 8110536:	d093      	beq.n	8110460 <_strtod_l+0x9f0>
 8110538:	e4c4      	b.n	810fec4 <_strtod_l+0x454>
 811053a:	bf00      	nop
 811053c:	f3af 8000 	nop.w
 8110540:	00000000 	.word	0x00000000
 8110544:	bff00000 	.word	0xbff00000
 8110548:	00000000 	.word	0x00000000
 811054c:	3ff00000 	.word	0x3ff00000
 8110550:	94a03595 	.word	0x94a03595
 8110554:	3fdfffff 	.word	0x3fdfffff
 8110558:	35afe535 	.word	0x35afe535
 811055c:	3fe00000 	.word	0x3fe00000
 8110560:	000fffff 	.word	0x000fffff
 8110564:	7ff00000 	.word	0x7ff00000
 8110568:	7fefffff 	.word	0x7fefffff
 811056c:	3ff00000 	.word	0x3ff00000
 8110570:	3fe00000 	.word	0x3fe00000
 8110574:	7fe00000 	.word	0x7fe00000
 8110578:	7c9fffff 	.word	0x7c9fffff
 811057c:	9b08      	ldr	r3, [sp, #32]
 811057e:	b323      	cbz	r3, 81105ca <_strtod_l+0xb5a>
 8110580:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8110584:	d821      	bhi.n	81105ca <_strtod_l+0xb5a>
 8110586:	a328      	add	r3, pc, #160	@ (adr r3, 8110628 <_strtod_l+0xbb8>)
 8110588:	e9d3 2300 	ldrd	r2, r3, [r3]
 811058c:	4630      	mov	r0, r6
 811058e:	4639      	mov	r1, r7
 8110590:	f7f0 fb36 	bl	8100c00 <__aeabi_dcmple>
 8110594:	b1a0      	cbz	r0, 81105c0 <_strtod_l+0xb50>
 8110596:	4639      	mov	r1, r7
 8110598:	4630      	mov	r0, r6
 811059a:	f7f0 fb8d 	bl	8100cb8 <__aeabi_d2uiz>
 811059e:	2801      	cmp	r0, #1
 81105a0:	bf38      	it	cc
 81105a2:	2001      	movcc	r0, #1
 81105a4:	f7f0 f836 	bl	8100614 <__aeabi_ui2d>
 81105a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81105aa:	4606      	mov	r6, r0
 81105ac:	460f      	mov	r7, r1
 81105ae:	b9fb      	cbnz	r3, 81105f0 <_strtod_l+0xb80>
 81105b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 81105b4:	9014      	str	r0, [sp, #80]	@ 0x50
 81105b6:	9315      	str	r3, [sp, #84]	@ 0x54
 81105b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 81105bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 81105c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 81105c2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 81105c6:	1b5b      	subs	r3, r3, r5
 81105c8:	9311      	str	r3, [sp, #68]	@ 0x44
 81105ca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 81105ce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 81105d2:	f7ff f8f1 	bl	810f7b8 <__ulp>
 81105d6:	4650      	mov	r0, sl
 81105d8:	ec53 2b10 	vmov	r2, r3, d0
 81105dc:	4659      	mov	r1, fp
 81105de:	f7f0 f893 	bl	8100708 <__aeabi_dmul>
 81105e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 81105e6:	f7ef fed9 	bl	810039c <__adddf3>
 81105ea:	4682      	mov	sl, r0
 81105ec:	468b      	mov	fp, r1
 81105ee:	e770      	b.n	81104d2 <_strtod_l+0xa62>
 81105f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 81105f4:	e7e0      	b.n	81105b8 <_strtod_l+0xb48>
 81105f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8110630 <_strtod_l+0xbc0>)
 81105f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81105fc:	f7f0 faf6 	bl	8100bec <__aeabi_dcmplt>
 8110600:	e798      	b.n	8110534 <_strtod_l+0xac4>
 8110602:	2300      	movs	r3, #0
 8110604:	930b      	str	r3, [sp, #44]	@ 0x2c
 8110606:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8110608:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 811060a:	6013      	str	r3, [r2, #0]
 811060c:	f7ff ba6d 	b.w	810faea <_strtod_l+0x7a>
 8110610:	2a65      	cmp	r2, #101	@ 0x65
 8110612:	f43f ab66 	beq.w	810fce2 <_strtod_l+0x272>
 8110616:	2a45      	cmp	r2, #69	@ 0x45
 8110618:	f43f ab63 	beq.w	810fce2 <_strtod_l+0x272>
 811061c:	2301      	movs	r3, #1
 811061e:	f7ff bb9e 	b.w	810fd5e <_strtod_l+0x2ee>
 8110622:	bf00      	nop
 8110624:	f3af 8000 	nop.w
 8110628:	ffc00000 	.word	0xffc00000
 811062c:	41dfffff 	.word	0x41dfffff
 8110630:	94a03595 	.word	0x94a03595
 8110634:	3fcfffff 	.word	0x3fcfffff

08110638 <_strtod_r>:
 8110638:	4b01      	ldr	r3, [pc, #4]	@ (8110640 <_strtod_r+0x8>)
 811063a:	f7ff ba19 	b.w	810fa70 <_strtod_l>
 811063e:	bf00      	nop
 8110640:	100000fc 	.word	0x100000fc

08110644 <_strtol_l.constprop.0>:
 8110644:	2b24      	cmp	r3, #36	@ 0x24
 8110646:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 811064a:	4686      	mov	lr, r0
 811064c:	4690      	mov	r8, r2
 811064e:	d801      	bhi.n	8110654 <_strtol_l.constprop.0+0x10>
 8110650:	2b01      	cmp	r3, #1
 8110652:	d106      	bne.n	8110662 <_strtol_l.constprop.0+0x1e>
 8110654:	f7fd fd8e 	bl	810e174 <__errno>
 8110658:	2316      	movs	r3, #22
 811065a:	6003      	str	r3, [r0, #0]
 811065c:	2000      	movs	r0, #0
 811065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8110662:	4834      	ldr	r0, [pc, #208]	@ (8110734 <_strtol_l.constprop.0+0xf0>)
 8110664:	460d      	mov	r5, r1
 8110666:	462a      	mov	r2, r5
 8110668:	f815 4b01 	ldrb.w	r4, [r5], #1
 811066c:	5d06      	ldrb	r6, [r0, r4]
 811066e:	f016 0608 	ands.w	r6, r6, #8
 8110672:	d1f8      	bne.n	8110666 <_strtol_l.constprop.0+0x22>
 8110674:	2c2d      	cmp	r4, #45	@ 0x2d
 8110676:	d12d      	bne.n	81106d4 <_strtol_l.constprop.0+0x90>
 8110678:	782c      	ldrb	r4, [r5, #0]
 811067a:	2601      	movs	r6, #1
 811067c:	1c95      	adds	r5, r2, #2
 811067e:	f033 0210 	bics.w	r2, r3, #16
 8110682:	d109      	bne.n	8110698 <_strtol_l.constprop.0+0x54>
 8110684:	2c30      	cmp	r4, #48	@ 0x30
 8110686:	d12a      	bne.n	81106de <_strtol_l.constprop.0+0x9a>
 8110688:	782a      	ldrb	r2, [r5, #0]
 811068a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 811068e:	2a58      	cmp	r2, #88	@ 0x58
 8110690:	d125      	bne.n	81106de <_strtol_l.constprop.0+0x9a>
 8110692:	786c      	ldrb	r4, [r5, #1]
 8110694:	2310      	movs	r3, #16
 8110696:	3502      	adds	r5, #2
 8110698:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 811069c:	f10c 3cff 	add.w	ip, ip, #4294967295
 81106a0:	2200      	movs	r2, #0
 81106a2:	fbbc f9f3 	udiv	r9, ip, r3
 81106a6:	4610      	mov	r0, r2
 81106a8:	fb03 ca19 	mls	sl, r3, r9, ip
 81106ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 81106b0:	2f09      	cmp	r7, #9
 81106b2:	d81b      	bhi.n	81106ec <_strtol_l.constprop.0+0xa8>
 81106b4:	463c      	mov	r4, r7
 81106b6:	42a3      	cmp	r3, r4
 81106b8:	dd27      	ble.n	811070a <_strtol_l.constprop.0+0xc6>
 81106ba:	1c57      	adds	r7, r2, #1
 81106bc:	d007      	beq.n	81106ce <_strtol_l.constprop.0+0x8a>
 81106be:	4581      	cmp	r9, r0
 81106c0:	d320      	bcc.n	8110704 <_strtol_l.constprop.0+0xc0>
 81106c2:	d101      	bne.n	81106c8 <_strtol_l.constprop.0+0x84>
 81106c4:	45a2      	cmp	sl, r4
 81106c6:	db1d      	blt.n	8110704 <_strtol_l.constprop.0+0xc0>
 81106c8:	fb00 4003 	mla	r0, r0, r3, r4
 81106cc:	2201      	movs	r2, #1
 81106ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 81106d2:	e7eb      	b.n	81106ac <_strtol_l.constprop.0+0x68>
 81106d4:	2c2b      	cmp	r4, #43	@ 0x2b
 81106d6:	bf04      	itt	eq
 81106d8:	782c      	ldrbeq	r4, [r5, #0]
 81106da:	1c95      	addeq	r5, r2, #2
 81106dc:	e7cf      	b.n	811067e <_strtol_l.constprop.0+0x3a>
 81106de:	2b00      	cmp	r3, #0
 81106e0:	d1da      	bne.n	8110698 <_strtol_l.constprop.0+0x54>
 81106e2:	2c30      	cmp	r4, #48	@ 0x30
 81106e4:	bf0c      	ite	eq
 81106e6:	2308      	moveq	r3, #8
 81106e8:	230a      	movne	r3, #10
 81106ea:	e7d5      	b.n	8110698 <_strtol_l.constprop.0+0x54>
 81106ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 81106f0:	2f19      	cmp	r7, #25
 81106f2:	d801      	bhi.n	81106f8 <_strtol_l.constprop.0+0xb4>
 81106f4:	3c37      	subs	r4, #55	@ 0x37
 81106f6:	e7de      	b.n	81106b6 <_strtol_l.constprop.0+0x72>
 81106f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 81106fc:	2f19      	cmp	r7, #25
 81106fe:	d804      	bhi.n	811070a <_strtol_l.constprop.0+0xc6>
 8110700:	3c57      	subs	r4, #87	@ 0x57
 8110702:	e7d8      	b.n	81106b6 <_strtol_l.constprop.0+0x72>
 8110704:	f04f 32ff 	mov.w	r2, #4294967295
 8110708:	e7e1      	b.n	81106ce <_strtol_l.constprop.0+0x8a>
 811070a:	1c53      	adds	r3, r2, #1
 811070c:	d108      	bne.n	8110720 <_strtol_l.constprop.0+0xdc>
 811070e:	2322      	movs	r3, #34	@ 0x22
 8110710:	f8ce 3000 	str.w	r3, [lr]
 8110714:	4660      	mov	r0, ip
 8110716:	f1b8 0f00 	cmp.w	r8, #0
 811071a:	d0a0      	beq.n	811065e <_strtol_l.constprop.0+0x1a>
 811071c:	1e69      	subs	r1, r5, #1
 811071e:	e006      	b.n	811072e <_strtol_l.constprop.0+0xea>
 8110720:	b106      	cbz	r6, 8110724 <_strtol_l.constprop.0+0xe0>
 8110722:	4240      	negs	r0, r0
 8110724:	f1b8 0f00 	cmp.w	r8, #0
 8110728:	d099      	beq.n	811065e <_strtol_l.constprop.0+0x1a>
 811072a:	2a00      	cmp	r2, #0
 811072c:	d1f6      	bne.n	811071c <_strtol_l.constprop.0+0xd8>
 811072e:	f8c8 1000 	str.w	r1, [r8]
 8110732:	e794      	b.n	811065e <_strtol_l.constprop.0+0x1a>
 8110734:	08111ae1 	.word	0x08111ae1

08110738 <_strtol_r>:
 8110738:	f7ff bf84 	b.w	8110644 <_strtol_l.constprop.0>

0811073c <__ssputs_r>:
 811073c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8110740:	688e      	ldr	r6, [r1, #8]
 8110742:	461f      	mov	r7, r3
 8110744:	42be      	cmp	r6, r7
 8110746:	680b      	ldr	r3, [r1, #0]
 8110748:	4682      	mov	sl, r0
 811074a:	460c      	mov	r4, r1
 811074c:	4690      	mov	r8, r2
 811074e:	d82d      	bhi.n	81107ac <__ssputs_r+0x70>
 8110750:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8110754:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8110758:	d026      	beq.n	81107a8 <__ssputs_r+0x6c>
 811075a:	6965      	ldr	r5, [r4, #20]
 811075c:	6909      	ldr	r1, [r1, #16]
 811075e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8110762:	eba3 0901 	sub.w	r9, r3, r1
 8110766:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 811076a:	1c7b      	adds	r3, r7, #1
 811076c:	444b      	add	r3, r9
 811076e:	106d      	asrs	r5, r5, #1
 8110770:	429d      	cmp	r5, r3
 8110772:	bf38      	it	cc
 8110774:	461d      	movcc	r5, r3
 8110776:	0553      	lsls	r3, r2, #21
 8110778:	d527      	bpl.n	81107ca <__ssputs_r+0x8e>
 811077a:	4629      	mov	r1, r5
 811077c:	f7fe fc1c 	bl	810efb8 <_malloc_r>
 8110780:	4606      	mov	r6, r0
 8110782:	b360      	cbz	r0, 81107de <__ssputs_r+0xa2>
 8110784:	6921      	ldr	r1, [r4, #16]
 8110786:	464a      	mov	r2, r9
 8110788:	f7fd fd21 	bl	810e1ce <memcpy>
 811078c:	89a3      	ldrh	r3, [r4, #12]
 811078e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8110792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8110796:	81a3      	strh	r3, [r4, #12]
 8110798:	6126      	str	r6, [r4, #16]
 811079a:	6165      	str	r5, [r4, #20]
 811079c:	444e      	add	r6, r9
 811079e:	eba5 0509 	sub.w	r5, r5, r9
 81107a2:	6026      	str	r6, [r4, #0]
 81107a4:	60a5      	str	r5, [r4, #8]
 81107a6:	463e      	mov	r6, r7
 81107a8:	42be      	cmp	r6, r7
 81107aa:	d900      	bls.n	81107ae <__ssputs_r+0x72>
 81107ac:	463e      	mov	r6, r7
 81107ae:	6820      	ldr	r0, [r4, #0]
 81107b0:	4632      	mov	r2, r6
 81107b2:	4641      	mov	r1, r8
 81107b4:	f000 fb7c 	bl	8110eb0 <memmove>
 81107b8:	68a3      	ldr	r3, [r4, #8]
 81107ba:	1b9b      	subs	r3, r3, r6
 81107bc:	60a3      	str	r3, [r4, #8]
 81107be:	6823      	ldr	r3, [r4, #0]
 81107c0:	4433      	add	r3, r6
 81107c2:	6023      	str	r3, [r4, #0]
 81107c4:	2000      	movs	r0, #0
 81107c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81107ca:	462a      	mov	r2, r5
 81107cc:	f000 ff3d 	bl	811164a <_realloc_r>
 81107d0:	4606      	mov	r6, r0
 81107d2:	2800      	cmp	r0, #0
 81107d4:	d1e0      	bne.n	8110798 <__ssputs_r+0x5c>
 81107d6:	6921      	ldr	r1, [r4, #16]
 81107d8:	4650      	mov	r0, sl
 81107da:	f7fe fb79 	bl	810eed0 <_free_r>
 81107de:	230c      	movs	r3, #12
 81107e0:	f8ca 3000 	str.w	r3, [sl]
 81107e4:	89a3      	ldrh	r3, [r4, #12]
 81107e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81107ea:	81a3      	strh	r3, [r4, #12]
 81107ec:	f04f 30ff 	mov.w	r0, #4294967295
 81107f0:	e7e9      	b.n	81107c6 <__ssputs_r+0x8a>
	...

081107f4 <_svfiprintf_r>:
 81107f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81107f8:	4698      	mov	r8, r3
 81107fa:	898b      	ldrh	r3, [r1, #12]
 81107fc:	061b      	lsls	r3, r3, #24
 81107fe:	b09d      	sub	sp, #116	@ 0x74
 8110800:	4607      	mov	r7, r0
 8110802:	460d      	mov	r5, r1
 8110804:	4614      	mov	r4, r2
 8110806:	d510      	bpl.n	811082a <_svfiprintf_r+0x36>
 8110808:	690b      	ldr	r3, [r1, #16]
 811080a:	b973      	cbnz	r3, 811082a <_svfiprintf_r+0x36>
 811080c:	2140      	movs	r1, #64	@ 0x40
 811080e:	f7fe fbd3 	bl	810efb8 <_malloc_r>
 8110812:	6028      	str	r0, [r5, #0]
 8110814:	6128      	str	r0, [r5, #16]
 8110816:	b930      	cbnz	r0, 8110826 <_svfiprintf_r+0x32>
 8110818:	230c      	movs	r3, #12
 811081a:	603b      	str	r3, [r7, #0]
 811081c:	f04f 30ff 	mov.w	r0, #4294967295
 8110820:	b01d      	add	sp, #116	@ 0x74
 8110822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110826:	2340      	movs	r3, #64	@ 0x40
 8110828:	616b      	str	r3, [r5, #20]
 811082a:	2300      	movs	r3, #0
 811082c:	9309      	str	r3, [sp, #36]	@ 0x24
 811082e:	2320      	movs	r3, #32
 8110830:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8110834:	f8cd 800c 	str.w	r8, [sp, #12]
 8110838:	2330      	movs	r3, #48	@ 0x30
 811083a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 81109d8 <_svfiprintf_r+0x1e4>
 811083e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8110842:	f04f 0901 	mov.w	r9, #1
 8110846:	4623      	mov	r3, r4
 8110848:	469a      	mov	sl, r3
 811084a:	f813 2b01 	ldrb.w	r2, [r3], #1
 811084e:	b10a      	cbz	r2, 8110854 <_svfiprintf_r+0x60>
 8110850:	2a25      	cmp	r2, #37	@ 0x25
 8110852:	d1f9      	bne.n	8110848 <_svfiprintf_r+0x54>
 8110854:	ebba 0b04 	subs.w	fp, sl, r4
 8110858:	d00b      	beq.n	8110872 <_svfiprintf_r+0x7e>
 811085a:	465b      	mov	r3, fp
 811085c:	4622      	mov	r2, r4
 811085e:	4629      	mov	r1, r5
 8110860:	4638      	mov	r0, r7
 8110862:	f7ff ff6b 	bl	811073c <__ssputs_r>
 8110866:	3001      	adds	r0, #1
 8110868:	f000 80a7 	beq.w	81109ba <_svfiprintf_r+0x1c6>
 811086c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 811086e:	445a      	add	r2, fp
 8110870:	9209      	str	r2, [sp, #36]	@ 0x24
 8110872:	f89a 3000 	ldrb.w	r3, [sl]
 8110876:	2b00      	cmp	r3, #0
 8110878:	f000 809f 	beq.w	81109ba <_svfiprintf_r+0x1c6>
 811087c:	2300      	movs	r3, #0
 811087e:	f04f 32ff 	mov.w	r2, #4294967295
 8110882:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8110886:	f10a 0a01 	add.w	sl, sl, #1
 811088a:	9304      	str	r3, [sp, #16]
 811088c:	9307      	str	r3, [sp, #28]
 811088e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8110892:	931a      	str	r3, [sp, #104]	@ 0x68
 8110894:	4654      	mov	r4, sl
 8110896:	2205      	movs	r2, #5
 8110898:	f814 1b01 	ldrb.w	r1, [r4], #1
 811089c:	484e      	ldr	r0, [pc, #312]	@ (81109d8 <_svfiprintf_r+0x1e4>)
 811089e:	f7ef fd1f 	bl	81002e0 <memchr>
 81108a2:	9a04      	ldr	r2, [sp, #16]
 81108a4:	b9d8      	cbnz	r0, 81108de <_svfiprintf_r+0xea>
 81108a6:	06d0      	lsls	r0, r2, #27
 81108a8:	bf44      	itt	mi
 81108aa:	2320      	movmi	r3, #32
 81108ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81108b0:	0711      	lsls	r1, r2, #28
 81108b2:	bf44      	itt	mi
 81108b4:	232b      	movmi	r3, #43	@ 0x2b
 81108b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81108ba:	f89a 3000 	ldrb.w	r3, [sl]
 81108be:	2b2a      	cmp	r3, #42	@ 0x2a
 81108c0:	d015      	beq.n	81108ee <_svfiprintf_r+0xfa>
 81108c2:	9a07      	ldr	r2, [sp, #28]
 81108c4:	4654      	mov	r4, sl
 81108c6:	2000      	movs	r0, #0
 81108c8:	f04f 0c0a 	mov.w	ip, #10
 81108cc:	4621      	mov	r1, r4
 81108ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 81108d2:	3b30      	subs	r3, #48	@ 0x30
 81108d4:	2b09      	cmp	r3, #9
 81108d6:	d94b      	bls.n	8110970 <_svfiprintf_r+0x17c>
 81108d8:	b1b0      	cbz	r0, 8110908 <_svfiprintf_r+0x114>
 81108da:	9207      	str	r2, [sp, #28]
 81108dc:	e014      	b.n	8110908 <_svfiprintf_r+0x114>
 81108de:	eba0 0308 	sub.w	r3, r0, r8
 81108e2:	fa09 f303 	lsl.w	r3, r9, r3
 81108e6:	4313      	orrs	r3, r2
 81108e8:	9304      	str	r3, [sp, #16]
 81108ea:	46a2      	mov	sl, r4
 81108ec:	e7d2      	b.n	8110894 <_svfiprintf_r+0xa0>
 81108ee:	9b03      	ldr	r3, [sp, #12]
 81108f0:	1d19      	adds	r1, r3, #4
 81108f2:	681b      	ldr	r3, [r3, #0]
 81108f4:	9103      	str	r1, [sp, #12]
 81108f6:	2b00      	cmp	r3, #0
 81108f8:	bfbb      	ittet	lt
 81108fa:	425b      	neglt	r3, r3
 81108fc:	f042 0202 	orrlt.w	r2, r2, #2
 8110900:	9307      	strge	r3, [sp, #28]
 8110902:	9307      	strlt	r3, [sp, #28]
 8110904:	bfb8      	it	lt
 8110906:	9204      	strlt	r2, [sp, #16]
 8110908:	7823      	ldrb	r3, [r4, #0]
 811090a:	2b2e      	cmp	r3, #46	@ 0x2e
 811090c:	d10a      	bne.n	8110924 <_svfiprintf_r+0x130>
 811090e:	7863      	ldrb	r3, [r4, #1]
 8110910:	2b2a      	cmp	r3, #42	@ 0x2a
 8110912:	d132      	bne.n	811097a <_svfiprintf_r+0x186>
 8110914:	9b03      	ldr	r3, [sp, #12]
 8110916:	1d1a      	adds	r2, r3, #4
 8110918:	681b      	ldr	r3, [r3, #0]
 811091a:	9203      	str	r2, [sp, #12]
 811091c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8110920:	3402      	adds	r4, #2
 8110922:	9305      	str	r3, [sp, #20]
 8110924:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 81109e8 <_svfiprintf_r+0x1f4>
 8110928:	7821      	ldrb	r1, [r4, #0]
 811092a:	2203      	movs	r2, #3
 811092c:	4650      	mov	r0, sl
 811092e:	f7ef fcd7 	bl	81002e0 <memchr>
 8110932:	b138      	cbz	r0, 8110944 <_svfiprintf_r+0x150>
 8110934:	9b04      	ldr	r3, [sp, #16]
 8110936:	eba0 000a 	sub.w	r0, r0, sl
 811093a:	2240      	movs	r2, #64	@ 0x40
 811093c:	4082      	lsls	r2, r0
 811093e:	4313      	orrs	r3, r2
 8110940:	3401      	adds	r4, #1
 8110942:	9304      	str	r3, [sp, #16]
 8110944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8110948:	4824      	ldr	r0, [pc, #144]	@ (81109dc <_svfiprintf_r+0x1e8>)
 811094a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 811094e:	2206      	movs	r2, #6
 8110950:	f7ef fcc6 	bl	81002e0 <memchr>
 8110954:	2800      	cmp	r0, #0
 8110956:	d036      	beq.n	81109c6 <_svfiprintf_r+0x1d2>
 8110958:	4b21      	ldr	r3, [pc, #132]	@ (81109e0 <_svfiprintf_r+0x1ec>)
 811095a:	bb1b      	cbnz	r3, 81109a4 <_svfiprintf_r+0x1b0>
 811095c:	9b03      	ldr	r3, [sp, #12]
 811095e:	3307      	adds	r3, #7
 8110960:	f023 0307 	bic.w	r3, r3, #7
 8110964:	3308      	adds	r3, #8
 8110966:	9303      	str	r3, [sp, #12]
 8110968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811096a:	4433      	add	r3, r6
 811096c:	9309      	str	r3, [sp, #36]	@ 0x24
 811096e:	e76a      	b.n	8110846 <_svfiprintf_r+0x52>
 8110970:	fb0c 3202 	mla	r2, ip, r2, r3
 8110974:	460c      	mov	r4, r1
 8110976:	2001      	movs	r0, #1
 8110978:	e7a8      	b.n	81108cc <_svfiprintf_r+0xd8>
 811097a:	2300      	movs	r3, #0
 811097c:	3401      	adds	r4, #1
 811097e:	9305      	str	r3, [sp, #20]
 8110980:	4619      	mov	r1, r3
 8110982:	f04f 0c0a 	mov.w	ip, #10
 8110986:	4620      	mov	r0, r4
 8110988:	f810 2b01 	ldrb.w	r2, [r0], #1
 811098c:	3a30      	subs	r2, #48	@ 0x30
 811098e:	2a09      	cmp	r2, #9
 8110990:	d903      	bls.n	811099a <_svfiprintf_r+0x1a6>
 8110992:	2b00      	cmp	r3, #0
 8110994:	d0c6      	beq.n	8110924 <_svfiprintf_r+0x130>
 8110996:	9105      	str	r1, [sp, #20]
 8110998:	e7c4      	b.n	8110924 <_svfiprintf_r+0x130>
 811099a:	fb0c 2101 	mla	r1, ip, r1, r2
 811099e:	4604      	mov	r4, r0
 81109a0:	2301      	movs	r3, #1
 81109a2:	e7f0      	b.n	8110986 <_svfiprintf_r+0x192>
 81109a4:	ab03      	add	r3, sp, #12
 81109a6:	9300      	str	r3, [sp, #0]
 81109a8:	462a      	mov	r2, r5
 81109aa:	4b0e      	ldr	r3, [pc, #56]	@ (81109e4 <_svfiprintf_r+0x1f0>)
 81109ac:	a904      	add	r1, sp, #16
 81109ae:	4638      	mov	r0, r7
 81109b0:	f7fc fb98 	bl	810d0e4 <_printf_float>
 81109b4:	1c42      	adds	r2, r0, #1
 81109b6:	4606      	mov	r6, r0
 81109b8:	d1d6      	bne.n	8110968 <_svfiprintf_r+0x174>
 81109ba:	89ab      	ldrh	r3, [r5, #12]
 81109bc:	065b      	lsls	r3, r3, #25
 81109be:	f53f af2d 	bmi.w	811081c <_svfiprintf_r+0x28>
 81109c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 81109c4:	e72c      	b.n	8110820 <_svfiprintf_r+0x2c>
 81109c6:	ab03      	add	r3, sp, #12
 81109c8:	9300      	str	r3, [sp, #0]
 81109ca:	462a      	mov	r2, r5
 81109cc:	4b05      	ldr	r3, [pc, #20]	@ (81109e4 <_svfiprintf_r+0x1f0>)
 81109ce:	a904      	add	r1, sp, #16
 81109d0:	4638      	mov	r0, r7
 81109d2:	f7fc fe1f 	bl	810d614 <_printf_i>
 81109d6:	e7ed      	b.n	81109b4 <_svfiprintf_r+0x1c0>
 81109d8:	08111be1 	.word	0x08111be1
 81109dc:	08111beb 	.word	0x08111beb
 81109e0:	0810d0e5 	.word	0x0810d0e5
 81109e4:	0811073d 	.word	0x0811073d
 81109e8:	08111be7 	.word	0x08111be7

081109ec <__sfputc_r>:
 81109ec:	6893      	ldr	r3, [r2, #8]
 81109ee:	3b01      	subs	r3, #1
 81109f0:	2b00      	cmp	r3, #0
 81109f2:	b410      	push	{r4}
 81109f4:	6093      	str	r3, [r2, #8]
 81109f6:	da08      	bge.n	8110a0a <__sfputc_r+0x1e>
 81109f8:	6994      	ldr	r4, [r2, #24]
 81109fa:	42a3      	cmp	r3, r4
 81109fc:	db01      	blt.n	8110a02 <__sfputc_r+0x16>
 81109fe:	290a      	cmp	r1, #10
 8110a00:	d103      	bne.n	8110a0a <__sfputc_r+0x1e>
 8110a02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8110a06:	f7fd bace 	b.w	810dfa6 <__swbuf_r>
 8110a0a:	6813      	ldr	r3, [r2, #0]
 8110a0c:	1c58      	adds	r0, r3, #1
 8110a0e:	6010      	str	r0, [r2, #0]
 8110a10:	7019      	strb	r1, [r3, #0]
 8110a12:	4608      	mov	r0, r1
 8110a14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8110a18:	4770      	bx	lr

08110a1a <__sfputs_r>:
 8110a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8110a1c:	4606      	mov	r6, r0
 8110a1e:	460f      	mov	r7, r1
 8110a20:	4614      	mov	r4, r2
 8110a22:	18d5      	adds	r5, r2, r3
 8110a24:	42ac      	cmp	r4, r5
 8110a26:	d101      	bne.n	8110a2c <__sfputs_r+0x12>
 8110a28:	2000      	movs	r0, #0
 8110a2a:	e007      	b.n	8110a3c <__sfputs_r+0x22>
 8110a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8110a30:	463a      	mov	r2, r7
 8110a32:	4630      	mov	r0, r6
 8110a34:	f7ff ffda 	bl	81109ec <__sfputc_r>
 8110a38:	1c43      	adds	r3, r0, #1
 8110a3a:	d1f3      	bne.n	8110a24 <__sfputs_r+0xa>
 8110a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08110a40 <_vfiprintf_r>:
 8110a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110a44:	460d      	mov	r5, r1
 8110a46:	b09d      	sub	sp, #116	@ 0x74
 8110a48:	4614      	mov	r4, r2
 8110a4a:	4698      	mov	r8, r3
 8110a4c:	4606      	mov	r6, r0
 8110a4e:	b118      	cbz	r0, 8110a58 <_vfiprintf_r+0x18>
 8110a50:	6a03      	ldr	r3, [r0, #32]
 8110a52:	b90b      	cbnz	r3, 8110a58 <_vfiprintf_r+0x18>
 8110a54:	f7fd f99e 	bl	810dd94 <__sinit>
 8110a58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8110a5a:	07d9      	lsls	r1, r3, #31
 8110a5c:	d405      	bmi.n	8110a6a <_vfiprintf_r+0x2a>
 8110a5e:	89ab      	ldrh	r3, [r5, #12]
 8110a60:	059a      	lsls	r2, r3, #22
 8110a62:	d402      	bmi.n	8110a6a <_vfiprintf_r+0x2a>
 8110a64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8110a66:	f7fd fbb0 	bl	810e1ca <__retarget_lock_acquire_recursive>
 8110a6a:	89ab      	ldrh	r3, [r5, #12]
 8110a6c:	071b      	lsls	r3, r3, #28
 8110a6e:	d501      	bpl.n	8110a74 <_vfiprintf_r+0x34>
 8110a70:	692b      	ldr	r3, [r5, #16]
 8110a72:	b99b      	cbnz	r3, 8110a9c <_vfiprintf_r+0x5c>
 8110a74:	4629      	mov	r1, r5
 8110a76:	4630      	mov	r0, r6
 8110a78:	f7fd fad4 	bl	810e024 <__swsetup_r>
 8110a7c:	b170      	cbz	r0, 8110a9c <_vfiprintf_r+0x5c>
 8110a7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8110a80:	07dc      	lsls	r4, r3, #31
 8110a82:	d504      	bpl.n	8110a8e <_vfiprintf_r+0x4e>
 8110a84:	f04f 30ff 	mov.w	r0, #4294967295
 8110a88:	b01d      	add	sp, #116	@ 0x74
 8110a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110a8e:	89ab      	ldrh	r3, [r5, #12]
 8110a90:	0598      	lsls	r0, r3, #22
 8110a92:	d4f7      	bmi.n	8110a84 <_vfiprintf_r+0x44>
 8110a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8110a96:	f7fd fb99 	bl	810e1cc <__retarget_lock_release_recursive>
 8110a9a:	e7f3      	b.n	8110a84 <_vfiprintf_r+0x44>
 8110a9c:	2300      	movs	r3, #0
 8110a9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8110aa0:	2320      	movs	r3, #32
 8110aa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8110aa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8110aaa:	2330      	movs	r3, #48	@ 0x30
 8110aac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8110c5c <_vfiprintf_r+0x21c>
 8110ab0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8110ab4:	f04f 0901 	mov.w	r9, #1
 8110ab8:	4623      	mov	r3, r4
 8110aba:	469a      	mov	sl, r3
 8110abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8110ac0:	b10a      	cbz	r2, 8110ac6 <_vfiprintf_r+0x86>
 8110ac2:	2a25      	cmp	r2, #37	@ 0x25
 8110ac4:	d1f9      	bne.n	8110aba <_vfiprintf_r+0x7a>
 8110ac6:	ebba 0b04 	subs.w	fp, sl, r4
 8110aca:	d00b      	beq.n	8110ae4 <_vfiprintf_r+0xa4>
 8110acc:	465b      	mov	r3, fp
 8110ace:	4622      	mov	r2, r4
 8110ad0:	4629      	mov	r1, r5
 8110ad2:	4630      	mov	r0, r6
 8110ad4:	f7ff ffa1 	bl	8110a1a <__sfputs_r>
 8110ad8:	3001      	adds	r0, #1
 8110ada:	f000 80a7 	beq.w	8110c2c <_vfiprintf_r+0x1ec>
 8110ade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8110ae0:	445a      	add	r2, fp
 8110ae2:	9209      	str	r2, [sp, #36]	@ 0x24
 8110ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8110ae8:	2b00      	cmp	r3, #0
 8110aea:	f000 809f 	beq.w	8110c2c <_vfiprintf_r+0x1ec>
 8110aee:	2300      	movs	r3, #0
 8110af0:	f04f 32ff 	mov.w	r2, #4294967295
 8110af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8110af8:	f10a 0a01 	add.w	sl, sl, #1
 8110afc:	9304      	str	r3, [sp, #16]
 8110afe:	9307      	str	r3, [sp, #28]
 8110b00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8110b04:	931a      	str	r3, [sp, #104]	@ 0x68
 8110b06:	4654      	mov	r4, sl
 8110b08:	2205      	movs	r2, #5
 8110b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8110b0e:	4853      	ldr	r0, [pc, #332]	@ (8110c5c <_vfiprintf_r+0x21c>)
 8110b10:	f7ef fbe6 	bl	81002e0 <memchr>
 8110b14:	9a04      	ldr	r2, [sp, #16]
 8110b16:	b9d8      	cbnz	r0, 8110b50 <_vfiprintf_r+0x110>
 8110b18:	06d1      	lsls	r1, r2, #27
 8110b1a:	bf44      	itt	mi
 8110b1c:	2320      	movmi	r3, #32
 8110b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8110b22:	0713      	lsls	r3, r2, #28
 8110b24:	bf44      	itt	mi
 8110b26:	232b      	movmi	r3, #43	@ 0x2b
 8110b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8110b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8110b30:	2b2a      	cmp	r3, #42	@ 0x2a
 8110b32:	d015      	beq.n	8110b60 <_vfiprintf_r+0x120>
 8110b34:	9a07      	ldr	r2, [sp, #28]
 8110b36:	4654      	mov	r4, sl
 8110b38:	2000      	movs	r0, #0
 8110b3a:	f04f 0c0a 	mov.w	ip, #10
 8110b3e:	4621      	mov	r1, r4
 8110b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8110b44:	3b30      	subs	r3, #48	@ 0x30
 8110b46:	2b09      	cmp	r3, #9
 8110b48:	d94b      	bls.n	8110be2 <_vfiprintf_r+0x1a2>
 8110b4a:	b1b0      	cbz	r0, 8110b7a <_vfiprintf_r+0x13a>
 8110b4c:	9207      	str	r2, [sp, #28]
 8110b4e:	e014      	b.n	8110b7a <_vfiprintf_r+0x13a>
 8110b50:	eba0 0308 	sub.w	r3, r0, r8
 8110b54:	fa09 f303 	lsl.w	r3, r9, r3
 8110b58:	4313      	orrs	r3, r2
 8110b5a:	9304      	str	r3, [sp, #16]
 8110b5c:	46a2      	mov	sl, r4
 8110b5e:	e7d2      	b.n	8110b06 <_vfiprintf_r+0xc6>
 8110b60:	9b03      	ldr	r3, [sp, #12]
 8110b62:	1d19      	adds	r1, r3, #4
 8110b64:	681b      	ldr	r3, [r3, #0]
 8110b66:	9103      	str	r1, [sp, #12]
 8110b68:	2b00      	cmp	r3, #0
 8110b6a:	bfbb      	ittet	lt
 8110b6c:	425b      	neglt	r3, r3
 8110b6e:	f042 0202 	orrlt.w	r2, r2, #2
 8110b72:	9307      	strge	r3, [sp, #28]
 8110b74:	9307      	strlt	r3, [sp, #28]
 8110b76:	bfb8      	it	lt
 8110b78:	9204      	strlt	r2, [sp, #16]
 8110b7a:	7823      	ldrb	r3, [r4, #0]
 8110b7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8110b7e:	d10a      	bne.n	8110b96 <_vfiprintf_r+0x156>
 8110b80:	7863      	ldrb	r3, [r4, #1]
 8110b82:	2b2a      	cmp	r3, #42	@ 0x2a
 8110b84:	d132      	bne.n	8110bec <_vfiprintf_r+0x1ac>
 8110b86:	9b03      	ldr	r3, [sp, #12]
 8110b88:	1d1a      	adds	r2, r3, #4
 8110b8a:	681b      	ldr	r3, [r3, #0]
 8110b8c:	9203      	str	r2, [sp, #12]
 8110b8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8110b92:	3402      	adds	r4, #2
 8110b94:	9305      	str	r3, [sp, #20]
 8110b96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8110c6c <_vfiprintf_r+0x22c>
 8110b9a:	7821      	ldrb	r1, [r4, #0]
 8110b9c:	2203      	movs	r2, #3
 8110b9e:	4650      	mov	r0, sl
 8110ba0:	f7ef fb9e 	bl	81002e0 <memchr>
 8110ba4:	b138      	cbz	r0, 8110bb6 <_vfiprintf_r+0x176>
 8110ba6:	9b04      	ldr	r3, [sp, #16]
 8110ba8:	eba0 000a 	sub.w	r0, r0, sl
 8110bac:	2240      	movs	r2, #64	@ 0x40
 8110bae:	4082      	lsls	r2, r0
 8110bb0:	4313      	orrs	r3, r2
 8110bb2:	3401      	adds	r4, #1
 8110bb4:	9304      	str	r3, [sp, #16]
 8110bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8110bba:	4829      	ldr	r0, [pc, #164]	@ (8110c60 <_vfiprintf_r+0x220>)
 8110bbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8110bc0:	2206      	movs	r2, #6
 8110bc2:	f7ef fb8d 	bl	81002e0 <memchr>
 8110bc6:	2800      	cmp	r0, #0
 8110bc8:	d03f      	beq.n	8110c4a <_vfiprintf_r+0x20a>
 8110bca:	4b26      	ldr	r3, [pc, #152]	@ (8110c64 <_vfiprintf_r+0x224>)
 8110bcc:	bb1b      	cbnz	r3, 8110c16 <_vfiprintf_r+0x1d6>
 8110bce:	9b03      	ldr	r3, [sp, #12]
 8110bd0:	3307      	adds	r3, #7
 8110bd2:	f023 0307 	bic.w	r3, r3, #7
 8110bd6:	3308      	adds	r3, #8
 8110bd8:	9303      	str	r3, [sp, #12]
 8110bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8110bdc:	443b      	add	r3, r7
 8110bde:	9309      	str	r3, [sp, #36]	@ 0x24
 8110be0:	e76a      	b.n	8110ab8 <_vfiprintf_r+0x78>
 8110be2:	fb0c 3202 	mla	r2, ip, r2, r3
 8110be6:	460c      	mov	r4, r1
 8110be8:	2001      	movs	r0, #1
 8110bea:	e7a8      	b.n	8110b3e <_vfiprintf_r+0xfe>
 8110bec:	2300      	movs	r3, #0
 8110bee:	3401      	adds	r4, #1
 8110bf0:	9305      	str	r3, [sp, #20]
 8110bf2:	4619      	mov	r1, r3
 8110bf4:	f04f 0c0a 	mov.w	ip, #10
 8110bf8:	4620      	mov	r0, r4
 8110bfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8110bfe:	3a30      	subs	r2, #48	@ 0x30
 8110c00:	2a09      	cmp	r2, #9
 8110c02:	d903      	bls.n	8110c0c <_vfiprintf_r+0x1cc>
 8110c04:	2b00      	cmp	r3, #0
 8110c06:	d0c6      	beq.n	8110b96 <_vfiprintf_r+0x156>
 8110c08:	9105      	str	r1, [sp, #20]
 8110c0a:	e7c4      	b.n	8110b96 <_vfiprintf_r+0x156>
 8110c0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8110c10:	4604      	mov	r4, r0
 8110c12:	2301      	movs	r3, #1
 8110c14:	e7f0      	b.n	8110bf8 <_vfiprintf_r+0x1b8>
 8110c16:	ab03      	add	r3, sp, #12
 8110c18:	9300      	str	r3, [sp, #0]
 8110c1a:	462a      	mov	r2, r5
 8110c1c:	4b12      	ldr	r3, [pc, #72]	@ (8110c68 <_vfiprintf_r+0x228>)
 8110c1e:	a904      	add	r1, sp, #16
 8110c20:	4630      	mov	r0, r6
 8110c22:	f7fc fa5f 	bl	810d0e4 <_printf_float>
 8110c26:	4607      	mov	r7, r0
 8110c28:	1c78      	adds	r0, r7, #1
 8110c2a:	d1d6      	bne.n	8110bda <_vfiprintf_r+0x19a>
 8110c2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8110c2e:	07d9      	lsls	r1, r3, #31
 8110c30:	d405      	bmi.n	8110c3e <_vfiprintf_r+0x1fe>
 8110c32:	89ab      	ldrh	r3, [r5, #12]
 8110c34:	059a      	lsls	r2, r3, #22
 8110c36:	d402      	bmi.n	8110c3e <_vfiprintf_r+0x1fe>
 8110c38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8110c3a:	f7fd fac7 	bl	810e1cc <__retarget_lock_release_recursive>
 8110c3e:	89ab      	ldrh	r3, [r5, #12]
 8110c40:	065b      	lsls	r3, r3, #25
 8110c42:	f53f af1f 	bmi.w	8110a84 <_vfiprintf_r+0x44>
 8110c46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8110c48:	e71e      	b.n	8110a88 <_vfiprintf_r+0x48>
 8110c4a:	ab03      	add	r3, sp, #12
 8110c4c:	9300      	str	r3, [sp, #0]
 8110c4e:	462a      	mov	r2, r5
 8110c50:	4b05      	ldr	r3, [pc, #20]	@ (8110c68 <_vfiprintf_r+0x228>)
 8110c52:	a904      	add	r1, sp, #16
 8110c54:	4630      	mov	r0, r6
 8110c56:	f7fc fcdd 	bl	810d614 <_printf_i>
 8110c5a:	e7e4      	b.n	8110c26 <_vfiprintf_r+0x1e6>
 8110c5c:	08111be1 	.word	0x08111be1
 8110c60:	08111beb 	.word	0x08111beb
 8110c64:	0810d0e5 	.word	0x0810d0e5
 8110c68:	08110a1b 	.word	0x08110a1b
 8110c6c:	08111be7 	.word	0x08111be7

08110c70 <__sflush_r>:
 8110c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8110c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8110c78:	0716      	lsls	r6, r2, #28
 8110c7a:	4605      	mov	r5, r0
 8110c7c:	460c      	mov	r4, r1
 8110c7e:	d454      	bmi.n	8110d2a <__sflush_r+0xba>
 8110c80:	684b      	ldr	r3, [r1, #4]
 8110c82:	2b00      	cmp	r3, #0
 8110c84:	dc02      	bgt.n	8110c8c <__sflush_r+0x1c>
 8110c86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8110c88:	2b00      	cmp	r3, #0
 8110c8a:	dd48      	ble.n	8110d1e <__sflush_r+0xae>
 8110c8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8110c8e:	2e00      	cmp	r6, #0
 8110c90:	d045      	beq.n	8110d1e <__sflush_r+0xae>
 8110c92:	2300      	movs	r3, #0
 8110c94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8110c98:	682f      	ldr	r7, [r5, #0]
 8110c9a:	6a21      	ldr	r1, [r4, #32]
 8110c9c:	602b      	str	r3, [r5, #0]
 8110c9e:	d030      	beq.n	8110d02 <__sflush_r+0x92>
 8110ca0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8110ca2:	89a3      	ldrh	r3, [r4, #12]
 8110ca4:	0759      	lsls	r1, r3, #29
 8110ca6:	d505      	bpl.n	8110cb4 <__sflush_r+0x44>
 8110ca8:	6863      	ldr	r3, [r4, #4]
 8110caa:	1ad2      	subs	r2, r2, r3
 8110cac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8110cae:	b10b      	cbz	r3, 8110cb4 <__sflush_r+0x44>
 8110cb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8110cb2:	1ad2      	subs	r2, r2, r3
 8110cb4:	2300      	movs	r3, #0
 8110cb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8110cb8:	6a21      	ldr	r1, [r4, #32]
 8110cba:	4628      	mov	r0, r5
 8110cbc:	47b0      	blx	r6
 8110cbe:	1c43      	adds	r3, r0, #1
 8110cc0:	89a3      	ldrh	r3, [r4, #12]
 8110cc2:	d106      	bne.n	8110cd2 <__sflush_r+0x62>
 8110cc4:	6829      	ldr	r1, [r5, #0]
 8110cc6:	291d      	cmp	r1, #29
 8110cc8:	d82b      	bhi.n	8110d22 <__sflush_r+0xb2>
 8110cca:	4a2a      	ldr	r2, [pc, #168]	@ (8110d74 <__sflush_r+0x104>)
 8110ccc:	410a      	asrs	r2, r1
 8110cce:	07d6      	lsls	r6, r2, #31
 8110cd0:	d427      	bmi.n	8110d22 <__sflush_r+0xb2>
 8110cd2:	2200      	movs	r2, #0
 8110cd4:	6062      	str	r2, [r4, #4]
 8110cd6:	04d9      	lsls	r1, r3, #19
 8110cd8:	6922      	ldr	r2, [r4, #16]
 8110cda:	6022      	str	r2, [r4, #0]
 8110cdc:	d504      	bpl.n	8110ce8 <__sflush_r+0x78>
 8110cde:	1c42      	adds	r2, r0, #1
 8110ce0:	d101      	bne.n	8110ce6 <__sflush_r+0x76>
 8110ce2:	682b      	ldr	r3, [r5, #0]
 8110ce4:	b903      	cbnz	r3, 8110ce8 <__sflush_r+0x78>
 8110ce6:	6560      	str	r0, [r4, #84]	@ 0x54
 8110ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8110cea:	602f      	str	r7, [r5, #0]
 8110cec:	b1b9      	cbz	r1, 8110d1e <__sflush_r+0xae>
 8110cee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8110cf2:	4299      	cmp	r1, r3
 8110cf4:	d002      	beq.n	8110cfc <__sflush_r+0x8c>
 8110cf6:	4628      	mov	r0, r5
 8110cf8:	f7fe f8ea 	bl	810eed0 <_free_r>
 8110cfc:	2300      	movs	r3, #0
 8110cfe:	6363      	str	r3, [r4, #52]	@ 0x34
 8110d00:	e00d      	b.n	8110d1e <__sflush_r+0xae>
 8110d02:	2301      	movs	r3, #1
 8110d04:	4628      	mov	r0, r5
 8110d06:	47b0      	blx	r6
 8110d08:	4602      	mov	r2, r0
 8110d0a:	1c50      	adds	r0, r2, #1
 8110d0c:	d1c9      	bne.n	8110ca2 <__sflush_r+0x32>
 8110d0e:	682b      	ldr	r3, [r5, #0]
 8110d10:	2b00      	cmp	r3, #0
 8110d12:	d0c6      	beq.n	8110ca2 <__sflush_r+0x32>
 8110d14:	2b1d      	cmp	r3, #29
 8110d16:	d001      	beq.n	8110d1c <__sflush_r+0xac>
 8110d18:	2b16      	cmp	r3, #22
 8110d1a:	d11e      	bne.n	8110d5a <__sflush_r+0xea>
 8110d1c:	602f      	str	r7, [r5, #0]
 8110d1e:	2000      	movs	r0, #0
 8110d20:	e022      	b.n	8110d68 <__sflush_r+0xf8>
 8110d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8110d26:	b21b      	sxth	r3, r3
 8110d28:	e01b      	b.n	8110d62 <__sflush_r+0xf2>
 8110d2a:	690f      	ldr	r7, [r1, #16]
 8110d2c:	2f00      	cmp	r7, #0
 8110d2e:	d0f6      	beq.n	8110d1e <__sflush_r+0xae>
 8110d30:	0793      	lsls	r3, r2, #30
 8110d32:	680e      	ldr	r6, [r1, #0]
 8110d34:	bf08      	it	eq
 8110d36:	694b      	ldreq	r3, [r1, #20]
 8110d38:	600f      	str	r7, [r1, #0]
 8110d3a:	bf18      	it	ne
 8110d3c:	2300      	movne	r3, #0
 8110d3e:	eba6 0807 	sub.w	r8, r6, r7
 8110d42:	608b      	str	r3, [r1, #8]
 8110d44:	f1b8 0f00 	cmp.w	r8, #0
 8110d48:	dde9      	ble.n	8110d1e <__sflush_r+0xae>
 8110d4a:	6a21      	ldr	r1, [r4, #32]
 8110d4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8110d4e:	4643      	mov	r3, r8
 8110d50:	463a      	mov	r2, r7
 8110d52:	4628      	mov	r0, r5
 8110d54:	47b0      	blx	r6
 8110d56:	2800      	cmp	r0, #0
 8110d58:	dc08      	bgt.n	8110d6c <__sflush_r+0xfc>
 8110d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8110d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8110d62:	81a3      	strh	r3, [r4, #12]
 8110d64:	f04f 30ff 	mov.w	r0, #4294967295
 8110d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8110d6c:	4407      	add	r7, r0
 8110d6e:	eba8 0800 	sub.w	r8, r8, r0
 8110d72:	e7e7      	b.n	8110d44 <__sflush_r+0xd4>
 8110d74:	dfbffffe 	.word	0xdfbffffe

08110d78 <_fflush_r>:
 8110d78:	b538      	push	{r3, r4, r5, lr}
 8110d7a:	690b      	ldr	r3, [r1, #16]
 8110d7c:	4605      	mov	r5, r0
 8110d7e:	460c      	mov	r4, r1
 8110d80:	b913      	cbnz	r3, 8110d88 <_fflush_r+0x10>
 8110d82:	2500      	movs	r5, #0
 8110d84:	4628      	mov	r0, r5
 8110d86:	bd38      	pop	{r3, r4, r5, pc}
 8110d88:	b118      	cbz	r0, 8110d92 <_fflush_r+0x1a>
 8110d8a:	6a03      	ldr	r3, [r0, #32]
 8110d8c:	b90b      	cbnz	r3, 8110d92 <_fflush_r+0x1a>
 8110d8e:	f7fd f801 	bl	810dd94 <__sinit>
 8110d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8110d96:	2b00      	cmp	r3, #0
 8110d98:	d0f3      	beq.n	8110d82 <_fflush_r+0xa>
 8110d9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8110d9c:	07d0      	lsls	r0, r2, #31
 8110d9e:	d404      	bmi.n	8110daa <_fflush_r+0x32>
 8110da0:	0599      	lsls	r1, r3, #22
 8110da2:	d402      	bmi.n	8110daa <_fflush_r+0x32>
 8110da4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8110da6:	f7fd fa10 	bl	810e1ca <__retarget_lock_acquire_recursive>
 8110daa:	4628      	mov	r0, r5
 8110dac:	4621      	mov	r1, r4
 8110dae:	f7ff ff5f 	bl	8110c70 <__sflush_r>
 8110db2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8110db4:	07da      	lsls	r2, r3, #31
 8110db6:	4605      	mov	r5, r0
 8110db8:	d4e4      	bmi.n	8110d84 <_fflush_r+0xc>
 8110dba:	89a3      	ldrh	r3, [r4, #12]
 8110dbc:	059b      	lsls	r3, r3, #22
 8110dbe:	d4e1      	bmi.n	8110d84 <_fflush_r+0xc>
 8110dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8110dc2:	f7fd fa03 	bl	810e1cc <__retarget_lock_release_recursive>
 8110dc6:	e7dd      	b.n	8110d84 <_fflush_r+0xc>

08110dc8 <fiprintf>:
 8110dc8:	b40e      	push	{r1, r2, r3}
 8110dca:	b503      	push	{r0, r1, lr}
 8110dcc:	4601      	mov	r1, r0
 8110dce:	ab03      	add	r3, sp, #12
 8110dd0:	4805      	ldr	r0, [pc, #20]	@ (8110de8 <fiprintf+0x20>)
 8110dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8110dd6:	6800      	ldr	r0, [r0, #0]
 8110dd8:	9301      	str	r3, [sp, #4]
 8110dda:	f7ff fe31 	bl	8110a40 <_vfiprintf_r>
 8110dde:	b002      	add	sp, #8
 8110de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8110de4:	b003      	add	sp, #12
 8110de6:	4770      	bx	lr
 8110de8:	100000ac 	.word	0x100000ac

08110dec <__swhatbuf_r>:
 8110dec:	b570      	push	{r4, r5, r6, lr}
 8110dee:	460c      	mov	r4, r1
 8110df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8110df4:	2900      	cmp	r1, #0
 8110df6:	b096      	sub	sp, #88	@ 0x58
 8110df8:	4615      	mov	r5, r2
 8110dfa:	461e      	mov	r6, r3
 8110dfc:	da0d      	bge.n	8110e1a <__swhatbuf_r+0x2e>
 8110dfe:	89a3      	ldrh	r3, [r4, #12]
 8110e00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8110e04:	f04f 0100 	mov.w	r1, #0
 8110e08:	bf14      	ite	ne
 8110e0a:	2340      	movne	r3, #64	@ 0x40
 8110e0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8110e10:	2000      	movs	r0, #0
 8110e12:	6031      	str	r1, [r6, #0]
 8110e14:	602b      	str	r3, [r5, #0]
 8110e16:	b016      	add	sp, #88	@ 0x58
 8110e18:	bd70      	pop	{r4, r5, r6, pc}
 8110e1a:	466a      	mov	r2, sp
 8110e1c:	f000 f874 	bl	8110f08 <_fstat_r>
 8110e20:	2800      	cmp	r0, #0
 8110e22:	dbec      	blt.n	8110dfe <__swhatbuf_r+0x12>
 8110e24:	9901      	ldr	r1, [sp, #4]
 8110e26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8110e2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8110e2e:	4259      	negs	r1, r3
 8110e30:	4159      	adcs	r1, r3
 8110e32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8110e36:	e7eb      	b.n	8110e10 <__swhatbuf_r+0x24>

08110e38 <__smakebuf_r>:
 8110e38:	898b      	ldrh	r3, [r1, #12]
 8110e3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8110e3c:	079d      	lsls	r5, r3, #30
 8110e3e:	4606      	mov	r6, r0
 8110e40:	460c      	mov	r4, r1
 8110e42:	d507      	bpl.n	8110e54 <__smakebuf_r+0x1c>
 8110e44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8110e48:	6023      	str	r3, [r4, #0]
 8110e4a:	6123      	str	r3, [r4, #16]
 8110e4c:	2301      	movs	r3, #1
 8110e4e:	6163      	str	r3, [r4, #20]
 8110e50:	b003      	add	sp, #12
 8110e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8110e54:	ab01      	add	r3, sp, #4
 8110e56:	466a      	mov	r2, sp
 8110e58:	f7ff ffc8 	bl	8110dec <__swhatbuf_r>
 8110e5c:	9f00      	ldr	r7, [sp, #0]
 8110e5e:	4605      	mov	r5, r0
 8110e60:	4639      	mov	r1, r7
 8110e62:	4630      	mov	r0, r6
 8110e64:	f7fe f8a8 	bl	810efb8 <_malloc_r>
 8110e68:	b948      	cbnz	r0, 8110e7e <__smakebuf_r+0x46>
 8110e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8110e6e:	059a      	lsls	r2, r3, #22
 8110e70:	d4ee      	bmi.n	8110e50 <__smakebuf_r+0x18>
 8110e72:	f023 0303 	bic.w	r3, r3, #3
 8110e76:	f043 0302 	orr.w	r3, r3, #2
 8110e7a:	81a3      	strh	r3, [r4, #12]
 8110e7c:	e7e2      	b.n	8110e44 <__smakebuf_r+0xc>
 8110e7e:	89a3      	ldrh	r3, [r4, #12]
 8110e80:	6020      	str	r0, [r4, #0]
 8110e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8110e86:	81a3      	strh	r3, [r4, #12]
 8110e88:	9b01      	ldr	r3, [sp, #4]
 8110e8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8110e8e:	b15b      	cbz	r3, 8110ea8 <__smakebuf_r+0x70>
 8110e90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8110e94:	4630      	mov	r0, r6
 8110e96:	f000 f849 	bl	8110f2c <_isatty_r>
 8110e9a:	b128      	cbz	r0, 8110ea8 <__smakebuf_r+0x70>
 8110e9c:	89a3      	ldrh	r3, [r4, #12]
 8110e9e:	f023 0303 	bic.w	r3, r3, #3
 8110ea2:	f043 0301 	orr.w	r3, r3, #1
 8110ea6:	81a3      	strh	r3, [r4, #12]
 8110ea8:	89a3      	ldrh	r3, [r4, #12]
 8110eaa:	431d      	orrs	r5, r3
 8110eac:	81a5      	strh	r5, [r4, #12]
 8110eae:	e7cf      	b.n	8110e50 <__smakebuf_r+0x18>

08110eb0 <memmove>:
 8110eb0:	4288      	cmp	r0, r1
 8110eb2:	b510      	push	{r4, lr}
 8110eb4:	eb01 0402 	add.w	r4, r1, r2
 8110eb8:	d902      	bls.n	8110ec0 <memmove+0x10>
 8110eba:	4284      	cmp	r4, r0
 8110ebc:	4623      	mov	r3, r4
 8110ebe:	d807      	bhi.n	8110ed0 <memmove+0x20>
 8110ec0:	1e43      	subs	r3, r0, #1
 8110ec2:	42a1      	cmp	r1, r4
 8110ec4:	d008      	beq.n	8110ed8 <memmove+0x28>
 8110ec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8110eca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8110ece:	e7f8      	b.n	8110ec2 <memmove+0x12>
 8110ed0:	4402      	add	r2, r0
 8110ed2:	4601      	mov	r1, r0
 8110ed4:	428a      	cmp	r2, r1
 8110ed6:	d100      	bne.n	8110eda <memmove+0x2a>
 8110ed8:	bd10      	pop	{r4, pc}
 8110eda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8110ede:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8110ee2:	e7f7      	b.n	8110ed4 <memmove+0x24>

08110ee4 <strncmp>:
 8110ee4:	b510      	push	{r4, lr}
 8110ee6:	b16a      	cbz	r2, 8110f04 <strncmp+0x20>
 8110ee8:	3901      	subs	r1, #1
 8110eea:	1884      	adds	r4, r0, r2
 8110eec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8110ef0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8110ef4:	429a      	cmp	r2, r3
 8110ef6:	d103      	bne.n	8110f00 <strncmp+0x1c>
 8110ef8:	42a0      	cmp	r0, r4
 8110efa:	d001      	beq.n	8110f00 <strncmp+0x1c>
 8110efc:	2a00      	cmp	r2, #0
 8110efe:	d1f5      	bne.n	8110eec <strncmp+0x8>
 8110f00:	1ad0      	subs	r0, r2, r3
 8110f02:	bd10      	pop	{r4, pc}
 8110f04:	4610      	mov	r0, r2
 8110f06:	e7fc      	b.n	8110f02 <strncmp+0x1e>

08110f08 <_fstat_r>:
 8110f08:	b538      	push	{r3, r4, r5, lr}
 8110f0a:	4d07      	ldr	r5, [pc, #28]	@ (8110f28 <_fstat_r+0x20>)
 8110f0c:	2300      	movs	r3, #0
 8110f0e:	4604      	mov	r4, r0
 8110f10:	4608      	mov	r0, r1
 8110f12:	4611      	mov	r1, r2
 8110f14:	602b      	str	r3, [r5, #0]
 8110f16:	f7f2 fdb5 	bl	8103a84 <_fstat>
 8110f1a:	1c43      	adds	r3, r0, #1
 8110f1c:	d102      	bne.n	8110f24 <_fstat_r+0x1c>
 8110f1e:	682b      	ldr	r3, [r5, #0]
 8110f20:	b103      	cbz	r3, 8110f24 <_fstat_r+0x1c>
 8110f22:	6023      	str	r3, [r4, #0]
 8110f24:	bd38      	pop	{r3, r4, r5, pc}
 8110f26:	bf00      	nop
 8110f28:	10000830 	.word	0x10000830

08110f2c <_isatty_r>:
 8110f2c:	b538      	push	{r3, r4, r5, lr}
 8110f2e:	4d06      	ldr	r5, [pc, #24]	@ (8110f48 <_isatty_r+0x1c>)
 8110f30:	2300      	movs	r3, #0
 8110f32:	4604      	mov	r4, r0
 8110f34:	4608      	mov	r0, r1
 8110f36:	602b      	str	r3, [r5, #0]
 8110f38:	f7f2 fdb4 	bl	8103aa4 <_isatty>
 8110f3c:	1c43      	adds	r3, r0, #1
 8110f3e:	d102      	bne.n	8110f46 <_isatty_r+0x1a>
 8110f40:	682b      	ldr	r3, [r5, #0]
 8110f42:	b103      	cbz	r3, 8110f46 <_isatty_r+0x1a>
 8110f44:	6023      	str	r3, [r4, #0]
 8110f46:	bd38      	pop	{r3, r4, r5, pc}
 8110f48:	10000830 	.word	0x10000830

08110f4c <_sbrk_r>:
 8110f4c:	b538      	push	{r3, r4, r5, lr}
 8110f4e:	4d06      	ldr	r5, [pc, #24]	@ (8110f68 <_sbrk_r+0x1c>)
 8110f50:	2300      	movs	r3, #0
 8110f52:	4604      	mov	r4, r0
 8110f54:	4608      	mov	r0, r1
 8110f56:	602b      	str	r3, [r5, #0]
 8110f58:	f7f2 fdbc 	bl	8103ad4 <_sbrk>
 8110f5c:	1c43      	adds	r3, r0, #1
 8110f5e:	d102      	bne.n	8110f66 <_sbrk_r+0x1a>
 8110f60:	682b      	ldr	r3, [r5, #0]
 8110f62:	b103      	cbz	r3, 8110f66 <_sbrk_r+0x1a>
 8110f64:	6023      	str	r3, [r4, #0]
 8110f66:	bd38      	pop	{r3, r4, r5, pc}
 8110f68:	10000830 	.word	0x10000830
 8110f6c:	00000000 	.word	0x00000000

08110f70 <nan>:
 8110f70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8110f78 <nan+0x8>
 8110f74:	4770      	bx	lr
 8110f76:	bf00      	nop
 8110f78:	00000000 	.word	0x00000000
 8110f7c:	7ff80000 	.word	0x7ff80000

08110f80 <abort>:
 8110f80:	b508      	push	{r3, lr}
 8110f82:	2006      	movs	r0, #6
 8110f84:	f000 fbc4 	bl	8111710 <raise>
 8110f88:	2001      	movs	r0, #1
 8110f8a:	f7f2 fd29 	bl	81039e0 <_exit>

08110f8e <_calloc_r>:
 8110f8e:	b570      	push	{r4, r5, r6, lr}
 8110f90:	fba1 5402 	umull	r5, r4, r1, r2
 8110f94:	b93c      	cbnz	r4, 8110fa6 <_calloc_r+0x18>
 8110f96:	4629      	mov	r1, r5
 8110f98:	f7fe f80e 	bl	810efb8 <_malloc_r>
 8110f9c:	4606      	mov	r6, r0
 8110f9e:	b928      	cbnz	r0, 8110fac <_calloc_r+0x1e>
 8110fa0:	2600      	movs	r6, #0
 8110fa2:	4630      	mov	r0, r6
 8110fa4:	bd70      	pop	{r4, r5, r6, pc}
 8110fa6:	220c      	movs	r2, #12
 8110fa8:	6002      	str	r2, [r0, #0]
 8110faa:	e7f9      	b.n	8110fa0 <_calloc_r+0x12>
 8110fac:	462a      	mov	r2, r5
 8110fae:	4621      	mov	r1, r4
 8110fb0:	f7fd f88e 	bl	810e0d0 <memset>
 8110fb4:	e7f5      	b.n	8110fa2 <_calloc_r+0x14>

08110fb6 <rshift>:
 8110fb6:	6903      	ldr	r3, [r0, #16]
 8110fb8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8110fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8110fc0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8110fc4:	f100 0414 	add.w	r4, r0, #20
 8110fc8:	dd45      	ble.n	8111056 <rshift+0xa0>
 8110fca:	f011 011f 	ands.w	r1, r1, #31
 8110fce:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8110fd2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8110fd6:	d10c      	bne.n	8110ff2 <rshift+0x3c>
 8110fd8:	f100 0710 	add.w	r7, r0, #16
 8110fdc:	4629      	mov	r1, r5
 8110fde:	42b1      	cmp	r1, r6
 8110fe0:	d334      	bcc.n	811104c <rshift+0x96>
 8110fe2:	1a9b      	subs	r3, r3, r2
 8110fe4:	009b      	lsls	r3, r3, #2
 8110fe6:	1eea      	subs	r2, r5, #3
 8110fe8:	4296      	cmp	r6, r2
 8110fea:	bf38      	it	cc
 8110fec:	2300      	movcc	r3, #0
 8110fee:	4423      	add	r3, r4
 8110ff0:	e015      	b.n	811101e <rshift+0x68>
 8110ff2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8110ff6:	f1c1 0820 	rsb	r8, r1, #32
 8110ffa:	40cf      	lsrs	r7, r1
 8110ffc:	f105 0e04 	add.w	lr, r5, #4
 8111000:	46a1      	mov	r9, r4
 8111002:	4576      	cmp	r6, lr
 8111004:	46f4      	mov	ip, lr
 8111006:	d815      	bhi.n	8111034 <rshift+0x7e>
 8111008:	1a9a      	subs	r2, r3, r2
 811100a:	0092      	lsls	r2, r2, #2
 811100c:	3a04      	subs	r2, #4
 811100e:	3501      	adds	r5, #1
 8111010:	42ae      	cmp	r6, r5
 8111012:	bf38      	it	cc
 8111014:	2200      	movcc	r2, #0
 8111016:	18a3      	adds	r3, r4, r2
 8111018:	50a7      	str	r7, [r4, r2]
 811101a:	b107      	cbz	r7, 811101e <rshift+0x68>
 811101c:	3304      	adds	r3, #4
 811101e:	1b1a      	subs	r2, r3, r4
 8111020:	42a3      	cmp	r3, r4
 8111022:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8111026:	bf08      	it	eq
 8111028:	2300      	moveq	r3, #0
 811102a:	6102      	str	r2, [r0, #16]
 811102c:	bf08      	it	eq
 811102e:	6143      	streq	r3, [r0, #20]
 8111030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8111034:	f8dc c000 	ldr.w	ip, [ip]
 8111038:	fa0c fc08 	lsl.w	ip, ip, r8
 811103c:	ea4c 0707 	orr.w	r7, ip, r7
 8111040:	f849 7b04 	str.w	r7, [r9], #4
 8111044:	f85e 7b04 	ldr.w	r7, [lr], #4
 8111048:	40cf      	lsrs	r7, r1
 811104a:	e7da      	b.n	8111002 <rshift+0x4c>
 811104c:	f851 cb04 	ldr.w	ip, [r1], #4
 8111050:	f847 cf04 	str.w	ip, [r7, #4]!
 8111054:	e7c3      	b.n	8110fde <rshift+0x28>
 8111056:	4623      	mov	r3, r4
 8111058:	e7e1      	b.n	811101e <rshift+0x68>

0811105a <__hexdig_fun>:
 811105a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 811105e:	2b09      	cmp	r3, #9
 8111060:	d802      	bhi.n	8111068 <__hexdig_fun+0xe>
 8111062:	3820      	subs	r0, #32
 8111064:	b2c0      	uxtb	r0, r0
 8111066:	4770      	bx	lr
 8111068:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 811106c:	2b05      	cmp	r3, #5
 811106e:	d801      	bhi.n	8111074 <__hexdig_fun+0x1a>
 8111070:	3847      	subs	r0, #71	@ 0x47
 8111072:	e7f7      	b.n	8111064 <__hexdig_fun+0xa>
 8111074:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8111078:	2b05      	cmp	r3, #5
 811107a:	d801      	bhi.n	8111080 <__hexdig_fun+0x26>
 811107c:	3827      	subs	r0, #39	@ 0x27
 811107e:	e7f1      	b.n	8111064 <__hexdig_fun+0xa>
 8111080:	2000      	movs	r0, #0
 8111082:	4770      	bx	lr

08111084 <__gethex>:
 8111084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111088:	b085      	sub	sp, #20
 811108a:	468a      	mov	sl, r1
 811108c:	9302      	str	r3, [sp, #8]
 811108e:	680b      	ldr	r3, [r1, #0]
 8111090:	9001      	str	r0, [sp, #4]
 8111092:	4690      	mov	r8, r2
 8111094:	1c9c      	adds	r4, r3, #2
 8111096:	46a1      	mov	r9, r4
 8111098:	f814 0b01 	ldrb.w	r0, [r4], #1
 811109c:	2830      	cmp	r0, #48	@ 0x30
 811109e:	d0fa      	beq.n	8111096 <__gethex+0x12>
 81110a0:	eba9 0303 	sub.w	r3, r9, r3
 81110a4:	f1a3 0b02 	sub.w	fp, r3, #2
 81110a8:	f7ff ffd7 	bl	811105a <__hexdig_fun>
 81110ac:	4605      	mov	r5, r0
 81110ae:	2800      	cmp	r0, #0
 81110b0:	d168      	bne.n	8111184 <__gethex+0x100>
 81110b2:	49a0      	ldr	r1, [pc, #640]	@ (8111334 <__gethex+0x2b0>)
 81110b4:	2201      	movs	r2, #1
 81110b6:	4648      	mov	r0, r9
 81110b8:	f7ff ff14 	bl	8110ee4 <strncmp>
 81110bc:	4607      	mov	r7, r0
 81110be:	2800      	cmp	r0, #0
 81110c0:	d167      	bne.n	8111192 <__gethex+0x10e>
 81110c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 81110c6:	4626      	mov	r6, r4
 81110c8:	f7ff ffc7 	bl	811105a <__hexdig_fun>
 81110cc:	2800      	cmp	r0, #0
 81110ce:	d062      	beq.n	8111196 <__gethex+0x112>
 81110d0:	4623      	mov	r3, r4
 81110d2:	7818      	ldrb	r0, [r3, #0]
 81110d4:	2830      	cmp	r0, #48	@ 0x30
 81110d6:	4699      	mov	r9, r3
 81110d8:	f103 0301 	add.w	r3, r3, #1
 81110dc:	d0f9      	beq.n	81110d2 <__gethex+0x4e>
 81110de:	f7ff ffbc 	bl	811105a <__hexdig_fun>
 81110e2:	fab0 f580 	clz	r5, r0
 81110e6:	096d      	lsrs	r5, r5, #5
 81110e8:	f04f 0b01 	mov.w	fp, #1
 81110ec:	464a      	mov	r2, r9
 81110ee:	4616      	mov	r6, r2
 81110f0:	3201      	adds	r2, #1
 81110f2:	7830      	ldrb	r0, [r6, #0]
 81110f4:	f7ff ffb1 	bl	811105a <__hexdig_fun>
 81110f8:	2800      	cmp	r0, #0
 81110fa:	d1f8      	bne.n	81110ee <__gethex+0x6a>
 81110fc:	498d      	ldr	r1, [pc, #564]	@ (8111334 <__gethex+0x2b0>)
 81110fe:	2201      	movs	r2, #1
 8111100:	4630      	mov	r0, r6
 8111102:	f7ff feef 	bl	8110ee4 <strncmp>
 8111106:	2800      	cmp	r0, #0
 8111108:	d13f      	bne.n	811118a <__gethex+0x106>
 811110a:	b944      	cbnz	r4, 811111e <__gethex+0x9a>
 811110c:	1c74      	adds	r4, r6, #1
 811110e:	4622      	mov	r2, r4
 8111110:	4616      	mov	r6, r2
 8111112:	3201      	adds	r2, #1
 8111114:	7830      	ldrb	r0, [r6, #0]
 8111116:	f7ff ffa0 	bl	811105a <__hexdig_fun>
 811111a:	2800      	cmp	r0, #0
 811111c:	d1f8      	bne.n	8111110 <__gethex+0x8c>
 811111e:	1ba4      	subs	r4, r4, r6
 8111120:	00a7      	lsls	r7, r4, #2
 8111122:	7833      	ldrb	r3, [r6, #0]
 8111124:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8111128:	2b50      	cmp	r3, #80	@ 0x50
 811112a:	d13e      	bne.n	81111aa <__gethex+0x126>
 811112c:	7873      	ldrb	r3, [r6, #1]
 811112e:	2b2b      	cmp	r3, #43	@ 0x2b
 8111130:	d033      	beq.n	811119a <__gethex+0x116>
 8111132:	2b2d      	cmp	r3, #45	@ 0x2d
 8111134:	d034      	beq.n	81111a0 <__gethex+0x11c>
 8111136:	1c71      	adds	r1, r6, #1
 8111138:	2400      	movs	r4, #0
 811113a:	7808      	ldrb	r0, [r1, #0]
 811113c:	f7ff ff8d 	bl	811105a <__hexdig_fun>
 8111140:	1e43      	subs	r3, r0, #1
 8111142:	b2db      	uxtb	r3, r3
 8111144:	2b18      	cmp	r3, #24
 8111146:	d830      	bhi.n	81111aa <__gethex+0x126>
 8111148:	f1a0 0210 	sub.w	r2, r0, #16
 811114c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8111150:	f7ff ff83 	bl	811105a <__hexdig_fun>
 8111154:	f100 3cff 	add.w	ip, r0, #4294967295
 8111158:	fa5f fc8c 	uxtb.w	ip, ip
 811115c:	f1bc 0f18 	cmp.w	ip, #24
 8111160:	f04f 030a 	mov.w	r3, #10
 8111164:	d91e      	bls.n	81111a4 <__gethex+0x120>
 8111166:	b104      	cbz	r4, 811116a <__gethex+0xe6>
 8111168:	4252      	negs	r2, r2
 811116a:	4417      	add	r7, r2
 811116c:	f8ca 1000 	str.w	r1, [sl]
 8111170:	b1ed      	cbz	r5, 81111ae <__gethex+0x12a>
 8111172:	f1bb 0f00 	cmp.w	fp, #0
 8111176:	bf0c      	ite	eq
 8111178:	2506      	moveq	r5, #6
 811117a:	2500      	movne	r5, #0
 811117c:	4628      	mov	r0, r5
 811117e:	b005      	add	sp, #20
 8111180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111184:	2500      	movs	r5, #0
 8111186:	462c      	mov	r4, r5
 8111188:	e7b0      	b.n	81110ec <__gethex+0x68>
 811118a:	2c00      	cmp	r4, #0
 811118c:	d1c7      	bne.n	811111e <__gethex+0x9a>
 811118e:	4627      	mov	r7, r4
 8111190:	e7c7      	b.n	8111122 <__gethex+0x9e>
 8111192:	464e      	mov	r6, r9
 8111194:	462f      	mov	r7, r5
 8111196:	2501      	movs	r5, #1
 8111198:	e7c3      	b.n	8111122 <__gethex+0x9e>
 811119a:	2400      	movs	r4, #0
 811119c:	1cb1      	adds	r1, r6, #2
 811119e:	e7cc      	b.n	811113a <__gethex+0xb6>
 81111a0:	2401      	movs	r4, #1
 81111a2:	e7fb      	b.n	811119c <__gethex+0x118>
 81111a4:	fb03 0002 	mla	r0, r3, r2, r0
 81111a8:	e7ce      	b.n	8111148 <__gethex+0xc4>
 81111aa:	4631      	mov	r1, r6
 81111ac:	e7de      	b.n	811116c <__gethex+0xe8>
 81111ae:	eba6 0309 	sub.w	r3, r6, r9
 81111b2:	3b01      	subs	r3, #1
 81111b4:	4629      	mov	r1, r5
 81111b6:	2b07      	cmp	r3, #7
 81111b8:	dc0a      	bgt.n	81111d0 <__gethex+0x14c>
 81111ba:	9801      	ldr	r0, [sp, #4]
 81111bc:	f7fd ff88 	bl	810f0d0 <_Balloc>
 81111c0:	4604      	mov	r4, r0
 81111c2:	b940      	cbnz	r0, 81111d6 <__gethex+0x152>
 81111c4:	4b5c      	ldr	r3, [pc, #368]	@ (8111338 <__gethex+0x2b4>)
 81111c6:	4602      	mov	r2, r0
 81111c8:	21e4      	movs	r1, #228	@ 0xe4
 81111ca:	485c      	ldr	r0, [pc, #368]	@ (811133c <__gethex+0x2b8>)
 81111cc:	f7fd f814 	bl	810e1f8 <__assert_func>
 81111d0:	3101      	adds	r1, #1
 81111d2:	105b      	asrs	r3, r3, #1
 81111d4:	e7ef      	b.n	81111b6 <__gethex+0x132>
 81111d6:	f100 0a14 	add.w	sl, r0, #20
 81111da:	2300      	movs	r3, #0
 81111dc:	4655      	mov	r5, sl
 81111de:	469b      	mov	fp, r3
 81111e0:	45b1      	cmp	r9, r6
 81111e2:	d337      	bcc.n	8111254 <__gethex+0x1d0>
 81111e4:	f845 bb04 	str.w	fp, [r5], #4
 81111e8:	eba5 050a 	sub.w	r5, r5, sl
 81111ec:	10ad      	asrs	r5, r5, #2
 81111ee:	6125      	str	r5, [r4, #16]
 81111f0:	4658      	mov	r0, fp
 81111f2:	f7fe f85f 	bl	810f2b4 <__hi0bits>
 81111f6:	016d      	lsls	r5, r5, #5
 81111f8:	f8d8 6000 	ldr.w	r6, [r8]
 81111fc:	1a2d      	subs	r5, r5, r0
 81111fe:	42b5      	cmp	r5, r6
 8111200:	dd54      	ble.n	81112ac <__gethex+0x228>
 8111202:	1bad      	subs	r5, r5, r6
 8111204:	4629      	mov	r1, r5
 8111206:	4620      	mov	r0, r4
 8111208:	f7fe fbf3 	bl	810f9f2 <__any_on>
 811120c:	4681      	mov	r9, r0
 811120e:	b178      	cbz	r0, 8111230 <__gethex+0x1ac>
 8111210:	1e6b      	subs	r3, r5, #1
 8111212:	1159      	asrs	r1, r3, #5
 8111214:	f003 021f 	and.w	r2, r3, #31
 8111218:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 811121c:	f04f 0901 	mov.w	r9, #1
 8111220:	fa09 f202 	lsl.w	r2, r9, r2
 8111224:	420a      	tst	r2, r1
 8111226:	d003      	beq.n	8111230 <__gethex+0x1ac>
 8111228:	454b      	cmp	r3, r9
 811122a:	dc36      	bgt.n	811129a <__gethex+0x216>
 811122c:	f04f 0902 	mov.w	r9, #2
 8111230:	4629      	mov	r1, r5
 8111232:	4620      	mov	r0, r4
 8111234:	f7ff febf 	bl	8110fb6 <rshift>
 8111238:	442f      	add	r7, r5
 811123a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 811123e:	42bb      	cmp	r3, r7
 8111240:	da42      	bge.n	81112c8 <__gethex+0x244>
 8111242:	9801      	ldr	r0, [sp, #4]
 8111244:	4621      	mov	r1, r4
 8111246:	f7fd ff83 	bl	810f150 <_Bfree>
 811124a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 811124c:	2300      	movs	r3, #0
 811124e:	6013      	str	r3, [r2, #0]
 8111250:	25a3      	movs	r5, #163	@ 0xa3
 8111252:	e793      	b.n	811117c <__gethex+0xf8>
 8111254:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8111258:	2a2e      	cmp	r2, #46	@ 0x2e
 811125a:	d012      	beq.n	8111282 <__gethex+0x1fe>
 811125c:	2b20      	cmp	r3, #32
 811125e:	d104      	bne.n	811126a <__gethex+0x1e6>
 8111260:	f845 bb04 	str.w	fp, [r5], #4
 8111264:	f04f 0b00 	mov.w	fp, #0
 8111268:	465b      	mov	r3, fp
 811126a:	7830      	ldrb	r0, [r6, #0]
 811126c:	9303      	str	r3, [sp, #12]
 811126e:	f7ff fef4 	bl	811105a <__hexdig_fun>
 8111272:	9b03      	ldr	r3, [sp, #12]
 8111274:	f000 000f 	and.w	r0, r0, #15
 8111278:	4098      	lsls	r0, r3
 811127a:	ea4b 0b00 	orr.w	fp, fp, r0
 811127e:	3304      	adds	r3, #4
 8111280:	e7ae      	b.n	81111e0 <__gethex+0x15c>
 8111282:	45b1      	cmp	r9, r6
 8111284:	d8ea      	bhi.n	811125c <__gethex+0x1d8>
 8111286:	492b      	ldr	r1, [pc, #172]	@ (8111334 <__gethex+0x2b0>)
 8111288:	9303      	str	r3, [sp, #12]
 811128a:	2201      	movs	r2, #1
 811128c:	4630      	mov	r0, r6
 811128e:	f7ff fe29 	bl	8110ee4 <strncmp>
 8111292:	9b03      	ldr	r3, [sp, #12]
 8111294:	2800      	cmp	r0, #0
 8111296:	d1e1      	bne.n	811125c <__gethex+0x1d8>
 8111298:	e7a2      	b.n	81111e0 <__gethex+0x15c>
 811129a:	1ea9      	subs	r1, r5, #2
 811129c:	4620      	mov	r0, r4
 811129e:	f7fe fba8 	bl	810f9f2 <__any_on>
 81112a2:	2800      	cmp	r0, #0
 81112a4:	d0c2      	beq.n	811122c <__gethex+0x1a8>
 81112a6:	f04f 0903 	mov.w	r9, #3
 81112aa:	e7c1      	b.n	8111230 <__gethex+0x1ac>
 81112ac:	da09      	bge.n	81112c2 <__gethex+0x23e>
 81112ae:	1b75      	subs	r5, r6, r5
 81112b0:	4621      	mov	r1, r4
 81112b2:	9801      	ldr	r0, [sp, #4]
 81112b4:	462a      	mov	r2, r5
 81112b6:	f7fe f963 	bl	810f580 <__lshift>
 81112ba:	1b7f      	subs	r7, r7, r5
 81112bc:	4604      	mov	r4, r0
 81112be:	f100 0a14 	add.w	sl, r0, #20
 81112c2:	f04f 0900 	mov.w	r9, #0
 81112c6:	e7b8      	b.n	811123a <__gethex+0x1b6>
 81112c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 81112cc:	42bd      	cmp	r5, r7
 81112ce:	dd6f      	ble.n	81113b0 <__gethex+0x32c>
 81112d0:	1bed      	subs	r5, r5, r7
 81112d2:	42ae      	cmp	r6, r5
 81112d4:	dc34      	bgt.n	8111340 <__gethex+0x2bc>
 81112d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 81112da:	2b02      	cmp	r3, #2
 81112dc:	d022      	beq.n	8111324 <__gethex+0x2a0>
 81112de:	2b03      	cmp	r3, #3
 81112e0:	d024      	beq.n	811132c <__gethex+0x2a8>
 81112e2:	2b01      	cmp	r3, #1
 81112e4:	d115      	bne.n	8111312 <__gethex+0x28e>
 81112e6:	42ae      	cmp	r6, r5
 81112e8:	d113      	bne.n	8111312 <__gethex+0x28e>
 81112ea:	2e01      	cmp	r6, #1
 81112ec:	d10b      	bne.n	8111306 <__gethex+0x282>
 81112ee:	9a02      	ldr	r2, [sp, #8]
 81112f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 81112f4:	6013      	str	r3, [r2, #0]
 81112f6:	2301      	movs	r3, #1
 81112f8:	6123      	str	r3, [r4, #16]
 81112fa:	f8ca 3000 	str.w	r3, [sl]
 81112fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8111300:	2562      	movs	r5, #98	@ 0x62
 8111302:	601c      	str	r4, [r3, #0]
 8111304:	e73a      	b.n	811117c <__gethex+0xf8>
 8111306:	1e71      	subs	r1, r6, #1
 8111308:	4620      	mov	r0, r4
 811130a:	f7fe fb72 	bl	810f9f2 <__any_on>
 811130e:	2800      	cmp	r0, #0
 8111310:	d1ed      	bne.n	81112ee <__gethex+0x26a>
 8111312:	9801      	ldr	r0, [sp, #4]
 8111314:	4621      	mov	r1, r4
 8111316:	f7fd ff1b 	bl	810f150 <_Bfree>
 811131a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 811131c:	2300      	movs	r3, #0
 811131e:	6013      	str	r3, [r2, #0]
 8111320:	2550      	movs	r5, #80	@ 0x50
 8111322:	e72b      	b.n	811117c <__gethex+0xf8>
 8111324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8111326:	2b00      	cmp	r3, #0
 8111328:	d1f3      	bne.n	8111312 <__gethex+0x28e>
 811132a:	e7e0      	b.n	81112ee <__gethex+0x26a>
 811132c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811132e:	2b00      	cmp	r3, #0
 8111330:	d1dd      	bne.n	81112ee <__gethex+0x26a>
 8111332:	e7ee      	b.n	8111312 <__gethex+0x28e>
 8111334:	08111a88 	.word	0x08111a88
 8111338:	08111921 	.word	0x08111921
 811133c:	08111bfa 	.word	0x08111bfa
 8111340:	1e6f      	subs	r7, r5, #1
 8111342:	f1b9 0f00 	cmp.w	r9, #0
 8111346:	d130      	bne.n	81113aa <__gethex+0x326>
 8111348:	b127      	cbz	r7, 8111354 <__gethex+0x2d0>
 811134a:	4639      	mov	r1, r7
 811134c:	4620      	mov	r0, r4
 811134e:	f7fe fb50 	bl	810f9f2 <__any_on>
 8111352:	4681      	mov	r9, r0
 8111354:	117a      	asrs	r2, r7, #5
 8111356:	2301      	movs	r3, #1
 8111358:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 811135c:	f007 071f 	and.w	r7, r7, #31
 8111360:	40bb      	lsls	r3, r7
 8111362:	4213      	tst	r3, r2
 8111364:	4629      	mov	r1, r5
 8111366:	4620      	mov	r0, r4
 8111368:	bf18      	it	ne
 811136a:	f049 0902 	orrne.w	r9, r9, #2
 811136e:	f7ff fe22 	bl	8110fb6 <rshift>
 8111372:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8111376:	1b76      	subs	r6, r6, r5
 8111378:	2502      	movs	r5, #2
 811137a:	f1b9 0f00 	cmp.w	r9, #0
 811137e:	d047      	beq.n	8111410 <__gethex+0x38c>
 8111380:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8111384:	2b02      	cmp	r3, #2
 8111386:	d015      	beq.n	81113b4 <__gethex+0x330>
 8111388:	2b03      	cmp	r3, #3
 811138a:	d017      	beq.n	81113bc <__gethex+0x338>
 811138c:	2b01      	cmp	r3, #1
 811138e:	d109      	bne.n	81113a4 <__gethex+0x320>
 8111390:	f019 0f02 	tst.w	r9, #2
 8111394:	d006      	beq.n	81113a4 <__gethex+0x320>
 8111396:	f8da 3000 	ldr.w	r3, [sl]
 811139a:	ea49 0903 	orr.w	r9, r9, r3
 811139e:	f019 0f01 	tst.w	r9, #1
 81113a2:	d10e      	bne.n	81113c2 <__gethex+0x33e>
 81113a4:	f045 0510 	orr.w	r5, r5, #16
 81113a8:	e032      	b.n	8111410 <__gethex+0x38c>
 81113aa:	f04f 0901 	mov.w	r9, #1
 81113ae:	e7d1      	b.n	8111354 <__gethex+0x2d0>
 81113b0:	2501      	movs	r5, #1
 81113b2:	e7e2      	b.n	811137a <__gethex+0x2f6>
 81113b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81113b6:	f1c3 0301 	rsb	r3, r3, #1
 81113ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 81113bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81113be:	2b00      	cmp	r3, #0
 81113c0:	d0f0      	beq.n	81113a4 <__gethex+0x320>
 81113c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 81113c6:	f104 0314 	add.w	r3, r4, #20
 81113ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 81113ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 81113d2:	f04f 0c00 	mov.w	ip, #0
 81113d6:	4618      	mov	r0, r3
 81113d8:	f853 2b04 	ldr.w	r2, [r3], #4
 81113dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 81113e0:	d01b      	beq.n	811141a <__gethex+0x396>
 81113e2:	3201      	adds	r2, #1
 81113e4:	6002      	str	r2, [r0, #0]
 81113e6:	2d02      	cmp	r5, #2
 81113e8:	f104 0314 	add.w	r3, r4, #20
 81113ec:	d13c      	bne.n	8111468 <__gethex+0x3e4>
 81113ee:	f8d8 2000 	ldr.w	r2, [r8]
 81113f2:	3a01      	subs	r2, #1
 81113f4:	42b2      	cmp	r2, r6
 81113f6:	d109      	bne.n	811140c <__gethex+0x388>
 81113f8:	1171      	asrs	r1, r6, #5
 81113fa:	2201      	movs	r2, #1
 81113fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8111400:	f006 061f 	and.w	r6, r6, #31
 8111404:	fa02 f606 	lsl.w	r6, r2, r6
 8111408:	421e      	tst	r6, r3
 811140a:	d13a      	bne.n	8111482 <__gethex+0x3fe>
 811140c:	f045 0520 	orr.w	r5, r5, #32
 8111410:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8111412:	601c      	str	r4, [r3, #0]
 8111414:	9b02      	ldr	r3, [sp, #8]
 8111416:	601f      	str	r7, [r3, #0]
 8111418:	e6b0      	b.n	811117c <__gethex+0xf8>
 811141a:	4299      	cmp	r1, r3
 811141c:	f843 cc04 	str.w	ip, [r3, #-4]
 8111420:	d8d9      	bhi.n	81113d6 <__gethex+0x352>
 8111422:	68a3      	ldr	r3, [r4, #8]
 8111424:	459b      	cmp	fp, r3
 8111426:	db17      	blt.n	8111458 <__gethex+0x3d4>
 8111428:	6861      	ldr	r1, [r4, #4]
 811142a:	9801      	ldr	r0, [sp, #4]
 811142c:	3101      	adds	r1, #1
 811142e:	f7fd fe4f 	bl	810f0d0 <_Balloc>
 8111432:	4681      	mov	r9, r0
 8111434:	b918      	cbnz	r0, 811143e <__gethex+0x3ba>
 8111436:	4b1a      	ldr	r3, [pc, #104]	@ (81114a0 <__gethex+0x41c>)
 8111438:	4602      	mov	r2, r0
 811143a:	2184      	movs	r1, #132	@ 0x84
 811143c:	e6c5      	b.n	81111ca <__gethex+0x146>
 811143e:	6922      	ldr	r2, [r4, #16]
 8111440:	3202      	adds	r2, #2
 8111442:	f104 010c 	add.w	r1, r4, #12
 8111446:	0092      	lsls	r2, r2, #2
 8111448:	300c      	adds	r0, #12
 811144a:	f7fc fec0 	bl	810e1ce <memcpy>
 811144e:	4621      	mov	r1, r4
 8111450:	9801      	ldr	r0, [sp, #4]
 8111452:	f7fd fe7d 	bl	810f150 <_Bfree>
 8111456:	464c      	mov	r4, r9
 8111458:	6923      	ldr	r3, [r4, #16]
 811145a:	1c5a      	adds	r2, r3, #1
 811145c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8111460:	6122      	str	r2, [r4, #16]
 8111462:	2201      	movs	r2, #1
 8111464:	615a      	str	r2, [r3, #20]
 8111466:	e7be      	b.n	81113e6 <__gethex+0x362>
 8111468:	6922      	ldr	r2, [r4, #16]
 811146a:	455a      	cmp	r2, fp
 811146c:	dd0b      	ble.n	8111486 <__gethex+0x402>
 811146e:	2101      	movs	r1, #1
 8111470:	4620      	mov	r0, r4
 8111472:	f7ff fda0 	bl	8110fb6 <rshift>
 8111476:	f8d8 3008 	ldr.w	r3, [r8, #8]
 811147a:	3701      	adds	r7, #1
 811147c:	42bb      	cmp	r3, r7
 811147e:	f6ff aee0 	blt.w	8111242 <__gethex+0x1be>
 8111482:	2501      	movs	r5, #1
 8111484:	e7c2      	b.n	811140c <__gethex+0x388>
 8111486:	f016 061f 	ands.w	r6, r6, #31
 811148a:	d0fa      	beq.n	8111482 <__gethex+0x3fe>
 811148c:	4453      	add	r3, sl
 811148e:	f1c6 0620 	rsb	r6, r6, #32
 8111492:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8111496:	f7fd ff0d 	bl	810f2b4 <__hi0bits>
 811149a:	42b0      	cmp	r0, r6
 811149c:	dbe7      	blt.n	811146e <__gethex+0x3ea>
 811149e:	e7f0      	b.n	8111482 <__gethex+0x3fe>
 81114a0:	08111921 	.word	0x08111921

081114a4 <L_shift>:
 81114a4:	f1c2 0208 	rsb	r2, r2, #8
 81114a8:	0092      	lsls	r2, r2, #2
 81114aa:	b570      	push	{r4, r5, r6, lr}
 81114ac:	f1c2 0620 	rsb	r6, r2, #32
 81114b0:	6843      	ldr	r3, [r0, #4]
 81114b2:	6804      	ldr	r4, [r0, #0]
 81114b4:	fa03 f506 	lsl.w	r5, r3, r6
 81114b8:	432c      	orrs	r4, r5
 81114ba:	40d3      	lsrs	r3, r2
 81114bc:	6004      	str	r4, [r0, #0]
 81114be:	f840 3f04 	str.w	r3, [r0, #4]!
 81114c2:	4288      	cmp	r0, r1
 81114c4:	d3f4      	bcc.n	81114b0 <L_shift+0xc>
 81114c6:	bd70      	pop	{r4, r5, r6, pc}

081114c8 <__match>:
 81114c8:	b530      	push	{r4, r5, lr}
 81114ca:	6803      	ldr	r3, [r0, #0]
 81114cc:	3301      	adds	r3, #1
 81114ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 81114d2:	b914      	cbnz	r4, 81114da <__match+0x12>
 81114d4:	6003      	str	r3, [r0, #0]
 81114d6:	2001      	movs	r0, #1
 81114d8:	bd30      	pop	{r4, r5, pc}
 81114da:	f813 2b01 	ldrb.w	r2, [r3], #1
 81114de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 81114e2:	2d19      	cmp	r5, #25
 81114e4:	bf98      	it	ls
 81114e6:	3220      	addls	r2, #32
 81114e8:	42a2      	cmp	r2, r4
 81114ea:	d0f0      	beq.n	81114ce <__match+0x6>
 81114ec:	2000      	movs	r0, #0
 81114ee:	e7f3      	b.n	81114d8 <__match+0x10>

081114f0 <__hexnan>:
 81114f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81114f4:	680b      	ldr	r3, [r1, #0]
 81114f6:	6801      	ldr	r1, [r0, #0]
 81114f8:	115e      	asrs	r6, r3, #5
 81114fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 81114fe:	f013 031f 	ands.w	r3, r3, #31
 8111502:	b087      	sub	sp, #28
 8111504:	bf18      	it	ne
 8111506:	3604      	addne	r6, #4
 8111508:	2500      	movs	r5, #0
 811150a:	1f37      	subs	r7, r6, #4
 811150c:	4682      	mov	sl, r0
 811150e:	4690      	mov	r8, r2
 8111510:	9301      	str	r3, [sp, #4]
 8111512:	f846 5c04 	str.w	r5, [r6, #-4]
 8111516:	46b9      	mov	r9, r7
 8111518:	463c      	mov	r4, r7
 811151a:	9502      	str	r5, [sp, #8]
 811151c:	46ab      	mov	fp, r5
 811151e:	784a      	ldrb	r2, [r1, #1]
 8111520:	1c4b      	adds	r3, r1, #1
 8111522:	9303      	str	r3, [sp, #12]
 8111524:	b342      	cbz	r2, 8111578 <__hexnan+0x88>
 8111526:	4610      	mov	r0, r2
 8111528:	9105      	str	r1, [sp, #20]
 811152a:	9204      	str	r2, [sp, #16]
 811152c:	f7ff fd95 	bl	811105a <__hexdig_fun>
 8111530:	2800      	cmp	r0, #0
 8111532:	d151      	bne.n	81115d8 <__hexnan+0xe8>
 8111534:	9a04      	ldr	r2, [sp, #16]
 8111536:	9905      	ldr	r1, [sp, #20]
 8111538:	2a20      	cmp	r2, #32
 811153a:	d818      	bhi.n	811156e <__hexnan+0x7e>
 811153c:	9b02      	ldr	r3, [sp, #8]
 811153e:	459b      	cmp	fp, r3
 8111540:	dd13      	ble.n	811156a <__hexnan+0x7a>
 8111542:	454c      	cmp	r4, r9
 8111544:	d206      	bcs.n	8111554 <__hexnan+0x64>
 8111546:	2d07      	cmp	r5, #7
 8111548:	dc04      	bgt.n	8111554 <__hexnan+0x64>
 811154a:	462a      	mov	r2, r5
 811154c:	4649      	mov	r1, r9
 811154e:	4620      	mov	r0, r4
 8111550:	f7ff ffa8 	bl	81114a4 <L_shift>
 8111554:	4544      	cmp	r4, r8
 8111556:	d952      	bls.n	81115fe <__hexnan+0x10e>
 8111558:	2300      	movs	r3, #0
 811155a:	f1a4 0904 	sub.w	r9, r4, #4
 811155e:	f844 3c04 	str.w	r3, [r4, #-4]
 8111562:	f8cd b008 	str.w	fp, [sp, #8]
 8111566:	464c      	mov	r4, r9
 8111568:	461d      	mov	r5, r3
 811156a:	9903      	ldr	r1, [sp, #12]
 811156c:	e7d7      	b.n	811151e <__hexnan+0x2e>
 811156e:	2a29      	cmp	r2, #41	@ 0x29
 8111570:	d157      	bne.n	8111622 <__hexnan+0x132>
 8111572:	3102      	adds	r1, #2
 8111574:	f8ca 1000 	str.w	r1, [sl]
 8111578:	f1bb 0f00 	cmp.w	fp, #0
 811157c:	d051      	beq.n	8111622 <__hexnan+0x132>
 811157e:	454c      	cmp	r4, r9
 8111580:	d206      	bcs.n	8111590 <__hexnan+0xa0>
 8111582:	2d07      	cmp	r5, #7
 8111584:	dc04      	bgt.n	8111590 <__hexnan+0xa0>
 8111586:	462a      	mov	r2, r5
 8111588:	4649      	mov	r1, r9
 811158a:	4620      	mov	r0, r4
 811158c:	f7ff ff8a 	bl	81114a4 <L_shift>
 8111590:	4544      	cmp	r4, r8
 8111592:	d936      	bls.n	8111602 <__hexnan+0x112>
 8111594:	f1a8 0204 	sub.w	r2, r8, #4
 8111598:	4623      	mov	r3, r4
 811159a:	f853 1b04 	ldr.w	r1, [r3], #4
 811159e:	f842 1f04 	str.w	r1, [r2, #4]!
 81115a2:	429f      	cmp	r7, r3
 81115a4:	d2f9      	bcs.n	811159a <__hexnan+0xaa>
 81115a6:	1b3b      	subs	r3, r7, r4
 81115a8:	f023 0303 	bic.w	r3, r3, #3
 81115ac:	3304      	adds	r3, #4
 81115ae:	3401      	adds	r4, #1
 81115b0:	3e03      	subs	r6, #3
 81115b2:	42b4      	cmp	r4, r6
 81115b4:	bf88      	it	hi
 81115b6:	2304      	movhi	r3, #4
 81115b8:	4443      	add	r3, r8
 81115ba:	2200      	movs	r2, #0
 81115bc:	f843 2b04 	str.w	r2, [r3], #4
 81115c0:	429f      	cmp	r7, r3
 81115c2:	d2fb      	bcs.n	81115bc <__hexnan+0xcc>
 81115c4:	683b      	ldr	r3, [r7, #0]
 81115c6:	b91b      	cbnz	r3, 81115d0 <__hexnan+0xe0>
 81115c8:	4547      	cmp	r7, r8
 81115ca:	d128      	bne.n	811161e <__hexnan+0x12e>
 81115cc:	2301      	movs	r3, #1
 81115ce:	603b      	str	r3, [r7, #0]
 81115d0:	2005      	movs	r0, #5
 81115d2:	b007      	add	sp, #28
 81115d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81115d8:	3501      	adds	r5, #1
 81115da:	2d08      	cmp	r5, #8
 81115dc:	f10b 0b01 	add.w	fp, fp, #1
 81115e0:	dd06      	ble.n	81115f0 <__hexnan+0x100>
 81115e2:	4544      	cmp	r4, r8
 81115e4:	d9c1      	bls.n	811156a <__hexnan+0x7a>
 81115e6:	2300      	movs	r3, #0
 81115e8:	f844 3c04 	str.w	r3, [r4, #-4]
 81115ec:	2501      	movs	r5, #1
 81115ee:	3c04      	subs	r4, #4
 81115f0:	6822      	ldr	r2, [r4, #0]
 81115f2:	f000 000f 	and.w	r0, r0, #15
 81115f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 81115fa:	6020      	str	r0, [r4, #0]
 81115fc:	e7b5      	b.n	811156a <__hexnan+0x7a>
 81115fe:	2508      	movs	r5, #8
 8111600:	e7b3      	b.n	811156a <__hexnan+0x7a>
 8111602:	9b01      	ldr	r3, [sp, #4]
 8111604:	2b00      	cmp	r3, #0
 8111606:	d0dd      	beq.n	81115c4 <__hexnan+0xd4>
 8111608:	f1c3 0320 	rsb	r3, r3, #32
 811160c:	f04f 32ff 	mov.w	r2, #4294967295
 8111610:	40da      	lsrs	r2, r3
 8111612:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8111616:	4013      	ands	r3, r2
 8111618:	f846 3c04 	str.w	r3, [r6, #-4]
 811161c:	e7d2      	b.n	81115c4 <__hexnan+0xd4>
 811161e:	3f04      	subs	r7, #4
 8111620:	e7d0      	b.n	81115c4 <__hexnan+0xd4>
 8111622:	2004      	movs	r0, #4
 8111624:	e7d5      	b.n	81115d2 <__hexnan+0xe2>

08111626 <__ascii_mbtowc>:
 8111626:	b082      	sub	sp, #8
 8111628:	b901      	cbnz	r1, 811162c <__ascii_mbtowc+0x6>
 811162a:	a901      	add	r1, sp, #4
 811162c:	b142      	cbz	r2, 8111640 <__ascii_mbtowc+0x1a>
 811162e:	b14b      	cbz	r3, 8111644 <__ascii_mbtowc+0x1e>
 8111630:	7813      	ldrb	r3, [r2, #0]
 8111632:	600b      	str	r3, [r1, #0]
 8111634:	7812      	ldrb	r2, [r2, #0]
 8111636:	1e10      	subs	r0, r2, #0
 8111638:	bf18      	it	ne
 811163a:	2001      	movne	r0, #1
 811163c:	b002      	add	sp, #8
 811163e:	4770      	bx	lr
 8111640:	4610      	mov	r0, r2
 8111642:	e7fb      	b.n	811163c <__ascii_mbtowc+0x16>
 8111644:	f06f 0001 	mvn.w	r0, #1
 8111648:	e7f8      	b.n	811163c <__ascii_mbtowc+0x16>

0811164a <_realloc_r>:
 811164a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811164e:	4680      	mov	r8, r0
 8111650:	4615      	mov	r5, r2
 8111652:	460c      	mov	r4, r1
 8111654:	b921      	cbnz	r1, 8111660 <_realloc_r+0x16>
 8111656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 811165a:	4611      	mov	r1, r2
 811165c:	f7fd bcac 	b.w	810efb8 <_malloc_r>
 8111660:	b92a      	cbnz	r2, 811166e <_realloc_r+0x24>
 8111662:	f7fd fc35 	bl	810eed0 <_free_r>
 8111666:	2400      	movs	r4, #0
 8111668:	4620      	mov	r0, r4
 811166a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811166e:	f000 f86b 	bl	8111748 <_malloc_usable_size_r>
 8111672:	4285      	cmp	r5, r0
 8111674:	4606      	mov	r6, r0
 8111676:	d802      	bhi.n	811167e <_realloc_r+0x34>
 8111678:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 811167c:	d8f4      	bhi.n	8111668 <_realloc_r+0x1e>
 811167e:	4629      	mov	r1, r5
 8111680:	4640      	mov	r0, r8
 8111682:	f7fd fc99 	bl	810efb8 <_malloc_r>
 8111686:	4607      	mov	r7, r0
 8111688:	2800      	cmp	r0, #0
 811168a:	d0ec      	beq.n	8111666 <_realloc_r+0x1c>
 811168c:	42b5      	cmp	r5, r6
 811168e:	462a      	mov	r2, r5
 8111690:	4621      	mov	r1, r4
 8111692:	bf28      	it	cs
 8111694:	4632      	movcs	r2, r6
 8111696:	f7fc fd9a 	bl	810e1ce <memcpy>
 811169a:	4621      	mov	r1, r4
 811169c:	4640      	mov	r0, r8
 811169e:	f7fd fc17 	bl	810eed0 <_free_r>
 81116a2:	463c      	mov	r4, r7
 81116a4:	e7e0      	b.n	8111668 <_realloc_r+0x1e>

081116a6 <__ascii_wctomb>:
 81116a6:	4603      	mov	r3, r0
 81116a8:	4608      	mov	r0, r1
 81116aa:	b141      	cbz	r1, 81116be <__ascii_wctomb+0x18>
 81116ac:	2aff      	cmp	r2, #255	@ 0xff
 81116ae:	d904      	bls.n	81116ba <__ascii_wctomb+0x14>
 81116b0:	228a      	movs	r2, #138	@ 0x8a
 81116b2:	601a      	str	r2, [r3, #0]
 81116b4:	f04f 30ff 	mov.w	r0, #4294967295
 81116b8:	4770      	bx	lr
 81116ba:	700a      	strb	r2, [r1, #0]
 81116bc:	2001      	movs	r0, #1
 81116be:	4770      	bx	lr

081116c0 <_raise_r>:
 81116c0:	291f      	cmp	r1, #31
 81116c2:	b538      	push	{r3, r4, r5, lr}
 81116c4:	4605      	mov	r5, r0
 81116c6:	460c      	mov	r4, r1
 81116c8:	d904      	bls.n	81116d4 <_raise_r+0x14>
 81116ca:	2316      	movs	r3, #22
 81116cc:	6003      	str	r3, [r0, #0]
 81116ce:	f04f 30ff 	mov.w	r0, #4294967295
 81116d2:	bd38      	pop	{r3, r4, r5, pc}
 81116d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 81116d6:	b112      	cbz	r2, 81116de <_raise_r+0x1e>
 81116d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 81116dc:	b94b      	cbnz	r3, 81116f2 <_raise_r+0x32>
 81116de:	4628      	mov	r0, r5
 81116e0:	f000 f830 	bl	8111744 <_getpid_r>
 81116e4:	4622      	mov	r2, r4
 81116e6:	4601      	mov	r1, r0
 81116e8:	4628      	mov	r0, r5
 81116ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 81116ee:	f000 b817 	b.w	8111720 <_kill_r>
 81116f2:	2b01      	cmp	r3, #1
 81116f4:	d00a      	beq.n	811170c <_raise_r+0x4c>
 81116f6:	1c59      	adds	r1, r3, #1
 81116f8:	d103      	bne.n	8111702 <_raise_r+0x42>
 81116fa:	2316      	movs	r3, #22
 81116fc:	6003      	str	r3, [r0, #0]
 81116fe:	2001      	movs	r0, #1
 8111700:	e7e7      	b.n	81116d2 <_raise_r+0x12>
 8111702:	2100      	movs	r1, #0
 8111704:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8111708:	4620      	mov	r0, r4
 811170a:	4798      	blx	r3
 811170c:	2000      	movs	r0, #0
 811170e:	e7e0      	b.n	81116d2 <_raise_r+0x12>

08111710 <raise>:
 8111710:	4b02      	ldr	r3, [pc, #8]	@ (811171c <raise+0xc>)
 8111712:	4601      	mov	r1, r0
 8111714:	6818      	ldr	r0, [r3, #0]
 8111716:	f7ff bfd3 	b.w	81116c0 <_raise_r>
 811171a:	bf00      	nop
 811171c:	100000ac 	.word	0x100000ac

08111720 <_kill_r>:
 8111720:	b538      	push	{r3, r4, r5, lr}
 8111722:	4d07      	ldr	r5, [pc, #28]	@ (8111740 <_kill_r+0x20>)
 8111724:	2300      	movs	r3, #0
 8111726:	4604      	mov	r4, r0
 8111728:	4608      	mov	r0, r1
 811172a:	4611      	mov	r1, r2
 811172c:	602b      	str	r3, [r5, #0]
 811172e:	f7f2 f947 	bl	81039c0 <_kill>
 8111732:	1c43      	adds	r3, r0, #1
 8111734:	d102      	bne.n	811173c <_kill_r+0x1c>
 8111736:	682b      	ldr	r3, [r5, #0]
 8111738:	b103      	cbz	r3, 811173c <_kill_r+0x1c>
 811173a:	6023      	str	r3, [r4, #0]
 811173c:	bd38      	pop	{r3, r4, r5, pc}
 811173e:	bf00      	nop
 8111740:	10000830 	.word	0x10000830

08111744 <_getpid_r>:
 8111744:	f7f2 b934 	b.w	81039b0 <_getpid>

08111748 <_malloc_usable_size_r>:
 8111748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 811174c:	1f18      	subs	r0, r3, #4
 811174e:	2b00      	cmp	r3, #0
 8111750:	bfbc      	itt	lt
 8111752:	580b      	ldrlt	r3, [r1, r0]
 8111754:	18c0      	addlt	r0, r0, r3
 8111756:	4770      	bx	lr

08111758 <_init>:
 8111758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811175a:	bf00      	nop
 811175c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811175e:	bc08      	pop	{r3}
 8111760:	469e      	mov	lr, r3
 8111762:	4770      	bx	lr

08111764 <_fini>:
 8111764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8111766:	bf00      	nop
 8111768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811176a:	bc08      	pop	{r3}
 811176c:	469e      	mov	lr, r3
 811176e:	4770      	bx	lr
